// Code generated by "enumer -type=AccountStorageType,CharacterStorageType -output=enumer.go"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const (
	_AccountStorageTypeName_0      = "AccountData"
	_AccountStorageTypeLowerName_0 = "accountdata"
	_AccountStorageTypeName_1      = "AccountKeybinds"
	_AccountStorageTypeLowerName_1 = "accountkeybinds"
	_AccountStorageTypeName_2      = "AccountMacros"
	_AccountStorageTypeLowerName_2 = "accountmacros"
)

var (
	_AccountStorageTypeIndex_0 = [...]uint8{0, 11}
	_AccountStorageTypeIndex_1 = [...]uint8{0, 15}
	_AccountStorageTypeIndex_2 = [...]uint8{0, 13}
)

func (i AccountStorageType) String() string {
	switch {
	case i == 0:
		return _AccountStorageTypeName_0
	case i == 2:
		return _AccountStorageTypeName_1
	case i == 4:
		return _AccountStorageTypeName_2
	default:
		return fmt.Sprintf("AccountStorageType(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AccountStorageTypeNoOp() {
	var x [1]struct{}
	_ = x[AccountData-(0)]
	_ = x[AccountKeybinds-(2)]
	_ = x[AccountMacros-(4)]
}

var _AccountStorageTypeValues = []AccountStorageType{AccountData, AccountKeybinds, AccountMacros}

var _AccountStorageTypeNameToValueMap = map[string]AccountStorageType{
	_AccountStorageTypeName_0[0:11]:      AccountData,
	_AccountStorageTypeLowerName_0[0:11]: AccountData,
	_AccountStorageTypeName_1[0:15]:      AccountKeybinds,
	_AccountStorageTypeLowerName_1[0:15]: AccountKeybinds,
	_AccountStorageTypeName_2[0:13]:      AccountMacros,
	_AccountStorageTypeLowerName_2[0:13]: AccountMacros,
}

var _AccountStorageTypeNames = []string{
	_AccountStorageTypeName_0[0:11],
	_AccountStorageTypeName_1[0:15],
	_AccountStorageTypeName_2[0:13],
}

// AccountStorageTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AccountStorageTypeString(s string) (AccountStorageType, error) {
	if val, ok := _AccountStorageTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AccountStorageTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AccountStorageType values", s)
}

// AccountStorageTypeValues returns all values of the enum
func AccountStorageTypeValues() []AccountStorageType {
	return _AccountStorageTypeValues
}

// AccountStorageTypeStrings returns a slice of all String values of the enum
func AccountStorageTypeStrings() []string {
	strs := make([]string, len(_AccountStorageTypeNames))
	copy(strs, _AccountStorageTypeNames)
	return strs
}

// IsAAccountStorageType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AccountStorageType) IsAAccountStorageType() bool {
	for _, v := range _AccountStorageTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

const (
	_CharacterStorageTypeName_0      = "CharacterConfig"
	_CharacterStorageTypeLowerName_0 = "characterconfig"
	_CharacterStorageTypeName_1      = "CharacterKeybinds"
	_CharacterStorageTypeLowerName_1 = "characterkeybinds"
	_CharacterStorageTypeName_2      = "CharacterMacrosCharacterLayoutCharacterChat"
	_CharacterStorageTypeLowerName_2 = "charactermacroscharacterlayoutcharacterchat"
)

var (
	_CharacterStorageTypeIndex_0 = [...]uint8{0, 15}
	_CharacterStorageTypeIndex_1 = [...]uint8{0, 17}
	_CharacterStorageTypeIndex_2 = [...]uint8{0, 15, 30, 43}
)

func (i CharacterStorageType) String() string {
	switch {
	case i == 1:
		return _CharacterStorageTypeName_0
	case i == 3:
		return _CharacterStorageTypeName_1
	case 5 <= i && i <= 7:
		i -= 5
		return _CharacterStorageTypeName_2[_CharacterStorageTypeIndex_2[i]:_CharacterStorageTypeIndex_2[i+1]]
	default:
		return fmt.Sprintf("CharacterStorageType(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CharacterStorageTypeNoOp() {
	var x [1]struct{}
	_ = x[CharacterConfig-(1)]
	_ = x[CharacterKeybinds-(3)]
	_ = x[CharacterMacros-(5)]
	_ = x[CharacterLayout-(6)]
	_ = x[CharacterChat-(7)]
}

var _CharacterStorageTypeValues = []CharacterStorageType{CharacterConfig, CharacterKeybinds, CharacterMacros, CharacterLayout, CharacterChat}

var _CharacterStorageTypeNameToValueMap = map[string]CharacterStorageType{
	_CharacterStorageTypeName_0[0:15]:       CharacterConfig,
	_CharacterStorageTypeLowerName_0[0:15]:  CharacterConfig,
	_CharacterStorageTypeName_1[0:17]:       CharacterKeybinds,
	_CharacterStorageTypeLowerName_1[0:17]:  CharacterKeybinds,
	_CharacterStorageTypeName_2[0:15]:       CharacterMacros,
	_CharacterStorageTypeLowerName_2[0:15]:  CharacterMacros,
	_CharacterStorageTypeName_2[15:30]:      CharacterLayout,
	_CharacterStorageTypeLowerName_2[15:30]: CharacterLayout,
	_CharacterStorageTypeName_2[30:43]:      CharacterChat,
	_CharacterStorageTypeLowerName_2[30:43]: CharacterChat,
}

var _CharacterStorageTypeNames = []string{
	_CharacterStorageTypeName_0[0:15],
	_CharacterStorageTypeName_1[0:17],
	_CharacterStorageTypeName_2[0:15],
	_CharacterStorageTypeName_2[15:30],
	_CharacterStorageTypeName_2[30:43],
}

// CharacterStorageTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CharacterStorageTypeString(s string) (CharacterStorageType, error) {
	if val, ok := _CharacterStorageTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CharacterStorageTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CharacterStorageType values", s)
}

// CharacterStorageTypeValues returns all values of the enum
func CharacterStorageTypeValues() []CharacterStorageType {
	return _CharacterStorageTypeValues
}

// CharacterStorageTypeStrings returns a slice of all String values of the enum
func CharacterStorageTypeStrings() []string {
	strs := make([]string, len(_CharacterStorageTypeNames))
	copy(strs, _CharacterStorageTypeNames)
	return strs
}

// IsACharacterStorageType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CharacterStorageType) IsACharacterStorageType() bool {
	for _, v := range _CharacterStorageTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
