in 0 vec4 bone_weights
in 1 vec3 position
in 2 vec3 normal
in 3 ivec4 bones
in 4 vec2 uv1
in 5 vec2 uv2

out 0 vec3 position
out 1 vec3 diffuse
out 2 vec3 normal
out 3 vec2 uv1
out 4 vec2 uv2

struct light
{
	vec4 ambient
	vec4 diffuse
	vec4 position
	vec2 attenuation
	vec2 data
}

constant 0 mesh_block
{
	mat4 tex1_matrix
	mat4 tex2_matrix
	ivec4 combiners
	ivec4 settings
	vec4 color
	vec3 fog_color
	float alpha_test
}

constant 1 model_block
{
	mat4 v
	mat4 mv
	mat4 mvp
	ivec4 lights_count
	light lights[4]
	mat4 bone_mats[256]
}

constant 2 scene_block
{
	vec4 light_direction
	vec4 specular_color
	vec4 diffuse_color
	vec4 ambient_color
	vec2 fog_range
}

#define M2_VERTEX_DIFFUSE                   0x1
#define M2_VERTEX_DIFFUSE_ENV_MAP           0x2
#define M2_VERTEX_DIFFUSE_2TEX              0x3
#define M2_VERTEX_DIFFUSE_ENV_MAP0_2TEX     0x4
#define M2_VERTEX_DIFFUSE_ENV_MAP_2TEX      0x5
#define M2_VERTEX_DIFFUSE_DUAL_ENV_MAP_2TEX 0x6

vec2 diffuse_coord(vec2 uv, mat4 mat)
{
	return mul(vec4(uv - 0.5, 0.0, 1.0), mat).xy;
}

vec2 env_coord(vec3 position, vec3 normal)
{
	return 0.5 + 0.5 * reflect(normalize(position), normal).xy;
}

vs_output gfx_main(vs_input gfx_input)
{
	vs_output gfx_output;
	vec4 position_fixed = vec4(gfx_input.position.xyz, 1.0);
	vec4 normal_fixed = vec4(gfx_input.normal.xyz, 0.0);
	if (settings.z != 0)
	{
		mat4 bone_mat = mul(bone_mats[gfx_input.bones.x], gfx_input.bone_weights.x)
		              + mul(bone_mats[gfx_input.bones.y], gfx_input.bone_weights.y)
		              + mul(bone_mats[gfx_input.bones.z], gfx_input.bone_weights.z)
		              + mul(bone_mats[gfx_input.bones.w], gfx_input.bone_weights.w);
		position_fixed = mul(position_fixed, bone_mat);
		normal_fixed = mul(normal_fixed, bone_mat);
	}
	normal_fixed = normalize(normal_fixed);
	gfx_output.gfx_position = mul(position_fixed, mvp);
	gfx_output.position = mul(position_fixed, mv).xyz;
	gfx_output.normal = normalize(mul(normal_fixed, mv).xyz);
	switch (combiners.x)
	{
		case M2_VERTEX_DIFFUSE:
			gfx_output.uv1 = diffuse_coord(gfx_input.uv1, tex1_matrix);
			break;
		case M2_VERTEX_DIFFUSE_ENV_MAP:
			gfx_output.uv1 = env_coord(gfx_output.position, gfx_output.normal);
			break;
		case M2_VERTEX_DIFFUSE_2TEX:
			gfx_output.uv1 = diffuse_coord(gfx_input.uv1, tex1_matrix);
			gfx_output.uv2 = diffuse_coord(gfx_input.uv2, tex2_matrix);
			break;
		case M2_VERTEX_DIFFUSE_ENV_MAP0_2TEX:
			gfx_output.uv1 = env_coord(gfx_output.position, gfx_output.normal);
			gfx_output.uv2 = diffuse_coord(gfx_input.uv2, tex2_matrix);
			break;
		case M2_VERTEX_DIFFUSE_ENV_MAP_2TEX:
			gfx_output.uv1 = diffuse_coord(gfx_input.uv1, tex1_matrix);
			gfx_output.uv2 = env_coord(gfx_output.position, gfx_output.normal);
			break;
		case M2_VERTEX_DIFFUSE_DUAL_ENV_MAP_2TEX:
			gfx_output.uv1 = env_coord(gfx_output.position, gfx_output.normal);
			gfx_output.uv2 = gfx_output.uv1;
			break;
		default:
			gfx_output.uv1 = diffuse_coord(gfx_input.uv1, tex1_matrix);
			gfx_output.uv2 = diffuse_coord(gfx_input.uv2, tex2_matrix);
			break;
	}
	if (settings.y == 0)
	{
		vec3 light_dir = normalize(mul(-light_direction, v).xyz);
		vec3 light_input = diffuse_color.xyz * clamp(dot(gfx_output.normal, light_dir), 0.0, 1.0) + ambient_color.xyz;
		for (int i = 0; i < lights_count.x; ++i)
		{
			float diffuse_factor;
			if (lights[i].data.y == 0.0)
			{
				vec3 light_dir = lights[i].position.xyz;
				diffuse_factor = clamp(dot(normal_fixed.xyz, normalize(light_dir)), 0.0, 1.0);
			}
			else
			{
				vec3 light_dir = lights[i].position.xyz - position_fixed.xyz;
				diffuse_factor = clamp(dot(normal_fixed.xyz, normalize(light_dir)), 0.0, 1.0);
				float len = length(light_dir);
				len *= 0.817102;
				diffuse_factor /= len * (0.7 + len * 0.03);
			}
			light_input += lights[i].ambient.rgb * lights[i].ambient.a + lights[i].diffuse.rgb * lights[i].diffuse.a * diffuse_factor * lights[i].data.x;
		}
		gfx_output.diffuse = clamp(light_input, 0.0, 1.0);
	}
	else
	{
		gfx_output.diffuse = vec3(1.0, 1.0, 1.0);
	}
	return gfx_output;
}
