in 0 vec2 uv

out 0 vec4 color
out 1 vec4 normal
out 2 vec4 position

sampler 0 2d color_tex
sampler 1 2d normal_tex
sampler 2 2d position_tex

constant 1 model_block
{
	mat4 mvp
	vec2 screen_size
}

#define FXAA_EDGE_THRESHOLD (1.0 / 4.0)
#define FXAA_THRESHOLD_MIN (1.0 / 128.0)
#define FXAA_THRESHOLD_MAX (10.0)

float luma_fn(vec3 color)
{
	return dot(color, vec3(0.299, 0.587, 0.114));
}

fs_output gfx_main(fs_input gfx_input)
{
	fs_output gfx_output;
	vec4 NW;
	vec4 NE;
	vec4 SW;
	vec4 SE;
	vec4 M;
	NW.rgb = gfx_sample_offset(color_tex, gfx_input.uv, ivec2(-1, -1)).rgb;
	NE.rgb = gfx_sample_offset(color_tex, gfx_input.uv, ivec2( 1, -1)).rgb;
	SW.rgb = gfx_sample_offset(color_tex, gfx_input.uv, ivec2(-1,  1)).rgb;
	SE.rgb = gfx_sample_offset(color_tex, gfx_input.uv, ivec2( 1,  1)).rgb;
	M.rgb = gfx_sample(color_tex, gfx_input.uv).rgb;
	NW.a = luma_fn(NW.rgb);
	NE.a = luma_fn(NE.rgb);
	SW.a = luma_fn(SW.rgb);
	SE.a = luma_fn(SE.rgb);
	M.a = luma_fn(M.rgb);
	float luma_min = min(M.a, min(min(NW.a, NE.a), min(SW.a, SE.a)));
	float luma_max = max(M.a, max(max(NW.a, NE.a), max(SW.a, SE.a)));
	vec2 dir = vec2(-(NW.a + NE.a) + (SW.a + SE.a), (NW.a + SW.a) - (NE.a + SE.a));
	float reduce = max((NW.a + NE.a + SW.a + SE.a) * (0.25 * FXAA_EDGE_THRESHOLD), FXAA_THRESHOLD_MIN);
	float rcp_min = 1.0 / (min(abs(dir.x), abs(dir.y)) + reduce);
	dir = min(vec2(FXAA_THRESHOLD_MAX, FXAA_THRESHOLD_MAX), max(vec2(-FXAA_THRESHOLD_MAX, -FXAA_THRESHOLD_MAX), dir * rcp_min)) / screen_size;
	vec3 a1 = gfx_sample(color_tex, gfx_input.uv + dir * (1.0 / 3.0 - 0.5)).rgb;
	vec3 a2 = gfx_sample(color_tex, gfx_input.uv + dir * (2.0 / 3.0 - 0.5)).rgb;
	vec3 rgb1 = (a1 + a2) * 0.5;
	vec3 rgb2 = rgb1 * 0.5;
	vec3 b1 = gfx_sample(color_tex, gfx_input.uv - dir * 0.5).rgb;
	vec3 b2 = gfx_sample(color_tex, gfx_input.uv + dir * 0.5).rgb;
	rgb2 += (b1 + b2) * 0.25;
	float luma = luma_fn(rgb2);
	if (luma < luma_min || luma > luma_max)
		gfx_output.color = vec4(rgb1, 1.0);
	else
		gfx_output.color = vec4(rgb2, 1.0);
	gfx_output.normal = gfx_sample(normal_tex, gfx_input.uv);
	gfx_output.position = gfx_sample(position_tex, gfx_input.uv);
	return gfx_output;
}
