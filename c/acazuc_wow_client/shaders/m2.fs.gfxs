in 0 vec3 position
in 1 vec3 diffuse
in 2 vec3 normal
in 3 vec2 uv1
in 4 vec2 uv2

out 0 vec4 color
out 1 vec4 normal
out 2 vec4 position

struct light
{
	vec4 ambient
	vec4 diffuse
	vec4 position
	vec2 attenuation
	vec2 data
}

constant 0 mesh_block
{
	mat4 tex1_matrix
	mat4 tex2_matrix
	ivec4 combiners
	ivec4 settings
	vec4 color
	vec3 fog_color
	float alpha_test
}

constant 1 model_block
{
	mat4 v
	mat4 mv
	mat4 mvp
	ivec4 lights_count
	light lights[4]
	mat4 bone_mats[256]
}

constant 2 scene_block
{
	vec4 light_direction
	vec4 specular_color
	vec4 diffuse_color
	vec4 ambient_color
	vec2 fog_range
}

sampler 0 2d tex1
sampler 1 2d tex2

#define M2_FRAGMENT_OPAQUE                  0x1
#define M2_FRAGMENT_DIFFUSE                 0x2
#define M2_FRAGMENT_DECAL                   0x3
#define M2_FRAGMENT_ADD                     0x4
#define M2_FRAGMENT_DIFFUSE2X               0x5
#define M2_FRAGMENT_FADE                    0x6
#define M2_FRAGMENT_OPAQUE_OPAQUE           0x7
#define M2_FRAGMENT_OPAQUE_MOD              0x8
#define M2_FRAGMENT_OPAQUE_DECAL            0x9
#define M2_FRAGMENT_OPAQUE_ADD              0xa
#define M2_FRAGMENT_OPAQUE_MOD2X            0xb
#define M2_FRAGMENT_OPAQUE_FADE             0xc
#define M2_FRAGMENT_DIFFUSE_2TEX_OPAQUE     0xd
#define M2_FRAGMENT_DIFFUSE_2TEX            0xe
#define M2_FRAGMENT_DIFFUSE_2TEX_DECAL      0xf
#define M2_FRAGMENT_DIFFUSE_2TEX_ADD        0x10
#define M2_FRAGMENT_DIFFUSE_2TEX_2X         0x11
#define M2_FRAGMENT_DIFFUSE_2TEX_FADE       0x12
#define M2_FRAGMENT_DECAL_OPAQUE            0x13
#define M2_FRAGMENT_DECAL_MOD               0x14
#define M2_FRAGMENT_DECAL_DECAL             0x15
#define M2_FRAGMENT_DECAL_ADD               0x16
#define M2_FRAGMENT_DECAL_MOD2X             0x17
#define M2_FRAGMENT_DECAL_FADE              0x18
#define M2_FRAGMENT_ADD_OPAQUE              0x19
#define M2_FRAGMENT_ADD_MOD                 0x1a
#define M2_FRAGMENT_ADD_DECAL               0x1b
#define M2_FRAGMENT_ADD_ADD                 0x1c
#define M2_FRAGMENT_ADD_MOD2X               0x1d
#define M2_FRAGMENT_ADD_FADE                0x1e
#define M2_FRAGMENT_DIFFUSE_2TEX_OPAQUE_2X  0x1f
//#define M2_FRAGMENT_DIFFUSE_2TEX_2X         0x20
#define M2_FRAGMENT_DIFFUSE_2TEX_DECAL_2X   0x21
#define M2_FRAGMENT_DIFFUSE_2TEX_ADD_2X     0x22
#define M2_FRAGMENT_DIFFUSE_2TEX_4X         0x23
#define M2_FRAGMENT_DIFFUSE_2TEX_FADE_2X    0x24

fs_output gfx_main(fs_input gfx_input)
{
	fs_output gfx_output;
	vec4 color_input = vec4(gfx_input.diffuse, 1.0);
	color_input *= color;
	vec4 tex1_color = gfx_sample(tex1, gfx_input.uv1);
	vec4 color_output;
	switch (combiners.y)
	{
		case M2_FRAGMENT_OPAQUE:
			color_output.rgb = color_input.rgb * tex1_color.rgb;
			color_output.a = color_input.a;
			break;
		case M2_FRAGMENT_DIFFUSE:
			color_output = color_input * tex1_color;
			break;
		case M2_FRAGMENT_DECAL:
			color_output.rgb = mix(color_input.rgb, tex1_color.rgb, color_input.a);
			color_output.a = color_input.a;
			break;
		case M2_FRAGMENT_ADD:
			color_output = color_input + tex1_color;
			break;
		case M2_FRAGMENT_DIFFUSE2X:
			color_output = color_input * tex1_color * 2.0;
			break;
		case M2_FRAGMENT_FADE:
			color_output.rgb = mix(tex1_color.rgb, color_input.rgb, color_input.a);
			color_output.a = color_input.a;
			break;
		case M2_FRAGMENT_OPAQUE_OPAQUE:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = color_input.rgb * tex1_color.rgb * tex2_color.rgb;
			color_output.a = color_input.a;
			break;
		}
		case M2_FRAGMENT_OPAQUE_MOD:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = color_input.rgb * tex1_color.rgb * tex2_color.rgb;
			color_output.a = color_input.a * tex2_color.a;
			break;
		}
		case M2_FRAGMENT_OPAQUE_DECAL:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = (color_input.rgb * tex1_color.rgb - tex2_color.rgb) * tex1_color.a + tex2_color.rgb;
			color_output.a = color_input.a;
			break;
		}
		case M2_FRAGMENT_OPAQUE_ADD:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = color_input.rgb * tex1_color.rgb + tex2_color.rgb;
			color_output.a = color_input.a * tex2_color.a;
			break;
		}
		case M2_FRAGMENT_OPAQUE_MOD2X:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = color_input.rgb * tex1_color.rgb * tex2_color.rgb * 2.0;
			color_output.a = color_input.a * tex2_color.a * 2.0;
			break;
		}
		case M2_FRAGMENT_OPAQUE_FADE:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = (tex2_color.rgb - tex1_color.rgb * color_input.rgb) * color_input.a + tex1_color.rgb;
			color_output.a = color_input.a;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX_OPAQUE:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = color_input.rgb * tex1_color.rgb * tex2_color.rgb;
			color_output.a = color_input.a * tex1_color.a;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output = color_input * tex1_color * tex2_color;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX_DECAL:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			vec4 tmp = color_input * tex1_color;
			tmp.rgb -= tex2_color.rgb;
			color_output.rgb = tmp.rgb * tmp.a + tex2_color.rgb;
			color_output.a = tmp.a;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX_ADD:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output = color_input * tex1_color + tex2_color;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX_2X:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output = color_input * tex1_color * tex2_color * 2.0;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX_FADE:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			vec4 tmp = tex1_color * color_input;
			color_output.rgb = mix(tex2_color.rgb, tmp.rgb, color_input.a);
			color_output.a = tmp.a;
			break;
		}
		case M2_FRAGMENT_DECAL_OPAQUE:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = mix(color_input.rgb, tex1_color.rgb, color_input.a) * tex2_color.rgb;
			color_output.a = color_input.a;
			break;
		}
		case M2_FRAGMENT_DECAL_MOD:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = ((color_input.rgb - tex1_color.rgb) * color_input.a + tex1_color.rgb) * tex2_color.rgb;
			color_output.a = color_input.a * tex2_color.a;
			break;
		}
		case M2_FRAGMENT_DECAL_DECAL:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = tex1_color.a * (mix(color_input.rgb, tex1_color.rgb, color_input.a) - tex2_color.rgb) * tex2_color.rgb;
			color_output.a = color_input.a;
			break;
		}
		case M2_FRAGMENT_DECAL_ADD:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = tex2_color.rgb + mix(color_input.rgb, tex1_color.rgb, color_input.a);
			color_output.a = color_input.a + tex2_color.a;
			break;
		}
		case M2_FRAGMENT_DECAL_MOD2X:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = tex2_color.rgb * mix(color_input.rgb, tex1_color.rgb, color_input.a);
			color_output.a = color_input.a * tex2_color.a;
			color_output = color_output * 2.0;
			break;
		}
		case M2_FRAGMENT_DECAL_FADE:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			vec3 tmp = (color_input.rgb - tex1_color.rgb) * color_input.a + tex1_color.rgb;
			color_output.rgb = mix(tex2_color.rgb, tmp, color_input.a);
			color_output.a = color_input.a;
			break;
		}
		case M2_FRAGMENT_ADD_OPAQUE:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = (color_input.rgb + tex1_color.rgb) * tex2_color.rgb;
			color_output.a = color_input.a + tex1_color.a;
			break;
		}
		case M2_FRAGMENT_ADD_MOD:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output = (color_input + tex1_color) * tex2_color;
			break;
		}
		case M2_FRAGMENT_ADD_DECAL:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = (color_input.rgb + tex1_color.rgb - tex2_color.rgb) * tex1_color.a + tex2_color.rgb;
			color_output.a = color_input.a + tex1_color.a;
			break;
		}
		case M2_FRAGMENT_ADD_ADD:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output = color_input + tex1_color + tex2_color;
			break;
		}
		case M2_FRAGMENT_ADD_MOD2X:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output = (color_input + tex1_color) * tex2_color * 2.0;
			break;
		}
		case M2_FRAGMENT_ADD_FADE:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			vec3 tmp = color_input.rgb + tex1_color.rgb;
			color_output.rgb = mix(tex2_color.rgb, tmp, color_input.a);
			color_output.a = color_input.a + tex1_color.a;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX_OPAQUE_2X:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output.rgb = color_input.rgb * tex1_color.rgb * tex2_color.rgb * 2.0;
			color_output.a = color_input.a * tex1_color.a;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX_DECAL_2X:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			vec4 tmp = color_input * tex1_color * 2.0;
			color_output.rgb = mix(tmp.rgb, tex2_color.rgb, tmp.a);
			color_output.a = tmp.a;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX_ADD_2X:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output = color_input * tex1_color * 2.0 + tex2_color;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX_4X:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			color_output = color_input * tex1_color * tex2_color * 4.0;
			break;
		}
		case M2_FRAGMENT_DIFFUSE_2TEX_FADE_2X:
		{
			vec4 tex2_color = gfx_sample(tex2, gfx_input.uv2);
			vec3 tmp = color_input.rgb * tex1_color.rgb * 2.0;
			color_output.rgb = mix(tex2_color.rgb, tmp, color_input.a);
			color_output.a = color_input.a * tex1_color.a;
			break;
		}
		default:
			color_output = vec4(0.0, 1.0, 0.0, 1.0);
			break;
	}
	if (color_output.a < alpha_test)
		discard;
	if (settings.x == 0)
	{
		float fog_factor = clamp((length(gfx_input.position) - fog_range.x) / (fog_range.y - fog_range.x), 0.0, 1.0);
		color_output.rgb = mix(color_output.rgb, fog_color, fog_factor);
	}
	color_output = clamp(color_output, 0.0, 1.0);
	gfx_output.color = color_output;
	gfx_output.normal = vec4(gfx_input.normal, 1.0);
	gfx_output.position = vec4(gfx_input.position, 1.0);
	return gfx_output;
}
