in 0 vec3 position
in 1 vec3 normal
in 2 vec2 uv
in 3 vec4 color

out 0 vec3 position
out 1 vec3 light_dir
out 2 vec3 normal
out 3 vec4 color
out 4 vec3 light
out 5 vec2 uv1
out 6 vec2 uv2

constant 0 mesh_block
{
	vec4 emissive_color
	ivec4 combiners
	ivec4 settings
	float alpha_test
}

constant 1 model_block
{
	mat4 v
	mat4 mv
	mat4 mvp
}

constant 2 scene_block
{
	vec4 light_direction
	vec4 specular_color
	vec4 diffuse_color
	vec4 ambient_color
	vec4 fog_color
	vec2 fog_range
}

vs_output gfx_main(vs_input gfx_input)
{
	vs_output gfx_output;
	vec4 position_fixed = vec4(gfx_input.position.xyz, 1.0);
	vec4 normal_fixed = vec4(gfx_input.normal.xyz, 0.0);
	gfx_output.gfx_position = mul(position_fixed, mvp);
	gfx_output.position = mul(position_fixed, mv).xyz;
	switch (combiners.x)
	{
		case 0:
			gfx_output.uv1 = gfx_input.uv;
			break;
		case 1:
			break;
		case 2:
			break;
	}
	if (settings.x != 0)
		gfx_output.color = gfx_input.color.bgra;
	else
		gfx_output.color = vec4(1.0, 1.0, 1.0, 1.0);
	gfx_output.normal = normalize(mul(normal_fixed, mv).xyz);
	if (settings.y == 0)
	{
		gfx_output.light_dir = normalize(mul(-light_direction, v).xyz);
		float diffuse_factor = clamp(dot(gfx_output.normal, gfx_output.light_dir), 0.0, 1.0);
		gfx_output.light = ambient_color.xyz + diffuse_color.xyz * diffuse_factor + emissive_color.xyz;
	}
	else
	{
		gfx_output.light = vec3(1.0, 1.0, 1.0);
	}
	return gfx_output;
}
