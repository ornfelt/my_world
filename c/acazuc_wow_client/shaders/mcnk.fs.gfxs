in 0 vec3 position
in 1 vec3 light_dir
in 2 vec3 normal
in 3 vec2 uv0
in 4 vec2 uv1
in 5 vec2 uv2
in 6 vec2 uv3
in 7 vec2 uv4
in 8 int id
in 9 vec4 shadow_position

out 0 vec4 color
out 1 vec4 normal
out 2 vec4 position

struct mesh_block_st
{
	vec2 uv_offset0
	vec2 uv_offset1
	vec2 uv_offset2
	vec2 uv_offset3
	uvec4 textures[2]
}

constant 0 mesh_block
{
	mesh_block_st mesh_blocks[256]
}

constant 1 model_block
{
	mat4 v
	mat4 mv
	mat4 mvp
	mat4 shadow_mvp
	float offset_time
}

constant 2 scene_block
{
	vec4 light_direction
	vec4 ambient_color
	vec4 diffuse_color
	vec4 specular_color
	vec4 fog_color
	vec2 fog_range
	ivec4 settings
}

sampler 0 2d_array alpha_map
sampler 1 2d shadow_tex
sampler 2 2d textures[14]

fs_output gfx_main(fs_input gfx_input)
{
	fs_output gfx_output;
	gfx_output.color = vec4(gfx_input.normal, 1.0);
	gfx_output.normal = vec4(gfx_input.normal, 1.0);
	gfx_output.position = vec4(gfx_input.position, 1.0);
	vec4 alpha = gfx_sample(alpha_map, vec3(gfx_input.uv0, gfx_input.id));
	vec3 t1 = gfx_sample_array(textures, mesh_blocks[gfx_input.id].textures[0].x, gfx_input.uv1).rgb;
	vec3 t2 = gfx_sample_array(textures, mesh_blocks[gfx_input.id].textures[0].y, gfx_input.uv2).rgb;
	vec3 t3 = gfx_sample_array(textures, mesh_blocks[gfx_input.id].textures[0].z, gfx_input.uv3).rgb;
	vec3 t4 = gfx_sample_array(textures, mesh_blocks[gfx_input.id].textures[0].w, gfx_input.uv4).rgb;
	vec3 diff_mix = mix(mix(mix(t1, t2, alpha.r), t3, alpha.g), t4, alpha.b);
	//diff_mix = alpha.rgb;
	vec4 s1 = gfx_sample_array(textures, mesh_blocks[gfx_input.id].textures[1].x, gfx_input.uv1);
	vec4 s2 = gfx_sample_array(textures, mesh_blocks[gfx_input.id].textures[1].y, gfx_input.uv2);
	vec4 s3 = gfx_sample_array(textures, mesh_blocks[gfx_input.id].textures[1].z, gfx_input.uv3);
	vec4 s4 = gfx_sample_array(textures, mesh_blocks[gfx_input.id].textures[1].w, gfx_input.uv4);
	vec4 spec_mix = mix(mix(mix(s1, s2, alpha.r), s3, alpha.g), s4, alpha.b);
	float specular_factor = pow(clamp(dot(normalize(-gfx_input.position), normalize(reflect(-gfx_input.light_dir, gfx_input.normal))), 0.0, 1.0), 10.0);
	float shadow;
	if (settings.x == 1)
	{
		vec3 shadow_coord = gfx_input.shadow_position.xyz / gfx_input.shadow_position.w;
		float shadow_sample = gfx_sample(shadow_tex, 0.5 + 0.5 * shadow_coord.xy).x;
		shadow = clamp(shadow_sample - shadow_coord.z, 0, 1) > 0.5 ? 1.0 : 0.0;
	}
	else
	{
		shadow = alpha.a;
	}
	specular_factor = specular_factor * shadow;
	vec3 specular = clamp(specular_factor * specular_color.xyz, 0.0, 1.0);
	specular *= spec_mix.rgb * spec_mix.a;
	specular *= 2.0;
	vec3 diffuse = diffuse_color.xyz * clamp(dot(gfx_input.normal, gfx_input.light_dir), 0.0, shadow);
	vec3 color = clamp(diffuse + ambient_color.xyz, 0.0, 1.0);
	float fog_factor = clamp((length(gfx_input.position) - fog_range.x) / (fog_range.y - fog_range.x), 0.0, 1.0);
	gfx_output.color = vec4(mix(diff_mix * color + specular, fog_color.xyz, fog_factor), 1.0);
	gfx_output.normal = vec4(gfx_input.normal, 1.0);
	gfx_output.position = vec4(gfx_input.position, 1.0);
	return gfx_output;
}
