in 0 vec2 uv

out 0 vec4 color
out 1 vec4 normal
out 2 vec4 position

sampler 0 2d color_tex
sampler 1 2d normal_tex
sampler 2 2d position_tex

mat3 sx = mat3
(
	 1.0,  2.0,  1.0,
	 0.0,  0.0,  0.0,
	-1.0, -2.0, -1.0
);

mat3 sy = mat3
(
	1.0, 0.0, -1.0,
	2.0, 0.0, -2.0,
	1.0, 0.0, -1.0
);

float delta(vec3 a, vec3 b)
{
	return dot(a, b);
}

float sobel(vec2 uv)
{
	float position = gfx_sample(position_tex, uv).z;
	vec3 normal = gfx_sample(normal_tex, uv).xyz;
	vec3 positions[3];
	vec3 normals[3];
	positions[0] = vec3
	(
		gfx_sample_offset(position_tex, uv, ivec2(-1, -1)).z,
		gfx_sample_offset(position_tex, uv, ivec2(-1,  0)).z,
		gfx_sample_offset(position_tex, uv, ivec2(-1,  1)).z
	);
	positions[1] = vec3
	(
		gfx_sample_offset(position_tex, uv, ivec2( 0, -1)).z,
		position,
		gfx_sample_offset(position_tex, uv, ivec2( 0,  1)).z
	);
	positions[2] = vec3
	(
		gfx_sample_offset(position_tex, uv, ivec2( 1, -1)).z,
		gfx_sample_offset(position_tex, uv, ivec2( 1,  0)).z,
		gfx_sample_offset(position_tex, uv, ivec2( 1,  1)).z
	);
	normals[0] = vec3
	(
		dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2(-1, -1)).xyz),
		dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2(-1,  0)).xyz),
		dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2(-1,  1)).xyz)
	);
	normals[1] = vec3
	(
		dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2( 0, -1)).xyz),
		0,
		dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2( 0,  1)).xyz)
	);
	normals[2] = vec3
	(
		dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2( 1, -1)).xyz),
		dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2( 1,  0)).xyz),
		dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2( 1,  1)).xyz)
	);
	positions[0] -= vec3(position);
	positions[1] -= vec3(position);
	positions[2] -= vec3(position);
	positions[0] = clamp(-positions[0] * 0.1 * (vec3(1.0) - normals[0]), 0, 1);
	positions[1] = clamp(-positions[1] * 0.1 * (vec3(1.0) - normals[1]), 0, 1);
	positions[2] = clamp(-positions[2] * 0.1 * (vec3(1.0) - normals[2]), 0, 1);
	float gx = dot(sx[0], positions[0]) + dot(sx[1], positions[1]) + dot(sx[2], positions[2]);
	float gy = dot(sy[0], positions[0]) + dot(sy[1], positions[1]) + dot(sy[2], positions[2]);
	return sqrt(gx * gx + gy * gy) > 0.5 ? 1.0 : 0.0;
}

fs_output gfx_main(fs_input gfx_input)
{
	fs_output gfx_output;
	float value = sobel(gfx_input.uv);
	gfx_output.color = vec4(vec3(gfx_sample(color_tex, gfx_input.uv).rgb * (1.0 - value)), 1.0);
	gfx_output.normal = gfx_sample(normal_tex, gfx_input.uv);
	gfx_output.position = gfx_sample(position_tex, gfx_input.uv);
	return gfx_output;
}
