in 0 vec2 uv

out 0 vec4 color
out 1 vec4 normal
out 2 vec4 position

sampler 0 2d color_tex
sampler 1 2d normal_tex
sampler 2 2d position_tex

mat3 sx = mat3
(
	 1.0,  2.0,  1.0,
	 0.0,  0.0,  0.0,
	-1.0, -2.0, -1.0
);

mat3 sy = mat3
(
	1.0, 0.0, -1.0,
	2.0, 0.0, -2.0,
	1.0, 0.0, -1.0
);

float sobel_position(vec2 uv)
{
	vec3 samples[3];
	samples[0] = vec3(
			gfx_sample_offset(position_tex, uv, ivec2(-1, -1)).z,
			gfx_sample_offset(position_tex, uv, ivec2(-1,  0)).z,
			gfx_sample_offset(position_tex, uv, ivec2(-1,  1)).z);
	samples[1] = vec3(
			gfx_sample_offset(position_tex, uv, ivec2( 0, -1)).z,
			0,
			gfx_sample_offset(position_tex, uv, ivec2( 0,  1)).z);
	samples[2] = vec3(
			gfx_sample_offset(position_tex, uv, ivec2( 1, -1)).z,
			gfx_sample_offset(position_tex, uv, ivec2( 1,  0)).z,
			gfx_sample_offset(position_tex, uv, ivec2( 1,  1)).z);
	/*float divisor = 100.0;
	samples[0] /= divisor;
	samples[1] /= divisor;
	samples[2] /= divisor;*/
	float gx = dot(sx[0], samples[0]) + dot(sx[1], samples[1]) + dot(sx[2], samples[2]);
	float gy = dot(sy[0], samples[0]) + dot(sy[1], samples[1]) + dot(sy[2], samples[2]);
	return clamp(sqrt(gx * gx + gy * gy), 0.0, 1.0);
}

float sobel_normal(vec2 uv)
{
	vec4 normal = gfx_sample(normal_tex, uv);
	vec3 samples[3];
	samples[0] = vec3(
			dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2(-1, -1)).xyz),
			dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2(-1,  0)).xyz),
			dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2(-1,  1)).xyz));
	samples[1] = vec3(
			dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2( 0, -1)).xyz),
			0,
			dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2( 0,  1)).xyz));
	samples[2] = vec3(
			dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2( 1, -1)).xyz),
			dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2( 1,  0)).xyz),
			dot(normal.xyz, gfx_sample_offset(normal_tex, uv, ivec2( 1,  1)).xyz));
	float gx = dot(sx[0], samples[0]) + dot(sx[1], samples[1]) + dot(sx[2], samples[2]);
	float gy = dot(sy[0], samples[0]) + dot(sy[1], samples[1]) + dot(sy[2], samples[2]);
	return clamp(sqrt(gx * gx + gy * gy), 0, 1);
}

fs_output gfx_main(fs_input gfx_input)
{
	fs_output gfx_output;
	float sobel = sobel_normal(gfx_input.uv);
	//float sobel = sobel_position(gfx_input.uv);
	gfx_output.color = vec4(vec3(gfx_sample(color_tex, gfx_input.uv).rgb * (1.0 - sobel)), 1.0);
	gfx_output.normal = gfx_sample(normal_tex, gfx_input.uv);
	gfx_output.position = gfx_sample(position_tex, gfx_input.uv);
	return gfx_output;
}
