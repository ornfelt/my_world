#ifndef PERFORMANCE_H
#define PERFORMANCE_H

#include <pthread.h>
#include <stdint.h>

enum performance_category
{
	PERFORMANCE_AABB_RENDER,
	PERFORMANCE_ADT_CULL,
	PERFORMANCE_ADT_OBJECTS_CULL,
	PERFORMANCE_COLLISIONS,
	PERFORMANCE_COLLISIONS_RENDER,
	PERFORMANCE_MCNK_CULL,
	PERFORMANCE_MCNK_RENDER,
	PERFORMANCE_MCLQ_CULL,
	PERFORMANCE_MCLQ_RENDER,
	PERFORMANCE_M2_BONES_RENDER,
	PERFORMANCE_M2_COLLISIONS_RENDER,
	PERFORMANCE_M2_CULL,
	PERFORMANCE_M2_LIGHTS_RENDER,
	PERFORMANCE_M2_PARTICLES_RENDER,
	PERFORMANCE_M2_RENDER,
	PERFORMANCE_M2_RIBBONS_RENDER,
	PERFORMANCE_SKYBOX_RENDER,
	PERFORMANCE_TAXI_RENDER,
	PERFORMANCE_TEXT_RENDER,
	PERFORMANCE_WDL_CULL,
	PERFORMANCE_WDL_RENDER,
	PERFORMANCE_WMO_COLLISIONS_RENDER,
	PERFORMANCE_WMO_CULL,
	PERFORMANCE_WMO_LIGHTS_RENDER,
	PERFORMANCE_WMO_LIQUIDS_RENDER,
	PERFORMANCE_WMO_PORTALS_RENDER,
	PERFORMANCE_WMO_RENDER,
	PERFORMANCE_LAST
};

#ifdef WITH_PERFORMANCE
# define PERFORMANCE_VAR_NAME(type) performance_##type##_section
# define PERFORMANCE_BEGIN(type) uint64_t PERFORMANCE_VAR_NAME(type) = nanotime();
# define PERFORMANCE_END(type) performance_add(PERFORMANCE_##type, nanotime() - PERFORMANCE_VAR_NAME(type));
#else
# define PERFORMANCE_BEGIN(type)
# define PERFORMANCE_END(type)
#endif

struct performance_report
{
	uint64_t min;
	uint64_t max;
	uint64_t sum;
	uint64_t samples;
	pthread_mutex_t mutex;
};

extern struct performance_report g_performances[PERFORMANCE_LAST];

void performance_init(void);
void performance_reset(void);
void performance_dump(void);
void performance_add(enum performance_category category, uint64_t time);

#endif
