/**************************************************************************
 *
 * Copyright 2007 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/* cleaned up headers from mesa files:
 * p_state.h
 * p_defines.h
 */

#ifndef MESA_PIPE_H
#define MESA_PIPE_H

#define PIPE_CLEAR_DEPTH   (1 << 0)
#define PIPE_CLEAR_STENCIL (1 << 1)
#define PIPE_CLEAR_COLOR0  (1 << 2)
#define PIPE_CLEAR_COLOR1  (1 << 3)
#define PIPE_CLEAR_COLOR2  (1 << 4)
#define PIPE_CLEAR_COLOR3  (1 << 5)

#define PIPE_MAX_ATTRIBS   32
#define PIPE_MAX_VIEWPORTS 16

enum pipe_blendfactor
{
	PIPE_BLENDFACTOR_ONE = 1,
	PIPE_BLENDFACTOR_SRC_COLOR,
	PIPE_BLENDFACTOR_SRC_ALPHA,
	PIPE_BLENDFACTOR_DST_ALPHA,
	PIPE_BLENDFACTOR_DST_COLOR,
	PIPE_BLENDFACTOR_SRC_ALPHA_SATURATE,
	PIPE_BLENDFACTOR_CONST_COLOR,
	PIPE_BLENDFACTOR_CONST_ALPHA,
	PIPE_BLENDFACTOR_SRC1_COLOR,
	PIPE_BLENDFACTOR_SRC1_ALPHA,

	PIPE_BLENDFACTOR_ZERO = 0x11,
	PIPE_BLENDFACTOR_INV_SRC_COLOR,
	PIPE_BLENDFACTOR_INV_SRC_ALPHA,
	PIPE_BLENDFACTOR_INV_DST_ALPHA,
	PIPE_BLENDFACTOR_INV_DST_COLOR,

	PIPE_BLENDFACTOR_INV_CONST_COLOR = 0x17,
	PIPE_BLENDFACTOR_INV_CONST_ALPHA,
	PIPE_BLENDFACTOR_INV_SRC1_COLOR,
	PIPE_BLENDFACTOR_INV_SRC1_ALPHA,
};

enum pipe_blend_func
{
	PIPE_BLEND_ADD,
	PIPE_BLEND_SUBTRACT,
	PIPE_BLEND_REVERSE_SUBTRACT,
	PIPE_BLEND_MIN,
	PIPE_BLEND_MAX,
};

enum pipe_logicop
{
	PIPE_LOGICOP_CLEAR,
	PIPE_LOGICOP_NOR,
	PIPE_LOGICOP_AND_INVERTED,
	PIPE_LOGICOP_COPY_INVERTED,
	PIPE_LOGICOP_AND_REVERSE,
	PIPE_LOGICOP_INVERT,
	PIPE_LOGICOP_XOR,
	PIPE_LOGICOP_NAND,
	PIPE_LOGICOP_AND,
	PIPE_LOGICOP_EQUIV,
	PIPE_LOGICOP_NOOP,
	PIPE_LOGICOP_OR_INVERTED,
	PIPE_LOGICOP_COPY,
	PIPE_LOGICOP_OR_REVERSE,
	PIPE_LOGICOP_OR,
	PIPE_LOGICOP_SET,
};

#define PIPE_MASK_R      (0x01)
#define PIPE_MASK_G      (0x02)
#define PIPE_MASK_B      (0x04)
#define PIPE_MASK_A      (0x08)
#define PIPE_MASK_RGBA   (0x0F)
#define PIPE_MASK_Z      (0x10)
#define PIPE_MASK_S      (0x20)
#define PIPE_MASK_ZS     (0x30)
#define PIPE_MASK_RGBAZS (PIPE_MASK_RGBA | PIPE_MASK_ZS)

enum pipe_compare_func
{
	PIPE_FUNC_NEVER,
	PIPE_FUNC_LESS,
	PIPE_FUNC_EQUAL,
	PIPE_FUNC_LEQUAL,
	PIPE_FUNC_GREATER,
	PIPE_FUNC_NOTEQUAL,
	PIPE_FUNC_GEQUAL,
	PIPE_FUNC_ALWAYS,
};

enum
{
	PIPE_POLYGON_MODE_FILL,
	PIPE_POLYGON_MODE_LINE,
	PIPE_POLYGON_MODE_POINT,
};

#define PIPE_FACE_NONE           (0)
#define PIPE_FACE_FRONT          (1)
#define PIPE_FACE_BACK           (2)
#define PIPE_FACE_FRONT_AND_BACK (PIPE_FACE_FRONT | PIPE_FACE_BACK)

enum pipe_stencil_op
{
	PIPE_STENCIL_OP_KEEP,
	PIPE_STENCIL_OP_ZERO,
	PIPE_STENCIL_OP_REPLACE,
	PIPE_STENCIL_OP_INCR,
	PIPE_STENCIL_OP_DECR,
	PIPE_STENCIL_OP_INCR_WRAP,
	PIPE_STENCIL_OP_DECR_WRAP,
	PIPE_STENCIL_OP_INVERT,
};

enum pipe_texture_target
{
	PIPE_BUFFER,
	PIPE_TEXTURE_1D,
	PIPE_TEXTURE_2D,
	PIPE_TEXTURE_3D,
	PIPE_TEXTURE_CUBE,
	PIPE_TEXTURE_RECT,
	PIPE_TEXTURE_1D_ARRAY,
	PIPE_TEXTURE_2D_ARRAY,
	PIPE_TEXTURE_CUBE_ARRAY,
	PIPE_MAX_TEXTURE_TYPES,
};

enum pipe_tex_face
{
	PIPE_TEX_FACE_POS_X,
	PIPE_TEX_FACE_NEG_X,
	PIPE_TEX_FACE_POS_Y,
	PIPE_TEX_FACE_NEG_Y,
	PIPE_TEX_FACE_POS_Z,
	PIPE_TEX_FACE_NEG_Z,
	PIPE_TEX_FACE_MAX,
};

enum pipe_tex_wrap
{
	PIPE_TEX_WRAP_REPEAT,
	PIPE_TEX_WRAP_CLAMP,
	PIPE_TEX_WRAP_CLAMP_TO_EDGE,
	PIPE_TEX_WRAP_CLAMP_TO_BORDER,
	PIPE_TEX_WRAP_MIRROR_REPEAT,
	PIPE_TEX_WRAP_MIRROR_CLAMP,
	PIPE_TEX_WRAP_MIRROR_CLAMP_TO_EDGE,
	PIPE_TEX_WRAP_MIRROR_CLAMP_TO_BORDER,
};

enum pipe_tex_mipfilter
{
	PIPE_TEX_MIPFILTER_NEAREST,
	PIPE_TEX_MIPFILTER_LINEAR,
	PIPE_TEX_MIPFILTER_NONE,
};

enum pipe_tex_filter
{
	PIPE_TEX_FILTER_NEAREST,
	PIPE_TEX_FILTER_LINEAR,
};

enum pipe_tex_compare
{
	PIPE_TEX_COMPARE_NONE,
	PIPE_TEX_COMPARE_R_TO_TEXTURE,
};

#define PIPE_CLEAR_DEPTH        (1 << 0)
#define PIPE_CLEAR_STENCIL      (1 << 1)
#define PIPE_CLEAR_COLOR0       (1 << 2)
#define PIPE_CLEAR_COLOR1       (1 << 3)
#define PIPE_CLEAR_COLOR2       (1 << 4)
#define PIPE_CLEAR_COLOR3       (1 << 5)
#define PIPE_CLEAR_COLOR4       (1 << 6)
#define PIPE_CLEAR_COLOR5       (1 << 7)
#define PIPE_CLEAR_COLOR6       (1 << 8)
#define PIPE_CLEAR_COLOR7       (1 << 9)
#define PIPE_CLEAR_COLOR        (PIPE_CLEAR_COLOR0 | PIPE_CLEAR_COLOR1 | \
                                 PIPE_CLEAR_COLOR2 | PIPE_CLEAR_COLOR3 | \
                                 PIPE_CLEAR_COLOR4 | PIPE_CLEAR_COLOR5 | \
                                 PIPE_CLEAR_COLOR6 | PIPE_CLEAR_COLOR7)
#define PIPE_CLEAR_DEPTHSTENCIL (PIPE_CLEAR_DEPTH | PIPE_CLEAR_STENCIL)

enum pipe_resource_usage
{
	PIPE_USAGE_DEFAULT,
	PIPE_USAGE_IMMUTABLE,
	PIPE_USAGE_DYNAMIC,
	PIPE_USAGE_STREAM,
	PIPE_USAGE_STAGING,
};

enum pipe_shader_type
{
	PIPE_SHADER_VERTEX,
	PIPE_SHADER_FRAGMENT,
	PIPE_SHADER_GEOMETRY,
	PIPE_SHADER_TESS_CTRL,
	PIPE_SHADER_TESS_EVAL,
	PIPE_SHADER_COMPUTE,
	PIPE_SHADER_TYPES,
	PIPE_SHADER_INVALID,
};

enum pipe_prim_type
{
	PIPE_PRIM_POINTS,
	PIPE_PRIM_LINES,
	PIPE_PRIM_LINE_LOOP,
	PIPE_PRIM_LINE_STRIP,
	PIPE_PRIM_TRIANGLES,
	PIPE_PRIM_TRIANGLE_STRIP,
	PIPE_PRIM_TRIANGLE_FAN,
	PIPE_PRIM_QUADS,
	PIPE_PRIM_QUAD_STRIP,
	PIPE_PRIM_POLYGON,
	PIPE_PRIM_LINES_ADJACENCY,
	PIPE_PRIM_LINE_STRIP_ADJACENCY,
	PIPE_PRIM_TRIANGLES_ADJACENCY,
	PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY,
	PIPE_PRIM_PATCHES,
	PIPE_PRIM_MAX,
};

enum pipe_swizzle
{
	PIPE_SWIZZLE_RED,
	PIPE_SWIZZLE_GREEN,
	PIPE_SWIZZLE_BLUE,
	PIPE_SWIZZLE_ALPHA,
	PIPE_SWIZZLE_ZERO,
	PIPE_SWIZZLE_ONE,
};


#endif
