/* clang-format off */

#include "util.hpp"

#include "wow_world_messages_cpp/wrath.hpp"

namespace wow_world_messages {
    namespace all {
        /* forward declare all struct read/write */
        ::wow_world_messages::all::Vector3d Vector3d_read(Reader& reader);
        void Vector3d_write(Writer& writer, const ::wow_world_messages::all::Vector3d& obj);

        /* forward declare all struct read/write */
        ::wow_world_messages::all::Vector2d Vector2d_read(Reader& reader);
        void Vector2d_write(Writer& writer, const ::wow_world_messages::all::Vector2d& obj);

    } // namespace all
} // namespace wow_world_messages

namespace wow_world_messages {
namespace wrath {
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::object_guid(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 0, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::object_guid() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 0);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::object_type(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 2, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::object_type() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 2);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::object_entry(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 3, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::object_entry() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 3);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::object_scale_x(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 4, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::object_scale_x() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 4);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_owner(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 6, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::item_owner() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 6);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_contained(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 8, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::item_contained() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 8);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_creator(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 10, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::item_creator() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 10);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_giftcreator(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 12, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::item_giftcreator() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 12);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_stack_count(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 14, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_stack_count() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 14);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_duration(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 15, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_duration() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 15);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_spell_charges(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 16, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_spell_charges() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 16);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_flags(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 21, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_flags() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 21);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_1_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 22, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_1_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 22);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_1_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 24, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_1_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 24);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_2_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 25, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_2_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 25);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_2_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 27, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_2_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 27);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_3_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 28, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_3_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 28);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_3_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 30, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_3_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 30);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_4_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 31, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_4_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 31);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_4_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 33, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_4_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 33);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_5_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 34, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_5_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 34);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_5_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 36, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_5_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 36);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_6_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 37, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_6_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 37);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_6_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 39, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_6_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 39);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_7_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 40, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_7_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 40);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_7_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 42, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_7_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 42);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_8_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 43, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_8_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 43);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_8_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 45, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_8_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 45);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_9_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 46, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_9_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 46);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_9_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 48, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_9_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 48);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_10_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 49, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_10_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 49);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_10_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 51, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_10_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 51);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_11_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 52, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_11_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 52);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_11_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 54, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_11_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 54);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_12_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 55, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_enchantment_12_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 55);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_enchantment_12_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 57, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::item_enchantment_12_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 57);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_property_seed(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 58, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_property_seed() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 58);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_random_properties_id(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 59, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_random_properties_id() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 59);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_durability(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 60, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_durability() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 60);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_maxdurability(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 61, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_maxdurability() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 61);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::item_create_played_time(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 62, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::item_create_played_time() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 62);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::container_num_slots(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 64, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::container_num_slots() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 64);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::container_slot_1(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 66, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::container_slot_1() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 66);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_charm(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 6, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::unit_charm() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 6);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_summon(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 8, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::unit_summon() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 8);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_critter(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 10, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::unit_critter() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 10);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_charmedby(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 12, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::unit_charmedby() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 12);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_summonedby(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 14, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::unit_summonedby() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 14);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_createdby(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 16, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::unit_createdby() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 16);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_target(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 18, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::unit_target() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 18);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_channel_object(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 20, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::unit_channel_object() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 20);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_channel_spell(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 22, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_channel_spell() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 22);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_bytes_0(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 23, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::unit_bytes_0() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 23);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_health(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 24, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_health() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 24);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 25, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_power1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 25);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 26, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_power2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 26);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power3(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 27, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_power3() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 27);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power4(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 28, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_power4() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 28);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 29, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_power5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 29);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power6(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 30, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_power6() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 30);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power7(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 31, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_power7() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 31);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxhealth(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 32, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_maxhealth() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 32);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxpower1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 33, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_maxpower1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 33);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxpower2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 34, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_maxpower2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 34);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxpower3(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 35, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_maxpower3() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 35);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxpower4(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 36, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_maxpower4() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 36);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxpower5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 37, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_maxpower5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 37);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxpower6(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 38, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_maxpower6() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 38);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxpower7(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 39, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_maxpower7() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 39);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power_regen_flat_modifier(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 40, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_power_regen_flat_modifier() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 40);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power_regen_interrupted_flat_modifier(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 47, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_power_regen_interrupted_flat_modifier() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 47);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_level(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 54, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_level() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 54);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_factiontemplate(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 55, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_factiontemplate() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 55);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_virtual_item_slot_id(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 56, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_virtual_item_slot_id() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 56);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_flags(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 59, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_flags() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 59);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_flags_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 60, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_flags_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 60);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_aurastate(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 61, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_aurastate() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 61);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_baseattacktime(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 62, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_baseattacktime() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 62);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_rangedattacktime(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 64, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_rangedattacktime() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 64);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_boundingradius(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 65, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_boundingradius() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 65);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_combatreach(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 66, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_combatreach() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 66);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_displayid(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 67, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_displayid() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 67);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_nativedisplayid(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 68, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_nativedisplayid() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 68);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_mountdisplayid(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 69, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_mountdisplayid() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 69);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_mindamage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 70, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_mindamage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 70);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxdamage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 71, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_maxdamage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 71);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_minoffhanddamage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 72, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_minoffhanddamage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 72);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxoffhanddamage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 73, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_maxoffhanddamage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 73);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_bytes_1(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 74, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::unit_bytes_1() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 74);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_petnumber(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 75, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_petnumber() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 75);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_pet_name_timestamp(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 76, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_pet_name_timestamp() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 76);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_petexperience(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 77, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_petexperience() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 77);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_petnextlevelexp(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 78, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_petnextlevelexp() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 78);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_dynamic_flags(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 79, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_dynamic_flags() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 79);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_mod_cast_speed(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 80, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_mod_cast_speed() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 80);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_created_by_spell(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 81, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_created_by_spell() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 81);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_npc_flags(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 82, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_npc_flags() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 82);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_npc_emotestate(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 83, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_npc_emotestate() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 83);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_strength(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 84, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_strength() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 84);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_agility(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 85, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_agility() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 85);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_stamina(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 86, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_stamina() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 86);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_intellect(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 87, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_intellect() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 87);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_spirit(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 88, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_spirit() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 88);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_posstat0(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 89, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_posstat0() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 89);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_posstat1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 90, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_posstat1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 90);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_posstat2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 91, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_posstat2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 91);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_posstat3(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 92, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_posstat3() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 92);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_posstat4(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 93, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_posstat4() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 93);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_negstat0(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 94, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_negstat0() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 94);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_negstat1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 95, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_negstat1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 95);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_negstat2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 96, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_negstat2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 96);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_negstat3(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 97, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_negstat3() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 97);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_negstat4(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 98, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_negstat4() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 98);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_resistances(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 99, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_resistances() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 99);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_resistancebuffmodspositive(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 106, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_resistancebuffmodspositive() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 106);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_resistancebuffmodsnegative(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 113, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_resistancebuffmodsnegative() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 113);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_base_mana(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 120, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_base_mana() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 120);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_base_health(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 121, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_base_health() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 121);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_bytes_2(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 122, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::unit_bytes_2() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 122);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_attack_power(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 123, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_attack_power() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 123);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_attack_power_mods(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 124, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::unit_attack_power_mods() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 124);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_attack_power_multiplier(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 125, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_attack_power_multiplier() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 125);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_ranged_attack_power(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 126, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_ranged_attack_power() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 126);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_ranged_attack_power_mods(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 127, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::unit_ranged_attack_power_mods() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 127);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_ranged_attack_power_multiplier(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 128, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_ranged_attack_power_multiplier() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 128);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_minrangeddamage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 129, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_minrangeddamage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 129);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxrangeddamage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 130, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_maxrangeddamage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 130);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power_cost_modifier(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 131, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::unit_power_cost_modifier() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 131);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_power_cost_multiplier(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 138, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_power_cost_multiplier() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 138);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_maxhealthmodifier(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 145, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_maxhealthmodifier() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 145);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::unit_hoverheight(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 146, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::unit_hoverheight() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 146);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_duel_arbiter(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 148, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::player_duel_arbiter() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 148);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_flags(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 150, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_flags() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 150);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_guildid(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 151, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_guildid() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 151);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_guildrank(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 152, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_guildrank() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 152);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_field_bytes(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 153, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::player_field_bytes() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 153);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_bytes_2(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 154, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::player_bytes_2() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 154);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_bytes_3(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 155, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::player_bytes_3() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 155);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_duel_team(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 156, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_duel_team() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 156);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_guild_timestamp(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 157, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_guild_timestamp() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 157);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_1_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 158, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_1_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 158);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_1_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 159, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_1_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 159);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_1_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 160, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_1_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 160);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_1_4(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 162, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_1_4() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 162);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_2_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 163, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_2_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 163);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_2_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 164, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_2_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 164);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_2_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 165, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_2_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 165);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_2_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 167, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_2_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 167);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_3_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 168, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_3_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 168);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_3_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 169, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_3_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 169);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_3_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 170, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_3_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 170);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_3_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 172, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_3_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 172);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_4_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 173, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_4_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 173);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_4_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 174, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_4_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 174);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_4_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 175, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_4_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 175);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_4_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 177, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_4_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 177);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_5_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 178, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_5_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 178);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_5_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 179, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_5_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 179);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_5_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 180, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_5_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 180);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_5_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 182, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_5_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 182);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_6_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 183, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_6_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 183);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_6_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 184, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_6_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 184);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_6_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 185, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_6_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 185);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_6_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 187, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_6_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 187);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_7_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 188, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_7_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 188);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_7_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 189, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_7_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 189);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_7_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 190, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_7_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 190);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_7_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 192, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_7_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 192);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_8_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 193, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_8_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 193);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_8_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 194, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_8_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 194);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_8_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 195, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_8_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 195);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_8_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 197, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_8_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 197);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_9_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 198, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_9_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 198);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_9_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 199, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_9_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 199);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_9_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 200, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_9_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 200);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_9_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 202, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_9_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 202);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_10_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 203, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_10_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 203);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_10_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 204, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_10_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 204);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_10_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 205, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_10_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 205);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_10_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 207, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_10_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 207);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_11_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 208, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_11_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 208);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_11_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 209, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_11_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 209);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_11_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 210, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_11_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 210);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_11_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 212, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_11_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 212);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_12_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 213, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_12_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 213);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_12_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 214, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_12_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 214);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_12_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 215, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_12_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 215);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_12_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 217, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_12_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 217);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_13_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 218, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_13_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 218);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_13_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 219, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_13_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 219);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_13_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 220, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_13_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 220);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_13_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 222, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_13_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 222);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_14_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 223, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_14_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 223);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_14_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 224, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_14_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 224);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_14_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 225, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_14_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 225);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_14_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 227, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_14_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 227);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_15_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 228, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_15_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 228);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_15_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 229, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_15_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 229);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_15_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 230, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_15_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 230);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_15_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 232, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_15_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 232);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_16_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 233, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_16_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 233);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_16_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 234, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_16_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 234);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_16_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 235, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_16_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 235);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_16_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 237, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_16_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 237);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_17_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 238, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_17_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 238);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_17_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 239, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_17_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 239);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_17_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 240, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_17_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 240);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_17_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 242, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_17_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 242);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_18_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 243, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_18_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 243);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_18_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 244, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_18_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 244);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_18_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 245, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_18_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 245);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_18_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 247, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_18_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 247);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_19_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 248, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_19_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 248);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_19_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 249, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_19_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 249);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_19_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 250, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_19_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 250);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_19_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 252, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_19_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 252);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_20_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 253, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_20_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 253);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_20_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 254, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_20_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 254);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_20_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 255, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_20_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 255);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_20_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 257, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_20_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 257);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_21_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 258, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_21_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 258);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_21_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 259, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_21_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 259);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_21_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 260, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_21_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 260);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_21_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 262, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_21_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 262);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_22_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 263, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_22_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 263);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_22_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 264, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_22_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 264);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_22_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 265, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_22_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 265);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_22_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 267, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_22_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 267);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_23_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 268, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_23_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 268);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_23_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 269, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_23_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 269);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_23_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 270, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_23_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 270);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_23_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 272, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_23_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 272);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_24_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 273, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_24_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 273);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_24_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 274, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_24_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 274);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_24_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 275, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_24_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 275);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_24_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 277, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_24_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 277);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_25_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 278, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_25_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 278);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_25_2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 279, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_25_2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 279);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_25_3(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 280, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_quest_log_25_3() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 280);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_quest_log_25_5(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 282, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_quest_log_25_5() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 282);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_visible_item_item(uint32_t index, uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 283 + index * 2 + 0, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_visible_item_item(uint32_t index) const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 283 + index * 2 + 0);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_visible_item_enchants(uint32_t index, uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 283 + index * 2 + 1, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_visible_item_enchants(uint32_t index) const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 283 + index * 2 + 1);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_chosen_title(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 321, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_chosen_title() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 321);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_fake_inebriation(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 322, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_fake_inebriation() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 322);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_field_inv(ItemSlot def, uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 324 + (static_cast<uint32_t>(def) * 2), value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::player_field_inv(ItemSlot def) const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 324 + (static_cast<uint32_t>(def) * 2));
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_farsight(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 624, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::player_farsight() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 624);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_known_titles(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 626, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::player_known_titles() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 626);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_known_titles1(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 628, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::player_known_titles1() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 628);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_known_titles2(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 630, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::player_known_titles2() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 630);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_known_currencies(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 632, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::player_known_currencies() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 632);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_xp(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 634, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_xp() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 634);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_next_level_xp(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 635, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_next_level_xp() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 635);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_skill_info_skill(uint32_t index, uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 636 + index * 3 + 0, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_skill_info_skill(uint32_t index) const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 636 + index * 3 + 0);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_skill_info_skill_step(uint32_t index, uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 636 + index * 3 + 0, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_skill_info_skill_step(uint32_t index) const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 636 + index * 3 + 0);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_skill_info_minimum(uint32_t index, uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 636 + index * 3 + 1, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_skill_info_minimum(uint32_t index) const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 636 + index * 3 + 1);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_skill_info_maximum(uint32_t index, uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 636 + index * 3 + 1, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_skill_info_maximum(uint32_t index) const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 636 + index * 3 + 1);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_skill_info_permanent_bonus(uint32_t index, uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 636 + index * 3 + 2, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_skill_info_permanent_bonus(uint32_t index) const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 636 + index * 3 + 2);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_skill_info_temporary_bonus(uint32_t index, uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 636 + index * 3 + 2, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_skill_info_temporary_bonus(uint32_t index) const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 636 + index * 3 + 2);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_character_points1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1020, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_character_points1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1020);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_character_points2(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1021, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_character_points2() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1021);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_track_creatures(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1022, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_track_creatures() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1022);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_track_resources(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1023, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_track_resources() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1023);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_block_percentage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1024, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_block_percentage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1024);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_dodge_percentage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1025, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_dodge_percentage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1025);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_parry_percentage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1026, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_parry_percentage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1026);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_expertise(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1027, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_expertise() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1027);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_offhand_expertise(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1028, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_offhand_expertise() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1028);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_crit_percentage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1029, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_crit_percentage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1029);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_ranged_crit_percentage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1030, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_ranged_crit_percentage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1030);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_offhand_crit_percentage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1031, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_offhand_crit_percentage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1031);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_spell_crit_percentage1(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1032, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_spell_crit_percentage1() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1032);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_shield_block(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1039, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_shield_block() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1039);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_shield_block_crit_percentage(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1040, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_shield_block_crit_percentage() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1040);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_explored_zones_1(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 1041, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::player_explored_zones_1() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 1041);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_rest_state_experience(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1169, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_rest_state_experience() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1169);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_coinage(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1170, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_coinage() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1170);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_mod_damage_done_pos(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1171, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_mod_damage_done_pos() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1171);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_mod_damage_done_neg(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1178, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_mod_damage_done_neg() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1178);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_mod_damage_done_pct(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1185, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_mod_damage_done_pct() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1185);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_mod_healing_done_pos(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1192, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_mod_healing_done_pos() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1192);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_mod_healing_pct(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1193, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_mod_healing_pct() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1193);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_mod_healing_done_pct(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1194, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_mod_healing_done_pct() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1194);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_mod_target_resistance(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1195, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_mod_target_resistance() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1195);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_mod_target_physical_resistance(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1196, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_mod_target_physical_resistance() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1196);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_features(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 1197, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::player_features() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 1197);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_ammo_id(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1198, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_ammo_id() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1198);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_self_res_spell(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1199, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_self_res_spell() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1199);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_pvp_medals(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1200, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_pvp_medals() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1200);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_buyback_price_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1201, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_buyback_price_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1201);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_buyback_timestamp_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1213, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_buyback_timestamp_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1213);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_kills(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 1225, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::player_kills() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 1225);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_today_contribution(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1226, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_today_contribution() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1226);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_yesterday_contribution(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1227, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_yesterday_contribution() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1227);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_lifetime_honorbale_kills(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1228, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_lifetime_honorbale_kills() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1228);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_bytes2_glow(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 1229, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::player_bytes2_glow() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 1229);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_watched_faction_index(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1230, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_watched_faction_index() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1230);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_combat_rating_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1231, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_combat_rating_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1231);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_arena_team_info_1_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1256, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_arena_team_info_1_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1256);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_honor_currency(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1277, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_honor_currency() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1277);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_arena_currency(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1278, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_arena_currency() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1278);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_max_level(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1279, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_max_level() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1279);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_daily_quests_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1280, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_daily_quests_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1280);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_rune_regen_1(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 1305, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::player_rune_regen_1() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 1305);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_no_reagent_cost_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1309, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_no_reagent_cost_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1309);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_glyph_slots_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1312, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_glyph_slots_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1312);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_glyphs_1(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1318, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_glyphs_1() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1318);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_glyphs_enabled(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1324, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_glyphs_enabled() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1324);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::player_pet_spell_power(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 1325, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::player_pet_spell_power() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 1325);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::object_created_by(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 6, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::object_created_by() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 6);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::game_object_displayid(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 8, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::game_object_displayid() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 8);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::game_object_flags(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 9, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::game_object_flags() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 9);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::game_object_parentrotation(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 10, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::game_object_parentrotation() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 10);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::game_object_dynamic(std::pair<uint16_t, uint16_t> value) {
    ::wow_world_messages::util::update_mask_set_two_shorts(headers, values, 14, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> UpdateMask::game_object_dynamic() const {
    return ::wow_world_messages::util::update_mask_get_two_shorts(headers, values, 14);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::game_object_faction(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 15, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::game_object_faction() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 15);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::game_object_level(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 16, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::game_object_level() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 16);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::game_object_bytes_1(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 17, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::game_object_bytes_1() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 17);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::dynamic_object_caster(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 6, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::dynamic_object_caster() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 6);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::dynamic_object_bytes(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 8, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::dynamic_object_bytes() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 8);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::dynamic_object_spellid(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 9, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::dynamic_object_spellid() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 9);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::dynamic_object_radius(float value) {
    ::wow_world_messages::util::update_mask_set_float(headers, values, 10, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT float UpdateMask::dynamic_object_radius() const {
    return ::wow_world_messages::util::update_mask_get_float(headers, values, 10);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::dynamic_object_casttime(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 11, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::dynamic_object_casttime() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 11);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::corpse_owner(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 6, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::corpse_owner() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 6);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::corpse_party(uint64_t value) {
    ::wow_world_messages::util::update_mask_set_u64(headers, values, 8, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t UpdateMask::corpse_party() const {
    return ::wow_world_messages::util::update_mask_get_u64(headers, values, 8);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::corpse_display_id(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 10, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::corpse_display_id() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 10);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::corpse_item(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 11, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::corpse_item() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 11);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::corpse_bytes_1(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 30, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::corpse_bytes_1() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 30);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::corpse_bytes_2(std::array<uint8_t, 4> value) {
    ::wow_world_messages::util::update_mask_set_bytes(headers, values, 31, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> UpdateMask::corpse_bytes_2() const {
    return ::wow_world_messages::util::update_mask_get_bytes(headers, values, 31);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::corpse_guild(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 32, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::corpse_guild() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 32);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::corpse_flags(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 33, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::corpse_flags() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 33);
}
WOW_WORLD_MESSAGES_CPP_EXPORT void UpdateMask::corpse_dynamic_flags(uint32_t value) {
    ::wow_world_messages::util::update_mask_set_u32(headers, values, 34, value);
}
WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t UpdateMask::corpse_dynamic_flags() const {
    return ::wow_world_messages::util::update_mask_get_u32(headers, values, 34);
}
constexpr auto UPDATE_MASK_HEADERS_LENGTH = 42;

static void update_mask_write(Writer& writer, const UpdateMask& mask) {
    uint8_t amount_of_headers = 0;

    for (uint8_t i = 0; i < UPDATE_MASK_HEADERS_LENGTH; ++i) {
        const uint32_t header = mask.headers[i];
        if (header != 0) {
            amount_of_headers = i + 1;
        }
    }

    writer.write_u8(amount_of_headers);

    for (int i = 0; i < amount_of_headers; ++i) {
        writer.write_u32(mask.headers[i]);
    }

    for (int i = 0; i < amount_of_headers; ++i) {
        const uint32_t header = mask.headers[i];
        for (int j = 0; j < 32; ++j) {
            if ((header & (static_cast<uint32_t>(1) << j)) != 0) {
                writer.write_u32(mask.values[i * 32 + j]);
            }
        }
    }
}

static UpdateMask update_mask_read(Reader& reader) {
    UpdateMask mask{};

    uint8_t amount_of_headers = reader.read_u8();

    for (int i = 0; i < amount_of_headers; ++i) {
        mask.headers[i] = reader.read_u32();
    }

    for (int i = 0; i < amount_of_headers; ++i) {
        uint32_t header = mask.headers[i];
        for (int j = 0; j < 32; ++j) {
            if ((header & (static_cast<uint32_t>(1) << j)) != 0) {
                mask.values[i * 32 + j] = reader.read_u32();
            }
        }
    }

    return mask;
}

static size_t update_mask_size(const UpdateMask& mask) {
    size_t max_header = 0;
    size_t amount_of_values = 0;

    size_t size = 1; /* initial u8 */

    for(int i = 0; i < UPDATE_MASK_HEADERS_LENGTH; ++i) {
        uint32_t header = mask.headers[i];
        for(int j = 0; j < 32; ++j) {
            if((header & (static_cast<uint32_t>(1) << j)) != 0) {
                max_header = i + 1;
                amount_of_values += 4;
            }
        }
    }

    return size + amount_of_values + (max_header * 4);
}

static void enchant_mask_write(Writer& writer, const EnchantMask& mask) {
    uint16_t header = 0;
    for (int i = 0; i < WRATH_ENCHANT_MASK_LENGTH; ++i) {
        if (mask.values[i] != 0) {
            header |= static_cast<uint16_t>(1) << i;
        }
    }

    writer.write_u16(header);

    for (const auto v : mask.values) {
        if (v != 0) {
            writer.write_u16(v);
        }
    }
}

static EnchantMask enchant_mask_read(Reader& reader) {
    uint16_t header = reader.read_u16();
    EnchantMask mask{};

    for (int i = 0; i < WRATH_ENCHANT_MASK_LENGTH; ++i) {
        if ((header & static_cast<uint16_t>(1) << i) != 0) {
            mask.values[i] = reader.read_u16();
        }
    }

    return mask;
}

static size_t enchant_mask_size(const EnchantMask& mask) {
    size_t size = 2; /* u16 header */
    for (int i = 0; i < WRATH_ENCHANT_MASK_LENGTH; ++i) {
        if (mask.values[i] != 0) {
            size += 2;
        }
    }

    return size;
}

AchievementDone AchievementDone_read(Reader& reader) {
    AchievementDone obj{};

    obj.achievement = reader.read_u32();

    obj.time = reader.read_u32();

    return obj;
}

static void AchievementDone_write(Writer& writer, const AchievementDone& obj) {
    writer.write_u32(obj.achievement);

    writer.write_u32(obj.time);

}

static size_t AchievementInProgress_size(const AchievementInProgress& obj) {
    return 20 + ::wow_world_messages::util::wwm_packed_guid_size(obj.counter) + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

AchievementInProgress AchievementInProgress_read(Reader& reader) {
    AchievementInProgress obj{};

    obj.achievement = reader.read_u32();

    obj.counter = reader.read_packed_guid();

    obj.player = reader.read_packed_guid();

    obj.timed_criteria_failed = reader.read_bool32();

    obj.progress_date = reader.read_u32();

    obj.time_since_progress = reader.read_u32();

    obj.time_since_progress2 = reader.read_u32();

    return obj;
}

static void AchievementInProgress_write(Writer& writer, const AchievementInProgress& obj) {
    writer.write_u32(obj.achievement);

    writer.write_packed_guid(obj.counter);

    writer.write_packed_guid(obj.player);

    writer.write_bool32(obj.timed_criteria_failed);

    writer.write_u32(obj.progress_date);

    writer.write_u32(obj.time_since_progress);

    writer.write_u32(obj.time_since_progress2);

}

ActionButton ActionButton_read(Reader& reader) {
    ActionButton obj{};

    obj.action = reader.read_u16();

    obj.action_type = reader.read_u8();

    obj.misc = reader.read_u8();

    return obj;
}

static void ActionButton_write(Writer& writer, const ActionButton& obj) {
    writer.write_u16(obj.action);

    writer.write_u8(obj.action_type);

    writer.write_u8(obj.misc);

}

static void Addon_write(Writer& writer, const Addon& obj) {
    writer.write_u8(obj.addon_type);

    writer.write_u8(obj.uses_crc);

    writer.write_bool8(obj.uses_diffent_public_key);

    writer.write_u32(obj.unknown1);

    writer.write_u8(obj.unknown2);

}

static std::vector<Addon> addon_array_read(Reader& reader) {
    (void)reader;
    /* Read for addon array is not implemented. If this is relevant for you create an issue on github. */
    abort();
}

static void addon_array_write(Writer& writer, const std::vector<Addon>& array) {
    for (const auto & v : array) {
        Addon_write(writer, v);
    }
}

static size_t ArenaTeamMember_size(const ArenaTeamMember& obj) {
    return 32 + obj.name.size();
}

ArenaTeamMember ArenaTeamMember_read(Reader& reader) {
    ArenaTeamMember obj{};

    obj.guid = reader.read_u64();

    obj.online = reader.read_bool8();

    obj.name = reader.read_cstring();

    obj.level = reader.read_u8();

    obj.class_type = static_cast<Class>(reader.read_u8());

    obj.games_played_this_week = reader.read_u32();

    obj.wins_this_week = reader.read_u32();

    obj.games_played_this_season = reader.read_u32();

    obj.wins_this_season = reader.read_u32();

    obj.personal_rating = reader.read_u32();

    return obj;
}

static void ArenaTeamMember_write(Writer& writer, const ArenaTeamMember& obj) {
    writer.write_u64(obj.guid);

    writer.write_bool8(obj.online);

    writer.write_cstring(obj.name);

    writer.write_u8(obj.level);

    writer.write_u8(static_cast<uint8_t>(obj.class_type));

    writer.write_u32(obj.games_played_this_week);

    writer.write_u32(obj.wins_this_week);

    writer.write_u32(obj.games_played_this_season);

    writer.write_u32(obj.wins_this_season);

    writer.write_u32(obj.personal_rating);

}

AuctionEnchantment AuctionEnchantment_read(Reader& reader) {
    AuctionEnchantment obj{};

    obj.enchant_id = reader.read_u32();

    obj.enchant_duration = reader.read_u32();

    obj.enchant_charges = reader.read_u32();

    return obj;
}

static void AuctionEnchantment_write(Writer& writer, const AuctionEnchantment& obj) {
    writer.write_u32(obj.enchant_id);

    writer.write_u32(obj.enchant_duration);

    writer.write_u32(obj.enchant_charges);

}

AuctionListItem AuctionListItem_read(Reader& reader) {
    AuctionListItem obj{};

    obj.id = reader.read_u32();

    obj.item = reader.read_u32();

    for (auto i = 0; i < 7; ++i) {
        obj.enchantments[i] = ::wow_world_messages::wrath::AuctionEnchantment_read(reader);
    }

    obj.item_random_property_id = reader.read_u32();

    obj.item_suffix_factor = reader.read_u32();

    obj.item_count = reader.read_u32();

    obj.item_charges = reader.read_u32();

    obj.item_flags = reader.read_u32();

    obj.item_owner = reader.read_u64();

    obj.start_bid = reader.read_u32();

    obj.minimum_bid = reader.read_u32();

    obj.buyout_amount = reader.read_u32();

    obj.time_left = reader.read_u32();

    obj.highest_bidder = reader.read_u64();

    obj.highest_bid = reader.read_u32();

    return obj;
}

static void AuctionListItem_write(Writer& writer, const AuctionListItem& obj) {
    writer.write_u32(obj.id);

    writer.write_u32(obj.item);

    for (const auto& v : obj.enchantments) {
        AuctionEnchantment_write(writer, v);
    }

    writer.write_u32(obj.item_random_property_id);

    writer.write_u32(obj.item_suffix_factor);

    writer.write_u32(obj.item_count);

    writer.write_u32(obj.item_charges);

    writer.write_u32(obj.item_flags);

    writer.write_u64(obj.item_owner);

    writer.write_u32(obj.start_bid);

    writer.write_u32(obj.minimum_bid);

    writer.write_u32(obj.buyout_amount);

    writer.write_u32(obj.time_left);

    writer.write_u64(obj.highest_bidder);

    writer.write_u32(obj.highest_bid);

}

AuctionSort AuctionSort_read(Reader& reader) {
    AuctionSort obj{};

    obj.column = reader.read_u8();

    obj.reversed = reader.read_u8();

    return obj;
}

static void AuctionSort_write(Writer& writer, const AuctionSort& obj) {
    writer.write_u8(obj.column);

    writer.write_u8(obj.reversed);

}

Aura Aura_read(Reader& reader) {
    Aura obj{};

    obj.aura = reader.read_u32();

    obj.unknown = reader.read_u8();

    return obj;
}

static void Aura_write(Writer& writer, const Aura& obj) {
    writer.write_u32(obj.aura);

    writer.write_u8(obj.unknown);

}

static size_t AuraLog_size(const AuraLog& obj) {
    size_t _size = 4;

    if (obj.aura_type == AuraType::PERIODIC_DAMAGE|| obj.aura_type == AuraType::PERIODIC_DAMAGE_PERCENT) {
        _size += 18;
    }
    else if (obj.aura_type == AuraType::PERIODIC_HEAL|| obj.aura_type == AuraType::OBS_MOD_HEALTH) {
        _size += 13;
    }
    else if (obj.aura_type == AuraType::OBS_MOD_POWER|| obj.aura_type == AuraType::PERIODIC_ENERGIZE) {
        _size += 8;
    }
    else if (obj.aura_type == AuraType::PERIODIC_MANA_LEECH) {
        _size += 12;
    }

    return _size;
}

AuraLog AuraLog_read(Reader& reader) {
    AuraLog obj{};

    obj.aura_type = static_cast<AuraType>(reader.read_u32());

    if (obj.aura_type == AuraType::PERIODIC_DAMAGE|| obj.aura_type == AuraType::PERIODIC_DAMAGE_PERCENT) {
        obj.damage1 = reader.read_u32();

        obj.overkill_damage = reader.read_u32();

        obj.school = static_cast<SpellSchool>(reader.read_u8());

        obj.absorb1 = reader.read_u32();

        obj.resisted = reader.read_u32();

        obj.critical1 = reader.read_bool8();

    }
    else if (obj.aura_type == AuraType::PERIODIC_HEAL|| obj.aura_type == AuraType::OBS_MOD_HEALTH) {
        obj.damage2 = reader.read_u32();

        obj.over_damage = reader.read_u32();

        obj.absorb2 = reader.read_u32();

        obj.critical2 = reader.read_bool8();

    }
    else if (obj.aura_type == AuraType::OBS_MOD_POWER|| obj.aura_type == AuraType::PERIODIC_ENERGIZE) {
        obj.misc_value1 = reader.read_u32();

        obj.damage3 = reader.read_u32();

    }
    else if (obj.aura_type == AuraType::PERIODIC_MANA_LEECH) {
        obj.misc_value2 = reader.read_u32();

        obj.damage4 = reader.read_u32();

        obj.gain_multiplier = reader.read_float();

    }
    return obj;
}

static void AuraLog_write(Writer& writer, const AuraLog& obj) {
    writer.write_u32(static_cast<uint32_t>(obj.aura_type));

    if (obj.aura_type == AuraType::PERIODIC_DAMAGE|| obj.aura_type == AuraType::PERIODIC_DAMAGE_PERCENT) {
        writer.write_u32(obj.damage1);

        writer.write_u32(obj.overkill_damage);

        writer.write_u8(static_cast<uint8_t>(obj.school));

        writer.write_u32(obj.absorb1);

        writer.write_u32(obj.resisted);

        writer.write_bool8(obj.critical1);

    }
    else if (obj.aura_type == AuraType::PERIODIC_HEAL|| obj.aura_type == AuraType::OBS_MOD_HEALTH) {
        writer.write_u32(obj.damage2);

        writer.write_u32(obj.over_damage);

        writer.write_u32(obj.absorb2);

        writer.write_bool8(obj.critical2);

    }
    else if (obj.aura_type == AuraType::OBS_MOD_POWER|| obj.aura_type == AuraType::PERIODIC_ENERGIZE) {
        writer.write_u32(obj.misc_value1);

        writer.write_u32(obj.damage3);

    }
    else if (obj.aura_type == AuraType::PERIODIC_MANA_LEECH) {
        writer.write_u32(obj.misc_value2);

        writer.write_u32(obj.damage4);

        writer.write_float(obj.gain_multiplier);

    }
}

static size_t AuraUpdate_size(const AuraUpdate& obj) {
    size_t _size = 8;

    if ((obj.flags & AURA_FLAG_NOT_CASTER) != 0) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster);
    }

    if ((obj.flags & AURA_FLAG_DURATION) != 0) {
        _size += 8;
    }

    return _size;
}

AuraUpdate AuraUpdate_read(Reader& reader) {
    AuraUpdate obj{};

    obj.visual_slot = reader.read_u8();

    obj.spell = reader.read_u32();

    obj.flags = static_cast<AuraFlag>(reader.read_u8());

    obj.level = reader.read_u8();

    obj.aura_stack_count = reader.read_u8();

    if ((obj.flags & AURA_FLAG_NOT_CASTER) != 0) {
        obj.caster = reader.read_packed_guid();

    }
    if ((obj.flags & AURA_FLAG_DURATION) != 0) {
        obj.duration = reader.read_u32();

        obj.time_left = reader.read_u32();

    }
    return obj;
}

static void AuraUpdate_write(Writer& writer, const AuraUpdate& obj) {
    writer.write_u8(obj.visual_slot);

    writer.write_u32(obj.spell);

    writer.write_u8(static_cast<uint8_t>(obj.flags));

    writer.write_u8(obj.level);

    writer.write_u8(obj.aura_stack_count);

    if ((obj.flags & AURA_FLAG_NOT_CASTER) != 0) {
        writer.write_packed_guid(obj.caster);

    }
    if ((obj.flags & AURA_FLAG_DURATION) != 0) {
        writer.write_u32(obj.duration);

        writer.write_u32(obj.time_left);

    }
}

BankTab BankTab_read(Reader& reader) {
    BankTab obj{};

    obj.flags = reader.read_u32();

    obj.stacks_per_day = reader.read_u32();

    return obj;
}

static void BankTab_write(Writer& writer, const BankTab& obj) {
    writer.write_u32(obj.flags);

    writer.write_u32(obj.stacks_per_day);

}

BattlegroundPlayerPosition BattlegroundPlayerPosition_read(Reader& reader) {
    BattlegroundPlayerPosition obj{};

    obj.player = reader.read_u64();

    obj.position_x = reader.read_float();

    obj.position_y = reader.read_float();

    return obj;
}

static void BattlegroundPlayerPosition_write(Writer& writer, const BattlegroundPlayerPosition& obj) {
    writer.write_u64(obj.player);

    writer.write_float(obj.position_x);

    writer.write_float(obj.position_y);

}

static size_t CalendarInvitee_size(const CalendarInvitee& obj) {
    return 2 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

CalendarInvitee CalendarInvitee_read(Reader& reader) {
    CalendarInvitee obj{};

    obj.guid = reader.read_packed_guid();

    obj.status = reader.read_u8();

    obj.rank = reader.read_u8();

    return obj;
}

static void CalendarInvitee_write(Writer& writer, const CalendarInvitee& obj) {
    writer.write_packed_guid(obj.guid);

    writer.write_u8(obj.status);

    writer.write_u8(obj.rank);

}

static size_t CalendarMember_size(const CalendarMember& obj) {
    return 1 + ::wow_world_messages::util::wwm_packed_guid_size(obj.member);
}

CalendarMember CalendarMember_read(Reader& reader) {
    CalendarMember obj{};

    obj.member = reader.read_packed_guid();

    obj.level = reader.read_u8();

    return obj;
}

static void CalendarMember_write(Writer& writer, const CalendarMember& obj) {
    writer.write_packed_guid(obj.member);

    writer.write_u8(obj.level);

}

static size_t CalendarSendInvitee_size(const CalendarSendInvitee& obj) {
    return 17 + ::wow_world_messages::util::wwm_packed_guid_size(obj.invitee) + obj.text.size();
}

CalendarSendInvitee CalendarSendInvitee_read(Reader& reader) {
    CalendarSendInvitee obj{};

    obj.invitee = reader.read_packed_guid();

    obj.level = reader.read_u8();

    obj.status = reader.read_u8();

    obj.rank = reader.read_u8();

    obj.guild_member = reader.read_u8();

    obj.invite_id = reader.read_u64();

    obj.status_time = reader.read_u32();

    obj.text = reader.read_cstring();

    return obj;
}

static void CalendarSendInvitee_write(Writer& writer, const CalendarSendInvitee& obj) {
    writer.write_packed_guid(obj.invitee);

    writer.write_u8(obj.level);

    writer.write_u8(obj.status);

    writer.write_u8(obj.rank);

    writer.write_u8(obj.guild_member);

    writer.write_u64(obj.invite_id);

    writer.write_u32(obj.status_time);

    writer.write_cstring(obj.text);

}

ChannelMember ChannelMember_read(Reader& reader) {
    ChannelMember obj{};

    obj.guid = reader.read_u64();

    obj.member_flags = static_cast<ChannelMemberFlags>(reader.read_u8());

    return obj;
}

static void ChannelMember_write(Writer& writer, const ChannelMember& obj) {
    writer.write_u64(obj.guid);

    writer.write_u8(static_cast<uint8_t>(obj.member_flags));

}

CharacterGear CharacterGear_read(Reader& reader) {
    CharacterGear obj{};

    obj.equipment_display_id = reader.read_u32();

    obj.inventory_type = static_cast<InventoryType>(reader.read_u8());

    obj.enchantment = reader.read_u32();

    return obj;
}

static void CharacterGear_write(Writer& writer, const CharacterGear& obj) {
    writer.write_u32(obj.equipment_display_id);

    writer.write_u8(static_cast<uint8_t>(obj.inventory_type));

    writer.write_u32(obj.enchantment);

}

static size_t Character_size(const Character& obj) {
    return 270 + obj.name.size();
}

Character Character_read(Reader& reader) {
    Character obj{};

    obj.guid = reader.read_u64();

    obj.name = reader.read_cstring();

    obj.race = static_cast<Race>(reader.read_u8());

    obj.class_type = static_cast<Class>(reader.read_u8());

    obj.gender = static_cast<Gender>(reader.read_u8());

    obj.skin = reader.read_u8();

    obj.face = reader.read_u8();

    obj.hair_style = reader.read_u8();

    obj.hair_color = reader.read_u8();

    obj.facial_hair = reader.read_u8();

    obj.level = reader.read_u8();

    obj.area = static_cast<Area>(reader.read_u32());

    obj.map = static_cast<Map>(reader.read_u32());

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    obj.guild_id = reader.read_u32();

    obj.flags = reader.read_u32();

    obj.recustomization_flags = reader.read_u32();

    obj.first_login = reader.read_bool8();

    obj.pet_display_id = reader.read_u32();

    obj.pet_level = reader.read_u32();

    obj.pet_family = static_cast<CreatureFamily>(reader.read_u32());

    for (auto i = 0; i < 23; ++i) {
        obj.equipment[i] = ::wow_world_messages::wrath::CharacterGear_read(reader);
    }

    return obj;
}

static void Character_write(Writer& writer, const Character& obj) {
    writer.write_u64(obj.guid);

    writer.write_cstring(obj.name);

    writer.write_u8(static_cast<uint8_t>(obj.race));

    writer.write_u8(static_cast<uint8_t>(obj.class_type));

    writer.write_u8(static_cast<uint8_t>(obj.gender));

    writer.write_u8(obj.skin);

    writer.write_u8(obj.face);

    writer.write_u8(obj.hair_style);

    writer.write_u8(obj.hair_color);

    writer.write_u8(obj.facial_hair);

    writer.write_u8(obj.level);

    writer.write_u32(static_cast<uint32_t>(obj.area));

    writer.write_u32(static_cast<uint32_t>(obj.map));

    Vector3d_write(writer, obj.position);

    writer.write_u32(obj.guild_id);

    writer.write_u32(obj.flags);

    writer.write_u32(obj.recustomization_flags);

    writer.write_bool8(obj.first_login);

    writer.write_u32(obj.pet_display_id);

    writer.write_u32(obj.pet_level);

    writer.write_u32(static_cast<uint32_t>(obj.pet_family));

    for (const auto& v : obj.equipment) {
        CharacterGear_write(writer, v);
    }

}

CooldownSpell CooldownSpell_read(Reader& reader) {
    CooldownSpell obj{};

    obj.spell_id = reader.read_u16();

    obj.item_id = reader.read_u16();

    obj.spell_category = reader.read_u16();

    obj.cooldown = reader.read_u32();

    obj.category_cooldown = reader.read_u32();

    return obj;
}

static void CooldownSpell_write(Writer& writer, const CooldownSpell& obj) {
    writer.write_u16(obj.spell_id);

    writer.write_u16(obj.item_id);

    writer.write_u16(obj.spell_category);

    writer.write_u32(obj.cooldown);

    writer.write_u32(obj.category_cooldown);

}

DamageInfo DamageInfo_read(Reader& reader) {
    DamageInfo obj{};

    obj.spell_school_mask = reader.read_u32();

    obj.damage_float = reader.read_float();

    obj.damage_uint = reader.read_u32();

    return obj;
}

static void DamageInfo_write(Writer& writer, const DamageInfo& obj) {
    writer.write_u32(obj.spell_school_mask);

    writer.write_float(obj.damage_float);

    writer.write_u32(obj.damage_uint);

}

DispelledSpell DispelledSpell_read(Reader& reader) {
    DispelledSpell obj{};

    obj.spell = reader.read_u32();

    obj.method = static_cast<DispelMethod>(reader.read_u8());

    return obj;
}

static void DispelledSpell_write(Writer& writer, const DispelledSpell& obj) {
    writer.write_u32(obj.spell);

    writer.write_u8(static_cast<uint8_t>(obj.method));

}

EquipmentSet EquipmentSet_read(Reader& reader) {
    EquipmentSet obj{};

    obj.item = reader.read_u64();

    obj.source_bag = reader.read_u8();

    obj.source_slot = reader.read_u8();

    return obj;
}

static void EquipmentSet_write(Writer& writer, const EquipmentSet& obj) {
    writer.write_u64(obj.item);

    writer.write_u8(obj.source_bag);

    writer.write_u8(obj.source_slot);

}

static size_t EquipmentSetListItem_size(const EquipmentSetListItem& obj) {
    return 162 + obj.name.size() + obj.icon_name.size();
}

EquipmentSetListItem EquipmentSetListItem_read(Reader& reader) {
    EquipmentSetListItem obj{};

    obj.guid = reader.read_u64();

    obj.name = reader.read_cstring();

    obj.icon_name = reader.read_cstring();

    for (auto i = 0; i < 19; ++i) {
        obj.equipment[i] = reader.read_u64();
    }

    return obj;
}

static void EquipmentSetListItem_write(Writer& writer, const EquipmentSetListItem& obj) {
    writer.write_u64(obj.guid);

    writer.write_cstring(obj.name);

    writer.write_cstring(obj.icon_name);

    for (const auto& v : obj.equipment) {
        writer.write_u64(v);
    }

}

FactionInitializer FactionInitializer_read(Reader& reader) {
    FactionInitializer obj{};

    obj.flag = static_cast<FactionFlag>(reader.read_u8());

    obj.standing = reader.read_u32();

    return obj;
}

static void FactionInitializer_write(Writer& writer, const FactionInitializer& obj) {
    writer.write_u8(static_cast<uint8_t>(obj.flag));

    writer.write_u32(obj.standing);

}

FactionStanding FactionStanding_read(Reader& reader) {
    FactionStanding obj{};

    obj.faction = static_cast<Faction>(reader.read_u16());

    obj.standing = reader.read_u32();

    return obj;
}

static void FactionStanding_write(Writer& writer, const FactionStanding& obj) {
    writer.write_u16(static_cast<uint16_t>(obj.faction));

    writer.write_u32(obj.standing);

}

ForcedReaction ForcedReaction_read(Reader& reader) {
    ForcedReaction obj{};

    obj.faction = static_cast<Faction>(reader.read_u16());

    obj.reputation_rank = reader.read_u32();

    return obj;
}

static void ForcedReaction_write(Writer& writer, const ForcedReaction& obj) {
    writer.write_u16(static_cast<uint16_t>(obj.faction));

    writer.write_u32(obj.reputation_rank);

}

static size_t GmSurveyQuestion_size(const GmSurveyQuestion& obj) {
    return 6 + obj.comment.size();
}

GmSurveyQuestion GmSurveyQuestion_read(Reader& reader) {
    GmSurveyQuestion obj{};

    obj.question_id = reader.read_u32();

    obj.answer = reader.read_u8();

    obj.comment = reader.read_cstring();

    return obj;
}

static void GmSurveyQuestion_write(Writer& writer, const GmSurveyQuestion& obj) {
    writer.write_u32(obj.question_id);

    writer.write_u8(obj.answer);

    writer.write_cstring(obj.comment);

}

static size_t GossipItem_size(const GossipItem& obj) {
    return 12 + obj.message.size() + obj.accept_text.size();
}

GossipItem GossipItem_read(Reader& reader) {
    GossipItem obj{};

    obj.id = reader.read_u32();

    obj.item_icon = reader.read_u8();

    obj.coded = reader.read_bool8();

    obj.money_required = reader.read_u32();

    obj.message = reader.read_cstring();

    obj.accept_text = reader.read_cstring();

    return obj;
}

static void GossipItem_write(Writer& writer, const GossipItem& obj) {
    writer.write_u32(obj.id);

    writer.write_u8(obj.item_icon);

    writer.write_bool8(obj.coded);

    writer.write_u32(obj.money_required);

    writer.write_cstring(obj.message);

    writer.write_cstring(obj.accept_text);

}

static size_t GroupListMember_size(const GroupListMember& obj) {
    return 13 + obj.name.size();
}

GroupListMember GroupListMember_read(Reader& reader) {
    GroupListMember obj{};

    obj.name = reader.read_cstring();

    obj.guid = reader.read_u64();

    obj.is_online = reader.read_bool8();

    obj.group_id = reader.read_u8();

    obj.flags = reader.read_u8();

    obj.lfg_roles = reader.read_u8();

    return obj;
}

static void GroupListMember_write(Writer& writer, const GroupListMember& obj) {
    writer.write_cstring(obj.name);

    writer.write_u64(obj.guid);

    writer.write_bool8(obj.is_online);

    writer.write_u8(obj.group_id);

    writer.write_u8(obj.flags);

    writer.write_u8(obj.lfg_roles);

}

GuildBankRights GuildBankRights_read(Reader& reader) {
    GuildBankRights obj{};

    obj.rights = reader.read_u32();

    obj.slots_per_day = reader.read_u32();

    return obj;
}

static void GuildBankRights_write(Writer& writer, const GuildBankRights& obj) {
    writer.write_u32(obj.rights);

    writer.write_u32(obj.slots_per_day);

}

GuildBankSocket GuildBankSocket_read(Reader& reader) {
    GuildBankSocket obj{};

    obj.socket_index = reader.read_u8();

    obj.gem = reader.read_u32();

    return obj;
}

static void GuildBankSocket_write(Writer& writer, const GuildBankSocket& obj) {
    writer.write_u8(obj.socket_index);

    writer.write_u32(obj.gem);

}

static size_t GuildBankSlot_size(const GuildBankSlot& obj) {
    return 19 + ::wow_world_messages::util::wwm_variable_item_random_property_size(obj.item_random_property_id) + 5 * obj.sockets.size();
}

GuildBankSlot GuildBankSlot_read(Reader& reader) {
    GuildBankSlot obj{};

    obj.slot = reader.read_u8();

    obj.item = reader.read_u32();

    obj.unknown1 = reader.read_u32();

    obj.item_random_property_id = ::wow_world_messages::util::wwm_read_variable_item_random_property(reader);

    obj.amount_of_items = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    obj.unknown3 = reader.read_u8();

    auto amount_of_sockets = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_sockets; ++i) {
        obj.sockets.push_back(::wow_world_messages::wrath::GuildBankSocket_read(reader));
    }

    return obj;
}

static void GuildBankSlot_write(Writer& writer, const GuildBankSlot& obj) {
    writer.write_u8(obj.slot);

    writer.write_u32(obj.item);

    writer.write_u32(obj.unknown1);

    ::wow_world_messages::util::wwm_write_variable_item_random_property(writer, obj.item_random_property_id);

    writer.write_u32(obj.amount_of_items);

    writer.write_u32(obj.unknown2);

    writer.write_u8(obj.unknown3);

    writer.write_u8(static_cast<uint8_t>(obj.sockets.size()));

    for (const auto& v : obj.sockets) {
        GuildBankSocket_write(writer, v);
    }

}

static size_t GuildBankTab_size(const GuildBankTab& obj) {
    return 2 + obj.tab_name.size() + obj.tab_icon.size();
}

GuildBankTab GuildBankTab_read(Reader& reader) {
    GuildBankTab obj{};

    obj.tab_name = reader.read_cstring();

    obj.tab_icon = reader.read_cstring();

    return obj;
}

static void GuildBankTab_write(Writer& writer, const GuildBankTab& obj) {
    writer.write_cstring(obj.tab_name);

    writer.write_cstring(obj.tab_icon);

}

static size_t GuildLogEvent_size(const GuildLogEvent& obj) {
    size_t _size = 13;

    if (obj.event == GuildEvent::JOINED|| obj.event == GuildEvent::LEFT) {
        _size += 8;
    }
    else if (obj.event == GuildEvent::PROMOTION|| obj.event == GuildEvent::DEMOTION) {
        _size += 1;
    }

    return _size;
}

GuildLogEvent GuildLogEvent_read(Reader& reader) {
    GuildLogEvent obj{};

    obj.event = static_cast<GuildEvent>(reader.read_u8());

    obj.player1 = reader.read_u64();

    if (obj.event == GuildEvent::JOINED|| obj.event == GuildEvent::LEFT) {
        obj.player2 = reader.read_u64();

    }
    else if (obj.event == GuildEvent::PROMOTION|| obj.event == GuildEvent::DEMOTION) {
        obj.new_rank = reader.read_u8();

    }
    obj.unix_time = reader.read_u32();

    return obj;
}

static void GuildLogEvent_write(Writer& writer, const GuildLogEvent& obj) {
    writer.write_u8(static_cast<uint8_t>(obj.event));

    writer.write_u64(obj.player1);

    if (obj.event == GuildEvent::JOINED|| obj.event == GuildEvent::LEFT) {
        writer.write_u64(obj.player2);

    }
    else if (obj.event == GuildEvent::PROMOTION|| obj.event == GuildEvent::DEMOTION) {
        writer.write_u8(obj.new_rank);

    }
    writer.write_u32(obj.unix_time);

}

static size_t GuildMember_size(const GuildMember& obj) {
    size_t _size = 27 + obj.name.size() + obj.public_note.size() + obj.officer_note.size();

    if (obj.status == GuildMemberStatus::OFFLINE) {
        _size += 4;
    }

    return _size;
}

GuildMember GuildMember_read(Reader& reader) {
    GuildMember obj{};

    obj.guid = reader.read_u64();

    obj.unknown = reader.read_u32();

    obj.status = static_cast<GuildMemberStatus>(reader.read_u8());

    obj.name = reader.read_cstring();

    obj.rank = reader.read_u32();

    obj.level = reader.read_u8();

    obj.class_type = static_cast<Class>(reader.read_u8());

    obj.gender = static_cast<Gender>(reader.read_u8());

    obj.area = static_cast<Area>(reader.read_u32());

    if (obj.status == GuildMemberStatus::OFFLINE) {
        obj.time_offline = reader.read_float();

    }
    obj.public_note = reader.read_cstring();

    obj.officer_note = reader.read_cstring();

    return obj;
}

static void GuildMember_write(Writer& writer, const GuildMember& obj) {
    writer.write_u64(obj.guid);

    writer.write_u32(obj.unknown);

    writer.write_u8(static_cast<uint8_t>(obj.status));

    writer.write_cstring(obj.name);

    writer.write_u32(obj.rank);

    writer.write_u8(obj.level);

    writer.write_u8(static_cast<uint8_t>(obj.class_type));

    writer.write_u8(static_cast<uint8_t>(obj.gender));

    writer.write_u32(static_cast<uint32_t>(obj.area));

    if (obj.status == GuildMemberStatus::OFFLINE) {
        writer.write_float(obj.time_offline);

    }
    writer.write_cstring(obj.public_note);

    writer.write_cstring(obj.officer_note);

}

GuildRights GuildRights_read(Reader& reader) {
    GuildRights obj{};

    obj.rights = reader.read_u32();

    obj.money_per_day = reader.read_u32();

    for (auto i = 0; i < 6; ++i) {
        obj.bank_tab_rights[i] = ::wow_world_messages::wrath::GuildBankRights_read(reader);
    }

    return obj;
}

static void GuildRights_write(Writer& writer, const GuildRights& obj) {
    writer.write_u32(obj.rights);

    writer.write_u32(obj.money_per_day);

    for (const auto& v : obj.bank_tab_rights) {
        GuildBankRights_write(writer, v);
    }

}

InitialSpell InitialSpell_read(Reader& reader) {
    InitialSpell obj{};

    obj.spell_id = reader.read_u32();

    obj.unknown1 = reader.read_u16();

    return obj;
}

static void InitialSpell_write(Writer& writer, const InitialSpell& obj) {
    writer.write_u32(obj.spell_id);

    writer.write_u16(obj.unknown1);

}

InspectTalent InspectTalent_read(Reader& reader) {
    InspectTalent obj{};

    obj.talent = static_cast<Talent>(reader.read_u32());

    obj.max_rank = reader.read_u8();

    return obj;
}

static void InspectTalent_write(Writer& writer, const InspectTalent& obj) {
    writer.write_u32(static_cast<uint32_t>(obj.talent));

    writer.write_u8(obj.max_rank);

}

static size_t InspectTalentGear_size(const InspectTalentGear& obj) {
    return 10 + enchant_mask_size(obj.enchant_mask) + ::wow_world_messages::util::wwm_packed_guid_size(obj.creator);
}

InspectTalentGear InspectTalentGear_read(Reader& reader) {
    InspectTalentGear obj{};

    obj.item = reader.read_u32();

    obj.enchant_mask = wrath::enchant_mask_read(reader);

    obj.unknown1 = reader.read_u16();

    obj.creator = reader.read_packed_guid();

    obj.unknown2 = reader.read_u32();

    return obj;
}

static void InspectTalentGear_write(Writer& writer, const InspectTalentGear& obj) {
    writer.write_u32(obj.item);

    wrath::enchant_mask_write(writer, obj.enchant_mask);

    writer.write_u16(obj.unknown1);

    writer.write_packed_guid(obj.creator);

    writer.write_u32(obj.unknown2);

}

static size_t InspectTalentSpec_size(const InspectTalentSpec& obj) {
    return 1 + 5 * obj.talents.size();
}

InspectTalentSpec InspectTalentSpec_read(Reader& reader) {
    InspectTalentSpec obj{};

    auto amount_of_talents = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_talents; ++i) {
        obj.talents.push_back(::wow_world_messages::wrath::InspectTalent_read(reader));
    }

    return obj;
}

static void InspectTalentSpec_write(Writer& writer, const InspectTalentSpec& obj) {
    writer.write_u8(static_cast<uint8_t>(obj.talents.size()));

    for (const auto& v : obj.talents) {
        InspectTalent_write(writer, v);
    }

}

ItemDamageType ItemDamageType_read(Reader& reader) {
    ItemDamageType obj{};

    obj.damage_minimum = reader.read_float();

    obj.damage_maximum = reader.read_float();

    obj.school = static_cast<SpellSchool>(reader.read_u32());

    return obj;
}

static void ItemDamageType_write(Writer& writer, const ItemDamageType& obj) {
    writer.write_float(obj.damage_minimum);

    writer.write_float(obj.damage_maximum);

    writer.write_u32(static_cast<uint32_t>(obj.school));

}

ItemRefundExtra ItemRefundExtra_read(Reader& reader) {
    ItemRefundExtra obj{};

    obj.item = reader.read_u32();

    obj.amount = reader.read_u32();

    return obj;
}

static void ItemRefundExtra_write(Writer& writer, const ItemRefundExtra& obj) {
    writer.write_u32(obj.item);

    writer.write_u32(obj.amount);

}

ItemSocket ItemSocket_read(Reader& reader) {
    ItemSocket obj{};

    obj.color = reader.read_u32();

    obj.content = reader.read_u32();

    return obj;
}

static void ItemSocket_write(Writer& writer, const ItemSocket& obj) {
    writer.write_u32(obj.color);

    writer.write_u32(obj.content);

}

ItemSpells ItemSpells_read(Reader& reader) {
    ItemSpells obj{};

    obj.spell = reader.read_u32();

    obj.spell_trigger = static_cast<SpellTriggerType>(reader.read_u32());

    obj.spell_charges = reader.read_i32();

    obj.spell_cooldown = reader.read_i32();

    obj.spell_category = reader.read_u32();

    obj.spell_category_cooldown = reader.read_i32();

    return obj;
}

static void ItemSpells_write(Writer& writer, const ItemSpells& obj) {
    writer.write_u32(obj.spell);

    writer.write_u32(static_cast<uint32_t>(obj.spell_trigger));

    writer.write_i32(obj.spell_charges);

    writer.write_i32(obj.spell_cooldown);

    writer.write_u32(obj.spell_category);

    writer.write_i32(obj.spell_category_cooldown);

}

ItemStat ItemStat_read(Reader& reader) {
    ItemStat obj{};

    obj.stat_type = reader.read_u32();

    obj.value = reader.read_i32();

    return obj;
}

static void ItemStat_write(Writer& writer, const ItemStat& obj) {
    writer.write_u32(obj.stat_type);

    writer.write_i32(obj.value);

}

LfgQuestReward LfgQuestReward_read(Reader& reader) {
    LfgQuestReward obj{};

    obj.item = reader.read_u32();

    obj.display_id = reader.read_u32();

    obj.amount_of_rewards = reader.read_u32();

    return obj;
}

static void LfgQuestReward_write(Writer& writer, const LfgQuestReward& obj) {
    writer.write_u32(obj.item);

    writer.write_u32(obj.display_id);

    writer.write_u32(obj.amount_of_rewards);

}

static size_t LfgAvailableDungeon_size(const LfgAvailableDungeon& obj) {
    return 22 + 12 * obj.rewards.size();
}

LfgAvailableDungeon LfgAvailableDungeon_read(Reader& reader) {
    LfgAvailableDungeon obj{};

    obj.dungeon_entry = reader.read_u32();

    obj.done = reader.read_bool8();

    obj.quest_reward = reader.read_u32();

    obj.xp_reward = reader.read_u32();

    obj.unknown1 = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    auto amount_of_rewards = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_rewards; ++i) {
        obj.rewards.push_back(::wow_world_messages::wrath::LfgQuestReward_read(reader));
    }

    return obj;
}

static void LfgAvailableDungeon_write(Writer& writer, const LfgAvailableDungeon& obj) {
    writer.write_u32(obj.dungeon_entry);

    writer.write_bool8(obj.done);

    writer.write_u32(obj.quest_reward);

    writer.write_u32(obj.xp_reward);

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.unknown2);

    writer.write_u8(static_cast<uint8_t>(obj.rewards.size()));

    for (const auto& v : obj.rewards) {
        LfgQuestReward_write(writer, v);
    }

}

LfgJoinLockedDungeon LfgJoinLockedDungeon_read(Reader& reader) {
    LfgJoinLockedDungeon obj{};

    obj.dungeon_entry = reader.read_u32();

    obj.reason = reader.read_u32();

    return obj;
}

static void LfgJoinLockedDungeon_write(Writer& writer, const LfgJoinLockedDungeon& obj) {
    writer.write_u32(obj.dungeon_entry);

    writer.write_u32(obj.reason);

}

static size_t LfgJoinPlayer_size(const LfgJoinPlayer& obj) {
    return 12 + 8 * obj.locked_dungeons.size();
}

LfgJoinPlayer LfgJoinPlayer_read(Reader& reader) {
    LfgJoinPlayer obj{};

    obj.player = reader.read_u64();

    auto amount_of_locked_dungeons = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_locked_dungeons; ++i) {
        obj.locked_dungeons.push_back(::wow_world_messages::wrath::LfgJoinLockedDungeon_read(reader));
    }

    return obj;
}

static void LfgJoinPlayer_write(Writer& writer, const LfgJoinPlayer& obj) {
    writer.write_u64(obj.player);

    writer.write_u32(static_cast<uint32_t>(obj.locked_dungeons.size()));

    for (const auto& v : obj.locked_dungeons) {
        LfgJoinLockedDungeon_write(writer, v);
    }

}

static size_t LfgListGroup_size(const LfgListGroup& obj) {
    size_t _size = 24;

    if ((obj.flags & LFG_UPDATE_FLAG_COMMENT) != 0) {
        _size += 1 + obj.comment.size();
    }

    if ((obj.flags & LFG_UPDATE_FLAG_ROLES) != 0) {
        _size += 3;
    }

    return _size;
}

LfgListGroup LfgListGroup_read(Reader& reader) {
    LfgListGroup obj{};

    obj.group = reader.read_u64();

    obj.flags = static_cast<LfgUpdateFlag>(reader.read_u32());

    if ((obj.flags & LFG_UPDATE_FLAG_COMMENT) != 0) {
        obj.comment = reader.read_cstring();

    }
    if ((obj.flags & LFG_UPDATE_FLAG_ROLES) != 0) {
        for (auto i = 0; i < 3; ++i) {
            obj.roles[i] = reader.read_u8();
        }

    }
    obj.instance = reader.read_u64();

    obj.encounter_mask = reader.read_u32();

    return obj;
}

static void LfgListGroup_write(Writer& writer, const LfgListGroup& obj) {
    writer.write_u64(obj.group);

    writer.write_u32(static_cast<uint32_t>(obj.flags));

    if ((obj.flags & LFG_UPDATE_FLAG_COMMENT) != 0) {
        writer.write_cstring(obj.comment);

    }
    if ((obj.flags & LFG_UPDATE_FLAG_ROLES) != 0) {
        for (const auto& v : obj.roles) {
            writer.write_u8(v);
        }

    }
    writer.write_u64(obj.instance);

    writer.write_u32(obj.encounter_mask);

}

static size_t LfgListPlayer_size(const LfgListPlayer& obj) {
    size_t _size = 24;

    if ((obj.flags & LFG_UPDATE_FLAG_CHARACTER_INFO) != 0) {
        _size += 86;
    }

    if ((obj.flags & LFG_UPDATE_FLAG_COMMENT) != 0) {
        _size += 1 + obj.comment.size();
    }

    if ((obj.flags & LFG_UPDATE_FLAG_GROUP_LEADER) != 0) {
        _size += 1;
    }

    if ((obj.flags & LFG_UPDATE_FLAG_GROUP_GUID) != 0) {
        _size += 8;
    }

    if ((obj.flags & LFG_UPDATE_FLAG_ROLES) != 0) {
        _size += 1;
    }

    if ((obj.flags & LFG_UPDATE_FLAG_AREA) != 0) {
        _size += 4;
    }

    if ((obj.flags & LFG_UPDATE_FLAG_STATUS) != 0) {
        _size += 1;
    }

    return _size;
}

LfgListPlayer LfgListPlayer_read(Reader& reader) {
    LfgListPlayer obj{};

    obj.player = reader.read_u64();

    obj.flags = static_cast<LfgUpdateFlag>(reader.read_u32());

    if ((obj.flags & LFG_UPDATE_FLAG_CHARACTER_INFO) != 0) {
        obj.level = reader.read_u8();

        obj.class_type = static_cast<Class>(reader.read_u8());

        obj.race = static_cast<Race>(reader.read_u8());

        obj.talents0 = reader.read_u8();

        obj.talents1 = reader.read_u8();

        obj.talents2 = reader.read_u8();

        obj.armor = reader.read_u32();

        obj.spell_damage = reader.read_u32();

        obj.spell_heal = reader.read_u32();

        obj.crit_rating_melee = reader.read_u32();

        obj.crit_rating_ranged = reader.read_u32();

        obj.crit_rating_spell = reader.read_u32();

        obj.mana_per_5_seconds = reader.read_float();

        obj.mana_per_5_seconds_combat = reader.read_float();

        obj.attack_power = reader.read_u32();

        obj.agility = reader.read_u32();

        obj.health = reader.read_u32();

        obj.mana = reader.read_u32();

        obj.online = reader.read_bool32();

        obj.average_item_level = reader.read_u32();

        obj.defense_skill = reader.read_u32();

        obj.dodge_rating = reader.read_u32();

        obj.block_rating = reader.read_u32();

        obj.parry_rating = reader.read_u32();

        obj.haste_rating = reader.read_u32();

        obj.expertise_rating = reader.read_u32();

    }
    if ((obj.flags & LFG_UPDATE_FLAG_COMMENT) != 0) {
        obj.comment = reader.read_cstring();

    }
    if ((obj.flags & LFG_UPDATE_FLAG_GROUP_LEADER) != 0) {
        obj.is_looking_for_more = reader.read_bool8();

    }
    if ((obj.flags & LFG_UPDATE_FLAG_GROUP_GUID) != 0) {
        obj.group = reader.read_u64();

    }
    if ((obj.flags & LFG_UPDATE_FLAG_ROLES) != 0) {
        obj.roles = reader.read_u8();

    }
    if ((obj.flags & LFG_UPDATE_FLAG_AREA) != 0) {
        obj.area = static_cast<Area>(reader.read_u32());

    }
    if ((obj.flags & LFG_UPDATE_FLAG_STATUS) != 0) {
        obj.unknown1 = reader.read_u8();

    }
    obj.instance = reader.read_u64();

    obj.encounter_mask = reader.read_u32();

    return obj;
}

static void LfgListPlayer_write(Writer& writer, const LfgListPlayer& obj) {
    writer.write_u64(obj.player);

    writer.write_u32(static_cast<uint32_t>(obj.flags));

    if ((obj.flags & LFG_UPDATE_FLAG_CHARACTER_INFO) != 0) {
        writer.write_u8(obj.level);

        writer.write_u8(static_cast<uint8_t>(obj.class_type));

        writer.write_u8(static_cast<uint8_t>(obj.race));

        writer.write_u8(obj.talents0);

        writer.write_u8(obj.talents1);

        writer.write_u8(obj.talents2);

        writer.write_u32(obj.armor);

        writer.write_u32(obj.spell_damage);

        writer.write_u32(obj.spell_heal);

        writer.write_u32(obj.crit_rating_melee);

        writer.write_u32(obj.crit_rating_ranged);

        writer.write_u32(obj.crit_rating_spell);

        writer.write_float(obj.mana_per_5_seconds);

        writer.write_float(obj.mana_per_5_seconds_combat);

        writer.write_u32(obj.attack_power);

        writer.write_u32(obj.agility);

        writer.write_u32(obj.health);

        writer.write_u32(obj.mana);

        writer.write_bool32(obj.online);

        writer.write_u32(obj.average_item_level);

        writer.write_u32(obj.defense_skill);

        writer.write_u32(obj.dodge_rating);

        writer.write_u32(obj.block_rating);

        writer.write_u32(obj.parry_rating);

        writer.write_u32(obj.haste_rating);

        writer.write_u32(obj.expertise_rating);

    }
    if ((obj.flags & LFG_UPDATE_FLAG_COMMENT) != 0) {
        writer.write_cstring(obj.comment);

    }
    if ((obj.flags & LFG_UPDATE_FLAG_GROUP_LEADER) != 0) {
        writer.write_bool8(obj.is_looking_for_more);

    }
    if ((obj.flags & LFG_UPDATE_FLAG_GROUP_GUID) != 0) {
        writer.write_u64(obj.group);

    }
    if ((obj.flags & LFG_UPDATE_FLAG_ROLES) != 0) {
        writer.write_u8(obj.roles);

    }
    if ((obj.flags & LFG_UPDATE_FLAG_AREA) != 0) {
        writer.write_u32(static_cast<uint32_t>(obj.area));

    }
    if ((obj.flags & LFG_UPDATE_FLAG_STATUS) != 0) {
        writer.write_u8(obj.unknown1);

    }
    writer.write_u64(obj.instance);

    writer.write_u32(obj.encounter_mask);

}

static size_t LfgPartyInfo_size(const LfgPartyInfo& obj) {
    return 12 + 8 * obj.dungeons.size();
}

LfgPartyInfo LfgPartyInfo_read(Reader& reader) {
    LfgPartyInfo obj{};

    obj.player = reader.read_u64();

    auto amount_of_dungeons = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_dungeons; ++i) {
        obj.dungeons.push_back(::wow_world_messages::wrath::LfgJoinLockedDungeon_read(reader));
    }

    return obj;
}

static void LfgPartyInfo_write(Writer& writer, const LfgPartyInfo& obj) {
    writer.write_u64(obj.player);

    writer.write_u32(static_cast<uint32_t>(obj.dungeons.size()));

    for (const auto& v : obj.dungeons) {
        LfgJoinLockedDungeon_write(writer, v);
    }

}

LfgProposal LfgProposal_read(Reader& reader) {
    LfgProposal obj{};

    obj.role_mask = reader.read_u32();

    obj.is_current_player = reader.read_u8();

    obj.in_dungeon = reader.read_u8();

    obj.in_same_group = reader.read_u8();

    obj.has_answered = reader.read_u8();

    obj.has_accepted = reader.read_u8();

    return obj;
}

static void LfgProposal_write(Writer& writer, const LfgProposal& obj) {
    writer.write_u32(obj.role_mask);

    writer.write_u8(obj.is_current_player);

    writer.write_u8(obj.in_dungeon);

    writer.write_u8(obj.in_same_group);

    writer.write_u8(obj.has_answered);

    writer.write_u8(obj.has_accepted);

}

LfgRole LfgRole_read(Reader& reader) {
    LfgRole obj{};

    obj.guid = reader.read_u64();

    obj.ready = reader.read_bool8();

    obj.roles = reader.read_u32();

    obj.level = reader.read_u8();

    return obj;
}

static void LfgRole_write(Writer& writer, const LfgRole& obj) {
    writer.write_u64(obj.guid);

    writer.write_bool8(obj.ready);

    writer.write_u32(obj.roles);

    writer.write_u8(obj.level);

}

ListInventoryItem ListInventoryItem_read(Reader& reader) {
    ListInventoryItem obj{};

    obj.item_stack_count = reader.read_u32();

    obj.item = reader.read_u32();

    obj.item_display_id = reader.read_u32();

    obj.max_items = reader.read_u32();

    obj.price = reader.read_u32();

    obj.max_durability = reader.read_u32();

    obj.durability = reader.read_u32();

    obj.extended_cost = reader.read_u32();

    return obj;
}

static void ListInventoryItem_write(Writer& writer, const ListInventoryItem& obj) {
    writer.write_u32(obj.item_stack_count);

    writer.write_u32(obj.item);

    writer.write_u32(obj.item_display_id);

    writer.write_u32(obj.max_items);

    writer.write_u32(obj.price);

    writer.write_u32(obj.max_durability);

    writer.write_u32(obj.durability);

    writer.write_u32(obj.extended_cost);

}

LootItem LootItem_read(Reader& reader) {
    LootItem obj{};

    obj.index = reader.read_u8();

    obj.item = reader.read_u32();

    obj.ty = static_cast<LootSlotType>(reader.read_u8());

    return obj;
}

static void LootItem_write(Writer& writer, const LootItem& obj) {
    writer.write_u8(obj.index);

    writer.write_u32(obj.item);

    writer.write_u8(static_cast<uint8_t>(obj.ty));

}

MailListItemEnchant MailListItemEnchant_read(Reader& reader) {
    MailListItemEnchant obj{};

    obj.charges = reader.read_u32();

    obj.duration = reader.read_u32();

    obj.enchant_id = reader.read_u32();

    return obj;
}

static void MailListItemEnchant_write(Writer& writer, const MailListItemEnchant& obj) {
    writer.write_u32(obj.charges);

    writer.write_u32(obj.duration);

    writer.write_u32(obj.enchant_id);

}

MailListItem MailListItem_read(Reader& reader) {
    MailListItem obj{};

    obj.item_index = reader.read_u8();

    obj.low_guid = reader.read_u32();

    obj.item = reader.read_u32();

    for (auto i = 0; i < 7; ++i) {
        obj.enchants[i] = ::wow_world_messages::wrath::MailListItemEnchant_read(reader);
    }

    obj.item_random_property_id = reader.read_u32();

    obj.item_suffix_factor = reader.read_u32();

    obj.item_amount = reader.read_u8();

    obj.charges = reader.read_u32();

    obj.max_durability = reader.read_u32();

    obj.durability = reader.read_u32();

    obj.unknown = reader.read_u8();

    return obj;
}

static void MailListItem_write(Writer& writer, const MailListItem& obj) {
    writer.write_u8(obj.item_index);

    writer.write_u32(obj.low_guid);

    writer.write_u32(obj.item);

    for (const auto& v : obj.enchants) {
        MailListItemEnchant_write(writer, v);
    }

    writer.write_u32(obj.item_random_property_id);

    writer.write_u32(obj.item_suffix_factor);

    writer.write_u8(obj.item_amount);

    writer.write_u32(obj.charges);

    writer.write_u32(obj.max_durability);

    writer.write_u32(obj.durability);

    writer.write_u8(obj.unknown);

}

static size_t Mail_size(const Mail& obj) {
    size_t _size = 38 + obj.subject.size() + obj.message.size() + 115 * obj.items.size();

    if (obj.message_type == MailType::NORMAL) {
        _size += 8;
    }
    else if (obj.message_type == MailType::CREATURE|| obj.message_type == MailType::GAMEOBJECT) {
        _size += 4;
    }
    else if (obj.message_type == MailType::AUCTION) {
        _size += 4;
    }
    else if (obj.message_type == MailType::ITEM) {
        _size += 4;
    }

    return _size;
}

Mail Mail_read(Reader& reader) {
    Mail obj{};

    (void)reader.read_u16();

    obj.message_id = reader.read_u32();

    obj.message_type = static_cast<MailType>(reader.read_u8());

    if (obj.message_type == MailType::NORMAL) {
        obj.sender = reader.read_u64();

    }
    else if (obj.message_type == MailType::CREATURE|| obj.message_type == MailType::GAMEOBJECT) {
        obj.sender_id = reader.read_u32();

    }
    else if (obj.message_type == MailType::AUCTION) {
        obj.auction_id = reader.read_u32();

    }
    else if (obj.message_type == MailType::ITEM) {
        obj.item = reader.read_u32();

    }
    obj.cash_on_delivery = reader.read_u32();

    obj.unknown = reader.read_u32();

    obj.stationery = reader.read_u32();

    obj.money = reader.read_u32();

    obj.flags = reader.read_u32();

    obj.expiration_time = reader.read_float();

    obj.mail_template_id = reader.read_u32();

    obj.subject = reader.read_cstring();

    obj.message = reader.read_cstring();

    auto amount_of_items = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_items; ++i) {
        obj.items.push_back(::wow_world_messages::wrath::MailListItem_read(reader));
    }

    return obj;
}

static void Mail_write(Writer& writer, const Mail& obj) {
    writer.write_u16(static_cast<uint16_t>(Mail_size(obj)));

    writer.write_u32(obj.message_id);

    writer.write_u8(static_cast<uint8_t>(obj.message_type));

    if (obj.message_type == MailType::NORMAL) {
        writer.write_u64(obj.sender);

    }
    else if (obj.message_type == MailType::CREATURE|| obj.message_type == MailType::GAMEOBJECT) {
        writer.write_u32(obj.sender_id);

    }
    else if (obj.message_type == MailType::AUCTION) {
        writer.write_u32(obj.auction_id);

    }
    else if (obj.message_type == MailType::ITEM) {
        writer.write_u32(obj.item);

    }
    writer.write_u32(obj.cash_on_delivery);

    writer.write_u32(obj.unknown);

    writer.write_u32(obj.stationery);

    writer.write_u32(obj.money);

    writer.write_u32(obj.flags);

    writer.write_float(obj.expiration_time);

    writer.write_u32(obj.mail_template_id);

    writer.write_cstring(obj.subject);

    writer.write_cstring(obj.message);

    writer.write_u8(static_cast<uint8_t>(obj.items.size()));

    for (const auto& v : obj.items) {
        MailListItem_write(writer, v);
    }

}

MailItem MailItem_read(Reader& reader) {
    MailItem obj{};

    obj.item = reader.read_u64();

    obj.slot = reader.read_u8();

    return obj;
}

static void MailItem_write(Writer& writer, const MailItem& obj) {
    writer.write_u64(obj.item);

    writer.write_u8(obj.slot);

}

static size_t MiniMoveMessage_size(const MiniMoveMessage& obj) {
    return 7 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

MiniMoveMessage MiniMoveMessage_read(Reader& reader) {
    MiniMoveMessage obj{};

    (void)reader.read_u8();

    obj.opcode = static_cast<MiniMoveOpcode>(reader.read_u16());

    obj.guid = reader.read_packed_guid();

    obj.movement_counter = reader.read_u32();

    return obj;
}

static void MiniMoveMessage_write(Writer& writer, const MiniMoveMessage& obj) {
    writer.write_u8(static_cast<uint8_t>(MiniMoveMessage_size(obj)));

    writer.write_u16(static_cast<uint16_t>(obj.opcode));

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.movement_counter);

}

MoneyLogItem MoneyLogItem_read(Reader& reader) {
    MoneyLogItem obj{};

    obj.action = reader.read_u8();

    obj.player = reader.read_u64();

    obj.entry = reader.read_u32();

    obj.timestamp = reader.read_u32();

    return obj;
}

static void MoneyLogItem_write(Writer& writer, const MoneyLogItem& obj) {
    writer.write_u8(obj.action);

    writer.write_u64(obj.player);

    writer.write_u32(obj.entry);

    writer.write_u32(obj.timestamp);

}

static size_t TransportInfo_size(const TransportInfo& obj) {
    return 21 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

TransportInfo TransportInfo_read(Reader& reader) {
    TransportInfo obj{};

    obj.guid = reader.read_packed_guid();

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    obj.orientation = reader.read_float();

    obj.timestamp = reader.read_u32();

    obj.seat = reader.read_u8();

    return obj;
}

static void TransportInfo_write(Writer& writer, const TransportInfo& obj) {
    writer.write_packed_guid(obj.guid);

    Vector3d_write(writer, obj.position);

    writer.write_float(obj.orientation);

    writer.write_u32(obj.timestamp);

    writer.write_u8(obj.seat);

}

static size_t MovementBlock_size(const MovementBlock& obj) {
    size_t _size = 2;

    if ((obj.update_flag & UPDATE_FLAG_LIVING) != 0) {
        _size += 66;

        if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT_AND_INTERPOLATED_MOVEMENT) != 0) {
            _size += 4 + TransportInfo_size(obj.transport_info);
        }
        else if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT) != 0) {
            _size += 0 + TransportInfo_size(obj.transport);
        }

        if ((obj.flags & MOVEMENT_FLAGS_SWIMMING) != 0) {
            _size += 4;
        }
        else if ((obj.flags & MOVEMENT_FLAGS_FLYING) != 0) {
            _size += 4;
        }
        else if ((obj.flags & MOVEMENT_FLAGS_ALWAYS_ALLOW_PITCHING) != 0) {
            _size += 4;
        }

        if ((obj.flags & MOVEMENT_FLAGS_FALLING) != 0) {
            _size += 16;
        }

        if ((obj.flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) != 0) {
            _size += 4;
        }

        if ((obj.flags & MOVEMENT_FLAGS_SPLINE_ENABLED) != 0) {
            _size += 49 + 12 * obj.nodes.size();

            if ((obj.spline_flags & SPLINE_FLAG_FINAL_ANGLE) != 0) {
                _size += 4;
            }
            else if ((obj.spline_flags & SPLINE_FLAG_FINAL_TARGET) != 0) {
                _size += 8;
            }
            else if ((obj.spline_flags & SPLINE_FLAG_FINAL_POINT) != 0) {
                _size += 12;
            }

        }

    }
    else if ((obj.update_flag & UPDATE_FLAG_POSITION) != 0) {
        _size += 32 + ::wow_world_messages::util::wwm_packed_guid_size(obj.transport_guid);
    }
    else if ((obj.update_flag & UPDATE_FLAG_HAS_POSITION) != 0) {
        _size += 16;
    }

    if ((obj.update_flag & UPDATE_FLAG_HIGH_GUID) != 0) {
        _size += 4;
    }

    if ((obj.update_flag & UPDATE_FLAG_LOW_GUID) != 0) {
        _size += 4;
    }

    if ((obj.update_flag & UPDATE_FLAG_HAS_ATTACKING_TARGET) != 0) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
    }

    if ((obj.update_flag & UPDATE_FLAG_TRANSPORT) != 0) {
        _size += 4;
    }

    if ((obj.update_flag & UPDATE_FLAG_VEHICLE) != 0) {
        _size += 8;
    }

    if ((obj.update_flag & UPDATE_FLAG_ROTATION) != 0) {
        _size += 8;
    }

    return _size;
}

MovementBlock MovementBlock_read(Reader& reader) {
    MovementBlock obj{};

    obj.update_flag = static_cast<UpdateFlag>(reader.read_u16());

    if ((obj.update_flag & UPDATE_FLAG_LIVING) != 0) {
        obj.flags = static_cast<MovementFlags>(reader.read_u48());

        obj.timestamp = reader.read_u32();

        obj.position = ::wow_world_messages::all::Vector3d_read(reader);

        obj.orientation = reader.read_float();

        if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT_AND_INTERPOLATED_MOVEMENT) != 0) {
            obj.transport_info = ::wow_world_messages::wrath::TransportInfo_read(reader);

            obj.transport_time = reader.read_u32();

        }
        else if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT) != 0) {
            obj.transport = ::wow_world_messages::wrath::TransportInfo_read(reader);

        }
        if ((obj.flags & MOVEMENT_FLAGS_SWIMMING) != 0) {
            obj.pitch1 = reader.read_float();

        }
        else if ((obj.flags & MOVEMENT_FLAGS_FLYING) != 0) {
            obj.pitch2 = reader.read_float();

        }
        else if ((obj.flags & MOVEMENT_FLAGS_ALWAYS_ALLOW_PITCHING) != 0) {
            obj.pitch3 = reader.read_float();

        }
        obj.fall_time = reader.read_float();

        if ((obj.flags & MOVEMENT_FLAGS_FALLING) != 0) {
            obj.z_speed = reader.read_float();

            obj.cos_angle = reader.read_float();

            obj.sin_angle = reader.read_float();

            obj.xy_speed = reader.read_float();

        }
        if ((obj.flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) != 0) {
            obj.spline_elevation = reader.read_float();

        }
        obj.walking_speed = reader.read_float();

        obj.running_speed = reader.read_float();

        obj.backwards_running_speed = reader.read_float();

        obj.swimming_speed = reader.read_float();

        obj.backwards_swimming_speed = reader.read_float();

        obj.flight_speed = reader.read_float();

        obj.backwards_flight_speed = reader.read_float();

        obj.turn_rate = reader.read_float();

        obj.pitch_rate = reader.read_float();

        if ((obj.flags & MOVEMENT_FLAGS_SPLINE_ENABLED) != 0) {
            obj.spline_flags = static_cast<SplineFlag>(reader.read_u32());

            if ((obj.spline_flags & SPLINE_FLAG_FINAL_ANGLE) != 0) {
                obj.angle = reader.read_float();

            }
            else if ((obj.spline_flags & SPLINE_FLAG_FINAL_TARGET) != 0) {
                obj.target = reader.read_u64();

            }
            else if ((obj.spline_flags & SPLINE_FLAG_FINAL_POINT) != 0) {
                obj.spline_final_point = ::wow_world_messages::all::Vector3d_read(reader);

            }
            obj.time_passed = reader.read_u32();

            obj.duration = reader.read_u32();

            obj.id = reader.read_u32();

            obj.duration_mod = reader.read_float();

            obj.duration_mod_next = reader.read_float();

            obj.vertical_acceleration = reader.read_float();

            obj.effect_start_time = reader.read_float();

            auto amount_of_nodes = reader.read_u32();

            for (uint32_t i = 0; i < amount_of_nodes; ++i) {
                obj.nodes.push_back(::wow_world_messages::all::Vector3d_read(reader));
            }

            obj.mode = reader.read_u8();

            obj.final_node = ::wow_world_messages::all::Vector3d_read(reader);

        }
    }
    else if ((obj.update_flag & UPDATE_FLAG_POSITION) != 0) {
        obj.transport_guid = reader.read_packed_guid();

        obj.position1 = ::wow_world_messages::all::Vector3d_read(reader);

        obj.transport_offset = ::wow_world_messages::all::Vector3d_read(reader);

        obj.orientation1 = reader.read_float();

        obj.corpse_orientation = reader.read_float();

    }
    else if ((obj.update_flag & UPDATE_FLAG_HAS_POSITION) != 0) {
        obj.position2 = ::wow_world_messages::all::Vector3d_read(reader);

        obj.orientation2 = reader.read_float();

    }
    if ((obj.update_flag & UPDATE_FLAG_HIGH_GUID) != 0) {
        obj.unknown0 = reader.read_u32();

    }
    if ((obj.update_flag & UPDATE_FLAG_LOW_GUID) != 0) {
        obj.unknown1 = reader.read_u32();

    }
    if ((obj.update_flag & UPDATE_FLAG_HAS_ATTACKING_TARGET) != 0) {
        obj.guid = reader.read_packed_guid();

    }
    if ((obj.update_flag & UPDATE_FLAG_TRANSPORT) != 0) {
        obj.transport_progress_in_ms = reader.read_u32();

    }
    if ((obj.update_flag & UPDATE_FLAG_VEHICLE) != 0) {
        obj.vehicle_id = reader.read_u32();

        obj.vehicle_orientation = reader.read_float();

    }
    if ((obj.update_flag & UPDATE_FLAG_ROTATION) != 0) {
        obj.packed_local_rotation = reader.read_u64();

    }
    return obj;
}

static void MovementBlock_write(Writer& writer, const MovementBlock& obj) {
    writer.write_u16(static_cast<uint16_t>(obj.update_flag));

    if ((obj.update_flag & UPDATE_FLAG_LIVING) != 0) {
        writer.write_u48(static_cast<uint64_t>(obj.flags));

        writer.write_u32(obj.timestamp);

        Vector3d_write(writer, obj.position);

        writer.write_float(obj.orientation);

        if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT_AND_INTERPOLATED_MOVEMENT) != 0) {
            TransportInfo_write(writer, obj.transport_info);

            writer.write_u32(obj.transport_time);

        }
        else if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT) != 0) {
            TransportInfo_write(writer, obj.transport);

        }
        if ((obj.flags & MOVEMENT_FLAGS_SWIMMING) != 0) {
            writer.write_float(obj.pitch1);

        }
        else if ((obj.flags & MOVEMENT_FLAGS_FLYING) != 0) {
            writer.write_float(obj.pitch2);

        }
        else if ((obj.flags & MOVEMENT_FLAGS_ALWAYS_ALLOW_PITCHING) != 0) {
            writer.write_float(obj.pitch3);

        }
        writer.write_float(obj.fall_time);

        if ((obj.flags & MOVEMENT_FLAGS_FALLING) != 0) {
            writer.write_float(obj.z_speed);

            writer.write_float(obj.cos_angle);

            writer.write_float(obj.sin_angle);

            writer.write_float(obj.xy_speed);

        }
        if ((obj.flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) != 0) {
            writer.write_float(obj.spline_elevation);

        }
        writer.write_float(obj.walking_speed);

        writer.write_float(obj.running_speed);

        writer.write_float(obj.backwards_running_speed);

        writer.write_float(obj.swimming_speed);

        writer.write_float(obj.backwards_swimming_speed);

        writer.write_float(obj.flight_speed);

        writer.write_float(obj.backwards_flight_speed);

        writer.write_float(obj.turn_rate);

        writer.write_float(obj.pitch_rate);

        if ((obj.flags & MOVEMENT_FLAGS_SPLINE_ENABLED) != 0) {
            writer.write_u32(static_cast<uint32_t>(obj.spline_flags));

            if ((obj.spline_flags & SPLINE_FLAG_FINAL_ANGLE) != 0) {
                writer.write_float(obj.angle);

            }
            else if ((obj.spline_flags & SPLINE_FLAG_FINAL_TARGET) != 0) {
                writer.write_u64(obj.target);

            }
            else if ((obj.spline_flags & SPLINE_FLAG_FINAL_POINT) != 0) {
                Vector3d_write(writer, obj.spline_final_point);

            }
            writer.write_u32(obj.time_passed);

            writer.write_u32(obj.duration);

            writer.write_u32(obj.id);

            writer.write_float(obj.duration_mod);

            writer.write_float(obj.duration_mod_next);

            writer.write_float(obj.vertical_acceleration);

            writer.write_float(obj.effect_start_time);

            writer.write_u32(static_cast<uint32_t>(obj.nodes.size()));

            for (const auto& v : obj.nodes) {
                Vector3d_write(writer, v);
            }

            writer.write_u8(obj.mode);

            Vector3d_write(writer, obj.final_node);

        }
    }
    else if ((obj.update_flag & UPDATE_FLAG_POSITION) != 0) {
        writer.write_packed_guid(obj.transport_guid);

        Vector3d_write(writer, obj.position1);

        Vector3d_write(writer, obj.transport_offset);

        writer.write_float(obj.orientation1);

        writer.write_float(obj.corpse_orientation);

    }
    else if ((obj.update_flag & UPDATE_FLAG_HAS_POSITION) != 0) {
        Vector3d_write(writer, obj.position2);

        writer.write_float(obj.orientation2);

    }
    if ((obj.update_flag & UPDATE_FLAG_HIGH_GUID) != 0) {
        writer.write_u32(obj.unknown0);

    }
    if ((obj.update_flag & UPDATE_FLAG_LOW_GUID) != 0) {
        writer.write_u32(obj.unknown1);

    }
    if ((obj.update_flag & UPDATE_FLAG_HAS_ATTACKING_TARGET) != 0) {
        writer.write_packed_guid(obj.guid);

    }
    if ((obj.update_flag & UPDATE_FLAG_TRANSPORT) != 0) {
        writer.write_u32(obj.transport_progress_in_ms);

    }
    if ((obj.update_flag & UPDATE_FLAG_VEHICLE) != 0) {
        writer.write_u32(obj.vehicle_id);

        writer.write_float(obj.vehicle_orientation);

    }
    if ((obj.update_flag & UPDATE_FLAG_ROTATION) != 0) {
        writer.write_u64(obj.packed_local_rotation);

    }
}

static size_t MovementInfo_size(const MovementInfo& obj) {
    size_t _size = 30;

    if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT_AND_INTERPOLATED_MOVEMENT) != 0) {
        _size += 4 + TransportInfo_size(obj.transport_info);
    }
    else if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT) != 0) {
        _size += 0 + TransportInfo_size(obj.transport);
    }

    if ((obj.flags & MOVEMENT_FLAGS_SWIMMING) != 0) {
        _size += 4;
    }
    else if ((obj.flags & MOVEMENT_FLAGS_FLYING) != 0) {
        _size += 4;
    }
    else if ((obj.flags & MOVEMENT_FLAGS_ALWAYS_ALLOW_PITCHING) != 0) {
        _size += 4;
    }

    if ((obj.flags & MOVEMENT_FLAGS_FALLING) != 0) {
        _size += 16;
    }

    if ((obj.flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) != 0) {
        _size += 4;
    }

    return _size;
}

MovementInfo MovementInfo_read(Reader& reader) {
    MovementInfo obj{};

    obj.flags = static_cast<MovementFlags>(reader.read_u48());

    obj.timestamp = reader.read_u32();

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    obj.orientation = reader.read_float();

    if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT_AND_INTERPOLATED_MOVEMENT) != 0) {
        obj.transport_info = ::wow_world_messages::wrath::TransportInfo_read(reader);

        obj.transport_time = reader.read_u32();

    }
    else if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT) != 0) {
        obj.transport = ::wow_world_messages::wrath::TransportInfo_read(reader);

    }
    if ((obj.flags & MOVEMENT_FLAGS_SWIMMING) != 0) {
        obj.pitch1 = reader.read_float();

    }
    else if ((obj.flags & MOVEMENT_FLAGS_FLYING) != 0) {
        obj.pitch2 = reader.read_float();

    }
    else if ((obj.flags & MOVEMENT_FLAGS_ALWAYS_ALLOW_PITCHING) != 0) {
        obj.pitch3 = reader.read_float();

    }
    obj.fall_time = reader.read_float();

    if ((obj.flags & MOVEMENT_FLAGS_FALLING) != 0) {
        obj.z_speed = reader.read_float();

        obj.cos_angle = reader.read_float();

        obj.sin_angle = reader.read_float();

        obj.xy_speed = reader.read_float();

    }
    if ((obj.flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) != 0) {
        obj.spline_elevation = reader.read_float();

    }
    return obj;
}

static void MovementInfo_write(Writer& writer, const MovementInfo& obj) {
    writer.write_u48(static_cast<uint64_t>(obj.flags));

    writer.write_u32(obj.timestamp);

    Vector3d_write(writer, obj.position);

    writer.write_float(obj.orientation);

    if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT_AND_INTERPOLATED_MOVEMENT) != 0) {
        TransportInfo_write(writer, obj.transport_info);

        writer.write_u32(obj.transport_time);

    }
    else if ((obj.flags & MOVEMENT_FLAGS_ON_TRANSPORT) != 0) {
        TransportInfo_write(writer, obj.transport);

    }
    if ((obj.flags & MOVEMENT_FLAGS_SWIMMING) != 0) {
        writer.write_float(obj.pitch1);

    }
    else if ((obj.flags & MOVEMENT_FLAGS_FLYING) != 0) {
        writer.write_float(obj.pitch2);

    }
    else if ((obj.flags & MOVEMENT_FLAGS_ALWAYS_ALLOW_PITCHING) != 0) {
        writer.write_float(obj.pitch3);

    }
    writer.write_float(obj.fall_time);

    if ((obj.flags & MOVEMENT_FLAGS_FALLING) != 0) {
        writer.write_float(obj.z_speed);

        writer.write_float(obj.cos_angle);

        writer.write_float(obj.sin_angle);

        writer.write_float(obj.xy_speed);

    }
    if ((obj.flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) != 0) {
        writer.write_float(obj.spline_elevation);

    }
}

NpcTextUpdateEmote NpcTextUpdateEmote_read(Reader& reader) {
    NpcTextUpdateEmote obj{};

    obj.delay = reader.read_u32();

    obj.emote = reader.read_u32();

    return obj;
}

static void NpcTextUpdateEmote_write(Writer& writer, const NpcTextUpdateEmote& obj) {
    writer.write_u32(obj.delay);

    writer.write_u32(obj.emote);

}

static size_t NpcTextUpdate_size(const NpcTextUpdate& obj) {
    size_t _size = 29;

    for(const auto& v : obj.texts) {
        _size += v.size() + 1;
    }

    return _size;
}

NpcTextUpdate NpcTextUpdate_read(Reader& reader) {
    NpcTextUpdate obj{};

    obj.probability = reader.read_float();

    for (auto i = 0; i < 2; ++i) {
        obj.texts[i] = reader.read_cstring();
    }

    obj.language = static_cast<Language>(reader.read_u8());

    for (auto i = 0; i < 3; ++i) {
        obj.emotes[i] = ::wow_world_messages::wrath::NpcTextUpdateEmote_read(reader);
    }

    return obj;
}

static void NpcTextUpdate_write(Writer& writer, const NpcTextUpdate& obj) {
    writer.write_float(obj.probability);

    for (const auto& v : obj.texts) {
        writer.write_cstring(v);
    }

    writer.write_u8(static_cast<uint8_t>(obj.language));

    for (const auto& v : obj.emotes) {
        NpcTextUpdateEmote_write(writer, v);
    }

}

static size_t Object_size(const Object& obj) {
    size_t _size = 1;

    if (obj.update_type == UpdateType::VALUES) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid1) + wrath::update_mask_size(obj.mask1);
    }
    else if (obj.update_type == UpdateType::MOVEMENT) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid2) + MovementBlock_size(obj.movement1);
    }
    else if (obj.update_type == UpdateType::CREATE_OBJECT|| obj.update_type == UpdateType::CREATE_OBJECT2) {
        _size += 1 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid3) + MovementBlock_size(obj.movement2) + wrath::update_mask_size(obj.mask2);
    }
    else if (obj.update_type == UpdateType::OUT_OF_RANGE_OBJECTS|| obj.update_type == UpdateType::NEAR_OBJECTS) {
        _size += 4;

        for(const auto& v : obj.guids) {
            _size += wow_world_messages::util::wwm_packed_guid_size(v);
        }

    }

    return _size;
}

Object Object_read(Reader& reader) {
    Object obj{};

    obj.update_type = static_cast<UpdateType>(reader.read_u8());

    if (obj.update_type == UpdateType::VALUES) {
        obj.guid1 = reader.read_packed_guid();

        obj.mask1 = wrath::update_mask_read(reader);

    }
    else if (obj.update_type == UpdateType::MOVEMENT) {
        obj.guid2 = reader.read_packed_guid();

        obj.movement1 = ::wow_world_messages::wrath::MovementBlock_read(reader);

    }
    else if (obj.update_type == UpdateType::CREATE_OBJECT|| obj.update_type == UpdateType::CREATE_OBJECT2) {
        obj.guid3 = reader.read_packed_guid();

        obj.object_type = static_cast<ObjectType>(reader.read_u8());

        obj.movement2 = ::wow_world_messages::wrath::MovementBlock_read(reader);

        obj.mask2 = wrath::update_mask_read(reader);

    }
    else if (obj.update_type == UpdateType::OUT_OF_RANGE_OBJECTS|| obj.update_type == UpdateType::NEAR_OBJECTS) {
        auto count = reader.read_u32();

        for (uint32_t i = 0; i < count; ++i) {
            obj.guids.push_back(reader.read_packed_guid());
        }

    }
    return obj;
}

static void Object_write(Writer& writer, const Object& obj) {
    writer.write_u8(static_cast<uint8_t>(obj.update_type));

    if (obj.update_type == UpdateType::VALUES) {
        writer.write_packed_guid(obj.guid1);

        wrath::update_mask_write(writer, obj.mask1);

    }
    else if (obj.update_type == UpdateType::MOVEMENT) {
        writer.write_packed_guid(obj.guid2);

        MovementBlock_write(writer, obj.movement1);

    }
    else if (obj.update_type == UpdateType::CREATE_OBJECT|| obj.update_type == UpdateType::CREATE_OBJECT2) {
        writer.write_packed_guid(obj.guid3);

        writer.write_u8(static_cast<uint8_t>(obj.object_type));

        MovementBlock_write(writer, obj.movement2);

        wrath::update_mask_write(writer, obj.mask2);

    }
    else if (obj.update_type == UpdateType::OUT_OF_RANGE_OBJECTS|| obj.update_type == UpdateType::NEAR_OBJECTS) {
        writer.write_u32(static_cast<uint32_t>(obj.guids.size()));

        for (const auto& v : obj.guids) {
            writer.write_packed_guid(v);
        }

    }
}

static size_t PendingAuctionSale_size(const PendingAuctionSale& obj) {
    return 14 + obj.string1.size() + obj.string2.size();
}

PendingAuctionSale PendingAuctionSale_read(Reader& reader) {
    PendingAuctionSale obj{};

    obj.string1 = reader.read_cstring();

    obj.string2 = reader.read_cstring();

    obj.unknown1 = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    obj.time_left = reader.read_float();

    return obj;
}

static void PendingAuctionSale_write(Writer& writer, const PendingAuctionSale& obj) {
    writer.write_cstring(obj.string1);

    writer.write_cstring(obj.string2);

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.unknown2);

    writer.write_float(obj.time_left);

}

PetSpellCooldown PetSpellCooldown_read(Reader& reader) {
    PetSpellCooldown obj{};

    obj.spell = reader.read_u32();

    obj.spell_category = reader.read_u16();

    obj.cooldown = reader.read_u32();

    obj.category_cooldown = reader.read_u32();

    return obj;
}

static void PetSpellCooldown_write(Writer& writer, const PetSpellCooldown& obj) {
    writer.write_u32(obj.spell);

    writer.write_u16(obj.spell_category);

    writer.write_u32(obj.cooldown);

    writer.write_u32(obj.category_cooldown);

}

PetitionShowlist PetitionShowlist_read(Reader& reader) {
    PetitionShowlist obj{};

    obj.index = reader.read_u32();

    obj.charter_entry = reader.read_u32();

    obj.charter_display_id = reader.read_u32();

    obj.guild_charter_cost = reader.read_u32();

    obj.unknown1 = reader.read_u32();

    obj.signatures_required = reader.read_u32();

    return obj;
}

static void PetitionShowlist_write(Writer& writer, const PetitionShowlist& obj) {
    writer.write_u32(obj.index);

    writer.write_u32(obj.charter_entry);

    writer.write_u32(obj.charter_display_id);

    writer.write_u32(obj.guild_charter_cost);

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.signatures_required);

}

PetitionSignature PetitionSignature_read(Reader& reader) {
    PetitionSignature obj{};

    obj.signer = reader.read_u64();

    obj.unknown1 = reader.read_u32();

    return obj;
}

static void PetitionSignature_write(Writer& writer, const PetitionSignature& obj) {
    writer.write_u64(obj.signer);

    writer.write_u32(obj.unknown1);

}

PreviewTalent PreviewTalent_read(Reader& reader) {
    PreviewTalent obj{};

    obj.talent = static_cast<Talent>(reader.read_u32());

    obj.rank = reader.read_u32();

    return obj;
}

static void PreviewTalent_write(Writer& writer, const PreviewTalent& obj) {
    writer.write_u32(static_cast<uint32_t>(obj.talent));

    writer.write_u32(obj.rank);

}

QuestDetailsEmote QuestDetailsEmote_read(Reader& reader) {
    QuestDetailsEmote obj{};

    obj.emote = reader.read_u32();

    obj.emote_delay = reader.read_u32();

    return obj;
}

static void QuestDetailsEmote_write(Writer& writer, const QuestDetailsEmote& obj) {
    writer.write_u32(obj.emote);

    writer.write_u32(obj.emote_delay);

}

QuestGiverReward QuestGiverReward_read(Reader& reader) {
    QuestGiverReward obj{};

    obj.item = reader.read_u32();

    obj.item_count = reader.read_u32();

    obj.display_id = reader.read_u32();

    return obj;
}

static void QuestGiverReward_write(Writer& writer, const QuestGiverReward& obj) {
    writer.write_u32(obj.item);

    writer.write_u32(obj.item_count);

    writer.write_u32(obj.display_id);

}

QuestGiverStatusReport QuestGiverStatusReport_read(Reader& reader) {
    QuestGiverStatusReport obj{};

    obj.npc = reader.read_u64();

    obj.dialog_status = static_cast<QuestGiverStatus>(reader.read_u8());

    return obj;
}

static void QuestGiverStatusReport_write(Writer& writer, const QuestGiverStatusReport& obj) {
    writer.write_u64(obj.npc);

    writer.write_u8(static_cast<uint8_t>(obj.dialog_status));

}

static size_t QuestItem_size(const QuestItem& obj) {
    return 18 + obj.title.size();
}

QuestItem QuestItem_read(Reader& reader) {
    QuestItem obj{};

    obj.quest_id = reader.read_u32();

    obj.quest_icon = reader.read_u32();

    obj.level = reader.read_u32();

    obj.flags = reader.read_u32();

    obj.repeatable = reader.read_bool8();

    obj.title = reader.read_cstring();

    return obj;
}

static void QuestItem_write(Writer& writer, const QuestItem& obj) {
    writer.write_u32(obj.quest_id);

    writer.write_u32(obj.quest_icon);

    writer.write_u32(obj.level);

    writer.write_u32(obj.flags);

    writer.write_bool8(obj.repeatable);

    writer.write_cstring(obj.title);

}

QuestItemRequirement QuestItemRequirement_read(Reader& reader) {
    QuestItemRequirement obj{};

    obj.item = reader.read_u32();

    obj.item_count = reader.read_u32();

    obj.item_display_id = reader.read_u32();

    return obj;
}

static void QuestItemRequirement_write(Writer& writer, const QuestItemRequirement& obj) {
    writer.write_u32(obj.item);

    writer.write_u32(obj.item_count);

    writer.write_u32(obj.item_display_id);

}

QuestItemReward QuestItemReward_read(Reader& reader) {
    QuestItemReward obj{};

    obj.item = reader.read_u32();

    obj.item_count = reader.read_u32();

    return obj;
}

static void QuestItemReward_write(Writer& writer, const QuestItemReward& obj) {
    writer.write_u32(obj.item);

    writer.write_u32(obj.item_count);

}

QuestObjective QuestObjective_read(Reader& reader) {
    QuestObjective obj{};

    obj.creature_id = reader.read_u32();

    obj.kill_count = reader.read_u32();

    obj.required_item_id = reader.read_u32();

    obj.required_item_count = reader.read_u32();

    return obj;
}

static void QuestObjective_write(Writer& writer, const QuestObjective& obj) {
    writer.write_u32(obj.creature_id);

    writer.write_u32(obj.kill_count);

    writer.write_u32(obj.required_item_id);

    writer.write_u32(obj.required_item_count);

}

Vector2dUnsigned Vector2dUnsigned_read(Reader& reader) {
    Vector2dUnsigned obj{};

    obj.x = reader.read_u32();

    obj.y = reader.read_u32();

    return obj;
}

static void Vector2dUnsigned_write(Writer& writer, const Vector2dUnsigned& obj) {
    writer.write_u32(obj.x);

    writer.write_u32(obj.y);

}

static size_t QuestPoi_size(const QuestPoi& obj) {
    return 32 + 8 * obj.points.size();
}

QuestPoi QuestPoi_read(Reader& reader) {
    QuestPoi obj{};

    obj.id = reader.read_u32();

    obj.objective_id = reader.read_u32();

    obj.map = static_cast<Map>(reader.read_u32());

    obj.area = static_cast<Area>(reader.read_u32());

    obj.floor_id = reader.read_u32();

    obj.unknown1 = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    auto amount_of_points = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_points; ++i) {
        obj.points.push_back(::wow_world_messages::wrath::Vector2dUnsigned_read(reader));
    }

    return obj;
}

static void QuestPoi_write(Writer& writer, const QuestPoi& obj) {
    writer.write_u32(obj.id);

    writer.write_u32(obj.objective_id);

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(static_cast<uint32_t>(obj.area));

    writer.write_u32(obj.floor_id);

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.unknown2);

    writer.write_u32(static_cast<uint32_t>(obj.points.size()));

    for (const auto& v : obj.points) {
        Vector2dUnsigned_write(writer, v);
    }

}

static size_t QuestPoiList_size(const QuestPoiList& obj) {
    size_t _size = 8;

    for(const auto& v : obj.pois) {
        _size += QuestPoi_size(v);
    }

    return _size;
}

QuestPoiList QuestPoiList_read(Reader& reader) {
    QuestPoiList obj{};

    obj.quest_id = reader.read_u32();

    auto amount_of_pois = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_pois; ++i) {
        obj.pois.push_back(::wow_world_messages::wrath::QuestPoi_read(reader));
    }

    return obj;
}

static void QuestPoiList_write(Writer& writer, const QuestPoiList& obj) {
    writer.write_u32(obj.quest_id);

    writer.write_u32(static_cast<uint32_t>(obj.pois.size()));

    for (const auto& v : obj.pois) {
        QuestPoi_write(writer, v);
    }

}

RaidInfo RaidInfo_read(Reader& reader) {
    RaidInfo obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    obj.difficulty = static_cast<DungeonDifficulty>(reader.read_u32());

    obj.instance_id = reader.read_u64();

    obj.expired = reader.read_bool8();

    obj.extended = reader.read_bool8();

    obj.time_until_reset = reader.read_u32();

    return obj;
}

static void RaidInfo_write(Writer& writer, const RaidInfo& obj) {
    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(static_cast<uint32_t>(obj.difficulty));

    writer.write_u64(obj.instance_id);

    writer.write_bool8(obj.expired);

    writer.write_bool8(obj.extended);

    writer.write_u32(obj.time_until_reset);

}

RaidTargetUpdate RaidTargetUpdate_read(Reader& reader) {
    RaidTargetUpdate obj{};

    obj.index = static_cast<RaidTargetIndex>(reader.read_u8());

    obj.guid = reader.read_u64();

    return obj;
}

static void RaidTargetUpdate_write(Writer& writer, const RaidTargetUpdate& obj) {
    writer.write_u8(static_cast<uint8_t>(obj.index));

    writer.write_u64(obj.guid);

}

ReceivedMail ReceivedMail_read(Reader& reader) {
    ReceivedMail obj{};

    obj.sender = reader.read_u64();

    obj.auction_house = static_cast<AuctionHouse>(reader.read_u32());

    obj.message_type = static_cast<MailMessageType>(reader.read_u32());

    obj.stationery = reader.read_u32();

    obj.time = reader.read_float();

    return obj;
}

static void ReceivedMail_write(Writer& writer, const ReceivedMail& obj) {
    writer.write_u64(obj.sender);

    writer.write_u32(static_cast<uint32_t>(obj.auction_house));

    writer.write_u32(static_cast<uint32_t>(obj.message_type));

    writer.write_u32(obj.stationery);

    writer.write_float(obj.time);

}

static size_t Relation_size(const Relation& obj) {
    size_t _size = 13 + obj.note.size();

    if ((obj.relation_mask & RELATION_TYPE_FRIEND) != 0) {
        _size += 1;

        if (obj.status == FriendStatus::ONLINE) {
            _size += 12;
        }

    }

    return _size;
}

Relation Relation_read(Reader& reader) {
    Relation obj{};

    obj.guid = reader.read_u64();

    obj.relation_mask = static_cast<RelationType>(reader.read_u32());

    obj.note = reader.read_cstring();

    if ((obj.relation_mask & RELATION_TYPE_FRIEND) != 0) {
        obj.status = static_cast<FriendStatus>(reader.read_u8());

        if (obj.status == FriendStatus::ONLINE) {
            obj.area = static_cast<Area>(reader.read_u32());

            obj.level = reader.read_u32();

            obj.class_type = static_cast<Class>(reader.read_u32());

        }
    }
    return obj;
}

static void Relation_write(Writer& writer, const Relation& obj) {
    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.relation_mask));

    writer.write_cstring(obj.note);

    if ((obj.relation_mask & RELATION_TYPE_FRIEND) != 0) {
        writer.write_u8(static_cast<uint8_t>(obj.status));

        if (obj.status == FriendStatus::ONLINE) {
            writer.write_u32(static_cast<uint32_t>(obj.area));

            writer.write_u32(obj.level);

            writer.write_u32(static_cast<uint32_t>(obj.class_type));

        }
    }
}

ResyncRune ResyncRune_read(Reader& reader) {
    ResyncRune obj{};

    obj.current_rune = reader.read_u8();

    obj.rune_cooldown = reader.read_u8();

    return obj;
}

static void ResyncRune_write(Writer& writer, const ResyncRune& obj) {
    writer.write_u8(obj.current_rune);

    writer.write_u8(obj.rune_cooldown);

}

static size_t SendCalendarEvent_size(const SendCalendarEvent& obj) {
    return 25 + obj.title.size() + ::wow_world_messages::util::wwm_packed_guid_size(obj.creator);
}

SendCalendarEvent SendCalendarEvent_read(Reader& reader) {
    SendCalendarEvent obj{};

    obj.event_id = reader.read_u64();

    obj.title = reader.read_cstring();

    obj.event_type = reader.read_u32();

    obj.event_time = reader.read_u32();

    obj.flags = reader.read_u32();

    obj.dungeon_id = reader.read_u32();

    obj.creator = reader.read_packed_guid();

    return obj;
}

static void SendCalendarEvent_write(Writer& writer, const SendCalendarEvent& obj) {
    writer.write_u64(obj.event_id);

    writer.write_cstring(obj.title);

    writer.write_u32(obj.event_type);

    writer.write_u32(obj.event_time);

    writer.write_u32(obj.flags);

    writer.write_u32(obj.dungeon_id);

    writer.write_packed_guid(obj.creator);

}

static size_t SendCalendarHoliday_size(const SendCalendarHoliday& obj) {
    return 205 + obj.texture_file_name.size();
}

SendCalendarHoliday SendCalendarHoliday_read(Reader& reader) {
    SendCalendarHoliday obj{};

    obj.holiday_id = reader.read_u32();

    obj.region = reader.read_u32();

    obj.looping = reader.read_u32();

    obj.priority = reader.read_u32();

    obj.calendar_filter_type = reader.read_u32();

    for (auto i = 0; i < 26; ++i) {
        obj.holiday_days[i] = reader.read_u32();
    }

    for (auto i = 0; i < 10; ++i) {
        obj.durations[i] = reader.read_u32();
    }

    for (auto i = 0; i < 10; ++i) {
        obj.flags[i] = reader.read_u32();
    }

    obj.texture_file_name = reader.read_cstring();

    return obj;
}

static void SendCalendarHoliday_write(Writer& writer, const SendCalendarHoliday& obj) {
    writer.write_u32(obj.holiday_id);

    writer.write_u32(obj.region);

    writer.write_u32(obj.looping);

    writer.write_u32(obj.priority);

    writer.write_u32(obj.calendar_filter_type);

    for (const auto& v : obj.holiday_days) {
        writer.write_u32(v);
    }

    for (const auto& v : obj.durations) {
        writer.write_u32(v);
    }

    for (const auto& v : obj.flags) {
        writer.write_u32(v);
    }

    writer.write_cstring(obj.texture_file_name);

}

SendCalendarInstance SendCalendarInstance_read(Reader& reader) {
    SendCalendarInstance obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    obj.difficulty = reader.read_u32();

    obj.reset_time = reader.read_u32();

    obj.instance_id = reader.read_u64();

    return obj;
}

static void SendCalendarInstance_write(Writer& writer, const SendCalendarInstance& obj) {
    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(obj.difficulty);

    writer.write_u32(obj.reset_time);

    writer.write_u64(obj.instance_id);

}

static size_t SendCalendarInvite_size(const SendCalendarInvite& obj) {
    return 19 + ::wow_world_messages::util::wwm_packed_guid_size(obj.creator);
}

SendCalendarInvite SendCalendarInvite_read(Reader& reader) {
    SendCalendarInvite obj{};

    obj.event_id = reader.read_u64();

    obj.invite_id = reader.read_u64();

    obj.status = reader.read_u8();

    obj.rank = reader.read_u8();

    obj.is_guild_event = reader.read_bool8();

    obj.creator = reader.read_packed_guid();

    return obj;
}

static void SendCalendarInvite_write(Writer& writer, const SendCalendarInvite& obj) {
    writer.write_u64(obj.event_id);

    writer.write_u64(obj.invite_id);

    writer.write_u8(obj.status);

    writer.write_u8(obj.rank);

    writer.write_bool8(obj.is_guild_event);

    writer.write_packed_guid(obj.creator);

}

SendCalendarResetTime SendCalendarResetTime_read(Reader& reader) {
    SendCalendarResetTime obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    obj.period = reader.read_u32();

    obj.time_offset = reader.read_u32();

    return obj;
}

static void SendCalendarResetTime_write(Writer& writer, const SendCalendarResetTime& obj) {
    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(obj.period);

    writer.write_u32(obj.time_offset);

}

static size_t SpellCastTargets_size(const SpellCastTargets& obj) {
    size_t _size = 4;

    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_UNIT) != 0) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit_target);
    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_UNIT_MINIPET) != 0) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.minipet_target);
    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_GAMEOBJECT) != 0) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.gameobject_target);
    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE_ENEMY) != 0) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.enemy_corpse_target);
    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE_ALLY) != 0) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.ally_corpse_target);
    }

    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_ITEM) != 0) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.item_target);
    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_TRADE_ITEM) != 0) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.trade_item_target);
    }

    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION) != 0) {
        _size += 12;
    }

    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_DEST_LOCATION) != 0) {
        _size += 12;
    }

    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_STRING) != 0) {
        _size += 1 + obj.target_string.size();
    }

    return _size;
}

SpellCastTargets SpellCastTargets_read(Reader& reader) {
    SpellCastTargets obj{};

    obj.target_flags = static_cast<SpellCastTargetFlags>(reader.read_u32());

    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_UNIT) != 0) {
        obj.unit_target = reader.read_packed_guid();

    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_UNIT_MINIPET) != 0) {
        obj.minipet_target = reader.read_packed_guid();

    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_GAMEOBJECT) != 0) {
        obj.gameobject_target = reader.read_packed_guid();

    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE_ENEMY) != 0) {
        obj.enemy_corpse_target = reader.read_packed_guid();

    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE_ALLY) != 0) {
        obj.ally_corpse_target = reader.read_packed_guid();

    }
    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_ITEM) != 0) {
        obj.item_target = reader.read_packed_guid();

    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_TRADE_ITEM) != 0) {
        obj.trade_item_target = reader.read_packed_guid();

    }
    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION) != 0) {
        obj.source = ::wow_world_messages::all::Vector3d_read(reader);

    }
    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_DEST_LOCATION) != 0) {
        obj.destination = ::wow_world_messages::all::Vector3d_read(reader);

    }
    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_STRING) != 0) {
        obj.target_string = reader.read_cstring();

    }
    return obj;
}

static void SpellCastTargets_write(Writer& writer, const SpellCastTargets& obj) {
    writer.write_u32(static_cast<uint32_t>(obj.target_flags));

    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_UNIT) != 0) {
        writer.write_packed_guid(obj.unit_target);

    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_UNIT_MINIPET) != 0) {
        writer.write_packed_guid(obj.minipet_target);

    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_GAMEOBJECT) != 0) {
        writer.write_packed_guid(obj.gameobject_target);

    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE_ENEMY) != 0) {
        writer.write_packed_guid(obj.enemy_corpse_target);

    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE_ALLY) != 0) {
        writer.write_packed_guid(obj.ally_corpse_target);

    }
    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_ITEM) != 0) {
        writer.write_packed_guid(obj.item_target);

    }
    else if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_TRADE_ITEM) != 0) {
        writer.write_packed_guid(obj.trade_item_target);

    }
    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION) != 0) {
        Vector3d_write(writer, obj.source);

    }
    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_DEST_LOCATION) != 0) {
        Vector3d_write(writer, obj.destination);

    }
    if ((obj.target_flags & SPELL_CAST_TARGET_FLAGS_STRING) != 0) {
        writer.write_cstring(obj.target_string);

    }
}

SpellCooldownStatus SpellCooldownStatus_read(Reader& reader) {
    SpellCooldownStatus obj{};

    obj.id = reader.read_u32();

    obj.cooldown_time = reader.read_u32();

    return obj;
}

static void SpellCooldownStatus_write(Writer& writer, const SpellCooldownStatus& obj) {
    writer.write_u32(obj.id);

    writer.write_u32(obj.cooldown_time);

}

static size_t SpellLog_size(const SpellLog& obj) {
    size_t _size = 8;

    if (obj.effect == SpellEffect::POWER_DRAIN) {
        _size += 12 + ::wow_world_messages::util::wwm_packed_guid_size(obj.target1);
    }
    else if (obj.effect == SpellEffect::ADD_EXTRA_ATTACKS) {
        _size += 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.target4);
    }
    else if (obj.effect == SpellEffect::INTERRUPT_CAST) {
        _size += 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.target5);
    }
    else if (obj.effect == SpellEffect::DURABILITY_DAMAGE) {
        _size += 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.target6);
    }
    else if (obj.effect == SpellEffect::OPEN_LOCK|| obj.effect == SpellEffect::OPEN_LOCK_ITEM) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.lock_target);
    }
    else if (obj.effect == SpellEffect::CREATE_ITEM|| obj.effect == SpellEffect::CREATE_ITEM2) {
        _size += 4;
    }
    else if (obj.effect == SpellEffect::SUMMON|| obj.effect == SpellEffect::TRANS_DOOR|| obj.effect == SpellEffect::SUMMON_PET|| obj.effect == SpellEffect::SUMMON_OBJECT_WILD|| obj.effect == SpellEffect::CREATE_HOUSE|| obj.effect == SpellEffect::DUEL|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT1|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT2|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT3|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT4) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.summon_target);
    }
    else if (obj.effect == SpellEffect::FEED_PET) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.pet_feed_guid);
    }
    else if (obj.effect == SpellEffect::DISMISS_PET) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.pet_dismiss_guid);
    }
    else if (obj.effect == SpellEffect::RESURRECT|| obj.effect == SpellEffect::RESURRECT_NEW) {
        _size += 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.resurrect_guid);
    }

    return _size;
}

SpellLog SpellLog_read(Reader& reader) {
    SpellLog obj{};

    obj.effect = static_cast<SpellEffect>(reader.read_u32());

    (void)reader.read_u32();

    if (obj.effect == SpellEffect::POWER_DRAIN) {
        obj.target1 = reader.read_packed_guid();

        obj.amount = reader.read_u32();

        obj.power = static_cast<Power>(reader.read_u32());

        obj.multiplier = reader.read_float();

    }
    else if (obj.effect == SpellEffect::ADD_EXTRA_ATTACKS) {
        obj.target4 = reader.read_packed_guid();

        obj.extra_attacks = reader.read_u32();

    }
    else if (obj.effect == SpellEffect::INTERRUPT_CAST) {
        obj.target5 = reader.read_packed_guid();

        obj.interrupted_spell = reader.read_u32();

    }
    else if (obj.effect == SpellEffect::DURABILITY_DAMAGE) {
        obj.target6 = reader.read_packed_guid();

        obj.item_to_damage = reader.read_u32();

        obj.unknown5 = reader.read_u32();

    }
    else if (obj.effect == SpellEffect::OPEN_LOCK|| obj.effect == SpellEffect::OPEN_LOCK_ITEM) {
        obj.lock_target = reader.read_packed_guid();

    }
    else if (obj.effect == SpellEffect::CREATE_ITEM|| obj.effect == SpellEffect::CREATE_ITEM2) {
        obj.item = reader.read_u32();

    }
    else if (obj.effect == SpellEffect::SUMMON|| obj.effect == SpellEffect::TRANS_DOOR|| obj.effect == SpellEffect::SUMMON_PET|| obj.effect == SpellEffect::SUMMON_OBJECT_WILD|| obj.effect == SpellEffect::CREATE_HOUSE|| obj.effect == SpellEffect::DUEL|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT1|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT2|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT3|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT4) {
        obj.summon_target = reader.read_packed_guid();

    }
    else if (obj.effect == SpellEffect::FEED_PET) {
        obj.pet_feed_guid = reader.read_packed_guid();

    }
    else if (obj.effect == SpellEffect::DISMISS_PET) {
        obj.pet_dismiss_guid = reader.read_packed_guid();

    }
    else if (obj.effect == SpellEffect::RESURRECT|| obj.effect == SpellEffect::RESURRECT_NEW) {
        obj.resurrect_guid = reader.read_packed_guid();

    }
    return obj;
}

static void SpellLog_write(Writer& writer, const SpellLog& obj) {
    writer.write_u32(static_cast<uint32_t>(obj.effect));

    writer.write_u32(1);

    if (obj.effect == SpellEffect::POWER_DRAIN) {
        writer.write_packed_guid(obj.target1);

        writer.write_u32(obj.amount);

        writer.write_u32(static_cast<uint32_t>(obj.power));

        writer.write_float(obj.multiplier);

    }
    else if (obj.effect == SpellEffect::ADD_EXTRA_ATTACKS) {
        writer.write_packed_guid(obj.target4);

        writer.write_u32(obj.extra_attacks);

    }
    else if (obj.effect == SpellEffect::INTERRUPT_CAST) {
        writer.write_packed_guid(obj.target5);

        writer.write_u32(obj.interrupted_spell);

    }
    else if (obj.effect == SpellEffect::DURABILITY_DAMAGE) {
        writer.write_packed_guid(obj.target6);

        writer.write_u32(obj.item_to_damage);

        writer.write_u32(obj.unknown5);

    }
    else if (obj.effect == SpellEffect::OPEN_LOCK|| obj.effect == SpellEffect::OPEN_LOCK_ITEM) {
        writer.write_packed_guid(obj.lock_target);

    }
    else if (obj.effect == SpellEffect::CREATE_ITEM|| obj.effect == SpellEffect::CREATE_ITEM2) {
        writer.write_u32(obj.item);

    }
    else if (obj.effect == SpellEffect::SUMMON|| obj.effect == SpellEffect::TRANS_DOOR|| obj.effect == SpellEffect::SUMMON_PET|| obj.effect == SpellEffect::SUMMON_OBJECT_WILD|| obj.effect == SpellEffect::CREATE_HOUSE|| obj.effect == SpellEffect::DUEL|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT1|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT2|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT3|| obj.effect == SpellEffect::SUMMON_OBJECT_SLOT4) {
        writer.write_packed_guid(obj.summon_target);

    }
    else if (obj.effect == SpellEffect::FEED_PET) {
        writer.write_packed_guid(obj.pet_feed_guid);

    }
    else if (obj.effect == SpellEffect::DISMISS_PET) {
        writer.write_packed_guid(obj.pet_dismiss_guid);

    }
    else if (obj.effect == SpellEffect::RESURRECT|| obj.effect == SpellEffect::RESURRECT_NEW) {
        writer.write_packed_guid(obj.resurrect_guid);

    }
}

SpellLogMiss SpellLogMiss_read(Reader& reader) {
    SpellLogMiss obj{};

    obj.target = reader.read_u64();

    obj.miss_info = static_cast<SpellMissInfo>(reader.read_u8());

    return obj;
}

static void SpellLogMiss_write(Writer& writer, const SpellLogMiss& obj) {
    writer.write_u64(obj.target);

    writer.write_u8(static_cast<uint8_t>(obj.miss_info));

}

static size_t SpellMiss_size(const SpellMiss& obj) {
    size_t _size = 9;

    if (obj.miss_info == SpellMissInfo::REFLECT) {
        _size += 1;
    }

    return _size;
}

SpellMiss SpellMiss_read(Reader& reader) {
    SpellMiss obj{};

    obj.target = reader.read_u64();

    obj.miss_info = static_cast<SpellMissInfo>(reader.read_u8());

    if (obj.miss_info == SpellMissInfo::REFLECT) {
        obj.reflect_result = reader.read_u8();

    }
    return obj;
}

static void SpellMiss_write(Writer& writer, const SpellMiss& obj) {
    writer.write_u64(obj.target);

    writer.write_u8(static_cast<uint8_t>(obj.miss_info));

    if (obj.miss_info == SpellMissInfo::REFLECT) {
        writer.write_u8(obj.reflect_result);

    }
}

SpellSteal SpellSteal_read(Reader& reader) {
    SpellSteal obj{};

    obj.spell = reader.read_u32();

    obj.action = static_cast<SpellStealAction>(reader.read_u8());

    return obj;
}

static void SpellSteal_write(Writer& writer, const SpellSteal& obj) {
    writer.write_u32(obj.spell);

    writer.write_u8(static_cast<uint8_t>(obj.action));

}

static size_t StabledPet_size(const StabledPet& obj) {
    return 18 + obj.name.size();
}

StabledPet StabledPet_read(Reader& reader) {
    StabledPet obj{};

    obj.pet_number = reader.read_u32();

    obj.entry = reader.read_u32();

    obj.level = reader.read_u32();

    obj.name = reader.read_cstring();

    obj.loyalty = reader.read_u32();

    obj.slot = reader.read_u8();

    return obj;
}

static void StabledPet_write(Writer& writer, const StabledPet& obj) {
    writer.write_u32(obj.pet_number);

    writer.write_u32(obj.entry);

    writer.write_u32(obj.level);

    writer.write_cstring(obj.name);

    writer.write_u32(obj.loyalty);

    writer.write_u8(obj.slot);

}

static size_t TalentInfoSpec_size(const TalentInfoSpec& obj) {
    return 2 + 5 * obj.talents.size() + 2 * obj.glyphs.size();
}

TalentInfoSpec TalentInfoSpec_read(Reader& reader) {
    TalentInfoSpec obj{};

    auto amount_of_talents = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_talents; ++i) {
        obj.talents.push_back(::wow_world_messages::wrath::InspectTalent_read(reader));
    }

    auto amount_of_glyphs = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_glyphs; ++i) {
        obj.glyphs.push_back(reader.read_u16());
    }

    return obj;
}

static void TalentInfoSpec_write(Writer& writer, const TalentInfoSpec& obj) {
    writer.write_u8(static_cast<uint8_t>(obj.talents.size()));

    for (const auto& v : obj.talents) {
        InspectTalent_write(writer, v);
    }

    writer.write_u8(static_cast<uint8_t>(obj.glyphs.size()));

    for (const auto& v : obj.glyphs) {
        writer.write_u16(v);
    }

}

static size_t ThreatUpdateUnit_size(const ThreatUpdateUnit& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);
}

ThreatUpdateUnit ThreatUpdateUnit_read(Reader& reader) {
    ThreatUpdateUnit obj{};

    obj.unit = reader.read_packed_guid();

    obj.threat = reader.read_u32();

    return obj;
}

static void ThreatUpdateUnit_write(Writer& writer, const ThreatUpdateUnit& obj) {
    writer.write_packed_guid(obj.unit);

    writer.write_u32(obj.threat);

}

TradeSlot TradeSlot_read(Reader& reader) {
    TradeSlot obj{};

    obj.trade_slot_number = reader.read_u8();

    obj.item = reader.read_u32();

    obj.display_id = reader.read_u32();

    obj.stack_count = reader.read_u32();

    obj.wrapped = reader.read_bool32();

    obj.gift_wrapper = reader.read_u64();

    obj.enchantment = reader.read_u32();

    for (auto i = 0; i < 3; ++i) {
        obj.enchantments_slots[i] = reader.read_u32();
    }

    obj.item_creator = reader.read_u64();

    obj.spell_charges = reader.read_u32();

    obj.item_suffix_factor = reader.read_u32();

    obj.item_random_properties_id = reader.read_u32();

    obj.lock_id = reader.read_u32();

    obj.max_durability = reader.read_u32();

    obj.durability = reader.read_u32();

    return obj;
}

static void TradeSlot_write(Writer& writer, const TradeSlot& obj) {
    writer.write_u8(obj.trade_slot_number);

    writer.write_u32(obj.item);

    writer.write_u32(obj.display_id);

    writer.write_u32(obj.stack_count);

    writer.write_bool32(obj.wrapped);

    writer.write_u64(obj.gift_wrapper);

    writer.write_u32(obj.enchantment);

    for (const auto& v : obj.enchantments_slots) {
        writer.write_u32(v);
    }

    writer.write_u64(obj.item_creator);

    writer.write_u32(obj.spell_charges);

    writer.write_u32(obj.item_suffix_factor);

    writer.write_u32(obj.item_random_properties_id);

    writer.write_u32(obj.lock_id);

    writer.write_u32(obj.max_durability);

    writer.write_u32(obj.durability);

}

TrainerSpell TrainerSpell_read(Reader& reader) {
    TrainerSpell obj{};

    obj.spell = reader.read_u32();

    obj.state = static_cast<TrainerSpellState>(reader.read_u8());

    obj.spell_cost = reader.read_u32();

    obj.talent_point_cost = reader.read_u32();

    obj.first_rank = reader.read_u32();

    obj.required_level = reader.read_u8();

    obj.required_skill = static_cast<Skill>(reader.read_u32());

    obj.required_skill_value = reader.read_u32();

    for (auto i = 0; i < 3; ++i) {
        obj.required_spells[i] = reader.read_u32();
    }

    return obj;
}

static void TrainerSpell_write(Writer& writer, const TrainerSpell& obj) {
    writer.write_u32(obj.spell);

    writer.write_u8(static_cast<uint8_t>(obj.state));

    writer.write_u32(obj.spell_cost);

    writer.write_u32(obj.talent_point_cost);

    writer.write_u32(obj.first_rank);

    writer.write_u8(obj.required_level);

    writer.write_u32(static_cast<uint32_t>(obj.required_skill));

    writer.write_u32(obj.required_skill_value);

    for (const auto& v : obj.required_spells) {
        writer.write_u32(v);
    }

}

static size_t WhoPlayer_size(const WhoPlayer& obj) {
    return 13 + obj.name.size() + obj.guild.size();
}

WhoPlayer WhoPlayer_read(Reader& reader) {
    WhoPlayer obj{};

    obj.name = reader.read_cstring();

    obj.guild = reader.read_cstring();

    obj.level = reader.read_u32();

    obj.class_type = static_cast<Class>(reader.read_u8());

    obj.race = static_cast<Race>(reader.read_u8());

    obj.gender = static_cast<Gender>(reader.read_u8());

    obj.area = static_cast<Area>(reader.read_u32());

    return obj;
}

static void WhoPlayer_write(Writer& writer, const WhoPlayer& obj) {
    writer.write_cstring(obj.name);

    writer.write_cstring(obj.guild);

    writer.write_u32(obj.level);

    writer.write_u8(static_cast<uint8_t>(obj.class_type));

    writer.write_u8(static_cast<uint8_t>(obj.race));

    writer.write_u8(static_cast<uint8_t>(obj.gender));

    writer.write_u32(static_cast<uint32_t>(obj.area));

}

WorldState WorldState_read(Reader& reader) {
    WorldState obj{};

    obj.state = reader.read_u32();

    obj.value = reader.read_u32();

    return obj;
}

static void WorldState_write(Writer& writer, const WorldState& obj) {
    writer.write_u32(obj.state);

    writer.write_u32(obj.value);

}

static void achievement_in_progress_array_write(Writer& writer, const std::vector<AchievementInProgress>& mask) {
    for (const auto& v : mask) {
        AchievementInProgress_write(writer, v);
    }

    writer.write_u32(0xFFFFFFFF);
}

static std::vector<AchievementInProgress> achievement_in_progress_array_read(Reader& reader) {
    std::vector<AchievementInProgress> mask;
    uint32_t achievement = reader.read_u32();

    while(achievement != 0xFFFFFFFF) {
        AchievementInProgress obj;

        obj.achievement = achievement;

        obj.counter = reader.read_packed_guid();

        obj.player = reader.read_packed_guid();

        obj.timed_criteria_failed = reader.read_bool32();

        obj.progress_date = reader.read_u32();

        obj.time_since_progress = reader.read_u32();

        obj.time_since_progress2 = reader.read_u32();

        mask.push_back(obj);

        achievement = reader.read_u32();
    }

    return mask;
}

static size_t achievement_in_progress_array_size(const std::vector<AchievementInProgress>& mask) {
    size_t size = 0;
    for (const auto& v : mask) {
        size += AchievementInProgress_size(v);
    }
    return size;
}

static void achievement_done_array_write(Writer& writer, const std::vector<AchievementDone>& mask) {
    for (const auto& v : mask) {
        AchievementDone_write(writer, v);
    }

    writer.write_u32(0xFFFFFFFF);
}

static std::vector<AchievementDone> achievement_done_array_read(Reader& reader) {
    std::vector<AchievementDone> mask;
    uint32_t achievement = reader.read_u32();

    while(achievement != 0xFFFFFFFF) {
        uint32_t time = reader.read_u32();

        mask.push_back({achievement, time});

        achievement = reader.read_u32();
    }

    return mask;
}

static size_t achievement_done_array_size(const std::vector<AchievementDone>& mask) {
    return mask.size() * 8;
}

static void inspect_talent_gear_mask_write(Writer& writer, const InspectTalentGearMask& mask) {
    uint32_t header = 0;
    for (int i = 0; i < WRATH_INSPECT_TALENT_GEAR_MASK_LENGTH; ++i) {
        if (mask.values[i].item != 0) {
            header |= static_cast<uint32_t>(1) << i;
        }
    }

    writer.write_u32(header);

    for (const auto& v : mask.values) {
        if (v.item != 0) {
            InspectTalentGear_write(writer, v);
        }
    }
}

static InspectTalentGearMask inspect_talent_gear_mask_read(Reader& reader) {
    uint32_t header = reader.read_u32();
    InspectTalentGearMask mask{};

    for (int i = 0; i < WRATH_INSPECT_TALENT_GEAR_MASK_LENGTH; ++i) {
        if ((header & static_cast<uint32_t>(1) << i) != 0) {
            mask.values[i] = InspectTalentGear_read(reader);
        }
    }

    return mask;
}

static size_t inspect_talent_gear_mask_size(const InspectTalentGearMask& mask) {
    size_t size = 4; /* u32 header */
    for (int i = 0; i < WRATH_INSPECT_TALENT_GEAR_MASK_LENGTH; ++i) {
        if (mask.values[i].item != 0) {
            size += InspectTalentGear_size(mask.values[i]);;
        }
    }

    return size;
}

static size_t aura_mask_size(const AuraMask& mask) {
    size_t size = 8; /* uint64_t header */

    for(const auto v : mask.auras) {
        if(v.aura != 0) {
            size += 5; /* wrath::Aura members */
        }
    }

    return size;
}

static AuraMask aura_mask_read(Reader& reader) {
    const uint64_t header = reader.read_u64();

    AuraMask mask{};

    for(int i = 0; i < AURA_MASK_SIZE; ++i) {
        if ((header & (1ULL << i)) != 0) {
            mask.auras[i] = Aura_read(reader);
        }
    }

    return mask;
}

static void aura_mask_write(Writer& writer, const AuraMask& mask) {
    uint64_t header = 0;

    for(int i = 0; i < AURA_MASK_SIZE; ++i) {
        if (mask.auras[i].aura != 0) {
            header |= 1ULL << i;
        }
    }

    writer.write_u64(header);

    for(int i = 0; i < AURA_MASK_SIZE; ++i) {
        if (mask.auras[i].aura != 0) {
            Aura_write(writer, mask.auras[i]);
        }
    }
}


static void cache_mask_write(Writer& writer, const CacheMask& mask) {
    uint32_t header = 0;
    for (int i = 0; i < WRATH_CACHE_MASK_LENGTH; ++i) {
        if (mask.values[i] != 0) {
            header |= static_cast<uint32_t>(1) << i;
        }
    }

    writer.write_u32(header);

    for (const auto v : mask.values) {
        if (v != 0) {
            writer.write_u32(v);
        }
    }
}

static CacheMask cache_mask_read(Reader& reader) {
    uint32_t header = reader.read_u32();
    CacheMask mask{};

    for (int i = 0; i < WRATH_CACHE_MASK_LENGTH; ++i) {
        if ((header & static_cast<uint32_t>(1) << i) != 0) {
            mask.values[i] = reader.read_u32();
        }
    }

    return mask;
}

static size_t cache_mask_size(const CacheMask& mask) {
    size_t size = 4; /* u32 header */
    for (int i = 0; i < WRATH_CACHE_MASK_LENGTH; ++i) {
        if (mask.values[i] != 0) {
            size += 4;
        }
    }

    return size;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BOOTME::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000001); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t CMSG_DBLOOKUP_size(const CMSG_DBLOOKUP& obj) {
    return 1 + obj.query.size();
}

CMSG_DBLOOKUP CMSG_DBLOOKUP_read(Reader& reader) {
    CMSG_DBLOOKUP obj{};

    obj.query = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_DBLOOKUP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_DBLOOKUP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_DBLOOKUP_size(obj) + 4)); /* size */

    writer.write_u32(0x00000002); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.query);

    return writer.m_buf;
}

CMSG_WORLD_TELEPORT CMSG_WORLD_TELEPORT_read(Reader& reader) {
    CMSG_WORLD_TELEPORT obj{};

    obj.time = reader.read_u32();

    obj.map = static_cast<Map>(reader.read_u32());

    obj.unknown = reader.read_u64();

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    obj.orientation = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_WORLD_TELEPORT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0020);

    writer.write_u16_be(static_cast<uint16_t>(0x0020 + 4)); /* size */

    writer.write_u32(0x00000008); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.time);

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u64(obj.unknown);

    Vector3d_write(writer, obj.position);

    writer.write_float(obj.orientation);

    return writer.m_buf;
}

static size_t CMSG_TELEPORT_TO_UNIT_size(const CMSG_TELEPORT_TO_UNIT& obj) {
    return 1 + obj.name.size();
}

CMSG_TELEPORT_TO_UNIT CMSG_TELEPORT_TO_UNIT_read(Reader& reader) {
    CMSG_TELEPORT_TO_UNIT obj{};

    obj.name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TELEPORT_TO_UNIT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_TELEPORT_TO_UNIT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_TELEPORT_TO_UNIT_size(obj) + 4)); /* size */

    writer.write_u32(0x00000009); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    return writer.m_buf;
}

static size_t CMSG_CHAR_CREATE_size(const CMSG_CHAR_CREATE& obj) {
    return 10 + obj.name.size();
}

CMSG_CHAR_CREATE CMSG_CHAR_CREATE_read(Reader& reader) {
    CMSG_CHAR_CREATE obj{};

    obj.name = reader.read_cstring();

    obj.race = static_cast<Race>(reader.read_u8());

    obj.class_type = static_cast<Class>(reader.read_u8());

    obj.gender = static_cast<Gender>(reader.read_u8());

    obj.skin_color = reader.read_u8();

    obj.face = reader.read_u8();

    obj.hair_style = reader.read_u8();

    obj.hair_color = reader.read_u8();

    obj.facial_hair = reader.read_u8();

    (void)reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHAR_CREATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHAR_CREATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHAR_CREATE_size(obj) + 4)); /* size */

    writer.write_u32(0x00000036); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    writer.write_u8(static_cast<uint8_t>(obj.race));

    writer.write_u8(static_cast<uint8_t>(obj.class_type));

    writer.write_u8(static_cast<uint8_t>(obj.gender));

    writer.write_u8(obj.skin_color);

    writer.write_u8(obj.face);

    writer.write_u8(obj.hair_style);

    writer.write_u8(obj.hair_color);

    writer.write_u8(obj.facial_hair);

    writer.write_u8(0);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHAR_ENUM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000037); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_CHAR_DELETE CMSG_CHAR_DELETE_read(Reader& reader) {
    CMSG_CHAR_DELETE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHAR_DELETE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000038); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_CHAR_CREATE SMSG_CHAR_CREATE_read(Reader& reader) {
    SMSG_CHAR_CREATE obj{};

    obj.result = static_cast<WorldResult>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHAR_CREATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x0000003a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    return writer.m_buf;
}

static size_t SMSG_CHAR_ENUM_size(const SMSG_CHAR_ENUM& obj) {
    size_t _size = 1;

    for(const auto& v : obj.characters) {
        _size += Character_size(v);
    }

    return _size;
}

SMSG_CHAR_ENUM SMSG_CHAR_ENUM_read(Reader& reader) {
    SMSG_CHAR_ENUM obj{};

    auto amount_of_characters = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_characters; ++i) {
        obj.characters.push_back(::wow_world_messages::wrath::Character_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHAR_ENUM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CHAR_ENUM_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CHAR_ENUM_size(obj) + 2)); /* size */

    writer.write_u16(0x0000003b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.characters.size()));

    for (const auto& v : obj.characters) {
        Character_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_CHAR_DELETE SMSG_CHAR_DELETE_read(Reader& reader) {
    SMSG_CHAR_DELETE obj{};

    obj.result = static_cast<WorldResult>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHAR_DELETE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x0000003c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    return writer.m_buf;
}

CMSG_PLAYER_LOGIN CMSG_PLAYER_LOGIN_read(Reader& reader) {
    CMSG_PLAYER_LOGIN obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PLAYER_LOGIN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000003d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_NEW_WORLD SMSG_NEW_WORLD_read(Reader& reader) {
    SMSG_NEW_WORLD obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    obj.orientation = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_NEW_WORLD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 2)); /* size */

    writer.write_u16(0x0000003e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    Vector3d_write(writer, obj.position);

    writer.write_float(obj.orientation);

    return writer.m_buf;
}

static size_t SMSG_TRANSFER_PENDING_size(const SMSG_TRANSFER_PENDING& obj) {
    size_t _size = 4;

    if(obj.has_transport) {
        _size += 8;
    }

    return _size;
}

SMSG_TRANSFER_PENDING SMSG_TRANSFER_PENDING_read(Reader& reader, size_t body_size) {
    SMSG_TRANSFER_PENDING obj{};
    size_t _size = 0;

    obj.map = static_cast<Map>(reader.read_u32());
    _size += 4;

    if (_size < body_size) {
        obj.has_transport = std::shared_ptr<wrath::SMSG_TRANSFER_PENDING::HasTransport>(new wrath::SMSG_TRANSFER_PENDING::HasTransport());

        obj.has_transport->transport = reader.read_u32();

        obj.has_transport->transport_map = static_cast<Map>(reader.read_u32());

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TRANSFER_PENDING::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_TRANSFER_PENDING_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_TRANSFER_PENDING_size(obj) + 2)); /* size */

    writer.write_u16(0x0000003f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    if(obj.has_transport) {
        writer.write_u32(obj.has_transport->transport);

        writer.write_u32(static_cast<uint32_t>(obj.has_transport->transport_map));

    }
    return writer.m_buf;
}

static size_t SMSG_TRANSFER_ABORTED_size(const SMSG_TRANSFER_ABORTED& obj) {
    size_t _size = 5;

    if (obj.reason == TransferAbortReason::INSUFFICIENT_EXPANSION_LEVEL|| obj.reason == TransferAbortReason::DIFFICULTY_NOT_AVAILABLE|| obj.reason == TransferAbortReason::UNIQUE_MESSAGE) {
        _size += 1;
    }

    return _size;
}

SMSG_TRANSFER_ABORTED SMSG_TRANSFER_ABORTED_read(Reader& reader) {
    SMSG_TRANSFER_ABORTED obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    obj.reason = static_cast<TransferAbortReason>(reader.read_u8());

    if (obj.reason == TransferAbortReason::INSUFFICIENT_EXPANSION_LEVEL|| obj.reason == TransferAbortReason::DIFFICULTY_NOT_AVAILABLE|| obj.reason == TransferAbortReason::UNIQUE_MESSAGE) {
        obj.difficulty = static_cast<DungeonDifficulty>(reader.read_u8());

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TRANSFER_ABORTED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_TRANSFER_ABORTED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_TRANSFER_ABORTED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000040); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u8(static_cast<uint8_t>(obj.reason));

    if (obj.reason == TransferAbortReason::INSUFFICIENT_EXPANSION_LEVEL|| obj.reason == TransferAbortReason::DIFFICULTY_NOT_AVAILABLE|| obj.reason == TransferAbortReason::UNIQUE_MESSAGE) {
        writer.write_u8(static_cast<uint8_t>(obj.difficulty));

    }
    return writer.m_buf;
}

SMSG_CHARACTER_LOGIN_FAILED SMSG_CHARACTER_LOGIN_FAILED_read(Reader& reader) {
    SMSG_CHARACTER_LOGIN_FAILED obj{};

    obj.result = static_cast<WorldResult>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHARACTER_LOGIN_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x00000041); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    return writer.m_buf;
}

SMSG_LOGIN_SETTIMESPEED SMSG_LOGIN_SETTIMESPEED_read(Reader& reader) {
    SMSG_LOGIN_SETTIMESPEED obj{};

    obj.datetime = reader.read_u32();

    obj.timescale = reader.read_float();

    obj.unknown1 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOGIN_SETTIMESPEED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x00000042); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.datetime);

    writer.write_float(obj.timescale);

    writer.write_u32(obj.unknown1);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PLAYER_LOGOUT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000004a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LOGOUT_REQUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000004b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_LOGOUT_RESPONSE SMSG_LOGOUT_RESPONSE_read(Reader& reader) {
    SMSG_LOGOUT_RESPONSE obj{};

    obj.result = static_cast<LogoutResult>(reader.read_u32());

    obj.speed = static_cast<LogoutSpeed>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOGOUT_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0005);

    writer.write_u16_be(static_cast<uint16_t>(0x0005 + 2)); /* size */

    writer.write_u16(0x0000004c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.result));

    writer.write_u8(static_cast<uint8_t>(obj.speed));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOGOUT_COMPLETE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x0000004d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LOGOUT_CANCEL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000004e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOGOUT_CANCEL_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x0000004f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_NAME_QUERY CMSG_NAME_QUERY_read(Reader& reader) {
    CMSG_NAME_QUERY obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_NAME_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000050); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_NAME_QUERY_RESPONSE_size(const SMSG_NAME_QUERY_RESPONSE& obj) {
    size_t _size = 7 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + obj.character_name.size() + obj.realm_name.size();

    if (obj.has_declined_names == DeclinedNames::YES) {
        _size += 0;

        for(const auto& v : obj.declined_names) {
            _size += v.size() + 1;
        }

    }

    return _size;
}

SMSG_NAME_QUERY_RESPONSE SMSG_NAME_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_NAME_QUERY_RESPONSE obj{};

    obj.guid = reader.read_packed_guid();

    (void)reader.read_u8();

    obj.character_name = reader.read_cstring();

    obj.realm_name = reader.read_cstring();

    obj.race = static_cast<Race>(reader.read_u8());

    obj.gender = static_cast<Gender>(reader.read_u8());

    obj.class_type = static_cast<Class>(reader.read_u8());

    obj.has_declined_names = static_cast<DeclinedNames>(reader.read_u8());

    if (obj.has_declined_names == DeclinedNames::YES) {
        for (auto i = 0; i < 5; ++i) {
            obj.declined_names[i] = reader.read_cstring();
        }

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_NAME_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_NAME_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_NAME_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000051); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u8(0);

    writer.write_cstring(obj.character_name);

    writer.write_cstring(obj.realm_name);

    writer.write_u8(static_cast<uint8_t>(obj.race));

    writer.write_u8(static_cast<uint8_t>(obj.gender));

    writer.write_u8(static_cast<uint8_t>(obj.class_type));

    writer.write_u8(static_cast<uint8_t>(obj.has_declined_names));

    if (obj.has_declined_names == DeclinedNames::YES) {
        for (const auto& v : obj.declined_names) {
            writer.write_cstring(v);
        }

    }
    return writer.m_buf;
}

CMSG_PET_NAME_QUERY CMSG_PET_NAME_QUERY_read(Reader& reader) {
    CMSG_PET_NAME_QUERY obj{};

    obj.pet_number = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_NAME_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000052); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.pet_number);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_PET_NAME_QUERY_RESPONSE_size(const SMSG_PET_NAME_QUERY_RESPONSE& obj) {
    size_t _size = 10 + obj.name.size();

    if (obj.names == PetQueryDisabledNames::PRESENT) {
        _size += 0;

        for(const auto& v : obj.declined_names) {
            _size += v.size() + 1;
        }

    }

    return _size;
}

SMSG_PET_NAME_QUERY_RESPONSE SMSG_PET_NAME_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_PET_NAME_QUERY_RESPONSE obj{};

    obj.pet_number = reader.read_u32();

    obj.name = reader.read_cstring();

    obj.pet_name_timestamp = reader.read_u32();

    obj.names = static_cast<PetQueryDisabledNames>(reader.read_u8());

    if (obj.names == PetQueryDisabledNames::PRESENT) {
        for (auto i = 0; i < 5; ++i) {
            obj.declined_names[i] = reader.read_cstring();
        }

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_NAME_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PET_NAME_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PET_NAME_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000053); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.pet_number);

    writer.write_cstring(obj.name);

    writer.write_u32(obj.pet_name_timestamp);

    writer.write_u8(static_cast<uint8_t>(obj.names));

    if (obj.names == PetQueryDisabledNames::PRESENT) {
        for (const auto& v : obj.declined_names) {
            writer.write_cstring(v);
        }

    }
    return writer.m_buf;
}

CMSG_GUILD_QUERY CMSG_GUILD_QUERY_read(Reader& reader) {
    CMSG_GUILD_QUERY obj{};

    obj.guild_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000054); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.guild_id);

    return writer.m_buf;
}

static size_t SMSG_GUILD_QUERY_RESPONSE_size(const SMSG_GUILD_QUERY_RESPONSE& obj) {
    size_t _size = 25 + obj.name.size();

    for(const auto& v : obj.rank_names) {
        _size += v.size() + 1;
    }

    return _size;
}

SMSG_GUILD_QUERY_RESPONSE SMSG_GUILD_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_GUILD_QUERY_RESPONSE obj{};

    obj.id = reader.read_u32();

    obj.name = reader.read_cstring();

    for (auto i = 0; i < 10; ++i) {
        obj.rank_names[i] = reader.read_cstring();
    }

    obj.emblem_style = reader.read_u32();

    obj.emblem_color = reader.read_u32();

    obj.border_style = reader.read_u32();

    obj.border_color = reader.read_u32();

    obj.background_color = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GUILD_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GUILD_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GUILD_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000055); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.id);

    writer.write_cstring(obj.name);

    for (const auto& v : obj.rank_names) {
        writer.write_cstring(v);
    }

    writer.write_u32(obj.emblem_style);

    writer.write_u32(obj.emblem_color);

    writer.write_u32(obj.border_style);

    writer.write_u32(obj.border_color);

    writer.write_u32(obj.background_color);

    return writer.m_buf;
}

CMSG_ITEM_QUERY_SINGLE CMSG_ITEM_QUERY_SINGLE_read(Reader& reader) {
    CMSG_ITEM_QUERY_SINGLE obj{};

    obj.item = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ITEM_QUERY_SINGLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000056); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.item);

    return writer.m_buf;
}

static size_t SMSG_ITEM_QUERY_SINGLE_RESPONSE_size(const SMSG_ITEM_QUERY_SINGLE_RESPONSE& obj) {
    size_t _size = 4;

    if(obj.found) {
        _size += 417 + obj.found->name1.size() + obj.found->name2.size() + obj.found->name3.size() + obj.found->name4.size() + 8 * obj.found->stats.size() + obj.found->description.size();
    }

    return _size;
}

SMSG_ITEM_QUERY_SINGLE_RESPONSE SMSG_ITEM_QUERY_SINGLE_RESPONSE_read(Reader& reader, size_t body_size) {
    SMSG_ITEM_QUERY_SINGLE_RESPONSE obj{};
    size_t _size = 0;

    obj.item = reader.read_u32();
    _size += 4;

    if (_size < body_size) {
        obj.found = std::shared_ptr<wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE::Found>(new wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE::Found());

        obj.found->class_and_sub_class = static_cast<ItemClassAndSubClass>(reader.read_u64());

        obj.found->sound_override_sub_class = reader.read_u32();

        obj.found->name1 = reader.read_cstring();

        obj.found->name2 = reader.read_cstring();

        obj.found->name3 = reader.read_cstring();

        obj.found->name4 = reader.read_cstring();

        obj.found->display_id = reader.read_u32();

        obj.found->quality = static_cast<ItemQuality>(reader.read_u32());

        obj.found->flags = static_cast<ItemFlag>(reader.read_u32());

        obj.found->flags2 = static_cast<ItemFlag2>(reader.read_u32());

        obj.found->buy_price = reader.read_u32();

        obj.found->sell_price = reader.read_u32();

        obj.found->inventory_type = static_cast<InventoryType>(reader.read_u32());

        obj.found->allowed_class = static_cast<AllowedClass>(reader.read_u32());

        obj.found->allowed_race = static_cast<AllowedRace>(reader.read_u32());

        obj.found->item_level = reader.read_u32();

        obj.found->required_level = reader.read_u32();

        obj.found->required_skill = static_cast<Skill>(reader.read_u32());

        obj.found->required_skill_rank = reader.read_u32();

        obj.found->required_spell = reader.read_u32();

        obj.found->required_honor_rank = reader.read_u32();

        obj.found->required_city_rank = reader.read_u32();

        obj.found->required_faction = static_cast<Faction>(reader.read_u32());

        obj.found->required_faction_rank = reader.read_u32();

        obj.found->max_count = reader.read_u32();

        obj.found->stackable = reader.read_u32();

        obj.found->container_slots = reader.read_u32();

        auto amount_of_stats = reader.read_u32();

        for (uint32_t i = 0; i < amount_of_stats; ++i) {
            obj.found->stats.push_back(::wow_world_messages::wrath::ItemStat_read(reader));
        }

        obj.found->scaling_stats_entry = reader.read_u32();

        obj.found->scaling_stats_flag = reader.read_u32();

        for (auto i = 0; i < 2; ++i) {
            obj.found->damages[i] = ::wow_world_messages::wrath::ItemDamageType_read(reader);
        }

        obj.found->armor = reader.read_i32();

        obj.found->holy_resistance = reader.read_i32();

        obj.found->fire_resistance = reader.read_i32();

        obj.found->nature_resistance = reader.read_i32();

        obj.found->frost_resistance = reader.read_i32();

        obj.found->shadow_resistance = reader.read_i32();

        obj.found->arcane_resistance = reader.read_i32();

        obj.found->delay = reader.read_u32();

        obj.found->ammo_type = reader.read_u32();

        obj.found->ranged_range_modification = reader.read_float();

        for (auto i = 0; i < 5; ++i) {
            obj.found->spells[i] = ::wow_world_messages::wrath::ItemSpells_read(reader);
        }

        obj.found->bonding = static_cast<Bonding>(reader.read_u32());

        obj.found->description = reader.read_cstring();

        obj.found->page_text = reader.read_u32();

        obj.found->language = static_cast<Language>(reader.read_u32());

        obj.found->page_text_material = static_cast<PageTextMaterial>(reader.read_u32());

        obj.found->start_quest = reader.read_u32();

        obj.found->lock_id = reader.read_u32();

        obj.found->material = reader.read_u32();

        obj.found->sheathe_type = static_cast<SheatheType>(reader.read_u32());

        obj.found->random_property = reader.read_u32();

        obj.found->random_suffix = reader.read_u32();

        obj.found->block = reader.read_u32();

        obj.found->item_set = static_cast<ItemSet>(reader.read_u32());

        obj.found->max_durability = reader.read_u32();

        obj.found->area = static_cast<Area>(reader.read_u32());

        obj.found->map = static_cast<Map>(reader.read_u32());

        obj.found->bag_family = static_cast<BagFamily>(reader.read_u32());

        obj.found->totem_category = reader.read_u32();

        for (auto i = 0; i < 3; ++i) {
            obj.found->sockets[i] = ::wow_world_messages::wrath::ItemSocket_read(reader);
        }

        obj.found->socket_bonus = reader.read_u32();

        obj.found->gem_properties = reader.read_u32();

        obj.found->required_disenchant_skill = reader.read_u32();

        obj.found->armor_damage_modifier = reader.read_float();

        obj.found->duration = reader.read_u32();

        obj.found->item_limit_category = reader.read_u32();

        obj.found->holiday_id = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ITEM_QUERY_SINGLE_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ITEM_QUERY_SINGLE_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ITEM_QUERY_SINGLE_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000058); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.item);

    if(obj.found) {
        writer.write_u64(static_cast<uint64_t>(obj.found->class_and_sub_class));

        writer.write_u32(obj.found->sound_override_sub_class);

        writer.write_cstring(obj.found->name1);

        writer.write_cstring(obj.found->name2);

        writer.write_cstring(obj.found->name3);

        writer.write_cstring(obj.found->name4);

        writer.write_u32(obj.found->display_id);

        writer.write_u32(static_cast<uint32_t>(obj.found->quality));

        writer.write_u32(static_cast<uint32_t>(obj.found->flags));

        writer.write_u32(static_cast<uint32_t>(obj.found->flags2));

        writer.write_u32(obj.found->buy_price);

        writer.write_u32(obj.found->sell_price);

        writer.write_u32(static_cast<uint32_t>(obj.found->inventory_type));

        writer.write_u32(static_cast<uint32_t>(obj.found->allowed_class));

        writer.write_u32(static_cast<uint32_t>(obj.found->allowed_race));

        writer.write_u32(obj.found->item_level);

        writer.write_u32(obj.found->required_level);

        writer.write_u32(static_cast<uint32_t>(obj.found->required_skill));

        writer.write_u32(obj.found->required_skill_rank);

        writer.write_u32(obj.found->required_spell);

        writer.write_u32(obj.found->required_honor_rank);

        writer.write_u32(obj.found->required_city_rank);

        writer.write_u32(static_cast<uint32_t>(obj.found->required_faction));

        writer.write_u32(obj.found->required_faction_rank);

        writer.write_u32(obj.found->max_count);

        writer.write_u32(obj.found->stackable);

        writer.write_u32(obj.found->container_slots);

        writer.write_u32(static_cast<uint32_t>(obj.found->stats.size()));

        for (const auto& v : obj.found->stats) {
            ItemStat_write(writer, v);
        }

        writer.write_u32(obj.found->scaling_stats_entry);

        writer.write_u32(obj.found->scaling_stats_flag);

        for (const auto& v : obj.found->damages) {
            ItemDamageType_write(writer, v);
        }

        writer.write_i32(obj.found->armor);

        writer.write_i32(obj.found->holy_resistance);

        writer.write_i32(obj.found->fire_resistance);

        writer.write_i32(obj.found->nature_resistance);

        writer.write_i32(obj.found->frost_resistance);

        writer.write_i32(obj.found->shadow_resistance);

        writer.write_i32(obj.found->arcane_resistance);

        writer.write_u32(obj.found->delay);

        writer.write_u32(obj.found->ammo_type);

        writer.write_float(obj.found->ranged_range_modification);

        for (const auto& v : obj.found->spells) {
            ItemSpells_write(writer, v);
        }

        writer.write_u32(static_cast<uint32_t>(obj.found->bonding));

        writer.write_cstring(obj.found->description);

        writer.write_u32(obj.found->page_text);

        writer.write_u32(static_cast<uint32_t>(obj.found->language));

        writer.write_u32(static_cast<uint32_t>(obj.found->page_text_material));

        writer.write_u32(obj.found->start_quest);

        writer.write_u32(obj.found->lock_id);

        writer.write_u32(obj.found->material);

        writer.write_u32(static_cast<uint32_t>(obj.found->sheathe_type));

        writer.write_u32(obj.found->random_property);

        writer.write_u32(obj.found->random_suffix);

        writer.write_u32(obj.found->block);

        writer.write_u32(static_cast<uint32_t>(obj.found->item_set));

        writer.write_u32(obj.found->max_durability);

        writer.write_u32(static_cast<uint32_t>(obj.found->area));

        writer.write_u32(static_cast<uint32_t>(obj.found->map));

        writer.write_u32(static_cast<uint32_t>(obj.found->bag_family));

        writer.write_u32(obj.found->totem_category);

        for (const auto& v : obj.found->sockets) {
            ItemSocket_write(writer, v);
        }

        writer.write_u32(obj.found->socket_bonus);

        writer.write_u32(obj.found->gem_properties);

        writer.write_u32(obj.found->required_disenchant_skill);

        writer.write_float(obj.found->armor_damage_modifier);

        writer.write_u32(obj.found->duration);

        writer.write_u32(obj.found->item_limit_category);

        writer.write_u32(obj.found->holiday_id);

    }
    return writer.m_buf;
}

CMSG_PAGE_TEXT_QUERY CMSG_PAGE_TEXT_QUERY_read(Reader& reader) {
    CMSG_PAGE_TEXT_QUERY obj{};

    obj.page_id = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PAGE_TEXT_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x0000005a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.page_id);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_PAGE_TEXT_QUERY_RESPONSE_size(const SMSG_PAGE_TEXT_QUERY_RESPONSE& obj) {
    return 9 + obj.text.size();
}

SMSG_PAGE_TEXT_QUERY_RESPONSE SMSG_PAGE_TEXT_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_PAGE_TEXT_QUERY_RESPONSE obj{};

    obj.page_id = reader.read_u32();

    obj.text = reader.read_cstring();

    obj.next_page_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PAGE_TEXT_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PAGE_TEXT_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PAGE_TEXT_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000005b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.page_id);

    writer.write_cstring(obj.text);

    writer.write_u32(obj.next_page_id);

    return writer.m_buf;
}

CMSG_QUEST_QUERY CMSG_QUEST_QUERY_read(Reader& reader) {
    CMSG_QUEST_QUERY obj{};

    obj.quest_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUEST_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000005c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    return writer.m_buf;
}

static size_t SMSG_QUEST_QUERY_RESPONSE_size(const SMSG_QUEST_QUERY_RESPONSE& obj) {
    size_t _size = 393 + obj.title.size() + obj.objective_text.size() + obj.details.size() + obj.end_text.size() + obj.completed_text.size();

    for(const auto& v : obj.objective_texts) {
        _size += v.size() + 1;
    }

    return _size;
}

SMSG_QUEST_QUERY_RESPONSE SMSG_QUEST_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_QUEST_QUERY_RESPONSE obj{};

    obj.quest_id = reader.read_u32();

    obj.quest_method = reader.read_u32();

    obj.quest_level = reader.read_u32();

    obj.minimum_quest_level = reader.read_u32();

    obj.zone_or_sort = reader.read_u32();

    obj.quest_type = reader.read_u32();

    obj.suggest_player_amount = reader.read_u32();

    obj.reputation_objective_faction = static_cast<Faction>(reader.read_u16());

    obj.reputation_objective_value = reader.read_u32();

    obj.required_opposite_faction = static_cast<Faction>(reader.read_u16());

    obj.required_opposite_reputation_value = reader.read_u32();

    obj.next_quest_in_chain = reader.read_u32();

    obj.money_reward = reader.read_u32();

    obj.max_level_money_reward = reader.read_u32();

    obj.reward_spell = reader.read_u32();

    obj.casted_reward_spell = reader.read_u32();

    obj.honor_reward = reader.read_u32();

    obj.honor_reward_multiplier = reader.read_float();

    obj.source_item_id = reader.read_u32();

    obj.quest_flags = reader.read_u32();

    obj.title_reward = reader.read_u32();

    obj.players_slain = reader.read_u32();

    obj.bonus_talents = reader.read_u32();

    obj.bonus_arena_points = reader.read_u32();

    obj.unknown1 = reader.read_u32();

    for (auto i = 0; i < 4; ++i) {
        obj.rewards[i] = ::wow_world_messages::wrath::QuestItemReward_read(reader);
    }

    for (auto i = 0; i < 6; ++i) {
        obj.choice_rewards[i] = ::wow_world_messages::wrath::QuestItemReward_read(reader);
    }

    for (auto i = 0; i < 5; ++i) {
        obj.reputation_rewards[i] = reader.read_u32();
    }

    for (auto i = 0; i < 5; ++i) {
        obj.reputation_reward_amounts[i] = reader.read_u32();
    }

    for (auto i = 0; i < 5; ++i) {
        obj.reputation_reward_overrides[i] = reader.read_u32();
    }

    obj.point_map_id = reader.read_u32();

    obj.position = ::wow_world_messages::all::Vector2d_read(reader);

    obj.point_opt = reader.read_u32();

    obj.title = reader.read_cstring();

    obj.objective_text = reader.read_cstring();

    obj.details = reader.read_cstring();

    obj.end_text = reader.read_cstring();

    obj.completed_text = reader.read_cstring();

    for (auto i = 0; i < 4; ++i) {
        obj.objectives[i] = ::wow_world_messages::wrath::QuestObjective_read(reader);
    }

    for (auto i = 0; i < 6; ++i) {
        obj.item_requirements[i] = ::wow_world_messages::wrath::QuestItemRequirement_read(reader);
    }

    for (auto i = 0; i < 4; ++i) {
        obj.objective_texts[i] = reader.read_cstring();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUEST_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_QUEST_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_QUEST_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000005d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    writer.write_u32(obj.quest_method);

    writer.write_u32(obj.quest_level);

    writer.write_u32(obj.minimum_quest_level);

    writer.write_u32(obj.zone_or_sort);

    writer.write_u32(obj.quest_type);

    writer.write_u32(obj.suggest_player_amount);

    writer.write_u16(static_cast<uint16_t>(obj.reputation_objective_faction));

    writer.write_u32(obj.reputation_objective_value);

    writer.write_u16(static_cast<uint16_t>(obj.required_opposite_faction));

    writer.write_u32(obj.required_opposite_reputation_value);

    writer.write_u32(obj.next_quest_in_chain);

    writer.write_u32(obj.money_reward);

    writer.write_u32(obj.max_level_money_reward);

    writer.write_u32(obj.reward_spell);

    writer.write_u32(obj.casted_reward_spell);

    writer.write_u32(obj.honor_reward);

    writer.write_float(obj.honor_reward_multiplier);

    writer.write_u32(obj.source_item_id);

    writer.write_u32(obj.quest_flags);

    writer.write_u32(obj.title_reward);

    writer.write_u32(obj.players_slain);

    writer.write_u32(obj.bonus_talents);

    writer.write_u32(obj.bonus_arena_points);

    writer.write_u32(obj.unknown1);

    for (const auto& v : obj.rewards) {
        QuestItemReward_write(writer, v);
    }

    for (const auto& v : obj.choice_rewards) {
        QuestItemReward_write(writer, v);
    }

    for (const auto& v : obj.reputation_rewards) {
        writer.write_u32(v);
    }

    for (const auto& v : obj.reputation_reward_amounts) {
        writer.write_u32(v);
    }

    for (const auto& v : obj.reputation_reward_overrides) {
        writer.write_u32(v);
    }

    writer.write_u32(obj.point_map_id);

    Vector2d_write(writer, obj.position);

    writer.write_u32(obj.point_opt);

    writer.write_cstring(obj.title);

    writer.write_cstring(obj.objective_text);

    writer.write_cstring(obj.details);

    writer.write_cstring(obj.end_text);

    writer.write_cstring(obj.completed_text);

    for (const auto& v : obj.objectives) {
        QuestObjective_write(writer, v);
    }

    for (const auto& v : obj.item_requirements) {
        QuestItemRequirement_write(writer, v);
    }

    for (const auto& v : obj.objective_texts) {
        writer.write_cstring(v);
    }

    return writer.m_buf;
}

CMSG_GAMEOBJECT_QUERY CMSG_GAMEOBJECT_QUERY_read(Reader& reader) {
    CMSG_GAMEOBJECT_QUERY obj{};

    obj.entry_id = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GAMEOBJECT_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x0000005e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.entry_id);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_GAMEOBJECT_QUERY_RESPONSE_size(const SMSG_GAMEOBJECT_QUERY_RESPONSE& obj) {
    size_t _size = 4;

    if(obj.found) {
        _size += 67 + obj.found->name1.size() + obj.found->name2.size() + obj.found->name3.size() + obj.found->name4.size() + obj.found->icon_name.size() + obj.found->cast_bar_caption.size() + obj.found->unknown.size();
    }

    return _size;
}

SMSG_GAMEOBJECT_QUERY_RESPONSE SMSG_GAMEOBJECT_QUERY_RESPONSE_read(Reader& reader, size_t body_size) {
    SMSG_GAMEOBJECT_QUERY_RESPONSE obj{};
    size_t _size = 0;

    obj.entry_id = reader.read_u32();
    _size += 4;

    if (_size < body_size) {
        obj.found = std::shared_ptr<wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE::Found>(new wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE::Found());

        obj.found->info_type = reader.read_u32();

        obj.found->display_id = reader.read_u32();

        obj.found->name1 = reader.read_cstring();

        obj.found->name2 = reader.read_cstring();

        obj.found->name3 = reader.read_cstring();

        obj.found->name4 = reader.read_cstring();

        obj.found->icon_name = reader.read_cstring();

        obj.found->cast_bar_caption = reader.read_cstring();

        obj.found->unknown = reader.read_cstring();

        for (auto i = 0; i < 6; ++i) {
            obj.found->raw_data[i] = reader.read_u32();
        }

        obj.found->gameobject_size = reader.read_float();

        for (auto i = 0; i < 6; ++i) {
            obj.found->gameobject_quest_items[i] = reader.read_u32();
        }

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GAMEOBJECT_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GAMEOBJECT_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GAMEOBJECT_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000005f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.entry_id);

    if(obj.found) {
        writer.write_u32(obj.found->info_type);

        writer.write_u32(obj.found->display_id);

        writer.write_cstring(obj.found->name1);

        writer.write_cstring(obj.found->name2);

        writer.write_cstring(obj.found->name3);

        writer.write_cstring(obj.found->name4);

        writer.write_cstring(obj.found->icon_name);

        writer.write_cstring(obj.found->cast_bar_caption);

        writer.write_cstring(obj.found->unknown);

        for (const auto& v : obj.found->raw_data) {
            writer.write_u32(v);
        }

        writer.write_float(obj.found->gameobject_size);

        for (const auto& v : obj.found->gameobject_quest_items) {
            writer.write_u32(v);
        }

    }
    return writer.m_buf;
}

CMSG_CREATURE_QUERY CMSG_CREATURE_QUERY_read(Reader& reader) {
    CMSG_CREATURE_QUERY obj{};

    obj.creature = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CREATURE_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000060); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.creature);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_CREATURE_QUERY_RESPONSE_size(const SMSG_CREATURE_QUERY_RESPONSE& obj) {
    size_t _size = 4;

    if(obj.found) {
        _size += 83 + obj.found->name1.size() + obj.found->name2.size() + obj.found->name3.size() + obj.found->name4.size() + obj.found->sub_name.size() + obj.found->description.size();
    }

    return _size;
}

SMSG_CREATURE_QUERY_RESPONSE SMSG_CREATURE_QUERY_RESPONSE_read(Reader& reader, size_t body_size) {
    SMSG_CREATURE_QUERY_RESPONSE obj{};
    size_t _size = 0;

    obj.creature_entry = reader.read_u32();
    _size += 4;

    if (_size < body_size) {
        obj.found = std::shared_ptr<wrath::SMSG_CREATURE_QUERY_RESPONSE::Found>(new wrath::SMSG_CREATURE_QUERY_RESPONSE::Found());

        obj.found->name1 = reader.read_cstring();

        obj.found->name2 = reader.read_cstring();

        obj.found->name3 = reader.read_cstring();

        obj.found->name4 = reader.read_cstring();

        obj.found->sub_name = reader.read_cstring();

        obj.found->description = reader.read_cstring();

        obj.found->type_flags = reader.read_u32();

        obj.found->creature_type = reader.read_u32();

        obj.found->creature_family = static_cast<CreatureFamily>(reader.read_u32());

        obj.found->creature_rank = reader.read_u32();

        obj.found->kill_credit1 = reader.read_u32();

        obj.found->kill_credit2 = reader.read_u32();

        for (auto i = 0; i < 4; ++i) {
            obj.found->display_ids[i] = reader.read_u32();
        }

        obj.found->health_multiplier = reader.read_float();

        obj.found->mana_multiplier = reader.read_float();

        obj.found->racial_leader = reader.read_u8();

        for (auto i = 0; i < 6; ++i) {
            obj.found->quest_items[i] = reader.read_u32();
        }

        obj.found->movement_id = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CREATURE_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CREATURE_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CREATURE_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000061); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.creature_entry);

    if(obj.found) {
        writer.write_cstring(obj.found->name1);

        writer.write_cstring(obj.found->name2);

        writer.write_cstring(obj.found->name3);

        writer.write_cstring(obj.found->name4);

        writer.write_cstring(obj.found->sub_name);

        writer.write_cstring(obj.found->description);

        writer.write_u32(obj.found->type_flags);

        writer.write_u32(obj.found->creature_type);

        writer.write_u32(static_cast<uint32_t>(obj.found->creature_family));

        writer.write_u32(obj.found->creature_rank);

        writer.write_u32(obj.found->kill_credit1);

        writer.write_u32(obj.found->kill_credit2);

        for (const auto& v : obj.found->display_ids) {
            writer.write_u32(v);
        }

        writer.write_float(obj.found->health_multiplier);

        writer.write_float(obj.found->mana_multiplier);

        writer.write_u8(obj.found->racial_leader);

        for (const auto& v : obj.found->quest_items) {
            writer.write_u32(v);
        }

        writer.write_u32(obj.found->movement_id);

    }
    return writer.m_buf;
}

static size_t CMSG_WHO_size(const CMSG_WHO& obj) {
    size_t _size = 26 + obj.player_name.size() + obj.guild_name.size() + 4 * obj.zones.size();

    for(const auto& v : obj.search_strings) {
        _size += v.size() + 1;
    }

    return _size;
}

CMSG_WHO CMSG_WHO_read(Reader& reader) {
    CMSG_WHO obj{};

    obj.minimum_level = reader.read_u32();

    obj.maximum_level = reader.read_u32();

    obj.player_name = reader.read_cstring();

    obj.guild_name = reader.read_cstring();

    obj.race_mask = reader.read_u32();

    obj.class_mask = reader.read_u32();

    auto amount_of_zones = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_zones; ++i) {
        obj.zones.push_back(reader.read_u32());
    }

    auto amount_of_strings = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_strings; ++i) {
        obj.search_strings.push_back(reader.read_cstring());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_WHO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_WHO_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_WHO_size(obj) + 4)); /* size */

    writer.write_u32(0x00000062); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.minimum_level);

    writer.write_u32(obj.maximum_level);

    writer.write_cstring(obj.player_name);

    writer.write_cstring(obj.guild_name);

    writer.write_u32(obj.race_mask);

    writer.write_u32(obj.class_mask);

    writer.write_u32(static_cast<uint32_t>(obj.zones.size()));

    for (const auto& v : obj.zones) {
        writer.write_u32(v);
    }

    writer.write_u32(static_cast<uint32_t>(obj.search_strings.size()));

    for (const auto& v : obj.search_strings) {
        writer.write_cstring(v);
    }

    return writer.m_buf;
}

static size_t SMSG_WHO_size(const SMSG_WHO& obj) {
    size_t _size = 8;

    for(const auto& v : obj.players) {
        _size += WhoPlayer_size(v);
    }

    return _size;
}

SMSG_WHO SMSG_WHO_read(Reader& reader) {
    SMSG_WHO obj{};

    auto listed_players = reader.read_u32();

    obj.online_players = reader.read_u32();

    for (uint32_t i = 0; i < listed_players; ++i) {
        obj.players.push_back(::wow_world_messages::wrath::WhoPlayer_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_WHO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_WHO_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_WHO_size(obj) + 2)); /* size */

    writer.write_u16(0x00000063); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.players.size()));

    writer.write_u32(obj.online_players);

    for (const auto& v : obj.players) {
        WhoPlayer_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_WHOIS_size(const CMSG_WHOIS& obj) {
    return 1 + obj.character.size();
}

CMSG_WHOIS CMSG_WHOIS_read(Reader& reader) {
    CMSG_WHOIS obj{};

    obj.character = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_WHOIS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_WHOIS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_WHOIS_size(obj) + 4)); /* size */

    writer.write_u32(0x00000064); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.character);

    return writer.m_buf;
}

static size_t SMSG_WHOIS_size(const SMSG_WHOIS& obj) {
    return 1 + obj.message.size();
}

SMSG_WHOIS SMSG_WHOIS_read(Reader& reader) {
    SMSG_WHOIS obj{};

    obj.message = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_WHOIS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_WHOIS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_WHOIS_size(obj) + 2)); /* size */

    writer.write_u16(0x00000065); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.message);

    return writer.m_buf;
}

CMSG_CONTACT_LIST CMSG_CONTACT_LIST_read(Reader& reader) {
    CMSG_CONTACT_LIST obj{};

    obj.flags = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CONTACT_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000066); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.flags);

    return writer.m_buf;
}

static size_t SMSG_CONTACT_LIST_size(const SMSG_CONTACT_LIST& obj) {
    size_t _size = 8;

    for(const auto& v : obj.relations) {
        _size += Relation_size(v);
    }

    return _size;
}

SMSG_CONTACT_LIST SMSG_CONTACT_LIST_read(Reader& reader) {
    SMSG_CONTACT_LIST obj{};

    obj.list_mask = static_cast<RelationType>(reader.read_u32());

    auto amount_of_relations = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_relations; ++i) {
        obj.relations.push_back(::wow_world_messages::wrath::Relation_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CONTACT_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CONTACT_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CONTACT_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x00000067); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.list_mask));

    writer.write_u32(static_cast<uint32_t>(obj.relations.size()));

    for (const auto& v : obj.relations) {
        Relation_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_FRIEND_STATUS SMSG_FRIEND_STATUS_read(Reader& reader) {
    SMSG_FRIEND_STATUS obj{};

    obj.result = static_cast<FriendResult>(reader.read_u8());

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FRIEND_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 2)); /* size */

    writer.write_u16(0x00000068); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t CMSG_ADD_FRIEND_size(const CMSG_ADD_FRIEND& obj) {
    return 2 + obj.name.size() + obj.note.size();
}

CMSG_ADD_FRIEND CMSG_ADD_FRIEND_read(Reader& reader) {
    CMSG_ADD_FRIEND obj{};

    obj.name = reader.read_cstring();

    obj.note = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ADD_FRIEND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_ADD_FRIEND_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_ADD_FRIEND_size(obj) + 4)); /* size */

    writer.write_u32(0x00000069); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    writer.write_cstring(obj.note);

    return writer.m_buf;
}

CMSG_DEL_FRIEND CMSG_DEL_FRIEND_read(Reader& reader) {
    CMSG_DEL_FRIEND obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_DEL_FRIEND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000006a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t CMSG_SET_CONTACT_NOTES_size(const CMSG_SET_CONTACT_NOTES& obj) {
    return 9 + obj.note.size();
}

CMSG_SET_CONTACT_NOTES CMSG_SET_CONTACT_NOTES_read(Reader& reader) {
    CMSG_SET_CONTACT_NOTES obj{};

    obj.player = reader.read_u64();

    obj.note = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_CONTACT_NOTES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_SET_CONTACT_NOTES_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_SET_CONTACT_NOTES_size(obj) + 4)); /* size */

    writer.write_u32(0x0000006b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_cstring(obj.note);

    return writer.m_buf;
}

static size_t CMSG_ADD_IGNORE_size(const CMSG_ADD_IGNORE& obj) {
    return 1 + obj.name.size();
}

CMSG_ADD_IGNORE CMSG_ADD_IGNORE_read(Reader& reader) {
    CMSG_ADD_IGNORE obj{};

    obj.name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ADD_IGNORE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_ADD_IGNORE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_ADD_IGNORE_size(obj) + 4)); /* size */

    writer.write_u32(0x0000006c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    return writer.m_buf;
}

CMSG_DEL_IGNORE CMSG_DEL_IGNORE_read(Reader& reader) {
    CMSG_DEL_IGNORE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_DEL_IGNORE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000006d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t CMSG_GROUP_INVITE_size(const CMSG_GROUP_INVITE& obj) {
    return 5 + obj.name.size();
}

CMSG_GROUP_INVITE CMSG_GROUP_INVITE_read(Reader& reader) {
    CMSG_GROUP_INVITE obj{};

    obj.name = reader.read_cstring();

    obj.unknown1 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GROUP_INVITE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GROUP_INVITE_size(obj) + 4)); /* size */

    writer.write_u32(0x0000006e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    writer.write_u32(obj.unknown1);

    return writer.m_buf;
}

static size_t SMSG_GROUP_INVITE_size(const SMSG_GROUP_INVITE& obj) {
    size_t _size = 2 + obj.name.size();

    if(obj.unknown) {
        _size += 9;
    }

    return _size;
}

SMSG_GROUP_INVITE SMSG_GROUP_INVITE_read(Reader& reader, size_t body_size) {
    SMSG_GROUP_INVITE obj{};
    size_t _size = 0;

    obj.status = static_cast<PlayerInviteStatus>(reader.read_u8());
    _size += 1;

    obj.name = reader.read_cstring();
    _size += obj.name.size() + 1;

    if (_size < body_size) {
        obj.unknown = std::shared_ptr<wrath::SMSG_GROUP_INVITE::Unknown>(new wrath::SMSG_GROUP_INVITE::Unknown());

        obj.unknown->unknown1 = reader.read_u32();

        obj.unknown->count = reader.read_u8();

        obj.unknown->unknown2 = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GROUP_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GROUP_INVITE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GROUP_INVITE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000006f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.status));

    writer.write_cstring(obj.name);

    if(obj.unknown) {
        writer.write_u32(obj.unknown->unknown1);

        writer.write_u8(obj.unknown->count);

        writer.write_u32(obj.unknown->unknown2);

    }
    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_CANCEL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000070); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_ACCEPT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000072); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_DECLINE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000073); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_GROUP_DECLINE_size(const SMSG_GROUP_DECLINE& obj) {
    return 1 + obj.name.size();
}

SMSG_GROUP_DECLINE SMSG_GROUP_DECLINE_read(Reader& reader) {
    SMSG_GROUP_DECLINE obj{};

    obj.name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GROUP_DECLINE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GROUP_DECLINE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GROUP_DECLINE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000074); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    return writer.m_buf;
}

static size_t CMSG_GROUP_UNINVITE_size(const CMSG_GROUP_UNINVITE& obj) {
    return 1 + obj.name.size();
}

CMSG_GROUP_UNINVITE CMSG_GROUP_UNINVITE_read(Reader& reader) {
    CMSG_GROUP_UNINVITE obj{};

    obj.name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_UNINVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GROUP_UNINVITE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GROUP_UNINVITE_size(obj) + 4)); /* size */

    writer.write_u32(0x00000075); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    return writer.m_buf;
}

static size_t CMSG_GROUP_UNINVITE_GUID_size(const CMSG_GROUP_UNINVITE_GUID& obj) {
    return 9 + obj.reason.size();
}

CMSG_GROUP_UNINVITE_GUID CMSG_GROUP_UNINVITE_GUID_read(Reader& reader) {
    CMSG_GROUP_UNINVITE_GUID obj{};

    obj.guid = reader.read_u64();

    obj.reason = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_UNINVITE_GUID::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GROUP_UNINVITE_GUID_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GROUP_UNINVITE_GUID_size(obj) + 4)); /* size */

    writer.write_u32(0x00000076); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_cstring(obj.reason);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GROUP_UNINVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000077); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_GROUP_SET_LEADER CMSG_GROUP_SET_LEADER_read(Reader& reader) {
    CMSG_GROUP_SET_LEADER obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_SET_LEADER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000078); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_GROUP_SET_LEADER_size(const SMSG_GROUP_SET_LEADER& obj) {
    return 1 + obj.name.size();
}

SMSG_GROUP_SET_LEADER SMSG_GROUP_SET_LEADER_read(Reader& reader) {
    SMSG_GROUP_SET_LEADER obj{};

    obj.name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GROUP_SET_LEADER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GROUP_SET_LEADER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GROUP_SET_LEADER_size(obj) + 2)); /* size */

    writer.write_u16(0x00000079); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    return writer.m_buf;
}

CMSG_LOOT_METHOD CMSG_LOOT_METHOD_read(Reader& reader) {
    CMSG_LOOT_METHOD obj{};

    obj.loot_setting = static_cast<GroupLootSetting>(reader.read_u32());

    obj.loot_master = reader.read_u64();

    obj.loot_threshold = static_cast<ItemQuality>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LOOT_METHOD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 4)); /* size */

    writer.write_u32(0x0000007a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.loot_setting));

    writer.write_u64(obj.loot_master);

    writer.write_u32(static_cast<uint32_t>(obj.loot_threshold));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_DISBAND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000007b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GROUP_DESTROYED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x0000007c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_GROUP_LIST_size(const SMSG_GROUP_LIST& obj) {
    size_t _size = 28;

    for(const auto& v : obj.members) {
        _size += GroupListMember_size(v);
    }

    if(obj.group_not_empty) {
        _size += 13;
    }

    return _size;
}

SMSG_GROUP_LIST SMSG_GROUP_LIST_read(Reader& reader, size_t body_size) {
    SMSG_GROUP_LIST obj{};
    size_t _size = 0;

    obj.group_type = reader.read_u8();
    _size += 1;

    obj.group_id = reader.read_u8();
    _size += 1;

    obj.flags = reader.read_u8();
    _size += 1;

    obj.roles = reader.read_u8();
    _size += 1;

    obj.group = reader.read_u64();
    _size += 8;

    obj.counter = reader.read_u32();
    _size += 4;

    auto amount_of_members = reader.read_u32();
    _size += 4;

    for (uint32_t i = 0; i < amount_of_members; ++i) {
        obj.members.push_back(::wow_world_messages::wrath::GroupListMember_read(reader));
        _size += wrath::GroupListMember_size(obj.members.back());
    }

    obj.leader = reader.read_u64();
    _size += 8;

    if (_size < body_size) {
        obj.group_not_empty = std::shared_ptr<wrath::SMSG_GROUP_LIST::GroupNotEmpty>(new wrath::SMSG_GROUP_LIST::GroupNotEmpty());

        obj.group_not_empty->loot_setting = static_cast<GroupLootSetting>(reader.read_u8());

        obj.group_not_empty->master_loot = reader.read_u64();

        obj.group_not_empty->loot_threshold = static_cast<ItemQuality>(reader.read_u8());

        obj.group_not_empty->difficulty = static_cast<DungeonDifficulty>(reader.read_u8());

        obj.group_not_empty->raid_difficulty = static_cast<RaidDifficulty>(reader.read_u8());

        obj.group_not_empty->heroic = reader.read_bool8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GROUP_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GROUP_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GROUP_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x0000007d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.group_type);

    writer.write_u8(obj.group_id);

    writer.write_u8(obj.flags);

    writer.write_u8(obj.roles);

    writer.write_u64(obj.group);

    writer.write_u32(obj.counter);

    writer.write_u32(static_cast<uint32_t>(obj.members.size()));

    for (const auto& v : obj.members) {
        GroupListMember_write(writer, v);
    }

    writer.write_u64(obj.leader);

    if(obj.group_not_empty) {
        writer.write_u8(static_cast<uint8_t>(obj.group_not_empty->loot_setting));

        writer.write_u64(obj.group_not_empty->master_loot);

        writer.write_u8(static_cast<uint8_t>(obj.group_not_empty->loot_threshold));

        writer.write_u8(static_cast<uint8_t>(obj.group_not_empty->difficulty));

        writer.write_u8(static_cast<uint8_t>(obj.group_not_empty->raid_difficulty));

        writer.write_bool8(obj.group_not_empty->heroic);

    }
    return writer.m_buf;
}

static size_t SMSG_PARTY_MEMBER_STATS_size(const SMSG_PARTY_MEMBER_STATS& obj) {
    size_t _size = 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);

    if ((obj.mask & GROUP_UPDATE_FLAGS_STATUS) != 0) {
        _size += 1;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_HP) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_HP) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_POWER_TYPE) != 0) {
        _size += 1;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_POWER) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_POWER) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_LEVEL) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_ZONE) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_POSITION) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_AURAS) != 0) {
        _size += 0 + aura_mask_size(obj.auras);
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_GUID) != 0) {
        _size += 8;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_NAME) != 0) {
        _size += 1 + obj.pet_name.size();
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MODEL_ID) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_HP) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_HP) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_POWER_TYPE) != 0) {
        _size += 1;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_POWER) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_POWER) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_AURAS) != 0) {
        _size += 0 + aura_mask_size(obj.pet_auras);
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_VEHICLE_SEAT) != 0) {
        _size += 4;
    }

    return _size;
}

SMSG_PARTY_MEMBER_STATS SMSG_PARTY_MEMBER_STATS_read(Reader& reader) {
    SMSG_PARTY_MEMBER_STATS obj{};

    obj.guid = reader.read_packed_guid();

    obj.mask = static_cast<GroupUpdateFlags>(reader.read_u32());

    if ((obj.mask & GROUP_UPDATE_FLAGS_STATUS) != 0) {
        obj.status = static_cast<GroupMemberOnlineStatus>(reader.read_u8());

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_HP) != 0) {
        obj.current_health = reader.read_u32();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_HP) != 0) {
        obj.max_health = reader.read_u32();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_POWER_TYPE) != 0) {
        obj.power = static_cast<Power>(reader.read_u8());

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_POWER) != 0) {
        obj.current_power = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_POWER) != 0) {
        obj.max_power = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_LEVEL) != 0) {
        obj.level = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_ZONE) != 0) {
        obj.area = static_cast<Area>(reader.read_u32());

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_POSITION) != 0) {
        obj.position_x = reader.read_u16();

        obj.position_y = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_AURAS) != 0) {
        obj.auras = ::wow_world_messages::wrath::aura_mask_read(reader);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_GUID) != 0) {
        obj.pet = reader.read_u64();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_NAME) != 0) {
        obj.pet_name = reader.read_cstring();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MODEL_ID) != 0) {
        obj.pet_display_id = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_HP) != 0) {
        obj.pet_current_health = reader.read_u32();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_HP) != 0) {
        obj.pet_max_health = reader.read_u32();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_POWER_TYPE) != 0) {
        obj.pet_power_type = static_cast<Power>(reader.read_u8());

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_POWER) != 0) {
        obj.pet_current_power = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_POWER) != 0) {
        obj.pet_max_power = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_AURAS) != 0) {
        obj.pet_auras = ::wow_world_messages::wrath::aura_mask_read(reader);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_VEHICLE_SEAT) != 0) {
        obj.transport = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PARTY_MEMBER_STATS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PARTY_MEMBER_STATS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PARTY_MEMBER_STATS_size(obj) + 2)); /* size */

    writer.write_u16(0x0000007e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.mask));

    if ((obj.mask & GROUP_UPDATE_FLAGS_STATUS) != 0) {
        writer.write_u8(static_cast<uint8_t>(obj.status));

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_HP) != 0) {
        writer.write_u32(obj.current_health);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_HP) != 0) {
        writer.write_u32(obj.max_health);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_POWER_TYPE) != 0) {
        writer.write_u8(static_cast<uint8_t>(obj.power));

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_POWER) != 0) {
        writer.write_u16(obj.current_power);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_POWER) != 0) {
        writer.write_u16(obj.max_power);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_LEVEL) != 0) {
        writer.write_u16(obj.level);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_ZONE) != 0) {
        writer.write_u32(static_cast<uint32_t>(obj.area));

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_POSITION) != 0) {
        writer.write_u16(obj.position_x);

        writer.write_u16(obj.position_y);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_AURAS) != 0) {
        aura_mask_write(writer, obj.auras);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_GUID) != 0) {
        writer.write_u64(obj.pet);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_NAME) != 0) {
        writer.write_cstring(obj.pet_name);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MODEL_ID) != 0) {
        writer.write_u16(obj.pet_display_id);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_HP) != 0) {
        writer.write_u32(obj.pet_current_health);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_HP) != 0) {
        writer.write_u32(obj.pet_max_health);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_POWER_TYPE) != 0) {
        writer.write_u8(static_cast<uint8_t>(obj.pet_power_type));

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_POWER) != 0) {
        writer.write_u16(obj.pet_current_power);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_POWER) != 0) {
        writer.write_u16(obj.pet_max_power);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_AURAS) != 0) {
        aura_mask_write(writer, obj.pet_auras);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_VEHICLE_SEAT) != 0) {
        writer.write_u32(obj.transport);

    }
    return writer.m_buf;
}

static size_t SMSG_PARTY_COMMAND_RESULT_size(const SMSG_PARTY_COMMAND_RESULT& obj) {
    return 9 + obj.member.size();
}

SMSG_PARTY_COMMAND_RESULT SMSG_PARTY_COMMAND_RESULT_read(Reader& reader) {
    SMSG_PARTY_COMMAND_RESULT obj{};

    obj.operation = static_cast<PartyOperation>(reader.read_u32());

    obj.member = reader.read_cstring();

    obj.result = static_cast<PartyResult>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PARTY_COMMAND_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PARTY_COMMAND_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PARTY_COMMAND_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x0000007f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.operation));

    writer.write_cstring(obj.member);

    writer.write_u32(static_cast<uint32_t>(obj.result));

    return writer.m_buf;
}

static size_t CMSG_GUILD_CREATE_size(const CMSG_GUILD_CREATE& obj) {
    return 1 + obj.guild_name.size();
}

CMSG_GUILD_CREATE CMSG_GUILD_CREATE_read(Reader& reader) {
    CMSG_GUILD_CREATE obj{};

    obj.guild_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_CREATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_CREATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_CREATE_size(obj) + 4)); /* size */

    writer.write_u32(0x00000081); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.guild_name);

    return writer.m_buf;
}

static size_t CMSG_GUILD_INVITE_size(const CMSG_GUILD_INVITE& obj) {
    return 1 + obj.invited_player.size();
}

CMSG_GUILD_INVITE CMSG_GUILD_INVITE_read(Reader& reader) {
    CMSG_GUILD_INVITE obj{};

    obj.invited_player = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_INVITE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_INVITE_size(obj) + 4)); /* size */

    writer.write_u32(0x00000082); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.invited_player);

    return writer.m_buf;
}

static size_t SMSG_GUILD_INVITE_size(const SMSG_GUILD_INVITE& obj) {
    return 2 + obj.player_name.size() + obj.guild_name.size();
}

SMSG_GUILD_INVITE SMSG_GUILD_INVITE_read(Reader& reader) {
    SMSG_GUILD_INVITE obj{};

    obj.player_name = reader.read_cstring();

    obj.guild_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GUILD_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GUILD_INVITE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GUILD_INVITE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000083); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.player_name);

    writer.write_cstring(obj.guild_name);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_ACCEPT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000084); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_DECLINE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000085); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_GUILD_DECLINE_size(const SMSG_GUILD_DECLINE& obj) {
    return 1 + obj.player.size();
}

SMSG_GUILD_DECLINE SMSG_GUILD_DECLINE_read(Reader& reader) {
    SMSG_GUILD_DECLINE obj{};

    obj.player = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GUILD_DECLINE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GUILD_DECLINE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GUILD_DECLINE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000086); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.player);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000087); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_GUILD_INFO_size(const SMSG_GUILD_INFO& obj) {
    return 13 + obj.guild_name.size();
}

SMSG_GUILD_INFO SMSG_GUILD_INFO_read(Reader& reader) {
    SMSG_GUILD_INFO obj{};

    obj.guild_name = reader.read_cstring();

    obj.created = reader.read_u32();

    obj.amount_of_characters_in_guild = reader.read_u32();

    obj.amount_of_accounts_in_guild = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GUILD_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GUILD_INFO_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GUILD_INFO_size(obj) + 2)); /* size */

    writer.write_u16(0x00000088); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.guild_name);

    writer.write_u32(obj.created);

    writer.write_u32(obj.amount_of_characters_in_guild);

    writer.write_u32(obj.amount_of_accounts_in_guild);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_ROSTER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000089); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_GUILD_ROSTER_size(const SMSG_GUILD_ROSTER& obj) {
    size_t _size = 10 + obj.motd.size() + obj.guild_info.size() + 56 * obj.rights.size();

    for(const auto& v : obj.members) {
        _size += GuildMember_size(v);
    }

    return _size;
}

SMSG_GUILD_ROSTER SMSG_GUILD_ROSTER_read(Reader& reader) {
    SMSG_GUILD_ROSTER obj{};

    auto amount_of_members = reader.read_u32();

    obj.motd = reader.read_cstring();

    obj.guild_info = reader.read_cstring();

    auto amount_of_rights = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_rights; ++i) {
        obj.rights.push_back(::wow_world_messages::wrath::GuildRights_read(reader));
    }

    for (uint32_t i = 0; i < amount_of_members; ++i) {
        obj.members.push_back(::wow_world_messages::wrath::GuildMember_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GUILD_ROSTER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GUILD_ROSTER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GUILD_ROSTER_size(obj) + 2)); /* size */

    writer.write_u16(0x0000008a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.members.size()));

    writer.write_cstring(obj.motd);

    writer.write_cstring(obj.guild_info);

    writer.write_u32(static_cast<uint32_t>(obj.rights.size()));

    for (const auto& v : obj.rights) {
        GuildRights_write(writer, v);
    }

    for (const auto& v : obj.members) {
        GuildMember_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_GUILD_PROMOTE_size(const CMSG_GUILD_PROMOTE& obj) {
    return 1 + obj.player_name.size();
}

CMSG_GUILD_PROMOTE CMSG_GUILD_PROMOTE_read(Reader& reader) {
    CMSG_GUILD_PROMOTE obj{};

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_PROMOTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_PROMOTE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_PROMOTE_size(obj) + 4)); /* size */

    writer.write_u32(0x0000008b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

static size_t CMSG_GUILD_DEMOTE_size(const CMSG_GUILD_DEMOTE& obj) {
    return 1 + obj.player_name.size();
}

CMSG_GUILD_DEMOTE CMSG_GUILD_DEMOTE_read(Reader& reader) {
    CMSG_GUILD_DEMOTE obj{};

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_DEMOTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_DEMOTE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_DEMOTE_size(obj) + 4)); /* size */

    writer.write_u32(0x0000008c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_LEAVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000008d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t CMSG_GUILD_REMOVE_size(const CMSG_GUILD_REMOVE& obj) {
    return 1 + obj.player_name.size();
}

CMSG_GUILD_REMOVE CMSG_GUILD_REMOVE_read(Reader& reader) {
    CMSG_GUILD_REMOVE obj{};

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_REMOVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_REMOVE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_REMOVE_size(obj) + 4)); /* size */

    writer.write_u32(0x0000008e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_DISBAND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000008f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t CMSG_GUILD_LEADER_size(const CMSG_GUILD_LEADER& obj) {
    return 1 + obj.new_guild_leader_name.size();
}

CMSG_GUILD_LEADER CMSG_GUILD_LEADER_read(Reader& reader) {
    CMSG_GUILD_LEADER obj{};

    obj.new_guild_leader_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_LEADER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_LEADER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_LEADER_size(obj) + 4)); /* size */

    writer.write_u32(0x00000090); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.new_guild_leader_name);

    return writer.m_buf;
}

static size_t CMSG_GUILD_MOTD_size(const CMSG_GUILD_MOTD& obj) {
    return 1 + obj.message_of_the_day.size();
}

CMSG_GUILD_MOTD CMSG_GUILD_MOTD_read(Reader& reader) {
    CMSG_GUILD_MOTD obj{};

    obj.message_of_the_day = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_MOTD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_MOTD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_MOTD_size(obj) + 4)); /* size */

    writer.write_u32(0x00000091); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.message_of_the_day);

    return writer.m_buf;
}

static size_t SMSG_GUILD_EVENT_size(const SMSG_GUILD_EVENT& obj) {
    size_t _size = 2;

    for(const auto& v : obj.event_descriptions) {
        _size += v.size() + 1;
    }

    return _size;
}

SMSG_GUILD_EVENT SMSG_GUILD_EVENT_read(Reader& reader) {
    SMSG_GUILD_EVENT obj{};

    obj.event = static_cast<GuildEvent>(reader.read_u8());

    auto amount_of_events = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_events; ++i) {
        obj.event_descriptions.push_back(reader.read_cstring());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GUILD_EVENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GUILD_EVENT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GUILD_EVENT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000092); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.event));

    writer.write_u8(static_cast<uint8_t>(obj.event_descriptions.size()));

    for (const auto& v : obj.event_descriptions) {
        writer.write_cstring(v);
    }

    return writer.m_buf;
}

static size_t SMSG_GUILD_COMMAND_RESULT_size(const SMSG_GUILD_COMMAND_RESULT& obj) {
    return 9 + obj.string.size();
}

SMSG_GUILD_COMMAND_RESULT SMSG_GUILD_COMMAND_RESULT_read(Reader& reader) {
    SMSG_GUILD_COMMAND_RESULT obj{};

    obj.command = static_cast<GuildCommand>(reader.read_u32());

    obj.string = reader.read_cstring();

    obj.result = static_cast<GuildCommandResult>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GUILD_COMMAND_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GUILD_COMMAND_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GUILD_COMMAND_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000093); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.command));

    writer.write_cstring(obj.string);

    writer.write_u32(static_cast<uint32_t>(obj.result));

    return writer.m_buf;
}

static size_t CMSG_MESSAGECHAT_size(const CMSG_MESSAGECHAT& obj) {
    size_t _size = 9 + obj.message.size();

    if (obj.chat_type == ChatType::WHISPER) {
        _size += 1 + obj.target_player.size();
    }
    else if (obj.chat_type == ChatType::CHANNEL) {
        _size += 1 + obj.channel.size();
    }

    return _size;
}

CMSG_MESSAGECHAT CMSG_MESSAGECHAT_read(Reader& reader) {
    CMSG_MESSAGECHAT obj{};

    obj.chat_type = static_cast<ChatType>(reader.read_u32());

    obj.language = static_cast<Language>(reader.read_u32());

    if (obj.chat_type == ChatType::WHISPER) {
        obj.target_player = reader.read_cstring();

    }
    else if (obj.chat_type == ChatType::CHANNEL) {
        obj.channel = reader.read_cstring();

    }
    obj.message = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MESSAGECHAT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MESSAGECHAT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MESSAGECHAT_size(obj) + 4)); /* size */

    writer.write_u32(0x00000095); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.chat_type));

    writer.write_u32(static_cast<uint32_t>(obj.language));

    if (obj.chat_type == ChatType::WHISPER) {
        writer.write_cstring(obj.target_player);

    }
    else if (obj.chat_type == ChatType::CHANNEL) {
        writer.write_cstring(obj.channel);

    }
    writer.write_cstring(obj.message);

    return writer.m_buf;
}

static size_t SMSG_MESSAGECHAT_size(const SMSG_MESSAGECHAT& obj) {
    size_t _size = 23 + obj.message.size();

    if (obj.chat_type == ChatType::MONSTER_SAY|| obj.chat_type == ChatType::MONSTER_PARTY|| obj.chat_type == ChatType::MONSTER_YELL|| obj.chat_type == ChatType::MONSTER_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_EMOTE|| obj.chat_type == ChatType::MONSTER_EMOTE|| obj.chat_type == ChatType::BATTLENET) {
        _size += 5 + obj.sender1.size() + ::wow_world_messages::util::wwm_named_guid_size(obj.target1);
    }
    else if (obj.chat_type == ChatType::WHISPER_FOREIGN) {
        _size += 13 + obj.sender2.size();
    }
    else if (obj.chat_type == ChatType::BG_SYSTEM_NEUTRAL|| obj.chat_type == ChatType::BG_SYSTEM_ALLIANCE|| obj.chat_type == ChatType::BG_SYSTEM_HORDE) {
        _size += 0 + ::wow_world_messages::util::wwm_named_guid_size(obj.target3);
    }
    else if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        _size += 8;
    }
    else if (obj.chat_type == ChatType::CHANNEL) {
        _size += 9 + obj.channel_name.size();
    }
    else if (obj.chat_type == ChatType::SYSTEM|| obj.chat_type == ChatType::SAY|| obj.chat_type == ChatType::PARTY|| obj.chat_type == ChatType::RAID|| obj.chat_type == ChatType::GUILD|| obj.chat_type == ChatType::OFFICER|| obj.chat_type == ChatType::YELL|| obj.chat_type == ChatType::WHISPER|| obj.chat_type == ChatType::WHISPER_INFORM|| obj.chat_type == ChatType::EMOTE|| obj.chat_type == ChatType::TEXT_EMOTE|| obj.chat_type == ChatType::CHANNEL_JOIN|| obj.chat_type == ChatType::CHANNEL_LEAVE|| obj.chat_type == ChatType::CHANNEL_LIST|| obj.chat_type == ChatType::CHANNEL_NOTICE|| obj.chat_type == ChatType::CHANNEL_NOTICE_USER|| obj.chat_type == ChatType::AFK|| obj.chat_type == ChatType::DND|| obj.chat_type == ChatType::IGNORED|| obj.chat_type == ChatType::SKILL|| obj.chat_type == ChatType::LOOT|| obj.chat_type == ChatType::MONEY|| obj.chat_type == ChatType::OPENING|| obj.chat_type == ChatType::TRADESKILLS|| obj.chat_type == ChatType::PET_INFO|| obj.chat_type == ChatType::COMBAT_MISC_INFO|| obj.chat_type == ChatType::COMBAT_XP_GAIN|| obj.chat_type == ChatType::COMBAT_HONOR_GAIN|| obj.chat_type == ChatType::COMBAT_FACTION_CHANGE|| obj.chat_type == ChatType::RAID_LEADER|| obj.chat_type == ChatType::RAID_WARNING|| obj.chat_type == ChatType::FILTERED|| obj.chat_type == ChatType::BATTLEGROUND|| obj.chat_type == ChatType::BATTLEGROUND_LEADER|| obj.chat_type == ChatType::RESTRICTED|| obj.chat_type == ChatType::ARENA_POINTS|| obj.chat_type == ChatType::PARTY_LEADER) {
        _size += 8;
    }

    if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        _size += 4;
    }

    return _size;
}

SMSG_MESSAGECHAT SMSG_MESSAGECHAT_read(Reader& reader) {
    SMSG_MESSAGECHAT obj{};

    obj.chat_type = static_cast<ChatType>(reader.read_u8());

    obj.language = static_cast<Language>(reader.read_u32());

    obj.sender = reader.read_u64();

    obj.flags = reader.read_u32();

    if (obj.chat_type == ChatType::MONSTER_SAY|| obj.chat_type == ChatType::MONSTER_PARTY|| obj.chat_type == ChatType::MONSTER_YELL|| obj.chat_type == ChatType::MONSTER_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_EMOTE|| obj.chat_type == ChatType::MONSTER_EMOTE|| obj.chat_type == ChatType::BATTLENET) {
        obj.sender1 = reader.read_sized_cstring();

        obj.target1 = ::wow_world_messages::util::wwm_read_named_guid(reader);

    }
    else if (obj.chat_type == ChatType::WHISPER_FOREIGN) {
        obj.sender2 = reader.read_sized_cstring();

        obj.target2 = reader.read_u64();

    }
    else if (obj.chat_type == ChatType::BG_SYSTEM_NEUTRAL|| obj.chat_type == ChatType::BG_SYSTEM_ALLIANCE|| obj.chat_type == ChatType::BG_SYSTEM_HORDE) {
        obj.target3 = ::wow_world_messages::util::wwm_read_named_guid(reader);

    }
    else if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        obj.target4 = reader.read_u64();

    }
    else if (obj.chat_type == ChatType::CHANNEL) {
        obj.channel_name = reader.read_cstring();

        obj.target5 = reader.read_u64();

    }
    else if (obj.chat_type == ChatType::SYSTEM|| obj.chat_type == ChatType::SAY|| obj.chat_type == ChatType::PARTY|| obj.chat_type == ChatType::RAID|| obj.chat_type == ChatType::GUILD|| obj.chat_type == ChatType::OFFICER|| obj.chat_type == ChatType::YELL|| obj.chat_type == ChatType::WHISPER|| obj.chat_type == ChatType::WHISPER_INFORM|| obj.chat_type == ChatType::EMOTE|| obj.chat_type == ChatType::TEXT_EMOTE|| obj.chat_type == ChatType::CHANNEL_JOIN|| obj.chat_type == ChatType::CHANNEL_LEAVE|| obj.chat_type == ChatType::CHANNEL_LIST|| obj.chat_type == ChatType::CHANNEL_NOTICE|| obj.chat_type == ChatType::CHANNEL_NOTICE_USER|| obj.chat_type == ChatType::AFK|| obj.chat_type == ChatType::DND|| obj.chat_type == ChatType::IGNORED|| obj.chat_type == ChatType::SKILL|| obj.chat_type == ChatType::LOOT|| obj.chat_type == ChatType::MONEY|| obj.chat_type == ChatType::OPENING|| obj.chat_type == ChatType::TRADESKILLS|| obj.chat_type == ChatType::PET_INFO|| obj.chat_type == ChatType::COMBAT_MISC_INFO|| obj.chat_type == ChatType::COMBAT_XP_GAIN|| obj.chat_type == ChatType::COMBAT_HONOR_GAIN|| obj.chat_type == ChatType::COMBAT_FACTION_CHANGE|| obj.chat_type == ChatType::RAID_LEADER|| obj.chat_type == ChatType::RAID_WARNING|| obj.chat_type == ChatType::FILTERED|| obj.chat_type == ChatType::BATTLEGROUND|| obj.chat_type == ChatType::BATTLEGROUND_LEADER|| obj.chat_type == ChatType::RESTRICTED|| obj.chat_type == ChatType::ARENA_POINTS|| obj.chat_type == ChatType::PARTY_LEADER) {
        obj.target6 = reader.read_u64();

    }
    obj.message = reader.read_sized_cstring();

    obj.tag = static_cast<PlayerChatTag>(reader.read_u8());

    if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        obj.achievement_id = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MESSAGECHAT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MESSAGECHAT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MESSAGECHAT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000096); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.chat_type));

    writer.write_u32(static_cast<uint32_t>(obj.language));

    writer.write_u64(obj.sender);

    writer.write_u32(obj.flags);

    if (obj.chat_type == ChatType::MONSTER_SAY|| obj.chat_type == ChatType::MONSTER_PARTY|| obj.chat_type == ChatType::MONSTER_YELL|| obj.chat_type == ChatType::MONSTER_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_EMOTE|| obj.chat_type == ChatType::MONSTER_EMOTE|| obj.chat_type == ChatType::BATTLENET) {
        writer.write_sized_cstring(obj.sender1);

        ::wow_world_messages::util::wwm_write_named_guid(writer, obj.target1);

    }
    else if (obj.chat_type == ChatType::WHISPER_FOREIGN) {
        writer.write_sized_cstring(obj.sender2);

        writer.write_u64(obj.target2);

    }
    else if (obj.chat_type == ChatType::BG_SYSTEM_NEUTRAL|| obj.chat_type == ChatType::BG_SYSTEM_ALLIANCE|| obj.chat_type == ChatType::BG_SYSTEM_HORDE) {
        ::wow_world_messages::util::wwm_write_named_guid(writer, obj.target3);

    }
    else if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        writer.write_u64(obj.target4);

    }
    else if (obj.chat_type == ChatType::CHANNEL) {
        writer.write_cstring(obj.channel_name);

        writer.write_u64(obj.target5);

    }
    else if (obj.chat_type == ChatType::SYSTEM|| obj.chat_type == ChatType::SAY|| obj.chat_type == ChatType::PARTY|| obj.chat_type == ChatType::RAID|| obj.chat_type == ChatType::GUILD|| obj.chat_type == ChatType::OFFICER|| obj.chat_type == ChatType::YELL|| obj.chat_type == ChatType::WHISPER|| obj.chat_type == ChatType::WHISPER_INFORM|| obj.chat_type == ChatType::EMOTE|| obj.chat_type == ChatType::TEXT_EMOTE|| obj.chat_type == ChatType::CHANNEL_JOIN|| obj.chat_type == ChatType::CHANNEL_LEAVE|| obj.chat_type == ChatType::CHANNEL_LIST|| obj.chat_type == ChatType::CHANNEL_NOTICE|| obj.chat_type == ChatType::CHANNEL_NOTICE_USER|| obj.chat_type == ChatType::AFK|| obj.chat_type == ChatType::DND|| obj.chat_type == ChatType::IGNORED|| obj.chat_type == ChatType::SKILL|| obj.chat_type == ChatType::LOOT|| obj.chat_type == ChatType::MONEY|| obj.chat_type == ChatType::OPENING|| obj.chat_type == ChatType::TRADESKILLS|| obj.chat_type == ChatType::PET_INFO|| obj.chat_type == ChatType::COMBAT_MISC_INFO|| obj.chat_type == ChatType::COMBAT_XP_GAIN|| obj.chat_type == ChatType::COMBAT_HONOR_GAIN|| obj.chat_type == ChatType::COMBAT_FACTION_CHANGE|| obj.chat_type == ChatType::RAID_LEADER|| obj.chat_type == ChatType::RAID_WARNING|| obj.chat_type == ChatType::FILTERED|| obj.chat_type == ChatType::BATTLEGROUND|| obj.chat_type == ChatType::BATTLEGROUND_LEADER|| obj.chat_type == ChatType::RESTRICTED|| obj.chat_type == ChatType::ARENA_POINTS|| obj.chat_type == ChatType::PARTY_LEADER) {
        writer.write_u64(obj.target6);

    }
    writer.write_sized_cstring(obj.message);

    writer.write_u8(static_cast<uint8_t>(obj.tag));

    if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        writer.write_u32(obj.achievement_id);

    }
    return writer.m_buf;
}

static size_t CMSG_JOIN_CHANNEL_size(const CMSG_JOIN_CHANNEL& obj) {
    return 8 + obj.channel_name.size() + obj.channel_password.size();
}

CMSG_JOIN_CHANNEL CMSG_JOIN_CHANNEL_read(Reader& reader) {
    CMSG_JOIN_CHANNEL obj{};

    obj.channel_id = reader.read_u32();

    obj.unknown1 = reader.read_u8();

    obj.unknown2 = reader.read_u8();

    obj.channel_name = reader.read_cstring();

    obj.channel_password = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_JOIN_CHANNEL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_JOIN_CHANNEL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_JOIN_CHANNEL_size(obj) + 4)); /* size */

    writer.write_u32(0x00000097); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.channel_id);

    writer.write_u8(obj.unknown1);

    writer.write_u8(obj.unknown2);

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.channel_password);

    return writer.m_buf;
}

static size_t CMSG_LEAVE_CHANNEL_size(const CMSG_LEAVE_CHANNEL& obj) {
    return 5 + obj.channel_name.size();
}

CMSG_LEAVE_CHANNEL CMSG_LEAVE_CHANNEL_read(Reader& reader) {
    CMSG_LEAVE_CHANNEL obj{};

    obj.channel_id = reader.read_u32();

    obj.channel_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LEAVE_CHANNEL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_LEAVE_CHANNEL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_LEAVE_CHANNEL_size(obj) + 4)); /* size */

    writer.write_u32(0x00000098); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.channel_id);

    writer.write_cstring(obj.channel_name);

    return writer.m_buf;
}

static size_t SMSG_CHANNEL_NOTIFY_size(const SMSG_CHANNEL_NOTIFY& obj) {
    size_t _size = 2 + obj.channel_name.size();

    if(obj.unknown1) {
        _size += 8;
    }

    return _size;
}

SMSG_CHANNEL_NOTIFY SMSG_CHANNEL_NOTIFY_read(Reader& reader, size_t body_size) {
    SMSG_CHANNEL_NOTIFY obj{};
    size_t _size = 0;

    obj.notify_type = static_cast<ChatNotify>(reader.read_u8());
    _size += 1;

    obj.channel_name = reader.read_cstring();
    _size += obj.channel_name.size() + 1;

    if (_size < body_size) {
        obj.unknown1 = std::shared_ptr<wrath::SMSG_CHANNEL_NOTIFY::Unknown1>(new wrath::SMSG_CHANNEL_NOTIFY::Unknown1());

        obj.unknown1->unknown2 = reader.read_u32();

        obj.unknown1->unkwown3 = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHANNEL_NOTIFY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CHANNEL_NOTIFY_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CHANNEL_NOTIFY_size(obj) + 2)); /* size */

    writer.write_u16(0x00000099); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.notify_type));

    writer.write_cstring(obj.channel_name);

    if(obj.unknown1) {
        writer.write_u32(obj.unknown1->unknown2);

        writer.write_u32(obj.unknown1->unkwown3);

    }
    return writer.m_buf;
}

static size_t CMSG_CHANNEL_LIST_size(const CMSG_CHANNEL_LIST& obj) {
    return 1 + obj.channel_name.size();
}

CMSG_CHANNEL_LIST CMSG_CHANNEL_LIST_read(Reader& reader) {
    CMSG_CHANNEL_LIST obj{};

    obj.channel_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_LIST_size(obj) + 4)); /* size */

    writer.write_u32(0x0000009a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    return writer.m_buf;
}

static size_t SMSG_CHANNEL_LIST_size(const SMSG_CHANNEL_LIST& obj) {
    return 6 + obj.channel_name.size() + 9 * obj.members.size();
}

SMSG_CHANNEL_LIST SMSG_CHANNEL_LIST_read(Reader& reader) {
    SMSG_CHANNEL_LIST obj{};

    obj.channel_name = reader.read_cstring();

    obj.channel_flags = static_cast<ChannelFlags>(reader.read_u8());

    auto amount_of_members = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_members; ++i) {
        obj.members.push_back(::wow_world_messages::wrath::ChannelMember_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHANNEL_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CHANNEL_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CHANNEL_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x0000009b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_u8(static_cast<uint8_t>(obj.channel_flags));

    writer.write_u32(static_cast<uint32_t>(obj.members.size()));

    for (const auto& v : obj.members) {
        ChannelMember_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_PASSWORD_size(const CMSG_CHANNEL_PASSWORD& obj) {
    return 2 + obj.channel_name.size() + obj.channel_password.size();
}

CMSG_CHANNEL_PASSWORD CMSG_CHANNEL_PASSWORD_read(Reader& reader) {
    CMSG_CHANNEL_PASSWORD obj{};

    obj.channel_name = reader.read_cstring();

    obj.channel_password = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_PASSWORD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_PASSWORD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_PASSWORD_size(obj) + 4)); /* size */

    writer.write_u32(0x0000009c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.channel_password);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_SET_OWNER_size(const CMSG_CHANNEL_SET_OWNER& obj) {
    return 2 + obj.channel_name.size() + obj.new_owner.size();
}

CMSG_CHANNEL_SET_OWNER CMSG_CHANNEL_SET_OWNER_read(Reader& reader) {
    CMSG_CHANNEL_SET_OWNER obj{};

    obj.channel_name = reader.read_cstring();

    obj.new_owner = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_SET_OWNER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_SET_OWNER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_SET_OWNER_size(obj) + 4)); /* size */

    writer.write_u32(0x0000009d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.new_owner);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_OWNER_size(const CMSG_CHANNEL_OWNER& obj) {
    return 1 + obj.channel_name.size();
}

CMSG_CHANNEL_OWNER CMSG_CHANNEL_OWNER_read(Reader& reader) {
    CMSG_CHANNEL_OWNER obj{};

    obj.channel_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_OWNER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_OWNER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_OWNER_size(obj) + 4)); /* size */

    writer.write_u32(0x0000009e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_MODERATOR_size(const CMSG_CHANNEL_MODERATOR& obj) {
    return 2 + obj.channel_name.size() + obj.player_name.size();
}

CMSG_CHANNEL_MODERATOR CMSG_CHANNEL_MODERATOR_read(Reader& reader) {
    CMSG_CHANNEL_MODERATOR obj{};

    obj.channel_name = reader.read_cstring();

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_MODERATOR::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_MODERATOR_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_MODERATOR_size(obj) + 4)); /* size */

    writer.write_u32(0x0000009f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_UNMODERATOR_size(const CMSG_CHANNEL_UNMODERATOR& obj) {
    return 2 + obj.channel_name.size() + obj.player_name.size();
}

CMSG_CHANNEL_UNMODERATOR CMSG_CHANNEL_UNMODERATOR_read(Reader& reader) {
    CMSG_CHANNEL_UNMODERATOR obj{};

    obj.channel_name = reader.read_cstring();

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_UNMODERATOR::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_UNMODERATOR_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_UNMODERATOR_size(obj) + 4)); /* size */

    writer.write_u32(0x000000a0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_MUTE_size(const CMSG_CHANNEL_MUTE& obj) {
    return 2 + obj.channel_name.size() + obj.player_name.size();
}

CMSG_CHANNEL_MUTE CMSG_CHANNEL_MUTE_read(Reader& reader) {
    CMSG_CHANNEL_MUTE obj{};

    obj.channel_name = reader.read_cstring();

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_MUTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_MUTE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_MUTE_size(obj) + 4)); /* size */

    writer.write_u32(0x000000a1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_UNMUTE_size(const CMSG_CHANNEL_UNMUTE& obj) {
    return 2 + obj.channel_name.size() + obj.player_name.size();
}

CMSG_CHANNEL_UNMUTE CMSG_CHANNEL_UNMUTE_read(Reader& reader) {
    CMSG_CHANNEL_UNMUTE obj{};

    obj.channel_name = reader.read_cstring();

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_UNMUTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_UNMUTE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_UNMUTE_size(obj) + 4)); /* size */

    writer.write_u32(0x000000a2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_INVITE_size(const CMSG_CHANNEL_INVITE& obj) {
    return 2 + obj.channel_name.size() + obj.player_name.size();
}

CMSG_CHANNEL_INVITE CMSG_CHANNEL_INVITE_read(Reader& reader) {
    CMSG_CHANNEL_INVITE obj{};

    obj.channel_name = reader.read_cstring();

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_INVITE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_INVITE_size(obj) + 4)); /* size */

    writer.write_u32(0x000000a3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_KICK_size(const CMSG_CHANNEL_KICK& obj) {
    return 2 + obj.channel_name.size() + obj.player_name.size();
}

CMSG_CHANNEL_KICK CMSG_CHANNEL_KICK_read(Reader& reader) {
    CMSG_CHANNEL_KICK obj{};

    obj.channel_name = reader.read_cstring();

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_KICK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_KICK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_KICK_size(obj) + 4)); /* size */

    writer.write_u32(0x000000a4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_BAN_size(const CMSG_CHANNEL_BAN& obj) {
    return 2 + obj.channel_name.size() + obj.player_name.size();
}

CMSG_CHANNEL_BAN CMSG_CHANNEL_BAN_read(Reader& reader) {
    CMSG_CHANNEL_BAN obj{};

    obj.channel_name = reader.read_cstring();

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_BAN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_BAN_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_BAN_size(obj) + 4)); /* size */

    writer.write_u32(0x000000a5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_UNBAN_size(const CMSG_CHANNEL_UNBAN& obj) {
    return 2 + obj.channel_name.size() + obj.player_name.size();
}

CMSG_CHANNEL_UNBAN CMSG_CHANNEL_UNBAN_read(Reader& reader) {
    CMSG_CHANNEL_UNBAN obj{};

    obj.channel_name = reader.read_cstring();

    obj.player_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_UNBAN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_UNBAN_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_UNBAN_size(obj) + 4)); /* size */

    writer.write_u32(0x000000a6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    writer.write_cstring(obj.player_name);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_ANNOUNCEMENTS_size(const CMSG_CHANNEL_ANNOUNCEMENTS& obj) {
    return 1 + obj.channel_name.size();
}

CMSG_CHANNEL_ANNOUNCEMENTS CMSG_CHANNEL_ANNOUNCEMENTS_read(Reader& reader) {
    CMSG_CHANNEL_ANNOUNCEMENTS obj{};

    obj.channel_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_ANNOUNCEMENTS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_ANNOUNCEMENTS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_ANNOUNCEMENTS_size(obj) + 4)); /* size */

    writer.write_u32(0x000000a7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_MODERATE_size(const CMSG_CHANNEL_MODERATE& obj) {
    return 1 + obj.channel_name.size();
}

CMSG_CHANNEL_MODERATE CMSG_CHANNEL_MODERATE_read(Reader& reader) {
    CMSG_CHANNEL_MODERATE obj{};

    obj.channel_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_MODERATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_MODERATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_MODERATE_size(obj) + 4)); /* size */

    writer.write_u32(0x000000a8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel_name);

    return writer.m_buf;
}

static size_t SMSG_UPDATE_OBJECT_size(const SMSG_UPDATE_OBJECT& obj) {
    size_t _size = 4;

    for(const auto& v : obj.objects) {
        _size += Object_size(v);
    }

    return _size;
}

SMSG_UPDATE_OBJECT SMSG_UPDATE_OBJECT_read(Reader& reader) {
    SMSG_UPDATE_OBJECT obj{};

    auto amount_of_objects = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_objects; ++i) {
        obj.objects.push_back(::wow_world_messages::wrath::Object_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_UPDATE_OBJECT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_UPDATE_OBJECT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_UPDATE_OBJECT_size(obj) + 2)); /* size */

    writer.write_u16(0x000000a9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.objects.size()));

    for (const auto& v : obj.objects) {
        Object_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_DESTROY_OBJECT SMSG_DESTROY_OBJECT_read(Reader& reader) {
    SMSG_DESTROY_OBJECT obj{};

    obj.guid = reader.read_u64();

    obj.target_died = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DESTROY_OBJECT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 2)); /* size */

    writer.write_u16(0x000000aa); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_bool8(obj.target_died);

    return writer.m_buf;
}

static size_t CMSG_USE_ITEM_size(const CMSG_USE_ITEM& obj) {
    size_t _size = 21 + SpellCastTargets_size(obj.targets);

    if (obj.cast_flags == ClientCastFlags::EXTRA) {
        _size += 9;

        if (obj.movement_data == ClientMovementData::PRESENT) {
            _size += 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
        }

    }

    return _size;
}

CMSG_USE_ITEM CMSG_USE_ITEM_read(Reader& reader) {
    CMSG_USE_ITEM obj{};

    obj.bag_index = reader.read_u8();

    obj.bag_slot = reader.read_u8();

    obj.spell_index = reader.read_u8();

    obj.cast_count = reader.read_u8();

    obj.spell = reader.read_u32();

    obj.item = reader.read_u64();

    obj.glyph_index = reader.read_u32();

    obj.cast_flags = static_cast<ClientCastFlags>(reader.read_u8());

    if (obj.cast_flags == ClientCastFlags::EXTRA) {
        obj.elevation = reader.read_float();

        obj.speed = reader.read_float();

        obj.movement_data = static_cast<ClientMovementData>(reader.read_u8());

        if (obj.movement_data == ClientMovementData::PRESENT) {
            obj.opcode = reader.read_u32();

            obj.guid = reader.read_packed_guid();

            obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

        }
    }
    obj.targets = ::wow_world_messages::wrath::SpellCastTargets_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_USE_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_USE_ITEM_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_USE_ITEM_size(obj) + 4)); /* size */

    writer.write_u32(0x000000ab); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.bag_index);

    writer.write_u8(obj.bag_slot);

    writer.write_u8(obj.spell_index);

    writer.write_u8(obj.cast_count);

    writer.write_u32(obj.spell);

    writer.write_u64(obj.item);

    writer.write_u32(obj.glyph_index);

    writer.write_u8(static_cast<uint8_t>(obj.cast_flags));

    if (obj.cast_flags == ClientCastFlags::EXTRA) {
        writer.write_float(obj.elevation);

        writer.write_float(obj.speed);

        writer.write_u8(static_cast<uint8_t>(obj.movement_data));

        if (obj.movement_data == ClientMovementData::PRESENT) {
            writer.write_u32(obj.opcode);

            writer.write_packed_guid(obj.guid);

            MovementInfo_write(writer, obj.info);

        }
    }
    SpellCastTargets_write(writer, obj.targets);

    return writer.m_buf;
}

CMSG_OPEN_ITEM CMSG_OPEN_ITEM_read(Reader& reader) {
    CMSG_OPEN_ITEM obj{};

    obj.bag_index = reader.read_u8();

    obj.slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_OPEN_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 4)); /* size */

    writer.write_u32(0x000000ac); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.bag_index);

    writer.write_u8(obj.slot);

    return writer.m_buf;
}

CMSG_READ_ITEM CMSG_READ_ITEM_read(Reader& reader) {
    CMSG_READ_ITEM obj{};

    obj.bag_index = reader.read_u8();

    obj.slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_READ_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 4)); /* size */

    writer.write_u32(0x000000ad); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.bag_index);

    writer.write_u8(obj.slot);

    return writer.m_buf;
}

SMSG_READ_ITEM_OK SMSG_READ_ITEM_OK_read(Reader& reader) {
    SMSG_READ_ITEM_OK obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_READ_ITEM_OK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000000ae); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_READ_ITEM_FAILED SMSG_READ_ITEM_FAILED_read(Reader& reader) {
    SMSG_READ_ITEM_FAILED obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_READ_ITEM_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000000af); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_ITEM_COOLDOWN SMSG_ITEM_COOLDOWN_read(Reader& reader) {
    SMSG_ITEM_COOLDOWN obj{};

    obj.guid = reader.read_u64();

    obj.id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ITEM_COOLDOWN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000000b0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.id);

    return writer.m_buf;
}

CMSG_GAMEOBJ_USE CMSG_GAMEOBJ_USE_read(Reader& reader) {
    CMSG_GAMEOBJ_USE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GAMEOBJ_USE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000000b1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_GAMEOBJECT_CUSTOM_ANIM SMSG_GAMEOBJECT_CUSTOM_ANIM_read(Reader& reader) {
    SMSG_GAMEOBJECT_CUSTOM_ANIM obj{};

    obj.guid = reader.read_u64();

    obj.animation_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GAMEOBJECT_CUSTOM_ANIM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000000b3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.animation_id);

    return writer.m_buf;
}

CMSG_AREATRIGGER CMSG_AREATRIGGER_read(Reader& reader) {
    CMSG_AREATRIGGER obj{};

    obj.trigger_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AREATRIGGER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x000000b4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.trigger_id);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_FORWARD_size(const MSG_MOVE_START_FORWARD& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_FORWARD MSG_MOVE_START_FORWARD_read(Reader& reader) {
    MSG_MOVE_START_FORWARD obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_FORWARD::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_FORWARD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_FORWARD_size(obj) + 4)); /* size */

    writer.write_u32(0x000000b5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_FORWARD::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_FORWARD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_FORWARD_size(obj) + 2)); /* size */

    writer.write_u16(0x000000b5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_BACKWARD_size(const MSG_MOVE_START_BACKWARD& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_BACKWARD MSG_MOVE_START_BACKWARD_read(Reader& reader) {
    MSG_MOVE_START_BACKWARD obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_BACKWARD::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_BACKWARD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_BACKWARD_size(obj) + 4)); /* size */

    writer.write_u32(0x000000b6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_BACKWARD::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_BACKWARD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_BACKWARD_size(obj) + 2)); /* size */

    writer.write_u16(0x000000b6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_STOP_size(const MSG_MOVE_STOP& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_STOP MSG_MOVE_STOP_read(Reader& reader) {
    MSG_MOVE_STOP obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_STOP_size(obj) + 4)); /* size */

    writer.write_u32(0x000000b7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_STOP_size(obj) + 2)); /* size */

    writer.write_u16(0x000000b7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_STRAFE_LEFT_size(const MSG_MOVE_START_STRAFE_LEFT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_STRAFE_LEFT MSG_MOVE_START_STRAFE_LEFT_read(Reader& reader) {
    MSG_MOVE_START_STRAFE_LEFT obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_STRAFE_LEFT::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_STRAFE_LEFT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_STRAFE_LEFT_size(obj) + 4)); /* size */

    writer.write_u32(0x000000b8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_STRAFE_LEFT::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_STRAFE_LEFT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_STRAFE_LEFT_size(obj) + 2)); /* size */

    writer.write_u16(0x000000b8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_STRAFE_RIGHT_size(const MSG_MOVE_START_STRAFE_RIGHT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_STRAFE_RIGHT MSG_MOVE_START_STRAFE_RIGHT_read(Reader& reader) {
    MSG_MOVE_START_STRAFE_RIGHT obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_STRAFE_RIGHT::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_STRAFE_RIGHT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_STRAFE_RIGHT_size(obj) + 4)); /* size */

    writer.write_u32(0x000000b9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_STRAFE_RIGHT::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_STRAFE_RIGHT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_STRAFE_RIGHT_size(obj) + 2)); /* size */

    writer.write_u16(0x000000b9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_STOP_STRAFE_size(const MSG_MOVE_STOP_STRAFE& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_STOP_STRAFE MSG_MOVE_STOP_STRAFE_read(Reader& reader) {
    MSG_MOVE_STOP_STRAFE obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP_STRAFE::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_STRAFE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_STOP_STRAFE_size(obj) + 4)); /* size */

    writer.write_u32(0x000000ba); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP_STRAFE::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_STRAFE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_STOP_STRAFE_size(obj) + 2)); /* size */

    writer.write_u16(0x000000ba); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_JUMP_size(const MSG_MOVE_JUMP& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_JUMP MSG_MOVE_JUMP_read(Reader& reader) {
    MSG_MOVE_JUMP obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_JUMP::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_JUMP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_JUMP_size(obj) + 4)); /* size */

    writer.write_u32(0x000000bb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_JUMP::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_JUMP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_JUMP_size(obj) + 2)); /* size */

    writer.write_u16(0x000000bb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_TURN_LEFT_size(const MSG_MOVE_START_TURN_LEFT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_TURN_LEFT MSG_MOVE_START_TURN_LEFT_read(Reader& reader) {
    MSG_MOVE_START_TURN_LEFT obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_TURN_LEFT::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_TURN_LEFT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_TURN_LEFT_size(obj) + 4)); /* size */

    writer.write_u32(0x000000bc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_TURN_LEFT::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_TURN_LEFT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_TURN_LEFT_size(obj) + 2)); /* size */

    writer.write_u16(0x000000bc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_TURN_RIGHT_size(const MSG_MOVE_START_TURN_RIGHT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_TURN_RIGHT MSG_MOVE_START_TURN_RIGHT_read(Reader& reader) {
    MSG_MOVE_START_TURN_RIGHT obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_TURN_RIGHT::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_TURN_RIGHT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_TURN_RIGHT_size(obj) + 4)); /* size */

    writer.write_u32(0x000000bd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_TURN_RIGHT::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_TURN_RIGHT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_TURN_RIGHT_size(obj) + 2)); /* size */

    writer.write_u16(0x000000bd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_STOP_TURN_size(const MSG_MOVE_STOP_TURN& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_STOP_TURN MSG_MOVE_STOP_TURN_read(Reader& reader) {
    MSG_MOVE_STOP_TURN obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP_TURN::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_TURN_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_STOP_TURN_size(obj) + 4)); /* size */

    writer.write_u32(0x000000be); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP_TURN::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_TURN_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_STOP_TURN_size(obj) + 2)); /* size */

    writer.write_u16(0x000000be); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_PITCH_UP_size(const MSG_MOVE_START_PITCH_UP& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_PITCH_UP MSG_MOVE_START_PITCH_UP_read(Reader& reader) {
    MSG_MOVE_START_PITCH_UP obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_PITCH_UP::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_PITCH_UP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_PITCH_UP_size(obj) + 4)); /* size */

    writer.write_u32(0x000000bf); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_PITCH_UP::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_PITCH_UP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_PITCH_UP_size(obj) + 2)); /* size */

    writer.write_u16(0x000000bf); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_PITCH_DOWN_size(const MSG_MOVE_START_PITCH_DOWN& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_PITCH_DOWN MSG_MOVE_START_PITCH_DOWN_read(Reader& reader) {
    MSG_MOVE_START_PITCH_DOWN obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_PITCH_DOWN::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_PITCH_DOWN_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_PITCH_DOWN_size(obj) + 4)); /* size */

    writer.write_u32(0x000000c0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_PITCH_DOWN::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_PITCH_DOWN_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_PITCH_DOWN_size(obj) + 2)); /* size */

    writer.write_u16(0x000000c0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_STOP_PITCH_size(const MSG_MOVE_STOP_PITCH& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_STOP_PITCH MSG_MOVE_STOP_PITCH_read(Reader& reader) {
    MSG_MOVE_STOP_PITCH obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP_PITCH::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_PITCH_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_STOP_PITCH_size(obj) + 4)); /* size */

    writer.write_u32(0x000000c1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP_PITCH::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_PITCH_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_STOP_PITCH_size(obj) + 2)); /* size */

    writer.write_u16(0x000000c1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_SET_RUN_MODE_size(const MSG_MOVE_SET_RUN_MODE& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_SET_RUN_MODE MSG_MOVE_SET_RUN_MODE_read(Reader& reader) {
    MSG_MOVE_SET_RUN_MODE obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_RUN_MODE::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_RUN_MODE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_SET_RUN_MODE_size(obj) + 4)); /* size */

    writer.write_u32(0x000000c2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_RUN_MODE::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_RUN_MODE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_SET_RUN_MODE_size(obj) + 2)); /* size */

    writer.write_u16(0x000000c2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_SET_WALK_MODE_size(const MSG_MOVE_SET_WALK_MODE& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_SET_WALK_MODE MSG_MOVE_SET_WALK_MODE_read(Reader& reader) {
    MSG_MOVE_SET_WALK_MODE obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_WALK_MODE::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_WALK_MODE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_SET_WALK_MODE_size(obj) + 4)); /* size */

    writer.write_u32(0x000000c3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_WALK_MODE::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_WALK_MODE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_SET_WALK_MODE_size(obj) + 2)); /* size */

    writer.write_u16(0x000000c3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_TELEPORT_Server_size(const MSG_MOVE_TELEPORT_Server& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

MSG_MOVE_TELEPORT_Server MSG_MOVE_TELEPORT_Server_read(Reader& reader) {
    MSG_MOVE_TELEPORT_Server obj{};

    obj.player = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_TELEPORT_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_TELEPORT_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_TELEPORT_Server_size(obj) + 4)); /* size */

    writer.write_u32(0x000000c5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

MSG_MOVE_TELEPORT_CHEAT_Server MSG_MOVE_TELEPORT_CHEAT_Server_read(Reader& reader) {
    MSG_MOVE_TELEPORT_CHEAT_Server obj{};

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    obj.orientation = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_TELEPORT_CHEAT_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x000000c6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    Vector3d_write(writer, obj.position);

    writer.write_float(obj.orientation);

    return writer.m_buf;
}

static size_t MSG_MOVE_TELEPORT_ACK_Client_size(const MSG_MOVE_TELEPORT_ACK_Client& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

MSG_MOVE_TELEPORT_ACK_Client MSG_MOVE_TELEPORT_ACK_Client_read(Reader& reader) {
    MSG_MOVE_TELEPORT_ACK_Client obj{};

    obj.guid = reader.read_packed_guid();

    obj.movement_counter = reader.read_u32();

    obj.time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_TELEPORT_ACK_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_TELEPORT_ACK_Client_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_TELEPORT_ACK_Client_size(obj) + 4)); /* size */

    writer.write_u32(0x000000c7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.movement_counter);

    writer.write_u32(obj.time);

    return writer.m_buf;
}

static size_t MSG_MOVE_TELEPORT_ACK_Server_size(const MSG_MOVE_TELEPORT_ACK_Server& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_TELEPORT_ACK_Server MSG_MOVE_TELEPORT_ACK_Server_read(Reader& reader) {
    MSG_MOVE_TELEPORT_ACK_Server obj{};

    obj.guid = reader.read_packed_guid();

    obj.movement_counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_TELEPORT_ACK_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_TELEPORT_ACK_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_TELEPORT_ACK_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x000000c7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.movement_counter);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_FALL_LAND_size(const MSG_MOVE_FALL_LAND& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_FALL_LAND MSG_MOVE_FALL_LAND_read(Reader& reader) {
    MSG_MOVE_FALL_LAND obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_FALL_LAND::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_FALL_LAND_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_FALL_LAND_size(obj) + 4)); /* size */

    writer.write_u32(0x000000c9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_FALL_LAND::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_FALL_LAND_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_FALL_LAND_size(obj) + 2)); /* size */

    writer.write_u16(0x000000c9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_SWIM_size(const MSG_MOVE_START_SWIM& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_SWIM MSG_MOVE_START_SWIM_read(Reader& reader) {
    MSG_MOVE_START_SWIM obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_SWIM::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_SWIM_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_SWIM_size(obj) + 4)); /* size */

    writer.write_u32(0x000000ca); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_SWIM::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_SWIM_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_SWIM_size(obj) + 2)); /* size */

    writer.write_u16(0x000000ca); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_STOP_SWIM_size(const MSG_MOVE_STOP_SWIM& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_STOP_SWIM MSG_MOVE_STOP_SWIM_read(Reader& reader) {
    MSG_MOVE_STOP_SWIM obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP_SWIM::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_SWIM_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_STOP_SWIM_size(obj) + 4)); /* size */

    writer.write_u32(0x000000cb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP_SWIM::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_SWIM_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_STOP_SWIM_size(obj) + 2)); /* size */

    writer.write_u16(0x000000cb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_SET_FACING_size(const MSG_MOVE_SET_FACING& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_SET_FACING MSG_MOVE_SET_FACING_read(Reader& reader) {
    MSG_MOVE_SET_FACING obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_FACING::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_FACING_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_SET_FACING_size(obj) + 4)); /* size */

    writer.write_u32(0x000000da); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_FACING::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_FACING_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_SET_FACING_size(obj) + 2)); /* size */

    writer.write_u16(0x000000da); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_SET_PITCH_size(const MSG_MOVE_SET_PITCH& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_SET_PITCH MSG_MOVE_SET_PITCH_read(Reader& reader) {
    MSG_MOVE_SET_PITCH obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_PITCH::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_PITCH_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_SET_PITCH_size(obj) + 4)); /* size */

    writer.write_u32(0x000000db); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_PITCH::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_PITCH_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_SET_PITCH_size(obj) + 2)); /* size */

    writer.write_u16(0x000000db); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_WORLDPORT_ACK::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000000dc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_WORLDPORT_ACK::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000000dc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_MONSTER_MOVE_size(const SMSG_MONSTER_MOVE& obj) {
    size_t _size = 26 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + ::wow_world_messages::util::wwm_monster_move_spline_size(obj.splines);

    if (obj.move_type == MonsterMoveType::FACING_TARGET) {
        _size += 8;
    }
    else if (obj.move_type == MonsterMoveType::FACING_ANGLE) {
        _size += 4;
    }
    else if (obj.move_type == MonsterMoveType::FACING_SPOT) {
        _size += 12;
    }

    if ((obj.spline_flags & SPLINE_FLAG_ENTER_CYCLE) != 0) {
        _size += 8;
    }

    if ((obj.spline_flags & SPLINE_FLAG_PARABOLIC) != 0) {
        _size += 8;
    }

    return _size;
}

SMSG_MONSTER_MOVE SMSG_MONSTER_MOVE_read(Reader& reader) {
    SMSG_MONSTER_MOVE obj{};

    obj.guid = reader.read_packed_guid();

    obj.unknown = reader.read_u8();

    obj.spline_point = ::wow_world_messages::all::Vector3d_read(reader);

    obj.spline_id = reader.read_u32();

    obj.move_type = static_cast<MonsterMoveType>(reader.read_u8());

    if (obj.move_type == MonsterMoveType::FACING_TARGET) {
        obj.target = reader.read_u64();

    }
    else if (obj.move_type == MonsterMoveType::FACING_ANGLE) {
        obj.angle = reader.read_float();

    }
    else if (obj.move_type == MonsterMoveType::FACING_SPOT) {
        obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    }
    obj.spline_flags = static_cast<SplineFlag>(reader.read_u32());

    if ((obj.spline_flags & SPLINE_FLAG_ENTER_CYCLE) != 0) {
        obj.animation_id = reader.read_u32();

        obj.animation_start_time = reader.read_u32();

    }
    obj.duration = reader.read_u32();

    if ((obj.spline_flags & SPLINE_FLAG_PARABOLIC) != 0) {
        obj.vertical_acceleration = reader.read_float();

        obj.effect_start_time = reader.read_u32();

    }
    obj.splines = ::wow_world_messages::util::wwm_read_monster_move_spline(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MONSTER_MOVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MONSTER_MOVE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MONSTER_MOVE_size(obj) + 2)); /* size */

    writer.write_u16(0x000000dd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u8(obj.unknown);

    Vector3d_write(writer, obj.spline_point);

    writer.write_u32(obj.spline_id);

    writer.write_u8(static_cast<uint8_t>(obj.move_type));

    if (obj.move_type == MonsterMoveType::FACING_TARGET) {
        writer.write_u64(obj.target);

    }
    else if (obj.move_type == MonsterMoveType::FACING_ANGLE) {
        writer.write_float(obj.angle);

    }
    else if (obj.move_type == MonsterMoveType::FACING_SPOT) {
        Vector3d_write(writer, obj.position);

    }
    writer.write_u32(static_cast<uint32_t>(obj.spline_flags));

    if ((obj.spline_flags & SPLINE_FLAG_ENTER_CYCLE) != 0) {
        writer.write_u32(obj.animation_id);

        writer.write_u32(obj.animation_start_time);

    }
    writer.write_u32(obj.duration);

    if ((obj.spline_flags & SPLINE_FLAG_PARABOLIC) != 0) {
        writer.write_float(obj.vertical_acceleration);

        writer.write_u32(obj.effect_start_time);

    }
    ::wow_world_messages::util::wwm_write_monster_move_spline(writer, obj.splines);

    return writer.m_buf;
}

static size_t SMSG_MOVE_WATER_WALK_size(const SMSG_MOVE_WATER_WALK& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_MOVE_WATER_WALK SMSG_MOVE_WATER_WALK_read(Reader& reader) {
    SMSG_MOVE_WATER_WALK obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_WATER_WALK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_WATER_WALK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_WATER_WALK_size(obj) + 2)); /* size */

    writer.write_u16(0x000000de); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    return writer.m_buf;
}

static size_t SMSG_MOVE_LAND_WALK_size(const SMSG_MOVE_LAND_WALK& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_MOVE_LAND_WALK SMSG_MOVE_LAND_WALK_read(Reader& reader) {
    SMSG_MOVE_LAND_WALK obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_LAND_WALK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_LAND_WALK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_LAND_WALK_size(obj) + 2)); /* size */

    writer.write_u16(0x000000df); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    return writer.m_buf;
}

CMSG_MOVE_SET_RAW_POSITION CMSG_MOVE_SET_RAW_POSITION_read(Reader& reader) {
    CMSG_MOVE_SET_RAW_POSITION obj{};

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    obj.orientation = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_SET_RAW_POSITION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 4)); /* size */

    writer.write_u32(0x000000e1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    Vector3d_write(writer, obj.position);

    writer.write_float(obj.orientation);

    return writer.m_buf;
}

static size_t SMSG_FORCE_RUN_SPEED_CHANGE_size(const SMSG_FORCE_RUN_SPEED_CHANGE& obj) {
    return 9 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_RUN_SPEED_CHANGE SMSG_FORCE_RUN_SPEED_CHANGE_read(Reader& reader) {
    SMSG_FORCE_RUN_SPEED_CHANGE obj{};

    obj.guid = reader.read_packed_guid();

    obj.move_event = reader.read_u32();

    obj.unknown = reader.read_u8();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_RUN_SPEED_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_RUN_SPEED_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_RUN_SPEED_CHANGE_size(obj) + 2)); /* size */

    writer.write_u16(0x000000e2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.move_event);

    writer.write_u8(obj.unknown);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t CMSG_FORCE_RUN_SPEED_CHANGE_ACK_size(const CMSG_FORCE_RUN_SPEED_CHANGE_ACK& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_FORCE_RUN_SPEED_CHANGE_ACK CMSG_FORCE_RUN_SPEED_CHANGE_ACK_read(Reader& reader) {
    CMSG_FORCE_RUN_SPEED_CHANGE_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FORCE_RUN_SPEED_CHANGE_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_FORCE_RUN_SPEED_CHANGE_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_FORCE_RUN_SPEED_CHANGE_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000000e3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

static size_t SMSG_FORCE_RUN_BACK_SPEED_CHANGE_size(const SMSG_FORCE_RUN_BACK_SPEED_CHANGE& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_RUN_BACK_SPEED_CHANGE SMSG_FORCE_RUN_BACK_SPEED_CHANGE_read(Reader& reader) {
    SMSG_FORCE_RUN_BACK_SPEED_CHANGE obj{};

    obj.guid = reader.read_packed_guid();

    obj.move_event = reader.read_u32();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_RUN_BACK_SPEED_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_RUN_BACK_SPEED_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_RUN_BACK_SPEED_CHANGE_size(obj) + 2)); /* size */

    writer.write_u16(0x000000e4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.move_event);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK_size(const CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK_read(Reader& reader) {
    CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.movement_counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000000e5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.movement_counter);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

static size_t SMSG_FORCE_SWIM_SPEED_CHANGE_size(const SMSG_FORCE_SWIM_SPEED_CHANGE& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_SWIM_SPEED_CHANGE SMSG_FORCE_SWIM_SPEED_CHANGE_read(Reader& reader) {
    SMSG_FORCE_SWIM_SPEED_CHANGE obj{};

    obj.guid = reader.read_packed_guid();

    obj.move_event = reader.read_u32();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_SWIM_SPEED_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_SWIM_SPEED_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_SWIM_SPEED_CHANGE_size(obj) + 2)); /* size */

    writer.write_u16(0x000000e6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.move_event);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t CMSG_FORCE_SWIM_SPEED_CHANGE_ACK_size(const CMSG_FORCE_SWIM_SPEED_CHANGE_ACK& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_FORCE_SWIM_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_SPEED_CHANGE_ACK_read(Reader& reader) {
    CMSG_FORCE_SWIM_SPEED_CHANGE_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FORCE_SWIM_SPEED_CHANGE_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_FORCE_SWIM_SPEED_CHANGE_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_FORCE_SWIM_SPEED_CHANGE_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000000e7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

static size_t SMSG_FORCE_MOVE_ROOT_size(const SMSG_FORCE_MOVE_ROOT& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_MOVE_ROOT SMSG_FORCE_MOVE_ROOT_read(Reader& reader) {
    SMSG_FORCE_MOVE_ROOT obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_MOVE_ROOT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_MOVE_ROOT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_MOVE_ROOT_size(obj) + 2)); /* size */

    writer.write_u16(0x000000e8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    return writer.m_buf;
}

static size_t CMSG_FORCE_MOVE_ROOT_ACK_size(const CMSG_FORCE_MOVE_ROOT_ACK& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_FORCE_MOVE_ROOT_ACK CMSG_FORCE_MOVE_ROOT_ACK_read(Reader& reader) {
    CMSG_FORCE_MOVE_ROOT_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.movement_counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FORCE_MOVE_ROOT_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_FORCE_MOVE_ROOT_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_FORCE_MOVE_ROOT_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000000e9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.movement_counter);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t SMSG_FORCE_MOVE_UNROOT_size(const SMSG_FORCE_MOVE_UNROOT& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_MOVE_UNROOT SMSG_FORCE_MOVE_UNROOT_read(Reader& reader) {
    SMSG_FORCE_MOVE_UNROOT obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_MOVE_UNROOT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_MOVE_UNROOT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_MOVE_UNROOT_size(obj) + 2)); /* size */

    writer.write_u16(0x000000ea); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    return writer.m_buf;
}

static size_t CMSG_FORCE_MOVE_UNROOT_ACK_size(const CMSG_FORCE_MOVE_UNROOT_ACK& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_FORCE_MOVE_UNROOT_ACK CMSG_FORCE_MOVE_UNROOT_ACK_read(Reader& reader) {
    CMSG_FORCE_MOVE_UNROOT_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.movement_counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FORCE_MOVE_UNROOT_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_FORCE_MOVE_UNROOT_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_FORCE_MOVE_UNROOT_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000000eb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.movement_counter);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_ROOT_Server_size(const MSG_MOVE_ROOT_Server& obj) {
    return 0 + MovementInfo_size(obj.info);
}

MSG_MOVE_ROOT_Server MSG_MOVE_ROOT_Server_read(Reader& reader) {
    MSG_MOVE_ROOT_Server obj{};

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_ROOT_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_ROOT_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_ROOT_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x000000ec); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_UNROOT_Server_size(const MSG_MOVE_UNROOT_Server& obj) {
    return 0 + MovementInfo_size(obj.info);
}

MSG_MOVE_UNROOT_Server MSG_MOVE_UNROOT_Server_read(Reader& reader) {
    MSG_MOVE_UNROOT_Server obj{};

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_UNROOT_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_UNROOT_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_UNROOT_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x000000ed); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_HEARTBEAT_size(const MSG_MOVE_HEARTBEAT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_HEARTBEAT MSG_MOVE_HEARTBEAT_read(Reader& reader) {
    MSG_MOVE_HEARTBEAT obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_HEARTBEAT::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_HEARTBEAT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_HEARTBEAT_size(obj) + 4)); /* size */

    writer.write_u32(0x000000ee); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_HEARTBEAT::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_HEARTBEAT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_HEARTBEAT_size(obj) + 2)); /* size */

    writer.write_u16(0x000000ee); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t SMSG_MOVE_KNOCK_BACK_size(const SMSG_MOVE_KNOCK_BACK& obj) {
    return 20 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_MOVE_KNOCK_BACK SMSG_MOVE_KNOCK_BACK_read(Reader& reader) {
    SMSG_MOVE_KNOCK_BACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.movement_counter = reader.read_u32();

    obj.v_cos = reader.read_float();

    obj.v_sin = reader.read_float();

    obj.horizontal_speed = reader.read_float();

    obj.vertical_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_KNOCK_BACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_KNOCK_BACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_KNOCK_BACK_size(obj) + 2)); /* size */

    writer.write_u16(0x000000ef); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.movement_counter);

    writer.write_float(obj.v_cos);

    writer.write_float(obj.v_sin);

    writer.write_float(obj.horizontal_speed);

    writer.write_float(obj.vertical_speed);

    return writer.m_buf;
}

static size_t CMSG_MOVE_KNOCK_BACK_ACK_size(const CMSG_MOVE_KNOCK_BACK_ACK& obj) {
    return 12 + MovementInfo_size(obj.info);
}

CMSG_MOVE_KNOCK_BACK_ACK CMSG_MOVE_KNOCK_BACK_ACK_read(Reader& reader) {
    CMSG_MOVE_KNOCK_BACK_ACK obj{};

    obj.guid = reader.read_u64();

    obj.counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_KNOCK_BACK_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_KNOCK_BACK_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_KNOCK_BACK_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000000f0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.counter);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_KNOCK_BACK_Server_size(const MSG_MOVE_KNOCK_BACK_Server& obj) {
    return 16 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

MSG_MOVE_KNOCK_BACK_Server MSG_MOVE_KNOCK_BACK_Server_read(Reader& reader) {
    MSG_MOVE_KNOCK_BACK_Server obj{};

    obj.player = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.sin_angle = reader.read_float();

    obj.cos_angle = reader.read_float();

    obj.x_y_speed = reader.read_float();

    obj.velocity = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_KNOCK_BACK_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_KNOCK_BACK_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_KNOCK_BACK_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x000000f1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.sin_angle);

    writer.write_float(obj.cos_angle);

    writer.write_float(obj.x_y_speed);

    writer.write_float(obj.velocity);

    return writer.m_buf;
}

static size_t SMSG_MOVE_FEATHER_FALL_size(const SMSG_MOVE_FEATHER_FALL& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_MOVE_FEATHER_FALL SMSG_MOVE_FEATHER_FALL_read(Reader& reader) {
    SMSG_MOVE_FEATHER_FALL obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_FEATHER_FALL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_FEATHER_FALL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_FEATHER_FALL_size(obj) + 2)); /* size */

    writer.write_u16(0x000000f2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    return writer.m_buf;
}

static size_t SMSG_MOVE_NORMAL_FALL_size(const SMSG_MOVE_NORMAL_FALL& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_MOVE_NORMAL_FALL SMSG_MOVE_NORMAL_FALL_read(Reader& reader) {
    SMSG_MOVE_NORMAL_FALL obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_NORMAL_FALL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_NORMAL_FALL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_NORMAL_FALL_size(obj) + 2)); /* size */

    writer.write_u16(0x000000f3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    return writer.m_buf;
}

static size_t SMSG_MOVE_SET_HOVER_size(const SMSG_MOVE_SET_HOVER& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_MOVE_SET_HOVER SMSG_MOVE_SET_HOVER_read(Reader& reader) {
    SMSG_MOVE_SET_HOVER obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_SET_HOVER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_SET_HOVER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_SET_HOVER_size(obj) + 2)); /* size */

    writer.write_u16(0x000000f4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    return writer.m_buf;
}

static size_t SMSG_MOVE_UNSET_HOVER_size(const SMSG_MOVE_UNSET_HOVER& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_MOVE_UNSET_HOVER SMSG_MOVE_UNSET_HOVER_read(Reader& reader) {
    SMSG_MOVE_UNSET_HOVER obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_UNSET_HOVER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_UNSET_HOVER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_UNSET_HOVER_size(obj) + 2)); /* size */

    writer.write_u16(0x000000f5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    return writer.m_buf;
}

static size_t CMSG_MOVE_HOVER_ACK_size(const CMSG_MOVE_HOVER_ACK& obj) {
    return 16 + MovementInfo_size(obj.info);
}

CMSG_MOVE_HOVER_ACK CMSG_MOVE_HOVER_ACK_read(Reader& reader) {
    CMSG_MOVE_HOVER_ACK obj{};

    obj.guid = reader.read_u64();

    obj.counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.is_applied = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_HOVER_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_HOVER_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_HOVER_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000000f6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.counter);

    MovementInfo_write(writer, obj.info);

    writer.write_u32(obj.is_applied);

    return writer.m_buf;
}

static size_t MSG_MOVE_HOVER_size(const MSG_MOVE_HOVER& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

MSG_MOVE_HOVER MSG_MOVE_HOVER_read(Reader& reader) {
    MSG_MOVE_HOVER obj{};

    obj.player = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_HOVER::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_HOVER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_HOVER_size(obj) + 4)); /* size */

    writer.write_u32(0x000000f7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_HOVER::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_HOVER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_HOVER_size(obj) + 2)); /* size */

    writer.write_u16(0x000000f7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

SMSG_TRIGGER_CINEMATIC SMSG_TRIGGER_CINEMATIC_read(Reader& reader) {
    SMSG_TRIGGER_CINEMATIC obj{};

    obj.cinematic_sequence_id = static_cast<CinematicSequenceId>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TRIGGER_CINEMATIC::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000000fa); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.cinematic_sequence_id));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_NEXT_CINEMATIC_CAMERA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000000fb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_COMPLETE_CINEMATIC::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000000fc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_TUTORIAL_FLAGS SMSG_TUTORIAL_FLAGS_read(Reader& reader) {
    SMSG_TUTORIAL_FLAGS obj{};

    for (auto i = 0; i < 8; ++i) {
        obj.tutorial_data[i] = reader.read_u32();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TUTORIAL_FLAGS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0020);

    writer.write_u16_be(static_cast<uint16_t>(0x0020 + 2)); /* size */

    writer.write_u16(0x000000fd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    for (const auto& v : obj.tutorial_data) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

CMSG_TUTORIAL_FLAG CMSG_TUTORIAL_FLAG_read(Reader& reader) {
    CMSG_TUTORIAL_FLAG obj{};

    obj.tutorial_flag = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TUTORIAL_FLAG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x000000fe); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.tutorial_flag);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TUTORIAL_CLEAR::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000000ff); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TUTORIAL_RESET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000100); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_STANDSTATECHANGE CMSG_STANDSTATECHANGE_read(Reader& reader) {
    CMSG_STANDSTATECHANGE obj{};

    obj.animation_state = static_cast<UnitStandState>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_STANDSTATECHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000101); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.animation_state));

    return writer.m_buf;
}

CMSG_EMOTE CMSG_EMOTE_read(Reader& reader) {
    CMSG_EMOTE obj{};

    obj.emote = static_cast<Emote>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_EMOTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000102); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.emote));

    return writer.m_buf;
}

SMSG_EMOTE SMSG_EMOTE_read(Reader& reader) {
    SMSG_EMOTE obj{};

    obj.emote = static_cast<Emote>(reader.read_u32());

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_EMOTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x00000103); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.emote));

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_TEXT_EMOTE CMSG_TEXT_EMOTE_read(Reader& reader) {
    CMSG_TEXT_EMOTE obj{};

    obj.text_emote = static_cast<TextEmote>(reader.read_u32());

    obj.emote = reader.read_u32();

    obj.target = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TEXT_EMOTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 4)); /* size */

    writer.write_u32(0x00000104); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.text_emote));

    writer.write_u32(obj.emote);

    writer.write_u64(obj.target);

    return writer.m_buf;
}

static size_t SMSG_TEXT_EMOTE_size(const SMSG_TEXT_EMOTE& obj) {
    return 21 + obj.name.size();
}

SMSG_TEXT_EMOTE SMSG_TEXT_EMOTE_read(Reader& reader) {
    SMSG_TEXT_EMOTE obj{};

    obj.guid = reader.read_u64();

    obj.text_emote = static_cast<TextEmote>(reader.read_u32());

    obj.emote = reader.read_u32();

    obj.name = reader.read_sized_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TEXT_EMOTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_TEXT_EMOTE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_TEXT_EMOTE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000105); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.text_emote));

    writer.write_u32(obj.emote);

    writer.write_sized_cstring(obj.name);

    return writer.m_buf;
}

CMSG_AUTOSTORE_LOOT_ITEM CMSG_AUTOSTORE_LOOT_ITEM_read(Reader& reader) {
    CMSG_AUTOSTORE_LOOT_ITEM obj{};

    obj.item_slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUTOSTORE_LOOT_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x00000108); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.item_slot);

    return writer.m_buf;
}

CMSG_AUTOEQUIP_ITEM CMSG_AUTOEQUIP_ITEM_read(Reader& reader) {
    CMSG_AUTOEQUIP_ITEM obj{};

    obj.source_bag = reader.read_u8();

    obj.source_slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUTOEQUIP_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 4)); /* size */

    writer.write_u32(0x0000010a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.source_bag);

    writer.write_u8(obj.source_slot);

    return writer.m_buf;
}

CMSG_AUTOSTORE_BAG_ITEM CMSG_AUTOSTORE_BAG_ITEM_read(Reader& reader) {
    CMSG_AUTOSTORE_BAG_ITEM obj{};

    obj.source_bag = reader.read_u8();

    obj.source_slot = reader.read_u8();

    obj.destination_bag = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUTOSTORE_BAG_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0003);

    writer.write_u16_be(static_cast<uint16_t>(0x0003 + 4)); /* size */

    writer.write_u32(0x0000010b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.source_bag);

    writer.write_u8(obj.source_slot);

    writer.write_u8(obj.destination_bag);

    return writer.m_buf;
}

CMSG_SWAP_ITEM CMSG_SWAP_ITEM_read(Reader& reader) {
    CMSG_SWAP_ITEM obj{};

    obj.destination_bag = reader.read_u8();

    obj.destionation_slot = reader.read_u8();

    obj.source_bag = reader.read_u8();

    obj.source_slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SWAP_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000010c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.destination_bag);

    writer.write_u8(obj.destionation_slot);

    writer.write_u8(obj.source_bag);

    writer.write_u8(obj.source_slot);

    return writer.m_buf;
}

CMSG_SWAP_INV_ITEM CMSG_SWAP_INV_ITEM_read(Reader& reader) {
    CMSG_SWAP_INV_ITEM obj{};

    obj.source_slot = static_cast<ItemSlot>(reader.read_u8());

    obj.destination_slot = static_cast<ItemSlot>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SWAP_INV_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 4)); /* size */

    writer.write_u32(0x0000010d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.source_slot));

    writer.write_u8(static_cast<uint8_t>(obj.destination_slot));

    return writer.m_buf;
}

CMSG_SPLIT_ITEM CMSG_SPLIT_ITEM_read(Reader& reader) {
    CMSG_SPLIT_ITEM obj{};

    obj.source_bag = reader.read_u8();

    obj.source_slot = reader.read_u8();

    obj.destination_bag = reader.read_u8();

    obj.destination_slot = reader.read_u8();

    obj.amount = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SPLIT_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000010e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.source_bag);

    writer.write_u8(obj.source_slot);

    writer.write_u8(obj.destination_bag);

    writer.write_u8(obj.destination_slot);

    writer.write_u32(obj.amount);

    return writer.m_buf;
}

CMSG_AUTOEQUIP_ITEM_SLOT CMSG_AUTOEQUIP_ITEM_SLOT_read(Reader& reader) {
    CMSG_AUTOEQUIP_ITEM_SLOT obj{};

    obj.guid = reader.read_u64();

    obj.destination_slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUTOEQUIP_ITEM_SLOT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x0000010f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(obj.destination_slot);

    return writer.m_buf;
}

CMSG_DESTROYITEM CMSG_DESTROYITEM_read(Reader& reader) {
    CMSG_DESTROYITEM obj{};

    obj.bag = reader.read_u8();

    obj.slot = reader.read_u8();

    obj.amount = reader.read_u8();

    obj.unknown1 = reader.read_u8();

    obj.unknown2 = reader.read_u8();

    obj.unknown3 = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_DESTROYITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0006);

    writer.write_u16_be(static_cast<uint16_t>(0x0006 + 4)); /* size */

    writer.write_u32(0x00000111); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.bag);

    writer.write_u8(obj.slot);

    writer.write_u8(obj.amount);

    writer.write_u8(obj.unknown1);

    writer.write_u8(obj.unknown2);

    writer.write_u8(obj.unknown3);

    return writer.m_buf;
}

static size_t SMSG_INVENTORY_CHANGE_FAILURE_size(const SMSG_INVENTORY_CHANGE_FAILURE& obj) {
    size_t _size = 1;

    if (obj.result == InventoryResult::CANT_EQUIP_LEVEL_I|| obj.result == InventoryResult::CANT_EQUIP_SKILL|| obj.result == InventoryResult::ITEM_DOESNT_GO_TO_SLOT|| obj.result == InventoryResult::BAG_FULL|| obj.result == InventoryResult::NONEMPTY_BAG_OVER_OTHER_BAG|| obj.result == InventoryResult::CANT_TRADE_EQUIP_BAGS|| obj.result == InventoryResult::ONLY_AMMO_CAN_GO_HERE|| obj.result == InventoryResult::NO_REQUIRED_PROFICIENCY|| obj.result == InventoryResult::NO_EQUIPMENT_SLOT_AVAILABLE|| obj.result == InventoryResult::YOU_CAN_NEVER_USE_THAT_ITEM|| obj.result == InventoryResult::YOU_CAN_NEVER_USE_THAT_ITEM2|| obj.result == InventoryResult::NO_EQUIPMENT_SLOT_AVAILABLE2|| obj.result == InventoryResult::CANT_EQUIP_WITH_TWOHANDED|| obj.result == InventoryResult::CANT_DUAL_WIELD|| obj.result == InventoryResult::ITEM_DOESNT_GO_INTO_BAG|| obj.result == InventoryResult::ITEM_DOESNT_GO_INTO_BAG2|| obj.result == InventoryResult::CANT_CARRY_MORE_OF_THIS|| obj.result == InventoryResult::NO_EQUIPMENT_SLOT_AVAILABLE3|| obj.result == InventoryResult::ITEM_CANT_STACK|| obj.result == InventoryResult::ITEM_CANT_BE_EQUIPPED|| obj.result == InventoryResult::ITEMS_CANT_BE_SWAPPED|| obj.result == InventoryResult::SLOT_IS_EMPTY|| obj.result == InventoryResult::ITEM_NOT_FOUND|| obj.result == InventoryResult::CANT_DROP_SOULBOUND|| obj.result == InventoryResult::OUT_OF_RANGE|| obj.result == InventoryResult::TRIED_TO_SPLIT_MORE_THAN_COUNT|| obj.result == InventoryResult::COULDNT_SPLIT_ITEMS|| obj.result == InventoryResult::MISSING_REAGENT|| obj.result == InventoryResult::NOT_ENOUGH_MONEY|| obj.result == InventoryResult::NOT_A_BAG|| obj.result == InventoryResult::CAN_ONLY_DO_WITH_EMPTY_BAGS|| obj.result == InventoryResult::DONT_OWN_THAT_ITEM|| obj.result == InventoryResult::CAN_EQUIP_ONLY1_QUIVER|| obj.result == InventoryResult::MUST_PURCHASE_THAT_BAG_SLOT|| obj.result == InventoryResult::TOO_FAR_AWAY_FROM_BANK|| obj.result == InventoryResult::ITEM_LOCKED|| obj.result == InventoryResult::YOU_ARE_STUNNED|| obj.result == InventoryResult::YOU_ARE_DEAD|| obj.result == InventoryResult::CANT_DO_RIGHT_NOW|| obj.result == InventoryResult::INT_BAG_ERROR|| obj.result == InventoryResult::CAN_EQUIP_ONLY1_BOLT|| obj.result == InventoryResult::CAN_EQUIP_ONLY1_AMMOPOUCH|| obj.result == InventoryResult::STACKABLE_CANT_BE_WRAPPED|| obj.result == InventoryResult::EQUIPPED_CANT_BE_WRAPPED|| obj.result == InventoryResult::WRAPPED_CANT_BE_WRAPPED|| obj.result == InventoryResult::BOUND_CANT_BE_WRAPPED|| obj.result == InventoryResult::UNIQUE_CANT_BE_WRAPPED|| obj.result == InventoryResult::BAGS_CANT_BE_WRAPPED|| obj.result == InventoryResult::ALREADY_LOOTED|| obj.result == InventoryResult::INVENTORY_FULL|| obj.result == InventoryResult::BANK_FULL|| obj.result == InventoryResult::ITEM_IS_CURRENTLY_SOLD_OUT|| obj.result == InventoryResult::BAG_FULL3|| obj.result == InventoryResult::ITEM_NOT_FOUND2|| obj.result == InventoryResult::ITEM_CANT_STACK2|| obj.result == InventoryResult::BAG_FULL4|| obj.result == InventoryResult::ITEM_SOLD_OUT|| obj.result == InventoryResult::OBJECT_IS_BUSY|| obj.result == InventoryResult::NONE|| obj.result == InventoryResult::NOT_IN_COMBAT|| obj.result == InventoryResult::NOT_WHILE_DISARMED|| obj.result == InventoryResult::BAG_FULL6|| obj.result == InventoryResult::CANT_EQUIP_RANK|| obj.result == InventoryResult::CANT_EQUIP_REPUTATION|| obj.result == InventoryResult::TOO_MANY_SPECIAL_BAGS|| obj.result == InventoryResult::LOOT_CANT_LOOT_THAT_NOW|| obj.result == InventoryResult::ITEM_UNIQUE_EQUIPABLE|| obj.result == InventoryResult::VENDOR_MISSING_TURNINS|| obj.result == InventoryResult::NOT_ENOUGH_HONOR_POINTS|| obj.result == InventoryResult::NOT_ENOUGH_ARENA_POINTS|| obj.result == InventoryResult::ITEM_MAX_COUNT_SOCKETED|| obj.result == InventoryResult::MAIL_BOUND_ITEM|| obj.result == InventoryResult::NO_SPLIT_WHILE_PROSPECTING|| obj.result == InventoryResult::ITEM_MAX_COUNT_EQUIPPED_SOCKETED|| obj.result == InventoryResult::ITEM_UNIQUE_EQUIPPABLE_SOCKETED|| obj.result == InventoryResult::TOO_MUCH_GOLD|| obj.result == InventoryResult::NOT_DURING_ARENA_MATCH|| obj.result == InventoryResult::CANNOT_TRADE_THAT|| obj.result == InventoryResult::PERSONAL_ARENA_RATING_TOO_LOW|| obj.result == InventoryResult::EVENT_AUTOEQUIP_BIND_CONFIRM|| obj.result == InventoryResult::ARTEFACTS_ONLY_FOR_OWN_CHARACTERS|| obj.result == InventoryResult::ITEM_MAX_LIMIT_CATEGORY_COUNT_EXCEEDED|| obj.result == InventoryResult::ITEM_MAX_LIMIT_CATEGORY_SOCKETED_EXCEEDED|| obj.result == InventoryResult::SCALING_STAT_ITEM_LEVEL_EXCEEDED|| obj.result == InventoryResult::PURCHASE_LEVEL_TOO_LOW|| obj.result == InventoryResult::CANT_EQUIP_NEED_TALENT|| obj.result == InventoryResult::ITEM_MAX_LIMIT_CATEGORY_EQUIPPED_EXCEEDED) {
        _size += 17;
    }

    if (obj.result == InventoryResult::CANT_EQUIP_LEVEL_I) {
        _size += 4;
    }

    return _size;
}

SMSG_INVENTORY_CHANGE_FAILURE SMSG_INVENTORY_CHANGE_FAILURE_read(Reader& reader) {
    SMSG_INVENTORY_CHANGE_FAILURE obj{};

    obj.result = static_cast<InventoryResult>(reader.read_u8());

    if (obj.result == InventoryResult::CANT_EQUIP_LEVEL_I|| obj.result == InventoryResult::CANT_EQUIP_SKILL|| obj.result == InventoryResult::ITEM_DOESNT_GO_TO_SLOT|| obj.result == InventoryResult::BAG_FULL|| obj.result == InventoryResult::NONEMPTY_BAG_OVER_OTHER_BAG|| obj.result == InventoryResult::CANT_TRADE_EQUIP_BAGS|| obj.result == InventoryResult::ONLY_AMMO_CAN_GO_HERE|| obj.result == InventoryResult::NO_REQUIRED_PROFICIENCY|| obj.result == InventoryResult::NO_EQUIPMENT_SLOT_AVAILABLE|| obj.result == InventoryResult::YOU_CAN_NEVER_USE_THAT_ITEM|| obj.result == InventoryResult::YOU_CAN_NEVER_USE_THAT_ITEM2|| obj.result == InventoryResult::NO_EQUIPMENT_SLOT_AVAILABLE2|| obj.result == InventoryResult::CANT_EQUIP_WITH_TWOHANDED|| obj.result == InventoryResult::CANT_DUAL_WIELD|| obj.result == InventoryResult::ITEM_DOESNT_GO_INTO_BAG|| obj.result == InventoryResult::ITEM_DOESNT_GO_INTO_BAG2|| obj.result == InventoryResult::CANT_CARRY_MORE_OF_THIS|| obj.result == InventoryResult::NO_EQUIPMENT_SLOT_AVAILABLE3|| obj.result == InventoryResult::ITEM_CANT_STACK|| obj.result == InventoryResult::ITEM_CANT_BE_EQUIPPED|| obj.result == InventoryResult::ITEMS_CANT_BE_SWAPPED|| obj.result == InventoryResult::SLOT_IS_EMPTY|| obj.result == InventoryResult::ITEM_NOT_FOUND|| obj.result == InventoryResult::CANT_DROP_SOULBOUND|| obj.result == InventoryResult::OUT_OF_RANGE|| obj.result == InventoryResult::TRIED_TO_SPLIT_MORE_THAN_COUNT|| obj.result == InventoryResult::COULDNT_SPLIT_ITEMS|| obj.result == InventoryResult::MISSING_REAGENT|| obj.result == InventoryResult::NOT_ENOUGH_MONEY|| obj.result == InventoryResult::NOT_A_BAG|| obj.result == InventoryResult::CAN_ONLY_DO_WITH_EMPTY_BAGS|| obj.result == InventoryResult::DONT_OWN_THAT_ITEM|| obj.result == InventoryResult::CAN_EQUIP_ONLY1_QUIVER|| obj.result == InventoryResult::MUST_PURCHASE_THAT_BAG_SLOT|| obj.result == InventoryResult::TOO_FAR_AWAY_FROM_BANK|| obj.result == InventoryResult::ITEM_LOCKED|| obj.result == InventoryResult::YOU_ARE_STUNNED|| obj.result == InventoryResult::YOU_ARE_DEAD|| obj.result == InventoryResult::CANT_DO_RIGHT_NOW|| obj.result == InventoryResult::INT_BAG_ERROR|| obj.result == InventoryResult::CAN_EQUIP_ONLY1_BOLT|| obj.result == InventoryResult::CAN_EQUIP_ONLY1_AMMOPOUCH|| obj.result == InventoryResult::STACKABLE_CANT_BE_WRAPPED|| obj.result == InventoryResult::EQUIPPED_CANT_BE_WRAPPED|| obj.result == InventoryResult::WRAPPED_CANT_BE_WRAPPED|| obj.result == InventoryResult::BOUND_CANT_BE_WRAPPED|| obj.result == InventoryResult::UNIQUE_CANT_BE_WRAPPED|| obj.result == InventoryResult::BAGS_CANT_BE_WRAPPED|| obj.result == InventoryResult::ALREADY_LOOTED|| obj.result == InventoryResult::INVENTORY_FULL|| obj.result == InventoryResult::BANK_FULL|| obj.result == InventoryResult::ITEM_IS_CURRENTLY_SOLD_OUT|| obj.result == InventoryResult::BAG_FULL3|| obj.result == InventoryResult::ITEM_NOT_FOUND2|| obj.result == InventoryResult::ITEM_CANT_STACK2|| obj.result == InventoryResult::BAG_FULL4|| obj.result == InventoryResult::ITEM_SOLD_OUT|| obj.result == InventoryResult::OBJECT_IS_BUSY|| obj.result == InventoryResult::NONE|| obj.result == InventoryResult::NOT_IN_COMBAT|| obj.result == InventoryResult::NOT_WHILE_DISARMED|| obj.result == InventoryResult::BAG_FULL6|| obj.result == InventoryResult::CANT_EQUIP_RANK|| obj.result == InventoryResult::CANT_EQUIP_REPUTATION|| obj.result == InventoryResult::TOO_MANY_SPECIAL_BAGS|| obj.result == InventoryResult::LOOT_CANT_LOOT_THAT_NOW|| obj.result == InventoryResult::ITEM_UNIQUE_EQUIPABLE|| obj.result == InventoryResult::VENDOR_MISSING_TURNINS|| obj.result == InventoryResult::NOT_ENOUGH_HONOR_POINTS|| obj.result == InventoryResult::NOT_ENOUGH_ARENA_POINTS|| obj.result == InventoryResult::ITEM_MAX_COUNT_SOCKETED|| obj.result == InventoryResult::MAIL_BOUND_ITEM|| obj.result == InventoryResult::NO_SPLIT_WHILE_PROSPECTING|| obj.result == InventoryResult::ITEM_MAX_COUNT_EQUIPPED_SOCKETED|| obj.result == InventoryResult::ITEM_UNIQUE_EQUIPPABLE_SOCKETED|| obj.result == InventoryResult::TOO_MUCH_GOLD|| obj.result == InventoryResult::NOT_DURING_ARENA_MATCH|| obj.result == InventoryResult::CANNOT_TRADE_THAT|| obj.result == InventoryResult::PERSONAL_ARENA_RATING_TOO_LOW|| obj.result == InventoryResult::EVENT_AUTOEQUIP_BIND_CONFIRM|| obj.result == InventoryResult::ARTEFACTS_ONLY_FOR_OWN_CHARACTERS|| obj.result == InventoryResult::ITEM_MAX_LIMIT_CATEGORY_COUNT_EXCEEDED|| obj.result == InventoryResult::ITEM_MAX_LIMIT_CATEGORY_SOCKETED_EXCEEDED|| obj.result == InventoryResult::SCALING_STAT_ITEM_LEVEL_EXCEEDED|| obj.result == InventoryResult::PURCHASE_LEVEL_TOO_LOW|| obj.result == InventoryResult::CANT_EQUIP_NEED_TALENT|| obj.result == InventoryResult::ITEM_MAX_LIMIT_CATEGORY_EQUIPPED_EXCEEDED) {
        obj.item1 = reader.read_u64();

        obj.item2 = reader.read_u64();

        obj.bag_type_subclass = reader.read_u8();

    }
    if (obj.result == InventoryResult::CANT_EQUIP_LEVEL_I) {
        obj.required_level = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INVENTORY_CHANGE_FAILURE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_INVENTORY_CHANGE_FAILURE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_INVENTORY_CHANGE_FAILURE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000112); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    if (obj.result == InventoryResult::CANT_EQUIP_LEVEL_I|| obj.result == InventoryResult::CANT_EQUIP_SKILL|| obj.result == InventoryResult::ITEM_DOESNT_GO_TO_SLOT|| obj.result == InventoryResult::BAG_FULL|| obj.result == InventoryResult::NONEMPTY_BAG_OVER_OTHER_BAG|| obj.result == InventoryResult::CANT_TRADE_EQUIP_BAGS|| obj.result == InventoryResult::ONLY_AMMO_CAN_GO_HERE|| obj.result == InventoryResult::NO_REQUIRED_PROFICIENCY|| obj.result == InventoryResult::NO_EQUIPMENT_SLOT_AVAILABLE|| obj.result == InventoryResult::YOU_CAN_NEVER_USE_THAT_ITEM|| obj.result == InventoryResult::YOU_CAN_NEVER_USE_THAT_ITEM2|| obj.result == InventoryResult::NO_EQUIPMENT_SLOT_AVAILABLE2|| obj.result == InventoryResult::CANT_EQUIP_WITH_TWOHANDED|| obj.result == InventoryResult::CANT_DUAL_WIELD|| obj.result == InventoryResult::ITEM_DOESNT_GO_INTO_BAG|| obj.result == InventoryResult::ITEM_DOESNT_GO_INTO_BAG2|| obj.result == InventoryResult::CANT_CARRY_MORE_OF_THIS|| obj.result == InventoryResult::NO_EQUIPMENT_SLOT_AVAILABLE3|| obj.result == InventoryResult::ITEM_CANT_STACK|| obj.result == InventoryResult::ITEM_CANT_BE_EQUIPPED|| obj.result == InventoryResult::ITEMS_CANT_BE_SWAPPED|| obj.result == InventoryResult::SLOT_IS_EMPTY|| obj.result == InventoryResult::ITEM_NOT_FOUND|| obj.result == InventoryResult::CANT_DROP_SOULBOUND|| obj.result == InventoryResult::OUT_OF_RANGE|| obj.result == InventoryResult::TRIED_TO_SPLIT_MORE_THAN_COUNT|| obj.result == InventoryResult::COULDNT_SPLIT_ITEMS|| obj.result == InventoryResult::MISSING_REAGENT|| obj.result == InventoryResult::NOT_ENOUGH_MONEY|| obj.result == InventoryResult::NOT_A_BAG|| obj.result == InventoryResult::CAN_ONLY_DO_WITH_EMPTY_BAGS|| obj.result == InventoryResult::DONT_OWN_THAT_ITEM|| obj.result == InventoryResult::CAN_EQUIP_ONLY1_QUIVER|| obj.result == InventoryResult::MUST_PURCHASE_THAT_BAG_SLOT|| obj.result == InventoryResult::TOO_FAR_AWAY_FROM_BANK|| obj.result == InventoryResult::ITEM_LOCKED|| obj.result == InventoryResult::YOU_ARE_STUNNED|| obj.result == InventoryResult::YOU_ARE_DEAD|| obj.result == InventoryResult::CANT_DO_RIGHT_NOW|| obj.result == InventoryResult::INT_BAG_ERROR|| obj.result == InventoryResult::CAN_EQUIP_ONLY1_BOLT|| obj.result == InventoryResult::CAN_EQUIP_ONLY1_AMMOPOUCH|| obj.result == InventoryResult::STACKABLE_CANT_BE_WRAPPED|| obj.result == InventoryResult::EQUIPPED_CANT_BE_WRAPPED|| obj.result == InventoryResult::WRAPPED_CANT_BE_WRAPPED|| obj.result == InventoryResult::BOUND_CANT_BE_WRAPPED|| obj.result == InventoryResult::UNIQUE_CANT_BE_WRAPPED|| obj.result == InventoryResult::BAGS_CANT_BE_WRAPPED|| obj.result == InventoryResult::ALREADY_LOOTED|| obj.result == InventoryResult::INVENTORY_FULL|| obj.result == InventoryResult::BANK_FULL|| obj.result == InventoryResult::ITEM_IS_CURRENTLY_SOLD_OUT|| obj.result == InventoryResult::BAG_FULL3|| obj.result == InventoryResult::ITEM_NOT_FOUND2|| obj.result == InventoryResult::ITEM_CANT_STACK2|| obj.result == InventoryResult::BAG_FULL4|| obj.result == InventoryResult::ITEM_SOLD_OUT|| obj.result == InventoryResult::OBJECT_IS_BUSY|| obj.result == InventoryResult::NONE|| obj.result == InventoryResult::NOT_IN_COMBAT|| obj.result == InventoryResult::NOT_WHILE_DISARMED|| obj.result == InventoryResult::BAG_FULL6|| obj.result == InventoryResult::CANT_EQUIP_RANK|| obj.result == InventoryResult::CANT_EQUIP_REPUTATION|| obj.result == InventoryResult::TOO_MANY_SPECIAL_BAGS|| obj.result == InventoryResult::LOOT_CANT_LOOT_THAT_NOW|| obj.result == InventoryResult::ITEM_UNIQUE_EQUIPABLE|| obj.result == InventoryResult::VENDOR_MISSING_TURNINS|| obj.result == InventoryResult::NOT_ENOUGH_HONOR_POINTS|| obj.result == InventoryResult::NOT_ENOUGH_ARENA_POINTS|| obj.result == InventoryResult::ITEM_MAX_COUNT_SOCKETED|| obj.result == InventoryResult::MAIL_BOUND_ITEM|| obj.result == InventoryResult::NO_SPLIT_WHILE_PROSPECTING|| obj.result == InventoryResult::ITEM_MAX_COUNT_EQUIPPED_SOCKETED|| obj.result == InventoryResult::ITEM_UNIQUE_EQUIPPABLE_SOCKETED|| obj.result == InventoryResult::TOO_MUCH_GOLD|| obj.result == InventoryResult::NOT_DURING_ARENA_MATCH|| obj.result == InventoryResult::CANNOT_TRADE_THAT|| obj.result == InventoryResult::PERSONAL_ARENA_RATING_TOO_LOW|| obj.result == InventoryResult::EVENT_AUTOEQUIP_BIND_CONFIRM|| obj.result == InventoryResult::ARTEFACTS_ONLY_FOR_OWN_CHARACTERS|| obj.result == InventoryResult::ITEM_MAX_LIMIT_CATEGORY_COUNT_EXCEEDED|| obj.result == InventoryResult::ITEM_MAX_LIMIT_CATEGORY_SOCKETED_EXCEEDED|| obj.result == InventoryResult::SCALING_STAT_ITEM_LEVEL_EXCEEDED|| obj.result == InventoryResult::PURCHASE_LEVEL_TOO_LOW|| obj.result == InventoryResult::CANT_EQUIP_NEED_TALENT|| obj.result == InventoryResult::ITEM_MAX_LIMIT_CATEGORY_EQUIPPED_EXCEEDED) {
        writer.write_u64(obj.item1);

        writer.write_u64(obj.item2);

        writer.write_u8(obj.bag_type_subclass);

    }
    if (obj.result == InventoryResult::CANT_EQUIP_LEVEL_I) {
        writer.write_u32(obj.required_level);

    }
    return writer.m_buf;
}

CMSG_INSPECT CMSG_INSPECT_read(Reader& reader) {
    CMSG_INSPECT obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_INSPECT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000114); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_INITIATE_TRADE CMSG_INITIATE_TRADE_read(Reader& reader) {
    CMSG_INITIATE_TRADE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_INITIATE_TRADE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000116); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BEGIN_TRADE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000117); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BUSY_TRADE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000118); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_IGNORE_TRADE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000119); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_ACCEPT_TRADE CMSG_ACCEPT_TRADE_read(Reader& reader) {
    CMSG_ACCEPT_TRADE obj{};

    obj.unknown1 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ACCEPT_TRADE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000011a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown1);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_UNACCEPT_TRADE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000011b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CANCEL_TRADE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000011c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_SET_TRADE_ITEM CMSG_SET_TRADE_ITEM_read(Reader& reader) {
    CMSG_SET_TRADE_ITEM obj{};

    obj.trade_slot = reader.read_u8();

    obj.bag = reader.read_u8();

    obj.slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_TRADE_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0003);

    writer.write_u16_be(static_cast<uint16_t>(0x0003 + 4)); /* size */

    writer.write_u32(0x0000011d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.trade_slot);

    writer.write_u8(obj.bag);

    writer.write_u8(obj.slot);

    return writer.m_buf;
}

CMSG_CLEAR_TRADE_ITEM CMSG_CLEAR_TRADE_ITEM_read(Reader& reader) {
    CMSG_CLEAR_TRADE_ITEM obj{};

    obj.trade_slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CLEAR_TRADE_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x0000011e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.trade_slot);

    return writer.m_buf;
}

CMSG_SET_TRADE_GOLD CMSG_SET_TRADE_GOLD_read(Reader& reader) {
    CMSG_SET_TRADE_GOLD obj{};

    obj.gold = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_TRADE_GOLD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000011f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.gold);

    return writer.m_buf;
}

static size_t SMSG_TRADE_STATUS_size(const SMSG_TRADE_STATUS& obj) {
    size_t _size = 4;

    if (obj.status == TradeStatus::BEGIN_TRADE) {
        _size += 8;
    }
    else if (obj.status == TradeStatus::CLOSE_WINDOW) {
        _size += 9;
    }
    else if (obj.status == TradeStatus::ONLY_CONJURED|| obj.status == TradeStatus::NOT_ON_TAPLIST) {
        _size += 1;
    }

    return _size;
}

SMSG_TRADE_STATUS SMSG_TRADE_STATUS_read(Reader& reader) {
    SMSG_TRADE_STATUS obj{};

    obj.status = static_cast<TradeStatus>(reader.read_u32());

    if (obj.status == TradeStatus::BEGIN_TRADE) {
        obj.unknown1 = reader.read_u64();

    }
    else if (obj.status == TradeStatus::CLOSE_WINDOW) {
        obj.inventory_result = static_cast<InventoryResult>(reader.read_u32());

        obj.target_error = reader.read_bool8();

        obj.item_limit_category_id = reader.read_u32();

    }
    else if (obj.status == TradeStatus::ONLY_CONJURED|| obj.status == TradeStatus::NOT_ON_TAPLIST) {
        obj.slot = reader.read_u8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TRADE_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_TRADE_STATUS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_TRADE_STATUS_size(obj) + 2)); /* size */

    writer.write_u16(0x00000120); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.status));

    if (obj.status == TradeStatus::BEGIN_TRADE) {
        writer.write_u64(obj.unknown1);

    }
    else if (obj.status == TradeStatus::CLOSE_WINDOW) {
        writer.write_u32(static_cast<uint32_t>(obj.inventory_result));

        writer.write_bool8(obj.target_error);

        writer.write_u32(obj.item_limit_category_id);

    }
    else if (obj.status == TradeStatus::ONLY_CONJURED|| obj.status == TradeStatus::NOT_ON_TAPLIST) {
        writer.write_u8(obj.slot);

    }
    return writer.m_buf;
}

SMSG_TRADE_STATUS_EXTENDED SMSG_TRADE_STATUS_EXTENDED_read(Reader& reader) {
    SMSG_TRADE_STATUS_EXTENDED obj{};

    obj.self_player = reader.read_bool8();

    obj.trade_id = reader.read_u32();

    obj.trade_slot_count1 = reader.read_u32();

    obj.trade_slot_count2 = reader.read_u32();

    obj.money_in_trade = reader.read_u32();

    obj.spell_on_lowest_slot = reader.read_u32();

    for (auto i = 0; i < 7; ++i) {
        obj.trade_slots[i] = ::wow_world_messages::wrath::TradeSlot_read(reader);
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TRADE_STATUS_EXTENDED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0214);

    writer.write_u16_be(static_cast<uint16_t>(0x0214 + 2)); /* size */

    writer.write_u16(0x00000121); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.self_player);

    writer.write_u32(obj.trade_id);

    writer.write_u32(obj.trade_slot_count1);

    writer.write_u32(obj.trade_slot_count2);

    writer.write_u32(obj.money_in_trade);

    writer.write_u32(obj.spell_on_lowest_slot);

    for (const auto& v : obj.trade_slots) {
        TradeSlot_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_INITIALIZE_FACTIONS_size(const SMSG_INITIALIZE_FACTIONS& obj) {
    return 4 + 5 * obj.factions.size();
}

SMSG_INITIALIZE_FACTIONS SMSG_INITIALIZE_FACTIONS_read(Reader& reader) {
    SMSG_INITIALIZE_FACTIONS obj{};

    auto amount_of_factions = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_factions; ++i) {
        obj.factions.push_back(::wow_world_messages::wrath::FactionInitializer_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INITIALIZE_FACTIONS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_INITIALIZE_FACTIONS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_INITIALIZE_FACTIONS_size(obj) + 2)); /* size */

    writer.write_u16(0x00000122); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.factions.size()));

    for (const auto& v : obj.factions) {
        FactionInitializer_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_SET_FACTION_VISIBLE SMSG_SET_FACTION_VISIBLE_read(Reader& reader) {
    SMSG_SET_FACTION_VISIBLE obj{};

    obj.faction = static_cast<Faction>(reader.read_u16());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SET_FACTION_VISIBLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 2)); /* size */

    writer.write_u16(0x00000123); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u16(static_cast<uint16_t>(obj.faction));

    return writer.m_buf;
}

static size_t SMSG_SET_FACTION_STANDING_size(const SMSG_SET_FACTION_STANDING& obj) {
    return 9 + 6 * obj.faction_standings.size();
}

SMSG_SET_FACTION_STANDING SMSG_SET_FACTION_STANDING_read(Reader& reader) {
    SMSG_SET_FACTION_STANDING obj{};

    obj.refer_a_friend_bonus = reader.read_float();

    obj.any_rank_increased = reader.read_bool8();

    auto amount_of_faction_standings = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_faction_standings; ++i) {
        obj.faction_standings.push_back(::wow_world_messages::wrath::FactionStanding_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SET_FACTION_STANDING::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SET_FACTION_STANDING_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SET_FACTION_STANDING_size(obj) + 2)); /* size */

    writer.write_u16(0x00000124); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_float(obj.refer_a_friend_bonus);

    writer.write_bool8(obj.any_rank_increased);

    writer.write_u32(static_cast<uint32_t>(obj.faction_standings.size()));

    for (const auto& v : obj.faction_standings) {
        FactionStanding_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_SET_FACTION_ATWAR CMSG_SET_FACTION_ATWAR_read(Reader& reader) {
    CMSG_SET_FACTION_ATWAR obj{};

    obj.faction = static_cast<Faction>(reader.read_u16());

    obj.flags = static_cast<FactionFlag>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_FACTION_ATWAR::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0003);

    writer.write_u16_be(static_cast<uint16_t>(0x0003 + 4)); /* size */

    writer.write_u32(0x00000125); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u16(static_cast<uint16_t>(obj.faction));

    writer.write_u8(static_cast<uint8_t>(obj.flags));

    return writer.m_buf;
}

SMSG_SET_PROFICIENCY SMSG_SET_PROFICIENCY_read(Reader& reader) {
    SMSG_SET_PROFICIENCY obj{};

    obj.class_type = static_cast<ItemClass>(reader.read_u8());

    obj.item_sub_class_mask = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SET_PROFICIENCY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0005);

    writer.write_u16_be(static_cast<uint16_t>(0x0005 + 2)); /* size */

    writer.write_u16(0x00000127); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.class_type));

    writer.write_u32(obj.item_sub_class_mask);

    return writer.m_buf;
}

CMSG_SET_ACTION_BUTTON CMSG_SET_ACTION_BUTTON_read(Reader& reader) {
    CMSG_SET_ACTION_BUTTON obj{};

    obj.button = reader.read_u8();

    obj.action = reader.read_u16();

    obj.misc = reader.read_u8();

    obj.action_type = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_ACTION_BUTTON::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0005);

    writer.write_u16_be(static_cast<uint16_t>(0x0005 + 4)); /* size */

    writer.write_u32(0x00000128); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.button);

    writer.write_u16(obj.action);

    writer.write_u8(obj.misc);

    writer.write_u8(obj.action_type);

    return writer.m_buf;
}

static size_t SMSG_ACTION_BUTTONS_size(const SMSG_ACTION_BUTTONS& obj) {
    size_t _size = 1;

    if (obj.behavior == ActionBarBehavior::INITIAL|| obj.behavior == ActionBarBehavior::SET) {
        _size += 576;
    }

    return _size;
}

SMSG_ACTION_BUTTONS SMSG_ACTION_BUTTONS_read(Reader& reader) {
    SMSG_ACTION_BUTTONS obj{};

    obj.behavior = static_cast<ActionBarBehavior>(reader.read_u8());

    if (obj.behavior == ActionBarBehavior::INITIAL|| obj.behavior == ActionBarBehavior::SET) {
        for (auto i = 0; i < 144; ++i) {
            obj.data[i] = ::wow_world_messages::wrath::ActionButton_read(reader);
        }

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ACTION_BUTTONS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ACTION_BUTTONS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ACTION_BUTTONS_size(obj) + 2)); /* size */

    writer.write_u16(0x00000129); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.behavior));

    if (obj.behavior == ActionBarBehavior::INITIAL|| obj.behavior == ActionBarBehavior::SET) {
        for (const auto& v : obj.data) {
            ActionButton_write(writer, v);
        }

    }
    return writer.m_buf;
}

static size_t SMSG_INITIAL_SPELLS_size(const SMSG_INITIAL_SPELLS& obj) {
    return 5 + 6 * obj.initial_spells.size() + 14 * obj.cooldowns.size();
}

SMSG_INITIAL_SPELLS SMSG_INITIAL_SPELLS_read(Reader& reader) {
    SMSG_INITIAL_SPELLS obj{};

    obj.unknown1 = reader.read_u8();

    auto spell_count = reader.read_u16();

    for (uint16_t i = 0; i < spell_count; ++i) {
        obj.initial_spells.push_back(::wow_world_messages::wrath::InitialSpell_read(reader));
    }

    auto cooldown_count = reader.read_u16();

    for (uint16_t i = 0; i < cooldown_count; ++i) {
        obj.cooldowns.push_back(::wow_world_messages::wrath::CooldownSpell_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INITIAL_SPELLS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_INITIAL_SPELLS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_INITIAL_SPELLS_size(obj) + 2)); /* size */

    writer.write_u16(0x0000012a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.unknown1);

    writer.write_u16(static_cast<uint16_t>(obj.initial_spells.size()));

    for (const auto& v : obj.initial_spells) {
        InitialSpell_write(writer, v);
    }

    writer.write_u16(static_cast<uint16_t>(obj.cooldowns.size()));

    for (const auto& v : obj.cooldowns) {
        CooldownSpell_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_LEARNED_SPELL SMSG_LEARNED_SPELL_read(Reader& reader) {
    SMSG_LEARNED_SPELL obj{};

    obj.id = reader.read_u32();

    obj.unknown = reader.read_u16();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LEARNED_SPELL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0006);

    writer.write_u16_be(static_cast<uint16_t>(0x0006 + 2)); /* size */

    writer.write_u16(0x0000012b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.id);

    writer.write_u16(obj.unknown);

    return writer.m_buf;
}

SMSG_SUPERCEDED_SPELL SMSG_SUPERCEDED_SPELL_read(Reader& reader) {
    SMSG_SUPERCEDED_SPELL obj{};

    obj.new_spell = reader.read_u32();

    obj.old = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SUPERCEDED_SPELL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x0000012c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.new_spell);

    writer.write_u32(obj.old);

    return writer.m_buf;
}

static size_t CMSG_CAST_SPELL_size(const CMSG_CAST_SPELL& obj) {
    size_t _size = 6 + SpellCastTargets_size(obj.targets);

    if (obj.cast_flags == ClientCastFlags::EXTRA) {
        _size += 9;

        if (obj.movement_data == ClientMovementData::PRESENT) {
            _size += 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
        }

    }

    return _size;
}

CMSG_CAST_SPELL CMSG_CAST_SPELL_read(Reader& reader) {
    CMSG_CAST_SPELL obj{};

    obj.cast_count = reader.read_u8();

    obj.spell = reader.read_u32();

    obj.cast_flags = static_cast<ClientCastFlags>(reader.read_u8());

    obj.targets = ::wow_world_messages::wrath::SpellCastTargets_read(reader);

    if (obj.cast_flags == ClientCastFlags::EXTRA) {
        obj.elevation = reader.read_float();

        obj.speed = reader.read_float();

        obj.movement_data = static_cast<ClientMovementData>(reader.read_u8());

        if (obj.movement_data == ClientMovementData::PRESENT) {
            obj.opcode = reader.read_u32();

            obj.guid = reader.read_packed_guid();

            obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

        }
    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CAST_SPELL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CAST_SPELL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CAST_SPELL_size(obj) + 4)); /* size */

    writer.write_u32(0x0000012e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.cast_count);

    writer.write_u32(obj.spell);

    writer.write_u8(static_cast<uint8_t>(obj.cast_flags));

    SpellCastTargets_write(writer, obj.targets);

    if (obj.cast_flags == ClientCastFlags::EXTRA) {
        writer.write_float(obj.elevation);

        writer.write_float(obj.speed);

        writer.write_u8(static_cast<uint8_t>(obj.movement_data));

        if (obj.movement_data == ClientMovementData::PRESENT) {
            writer.write_u32(obj.opcode);

            writer.write_packed_guid(obj.guid);

            MovementInfo_write(writer, obj.info);

        }
    }
    return writer.m_buf;
}

CMSG_CANCEL_CAST CMSG_CANCEL_CAST_read(Reader& reader) {
    CMSG_CANCEL_CAST obj{};

    obj.id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CANCEL_CAST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000012f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.id);

    return writer.m_buf;
}

static size_t SMSG_CAST_FAILED_size(const SMSG_CAST_FAILED& obj) {
    size_t _size = 7;

    if (obj.result == SpellCastResult::REQUIRES_SPELL_FOCUS) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::REQUIRES_AREA) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::TOTEMS) {
        _size += 8;
    }
    else if (obj.result == SpellCastResult::TOTEM_CATEGORY) {
        _size += 8;
    }
    else if (obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_OFFHAND|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_MAINHAND) {
        _size += 8;
    }
    else if (obj.result == SpellCastResult::TOO_MANY_OF_ITEM) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::CUSTOM_ERROR) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::REAGENTS) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::PREVENTED_BY_MECHANIC) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::NEED_EXOTIC_AMMO) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::NEED_MORE_ITEMS) {
        _size += 8;
    }
    else if (obj.result == SpellCastResult::MIN_SKILL) {
        _size += 8;
    }
    else if (obj.result == SpellCastResult::FISHING_TOO_LOW) {
        _size += 4;
    }

    return _size;
}

SMSG_CAST_FAILED SMSG_CAST_FAILED_read(Reader& reader) {
    SMSG_CAST_FAILED obj{};

    obj.cast_count = reader.read_u8();

    obj.id = reader.read_u32();

    obj.result = static_cast<SpellCastResult>(reader.read_u8());

    obj.multiple_casts = reader.read_bool8();

    if (obj.result == SpellCastResult::REQUIRES_SPELL_FOCUS) {
        obj.spell_focus = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::REQUIRES_AREA) {
        obj.area = static_cast<Area>(reader.read_u32());

    }
    else if (obj.result == SpellCastResult::TOTEMS) {
        for (auto i = 0; i < 2; ++i) {
            obj.totems[i] = reader.read_u32();
        }

    }
    else if (obj.result == SpellCastResult::TOTEM_CATEGORY) {
        for (auto i = 0; i < 2; ++i) {
            obj.totem_categories[i] = reader.read_u32();
        }

    }
    else if (obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_OFFHAND|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_MAINHAND) {
        obj.item_class = reader.read_u32();

        obj.item_sub_class = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::TOO_MANY_OF_ITEM) {
        obj.item_limit_category = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::CUSTOM_ERROR) {
        obj.custom_error = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::REAGENTS) {
        obj.missing_item = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::PREVENTED_BY_MECHANIC) {
        obj.mechanic = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::NEED_EXOTIC_AMMO) {
        obj.equipped_item_sub_class = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::NEED_MORE_ITEMS) {
        obj.item = reader.read_u32();

        obj.count = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::MIN_SKILL) {
        obj.skill = static_cast<Skill>(reader.read_u32());

        obj.skill_required = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::FISHING_TOO_LOW) {
        obj.fishing_skill_required = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CAST_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CAST_FAILED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CAST_FAILED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000130); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.cast_count);

    writer.write_u32(obj.id);

    writer.write_u8(static_cast<uint8_t>(obj.result));

    writer.write_bool8(obj.multiple_casts);

    if (obj.result == SpellCastResult::REQUIRES_SPELL_FOCUS) {
        writer.write_u32(obj.spell_focus);

    }
    else if (obj.result == SpellCastResult::REQUIRES_AREA) {
        writer.write_u32(static_cast<uint32_t>(obj.area));

    }
    else if (obj.result == SpellCastResult::TOTEMS) {
        for (const auto& v : obj.totems) {
            writer.write_u32(v);
        }

    }
    else if (obj.result == SpellCastResult::TOTEM_CATEGORY) {
        for (const auto& v : obj.totem_categories) {
            writer.write_u32(v);
        }

    }
    else if (obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_OFFHAND|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_MAINHAND) {
        writer.write_u32(obj.item_class);

        writer.write_u32(obj.item_sub_class);

    }
    else if (obj.result == SpellCastResult::TOO_MANY_OF_ITEM) {
        writer.write_u32(obj.item_limit_category);

    }
    else if (obj.result == SpellCastResult::CUSTOM_ERROR) {
        writer.write_u32(obj.custom_error);

    }
    else if (obj.result == SpellCastResult::REAGENTS) {
        writer.write_u32(obj.missing_item);

    }
    else if (obj.result == SpellCastResult::PREVENTED_BY_MECHANIC) {
        writer.write_u32(obj.mechanic);

    }
    else if (obj.result == SpellCastResult::NEED_EXOTIC_AMMO) {
        writer.write_u32(obj.equipped_item_sub_class);

    }
    else if (obj.result == SpellCastResult::NEED_MORE_ITEMS) {
        writer.write_u32(obj.item);

        writer.write_u32(obj.count);

    }
    else if (obj.result == SpellCastResult::MIN_SKILL) {
        writer.write_u32(static_cast<uint32_t>(obj.skill));

        writer.write_u32(obj.skill_required);

    }
    else if (obj.result == SpellCastResult::FISHING_TOO_LOW) {
        writer.write_u32(obj.fishing_skill_required);

    }
    return writer.m_buf;
}

static size_t SMSG_SPELL_START_size(const SMSG_SPELL_START& obj) {
    size_t _size = 13 + ::wow_world_messages::util::wwm_packed_guid_size(obj.cast_item) + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster) + SpellCastTargets_size(obj.targets);

    if ((obj.flags & CAST_FLAGS_POWER_LEFT_SELF) != 0) {
        _size += 4;
    }

    if ((obj.flags & CAST_FLAGS_AMMO) != 0) {
        _size += 8;
    }

    if ((obj.flags & CAST_FLAGS_UNKNOWN_23) != 0) {
        _size += 8;
    }

    return _size;
}

SMSG_SPELL_START SMSG_SPELL_START_read(Reader& reader) {
    SMSG_SPELL_START obj{};

    obj.cast_item = reader.read_packed_guid();

    obj.caster = reader.read_packed_guid();

    obj.cast_count = reader.read_u8();

    obj.spell = reader.read_u32();

    obj.flags = static_cast<CastFlags>(reader.read_u32());

    obj.timer = reader.read_u32();

    obj.targets = ::wow_world_messages::wrath::SpellCastTargets_read(reader);

    if ((obj.flags & CAST_FLAGS_POWER_LEFT_SELF) != 0) {
        obj.power = static_cast<Power>(reader.read_u32());

    }
    if ((obj.flags & CAST_FLAGS_AMMO) != 0) {
        obj.ammo_display_id = reader.read_u32();

        obj.ammo_inventory_type = reader.read_u32();

    }
    if ((obj.flags & CAST_FLAGS_UNKNOWN_23) != 0) {
        obj.unknown1 = reader.read_u32();

        obj.unknown2 = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELL_START::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELL_START_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELL_START_size(obj) + 2)); /* size */

    writer.write_u16(0x00000131); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.cast_item);

    writer.write_packed_guid(obj.caster);

    writer.write_u8(obj.cast_count);

    writer.write_u32(obj.spell);

    writer.write_u32(static_cast<uint32_t>(obj.flags));

    writer.write_u32(obj.timer);

    SpellCastTargets_write(writer, obj.targets);

    if ((obj.flags & CAST_FLAGS_POWER_LEFT_SELF) != 0) {
        writer.write_u32(static_cast<uint32_t>(obj.power));

    }
    if ((obj.flags & CAST_FLAGS_AMMO) != 0) {
        writer.write_u32(obj.ammo_display_id);

        writer.write_u32(obj.ammo_inventory_type);

    }
    if ((obj.flags & CAST_FLAGS_UNKNOWN_23) != 0) {
        writer.write_u32(obj.unknown1);

        writer.write_u32(obj.unknown2);

    }
    return writer.m_buf;
}

static size_t SMSG_SPELL_GO_size(const SMSG_SPELL_GO& obj) {
    size_t _size = 15 + ::wow_world_messages::util::wwm_packed_guid_size(obj.cast_item) + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster) + 8 * obj.hits.size() + SpellCastTargets_size(obj.targets);

    for(const auto& v : obj.misses) {
        _size += SpellMiss_size(v);
    }

    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_POWER_UPDATE) != 0) {
        _size += 4;
    }

    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_RUNE_UPDATE) != 0) {
        _size += 8;
    }

    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_ADJUST_MISSILE) != 0) {
        _size += 8;
    }

    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_AMMO) != 0) {
        _size += 8;
    }

    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_VISUAL_CHAIN) != 0) {
        _size += 8;
    }

    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_DEST_LOCATION) != 0) {
        _size += 1;
    }

    return _size;
}

SMSG_SPELL_GO SMSG_SPELL_GO_read(Reader& reader) {
    SMSG_SPELL_GO obj{};

    obj.cast_item = reader.read_packed_guid();

    obj.caster = reader.read_packed_guid();

    obj.extra_casts = reader.read_u8();

    obj.spell = reader.read_u32();

    obj.flags = static_cast<GameobjectCastFlags>(reader.read_u32());

    obj.timestamp = reader.read_u32();

    auto amount_of_hits = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_hits; ++i) {
        obj.hits.push_back(reader.read_u64());
    }

    auto amount_of_misses = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_misses; ++i) {
        obj.misses.push_back(::wow_world_messages::wrath::SpellMiss_read(reader));
    }

    obj.targets = ::wow_world_messages::wrath::SpellCastTargets_read(reader);

    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_POWER_UPDATE) != 0) {
        obj.power = static_cast<Power>(reader.read_u32());

    }
    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_RUNE_UPDATE) != 0) {
        obj.rune_mask_initial = reader.read_u8();

        obj.rune_mask_after_cast = reader.read_u8();

        for (auto i = 0; i < 6; ++i) {
            obj.rune_cooldowns[i] = reader.read_u8();
        }

    }
    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_ADJUST_MISSILE) != 0) {
        obj.elevation = reader.read_float();

        obj.delay_trajectory = reader.read_u32();

    }
    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_AMMO) != 0) {
        obj.ammo_display_id = reader.read_u32();

        obj.ammo_inventory_type = reader.read_u32();

    }
    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_VISUAL_CHAIN) != 0) {
        obj.unknown1 = reader.read_u32();

        obj.unknown2 = reader.read_u32();

    }
    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_DEST_LOCATION) != 0) {
        obj.unknown3 = reader.read_u8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELL_GO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELL_GO_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELL_GO_size(obj) + 2)); /* size */

    writer.write_u16(0x00000132); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.cast_item);

    writer.write_packed_guid(obj.caster);

    writer.write_u8(obj.extra_casts);

    writer.write_u32(obj.spell);

    writer.write_u32(static_cast<uint32_t>(obj.flags));

    writer.write_u32(obj.timestamp);

    writer.write_u8(static_cast<uint8_t>(obj.hits.size()));

    for (const auto& v : obj.hits) {
        writer.write_u64(v);
    }

    writer.write_u8(static_cast<uint8_t>(obj.misses.size()));

    for (const auto& v : obj.misses) {
        SpellMiss_write(writer, v);
    }

    SpellCastTargets_write(writer, obj.targets);

    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_POWER_UPDATE) != 0) {
        writer.write_u32(static_cast<uint32_t>(obj.power));

    }
    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_RUNE_UPDATE) != 0) {
        writer.write_u8(obj.rune_mask_initial);

        writer.write_u8(obj.rune_mask_after_cast);

        for (const auto& v : obj.rune_cooldowns) {
            writer.write_u8(v);
        }

    }
    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_ADJUST_MISSILE) != 0) {
        writer.write_float(obj.elevation);

        writer.write_u32(obj.delay_trajectory);

    }
    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_AMMO) != 0) {
        writer.write_u32(obj.ammo_display_id);

        writer.write_u32(obj.ammo_inventory_type);

    }
    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_VISUAL_CHAIN) != 0) {
        writer.write_u32(obj.unknown1);

        writer.write_u32(obj.unknown2);

    }
    if ((obj.flags & GAMEOBJECT_CAST_FLAGS_DEST_LOCATION) != 0) {
        writer.write_u8(obj.unknown3);

    }
    return writer.m_buf;
}

SMSG_SPELL_FAILURE SMSG_SPELL_FAILURE_read(Reader& reader) {
    SMSG_SPELL_FAILURE obj{};

    obj.guid = reader.read_u64();

    obj.extra_casts = reader.read_u8();

    obj.spell = reader.read_u32();

    obj.result = static_cast<SpellCastResult>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELL_FAILURE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000e);

    writer.write_u16_be(static_cast<uint16_t>(0x000e + 2)); /* size */

    writer.write_u16(0x00000133); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(obj.extra_casts);

    writer.write_u32(obj.spell);

    writer.write_u8(static_cast<uint8_t>(obj.result));

    return writer.m_buf;
}

static size_t SMSG_SPELL_COOLDOWN_size(const SMSG_SPELL_COOLDOWN& obj) {
    return 9 + 8 * obj.cooldowns.size();
}

SMSG_SPELL_COOLDOWN SMSG_SPELL_COOLDOWN_read(Reader& reader, size_t body_size) {
    SMSG_SPELL_COOLDOWN obj{};
    size_t _size = 0;

    obj.guid = reader.read_u64();
    _size += 8;

    obj.flags = reader.read_u8();
    _size += 1;

    while (_size < body_size) {
        obj.cooldowns.push_back(::wow_world_messages::wrath::SpellCooldownStatus_read(reader));
        _size += 8;
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELL_COOLDOWN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELL_COOLDOWN_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELL_COOLDOWN_size(obj) + 2)); /* size */

    writer.write_u16(0x00000134); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(obj.flags);

    for (const auto& v : obj.cooldowns) {
        SpellCooldownStatus_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_COOLDOWN_EVENT SMSG_COOLDOWN_EVENT_read(Reader& reader) {
    SMSG_COOLDOWN_EVENT obj{};

    obj.id = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_COOLDOWN_EVENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x00000135); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.id);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_CANCEL_AURA CMSG_CANCEL_AURA_read(Reader& reader) {
    CMSG_CANCEL_AURA obj{};

    obj.id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CANCEL_AURA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000136); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.id);

    return writer.m_buf;
}

static size_t SMSG_PET_CAST_FAILED_size(const SMSG_PET_CAST_FAILED& obj) {
    size_t _size = 7;

    if (obj.result == SpellCastResult::REQUIRES_SPELL_FOCUS) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::REQUIRES_AREA) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::TOTEMS) {
        _size += 8;
    }
    else if (obj.result == SpellCastResult::TOTEM_CATEGORY) {
        _size += 8;
    }
    else if (obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_OFFHAND|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_MAINHAND) {
        _size += 8;
    }
    else if (obj.result == SpellCastResult::TOO_MANY_OF_ITEM) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::CUSTOM_ERROR) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::REAGENTS) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::PREVENTED_BY_MECHANIC) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::NEED_EXOTIC_AMMO) {
        _size += 4;
    }
    else if (obj.result == SpellCastResult::NEED_MORE_ITEMS) {
        _size += 8;
    }
    else if (obj.result == SpellCastResult::MIN_SKILL) {
        _size += 8;
    }
    else if (obj.result == SpellCastResult::FISHING_TOO_LOW) {
        _size += 4;
    }

    return _size;
}

SMSG_PET_CAST_FAILED SMSG_PET_CAST_FAILED_read(Reader& reader) {
    SMSG_PET_CAST_FAILED obj{};

    obj.cast_count = reader.read_u8();

    obj.id = reader.read_u32();

    obj.result = static_cast<SpellCastResult>(reader.read_u8());

    obj.multiple_casts = reader.read_bool8();

    if (obj.result == SpellCastResult::REQUIRES_SPELL_FOCUS) {
        obj.spell_focus = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::REQUIRES_AREA) {
        obj.area = static_cast<Area>(reader.read_u32());

    }
    else if (obj.result == SpellCastResult::TOTEMS) {
        for (auto i = 0; i < 2; ++i) {
            obj.totems[i] = reader.read_u32();
        }

    }
    else if (obj.result == SpellCastResult::TOTEM_CATEGORY) {
        for (auto i = 0; i < 2; ++i) {
            obj.totem_categories[i] = reader.read_u32();
        }

    }
    else if (obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_OFFHAND|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_MAINHAND) {
        obj.item_class = reader.read_u32();

        obj.item_sub_class = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::TOO_MANY_OF_ITEM) {
        obj.item_limit_category = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::CUSTOM_ERROR) {
        obj.custom_error = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::REAGENTS) {
        obj.missing_item = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::PREVENTED_BY_MECHANIC) {
        obj.mechanic = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::NEED_EXOTIC_AMMO) {
        obj.equipped_item_sub_class = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::NEED_MORE_ITEMS) {
        obj.item = reader.read_u32();

        obj.count = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::MIN_SKILL) {
        obj.skill = static_cast<Skill>(reader.read_u32());

        obj.skill_required = reader.read_u32();

    }
    else if (obj.result == SpellCastResult::FISHING_TOO_LOW) {
        obj.fishing_skill_required = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_CAST_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PET_CAST_FAILED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PET_CAST_FAILED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000138); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.cast_count);

    writer.write_u32(obj.id);

    writer.write_u8(static_cast<uint8_t>(obj.result));

    writer.write_bool8(obj.multiple_casts);

    if (obj.result == SpellCastResult::REQUIRES_SPELL_FOCUS) {
        writer.write_u32(obj.spell_focus);

    }
    else if (obj.result == SpellCastResult::REQUIRES_AREA) {
        writer.write_u32(static_cast<uint32_t>(obj.area));

    }
    else if (obj.result == SpellCastResult::TOTEMS) {
        for (const auto& v : obj.totems) {
            writer.write_u32(v);
        }

    }
    else if (obj.result == SpellCastResult::TOTEM_CATEGORY) {
        for (const auto& v : obj.totem_categories) {
            writer.write_u32(v);
        }

    }
    else if (obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_OFFHAND|| obj.result == SpellCastResult::EQUIPPED_ITEM_CLASS_MAINHAND) {
        writer.write_u32(obj.item_class);

        writer.write_u32(obj.item_sub_class);

    }
    else if (obj.result == SpellCastResult::TOO_MANY_OF_ITEM) {
        writer.write_u32(obj.item_limit_category);

    }
    else if (obj.result == SpellCastResult::CUSTOM_ERROR) {
        writer.write_u32(obj.custom_error);

    }
    else if (obj.result == SpellCastResult::REAGENTS) {
        writer.write_u32(obj.missing_item);

    }
    else if (obj.result == SpellCastResult::PREVENTED_BY_MECHANIC) {
        writer.write_u32(obj.mechanic);

    }
    else if (obj.result == SpellCastResult::NEED_EXOTIC_AMMO) {
        writer.write_u32(obj.equipped_item_sub_class);

    }
    else if (obj.result == SpellCastResult::NEED_MORE_ITEMS) {
        writer.write_u32(obj.item);

        writer.write_u32(obj.count);

    }
    else if (obj.result == SpellCastResult::MIN_SKILL) {
        writer.write_u32(static_cast<uint32_t>(obj.skill));

        writer.write_u32(obj.skill_required);

    }
    else if (obj.result == SpellCastResult::FISHING_TOO_LOW) {
        writer.write_u32(obj.fishing_skill_required);

    }
    return writer.m_buf;
}

static size_t MSG_CHANNEL_START_Server_size(const MSG_CHANNEL_START_Server& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster);
}

MSG_CHANNEL_START_Server MSG_CHANNEL_START_Server_read(Reader& reader) {
    MSG_CHANNEL_START_Server obj{};

    obj.caster = reader.read_packed_guid();

    obj.spell = reader.read_u32();

    obj.duration = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_CHANNEL_START_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_CHANNEL_START_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_CHANNEL_START_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x00000139); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.caster);

    writer.write_u32(obj.spell);

    writer.write_u32(obj.duration);

    return writer.m_buf;
}

static size_t MSG_CHANNEL_UPDATE_Server_size(const MSG_CHANNEL_UPDATE_Server& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster);
}

MSG_CHANNEL_UPDATE_Server MSG_CHANNEL_UPDATE_Server_read(Reader& reader) {
    MSG_CHANNEL_UPDATE_Server obj{};

    obj.caster = reader.read_packed_guid();

    obj.time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_CHANNEL_UPDATE_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_CHANNEL_UPDATE_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_CHANNEL_UPDATE_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x0000013a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.caster);

    writer.write_u32(obj.time);

    return writer.m_buf;
}

CMSG_CANCEL_CHANNELLING CMSG_CANCEL_CHANNELLING_read(Reader& reader) {
    CMSG_CANCEL_CHANNELLING obj{};

    obj.id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CANCEL_CHANNELLING::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000013b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.id);

    return writer.m_buf;
}

SMSG_AI_REACTION SMSG_AI_REACTION_read(Reader& reader) {
    SMSG_AI_REACTION obj{};

    obj.guid = reader.read_u64();

    obj.reaction = static_cast<AiReaction>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AI_REACTION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x0000013c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.reaction));

    return writer.m_buf;
}

CMSG_SET_SELECTION CMSG_SET_SELECTION_read(Reader& reader) {
    CMSG_SET_SELECTION obj{};

    obj.target = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_SELECTION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000013d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.target);

    return writer.m_buf;
}

static size_t CMSG_DELETEEQUIPMENT_SET_size(const CMSG_DELETEEQUIPMENT_SET& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.set);
}

CMSG_DELETEEQUIPMENT_SET CMSG_DELETEEQUIPMENT_SET_read(Reader& reader) {
    CMSG_DELETEEQUIPMENT_SET obj{};

    obj.set = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_DELETEEQUIPMENT_SET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_DELETEEQUIPMENT_SET_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_DELETEEQUIPMENT_SET_size(obj) + 4)); /* size */

    writer.write_u32(0x0000013e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.set);

    return writer.m_buf;
}

CMSG_INSTANCE_LOCK_RESPONSE CMSG_INSTANCE_LOCK_RESPONSE_read(Reader& reader) {
    CMSG_INSTANCE_LOCK_RESPONSE obj{};

    obj.accept = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_INSTANCE_LOCK_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x0000013f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.accept);

    return writer.m_buf;
}

CMSG_ATTACKSWING CMSG_ATTACKSWING_read(Reader& reader) {
    CMSG_ATTACKSWING obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ATTACKSWING::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000141); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ATTACKSTOP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000142); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_ATTACKSTART SMSG_ATTACKSTART_read(Reader& reader) {
    SMSG_ATTACKSTART obj{};

    obj.attacker = reader.read_u64();

    obj.victim = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ATTACKSTART::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x00000143); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.attacker);

    writer.write_u64(obj.victim);

    return writer.m_buf;
}

static size_t SMSG_ATTACKSTOP_size(const SMSG_ATTACKSTOP& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + ::wow_world_messages::util::wwm_packed_guid_size(obj.enemy);
}

SMSG_ATTACKSTOP SMSG_ATTACKSTOP_read(Reader& reader) {
    SMSG_ATTACKSTOP obj{};

    obj.player = reader.read_packed_guid();

    obj.enemy = reader.read_packed_guid();

    obj.unknown1 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ATTACKSTOP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ATTACKSTOP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ATTACKSTOP_size(obj) + 2)); /* size */

    writer.write_u16(0x00000144); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    writer.write_packed_guid(obj.enemy);

    writer.write_u32(obj.unknown1);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ATTACKSWING_NOTINRANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000145); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ATTACKSWING_BADFACING::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000146); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_INSTANCE_LOCK_WARNING_QUERY SMSG_INSTANCE_LOCK_WARNING_QUERY_read(Reader& reader) {
    SMSG_INSTANCE_LOCK_WARNING_QUERY obj{};

    obj.time = reader.read_u32();

    obj.encounter_mask = reader.read_u32();

    obj.unknown = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INSTANCE_LOCK_WARNING_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 2)); /* size */

    writer.write_u16(0x00000147); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.time);

    writer.write_u32(obj.encounter_mask);

    writer.write_u8(obj.unknown);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ATTACKSWING_DEADTARGET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000148); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ATTACKSWING_CANT_ATTACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000149); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_ATTACKERSTATEUPDATE_size(const SMSG_ATTACKERSTATEUPDATE& obj) {
    size_t _size = 22 + ::wow_world_messages::util::wwm_packed_guid_size(obj.attacker) + ::wow_world_messages::util::wwm_packed_guid_size(obj.target) + 12 * obj.damage_infos.size();

    if ((obj.hit_info & HIT_INFO_ALL_ABSORB) != 0) {
        _size += 4;
    }

    if ((obj.hit_info & HIT_INFO_ALL_RESIST) != 0) {
        _size += 4;
    }

    if ((obj.hit_info & HIT_INFO_BLOCK) != 0) {
        _size += 4;
    }

    if ((obj.hit_info & HIT_INFO_UNK19) != 0) {
        _size += 4;
    }

    if ((obj.hit_info & HIT_INFO_UNK1) != 0) {
        _size += 48;
    }

    return _size;
}

SMSG_ATTACKERSTATEUPDATE SMSG_ATTACKERSTATEUPDATE_read(Reader& reader) {
    SMSG_ATTACKERSTATEUPDATE obj{};

    obj.hit_info = static_cast<HitInfo>(reader.read_u32());

    obj.attacker = reader.read_packed_guid();

    obj.target = reader.read_packed_guid();

    obj.total_damage = reader.read_u32();

    obj.overkill = reader.read_u32();

    auto amount_of_damages = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_damages; ++i) {
        obj.damage_infos.push_back(::wow_world_messages::wrath::DamageInfo_read(reader));
    }

    if ((obj.hit_info & HIT_INFO_ALL_ABSORB) != 0) {
        obj.absorb = reader.read_u32();

    }
    if ((obj.hit_info & HIT_INFO_ALL_RESIST) != 0) {
        obj.resist = reader.read_u32();

    }
    obj.victim_state = static_cast<VictimState>(reader.read_u8());

    obj.unknown1 = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    if ((obj.hit_info & HIT_INFO_BLOCK) != 0) {
        obj.blocked_amount = reader.read_u32();

    }
    if ((obj.hit_info & HIT_INFO_UNK19) != 0) {
        obj.unknown3 = reader.read_u32();

    }
    if ((obj.hit_info & HIT_INFO_UNK1) != 0) {
        obj.unknown4 = reader.read_u32();

        obj.unknown5 = reader.read_float();

        obj.unknown6 = reader.read_float();

        obj.unknown7 = reader.read_float();

        obj.unknown8 = reader.read_float();

        obj.unknown9 = reader.read_float();

        obj.unknown10 = reader.read_float();

        obj.unknown11 = reader.read_float();

        obj.unknown12 = reader.read_float();

        obj.unknown13 = reader.read_float();

        obj.unknown14 = reader.read_float();

        obj.unknown15 = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ATTACKERSTATEUPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ATTACKERSTATEUPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ATTACKERSTATEUPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000014a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.hit_info));

    writer.write_packed_guid(obj.attacker);

    writer.write_packed_guid(obj.target);

    writer.write_u32(obj.total_damage);

    writer.write_u32(obj.overkill);

    writer.write_u8(static_cast<uint8_t>(obj.damage_infos.size()));

    for (const auto& v : obj.damage_infos) {
        DamageInfo_write(writer, v);
    }

    if ((obj.hit_info & HIT_INFO_ALL_ABSORB) != 0) {
        writer.write_u32(obj.absorb);

    }
    if ((obj.hit_info & HIT_INFO_ALL_RESIST) != 0) {
        writer.write_u32(obj.resist);

    }
    writer.write_u8(static_cast<uint8_t>(obj.victim_state));

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.unknown2);

    if ((obj.hit_info & HIT_INFO_BLOCK) != 0) {
        writer.write_u32(obj.blocked_amount);

    }
    if ((obj.hit_info & HIT_INFO_UNK19) != 0) {
        writer.write_u32(obj.unknown3);

    }
    if ((obj.hit_info & HIT_INFO_UNK1) != 0) {
        writer.write_u32(obj.unknown4);

        writer.write_float(obj.unknown5);

        writer.write_float(obj.unknown6);

        writer.write_float(obj.unknown7);

        writer.write_float(obj.unknown8);

        writer.write_float(obj.unknown9);

        writer.write_float(obj.unknown10);

        writer.write_float(obj.unknown11);

        writer.write_float(obj.unknown12);

        writer.write_float(obj.unknown13);

        writer.write_float(obj.unknown14);

        writer.write_u32(obj.unknown15);

    }
    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CANCEL_COMBAT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x0000014e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_SPELLHEALLOG_size(const SMSG_SPELLHEALLOG& obj) {
    return 18 + ::wow_world_messages::util::wwm_packed_guid_size(obj.victim) + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster);
}

SMSG_SPELLHEALLOG SMSG_SPELLHEALLOG_read(Reader& reader) {
    SMSG_SPELLHEALLOG obj{};

    obj.victim = reader.read_packed_guid();

    obj.caster = reader.read_packed_guid();

    obj.id = reader.read_u32();

    obj.damage = reader.read_u32();

    obj.overheal = reader.read_u32();

    obj.absorb = reader.read_u32();

    obj.critical = reader.read_bool8();

    obj.unknown = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELLHEALLOG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELLHEALLOG_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELLHEALLOG_size(obj) + 2)); /* size */

    writer.write_u16(0x00000150); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.victim);

    writer.write_packed_guid(obj.caster);

    writer.write_u32(obj.id);

    writer.write_u32(obj.damage);

    writer.write_u32(obj.overheal);

    writer.write_u32(obj.absorb);

    writer.write_bool8(obj.critical);

    writer.write_u8(obj.unknown);

    return writer.m_buf;
}

static size_t SMSG_SPELLENERGIZELOG_size(const SMSG_SPELLENERGIZELOG& obj) {
    return 12 + ::wow_world_messages::util::wwm_packed_guid_size(obj.victim) + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster);
}

SMSG_SPELLENERGIZELOG SMSG_SPELLENERGIZELOG_read(Reader& reader) {
    SMSG_SPELLENERGIZELOG obj{};

    obj.victim = reader.read_packed_guid();

    obj.caster = reader.read_packed_guid();

    obj.spell = reader.read_u32();

    obj.power = static_cast<Power>(reader.read_u32());

    obj.damage = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELLENERGIZELOG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELLENERGIZELOG_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELLENERGIZELOG_size(obj) + 2)); /* size */

    writer.write_u16(0x00000151); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.victim);

    writer.write_packed_guid(obj.caster);

    writer.write_u32(obj.spell);

    writer.write_u32(static_cast<uint32_t>(obj.power));

    writer.write_u32(obj.damage);

    return writer.m_buf;
}

static size_t SMSG_BREAK_TARGET_size(const SMSG_BREAK_TARGET& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_BREAK_TARGET SMSG_BREAK_TARGET_read(Reader& reader) {
    SMSG_BREAK_TARGET obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BREAK_TARGET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_BREAK_TARGET_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_BREAK_TARGET_size(obj) + 2)); /* size */

    writer.write_u16(0x00000152); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

SMSG_BINDPOINTUPDATE SMSG_BINDPOINTUPDATE_read(Reader& reader) {
    SMSG_BINDPOINTUPDATE obj{};

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    obj.map = static_cast<Map>(reader.read_u32());

    obj.area = static_cast<Area>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BINDPOINTUPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 2)); /* size */

    writer.write_u16(0x00000155); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    Vector3d_write(writer, obj.position);

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(static_cast<uint32_t>(obj.area));

    return writer.m_buf;
}

SMSG_PLAYERBOUND SMSG_PLAYERBOUND_read(Reader& reader) {
    SMSG_PLAYERBOUND obj{};

    obj.guid = reader.read_u64();

    obj.area = static_cast<Area>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PLAYERBOUND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x00000158); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.area));

    return writer.m_buf;
}

static size_t SMSG_CLIENT_CONTROL_UPDATE_size(const SMSG_CLIENT_CONTROL_UPDATE& obj) {
    return 1 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_CLIENT_CONTROL_UPDATE SMSG_CLIENT_CONTROL_UPDATE_read(Reader& reader) {
    SMSG_CLIENT_CONTROL_UPDATE obj{};

    obj.guid = reader.read_packed_guid();

    obj.allow_movement = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CLIENT_CONTROL_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CLIENT_CONTROL_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CLIENT_CONTROL_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000159); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_bool8(obj.allow_movement);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REPOP_REQUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000015a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_RESURRECT_REQUEST_size(const SMSG_RESURRECT_REQUEST& obj) {
    return 14 + obj.name.size();
}

SMSG_RESURRECT_REQUEST SMSG_RESURRECT_REQUEST_read(Reader& reader) {
    SMSG_RESURRECT_REQUEST obj{};

    obj.guid = reader.read_u64();

    obj.name = reader.read_sized_cstring();

    obj.player = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_RESURRECT_REQUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_RESURRECT_REQUEST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_RESURRECT_REQUEST_size(obj) + 2)); /* size */

    writer.write_u16(0x0000015b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_sized_cstring(obj.name);

    writer.write_bool8(obj.player);

    return writer.m_buf;
}

CMSG_RESURRECT_RESPONSE CMSG_RESURRECT_RESPONSE_read(Reader& reader) {
    CMSG_RESURRECT_RESPONSE obj{};

    obj.guid = reader.read_u64();

    obj.status = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_RESURRECT_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x0000015c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(obj.status);

    return writer.m_buf;
}

CMSG_LOOT CMSG_LOOT_read(Reader& reader) {
    CMSG_LOOT obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LOOT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000015d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LOOT_MONEY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000015e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_LOOT_RELEASE CMSG_LOOT_RELEASE_read(Reader& reader) {
    CMSG_LOOT_RELEASE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LOOT_RELEASE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000015f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_LOOT_RESPONSE_size(const SMSG_LOOT_RESPONSE& obj) {
    size_t _size = 14 + 6 * obj.items.size();

    if (obj.loot_method == LootMethod::ERROR) {
        _size += 1;
    }

    return _size;
}

SMSG_LOOT_RESPONSE SMSG_LOOT_RESPONSE_read(Reader& reader) {
    SMSG_LOOT_RESPONSE obj{};

    obj.guid = reader.read_u64();

    obj.loot_method = static_cast<LootMethod>(reader.read_u8());

    if (obj.loot_method == LootMethod::ERROR) {
        obj.loot_error = static_cast<LootMethodError>(reader.read_u8());

    }
    obj.gold = reader.read_u32();

    auto amount_of_items = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_items; ++i) {
        obj.items.push_back(::wow_world_messages::wrath::LootItem_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LOOT_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LOOT_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000160); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(static_cast<uint8_t>(obj.loot_method));

    if (obj.loot_method == LootMethod::ERROR) {
        writer.write_u8(static_cast<uint8_t>(obj.loot_error));

    }
    writer.write_u32(obj.gold);

    writer.write_u8(static_cast<uint8_t>(obj.items.size()));

    for (const auto& v : obj.items) {
        LootItem_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_LOOT_RELEASE_RESPONSE SMSG_LOOT_RELEASE_RESPONSE_read(Reader& reader) {
    SMSG_LOOT_RELEASE_RESPONSE obj{};

    obj.guid = reader.read_u64();

    obj.unknown1 = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_RELEASE_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 2)); /* size */

    writer.write_u16(0x00000161); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(obj.unknown1);

    return writer.m_buf;
}

SMSG_LOOT_REMOVED SMSG_LOOT_REMOVED_read(Reader& reader) {
    SMSG_LOOT_REMOVED obj{};

    obj.slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_REMOVED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x00000162); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.slot);

    return writer.m_buf;
}

SMSG_LOOT_MONEY_NOTIFY SMSG_LOOT_MONEY_NOTIFY_read(Reader& reader) {
    SMSG_LOOT_MONEY_NOTIFY obj{};

    obj.amount = reader.read_u32();

    obj.alone = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_MONEY_NOTIFY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0005);

    writer.write_u16_be(static_cast<uint16_t>(0x0005 + 2)); /* size */

    writer.write_u16(0x00000163); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.amount);

    writer.write_bool8(obj.alone);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_CLEAR_MONEY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000165); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_ITEM_PUSH_RESULT SMSG_ITEM_PUSH_RESULT_read(Reader& reader) {
    SMSG_ITEM_PUSH_RESULT obj{};

    obj.guid = reader.read_u64();

    obj.source = static_cast<NewItemSource>(reader.read_u32());

    obj.creation_type = static_cast<NewItemCreationType>(reader.read_u32());

    obj.alert_chat = static_cast<NewItemChatAlert>(reader.read_u32());

    obj.bag_slot = reader.read_u8();

    obj.item_slot = reader.read_u32();

    obj.item = reader.read_u32();

    obj.item_suffix_factor = reader.read_u32();

    obj.item_random_property_id = reader.read_u32();

    obj.item_count = reader.read_u32();

    obj.item_count_in_inventory = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ITEM_PUSH_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x002d);

    writer.write_u16_be(static_cast<uint16_t>(0x002d + 2)); /* size */

    writer.write_u16(0x00000166); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.source));

    writer.write_u32(static_cast<uint32_t>(obj.creation_type));

    writer.write_u32(static_cast<uint32_t>(obj.alert_chat));

    writer.write_u8(obj.bag_slot);

    writer.write_u32(obj.item_slot);

    writer.write_u32(obj.item);

    writer.write_u32(obj.item_suffix_factor);

    writer.write_u32(obj.item_random_property_id);

    writer.write_u32(obj.item_count);

    writer.write_u32(obj.item_count_in_inventory);

    return writer.m_buf;
}

SMSG_DUEL_REQUESTED SMSG_DUEL_REQUESTED_read(Reader& reader) {
    SMSG_DUEL_REQUESTED obj{};

    obj.initiator = reader.read_u64();

    obj.target = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DUEL_REQUESTED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x00000167); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.initiator);

    writer.write_u64(obj.target);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DUEL_OUTOFBOUNDS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000168); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DUEL_INBOUNDS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000169); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_DUEL_COMPLETE SMSG_DUEL_COMPLETE_read(Reader& reader) {
    SMSG_DUEL_COMPLETE obj{};

    obj.ended_without_interruption = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DUEL_COMPLETE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x0000016a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.ended_without_interruption);

    return writer.m_buf;
}

static size_t SMSG_DUEL_WINNER_size(const SMSG_DUEL_WINNER& obj) {
    return 3 + obj.opponent_name.size() + obj.initiator_name.size();
}

SMSG_DUEL_WINNER SMSG_DUEL_WINNER_read(Reader& reader) {
    SMSG_DUEL_WINNER obj{};

    obj.reason = static_cast<DuelWinnerReason>(reader.read_u8());

    obj.opponent_name = reader.read_cstring();

    obj.initiator_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DUEL_WINNER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_DUEL_WINNER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_DUEL_WINNER_size(obj) + 2)); /* size */

    writer.write_u16(0x0000016b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.reason));

    writer.write_cstring(obj.opponent_name);

    writer.write_cstring(obj.initiator_name);

    return writer.m_buf;
}

CMSG_DUEL_ACCEPTED CMSG_DUEL_ACCEPTED_read(Reader& reader) {
    CMSG_DUEL_ACCEPTED obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_DUEL_ACCEPTED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000016c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_DUEL_CANCELLED CMSG_DUEL_CANCELLED_read(Reader& reader) {
    CMSG_DUEL_CANCELLED obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_DUEL_CANCELLED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000016d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_MOUNTRESULT SMSG_MOUNTRESULT_read(Reader& reader) {
    SMSG_MOUNTRESULT obj{};

    obj.result = static_cast<MountResult>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOUNTRESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x0000016e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.result));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOUNTSPECIAL_ANIM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000171); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_MOUNTSPECIAL_ANIM SMSG_MOUNTSPECIAL_ANIM_read(Reader& reader) {
    SMSG_MOUNTSPECIAL_ANIM obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOUNTSPECIAL_ANIM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x00000172); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_PET_TAME_FAILURE SMSG_PET_TAME_FAILURE_read(Reader& reader) {
    SMSG_PET_TAME_FAILURE obj{};

    obj.reason = static_cast<PetTameFailureReason>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_TAME_FAILURE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x00000173); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.reason));

    return writer.m_buf;
}

static size_t CMSG_PET_SET_ACTION_size(const CMSG_PET_SET_ACTION& obj) {
    size_t _size = 16;

    if(obj.extra) {
        _size += 8;
    }

    return _size;
}

CMSG_PET_SET_ACTION CMSG_PET_SET_ACTION_read(Reader& reader, size_t body_size) {
    CMSG_PET_SET_ACTION obj{};
    size_t _size = 0;

    obj.guid = reader.read_u64();
    _size += 8;

    obj.position1 = reader.read_u32();
    _size += 4;

    obj.data1 = reader.read_u32();
    _size += 4;

    if (_size < body_size) {
        obj.extra = std::shared_ptr<wrath::CMSG_PET_SET_ACTION::Extra>(new wrath::CMSG_PET_SET_ACTION::Extra());

        obj.extra->position2 = reader.read_u32();

        obj.extra->data2 = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_SET_ACTION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_PET_SET_ACTION_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_PET_SET_ACTION_size(obj) + 4)); /* size */

    writer.write_u32(0x00000174); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.position1);

    writer.write_u32(obj.data1);

    if(obj.extra) {
        writer.write_u32(obj.extra->position2);

        writer.write_u32(obj.extra->data2);

    }
    return writer.m_buf;
}

CMSG_PET_ACTION CMSG_PET_ACTION_read(Reader& reader) {
    CMSG_PET_ACTION obj{};

    obj.pet = reader.read_u64();

    obj.data = reader.read_u32();

    obj.target = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_ACTION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 4)); /* size */

    writer.write_u32(0x00000175); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.pet);

    writer.write_u32(obj.data);

    writer.write_u64(obj.target);

    return writer.m_buf;
}

CMSG_PET_ABANDON CMSG_PET_ABANDON_read(Reader& reader) {
    CMSG_PET_ABANDON obj{};

    obj.pet = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_ABANDON::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000176); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.pet);

    return writer.m_buf;
}

static size_t CMSG_PET_RENAME_size(const CMSG_PET_RENAME& obj) {
    return 10 + obj.name.size();
}

CMSG_PET_RENAME CMSG_PET_RENAME_read(Reader& reader) {
    CMSG_PET_RENAME obj{};

    obj.pet = reader.read_u64();

    obj.name = reader.read_cstring();

    obj.declined = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_RENAME::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_PET_RENAME_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_PET_RENAME_size(obj) + 4)); /* size */

    writer.write_u32(0x00000177); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.pet);

    writer.write_cstring(obj.name);

    writer.write_bool8(obj.declined);

    return writer.m_buf;
}

static size_t SMSG_PET_NAME_INVALID_size(const SMSG_PET_NAME_INVALID& obj) {
    size_t _size = 6 + obj.name.size();

    if (obj.included == DeclinedPetNameIncluded::INCLUDED) {
        _size += 0;

        for(const auto& v : obj.declined_names) {
            _size += v.size() + 1;
        }

    }

    return _size;
}

SMSG_PET_NAME_INVALID SMSG_PET_NAME_INVALID_read(Reader& reader) {
    SMSG_PET_NAME_INVALID obj{};

    obj.reason = static_cast<PetNameInvalidReason>(reader.read_u32());

    obj.name = reader.read_cstring();

    obj.included = static_cast<DeclinedPetNameIncluded>(reader.read_u8());

    if (obj.included == DeclinedPetNameIncluded::INCLUDED) {
        for (auto i = 0; i < 5; ++i) {
            obj.declined_names[i] = reader.read_cstring();
        }

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_NAME_INVALID::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PET_NAME_INVALID_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PET_NAME_INVALID_size(obj) + 2)); /* size */

    writer.write_u16(0x00000178); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.reason));

    writer.write_cstring(obj.name);

    writer.write_u8(static_cast<uint8_t>(obj.included));

    if (obj.included == DeclinedPetNameIncluded::INCLUDED) {
        for (const auto& v : obj.declined_names) {
            writer.write_cstring(v);
        }

    }
    return writer.m_buf;
}

static size_t SMSG_PET_SPELLS_size(const SMSG_PET_SPELLS& obj) {
    size_t _size = 8;

    if(obj.action_bars) {
        _size += 52 + 4 * obj.action_bars->spells.size() + 14 * obj.action_bars->cooldowns.size();
    }

    return _size;
}

SMSG_PET_SPELLS SMSG_PET_SPELLS_read(Reader& reader, size_t body_size) {
    SMSG_PET_SPELLS obj{};
    size_t _size = 0;

    obj.pet = reader.read_u64();
    _size += 8;

    if (_size < body_size) {
        obj.action_bars = std::shared_ptr<wrath::SMSG_PET_SPELLS::ActionBars>(new wrath::SMSG_PET_SPELLS::ActionBars());

        obj.action_bars->family = static_cast<CreatureFamily>(reader.read_u16());

        obj.action_bars->duration = reader.read_u32();

        obj.action_bars->react = static_cast<PetReactState>(reader.read_u8());

        obj.action_bars->command = static_cast<PetCommandState>(reader.read_u8());

        obj.action_bars->unknown = reader.read_u8();

        obj.action_bars->pet_enabled = static_cast<PetEnabled>(reader.read_u8());

        for (auto i = 0; i < 10; ++i) {
            obj.action_bars->action_bars[i] = reader.read_u32();
        }

        auto amount_of_spells = reader.read_u8();

        for (uint8_t i = 0; i < amount_of_spells; ++i) {
            obj.action_bars->spells.push_back(reader.read_u32());
        }

        auto amount_of_cooldowns = reader.read_u8();

        for (uint8_t i = 0; i < amount_of_cooldowns; ++i) {
            obj.action_bars->cooldowns.push_back(::wow_world_messages::wrath::PetSpellCooldown_read(reader));
        }

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_SPELLS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PET_SPELLS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PET_SPELLS_size(obj) + 2)); /* size */

    writer.write_u16(0x00000179); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.pet);

    if(obj.action_bars) {
        writer.write_u16(static_cast<uint16_t>(obj.action_bars->family));

        writer.write_u32(obj.action_bars->duration);

        writer.write_u8(static_cast<uint8_t>(obj.action_bars->react));

        writer.write_u8(static_cast<uint8_t>(obj.action_bars->command));

        writer.write_u8(obj.action_bars->unknown);

        writer.write_u8(static_cast<uint8_t>(obj.action_bars->pet_enabled));

        for (const auto& v : obj.action_bars->action_bars) {
            writer.write_u32(v);
        }

        writer.write_u8(static_cast<uint8_t>(obj.action_bars->spells.size()));

        for (const auto& v : obj.action_bars->spells) {
            writer.write_u32(v);
        }

        writer.write_u8(static_cast<uint8_t>(obj.action_bars->cooldowns.size()));

        for (const auto& v : obj.action_bars->cooldowns) {
            PetSpellCooldown_write(writer, v);
        }

    }
    return writer.m_buf;
}

SMSG_PET_MODE SMSG_PET_MODE_read(Reader& reader) {
    SMSG_PET_MODE obj{};

    obj.guid = reader.read_u64();

    obj.react_state = static_cast<PetReactState>(reader.read_u8());

    obj.command_state = static_cast<PetCommandState>(reader.read_u8());

    obj.unknown1 = reader.read_u8();

    obj.pet_enabled = static_cast<PetEnabled>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_MODE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x0000017a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(static_cast<uint8_t>(obj.react_state));

    writer.write_u8(static_cast<uint8_t>(obj.command_state));

    writer.write_u8(obj.unknown1);

    writer.write_u8(static_cast<uint8_t>(obj.pet_enabled));

    return writer.m_buf;
}

CMSG_GOSSIP_HELLO CMSG_GOSSIP_HELLO_read(Reader& reader) {
    CMSG_GOSSIP_HELLO obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GOSSIP_HELLO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000017b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t CMSG_GOSSIP_SELECT_OPTION_size(const CMSG_GOSSIP_SELECT_OPTION& obj) {
    size_t _size = 16;

    if(obj.unknown) {
        _size += 1 + obj.unknown->code.size();
    }

    return _size;
}

CMSG_GOSSIP_SELECT_OPTION CMSG_GOSSIP_SELECT_OPTION_read(Reader& reader, size_t body_size) {
    CMSG_GOSSIP_SELECT_OPTION obj{};
    size_t _size = 0;

    obj.guid = reader.read_u64();
    _size += 8;

    obj.menu_id = reader.read_u32();
    _size += 4;

    obj.gossip_list_id = reader.read_u32();
    _size += 4;

    if (_size < body_size) {
        obj.unknown = std::shared_ptr<wrath::CMSG_GOSSIP_SELECT_OPTION::Unknown>(new wrath::CMSG_GOSSIP_SELECT_OPTION::Unknown());

        obj.unknown->code = reader.read_cstring();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GOSSIP_SELECT_OPTION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GOSSIP_SELECT_OPTION_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GOSSIP_SELECT_OPTION_size(obj) + 4)); /* size */

    writer.write_u32(0x0000017c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.menu_id);

    writer.write_u32(obj.gossip_list_id);

    if(obj.unknown) {
        writer.write_cstring(obj.unknown->code);

    }
    return writer.m_buf;
}

static size_t SMSG_GOSSIP_MESSAGE_size(const SMSG_GOSSIP_MESSAGE& obj) {
    size_t _size = 24;

    for(const auto& v : obj.gossips) {
        _size += GossipItem_size(v);
    }

    for(const auto& v : obj.quests) {
        _size += QuestItem_size(v);
    }

    return _size;
}

SMSG_GOSSIP_MESSAGE SMSG_GOSSIP_MESSAGE_read(Reader& reader) {
    SMSG_GOSSIP_MESSAGE obj{};

    obj.guid = reader.read_u64();

    obj.menu_id = reader.read_u32();

    obj.title_text_id = reader.read_u32();

    auto amount_of_gossip_items = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_gossip_items; ++i) {
        obj.gossips.push_back(::wow_world_messages::wrath::GossipItem_read(reader));
    }

    auto amount_of_quests = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_quests; ++i) {
        obj.quests.push_back(::wow_world_messages::wrath::QuestItem_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GOSSIP_MESSAGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GOSSIP_MESSAGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GOSSIP_MESSAGE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000017d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.menu_id);

    writer.write_u32(obj.title_text_id);

    writer.write_u32(static_cast<uint32_t>(obj.gossips.size()));

    for (const auto& v : obj.gossips) {
        GossipItem_write(writer, v);
    }

    writer.write_u32(static_cast<uint32_t>(obj.quests.size()));

    for (const auto& v : obj.quests) {
        QuestItem_write(writer, v);
    }

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GOSSIP_COMPLETE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x0000017e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_NPC_TEXT_QUERY CMSG_NPC_TEXT_QUERY_read(Reader& reader) {
    CMSG_NPC_TEXT_QUERY obj{};

    obj.text_id = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_NPC_TEXT_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x0000017f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.text_id);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_NPC_TEXT_UPDATE_size(const SMSG_NPC_TEXT_UPDATE& obj) {
    size_t _size = 4;

    for(const auto& v : obj.texts) {
        _size += NpcTextUpdate_size(v);
    }

    return _size;
}

SMSG_NPC_TEXT_UPDATE SMSG_NPC_TEXT_UPDATE_read(Reader& reader) {
    SMSG_NPC_TEXT_UPDATE obj{};

    obj.text_id = reader.read_u32();

    for (auto i = 0; i < 8; ++i) {
        obj.texts[i] = ::wow_world_messages::wrath::NpcTextUpdate_read(reader);
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_NPC_TEXT_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_NPC_TEXT_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_NPC_TEXT_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000180); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.text_id);

    for (const auto& v : obj.texts) {
        NpcTextUpdate_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_QUESTGIVER_STATUS_QUERY CMSG_QUESTGIVER_STATUS_QUERY_read(Reader& reader) {
    CMSG_QUESTGIVER_STATUS_QUERY obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTGIVER_STATUS_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000182); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_QUESTGIVER_STATUS SMSG_QUESTGIVER_STATUS_read(Reader& reader) {
    SMSG_QUESTGIVER_STATUS obj{};

    obj.guid = reader.read_u64();

    obj.status = static_cast<QuestGiverStatus>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTGIVER_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x00000183); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.status));

    return writer.m_buf;
}

CMSG_QUESTGIVER_HELLO CMSG_QUESTGIVER_HELLO_read(Reader& reader) {
    CMSG_QUESTGIVER_HELLO obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTGIVER_HELLO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000184); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_QUESTGIVER_QUEST_LIST_size(const SMSG_QUESTGIVER_QUEST_LIST& obj) {
    size_t _size = 18 + obj.title.size();

    for(const auto& v : obj.quest_items) {
        _size += QuestItem_size(v);
    }

    return _size;
}

SMSG_QUESTGIVER_QUEST_LIST SMSG_QUESTGIVER_QUEST_LIST_read(Reader& reader) {
    SMSG_QUESTGIVER_QUEST_LIST obj{};

    obj.npc = reader.read_u64();

    obj.title = reader.read_cstring();

    obj.emote_delay = reader.read_u32();

    obj.emote = reader.read_u32();

    auto amount_of_entries = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_entries; ++i) {
        obj.quest_items.push_back(::wow_world_messages::wrath::QuestItem_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTGIVER_QUEST_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_QUESTGIVER_QUEST_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_QUESTGIVER_QUEST_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x00000185); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.npc);

    writer.write_cstring(obj.title);

    writer.write_u32(obj.emote_delay);

    writer.write_u32(obj.emote);

    writer.write_u8(static_cast<uint8_t>(obj.quest_items.size()));

    for (const auto& v : obj.quest_items) {
        QuestItem_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_QUESTGIVER_QUERY_QUEST CMSG_QUESTGIVER_QUERY_QUEST_read(Reader& reader) {
    CMSG_QUESTGIVER_QUERY_QUEST obj{};

    obj.guid = reader.read_u64();

    obj.quest_id = reader.read_u32();

    obj.unknown1 = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTGIVER_QUERY_QUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000d);

    writer.write_u16_be(static_cast<uint16_t>(0x000d + 4)); /* size */

    writer.write_u32(0x00000186); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.quest_id);

    writer.write_u8(obj.unknown1);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTGIVER_QUEST_AUTOLAUNCH::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000187); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_QUESTGIVER_QUEST_DETAILS_size(const SMSG_QUESTGIVER_QUEST_DETAILS& obj) {
    return 145 + obj.title.size() + obj.details.size() + obj.objectives.size() + 12 * obj.choice_item_rewards.size() + 12 * obj.item_rewards.size() + 8 * obj.emotes.size();
}

SMSG_QUESTGIVER_QUEST_DETAILS SMSG_QUESTGIVER_QUEST_DETAILS_read(Reader& reader) {
    SMSG_QUESTGIVER_QUEST_DETAILS obj{};

    obj.guid = reader.read_u64();

    obj.guid2 = reader.read_u64();

    obj.quest_id = reader.read_u32();

    obj.title = reader.read_cstring();

    obj.details = reader.read_cstring();

    obj.objectives = reader.read_cstring();

    obj.auto_finish = reader.read_bool8();

    obj.quest_flags = reader.read_u32();

    obj.suggested_players = reader.read_u32();

    obj.is_finished = reader.read_u8();

    auto amount_of_choice_item_rewards = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_choice_item_rewards; ++i) {
        obj.choice_item_rewards.push_back(::wow_world_messages::wrath::QuestGiverReward_read(reader));
    }

    auto amount_of_item_rewards = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_item_rewards; ++i) {
        obj.item_rewards.push_back(::wow_world_messages::wrath::QuestGiverReward_read(reader));
    }

    obj.money_reward = reader.read_u32();

    obj.experience_reward = reader.read_u32();

    obj.honor_reward = reader.read_u32();

    obj.honor_reward_multiplier = reader.read_float();

    obj.reward_spell = reader.read_u32();

    obj.casted_spell = reader.read_u32();

    obj.title_reward = reader.read_u32();

    obj.talent_reward = reader.read_u32();

    obj.arena_point_reward = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    for (auto i = 0; i < 5; ++i) {
        obj.reward_factions[i] = reader.read_u32();
    }

    for (auto i = 0; i < 5; ++i) {
        obj.reward_reputations[i] = reader.read_u32();
    }

    for (auto i = 0; i < 5; ++i) {
        obj.reward_reputations_override[i] = reader.read_u32();
    }

    auto amount_of_emotes = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_emotes; ++i) {
        obj.emotes.push_back(::wow_world_messages::wrath::QuestDetailsEmote_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTGIVER_QUEST_DETAILS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_QUESTGIVER_QUEST_DETAILS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_QUESTGIVER_QUEST_DETAILS_size(obj) + 2)); /* size */

    writer.write_u16(0x00000188); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u64(obj.guid2);

    writer.write_u32(obj.quest_id);

    writer.write_cstring(obj.title);

    writer.write_cstring(obj.details);

    writer.write_cstring(obj.objectives);

    writer.write_bool8(obj.auto_finish);

    writer.write_u32(obj.quest_flags);

    writer.write_u32(obj.suggested_players);

    writer.write_u8(obj.is_finished);

    writer.write_u32(static_cast<uint32_t>(obj.choice_item_rewards.size()));

    for (const auto& v : obj.choice_item_rewards) {
        QuestGiverReward_write(writer, v);
    }

    writer.write_u32(static_cast<uint32_t>(obj.item_rewards.size()));

    for (const auto& v : obj.item_rewards) {
        QuestGiverReward_write(writer, v);
    }

    writer.write_u32(obj.money_reward);

    writer.write_u32(obj.experience_reward);

    writer.write_u32(obj.honor_reward);

    writer.write_float(obj.honor_reward_multiplier);

    writer.write_u32(obj.reward_spell);

    writer.write_u32(obj.casted_spell);

    writer.write_u32(obj.title_reward);

    writer.write_u32(obj.talent_reward);

    writer.write_u32(obj.arena_point_reward);

    writer.write_u32(obj.unknown2);

    for (const auto& v : obj.reward_factions) {
        writer.write_u32(v);
    }

    for (const auto& v : obj.reward_reputations) {
        writer.write_u32(v);
    }

    for (const auto& v : obj.reward_reputations_override) {
        writer.write_u32(v);
    }

    writer.write_u32(static_cast<uint32_t>(obj.emotes.size()));

    for (const auto& v : obj.emotes) {
        QuestDetailsEmote_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_QUESTGIVER_ACCEPT_QUEST CMSG_QUESTGIVER_ACCEPT_QUEST_read(Reader& reader) {
    CMSG_QUESTGIVER_ACCEPT_QUEST obj{};

    obj.guid = reader.read_u64();

    obj.quest_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTGIVER_ACCEPT_QUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000189); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.quest_id);

    return writer.m_buf;
}

CMSG_QUESTGIVER_COMPLETE_QUEST CMSG_QUESTGIVER_COMPLETE_QUEST_read(Reader& reader) {
    CMSG_QUESTGIVER_COMPLETE_QUEST obj{};

    obj.guid = reader.read_u64();

    obj.quest_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTGIVER_COMPLETE_QUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x0000018a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.quest_id);

    return writer.m_buf;
}

static size_t SMSG_QUESTGIVER_REQUEST_ITEMS_size(const SMSG_QUESTGIVER_REQUEST_ITEMS& obj) {
    return 58 + obj.title.size() + obj.request_items_text.size() + 12 * obj.required_items.size();
}

SMSG_QUESTGIVER_REQUEST_ITEMS SMSG_QUESTGIVER_REQUEST_ITEMS_read(Reader& reader) {
    SMSG_QUESTGIVER_REQUEST_ITEMS obj{};

    obj.npc = reader.read_u64();

    obj.quest_id = reader.read_u32();

    obj.title = reader.read_cstring();

    obj.request_items_text = reader.read_cstring();

    obj.emote_delay = reader.read_u32();

    obj.emote = reader.read_u32();

    obj.auto_finish = reader.read_bool32();

    obj.flags1 = reader.read_u32();

    obj.suggested_players = reader.read_u32();

    obj.required_money = reader.read_u32();

    auto amount_of_required_items = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_required_items; ++i) {
        obj.required_items.push_back(::wow_world_messages::wrath::QuestItemRequirement_read(reader));
    }

    obj.completable = static_cast<QuestCompletable>(reader.read_u32());

    obj.flags2 = reader.read_u32();

    obj.flags3 = reader.read_u32();

    obj.flags4 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTGIVER_REQUEST_ITEMS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_QUESTGIVER_REQUEST_ITEMS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_QUESTGIVER_REQUEST_ITEMS_size(obj) + 2)); /* size */

    writer.write_u16(0x0000018b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.npc);

    writer.write_u32(obj.quest_id);

    writer.write_cstring(obj.title);

    writer.write_cstring(obj.request_items_text);

    writer.write_u32(obj.emote_delay);

    writer.write_u32(obj.emote);

    writer.write_bool32(obj.auto_finish);

    writer.write_u32(obj.flags1);

    writer.write_u32(obj.suggested_players);

    writer.write_u32(obj.required_money);

    writer.write_u32(static_cast<uint32_t>(obj.required_items.size()));

    for (const auto& v : obj.required_items) {
        QuestItemRequirement_write(writer, v);
    }

    writer.write_u32(static_cast<uint32_t>(obj.completable));

    writer.write_u32(obj.flags2);

    writer.write_u32(obj.flags3);

    writer.write_u32(obj.flags4);

    return writer.m_buf;
}

CMSG_QUESTGIVER_REQUEST_REWARD CMSG_QUESTGIVER_REQUEST_REWARD_read(Reader& reader) {
    CMSG_QUESTGIVER_REQUEST_REWARD obj{};

    obj.guid = reader.read_u64();

    obj.quest_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTGIVER_REQUEST_REWARD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x0000018c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.quest_id);

    return writer.m_buf;
}

static size_t SMSG_QUESTGIVER_OFFER_REWARD_size(const SMSG_QUESTGIVER_OFFER_REWARD& obj) {
    return 142 + obj.title.size() + obj.offer_reward_text.size() + 8 * obj.emotes.size() + 12 * obj.choice_item_rewards.size() + 12 * obj.item_rewards.size();
}

SMSG_QUESTGIVER_OFFER_REWARD SMSG_QUESTGIVER_OFFER_REWARD_read(Reader& reader) {
    SMSG_QUESTGIVER_OFFER_REWARD obj{};

    obj.npc = reader.read_u64();

    obj.quest_id = reader.read_u32();

    obj.title = reader.read_cstring();

    obj.offer_reward_text = reader.read_cstring();

    obj.auto_finish = reader.read_bool32();

    obj.flags1 = reader.read_u32();

    obj.suggested_players = reader.read_u32();

    auto amount_of_emotes = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_emotes; ++i) {
        obj.emotes.push_back(::wow_world_messages::wrath::NpcTextUpdateEmote_read(reader));
    }

    auto amount_of_choice_item_rewards = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_choice_item_rewards; ++i) {
        obj.choice_item_rewards.push_back(::wow_world_messages::wrath::QuestItemRequirement_read(reader));
    }

    auto amount_of_item_rewards = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_item_rewards; ++i) {
        obj.item_rewards.push_back(::wow_world_messages::wrath::QuestItemRequirement_read(reader));
    }

    obj.money_reward = reader.read_u32();

    obj.experience_reward = reader.read_u32();

    obj.honor_reward = reader.read_u32();

    obj.honor_reward_multiplier = reader.read_float();

    obj.unknown1 = reader.read_u32();

    obj.reward_spell = reader.read_u32();

    obj.reward_spell_cast = reader.read_u32();

    obj.title_reward = reader.read_u32();

    obj.reward_talents = reader.read_u32();

    obj.reward_arena_points = reader.read_u32();

    obj.reward_reputation_mask = reader.read_u32();

    for (auto i = 0; i < 5; ++i) {
        obj.reward_factions[i] = reader.read_u32();
    }

    for (auto i = 0; i < 5; ++i) {
        obj.reward_reputations[i] = reader.read_u32();
    }

    for (auto i = 0; i < 5; ++i) {
        obj.reward_reputations_override[i] = reader.read_u32();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTGIVER_OFFER_REWARD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_QUESTGIVER_OFFER_REWARD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_QUESTGIVER_OFFER_REWARD_size(obj) + 2)); /* size */

    writer.write_u16(0x0000018d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.npc);

    writer.write_u32(obj.quest_id);

    writer.write_cstring(obj.title);

    writer.write_cstring(obj.offer_reward_text);

    writer.write_bool32(obj.auto_finish);

    writer.write_u32(obj.flags1);

    writer.write_u32(obj.suggested_players);

    writer.write_u32(static_cast<uint32_t>(obj.emotes.size()));

    for (const auto& v : obj.emotes) {
        NpcTextUpdateEmote_write(writer, v);
    }

    writer.write_u32(static_cast<uint32_t>(obj.choice_item_rewards.size()));

    for (const auto& v : obj.choice_item_rewards) {
        QuestItemRequirement_write(writer, v);
    }

    writer.write_u32(static_cast<uint32_t>(obj.item_rewards.size()));

    for (const auto& v : obj.item_rewards) {
        QuestItemRequirement_write(writer, v);
    }

    writer.write_u32(obj.money_reward);

    writer.write_u32(obj.experience_reward);

    writer.write_u32(obj.honor_reward);

    writer.write_float(obj.honor_reward_multiplier);

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.reward_spell);

    writer.write_u32(obj.reward_spell_cast);

    writer.write_u32(obj.title_reward);

    writer.write_u32(obj.reward_talents);

    writer.write_u32(obj.reward_arena_points);

    writer.write_u32(obj.reward_reputation_mask);

    for (const auto& v : obj.reward_factions) {
        writer.write_u32(v);
    }

    for (const auto& v : obj.reward_reputations) {
        writer.write_u32(v);
    }

    for (const auto& v : obj.reward_reputations_override) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

CMSG_QUESTGIVER_CHOOSE_REWARD CMSG_QUESTGIVER_CHOOSE_REWARD_read(Reader& reader) {
    CMSG_QUESTGIVER_CHOOSE_REWARD obj{};

    obj.guid = reader.read_u64();

    obj.quest_id = reader.read_u32();

    obj.reward = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTGIVER_CHOOSE_REWARD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 4)); /* size */

    writer.write_u32(0x0000018e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.quest_id);

    writer.write_u32(obj.reward);

    return writer.m_buf;
}

SMSG_QUESTGIVER_QUEST_INVALID SMSG_QUESTGIVER_QUEST_INVALID_read(Reader& reader) {
    SMSG_QUESTGIVER_QUEST_INVALID obj{};

    obj.msg = static_cast<QuestFailedReason>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTGIVER_QUEST_INVALID::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x0000018f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.msg));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTGIVER_CANCEL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000190); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_QUESTGIVER_QUEST_COMPLETE_size(const SMSG_QUESTGIVER_QUEST_COMPLETE& obj) {
    return 32 + 8 * obj.item_rewards.size();
}

SMSG_QUESTGIVER_QUEST_COMPLETE SMSG_QUESTGIVER_QUEST_COMPLETE_read(Reader& reader) {
    SMSG_QUESTGIVER_QUEST_COMPLETE obj{};

    obj.quest_id = reader.read_u32();

    obj.unknown = reader.read_u32();

    obj.experience_reward = reader.read_u32();

    obj.money_reward = reader.read_u32();

    obj.honor_reward = reader.read_u32();

    obj.talent_reward = reader.read_u32();

    obj.arena_point_reward = reader.read_u32();

    auto amount_of_item_rewards = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_item_rewards; ++i) {
        obj.item_rewards.push_back(::wow_world_messages::wrath::QuestItemReward_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTGIVER_QUEST_COMPLETE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_QUESTGIVER_QUEST_COMPLETE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_QUESTGIVER_QUEST_COMPLETE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000191); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    writer.write_u32(obj.unknown);

    writer.write_u32(obj.experience_reward);

    writer.write_u32(obj.money_reward);

    writer.write_u32(obj.honor_reward);

    writer.write_u32(obj.talent_reward);

    writer.write_u32(obj.arena_point_reward);

    writer.write_u32(static_cast<uint32_t>(obj.item_rewards.size()));

    for (const auto& v : obj.item_rewards) {
        QuestItemReward_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_QUESTGIVER_QUEST_FAILED SMSG_QUESTGIVER_QUEST_FAILED_read(Reader& reader) {
    SMSG_QUESTGIVER_QUEST_FAILED obj{};

    obj.quest_id = reader.read_u32();

    obj.reason = static_cast<QuestFailedReason>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTGIVER_QUEST_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x00000192); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    writer.write_u32(static_cast<uint32_t>(obj.reason));

    return writer.m_buf;
}

CMSG_QUESTLOG_SWAP_QUEST CMSG_QUESTLOG_SWAP_QUEST_read(Reader& reader) {
    CMSG_QUESTLOG_SWAP_QUEST obj{};

    obj.slot1 = reader.read_u8();

    obj.slot2 = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTLOG_SWAP_QUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 4)); /* size */

    writer.write_u32(0x00000193); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.slot1);

    writer.write_u8(obj.slot2);

    return writer.m_buf;
}

CMSG_QUESTLOG_REMOVE_QUEST CMSG_QUESTLOG_REMOVE_QUEST_read(Reader& reader) {
    CMSG_QUESTLOG_REMOVE_QUEST obj{};

    obj.slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTLOG_REMOVE_QUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x00000194); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.slot);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTLOG_FULL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000195); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_QUESTUPDATE_FAILED SMSG_QUESTUPDATE_FAILED_read(Reader& reader) {
    SMSG_QUESTUPDATE_FAILED obj{};

    obj.quest_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTUPDATE_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000196); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    return writer.m_buf;
}

SMSG_QUESTUPDATE_FAILEDTIMER SMSG_QUESTUPDATE_FAILEDTIMER_read(Reader& reader) {
    SMSG_QUESTUPDATE_FAILEDTIMER obj{};

    obj.quest_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTUPDATE_FAILEDTIMER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000197); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    return writer.m_buf;
}

SMSG_QUESTUPDATE_COMPLETE SMSG_QUESTUPDATE_COMPLETE_read(Reader& reader) {
    SMSG_QUESTUPDATE_COMPLETE obj{};

    obj.quest_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTUPDATE_COMPLETE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000198); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    return writer.m_buf;
}

SMSG_QUESTUPDATE_ADD_KILL SMSG_QUESTUPDATE_ADD_KILL_read(Reader& reader) {
    SMSG_QUESTUPDATE_ADD_KILL obj{};

    obj.quest_id = reader.read_u32();

    obj.creature_id = reader.read_u32();

    obj.kill_count = reader.read_u32();

    obj.required_kill_count = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTUPDATE_ADD_KILL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0018);

    writer.write_u16_be(static_cast<uint16_t>(0x0018 + 2)); /* size */

    writer.write_u16(0x00000199); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    writer.write_u32(obj.creature_id);

    writer.write_u32(obj.kill_count);

    writer.write_u32(obj.required_kill_count);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_QUESTUPDATE_ADD_ITEM SMSG_QUESTUPDATE_ADD_ITEM_read(Reader& reader) {
    SMSG_QUESTUPDATE_ADD_ITEM obj{};

    obj.required_item_id = reader.read_u32();

    obj.items_required = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTUPDATE_ADD_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x0000019a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.required_item_id);

    writer.write_u32(obj.items_required);

    return writer.m_buf;
}

CMSG_QUEST_CONFIRM_ACCEPT CMSG_QUEST_CONFIRM_ACCEPT_read(Reader& reader) {
    CMSG_QUEST_CONFIRM_ACCEPT obj{};

    obj.quest_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUEST_CONFIRM_ACCEPT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000019b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    return writer.m_buf;
}

static size_t SMSG_QUEST_CONFIRM_ACCEPT_size(const SMSG_QUEST_CONFIRM_ACCEPT& obj) {
    return 13 + obj.quest_title.size();
}

SMSG_QUEST_CONFIRM_ACCEPT SMSG_QUEST_CONFIRM_ACCEPT_read(Reader& reader) {
    SMSG_QUEST_CONFIRM_ACCEPT obj{};

    obj.quest_id = reader.read_u32();

    obj.quest_title = reader.read_cstring();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUEST_CONFIRM_ACCEPT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_QUEST_CONFIRM_ACCEPT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_QUEST_CONFIRM_ACCEPT_size(obj) + 2)); /* size */

    writer.write_u16(0x0000019c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    writer.write_cstring(obj.quest_title);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_PUSHQUESTTOPARTY CMSG_PUSHQUESTTOPARTY_read(Reader& reader) {
    CMSG_PUSHQUESTTOPARTY obj{};

    obj.quest_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PUSHQUESTTOPARTY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000019d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    return writer.m_buf;
}

CMSG_LIST_INVENTORY CMSG_LIST_INVENTORY_read(Reader& reader) {
    CMSG_LIST_INVENTORY obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LIST_INVENTORY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000019e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_LIST_INVENTORY_size(const SMSG_LIST_INVENTORY& obj) {
    return 9 + 32 * obj.items.size();
}

SMSG_LIST_INVENTORY SMSG_LIST_INVENTORY_read(Reader& reader) {
    SMSG_LIST_INVENTORY obj{};

    obj.vendor = reader.read_u64();

    auto amount_of_items = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_items; ++i) {
        obj.items.push_back(::wow_world_messages::wrath::ListInventoryItem_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LIST_INVENTORY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LIST_INVENTORY_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LIST_INVENTORY_size(obj) + 2)); /* size */

    writer.write_u16(0x0000019f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.vendor);

    writer.write_u8(static_cast<uint8_t>(obj.items.size()));

    for (const auto& v : obj.items) {
        ListInventoryItem_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_SELL_ITEM CMSG_SELL_ITEM_read(Reader& reader) {
    CMSG_SELL_ITEM obj{};

    obj.vendor = reader.read_u64();

    obj.item = reader.read_u64();

    obj.amount = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SELL_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0011);

    writer.write_u16_be(static_cast<uint16_t>(0x0011 + 4)); /* size */

    writer.write_u32(0x000001a0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.vendor);

    writer.write_u64(obj.item);

    writer.write_u8(obj.amount);

    return writer.m_buf;
}

SMSG_SELL_ITEM SMSG_SELL_ITEM_read(Reader& reader) {
    SMSG_SELL_ITEM obj{};

    obj.guid = reader.read_u64();

    obj.item = reader.read_u64();

    obj.result = static_cast<SellItemResult>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SELL_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0011);

    writer.write_u16_be(static_cast<uint16_t>(0x0011 + 2)); /* size */

    writer.write_u16(0x000001a1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u64(obj.item);

    writer.write_u8(static_cast<uint8_t>(obj.result));

    return writer.m_buf;
}

CMSG_BUY_ITEM CMSG_BUY_ITEM_read(Reader& reader) {
    CMSG_BUY_ITEM obj{};

    obj.vendor = reader.read_u64();

    obj.item = reader.read_u32();

    obj.slot = reader.read_u32();

    obj.amount = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BUY_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0011);

    writer.write_u16_be(static_cast<uint16_t>(0x0011 + 4)); /* size */

    writer.write_u32(0x000001a2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.vendor);

    writer.write_u32(obj.item);

    writer.write_u32(obj.slot);

    writer.write_u8(obj.amount);

    return writer.m_buf;
}

CMSG_BUY_ITEM_IN_SLOT CMSG_BUY_ITEM_IN_SLOT_read(Reader& reader) {
    CMSG_BUY_ITEM_IN_SLOT obj{};

    obj.vendor = reader.read_u64();

    obj.item = reader.read_u32();

    obj.vendor_slot = reader.read_u32();

    obj.bag = reader.read_u64();

    obj.bag_slot = reader.read_u8();

    obj.amount = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BUY_ITEM_IN_SLOT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x001a);

    writer.write_u16_be(static_cast<uint16_t>(0x001a + 4)); /* size */

    writer.write_u32(0x000001a3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.vendor);

    writer.write_u32(obj.item);

    writer.write_u32(obj.vendor_slot);

    writer.write_u64(obj.bag);

    writer.write_u8(obj.bag_slot);

    writer.write_u8(obj.amount);

    return writer.m_buf;
}

SMSG_BUY_ITEM SMSG_BUY_ITEM_read(Reader& reader) {
    SMSG_BUY_ITEM obj{};

    obj.guid = reader.read_u64();

    obj.vendor_slot = reader.read_u32();

    obj.amount_for_sale = reader.read_u32();

    obj.amount_bought = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BUY_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 2)); /* size */

    writer.write_u16(0x000001a4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.vendor_slot);

    writer.write_u32(obj.amount_for_sale);

    writer.write_u32(obj.amount_bought);

    return writer.m_buf;
}

SMSG_BUY_FAILED SMSG_BUY_FAILED_read(Reader& reader) {
    SMSG_BUY_FAILED obj{};

    obj.guid = reader.read_u64();

    obj.item = reader.read_u32();

    obj.result = static_cast<BuyResult>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BUY_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000d);

    writer.write_u16_be(static_cast<uint16_t>(0x000d + 2)); /* size */

    writer.write_u16(0x000001a5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.item);

    writer.write_u8(static_cast<uint8_t>(obj.result));

    return writer.m_buf;
}

static size_t SMSG_SHOWTAXINODES_size(const SMSG_SHOWTAXINODES& obj) {
    return 16 + 4 * obj.nodes.size();
}

SMSG_SHOWTAXINODES SMSG_SHOWTAXINODES_read(Reader& reader, size_t body_size) {
    SMSG_SHOWTAXINODES obj{};
    size_t _size = 0;

    obj.unknown1 = reader.read_u32();
    _size += 4;

    obj.guid = reader.read_u64();
    _size += 8;

    obj.nearest_node = reader.read_u32();
    _size += 4;

    while (_size < body_size) {
        obj.nodes.push_back(reader.read_u32());
        _size += 4;
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SHOWTAXINODES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SHOWTAXINODES_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SHOWTAXINODES_size(obj) + 2)); /* size */

    writer.write_u16(0x000001a9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown1);

    writer.write_u64(obj.guid);

    writer.write_u32(obj.nearest_node);

    for (const auto& v : obj.nodes) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

CMSG_TAXINODE_STATUS_QUERY CMSG_TAXINODE_STATUS_QUERY_read(Reader& reader) {
    CMSG_TAXINODE_STATUS_QUERY obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TAXINODE_STATUS_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001aa); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_TAXINODE_STATUS SMSG_TAXINODE_STATUS_read(Reader& reader) {
    SMSG_TAXINODE_STATUS obj{};

    obj.guid = reader.read_u64();

    obj.taxi_mask_node_known = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TAXINODE_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 2)); /* size */

    writer.write_u16(0x000001ab); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_bool8(obj.taxi_mask_node_known);

    return writer.m_buf;
}

CMSG_TAXIQUERYAVAILABLENODES CMSG_TAXIQUERYAVAILABLENODES_read(Reader& reader) {
    CMSG_TAXIQUERYAVAILABLENODES obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TAXIQUERYAVAILABLENODES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001ac); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_ACTIVATETAXI CMSG_ACTIVATETAXI_read(Reader& reader) {
    CMSG_ACTIVATETAXI obj{};

    obj.guid = reader.read_u64();

    obj.source_node = reader.read_u32();

    obj.destination_node = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ACTIVATETAXI::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 4)); /* size */

    writer.write_u32(0x000001ad); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.source_node);

    writer.write_u32(obj.destination_node);

    return writer.m_buf;
}

SMSG_ACTIVATETAXIREPLY SMSG_ACTIVATETAXIREPLY_read(Reader& reader) {
    SMSG_ACTIVATETAXIREPLY obj{};

    obj.reply = static_cast<ActivateTaxiReply>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ACTIVATETAXIREPLY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000001ae); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.reply));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_NEW_TAXI_PATH::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000001af); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_TRAINER_LIST CMSG_TRAINER_LIST_read(Reader& reader) {
    CMSG_TRAINER_LIST obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TRAINER_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001b0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_TRAINER_LIST_size(const SMSG_TRAINER_LIST& obj) {
    return 17 + 38 * obj.spells.size() + obj.greeting.size();
}

SMSG_TRAINER_LIST SMSG_TRAINER_LIST_read(Reader& reader) {
    SMSG_TRAINER_LIST obj{};

    obj.guid = reader.read_u64();

    obj.trainer_type = reader.read_u32();

    auto amount_of_spells = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_spells; ++i) {
        obj.spells.push_back(::wow_world_messages::wrath::TrainerSpell_read(reader));
    }

    obj.greeting = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TRAINER_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_TRAINER_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_TRAINER_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x000001b1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.trainer_type);

    writer.write_u32(static_cast<uint32_t>(obj.spells.size()));

    for (const auto& v : obj.spells) {
        TrainerSpell_write(writer, v);
    }

    writer.write_cstring(obj.greeting);

    return writer.m_buf;
}

CMSG_TRAINER_BUY_SPELL CMSG_TRAINER_BUY_SPELL_read(Reader& reader) {
    CMSG_TRAINER_BUY_SPELL obj{};

    obj.guid = reader.read_u64();

    obj.id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TRAINER_BUY_SPELL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x000001b2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.id);

    return writer.m_buf;
}

SMSG_TRAINER_BUY_SUCCEEDED SMSG_TRAINER_BUY_SUCCEEDED_read(Reader& reader) {
    SMSG_TRAINER_BUY_SUCCEEDED obj{};

    obj.guid = reader.read_u64();

    obj.id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TRAINER_BUY_SUCCEEDED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000001b3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.id);

    return writer.m_buf;
}

SMSG_TRAINER_BUY_FAILED SMSG_TRAINER_BUY_FAILED_read(Reader& reader) {
    SMSG_TRAINER_BUY_FAILED obj{};

    obj.guid = reader.read_u64();

    obj.id = reader.read_u32();

    obj.error = static_cast<TrainingFailureReason>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TRAINER_BUY_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x000001b4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.id);

    writer.write_u32(static_cast<uint32_t>(obj.error));

    return writer.m_buf;
}

CMSG_BINDER_ACTIVATE CMSG_BINDER_ACTIVATE_read(Reader& reader) {
    CMSG_BINDER_ACTIVATE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BINDER_ACTIVATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001b5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_BANKER_ACTIVATE CMSG_BANKER_ACTIVATE_read(Reader& reader) {
    CMSG_BANKER_ACTIVATE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BANKER_ACTIVATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001b7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_SHOW_BANK SMSG_SHOW_BANK_read(Reader& reader) {
    SMSG_SHOW_BANK obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SHOW_BANK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000001b8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_BUY_BANK_SLOT CMSG_BUY_BANK_SLOT_read(Reader& reader) {
    CMSG_BUY_BANK_SLOT obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BUY_BANK_SLOT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001b9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_BUY_BANK_SLOT_RESULT SMSG_BUY_BANK_SLOT_RESULT_read(Reader& reader) {
    SMSG_BUY_BANK_SLOT_RESULT obj{};

    obj.result = static_cast<BuyBankSlotResult>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BUY_BANK_SLOT_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000001ba); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.result));

    return writer.m_buf;
}

CMSG_PETITION_SHOWLIST CMSG_PETITION_SHOWLIST_read(Reader& reader) {
    CMSG_PETITION_SHOWLIST obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PETITION_SHOWLIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001bb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_PETITION_SHOWLIST_size(const SMSG_PETITION_SHOWLIST& obj) {
    return 9 + 24 * obj.petitions.size();
}

SMSG_PETITION_SHOWLIST SMSG_PETITION_SHOWLIST_read(Reader& reader) {
    SMSG_PETITION_SHOWLIST obj{};

    obj.npc = reader.read_u64();

    auto amount_of_petitions = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_petitions; ++i) {
        obj.petitions.push_back(::wow_world_messages::wrath::PetitionShowlist_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PETITION_SHOWLIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PETITION_SHOWLIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PETITION_SHOWLIST_size(obj) + 2)); /* size */

    writer.write_u16(0x000001bc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.npc);

    writer.write_u8(static_cast<uint8_t>(obj.petitions.size()));

    for (const auto& v : obj.petitions) {
        PetitionShowlist_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_PETITION_BUY_size(const CMSG_PETITION_BUY& obj) {
    size_t _size = 72 + obj.name.size() + obj.unknown3.size();

    for(const auto& v : obj.unknown15) {
        _size += v.size() + 1;
    }

    return _size;
}

CMSG_PETITION_BUY CMSG_PETITION_BUY_read(Reader& reader) {
    CMSG_PETITION_BUY obj{};

    obj.npc = reader.read_u64();

    obj.unknown1 = reader.read_u32();

    obj.unknown2 = reader.read_u64();

    obj.name = reader.read_cstring();

    obj.unknown3 = reader.read_cstring();

    obj.unknown4 = reader.read_u32();

    obj.unknown5 = reader.read_u32();

    obj.unknown6 = reader.read_u32();

    obj.unknown7 = reader.read_u32();

    obj.unknown8 = reader.read_u32();

    obj.unknown9 = reader.read_u32();

    obj.unknown10 = reader.read_u32();

    obj.unknown11 = reader.read_u16();

    obj.unknown12 = reader.read_u32();

    obj.unknown13 = reader.read_u32();

    obj.unknown14 = reader.read_u32();

    for (auto i = 0; i < 10; ++i) {
        obj.unknown15[i] = reader.read_cstring();
    }

    obj.index = reader.read_u32();

    obj.unknown16 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PETITION_BUY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_PETITION_BUY_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_PETITION_BUY_size(obj) + 4)); /* size */

    writer.write_u32(0x000001bd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.npc);

    writer.write_u32(obj.unknown1);

    writer.write_u64(obj.unknown2);

    writer.write_cstring(obj.name);

    writer.write_cstring(obj.unknown3);

    writer.write_u32(obj.unknown4);

    writer.write_u32(obj.unknown5);

    writer.write_u32(obj.unknown6);

    writer.write_u32(obj.unknown7);

    writer.write_u32(obj.unknown8);

    writer.write_u32(obj.unknown9);

    writer.write_u32(obj.unknown10);

    writer.write_u16(obj.unknown11);

    writer.write_u32(obj.unknown12);

    writer.write_u32(obj.unknown13);

    writer.write_u32(obj.unknown14);

    for (const auto& v : obj.unknown15) {
        writer.write_cstring(v);
    }

    writer.write_u32(obj.index);

    writer.write_u32(obj.unknown16);

    return writer.m_buf;
}

CMSG_PETITION_SHOW_SIGNATURES CMSG_PETITION_SHOW_SIGNATURES_read(Reader& reader) {
    CMSG_PETITION_SHOW_SIGNATURES obj{};

    obj.item = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PETITION_SHOW_SIGNATURES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001be); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    return writer.m_buf;
}

static size_t SMSG_PETITION_SHOW_SIGNATURES_size(const SMSG_PETITION_SHOW_SIGNATURES& obj) {
    return 21 + 12 * obj.signatures.size();
}

SMSG_PETITION_SHOW_SIGNATURES SMSG_PETITION_SHOW_SIGNATURES_read(Reader& reader) {
    SMSG_PETITION_SHOW_SIGNATURES obj{};

    obj.item = reader.read_u64();

    obj.owner = reader.read_u64();

    obj.petition = reader.read_u32();

    auto amount_of_signatures = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_signatures; ++i) {
        obj.signatures.push_back(::wow_world_messages::wrath::PetitionSignature_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PETITION_SHOW_SIGNATURES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PETITION_SHOW_SIGNATURES_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PETITION_SHOW_SIGNATURES_size(obj) + 2)); /* size */

    writer.write_u16(0x000001bf); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    writer.write_u64(obj.owner);

    writer.write_u32(obj.petition);

    writer.write_u8(static_cast<uint8_t>(obj.signatures.size()));

    for (const auto& v : obj.signatures) {
        PetitionSignature_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_PETITION_SIGN CMSG_PETITION_SIGN_read(Reader& reader) {
    CMSG_PETITION_SIGN obj{};

    obj.petition = reader.read_u64();

    obj.unknown1 = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PETITION_SIGN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x000001c0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.petition);

    writer.write_u8(obj.unknown1);

    return writer.m_buf;
}

SMSG_PETITION_SIGN_RESULTS SMSG_PETITION_SIGN_RESULTS_read(Reader& reader) {
    SMSG_PETITION_SIGN_RESULTS obj{};

    obj.petition = reader.read_u64();

    obj.owner = reader.read_u64();

    obj.result = static_cast<PetitionResult>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PETITION_SIGN_RESULTS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 2)); /* size */

    writer.write_u16(0x000001c1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.petition);

    writer.write_u64(obj.owner);

    writer.write_u32(static_cast<uint32_t>(obj.result));

    return writer.m_buf;
}

MSG_PETITION_DECLINE MSG_PETITION_DECLINE_read(Reader& reader) {
    MSG_PETITION_DECLINE obj{};

    obj.petition = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_PETITION_DECLINE::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001c2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.petition);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_PETITION_DECLINE::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000001c2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.petition);

    return writer.m_buf;
}

CMSG_OFFER_PETITION CMSG_OFFER_PETITION_read(Reader& reader) {
    CMSG_OFFER_PETITION obj{};

    obj.unknown0 = reader.read_u32();

    obj.petition = reader.read_u64();

    obj.target = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_OFFER_PETITION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 4)); /* size */

    writer.write_u32(0x000001c3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown0);

    writer.write_u64(obj.petition);

    writer.write_u64(obj.target);

    return writer.m_buf;
}

CMSG_TURN_IN_PETITION CMSG_TURN_IN_PETITION_read(Reader& reader) {
    CMSG_TURN_IN_PETITION obj{};

    obj.petition = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TURN_IN_PETITION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001c4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.petition);

    return writer.m_buf;
}

SMSG_TURN_IN_PETITION_RESULTS SMSG_TURN_IN_PETITION_RESULTS_read(Reader& reader) {
    SMSG_TURN_IN_PETITION_RESULTS obj{};

    obj.result = static_cast<PetitionResult>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TURN_IN_PETITION_RESULTS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000001c5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.result));

    return writer.m_buf;
}

CMSG_PETITION_QUERY CMSG_PETITION_QUERY_read(Reader& reader) {
    CMSG_PETITION_QUERY obj{};

    obj.guild_id = reader.read_u32();

    obj.petition = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PETITION_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x000001c6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.guild_id);

    writer.write_u64(obj.petition);

    return writer.m_buf;
}

static size_t SMSG_PETITION_QUERY_RESPONSE_size(const SMSG_PETITION_QUERY_RESPONSE& obj) {
    return 74 + obj.guild_name.size() + obj.body_text.size();
}

SMSG_PETITION_QUERY_RESPONSE SMSG_PETITION_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_PETITION_QUERY_RESPONSE obj{};

    obj.petition_id = reader.read_u32();

    obj.charter_owner = reader.read_u64();

    obj.guild_name = reader.read_cstring();

    obj.body_text = reader.read_cstring();

    obj.minimum_signatures = reader.read_u32();

    obj.maximum_signatures = reader.read_u32();

    obj.unknown1 = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    obj.unknown3 = reader.read_u32();

    obj.unknown4 = reader.read_u32();

    obj.unknown5 = reader.read_u32();

    obj.unknown6 = reader.read_u16();

    obj.unknown7 = reader.read_u32();

    obj.unknown8 = reader.read_u32();

    obj.unknown9 = reader.read_u32();

    for (auto i = 0; i < 10; ++i) {
        obj.unknown10[i] = reader.read_u8();
    }

    obj.unknown11 = reader.read_u32();

    obj.charter_type = static_cast<CharterType>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PETITION_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PETITION_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PETITION_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x000001c7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.petition_id);

    writer.write_u64(obj.charter_owner);

    writer.write_cstring(obj.guild_name);

    writer.write_cstring(obj.body_text);

    writer.write_u32(obj.minimum_signatures);

    writer.write_u32(obj.maximum_signatures);

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.unknown2);

    writer.write_u32(obj.unknown3);

    writer.write_u32(obj.unknown4);

    writer.write_u32(obj.unknown5);

    writer.write_u16(obj.unknown6);

    writer.write_u32(obj.unknown7);

    writer.write_u32(obj.unknown8);

    writer.write_u32(obj.unknown9);

    for (const auto& v : obj.unknown10) {
        writer.write_u8(v);
    }

    writer.write_u32(obj.unknown11);

    writer.write_u32(static_cast<uint32_t>(obj.charter_type));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FISH_NOT_HOOKED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000001c8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FISH_ESCAPED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000001c9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t CMSG_BUG_size(const CMSG_BUG& obj) {
    return 14 + obj.content.size() + obj.bug_type.size();
}

CMSG_BUG CMSG_BUG_read(Reader& reader) {
    CMSG_BUG obj{};

    obj.suggestion = reader.read_u32();

    obj.content = reader.read_sized_cstring();

    obj.bug_type = reader.read_sized_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BUG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_BUG_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_BUG_size(obj) + 4)); /* size */

    writer.write_u32(0x000001ca); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.suggestion);

    writer.write_sized_cstring(obj.content);

    writer.write_sized_cstring(obj.bug_type);

    return writer.m_buf;
}

static size_t SMSG_NOTIFICATION_size(const SMSG_NOTIFICATION& obj) {
    return 1 + obj.notification.size();
}

SMSG_NOTIFICATION SMSG_NOTIFICATION_read(Reader& reader) {
    SMSG_NOTIFICATION obj{};

    obj.notification = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_NOTIFICATION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_NOTIFICATION_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_NOTIFICATION_size(obj) + 2)); /* size */

    writer.write_u16(0x000001cb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.notification);

    return writer.m_buf;
}

CMSG_PLAYED_TIME CMSG_PLAYED_TIME_read(Reader& reader) {
    CMSG_PLAYED_TIME obj{};

    obj.show_on_ui = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PLAYED_TIME::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x000001cc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.show_on_ui);

    return writer.m_buf;
}

SMSG_PLAYED_TIME SMSG_PLAYED_TIME_read(Reader& reader) {
    SMSG_PLAYED_TIME obj{};

    obj.total_played_time = reader.read_u32();

    obj.level_played_time = reader.read_u32();

    obj.show_on_ui = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PLAYED_TIME::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 2)); /* size */

    writer.write_u16(0x000001cd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.total_played_time);

    writer.write_u32(obj.level_played_time);

    writer.write_bool8(obj.show_on_ui);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUERY_TIME::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000001ce); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_QUERY_TIME_RESPONSE SMSG_QUERY_TIME_RESPONSE_read(Reader& reader) {
    SMSG_QUERY_TIME_RESPONSE obj{};

    obj.time = reader.read_u32();

    obj.time_until_daily_quest_reset = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUERY_TIME_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000001cf); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.time);

    writer.write_u32(obj.time_until_daily_quest_reset);

    return writer.m_buf;
}

static size_t SMSG_LOG_XPGAIN_size(const SMSG_LOG_XPGAIN& obj) {
    size_t _size = 14;

    if (obj.exp_type == ExperienceAwardType::NON_KILL) {
        _size += 8;
    }

    return _size;
}

SMSG_LOG_XPGAIN SMSG_LOG_XPGAIN_read(Reader& reader) {
    SMSG_LOG_XPGAIN obj{};

    obj.target = reader.read_u64();

    obj.total_exp = reader.read_u32();

    obj.exp_type = static_cast<ExperienceAwardType>(reader.read_u8());

    if (obj.exp_type == ExperienceAwardType::NON_KILL) {
        obj.experience_without_rested = reader.read_u32();

        obj.exp_group_bonus = reader.read_float();

    }
    obj.exp_includes_recruit_a_friend_bonus = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOG_XPGAIN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LOG_XPGAIN_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LOG_XPGAIN_size(obj) + 2)); /* size */

    writer.write_u16(0x000001d0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.target);

    writer.write_u32(obj.total_exp);

    writer.write_u8(static_cast<uint8_t>(obj.exp_type));

    if (obj.exp_type == ExperienceAwardType::NON_KILL) {
        writer.write_u32(obj.experience_without_rested);

        writer.write_float(obj.exp_group_bonus);

    }
    writer.write_bool8(obj.exp_includes_recruit_a_friend_bonus);

    return writer.m_buf;
}

CMSG_RECLAIM_CORPSE CMSG_RECLAIM_CORPSE_read(Reader& reader) {
    CMSG_RECLAIM_CORPSE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_RECLAIM_CORPSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001d2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_WRAP_ITEM CMSG_WRAP_ITEM_read(Reader& reader) {
    CMSG_WRAP_ITEM obj{};

    obj.gift_bag_index = reader.read_u8();

    obj.gift_slot = reader.read_u8();

    obj.item_bag_index = reader.read_u8();

    obj.item_slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_WRAP_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x000001d3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.gift_bag_index);

    writer.write_u8(obj.gift_slot);

    writer.write_u8(obj.item_bag_index);

    writer.write_u8(obj.item_slot);

    return writer.m_buf;
}

SMSG_LEVELUP_INFO SMSG_LEVELUP_INFO_read(Reader& reader) {
    SMSG_LEVELUP_INFO obj{};

    obj.new_level = reader.read_u32();

    obj.health = reader.read_u32();

    obj.mana = reader.read_u32();

    obj.rage = reader.read_u32();

    obj.focus = reader.read_u32();

    obj.energy = reader.read_u32();

    obj.happiness = reader.read_u32();

    obj.rune = reader.read_u32();

    obj.runic_power = reader.read_u32();

    obj.strength = reader.read_u32();

    obj.agility = reader.read_u32();

    obj.stamina = reader.read_u32();

    obj.intellect = reader.read_u32();

    obj.spirit = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LEVELUP_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0038);

    writer.write_u16_be(static_cast<uint16_t>(0x0038 + 2)); /* size */

    writer.write_u16(0x000001d4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.new_level);

    writer.write_u32(obj.health);

    writer.write_u32(obj.mana);

    writer.write_u32(obj.rage);

    writer.write_u32(obj.focus);

    writer.write_u32(obj.energy);

    writer.write_u32(obj.happiness);

    writer.write_u32(obj.rune);

    writer.write_u32(obj.runic_power);

    writer.write_u32(obj.strength);

    writer.write_u32(obj.agility);

    writer.write_u32(obj.stamina);

    writer.write_u32(obj.intellect);

    writer.write_u32(obj.spirit);

    return writer.m_buf;
}

MSG_MINIMAP_PING_Client MSG_MINIMAP_PING_Client_read(Reader& reader) {
    MSG_MINIMAP_PING_Client obj{};

    obj.position_x = reader.read_float();

    obj.position_y = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MINIMAP_PING_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001d5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_float(obj.position_x);

    writer.write_float(obj.position_y);

    return writer.m_buf;
}

MSG_MINIMAP_PING_Server MSG_MINIMAP_PING_Server_read(Reader& reader) {
    MSG_MINIMAP_PING_Server obj{};

    obj.guid = reader.read_u64();

    obj.position_x = reader.read_float();

    obj.position_y = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MINIMAP_PING_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x000001d5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_float(obj.position_x);

    writer.write_float(obj.position_y);

    return writer.m_buf;
}

static size_t SMSG_ENCHANTMENTLOG_size(const SMSG_ENCHANTMENTLOG& obj) {
    return 9 + ::wow_world_messages::util::wwm_packed_guid_size(obj.target) + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster);
}

SMSG_ENCHANTMENTLOG SMSG_ENCHANTMENTLOG_read(Reader& reader) {
    SMSG_ENCHANTMENTLOG obj{};

    obj.target = reader.read_packed_guid();

    obj.caster = reader.read_packed_guid();

    obj.item = reader.read_u32();

    obj.spell = reader.read_u32();

    obj.show_affiliation = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ENCHANTMENTLOG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ENCHANTMENTLOG_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ENCHANTMENTLOG_size(obj) + 2)); /* size */

    writer.write_u16(0x000001d7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.target);

    writer.write_packed_guid(obj.caster);

    writer.write_u32(obj.item);

    writer.write_u32(obj.spell);

    writer.write_bool8(obj.show_affiliation);

    return writer.m_buf;
}

SMSG_START_MIRROR_TIMER SMSG_START_MIRROR_TIMER_read(Reader& reader) {
    SMSG_START_MIRROR_TIMER obj{};

    obj.timer = static_cast<TimerType>(reader.read_u32());

    obj.time_remaining = reader.read_u32();

    obj.duration = reader.read_u32();

    obj.scale = reader.read_u32();

    obj.is_frozen = reader.read_bool8();

    obj.id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_START_MIRROR_TIMER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0015);

    writer.write_u16_be(static_cast<uint16_t>(0x0015 + 2)); /* size */

    writer.write_u16(0x000001d9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.timer));

    writer.write_u32(obj.time_remaining);

    writer.write_u32(obj.duration);

    writer.write_u32(obj.scale);

    writer.write_bool8(obj.is_frozen);

    writer.write_u32(obj.id);

    return writer.m_buf;
}

SMSG_PAUSE_MIRROR_TIMER SMSG_PAUSE_MIRROR_TIMER_read(Reader& reader) {
    SMSG_PAUSE_MIRROR_TIMER obj{};

    obj.timer = static_cast<TimerType>(reader.read_u32());

    obj.is_frozen = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PAUSE_MIRROR_TIMER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0005);

    writer.write_u16_be(static_cast<uint16_t>(0x0005 + 2)); /* size */

    writer.write_u16(0x000001da); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.timer));

    writer.write_bool8(obj.is_frozen);

    return writer.m_buf;
}

SMSG_STOP_MIRROR_TIMER SMSG_STOP_MIRROR_TIMER_read(Reader& reader) {
    SMSG_STOP_MIRROR_TIMER obj{};

    obj.timer = static_cast<TimerType>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_STOP_MIRROR_TIMER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000001db); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.timer));

    return writer.m_buf;
}

CMSG_PING CMSG_PING_read(Reader& reader) {
    CMSG_PING obj{};

    obj.sequence_id = reader.read_u32();

    obj.round_time_in_ms = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PING::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001dc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.sequence_id);

    writer.write_u32(obj.round_time_in_ms);

    return writer.m_buf;
}

SMSG_PONG SMSG_PONG_read(Reader& reader) {
    SMSG_PONG obj{};

    obj.sequence_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PONG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000001dd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.sequence_id);

    return writer.m_buf;
}

SMSG_CLEAR_COOLDOWN SMSG_CLEAR_COOLDOWN_read(Reader& reader) {
    SMSG_CLEAR_COOLDOWN obj{};

    obj.id = reader.read_u32();

    obj.target = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CLEAR_COOLDOWN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000001de); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.id);

    writer.write_u64(obj.target);

    return writer.m_buf;
}

SMSG_GAMEOBJECT_PAGETEXT SMSG_GAMEOBJECT_PAGETEXT_read(Reader& reader) {
    SMSG_GAMEOBJECT_PAGETEXT obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GAMEOBJECT_PAGETEXT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000001df); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_SETSHEATHED CMSG_SETSHEATHED_read(Reader& reader) {
    CMSG_SETSHEATHED obj{};

    obj.sheathed = static_cast<SheathState>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SETSHEATHED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x000001e0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.sheathed));

    return writer.m_buf;
}

SMSG_SPELL_DELAYED SMSG_SPELL_DELAYED_read(Reader& reader) {
    SMSG_SPELL_DELAYED obj{};

    obj.guid = reader.read_u64();

    obj.delay_time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELL_DELAYED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000001e2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.delay_time);

    return writer.m_buf;
}

static size_t CMSG_QUEST_POI_QUERY_size(const CMSG_QUEST_POI_QUERY& obj) {
    return 4 + 4 * obj.points_of_interests.size();
}

CMSG_QUEST_POI_QUERY CMSG_QUEST_POI_QUERY_read(Reader& reader) {
    CMSG_QUEST_POI_QUERY obj{};

    auto amount_of_pois = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_pois; ++i) {
        obj.points_of_interests.push_back(reader.read_u32());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUEST_POI_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_QUEST_POI_QUERY_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_QUEST_POI_QUERY_size(obj) + 4)); /* size */

    writer.write_u32(0x000001e3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.points_of_interests.size()));

    for (const auto& v : obj.points_of_interests) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

static size_t SMSG_QUEST_POI_QUERY_RESPONSE_size(const SMSG_QUEST_POI_QUERY_RESPONSE& obj) {
    size_t _size = 4;

    for(const auto& v : obj.quests) {
        _size += QuestPoiList_size(v);
    }

    return _size;
}

SMSG_QUEST_POI_QUERY_RESPONSE SMSG_QUEST_POI_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_QUEST_POI_QUERY_RESPONSE obj{};

    auto amount_of_quests = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_quests; ++i) {
        obj.quests.push_back(::wow_world_messages::wrath::QuestPoiList_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUEST_POI_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_QUEST_POI_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_QUEST_POI_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x000001e4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.quests.size()));

    for (const auto& v : obj.quests) {
        QuestPoiList_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_ITEM_TIME_UPDATE SMSG_ITEM_TIME_UPDATE_read(Reader& reader) {
    SMSG_ITEM_TIME_UPDATE obj{};

    obj.guid = reader.read_u64();

    obj.duration = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ITEM_TIME_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000001ea); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.duration);

    return writer.m_buf;
}

SMSG_ITEM_ENCHANT_TIME_UPDATE SMSG_ITEM_ENCHANT_TIME_UPDATE_read(Reader& reader) {
    SMSG_ITEM_ENCHANT_TIME_UPDATE obj{};

    obj.item = reader.read_u64();

    obj.slot = reader.read_u32();

    obj.duration = reader.read_u32();

    obj.player = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ITEM_ENCHANT_TIME_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0018);

    writer.write_u16_be(static_cast<uint16_t>(0x0018 + 2)); /* size */

    writer.write_u16(0x000001eb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    writer.write_u32(obj.slot);

    writer.write_u32(obj.duration);

    writer.write_u64(obj.player);

    return writer.m_buf;
}

SMSG_AUTH_CHALLENGE SMSG_AUTH_CHALLENGE_read(Reader& reader) {
    SMSG_AUTH_CHALLENGE obj{};

    obj.unknown1 = reader.read_u32();

    obj.server_seed = reader.read_u32();

    for (auto i = 0; i < 32; ++i) {
        obj.seed[i] = reader.read_u8();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AUTH_CHALLENGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0028);

    writer.write_u16_be(static_cast<uint16_t>(0x0028 + 2)); /* size */

    writer.write_u16(0x000001ec); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.server_seed);

    for (const auto& v : obj.seed) {
        writer.write_u8(v);
    }

    return writer.m_buf;
}

static size_t CMSG_AUTH_SESSION_size(const CMSG_AUTH_SESSION& obj) {
    size_t _size = 57 + obj.username.size();

    auto writer = Writer(0);
    for (const auto& v : obj.addon_info) {
        writer.write_u8(v);
    }

    if (!writer.m_buf.empty()) {
        _size += ::wow_world_messages::util::compress_data(writer.m_buf).size();
    }

    return _size;
}

CMSG_AUTH_SESSION CMSG_AUTH_SESSION_read(Reader& reader, size_t body_size) {
    CMSG_AUTH_SESSION obj{};
    size_t _size = 0;

    obj.client_build = reader.read_u32();
    _size += 4;

    obj.login_server_id = reader.read_u32();
    _size += 4;

    obj.username = reader.read_cstring();
    _size += obj.username.size() + 1;

    obj.login_server_type = reader.read_u32();
    _size += 4;

    obj.client_seed = reader.read_u32();
    _size += 4;

    obj.region_id = reader.read_u32();
    _size += 4;

    obj.battleground_id = reader.read_u32();
    _size += 4;

    obj.realm_id = reader.read_u32();
    _size += 4;

    obj.dos_response = reader.read_u64();
    _size += 8;

    for (auto i = 0; i < 20; ++i) {
        obj.client_proof[i] = reader.read_u8();
        _size += 1;
    }

    if((body_size - _size) == 0) {
        return obj;
    }

    /* addon_info_decompressed_size: u32 */
    auto addon_info_decompressed_size = reader.read_u32();
    (void)addon_info_decompressed_size;
    _size += 4;

    auto addon_info_compressed_data = std::vector<unsigned char>(body_size - _size, 0);
    for(size_t i = 0; i < body_size - _size; ++i) {
        addon_info_compressed_data[i] = reader.read_u8();
    }

    if (addon_info_decompressed_size == 0) {
        return obj;
    }

    auto addon_info_decompressed_data = ::wow_world_messages::util::decompress_data(addon_info_compressed_data);

    if (addon_info_decompressed_data.empty()) {
        return obj;
    }

    auto addon_info_new_reader = ByteReader(addon_info_decompressed_data);

    while (!addon_info_new_reader.is_at_end()) {
        obj.addon_info.push_back(addon_info_new_reader.read_u8());
        _size += 1;
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUTH_SESSION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_AUTH_SESSION_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_AUTH_SESSION_size(obj) + 4)); /* size */

    writer.write_u32(0x000001ed); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.client_build);

    writer.write_u32(obj.login_server_id);

    writer.write_cstring(obj.username);

    writer.write_u32(obj.login_server_type);

    writer.write_u32(obj.client_seed);

    writer.write_u32(obj.region_id);

    writer.write_u32(obj.battleground_id);

    writer.write_u32(obj.realm_id);

    writer.write_u64(obj.dos_response);

    for (const auto& v : obj.client_proof) {
        writer.write_u8(v);
    }

    auto old_writer = writer;
    writer = Writer(0);

    for (const auto& v : obj.addon_info) {
        writer.write_u8(v);
    }

    if (!writer.m_buf.empty()) {
        auto addon_info_compressed_data = ::wow_world_messages::util::compress_data(writer.m_buf);
        old_writer.write_u32(static_cast<uint32_t>(addon_info_compressed_data.size()));

        for (const auto v : addon_info_compressed_data) {
            old_writer.write_u8(v);
        }
    }
    else {
        old_writer.write_u32(0);
    }

    writer = old_writer;

    return writer.m_buf;
}

static size_t SMSG_AUTH_RESPONSE_size(const SMSG_AUTH_RESPONSE& obj) {
    size_t _size = 1;

    if (obj.result == WorldResult::AUTH_OK) {
        _size += 10;
    }
    else if (obj.result == WorldResult::AUTH_WAIT_QUEUE) {
        _size += 5;
    }

    return _size;
}

SMSG_AUTH_RESPONSE SMSG_AUTH_RESPONSE_read(Reader& reader) {
    SMSG_AUTH_RESPONSE obj{};

    obj.result = static_cast<WorldResult>(reader.read_u8());

    if (obj.result == WorldResult::AUTH_OK) {
        obj.billing_time = reader.read_u32();

        obj.billing_flags = static_cast<BillingPlanFlags>(reader.read_u8());

        obj.billing_rested = reader.read_u32();

        obj.expansion = static_cast<Expansion>(reader.read_u8());

    }
    else if (obj.result == WorldResult::AUTH_WAIT_QUEUE) {
        obj.queue_position = reader.read_u32();

        obj.realm_has_free_character_migration = reader.read_bool8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AUTH_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_AUTH_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_AUTH_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x000001ee); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    if (obj.result == WorldResult::AUTH_OK) {
        writer.write_u32(obj.billing_time);

        writer.write_u8(static_cast<uint8_t>(obj.billing_flags));

        writer.write_u32(obj.billing_rested);

        writer.write_u8(static_cast<uint8_t>(obj.expansion));

    }
    else if (obj.result == WorldResult::AUTH_WAIT_QUEUE) {
        writer.write_u32(obj.queue_position);

        writer.write_bool8(obj.realm_has_free_character_migration);

    }
    return writer.m_buf;
}

static size_t CMSG_PET_CAST_SPELL_size(const CMSG_PET_CAST_SPELL& obj) {
    size_t _size = 14 + SpellCastTargets_size(obj.targets);

    if (obj.cast_flags == ClientCastFlags::EXTRA) {
        _size += 9;

        if (obj.movement_data == ClientMovementData::PRESENT) {
            _size += 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.movement) + MovementInfo_size(obj.info);
        }

    }

    return _size;
}

CMSG_PET_CAST_SPELL CMSG_PET_CAST_SPELL_read(Reader& reader) {
    CMSG_PET_CAST_SPELL obj{};

    obj.guid = reader.read_u64();

    obj.cast_count = reader.read_u8();

    obj.id = reader.read_u32();

    obj.cast_flags = static_cast<ClientCastFlags>(reader.read_u8());

    obj.targets = ::wow_world_messages::wrath::SpellCastTargets_read(reader);

    if (obj.cast_flags == ClientCastFlags::EXTRA) {
        obj.elevation = reader.read_float();

        obj.speed = reader.read_float();

        obj.movement_data = static_cast<ClientMovementData>(reader.read_u8());

        if (obj.movement_data == ClientMovementData::PRESENT) {
            obj.opcode = reader.read_u32();

            obj.movement = reader.read_packed_guid();

            obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

        }
    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_CAST_SPELL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_PET_CAST_SPELL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_PET_CAST_SPELL_size(obj) + 4)); /* size */

    writer.write_u32(0x000001f0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(obj.cast_count);

    writer.write_u32(obj.id);

    writer.write_u8(static_cast<uint8_t>(obj.cast_flags));

    SpellCastTargets_write(writer, obj.targets);

    if (obj.cast_flags == ClientCastFlags::EXTRA) {
        writer.write_float(obj.elevation);

        writer.write_float(obj.speed);

        writer.write_u8(static_cast<uint8_t>(obj.movement_data));

        if (obj.movement_data == ClientMovementData::PRESENT) {
            writer.write_u32(obj.opcode);

            writer.write_packed_guid(obj.movement);

            MovementInfo_write(writer, obj.info);

        }
    }
    return writer.m_buf;
}

MSG_SAVE_GUILD_EMBLEM_Client MSG_SAVE_GUILD_EMBLEM_Client_read(Reader& reader) {
    MSG_SAVE_GUILD_EMBLEM_Client obj{};

    obj.vendor = reader.read_u64();

    obj.emblem_style = reader.read_u32();

    obj.emblem_color = reader.read_u32();

    obj.border_style = reader.read_u32();

    obj.border_color = reader.read_u32();

    obj.background_color = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_SAVE_GUILD_EMBLEM_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x001c);

    writer.write_u16_be(static_cast<uint16_t>(0x001c + 4)); /* size */

    writer.write_u32(0x000001f1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.vendor);

    writer.write_u32(obj.emblem_style);

    writer.write_u32(obj.emblem_color);

    writer.write_u32(obj.border_style);

    writer.write_u32(obj.border_color);

    writer.write_u32(obj.background_color);

    return writer.m_buf;
}

MSG_SAVE_GUILD_EMBLEM_Server MSG_SAVE_GUILD_EMBLEM_Server_read(Reader& reader) {
    MSG_SAVE_GUILD_EMBLEM_Server obj{};

    obj.result = static_cast<GuildEmblemResult>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_SAVE_GUILD_EMBLEM_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000001f1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.result));

    return writer.m_buf;
}

MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE_read(Reader& reader) {
    MSG_TABARDVENDOR_ACTIVATE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_TABARDVENDOR_ACTIVATE::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001f2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_TABARDVENDOR_ACTIVATE::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000001f2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_PLAY_SPELL_VISUAL SMSG_PLAY_SPELL_VISUAL_read(Reader& reader) {
    SMSG_PLAY_SPELL_VISUAL obj{};

    obj.guid = reader.read_u64();

    obj.spell_art_kit = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PLAY_SPELL_VISUAL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000001f3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.spell_art_kit);

    return writer.m_buf;
}

CMSG_ZONEUPDATE CMSG_ZONEUPDATE_read(Reader& reader) {
    CMSG_ZONEUPDATE obj{};

    obj.area = static_cast<Area>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ZONEUPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x000001f4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.area));

    return writer.m_buf;
}

SMSG_PARTYKILLLOG SMSG_PARTYKILLLOG_read(Reader& reader) {
    SMSG_PARTYKILLLOG obj{};

    obj.player_with_killing_blow = reader.read_u64();

    obj.victim = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PARTYKILLLOG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x000001f5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player_with_killing_blow);

    writer.write_u64(obj.victim);

    return writer.m_buf;
}

static size_t SMSG_COMPRESSED_UPDATE_OBJECT_size(const SMSG_COMPRESSED_UPDATE_OBJECT& obj) {
    size_t _size = 4;

    for(const auto& v : obj.objects) {
        _size += Object_size(v);
    }

    return _size;
}

SMSG_COMPRESSED_UPDATE_OBJECT SMSG_COMPRESSED_UPDATE_OBJECT_read(Reader& reader, size_t body_size) {
    SMSG_COMPRESSED_UPDATE_OBJECT obj{};
    size_t _size = 0;

    const auto decompressed_size = reader.read_u32();

    if (decompressed_size == 0) {
        return obj;
    }

    auto compressed_data = std::vector<unsigned char>{};

    for (size_t i = 0; i < (body_size - 4); ++i)
    {
       compressed_data.push_back(reader.read_u8());
    }

    auto decompressed_data = ::wow_world_messages::util::decompress_data(compressed_data);
    auto byte_reader = ByteReader(decompressed_data);

    auto amount_of_objects = byte_reader.read_u32();
    _size += 4;

    for (uint32_t i = 0; i < amount_of_objects; ++i) {
        obj.objects.push_back(::wow_world_messages::wrath::Object_read(byte_reader));
        _size += wrath::Object_size(obj.objects.back());
    }

    (void)_size;
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_COMPRESSED_UPDATE_OBJECT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0 /* place holder */);

    writer.write_u16_be(static_cast<uint16_t>(0 /* place holder */ + 2)); /* size */

    writer.write_u16(0x000001f6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(SMSG_COMPRESSED_UPDATE_OBJECT_size(obj)));

    auto old_writer = writer;
    writer = Writer(0);
    writer.write_u32(static_cast<uint32_t>(obj.objects.size()));

    for (const auto& v : obj.objects) {
        Object_write(writer, v);
    }

    const auto compressed_data = ::wow_world_messages::util::compress_data(writer.m_buf);
    old_writer.write_u16_be_at_first_index(static_cast<uint16_t>(compressed_data.size() + 4 + 2));
    old_writer.m_buf.insert(old_writer.m_buf.end(), compressed_data.begin(), compressed_data.end());

    return old_writer.m_buf;
}

SMSG_PLAY_SPELL_IMPACT SMSG_PLAY_SPELL_IMPACT_read(Reader& reader) {
    SMSG_PLAY_SPELL_IMPACT obj{};

    obj.guid = reader.read_u64();

    obj.spell_visual_kit = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PLAY_SPELL_IMPACT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000001f7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.spell_visual_kit);

    return writer.m_buf;
}

SMSG_EXPLORATION_EXPERIENCE SMSG_EXPLORATION_EXPERIENCE_read(Reader& reader) {
    SMSG_EXPLORATION_EXPERIENCE obj{};

    obj.area = static_cast<Area>(reader.read_u32());

    obj.experience = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_EXPLORATION_EXPERIENCE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000001f8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.area));

    writer.write_u32(obj.experience);

    return writer.m_buf;
}

MSG_RANDOM_ROLL_Client MSG_RANDOM_ROLL_Client_read(Reader& reader) {
    MSG_RANDOM_ROLL_Client obj{};

    obj.minimum = reader.read_u32();

    obj.maximum = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_RANDOM_ROLL_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000001fb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.minimum);

    writer.write_u32(obj.maximum);

    return writer.m_buf;
}

MSG_RANDOM_ROLL_Server MSG_RANDOM_ROLL_Server_read(Reader& reader) {
    MSG_RANDOM_ROLL_Server obj{};

    obj.minimum = reader.read_u32();

    obj.maximum = reader.read_u32();

    obj.actual_roll = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_RANDOM_ROLL_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 2)); /* size */

    writer.write_u16(0x000001fb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.minimum);

    writer.write_u32(obj.maximum);

    writer.write_u32(obj.actual_roll);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_ENVIRONMENTAL_DAMAGE_LOG SMSG_ENVIRONMENTAL_DAMAGE_LOG_read(Reader& reader) {
    SMSG_ENVIRONMENTAL_DAMAGE_LOG obj{};

    obj.guid = reader.read_u64();

    obj.damage_type = static_cast<EnvironmentalDamageType>(reader.read_u8());

    obj.damage = reader.read_u32();

    obj.absorb = reader.read_u32();

    obj.resist = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ENVIRONMENTAL_DAMAGE_LOG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0015);

    writer.write_u16_be(static_cast<uint16_t>(0x0015 + 2)); /* size */

    writer.write_u16(0x000001fc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(static_cast<uint8_t>(obj.damage_type));

    writer.write_u32(obj.damage);

    writer.write_u32(obj.absorb);

    writer.write_u32(obj.resist);

    return writer.m_buf;
}

static size_t SMSG_LFG_PLAYER_REWARD_size(const SMSG_LFG_PLAYER_REWARD& obj) {
    return 30 + 12 * obj.rewards.size();
}

SMSG_LFG_PLAYER_REWARD SMSG_LFG_PLAYER_REWARD_read(Reader& reader) {
    SMSG_LFG_PLAYER_REWARD obj{};

    obj.random_dungeon_entry = reader.read_u32();

    obj.dungeon_finished_entry = reader.read_u32();

    obj.done = reader.read_bool8();

    obj.unknown1 = reader.read_u32();

    obj.money_reward = reader.read_u32();

    obj.experience_reward = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    obj.unknown3 = reader.read_u32();

    auto amount_of_rewards = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_rewards; ++i) {
        obj.rewards.push_back(::wow_world_messages::wrath::QuestGiverReward_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_PLAYER_REWARD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LFG_PLAYER_REWARD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LFG_PLAYER_REWARD_size(obj) + 2)); /* size */

    writer.write_u16(0x000001ff); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.random_dungeon_entry);

    writer.write_u32(obj.dungeon_finished_entry);

    writer.write_bool8(obj.done);

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.money_reward);

    writer.write_u32(obj.experience_reward);

    writer.write_u32(obj.unknown2);

    writer.write_u32(obj.unknown3);

    writer.write_u8(static_cast<uint8_t>(obj.rewards.size()));

    for (const auto& v : obj.rewards) {
        QuestGiverReward_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_LFG_TELEPORT_DENIED SMSG_LFG_TELEPORT_DENIED_read(Reader& reader) {
    SMSG_LFG_TELEPORT_DENIED obj{};

    obj.error = static_cast<LfgTeleportError>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_TELEPORT_DENIED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000200); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.error));

    return writer.m_buf;
}

CMSG_UNLEARN_SKILL CMSG_UNLEARN_SKILL_read(Reader& reader) {
    CMSG_UNLEARN_SKILL obj{};

    obj.skill = static_cast<Skill>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_UNLEARN_SKILL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000202); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.skill));

    return writer.m_buf;
}

SMSG_REMOVED_SPELL SMSG_REMOVED_SPELL_read(Reader& reader) {
    SMSG_REMOVED_SPELL obj{};

    obj.spell = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_REMOVED_SPELL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000203); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.spell);

    return writer.m_buf;
}

static size_t CMSG_GMTICKET_CREATE_size(const CMSG_GMTICKET_CREATE& obj) {
    size_t _size = 23 + obj.message.size() + 4 * obj.times.size();

    auto writer = Writer(0);
    for (const auto& v : obj.compressed_data) {
        writer.write_u8(v);
    }

    if (!writer.m_buf.empty()) {
        _size += ::wow_world_messages::util::compress_data(writer.m_buf).size();
    }

    return _size;
}

CMSG_GMTICKET_CREATE CMSG_GMTICKET_CREATE_read(Reader& reader, size_t body_size) {
    CMSG_GMTICKET_CREATE obj{};
    size_t _size = 0;

    obj.map = static_cast<Map>(reader.read_u32());
    _size += 4;

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);
    _size += 12;

    obj.message = reader.read_cstring();
    _size += obj.message.size() + 1;

    obj.needs_response = reader.read_bool8();
    _size += 1;

    obj.needs_more_help = reader.read_bool8();
    _size += 1;

    auto num_of_times = reader.read_u32();
    _size += 4;

    for (uint32_t i = 0; i < num_of_times; ++i) {
        obj.times.push_back(reader.read_u32());
        _size += 4;
    }

    if((body_size - _size) == 0) {
        return obj;
    }

    /* compressed_data_decompressed_size: u32 */
    auto compressed_data_decompressed_size = reader.read_u32();
    (void)compressed_data_decompressed_size;
    _size += 4;

    auto compressed_data_compressed_data = std::vector<unsigned char>(body_size - _size, 0);
    for(size_t i = 0; i < body_size - _size; ++i) {
        compressed_data_compressed_data[i] = reader.read_u8();
    }

    if (compressed_data_decompressed_size == 0) {
        return obj;
    }

    auto compressed_data_decompressed_data = ::wow_world_messages::util::decompress_data(compressed_data_compressed_data);

    if (compressed_data_decompressed_data.empty()) {
        return obj;
    }

    auto compressed_data_new_reader = ByteReader(compressed_data_decompressed_data);

    while (!compressed_data_new_reader.is_at_end()) {
        obj.compressed_data.push_back(compressed_data_new_reader.read_u8());
        _size += 1;
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GMTICKET_CREATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GMTICKET_CREATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GMTICKET_CREATE_size(obj) + 4)); /* size */

    writer.write_u32(0x00000205); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    Vector3d_write(writer, obj.position);

    writer.write_cstring(obj.message);

    writer.write_bool8(obj.needs_response);

    writer.write_bool8(obj.needs_more_help);

    writer.write_u32(static_cast<uint32_t>(obj.times.size()));

    for (const auto& v : obj.times) {
        writer.write_u32(v);
    }

    auto old_writer = writer;
    writer = Writer(0);

    for (const auto& v : obj.compressed_data) {
        writer.write_u8(v);
    }

    if (!writer.m_buf.empty()) {
        auto compressed_data_compressed_data = ::wow_world_messages::util::compress_data(writer.m_buf);
        old_writer.write_u32(static_cast<uint32_t>(compressed_data_compressed_data.size()));

        for (const auto v : compressed_data_compressed_data) {
            old_writer.write_u8(v);
        }
    }
    else {
        old_writer.write_u32(0);
    }

    writer = old_writer;

    return writer.m_buf;
}

SMSG_GMTICKET_CREATE SMSG_GMTICKET_CREATE_read(Reader& reader) {
    SMSG_GMTICKET_CREATE obj{};

    obj.response = static_cast<GmTicketResponse>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GMTICKET_CREATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000206); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.response));

    return writer.m_buf;
}

static size_t CMSG_GMTICKET_UPDATETEXT_size(const CMSG_GMTICKET_UPDATETEXT& obj) {
    return 1 + obj.message.size();
}

CMSG_GMTICKET_UPDATETEXT CMSG_GMTICKET_UPDATETEXT_read(Reader& reader) {
    CMSG_GMTICKET_UPDATETEXT obj{};

    obj.message = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GMTICKET_UPDATETEXT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GMTICKET_UPDATETEXT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GMTICKET_UPDATETEXT_size(obj) + 4)); /* size */

    writer.write_u32(0x00000207); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.message);

    return writer.m_buf;
}

SMSG_GMTICKET_UPDATETEXT SMSG_GMTICKET_UPDATETEXT_read(Reader& reader) {
    SMSG_GMTICKET_UPDATETEXT obj{};

    obj.response = static_cast<GmTicketResponse>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GMTICKET_UPDATETEXT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000208); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.response));

    return writer.m_buf;
}

static size_t SMSG_ACCOUNT_DATA_TIMES_size(const SMSG_ACCOUNT_DATA_TIMES& obj) {
    return 5 + cache_mask_size(obj.mask);
}

SMSG_ACCOUNT_DATA_TIMES SMSG_ACCOUNT_DATA_TIMES_read(Reader& reader) {
    SMSG_ACCOUNT_DATA_TIMES obj{};

    obj.unix_time = reader.read_u32();

    obj.unknown1 = reader.read_u8();

    obj.mask = wrath::cache_mask_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ACCOUNT_DATA_TIMES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ACCOUNT_DATA_TIMES_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ACCOUNT_DATA_TIMES_size(obj) + 2)); /* size */

    writer.write_u16(0x00000209); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unix_time);

    writer.write_u8(obj.unknown1);

    wrath::cache_mask_write(writer, obj.mask);

    return writer.m_buf;
}

CMSG_REQUEST_ACCOUNT_DATA CMSG_REQUEST_ACCOUNT_DATA_read(Reader& reader) {
    CMSG_REQUEST_ACCOUNT_DATA obj{};

    obj.data_type = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REQUEST_ACCOUNT_DATA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000020a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.data_type);

    return writer.m_buf;
}

static size_t CMSG_UPDATE_ACCOUNT_DATA_size(const CMSG_UPDATE_ACCOUNT_DATA& obj) {
    size_t _size = 8;

    auto writer = Writer(0);
    for (const auto& v : obj.compressed_data) {
        writer.write_u8(v);
    }

    if (!writer.m_buf.empty()) {
        _size += ::wow_world_messages::util::compress_data(writer.m_buf).size();
    }

    return _size;
}

CMSG_UPDATE_ACCOUNT_DATA CMSG_UPDATE_ACCOUNT_DATA_read(Reader& reader, size_t body_size) {
    CMSG_UPDATE_ACCOUNT_DATA obj{};
    size_t _size = 0;

    obj.data_type = reader.read_u32();
    _size += 4;

    obj.unix_time = reader.read_u32();
    _size += 4;

    if((body_size - _size) == 0) {
        return obj;
    }

    /* compressed_data_decompressed_size: u32 */
    auto compressed_data_decompressed_size = reader.read_u32();
    (void)compressed_data_decompressed_size;
    _size += 4;

    auto compressed_data_compressed_data = std::vector<unsigned char>(body_size - _size, 0);
    for(size_t i = 0; i < body_size - _size; ++i) {
        compressed_data_compressed_data[i] = reader.read_u8();
    }

    if (compressed_data_decompressed_size == 0) {
        return obj;
    }

    auto compressed_data_decompressed_data = ::wow_world_messages::util::decompress_data(compressed_data_compressed_data);

    if (compressed_data_decompressed_data.empty()) {
        return obj;
    }

    auto compressed_data_new_reader = ByteReader(compressed_data_decompressed_data);

    while (!compressed_data_new_reader.is_at_end()) {
        obj.compressed_data.push_back(compressed_data_new_reader.read_u8());
        _size += 1;
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_UPDATE_ACCOUNT_DATA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_UPDATE_ACCOUNT_DATA_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_UPDATE_ACCOUNT_DATA_size(obj) + 4)); /* size */

    writer.write_u32(0x0000020b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.data_type);

    writer.write_u32(obj.unix_time);

    auto old_writer = writer;
    writer = Writer(0);

    for (const auto& v : obj.compressed_data) {
        writer.write_u8(v);
    }

    if (!writer.m_buf.empty()) {
        auto compressed_data_compressed_data = ::wow_world_messages::util::compress_data(writer.m_buf);
        old_writer.write_u32(static_cast<uint32_t>(compressed_data_compressed_data.size()));

        for (const auto v : compressed_data_compressed_data) {
            old_writer.write_u8(v);
        }
    }
    else {
        old_writer.write_u32(0);
    }

    writer = old_writer;

    return writer.m_buf;
}

static size_t SMSG_UPDATE_ACCOUNT_DATA_size(const SMSG_UPDATE_ACCOUNT_DATA& obj) {
    return 8 + 1 * obj.compressed_data.size();
}

SMSG_UPDATE_ACCOUNT_DATA SMSG_UPDATE_ACCOUNT_DATA_read(Reader& reader, size_t body_size) {
    SMSG_UPDATE_ACCOUNT_DATA obj{};
    size_t _size = 0;

    obj.data_type = reader.read_u32();
    _size += 4;

    obj.decompressed_size = reader.read_u32();
    _size += 4;

    while (_size < body_size) {
        obj.compressed_data.push_back(reader.read_u8());
        _size += 1;
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_UPDATE_ACCOUNT_DATA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_UPDATE_ACCOUNT_DATA_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_UPDATE_ACCOUNT_DATA_size(obj) + 2)); /* size */

    writer.write_u16(0x0000020c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.data_type);

    writer.write_u32(obj.decompressed_size);

    for (const auto& v : obj.compressed_data) {
        writer.write_u8(v);
    }

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GMTICKET_GETTICKET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000211); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_GMTICKET_GETTICKET_size(const SMSG_GMTICKET_GETTICKET& obj) {
    size_t _size = 4;

    if (obj.status == GmTicketStatus::HAS_TEXT) {
        _size += 20 + obj.text.size();
    }

    return _size;
}

SMSG_GMTICKET_GETTICKET SMSG_GMTICKET_GETTICKET_read(Reader& reader) {
    SMSG_GMTICKET_GETTICKET obj{};

    obj.status = static_cast<GmTicketStatus>(reader.read_u32());

    if (obj.status == GmTicketStatus::HAS_TEXT) {
        obj.id = reader.read_u32();

        obj.text = reader.read_cstring();

        obj.need_more_help = reader.read_bool8();

        obj.days_since_ticket_creation = reader.read_float();

        obj.days_since_oldest_ticket_creation = reader.read_float();

        obj.days_since_last_updated = reader.read_float();

        obj.escalation_status = static_cast<GmTicketEscalationStatus>(reader.read_u8());

        obj.read_by_gm = reader.read_bool8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GMTICKET_GETTICKET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GMTICKET_GETTICKET_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GMTICKET_GETTICKET_size(obj) + 2)); /* size */

    writer.write_u16(0x00000212); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.status));

    if (obj.status == GmTicketStatus::HAS_TEXT) {
        writer.write_u32(obj.id);

        writer.write_cstring(obj.text);

        writer.write_bool8(obj.need_more_help);

        writer.write_float(obj.days_since_ticket_creation);

        writer.write_float(obj.days_since_oldest_ticket_creation);

        writer.write_float(obj.days_since_last_updated);

        writer.write_u8(static_cast<uint8_t>(obj.escalation_status));

        writer.write_bool8(obj.read_by_gm);

    }
    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_UNLEARN_TALENTS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000213); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT_size(const SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT& obj) {
    size_t _size = 4;

    if (obj.frame == EncounterFrame::ENGAGE|| obj.frame == EncounterFrame::DISENGAGE|| obj.frame == EncounterFrame::UPDATE_PRIORITY) {
        _size += 1 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
    }
    else if (obj.frame == EncounterFrame::ADD_TIMER|| obj.frame == EncounterFrame::ENABLE_OBJECTIVE|| obj.frame == EncounterFrame::DISABLE_OBJECTIVE) {
        _size += 1;
    }
    else if (obj.frame == EncounterFrame::UPDATE_OBJECTIVE) {
        _size += 2;
    }

    return _size;
}

SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT_read(Reader& reader) {
    SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT obj{};

    obj.frame = static_cast<EncounterFrame>(reader.read_u32());

    if (obj.frame == EncounterFrame::ENGAGE|| obj.frame == EncounterFrame::DISENGAGE|| obj.frame == EncounterFrame::UPDATE_PRIORITY) {
        obj.guid = reader.read_packed_guid();

        obj.parameter1 = reader.read_u8();

    }
    else if (obj.frame == EncounterFrame::ADD_TIMER|| obj.frame == EncounterFrame::ENABLE_OBJECTIVE|| obj.frame == EncounterFrame::DISABLE_OBJECTIVE) {
        obj.parameter2 = reader.read_u8();

    }
    else if (obj.frame == EncounterFrame::UPDATE_OBJECTIVE) {
        obj.parameter3 = reader.read_u8();

        obj.parameter4 = reader.read_u8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000214); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.frame));

    if (obj.frame == EncounterFrame::ENGAGE|| obj.frame == EncounterFrame::DISENGAGE|| obj.frame == EncounterFrame::UPDATE_PRIORITY) {
        writer.write_packed_guid(obj.guid);

        writer.write_u8(obj.parameter1);

    }
    else if (obj.frame == EncounterFrame::ADD_TIMER|| obj.frame == EncounterFrame::ENABLE_OBJECTIVE|| obj.frame == EncounterFrame::DISABLE_OBJECTIVE) {
        writer.write_u8(obj.parameter2);

    }
    else if (obj.frame == EncounterFrame::UPDATE_OBJECTIVE) {
        writer.write_u8(obj.parameter3);

        writer.write_u8(obj.parameter4);

    }
    return writer.m_buf;
}

SMSG_GAMEOBJECT_DESPAWN_ANIM SMSG_GAMEOBJECT_DESPAWN_ANIM_read(Reader& reader) {
    SMSG_GAMEOBJECT_DESPAWN_ANIM obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GAMEOBJECT_DESPAWN_ANIM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x00000215); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_CORPSE_QUERY_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000216); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t MSG_CORPSE_QUERY_Server_size(const MSG_CORPSE_QUERY_Server& obj) {
    size_t _size = 5;

    if (obj.result == CorpseQueryResult::FOUND) {
        _size += 20;
    }

    return _size;
}

MSG_CORPSE_QUERY_Server MSG_CORPSE_QUERY_Server_read(Reader& reader) {
    MSG_CORPSE_QUERY_Server obj{};

    obj.result = static_cast<CorpseQueryResult>(reader.read_u8());

    if (obj.result == CorpseQueryResult::FOUND) {
        obj.map = static_cast<Map>(reader.read_u32());

        obj.position = ::wow_world_messages::all::Vector3d_read(reader);

        obj.corpse_map = static_cast<Map>(reader.read_u32());

    }
    obj.unknown = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_CORPSE_QUERY_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_CORPSE_QUERY_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_CORPSE_QUERY_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x00000216); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    if (obj.result == CorpseQueryResult::FOUND) {
        writer.write_u32(static_cast<uint32_t>(obj.map));

        Vector3d_write(writer, obj.position);

        writer.write_u32(static_cast<uint32_t>(obj.corpse_map));

    }
    writer.write_u32(obj.unknown);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GMTICKET_DELETETICKET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000217); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_GMTICKET_DELETETICKET SMSG_GMTICKET_DELETETICKET_read(Reader& reader) {
    SMSG_GMTICKET_DELETETICKET obj{};

    obj.response = static_cast<GmTicketResponse>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GMTICKET_DELETETICKET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000218); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.response));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHAT_WRONG_FACTION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000219); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GMTICKET_SYSTEMSTATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000021a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_GMTICKET_SYSTEMSTATUS SMSG_GMTICKET_SYSTEMSTATUS_read(Reader& reader) {
    SMSG_GMTICKET_SYSTEMSTATUS obj{};

    obj.will_accept_tickets = static_cast<GmTicketQueueStatus>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GMTICKET_SYSTEMSTATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x0000021b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.will_accept_tickets));

    return writer.m_buf;
}

CMSG_SPIRIT_HEALER_ACTIVATE CMSG_SPIRIT_HEALER_ACTIVATE_read(Reader& reader) {
    CMSG_SPIRIT_HEALER_ACTIVATE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SPIRIT_HEALER_ACTIVATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000021c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_QUEST_FORCE_REMOVE SMSG_QUEST_FORCE_REMOVE_read(Reader& reader) {
    SMSG_QUEST_FORCE_REMOVE obj{};

    obj.quest_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUEST_FORCE_REMOVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x0000021e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    return writer.m_buf;
}

SMSG_SPIRIT_HEALER_CONFIRM SMSG_SPIRIT_HEALER_CONFIRM_read(Reader& reader) {
    SMSG_SPIRIT_HEALER_CONFIRM obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPIRIT_HEALER_CONFIRM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x00000222); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_GOSSIP_POI_size(const SMSG_GOSSIP_POI& obj) {
    return 21 + obj.location_name.size();
}

SMSG_GOSSIP_POI SMSG_GOSSIP_POI_read(Reader& reader) {
    SMSG_GOSSIP_POI obj{};

    obj.flags = reader.read_u32();

    obj.position = ::wow_world_messages::all::Vector2d_read(reader);

    obj.icon = reader.read_u32();

    obj.data = reader.read_u32();

    obj.location_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GOSSIP_POI::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GOSSIP_POI_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GOSSIP_POI_size(obj) + 2)); /* size */

    writer.write_u16(0x00000224); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.flags);

    Vector2d_write(writer, obj.position);

    writer.write_u32(obj.icon);

    writer.write_u32(obj.data);

    writer.write_cstring(obj.location_name);

    return writer.m_buf;
}

CMSG_CHAT_IGNORED CMSG_CHAT_IGNORED_read(Reader& reader) {
    CMSG_CHAT_IGNORED obj{};

    obj.guid = reader.read_u64();

    obj.unknown = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHAT_IGNORED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x00000225); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(obj.unknown);

    return writer.m_buf;
}

static size_t CMSG_GUILD_RANK_size(const CMSG_GUILD_RANK& obj) {
    return 61 + obj.rank_name.size();
}

CMSG_GUILD_RANK CMSG_GUILD_RANK_read(Reader& reader) {
    CMSG_GUILD_RANK obj{};

    obj.rank_id = reader.read_u32();

    obj.rights = reader.read_u32();

    obj.rank_name = reader.read_cstring();

    obj.money_per_day = reader.read_u32();

    for (auto i = 0; i < 6; ++i) {
        obj.bank_tab_rights[i] = ::wow_world_messages::wrath::GuildBankRights_read(reader);
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_RANK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_RANK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_RANK_size(obj) + 4)); /* size */

    writer.write_u32(0x00000231); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.rank_id);

    writer.write_u32(obj.rights);

    writer.write_cstring(obj.rank_name);

    writer.write_u32(obj.money_per_day);

    for (const auto& v : obj.bank_tab_rights) {
        GuildBankRights_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_GUILD_ADD_RANK_size(const CMSG_GUILD_ADD_RANK& obj) {
    return 1 + obj.rank_name.size();
}

CMSG_GUILD_ADD_RANK CMSG_GUILD_ADD_RANK_read(Reader& reader) {
    CMSG_GUILD_ADD_RANK obj{};

    obj.rank_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_ADD_RANK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_ADD_RANK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_ADD_RANK_size(obj) + 4)); /* size */

    writer.write_u32(0x00000232); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.rank_name);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_DEL_RANK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000233); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t CMSG_GUILD_SET_PUBLIC_NOTE_size(const CMSG_GUILD_SET_PUBLIC_NOTE& obj) {
    return 2 + obj.player_name.size() + obj.note.size();
}

CMSG_GUILD_SET_PUBLIC_NOTE CMSG_GUILD_SET_PUBLIC_NOTE_read(Reader& reader) {
    CMSG_GUILD_SET_PUBLIC_NOTE obj{};

    obj.player_name = reader.read_cstring();

    obj.note = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_SET_PUBLIC_NOTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_SET_PUBLIC_NOTE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_SET_PUBLIC_NOTE_size(obj) + 4)); /* size */

    writer.write_u32(0x00000234); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.player_name);

    writer.write_cstring(obj.note);

    return writer.m_buf;
}

static size_t CMSG_GUILD_SET_OFFICER_NOTE_size(const CMSG_GUILD_SET_OFFICER_NOTE& obj) {
    return 2 + obj.player_name.size() + obj.note.size();
}

CMSG_GUILD_SET_OFFICER_NOTE CMSG_GUILD_SET_OFFICER_NOTE_read(Reader& reader) {
    CMSG_GUILD_SET_OFFICER_NOTE obj{};

    obj.player_name = reader.read_cstring();

    obj.note = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_SET_OFFICER_NOTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_SET_OFFICER_NOTE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_SET_OFFICER_NOTE_size(obj) + 4)); /* size */

    writer.write_u32(0x00000235); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.player_name);

    writer.write_cstring(obj.note);

    return writer.m_buf;
}

SMSG_LOGIN_VERIFY_WORLD SMSG_LOGIN_VERIFY_WORLD_read(Reader& reader) {
    SMSG_LOGIN_VERIFY_WORLD obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    obj.orientation = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOGIN_VERIFY_WORLD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 2)); /* size */

    writer.write_u16(0x00000236); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    Vector3d_write(writer, obj.position);

    writer.write_float(obj.orientation);

    return writer.m_buf;
}

static size_t CMSG_SEND_MAIL_size(const CMSG_SEND_MAIL& obj) {
    return 36 + obj.receiver.size() + obj.subject.size() + obj.body.size() + 9 * obj.items.size();
}

CMSG_SEND_MAIL CMSG_SEND_MAIL_read(Reader& reader) {
    CMSG_SEND_MAIL obj{};

    obj.mailbox = reader.read_u64();

    obj.receiver = reader.read_cstring();

    obj.subject = reader.read_cstring();

    obj.body = reader.read_cstring();

    obj.unknown1 = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    auto amount_of_items = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_items; ++i) {
        obj.items.push_back(::wow_world_messages::wrath::MailItem_read(reader));
    }

    obj.money = reader.read_u32();

    obj.cash_on_delivery_amount = reader.read_u32();

    obj.unknown3 = reader.read_u32();

    obj.unknown4 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SEND_MAIL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_SEND_MAIL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_SEND_MAIL_size(obj) + 4)); /* size */

    writer.write_u32(0x00000238); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.mailbox);

    writer.write_cstring(obj.receiver);

    writer.write_cstring(obj.subject);

    writer.write_cstring(obj.body);

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.unknown2);

    writer.write_u8(static_cast<uint8_t>(obj.items.size()));

    for (const auto& v : obj.items) {
        MailItem_write(writer, v);
    }

    writer.write_u32(obj.money);

    writer.write_u32(obj.cash_on_delivery_amount);

    writer.write_u32(obj.unknown3);

    writer.write_u32(obj.unknown4);

    return writer.m_buf;
}

static size_t SMSG_SEND_MAIL_RESULT_size(const SMSG_SEND_MAIL_RESULT& obj) {
    size_t _size = 8;

    if (obj.action == MailAction::ITEM_TAKEN) {
        _size += 4;

        if (obj.result == MailResult::ERR_EQUIP_ERROR) {
            _size += 4;
        }
        else if (obj.result == MailResult::OK|| obj.result == MailResult::ERR_CANNOT_SEND_TO_SELF|| obj.result == MailResult::ERR_NOT_ENOUGH_MONEY|| obj.result == MailResult::ERR_RECIPIENT_NOT_FOUND|| obj.result == MailResult::ERR_NOT_YOUR_TEAM|| obj.result == MailResult::ERR_INTERNAL_ERROR|| obj.result == MailResult::ERR_DISABLED_FOR_TRIAL_ACC|| obj.result == MailResult::ERR_RECIPIENT_CAP_REACHED|| obj.result == MailResult::ERR_CANT_SEND_WRAPPED_COD|| obj.result == MailResult::ERR_MAIL_AND_CHAT_SUSPENDED|| obj.result == MailResult::ERR_TOO_MANY_ATTACHMENTS|| obj.result == MailResult::ERR_MAIL_ATTACHMENT_INVALID|| obj.result == MailResult::ERR_ITEM_HAS_EXPIRED) {
            _size += 8;
        }

    }
    else if (obj.action == MailAction::SEND|| obj.action == MailAction::MONEY_TAKEN|| obj.action == MailAction::RETURNED_TO_SENDER|| obj.action == MailAction::DELETED|| obj.action == MailAction::MADE_PERMANENT) {
        _size += 4;

        if (obj.result2 == MailResultTwo::ERR_EQUIP_ERROR) {
            _size += 4;
        }

    }

    return _size;
}

SMSG_SEND_MAIL_RESULT SMSG_SEND_MAIL_RESULT_read(Reader& reader) {
    SMSG_SEND_MAIL_RESULT obj{};

    obj.mail_id = reader.read_u32();

    obj.action = static_cast<MailAction>(reader.read_u32());

    if (obj.action == MailAction::ITEM_TAKEN) {
        obj.result = static_cast<MailResult>(reader.read_u32());

        if (obj.result == MailResult::ERR_EQUIP_ERROR) {
            obj.equip_error = reader.read_u32();

        }
        else if (obj.result == MailResult::OK|| obj.result == MailResult::ERR_CANNOT_SEND_TO_SELF|| obj.result == MailResult::ERR_NOT_ENOUGH_MONEY|| obj.result == MailResult::ERR_RECIPIENT_NOT_FOUND|| obj.result == MailResult::ERR_NOT_YOUR_TEAM|| obj.result == MailResult::ERR_INTERNAL_ERROR|| obj.result == MailResult::ERR_DISABLED_FOR_TRIAL_ACC|| obj.result == MailResult::ERR_RECIPIENT_CAP_REACHED|| obj.result == MailResult::ERR_CANT_SEND_WRAPPED_COD|| obj.result == MailResult::ERR_MAIL_AND_CHAT_SUSPENDED|| obj.result == MailResult::ERR_TOO_MANY_ATTACHMENTS|| obj.result == MailResult::ERR_MAIL_ATTACHMENT_INVALID|| obj.result == MailResult::ERR_ITEM_HAS_EXPIRED) {
            obj.item = reader.read_u32();

            obj.item_count = reader.read_u32();

        }
    }
    else if (obj.action == MailAction::SEND|| obj.action == MailAction::MONEY_TAKEN|| obj.action == MailAction::RETURNED_TO_SENDER|| obj.action == MailAction::DELETED|| obj.action == MailAction::MADE_PERMANENT) {
        obj.result2 = static_cast<MailResultTwo>(reader.read_u32());

        if (obj.result2 == MailResultTwo::ERR_EQUIP_ERROR) {
            obj.equip_error2 = reader.read_u32();

        }
    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SEND_MAIL_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SEND_MAIL_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SEND_MAIL_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000239); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.mail_id);

    writer.write_u32(static_cast<uint32_t>(obj.action));

    if (obj.action == MailAction::ITEM_TAKEN) {
        writer.write_u32(static_cast<uint32_t>(obj.result));

        if (obj.result == MailResult::ERR_EQUIP_ERROR) {
            writer.write_u32(obj.equip_error);

        }
        else if (obj.result == MailResult::OK|| obj.result == MailResult::ERR_CANNOT_SEND_TO_SELF|| obj.result == MailResult::ERR_NOT_ENOUGH_MONEY|| obj.result == MailResult::ERR_RECIPIENT_NOT_FOUND|| obj.result == MailResult::ERR_NOT_YOUR_TEAM|| obj.result == MailResult::ERR_INTERNAL_ERROR|| obj.result == MailResult::ERR_DISABLED_FOR_TRIAL_ACC|| obj.result == MailResult::ERR_RECIPIENT_CAP_REACHED|| obj.result == MailResult::ERR_CANT_SEND_WRAPPED_COD|| obj.result == MailResult::ERR_MAIL_AND_CHAT_SUSPENDED|| obj.result == MailResult::ERR_TOO_MANY_ATTACHMENTS|| obj.result == MailResult::ERR_MAIL_ATTACHMENT_INVALID|| obj.result == MailResult::ERR_ITEM_HAS_EXPIRED) {
            writer.write_u32(obj.item);

            writer.write_u32(obj.item_count);

        }
    }
    else if (obj.action == MailAction::SEND|| obj.action == MailAction::MONEY_TAKEN|| obj.action == MailAction::RETURNED_TO_SENDER|| obj.action == MailAction::DELETED|| obj.action == MailAction::MADE_PERMANENT) {
        writer.write_u32(static_cast<uint32_t>(obj.result2));

        if (obj.result2 == MailResultTwo::ERR_EQUIP_ERROR) {
            writer.write_u32(obj.equip_error2);

        }
    }
    return writer.m_buf;
}

CMSG_GET_MAIL_LIST CMSG_GET_MAIL_LIST_read(Reader& reader) {
    CMSG_GET_MAIL_LIST obj{};

    obj.mailbox = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GET_MAIL_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000023a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.mailbox);

    return writer.m_buf;
}

static size_t SMSG_MAIL_LIST_RESULT_size(const SMSG_MAIL_LIST_RESULT& obj) {
    size_t _size = 5;

    for(const auto& v : obj.mails) {
        _size += Mail_size(v);
    }

    return _size;
}

SMSG_MAIL_LIST_RESULT SMSG_MAIL_LIST_RESULT_read(Reader& reader) {
    SMSG_MAIL_LIST_RESULT obj{};

    obj.real_mail_amount = reader.read_u32();

    auto amount_of_mails = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_mails; ++i) {
        obj.mails.push_back(::wow_world_messages::wrath::Mail_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MAIL_LIST_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MAIL_LIST_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MAIL_LIST_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x0000023b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.real_mail_amount);

    writer.write_u8(static_cast<uint8_t>(obj.mails.size()));

    for (const auto& v : obj.mails) {
        Mail_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_BATTLEFIELD_LIST CMSG_BATTLEFIELD_LIST_read(Reader& reader) {
    CMSG_BATTLEFIELD_LIST obj{};

    obj.battleground_type = static_cast<BattlegroundType>(reader.read_u32());

    obj.location = static_cast<BattlefieldListLocation>(reader.read_u8());

    obj.can_gain_exp = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BATTLEFIELD_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0006);

    writer.write_u16_be(static_cast<uint16_t>(0x0006 + 4)); /* size */

    writer.write_u32(0x0000023c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.battleground_type));

    writer.write_u8(static_cast<uint8_t>(obj.location));

    writer.write_bool8(obj.can_gain_exp);

    return writer.m_buf;
}

static size_t SMSG_BATTLEFIELD_LIST_size(const SMSG_BATTLEFIELD_LIST& obj) {
    size_t _size = 32 + 4 * obj.battlegrounds.size();

    if (obj.random == RandomBg::RANDOM) {
        _size += 13;
    }

    return _size;
}

SMSG_BATTLEFIELD_LIST SMSG_BATTLEFIELD_LIST_read(Reader& reader) {
    SMSG_BATTLEFIELD_LIST obj{};

    obj.battlemaster = reader.read_u64();

    obj.battleground_type = static_cast<BattlegroundType>(reader.read_u32());

    obj.unknown1 = reader.read_u8();

    obj.unknown2 = reader.read_u8();

    obj.has_win = reader.read_u8();

    obj.win_honor = reader.read_u32();

    obj.win_arena = reader.read_u32();

    obj.loss_honor = reader.read_u32();

    obj.random = static_cast<RandomBg>(reader.read_u8());

    if (obj.random == RandomBg::RANDOM) {
        obj.win_random = reader.read_u8();

        obj.reward_honor = reader.read_u32();

        obj.reward_arena = reader.read_u32();

        obj.honor_lost = reader.read_u32();

    }
    auto number_of_battlegrounds = reader.read_u32();

    for (uint32_t i = 0; i < number_of_battlegrounds; ++i) {
        obj.battlegrounds.push_back(reader.read_u32());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEFIELD_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_BATTLEFIELD_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_BATTLEFIELD_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x0000023d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.battlemaster);

    writer.write_u32(static_cast<uint32_t>(obj.battleground_type));

    writer.write_u8(obj.unknown1);

    writer.write_u8(obj.unknown2);

    writer.write_u8(obj.has_win);

    writer.write_u32(obj.win_honor);

    writer.write_u32(obj.win_arena);

    writer.write_u32(obj.loss_honor);

    writer.write_u8(static_cast<uint8_t>(obj.random));

    if (obj.random == RandomBg::RANDOM) {
        writer.write_u8(obj.win_random);

        writer.write_u32(obj.reward_honor);

        writer.write_u32(obj.reward_arena);

        writer.write_u32(obj.honor_lost);

    }
    writer.write_u32(static_cast<uint32_t>(obj.battlegrounds.size()));

    for (const auto& v : obj.battlegrounds) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

CMSG_ITEM_TEXT_QUERY CMSG_ITEM_TEXT_QUERY_read(Reader& reader) {
    CMSG_ITEM_TEXT_QUERY obj{};

    obj.item = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ITEM_TEXT_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000243); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    return writer.m_buf;
}

static size_t SMSG_ITEM_TEXT_QUERY_RESPONSE_size(const SMSG_ITEM_TEXT_QUERY_RESPONSE& obj) {
    size_t _size = 1;

    if (obj.query == ItemTextQuery::HAS_TEXT) {
        _size += 9 + obj.text.size();
    }

    return _size;
}

SMSG_ITEM_TEXT_QUERY_RESPONSE SMSG_ITEM_TEXT_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_ITEM_TEXT_QUERY_RESPONSE obj{};

    obj.query = static_cast<ItemTextQuery>(reader.read_u8());

    if (obj.query == ItemTextQuery::HAS_TEXT) {
        obj.item = reader.read_u64();

        obj.text = reader.read_cstring();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ITEM_TEXT_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ITEM_TEXT_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ITEM_TEXT_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000244); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.query));

    if (obj.query == ItemTextQuery::HAS_TEXT) {
        writer.write_u64(obj.item);

        writer.write_cstring(obj.text);

    }
    return writer.m_buf;
}

CMSG_MAIL_TAKE_MONEY CMSG_MAIL_TAKE_MONEY_read(Reader& reader) {
    CMSG_MAIL_TAKE_MONEY obj{};

    obj.mailbox = reader.read_u64();

    obj.mail_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MAIL_TAKE_MONEY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000245); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.mailbox);

    writer.write_u32(obj.mail_id);

    return writer.m_buf;
}

CMSG_MAIL_TAKE_ITEM CMSG_MAIL_TAKE_ITEM_read(Reader& reader) {
    CMSG_MAIL_TAKE_ITEM obj{};

    obj.mailbox = reader.read_u64();

    obj.mail_id = reader.read_u32();

    obj.item = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MAIL_TAKE_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 4)); /* size */

    writer.write_u32(0x00000246); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.mailbox);

    writer.write_u32(obj.mail_id);

    writer.write_u32(obj.item);

    return writer.m_buf;
}

CMSG_MAIL_MARK_AS_READ CMSG_MAIL_MARK_AS_READ_read(Reader& reader) {
    CMSG_MAIL_MARK_AS_READ obj{};

    obj.mailbox = reader.read_u64();

    obj.mail_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MAIL_MARK_AS_READ::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000247); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.mailbox);

    writer.write_u32(obj.mail_id);

    return writer.m_buf;
}

CMSG_MAIL_RETURN_TO_SENDER CMSG_MAIL_RETURN_TO_SENDER_read(Reader& reader) {
    CMSG_MAIL_RETURN_TO_SENDER obj{};

    obj.mailbox_id = reader.read_u64();

    obj.mail_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MAIL_RETURN_TO_SENDER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000248); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.mailbox_id);

    writer.write_u32(obj.mail_id);

    return writer.m_buf;
}

CMSG_MAIL_DELETE CMSG_MAIL_DELETE_read(Reader& reader) {
    CMSG_MAIL_DELETE obj{};

    obj.mailbox_id = reader.read_u64();

    obj.mail_id = reader.read_u32();

    obj.mail_template_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MAIL_DELETE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 4)); /* size */

    writer.write_u32(0x00000249); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.mailbox_id);

    writer.write_u32(obj.mail_id);

    writer.write_u32(obj.mail_template_id);

    return writer.m_buf;
}

CMSG_MAIL_CREATE_TEXT_ITEM CMSG_MAIL_CREATE_TEXT_ITEM_read(Reader& reader) {
    CMSG_MAIL_CREATE_TEXT_ITEM obj{};

    obj.mailbox = reader.read_u64();

    obj.mail_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MAIL_CREATE_TEXT_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x0000024a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.mailbox);

    writer.write_u32(obj.mail_id);

    return writer.m_buf;
}

static size_t SMSG_SPELLLOGMISS_size(const SMSG_SPELLLOGMISS& obj) {
    return 17 + 9 * obj.targets.size();
}

SMSG_SPELLLOGMISS SMSG_SPELLLOGMISS_read(Reader& reader) {
    SMSG_SPELLLOGMISS obj{};

    obj.id = reader.read_u32();

    obj.caster = reader.read_u64();

    obj.unknown1 = reader.read_u8();

    auto amount_of_targets = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_targets; ++i) {
        obj.targets.push_back(::wow_world_messages::wrath::SpellLogMiss_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELLLOGMISS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELLLOGMISS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELLLOGMISS_size(obj) + 2)); /* size */

    writer.write_u16(0x0000024b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.id);

    writer.write_u64(obj.caster);

    writer.write_u8(obj.unknown1);

    writer.write_u32(static_cast<uint32_t>(obj.targets.size()));

    for (const auto& v : obj.targets) {
        SpellLogMiss_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_SPELLLOGEXECUTE_size(const SMSG_SPELLLOGEXECUTE& obj) {
    size_t _size = 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster);

    for(const auto& v : obj.logs) {
        _size += SpellLog_size(v);
    }

    return _size;
}

SMSG_SPELLLOGEXECUTE SMSG_SPELLLOGEXECUTE_read(Reader& reader) {
    SMSG_SPELLLOGEXECUTE obj{};

    obj.caster = reader.read_packed_guid();

    obj.spell = reader.read_u32();

    auto amount_of_effects = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_effects; ++i) {
        obj.logs.push_back(::wow_world_messages::wrath::SpellLog_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELLLOGEXECUTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELLLOGEXECUTE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELLLOGEXECUTE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000024c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.caster);

    writer.write_u32(obj.spell);

    writer.write_u32(static_cast<uint32_t>(obj.logs.size()));

    for (const auto& v : obj.logs) {
        SpellLog_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_PERIODICAURALOG_size(const SMSG_PERIODICAURALOG& obj) {
    size_t _size = 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.target) + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster);

    for(const auto& v : obj.auras) {
        _size += AuraLog_size(v);
    }

    return _size;
}

SMSG_PERIODICAURALOG SMSG_PERIODICAURALOG_read(Reader& reader) {
    SMSG_PERIODICAURALOG obj{};

    obj.target = reader.read_packed_guid();

    obj.caster = reader.read_packed_guid();

    obj.spell = reader.read_u32();

    auto amount_of_auras = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_auras; ++i) {
        obj.auras.push_back(::wow_world_messages::wrath::AuraLog_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PERIODICAURALOG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PERIODICAURALOG_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PERIODICAURALOG_size(obj) + 2)); /* size */

    writer.write_u16(0x0000024e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.target);

    writer.write_packed_guid(obj.caster);

    writer.write_u32(obj.spell);

    writer.write_u32(static_cast<uint32_t>(obj.auras.size()));

    for (const auto& v : obj.auras) {
        AuraLog_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_SPELLDAMAGESHIELD SMSG_SPELLDAMAGESHIELD_read(Reader& reader) {
    SMSG_SPELLDAMAGESHIELD obj{};

    obj.victim = reader.read_u64();

    obj.caster = reader.read_u64();

    obj.spell = reader.read_u32();

    obj.damage = reader.read_u32();

    obj.overkill = reader.read_u32();

    obj.school = static_cast<SpellSchool>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELLDAMAGESHIELD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0020);

    writer.write_u16_be(static_cast<uint16_t>(0x0020 + 2)); /* size */

    writer.write_u16(0x0000024f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.victim);

    writer.write_u64(obj.caster);

    writer.write_u32(obj.spell);

    writer.write_u32(obj.damage);

    writer.write_u32(obj.overkill);

    writer.write_u32(static_cast<uint32_t>(obj.school));

    return writer.m_buf;
}

static size_t SMSG_SPELLNONMELEEDAMAGELOG_size(const SMSG_SPELLNONMELEEDAMAGELOG& obj) {
    return 32 + ::wow_world_messages::util::wwm_packed_guid_size(obj.target) + ::wow_world_messages::util::wwm_packed_guid_size(obj.attacker);
}

SMSG_SPELLNONMELEEDAMAGELOG SMSG_SPELLNONMELEEDAMAGELOG_read(Reader& reader) {
    SMSG_SPELLNONMELEEDAMAGELOG obj{};

    obj.target = reader.read_packed_guid();

    obj.attacker = reader.read_packed_guid();

    obj.spell = reader.read_u32();

    obj.damage = reader.read_u32();

    obj.overkill = reader.read_u32();

    obj.school = static_cast<SpellSchool>(reader.read_u8());

    obj.absorbed_damage = reader.read_u32();

    obj.resisted = reader.read_u32();

    obj.periodic_log = reader.read_bool8();

    obj.unused = reader.read_u8();

    obj.blocked = reader.read_u32();

    obj.hit_info = static_cast<HitInfo>(reader.read_u32());

    obj.extend_flag = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELLNONMELEEDAMAGELOG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELLNONMELEEDAMAGELOG_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELLNONMELEEDAMAGELOG_size(obj) + 2)); /* size */

    writer.write_u16(0x00000250); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.target);

    writer.write_packed_guid(obj.attacker);

    writer.write_u32(obj.spell);

    writer.write_u32(obj.damage);

    writer.write_u32(obj.overkill);

    writer.write_u8(static_cast<uint8_t>(obj.school));

    writer.write_u32(obj.absorbed_damage);

    writer.write_u32(obj.resisted);

    writer.write_bool8(obj.periodic_log);

    writer.write_u8(obj.unused);

    writer.write_u32(obj.blocked);

    writer.write_u32(static_cast<uint32_t>(obj.hit_info));

    writer.write_u8(obj.extend_flag);

    return writer.m_buf;
}

CMSG_LEARN_TALENT CMSG_LEARN_TALENT_read(Reader& reader) {
    CMSG_LEARN_TALENT obj{};

    obj.talent = static_cast<Talent>(reader.read_u32());

    obj.requested_rank = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LEARN_TALENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000251); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.talent));

    writer.write_u32(obj.requested_rank);

    return writer.m_buf;
}

SMSG_RESURRECT_FAILED SMSG_RESURRECT_FAILED_read(Reader& reader) {
    SMSG_RESURRECT_FAILED obj{};

    obj.unknown = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_RESURRECT_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000252); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown);

    return writer.m_buf;
}

static size_t CMSG_TOGGLE_PVP_size(const CMSG_TOGGLE_PVP& obj) {
    size_t _size = 0;

    if(obj.set) {
        _size += 1;
    }

    return _size;
}

CMSG_TOGGLE_PVP CMSG_TOGGLE_PVP_read(Reader& reader, size_t body_size) {
    CMSG_TOGGLE_PVP obj{};
    size_t _size = 0;

    if (_size < body_size) {
        obj.set = std::shared_ptr<wrath::CMSG_TOGGLE_PVP::Set>(new wrath::CMSG_TOGGLE_PVP::Set());

        obj.set->enable_pvp = reader.read_bool8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TOGGLE_PVP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_TOGGLE_PVP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_TOGGLE_PVP_size(obj) + 4)); /* size */

    writer.write_u32(0x00000253); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    if(obj.set) {
        writer.write_bool8(obj.set->enable_pvp);

    }
    return writer.m_buf;
}

SMSG_ZONE_UNDER_ATTACK SMSG_ZONE_UNDER_ATTACK_read(Reader& reader) {
    SMSG_ZONE_UNDER_ATTACK obj{};

    obj.zone_id = static_cast<Area>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ZONE_UNDER_ATTACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000254); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.zone_id));

    return writer.m_buf;
}

MSG_AUCTION_HELLO_Client MSG_AUCTION_HELLO_Client_read(Reader& reader) {
    MSG_AUCTION_HELLO_Client obj{};

    obj.auctioneer = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_AUCTION_HELLO_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000255); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.auctioneer);

    return writer.m_buf;
}

MSG_AUCTION_HELLO_Server MSG_AUCTION_HELLO_Server_read(Reader& reader) {
    MSG_AUCTION_HELLO_Server obj{};

    obj.auctioneer = reader.read_u64();

    obj.auction_house = static_cast<AuctionHouse>(reader.read_u32());

    obj.auction_house_enabled = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_AUCTION_HELLO_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000d);

    writer.write_u16_be(static_cast<uint16_t>(0x000d + 2)); /* size */

    writer.write_u16(0x00000255); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.auctioneer);

    writer.write_u32(static_cast<uint32_t>(obj.auction_house));

    writer.write_bool8(obj.auction_house_enabled);

    return writer.m_buf;
}

CMSG_AUCTION_SELL_ITEM CMSG_AUCTION_SELL_ITEM_read(Reader& reader) {
    CMSG_AUCTION_SELL_ITEM obj{};

    obj.auctioneer = reader.read_u64();

    obj.unknown1 = reader.read_u32();

    obj.item = reader.read_u64();

    obj.unknown2 = reader.read_u32();

    obj.starting_bid = reader.read_u32();

    obj.buyout = reader.read_u32();

    obj.auction_duration_in_minutes = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUCTION_SELL_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0024);

    writer.write_u16_be(static_cast<uint16_t>(0x0024 + 4)); /* size */

    writer.write_u32(0x00000256); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.auctioneer);

    writer.write_u32(obj.unknown1);

    writer.write_u64(obj.item);

    writer.write_u32(obj.unknown2);

    writer.write_u32(obj.starting_bid);

    writer.write_u32(obj.buyout);

    writer.write_u32(obj.auction_duration_in_minutes);

    return writer.m_buf;
}

CMSG_AUCTION_REMOVE_ITEM CMSG_AUCTION_REMOVE_ITEM_read(Reader& reader) {
    CMSG_AUCTION_REMOVE_ITEM obj{};

    obj.auctioneer = reader.read_u64();

    obj.auction_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUCTION_REMOVE_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000257); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.auctioneer);

    writer.write_u32(obj.auction_id);

    return writer.m_buf;
}

static size_t CMSG_AUCTION_LIST_ITEMS_size(const CMSG_AUCTION_LIST_ITEMS& obj) {
    return 34 + obj.searched_name.size() + 2 * obj.sorted_auctions.size();
}

CMSG_AUCTION_LIST_ITEMS CMSG_AUCTION_LIST_ITEMS_read(Reader& reader) {
    CMSG_AUCTION_LIST_ITEMS obj{};

    obj.auctioneer = reader.read_u64();

    obj.list_start_item = reader.read_u32();

    obj.searched_name = reader.read_cstring();

    obj.minimum_level = reader.read_u8();

    obj.maximum_level = reader.read_u8();

    obj.auction_slot_id = reader.read_u32();

    obj.auction_main_category = reader.read_u32();

    obj.auction_sub_category = reader.read_u32();

    obj.auction_quality = static_cast<ItemQuality>(reader.read_u32());

    obj.usable = reader.read_u8();

    obj.is_full = reader.read_u8();

    auto amount_of_sorted_auctions = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_sorted_auctions; ++i) {
        obj.sorted_auctions.push_back(::wow_world_messages::wrath::AuctionSort_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUCTION_LIST_ITEMS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_AUCTION_LIST_ITEMS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_AUCTION_LIST_ITEMS_size(obj) + 4)); /* size */

    writer.write_u32(0x00000258); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.auctioneer);

    writer.write_u32(obj.list_start_item);

    writer.write_cstring(obj.searched_name);

    writer.write_u8(obj.minimum_level);

    writer.write_u8(obj.maximum_level);

    writer.write_u32(obj.auction_slot_id);

    writer.write_u32(obj.auction_main_category);

    writer.write_u32(obj.auction_sub_category);

    writer.write_u32(static_cast<uint32_t>(obj.auction_quality));

    writer.write_u8(obj.usable);

    writer.write_u8(obj.is_full);

    writer.write_u8(static_cast<uint8_t>(obj.sorted_auctions.size()));

    for (const auto& v : obj.sorted_auctions) {
        AuctionSort_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_AUCTION_LIST_OWNER_ITEMS CMSG_AUCTION_LIST_OWNER_ITEMS_read(Reader& reader) {
    CMSG_AUCTION_LIST_OWNER_ITEMS obj{};

    obj.auctioneer = reader.read_u64();

    obj.list_from = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUCTION_LIST_OWNER_ITEMS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000259); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.auctioneer);

    writer.write_u32(obj.list_from);

    return writer.m_buf;
}

CMSG_AUCTION_PLACE_BID CMSG_AUCTION_PLACE_BID_read(Reader& reader) {
    CMSG_AUCTION_PLACE_BID obj{};

    obj.auctioneer = reader.read_u64();

    obj.auction_id = reader.read_u32();

    obj.price = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUCTION_PLACE_BID::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 4)); /* size */

    writer.write_u32(0x0000025a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.auctioneer);

    writer.write_u32(obj.auction_id);

    writer.write_u32(obj.price);

    return writer.m_buf;
}

static size_t SMSG_AUCTION_COMMAND_RESULT_size(const SMSG_AUCTION_COMMAND_RESULT& obj) {
    size_t _size = 12;

    if (obj.result == AuctionCommandResult::ERR_INVENTORY) {
        _size += 1;
    }

    return _size;
}

SMSG_AUCTION_COMMAND_RESULT SMSG_AUCTION_COMMAND_RESULT_read(Reader& reader) {
    SMSG_AUCTION_COMMAND_RESULT obj{};

    obj.auction_id = reader.read_u32();

    obj.action = static_cast<AuctionCommandAction>(reader.read_u32());

    obj.result = static_cast<AuctionCommandResult>(reader.read_u32());

    if (obj.result == AuctionCommandResult::ERR_INVENTORY) {
        obj.inventory_result = static_cast<InventoryResult>(reader.read_u8());

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AUCTION_COMMAND_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_AUCTION_COMMAND_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_AUCTION_COMMAND_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x0000025b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.auction_id);

    writer.write_u32(static_cast<uint32_t>(obj.action));

    writer.write_u32(static_cast<uint32_t>(obj.result));

    if (obj.result == AuctionCommandResult::ERR_INVENTORY) {
        writer.write_u8(static_cast<uint8_t>(obj.inventory_result));

    }
    return writer.m_buf;
}

static size_t SMSG_AUCTION_LIST_RESULT_size(const SMSG_AUCTION_LIST_RESULT& obj) {
    return 12 + 148 * obj.auctions.size();
}

SMSG_AUCTION_LIST_RESULT SMSG_AUCTION_LIST_RESULT_read(Reader& reader) {
    SMSG_AUCTION_LIST_RESULT obj{};

    auto count = reader.read_u32();

    for (uint32_t i = 0; i < count; ++i) {
        obj.auctions.push_back(::wow_world_messages::wrath::AuctionListItem_read(reader));
    }

    obj.total_amount_of_auctions = reader.read_u32();

    obj.auction_search_delay = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AUCTION_LIST_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_AUCTION_LIST_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_AUCTION_LIST_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x0000025c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.auctions.size()));

    for (const auto& v : obj.auctions) {
        AuctionListItem_write(writer, v);
    }

    writer.write_u32(obj.total_amount_of_auctions);

    writer.write_u32(obj.auction_search_delay);

    return writer.m_buf;
}

static size_t SMSG_AUCTION_OWNER_LIST_RESULT_size(const SMSG_AUCTION_OWNER_LIST_RESULT& obj) {
    return 12 + 148 * obj.auctions.size();
}

SMSG_AUCTION_OWNER_LIST_RESULT SMSG_AUCTION_OWNER_LIST_RESULT_read(Reader& reader) {
    SMSG_AUCTION_OWNER_LIST_RESULT obj{};

    auto count = reader.read_u32();

    for (uint32_t i = 0; i < count; ++i) {
        obj.auctions.push_back(::wow_world_messages::wrath::AuctionListItem_read(reader));
    }

    obj.total_amount_of_auctions = reader.read_u32();

    obj.auction_search_delay = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AUCTION_OWNER_LIST_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_AUCTION_OWNER_LIST_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_AUCTION_OWNER_LIST_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x0000025d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.auctions.size()));

    for (const auto& v : obj.auctions) {
        AuctionListItem_write(writer, v);
    }

    writer.write_u32(obj.total_amount_of_auctions);

    writer.write_u32(obj.auction_search_delay);

    return writer.m_buf;
}

SMSG_AUCTION_BIDDER_NOTIFICATION SMSG_AUCTION_BIDDER_NOTIFICATION_read(Reader& reader) {
    SMSG_AUCTION_BIDDER_NOTIFICATION obj{};

    obj.auction_house = static_cast<AuctionHouse>(reader.read_u32());

    obj.auction_id = reader.read_u32();

    obj.bidder = reader.read_u64();

    obj.bid_sum = reader.read_u32();

    obj.new_highest_bid = reader.read_u32();

    obj.out_bid_amount = reader.read_u32();

    obj.item_template = reader.read_u32();

    obj.item_random_property_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AUCTION_BIDDER_NOTIFICATION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0024);

    writer.write_u16_be(static_cast<uint16_t>(0x0024 + 2)); /* size */

    writer.write_u16(0x0000025e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.auction_house));

    writer.write_u32(obj.auction_id);

    writer.write_u64(obj.bidder);

    writer.write_u32(obj.bid_sum);

    writer.write_u32(obj.new_highest_bid);

    writer.write_u32(obj.out_bid_amount);

    writer.write_u32(obj.item_template);

    writer.write_u32(obj.item_random_property_id);

    return writer.m_buf;
}

SMSG_AUCTION_OWNER_NOTIFICATION SMSG_AUCTION_OWNER_NOTIFICATION_read(Reader& reader) {
    SMSG_AUCTION_OWNER_NOTIFICATION obj{};

    obj.auction_id = reader.read_u32();

    obj.bid = reader.read_u32();

    obj.auction_out_bid = reader.read_u32();

    obj.bidder = reader.read_u64();

    obj.item = reader.read_u32();

    obj.item_random_property_id = reader.read_u32();

    obj.time_left = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AUCTION_OWNER_NOTIFICATION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0020);

    writer.write_u16_be(static_cast<uint16_t>(0x0020 + 2)); /* size */

    writer.write_u16(0x0000025f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.auction_id);

    writer.write_u32(obj.bid);

    writer.write_u32(obj.auction_out_bid);

    writer.write_u64(obj.bidder);

    writer.write_u32(obj.item);

    writer.write_u32(obj.item_random_property_id);

    writer.write_float(obj.time_left);

    return writer.m_buf;
}

SMSG_PROCRESIST SMSG_PROCRESIST_read(Reader& reader) {
    SMSG_PROCRESIST obj{};

    obj.caster = reader.read_u64();

    obj.target = reader.read_u64();

    obj.id = reader.read_u32();

    obj.log_format = static_cast<LogFormat>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PROCRESIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0015);

    writer.write_u16_be(static_cast<uint16_t>(0x0015 + 2)); /* size */

    writer.write_u16(0x00000260); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.caster);

    writer.write_u64(obj.target);

    writer.write_u32(obj.id);

    writer.write_u8(static_cast<uint8_t>(obj.log_format));

    return writer.m_buf;
}

static size_t SMSG_DISPEL_FAILED_size(const SMSG_DISPEL_FAILED& obj) {
    return 16 + 4 * obj.spells.size();
}

SMSG_DISPEL_FAILED SMSG_DISPEL_FAILED_read(Reader& reader, size_t body_size) {
    SMSG_DISPEL_FAILED obj{};
    size_t _size = 0;

    obj.caster = reader.read_u64();
    _size += 8;

    obj.target = reader.read_u64();
    _size += 8;

    while (_size < body_size) {
        obj.spells.push_back(reader.read_u32());
        _size += 4;
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DISPEL_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_DISPEL_FAILED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_DISPEL_FAILED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000262); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.caster);

    writer.write_u64(obj.target);

    for (const auto& v : obj.spells) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

SMSG_SPELLORDAMAGE_IMMUNE SMSG_SPELLORDAMAGE_IMMUNE_read(Reader& reader) {
    SMSG_SPELLORDAMAGE_IMMUNE obj{};

    obj.caster = reader.read_u64();

    obj.target = reader.read_u64();

    obj.id = reader.read_u32();

    obj.debug_log_format = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELLORDAMAGE_IMMUNE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0015);

    writer.write_u16_be(static_cast<uint16_t>(0x0015 + 2)); /* size */

    writer.write_u16(0x00000263); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.caster);

    writer.write_u64(obj.target);

    writer.write_u32(obj.id);

    writer.write_bool8(obj.debug_log_format);

    return writer.m_buf;
}

static size_t CMSG_AUCTION_LIST_BIDDER_ITEMS_size(const CMSG_AUCTION_LIST_BIDDER_ITEMS& obj) {
    return 16 + 4 * obj.outbid_item_ids.size();
}

CMSG_AUCTION_LIST_BIDDER_ITEMS CMSG_AUCTION_LIST_BIDDER_ITEMS_read(Reader& reader) {
    CMSG_AUCTION_LIST_BIDDER_ITEMS obj{};

    obj.auctioneer = reader.read_u64();

    obj.start_from_page = reader.read_u32();

    auto amount_of_outbid_items = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_outbid_items; ++i) {
        obj.outbid_item_ids.push_back(reader.read_u32());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUCTION_LIST_BIDDER_ITEMS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_AUCTION_LIST_BIDDER_ITEMS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_AUCTION_LIST_BIDDER_ITEMS_size(obj) + 4)); /* size */

    writer.write_u32(0x00000264); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.auctioneer);

    writer.write_u32(obj.start_from_page);

    writer.write_u32(static_cast<uint32_t>(obj.outbid_item_ids.size()));

    for (const auto& v : obj.outbid_item_ids) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

static size_t SMSG_AUCTION_BIDDER_LIST_RESULT_size(const SMSG_AUCTION_BIDDER_LIST_RESULT& obj) {
    return 12 + 148 * obj.auctions.size();
}

SMSG_AUCTION_BIDDER_LIST_RESULT SMSG_AUCTION_BIDDER_LIST_RESULT_read(Reader& reader) {
    SMSG_AUCTION_BIDDER_LIST_RESULT obj{};

    auto count = reader.read_u32();

    for (uint32_t i = 0; i < count; ++i) {
        obj.auctions.push_back(::wow_world_messages::wrath::AuctionListItem_read(reader));
    }

    obj.total_amount_of_auctions = reader.read_u32();

    obj.auction_search_delay = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AUCTION_BIDDER_LIST_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_AUCTION_BIDDER_LIST_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_AUCTION_BIDDER_LIST_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000265); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.auctions.size()));

    for (const auto& v : obj.auctions) {
        AuctionListItem_write(writer, v);
    }

    writer.write_u32(obj.total_amount_of_auctions);

    writer.write_u32(obj.auction_search_delay);

    return writer.m_buf;
}

SMSG_SET_FLAT_SPELL_MODIFIER SMSG_SET_FLAT_SPELL_MODIFIER_read(Reader& reader) {
    SMSG_SET_FLAT_SPELL_MODIFIER obj{};

    obj.eff = reader.read_u8();

    obj.op = reader.read_u8();

    obj.value = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SET_FLAT_SPELL_MODIFIER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0006);

    writer.write_u16_be(static_cast<uint16_t>(0x0006 + 2)); /* size */

    writer.write_u16(0x00000266); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.eff);

    writer.write_u8(obj.op);

    writer.write_u32(obj.value);

    return writer.m_buf;
}

SMSG_SET_PCT_SPELL_MODIFIER SMSG_SET_PCT_SPELL_MODIFIER_read(Reader& reader) {
    SMSG_SET_PCT_SPELL_MODIFIER obj{};

    obj.eff = reader.read_u8();

    obj.op = reader.read_u8();

    obj.value = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SET_PCT_SPELL_MODIFIER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0006);

    writer.write_u16_be(static_cast<uint16_t>(0x0006 + 2)); /* size */

    writer.write_u16(0x00000267); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.eff);

    writer.write_u8(obj.op);

    writer.write_u32(obj.value);

    return writer.m_buf;
}

CMSG_SET_AMMO CMSG_SET_AMMO_read(Reader& reader) {
    CMSG_SET_AMMO obj{};

    obj.item = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_AMMO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000268); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.item);

    return writer.m_buf;
}

SMSG_CORPSE_RECLAIM_DELAY SMSG_CORPSE_RECLAIM_DELAY_read(Reader& reader) {
    SMSG_CORPSE_RECLAIM_DELAY obj{};

    obj.delay = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CORPSE_RECLAIM_DELAY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000269); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.delay);

    return writer.m_buf;
}

CMSG_SET_ACTIVE_MOVER CMSG_SET_ACTIVE_MOVER_read(Reader& reader) {
    CMSG_SET_ACTIVE_MOVER obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_ACTIVE_MOVER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000026a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_PET_CANCEL_AURA CMSG_PET_CANCEL_AURA_read(Reader& reader) {
    CMSG_PET_CANCEL_AURA obj{};

    obj.guid = reader.read_u64();

    obj.id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_CANCEL_AURA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x0000026b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.id);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CANCEL_AUTO_REPEAT_SPELL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000026d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

MSG_LIST_STABLED_PETS_Client MSG_LIST_STABLED_PETS_Client_read(Reader& reader) {
    MSG_LIST_STABLED_PETS_Client obj{};

    obj.npc = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_LIST_STABLED_PETS_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000026f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.npc);

    return writer.m_buf;
}

static size_t MSG_LIST_STABLED_PETS_Server_size(const MSG_LIST_STABLED_PETS_Server& obj) {
    size_t _size = 10;

    for(const auto& v : obj.pets) {
        _size += StabledPet_size(v);
    }

    return _size;
}

MSG_LIST_STABLED_PETS_Server MSG_LIST_STABLED_PETS_Server_read(Reader& reader) {
    MSG_LIST_STABLED_PETS_Server obj{};

    obj.npc = reader.read_u64();

    auto amount_of_pets = reader.read_u8();

    obj.stable_slots = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_pets; ++i) {
        obj.pets.push_back(::wow_world_messages::wrath::StabledPet_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_LIST_STABLED_PETS_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_LIST_STABLED_PETS_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_LIST_STABLED_PETS_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x0000026f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.npc);

    writer.write_u8(static_cast<uint8_t>(obj.pets.size()));

    writer.write_u8(obj.stable_slots);

    for (const auto& v : obj.pets) {
        StabledPet_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_STABLE_PET CMSG_STABLE_PET_read(Reader& reader) {
    CMSG_STABLE_PET obj{};

    obj.stable_master = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_STABLE_PET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000270); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.stable_master);

    return writer.m_buf;
}

CMSG_UNSTABLE_PET CMSG_UNSTABLE_PET_read(Reader& reader) {
    CMSG_UNSTABLE_PET obj{};

    obj.stable_master = reader.read_u64();

    obj.pet_number = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_UNSTABLE_PET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000271); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.stable_master);

    writer.write_u32(obj.pet_number);

    return writer.m_buf;
}

CMSG_BUY_STABLE_SLOT CMSG_BUY_STABLE_SLOT_read(Reader& reader) {
    CMSG_BUY_STABLE_SLOT obj{};

    obj.npc = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BUY_STABLE_SLOT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000272); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.npc);

    return writer.m_buf;
}

SMSG_STABLE_RESULT SMSG_STABLE_RESULT_read(Reader& reader) {
    SMSG_STABLE_RESULT obj{};

    obj.result = static_cast<StableResult>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_STABLE_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x00000273); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    return writer.m_buf;
}

CMSG_STABLE_SWAP_PET CMSG_STABLE_SWAP_PET_read(Reader& reader) {
    CMSG_STABLE_SWAP_PET obj{};

    obj.npc = reader.read_u64();

    obj.pet_slot = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_STABLE_SWAP_PET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000275); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.npc);

    writer.write_u32(obj.pet_slot);

    return writer.m_buf;
}

MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT_read(Reader& reader) {
    MSG_QUEST_PUSH_RESULT obj{};

    obj.guid = reader.read_u64();

    obj.message = static_cast<QuestPartyMessage>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_QUEST_PUSH_RESULT::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x00000276); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(static_cast<uint8_t>(obj.message));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_QUEST_PUSH_RESULT::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 2)); /* size */

    writer.write_u16(0x00000276); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(static_cast<uint8_t>(obj.message));

    return writer.m_buf;
}

SMSG_PLAY_MUSIC SMSG_PLAY_MUSIC_read(Reader& reader) {
    SMSG_PLAY_MUSIC obj{};

    obj.sound_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PLAY_MUSIC::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000277); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.sound_id);

    return writer.m_buf;
}

SMSG_PLAY_OBJECT_SOUND SMSG_PLAY_OBJECT_SOUND_read(Reader& reader) {
    SMSG_PLAY_OBJECT_SOUND obj{};

    obj.sound_id = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PLAY_OBJECT_SOUND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x00000278); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.sound_id);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REQUEST_PET_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000279); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_FAR_SIGHT CMSG_FAR_SIGHT_read(Reader& reader) {
    CMSG_FAR_SIGHT obj{};

    obj.operation = static_cast<FarSightOperation>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FAR_SIGHT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x0000027a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.operation));

    return writer.m_buf;
}

static size_t SMSG_SPELLDISPELLOG_size(const SMSG_SPELLDISPELLOG& obj) {
    return 9 + ::wow_world_messages::util::wwm_packed_guid_size(obj.victim) + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster) + 5 * obj.spells.size();
}

SMSG_SPELLDISPELLOG SMSG_SPELLDISPELLOG_read(Reader& reader) {
    SMSG_SPELLDISPELLOG obj{};

    obj.victim = reader.read_packed_guid();

    obj.caster = reader.read_packed_guid();

    obj.dispell_spell = reader.read_u32();

    obj.unknown = reader.read_u8();

    auto amount_of_spells = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_spells; ++i) {
        obj.spells.push_back(::wow_world_messages::wrath::DispelledSpell_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELLDISPELLOG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELLDISPELLOG_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELLDISPELLOG_size(obj) + 2)); /* size */

    writer.write_u16(0x0000027b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.victim);

    writer.write_packed_guid(obj.caster);

    writer.write_u32(obj.dispell_spell);

    writer.write_u8(obj.unknown);

    writer.write_u32(static_cast<uint32_t>(obj.spells.size()));

    for (const auto& v : obj.spells) {
        DispelledSpell_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_GROUP_CHANGE_SUB_GROUP_size(const CMSG_GROUP_CHANGE_SUB_GROUP& obj) {
    return 2 + obj.name.size();
}

CMSG_GROUP_CHANGE_SUB_GROUP CMSG_GROUP_CHANGE_SUB_GROUP_read(Reader& reader) {
    CMSG_GROUP_CHANGE_SUB_GROUP obj{};

    obj.name = reader.read_cstring();

    obj.group_number = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_CHANGE_SUB_GROUP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GROUP_CHANGE_SUB_GROUP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GROUP_CHANGE_SUB_GROUP_size(obj) + 4)); /* size */

    writer.write_u32(0x0000027e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    writer.write_u8(obj.group_number);

    return writer.m_buf;
}

CMSG_REQUEST_PARTY_MEMBER_STATS CMSG_REQUEST_PARTY_MEMBER_STATS_read(Reader& reader) {
    CMSG_REQUEST_PARTY_MEMBER_STATS obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REQUEST_PARTY_MEMBER_STATS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000027f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t CMSG_GROUP_SWAP_SUB_GROUP_size(const CMSG_GROUP_SWAP_SUB_GROUP& obj) {
    return 2 + obj.name.size() + obj.swap_with_name.size();
}

CMSG_GROUP_SWAP_SUB_GROUP CMSG_GROUP_SWAP_SUB_GROUP_read(Reader& reader) {
    CMSG_GROUP_SWAP_SUB_GROUP obj{};

    obj.name = reader.read_cstring();

    obj.swap_with_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_SWAP_SUB_GROUP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GROUP_SWAP_SUB_GROUP_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GROUP_SWAP_SUB_GROUP_size(obj) + 4)); /* size */

    writer.write_u32(0x00000280); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    writer.write_cstring(obj.swap_with_name);

    return writer.m_buf;
}

CMSG_AUTOSTORE_BANK_ITEM CMSG_AUTOSTORE_BANK_ITEM_read(Reader& reader) {
    CMSG_AUTOSTORE_BANK_ITEM obj{};

    obj.bag_index = reader.read_u8();

    obj.slot_index = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUTOSTORE_BANK_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 4)); /* size */

    writer.write_u32(0x00000282); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.bag_index);

    writer.write_u8(obj.slot_index);

    return writer.m_buf;
}

CMSG_AUTOBANK_ITEM CMSG_AUTOBANK_ITEM_read(Reader& reader) {
    CMSG_AUTOBANK_ITEM obj{};

    obj.bag_index = reader.read_u8();

    obj.slot_index = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUTOBANK_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 4)); /* size */

    writer.write_u32(0x00000283); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.bag_index);

    writer.write_u8(obj.slot_index);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_QUERY_NEXT_MAIL_TIME_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000284); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t MSG_QUERY_NEXT_MAIL_TIME_Server_size(const MSG_QUERY_NEXT_MAIL_TIME_Server& obj) {
    return 8 + 24 * obj.mails.size();
}

MSG_QUERY_NEXT_MAIL_TIME_Server MSG_QUERY_NEXT_MAIL_TIME_Server_read(Reader& reader) {
    MSG_QUERY_NEXT_MAIL_TIME_Server obj{};

    obj.float_type = reader.read_u32();

    auto amount_of_mails = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_mails; ++i) {
        obj.mails.push_back(::wow_world_messages::wrath::ReceivedMail_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_QUERY_NEXT_MAIL_TIME_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_QUERY_NEXT_MAIL_TIME_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_QUERY_NEXT_MAIL_TIME_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x00000284); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.float_type);

    writer.write_u32(static_cast<uint32_t>(obj.mails.size()));

    for (const auto& v : obj.mails) {
        ReceivedMail_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_RECEIVED_MAIL SMSG_RECEIVED_MAIL_read(Reader& reader) {
    SMSG_RECEIVED_MAIL obj{};

    obj.unknown1 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_RECEIVED_MAIL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000285); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown1);

    return writer.m_buf;
}

SMSG_RAID_GROUP_ONLY SMSG_RAID_GROUP_ONLY_read(Reader& reader) {
    SMSG_RAID_GROUP_ONLY obj{};

    obj.homebind_timer = reader.read_u32();

    obj.error = static_cast<RaidGroupError>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_RAID_GROUP_ONLY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x00000286); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.homebind_timer);

    writer.write_u32(static_cast<uint32_t>(obj.error));

    return writer.m_buf;
}

SMSG_PVP_CREDIT SMSG_PVP_CREDIT_read(Reader& reader) {
    SMSG_PVP_CREDIT obj{};

    obj.honor_points = reader.read_u32();

    obj.victim = reader.read_u64();

    obj.rank = static_cast<PvpRank>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PVP_CREDIT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x0000028c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.honor_points);

    writer.write_u64(obj.victim);

    writer.write_u32(static_cast<uint32_t>(obj.rank));

    return writer.m_buf;
}

SMSG_AUCTION_REMOVED_NOTIFICATION SMSG_AUCTION_REMOVED_NOTIFICATION_read(Reader& reader) {
    SMSG_AUCTION_REMOVED_NOTIFICATION obj{};

    obj.item = reader.read_u32();

    obj.item_template = reader.read_u32();

    obj.random_property_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AUCTION_REMOVED_NOTIFICATION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x0000028d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.item);

    writer.write_u32(obj.item_template);

    writer.write_u32(obj.random_property_id);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_RAID_CONVERT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000028e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_GROUP_ASSISTANT_LEADER CMSG_GROUP_ASSISTANT_LEADER_read(Reader& reader) {
    CMSG_GROUP_ASSISTANT_LEADER obj{};

    obj.guid = reader.read_u64();

    obj.set_assistant = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GROUP_ASSISTANT_LEADER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x0000028f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_bool8(obj.set_assistant);

    return writer.m_buf;
}

CMSG_BUYBACK_ITEM CMSG_BUYBACK_ITEM_read(Reader& reader) {
    CMSG_BUYBACK_ITEM obj{};

    obj.guid = reader.read_u64();

    obj.slot = static_cast<BuybackSlot>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BUYBACK_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000290); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.slot));

    return writer.m_buf;
}

static size_t SMSG_SERVER_MESSAGE_size(const SMSG_SERVER_MESSAGE& obj) {
    return 5 + obj.message.size();
}

SMSG_SERVER_MESSAGE SMSG_SERVER_MESSAGE_read(Reader& reader) {
    SMSG_SERVER_MESSAGE obj{};

    obj.message_type = static_cast<ServerMessageType>(reader.read_u32());

    obj.message = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SERVER_MESSAGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SERVER_MESSAGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SERVER_MESSAGE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000291); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.message_type));

    writer.write_cstring(obj.message);

    return writer.m_buf;
}

CMSG_SET_SAVED_INSTANCE_EXTEND CMSG_SET_SAVED_INSTANCE_EXTEND_read(Reader& reader) {
    CMSG_SET_SAVED_INSTANCE_EXTEND obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    obj.difficulty = static_cast<RaidDifficulty>(reader.read_u8());

    obj.toggle_extend = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_SAVED_INSTANCE_EXTEND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0006);

    writer.write_u16_be(static_cast<uint16_t>(0x0006 + 4)); /* size */

    writer.write_u32(0x00000292); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u8(static_cast<uint8_t>(obj.difficulty));

    writer.write_bool8(obj.toggle_extend);

    return writer.m_buf;
}

SMSG_LFG_OFFER_CONTINUE SMSG_LFG_OFFER_CONTINUE_read(Reader& reader) {
    SMSG_LFG_OFFER_CONTINUE obj{};

    obj.dungeon_entry = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_OFFER_CONTINUE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000293); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.dungeon_entry);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LFG_GET_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000296); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_SHOW_MAILBOX SMSG_SHOW_MAILBOX_read(Reader& reader) {
    SMSG_SHOW_MAILBOX obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SHOW_MAILBOX::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x00000297); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GMTICKETSYSTEM_TOGGLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000029a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CANCEL_GROWTH_AURA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000029b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_CANCEL_AUTO_REPEAT_size(const SMSG_CANCEL_AUTO_REPEAT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.target);
}

SMSG_CANCEL_AUTO_REPEAT SMSG_CANCEL_AUTO_REPEAT_read(Reader& reader) {
    SMSG_CANCEL_AUTO_REPEAT obj{};

    obj.target = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CANCEL_AUTO_REPEAT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CANCEL_AUTO_REPEAT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CANCEL_AUTO_REPEAT_size(obj) + 2)); /* size */

    writer.write_u16(0x0000029c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.target);

    return writer.m_buf;
}

SMSG_STANDSTATE_UPDATE SMSG_STANDSTATE_UPDATE_read(Reader& reader) {
    SMSG_STANDSTATE_UPDATE obj{};

    obj.state = static_cast<UnitStandState>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_STANDSTATE_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x0000029d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.state));

    return writer.m_buf;
}

SMSG_LOOT_ALL_PASSED SMSG_LOOT_ALL_PASSED_read(Reader& reader) {
    SMSG_LOOT_ALL_PASSED obj{};

    obj.looted_target = reader.read_u64();

    obj.loot_slot = reader.read_u32();

    obj.item = reader.read_u32();

    obj.item_random_property_id = reader.read_u32();

    obj.item_random_suffix_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_ALL_PASSED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0018);

    writer.write_u16_be(static_cast<uint16_t>(0x0018 + 2)); /* size */

    writer.write_u16(0x0000029e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.looted_target);

    writer.write_u32(obj.loot_slot);

    writer.write_u32(obj.item);

    writer.write_u32(obj.item_random_property_id);

    writer.write_u32(obj.item_random_suffix_id);

    return writer.m_buf;
}

SMSG_LOOT_ROLL_WON SMSG_LOOT_ROLL_WON_read(Reader& reader) {
    SMSG_LOOT_ROLL_WON obj{};

    obj.looted_target = reader.read_u64();

    obj.loot_slot = reader.read_u32();

    obj.item = reader.read_u32();

    obj.item_random_suffix = reader.read_u32();

    obj.item_random_property_id = reader.read_u32();

    obj.winning_player = reader.read_u64();

    obj.winning_roll = reader.read_u8();

    obj.vote = static_cast<RollVote>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_ROLL_WON::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0022);

    writer.write_u16_be(static_cast<uint16_t>(0x0022 + 2)); /* size */

    writer.write_u16(0x0000029f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.looted_target);

    writer.write_u32(obj.loot_slot);

    writer.write_u32(obj.item);

    writer.write_u32(obj.item_random_suffix);

    writer.write_u32(obj.item_random_property_id);

    writer.write_u64(obj.winning_player);

    writer.write_u8(obj.winning_roll);

    writer.write_u8(static_cast<uint8_t>(obj.vote));

    return writer.m_buf;
}

CMSG_LOOT_ROLL CMSG_LOOT_ROLL_read(Reader& reader) {
    CMSG_LOOT_ROLL obj{};

    obj.item = reader.read_u64();

    obj.item_slot = reader.read_u32();

    obj.vote = static_cast<RollVote>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LOOT_ROLL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000d);

    writer.write_u16_be(static_cast<uint16_t>(0x000d + 4)); /* size */

    writer.write_u32(0x000002a0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    writer.write_u32(obj.item_slot);

    writer.write_u8(static_cast<uint8_t>(obj.vote));

    return writer.m_buf;
}

SMSG_LOOT_START_ROLL SMSG_LOOT_START_ROLL_read(Reader& reader) {
    SMSG_LOOT_START_ROLL obj{};

    obj.creature = reader.read_u64();

    obj.map = static_cast<Map>(reader.read_u32());

    obj.loot_slot = reader.read_u32();

    obj.item = reader.read_u32();

    obj.item_random_suffix = reader.read_u32();

    obj.item_random_property_id = reader.read_u32();

    obj.countdown_time = reader.read_u32();

    obj.flags = static_cast<RollFlags>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_START_ROLL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0021);

    writer.write_u16_be(static_cast<uint16_t>(0x0021 + 2)); /* size */

    writer.write_u16(0x000002a1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.creature);

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(obj.loot_slot);

    writer.write_u32(obj.item);

    writer.write_u32(obj.item_random_suffix);

    writer.write_u32(obj.item_random_property_id);

    writer.write_u32(obj.countdown_time);

    writer.write_u8(static_cast<uint8_t>(obj.flags));

    return writer.m_buf;
}

SMSG_LOOT_ROLL SMSG_LOOT_ROLL_read(Reader& reader) {
    SMSG_LOOT_ROLL obj{};

    obj.creature = reader.read_u64();

    obj.loot_slot = reader.read_u32();

    obj.player = reader.read_u64();

    obj.item = reader.read_u32();

    obj.item_random_suffix = reader.read_u32();

    obj.item_random_property_id = reader.read_u32();

    obj.roll_number = reader.read_u8();

    obj.vote = static_cast<RollVote>(reader.read_u8());

    obj.auto_pass = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_ROLL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0023);

    writer.write_u16_be(static_cast<uint16_t>(0x0023 + 2)); /* size */

    writer.write_u16(0x000002a2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.creature);

    writer.write_u32(obj.loot_slot);

    writer.write_u64(obj.player);

    writer.write_u32(obj.item);

    writer.write_u32(obj.item_random_suffix);

    writer.write_u32(obj.item_random_property_id);

    writer.write_u8(obj.roll_number);

    writer.write_u8(static_cast<uint8_t>(obj.vote));

    writer.write_u8(obj.auto_pass);

    return writer.m_buf;
}

CMSG_LOOT_MASTER_GIVE CMSG_LOOT_MASTER_GIVE_read(Reader& reader) {
    CMSG_LOOT_MASTER_GIVE obj{};

    obj.loot = reader.read_u64();

    obj.slot_id = reader.read_u8();

    obj.player = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LOOT_MASTER_GIVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0011);

    writer.write_u16_be(static_cast<uint16_t>(0x0011 + 4)); /* size */

    writer.write_u32(0x000002a3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.loot);

    writer.write_u8(obj.slot_id);

    writer.write_u64(obj.player);

    return writer.m_buf;
}

static size_t SMSG_LOOT_MASTER_LIST_size(const SMSG_LOOT_MASTER_LIST& obj) {
    return 1 + 8 * obj.guids.size();
}

SMSG_LOOT_MASTER_LIST SMSG_LOOT_MASTER_LIST_read(Reader& reader) {
    SMSG_LOOT_MASTER_LIST obj{};

    auto amount_of_players = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_players; ++i) {
        obj.guids.push_back(reader.read_u64());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_MASTER_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LOOT_MASTER_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LOOT_MASTER_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x000002a4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.guids.size()));

    for (const auto& v : obj.guids) {
        writer.write_u64(v);
    }

    return writer.m_buf;
}

static size_t SMSG_SET_FORCED_REACTIONS_size(const SMSG_SET_FORCED_REACTIONS& obj) {
    return 4 + 6 * obj.reactions.size();
}

SMSG_SET_FORCED_REACTIONS SMSG_SET_FORCED_REACTIONS_read(Reader& reader) {
    SMSG_SET_FORCED_REACTIONS obj{};

    auto amount_of_reactions = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_reactions; ++i) {
        obj.reactions.push_back(::wow_world_messages::wrath::ForcedReaction_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SET_FORCED_REACTIONS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SET_FORCED_REACTIONS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SET_FORCED_REACTIONS_size(obj) + 2)); /* size */

    writer.write_u16(0x000002a5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.reactions.size()));

    for (const auto& v : obj.reactions) {
        ForcedReaction_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_SPELL_FAILED_OTHER SMSG_SPELL_FAILED_OTHER_read(Reader& reader) {
    SMSG_SPELL_FAILED_OTHER obj{};

    obj.caster = reader.read_u64();

    obj.id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELL_FAILED_OTHER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000002a6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.caster);

    writer.write_u32(obj.id);

    return writer.m_buf;
}

CMSG_REPAIR_ITEM CMSG_REPAIR_ITEM_read(Reader& reader) {
    CMSG_REPAIR_ITEM obj{};

    obj.npc = reader.read_u64();

    obj.item = reader.read_u64();

    obj.from_guild_bank = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REPAIR_ITEM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0011);

    writer.write_u16_be(static_cast<uint16_t>(0x0011 + 4)); /* size */

    writer.write_u32(0x000002a8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.npc);

    writer.write_u64(obj.item);

    writer.write_bool8(obj.from_guild_bank);

    return writer.m_buf;
}

static size_t SMSG_CHAT_PLAYER_NOT_FOUND_size(const SMSG_CHAT_PLAYER_NOT_FOUND& obj) {
    return 1 + obj.name.size();
}

SMSG_CHAT_PLAYER_NOT_FOUND SMSG_CHAT_PLAYER_NOT_FOUND_read(Reader& reader) {
    SMSG_CHAT_PLAYER_NOT_FOUND obj{};

    obj.name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHAT_PLAYER_NOT_FOUND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CHAT_PLAYER_NOT_FOUND_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CHAT_PLAYER_NOT_FOUND_size(obj) + 2)); /* size */

    writer.write_u16(0x000002a9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    return writer.m_buf;
}

MSG_TALENT_WIPE_CONFIRM_Client MSG_TALENT_WIPE_CONFIRM_Client_read(Reader& reader) {
    MSG_TALENT_WIPE_CONFIRM_Client obj{};

    obj.wiping_npc = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_TALENT_WIPE_CONFIRM_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000002aa); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.wiping_npc);

    return writer.m_buf;
}

MSG_TALENT_WIPE_CONFIRM_Server MSG_TALENT_WIPE_CONFIRM_Server_read(Reader& reader) {
    MSG_TALENT_WIPE_CONFIRM_Server obj{};

    obj.wiping_npc = reader.read_u64();

    obj.cost_in_copper = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_TALENT_WIPE_CONFIRM_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000002aa); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.wiping_npc);

    writer.write_u32(obj.cost_in_copper);

    return writer.m_buf;
}

SMSG_SUMMON_REQUEST SMSG_SUMMON_REQUEST_read(Reader& reader) {
    SMSG_SUMMON_REQUEST obj{};

    obj.summoner = reader.read_u64();

    obj.area = static_cast<Area>(reader.read_u32());

    obj.auto_decline_time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SUMMON_REQUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x000002ab); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.summoner);

    writer.write_u32(static_cast<uint32_t>(obj.area));

    writer.write_u32(obj.auto_decline_time);

    return writer.m_buf;
}

CMSG_SUMMON_RESPONSE CMSG_SUMMON_RESPONSE_read(Reader& reader) {
    CMSG_SUMMON_RESPONSE obj{};

    obj.summoner = reader.read_u64();

    obj.agree = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SUMMON_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x000002ac); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.summoner);

    writer.write_bool8(obj.agree);

    return writer.m_buf;
}

static size_t SMSG_MONSTER_MOVE_TRANSPORT_size(const SMSG_MONSTER_MOVE_TRANSPORT& obj) {
    size_t _size = 26 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + ::wow_world_messages::util::wwm_packed_guid_size(obj.transport) + ::wow_world_messages::util::wwm_monster_move_spline_size(obj.splines);

    if (obj.move_type == MonsterMoveType::FACING_TARGET) {
        _size += 8;
    }
    else if (obj.move_type == MonsterMoveType::FACING_ANGLE) {
        _size += 4;
    }
    else if (obj.move_type == MonsterMoveType::FACING_SPOT) {
        _size += 12;
    }

    if ((obj.spline_flags & SPLINE_FLAG_ENTER_CYCLE) != 0) {
        _size += 8;
    }

    if ((obj.spline_flags & SPLINE_FLAG_PARABOLIC) != 0) {
        _size += 8;
    }

    return _size;
}

SMSG_MONSTER_MOVE_TRANSPORT SMSG_MONSTER_MOVE_TRANSPORT_read(Reader& reader) {
    SMSG_MONSTER_MOVE_TRANSPORT obj{};

    obj.guid = reader.read_packed_guid();

    obj.transport = reader.read_packed_guid();

    obj.unknown = reader.read_u8();

    obj.spline_point = ::wow_world_messages::all::Vector3d_read(reader);

    obj.spline_id = reader.read_u32();

    obj.move_type = static_cast<MonsterMoveType>(reader.read_u8());

    if (obj.move_type == MonsterMoveType::FACING_TARGET) {
        obj.target = reader.read_u64();

    }
    else if (obj.move_type == MonsterMoveType::FACING_ANGLE) {
        obj.angle = reader.read_float();

    }
    else if (obj.move_type == MonsterMoveType::FACING_SPOT) {
        obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    }
    obj.spline_flags = static_cast<SplineFlag>(reader.read_u32());

    if ((obj.spline_flags & SPLINE_FLAG_ENTER_CYCLE) != 0) {
        obj.animation_id = reader.read_u32();

        obj.animation_start_time = reader.read_u32();

    }
    obj.duration = reader.read_u32();

    if ((obj.spline_flags & SPLINE_FLAG_PARABOLIC) != 0) {
        obj.vertical_acceleration = reader.read_float();

        obj.effect_start_time = reader.read_u32();

    }
    obj.splines = ::wow_world_messages::util::wwm_read_monster_move_spline(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MONSTER_MOVE_TRANSPORT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MONSTER_MOVE_TRANSPORT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MONSTER_MOVE_TRANSPORT_size(obj) + 2)); /* size */

    writer.write_u16(0x000002ae); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_packed_guid(obj.transport);

    writer.write_u8(obj.unknown);

    Vector3d_write(writer, obj.spline_point);

    writer.write_u32(obj.spline_id);

    writer.write_u8(static_cast<uint8_t>(obj.move_type));

    if (obj.move_type == MonsterMoveType::FACING_TARGET) {
        writer.write_u64(obj.target);

    }
    else if (obj.move_type == MonsterMoveType::FACING_ANGLE) {
        writer.write_float(obj.angle);

    }
    else if (obj.move_type == MonsterMoveType::FACING_SPOT) {
        Vector3d_write(writer, obj.position);

    }
    writer.write_u32(static_cast<uint32_t>(obj.spline_flags));

    if ((obj.spline_flags & SPLINE_FLAG_ENTER_CYCLE) != 0) {
        writer.write_u32(obj.animation_id);

        writer.write_u32(obj.animation_start_time);

    }
    writer.write_u32(obj.duration);

    if ((obj.spline_flags & SPLINE_FLAG_PARABOLIC) != 0) {
        writer.write_float(obj.vertical_acceleration);

        writer.write_u32(obj.effect_start_time);

    }
    ::wow_world_messages::util::wwm_write_monster_move_spline(writer, obj.splines);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_BROKEN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000002af); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t MSG_MOVE_FEATHER_FALL_Server_size(const MSG_MOVE_FEATHER_FALL_Server& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

MSG_MOVE_FEATHER_FALL_Server MSG_MOVE_FEATHER_FALL_Server_read(Reader& reader) {
    MSG_MOVE_FEATHER_FALL_Server obj{};

    obj.player = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_FEATHER_FALL_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_FEATHER_FALL_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_FEATHER_FALL_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x000002b0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_WATER_WALK_size(const MSG_MOVE_WATER_WALK& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK_read(Reader& reader) {
    MSG_MOVE_WATER_WALK obj{};

    obj.player = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_WATER_WALK::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_WATER_WALK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_WATER_WALK_size(obj) + 4)); /* size */

    writer.write_u32(0x000002b1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_WATER_WALK::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_WATER_WALK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_WATER_WALK_size(obj) + 2)); /* size */

    writer.write_u16(0x000002b1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SELF_RES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000002b3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FEIGN_DEATH_RESISTED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000002b4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_DUEL_COUNTDOWN SMSG_DUEL_COUNTDOWN_read(Reader& reader) {
    SMSG_DUEL_COUNTDOWN obj{};

    obj.time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DUEL_COUNTDOWN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000002b7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.time);

    return writer.m_buf;
}

static size_t SMSG_AREA_TRIGGER_MESSAGE_size(const SMSG_AREA_TRIGGER_MESSAGE& obj) {
    return 5 + obj.message.size();
}

SMSG_AREA_TRIGGER_MESSAGE SMSG_AREA_TRIGGER_MESSAGE_read(Reader& reader) {
    SMSG_AREA_TRIGGER_MESSAGE obj{};

    obj.message = reader.read_sized_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AREA_TRIGGER_MESSAGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_AREA_TRIGGER_MESSAGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_AREA_TRIGGER_MESSAGE_size(obj) + 2)); /* size */

    writer.write_u16(0x000002b8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_sized_cstring(obj.message);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TOGGLE_HELM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000002b9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TOGGLE_CLOAK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000002ba); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_LFG_ROLE_CHOSEN SMSG_LFG_ROLE_CHOSEN_read(Reader& reader) {
    SMSG_LFG_ROLE_CHOSEN obj{};

    obj.guid = reader.read_u64();

    obj.ready = reader.read_bool8();

    obj.roles = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_ROLE_CHOSEN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000d);

    writer.write_u16_be(static_cast<uint16_t>(0x000d + 2)); /* size */

    writer.write_u16(0x000002bb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_bool8(obj.ready);

    writer.write_u32(obj.roles);

    return writer.m_buf;
}

SMSG_PLAYER_SKINNED SMSG_PLAYER_SKINNED_read(Reader& reader) {
    SMSG_PLAYER_SKINNED obj{};

    obj.spirit_released = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PLAYER_SKINNED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x000002bc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.spirit_released);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DURABILITY_DAMAGE_DEATH::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000002bd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_SET_ACTIONBAR_TOGGLES CMSG_SET_ACTIONBAR_TOGGLES_read(Reader& reader) {
    CMSG_SET_ACTIONBAR_TOGGLES obj{};

    obj.action_bar = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_ACTIONBAR_TOGGLES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x000002bf); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.action_bar);

    return writer.m_buf;
}

static size_t MSG_PETITION_RENAME_size(const MSG_PETITION_RENAME& obj) {
    return 9 + obj.new_name.size();
}

MSG_PETITION_RENAME MSG_PETITION_RENAME_read(Reader& reader) {
    MSG_PETITION_RENAME obj{};

    obj.petition = reader.read_u64();

    obj.new_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_PETITION_RENAME::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_PETITION_RENAME_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_PETITION_RENAME_size(obj) + 4)); /* size */

    writer.write_u32(0x000002c1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.petition);

    writer.write_cstring(obj.new_name);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_PETITION_RENAME::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_PETITION_RENAME_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_PETITION_RENAME_size(obj) + 2)); /* size */

    writer.write_u16(0x000002c1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.petition);

    writer.write_cstring(obj.new_name);

    return writer.m_buf;
}

static size_t SMSG_INIT_WORLD_STATES_size(const SMSG_INIT_WORLD_STATES& obj) {
    return 14 + 8 * obj.states.size();
}

SMSG_INIT_WORLD_STATES SMSG_INIT_WORLD_STATES_read(Reader& reader) {
    SMSG_INIT_WORLD_STATES obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    obj.area = static_cast<Area>(reader.read_u32());

    obj.sub_area = static_cast<Area>(reader.read_u32());

    auto amount_of_states = reader.read_u16();

    for (uint16_t i = 0; i < amount_of_states; ++i) {
        obj.states.push_back(::wow_world_messages::wrath::WorldState_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INIT_WORLD_STATES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_INIT_WORLD_STATES_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_INIT_WORLD_STATES_size(obj) + 2)); /* size */

    writer.write_u16(0x000002c2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(static_cast<uint32_t>(obj.area));

    writer.write_u32(static_cast<uint32_t>(obj.sub_area));

    writer.write_u16(static_cast<uint16_t>(obj.states.size()));

    for (const auto& v : obj.states) {
        WorldState_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_UPDATE_WORLD_STATE SMSG_UPDATE_WORLD_STATE_read(Reader& reader) {
    SMSG_UPDATE_WORLD_STATE obj{};

    obj.state = ::wow_world_messages::wrath::WorldState_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_UPDATE_WORLD_STATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000002c3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    WorldState_write(writer, obj.state);

    return writer.m_buf;
}

CMSG_ITEM_NAME_QUERY CMSG_ITEM_NAME_QUERY_read(Reader& reader) {
    CMSG_ITEM_NAME_QUERY obj{};

    obj.item = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ITEM_NAME_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x000002c4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.item);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_ITEM_NAME_QUERY_RESPONSE_size(const SMSG_ITEM_NAME_QUERY_RESPONSE& obj) {
    return 6 + obj.item_name.size();
}

SMSG_ITEM_NAME_QUERY_RESPONSE SMSG_ITEM_NAME_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_ITEM_NAME_QUERY_RESPONSE obj{};

    obj.item = reader.read_u32();

    obj.item_name = reader.read_cstring();

    obj.inventory_type = static_cast<InventoryType>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ITEM_NAME_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ITEM_NAME_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ITEM_NAME_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x000002c5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.item);

    writer.write_cstring(obj.item_name);

    writer.write_u8(static_cast<uint8_t>(obj.inventory_type));

    return writer.m_buf;
}

SMSG_PET_ACTION_FEEDBACK SMSG_PET_ACTION_FEEDBACK_read(Reader& reader) {
    SMSG_PET_ACTION_FEEDBACK obj{};

    obj.feedback = static_cast<PetFeedback>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_ACTION_FEEDBACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x000002c6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.feedback));

    return writer.m_buf;
}

static size_t CMSG_CHAR_RENAME_size(const CMSG_CHAR_RENAME& obj) {
    return 9 + obj.new_name.size();
}

CMSG_CHAR_RENAME CMSG_CHAR_RENAME_read(Reader& reader) {
    CMSG_CHAR_RENAME obj{};

    obj.character = reader.read_u64();

    obj.new_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHAR_RENAME::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHAR_RENAME_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHAR_RENAME_size(obj) + 4)); /* size */

    writer.write_u32(0x000002c7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.character);

    writer.write_cstring(obj.new_name);

    return writer.m_buf;
}

static size_t SMSG_CHAR_RENAME_size(const SMSG_CHAR_RENAME& obj) {
    size_t _size = 1;

    if (obj.result == WorldResult::RESPONSE_SUCCESS) {
        _size += 9 + obj.new_name.size();
    }

    return _size;
}

SMSG_CHAR_RENAME SMSG_CHAR_RENAME_read(Reader& reader) {
    SMSG_CHAR_RENAME obj{};

    obj.result = static_cast<WorldResult>(reader.read_u8());

    if (obj.result == WorldResult::RESPONSE_SUCCESS) {
        obj.character = reader.read_u64();

        obj.new_name = reader.read_cstring();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHAR_RENAME::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CHAR_RENAME_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CHAR_RENAME_size(obj) + 2)); /* size */

    writer.write_u16(0x000002c8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    if (obj.result == WorldResult::RESPONSE_SUCCESS) {
        writer.write_u64(obj.character);

        writer.write_cstring(obj.new_name);

    }
    return writer.m_buf;
}

static size_t CMSG_MOVE_SPLINE_DONE_size(const CMSG_MOVE_SPLINE_DONE& obj) {
    return 4 + MovementInfo_size(obj.info);
}

CMSG_MOVE_SPLINE_DONE CMSG_MOVE_SPLINE_DONE_read(Reader& reader) {
    CMSG_MOVE_SPLINE_DONE obj{};

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.movement_counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_SPLINE_DONE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_SPLINE_DONE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_SPLINE_DONE_size(obj) + 4)); /* size */

    writer.write_u32(0x000002c9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    MovementInfo_write(writer, obj.info);

    writer.write_u32(obj.movement_counter);

    return writer.m_buf;
}

static size_t CMSG_MOVE_FALL_RESET_size(const CMSG_MOVE_FALL_RESET& obj) {
    return 0 + MovementInfo_size(obj.info);
}

CMSG_MOVE_FALL_RESET CMSG_MOVE_FALL_RESET_read(Reader& reader) {
    CMSG_MOVE_FALL_RESET obj{};

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_FALL_RESET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_FALL_RESET_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_FALL_RESET_size(obj) + 4)); /* size */

    writer.write_u32(0x000002ca); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

SMSG_INSTANCE_SAVE_CREATED SMSG_INSTANCE_SAVE_CREATED_read(Reader& reader) {
    SMSG_INSTANCE_SAVE_CREATED obj{};

    obj.unknown = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INSTANCE_SAVE_CREATED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000002cb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown);

    return writer.m_buf;
}

static size_t SMSG_RAID_INSTANCE_INFO_size(const SMSG_RAID_INSTANCE_INFO& obj) {
    return 4 + 22 * obj.raid_infos.size();
}

SMSG_RAID_INSTANCE_INFO SMSG_RAID_INSTANCE_INFO_read(Reader& reader) {
    SMSG_RAID_INSTANCE_INFO obj{};

    auto amount_of_raid_infos = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_raid_infos; ++i) {
        obj.raid_infos.push_back(::wow_world_messages::wrath::RaidInfo_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_RAID_INSTANCE_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_RAID_INSTANCE_INFO_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_RAID_INSTANCE_INFO_size(obj) + 2)); /* size */

    writer.write_u16(0x000002cc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.raid_infos.size()));

    for (const auto& v : obj.raid_infos) {
        RaidInfo_write(writer, v);
    }

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REQUEST_RAID_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000002cd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t CMSG_MOVE_TIME_SKIPPED_size(const CMSG_MOVE_TIME_SKIPPED& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

CMSG_MOVE_TIME_SKIPPED CMSG_MOVE_TIME_SKIPPED_read(Reader& reader) {
    CMSG_MOVE_TIME_SKIPPED obj{};

    obj.guid = reader.read_packed_guid();

    obj.lag = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_TIME_SKIPPED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_TIME_SKIPPED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_TIME_SKIPPED_size(obj) + 4)); /* size */

    writer.write_u32(0x000002ce); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.lag);

    return writer.m_buf;
}

static size_t CMSG_MOVE_FEATHER_FALL_ACK_size(const CMSG_MOVE_FEATHER_FALL_ACK& obj) {
    return 16 + MovementInfo_size(obj.info);
}

CMSG_MOVE_FEATHER_FALL_ACK CMSG_MOVE_FEATHER_FALL_ACK_read(Reader& reader) {
    CMSG_MOVE_FEATHER_FALL_ACK obj{};

    obj.guid = reader.read_u64();

    obj.movement_counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.apply = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_FEATHER_FALL_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_FEATHER_FALL_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_FEATHER_FALL_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000002cf); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.movement_counter);

    MovementInfo_write(writer, obj.info);

    writer.write_u32(obj.apply);

    return writer.m_buf;
}

static size_t CMSG_MOVE_WATER_WALK_ACK_size(const CMSG_MOVE_WATER_WALK_ACK& obj) {
    return 16 + MovementInfo_size(obj.info);
}

CMSG_MOVE_WATER_WALK_ACK CMSG_MOVE_WATER_WALK_ACK_read(Reader& reader) {
    CMSG_MOVE_WATER_WALK_ACK obj{};

    obj.guid = reader.read_u64();

    obj.movement_counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.apply = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_WATER_WALK_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_WATER_WALK_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_WATER_WALK_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000002d0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.movement_counter);

    MovementInfo_write(writer, obj.info);

    writer.write_u32(obj.apply);

    return writer.m_buf;
}

static size_t CMSG_MOVE_NOT_ACTIVE_MOVER_size(const CMSG_MOVE_NOT_ACTIVE_MOVER& obj) {
    return 8 + MovementInfo_size(obj.info);
}

CMSG_MOVE_NOT_ACTIVE_MOVER CMSG_MOVE_NOT_ACTIVE_MOVER_read(Reader& reader) {
    CMSG_MOVE_NOT_ACTIVE_MOVER obj{};

    obj.old_mover = reader.read_u64();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_NOT_ACTIVE_MOVER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_NOT_ACTIVE_MOVER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_NOT_ACTIVE_MOVER_size(obj) + 4)); /* size */

    writer.write_u32(0x000002d1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.old_mover);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

SMSG_PLAY_SOUND SMSG_PLAY_SOUND_read(Reader& reader) {
    SMSG_PLAY_SOUND obj{};

    obj.sound_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PLAY_SOUND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000002d2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.sound_id);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BATTLEFIELD_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000002d3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_BATTLEFIELD_STATUS_size(const SMSG_BATTLEFIELD_STATUS& obj) {
    size_t _size = 20;

    if (obj.status_id == StatusId::WAIT_QUEUE) {
        _size += 8;
    }
    else if (obj.status_id == StatusId::WAIT_JOIN) {
        _size += 16;
    }
    else if (obj.status_id == StatusId::IN_PROGRESS) {
        _size += 21;
    }

    return _size;
}

SMSG_BATTLEFIELD_STATUS SMSG_BATTLEFIELD_STATUS_read(Reader& reader) {
    SMSG_BATTLEFIELD_STATUS obj{};

    obj.queue_slot = reader.read_u32();

    obj.arena_type = static_cast<ArenaType>(reader.read_u8());

    obj.is_arena = reader.read_u8();

    obj.battleground_type = static_cast<BattlegroundType>(reader.read_u32());

    obj.unknown1 = reader.read_u16();

    obj.minimum_level = reader.read_u8();

    obj.maximum_level = reader.read_u8();

    obj.client_instance_id = reader.read_u32();

    obj.rated = reader.read_bool8();

    obj.status_id = static_cast<StatusId>(reader.read_u8());

    if (obj.status_id == StatusId::WAIT_QUEUE) {
        obj.average_wait_time_in_ms = reader.read_u32();

        obj.time_in_queue_in_ms = reader.read_u32();

    }
    else if (obj.status_id == StatusId::WAIT_JOIN) {
        obj.map1 = static_cast<Map>(reader.read_u32());

        obj.unknown2 = reader.read_u64();

        obj.time_to_remove_in_queue_in_ms = reader.read_u32();

    }
    else if (obj.status_id == StatusId::IN_PROGRESS) {
        obj.map2 = static_cast<Map>(reader.read_u32());

        obj.unknown3 = reader.read_u64();

        obj.time_to_bg_autoleave_in_ms = reader.read_u32();

        obj.time_to_bg_start_in_ms = reader.read_u32();

        obj.faction = static_cast<ArenaFaction>(reader.read_u8());

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEFIELD_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_BATTLEFIELD_STATUS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_BATTLEFIELD_STATUS_size(obj) + 2)); /* size */

    writer.write_u16(0x000002d4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.queue_slot);

    writer.write_u8(static_cast<uint8_t>(obj.arena_type));

    writer.write_u8(obj.is_arena);

    writer.write_u32(static_cast<uint32_t>(obj.battleground_type));

    writer.write_u16(obj.unknown1);

    writer.write_u8(obj.minimum_level);

    writer.write_u8(obj.maximum_level);

    writer.write_u32(obj.client_instance_id);

    writer.write_bool8(obj.rated);

    writer.write_u8(static_cast<uint8_t>(obj.status_id));

    if (obj.status_id == StatusId::WAIT_QUEUE) {
        writer.write_u32(obj.average_wait_time_in_ms);

        writer.write_u32(obj.time_in_queue_in_ms);

    }
    else if (obj.status_id == StatusId::WAIT_JOIN) {
        writer.write_u32(static_cast<uint32_t>(obj.map1));

        writer.write_u64(obj.unknown2);

        writer.write_u32(obj.time_to_remove_in_queue_in_ms);

    }
    else if (obj.status_id == StatusId::IN_PROGRESS) {
        writer.write_u32(static_cast<uint32_t>(obj.map2));

        writer.write_u64(obj.unknown3);

        writer.write_u32(obj.time_to_bg_autoleave_in_ms);

        writer.write_u32(obj.time_to_bg_start_in_ms);

        writer.write_u8(static_cast<uint8_t>(obj.faction));

    }
    return writer.m_buf;
}

CMSG_BATTLEFIELD_PORT CMSG_BATTLEFIELD_PORT_read(Reader& reader) {
    CMSG_BATTLEFIELD_PORT obj{};

    obj.arena_type = reader.read_u8();

    obj.unknown1 = reader.read_u8();

    obj.bg_type_id = reader.read_u32();

    obj.unknown2 = reader.read_u16();

    obj.action = static_cast<BattlefieldPortAction>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BATTLEFIELD_PORT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x000002d5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.arena_type);

    writer.write_u8(obj.unknown1);

    writer.write_u32(obj.bg_type_id);

    writer.write_u16(obj.unknown2);

    writer.write_u8(static_cast<uint8_t>(obj.action));

    return writer.m_buf;
}

MSG_INSPECT_HONOR_STATS_Client MSG_INSPECT_HONOR_STATS_Client_read(Reader& reader) {
    MSG_INSPECT_HONOR_STATS_Client obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_INSPECT_HONOR_STATS_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000002d6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

MSG_INSPECT_HONOR_STATS_Server MSG_INSPECT_HONOR_STATS_Server_read(Reader& reader) {
    MSG_INSPECT_HONOR_STATS_Server obj{};

    obj.guid = reader.read_u64();

    obj.amount_of_honor = reader.read_u8();

    obj.kills = reader.read_u32();

    obj.honor_today = reader.read_u32();

    obj.honor_yesterday = reader.read_u32();

    obj.lifetime_honorable_kills = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_INSPECT_HONOR_STATS_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0019);

    writer.write_u16_be(static_cast<uint16_t>(0x0019 + 2)); /* size */

    writer.write_u16(0x000002d6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u8(obj.amount_of_honor);

    writer.write_u32(obj.kills);

    writer.write_u32(obj.honor_today);

    writer.write_u32(obj.honor_yesterday);

    writer.write_u32(obj.lifetime_honorable_kills);

    return writer.m_buf;
}

CMSG_BATTLEMASTER_HELLO CMSG_BATTLEMASTER_HELLO_read(Reader& reader) {
    CMSG_BATTLEMASTER_HELLO obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BATTLEMASTER_HELLO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000002d7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_FORCE_WALK_SPEED_CHANGE_size(const SMSG_FORCE_WALK_SPEED_CHANGE& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_WALK_SPEED_CHANGE SMSG_FORCE_WALK_SPEED_CHANGE_read(Reader& reader) {
    SMSG_FORCE_WALK_SPEED_CHANGE obj{};

    obj.guid = reader.read_packed_guid();

    obj.move_event = reader.read_u32();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_WALK_SPEED_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_WALK_SPEED_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_WALK_SPEED_CHANGE_size(obj) + 2)); /* size */

    writer.write_u16(0x000002da); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.move_event);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t CMSG_FORCE_WALK_SPEED_CHANGE_ACK_size(const CMSG_FORCE_WALK_SPEED_CHANGE_ACK& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_FORCE_WALK_SPEED_CHANGE_ACK CMSG_FORCE_WALK_SPEED_CHANGE_ACK_read(Reader& reader) {
    CMSG_FORCE_WALK_SPEED_CHANGE_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FORCE_WALK_SPEED_CHANGE_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_FORCE_WALK_SPEED_CHANGE_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_FORCE_WALK_SPEED_CHANGE_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000002db); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

static size_t SMSG_FORCE_SWIM_BACK_SPEED_CHANGE_size(const SMSG_FORCE_SWIM_BACK_SPEED_CHANGE& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_SWIM_BACK_SPEED_CHANGE SMSG_FORCE_SWIM_BACK_SPEED_CHANGE_read(Reader& reader) {
    SMSG_FORCE_SWIM_BACK_SPEED_CHANGE obj{};

    obj.guid = reader.read_packed_guid();

    obj.move_event = reader.read_u32();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_SWIM_BACK_SPEED_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_SWIM_BACK_SPEED_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_SWIM_BACK_SPEED_CHANGE_size(obj) + 2)); /* size */

    writer.write_u16(0x000002dc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.move_event);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK_size(const CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK_read(Reader& reader) {
    CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000002dd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

static size_t SMSG_FORCE_TURN_RATE_CHANGE_size(const SMSG_FORCE_TURN_RATE_CHANGE& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_TURN_RATE_CHANGE SMSG_FORCE_TURN_RATE_CHANGE_read(Reader& reader) {
    SMSG_FORCE_TURN_RATE_CHANGE obj{};

    obj.guid = reader.read_packed_guid();

    obj.move_event = reader.read_u32();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_TURN_RATE_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_TURN_RATE_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_TURN_RATE_CHANGE_size(obj) + 2)); /* size */

    writer.write_u16(0x000002de); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.move_event);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t CMSG_FORCE_TURN_RATE_CHANGE_ACK_size(const CMSG_FORCE_TURN_RATE_CHANGE_ACK& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_FORCE_TURN_RATE_CHANGE_ACK CMSG_FORCE_TURN_RATE_CHANGE_ACK_read(Reader& reader) {
    CMSG_FORCE_TURN_RATE_CHANGE_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FORCE_TURN_RATE_CHANGE_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_FORCE_TURN_RATE_CHANGE_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_FORCE_TURN_RATE_CHANGE_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000002df); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.counter);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_PVP_LOG_DATA_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000002e0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_LEAVE_BATTLEFIELD CMSG_LEAVE_BATTLEFIELD_read(Reader& reader) {
    CMSG_LEAVE_BATTLEFIELD obj{};

    obj.unknown1 = reader.read_u8();

    obj.unknown2 = reader.read_u8();

    obj.map = static_cast<Map>(reader.read_u32());

    obj.unknown3 = reader.read_u16();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LEAVE_BATTLEFIELD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000002e1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.unknown1);

    writer.write_u8(obj.unknown2);

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u16(obj.unknown3);

    return writer.m_buf;
}

CMSG_AREA_SPIRIT_HEALER_QUERY CMSG_AREA_SPIRIT_HEALER_QUERY_read(Reader& reader) {
    CMSG_AREA_SPIRIT_HEALER_QUERY obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AREA_SPIRIT_HEALER_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000002e2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_AREA_SPIRIT_HEALER_QUEUE CMSG_AREA_SPIRIT_HEALER_QUEUE_read(Reader& reader) {
    CMSG_AREA_SPIRIT_HEALER_QUEUE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AREA_SPIRIT_HEALER_QUEUE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000002e3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_AREA_SPIRIT_HEALER_TIME SMSG_AREA_SPIRIT_HEALER_TIME_read(Reader& reader) {
    SMSG_AREA_SPIRIT_HEALER_TIME obj{};

    obj.guid = reader.read_u64();

    obj.next_resurrect_time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AREA_SPIRIT_HEALER_TIME::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000002e4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.next_resurrect_time);

    return writer.m_buf;
}

static size_t SMSG_WARDEN_DATA_size(const SMSG_WARDEN_DATA& obj) {
    return 0 + 1 * obj.encrypted_data.size();
}

SMSG_WARDEN_DATA SMSG_WARDEN_DATA_read(Reader& reader, size_t body_size) {
    SMSG_WARDEN_DATA obj{};
    size_t _size = 0;

    while (_size < body_size) {
        obj.encrypted_data.push_back(reader.read_u8());
        _size += 1;
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_WARDEN_DATA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_WARDEN_DATA_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_WARDEN_DATA_size(obj) + 2)); /* size */

    writer.write_u16(0x000002e6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    for (const auto& v : obj.encrypted_data) {
        writer.write_u8(v);
    }

    return writer.m_buf;
}

static size_t CMSG_WARDEN_DATA_size(const CMSG_WARDEN_DATA& obj) {
    return 0 + 1 * obj.encrypted_data.size();
}

CMSG_WARDEN_DATA CMSG_WARDEN_DATA_read(Reader& reader, size_t body_size) {
    CMSG_WARDEN_DATA obj{};
    size_t _size = 0;

    while (_size < body_size) {
        obj.encrypted_data.push_back(reader.read_u8());
        _size += 1;
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_WARDEN_DATA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_WARDEN_DATA_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_WARDEN_DATA_size(obj) + 4)); /* size */

    writer.write_u32(0x000002e7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    for (const auto& v : obj.encrypted_data) {
        writer.write_u8(v);
    }

    return writer.m_buf;
}

SMSG_GROUP_JOINED_BATTLEGROUND SMSG_GROUP_JOINED_BATTLEGROUND_read(Reader& reader) {
    SMSG_GROUP_JOINED_BATTLEGROUND obj{};

    obj.id = static_cast<BgTypeId>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GROUP_JOINED_BATTLEGROUND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000002e8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.id));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_BATTLEGROUND_PLAYER_POSITIONS_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000002e9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_size(const MSG_BATTLEGROUND_PLAYER_POSITIONS_Server& obj) {
    return 5 + 16 * obj.teammates.size() + 16 * obj.carriers.size();
}

MSG_BATTLEGROUND_PLAYER_POSITIONS_Server MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_read(Reader& reader) {
    MSG_BATTLEGROUND_PLAYER_POSITIONS_Server obj{};

    auto amount_of_teammates = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_teammates; ++i) {
        obj.teammates.push_back(::wow_world_messages::wrath::BattlegroundPlayerPosition_read(reader));
    }

    auto amount_of_carriers = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_carriers; ++i) {
        obj.carriers.push_back(::wow_world_messages::wrath::BattlegroundPlayerPosition_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_BATTLEGROUND_PLAYER_POSITIONS_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x000002e9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.teammates.size()));

    for (const auto& v : obj.teammates) {
        BattlegroundPlayerPosition_write(writer, v);
    }

    writer.write_u8(static_cast<uint8_t>(obj.carriers.size()));

    for (const auto& v : obj.carriers) {
        BattlegroundPlayerPosition_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_PET_STOP_ATTACK CMSG_PET_STOP_ATTACK_read(Reader& reader) {
    CMSG_PET_STOP_ATTACK obj{};

    obj.pet = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_STOP_ATTACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000002ea); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.pet);

    return writer.m_buf;
}

SMSG_BINDER_CONFIRM SMSG_BINDER_CONFIRM_read(Reader& reader) {
    SMSG_BINDER_CONFIRM obj{};

    obj.guid = reader.read_u64();

    obj.area = static_cast<Area>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BINDER_CONFIRM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000002eb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.area));

    return writer.m_buf;
}

SMSG_BATTLEGROUND_PLAYER_JOINED SMSG_BATTLEGROUND_PLAYER_JOINED_read(Reader& reader) {
    SMSG_BATTLEGROUND_PLAYER_JOINED obj{};

    obj.player = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEGROUND_PLAYER_JOINED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000002ec); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    return writer.m_buf;
}

SMSG_BATTLEGROUND_PLAYER_LEFT SMSG_BATTLEGROUND_PLAYER_LEFT_read(Reader& reader) {
    SMSG_BATTLEGROUND_PLAYER_LEFT obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEGROUND_PLAYER_LEFT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000002ed); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

CMSG_BATTLEMASTER_JOIN CMSG_BATTLEMASTER_JOIN_read(Reader& reader) {
    CMSG_BATTLEMASTER_JOIN obj{};

    obj.guid = reader.read_u64();

    obj.map = static_cast<Map>(reader.read_u32());

    obj.instance_id = reader.read_u32();

    obj.join_as_group = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BATTLEMASTER_JOIN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0011);

    writer.write_u16_be(static_cast<uint16_t>(0x0011 + 4)); /* size */

    writer.write_u32(0x000002ee); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(obj.instance_id);

    writer.write_bool8(obj.join_as_group);

    return writer.m_buf;
}

static size_t SMSG_ADDON_INFO_size(const SMSG_ADDON_INFO& obj) {
    return 4 + obj.addons.size() * 8;
}

SMSG_ADDON_INFO SMSG_ADDON_INFO_read(Reader& reader) {
    SMSG_ADDON_INFO obj{};

    obj.addons = ::wow_world_messages::wrath::addon_array_read(reader);

    (void)reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ADDON_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ADDON_INFO_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ADDON_INFO_size(obj) + 2)); /* size */

    writer.write_u16(0x000002ef); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    wrath::addon_array_write(writer, obj.addons);

    writer.write_u32(0);

    return writer.m_buf;
}

CMSG_PET_UNLEARN CMSG_PET_UNLEARN_read(Reader& reader) {
    CMSG_PET_UNLEARN obj{};

    obj.pet = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_UNLEARN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000002f0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.pet);

    return writer.m_buf;
}

SMSG_PET_UNLEARN_CONFIRM SMSG_PET_UNLEARN_CONFIRM_read(Reader& reader) {
    SMSG_PET_UNLEARN_CONFIRM obj{};

    obj.pet = reader.read_u64();

    obj.talent_reset_cost = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_UNLEARN_CONFIRM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000002f1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.pet);

    writer.write_u32(obj.talent_reset_cost);

    return writer.m_buf;
}

static size_t SMSG_PARTY_MEMBER_STATS_FULL_size(const SMSG_PARTY_MEMBER_STATS_FULL& obj) {
    size_t _size = 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);

    if ((obj.mask & GROUP_UPDATE_FLAGS_STATUS) != 0) {
        _size += 1;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_HP) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_HP) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_POWER_TYPE) != 0) {
        _size += 1;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_POWER) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_POWER) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_LEVEL) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_ZONE) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_POSITION) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_AURAS) != 0) {
        _size += 0 + aura_mask_size(obj.auras);
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_GUID) != 0) {
        _size += 8;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_NAME) != 0) {
        _size += 1 + obj.pet_name.size();
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MODEL_ID) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_HP) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_HP) != 0) {
        _size += 4;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_POWER_TYPE) != 0) {
        _size += 1;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_POWER) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_POWER) != 0) {
        _size += 2;
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_AURAS) != 0) {
        _size += 0 + aura_mask_size(obj.pet_auras);
    }

    if ((obj.mask & GROUP_UPDATE_FLAGS_VEHICLE_SEAT) != 0) {
        _size += 4;
    }

    return _size;
}

SMSG_PARTY_MEMBER_STATS_FULL SMSG_PARTY_MEMBER_STATS_FULL_read(Reader& reader) {
    SMSG_PARTY_MEMBER_STATS_FULL obj{};

    obj.guid = reader.read_packed_guid();

    obj.mask = static_cast<GroupUpdateFlags>(reader.read_u32());

    if ((obj.mask & GROUP_UPDATE_FLAGS_STATUS) != 0) {
        obj.status = static_cast<GroupMemberOnlineStatus>(reader.read_u8());

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_HP) != 0) {
        obj.current_health = reader.read_u32();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_HP) != 0) {
        obj.max_health = reader.read_u32();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_POWER_TYPE) != 0) {
        obj.power = static_cast<Power>(reader.read_u8());

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_POWER) != 0) {
        obj.current_power = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_POWER) != 0) {
        obj.max_power = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_LEVEL) != 0) {
        obj.level = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_ZONE) != 0) {
        obj.area = static_cast<Area>(reader.read_u32());

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_POSITION) != 0) {
        obj.position_x = reader.read_u16();

        obj.position_y = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_AURAS) != 0) {
        obj.auras = ::wow_world_messages::wrath::aura_mask_read(reader);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_GUID) != 0) {
        obj.pet = reader.read_u64();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_NAME) != 0) {
        obj.pet_name = reader.read_cstring();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MODEL_ID) != 0) {
        obj.pet_display_id = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_HP) != 0) {
        obj.pet_current_health = reader.read_u32();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_HP) != 0) {
        obj.pet_max_health = reader.read_u32();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_POWER_TYPE) != 0) {
        obj.pet_power_type = static_cast<Power>(reader.read_u8());

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_POWER) != 0) {
        obj.pet_current_power = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_POWER) != 0) {
        obj.pet_max_power = reader.read_u16();

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_AURAS) != 0) {
        obj.pet_auras = ::wow_world_messages::wrath::aura_mask_read(reader);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_VEHICLE_SEAT) != 0) {
        obj.transport = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PARTY_MEMBER_STATS_FULL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PARTY_MEMBER_STATS_FULL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PARTY_MEMBER_STATS_FULL_size(obj) + 2)); /* size */

    writer.write_u16(0x000002f2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.mask));

    if ((obj.mask & GROUP_UPDATE_FLAGS_STATUS) != 0) {
        writer.write_u8(static_cast<uint8_t>(obj.status));

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_HP) != 0) {
        writer.write_u32(obj.current_health);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_HP) != 0) {
        writer.write_u32(obj.max_health);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_POWER_TYPE) != 0) {
        writer.write_u8(static_cast<uint8_t>(obj.power));

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_CUR_POWER) != 0) {
        writer.write_u16(obj.current_power);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_MAX_POWER) != 0) {
        writer.write_u16(obj.max_power);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_LEVEL) != 0) {
        writer.write_u16(obj.level);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_ZONE) != 0) {
        writer.write_u32(static_cast<uint32_t>(obj.area));

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_POSITION) != 0) {
        writer.write_u16(obj.position_x);

        writer.write_u16(obj.position_y);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_AURAS) != 0) {
        aura_mask_write(writer, obj.auras);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_GUID) != 0) {
        writer.write_u64(obj.pet);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_NAME) != 0) {
        writer.write_cstring(obj.pet_name);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MODEL_ID) != 0) {
        writer.write_u16(obj.pet_display_id);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_HP) != 0) {
        writer.write_u32(obj.pet_current_health);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_HP) != 0) {
        writer.write_u32(obj.pet_max_health);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_POWER_TYPE) != 0) {
        writer.write_u8(static_cast<uint8_t>(obj.pet_power_type));

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_CUR_POWER) != 0) {
        writer.write_u16(obj.pet_current_power);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_MAX_POWER) != 0) {
        writer.write_u16(obj.pet_max_power);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_PET_AURAS) != 0) {
        aura_mask_write(writer, obj.pet_auras);

    }
    if ((obj.mask & GROUP_UPDATE_FLAGS_VEHICLE_SEAT) != 0) {
        writer.write_u32(obj.transport);

    }
    return writer.m_buf;
}

CMSG_PET_SPELL_AUTOCAST CMSG_PET_SPELL_AUTOCAST_read(Reader& reader) {
    CMSG_PET_SPELL_AUTOCAST obj{};

    obj.guid = reader.read_u64();

    obj.id = reader.read_u32();

    obj.autocast_enabled = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_SPELL_AUTOCAST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000d);

    writer.write_u16_be(static_cast<uint16_t>(0x000d + 4)); /* size */

    writer.write_u32(0x000002f3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.id);

    writer.write_bool8(obj.autocast_enabled);

    return writer.m_buf;
}

SMSG_WEATHER SMSG_WEATHER_read(Reader& reader) {
    SMSG_WEATHER obj{};

    obj.weather_type = static_cast<WeatherType>(reader.read_u32());

    obj.grade = reader.read_float();

    obj.change = static_cast<WeatherChangeType>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_WEATHER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 2)); /* size */

    writer.write_u16(0x000002f4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.weather_type));

    writer.write_float(obj.grade);

    writer.write_u8(static_cast<uint8_t>(obj.change));

    return writer.m_buf;
}

SMSG_RAID_INSTANCE_MESSAGE SMSG_RAID_INSTANCE_MESSAGE_read(Reader& reader) {
    SMSG_RAID_INSTANCE_MESSAGE obj{};

    obj.message_type = static_cast<RaidInstanceMessage>(reader.read_u32());

    obj.map = static_cast<Map>(reader.read_u32());

    obj.difficulty = static_cast<RaidDifficulty>(reader.read_u32());

    obj.time_left = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_RAID_INSTANCE_MESSAGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x000002fa); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.message_type));

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(static_cast<uint32_t>(obj.difficulty));

    writer.write_u32(obj.time_left);

    return writer.m_buf;
}

static size_t SMSG_COMPRESSED_MOVES_size(const SMSG_COMPRESSED_MOVES& obj) {
    size_t _size = 4;

    for(const auto& v : obj.moves) {
        _size += MiniMoveMessage_size(v);
    }

    return _size;
}

SMSG_COMPRESSED_MOVES SMSG_COMPRESSED_MOVES_read(Reader& reader, size_t body_size) {
    SMSG_COMPRESSED_MOVES obj{};
    size_t _size = 0;

    const auto decompressed_size = reader.read_u32();

    if (decompressed_size == 0) {
        return obj;
    }

    auto compressed_data = std::vector<unsigned char>{};

    for (size_t i = 0; i < (body_size - 4); ++i)
    {
       compressed_data.push_back(reader.read_u8());
    }

    auto decompressed_data = ::wow_world_messages::util::decompress_data(compressed_data);
    auto byte_reader = ByteReader(decompressed_data);

    (void)byte_reader.read_u32();
    _size += 4;

    while (!byte_reader.is_at_end()) {
        obj.moves.push_back(::wow_world_messages::wrath::MiniMoveMessage_read(byte_reader));
        _size += wrath::MiniMoveMessage_size(obj.moves.back());
    }

    (void)_size;
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_COMPRESSED_MOVES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0 /* place holder */);

    writer.write_u16_be(static_cast<uint16_t>(0 /* place holder */ + 2)); /* size */

    writer.write_u16(0x000002fb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(SMSG_COMPRESSED_MOVES_size(obj)));

    auto old_writer = writer;
    writer = Writer(0);
    writer.write_u32(static_cast<uint32_t>(SMSG_COMPRESSED_MOVES_size(obj)));

    for (const auto& v : obj.moves) {
        MiniMoveMessage_write(writer, v);
    }

    const auto compressed_data = ::wow_world_messages::util::compress_data(writer.m_buf);
    old_writer.write_u16_be_at_first_index(static_cast<uint16_t>(compressed_data.size() + 4 + 2));
    old_writer.m_buf.insert(old_writer.m_buf.end(), compressed_data.begin(), compressed_data.end());

    return old_writer.m_buf;
}

static size_t CMSG_GUILD_INFO_TEXT_size(const CMSG_GUILD_INFO_TEXT& obj) {
    return 1 + obj.guild_info.size();
}

CMSG_GUILD_INFO_TEXT CMSG_GUILD_INFO_TEXT_read(Reader& reader) {
    CMSG_GUILD_INFO_TEXT obj{};

    obj.guild_info = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_INFO_TEXT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_INFO_TEXT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_INFO_TEXT_size(obj) + 4)); /* size */

    writer.write_u32(0x000002fc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.guild_info);

    return writer.m_buf;
}

SMSG_CHAT_RESTRICTED SMSG_CHAT_RESTRICTED_read(Reader& reader) {
    SMSG_CHAT_RESTRICTED obj{};

    obj.restriction = static_cast<ChatRestrictionType>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHAT_RESTRICTED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x000002fd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.restriction));

    return writer.m_buf;
}

static size_t SMSG_SPLINE_SET_RUN_SPEED_size(const SMSG_SPLINE_SET_RUN_SPEED& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_SET_RUN_SPEED SMSG_SPLINE_SET_RUN_SPEED_read(Reader& reader) {
    SMSG_SPLINE_SET_RUN_SPEED obj{};

    obj.guid = reader.read_packed_guid();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_SET_RUN_SPEED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_SET_RUN_SPEED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_SET_RUN_SPEED_size(obj) + 2)); /* size */

    writer.write_u16(0x000002fe); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_SET_RUN_BACK_SPEED_size(const SMSG_SPLINE_SET_RUN_BACK_SPEED& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_SET_RUN_BACK_SPEED SMSG_SPLINE_SET_RUN_BACK_SPEED_read(Reader& reader) {
    SMSG_SPLINE_SET_RUN_BACK_SPEED obj{};

    obj.guid = reader.read_packed_guid();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_SET_RUN_BACK_SPEED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_SET_RUN_BACK_SPEED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_SET_RUN_BACK_SPEED_size(obj) + 2)); /* size */

    writer.write_u16(0x000002ff); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_SET_SWIM_SPEED_size(const SMSG_SPLINE_SET_SWIM_SPEED& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_SET_SWIM_SPEED SMSG_SPLINE_SET_SWIM_SPEED_read(Reader& reader) {
    SMSG_SPLINE_SET_SWIM_SPEED obj{};

    obj.guid = reader.read_packed_guid();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_SET_SWIM_SPEED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_SET_SWIM_SPEED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_SET_SWIM_SPEED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000300); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_SET_WALK_SPEED_size(const SMSG_SPLINE_SET_WALK_SPEED& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_SET_WALK_SPEED SMSG_SPLINE_SET_WALK_SPEED_read(Reader& reader) {
    SMSG_SPLINE_SET_WALK_SPEED obj{};

    obj.guid = reader.read_packed_guid();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_SET_WALK_SPEED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_SET_WALK_SPEED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_SET_WALK_SPEED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000301); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_SET_SWIM_BACK_SPEED_size(const SMSG_SPLINE_SET_SWIM_BACK_SPEED& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_SET_SWIM_BACK_SPEED SMSG_SPLINE_SET_SWIM_BACK_SPEED_read(Reader& reader) {
    SMSG_SPLINE_SET_SWIM_BACK_SPEED obj{};

    obj.guid = reader.read_packed_guid();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_SET_SWIM_BACK_SPEED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_SET_SWIM_BACK_SPEED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_SET_SWIM_BACK_SPEED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000302); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_SET_TURN_RATE_size(const SMSG_SPLINE_SET_TURN_RATE& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_SET_TURN_RATE SMSG_SPLINE_SET_TURN_RATE_read(Reader& reader) {
    SMSG_SPLINE_SET_TURN_RATE obj{};

    obj.guid = reader.read_packed_guid();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_SET_TURN_RATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_SET_TURN_RATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_SET_TURN_RATE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000303); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_UNROOT_size(const SMSG_SPLINE_MOVE_UNROOT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_UNROOT SMSG_SPLINE_MOVE_UNROOT_read(Reader& reader) {
    SMSG_SPLINE_MOVE_UNROOT obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_UNROOT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_UNROOT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_UNROOT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000304); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_FEATHER_FALL_size(const SMSG_SPLINE_MOVE_FEATHER_FALL& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_FEATHER_FALL SMSG_SPLINE_MOVE_FEATHER_FALL_read(Reader& reader) {
    SMSG_SPLINE_MOVE_FEATHER_FALL obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_FEATHER_FALL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_FEATHER_FALL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_FEATHER_FALL_size(obj) + 2)); /* size */

    writer.write_u16(0x00000305); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_NORMAL_FALL_size(const SMSG_SPLINE_MOVE_NORMAL_FALL& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_NORMAL_FALL SMSG_SPLINE_MOVE_NORMAL_FALL_read(Reader& reader) {
    SMSG_SPLINE_MOVE_NORMAL_FALL obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_NORMAL_FALL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_NORMAL_FALL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_NORMAL_FALL_size(obj) + 2)); /* size */

    writer.write_u16(0x00000306); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_SET_HOVER_size(const SMSG_SPLINE_MOVE_SET_HOVER& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_SET_HOVER SMSG_SPLINE_MOVE_SET_HOVER_read(Reader& reader) {
    SMSG_SPLINE_MOVE_SET_HOVER obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_SET_HOVER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_SET_HOVER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_SET_HOVER_size(obj) + 2)); /* size */

    writer.write_u16(0x00000307); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_UNSET_HOVER_size(const SMSG_SPLINE_MOVE_UNSET_HOVER& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_UNSET_HOVER SMSG_SPLINE_MOVE_UNSET_HOVER_read(Reader& reader) {
    SMSG_SPLINE_MOVE_UNSET_HOVER obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_UNSET_HOVER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_UNSET_HOVER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_UNSET_HOVER_size(obj) + 2)); /* size */

    writer.write_u16(0x00000308); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_WATER_WALK_size(const SMSG_SPLINE_MOVE_WATER_WALK& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_WATER_WALK SMSG_SPLINE_MOVE_WATER_WALK_read(Reader& reader) {
    SMSG_SPLINE_MOVE_WATER_WALK obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_WATER_WALK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_WATER_WALK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_WATER_WALK_size(obj) + 2)); /* size */

    writer.write_u16(0x00000309); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_LAND_WALK_size(const SMSG_SPLINE_MOVE_LAND_WALK& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_LAND_WALK SMSG_SPLINE_MOVE_LAND_WALK_read(Reader& reader) {
    SMSG_SPLINE_MOVE_LAND_WALK obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_LAND_WALK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_LAND_WALK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_LAND_WALK_size(obj) + 2)); /* size */

    writer.write_u16(0x0000030a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_START_SWIM_size(const SMSG_SPLINE_MOVE_START_SWIM& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_START_SWIM SMSG_SPLINE_MOVE_START_SWIM_read(Reader& reader) {
    SMSG_SPLINE_MOVE_START_SWIM obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_START_SWIM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_START_SWIM_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_START_SWIM_size(obj) + 2)); /* size */

    writer.write_u16(0x0000030b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_STOP_SWIM_size(const SMSG_SPLINE_MOVE_STOP_SWIM& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_STOP_SWIM SMSG_SPLINE_MOVE_STOP_SWIM_read(Reader& reader) {
    SMSG_SPLINE_MOVE_STOP_SWIM obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_STOP_SWIM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_STOP_SWIM_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_STOP_SWIM_size(obj) + 2)); /* size */

    writer.write_u16(0x0000030c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_SET_RUN_MODE_size(const SMSG_SPLINE_MOVE_SET_RUN_MODE& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_SET_RUN_MODE SMSG_SPLINE_MOVE_SET_RUN_MODE_read(Reader& reader) {
    SMSG_SPLINE_MOVE_SET_RUN_MODE obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_SET_RUN_MODE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_SET_RUN_MODE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_SET_RUN_MODE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000030d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_SET_WALK_MODE_size(const SMSG_SPLINE_MOVE_SET_WALK_MODE& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_SET_WALK_MODE SMSG_SPLINE_MOVE_SET_WALK_MODE_read(Reader& reader) {
    SMSG_SPLINE_MOVE_SET_WALK_MODE obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_SET_WALK_MODE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_SET_WALK_MODE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_SET_WALK_MODE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000030e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t CMSG_ACTIVATETAXIEXPRESS_size(const CMSG_ACTIVATETAXIEXPRESS& obj) {
    return 12 + 4 * obj.nodes.size();
}

CMSG_ACTIVATETAXIEXPRESS CMSG_ACTIVATETAXIEXPRESS_read(Reader& reader) {
    CMSG_ACTIVATETAXIEXPRESS obj{};

    obj.guid = reader.read_u64();

    auto node_count = reader.read_u32();

    for (uint32_t i = 0; i < node_count; ++i) {
        obj.nodes.push_back(reader.read_u32());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ACTIVATETAXIEXPRESS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_ACTIVATETAXIEXPRESS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_ACTIVATETAXIEXPRESS_size(obj) + 4)); /* size */

    writer.write_u32(0x00000312); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.nodes.size()));

    for (const auto& v : obj.nodes) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

CMSG_SET_FACTION_INACTIVE CMSG_SET_FACTION_INACTIVE_read(Reader& reader) {
    CMSG_SET_FACTION_INACTIVE obj{};

    obj.faction = static_cast<Faction>(reader.read_u16());

    obj.inactive = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_FACTION_INACTIVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0003);

    writer.write_u16_be(static_cast<uint16_t>(0x0003 + 4)); /* size */

    writer.write_u32(0x00000317); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u16(static_cast<uint16_t>(obj.faction));

    writer.write_bool8(obj.inactive);

    return writer.m_buf;
}

CMSG_SET_WATCHED_FACTION CMSG_SET_WATCHED_FACTION_read(Reader& reader) {
    CMSG_SET_WATCHED_FACTION obj{};

    obj.faction = static_cast<Faction>(reader.read_u16());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_WATCHED_FACTION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 4)); /* size */

    writer.write_u32(0x00000318); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u16(static_cast<uint16_t>(obj.faction));

    return writer.m_buf;
}

static size_t MSG_MOVE_TIME_SKIPPED_Server_size(const MSG_MOVE_TIME_SKIPPED_Server& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

MSG_MOVE_TIME_SKIPPED_Server MSG_MOVE_TIME_SKIPPED_Server_read(Reader& reader) {
    MSG_MOVE_TIME_SKIPPED_Server obj{};

    obj.player = reader.read_packed_guid();

    obj.time_skipped = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_TIME_SKIPPED_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_TIME_SKIPPED_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_TIME_SKIPPED_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x00000319); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    writer.write_u32(obj.time_skipped);

    return writer.m_buf;
}

SMSG_SPLINE_MOVE_ROOT SMSG_SPLINE_MOVE_ROOT_read(Reader& reader) {
    SMSG_SPLINE_MOVE_ROOT obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_ROOT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x0000031a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

SMSG_INVALIDATE_PLAYER SMSG_INVALIDATE_PLAYER_read(Reader& reader) {
    SMSG_INVALIDATE_PLAYER obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INVALIDATE_PLAYER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x0000031c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_RESET_INSTANCES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000031d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_INSTANCE_RESET SMSG_INSTANCE_RESET_read(Reader& reader) {
    SMSG_INSTANCE_RESET obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INSTANCE_RESET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x0000031e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    return writer.m_buf;
}

SMSG_INSTANCE_RESET_FAILED SMSG_INSTANCE_RESET_FAILED_read(Reader& reader) {
    SMSG_INSTANCE_RESET_FAILED obj{};

    obj.reason = static_cast<InstanceResetFailedReason>(reader.read_u32());

    obj.map = static_cast<Map>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INSTANCE_RESET_FAILED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x0000031f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.reason));

    writer.write_u32(static_cast<uint32_t>(obj.map));

    return writer.m_buf;
}

SMSG_UPDATE_LAST_INSTANCE SMSG_UPDATE_LAST_INSTANCE_read(Reader& reader) {
    SMSG_UPDATE_LAST_INSTANCE obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_UPDATE_LAST_INSTANCE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000320); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    return writer.m_buf;
}

static size_t MSG_RAID_TARGET_UPDATE_Client_size(const MSG_RAID_TARGET_UPDATE_Client& obj) {
    size_t _size = 1;

    if (obj.target_index == RaidTargetIndex::UNKNOWN0|| obj.target_index == RaidTargetIndex::UNKNOWN1|| obj.target_index == RaidTargetIndex::UNKNOWN2|| obj.target_index == RaidTargetIndex::UNKNOWN3|| obj.target_index == RaidTargetIndex::UNKNOWN4|| obj.target_index == RaidTargetIndex::UNKNOWN5|| obj.target_index == RaidTargetIndex::UNKNOWN6|| obj.target_index == RaidTargetIndex::UNKNOWN7|| obj.target_index == RaidTargetIndex::UNKNOWN8) {
        _size += 8;
    }

    return _size;
}

MSG_RAID_TARGET_UPDATE_Client MSG_RAID_TARGET_UPDATE_Client_read(Reader& reader) {
    MSG_RAID_TARGET_UPDATE_Client obj{};

    obj.target_index = static_cast<RaidTargetIndex>(reader.read_u8());

    if (obj.target_index == RaidTargetIndex::UNKNOWN0|| obj.target_index == RaidTargetIndex::UNKNOWN1|| obj.target_index == RaidTargetIndex::UNKNOWN2|| obj.target_index == RaidTargetIndex::UNKNOWN3|| obj.target_index == RaidTargetIndex::UNKNOWN4|| obj.target_index == RaidTargetIndex::UNKNOWN5|| obj.target_index == RaidTargetIndex::UNKNOWN6|| obj.target_index == RaidTargetIndex::UNKNOWN7|| obj.target_index == RaidTargetIndex::UNKNOWN8) {
        obj.target = reader.read_u64();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_RAID_TARGET_UPDATE_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_RAID_TARGET_UPDATE_Client_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_RAID_TARGET_UPDATE_Client_size(obj) + 4)); /* size */

    writer.write_u32(0x00000321); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.target_index));

    if (obj.target_index == RaidTargetIndex::UNKNOWN0|| obj.target_index == RaidTargetIndex::UNKNOWN1|| obj.target_index == RaidTargetIndex::UNKNOWN2|| obj.target_index == RaidTargetIndex::UNKNOWN3|| obj.target_index == RaidTargetIndex::UNKNOWN4|| obj.target_index == RaidTargetIndex::UNKNOWN5|| obj.target_index == RaidTargetIndex::UNKNOWN6|| obj.target_index == RaidTargetIndex::UNKNOWN7|| obj.target_index == RaidTargetIndex::UNKNOWN8) {
        writer.write_u64(obj.target);

    }
    return writer.m_buf;
}

static size_t MSG_RAID_TARGET_UPDATE_Server_size(const MSG_RAID_TARGET_UPDATE_Server& obj) {
    size_t _size = 1;

    if (obj.update_type == RaidTargetUpdateType::FULL) {
        _size += 72;
    }
    else if (obj.update_type == RaidTargetUpdateType::PARTIAL) {
        _size += 9;
    }

    return _size;
}

MSG_RAID_TARGET_UPDATE_Server MSG_RAID_TARGET_UPDATE_Server_read(Reader& reader) {
    MSG_RAID_TARGET_UPDATE_Server obj{};

    obj.update_type = static_cast<RaidTargetUpdateType>(reader.read_u8());

    if (obj.update_type == RaidTargetUpdateType::FULL) {
        for (auto i = 0; i < 8; ++i) {
            obj.raid_targets[i] = ::wow_world_messages::wrath::RaidTargetUpdate_read(reader);
        }

    }
    else if (obj.update_type == RaidTargetUpdateType::PARTIAL) {
        obj.raid_target = ::wow_world_messages::wrath::RaidTargetUpdate_read(reader);

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_RAID_TARGET_UPDATE_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_RAID_TARGET_UPDATE_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_RAID_TARGET_UPDATE_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x00000321); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.update_type));

    if (obj.update_type == RaidTargetUpdateType::FULL) {
        for (const auto& v : obj.raid_targets) {
            RaidTargetUpdate_write(writer, v);
        }

    }
    else if (obj.update_type == RaidTargetUpdateType::PARTIAL) {
        RaidTargetUpdate_write(writer, obj.raid_target);

    }
    return writer.m_buf;
}

static size_t MSG_RAID_READY_CHECK_Client_size(const MSG_RAID_READY_CHECK_Client& obj) {
    size_t _size = 0;

    if(obj.answer) {
        _size += 1;
    }

    return _size;
}

MSG_RAID_READY_CHECK_Client MSG_RAID_READY_CHECK_Client_read(Reader& reader, size_t body_size) {
    MSG_RAID_READY_CHECK_Client obj{};
    size_t _size = 0;

    if (_size < body_size) {
        obj.answer = std::shared_ptr<wrath::MSG_RAID_READY_CHECK_Client::Answer>(new wrath::MSG_RAID_READY_CHECK_Client::Answer());

        obj.answer->state = reader.read_u8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_RAID_READY_CHECK_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_RAID_READY_CHECK_Client_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_RAID_READY_CHECK_Client_size(obj) + 4)); /* size */

    writer.write_u32(0x00000322); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    if(obj.answer) {
        writer.write_u8(obj.answer->state);

    }
    return writer.m_buf;
}

static size_t MSG_RAID_READY_CHECK_Server_size(const MSG_RAID_READY_CHECK_Server& obj) {
    size_t _size = 0;

    if(obj.state_check) {
        _size += 9;
    }

    return _size;
}

MSG_RAID_READY_CHECK_Server MSG_RAID_READY_CHECK_Server_read(Reader& reader, size_t body_size) {
    MSG_RAID_READY_CHECK_Server obj{};
    size_t _size = 0;

    if (_size < body_size) {
        obj.state_check = std::shared_ptr<wrath::MSG_RAID_READY_CHECK_Server::StateCheck>(new wrath::MSG_RAID_READY_CHECK_Server::StateCheck());

        obj.state_check->guid = reader.read_u64();

        obj.state_check->state = reader.read_u8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_RAID_READY_CHECK_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_RAID_READY_CHECK_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_RAID_READY_CHECK_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x00000322); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    if(obj.state_check) {
        writer.write_u64(obj.state_check->guid);

        writer.write_u8(obj.state_check->state);

    }
    return writer.m_buf;
}

SMSG_PET_ACTION_SOUND SMSG_PET_ACTION_SOUND_read(Reader& reader) {
    SMSG_PET_ACTION_SOUND obj{};

    obj.guid = reader.read_u64();

    obj.reason = static_cast<PetTalkReason>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_ACTION_SOUND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x00000324); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(static_cast<uint32_t>(obj.reason));

    return writer.m_buf;
}

SMSG_PET_DISMISS_SOUND SMSG_PET_DISMISS_SOUND_read(Reader& reader) {
    SMSG_PET_DISMISS_SOUND obj{};

    obj.sound_id = reader.read_u32();

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_DISMISS_SOUND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x00000325); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.sound_id);

    Vector3d_write(writer, obj.position);

    return writer.m_buf;
}

SMSG_GM_TICKET_STATUS_UPDATE SMSG_GM_TICKET_STATUS_UPDATE_read(Reader& reader) {
    SMSG_GM_TICKET_STATUS_UPDATE obj{};

    obj.response = static_cast<GmTicketStatusResponse>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GM_TICKET_STATUS_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000328); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.response));

    return writer.m_buf;
}

MSG_SET_DUNGEON_DIFFICULTY_Client MSG_SET_DUNGEON_DIFFICULTY_Client_read(Reader& reader) {
    MSG_SET_DUNGEON_DIFFICULTY_Client obj{};

    obj.difficulty = static_cast<DungeonDifficulty>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_SET_DUNGEON_DIFFICULTY_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000329); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.difficulty));

    return writer.m_buf;
}

MSG_SET_DUNGEON_DIFFICULTY_Server MSG_SET_DUNGEON_DIFFICULTY_Server_read(Reader& reader) {
    MSG_SET_DUNGEON_DIFFICULTY_Server obj{};

    obj.difficulty = static_cast<DungeonDifficulty>(reader.read_u32());

    obj.unknown1 = reader.read_u32();

    obj.is_in_group = reader.read_bool32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_SET_DUNGEON_DIFFICULTY_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x00000329); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.difficulty));

    writer.write_u32(obj.unknown1);

    writer.write_bool32(obj.is_in_group);

    return writer.m_buf;
}

static size_t CMSG_GMSURVEY_SUBMIT_size(const CMSG_GMSURVEY_SUBMIT& obj) {
    size_t _size = 5 + obj.answer_comment.size();

    for(const auto& v : obj.questions) {
        _size += GmSurveyQuestion_size(v);
    }

    return _size;
}

CMSG_GMSURVEY_SUBMIT CMSG_GMSURVEY_SUBMIT_read(Reader& reader) {
    CMSG_GMSURVEY_SUBMIT obj{};

    obj.survey_id = reader.read_u32();

    for (auto i = 0; i < 10; ++i) {
        obj.questions[i] = ::wow_world_messages::wrath::GmSurveyQuestion_read(reader);
    }

    obj.answer_comment = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GMSURVEY_SUBMIT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GMSURVEY_SUBMIT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GMSURVEY_SUBMIT_size(obj) + 4)); /* size */

    writer.write_u32(0x0000032a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.survey_id);

    for (const auto& v : obj.questions) {
        GmSurveyQuestion_write(writer, v);
    }

    writer.write_cstring(obj.answer_comment);

    return writer.m_buf;
}

SMSG_UPDATE_INSTANCE_OWNERSHIP SMSG_UPDATE_INSTANCE_OWNERSHIP_read(Reader& reader) {
    SMSG_UPDATE_INSTANCE_OWNERSHIP obj{};

    obj.player_is_saved_to_a_raid = reader.read_bool32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_UPDATE_INSTANCE_OWNERSHIP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x0000032b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool32(obj.player_is_saved_to_a_raid);

    return writer.m_buf;
}

static size_t SMSG_CHAT_PLAYER_AMBIGUOUS_size(const SMSG_CHAT_PLAYER_AMBIGUOUS& obj) {
    return 1 + obj.player.size();
}

SMSG_CHAT_PLAYER_AMBIGUOUS SMSG_CHAT_PLAYER_AMBIGUOUS_read(Reader& reader) {
    SMSG_CHAT_PLAYER_AMBIGUOUS obj{};

    obj.player = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHAT_PLAYER_AMBIGUOUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CHAT_PLAYER_AMBIGUOUS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CHAT_PLAYER_AMBIGUOUS_size(obj) + 2)); /* size */

    writer.write_u16(0x0000032d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.player);

    return writer.m_buf;
}

SMSG_SPELLINSTAKILLLOG SMSG_SPELLINSTAKILLLOG_read(Reader& reader) {
    SMSG_SPELLINSTAKILLLOG obj{};

    obj.caster = reader.read_u64();

    obj.target = reader.read_u64();

    obj.spell = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELLINSTAKILLLOG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 2)); /* size */

    writer.write_u16(0x0000032f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.caster);

    writer.write_u64(obj.target);

    writer.write_u32(obj.spell);

    return writer.m_buf;
}

static size_t SMSG_SPELL_UPDATE_CHAIN_TARGETS_size(const SMSG_SPELL_UPDATE_CHAIN_TARGETS& obj) {
    return 16 + 8 * obj.targets.size();
}

SMSG_SPELL_UPDATE_CHAIN_TARGETS SMSG_SPELL_UPDATE_CHAIN_TARGETS_read(Reader& reader) {
    SMSG_SPELL_UPDATE_CHAIN_TARGETS obj{};

    obj.caster = reader.read_u64();

    obj.spell = reader.read_u32();

    auto amount_of_targets = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_targets; ++i) {
        obj.targets.push_back(reader.read_u64());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELL_UPDATE_CHAIN_TARGETS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELL_UPDATE_CHAIN_TARGETS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELL_UPDATE_CHAIN_TARGETS_size(obj) + 2)); /* size */

    writer.write_u16(0x00000330); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.caster);

    writer.write_u32(obj.spell);

    writer.write_u32(static_cast<uint32_t>(obj.targets.size()));

    for (const auto& v : obj.targets) {
        writer.write_u64(v);
    }

    return writer.m_buf;
}

static size_t SMSG_SPELLSTEALLOG_size(const SMSG_SPELLSTEALLOG& obj) {
    return 9 + ::wow_world_messages::util::wwm_packed_guid_size(obj.victim) + ::wow_world_messages::util::wwm_packed_guid_size(obj.caster) + 5 * obj.spell_steals.size();
}

SMSG_SPELLSTEALLOG SMSG_SPELLSTEALLOG_read(Reader& reader) {
    SMSG_SPELLSTEALLOG obj{};

    obj.victim = reader.read_packed_guid();

    obj.caster = reader.read_packed_guid();

    obj.spell = reader.read_u32();

    obj.unknown = reader.read_u8();

    auto amount_of_spell_steals = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_spell_steals; ++i) {
        obj.spell_steals.push_back(::wow_world_messages::wrath::SpellSteal_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPELLSTEALLOG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPELLSTEALLOG_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPELLSTEALLOG_size(obj) + 2)); /* size */

    writer.write_u16(0x00000333); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.victim);

    writer.write_packed_guid(obj.caster);

    writer.write_u32(obj.spell);

    writer.write_u8(obj.unknown);

    writer.write_u32(static_cast<uint32_t>(obj.spell_steals.size()));

    for (const auto& v : obj.spell_steals) {
        SpellSteal_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_DEFENSE_MESSAGE_size(const SMSG_DEFENSE_MESSAGE& obj) {
    return 9 + obj.message.size();
}

SMSG_DEFENSE_MESSAGE SMSG_DEFENSE_MESSAGE_read(Reader& reader) {
    SMSG_DEFENSE_MESSAGE obj{};

    obj.area = static_cast<Area>(reader.read_u32());

    obj.message = reader.read_sized_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DEFENSE_MESSAGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_DEFENSE_MESSAGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_DEFENSE_MESSAGE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000033a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.area));

    writer.write_sized_cstring(obj.message);

    return writer.m_buf;
}

SMSG_INSTANCE_DIFFICULTY SMSG_INSTANCE_DIFFICULTY_read(Reader& reader) {
    SMSG_INSTANCE_DIFFICULTY obj{};

    obj.difficulty = reader.read_u32();

    obj.dynamic_difficulty = reader.read_bool32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INSTANCE_DIFFICULTY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x0000033b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.difficulty);

    writer.write_bool32(obj.dynamic_difficulty);

    return writer.m_buf;
}

static size_t SMSG_MOTD_size(const SMSG_MOTD& obj) {
    size_t _size = 4;

    for(const auto& v : obj.motds) {
        _size += v.size() + 1;
    }

    return _size;
}

SMSG_MOTD SMSG_MOTD_read(Reader& reader) {
    SMSG_MOTD obj{};

    auto amount_of_motds = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_motds; ++i) {
        obj.motds.push_back(reader.read_cstring());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOTD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOTD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOTD_size(obj) + 2)); /* size */

    writer.write_u16(0x0000033d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.motds.size()));

    for (const auto& v : obj.motds) {
        writer.write_cstring(v);
    }

    return writer.m_buf;
}

static size_t CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK_size(const CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK_read(Reader& reader) {
    CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.unknown1 = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.unknown2 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x00000340); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.unknown1);

    MovementInfo_write(writer, obj.info);

    writer.write_u32(obj.unknown2);

    return writer.m_buf;
}

static size_t SMSG_MOVE_SET_CAN_FLY_size(const SMSG_MOVE_SET_CAN_FLY& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

SMSG_MOVE_SET_CAN_FLY SMSG_MOVE_SET_CAN_FLY_read(Reader& reader) {
    SMSG_MOVE_SET_CAN_FLY obj{};

    obj.player = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_SET_CAN_FLY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_SET_CAN_FLY_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_SET_CAN_FLY_size(obj) + 2)); /* size */

    writer.write_u16(0x00000343); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    writer.write_u32(obj.counter);

    return writer.m_buf;
}

static size_t SMSG_MOVE_UNSET_CAN_FLY_size(const SMSG_MOVE_UNSET_CAN_FLY& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

SMSG_MOVE_UNSET_CAN_FLY SMSG_MOVE_UNSET_CAN_FLY_read(Reader& reader) {
    SMSG_MOVE_UNSET_CAN_FLY obj{};

    obj.player = reader.read_packed_guid();

    obj.counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_UNSET_CAN_FLY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_UNSET_CAN_FLY_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_UNSET_CAN_FLY_size(obj) + 2)); /* size */

    writer.write_u16(0x00000344); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    writer.write_u32(obj.counter);

    return writer.m_buf;
}

static size_t CMSG_MOVE_SET_CAN_FLY_ACK_size(const CMSG_MOVE_SET_CAN_FLY_ACK& obj) {
    return 16 + MovementInfo_size(obj.info);
}

CMSG_MOVE_SET_CAN_FLY_ACK CMSG_MOVE_SET_CAN_FLY_ACK_read(Reader& reader) {
    CMSG_MOVE_SET_CAN_FLY_ACK obj{};

    obj.player = reader.read_u64();

    obj.counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.applied = reader.read_bool32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_SET_CAN_FLY_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_SET_CAN_FLY_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_SET_CAN_FLY_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x00000345); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_u32(obj.counter);

    MovementInfo_write(writer, obj.info);

    writer.write_bool32(obj.applied);

    return writer.m_buf;
}

static size_t CMSG_MOVE_SET_FLY_size(const CMSG_MOVE_SET_FLY& obj) {
    return 0 + MovementInfo_size(obj.info);
}

CMSG_MOVE_SET_FLY CMSG_MOVE_SET_FLY_read(Reader& reader) {
    CMSG_MOVE_SET_FLY obj{};

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_SET_FLY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_SET_FLY_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_SET_FLY_size(obj) + 4)); /* size */

    writer.write_u32(0x00000346); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

CMSG_SOCKET_GEMS CMSG_SOCKET_GEMS_read(Reader& reader) {
    CMSG_SOCKET_GEMS obj{};

    obj.item = reader.read_u64();

    for (auto i = 0; i < 3; ++i) {
        obj.gems[i] = reader.read_u64();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SOCKET_GEMS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0020);

    writer.write_u16_be(static_cast<uint16_t>(0x0020 + 4)); /* size */

    writer.write_u32(0x00000347); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    for (const auto& v : obj.gems) {
        writer.write_u64(v);
    }

    return writer.m_buf;
}

static size_t SMSG_ARENA_TEAM_COMMAND_RESULT_size(const SMSG_ARENA_TEAM_COMMAND_RESULT& obj) {
    return 10 + obj.team.size() + obj.player.size();
}

SMSG_ARENA_TEAM_COMMAND_RESULT SMSG_ARENA_TEAM_COMMAND_RESULT_read(Reader& reader) {
    SMSG_ARENA_TEAM_COMMAND_RESULT obj{};

    obj.command = static_cast<ArenaTeamCommand>(reader.read_u32());

    obj.team = reader.read_cstring();

    obj.player = reader.read_cstring();

    obj.error = static_cast<ArenaTeamCommandError>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ARENA_TEAM_COMMAND_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ARENA_TEAM_COMMAND_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ARENA_TEAM_COMMAND_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000349); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.command));

    writer.write_cstring(obj.team);

    writer.write_cstring(obj.player);

    writer.write_u32(static_cast<uint32_t>(obj.error));

    return writer.m_buf;
}

static size_t SMSG_ARENA_TEAM_QUERY_RESPONSE_size(const SMSG_ARENA_TEAM_QUERY_RESPONSE& obj) {
    return 26 + obj.team_name.size();
}

SMSG_ARENA_TEAM_QUERY_RESPONSE SMSG_ARENA_TEAM_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_ARENA_TEAM_QUERY_RESPONSE obj{};

    obj.arena_team = reader.read_u32();

    obj.team_name = reader.read_cstring();

    obj.team_type = static_cast<ArenaType>(reader.read_u8());

    obj.background_color = reader.read_u32();

    obj.emblem_style = reader.read_u32();

    obj.emblem_color = reader.read_u32();

    obj.border_style = reader.read_u32();

    obj.border_color = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ARENA_TEAM_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ARENA_TEAM_QUERY_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ARENA_TEAM_QUERY_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000034c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.arena_team);

    writer.write_cstring(obj.team_name);

    writer.write_u8(static_cast<uint8_t>(obj.team_type));

    writer.write_u32(obj.background_color);

    writer.write_u32(obj.emblem_style);

    writer.write_u32(obj.emblem_color);

    writer.write_u32(obj.border_style);

    writer.write_u32(obj.border_color);

    return writer.m_buf;
}

CMSG_ARENA_TEAM_ROSTER CMSG_ARENA_TEAM_ROSTER_read(Reader& reader) {
    CMSG_ARENA_TEAM_ROSTER obj{};

    obj.arena_team = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ARENA_TEAM_ROSTER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000034d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.arena_team);

    return writer.m_buf;
}

static size_t SMSG_ARENA_TEAM_ROSTER_size(const SMSG_ARENA_TEAM_ROSTER& obj) {
    size_t _size = 10;

    for(const auto& v : obj.members) {
        _size += ArenaTeamMember_size(v);
    }

    return _size;
}

SMSG_ARENA_TEAM_ROSTER SMSG_ARENA_TEAM_ROSTER_read(Reader& reader) {
    SMSG_ARENA_TEAM_ROSTER obj{};

    obj.arena_team = reader.read_u32();

    obj.unknown = reader.read_u8();

    auto amount_of_members = reader.read_u32();

    obj.arena_type = static_cast<ArenaType>(reader.read_u8());

    for (uint32_t i = 0; i < amount_of_members; ++i) {
        obj.members.push_back(::wow_world_messages::wrath::ArenaTeamMember_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ARENA_TEAM_ROSTER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ARENA_TEAM_ROSTER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ARENA_TEAM_ROSTER_size(obj) + 2)); /* size */

    writer.write_u16(0x0000034e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.arena_team);

    writer.write_u8(obj.unknown);

    writer.write_u32(static_cast<uint32_t>(obj.members.size()));

    writer.write_u8(static_cast<uint8_t>(obj.arena_type));

    for (const auto& v : obj.members) {
        ArenaTeamMember_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_ARENA_TEAM_INVITE_size(const CMSG_ARENA_TEAM_INVITE& obj) {
    return 5 + obj.player.size();
}

CMSG_ARENA_TEAM_INVITE CMSG_ARENA_TEAM_INVITE_read(Reader& reader) {
    CMSG_ARENA_TEAM_INVITE obj{};

    obj.arena_team = reader.read_u32();

    obj.player = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ARENA_TEAM_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_ARENA_TEAM_INVITE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_ARENA_TEAM_INVITE_size(obj) + 4)); /* size */

    writer.write_u32(0x0000034f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.arena_team);

    writer.write_cstring(obj.player);

    return writer.m_buf;
}

static size_t SMSG_ARENA_TEAM_INVITE_size(const SMSG_ARENA_TEAM_INVITE& obj) {
    return 2 + obj.player_name.size() + obj.team_name.size();
}

SMSG_ARENA_TEAM_INVITE SMSG_ARENA_TEAM_INVITE_read(Reader& reader) {
    SMSG_ARENA_TEAM_INVITE obj{};

    obj.player_name = reader.read_cstring();

    obj.team_name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ARENA_TEAM_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ARENA_TEAM_INVITE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ARENA_TEAM_INVITE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000350); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.player_name);

    writer.write_cstring(obj.team_name);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ARENA_TEAM_ACCEPT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000351); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ARENA_TEAM_DECLINE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000352); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_ARENA_TEAM_LEAVE CMSG_ARENA_TEAM_LEAVE_read(Reader& reader) {
    CMSG_ARENA_TEAM_LEAVE obj{};

    obj.arena_team = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ARENA_TEAM_LEAVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000353); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.arena_team);

    return writer.m_buf;
}

static size_t CMSG_ARENA_TEAM_REMOVE_size(const CMSG_ARENA_TEAM_REMOVE& obj) {
    return 5 + obj.player.size();
}

CMSG_ARENA_TEAM_REMOVE CMSG_ARENA_TEAM_REMOVE_read(Reader& reader) {
    CMSG_ARENA_TEAM_REMOVE obj{};

    obj.arena_team = reader.read_u32();

    obj.player = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ARENA_TEAM_REMOVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_ARENA_TEAM_REMOVE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_ARENA_TEAM_REMOVE_size(obj) + 4)); /* size */

    writer.write_u32(0x00000354); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.arena_team);

    writer.write_cstring(obj.player);

    return writer.m_buf;
}

CMSG_ARENA_TEAM_DISBAND CMSG_ARENA_TEAM_DISBAND_read(Reader& reader) {
    CMSG_ARENA_TEAM_DISBAND obj{};

    obj.arena_team = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ARENA_TEAM_DISBAND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000355); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.arena_team);

    return writer.m_buf;
}

static size_t CMSG_ARENA_TEAM_LEADER_size(const CMSG_ARENA_TEAM_LEADER& obj) {
    return 5 + obj.player.size();
}

CMSG_ARENA_TEAM_LEADER CMSG_ARENA_TEAM_LEADER_read(Reader& reader) {
    CMSG_ARENA_TEAM_LEADER obj{};

    obj.arena_team = reader.read_u32();

    obj.player = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ARENA_TEAM_LEADER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_ARENA_TEAM_LEADER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_ARENA_TEAM_LEADER_size(obj) + 4)); /* size */

    writer.write_u32(0x00000356); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.arena_team);

    writer.write_cstring(obj.player);

    return writer.m_buf;
}

static size_t SMSG_ARENA_TEAM_EVENT_size(const SMSG_ARENA_TEAM_EVENT& obj) {
    size_t _size = 2;

    if (obj.event == ArenaTeamEvent::JOIN) {
        _size += 10 + obj.joiner_name.size() + obj.arena_team_name1.size();
    }
    else if (obj.event == ArenaTeamEvent::LEAVE) {
        _size += 9 + obj.leaver_name.size();
    }
    else if (obj.event == ArenaTeamEvent::REMOVE) {
        _size += 3 + obj.kicked_player_name.size() + obj.arena_team_name2.size() + obj.kicker_name.size();
    }
    else if (obj.event == ArenaTeamEvent::LEADER_IS|| obj.event == ArenaTeamEvent::DISBANDED) {
        _size += 2 + obj.leader_name.size() + obj.arena_team_name3.size();
    }
    else if (obj.event == ArenaTeamEvent::LEADER_CHANGED) {
        _size += 2 + obj.old_leader.size() + obj.new_leader.size();
    }

    for(const auto& v : obj.string) {
        _size += v.size() + 1;
    }

    return _size;
}

SMSG_ARENA_TEAM_EVENT SMSG_ARENA_TEAM_EVENT_read(Reader& reader) {
    SMSG_ARENA_TEAM_EVENT obj{};

    obj.event = static_cast<ArenaTeamEvent>(reader.read_u8());

    if (obj.event == ArenaTeamEvent::JOIN) {
        obj.joiner_name = reader.read_cstring();

        obj.arena_team_name1 = reader.read_cstring();

        obj.joiner = reader.read_u64();

    }
    else if (obj.event == ArenaTeamEvent::LEAVE) {
        obj.leaver_name = reader.read_cstring();

        obj.leaver = reader.read_u64();

    }
    else if (obj.event == ArenaTeamEvent::REMOVE) {
        obj.kicked_player_name = reader.read_cstring();

        obj.arena_team_name2 = reader.read_cstring();

        obj.kicker_name = reader.read_cstring();

    }
    else if (obj.event == ArenaTeamEvent::LEADER_IS|| obj.event == ArenaTeamEvent::DISBANDED) {
        obj.leader_name = reader.read_cstring();

        obj.arena_team_name3 = reader.read_cstring();

    }
    else if (obj.event == ArenaTeamEvent::LEADER_CHANGED) {
        obj.old_leader = reader.read_cstring();

        obj.new_leader = reader.read_cstring();

    }
    auto amount_of_strings = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_strings; ++i) {
        obj.string.push_back(reader.read_cstring());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ARENA_TEAM_EVENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ARENA_TEAM_EVENT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ARENA_TEAM_EVENT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000357); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.event));

    if (obj.event == ArenaTeamEvent::JOIN) {
        writer.write_cstring(obj.joiner_name);

        writer.write_cstring(obj.arena_team_name1);

        writer.write_u64(obj.joiner);

    }
    else if (obj.event == ArenaTeamEvent::LEAVE) {
        writer.write_cstring(obj.leaver_name);

        writer.write_u64(obj.leaver);

    }
    else if (obj.event == ArenaTeamEvent::REMOVE) {
        writer.write_cstring(obj.kicked_player_name);

        writer.write_cstring(obj.arena_team_name2);

        writer.write_cstring(obj.kicker_name);

    }
    else if (obj.event == ArenaTeamEvent::LEADER_IS|| obj.event == ArenaTeamEvent::DISBANDED) {
        writer.write_cstring(obj.leader_name);

        writer.write_cstring(obj.arena_team_name3);

    }
    else if (obj.event == ArenaTeamEvent::LEADER_CHANGED) {
        writer.write_cstring(obj.old_leader);

        writer.write_cstring(obj.new_leader);

    }
    writer.write_u8(static_cast<uint8_t>(obj.string.size()));

    for (const auto& v : obj.string) {
        writer.write_cstring(v);
    }

    return writer.m_buf;
}

CMSG_BATTLEMASTER_JOIN_ARENA CMSG_BATTLEMASTER_JOIN_ARENA_read(Reader& reader) {
    CMSG_BATTLEMASTER_JOIN_ARENA obj{};

    obj.battlemaster = reader.read_u64();

    obj.arena_type = static_cast<JoinArenaType>(reader.read_u8());

    obj.as_group = reader.read_bool8();

    obj.rated = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BATTLEMASTER_JOIN_ARENA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000b);

    writer.write_u16_be(static_cast<uint16_t>(0x000b + 4)); /* size */

    writer.write_u32(0x00000358); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.battlemaster);

    writer.write_u8(static_cast<uint8_t>(obj.arena_type));

    writer.write_bool8(obj.as_group);

    writer.write_bool8(obj.rated);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_ASCEND_size(const MSG_MOVE_START_ASCEND& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_ASCEND MSG_MOVE_START_ASCEND_read(Reader& reader) {
    MSG_MOVE_START_ASCEND obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_ASCEND::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_ASCEND_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_ASCEND_size(obj) + 4)); /* size */

    writer.write_u32(0x00000359); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_ASCEND::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_ASCEND_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_ASCEND_size(obj) + 2)); /* size */

    writer.write_u16(0x00000359); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_STOP_ASCEND_size(const MSG_MOVE_STOP_ASCEND& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_STOP_ASCEND MSG_MOVE_STOP_ASCEND_read(Reader& reader) {
    MSG_MOVE_STOP_ASCEND obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP_ASCEND::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_ASCEND_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_STOP_ASCEND_size(obj) + 4)); /* size */

    writer.write_u32(0x0000035a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_STOP_ASCEND::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_STOP_ASCEND_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_STOP_ASCEND_size(obj) + 2)); /* size */

    writer.write_u16(0x0000035a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

SMSG_ARENA_TEAM_STATS SMSG_ARENA_TEAM_STATS_read(Reader& reader) {
    SMSG_ARENA_TEAM_STATS obj{};

    obj.arena_team = reader.read_u32();

    obj.rating = reader.read_u32();

    obj.games_played_this_week = reader.read_u32();

    obj.games_won_this_week = reader.read_u32();

    obj.games_played_this_season = reader.read_u32();

    obj.games_won_this_season = reader.read_u32();

    obj.ranking = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ARENA_TEAM_STATS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x001c);

    writer.write_u16_be(static_cast<uint16_t>(0x001c + 2)); /* size */

    writer.write_u16(0x0000035b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.arena_team);

    writer.write_u32(obj.rating);

    writer.write_u32(obj.games_played_this_week);

    writer.write_u32(obj.games_won_this_week);

    writer.write_u32(obj.games_played_this_season);

    writer.write_u32(obj.games_won_this_season);

    writer.write_u32(obj.ranking);

    return writer.m_buf;
}

static size_t CMSG_LFG_JOIN_size(const CMSG_LFG_JOIN& obj) {
    return 9 + 4 * obj.slots.size() + 1 * obj.needs.size() + obj.comment.size();
}

CMSG_LFG_JOIN CMSG_LFG_JOIN_read(Reader& reader) {
    CMSG_LFG_JOIN obj{};

    obj.roles = reader.read_u32();

    obj.no_partial_clear = reader.read_bool8();

    obj.achievements = reader.read_bool8();

    auto amount_of_slots = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_slots; ++i) {
        obj.slots.push_back(reader.read_u32());
    }

    auto amount_of_needs = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_needs; ++i) {
        obj.needs.push_back(reader.read_u8());
    }

    obj.comment = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LFG_JOIN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_LFG_JOIN_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_LFG_JOIN_size(obj) + 4)); /* size */

    writer.write_u32(0x0000035c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.roles);

    writer.write_bool8(obj.no_partial_clear);

    writer.write_bool8(obj.achievements);

    writer.write_u8(static_cast<uint8_t>(obj.slots.size()));

    for (const auto& v : obj.slots) {
        writer.write_u32(v);
    }

    writer.write_u8(static_cast<uint8_t>(obj.needs.size()));

    for (const auto& v : obj.needs) {
        writer.write_u8(v);
    }

    writer.write_cstring(obj.comment);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LFG_LEAVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000035d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_SEARCH_LFG_JOIN CMSG_SEARCH_LFG_JOIN_read(Reader& reader) {
    CMSG_SEARCH_LFG_JOIN obj{};

    obj.dungeon_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SEARCH_LFG_JOIN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000035e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.dungeon_id);

    return writer.m_buf;
}

CMSG_SEARCH_LFG_LEAVE CMSG_SEARCH_LFG_LEAVE_read(Reader& reader) {
    CMSG_SEARCH_LFG_LEAVE obj{};

    obj.dungeon_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SEARCH_LFG_LEAVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000035f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.dungeon_id);

    return writer.m_buf;
}

static size_t SMSG_UPDATE_LFG_LIST_size(const SMSG_UPDATE_LFG_LIST& obj) {
    size_t _size = 25;

    if (obj.update_type == LfgListUpdateType::PARTIAL) {
        _size += 4 + 8 * obj.deleted_guids.size();
    }

    for(const auto& v : obj.groups) {
        _size += LfgListGroup_size(v);
    }

    for(const auto& v : obj.players) {
        _size += LfgListPlayer_size(v);
    }

    return _size;
}

SMSG_UPDATE_LFG_LIST SMSG_UPDATE_LFG_LIST_read(Reader& reader) {
    SMSG_UPDATE_LFG_LIST obj{};

    obj.lfg_type = static_cast<LfgType>(reader.read_u32());

    obj.dungeon_id = reader.read_u32();

    obj.update_type = static_cast<LfgListUpdateType>(reader.read_u8());

    if (obj.update_type == LfgListUpdateType::PARTIAL) {
        auto amount_of_deleted_guids = reader.read_u32();

        for (uint32_t i = 0; i < amount_of_deleted_guids; ++i) {
            obj.deleted_guids.push_back(reader.read_u64());
        }

    }
    auto amount_of_groups = reader.read_u32();

    obj.unknown1 = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_groups; ++i) {
        obj.groups.push_back(::wow_world_messages::wrath::LfgListGroup_read(reader));
    }

    auto amount_of_players = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_players; ++i) {
        obj.players.push_back(::wow_world_messages::wrath::LfgListPlayer_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_UPDATE_LFG_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_UPDATE_LFG_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_UPDATE_LFG_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x00000360); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.lfg_type));

    writer.write_u32(obj.dungeon_id);

    writer.write_u8(static_cast<uint8_t>(obj.update_type));

    if (obj.update_type == LfgListUpdateType::PARTIAL) {
        writer.write_u32(static_cast<uint32_t>(obj.deleted_guids.size()));

        for (const auto& v : obj.deleted_guids) {
            writer.write_u64(v);
        }

    }
    writer.write_u32(static_cast<uint32_t>(obj.groups.size()));

    writer.write_u32(obj.unknown1);

    for (const auto& v : obj.groups) {
        LfgListGroup_write(writer, v);
    }

    writer.write_u32(static_cast<uint32_t>(obj.players.size()));

    writer.write_u32(obj.unknown2);

    for (const auto& v : obj.players) {
        LfgListPlayer_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_LFG_PROPOSAL_UPDATE_size(const SMSG_LFG_PROPOSAL_UPDATE& obj) {
    return 15 + 9 * obj.proposals.size();
}

SMSG_LFG_PROPOSAL_UPDATE SMSG_LFG_PROPOSAL_UPDATE_read(Reader& reader) {
    SMSG_LFG_PROPOSAL_UPDATE obj{};

    obj.dungeon_id = reader.read_u32();

    obj.proposal_state = reader.read_u8();

    obj.proposal_id = reader.read_u32();

    obj.encounters_finished_mask = reader.read_u32();

    obj.silent = reader.read_u8();

    auto amount_of_proposals = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_proposals; ++i) {
        obj.proposals.push_back(::wow_world_messages::wrath::LfgProposal_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_PROPOSAL_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LFG_PROPOSAL_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LFG_PROPOSAL_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000361); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.dungeon_id);

    writer.write_u8(obj.proposal_state);

    writer.write_u32(obj.proposal_id);

    writer.write_u32(obj.encounters_finished_mask);

    writer.write_u8(obj.silent);

    writer.write_u8(static_cast<uint8_t>(obj.proposals.size()));

    for (const auto& v : obj.proposals) {
        LfgProposal_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_LFG_PROPOSAL_RESULT CMSG_LFG_PROPOSAL_RESULT_read(Reader& reader) {
    CMSG_LFG_PROPOSAL_RESULT obj{};

    obj.proposal_id = reader.read_u32();

    obj.accept_join = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LFG_PROPOSAL_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0005);

    writer.write_u16_be(static_cast<uint16_t>(0x0005 + 4)); /* size */

    writer.write_u32(0x00000362); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.proposal_id);

    writer.write_bool8(obj.accept_join);

    return writer.m_buf;
}

static size_t SMSG_LFG_ROLE_CHECK_UPDATE_size(const SMSG_LFG_ROLE_CHECK_UPDATE& obj) {
    return 7 + 4 * obj.dungeon_entries.size() + 14 * obj.roles.size();
}

SMSG_LFG_ROLE_CHECK_UPDATE SMSG_LFG_ROLE_CHECK_UPDATE_read(Reader& reader) {
    SMSG_LFG_ROLE_CHECK_UPDATE obj{};

    obj.rolecheck_state = reader.read_u32();

    obj.rolecheck_initializing = reader.read_u8();

    auto amount_of_dungeon_entries = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_dungeon_entries; ++i) {
        obj.dungeon_entries.push_back(reader.read_u32());
    }

    auto amount_of_roles = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_roles; ++i) {
        obj.roles.push_back(::wow_world_messages::wrath::LfgRole_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_ROLE_CHECK_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LFG_ROLE_CHECK_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LFG_ROLE_CHECK_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000363); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.rolecheck_state);

    writer.write_u8(obj.rolecheck_initializing);

    writer.write_u8(static_cast<uint8_t>(obj.dungeon_entries.size()));

    for (const auto& v : obj.dungeon_entries) {
        writer.write_u32(v);
    }

    writer.write_u8(static_cast<uint8_t>(obj.roles.size()));

    for (const auto& v : obj.roles) {
        LfgRole_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_LFG_JOIN_RESULT_size(const SMSG_LFG_JOIN_RESULT& obj) {
    size_t _size = 8;

    for(const auto& v : obj.players) {
        _size += LfgJoinPlayer_size(v);
    }

    return _size;
}

SMSG_LFG_JOIN_RESULT SMSG_LFG_JOIN_RESULT_read(Reader& reader, size_t body_size) {
    SMSG_LFG_JOIN_RESULT obj{};
    size_t _size = 0;

    obj.result = reader.read_u32();
    _size += 4;

    obj.state = reader.read_u32();
    _size += 4;

    while (_size < body_size) {
        obj.players.push_back(::wow_world_messages::wrath::LfgJoinPlayer_read(reader));
        _size += wrath::LfgJoinPlayer_size(obj.players.back());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_JOIN_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LFG_JOIN_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LFG_JOIN_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000364); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.result);

    writer.write_u32(obj.state);

    for (const auto& v : obj.players) {
        LfgJoinPlayer_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_LFG_QUEUE_STATUS SMSG_LFG_QUEUE_STATUS_read(Reader& reader) {
    SMSG_LFG_QUEUE_STATUS obj{};

    obj.dungeon = reader.read_u32();

    obj.average_wait_time = reader.read_i32();

    obj.wait_time = reader.read_i32();

    obj.wait_time_tank = reader.read_i32();

    obj.wait_time_healer = reader.read_i32();

    obj.wait_time_dps = reader.read_i32();

    obj.tanks_needed = reader.read_u8();

    obj.healers_needed = reader.read_u8();

    obj.dps_needed = reader.read_u8();

    obj.queue_time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_QUEUE_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x001f);

    writer.write_u16_be(static_cast<uint16_t>(0x001f + 2)); /* size */

    writer.write_u16(0x00000365); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.dungeon);

    writer.write_i32(obj.average_wait_time);

    writer.write_i32(obj.wait_time);

    writer.write_i32(obj.wait_time_tank);

    writer.write_i32(obj.wait_time_healer);

    writer.write_i32(obj.wait_time_dps);

    writer.write_u8(obj.tanks_needed);

    writer.write_u8(obj.healers_needed);

    writer.write_u8(obj.dps_needed);

    writer.write_u32(obj.queue_time);

    return writer.m_buf;
}

static size_t CMSG_SET_LFG_COMMENT_size(const CMSG_SET_LFG_COMMENT& obj) {
    return 1 + obj.comment.size();
}

CMSG_SET_LFG_COMMENT CMSG_SET_LFG_COMMENT_read(Reader& reader) {
    CMSG_SET_LFG_COMMENT obj{};

    obj.comment = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_LFG_COMMENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_SET_LFG_COMMENT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_SET_LFG_COMMENT_size(obj) + 4)); /* size */

    writer.write_u32(0x00000366); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.comment);

    return writer.m_buf;
}

static size_t SMSG_LFG_UPDATE_PLAYER_size(const SMSG_LFG_UPDATE_PLAYER& obj) {
    size_t _size = 2;

    if (obj.join_status == LfgJoinStatus::JOINED) {
        _size += 5 + 4 * obj.dungeons.size() + obj.comment.size();
    }

    return _size;
}

SMSG_LFG_UPDATE_PLAYER SMSG_LFG_UPDATE_PLAYER_read(Reader& reader) {
    SMSG_LFG_UPDATE_PLAYER obj{};

    obj.update_type = static_cast<LfgUpdateType>(reader.read_u8());

    obj.join_status = static_cast<LfgJoinStatus>(reader.read_u8());

    if (obj.join_status == LfgJoinStatus::JOINED) {
        obj.queued = reader.read_u8();

        obj.no_partial_clear = reader.read_u8();

        obj.achievements = reader.read_u8();

        auto amount_of_dungeons = reader.read_u8();

        for (uint8_t i = 0; i < amount_of_dungeons; ++i) {
            obj.dungeons.push_back(reader.read_u32());
        }

        obj.comment = reader.read_cstring();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_UPDATE_PLAYER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LFG_UPDATE_PLAYER_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LFG_UPDATE_PLAYER_size(obj) + 2)); /* size */

    writer.write_u16(0x00000367); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.update_type));

    writer.write_u8(static_cast<uint8_t>(obj.join_status));

    if (obj.join_status == LfgJoinStatus::JOINED) {
        writer.write_u8(obj.queued);

        writer.write_u8(obj.no_partial_clear);

        writer.write_u8(obj.achievements);

        writer.write_u8(static_cast<uint8_t>(obj.dungeons.size()));

        for (const auto& v : obj.dungeons) {
            writer.write_u32(v);
        }

        writer.write_cstring(obj.comment);

    }
    return writer.m_buf;
}

static size_t SMSG_LFG_UPDATE_PARTY_size(const SMSG_LFG_UPDATE_PARTY& obj) {
    size_t _size = 2;

    if (obj.join_status == LfgJoinStatus::JOINED) {
        _size += 6 + 4 * obj.dungeons.size() + obj.comment.size();
    }

    return _size;
}

SMSG_LFG_UPDATE_PARTY SMSG_LFG_UPDATE_PARTY_read(Reader& reader) {
    SMSG_LFG_UPDATE_PARTY obj{};

    obj.update_type = static_cast<LfgUpdateType>(reader.read_u8());

    obj.join_status = static_cast<LfgJoinStatus>(reader.read_u8());

    if (obj.join_status == LfgJoinStatus::JOINED) {
        obj.joined = reader.read_u8();

        obj.queued = reader.read_u8();

        obj.no_partial_clear = reader.read_u8();

        obj.achievements = reader.read_u8();

        auto amount_of_dungeons = reader.read_u8();

        for (uint8_t i = 0; i < amount_of_dungeons; ++i) {
            obj.dungeons.push_back(reader.read_u32());
        }

        obj.comment = reader.read_cstring();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_UPDATE_PARTY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LFG_UPDATE_PARTY_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LFG_UPDATE_PARTY_size(obj) + 2)); /* size */

    writer.write_u16(0x00000368); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.update_type));

    writer.write_u8(static_cast<uint8_t>(obj.join_status));

    if (obj.join_status == LfgJoinStatus::JOINED) {
        writer.write_u8(obj.joined);

        writer.write_u8(obj.queued);

        writer.write_u8(obj.no_partial_clear);

        writer.write_u8(obj.achievements);

        writer.write_u8(static_cast<uint8_t>(obj.dungeons.size()));

        for (const auto& v : obj.dungeons) {
            writer.write_u32(v);
        }

        writer.write_cstring(obj.comment);

    }
    return writer.m_buf;
}

SMSG_LFG_UPDATE_SEARCH SMSG_LFG_UPDATE_SEARCH_read(Reader& reader) {
    SMSG_LFG_UPDATE_SEARCH obj{};

    obj.in_lfg_queue = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_UPDATE_SEARCH::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x00000369); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.in_lfg_queue);

    return writer.m_buf;
}

CMSG_LFG_SET_ROLES CMSG_LFG_SET_ROLES_read(Reader& reader) {
    CMSG_LFG_SET_ROLES obj{};

    obj.roles = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LFG_SET_ROLES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x0000036a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.roles);

    return writer.m_buf;
}

CMSG_LFG_SET_BOOT_VOTE CMSG_LFG_SET_BOOT_VOTE_read(Reader& reader) {
    CMSG_LFG_SET_BOOT_VOTE obj{};

    obj.agree_to_kick_player = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LFG_SET_BOOT_VOTE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x0000036c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.agree_to_kick_player);

    return writer.m_buf;
}

static size_t SMSG_LFG_BOOT_PROPOSAL_UPDATE_size(const SMSG_LFG_BOOT_PROPOSAL_UPDATE& obj) {
    return 28 + obj.reason.size();
}

SMSG_LFG_BOOT_PROPOSAL_UPDATE SMSG_LFG_BOOT_PROPOSAL_UPDATE_read(Reader& reader) {
    SMSG_LFG_BOOT_PROPOSAL_UPDATE obj{};

    obj.vote_in_progress = reader.read_bool8();

    obj.did_vote = reader.read_bool8();

    obj.agreed_with_kick = reader.read_bool8();

    obj.victim = reader.read_u64();

    obj.total_votes = reader.read_u32();

    obj.votes_agree = reader.read_u32();

    obj.time_left = reader.read_u32();

    obj.votes_needed = reader.read_u32();

    obj.reason = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_BOOT_PROPOSAL_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LFG_BOOT_PROPOSAL_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LFG_BOOT_PROPOSAL_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000036d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.vote_in_progress);

    writer.write_bool8(obj.did_vote);

    writer.write_bool8(obj.agreed_with_kick);

    writer.write_u64(obj.victim);

    writer.write_u32(obj.total_votes);

    writer.write_u32(obj.votes_agree);

    writer.write_u32(obj.time_left);

    writer.write_u32(obj.votes_needed);

    writer.write_cstring(obj.reason);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LFD_PLAYER_LOCK_INFO_REQUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000036e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_LFG_PLAYER_INFO_size(const SMSG_LFG_PLAYER_INFO& obj) {
    size_t _size = 2 + 8 * obj.locked_dungeons.size();

    for(const auto& v : obj.available_dungeons) {
        _size += LfgAvailableDungeon_size(v);
    }

    return _size;
}

SMSG_LFG_PLAYER_INFO SMSG_LFG_PLAYER_INFO_read(Reader& reader) {
    SMSG_LFG_PLAYER_INFO obj{};

    auto amount_of_available_dungeons = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_available_dungeons; ++i) {
        obj.available_dungeons.push_back(::wow_world_messages::wrath::LfgAvailableDungeon_read(reader));
    }

    auto amount_of_locked_dungeons = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_locked_dungeons; ++i) {
        obj.locked_dungeons.push_back(::wow_world_messages::wrath::LfgJoinLockedDungeon_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_PLAYER_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LFG_PLAYER_INFO_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LFG_PLAYER_INFO_size(obj) + 2)); /* size */

    writer.write_u16(0x0000036f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.available_dungeons.size()));

    for (const auto& v : obj.available_dungeons) {
        LfgAvailableDungeon_write(writer, v);
    }

    writer.write_u8(static_cast<uint8_t>(obj.locked_dungeons.size()));

    for (const auto& v : obj.locked_dungeons) {
        LfgJoinLockedDungeon_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_LFG_TELEPORT CMSG_LFG_TELEPORT_read(Reader& reader) {
    CMSG_LFG_TELEPORT obj{};

    obj.location = static_cast<LfgTeleportLocation>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LFG_TELEPORT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x00000370); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.location));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LFD_PARTY_LOCK_INFO_REQUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000371); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_LFG_PARTY_INFO_size(const SMSG_LFG_PARTY_INFO& obj) {
    size_t _size = 1;

    for(const auto& v : obj.infos) {
        _size += LfgPartyInfo_size(v);
    }

    return _size;
}

SMSG_LFG_PARTY_INFO SMSG_LFG_PARTY_INFO_read(Reader& reader) {
    SMSG_LFG_PARTY_INFO obj{};

    auto amount_of_infos = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_infos; ++i) {
        obj.infos.push_back(::wow_world_messages::wrath::LfgPartyInfo_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_PARTY_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LFG_PARTY_INFO_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LFG_PARTY_INFO_size(obj) + 2)); /* size */

    writer.write_u16(0x00000372); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.infos.size()));

    for (const auto& v : obj.infos) {
        LfgPartyInfo_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_TITLE_EARNED SMSG_TITLE_EARNED_read(Reader& reader) {
    SMSG_TITLE_EARNED obj{};

    obj.title = reader.read_u32();

    obj.status = static_cast<TitleEarnStatus>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TITLE_EARNED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x00000373); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.title);

    writer.write_u32(static_cast<uint32_t>(obj.status));

    return writer.m_buf;
}

CMSG_SET_TITLE CMSG_SET_TITLE_read(Reader& reader) {
    CMSG_SET_TITLE obj{};

    obj.title = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_TITLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000374); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.title);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CANCEL_MOUNT_AURA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000375); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_ARENA_ERROR SMSG_ARENA_ERROR_read(Reader& reader) {
    SMSG_ARENA_ERROR obj{};

    obj.unknown = reader.read_u32();

    obj.arena_type = static_cast<ArenaType>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ARENA_ERROR::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0005);

    writer.write_u16_be(static_cast<uint16_t>(0x0005 + 2)); /* size */

    writer.write_u16(0x00000376); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown);

    writer.write_u8(static_cast<uint8_t>(obj.arena_type));

    return writer.m_buf;
}

MSG_INSPECT_ARENA_TEAMS_Client MSG_INSPECT_ARENA_TEAMS_Client_read(Reader& reader) {
    MSG_INSPECT_ARENA_TEAMS_Client obj{};

    obj.player = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_INSPECT_ARENA_TEAMS_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000377); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    return writer.m_buf;
}

MSG_INSPECT_ARENA_TEAMS_Server MSG_INSPECT_ARENA_TEAMS_Server_read(Reader& reader) {
    MSG_INSPECT_ARENA_TEAMS_Server obj{};

    obj.player = reader.read_u64();

    obj.slot = reader.read_u8();

    obj.arena_team = reader.read_u32();

    obj.rating = reader.read_u32();

    obj.games_played_this_season = reader.read_u32();

    obj.wins_this_season = reader.read_u32();

    obj.total_games_played = reader.read_u32();

    obj.personal_rating = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_INSPECT_ARENA_TEAMS_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0021);

    writer.write_u16_be(static_cast<uint16_t>(0x0021 + 2)); /* size */

    writer.write_u16(0x00000377); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_u8(obj.slot);

    writer.write_u32(obj.arena_team);

    writer.write_u32(obj.rating);

    writer.write_u32(obj.games_played_this_season);

    writer.write_u32(obj.wins_this_season);

    writer.write_u32(obj.total_games_played);

    writer.write_u32(obj.personal_rating);

    return writer.m_buf;
}

SMSG_DEATH_RELEASE_LOC SMSG_DEATH_RELEASE_LOC_read(Reader& reader) {
    SMSG_DEATH_RELEASE_LOC obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DEATH_RELEASE_LOC::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x00000378); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    Vector3d_write(writer, obj.position);

    return writer.m_buf;
}

CMSG_CANCEL_TEMP_ENCHANTMENT CMSG_CANCEL_TEMP_ENCHANTMENT_read(Reader& reader) {
    CMSG_CANCEL_TEMP_ENCHANTMENT obj{};

    obj.slot = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CANCEL_TEMP_ENCHANTMENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000379); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.slot);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCED_DEATH_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x0000037a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t MSG_MOVE_SET_FLIGHT_SPEED_Server_size(const MSG_MOVE_SET_FLIGHT_SPEED_Server& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

MSG_MOVE_SET_FLIGHT_SPEED_Server MSG_MOVE_SET_FLIGHT_SPEED_Server_read(Reader& reader) {
    MSG_MOVE_SET_FLIGHT_SPEED_Server obj{};

    obj.player = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_FLIGHT_SPEED_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_FLIGHT_SPEED_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_SET_FLIGHT_SPEED_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x0000037e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

static size_t MSG_MOVE_SET_FLIGHT_BACK_SPEED_size(const MSG_MOVE_SET_FLIGHT_BACK_SPEED& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEED_read(Reader& reader) {
    MSG_MOVE_SET_FLIGHT_BACK_SPEED obj{};

    obj.player = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_FLIGHT_BACK_SPEED::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_FLIGHT_BACK_SPEED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_SET_FLIGHT_BACK_SPEED_size(obj) + 4)); /* size */

    writer.write_u32(0x00000380); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_FLIGHT_BACK_SPEED::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_FLIGHT_BACK_SPEED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_SET_FLIGHT_BACK_SPEED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000380); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

static size_t SMSG_FORCE_FLIGHT_SPEED_CHANGE_size(const SMSG_FORCE_FLIGHT_SPEED_CHANGE& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_FLIGHT_SPEED_CHANGE SMSG_FORCE_FLIGHT_SPEED_CHANGE_read(Reader& reader) {
    SMSG_FORCE_FLIGHT_SPEED_CHANGE obj{};

    obj.guid = reader.read_packed_guid();

    obj.move_event = reader.read_u32();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_FLIGHT_SPEED_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_FLIGHT_SPEED_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_FLIGHT_SPEED_CHANGE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000381); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.move_event);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK_size(const CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK& obj) {
    return 16 + MovementInfo_size(obj.info);
}

CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK_read(Reader& reader) {
    CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK obj{};

    obj.player = reader.read_u64();

    obj.counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x00000382); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_u32(obj.counter);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

static size_t SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_size(const SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_read(Reader& reader) {
    SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE obj{};

    obj.guid = reader.read_packed_guid();

    obj.move_event = reader.read_u32();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000383); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.move_event);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK_size(const CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK& obj) {
    return 16 + MovementInfo_size(obj.info);
}

CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK_read(Reader& reader) {
    CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK obj{};

    obj.player = reader.read_u64();

    obj.counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x00000384); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_u32(obj.counter);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_SET_FLIGHT_SPEED_size(const SMSG_SPLINE_SET_FLIGHT_SPEED& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_SET_FLIGHT_SPEED SMSG_SPLINE_SET_FLIGHT_SPEED_read(Reader& reader) {
    SMSG_SPLINE_SET_FLIGHT_SPEED obj{};

    obj.guid = reader.read_packed_guid();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_SET_FLIGHT_SPEED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_SET_FLIGHT_SPEED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_SET_FLIGHT_SPEED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000385); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_SET_FLIGHT_BACK_SPEED_size(const SMSG_SPLINE_SET_FLIGHT_BACK_SPEED& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_SET_FLIGHT_BACK_SPEED SMSG_SPLINE_SET_FLIGHT_BACK_SPEED_read(Reader& reader) {
    SMSG_SPLINE_SET_FLIGHT_BACK_SPEED obj{};

    obj.guid = reader.read_packed_guid();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_SET_FLIGHT_BACK_SPEED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_SET_FLIGHT_BACK_SPEED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_SET_FLIGHT_BACK_SPEED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000386); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t SMSG_FLIGHT_SPLINE_SYNC_size(const SMSG_FLIGHT_SPLINE_SYNC& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FLIGHT_SPLINE_SYNC SMSG_FLIGHT_SPLINE_SYNC_read(Reader& reader) {
    SMSG_FLIGHT_SPLINE_SYNC obj{};

    obj.elapsed_value = reader.read_float();

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FLIGHT_SPLINE_SYNC::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FLIGHT_SPLINE_SYNC_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FLIGHT_SPLINE_SYNC_size(obj) + 2)); /* size */

    writer.write_u16(0x00000388); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_float(obj.elapsed_value);

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

CMSG_SET_TAXI_BENCHMARK_MODE CMSG_SET_TAXI_BENCHMARK_MODE_read(Reader& reader) {
    CMSG_SET_TAXI_BENCHMARK_MODE obj{};

    obj.mode = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_TAXI_BENCHMARK_MODE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x00000389); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.mode);

    return writer.m_buf;
}

static size_t SMSG_REALM_SPLIT_size(const SMSG_REALM_SPLIT& obj) {
    return 9 + obj.split_date.size();
}

SMSG_REALM_SPLIT SMSG_REALM_SPLIT_read(Reader& reader) {
    SMSG_REALM_SPLIT obj{};

    obj.realm_id = reader.read_u32();

    obj.state = static_cast<RealmSplitState>(reader.read_u32());

    obj.split_date = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_REALM_SPLIT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_REALM_SPLIT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_REALM_SPLIT_size(obj) + 2)); /* size */

    writer.write_u16(0x0000038b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.realm_id);

    writer.write_u32(static_cast<uint32_t>(obj.state));

    writer.write_cstring(obj.split_date);

    return writer.m_buf;
}

CMSG_REALM_SPLIT CMSG_REALM_SPLIT_read(Reader& reader) {
    CMSG_REALM_SPLIT obj{};

    obj.realm_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REALM_SPLIT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000038c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.realm_id);

    return writer.m_buf;
}

static size_t CMSG_MOVE_CHNG_TRANSPORT_size(const CMSG_MOVE_CHNG_TRANSPORT& obj) {
    return 0 + MovementInfo_size(obj.info);
}

CMSG_MOVE_CHNG_TRANSPORT CMSG_MOVE_CHNG_TRANSPORT_read(Reader& reader) {
    CMSG_MOVE_CHNG_TRANSPORT obj{};

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_CHNG_TRANSPORT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_CHNG_TRANSPORT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_CHNG_TRANSPORT_size(obj) + 4)); /* size */

    writer.write_u32(0x0000038d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

MSG_PARTY_ASSIGNMENT_Client MSG_PARTY_ASSIGNMENT_Client_read(Reader& reader) {
    MSG_PARTY_ASSIGNMENT_Client obj{};

    obj.role = static_cast<PartyRole>(reader.read_u8());

    obj.apply = reader.read_bool8();

    obj.player = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_PARTY_ASSIGNMENT_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000a);

    writer.write_u16_be(static_cast<uint16_t>(0x000a + 4)); /* size */

    writer.write_u32(0x0000038e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.role));

    writer.write_bool8(obj.apply);

    writer.write_u64(obj.player);

    return writer.m_buf;
}

SMSG_TIME_SYNC_REQ SMSG_TIME_SYNC_REQ_read(Reader& reader) {
    SMSG_TIME_SYNC_REQ obj{};

    obj.time_sync = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TIME_SYNC_REQ::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000390); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.time_sync);

    return writer.m_buf;
}

CMSG_TIME_SYNC_RESP CMSG_TIME_SYNC_RESP_read(Reader& reader) {
    CMSG_TIME_SYNC_RESP obj{};

    obj.time_sync = reader.read_u32();

    obj.client_ticks = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TIME_SYNC_RESP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000391); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.time_sync);

    writer.write_u32(obj.client_ticks);

    return writer.m_buf;
}

SMSG_RESET_FAILED_NOTIFY SMSG_RESET_FAILED_NOTIFY_read(Reader& reader) {
    SMSG_RESET_FAILED_NOTIFY obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_RESET_FAILED_NOTIFY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000396); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LFG_DISABLED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000398); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_UPDATE_COMBO_POINTS_size(const SMSG_UPDATE_COMBO_POINTS& obj) {
    return 1 + ::wow_world_messages::util::wwm_packed_guid_size(obj.target);
}

SMSG_UPDATE_COMBO_POINTS SMSG_UPDATE_COMBO_POINTS_read(Reader& reader) {
    SMSG_UPDATE_COMBO_POINTS obj{};

    obj.target = reader.read_packed_guid();

    obj.combo_points = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_UPDATE_COMBO_POINTS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_UPDATE_COMBO_POINTS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_UPDATE_COMBO_POINTS_size(obj) + 2)); /* size */

    writer.write_u16(0x0000039d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.target);

    writer.write_u8(obj.combo_points);

    return writer.m_buf;
}

static size_t MSG_MOVE_START_DESCEND_size(const MSG_MOVE_START_DESCEND& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

MSG_MOVE_START_DESCEND MSG_MOVE_START_DESCEND_read(Reader& reader) {
    MSG_MOVE_START_DESCEND obj{};

    obj.guid = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_DESCEND::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_DESCEND_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_MOVE_START_DESCEND_size(obj) + 4)); /* size */

    writer.write_u32(0x000003a7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_START_DESCEND::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_START_DESCEND_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_START_DESCEND_size(obj) + 2)); /* size */

    writer.write_u16(0x000003a7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t SMSG_DISMOUNT_size(const SMSG_DISMOUNT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

SMSG_DISMOUNT SMSG_DISMOUNT_read(Reader& reader) {
    SMSG_DISMOUNT obj{};

    obj.player = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_DISMOUNT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_DISMOUNT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_DISMOUNT_size(obj) + 2)); /* size */

    writer.write_u16(0x000003ac); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    return writer.m_buf;
}

static size_t MSG_MOVE_UPDATE_CAN_FLY_Server_size(const MSG_MOVE_UPDATE_CAN_FLY_Server& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

MSG_MOVE_UPDATE_CAN_FLY_Server MSG_MOVE_UPDATE_CAN_FLY_Server_read(Reader& reader) {
    MSG_MOVE_UPDATE_CAN_FLY_Server obj{};

    obj.player = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_UPDATE_CAN_FLY_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_UPDATE_CAN_FLY_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_UPDATE_CAN_FLY_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x000003ad); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_RAID_READY_CHECK_CONFIRM_Client_size(const MSG_RAID_READY_CHECK_CONFIRM_Client& obj) {
    size_t _size = 0;

    if(obj.set) {
        _size += 1;
    }

    return _size;
}

MSG_RAID_READY_CHECK_CONFIRM_Client MSG_RAID_READY_CHECK_CONFIRM_Client_read(Reader& reader, size_t body_size) {
    MSG_RAID_READY_CHECK_CONFIRM_Client obj{};
    size_t _size = 0;

    if (_size < body_size) {
        obj.set = std::shared_ptr<wrath::MSG_RAID_READY_CHECK_CONFIRM_Client::Set>(new wrath::MSG_RAID_READY_CHECK_CONFIRM_Client::Set());

        obj.set->state = reader.read_u8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_RAID_READY_CHECK_CONFIRM_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_RAID_READY_CHECK_CONFIRM_Client_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)MSG_RAID_READY_CHECK_CONFIRM_Client_size(obj) + 4)); /* size */

    writer.write_u32(0x000003ae); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    if(obj.set) {
        writer.write_u8(obj.set->state);

    }
    return writer.m_buf;
}

MSG_RAID_READY_CHECK_CONFIRM_Server MSG_RAID_READY_CHECK_CONFIRM_Server_read(Reader& reader) {
    MSG_RAID_READY_CHECK_CONFIRM_Server obj{};

    obj.player = reader.read_u64();

    obj.state = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_RAID_READY_CHECK_CONFIRM_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 2)); /* size */

    writer.write_u16(0x000003ae); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_u8(obj.state);

    return writer.m_buf;
}

CMSG_VOICE_SESSION_ENABLE CMSG_VOICE_SESSION_ENABLE_read(Reader& reader) {
    CMSG_VOICE_SESSION_ENABLE obj{};

    obj.voice_enabled = reader.read_bool8();

    obj.microphone_enabled = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_VOICE_SESSION_ENABLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 4)); /* size */

    writer.write_u32(0x000003af); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.voice_enabled);

    writer.write_bool8(obj.microphone_enabled);

    return writer.m_buf;
}

static size_t SMSG_GM_MESSAGECHAT_size(const SMSG_GM_MESSAGECHAT& obj) {
    size_t _size = 23 + obj.message.size();

    if (obj.chat_type == ChatType::MONSTER_SAY|| obj.chat_type == ChatType::MONSTER_PARTY|| obj.chat_type == ChatType::MONSTER_YELL|| obj.chat_type == ChatType::MONSTER_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_EMOTE|| obj.chat_type == ChatType::MONSTER_EMOTE|| obj.chat_type == ChatType::BATTLENET) {
        _size += 5 + obj.sender1.size() + ::wow_world_messages::util::wwm_named_guid_size(obj.target1);
    }
    else if (obj.chat_type == ChatType::WHISPER_FOREIGN) {
        _size += 13 + obj.sender2.size();
    }
    else if (obj.chat_type == ChatType::BG_SYSTEM_NEUTRAL|| obj.chat_type == ChatType::BG_SYSTEM_ALLIANCE|| obj.chat_type == ChatType::BG_SYSTEM_HORDE) {
        _size += 0 + ::wow_world_messages::util::wwm_named_guid_size(obj.target3);
    }
    else if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        _size += 8;
    }
    else if (obj.chat_type == ChatType::CHANNEL) {
        _size += 9 + obj.channel_name.size();
    }
    else if (obj.chat_type == ChatType::SYSTEM|| obj.chat_type == ChatType::SAY|| obj.chat_type == ChatType::PARTY|| obj.chat_type == ChatType::RAID|| obj.chat_type == ChatType::GUILD|| obj.chat_type == ChatType::OFFICER|| obj.chat_type == ChatType::YELL|| obj.chat_type == ChatType::WHISPER|| obj.chat_type == ChatType::WHISPER_INFORM|| obj.chat_type == ChatType::EMOTE|| obj.chat_type == ChatType::TEXT_EMOTE|| obj.chat_type == ChatType::CHANNEL_JOIN|| obj.chat_type == ChatType::CHANNEL_LEAVE|| obj.chat_type == ChatType::CHANNEL_LIST|| obj.chat_type == ChatType::CHANNEL_NOTICE|| obj.chat_type == ChatType::CHANNEL_NOTICE_USER|| obj.chat_type == ChatType::AFK|| obj.chat_type == ChatType::DND|| obj.chat_type == ChatType::IGNORED|| obj.chat_type == ChatType::SKILL|| obj.chat_type == ChatType::LOOT|| obj.chat_type == ChatType::MONEY|| obj.chat_type == ChatType::OPENING|| obj.chat_type == ChatType::TRADESKILLS|| obj.chat_type == ChatType::PET_INFO|| obj.chat_type == ChatType::COMBAT_MISC_INFO|| obj.chat_type == ChatType::COMBAT_XP_GAIN|| obj.chat_type == ChatType::COMBAT_HONOR_GAIN|| obj.chat_type == ChatType::COMBAT_FACTION_CHANGE|| obj.chat_type == ChatType::RAID_LEADER|| obj.chat_type == ChatType::RAID_WARNING|| obj.chat_type == ChatType::FILTERED|| obj.chat_type == ChatType::BATTLEGROUND|| obj.chat_type == ChatType::BATTLEGROUND_LEADER|| obj.chat_type == ChatType::RESTRICTED|| obj.chat_type == ChatType::ARENA_POINTS|| obj.chat_type == ChatType::PARTY_LEADER) {
        _size += 13 + obj.sender_name.size();
    }

    if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        _size += 4;
    }

    return _size;
}

SMSG_GM_MESSAGECHAT SMSG_GM_MESSAGECHAT_read(Reader& reader) {
    SMSG_GM_MESSAGECHAT obj{};

    obj.chat_type = static_cast<ChatType>(reader.read_u8());

    obj.language = static_cast<Language>(reader.read_u32());

    obj.sender = reader.read_u64();

    obj.flags = reader.read_u32();

    if (obj.chat_type == ChatType::MONSTER_SAY|| obj.chat_type == ChatType::MONSTER_PARTY|| obj.chat_type == ChatType::MONSTER_YELL|| obj.chat_type == ChatType::MONSTER_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_EMOTE|| obj.chat_type == ChatType::MONSTER_EMOTE|| obj.chat_type == ChatType::BATTLENET) {
        obj.sender1 = reader.read_sized_cstring();

        obj.target1 = ::wow_world_messages::util::wwm_read_named_guid(reader);

    }
    else if (obj.chat_type == ChatType::WHISPER_FOREIGN) {
        obj.sender2 = reader.read_sized_cstring();

        obj.target2 = reader.read_u64();

    }
    else if (obj.chat_type == ChatType::BG_SYSTEM_NEUTRAL|| obj.chat_type == ChatType::BG_SYSTEM_ALLIANCE|| obj.chat_type == ChatType::BG_SYSTEM_HORDE) {
        obj.target3 = ::wow_world_messages::util::wwm_read_named_guid(reader);

    }
    else if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        obj.target4 = reader.read_u64();

    }
    else if (obj.chat_type == ChatType::CHANNEL) {
        obj.channel_name = reader.read_cstring();

        obj.target5 = reader.read_u64();

    }
    else if (obj.chat_type == ChatType::SYSTEM|| obj.chat_type == ChatType::SAY|| obj.chat_type == ChatType::PARTY|| obj.chat_type == ChatType::RAID|| obj.chat_type == ChatType::GUILD|| obj.chat_type == ChatType::OFFICER|| obj.chat_type == ChatType::YELL|| obj.chat_type == ChatType::WHISPER|| obj.chat_type == ChatType::WHISPER_INFORM|| obj.chat_type == ChatType::EMOTE|| obj.chat_type == ChatType::TEXT_EMOTE|| obj.chat_type == ChatType::CHANNEL_JOIN|| obj.chat_type == ChatType::CHANNEL_LEAVE|| obj.chat_type == ChatType::CHANNEL_LIST|| obj.chat_type == ChatType::CHANNEL_NOTICE|| obj.chat_type == ChatType::CHANNEL_NOTICE_USER|| obj.chat_type == ChatType::AFK|| obj.chat_type == ChatType::DND|| obj.chat_type == ChatType::IGNORED|| obj.chat_type == ChatType::SKILL|| obj.chat_type == ChatType::LOOT|| obj.chat_type == ChatType::MONEY|| obj.chat_type == ChatType::OPENING|| obj.chat_type == ChatType::TRADESKILLS|| obj.chat_type == ChatType::PET_INFO|| obj.chat_type == ChatType::COMBAT_MISC_INFO|| obj.chat_type == ChatType::COMBAT_XP_GAIN|| obj.chat_type == ChatType::COMBAT_HONOR_GAIN|| obj.chat_type == ChatType::COMBAT_FACTION_CHANGE|| obj.chat_type == ChatType::RAID_LEADER|| obj.chat_type == ChatType::RAID_WARNING|| obj.chat_type == ChatType::FILTERED|| obj.chat_type == ChatType::BATTLEGROUND|| obj.chat_type == ChatType::BATTLEGROUND_LEADER|| obj.chat_type == ChatType::RESTRICTED|| obj.chat_type == ChatType::ARENA_POINTS|| obj.chat_type == ChatType::PARTY_LEADER) {
        obj.sender_name = reader.read_sized_cstring();

        obj.target6 = reader.read_u64();

    }
    obj.message = reader.read_sized_cstring();

    obj.chat_tag = static_cast<PlayerChatTag>(reader.read_u8());

    if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        obj.achievement_id = reader.read_u32();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GM_MESSAGECHAT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GM_MESSAGECHAT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GM_MESSAGECHAT_size(obj) + 2)); /* size */

    writer.write_u16(0x000003b3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.chat_type));

    writer.write_u32(static_cast<uint32_t>(obj.language));

    writer.write_u64(obj.sender);

    writer.write_u32(obj.flags);

    if (obj.chat_type == ChatType::MONSTER_SAY|| obj.chat_type == ChatType::MONSTER_PARTY|| obj.chat_type == ChatType::MONSTER_YELL|| obj.chat_type == ChatType::MONSTER_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_WHISPER|| obj.chat_type == ChatType::RAID_BOSS_EMOTE|| obj.chat_type == ChatType::MONSTER_EMOTE|| obj.chat_type == ChatType::BATTLENET) {
        writer.write_sized_cstring(obj.sender1);

        ::wow_world_messages::util::wwm_write_named_guid(writer, obj.target1);

    }
    else if (obj.chat_type == ChatType::WHISPER_FOREIGN) {
        writer.write_sized_cstring(obj.sender2);

        writer.write_u64(obj.target2);

    }
    else if (obj.chat_type == ChatType::BG_SYSTEM_NEUTRAL|| obj.chat_type == ChatType::BG_SYSTEM_ALLIANCE|| obj.chat_type == ChatType::BG_SYSTEM_HORDE) {
        ::wow_world_messages::util::wwm_write_named_guid(writer, obj.target3);

    }
    else if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        writer.write_u64(obj.target4);

    }
    else if (obj.chat_type == ChatType::CHANNEL) {
        writer.write_cstring(obj.channel_name);

        writer.write_u64(obj.target5);

    }
    else if (obj.chat_type == ChatType::SYSTEM|| obj.chat_type == ChatType::SAY|| obj.chat_type == ChatType::PARTY|| obj.chat_type == ChatType::RAID|| obj.chat_type == ChatType::GUILD|| obj.chat_type == ChatType::OFFICER|| obj.chat_type == ChatType::YELL|| obj.chat_type == ChatType::WHISPER|| obj.chat_type == ChatType::WHISPER_INFORM|| obj.chat_type == ChatType::EMOTE|| obj.chat_type == ChatType::TEXT_EMOTE|| obj.chat_type == ChatType::CHANNEL_JOIN|| obj.chat_type == ChatType::CHANNEL_LEAVE|| obj.chat_type == ChatType::CHANNEL_LIST|| obj.chat_type == ChatType::CHANNEL_NOTICE|| obj.chat_type == ChatType::CHANNEL_NOTICE_USER|| obj.chat_type == ChatType::AFK|| obj.chat_type == ChatType::DND|| obj.chat_type == ChatType::IGNORED|| obj.chat_type == ChatType::SKILL|| obj.chat_type == ChatType::LOOT|| obj.chat_type == ChatType::MONEY|| obj.chat_type == ChatType::OPENING|| obj.chat_type == ChatType::TRADESKILLS|| obj.chat_type == ChatType::PET_INFO|| obj.chat_type == ChatType::COMBAT_MISC_INFO|| obj.chat_type == ChatType::COMBAT_XP_GAIN|| obj.chat_type == ChatType::COMBAT_HONOR_GAIN|| obj.chat_type == ChatType::COMBAT_FACTION_CHANGE|| obj.chat_type == ChatType::RAID_LEADER|| obj.chat_type == ChatType::RAID_WARNING|| obj.chat_type == ChatType::FILTERED|| obj.chat_type == ChatType::BATTLEGROUND|| obj.chat_type == ChatType::BATTLEGROUND_LEADER|| obj.chat_type == ChatType::RESTRICTED|| obj.chat_type == ChatType::ARENA_POINTS|| obj.chat_type == ChatType::PARTY_LEADER) {
        writer.write_sized_cstring(obj.sender_name);

        writer.write_u64(obj.target6);

    }
    writer.write_sized_cstring(obj.message);

    writer.write_u8(static_cast<uint8_t>(obj.chat_tag));

    if (obj.chat_type == ChatType::ACHIEVEMENT|| obj.chat_type == ChatType::GUILD_ACHIEVEMENT) {
        writer.write_u32(obj.achievement_id);

    }
    return writer.m_buf;
}

CMSG_COMMENTATOR_ENABLE CMSG_COMMENTATOR_ENABLE_read(Reader& reader) {
    CMSG_COMMENTATOR_ENABLE obj{};

    obj.option = static_cast<CommentatorEnableOption>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_COMMENTATOR_ENABLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x000003b5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.option));

    return writer.m_buf;
}

SMSG_CLEAR_TARGET SMSG_CLEAR_TARGET_read(Reader& reader) {
    SMSG_CLEAR_TARGET obj{};

    obj.target = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CLEAR_TARGET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000003bf); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.target);

    return writer.m_buf;
}

SMSG_CROSSED_INEBRIATION_THRESHOLD SMSG_CROSSED_INEBRIATION_THRESHOLD_read(Reader& reader) {
    SMSG_CROSSED_INEBRIATION_THRESHOLD obj{};

    obj.player = reader.read_u64();

    obj.state = reader.read_u32();

    obj.item = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CROSSED_INEBRIATION_THRESHOLD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x000003c1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_u32(obj.state);

    writer.write_u32(obj.item);

    return writer.m_buf;
}

static size_t SMSG_KICK_REASON_size(const SMSG_KICK_REASON& obj) {
    return 2 + obj.text.size();
}

SMSG_KICK_REASON SMSG_KICK_REASON_read(Reader& reader) {
    SMSG_KICK_REASON obj{};

    obj.reason = reader.read_u8();

    obj.text = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_KICK_REASON::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_KICK_REASON_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_KICK_REASON_size(obj) + 2)); /* size */

    writer.write_u16(0x000003c5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.reason);

    writer.write_cstring(obj.text);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_RAID_READY_CHECK_FINISHED_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000003c6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t CMSG_COMPLAIN_size(const CMSG_COMPLAIN& obj) {
    size_t _size = 9;

    if (obj.complaint_type == SpamType::MAIL) {
        _size += 12;
    }
    else if (obj.complaint_type == SpamType::CHAT) {
        _size += 17 + obj.description.size();
    }

    return _size;
}

CMSG_COMPLAIN CMSG_COMPLAIN_read(Reader& reader) {
    CMSG_COMPLAIN obj{};

    obj.complaint_type = static_cast<SpamType>(reader.read_u8());

    obj.offender = reader.read_u64();

    if (obj.complaint_type == SpamType::MAIL) {
        obj.unknown1 = reader.read_u32();

        obj.mail_id = reader.read_u32();

        obj.unknown2 = reader.read_u32();

    }
    else if (obj.complaint_type == SpamType::CHAT) {
        obj.language = reader.read_u32();

        obj.message_type = reader.read_u32();

        obj.channel_id = reader.read_u32();

        obj.time = reader.read_u32();

        obj.description = reader.read_cstring();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_COMPLAIN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_COMPLAIN_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_COMPLAIN_size(obj) + 4)); /* size */

    writer.write_u32(0x000003c7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.complaint_type));

    writer.write_u64(obj.offender);

    if (obj.complaint_type == SpamType::MAIL) {
        writer.write_u32(obj.unknown1);

        writer.write_u32(obj.mail_id);

        writer.write_u32(obj.unknown2);

    }
    else if (obj.complaint_type == SpamType::CHAT) {
        writer.write_u32(obj.language);

        writer.write_u32(obj.message_type);

        writer.write_u32(obj.channel_id);

        writer.write_u32(obj.time);

        writer.write_cstring(obj.description);

    }
    return writer.m_buf;
}

SMSG_COMPLAIN_RESULT SMSG_COMPLAIN_RESULT_read(Reader& reader) {
    SMSG_COMPLAIN_RESULT obj{};

    obj.unknown = reader.read_u8();

    obj.window_result = static_cast<ComplainResultWindow>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_COMPLAIN_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 2)); /* size */

    writer.write_u16(0x000003c8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.unknown);

    writer.write_u8(static_cast<uint8_t>(obj.window_result));

    return writer.m_buf;
}

SMSG_FEATURE_SYSTEM_STATUS SMSG_FEATURE_SYSTEM_STATUS_read(Reader& reader) {
    SMSG_FEATURE_SYSTEM_STATUS obj{};

    obj.complaint_status = static_cast<ComplaintStatus>(reader.read_u8());

    obj.voice_chat_enabled = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FEATURE_SYSTEM_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 2)); /* size */

    writer.write_u16(0x000003c9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.complaint_status));

    writer.write_bool8(obj.voice_chat_enabled);

    return writer.m_buf;
}

static size_t CMSG_CHANNEL_DISPLAY_LIST_size(const CMSG_CHANNEL_DISPLAY_LIST& obj) {
    return 1 + obj.channel.size();
}

CMSG_CHANNEL_DISPLAY_LIST CMSG_CHANNEL_DISPLAY_LIST_read(Reader& reader) {
    CMSG_CHANNEL_DISPLAY_LIST obj{};

    obj.channel = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_DISPLAY_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANNEL_DISPLAY_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANNEL_DISPLAY_LIST_size(obj) + 4)); /* size */

    writer.write_u32(0x000003d2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel);

    return writer.m_buf;
}

static size_t CMSG_SET_ACTIVE_VOICE_CHANNEL_size(const CMSG_SET_ACTIVE_VOICE_CHANNEL& obj) {
    return 5 + obj.unknown2.size();
}

CMSG_SET_ACTIVE_VOICE_CHANNEL CMSG_SET_ACTIVE_VOICE_CHANNEL_read(Reader& reader) {
    CMSG_SET_ACTIVE_VOICE_CHANNEL obj{};

    obj.unknown1 = reader.read_u32();

    obj.unknown2 = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_ACTIVE_VOICE_CHANNEL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_SET_ACTIVE_VOICE_CHANNEL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_SET_ACTIVE_VOICE_CHANNEL_size(obj) + 4)); /* size */

    writer.write_u32(0x000003d3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown1);

    writer.write_cstring(obj.unknown2);

    return writer.m_buf;
}

static size_t CMSG_GET_CHANNEL_MEMBER_COUNT_size(const CMSG_GET_CHANNEL_MEMBER_COUNT& obj) {
    return 1 + obj.channel.size();
}

CMSG_GET_CHANNEL_MEMBER_COUNT CMSG_GET_CHANNEL_MEMBER_COUNT_read(Reader& reader) {
    CMSG_GET_CHANNEL_MEMBER_COUNT obj{};

    obj.channel = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GET_CHANNEL_MEMBER_COUNT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GET_CHANNEL_MEMBER_COUNT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GET_CHANNEL_MEMBER_COUNT_size(obj) + 4)); /* size */

    writer.write_u32(0x000003d4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel);

    return writer.m_buf;
}

static size_t SMSG_CHANNEL_MEMBER_COUNT_size(const SMSG_CHANNEL_MEMBER_COUNT& obj) {
    return 6 + obj.channel.size();
}

SMSG_CHANNEL_MEMBER_COUNT SMSG_CHANNEL_MEMBER_COUNT_read(Reader& reader) {
    SMSG_CHANNEL_MEMBER_COUNT obj{};

    obj.channel = reader.read_cstring();

    obj.flags = reader.read_u8();

    obj.amount_of_members = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHANNEL_MEMBER_COUNT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CHANNEL_MEMBER_COUNT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CHANNEL_MEMBER_COUNT_size(obj) + 2)); /* size */

    writer.write_u16(0x000003d5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel);

    writer.write_u8(obj.flags);

    writer.write_u32(obj.amount_of_members);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANNEL_VOICE_ON::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000003d6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_REPORT_PVP_AFK CMSG_REPORT_PVP_AFK_read(Reader& reader) {
    CMSG_REPORT_PVP_AFK obj{};

    obj.player = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REPORT_PVP_AFK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000003e4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    return writer.m_buf;
}

CMSG_GUILD_BANKER_ACTIVATE CMSG_GUILD_BANKER_ACTIVATE_read(Reader& reader) {
    CMSG_GUILD_BANKER_ACTIVATE obj{};

    obj.bank = reader.read_u64();

    obj.full_update = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_BANKER_ACTIVATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x000003e6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.bank);

    writer.write_bool8(obj.full_update);

    return writer.m_buf;
}

CMSG_GUILD_BANK_QUERY_TAB CMSG_GUILD_BANK_QUERY_TAB_read(Reader& reader) {
    CMSG_GUILD_BANK_QUERY_TAB obj{};

    obj.bank = reader.read_u64();

    obj.tab = reader.read_u8();

    obj.full_update = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_BANK_QUERY_TAB::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000a);

    writer.write_u16_be(static_cast<uint16_t>(0x000a + 4)); /* size */

    writer.write_u32(0x000003e7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.bank);

    writer.write_u8(obj.tab);

    writer.write_bool8(obj.full_update);

    return writer.m_buf;
}

static size_t SMSG_GUILD_BANK_LIST_size(const SMSG_GUILD_BANK_LIST& obj) {
    size_t _size = 15;

    if (obj.tab_result == GuildBankTabResult::PRESENT) {
        _size += 1;

        for(const auto& v : obj.tabs) {
            _size += GuildBankTab_size(v);
        }

    }

    if (obj.content_result == GuildBankContentResult::PRESENT) {
        _size += 1;

        for(const auto& v : obj.slot_updates) {
            _size += GuildBankSlot_size(v);
        }

    }

    return _size;
}

SMSG_GUILD_BANK_LIST SMSG_GUILD_BANK_LIST_read(Reader& reader) {
    SMSG_GUILD_BANK_LIST obj{};

    obj.bank_balance = reader.read_u64();

    obj.tab_id = reader.read_u8();

    obj.amount_of_allowed_item_withdraws = reader.read_u32();

    obj.tab_result = static_cast<GuildBankTabResult>(reader.read_u8());

    if (obj.tab_result == GuildBankTabResult::PRESENT) {
        auto amount_of_bank_tabs = reader.read_u8();

        for (uint8_t i = 0; i < amount_of_bank_tabs; ++i) {
            obj.tabs.push_back(::wow_world_messages::wrath::GuildBankTab_read(reader));
        }

    }
    obj.content_result = static_cast<GuildBankContentResult>(reader.read_u8());

    if (obj.content_result == GuildBankContentResult::PRESENT) {
        auto amount_of_slot_updates = reader.read_u8();

        for (uint8_t i = 0; i < amount_of_slot_updates; ++i) {
            obj.slot_updates.push_back(::wow_world_messages::wrath::GuildBankSlot_read(reader));
        }

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GUILD_BANK_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GUILD_BANK_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GUILD_BANK_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x000003e8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.bank_balance);

    writer.write_u8(obj.tab_id);

    writer.write_u32(obj.amount_of_allowed_item_withdraws);

    writer.write_u8(static_cast<uint8_t>(obj.tab_result));

    if (obj.tab_result == GuildBankTabResult::PRESENT) {
        writer.write_u8(static_cast<uint8_t>(obj.tabs.size()));

        for (const auto& v : obj.tabs) {
            GuildBankTab_write(writer, v);
        }

    }
    writer.write_u8(static_cast<uint8_t>(obj.content_result));

    if (obj.content_result == GuildBankContentResult::PRESENT) {
        writer.write_u8(static_cast<uint8_t>(obj.slot_updates.size()));

        for (const auto& v : obj.slot_updates) {
            GuildBankSlot_write(writer, v);
        }

    }
    return writer.m_buf;
}

static size_t CMSG_GUILD_BANK_SWAP_ITEMS_size(const CMSG_GUILD_BANK_SWAP_ITEMS& obj) {
    size_t _size = 9 + 1 * obj.unknown5.size();

    if (obj.source == BankSwapSource::BANK) {
        _size += 17;
    }
    else if (obj.source == BankSwapSource::INVENTORY) {
        _size += 7;

        if (obj.mode == BankSwapStoreMode::AUTOMATIC) {
            _size += 9;
        }
        else if (obj.mode == BankSwapStoreMode::MANUAL) {
            _size += 7;
        }

    }

    return _size;
}

CMSG_GUILD_BANK_SWAP_ITEMS CMSG_GUILD_BANK_SWAP_ITEMS_read(Reader& reader, size_t body_size) {
    CMSG_GUILD_BANK_SWAP_ITEMS obj{};
    size_t _size = 0;

    obj.bank = reader.read_u64();
    _size += 8;

    obj.source = static_cast<BankSwapSource>(reader.read_u8());
    _size += 1;

    if (obj.source == BankSwapSource::BANK) {
        obj.bank_destination_tab = reader.read_u8();
        _size += 1;

        obj.bank_destination_slot = reader.read_u8();
        _size += 1;

        obj.unknown1 = reader.read_u32();
        _size += 4;

        obj.bank_source_tab = reader.read_u8();
        _size += 1;

        obj.bank_source_slot = reader.read_u8();
        _size += 1;

        obj.item1 = reader.read_u32();
        _size += 4;

        obj.unknown2 = reader.read_u8();
        _size += 1;

        obj.amount = reader.read_u32();
        _size += 4;

    }
    else if (obj.source == BankSwapSource::INVENTORY) {
        obj.bank_tab = reader.read_u8();
        _size += 1;

        obj.bank_slot = reader.read_u8();
        _size += 1;

        obj.item2 = reader.read_u32();
        _size += 4;

        obj.mode = static_cast<BankSwapStoreMode>(reader.read_u8());
        _size += 1;

        if (obj.mode == BankSwapStoreMode::AUTOMATIC) {
            obj.auto_count = reader.read_u32();
            _size += 4;

            obj.unknown3 = reader.read_u8();
            _size += 1;

            obj.unknown4 = reader.read_u32();
            _size += 4;

        }
        else if (obj.mode == BankSwapStoreMode::MANUAL) {
            obj.player_bag = reader.read_u8();
            _size += 1;

            obj.player_bag_slot = reader.read_u8();
            _size += 1;

            obj.bank_to_character_transfer = reader.read_bool8();
            _size += 1;

            obj.split_amount = reader.read_u32();
            _size += 4;

        }
    }
    while (_size < body_size) {
        obj.unknown5.push_back(reader.read_u8());
        _size += 1;
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_BANK_SWAP_ITEMS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_BANK_SWAP_ITEMS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_BANK_SWAP_ITEMS_size(obj) + 4)); /* size */

    writer.write_u32(0x000003e9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.bank);

    writer.write_u8(static_cast<uint8_t>(obj.source));

    if (obj.source == BankSwapSource::BANK) {
        writer.write_u8(obj.bank_destination_tab);

        writer.write_u8(obj.bank_destination_slot);

        writer.write_u32(obj.unknown1);

        writer.write_u8(obj.bank_source_tab);

        writer.write_u8(obj.bank_source_slot);

        writer.write_u32(obj.item1);

        writer.write_u8(obj.unknown2);

        writer.write_u32(obj.amount);

    }
    else if (obj.source == BankSwapSource::INVENTORY) {
        writer.write_u8(obj.bank_tab);

        writer.write_u8(obj.bank_slot);

        writer.write_u32(obj.item2);

        writer.write_u8(static_cast<uint8_t>(obj.mode));

        if (obj.mode == BankSwapStoreMode::AUTOMATIC) {
            writer.write_u32(obj.auto_count);

            writer.write_u8(obj.unknown3);

            writer.write_u32(obj.unknown4);

        }
        else if (obj.mode == BankSwapStoreMode::MANUAL) {
            writer.write_u8(obj.player_bag);

            writer.write_u8(obj.player_bag_slot);

            writer.write_bool8(obj.bank_to_character_transfer);

            writer.write_u32(obj.split_amount);

        }
    }
    for (const auto& v : obj.unknown5) {
        writer.write_u8(v);
    }

    return writer.m_buf;
}

CMSG_GUILD_BANK_BUY_TAB CMSG_GUILD_BANK_BUY_TAB_read(Reader& reader) {
    CMSG_GUILD_BANK_BUY_TAB obj{};

    obj.banker = reader.read_u64();

    obj.tab = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_BANK_BUY_TAB::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x000003ea); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.banker);

    writer.write_u8(obj.tab);

    return writer.m_buf;
}

static size_t CMSG_GUILD_BANK_UPDATE_TAB_size(const CMSG_GUILD_BANK_UPDATE_TAB& obj) {
    return 11 + obj.name.size() + obj.icon.size();
}

CMSG_GUILD_BANK_UPDATE_TAB CMSG_GUILD_BANK_UPDATE_TAB_read(Reader& reader) {
    CMSG_GUILD_BANK_UPDATE_TAB obj{};

    obj.bank = reader.read_u64();

    obj.tab = reader.read_u8();

    obj.name = reader.read_cstring();

    obj.icon = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_BANK_UPDATE_TAB::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GUILD_BANK_UPDATE_TAB_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GUILD_BANK_UPDATE_TAB_size(obj) + 4)); /* size */

    writer.write_u32(0x000003eb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.bank);

    writer.write_u8(obj.tab);

    writer.write_cstring(obj.name);

    writer.write_cstring(obj.icon);

    return writer.m_buf;
}

CMSG_GUILD_BANK_DEPOSIT_MONEY CMSG_GUILD_BANK_DEPOSIT_MONEY_read(Reader& reader) {
    CMSG_GUILD_BANK_DEPOSIT_MONEY obj{};

    obj.bank = reader.read_u64();

    obj.money = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_BANK_DEPOSIT_MONEY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x000003ec); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.bank);

    writer.write_u32(obj.money);

    return writer.m_buf;
}

CMSG_GUILD_BANK_WITHDRAW_MONEY CMSG_GUILD_BANK_WITHDRAW_MONEY_read(Reader& reader) {
    CMSG_GUILD_BANK_WITHDRAW_MONEY obj{};

    obj.bank = reader.read_u64();

    obj.money = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GUILD_BANK_WITHDRAW_MONEY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x000003ed); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.bank);

    writer.write_u32(obj.money);

    return writer.m_buf;
}

MSG_GUILD_BANK_LOG_QUERY_Client MSG_GUILD_BANK_LOG_QUERY_Client_read(Reader& reader) {
    MSG_GUILD_BANK_LOG_QUERY_Client obj{};

    obj.slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_GUILD_BANK_LOG_QUERY_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x000003ee); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.slot);

    return writer.m_buf;
}

static size_t MSG_GUILD_BANK_LOG_QUERY_Server_size(const MSG_GUILD_BANK_LOG_QUERY_Server& obj) {
    return 6 + 17 * obj.money_logs.size();
}

MSG_GUILD_BANK_LOG_QUERY_Server MSG_GUILD_BANK_LOG_QUERY_Server_read(Reader& reader) {
    MSG_GUILD_BANK_LOG_QUERY_Server obj{};

    obj.unix_time = reader.read_u32();

    obj.slot = reader.read_u8();

    auto amount_of_money_logs = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_money_logs; ++i) {
        obj.money_logs.push_back(::wow_world_messages::wrath::MoneyLogItem_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_GUILD_BANK_LOG_QUERY_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_GUILD_BANK_LOG_QUERY_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_GUILD_BANK_LOG_QUERY_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x000003ee); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unix_time);

    writer.write_u8(obj.slot);

    writer.write_u8(static_cast<uint8_t>(obj.money_logs.size()));

    for (const auto& v : obj.money_logs) {
        MoneyLogItem_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_SET_CHANNEL_WATCH_size(const CMSG_SET_CHANNEL_WATCH& obj) {
    return 1 + obj.channel.size();
}

CMSG_SET_CHANNEL_WATCH CMSG_SET_CHANNEL_WATCH_read(Reader& reader) {
    CMSG_SET_CHANNEL_WATCH obj{};

    obj.channel = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_CHANNEL_WATCH::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_SET_CHANNEL_WATCH_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_SET_CHANNEL_WATCH_size(obj) + 4)); /* size */

    writer.write_u32(0x000003ef); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel);

    return writer.m_buf;
}

static size_t SMSG_USERLIST_ADD_size(const SMSG_USERLIST_ADD& obj) {
    return 15 + obj.name.size();
}

SMSG_USERLIST_ADD SMSG_USERLIST_ADD_read(Reader& reader) {
    SMSG_USERLIST_ADD obj{};

    obj.player = reader.read_u64();

    obj.player_flags = reader.read_u8();

    obj.flags = reader.read_u8();

    obj.amount_of_players = reader.read_u32();

    obj.name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_USERLIST_ADD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_USERLIST_ADD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_USERLIST_ADD_size(obj) + 2)); /* size */

    writer.write_u16(0x000003f0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_u8(obj.player_flags);

    writer.write_u8(obj.flags);

    writer.write_u32(obj.amount_of_players);

    writer.write_cstring(obj.name);

    return writer.m_buf;
}

static size_t SMSG_USERLIST_REMOVE_size(const SMSG_USERLIST_REMOVE& obj) {
    return 14 + obj.name.size();
}

SMSG_USERLIST_REMOVE SMSG_USERLIST_REMOVE_read(Reader& reader) {
    SMSG_USERLIST_REMOVE obj{};

    obj.player = reader.read_u64();

    obj.flags = reader.read_u8();

    obj.amount_of_players = reader.read_u32();

    obj.name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_USERLIST_REMOVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_USERLIST_REMOVE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_USERLIST_REMOVE_size(obj) + 2)); /* size */

    writer.write_u16(0x000003f1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_u8(obj.flags);

    writer.write_u32(obj.amount_of_players);

    writer.write_cstring(obj.name);

    return writer.m_buf;
}

static size_t SMSG_USERLIST_UPDATE_size(const SMSG_USERLIST_UPDATE& obj) {
    return 15 + obj.name.size();
}

SMSG_USERLIST_UPDATE SMSG_USERLIST_UPDATE_read(Reader& reader) {
    SMSG_USERLIST_UPDATE obj{};

    obj.player = reader.read_u64();

    obj.player_flags = reader.read_u8();

    obj.flags = reader.read_u8();

    obj.amount_of_players = reader.read_u32();

    obj.name = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_USERLIST_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_USERLIST_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_USERLIST_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x000003f2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_u8(obj.player_flags);

    writer.write_u8(obj.flags);

    writer.write_u32(obj.amount_of_players);

    writer.write_cstring(obj.name);

    return writer.m_buf;
}

static size_t CMSG_CLEAR_CHANNEL_WATCH_size(const CMSG_CLEAR_CHANNEL_WATCH& obj) {
    return 1 + obj.channel.size();
}

CMSG_CLEAR_CHANNEL_WATCH CMSG_CLEAR_CHANNEL_WATCH_read(Reader& reader) {
    CMSG_CLEAR_CHANNEL_WATCH obj{};

    obj.channel = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CLEAR_CHANNEL_WATCH::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CLEAR_CHANNEL_WATCH_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CLEAR_CHANNEL_WATCH_size(obj) + 4)); /* size */

    writer.write_u32(0x000003f3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.channel);

    return writer.m_buf;
}

static size_t SMSG_INSPECT_TALENT_size(const SMSG_INSPECT_TALENT& obj) {
    size_t _size = 7 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + 2 * obj.glyphs.size() + inspect_talent_gear_mask_size(obj.talent_gear_mask);

    for(const auto& v : obj.specs) {
        _size += InspectTalentSpec_size(v);
    }

    return _size;
}

SMSG_INSPECT_TALENT SMSG_INSPECT_TALENT_read(Reader& reader) {
    SMSG_INSPECT_TALENT obj{};

    obj.player = reader.read_packed_guid();

    obj.unspent_talent_points = reader.read_u32();

    auto amount_of_specs = reader.read_u8();

    obj.active_spec = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_specs; ++i) {
        obj.specs.push_back(::wow_world_messages::wrath::InspectTalentSpec_read(reader));
    }

    auto amount_of_glyphs = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_glyphs; ++i) {
        obj.glyphs.push_back(reader.read_u16());
    }

    obj.talent_gear_mask = wrath::inspect_talent_gear_mask_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_INSPECT_TALENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_INSPECT_TALENT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_INSPECT_TALENT_size(obj) + 2)); /* size */

    writer.write_u16(0x000003f4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    writer.write_u32(obj.unspent_talent_points);

    writer.write_u8(static_cast<uint8_t>(obj.specs.size()));

    writer.write_u8(obj.active_spec);

    for (const auto& v : obj.specs) {
        InspectTalentSpec_write(writer, v);
    }

    writer.write_u8(static_cast<uint8_t>(obj.glyphs.size()));

    for (const auto& v : obj.glyphs) {
        writer.write_u16(v);
    }

    wrath::inspect_talent_gear_mask_write(writer, obj.talent_gear_mask);

    return writer.m_buf;
}

CMSG_SPELLCLICK CMSG_SPELLCLICK_read(Reader& reader) {
    CMSG_SPELLCLICK obj{};

    obj.target = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SPELLCLICK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000003f8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.target);

    return writer.m_buf;
}

static size_t SMSG_LOOT_LIST_size(const SMSG_LOOT_LIST& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.master_looter) + ::wow_world_messages::util::wwm_packed_guid_size(obj.group_looter);
}

SMSG_LOOT_LIST SMSG_LOOT_LIST_read(Reader& reader) {
    SMSG_LOOT_LIST obj{};

    obj.creature = reader.read_u64();

    obj.master_looter = reader.read_packed_guid();

    obj.group_looter = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_LOOT_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_LOOT_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_LOOT_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x000003f9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.creature);

    writer.write_packed_guid(obj.master_looter);

    writer.write_packed_guid(obj.group_looter);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_GUILD_PERMISSIONS_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000003fd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

MSG_GUILD_PERMISSIONS_Server MSG_GUILD_PERMISSIONS_Server_read(Reader& reader) {
    MSG_GUILD_PERMISSIONS_Server obj{};

    obj.id = reader.read_u32();

    obj.rights = reader.read_u32();

    obj.gold_limit_per_day = reader.read_u32();

    obj.purchased_bank_tabs = reader.read_u8();

    for (auto i = 0; i < 6; ++i) {
        obj.bank_tabs[i] = ::wow_world_messages::wrath::BankTab_read(reader);
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_GUILD_PERMISSIONS_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x003d);

    writer.write_u16_be(static_cast<uint16_t>(0x003d + 2)); /* size */

    writer.write_u16(0x000003fd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.id);

    writer.write_u32(obj.rights);

    writer.write_u32(obj.gold_limit_per_day);

    writer.write_u8(obj.purchased_bank_tabs);

    for (const auto& v : obj.bank_tabs) {
        BankTab_write(writer, v);
    }

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_GUILD_BANK_MONEY_WITHDRAWN_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000003fe); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

MSG_GUILD_BANK_MONEY_WITHDRAWN_Server MSG_GUILD_BANK_MONEY_WITHDRAWN_Server_read(Reader& reader) {
    MSG_GUILD_BANK_MONEY_WITHDRAWN_Server obj{};

    obj.remaining_withdraw_amount = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_GUILD_BANK_MONEY_WITHDRAWN_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000003fe); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.remaining_withdraw_amount);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_GUILD_EVENT_LOG_QUERY_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000003ff); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t MSG_GUILD_EVENT_LOG_QUERY_Server_size(const MSG_GUILD_EVENT_LOG_QUERY_Server& obj) {
    size_t _size = 1;

    for(const auto& v : obj.events) {
        _size += GuildLogEvent_size(v);
    }

    return _size;
}

MSG_GUILD_EVENT_LOG_QUERY_Server MSG_GUILD_EVENT_LOG_QUERY_Server_read(Reader& reader) {
    MSG_GUILD_EVENT_LOG_QUERY_Server obj{};

    auto amount_of_events = reader.read_u8();

    for (uint8_t i = 0; i < amount_of_events; ++i) {
        obj.events.push_back(::wow_world_messages::wrath::GuildLogEvent_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_GUILD_EVENT_LOG_QUERY_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_GUILD_EVENT_LOG_QUERY_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_GUILD_EVENT_LOG_QUERY_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x000003ff); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.events.size()));

    for (const auto& v : obj.events) {
        GuildLogEvent_write(writer, v);
    }

    return writer.m_buf;
}

CMSG_GET_MIRRORIMAGE_DATA CMSG_GET_MIRRORIMAGE_DATA_read(Reader& reader) {
    CMSG_GET_MIRRORIMAGE_DATA obj{};

    obj.target = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GET_MIRRORIMAGE_DATA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000401); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.target);

    return writer.m_buf;
}

SMSG_MIRRORIMAGE_DATA SMSG_MIRRORIMAGE_DATA_read(Reader& reader) {
    SMSG_MIRRORIMAGE_DATA obj{};

    obj.guid = reader.read_u64();

    obj.display_id = reader.read_u32();

    obj.race = static_cast<Race>(reader.read_u8());

    obj.gender = static_cast<Gender>(reader.read_u8());

    obj.class_type = static_cast<Class>(reader.read_u8());

    obj.skin_color = reader.read_u8();

    obj.face = reader.read_u8();

    obj.hair_style = reader.read_u8();

    obj.hair_color = reader.read_u8();

    obj.facial_hair = reader.read_u8();

    obj.guild_id = reader.read_u32();

    for (auto i = 0; i < 11; ++i) {
        obj.display_ids[i] = reader.read_u32();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MIRRORIMAGE_DATA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0044);

    writer.write_u16_be(static_cast<uint16_t>(0x0044 + 2)); /* size */

    writer.write_u16(0x00000402); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.display_id);

    writer.write_u8(static_cast<uint8_t>(obj.race));

    writer.write_u8(static_cast<uint8_t>(obj.gender));

    writer.write_u8(static_cast<uint8_t>(obj.class_type));

    writer.write_u8(obj.skin_color);

    writer.write_u8(obj.face);

    writer.write_u8(obj.hair_style);

    writer.write_u8(obj.hair_color);

    writer.write_u8(obj.facial_hair);

    writer.write_u32(obj.guild_id);

    for (const auto& v : obj.display_ids) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_KEEP_ALIVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000407); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_OPT_OUT_OF_LOOT CMSG_OPT_OUT_OF_LOOT_read(Reader& reader) {
    CMSG_OPT_OUT_OF_LOOT obj{};

    obj.pass_on_loot = reader.read_bool32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_OPT_OUT_OF_LOOT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x00000409); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool32(obj.pass_on_loot);

    return writer.m_buf;
}

MSG_QUERY_GUILD_BANK_TEXT_Client MSG_QUERY_GUILD_BANK_TEXT_Client_read(Reader& reader) {
    MSG_QUERY_GUILD_BANK_TEXT_Client obj{};

    obj.tab = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_QUERY_GUILD_BANK_TEXT_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x0000040a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.tab);

    return writer.m_buf;
}

static size_t MSG_QUERY_GUILD_BANK_TEXT_Server_size(const MSG_QUERY_GUILD_BANK_TEXT_Server& obj) {
    return 2 + obj.text.size();
}

MSG_QUERY_GUILD_BANK_TEXT_Server MSG_QUERY_GUILD_BANK_TEXT_Server_read(Reader& reader) {
    MSG_QUERY_GUILD_BANK_TEXT_Server obj{};

    obj.tab = reader.read_u8();

    obj.text = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_QUERY_GUILD_BANK_TEXT_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_QUERY_GUILD_BANK_TEXT_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_QUERY_GUILD_BANK_TEXT_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x0000040a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.tab);

    writer.write_cstring(obj.text);

    return writer.m_buf;
}

static size_t CMSG_SET_GUILD_BANK_TEXT_size(const CMSG_SET_GUILD_BANK_TEXT& obj) {
    return 2 + obj.text.size();
}

CMSG_SET_GUILD_BANK_TEXT CMSG_SET_GUILD_BANK_TEXT_read(Reader& reader) {
    CMSG_SET_GUILD_BANK_TEXT obj{};

    obj.tab = reader.read_u8();

    obj.text = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_GUILD_BANK_TEXT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_SET_GUILD_BANK_TEXT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_SET_GUILD_BANK_TEXT_size(obj) + 4)); /* size */

    writer.write_u32(0x0000040b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.tab);

    writer.write_cstring(obj.text);

    return writer.m_buf;
}

static size_t CMSG_GRANT_LEVEL_size(const CMSG_GRANT_LEVEL& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

CMSG_GRANT_LEVEL CMSG_GRANT_LEVEL_read(Reader& reader) {
    CMSG_GRANT_LEVEL obj{};

    obj.player = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GRANT_LEVEL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_GRANT_LEVEL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_GRANT_LEVEL_size(obj) + 4)); /* size */

    writer.write_u32(0x0000040d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    return writer.m_buf;
}

SMSG_OVERRIDE_LIGHT SMSG_OVERRIDE_LIGHT_read(Reader& reader) {
    SMSG_OVERRIDE_LIGHT obj{};

    obj.default_id = reader.read_u32();

    obj.id_override = reader.read_u32();

    obj.fade_in_time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_OVERRIDE_LIGHT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x00000412); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.default_id);

    writer.write_u32(obj.id_override);

    writer.write_u32(obj.fade_in_time);

    return writer.m_buf;
}

SMSG_TOTEM_CREATED SMSG_TOTEM_CREATED_read(Reader& reader) {
    SMSG_TOTEM_CREATED obj{};

    obj.slot = reader.read_u8();

    obj.totem = reader.read_u64();

    obj.duration = reader.read_u32();

    obj.spell = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TOTEM_CREATED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0011);

    writer.write_u16_be(static_cast<uint16_t>(0x0011 + 2)); /* size */

    writer.write_u16(0x00000413); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.slot);

    writer.write_u64(obj.totem);

    writer.write_u32(obj.duration);

    writer.write_u32(obj.spell);

    return writer.m_buf;
}

CMSG_TOTEM_DESTROYED CMSG_TOTEM_DESTROYED_read(Reader& reader) {
    CMSG_TOTEM_DESTROYED obj{};

    obj.slot = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_TOTEM_DESTROYED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 4)); /* size */

    writer.write_u32(0x00000414); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.slot);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000417); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_QUESTGIVER_STATUS_MULTIPLE_size(const SMSG_QUESTGIVER_STATUS_MULTIPLE& obj) {
    return 4 + 9 * obj.statuses.size();
}

SMSG_QUESTGIVER_STATUS_MULTIPLE SMSG_QUESTGIVER_STATUS_MULTIPLE_read(Reader& reader) {
    SMSG_QUESTGIVER_STATUS_MULTIPLE obj{};

    auto amount_of_statuses = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_statuses; ++i) {
        obj.statuses.push_back(::wow_world_messages::wrath::QuestGiverStatusReport_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTGIVER_STATUS_MULTIPLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_QUESTGIVER_STATUS_MULTIPLE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_QUESTGIVER_STATUS_MULTIPLE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000418); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.statuses.size()));

    for (const auto& v : obj.statuses) {
        QuestGiverStatusReport_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_SET_PLAYER_DECLINED_NAMES_size(const CMSG_SET_PLAYER_DECLINED_NAMES& obj) {
    size_t _size = 9 + obj.name.size();

    for(const auto& v : obj.declined_names) {
        _size += v.size() + 1;
    }

    return _size;
}

CMSG_SET_PLAYER_DECLINED_NAMES CMSG_SET_PLAYER_DECLINED_NAMES_read(Reader& reader) {
    CMSG_SET_PLAYER_DECLINED_NAMES obj{};

    obj.player = reader.read_u64();

    obj.name = reader.read_cstring();

    for (auto i = 0; i < 5; ++i) {
        obj.declined_names[i] = reader.read_cstring();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_SET_PLAYER_DECLINED_NAMES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_SET_PLAYER_DECLINED_NAMES_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_SET_PLAYER_DECLINED_NAMES_size(obj) + 4)); /* size */

    writer.write_u32(0x00000419); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_cstring(obj.name);

    for (const auto& v : obj.declined_names) {
        writer.write_cstring(v);
    }

    return writer.m_buf;
}

SMSG_SET_PLAYER_DECLINED_NAMES_RESULT SMSG_SET_PLAYER_DECLINED_NAMES_RESULT_read(Reader& reader) {
    SMSG_SET_PLAYER_DECLINED_NAMES_RESULT obj{};

    obj.result = reader.read_u32();

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SET_PLAYER_DECLINED_NAMES_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x0000041a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.result);

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SEND_UNLEARN_SPELLS_size(const SMSG_SEND_UNLEARN_SPELLS& obj) {
    return 4 + 4 * obj.spells.size();
}

SMSG_SEND_UNLEARN_SPELLS SMSG_SEND_UNLEARN_SPELLS_read(Reader& reader) {
    SMSG_SEND_UNLEARN_SPELLS obj{};

    auto amount_of_spells = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_spells; ++i) {
        obj.spells.push_back(reader.read_u32());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SEND_UNLEARN_SPELLS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SEND_UNLEARN_SPELLS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SEND_UNLEARN_SPELLS_size(obj) + 2)); /* size */

    writer.write_u16(0x0000041e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.spells.size()));

    for (const auto& v : obj.spells) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

static size_t SMSG_PROPOSE_LEVEL_GRANT_size(const SMSG_PROPOSE_LEVEL_GRANT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

SMSG_PROPOSE_LEVEL_GRANT SMSG_PROPOSE_LEVEL_GRANT_read(Reader& reader) {
    SMSG_PROPOSE_LEVEL_GRANT obj{};

    obj.player = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PROPOSE_LEVEL_GRANT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PROPOSE_LEVEL_GRANT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PROPOSE_LEVEL_GRANT_size(obj) + 2)); /* size */

    writer.write_u16(0x0000041f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    return writer.m_buf;
}

static size_t CMSG_ACCEPT_LEVEL_GRANT_size(const CMSG_ACCEPT_LEVEL_GRANT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

CMSG_ACCEPT_LEVEL_GRANT CMSG_ACCEPT_LEVEL_GRANT_read(Reader& reader) {
    CMSG_ACCEPT_LEVEL_GRANT obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ACCEPT_LEVEL_GRANT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_ACCEPT_LEVEL_GRANT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_ACCEPT_LEVEL_GRANT_size(obj) + 4)); /* size */

    writer.write_u32(0x00000420); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_REFER_A_FRIEND_FAILURE_size(const SMSG_REFER_A_FRIEND_FAILURE& obj) {
    size_t _size = 4;

    if (obj.error == ReferAFriendError::NOT_IN_GROUP) {
        _size += 1 + obj.target_name.size();
    }

    return _size;
}

SMSG_REFER_A_FRIEND_FAILURE SMSG_REFER_A_FRIEND_FAILURE_read(Reader& reader) {
    SMSG_REFER_A_FRIEND_FAILURE obj{};

    obj.error = static_cast<ReferAFriendError>(reader.read_u32());

    if (obj.error == ReferAFriendError::NOT_IN_GROUP) {
        obj.target_name = reader.read_cstring();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_REFER_A_FRIEND_FAILURE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_REFER_A_FRIEND_FAILURE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_REFER_A_FRIEND_FAILURE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000421); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.error));

    if (obj.error == ReferAFriendError::NOT_IN_GROUP) {
        writer.write_cstring(obj.target_name);

    }
    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_SET_FLYING_size(const SMSG_SPLINE_MOVE_SET_FLYING& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_SET_FLYING SMSG_SPLINE_MOVE_SET_FLYING_read(Reader& reader) {
    SMSG_SPLINE_MOVE_SET_FLYING obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_SET_FLYING::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_SET_FLYING_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_SET_FLYING_size(obj) + 2)); /* size */

    writer.write_u16(0x00000422); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_UNSET_FLYING_size(const SMSG_SPLINE_MOVE_UNSET_FLYING& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_SPLINE_MOVE_UNSET_FLYING SMSG_SPLINE_MOVE_UNSET_FLYING_read(Reader& reader) {
    SMSG_SPLINE_MOVE_UNSET_FLYING obj{};

    obj.guid = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_UNSET_FLYING::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_UNSET_FLYING_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_UNSET_FLYING_size(obj) + 2)); /* size */

    writer.write_u16(0x00000423); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    return writer.m_buf;
}

CMSG_ALTER_APPEARANCE CMSG_ALTER_APPEARANCE_read(Reader& reader) {
    CMSG_ALTER_APPEARANCE obj{};

    obj.hair = reader.read_u32();

    obj.hair_color = reader.read_u32();

    obj.facial_hair = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ALTER_APPEARANCE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x00000426); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.hair);

    writer.write_u32(obj.hair_color);

    writer.write_u32(obj.facial_hair);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ENABLE_BARBER_SHOP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000427); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_BARBER_SHOP_RESULT SMSG_BARBER_SHOP_RESULT_read(Reader& reader) {
    SMSG_BARBER_SHOP_RESULT obj{};

    obj.result = static_cast<BarberShopResult>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BARBER_SHOP_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000428); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.result));

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_GET_CALENDAR::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000429); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_CALENDAR_GET_EVENT CMSG_CALENDAR_GET_EVENT_read(Reader& reader) {
    CMSG_CALENDAR_GET_EVENT obj{};

    obj.event = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_GET_EVENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000042a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event);

    return writer.m_buf;
}

CMSG_CALENDAR_GUILD_FILTER CMSG_CALENDAR_GUILD_FILTER_read(Reader& reader) {
    CMSG_CALENDAR_GUILD_FILTER obj{};

    obj.minimum_level = reader.read_u32();

    obj.maximum_level = reader.read_u32();

    obj.minimum_rank = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_GUILD_FILTER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 4)); /* size */

    writer.write_u32(0x0000042b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.minimum_level);

    writer.write_u32(obj.maximum_level);

    writer.write_u32(obj.minimum_rank);

    return writer.m_buf;
}

CMSG_CALENDAR_ARENA_TEAM CMSG_CALENDAR_ARENA_TEAM_read(Reader& reader) {
    CMSG_CALENDAR_ARENA_TEAM obj{};

    obj.arena_team = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_ARENA_TEAM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000042c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.arena_team);

    return writer.m_buf;
}

static size_t CMSG_CALENDAR_ADD_EVENT_size(const CMSG_CALENDAR_ADD_EVENT& obj) {
    size_t _size = 28 + obj.title.size() + obj.description.size();

    for(const auto& v : obj.invitees) {
        _size += CalendarInvitee_size(v);
    }

    return _size;
}

CMSG_CALENDAR_ADD_EVENT CMSG_CALENDAR_ADD_EVENT_read(Reader& reader) {
    CMSG_CALENDAR_ADD_EVENT obj{};

    obj.title = reader.read_cstring();

    obj.description = reader.read_cstring();

    obj.event_type = reader.read_u8();

    obj.repeatable = reader.read_bool8();

    obj.maximum_invites = reader.read_u32();

    obj.dungeon_id = reader.read_u32();

    obj.event_time = reader.read_u32();

    obj.time_zone_time = reader.read_u32();

    obj.flags = reader.read_u32();

    auto amount_of_invitees = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_invitees; ++i) {
        obj.invitees.push_back(::wow_world_messages::wrath::CalendarInvitee_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_ADD_EVENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CALENDAR_ADD_EVENT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CALENDAR_ADD_EVENT_size(obj) + 4)); /* size */

    writer.write_u32(0x0000042d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.title);

    writer.write_cstring(obj.description);

    writer.write_u8(obj.event_type);

    writer.write_bool8(obj.repeatable);

    writer.write_u32(obj.maximum_invites);

    writer.write_u32(obj.dungeon_id);

    writer.write_u32(obj.event_time);

    writer.write_u32(obj.time_zone_time);

    writer.write_u32(obj.flags);

    writer.write_u32(static_cast<uint32_t>(obj.invitees.size()));

    for (const auto& v : obj.invitees) {
        CalendarInvitee_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_CALENDAR_UPDATE_EVENT_size(const CMSG_CALENDAR_UPDATE_EVENT& obj) {
    return 40 + obj.title.size() + obj.description.size();
}

CMSG_CALENDAR_UPDATE_EVENT CMSG_CALENDAR_UPDATE_EVENT_read(Reader& reader) {
    CMSG_CALENDAR_UPDATE_EVENT obj{};

    obj.event = reader.read_u64();

    obj.invite_id = reader.read_u64();

    obj.title = reader.read_cstring();

    obj.description = reader.read_cstring();

    obj.event_type = reader.read_u8();

    obj.repeatable = reader.read_bool8();

    obj.maximum_invites = reader.read_u32();

    obj.dungeon_id = reader.read_u32();

    obj.event_time = reader.read_u32();

    obj.time_zone_time = reader.read_u32();

    obj.flags = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_UPDATE_EVENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CALENDAR_UPDATE_EVENT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CALENDAR_UPDATE_EVENT_size(obj) + 4)); /* size */

    writer.write_u32(0x0000042e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event);

    writer.write_u64(obj.invite_id);

    writer.write_cstring(obj.title);

    writer.write_cstring(obj.description);

    writer.write_u8(obj.event_type);

    writer.write_bool8(obj.repeatable);

    writer.write_u32(obj.maximum_invites);

    writer.write_u32(obj.dungeon_id);

    writer.write_u32(obj.event_time);

    writer.write_u32(obj.time_zone_time);

    writer.write_u32(obj.flags);

    return writer.m_buf;
}

CMSG_CALENDAR_REMOVE_EVENT CMSG_CALENDAR_REMOVE_EVENT_read(Reader& reader) {
    CMSG_CALENDAR_REMOVE_EVENT obj{};

    obj.event = reader.read_u64();

    obj.invite_id = reader.read_u64();

    obj.flags = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_REMOVE_EVENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 4)); /* size */

    writer.write_u32(0x0000042f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event);

    writer.write_u64(obj.invite_id);

    writer.write_u32(obj.flags);

    return writer.m_buf;
}

CMSG_CALENDAR_COPY_EVENT CMSG_CALENDAR_COPY_EVENT_read(Reader& reader) {
    CMSG_CALENDAR_COPY_EVENT obj{};

    obj.event = reader.read_u64();

    obj.invite_id = reader.read_u64();

    obj.time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_COPY_EVENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 4)); /* size */

    writer.write_u32(0x00000430); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event);

    writer.write_u64(obj.invite_id);

    writer.write_u32(obj.time);

    return writer.m_buf;
}

static size_t CMSG_CALENDAR_EVENT_INVITE_size(const CMSG_CALENDAR_EVENT_INVITE& obj) {
    return 19 + obj.name.size();
}

CMSG_CALENDAR_EVENT_INVITE CMSG_CALENDAR_EVENT_INVITE_read(Reader& reader) {
    CMSG_CALENDAR_EVENT_INVITE obj{};

    obj.event = reader.read_u64();

    obj.invite_id = reader.read_u64();

    obj.name = reader.read_cstring();

    obj.pre_event = reader.read_bool8();

    obj.guild_event = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_EVENT_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CALENDAR_EVENT_INVITE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CALENDAR_EVENT_INVITE_size(obj) + 4)); /* size */

    writer.write_u32(0x00000431); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event);

    writer.write_u64(obj.invite_id);

    writer.write_cstring(obj.name);

    writer.write_bool8(obj.pre_event);

    writer.write_bool8(obj.guild_event);

    return writer.m_buf;
}

CMSG_CALENDAR_EVENT_RSVP CMSG_CALENDAR_EVENT_RSVP_read(Reader& reader) {
    CMSG_CALENDAR_EVENT_RSVP obj{};

    obj.event = reader.read_u64();

    obj.invite_id = reader.read_u64();

    obj.status = static_cast<CalendarStatus>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_EVENT_RSVP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 4)); /* size */

    writer.write_u32(0x00000432); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event);

    writer.write_u64(obj.invite_id);

    writer.write_u32(static_cast<uint32_t>(obj.status));

    return writer.m_buf;
}

CMSG_CALENDAR_EVENT_REMOVE_INVITE CMSG_CALENDAR_EVENT_REMOVE_INVITE_read(Reader& reader) {
    CMSG_CALENDAR_EVENT_REMOVE_INVITE obj{};

    obj.event = reader.read_u64();

    obj.sender_invite_id = reader.read_u64();

    obj.invite_id = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_EVENT_REMOVE_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0018);

    writer.write_u16_be(static_cast<uint16_t>(0x0018 + 4)); /* size */

    writer.write_u32(0x00000433); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event);

    writer.write_u64(obj.sender_invite_id);

    writer.write_u64(obj.invite_id);

    return writer.m_buf;
}

CMSG_CALENDAR_EVENT_STATUS CMSG_CALENDAR_EVENT_STATUS_read(Reader& reader) {
    CMSG_CALENDAR_EVENT_STATUS obj{};

    obj.event = reader.read_u64();

    obj.invite_id = reader.read_u64();

    obj.sender_invite_id = reader.read_u64();

    obj.status = static_cast<CalendarStatus>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_EVENT_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0019);

    writer.write_u16_be(static_cast<uint16_t>(0x0019 + 4)); /* size */

    writer.write_u32(0x00000434); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event);

    writer.write_u64(obj.invite_id);

    writer.write_u64(obj.sender_invite_id);

    writer.write_u8(static_cast<uint8_t>(obj.status));

    return writer.m_buf;
}

CMSG_CALENDAR_EVENT_MODERATOR_STATUS CMSG_CALENDAR_EVENT_MODERATOR_STATUS_read(Reader& reader) {
    CMSG_CALENDAR_EVENT_MODERATOR_STATUS obj{};

    obj.event = reader.read_u64();

    obj.invite_id = reader.read_u64();

    obj.sender_invite_id = reader.read_u64();

    obj.rank = static_cast<CalendarModeratorRank>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_EVENT_MODERATOR_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0019);

    writer.write_u16_be(static_cast<uint16_t>(0x0019 + 4)); /* size */

    writer.write_u32(0x00000435); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event);

    writer.write_u64(obj.invite_id);

    writer.write_u64(obj.sender_invite_id);

    writer.write_u8(static_cast<uint8_t>(obj.rank));

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_SEND_CALENDAR_size(const SMSG_CALENDAR_SEND_CALENDAR& obj) {
    size_t _size = 32 + 20 * obj.instances.size() + 12 * obj.reset_times.size();

    for(const auto& v : obj.invites) {
        _size += SendCalendarInvite_size(v);
    }

    for(const auto& v : obj.events) {
        _size += SendCalendarEvent_size(v);
    }

    for(const auto& v : obj.holidays) {
        _size += SendCalendarHoliday_size(v);
    }

    return _size;
}

SMSG_CALENDAR_SEND_CALENDAR SMSG_CALENDAR_SEND_CALENDAR_read(Reader& reader) {
    SMSG_CALENDAR_SEND_CALENDAR obj{};

    auto amount_of_invites = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_invites; ++i) {
        obj.invites.push_back(::wow_world_messages::wrath::SendCalendarInvite_read(reader));
    }

    auto amount_of_events = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_events; ++i) {
        obj.events.push_back(::wow_world_messages::wrath::SendCalendarEvent_read(reader));
    }

    obj.current_time = reader.read_u32();

    obj.zone_time = reader.read_u32();

    auto amount_of_instances = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_instances; ++i) {
        obj.instances.push_back(::wow_world_messages::wrath::SendCalendarInstance_read(reader));
    }

    obj.relative_time = reader.read_u32();

    auto amount_of_reset_times = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_reset_times; ++i) {
        obj.reset_times.push_back(::wow_world_messages::wrath::SendCalendarResetTime_read(reader));
    }

    auto amount_of_holidays = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_holidays; ++i) {
        obj.holidays.push_back(::wow_world_messages::wrath::SendCalendarHoliday_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_SEND_CALENDAR::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_SEND_CALENDAR_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_SEND_CALENDAR_size(obj) + 2)); /* size */

    writer.write_u16(0x00000436); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.invites.size()));

    for (const auto& v : obj.invites) {
        SendCalendarInvite_write(writer, v);
    }

    writer.write_u32(static_cast<uint32_t>(obj.events.size()));

    for (const auto& v : obj.events) {
        SendCalendarEvent_write(writer, v);
    }

    writer.write_u32(obj.current_time);

    writer.write_u32(obj.zone_time);

    writer.write_u32(static_cast<uint32_t>(obj.instances.size()));

    for (const auto& v : obj.instances) {
        SendCalendarInstance_write(writer, v);
    }

    writer.write_u32(obj.relative_time);

    writer.write_u32(static_cast<uint32_t>(obj.reset_times.size()));

    for (const auto& v : obj.reset_times) {
        SendCalendarResetTime_write(writer, v);
    }

    writer.write_u32(static_cast<uint32_t>(obj.holidays.size()));

    for (const auto& v : obj.holidays) {
        SendCalendarHoliday_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_SEND_EVENT_size(const SMSG_CALENDAR_SEND_EVENT& obj) {
    size_t _size = 41 + ::wow_world_messages::util::wwm_packed_guid_size(obj.creator) + obj.title.size() + obj.description.size();

    for(const auto& v : obj.invitees) {
        _size += CalendarSendInvitee_size(v);
    }

    return _size;
}

SMSG_CALENDAR_SEND_EVENT SMSG_CALENDAR_SEND_EVENT_read(Reader& reader) {
    SMSG_CALENDAR_SEND_EVENT obj{};

    obj.send_type = reader.read_u8();

    obj.creator = reader.read_packed_guid();

    obj.event_id = reader.read_u64();

    obj.title = reader.read_cstring();

    obj.description = reader.read_cstring();

    obj.event_type = reader.read_u8();

    obj.repeatable = reader.read_u8();

    obj.max_invitees = reader.read_u32();

    obj.dungeon_id = reader.read_u32();

    obj.flags = reader.read_u32();

    obj.event_time = reader.read_u32();

    obj.time_zone_time = reader.read_u32();

    obj.guild_id = reader.read_u32();

    auto amount_of_invitees = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_invitees; ++i) {
        obj.invitees.push_back(::wow_world_messages::wrath::CalendarSendInvitee_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_SEND_EVENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_SEND_EVENT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_SEND_EVENT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000437); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.send_type);

    writer.write_packed_guid(obj.creator);

    writer.write_u64(obj.event_id);

    writer.write_cstring(obj.title);

    writer.write_cstring(obj.description);

    writer.write_u8(obj.event_type);

    writer.write_u8(obj.repeatable);

    writer.write_u32(obj.max_invitees);

    writer.write_u32(obj.dungeon_id);

    writer.write_u32(obj.flags);

    writer.write_u32(obj.event_time);

    writer.write_u32(obj.time_zone_time);

    writer.write_u32(obj.guild_id);

    writer.write_u32(static_cast<uint32_t>(obj.invitees.size()));

    for (const auto& v : obj.invitees) {
        CalendarSendInvitee_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_FILTER_GUILD_size(const SMSG_CALENDAR_FILTER_GUILD& obj) {
    size_t _size = 4;

    for(const auto& v : obj.members) {
        _size += CalendarMember_size(v);
    }

    return _size;
}

SMSG_CALENDAR_FILTER_GUILD SMSG_CALENDAR_FILTER_GUILD_read(Reader& reader) {
    SMSG_CALENDAR_FILTER_GUILD obj{};

    auto amount_of_members = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_members; ++i) {
        obj.members.push_back(::wow_world_messages::wrath::CalendarMember_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_FILTER_GUILD::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_FILTER_GUILD_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_FILTER_GUILD_size(obj) + 2)); /* size */

    writer.write_u16(0x00000438); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.members.size()));

    for (const auto& v : obj.members) {
        CalendarMember_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_ARENA_TEAM_size(const SMSG_CALENDAR_ARENA_TEAM& obj) {
    size_t _size = 4;

    for(const auto& v : obj.members) {
        _size += CalendarMember_size(v);
    }

    return _size;
}

SMSG_CALENDAR_ARENA_TEAM SMSG_CALENDAR_ARENA_TEAM_read(Reader& reader) {
    SMSG_CALENDAR_ARENA_TEAM obj{};

    auto amount_of_members = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_members; ++i) {
        obj.members.push_back(::wow_world_messages::wrath::CalendarMember_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_ARENA_TEAM::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_ARENA_TEAM_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_ARENA_TEAM_size(obj) + 2)); /* size */

    writer.write_u16(0x00000439); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.members.size()));

    for (const auto& v : obj.members) {
        CalendarMember_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_EVENT_INVITE_size(const SMSG_CALENDAR_EVENT_INVITE& obj) {
    size_t _size = 20 + ::wow_world_messages::util::wwm_packed_guid_size(obj.invitee);

    if (obj.time == CalendarStatusTime::PRESENT) {
        _size += 4;
    }

    return _size;
}

SMSG_CALENDAR_EVENT_INVITE SMSG_CALENDAR_EVENT_INVITE_read(Reader& reader) {
    SMSG_CALENDAR_EVENT_INVITE obj{};

    obj.invitee = reader.read_packed_guid();

    obj.event_id = reader.read_u64();

    obj.invite_id = reader.read_u64();

    obj.level = reader.read_u8();

    obj.invite_status = reader.read_u8();

    obj.time = static_cast<CalendarStatusTime>(reader.read_u8());

    if (obj.time == CalendarStatusTime::PRESENT) {
        obj.status_time = reader.read_u32();

    }
    obj.is_sign_up = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_EVENT_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_EVENT_INVITE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_EVENT_INVITE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000043a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.invitee);

    writer.write_u64(obj.event_id);

    writer.write_u64(obj.invite_id);

    writer.write_u8(obj.level);

    writer.write_u8(obj.invite_status);

    writer.write_u8(static_cast<uint8_t>(obj.time));

    if (obj.time == CalendarStatusTime::PRESENT) {
        writer.write_u32(obj.status_time);

    }
    writer.write_bool8(obj.is_sign_up);

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_EVENT_INVITE_REMOVED_size(const SMSG_CALENDAR_EVENT_INVITE_REMOVED& obj) {
    return 13 + ::wow_world_messages::util::wwm_packed_guid_size(obj.invitee);
}

SMSG_CALENDAR_EVENT_INVITE_REMOVED SMSG_CALENDAR_EVENT_INVITE_REMOVED_read(Reader& reader) {
    SMSG_CALENDAR_EVENT_INVITE_REMOVED obj{};

    obj.invitee = reader.read_packed_guid();

    obj.event_id = reader.read_u64();

    obj.flags = reader.read_u32();

    obj.show_alert = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_EVENT_INVITE_REMOVED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_EVENT_INVITE_REMOVED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_EVENT_INVITE_REMOVED_size(obj) + 2)); /* size */

    writer.write_u16(0x0000043b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.invitee);

    writer.write_u64(obj.event_id);

    writer.write_u32(obj.flags);

    writer.write_bool8(obj.show_alert);

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_EVENT_STATUS_size(const SMSG_CALENDAR_EVENT_STATUS& obj) {
    return 22 + ::wow_world_messages::util::wwm_packed_guid_size(obj.invitee);
}

SMSG_CALENDAR_EVENT_STATUS SMSG_CALENDAR_EVENT_STATUS_read(Reader& reader) {
    SMSG_CALENDAR_EVENT_STATUS obj{};

    obj.invitee = reader.read_packed_guid();

    obj.event_id = reader.read_u64();

    obj.event_time = reader.read_u32();

    obj.flags = reader.read_u32();

    obj.status = reader.read_u8();

    obj.rank = reader.read_u8();

    obj.status_time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_EVENT_STATUS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_EVENT_STATUS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_EVENT_STATUS_size(obj) + 2)); /* size */

    writer.write_u16(0x0000043c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.invitee);

    writer.write_u64(obj.event_id);

    writer.write_u32(obj.event_time);

    writer.write_u32(obj.flags);

    writer.write_u8(obj.status);

    writer.write_u8(obj.rank);

    writer.write_u32(obj.status_time);

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_COMMAND_RESULT_size(const SMSG_CALENDAR_COMMAND_RESULT& obj) {
    return 10 + obj.name.size();
}

SMSG_CALENDAR_COMMAND_RESULT SMSG_CALENDAR_COMMAND_RESULT_read(Reader& reader) {
    SMSG_CALENDAR_COMMAND_RESULT obj{};

    obj.unknown1 = reader.read_u32();

    obj.unknown2 = reader.read_u8();

    obj.name = reader.read_cstring();

    obj.result = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_COMMAND_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_COMMAND_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_COMMAND_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x0000043d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown1);

    writer.write_u8(obj.unknown2);

    writer.write_cstring(obj.name);

    writer.write_u32(obj.result);

    return writer.m_buf;
}

SMSG_CALENDAR_RAID_LOCKOUT_ADDED SMSG_CALENDAR_RAID_LOCKOUT_ADDED_read(Reader& reader) {
    SMSG_CALENDAR_RAID_LOCKOUT_ADDED obj{};

    obj.time = reader.read_u32();

    obj.map = static_cast<Map>(reader.read_u32());

    obj.difficulty = reader.read_u32();

    obj.remaining_time = reader.read_u32();

    obj.instance_id = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_RAID_LOCKOUT_ADDED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0018);

    writer.write_u16_be(static_cast<uint16_t>(0x0018 + 2)); /* size */

    writer.write_u16(0x0000043e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.time);

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(obj.difficulty);

    writer.write_u32(obj.remaining_time);

    writer.write_u64(obj.instance_id);

    return writer.m_buf;
}

SMSG_CALENDAR_RAID_LOCKOUT_REMOVED SMSG_CALENDAR_RAID_LOCKOUT_REMOVED_read(Reader& reader) {
    SMSG_CALENDAR_RAID_LOCKOUT_REMOVED obj{};

    obj.map = static_cast<Map>(reader.read_u32());

    obj.difficulty = reader.read_u32();

    obj.remaining_time = reader.read_u32();

    obj.instance_id = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_RAID_LOCKOUT_REMOVED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 2)); /* size */

    writer.write_u16(0x0000043f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(obj.difficulty);

    writer.write_u32(obj.remaining_time);

    writer.write_u64(obj.instance_id);

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_EVENT_INVITE_ALERT_size(const SMSG_CALENDAR_EVENT_INVITE_ALERT& obj) {
    return 35 + obj.title.size() + ::wow_world_messages::util::wwm_packed_guid_size(obj.event_creator) + ::wow_world_messages::util::wwm_packed_guid_size(obj.invite_sender);
}

SMSG_CALENDAR_EVENT_INVITE_ALERT SMSG_CALENDAR_EVENT_INVITE_ALERT_read(Reader& reader) {
    SMSG_CALENDAR_EVENT_INVITE_ALERT obj{};

    obj.event_id = reader.read_u64();

    obj.title = reader.read_cstring();

    obj.event_time = reader.read_u32();

    obj.flags = reader.read_u32();

    obj.event_type = reader.read_u32();

    obj.dungeon_id = reader.read_u32();

    obj.invite_id = reader.read_u64();

    obj.status = reader.read_u8();

    obj.rank = reader.read_u8();

    obj.event_creator = reader.read_packed_guid();

    obj.invite_sender = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_EVENT_INVITE_ALERT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_EVENT_INVITE_ALERT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_EVENT_INVITE_ALERT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000440); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event_id);

    writer.write_cstring(obj.title);

    writer.write_u32(obj.event_time);

    writer.write_u32(obj.flags);

    writer.write_u32(obj.event_type);

    writer.write_u32(obj.dungeon_id);

    writer.write_u64(obj.invite_id);

    writer.write_u8(obj.status);

    writer.write_u8(obj.rank);

    writer.write_packed_guid(obj.event_creator);

    writer.write_packed_guid(obj.invite_sender);

    return writer.m_buf;
}

SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT_read(Reader& reader) {
    SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT obj{};

    obj.event_id = reader.read_u64();

    obj.event_time = reader.read_u32();

    obj.flags = reader.read_u32();

    obj.status = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0011);

    writer.write_u16_be(static_cast<uint16_t>(0x0011 + 2)); /* size */

    writer.write_u16(0x00000441); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event_id);

    writer.write_u32(obj.event_time);

    writer.write_u32(obj.flags);

    writer.write_u8(obj.status);

    return writer.m_buf;
}

SMSG_CALENDAR_EVENT_REMOVED_ALERT SMSG_CALENDAR_EVENT_REMOVED_ALERT_read(Reader& reader) {
    SMSG_CALENDAR_EVENT_REMOVED_ALERT obj{};

    obj.show_alert = reader.read_bool8();

    obj.event_id = reader.read_u64();

    obj.event_time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_EVENT_REMOVED_ALERT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000d);

    writer.write_u16_be(static_cast<uint16_t>(0x000d + 2)); /* size */

    writer.write_u16(0x00000443); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.show_alert);

    writer.write_u64(obj.event_id);

    writer.write_u32(obj.event_time);

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_EVENT_UPDATED_ALERT_size(const SMSG_CALENDAR_EVENT_UPDATED_ALERT& obj) {
    return 37 + obj.title.size() + obj.description.size();
}

SMSG_CALENDAR_EVENT_UPDATED_ALERT SMSG_CALENDAR_EVENT_UPDATED_ALERT_read(Reader& reader) {
    SMSG_CALENDAR_EVENT_UPDATED_ALERT obj{};

    obj.show_alert = reader.read_bool8();

    obj.event_id = reader.read_u64();

    obj.old_event_time = reader.read_u32();

    obj.flags = reader.read_u32();

    obj.new_event_time = reader.read_u32();

    obj.event_type = reader.read_u8();

    obj.dungeon_id = reader.read_u32();

    obj.title = reader.read_cstring();

    obj.description = reader.read_cstring();

    obj.repeatable = reader.read_u8();

    obj.max_invitees = reader.read_u32();

    obj.unknown_time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_EVENT_UPDATED_ALERT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_EVENT_UPDATED_ALERT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_EVENT_UPDATED_ALERT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000444); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.show_alert);

    writer.write_u64(obj.event_id);

    writer.write_u32(obj.old_event_time);

    writer.write_u32(obj.flags);

    writer.write_u32(obj.new_event_time);

    writer.write_u8(obj.event_type);

    writer.write_u32(obj.dungeon_id);

    writer.write_cstring(obj.title);

    writer.write_cstring(obj.description);

    writer.write_u8(obj.repeatable);

    writer.write_u32(obj.max_invitees);

    writer.write_u32(obj.unknown_time);

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT_size(const SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT& obj) {
    return 10 + ::wow_world_messages::util::wwm_packed_guid_size(obj.invitee);
}

SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT_read(Reader& reader) {
    SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT obj{};

    obj.invitee = reader.read_packed_guid();

    obj.event_id = reader.read_u64();

    obj.rank = reader.read_u8();

    obj.show_alert = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000445); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.invitee);

    writer.write_u64(obj.event_id);

    writer.write_u8(obj.rank);

    writer.write_bool8(obj.show_alert);

    return writer.m_buf;
}

CMSG_CALENDAR_COMPLAIN CMSG_CALENDAR_COMPLAIN_read(Reader& reader) {
    CMSG_CALENDAR_COMPLAIN obj{};

    obj.responsible_player = reader.read_u64();

    obj.event = reader.read_u64();

    obj.invite_id = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_COMPLAIN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0018);

    writer.write_u16_be(static_cast<uint16_t>(0x0018 + 4)); /* size */

    writer.write_u32(0x00000446); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.responsible_player);

    writer.write_u64(obj.event);

    writer.write_u64(obj.invite_id);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_GET_NUM_PENDING::write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000447); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_GET_NUM_PENDING::write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000447); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_CALENDAR_SEND_NUM_PENDING SMSG_CALENDAR_SEND_NUM_PENDING_read(Reader& reader) {
    SMSG_CALENDAR_SEND_NUM_PENDING obj{};

    obj.pending_events = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_SEND_NUM_PENDING::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000448); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.pending_events);

    return writer.m_buf;
}

static size_t MSG_MOVE_SET_PITCH_RATE_Server_size(const MSG_MOVE_SET_PITCH_RATE_Server& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

MSG_MOVE_SET_PITCH_RATE_Server MSG_MOVE_SET_PITCH_RATE_Server_read(Reader& reader) {
    MSG_MOVE_SET_PITCH_RATE_Server obj{};

    obj.player = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_SET_PITCH_RATE_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_SET_PITCH_RATE_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_SET_PITCH_RATE_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x0000045b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_speed);

    return writer.m_buf;
}

static size_t SMSG_FORCE_PITCH_RATE_CHANGE_size(const SMSG_FORCE_PITCH_RATE_CHANGE& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid);
}

SMSG_FORCE_PITCH_RATE_CHANGE SMSG_FORCE_PITCH_RATE_CHANGE_read(Reader& reader) {
    SMSG_FORCE_PITCH_RATE_CHANGE obj{};

    obj.guid = reader.read_packed_guid();

    obj.move_event = reader.read_u32();

    obj.speed = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_FORCE_PITCH_RATE_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_FORCE_PITCH_RATE_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_FORCE_PITCH_RATE_CHANGE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000045c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.move_event);

    writer.write_float(obj.speed);

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_EVENT_INVITE_NOTES_size(const SMSG_CALENDAR_EVENT_INVITE_NOTES& obj) {
    return 10 + ::wow_world_messages::util::wwm_packed_guid_size(obj.invitee) + obj.text.size();
}

SMSG_CALENDAR_EVENT_INVITE_NOTES SMSG_CALENDAR_EVENT_INVITE_NOTES_read(Reader& reader) {
    SMSG_CALENDAR_EVENT_INVITE_NOTES obj{};

    obj.invitee = reader.read_packed_guid();

    obj.invite_id = reader.read_u64();

    obj.text = reader.read_cstring();

    obj.unknown = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_EVENT_INVITE_NOTES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_EVENT_INVITE_NOTES_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_EVENT_INVITE_NOTES_size(obj) + 2)); /* size */

    writer.write_u16(0x00000460); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.invitee);

    writer.write_u64(obj.invite_id);

    writer.write_cstring(obj.text);

    writer.write_bool8(obj.unknown);

    return writer.m_buf;
}

static size_t SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT_size(const SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT& obj) {
    return 9 + obj.text.size();
}

SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT_read(Reader& reader) {
    SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT obj{};

    obj.invite_id = reader.read_u64();

    obj.text = reader.read_cstring();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000461); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.invite_id);

    writer.write_cstring(obj.text);

    return writer.m_buf;
}

CMSG_UPDATE_MISSILE_TRAJECTORY CMSG_UPDATE_MISSILE_TRAJECTORY_read(Reader& reader) {
    CMSG_UPDATE_MISSILE_TRAJECTORY obj{};

    obj.guid = reader.read_u64();

    obj.spell = reader.read_u32();

    obj.elevation = reader.read_float();

    obj.speed = reader.read_float();

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    obj.target = ::wow_world_messages::all::Vector3d_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_UPDATE_MISSILE_TRAJECTORY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x002c);

    writer.write_u16_be(static_cast<uint16_t>(0x002c + 4)); /* size */

    writer.write_u32(0x00000462); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_u32(obj.spell);

    writer.write_float(obj.elevation);

    writer.write_float(obj.speed);

    Vector3d_write(writer, obj.position);

    Vector3d_write(writer, obj.target);

    return writer.m_buf;
}

SMSG_UPDATE_ACCOUNT_DATA_COMPLETE SMSG_UPDATE_ACCOUNT_DATA_COMPLETE_read(Reader& reader) {
    SMSG_UPDATE_ACCOUNT_DATA_COMPLETE obj{};

    obj.data_type = reader.read_u32();

    obj.unknown1 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_UPDATE_ACCOUNT_DATA_COMPLETE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x00000463); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.data_type);

    writer.write_u32(obj.unknown1);

    return writer.m_buf;
}

SMSG_TRIGGER_MOVIE SMSG_TRIGGER_MOVIE_read(Reader& reader) {
    SMSG_TRIGGER_MOVIE obj{};

    obj.movie_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TRIGGER_MOVIE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000464); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.movie_id);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_COMPLETE_MOVIE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000465); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_ACHIEVEMENT_EARNED_size(const SMSG_ACHIEVEMENT_EARNED& obj) {
    return 12 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

SMSG_ACHIEVEMENT_EARNED SMSG_ACHIEVEMENT_EARNED_read(Reader& reader) {
    SMSG_ACHIEVEMENT_EARNED obj{};

    obj.player = reader.read_packed_guid();

    obj.achievement = reader.read_u32();

    obj.earn_time = reader.read_u32();

    obj.unknown = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ACHIEVEMENT_EARNED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ACHIEVEMENT_EARNED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ACHIEVEMENT_EARNED_size(obj) + 2)); /* size */

    writer.write_u16(0x00000468); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    writer.write_u32(obj.achievement);

    writer.write_u32(obj.earn_time);

    writer.write_u32(obj.unknown);

    return writer.m_buf;
}

static size_t SMSG_CRITERIA_UPDATE_size(const SMSG_CRITERIA_UPDATE& obj) {
    return 20 + ::wow_world_messages::util::wwm_packed_guid_size(obj.progress_counter) + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

SMSG_CRITERIA_UPDATE SMSG_CRITERIA_UPDATE_read(Reader& reader) {
    SMSG_CRITERIA_UPDATE obj{};

    obj.achievement = reader.read_u32();

    obj.progress_counter = reader.read_packed_guid();

    obj.player = reader.read_packed_guid();

    obj.flags = reader.read_u32();

    obj.time = reader.read_u32();

    obj.time_elapsed = reader.read_u32();

    obj.unknown = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CRITERIA_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CRITERIA_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CRITERIA_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x0000046a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.achievement);

    writer.write_packed_guid(obj.progress_counter);

    writer.write_packed_guid(obj.player);

    writer.write_u32(obj.flags);

    writer.write_u32(obj.time);

    writer.write_u32(obj.time_elapsed);

    writer.write_u32(obj.unknown);

    return writer.m_buf;
}

static size_t CMSG_QUERY_INSPECT_ACHIEVEMENTS_size(const CMSG_QUERY_INSPECT_ACHIEVEMENTS& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

CMSG_QUERY_INSPECT_ACHIEVEMENTS CMSG_QUERY_INSPECT_ACHIEVEMENTS_read(Reader& reader) {
    CMSG_QUERY_INSPECT_ACHIEVEMENTS obj{};

    obj.player = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUERY_INSPECT_ACHIEVEMENTS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_QUERY_INSPECT_ACHIEVEMENTS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_QUERY_INSPECT_ACHIEVEMENTS_size(obj) + 4)); /* size */

    writer.write_u32(0x0000046b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    return writer.m_buf;
}

static size_t SMSG_RESPOND_INSPECT_ACHIEVEMENTS_size(const SMSG_RESPOND_INSPECT_ACHIEVEMENTS& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + achievement_done_array_size(obj.done) + achievement_in_progress_array_size(obj.in_progress);
}

SMSG_RESPOND_INSPECT_ACHIEVEMENTS SMSG_RESPOND_INSPECT_ACHIEVEMENTS_read(Reader& reader) {
    SMSG_RESPOND_INSPECT_ACHIEVEMENTS obj{};

    obj.player = reader.read_packed_guid();

    obj.done = wrath::achievement_done_array_read(reader);

    obj.in_progress = wrath::achievement_in_progress_array_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_RESPOND_INSPECT_ACHIEVEMENTS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_RESPOND_INSPECT_ACHIEVEMENTS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_RESPOND_INSPECT_ACHIEVEMENTS_size(obj) + 2)); /* size */

    writer.write_u16(0x0000046c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    wrath::achievement_done_array_write(writer, obj.done);

    wrath::achievement_in_progress_array_write(writer, obj.in_progress);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_DISMISS_CONTROLLED_VEHICLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000046d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_QUESTUPDATE_ADD_PVP_KILL SMSG_QUESTUPDATE_ADD_PVP_KILL_read(Reader& reader) {
    SMSG_QUESTUPDATE_ADD_PVP_KILL obj{};

    obj.quest_id = reader.read_u32();

    obj.count = reader.read_u32();

    obj.players_slain = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUESTUPDATE_ADD_PVP_KILL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x0000046f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.quest_id);

    writer.write_u32(obj.count);

    writer.write_u32(obj.players_slain);

    return writer.m_buf;
}

SMSG_CALENDAR_RAID_LOCKOUT_UPDATED SMSG_CALENDAR_RAID_LOCKOUT_UPDATED_read(Reader& reader) {
    SMSG_CALENDAR_RAID_LOCKOUT_UPDATED obj{};

    obj.current_time = reader.read_u32();

    obj.map = static_cast<Map>(reader.read_u32());

    obj.difficulty = reader.read_u32();

    obj.old_time_to_update = reader.read_u32();

    obj.new_time_to_update = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_RAID_LOCKOUT_UPDATED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 2)); /* size */

    writer.write_u16(0x00000471); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.current_time);

    writer.write_u32(static_cast<uint32_t>(obj.map));

    writer.write_u32(obj.difficulty);

    writer.write_u32(obj.old_time_to_update);

    writer.write_u32(obj.new_time_to_update);

    return writer.m_buf;
}

static size_t CMSG_CHAR_CUSTOMIZE_size(const CMSG_CHAR_CUSTOMIZE& obj) {
    return 15 + obj.new_name.size();
}

CMSG_CHAR_CUSTOMIZE CMSG_CHAR_CUSTOMIZE_read(Reader& reader) {
    CMSG_CHAR_CUSTOMIZE obj{};

    obj.player = reader.read_u64();

    obj.new_name = reader.read_cstring();

    obj.gender = static_cast<Gender>(reader.read_u8());

    obj.skin_color = reader.read_u8();

    obj.hair_color = reader.read_u8();

    obj.hair_style = reader.read_u8();

    obj.facial_hair = reader.read_u8();

    obj.face = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHAR_CUSTOMIZE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHAR_CUSTOMIZE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHAR_CUSTOMIZE_size(obj) + 4)); /* size */

    writer.write_u32(0x00000473); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_cstring(obj.new_name);

    writer.write_u8(static_cast<uint8_t>(obj.gender));

    writer.write_u8(obj.skin_color);

    writer.write_u8(obj.hair_color);

    writer.write_u8(obj.hair_style);

    writer.write_u8(obj.facial_hair);

    writer.write_u8(obj.face);

    return writer.m_buf;
}

static size_t SMSG_CHAR_CUSTOMIZE_size(const SMSG_CHAR_CUSTOMIZE& obj) {
    size_t _size = 1;

    if (obj.result == WorldResult::RESPONSE_SUCCESS) {
        _size += 15 + obj.name.size();
    }

    return _size;
}

SMSG_CHAR_CUSTOMIZE SMSG_CHAR_CUSTOMIZE_read(Reader& reader) {
    SMSG_CHAR_CUSTOMIZE obj{};

    obj.result = static_cast<WorldResult>(reader.read_u8());

    if (obj.result == WorldResult::RESPONSE_SUCCESS) {
        obj.guid = reader.read_u64();

        obj.name = reader.read_cstring();

        obj.gender = static_cast<Gender>(reader.read_u8());

        obj.skin_color = reader.read_u8();

        obj.face = reader.read_u8();

        obj.hair_style = reader.read_u8();

        obj.hair_color = reader.read_u8();

        obj.facial_hair = reader.read_u8();

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHAR_CUSTOMIZE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CHAR_CUSTOMIZE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CHAR_CUSTOMIZE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000474); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    if (obj.result == WorldResult::RESPONSE_SUCCESS) {
        writer.write_u64(obj.guid);

        writer.write_cstring(obj.name);

        writer.write_u8(static_cast<uint8_t>(obj.gender));

        writer.write_u8(obj.skin_color);

        writer.write_u8(obj.face);

        writer.write_u8(obj.hair_style);

        writer.write_u8(obj.hair_color);

        writer.write_u8(obj.facial_hair);

    }
    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REQUEST_VEHICLE_EXIT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000476); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REQUEST_VEHICLE_PREV_SEAT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000477); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REQUEST_VEHICLE_NEXT_SEAT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000478); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

CMSG_REQUEST_VEHICLE_SWITCH_SEAT CMSG_REQUEST_VEHICLE_SWITCH_SEAT_read(Reader& reader) {
    CMSG_REQUEST_VEHICLE_SWITCH_SEAT obj{};

    obj.vehicle = reader.read_u64();

    obj.seat = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REQUEST_VEHICLE_SWITCH_SEAT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x00000479); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.vehicle);

    writer.write_u8(obj.seat);

    return writer.m_buf;
}

CMSG_PET_LEARN_TALENT CMSG_PET_LEARN_TALENT_read(Reader& reader) {
    CMSG_PET_LEARN_TALENT obj{};

    obj.pet = reader.read_u64();

    obj.talent = reader.read_u32();

    obj.rank = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PET_LEARN_TALENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 4)); /* size */

    writer.write_u32(0x0000047a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.pet);

    writer.write_u32(obj.talent);

    writer.write_u32(obj.rank);

    return writer.m_buf;
}

SMSG_SET_PHASE_SHIFT SMSG_SET_PHASE_SHIFT_read(Reader& reader) {
    SMSG_SET_PHASE_SHIFT obj{};

    obj.new_phase = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SET_PHASE_SHIFT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x0000047c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.new_phase);

    return writer.m_buf;
}

static size_t SMSG_ALL_ACHIEVEMENT_DATA_size(const SMSG_ALL_ACHIEVEMENT_DATA& obj) {
    return 0 + achievement_done_array_size(obj.done) + achievement_in_progress_array_size(obj.in_progress);
}

SMSG_ALL_ACHIEVEMENT_DATA SMSG_ALL_ACHIEVEMENT_DATA_read(Reader& reader) {
    SMSG_ALL_ACHIEVEMENT_DATA obj{};

    obj.done = wrath::achievement_done_array_read(reader);

    obj.in_progress = wrath::achievement_in_progress_array_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ALL_ACHIEVEMENT_DATA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ALL_ACHIEVEMENT_DATA_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ALL_ACHIEVEMENT_DATA_size(obj) + 2)); /* size */

    writer.write_u16(0x0000047d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    wrath::achievement_done_array_write(writer, obj.done);

    wrath::achievement_in_progress_array_write(writer, obj.in_progress);

    return writer.m_buf;
}

static size_t SMSG_POWER_UPDATE_size(const SMSG_POWER_UPDATE& obj) {
    return 5 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);
}

SMSG_POWER_UPDATE SMSG_POWER_UPDATE_read(Reader& reader) {
    SMSG_POWER_UPDATE obj{};

    obj.unit = reader.read_packed_guid();

    obj.power = static_cast<Power>(reader.read_u8());

    obj.amount = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_POWER_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_POWER_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_POWER_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000480); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    writer.write_u8(static_cast<uint8_t>(obj.power));

    writer.write_u32(obj.amount);

    return writer.m_buf;
}

CMSG_GAMEOBJ_REPORT_USE CMSG_GAMEOBJ_REPORT_USE_read(Reader& reader) {
    CMSG_GAMEOBJ_REPORT_USE obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GAMEOBJ_REPORT_USE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000481); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_HIGHEST_THREAT_UPDATE_size(const SMSG_HIGHEST_THREAT_UPDATE& obj) {
    size_t _size = 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit) + ::wow_world_messages::util::wwm_packed_guid_size(obj.new_victim);

    for(const auto& v : obj.units) {
        _size += ThreatUpdateUnit_size(v);
    }

    return _size;
}

SMSG_HIGHEST_THREAT_UPDATE SMSG_HIGHEST_THREAT_UPDATE_read(Reader& reader) {
    SMSG_HIGHEST_THREAT_UPDATE obj{};

    obj.unit = reader.read_packed_guid();

    obj.new_victim = reader.read_packed_guid();

    auto amount_of_units = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_units; ++i) {
        obj.units.push_back(::wow_world_messages::wrath::ThreatUpdateUnit_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_HIGHEST_THREAT_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_HIGHEST_THREAT_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_HIGHEST_THREAT_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000482); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    writer.write_packed_guid(obj.new_victim);

    writer.write_u32(static_cast<uint32_t>(obj.units.size()));

    for (const auto& v : obj.units) {
        ThreatUpdateUnit_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_THREAT_UPDATE_size(const SMSG_THREAT_UPDATE& obj) {
    size_t _size = 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);

    for(const auto& v : obj.units) {
        _size += ThreatUpdateUnit_size(v);
    }

    return _size;
}

SMSG_THREAT_UPDATE SMSG_THREAT_UPDATE_read(Reader& reader) {
    SMSG_THREAT_UPDATE obj{};

    obj.unit = reader.read_packed_guid();

    auto amount_of_units = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_units; ++i) {
        obj.units.push_back(::wow_world_messages::wrath::ThreatUpdateUnit_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_THREAT_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_THREAT_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_THREAT_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000483); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    writer.write_u32(static_cast<uint32_t>(obj.units.size()));

    for (const auto& v : obj.units) {
        ThreatUpdateUnit_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_THREAT_REMOVE_size(const SMSG_THREAT_REMOVE& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit) + ::wow_world_messages::util::wwm_packed_guid_size(obj.victim);
}

SMSG_THREAT_REMOVE SMSG_THREAT_REMOVE_read(Reader& reader) {
    SMSG_THREAT_REMOVE obj{};

    obj.unit = reader.read_packed_guid();

    obj.victim = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_THREAT_REMOVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_THREAT_REMOVE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_THREAT_REMOVE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000484); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    writer.write_packed_guid(obj.victim);

    return writer.m_buf;
}

static size_t SMSG_THREAT_CLEAR_size(const SMSG_THREAT_CLEAR& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);
}

SMSG_THREAT_CLEAR SMSG_THREAT_CLEAR_read(Reader& reader) {
    SMSG_THREAT_CLEAR obj{};

    obj.unit = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_THREAT_CLEAR::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_THREAT_CLEAR_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_THREAT_CLEAR_size(obj) + 2)); /* size */

    writer.write_u16(0x00000485); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    return writer.m_buf;
}

SMSG_CONVERT_RUNE SMSG_CONVERT_RUNE_read(Reader& reader) {
    SMSG_CONVERT_RUNE obj{};

    obj.index = reader.read_u8();

    obj.new_type = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CONVERT_RUNE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0002);

    writer.write_u16_be(static_cast<uint16_t>(0x0002 + 2)); /* size */

    writer.write_u16(0x00000486); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.index);

    writer.write_u8(obj.new_type);

    return writer.m_buf;
}

static size_t SMSG_RESYNC_RUNES_size(const SMSG_RESYNC_RUNES& obj) {
    return 4 + 2 * obj.runes.size();
}

SMSG_RESYNC_RUNES SMSG_RESYNC_RUNES_read(Reader& reader) {
    SMSG_RESYNC_RUNES obj{};

    auto amount_of_runes = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_runes; ++i) {
        obj.runes.push_back(::wow_world_messages::wrath::ResyncRune_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_RESYNC_RUNES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_RESYNC_RUNES_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_RESYNC_RUNES_size(obj) + 2)); /* size */

    writer.write_u16(0x00000487); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.runes.size()));

    for (const auto& v : obj.runes) {
        ResyncRune_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_ADD_RUNE_POWER SMSG_ADD_RUNE_POWER_read(Reader& reader) {
    SMSG_ADD_RUNE_POWER obj{};

    obj.rune = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ADD_RUNE_POWER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000488); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.rune);

    return writer.m_buf;
}

CMSG_REMOVE_GLYPH CMSG_REMOVE_GLYPH_read(Reader& reader) {
    CMSG_REMOVE_GLYPH obj{};

    obj.glyph = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_REMOVE_GLYPH::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x0000048a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.glyph);

    return writer.m_buf;
}

CMSG_DISMISS_CRITTER CMSG_DISMISS_CRITTER_read(Reader& reader) {
    CMSG_DISMISS_CRITTER obj{};

    obj.critter = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_DISMISS_CRITTER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000048d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.critter);

    return writer.m_buf;
}

CMSG_AUCTION_LIST_PENDING_SALES CMSG_AUCTION_LIST_PENDING_SALES_read(Reader& reader) {
    CMSG_AUCTION_LIST_PENDING_SALES obj{};

    obj.auctioneer = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_AUCTION_LIST_PENDING_SALES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x0000048f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.auctioneer);

    return writer.m_buf;
}

static size_t SMSG_AUCTION_LIST_PENDING_SALES_size(const SMSG_AUCTION_LIST_PENDING_SALES& obj) {
    size_t _size = 4;

    for(const auto& v : obj.pending_sales) {
        _size += PendingAuctionSale_size(v);
    }

    return _size;
}

SMSG_AUCTION_LIST_PENDING_SALES SMSG_AUCTION_LIST_PENDING_SALES_read(Reader& reader) {
    SMSG_AUCTION_LIST_PENDING_SALES obj{};

    auto amount_of_pending_sales = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_pending_sales; ++i) {
        obj.pending_sales.push_back(::wow_world_messages::wrath::PendingAuctionSale_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AUCTION_LIST_PENDING_SALES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_AUCTION_LIST_PENDING_SALES_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_AUCTION_LIST_PENDING_SALES_size(obj) + 2)); /* size */

    writer.write_u16(0x00000490); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.pending_sales.size()));

    for (const auto& v : obj.pending_sales) {
        PendingAuctionSale_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_MODIFY_COOLDOWN SMSG_MODIFY_COOLDOWN_read(Reader& reader) {
    SMSG_MODIFY_COOLDOWN obj{};

    obj.spell = reader.read_u32();

    obj.player = reader.read_u64();

    obj.cooldown = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MODIFY_COOLDOWN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x00000491); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.spell);

    writer.write_u64(obj.player);

    writer.write_u32(obj.cooldown);

    return writer.m_buf;
}

static size_t SMSG_PET_UPDATE_COMBO_POINTS_size(const SMSG_PET_UPDATE_COMBO_POINTS& obj) {
    return 1 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit) + ::wow_world_messages::util::wwm_packed_guid_size(obj.target);
}

SMSG_PET_UPDATE_COMBO_POINTS SMSG_PET_UPDATE_COMBO_POINTS_read(Reader& reader) {
    SMSG_PET_UPDATE_COMBO_POINTS obj{};

    obj.unit = reader.read_packed_guid();

    obj.target = reader.read_packed_guid();

    obj.combo_points = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_UPDATE_COMBO_POINTS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PET_UPDATE_COMBO_POINTS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PET_UPDATE_COMBO_POINTS_size(obj) + 2)); /* size */

    writer.write_u16(0x00000492); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    writer.write_packed_guid(obj.target);

    writer.write_u8(obj.combo_points);

    return writer.m_buf;
}

CMSG_ENABLETAXI CMSG_ENABLETAXI_read(Reader& reader) {
    CMSG_ENABLETAXI obj{};

    obj.guid = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ENABLETAXI::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x00000493); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    return writer.m_buf;
}

static size_t SMSG_PRE_RESURRECT_size(const SMSG_PRE_RESURRECT& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player);
}

SMSG_PRE_RESURRECT SMSG_PRE_RESURRECT_read(Reader& reader) {
    SMSG_PRE_RESURRECT obj{};

    obj.player = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PRE_RESURRECT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PRE_RESURRECT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PRE_RESURRECT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000494); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    return writer.m_buf;
}

static size_t SMSG_AURA_UPDATE_ALL_size(const SMSG_AURA_UPDATE_ALL& obj) {
    size_t _size = 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);

    for(const auto& v : obj.aura_updates) {
        _size += AuraUpdate_size(v);
    }

    return _size;
}

SMSG_AURA_UPDATE_ALL SMSG_AURA_UPDATE_ALL_read(Reader& reader, size_t body_size) {
    SMSG_AURA_UPDATE_ALL obj{};
    size_t _size = 0;

    obj.unit = reader.read_packed_guid();
    _size += ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);

    while (_size < body_size) {
        obj.aura_updates.push_back(::wow_world_messages::wrath::AuraUpdate_read(reader));
        _size += wrath::AuraUpdate_size(obj.aura_updates.back());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AURA_UPDATE_ALL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_AURA_UPDATE_ALL_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_AURA_UPDATE_ALL_size(obj) + 2)); /* size */

    writer.write_u16(0x00000495); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    for (const auto& v : obj.aura_updates) {
        AuraUpdate_write(writer, v);
    }

    return writer.m_buf;
}

static size_t SMSG_AURA_UPDATE_size(const SMSG_AURA_UPDATE& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit) + AuraUpdate_size(obj.aura_update);
}

SMSG_AURA_UPDATE SMSG_AURA_UPDATE_read(Reader& reader) {
    SMSG_AURA_UPDATE obj{};

    obj.unit = reader.read_packed_guid();

    obj.aura_update = ::wow_world_messages::wrath::AuraUpdate_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_AURA_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_AURA_UPDATE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_AURA_UPDATE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000496); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    AuraUpdate_write(writer, obj.aura_update);

    return writer.m_buf;
}

static size_t SMSG_SERVER_FIRST_ACHIEVEMENT_size(const SMSG_SERVER_FIRST_ACHIEVEMENT& obj) {
    return 14 + obj.name.size();
}

SMSG_SERVER_FIRST_ACHIEVEMENT SMSG_SERVER_FIRST_ACHIEVEMENT_read(Reader& reader) {
    SMSG_SERVER_FIRST_ACHIEVEMENT obj{};

    obj.name = reader.read_cstring();

    obj.player = reader.read_u64();

    obj.achievement = reader.read_u32();

    obj.link_type = static_cast<AchievementNameLinkType>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SERVER_FIRST_ACHIEVEMENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SERVER_FIRST_ACHIEVEMENT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SERVER_FIRST_ACHIEVEMENT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000498); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_cstring(obj.name);

    writer.write_u64(obj.player);

    writer.write_u32(obj.achievement);

    writer.write_u8(static_cast<uint8_t>(obj.link_type));

    return writer.m_buf;
}

SMSG_PET_LEARNED_SPELL SMSG_PET_LEARNED_SPELL_read(Reader& reader) {
    SMSG_PET_LEARNED_SPELL obj{};

    obj.spell = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_LEARNED_SPELL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x00000499); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.spell);

    return writer.m_buf;
}

SMSG_PET_UNLEARNED_SPELL SMSG_PET_UNLEARNED_SPELL_read(Reader& reader) {
    SMSG_PET_UNLEARNED_SPELL obj{};

    obj.spell = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_UNLEARNED_SPELL::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x0000049a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.spell);

    return writer.m_buf;
}

static size_t CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE_size(const CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE& obj) {
    return 1 + ::wow_world_messages::util::wwm_packed_guid_size(obj.vehicle) + MovementInfo_size(obj.info) + ::wow_world_messages::util::wwm_packed_guid_size(obj.accessory);
}

CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE_read(Reader& reader) {
    CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE obj{};

    obj.vehicle = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.accessory = reader.read_packed_guid();

    obj.seat = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE_size(obj) + 4)); /* size */

    writer.write_u32(0x0000049b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.vehicle);

    MovementInfo_write(writer, obj.info);

    writer.write_packed_guid(obj.accessory);

    writer.write_u8(obj.seat);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_HEARTH_AND_RESURRECT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x0000049c); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x0000049d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_CRITERIA_DELETED SMSG_CRITERIA_DELETED_read(Reader& reader) {
    SMSG_CRITERIA_DELETED obj{};

    obj.criteria_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CRITERIA_DELETED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x0000049e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.criteria_id);

    return writer.m_buf;
}

SMSG_ACHIEVEMENT_DELETED SMSG_ACHIEVEMENT_DELETED_read(Reader& reader) {
    SMSG_ACHIEVEMENT_DELETED obj{};

    obj.achievement = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ACHIEVEMENT_DELETED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x0000049f); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.achievement);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEGROUND_INFO_THROTTLED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000004a6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_PLAYER_VEHICLE_DATA_size(const SMSG_PLAYER_VEHICLE_DATA& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.target);
}

SMSG_PLAYER_VEHICLE_DATA SMSG_PLAYER_VEHICLE_DATA_read(Reader& reader) {
    SMSG_PLAYER_VEHICLE_DATA obj{};

    obj.target = reader.read_packed_guid();

    obj.vehicle_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PLAYER_VEHICLE_DATA::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PLAYER_VEHICLE_DATA_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PLAYER_VEHICLE_DATA_size(obj) + 2)); /* size */

    writer.write_u16(0x000004a7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.target);

    writer.write_u32(obj.vehicle_id);

    return writer.m_buf;
}

CMSG_PLAYER_VEHICLE_ENTER CMSG_PLAYER_VEHICLE_ENTER_read(Reader& reader) {
    CMSG_PLAYER_VEHICLE_ENTER obj{};

    obj.vehicle = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_PLAYER_VEHICLE_ENTER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000004a8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.vehicle);

    return writer.m_buf;
}

CMSG_CONTROLLER_EJECT_PASSENGER CMSG_CONTROLLER_EJECT_PASSENGER_read(Reader& reader) {
    CMSG_CONTROLLER_EJECT_PASSENGER obj{};

    obj.player = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CONTROLLER_EJECT_PASSENGER::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000004a9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    return writer.m_buf;
}

static size_t SMSG_PET_GUIDS_size(const SMSG_PET_GUIDS& obj) {
    return 4 + 8 * obj.guids.size();
}

SMSG_PET_GUIDS SMSG_PET_GUIDS_read(Reader& reader) {
    SMSG_PET_GUIDS obj{};

    auto amount_of_guids = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_guids; ++i) {
        obj.guids.push_back(reader.read_u64());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_PET_GUIDS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_PET_GUIDS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_PET_GUIDS_size(obj) + 2)); /* size */

    writer.write_u16(0x000004aa); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.guids.size()));

    for (const auto& v : obj.guids) {
        writer.write_u64(v);
    }

    return writer.m_buf;
}

SMSG_CLIENTCACHE_VERSION SMSG_CLIENTCACHE_VERSION_read(Reader& reader) {
    SMSG_CLIENTCACHE_VERSION obj{};

    obj.version = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CLIENTCACHE_VERSION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000004ab); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.version);

    return writer.m_buf;
}

SMSG_ITEM_REFUND_INFO_RESPONSE SMSG_ITEM_REFUND_INFO_RESPONSE_read(Reader& reader) {
    SMSG_ITEM_REFUND_INFO_RESPONSE obj{};

    obj.item = reader.read_u64();

    obj.money_cost = reader.read_u32();

    obj.honor_point_cost = reader.read_u32();

    obj.arena_point_cost = reader.read_u32();

    for (auto i = 0; i < 5; ++i) {
        obj.extra_items[i] = ::wow_world_messages::wrath::ItemRefundExtra_read(reader);
    }

    obj.unknown1 = reader.read_u32();

    obj.time_since_loss = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ITEM_REFUND_INFO_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0044);

    writer.write_u16_be(static_cast<uint16_t>(0x0044 + 2)); /* size */

    writer.write_u16(0x000004b2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    writer.write_u32(obj.money_cost);

    writer.write_u32(obj.honor_point_cost);

    writer.write_u32(obj.arena_point_cost);

    for (const auto& v : obj.extra_items) {
        ItemRefundExtra_write(writer, v);
    }

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.time_since_loss);

    return writer.m_buf;
}

CMSG_ITEM_REFUND_INFO CMSG_ITEM_REFUND_INFO_read(Reader& reader) {
    CMSG_ITEM_REFUND_INFO obj{};

    obj.item = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ITEM_REFUND_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000004b3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    return writer.m_buf;
}

CMSG_ITEM_REFUND CMSG_ITEM_REFUND_read(Reader& reader) {
    CMSG_ITEM_REFUND obj{};

    obj.item = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_ITEM_REFUND::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 4)); /* size */

    writer.write_u32(0x000004b4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    return writer.m_buf;
}

static size_t SMSG_ITEM_REFUND_RESULT_size(const SMSG_ITEM_REFUND_RESULT& obj) {
    size_t _size = 9;

    if (obj.result == ItemRefundResult::SUCCESS) {
        _size += 52;
    }

    return _size;
}

SMSG_ITEM_REFUND_RESULT SMSG_ITEM_REFUND_RESULT_read(Reader& reader) {
    SMSG_ITEM_REFUND_RESULT obj{};

    obj.item = reader.read_u64();

    obj.result = static_cast<ItemRefundResult>(reader.read_u8());

    if (obj.result == ItemRefundResult::SUCCESS) {
        obj.cost = reader.read_u32();

        obj.honor_point_cost = reader.read_u32();

        obj.arena_point_cost = reader.read_u32();

        for (auto i = 0; i < 5; ++i) {
            obj.extra_items[i] = ::wow_world_messages::wrath::ItemRefundExtra_read(reader);
        }

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ITEM_REFUND_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_ITEM_REFUND_RESULT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_ITEM_REFUND_RESULT_size(obj) + 2)); /* size */

    writer.write_u16(0x000004b5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    writer.write_u8(static_cast<uint8_t>(obj.result));

    if (obj.result == ItemRefundResult::SUCCESS) {
        writer.write_u32(obj.cost);

        writer.write_u32(obj.honor_point_cost);

        writer.write_u32(obj.arena_point_cost);

        for (const auto& v : obj.extra_items) {
            ItemRefundExtra_write(writer, v);
        }

    }
    return writer.m_buf;
}

CMSG_CORPSE_MAP_POSITION_QUERY CMSG_CORPSE_MAP_POSITION_QUERY_read(Reader& reader) {
    CMSG_CORPSE_MAP_POSITION_QUERY obj{};

    obj.unknown = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CORPSE_MAP_POSITION_QUERY::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x000004b6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown);

    return writer.m_buf;
}

SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE_read(Reader& reader) {
    SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE obj{};

    obj.unknown1 = reader.read_float();

    obj.unknown2 = reader.read_float();

    obj.unknown3 = reader.read_float();

    obj.unknown4 = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0010);

    writer.write_u16_be(static_cast<uint16_t>(0x0010 + 2)); /* size */

    writer.write_u16(0x000004b7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_float(obj.unknown1);

    writer.write_float(obj.unknown2);

    writer.write_float(obj.unknown3);

    writer.write_float(obj.unknown4);

    return writer.m_buf;
}

CMSG_CALENDAR_EVENT_SIGNUP CMSG_CALENDAR_EVENT_SIGNUP_read(Reader& reader) {
    CMSG_CALENDAR_EVENT_SIGNUP obj{};

    obj.event_id = reader.read_u64();

    obj.tentative = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CALENDAR_EVENT_SIGNUP::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0009);

    writer.write_u16_be(static_cast<uint16_t>(0x0009 + 4)); /* size */

    writer.write_u32(0x000004ba); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.event_id);

    writer.write_bool8(obj.tentative);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CALENDAR_CLEAR_PENDING_ACTION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000004bb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_EQUIPMENT_SET_LIST_size(const SMSG_EQUIPMENT_SET_LIST& obj) {
    size_t _size = 4;

    for(const auto& v : obj.equipment_sets) {
        _size += EquipmentSetListItem_size(v);
    }

    return _size;
}

SMSG_EQUIPMENT_SET_LIST SMSG_EQUIPMENT_SET_LIST_read(Reader& reader) {
    SMSG_EQUIPMENT_SET_LIST obj{};

    auto amount_of_equipment_sets = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_equipment_sets; ++i) {
        obj.equipment_sets.push_back(::wow_world_messages::wrath::EquipmentSetListItem_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_EQUIPMENT_SET_LIST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_EQUIPMENT_SET_LIST_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_EQUIPMENT_SET_LIST_size(obj) + 2)); /* size */

    writer.write_u16(0x000004bc); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.equipment_sets.size()));

    for (const auto& v : obj.equipment_sets) {
        EquipmentSetListItem_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_EQUIPMENT_SET_SAVE_size(const CMSG_EQUIPMENT_SET_SAVE& obj) {
    return 158 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + obj.name.size() + obj.icon_name.size();
}

CMSG_EQUIPMENT_SET_SAVE CMSG_EQUIPMENT_SET_SAVE_read(Reader& reader) {
    CMSG_EQUIPMENT_SET_SAVE obj{};

    obj.guid = reader.read_packed_guid();

    obj.index = reader.read_u32();

    obj.name = reader.read_cstring();

    obj.icon_name = reader.read_cstring();

    for (auto i = 0; i < 19; ++i) {
        obj.equipment[i] = reader.read_u64();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_EQUIPMENT_SET_SAVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_EQUIPMENT_SET_SAVE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_EQUIPMENT_SET_SAVE_size(obj) + 4)); /* size */

    writer.write_u32(0x000004bd); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.index);

    writer.write_cstring(obj.name);

    writer.write_cstring(obj.icon_name);

    for (const auto& v : obj.equipment) {
        writer.write_u64(v);
    }

    return writer.m_buf;
}

CMSG_UPDATE_PROJECTILE_POSITION CMSG_UPDATE_PROJECTILE_POSITION_read(Reader& reader) {
    CMSG_UPDATE_PROJECTILE_POSITION obj{};

    obj.caster = reader.read_u64();

    obj.spell = reader.read_u32();

    obj.cast_count = reader.read_u8();

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_UPDATE_PROJECTILE_POSITION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0019);

    writer.write_u16_be(static_cast<uint16_t>(0x0019 + 4)); /* size */

    writer.write_u32(0x000004be); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.caster);

    writer.write_u32(obj.spell);

    writer.write_u8(obj.cast_count);

    Vector3d_write(writer, obj.position);

    return writer.m_buf;
}

SMSG_SET_PROJECTILE_POSITION SMSG_SET_PROJECTILE_POSITION_read(Reader& reader) {
    SMSG_SET_PROJECTILE_POSITION obj{};

    obj.caster = reader.read_u64();

    obj.amount_of_casts = reader.read_u8();

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SET_PROJECTILE_POSITION::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0015);

    writer.write_u16_be(static_cast<uint16_t>(0x0015 + 2)); /* size */

    writer.write_u16(0x000004bf); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.caster);

    writer.write_u8(obj.amount_of_casts);

    Vector3d_write(writer, obj.position);

    return writer.m_buf;
}

static size_t SMSG_TALENTS_INFO_size(const SMSG_TALENTS_INFO& obj) {
    size_t _size = 5;

    if (obj.talent_type == TalentInfoType::PET) {
        _size += 1 + 5 * obj.talents.size();
    }
    else if (obj.talent_type == TalentInfoType::PLAYER) {
        _size += 2;

        for(const auto& v : obj.specs) {
            _size += TalentInfoSpec_size(v);
        }

    }

    return _size;
}

SMSG_TALENTS_INFO SMSG_TALENTS_INFO_read(Reader& reader) {
    SMSG_TALENTS_INFO obj{};

    obj.talent_type = static_cast<TalentInfoType>(reader.read_u8());

    obj.points_left = reader.read_u32();

    if (obj.talent_type == TalentInfoType::PET) {
        auto amount_of_talents = reader.read_u8();

        for (uint8_t i = 0; i < amount_of_talents; ++i) {
            obj.talents.push_back(::wow_world_messages::wrath::InspectTalent_read(reader));
        }

    }
    else if (obj.talent_type == TalentInfoType::PLAYER) {
        auto amount_of_specs = reader.read_u8();

        obj.active_spec = reader.read_u8();

        for (uint8_t i = 0; i < amount_of_specs; ++i) {
            obj.specs.push_back(::wow_world_messages::wrath::TalentInfoSpec_read(reader));
        }

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TALENTS_INFO::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_TALENTS_INFO_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_TALENTS_INFO_size(obj) + 2)); /* size */

    writer.write_u16(0x000004c0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.talent_type));

    writer.write_u32(obj.points_left);

    if (obj.talent_type == TalentInfoType::PET) {
        writer.write_u8(static_cast<uint8_t>(obj.talents.size()));

        for (const auto& v : obj.talents) {
            InspectTalent_write(writer, v);
        }

    }
    else if (obj.talent_type == TalentInfoType::PLAYER) {
        writer.write_u8(static_cast<uint8_t>(obj.specs.size()));

        writer.write_u8(obj.active_spec);

        for (const auto& v : obj.specs) {
            TalentInfoSpec_write(writer, v);
        }

    }
    return writer.m_buf;
}

static size_t CMSG_LEARN_PREVIEW_TALENTS_size(const CMSG_LEARN_PREVIEW_TALENTS& obj) {
    return 4 + 8 * obj.talents.size();
}

CMSG_LEARN_PREVIEW_TALENTS CMSG_LEARN_PREVIEW_TALENTS_read(Reader& reader) {
    CMSG_LEARN_PREVIEW_TALENTS obj{};

    auto amount_of_talents = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_talents; ++i) {
        obj.talents.push_back(::wow_world_messages::wrath::PreviewTalent_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LEARN_PREVIEW_TALENTS::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_LEARN_PREVIEW_TALENTS_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_LEARN_PREVIEW_TALENTS_size(obj) + 4)); /* size */

    writer.write_u32(0x000004c1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.talents.size()));

    for (const auto& v : obj.talents) {
        PreviewTalent_write(writer, v);
    }

    return writer.m_buf;
}

static size_t CMSG_LEARN_PREVIEW_TALENTS_PET_size(const CMSG_LEARN_PREVIEW_TALENTS_PET& obj) {
    return 12 + 8 * obj.talents.size();
}

CMSG_LEARN_PREVIEW_TALENTS_PET CMSG_LEARN_PREVIEW_TALENTS_PET_read(Reader& reader) {
    CMSG_LEARN_PREVIEW_TALENTS_PET obj{};

    obj.pet = reader.read_u64();

    auto amount_of_talents = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_talents; ++i) {
        obj.talents.push_back(::wow_world_messages::wrath::PreviewTalent_read(reader));
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_LEARN_PREVIEW_TALENTS_PET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_LEARN_PREVIEW_TALENTS_PET_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_LEARN_PREVIEW_TALENTS_PET_size(obj) + 4)); /* size */

    writer.write_u32(0x000004c2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.pet);

    writer.write_u32(static_cast<uint32_t>(obj.talents.size()));

    for (const auto& v : obj.talents) {
        PreviewTalent_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_ARENA_UNIT_DESTROYED SMSG_ARENA_UNIT_DESTROYED_read(Reader& reader) {
    SMSG_ARENA_UNIT_DESTROYED obj{};

    obj.unit = reader.read_u64();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ARENA_UNIT_DESTROYED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000004c7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.unit);

    return writer.m_buf;
}

SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED_read(Reader& reader) {
    SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED obj{};

    obj.unknown = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000004c8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown);

    return writer.m_buf;
}

static size_t SMSG_MOVE_GRAVITY_DISABLE_size(const SMSG_MOVE_GRAVITY_DISABLE& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);
}

SMSG_MOVE_GRAVITY_DISABLE SMSG_MOVE_GRAVITY_DISABLE_read(Reader& reader) {
    SMSG_MOVE_GRAVITY_DISABLE obj{};

    obj.unit = reader.read_packed_guid();

    obj.movement_counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_GRAVITY_DISABLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_GRAVITY_DISABLE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_GRAVITY_DISABLE_size(obj) + 2)); /* size */

    writer.write_u16(0x000004ce); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    writer.write_u32(obj.movement_counter);

    return writer.m_buf;
}

static size_t CMSG_MOVE_GRAVITY_DISABLE_ACK_size(const CMSG_MOVE_GRAVITY_DISABLE_ACK& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_MOVE_GRAVITY_DISABLE_ACK CMSG_MOVE_GRAVITY_DISABLE_ACK_read(Reader& reader) {
    CMSG_MOVE_GRAVITY_DISABLE_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.unknown = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_GRAVITY_DISABLE_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_GRAVITY_DISABLE_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_GRAVITY_DISABLE_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000004cf); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.unknown);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t SMSG_MOVE_GRAVITY_ENABLE_size(const SMSG_MOVE_GRAVITY_ENABLE& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);
}

SMSG_MOVE_GRAVITY_ENABLE SMSG_MOVE_GRAVITY_ENABLE_read(Reader& reader) {
    SMSG_MOVE_GRAVITY_ENABLE obj{};

    obj.unit = reader.read_packed_guid();

    obj.movement_counter = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_GRAVITY_ENABLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_GRAVITY_ENABLE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_GRAVITY_ENABLE_size(obj) + 2)); /* size */

    writer.write_u16(0x000004d0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    writer.write_u32(obj.movement_counter);

    return writer.m_buf;
}

static size_t CMSG_MOVE_GRAVITY_ENABLE_ACK_size(const CMSG_MOVE_GRAVITY_ENABLE_ACK& obj) {
    return 4 + ::wow_world_messages::util::wwm_packed_guid_size(obj.guid) + MovementInfo_size(obj.info);
}

CMSG_MOVE_GRAVITY_ENABLE_ACK CMSG_MOVE_GRAVITY_ENABLE_ACK_read(Reader& reader) {
    CMSG_MOVE_GRAVITY_ENABLE_ACK obj{};

    obj.guid = reader.read_packed_guid();

    obj.unknown = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_GRAVITY_ENABLE_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_GRAVITY_ENABLE_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_GRAVITY_ENABLE_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x000004d1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.guid);

    writer.write_u32(obj.unknown);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t MSG_MOVE_GRAVITY_CHNG_Server_size(const MSG_MOVE_GRAVITY_CHNG_Server& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

MSG_MOVE_GRAVITY_CHNG_Server MSG_MOVE_GRAVITY_CHNG_Server_read(Reader& reader) {
    MSG_MOVE_GRAVITY_CHNG_Server obj{};

    obj.player = reader.read_packed_guid();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_MOVE_GRAVITY_CHNG_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(MSG_MOVE_GRAVITY_CHNG_Server_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(MSG_MOVE_GRAVITY_CHNG_Server_size(obj) + 2)); /* size */

    writer.write_u16(0x000004d2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    MovementInfo_write(writer, obj.info);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_GRAVITY_DISABLE_size(const SMSG_SPLINE_MOVE_GRAVITY_DISABLE& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);
}

SMSG_SPLINE_MOVE_GRAVITY_DISABLE SMSG_SPLINE_MOVE_GRAVITY_DISABLE_read(Reader& reader) {
    SMSG_SPLINE_MOVE_GRAVITY_DISABLE obj{};

    obj.unit = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_GRAVITY_DISABLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_GRAVITY_DISABLE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_GRAVITY_DISABLE_size(obj) + 2)); /* size */

    writer.write_u16(0x000004d3); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    return writer.m_buf;
}

static size_t SMSG_SPLINE_MOVE_GRAVITY_ENABLE_size(const SMSG_SPLINE_MOVE_GRAVITY_ENABLE& obj) {
    return 0 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);
}

SMSG_SPLINE_MOVE_GRAVITY_ENABLE SMSG_SPLINE_MOVE_GRAVITY_ENABLE_read(Reader& reader) {
    SMSG_SPLINE_MOVE_GRAVITY_ENABLE obj{};

    obj.unit = reader.read_packed_guid();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SPLINE_MOVE_GRAVITY_ENABLE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_SPLINE_MOVE_GRAVITY_ENABLE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_SPLINE_MOVE_GRAVITY_ENABLE_size(obj) + 2)); /* size */

    writer.write_u16(0x000004d4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    return writer.m_buf;
}

CMSG_EQUIPMENT_SET_USE CMSG_EQUIPMENT_SET_USE_read(Reader& reader) {
    CMSG_EQUIPMENT_SET_USE obj{};

    for (auto i = 0; i < 19; ++i) {
        obj.sets[i] = ::wow_world_messages::wrath::EquipmentSet_read(reader);
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_EQUIPMENT_SET_USE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x00be);

    writer.write_u16_be(static_cast<uint16_t>(0x00be + 4)); /* size */

    writer.write_u32(0x000004d5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    for (const auto& v : obj.sets) {
        EquipmentSet_write(writer, v);
    }

    return writer.m_buf;
}

SMSG_EQUIPMENT_SET_USE_RESULT SMSG_EQUIPMENT_SET_USE_RESULT_read(Reader& reader) {
    SMSG_EQUIPMENT_SET_USE_RESULT obj{};

    obj.result = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_EQUIPMENT_SET_USE_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x000004d6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.result);

    return writer.m_buf;
}

static size_t CMSG_CHAR_FACTION_CHANGE_size(const CMSG_CHAR_FACTION_CHANGE& obj) {
    return 16 + obj.name.size();
}

CMSG_CHAR_FACTION_CHANGE CMSG_CHAR_FACTION_CHANGE_read(Reader& reader) {
    CMSG_CHAR_FACTION_CHANGE obj{};

    obj.guid = reader.read_u64();

    obj.name = reader.read_cstring();

    obj.gender = static_cast<Gender>(reader.read_u8());

    obj.skin_color = reader.read_u8();

    obj.hair_color = reader.read_u8();

    obj.hair_style = reader.read_u8();

    obj.facial_hair = reader.read_u8();

    obj.face = reader.read_u8();

    obj.race = static_cast<Race>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHAR_FACTION_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHAR_FACTION_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHAR_FACTION_CHANGE_size(obj) + 4)); /* size */

    writer.write_u32(0x000004d9); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.guid);

    writer.write_cstring(obj.name);

    writer.write_u8(static_cast<uint8_t>(obj.gender));

    writer.write_u8(obj.skin_color);

    writer.write_u8(obj.hair_color);

    writer.write_u8(obj.hair_style);

    writer.write_u8(obj.facial_hair);

    writer.write_u8(obj.face);

    writer.write_u8(static_cast<uint8_t>(obj.race));

    return writer.m_buf;
}

static size_t SMSG_CHAR_FACTION_CHANGE_size(const SMSG_CHAR_FACTION_CHANGE& obj) {
    size_t _size = 1;

    if (obj.result == WorldResult::RESPONSE_SUCCESS) {
        _size += 16 + obj.name.size();
    }

    return _size;
}

SMSG_CHAR_FACTION_CHANGE SMSG_CHAR_FACTION_CHANGE_read(Reader& reader) {
    SMSG_CHAR_FACTION_CHANGE obj{};

    obj.result = static_cast<WorldResult>(reader.read_u8());

    if (obj.result == WorldResult::RESPONSE_SUCCESS) {
        obj.guid = reader.read_u64();

        obj.name = reader.read_cstring();

        obj.gender = static_cast<Gender>(reader.read_u8());

        obj.skin_color = reader.read_u8();

        obj.face = reader.read_u8();

        obj.hair_style = reader.read_u8();

        obj.hair_color = reader.read_u8();

        obj.facial_hair = reader.read_u8();

        obj.race = static_cast<Race>(reader.read_u8());

    }
    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CHAR_FACTION_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_CHAR_FACTION_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_CHAR_FACTION_CHANGE_size(obj) + 2)); /* size */

    writer.write_u16(0x000004da); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(static_cast<uint8_t>(obj.result));

    if (obj.result == WorldResult::RESPONSE_SUCCESS) {
        writer.write_u64(obj.guid);

        writer.write_cstring(obj.name);

        writer.write_u8(static_cast<uint8_t>(obj.gender));

        writer.write_u8(obj.skin_color);

        writer.write_u8(obj.face);

        writer.write_u8(obj.hair_style);

        writer.write_u8(obj.hair_color);

        writer.write_u8(obj.facial_hair);

        writer.write_u8(static_cast<uint8_t>(obj.race));

    }
    return writer.m_buf;
}

SMSG_BATTLEFIELD_MGR_ENTRY_INVITE SMSG_BATTLEFIELD_MGR_ENTRY_INVITE_read(Reader& reader) {
    SMSG_BATTLEFIELD_MGR_ENTRY_INVITE obj{};

    obj.battle_id = reader.read_u32();

    obj.area = static_cast<Area>(reader.read_u32());

    obj.accept_time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEFIELD_MGR_ENTRY_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000004de); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.battle_id);

    writer.write_u32(static_cast<uint32_t>(obj.area));

    writer.write_u32(obj.accept_time);

    return writer.m_buf;
}

CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE_read(Reader& reader) {
    CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE obj{};

    obj.battle_id = reader.read_u32();

    obj.accepted = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0005);

    writer.write_u16_be(static_cast<uint16_t>(0x0005 + 4)); /* size */

    writer.write_u32(0x000004df); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.battle_id);

    writer.write_bool8(obj.accepted);

    return writer.m_buf;
}

SMSG_BATTLEFIELD_MGR_ENTERED SMSG_BATTLEFIELD_MGR_ENTERED_read(Reader& reader) {
    SMSG_BATTLEFIELD_MGR_ENTERED obj{};

    obj.battle_id = reader.read_u32();

    obj.unknown1 = reader.read_u8();

    obj.unknown2 = reader.read_u8();

    obj.clear_afk = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEFIELD_MGR_ENTERED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0007);

    writer.write_u16_be(static_cast<uint16_t>(0x0007 + 2)); /* size */

    writer.write_u16(0x000004e0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.battle_id);

    writer.write_u8(obj.unknown1);

    writer.write_u8(obj.unknown2);

    writer.write_bool8(obj.clear_afk);

    return writer.m_buf;
}

SMSG_BATTLEFIELD_MGR_QUEUE_INVITE SMSG_BATTLEFIELD_MGR_QUEUE_INVITE_read(Reader& reader) {
    SMSG_BATTLEFIELD_MGR_QUEUE_INVITE obj{};

    obj.battle_id = reader.read_u32();

    obj.warmup = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEFIELD_MGR_QUEUE_INVITE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0005);

    writer.write_u16_be(static_cast<uint16_t>(0x0005 + 2)); /* size */

    writer.write_u16(0x000004e1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.battle_id);

    writer.write_u8(obj.warmup);

    return writer.m_buf;
}

CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE_read(Reader& reader) {
    CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE obj{};

    obj.battle_id = reader.read_u32();

    obj.accepted = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0005);

    writer.write_u16_be(static_cast<uint16_t>(0x0005 + 4)); /* size */

    writer.write_u32(0x000004e2); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.battle_id);

    writer.write_bool8(obj.accepted);

    return writer.m_buf;
}

SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE_read(Reader& reader) {
    SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE obj{};

    obj.battle_id = reader.read_u32();

    obj.area = static_cast<Area>(reader.read_u32());

    obj.queued = reader.read_bool8();

    obj.full = reader.read_bool8();

    obj.warmup = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000b);

    writer.write_u16_be(static_cast<uint16_t>(0x000b + 2)); /* size */

    writer.write_u16(0x000004e4); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.battle_id);

    writer.write_u32(static_cast<uint32_t>(obj.area));

    writer.write_bool8(obj.queued);

    writer.write_bool8(obj.full);

    writer.write_bool8(obj.warmup);

    return writer.m_buf;
}

SMSG_BATTLEFIELD_MGR_EJECT_PENDING SMSG_BATTLEFIELD_MGR_EJECT_PENDING_read(Reader& reader) {
    SMSG_BATTLEFIELD_MGR_EJECT_PENDING obj{};

    obj.unknown = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEFIELD_MGR_EJECT_PENDING::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000004e5); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown);

    return writer.m_buf;
}

SMSG_BATTLEFIELD_MGR_EJECTED SMSG_BATTLEFIELD_MGR_EJECTED_read(Reader& reader) {
    SMSG_BATTLEFIELD_MGR_EJECTED obj{};

    obj.battle_id = reader.read_u32();

    obj.reason = reader.read_u8();

    obj.battle_status = reader.read_u8();

    obj.relocated = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEFIELD_MGR_EJECTED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0007);

    writer.write_u16_be(static_cast<uint16_t>(0x0007 + 2)); /* size */

    writer.write_u16(0x000004e6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.battle_id);

    writer.write_u8(obj.reason);

    writer.write_u8(obj.battle_status);

    writer.write_u8(obj.relocated);

    return writer.m_buf;
}

CMSG_BATTLEFIELD_MGR_EXIT_REQUEST CMSG_BATTLEFIELD_MGR_EXIT_REQUEST_read(Reader& reader) {
    CMSG_BATTLEFIELD_MGR_EXIT_REQUEST obj{};

    obj.battle_id = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_BATTLEFIELD_MGR_EXIT_REQUEST::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x000004e7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.battle_id);

    return writer.m_buf;
}

SMSG_BATTLEFIELD_MGR_STATE_CHANGE SMSG_BATTLEFIELD_MGR_STATE_CHANGE_read(Reader& reader) {
    SMSG_BATTLEFIELD_MGR_STATE_CHANGE obj{};

    obj.unknown1 = reader.read_u32();

    obj.unknown2 = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_BATTLEFIELD_MGR_STATE_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x000004e8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.unknown1);

    writer.write_u32(obj.unknown2);

    return writer.m_buf;
}

MSG_SET_RAID_DIFFICULTY_Client MSG_SET_RAID_DIFFICULTY_Client_read(Reader& reader) {
    MSG_SET_RAID_DIFFICULTY_Client obj{};

    obj.difficulty = static_cast<RaidDifficulty>(reader.read_u32());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_SET_RAID_DIFFICULTY_Client::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 4)); /* size */

    writer.write_u32(0x000004eb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.difficulty));

    return writer.m_buf;
}

MSG_SET_RAID_DIFFICULTY_Server MSG_SET_RAID_DIFFICULTY_Server_read(Reader& reader) {
    MSG_SET_RAID_DIFFICULTY_Server obj{};

    obj.difficulty = static_cast<RaidDifficulty>(reader.read_u32());

    obj.unknown1 = reader.read_u32();

    obj.in_group = reader.read_bool32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> MSG_SET_RAID_DIFFICULTY_Server::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x000c);

    writer.write_u16_be(static_cast<uint16_t>(0x000c + 2)); /* size */

    writer.write_u16(0x000004eb); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.difficulty));

    writer.write_u32(obj.unknown1);

    writer.write_bool32(obj.in_group);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TOGGLE_XP_GAIN::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000004ed); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GMRESPONSE_DB_ERROR::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x000004ee); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_GMRESPONSE_RECEIVED_size(const SMSG_GMRESPONSE_RECEIVED& obj) {
    size_t _size = 9 + obj.message.size();

    for(const auto& v : obj.response) {
        _size += v.size() + 1;
    }

    return _size;
}

SMSG_GMRESPONSE_RECEIVED SMSG_GMRESPONSE_RECEIVED_read(Reader& reader) {
    SMSG_GMRESPONSE_RECEIVED obj{};

    obj.response_id = reader.read_u32();

    obj.ticket_id = reader.read_u32();

    obj.message = reader.read_cstring();

    for (auto i = 0; i < 4; ++i) {
        obj.response[i] = reader.read_cstring();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GMRESPONSE_RECEIVED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_GMRESPONSE_RECEIVED_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_GMRESPONSE_RECEIVED_size(obj) + 2)); /* size */

    writer.write_u16(0x000004ef); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.response_id);

    writer.write_u32(obj.ticket_id);

    writer.write_cstring(obj.message);

    for (const auto& v : obj.response) {
        writer.write_cstring(v);
    }

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GMRESPONSE_RESOLVE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000004f0); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_GMRESPONSE_STATUS_UPDATE SMSG_GMRESPONSE_STATUS_UPDATE_read(Reader& reader) {
    SMSG_GMRESPONSE_STATUS_UPDATE obj{};

    obj.show_survey = reader.read_bool8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_GMRESPONSE_STATUS_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x000004f1); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_bool8(obj.show_survey);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_WORLD_STATE_UI_TIMER_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000004f6); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_WORLD_STATE_UI_TIMER_UPDATE SMSG_WORLD_STATE_UI_TIMER_UPDATE_read(Reader& reader) {
    SMSG_WORLD_STATE_UI_TIMER_UPDATE obj{};

    obj.time = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_WORLD_STATE_UI_TIMER_UPDATE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0004);

    writer.write_u16_be(static_cast<uint16_t>(0x0004 + 2)); /* size */

    writer.write_u16(0x000004f7); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.time);

    return writer.m_buf;
}

static size_t CMSG_CHAR_RACE_CHANGE_size(const CMSG_CHAR_RACE_CHANGE& obj) {
    return 16 + obj.name.size();
}

CMSG_CHAR_RACE_CHANGE CMSG_CHAR_RACE_CHANGE_read(Reader& reader) {
    CMSG_CHAR_RACE_CHANGE obj{};

    obj.player = reader.read_u64();

    obj.name = reader.read_cstring();

    obj.gender = static_cast<Gender>(reader.read_u8());

    obj.skin_color = reader.read_u8();

    obj.hair_color = reader.read_u8();

    obj.hair_style = reader.read_u8();

    obj.facial_hair = reader.read_u8();

    obj.face = reader.read_u8();

    obj.race = static_cast<Race>(reader.read_u8());

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_CHAR_RACE_CHANGE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_CHAR_RACE_CHANGE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_CHAR_RACE_CHANGE_size(obj) + 4)); /* size */

    writer.write_u32(0x000004f8); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.player);

    writer.write_cstring(obj.name);

    writer.write_u8(static_cast<uint8_t>(obj.gender));

    writer.write_u8(obj.skin_color);

    writer.write_u8(obj.hair_color);

    writer.write_u8(obj.hair_style);

    writer.write_u8(obj.facial_hair);

    writer.write_u8(obj.face);

    writer.write_u8(static_cast<uint8_t>(obj.race));

    return writer.m_buf;
}

SMSG_TALENTS_INVOLUNTARILY_RESET SMSG_TALENTS_INVOLUNTARILY_RESET_read(Reader& reader) {
    SMSG_TALENTS_INVOLUNTARILY_RESET obj{};

    obj.unknown = reader.read_u8();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_TALENTS_INVOLUNTARILY_RESET::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0001);

    writer.write_u16_be(static_cast<uint16_t>(0x0001 + 2)); /* size */

    writer.write_u16(0x000004fa); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u8(obj.unknown);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_READY_FOR_ACCOUNT_DATA_TIMES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x000004ff); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_QUERY_QUESTS_COMPLETED::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 4)); /* size */

    writer.write_u32(0x00000500); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

static size_t SMSG_QUERY_QUESTS_COMPLETED_RESPONSE_size(const SMSG_QUERY_QUESTS_COMPLETED_RESPONSE& obj) {
    return 4 + 4 * obj.reward_quests.size();
}

SMSG_QUERY_QUESTS_COMPLETED_RESPONSE SMSG_QUERY_QUESTS_COMPLETED_RESPONSE_read(Reader& reader) {
    SMSG_QUERY_QUESTS_COMPLETED_RESPONSE obj{};

    auto amount_of_reward_quests = reader.read_u32();

    for (uint32_t i = 0; i < amount_of_reward_quests; ++i) {
        obj.reward_quests.push_back(reader.read_u32());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_QUERY_QUESTS_COMPLETED_RESPONSE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_QUERY_QUESTS_COMPLETED_RESPONSE_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_QUERY_QUESTS_COMPLETED_RESPONSE_size(obj) + 2)); /* size */

    writer.write_u16(0x00000501); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(obj.reward_quests.size()));

    for (const auto& v : obj.reward_quests) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

CMSG_GM_REPORT_LAG CMSG_GM_REPORT_LAG_read(Reader& reader) {
    CMSG_GM_REPORT_LAG obj{};

    obj.lag_type = reader.read_u32();

    obj.map = static_cast<Map>(reader.read_u32());

    obj.position = ::wow_world_messages::all::Vector3d_read(reader);

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_GM_REPORT_LAG::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 4)); /* size */

    writer.write_u32(0x00000502); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.lag_type);

    writer.write_u32(static_cast<uint32_t>(obj.map));

    Vector3d_write(writer, obj.position);

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CORPSE_NOT_IN_INSTANCE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    auto writer = Writer(0x0000);

    writer.write_u16_be(static_cast<uint16_t>(0x0000 + 2)); /* size */

    writer.write_u16(0x00000506); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    return writer.m_buf;
}

SMSG_CAMERA_SHAKE SMSG_CAMERA_SHAKE_read(Reader& reader) {
    SMSG_CAMERA_SHAKE obj{};

    obj.camera_shake_id = reader.read_u32();

    obj.unknown = reader.read_u32();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_CAMERA_SHAKE::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0008);

    writer.write_u16_be(static_cast<uint16_t>(0x0008 + 2)); /* size */

    writer.write_u16(0x0000050a); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.camera_shake_id);

    writer.write_u32(obj.unknown);

    return writer.m_buf;
}

SMSG_SOCKET_GEMS_RESULT SMSG_SOCKET_GEMS_RESULT_read(Reader& reader) {
    SMSG_SOCKET_GEMS_RESULT obj{};

    obj.item = reader.read_u64();

    for (auto i = 0; i < 3; ++i) {
        obj.sockets[i] = reader.read_u32();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_SOCKET_GEMS_RESULT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x0014);

    writer.write_u16_be(static_cast<uint16_t>(0x0014 + 2)); /* size */

    writer.write_u16(0x0000050b); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u64(obj.item);

    for (const auto& v : obj.sockets) {
        writer.write_u32(v);
    }

    return writer.m_buf;
}

SMSG_REDIRECT_CLIENT SMSG_REDIRECT_CLIENT_read(Reader& reader) {
    SMSG_REDIRECT_CLIENT obj{};

    obj.ip_address = reader.read_u32();

    obj.port = reader.read_u16();

    obj.unknown = reader.read_u32();

    for (auto i = 0; i < 20; ++i) {
        obj.hash[i] = reader.read_u8();
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_REDIRECT_CLIENT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(0x001e);

    writer.write_u16_be(static_cast<uint16_t>(0x001e + 2)); /* size */

    writer.write_u16(0x0000050d); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(obj.ip_address);

    writer.write_u16(obj.port);

    writer.write_u32(obj.unknown);

    for (const auto& v : obj.hash) {
        writer.write_u8(v);
    }

    return writer.m_buf;
}

static size_t SMSG_MOVE_SET_COLLISION_HGT_size(const SMSG_MOVE_SET_COLLISION_HGT& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.unit);
}

SMSG_MOVE_SET_COLLISION_HGT SMSG_MOVE_SET_COLLISION_HGT_read(Reader& reader) {
    SMSG_MOVE_SET_COLLISION_HGT obj{};

    obj.unit = reader.read_packed_guid();

    obj.packet_counter = reader.read_u32();

    obj.collision_height = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MOVE_SET_COLLISION_HGT::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MOVE_SET_COLLISION_HGT_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MOVE_SET_COLLISION_HGT_size(obj) + 2)); /* size */

    writer.write_u16(0x00000516); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.unit);

    writer.write_u32(obj.packet_counter);

    writer.write_float(obj.collision_height);

    return writer.m_buf;
}

static size_t CMSG_MOVE_SET_COLLISION_HGT_ACK_size(const CMSG_MOVE_SET_COLLISION_HGT_ACK& obj) {
    return 8 + ::wow_world_messages::util::wwm_packed_guid_size(obj.player) + MovementInfo_size(obj.info);
}

CMSG_MOVE_SET_COLLISION_HGT_ACK CMSG_MOVE_SET_COLLISION_HGT_ACK_read(Reader& reader) {
    CMSG_MOVE_SET_COLLISION_HGT_ACK obj{};

    obj.player = reader.read_packed_guid();

    obj.movement_counter = reader.read_u32();

    obj.info = ::wow_world_messages::wrath::MovementInfo_read(reader);

    obj.new_height = reader.read_float();

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> CMSG_MOVE_SET_COLLISION_HGT_ACK::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(CMSG_MOVE_SET_COLLISION_HGT_ACK_size(obj));

    writer.write_u16_be(static_cast<uint16_t>((uint16_t)CMSG_MOVE_SET_COLLISION_HGT_ACK_size(obj) + 4)); /* size */

    writer.write_u32(0x00000517); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_packed_guid(obj.player);

    writer.write_u32(obj.movement_counter);

    MovementInfo_write(writer, obj.info);

    writer.write_float(obj.new_height);

    return writer.m_buf;
}

static size_t SMSG_MULTIPLE_MOVES_size(const SMSG_MULTIPLE_MOVES& obj) {
    size_t _size = 4;

    for(const auto& v : obj.moves) {
        _size += MiniMoveMessage_size(v);
    }

    return _size;
}

SMSG_MULTIPLE_MOVES SMSG_MULTIPLE_MOVES_read(Reader& reader, size_t body_size) {
    SMSG_MULTIPLE_MOVES obj{};
    size_t _size = 0;

    (void)reader.read_u32();
    _size += 4;

    while (_size < body_size) {
        obj.moves.push_back(::wow_world_messages::wrath::MiniMoveMessage_read(reader));
        _size += wrath::MiniMoveMessage_size(obj.moves.back());
    }

    return obj;
}

WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> SMSG_MULTIPLE_MOVES::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    const auto& obj = *this;
    auto writer = Writer(SMSG_MULTIPLE_MOVES_size(obj));

    writer.write_u16_be(static_cast<uint16_t>(SMSG_MULTIPLE_MOVES_size(obj) + 2)); /* size */

    writer.write_u16(0x0000051e); /* opcode */

    encrypt(writer.m_buf.data(), writer.m_buf.size());

    writer.write_u32(static_cast<uint32_t>(SMSG_MULTIPLE_MOVES_size(obj)));

    for (const auto& v : obj.moves) {
        MiniMoveMessage_write(writer, v);
    }

    return writer.m_buf;
}

WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode ClientOpcode::read(Reader& reader, const std::function<void(unsigned char*, size_t)>& decrypt) {
    constexpr size_t HEADER_SIZE = 6;
    unsigned char header[HEADER_SIZE];

    reader.read_bytes(header, HEADER_SIZE);
    decrypt(header, HEADER_SIZE);

    const uint16_t _size = static_cast<uint16_t>(header[0]) << 8 | static_cast<uint16_t>(header[1]);

    const uint32_t opcode = static_cast<uint32_t>(header[2]) | static_cast<uint32_t>(header[3]) << 8 | static_cast<uint32_t>(header[4]) << 16 | static_cast<uint32_t>(header[5]) << 24 ;

    ClientOpcode op;

    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BOOTME)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BOOTME{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_DBLOOKUP)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_DBLOOKUP_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_WORLD_TELEPORT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_WORLD_TELEPORT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TELEPORT_TO_UNIT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TELEPORT_TO_UNIT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHAR_CREATE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHAR_CREATE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHAR_ENUM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHAR_ENUM{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHAR_DELETE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHAR_DELETE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PLAYER_LOGIN)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PLAYER_LOGIN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PLAYER_LOGOUT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PLAYER_LOGOUT{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LOGOUT_REQUEST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LOGOUT_REQUEST{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LOGOUT_CANCEL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LOGOUT_CANCEL{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_NAME_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_NAME_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_NAME_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_NAME_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ITEM_QUERY_SINGLE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ITEM_QUERY_SINGLE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PAGE_TEXT_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PAGE_TEXT_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUEST_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUEST_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GAMEOBJECT_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GAMEOBJECT_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CREATURE_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CREATURE_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_WHO)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_WHO_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_WHOIS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_WHOIS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CONTACT_LIST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CONTACT_LIST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ADD_FRIEND)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ADD_FRIEND_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_DEL_FRIEND)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_DEL_FRIEND_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_CONTACT_NOTES)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_CONTACT_NOTES_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ADD_IGNORE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ADD_IGNORE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_DEL_IGNORE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_DEL_IGNORE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_INVITE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_INVITE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_CANCEL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_CANCEL{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_ACCEPT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_ACCEPT{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_DECLINE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_DECLINE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_UNINVITE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_UNINVITE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_UNINVITE_GUID)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_UNINVITE_GUID_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_SET_LEADER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_SET_LEADER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LOOT_METHOD)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LOOT_METHOD_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_DISBAND)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_DISBAND{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_CREATE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_CREATE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_INVITE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_INVITE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_ACCEPT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_ACCEPT{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_DECLINE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_DECLINE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_INFO)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_INFO{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_ROSTER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_ROSTER{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_PROMOTE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_PROMOTE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_DEMOTE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_DEMOTE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_LEAVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_LEAVE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_REMOVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_REMOVE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_DISBAND)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_DISBAND{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_LEADER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_LEADER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_MOTD)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_MOTD_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MESSAGECHAT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MESSAGECHAT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_JOIN_CHANNEL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_JOIN_CHANNEL_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LEAVE_CHANNEL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LEAVE_CHANNEL_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_LIST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_LIST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_PASSWORD)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_PASSWORD_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_SET_OWNER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_SET_OWNER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_OWNER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_OWNER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_MODERATOR)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_MODERATOR_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_UNMODERATOR)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_UNMODERATOR_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_MUTE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_MUTE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_UNMUTE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_UNMUTE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_INVITE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_INVITE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_KICK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_KICK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_BAN)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_BAN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_UNBAN)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_UNBAN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_ANNOUNCEMENTS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_ANNOUNCEMENTS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_MODERATE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_MODERATE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_USE_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_USE_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_OPEN_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_OPEN_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_READ_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_READ_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GAMEOBJ_USE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GAMEOBJ_USE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AREATRIGGER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AREATRIGGER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_FORWARD)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_FORWARD_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_BACKWARD)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_BACKWARD_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_STOP)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_STRAFE_LEFT)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_STRAFE_LEFT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_STRAFE_RIGHT)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_STRAFE_RIGHT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_STOP_STRAFE)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_STRAFE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_JUMP)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_JUMP_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_TURN_LEFT)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_TURN_LEFT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_TURN_RIGHT)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_TURN_RIGHT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_STOP_TURN)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_TURN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_PITCH_UP)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_PITCH_UP_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_PITCH_DOWN)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_PITCH_DOWN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_STOP_PITCH)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_PITCH_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_SET_RUN_MODE)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_RUN_MODE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_SET_WALK_MODE)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_WALK_MODE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_TELEPORT)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_TELEPORT_Server_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_TELEPORT_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_TELEPORT_ACK_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_FALL_LAND)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_FALL_LAND_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_SWIM)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_SWIM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_STOP_SWIM)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_SWIM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_SET_FACING)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_FACING_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_SET_PITCH)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_PITCH_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_WORLDPORT_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_WORLDPORT_ACK{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_SET_RAW_POSITION)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_SET_RAW_POSITION_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FORCE_MOVE_ROOT_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FORCE_MOVE_ROOT_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FORCE_MOVE_UNROOT_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FORCE_MOVE_UNROOT_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_HEARTBEAT)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_HEARTBEAT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_KNOCK_BACK_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_KNOCK_BACK_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_HOVER_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_HOVER_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_HOVER)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_HOVER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_NEXT_CINEMATIC_CAMERA)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_NEXT_CINEMATIC_CAMERA{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_COMPLETE_CINEMATIC)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_COMPLETE_CINEMATIC{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TUTORIAL_FLAG)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TUTORIAL_FLAG_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TUTORIAL_CLEAR)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TUTORIAL_CLEAR{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TUTORIAL_RESET)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TUTORIAL_RESET{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_STANDSTATECHANGE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_STANDSTATECHANGE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_EMOTE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_EMOTE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TEXT_EMOTE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TEXT_EMOTE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUTOSTORE_LOOT_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUTOSTORE_LOOT_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUTOEQUIP_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUTOEQUIP_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUTOSTORE_BAG_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUTOSTORE_BAG_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SWAP_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SWAP_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SWAP_INV_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SWAP_INV_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SPLIT_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SPLIT_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUTOEQUIP_ITEM_SLOT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUTOEQUIP_ITEM_SLOT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_DESTROYITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_DESTROYITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_INSPECT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_INSPECT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_INITIATE_TRADE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_INITIATE_TRADE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BEGIN_TRADE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BEGIN_TRADE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BUSY_TRADE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BUSY_TRADE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_IGNORE_TRADE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_IGNORE_TRADE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ACCEPT_TRADE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ACCEPT_TRADE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_UNACCEPT_TRADE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_UNACCEPT_TRADE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CANCEL_TRADE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CANCEL_TRADE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_TRADE_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_TRADE_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CLEAR_TRADE_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CLEAR_TRADE_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_TRADE_GOLD)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_TRADE_GOLD_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_FACTION_ATWAR)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_FACTION_ATWAR_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_ACTION_BUTTON)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_ACTION_BUTTON_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CAST_SPELL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CAST_SPELL_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CANCEL_CAST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CANCEL_CAST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CANCEL_AURA)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CANCEL_AURA_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CANCEL_CHANNELLING)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CANCEL_CHANNELLING_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_SELECTION)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_SELECTION_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_DELETEEQUIPMENT_SET)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_DELETEEQUIPMENT_SET_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_INSTANCE_LOCK_RESPONSE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_INSTANCE_LOCK_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ATTACKSWING)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ATTACKSWING_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ATTACKSTOP)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ATTACKSTOP{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REPOP_REQUEST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REPOP_REQUEST{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_RESURRECT_RESPONSE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_RESURRECT_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LOOT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LOOT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LOOT_MONEY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LOOT_MONEY{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LOOT_RELEASE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LOOT_RELEASE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_DUEL_ACCEPTED)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_DUEL_ACCEPTED_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_DUEL_CANCELLED)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_DUEL_CANCELLED_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOUNTSPECIAL_ANIM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOUNTSPECIAL_ANIM{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_SET_ACTION)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_SET_ACTION_read(reader, _size - 4));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_ACTION)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_ACTION_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_ABANDON)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_ABANDON_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_RENAME)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_RENAME_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GOSSIP_HELLO)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GOSSIP_HELLO_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GOSSIP_SELECT_OPTION)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GOSSIP_SELECT_OPTION_read(reader, _size - 4));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_NPC_TEXT_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_NPC_TEXT_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTGIVER_STATUS_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTGIVER_STATUS_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTGIVER_HELLO)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTGIVER_HELLO_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTGIVER_QUERY_QUEST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTGIVER_QUERY_QUEST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTGIVER_ACCEPT_QUEST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTGIVER_COMPLETE_QUEST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTGIVER_REQUEST_REWARD)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTGIVER_REQUEST_REWARD_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTGIVER_CHOOSE_REWARD_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTGIVER_CANCEL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTGIVER_CANCEL{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTLOG_SWAP_QUEST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTLOG_SWAP_QUEST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTLOG_REMOVE_QUEST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTLOG_REMOVE_QUEST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUEST_CONFIRM_ACCEPT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUEST_CONFIRM_ACCEPT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PUSHQUESTTOPARTY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PUSHQUESTTOPARTY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LIST_INVENTORY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LIST_INVENTORY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SELL_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SELL_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BUY_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BUY_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BUY_ITEM_IN_SLOT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BUY_ITEM_IN_SLOT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TAXINODE_STATUS_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TAXINODE_STATUS_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TAXIQUERYAVAILABLENODES)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TAXIQUERYAVAILABLENODES_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ACTIVATETAXI)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ACTIVATETAXI_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TRAINER_LIST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TRAINER_LIST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TRAINER_BUY_SPELL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TRAINER_BUY_SPELL_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BINDER_ACTIVATE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BINDER_ACTIVATE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BANKER_ACTIVATE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BANKER_ACTIVATE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BUY_BANK_SLOT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BUY_BANK_SLOT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PETITION_SHOWLIST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PETITION_SHOWLIST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PETITION_BUY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PETITION_BUY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PETITION_SHOW_SIGNATURES)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PETITION_SHOW_SIGNATURES_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PETITION_SIGN)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PETITION_SIGN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_PETITION_DECLINE)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_PETITION_DECLINE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_OFFER_PETITION)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_OFFER_PETITION_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TURN_IN_PETITION)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TURN_IN_PETITION_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PETITION_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PETITION_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BUG)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BUG_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PLAYED_TIME)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PLAYED_TIME_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUERY_TIME)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUERY_TIME{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_RECLAIM_CORPSE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_RECLAIM_CORPSE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_WRAP_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_WRAP_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MINIMAP_PING)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MINIMAP_PING_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PING)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PING_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SETSHEATHED)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SETSHEATHED_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUEST_POI_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUEST_POI_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUTH_SESSION)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUTH_SESSION_read(reader, _size - 4));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_CAST_SPELL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_CAST_SPELL_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_SAVE_GUILD_EMBLEM)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_SAVE_GUILD_EMBLEM_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_TABARDVENDOR_ACTIVATE)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_TABARDVENDOR_ACTIVATE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ZONEUPDATE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ZONEUPDATE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_RANDOM_ROLL)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_RANDOM_ROLL_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_UNLEARN_SKILL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_UNLEARN_SKILL_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GMTICKET_CREATE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GMTICKET_CREATE_read(reader, _size - 4));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GMTICKET_UPDATETEXT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GMTICKET_UPDATETEXT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REQUEST_ACCOUNT_DATA)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REQUEST_ACCOUNT_DATA_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_UPDATE_ACCOUNT_DATA)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_UPDATE_ACCOUNT_DATA_read(reader, _size - 4));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GMTICKET_GETTICKET)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GMTICKET_GETTICKET{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_UNLEARN_TALENTS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_UNLEARN_TALENTS{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_CORPSE_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_CORPSE_QUERY_Client{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GMTICKET_DELETETICKET)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GMTICKET_DELETETICKET{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GMTICKET_SYSTEMSTATUS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GMTICKET_SYSTEMSTATUS{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SPIRIT_HEALER_ACTIVATE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SPIRIT_HEALER_ACTIVATE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHAT_IGNORED)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHAT_IGNORED_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_RANK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_RANK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_ADD_RANK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_ADD_RANK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_DEL_RANK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_DEL_RANK{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_SET_PUBLIC_NOTE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_SET_PUBLIC_NOTE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_SET_OFFICER_NOTE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_SET_OFFICER_NOTE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SEND_MAIL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SEND_MAIL_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GET_MAIL_LIST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GET_MAIL_LIST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BATTLEFIELD_LIST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BATTLEFIELD_LIST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ITEM_TEXT_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ITEM_TEXT_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MAIL_TAKE_MONEY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MAIL_TAKE_MONEY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MAIL_TAKE_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MAIL_TAKE_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MAIL_MARK_AS_READ)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MAIL_MARK_AS_READ_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MAIL_RETURN_TO_SENDER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MAIL_RETURN_TO_SENDER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MAIL_DELETE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MAIL_DELETE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MAIL_CREATE_TEXT_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MAIL_CREATE_TEXT_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LEARN_TALENT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LEARN_TALENT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TOGGLE_PVP)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TOGGLE_PVP_read(reader, _size - 4));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_AUCTION_HELLO)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_AUCTION_HELLO_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUCTION_SELL_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUCTION_SELL_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUCTION_REMOVE_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUCTION_REMOVE_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUCTION_LIST_ITEMS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUCTION_LIST_ITEMS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUCTION_LIST_OWNER_ITEMS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUCTION_PLACE_BID)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUCTION_PLACE_BID_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_AMMO)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_AMMO_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_ACTIVE_MOVER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_ACTIVE_MOVER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_CANCEL_AURA)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_CANCEL_AURA_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_LIST_STABLED_PETS)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_LIST_STABLED_PETS_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_STABLE_PET)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_STABLE_PET_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_UNSTABLE_PET)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_UNSTABLE_PET_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BUY_STABLE_SLOT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BUY_STABLE_SLOT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_STABLE_SWAP_PET)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_STABLE_SWAP_PET_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_QUEST_PUSH_RESULT)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_QUEST_PUSH_RESULT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REQUEST_PET_INFO)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REQUEST_PET_INFO{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FAR_SIGHT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FAR_SIGHT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_CHANGE_SUB_GROUP)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_CHANGE_SUB_GROUP_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REQUEST_PARTY_MEMBER_STATS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_SWAP_SUB_GROUP)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_SWAP_SUB_GROUP_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUTOSTORE_BANK_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUTOSTORE_BANK_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUTOBANK_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUTOBANK_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_QUERY_NEXT_MAIL_TIME)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_QUERY_NEXT_MAIL_TIME_Client{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_RAID_CONVERT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_RAID_CONVERT{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GROUP_ASSISTANT_LEADER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GROUP_ASSISTANT_LEADER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BUYBACK_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BUYBACK_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_SAVED_INSTANCE_EXTEND_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LFG_GET_STATUS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LFG_GET_STATUS{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GMTICKETSYSTEM_TOGGLE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GMTICKETSYSTEM_TOGGLE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CANCEL_GROWTH_AURA)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CANCEL_GROWTH_AURA{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LOOT_ROLL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LOOT_ROLL_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LOOT_MASTER_GIVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LOOT_MASTER_GIVE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REPAIR_ITEM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REPAIR_ITEM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_TALENT_WIPE_CONFIRM)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_TALENT_WIPE_CONFIRM_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SUMMON_RESPONSE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SUMMON_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_WATER_WALK)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_WATER_WALK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SELF_RES)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SELF_RES{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TOGGLE_HELM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TOGGLE_HELM{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TOGGLE_CLOAK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TOGGLE_CLOAK{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_ACTIONBAR_TOGGLES)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_ACTIONBAR_TOGGLES_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_PETITION_RENAME)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_PETITION_RENAME_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ITEM_NAME_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ITEM_NAME_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHAR_RENAME)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHAR_RENAME_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_SPLINE_DONE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_SPLINE_DONE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_FALL_RESET)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_FALL_RESET_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REQUEST_RAID_INFO)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REQUEST_RAID_INFO{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_TIME_SKIPPED)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_TIME_SKIPPED_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_FEATHER_FALL_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_FEATHER_FALL_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_WATER_WALK_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_WATER_WALK_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_NOT_ACTIVE_MOVER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BATTLEFIELD_STATUS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BATTLEFIELD_STATUS{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BATTLEFIELD_PORT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BATTLEFIELD_PORT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_INSPECT_HONOR_STATS)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_INSPECT_HONOR_STATS_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BATTLEMASTER_HELLO)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BATTLEMASTER_HELLO_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_PVP_LOG_DATA)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_PVP_LOG_DATA_Client{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LEAVE_BATTLEFIELD)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LEAVE_BATTLEFIELD_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AREA_SPIRIT_HEALER_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_WARDEN_DATA)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_WARDEN_DATA_read(reader, _size - 4));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_STOP_ATTACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_STOP_ATTACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BATTLEMASTER_JOIN)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BATTLEMASTER_JOIN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_UNLEARN)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_UNLEARN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_SPELL_AUTOCAST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_SPELL_AUTOCAST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_INFO_TEXT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_INFO_TEXT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ACTIVATETAXIEXPRESS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ACTIVATETAXIEXPRESS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_FACTION_INACTIVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_FACTION_INACTIVE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_WATCHED_FACTION)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_WATCHED_FACTION_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_RESET_INSTANCES)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_RESET_INSTANCES{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_RAID_TARGET_UPDATE)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_RAID_TARGET_UPDATE_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_RAID_READY_CHECK)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_RAID_READY_CHECK_Client_read(reader, _size - 4));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_SET_DUNGEON_DIFFICULTY)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_SET_DUNGEON_DIFFICULTY_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GMSURVEY_SUBMIT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GMSURVEY_SUBMIT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_SET_CAN_FLY_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_SET_CAN_FLY_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_SET_FLY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_SET_FLY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SOCKET_GEMS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SOCKET_GEMS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ARENA_TEAM_ROSTER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ARENA_TEAM_ROSTER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ARENA_TEAM_INVITE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ARENA_TEAM_INVITE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ARENA_TEAM_ACCEPT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ARENA_TEAM_ACCEPT{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ARENA_TEAM_DECLINE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ARENA_TEAM_DECLINE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ARENA_TEAM_LEAVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ARENA_TEAM_LEAVE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ARENA_TEAM_REMOVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ARENA_TEAM_REMOVE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ARENA_TEAM_DISBAND)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ARENA_TEAM_DISBAND_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ARENA_TEAM_LEADER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ARENA_TEAM_LEADER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BATTLEMASTER_JOIN_ARENA)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BATTLEMASTER_JOIN_ARENA_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_ASCEND)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_ASCEND_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_STOP_ASCEND)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_ASCEND_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LFG_JOIN)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LFG_JOIN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LFG_LEAVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LFG_LEAVE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SEARCH_LFG_JOIN)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SEARCH_LFG_JOIN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SEARCH_LFG_LEAVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SEARCH_LFG_LEAVE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LFG_PROPOSAL_RESULT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LFG_PROPOSAL_RESULT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_LFG_COMMENT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_LFG_COMMENT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LFG_SET_ROLES)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LFG_SET_ROLES_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LFG_SET_BOOT_VOTE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LFG_SET_BOOT_VOTE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LFG_TELEPORT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LFG_TELEPORT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_TITLE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_TITLE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CANCEL_MOUNT_AURA)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CANCEL_MOUNT_AURA{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_INSPECT_ARENA_TEAMS)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_INSPECT_ARENA_TEAMS_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CANCEL_TEMP_ENCHANTMENT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_TAXI_BENCHMARK_MODE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_TAXI_BENCHMARK_MODE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REALM_SPLIT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REALM_SPLIT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_CHNG_TRANSPORT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_CHNG_TRANSPORT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_PARTY_ASSIGNMENT)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_PARTY_ASSIGNMENT_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TIME_SYNC_RESP)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TIME_SYNC_RESP_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_MOVE_START_DESCEND)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_MOVE_START_DESCEND_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_RAID_READY_CHECK_CONFIRM)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_RAID_READY_CHECK_CONFIRM_Client_read(reader, _size - 4));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_VOICE_SESSION_ENABLE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_VOICE_SESSION_ENABLE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_COMMENTATOR_ENABLE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_COMMENTATOR_ENABLE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_RAID_READY_CHECK_FINISHED)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_RAID_READY_CHECK_FINISHED_Client{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_COMPLAIN)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_COMPLAIN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_DISPLAY_LIST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_DISPLAY_LIST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GET_CHANNEL_MEMBER_COUNT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANNEL_VOICE_ON)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANNEL_VOICE_ON{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REPORT_PVP_AFK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REPORT_PVP_AFK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_BANKER_ACTIVATE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_BANKER_ACTIVATE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_BANK_QUERY_TAB)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_BANK_QUERY_TAB_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_BANK_SWAP_ITEMS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_BANK_SWAP_ITEMS_read(reader, _size - 4));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_BANK_BUY_TAB)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_BANK_BUY_TAB_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_BANK_UPDATE_TAB)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_BANK_UPDATE_TAB_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_GUILD_BANK_LOG_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_GUILD_BANK_LOG_QUERY_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_CHANNEL_WATCH)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_CHANNEL_WATCH_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CLEAR_CHANNEL_WATCH)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CLEAR_CHANNEL_WATCH_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SPELLCLICK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SPELLCLICK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_GUILD_PERMISSIONS)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_GUILD_PERMISSIONS_Client{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_GUILD_EVENT_LOG_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_GUILD_EVENT_LOG_QUERY_Client{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GET_MIRRORIMAGE_DATA)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GET_MIRRORIMAGE_DATA_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_KEEP_ALIVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_KEEP_ALIVE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_OPT_OUT_OF_LOOT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_OPT_OUT_OF_LOOT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_QUERY_GUILD_BANK_TEXT)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_QUERY_GUILD_BANK_TEXT_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_GUILD_BANK_TEXT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_GUILD_BANK_TEXT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GRANT_LEVEL)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GRANT_LEVEL_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_TOTEM_DESTROYED)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_TOTEM_DESTROYED_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_SET_PLAYER_DECLINED_NAMES)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_SET_PLAYER_DECLINED_NAMES_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ACCEPT_LEVEL_GRANT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ACCEPT_LEVEL_GRANT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ALTER_APPEARANCE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ALTER_APPEARANCE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_GET_CALENDAR)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_GET_CALENDAR{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_GET_EVENT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_GET_EVENT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_GUILD_FILTER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_GUILD_FILTER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_ARENA_TEAM)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_ARENA_TEAM_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_ADD_EVENT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_ADD_EVENT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_UPDATE_EVENT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_UPDATE_EVENT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_REMOVE_EVENT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_REMOVE_EVENT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_COPY_EVENT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_COPY_EVENT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_INVITE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_EVENT_INVITE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_RSVP)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_EVENT_RSVP_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_STATUS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_EVENT_STATUS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_COMPLAIN)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_COMPLAIN_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_GET_NUM_PENDING)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_GET_NUM_PENDING{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_UPDATE_MISSILE_TRAJECTORY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_COMPLETE_MOVIE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_COMPLETE_MOVIE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_DISMISS_CONTROLLED_VEHICLE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHAR_CUSTOMIZE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHAR_CUSTOMIZE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REQUEST_VEHICLE_EXIT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REQUEST_VEHICLE_EXIT{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PET_LEARN_TALENT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PET_LEARN_TALENT_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GAMEOBJ_REPORT_USE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GAMEOBJ_REPORT_USE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_REMOVE_GLYPH)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_REMOVE_GLYPH_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_DISMISS_CRITTER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_DISMISS_CRITTER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_AUCTION_LIST_PENDING_SALES)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_AUCTION_LIST_PENDING_SALES_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ENABLETAXI)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ENABLETAXI_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_HEARTH_AND_RESURRECT)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_HEARTH_AND_RESURRECT{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_PLAYER_VEHICLE_ENTER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_PLAYER_VEHICLE_ENTER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CONTROLLER_EJECT_PASSENGER)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CONTROLLER_EJECT_PASSENGER_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ITEM_REFUND_INFO)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ITEM_REFUND_INFO_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_ITEM_REFUND)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_ITEM_REFUND_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CORPSE_MAP_POSITION_QUERY)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CORPSE_MAP_POSITION_QUERY_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_SIGNUP)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_EVENT_SIGNUP_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_EQUIPMENT_SET_SAVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_EQUIPMENT_SET_SAVE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_UPDATE_PROJECTILE_POSITION)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_UPDATE_PROJECTILE_POSITION_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LEARN_PREVIEW_TALENTS)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LEARN_PREVIEW_TALENTS_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_LEARN_PREVIEW_TALENTS_PET_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_EQUIPMENT_SET_USE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_EQUIPMENT_SET_USE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHAR_FACTION_CHANGE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHAR_FACTION_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::MSG_SET_RAID_DIFFICULTY)) {
        return ClientOpcode(::wow_world_messages::wrath::MSG_SET_RAID_DIFFICULTY_Client_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GMRESPONSE_RESOLVE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GMRESPONSE_RESOLVE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_CHAR_RACE_CHANGE)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_CHAR_RACE_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_QUERY_QUESTS_COMPLETED)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_QUERY_QUESTS_COMPLETED{});
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_GM_REPORT_LAG)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_GM_REPORT_LAG_read(reader));
    }
    if (opcode == static_cast<uint32_t>(ClientOpcode::Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK)) {
        return ClientOpcode(::wow_world_messages::wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK_read(reader));
    }

    return op;
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> ClientOpcode::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    if (this->opcode == ClientOpcode::Opcode::CMSG_BOOTME) {
        return this->CMSG_BOOTME.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_DBLOOKUP) {
        return this->CMSG_DBLOOKUP.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_WORLD_TELEPORT) {
        return this->CMSG_WORLD_TELEPORT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TELEPORT_TO_UNIT) {
        return this->CMSG_TELEPORT_TO_UNIT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHAR_CREATE) {
        return this->CMSG_CHAR_CREATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHAR_ENUM) {
        return this->CMSG_CHAR_ENUM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHAR_DELETE) {
        return this->CMSG_CHAR_DELETE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PLAYER_LOGIN) {
        return this->CMSG_PLAYER_LOGIN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PLAYER_LOGOUT) {
        return this->CMSG_PLAYER_LOGOUT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LOGOUT_REQUEST) {
        return this->CMSG_LOGOUT_REQUEST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LOGOUT_CANCEL) {
        return this->CMSG_LOGOUT_CANCEL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_NAME_QUERY) {
        return this->CMSG_NAME_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_NAME_QUERY) {
        return this->CMSG_PET_NAME_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_QUERY) {
        return this->CMSG_GUILD_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ITEM_QUERY_SINGLE) {
        return this->CMSG_ITEM_QUERY_SINGLE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PAGE_TEXT_QUERY) {
        return this->CMSG_PAGE_TEXT_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUEST_QUERY) {
        return this->CMSG_QUEST_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GAMEOBJECT_QUERY) {
        return this->CMSG_GAMEOBJECT_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CREATURE_QUERY) {
        return this->CMSG_CREATURE_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_WHO) {
        return this->CMSG_WHO.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_WHOIS) {
        return this->CMSG_WHOIS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CONTACT_LIST) {
        return this->CMSG_CONTACT_LIST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ADD_FRIEND) {
        return this->CMSG_ADD_FRIEND.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_DEL_FRIEND) {
        return this->CMSG_DEL_FRIEND.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_CONTACT_NOTES) {
        return this->CMSG_SET_CONTACT_NOTES.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ADD_IGNORE) {
        return this->CMSG_ADD_IGNORE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_DEL_IGNORE) {
        return this->CMSG_DEL_IGNORE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_INVITE) {
        return this->CMSG_GROUP_INVITE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_CANCEL) {
        return this->CMSG_GROUP_CANCEL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_ACCEPT) {
        return this->CMSG_GROUP_ACCEPT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_DECLINE) {
        return this->CMSG_GROUP_DECLINE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_UNINVITE) {
        return this->CMSG_GROUP_UNINVITE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_UNINVITE_GUID) {
        return this->CMSG_GROUP_UNINVITE_GUID.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_SET_LEADER) {
        return this->CMSG_GROUP_SET_LEADER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LOOT_METHOD) {
        return this->CMSG_LOOT_METHOD.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_DISBAND) {
        return this->CMSG_GROUP_DISBAND.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_CREATE) {
        return this->CMSG_GUILD_CREATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_INVITE) {
        return this->CMSG_GUILD_INVITE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_ACCEPT) {
        return this->CMSG_GUILD_ACCEPT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_DECLINE) {
        return this->CMSG_GUILD_DECLINE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_INFO) {
        return this->CMSG_GUILD_INFO.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_ROSTER) {
        return this->CMSG_GUILD_ROSTER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_PROMOTE) {
        return this->CMSG_GUILD_PROMOTE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_DEMOTE) {
        return this->CMSG_GUILD_DEMOTE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_LEAVE) {
        return this->CMSG_GUILD_LEAVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_REMOVE) {
        return this->CMSG_GUILD_REMOVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_DISBAND) {
        return this->CMSG_GUILD_DISBAND.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_LEADER) {
        return this->CMSG_GUILD_LEADER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_MOTD) {
        return this->CMSG_GUILD_MOTD.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MESSAGECHAT) {
        return this->CMSG_MESSAGECHAT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_JOIN_CHANNEL) {
        return this->CMSG_JOIN_CHANNEL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LEAVE_CHANNEL) {
        return this->CMSG_LEAVE_CHANNEL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_LIST) {
        return this->CMSG_CHANNEL_LIST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_PASSWORD) {
        return this->CMSG_CHANNEL_PASSWORD.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_SET_OWNER) {
        return this->CMSG_CHANNEL_SET_OWNER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_OWNER) {
        return this->CMSG_CHANNEL_OWNER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_MODERATOR) {
        return this->CMSG_CHANNEL_MODERATOR.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_UNMODERATOR) {
        return this->CMSG_CHANNEL_UNMODERATOR.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_MUTE) {
        return this->CMSG_CHANNEL_MUTE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_UNMUTE) {
        return this->CMSG_CHANNEL_UNMUTE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_INVITE) {
        return this->CMSG_CHANNEL_INVITE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_KICK) {
        return this->CMSG_CHANNEL_KICK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_BAN) {
        return this->CMSG_CHANNEL_BAN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_UNBAN) {
        return this->CMSG_CHANNEL_UNBAN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) {
        return this->CMSG_CHANNEL_ANNOUNCEMENTS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_MODERATE) {
        return this->CMSG_CHANNEL_MODERATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_USE_ITEM) {
        return this->CMSG_USE_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_OPEN_ITEM) {
        return this->CMSG_OPEN_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_READ_ITEM) {
        return this->CMSG_READ_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GAMEOBJ_USE) {
        return this->CMSG_GAMEOBJ_USE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AREATRIGGER) {
        return this->CMSG_AREATRIGGER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_FORWARD) {
        return this->MSG_MOVE_START_FORWARD.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_BACKWARD) {
        return this->MSG_MOVE_START_BACKWARD.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_STOP) {
        return this->MSG_MOVE_STOP.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        return this->MSG_MOVE_START_STRAFE_LEFT.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        return this->MSG_MOVE_START_STRAFE_RIGHT.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_STOP_STRAFE) {
        return this->MSG_MOVE_STOP_STRAFE.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_JUMP) {
        return this->MSG_MOVE_JUMP.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_TURN_LEFT) {
        return this->MSG_MOVE_START_TURN_LEFT.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_TURN_RIGHT) {
        return this->MSG_MOVE_START_TURN_RIGHT.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_STOP_TURN) {
        return this->MSG_MOVE_STOP_TURN.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_PITCH_UP) {
        return this->MSG_MOVE_START_PITCH_UP.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_PITCH_DOWN) {
        return this->MSG_MOVE_START_PITCH_DOWN.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_STOP_PITCH) {
        return this->MSG_MOVE_STOP_PITCH.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_SET_RUN_MODE) {
        return this->MSG_MOVE_SET_RUN_MODE.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_SET_WALK_MODE) {
        return this->MSG_MOVE_SET_WALK_MODE.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_TELEPORT) {
        return this->MSG_MOVE_TELEPORT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_TELEPORT_ACK) {
        return this->MSG_MOVE_TELEPORT_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_FALL_LAND) {
        return this->MSG_MOVE_FALL_LAND.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_SWIM) {
        return this->MSG_MOVE_START_SWIM.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_STOP_SWIM) {
        return this->MSG_MOVE_STOP_SWIM.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_SET_FACING) {
        return this->MSG_MOVE_SET_FACING.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_SET_PITCH) {
        return this->MSG_MOVE_SET_PITCH.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_WORLDPORT_ACK) {
        return this->MSG_MOVE_WORLDPORT_ACK.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_SET_RAW_POSITION) {
        return this->CMSG_MOVE_SET_RAW_POSITION.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) {
        return this->CMSG_FORCE_RUN_SPEED_CHANGE_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) {
        return this->CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) {
        return this->CMSG_FORCE_SWIM_SPEED_CHANGE_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FORCE_MOVE_ROOT_ACK) {
        return this->CMSG_FORCE_MOVE_ROOT_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) {
        return this->CMSG_FORCE_MOVE_UNROOT_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_HEARTBEAT) {
        return this->MSG_MOVE_HEARTBEAT.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_KNOCK_BACK_ACK) {
        return this->CMSG_MOVE_KNOCK_BACK_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_HOVER_ACK) {
        return this->CMSG_MOVE_HOVER_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_HOVER) {
        return this->MSG_MOVE_HOVER.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_NEXT_CINEMATIC_CAMERA) {
        return this->CMSG_NEXT_CINEMATIC_CAMERA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_COMPLETE_CINEMATIC) {
        return this->CMSG_COMPLETE_CINEMATIC.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TUTORIAL_FLAG) {
        return this->CMSG_TUTORIAL_FLAG.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TUTORIAL_CLEAR) {
        return this->CMSG_TUTORIAL_CLEAR.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TUTORIAL_RESET) {
        return this->CMSG_TUTORIAL_RESET.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_STANDSTATECHANGE) {
        return this->CMSG_STANDSTATECHANGE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_EMOTE) {
        return this->CMSG_EMOTE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TEXT_EMOTE) {
        return this->CMSG_TEXT_EMOTE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUTOSTORE_LOOT_ITEM) {
        return this->CMSG_AUTOSTORE_LOOT_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUTOEQUIP_ITEM) {
        return this->CMSG_AUTOEQUIP_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUTOSTORE_BAG_ITEM) {
        return this->CMSG_AUTOSTORE_BAG_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SWAP_ITEM) {
        return this->CMSG_SWAP_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SWAP_INV_ITEM) {
        return this->CMSG_SWAP_INV_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SPLIT_ITEM) {
        return this->CMSG_SPLIT_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) {
        return this->CMSG_AUTOEQUIP_ITEM_SLOT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_DESTROYITEM) {
        return this->CMSG_DESTROYITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_INSPECT) {
        return this->CMSG_INSPECT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_INITIATE_TRADE) {
        return this->CMSG_INITIATE_TRADE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BEGIN_TRADE) {
        return this->CMSG_BEGIN_TRADE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BUSY_TRADE) {
        return this->CMSG_BUSY_TRADE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_IGNORE_TRADE) {
        return this->CMSG_IGNORE_TRADE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ACCEPT_TRADE) {
        return this->CMSG_ACCEPT_TRADE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_UNACCEPT_TRADE) {
        return this->CMSG_UNACCEPT_TRADE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CANCEL_TRADE) {
        return this->CMSG_CANCEL_TRADE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_TRADE_ITEM) {
        return this->CMSG_SET_TRADE_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CLEAR_TRADE_ITEM) {
        return this->CMSG_CLEAR_TRADE_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_TRADE_GOLD) {
        return this->CMSG_SET_TRADE_GOLD.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_FACTION_ATWAR) {
        return this->CMSG_SET_FACTION_ATWAR.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_ACTION_BUTTON) {
        return this->CMSG_SET_ACTION_BUTTON.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CAST_SPELL) {
        return this->CMSG_CAST_SPELL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CANCEL_CAST) {
        return this->CMSG_CANCEL_CAST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CANCEL_AURA) {
        return this->CMSG_CANCEL_AURA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CANCEL_CHANNELLING) {
        return this->CMSG_CANCEL_CHANNELLING.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_SELECTION) {
        return this->CMSG_SET_SELECTION.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_DELETEEQUIPMENT_SET) {
        return this->CMSG_DELETEEQUIPMENT_SET.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_INSTANCE_LOCK_RESPONSE) {
        return this->CMSG_INSTANCE_LOCK_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ATTACKSWING) {
        return this->CMSG_ATTACKSWING.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ATTACKSTOP) {
        return this->CMSG_ATTACKSTOP.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REPOP_REQUEST) {
        return this->CMSG_REPOP_REQUEST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_RESURRECT_RESPONSE) {
        return this->CMSG_RESURRECT_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LOOT) {
        return this->CMSG_LOOT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LOOT_MONEY) {
        return this->CMSG_LOOT_MONEY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LOOT_RELEASE) {
        return this->CMSG_LOOT_RELEASE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_DUEL_ACCEPTED) {
        return this->CMSG_DUEL_ACCEPTED.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_DUEL_CANCELLED) {
        return this->CMSG_DUEL_CANCELLED.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOUNTSPECIAL_ANIM) {
        return this->CMSG_MOUNTSPECIAL_ANIM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_SET_ACTION) {
        return this->CMSG_PET_SET_ACTION.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_ACTION) {
        return this->CMSG_PET_ACTION.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_ABANDON) {
        return this->CMSG_PET_ABANDON.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_RENAME) {
        return this->CMSG_PET_RENAME.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GOSSIP_HELLO) {
        return this->CMSG_GOSSIP_HELLO.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GOSSIP_SELECT_OPTION) {
        return this->CMSG_GOSSIP_SELECT_OPTION.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_NPC_TEXT_QUERY) {
        return this->CMSG_NPC_TEXT_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTGIVER_STATUS_QUERY) {
        return this->CMSG_QUESTGIVER_STATUS_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTGIVER_HELLO) {
        return this->CMSG_QUESTGIVER_HELLO.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTGIVER_QUERY_QUEST) {
        return this->CMSG_QUESTGIVER_QUERY_QUEST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) {
        return this->CMSG_QUESTGIVER_QUEST_AUTOLAUNCH.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) {
        return this->CMSG_QUESTGIVER_ACCEPT_QUEST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) {
        return this->CMSG_QUESTGIVER_COMPLETE_QUEST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) {
        return this->CMSG_QUESTGIVER_REQUEST_REWARD.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) {
        return this->CMSG_QUESTGIVER_CHOOSE_REWARD.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTGIVER_CANCEL) {
        return this->CMSG_QUESTGIVER_CANCEL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTLOG_SWAP_QUEST) {
        return this->CMSG_QUESTLOG_SWAP_QUEST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTLOG_REMOVE_QUEST) {
        return this->CMSG_QUESTLOG_REMOVE_QUEST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUEST_CONFIRM_ACCEPT) {
        return this->CMSG_QUEST_CONFIRM_ACCEPT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PUSHQUESTTOPARTY) {
        return this->CMSG_PUSHQUESTTOPARTY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LIST_INVENTORY) {
        return this->CMSG_LIST_INVENTORY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SELL_ITEM) {
        return this->CMSG_SELL_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BUY_ITEM) {
        return this->CMSG_BUY_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BUY_ITEM_IN_SLOT) {
        return this->CMSG_BUY_ITEM_IN_SLOT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TAXINODE_STATUS_QUERY) {
        return this->CMSG_TAXINODE_STATUS_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TAXIQUERYAVAILABLENODES) {
        return this->CMSG_TAXIQUERYAVAILABLENODES.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ACTIVATETAXI) {
        return this->CMSG_ACTIVATETAXI.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TRAINER_LIST) {
        return this->CMSG_TRAINER_LIST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TRAINER_BUY_SPELL) {
        return this->CMSG_TRAINER_BUY_SPELL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BINDER_ACTIVATE) {
        return this->CMSG_BINDER_ACTIVATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BANKER_ACTIVATE) {
        return this->CMSG_BANKER_ACTIVATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BUY_BANK_SLOT) {
        return this->CMSG_BUY_BANK_SLOT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PETITION_SHOWLIST) {
        return this->CMSG_PETITION_SHOWLIST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PETITION_BUY) {
        return this->CMSG_PETITION_BUY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PETITION_SHOW_SIGNATURES) {
        return this->CMSG_PETITION_SHOW_SIGNATURES.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PETITION_SIGN) {
        return this->CMSG_PETITION_SIGN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_PETITION_DECLINE) {
        return this->MSG_PETITION_DECLINE.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_OFFER_PETITION) {
        return this->CMSG_OFFER_PETITION.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TURN_IN_PETITION) {
        return this->CMSG_TURN_IN_PETITION.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PETITION_QUERY) {
        return this->CMSG_PETITION_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BUG) {
        return this->CMSG_BUG.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PLAYED_TIME) {
        return this->CMSG_PLAYED_TIME.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUERY_TIME) {
        return this->CMSG_QUERY_TIME.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_RECLAIM_CORPSE) {
        return this->CMSG_RECLAIM_CORPSE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_WRAP_ITEM) {
        return this->CMSG_WRAP_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MINIMAP_PING) {
        return this->MSG_MINIMAP_PING.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PING) {
        return this->CMSG_PING.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SETSHEATHED) {
        return this->CMSG_SETSHEATHED.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUEST_POI_QUERY) {
        return this->CMSG_QUEST_POI_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUTH_SESSION) {
        return this->CMSG_AUTH_SESSION.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_CAST_SPELL) {
        return this->CMSG_PET_CAST_SPELL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_SAVE_GUILD_EMBLEM) {
        return this->MSG_SAVE_GUILD_EMBLEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        return this->MSG_TABARDVENDOR_ACTIVATE.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ZONEUPDATE) {
        return this->CMSG_ZONEUPDATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_RANDOM_ROLL) {
        return this->MSG_RANDOM_ROLL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_UNLEARN_SKILL) {
        return this->CMSG_UNLEARN_SKILL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GMTICKET_CREATE) {
        return this->CMSG_GMTICKET_CREATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GMTICKET_UPDATETEXT) {
        return this->CMSG_GMTICKET_UPDATETEXT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REQUEST_ACCOUNT_DATA) {
        return this->CMSG_REQUEST_ACCOUNT_DATA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_UPDATE_ACCOUNT_DATA) {
        return this->CMSG_UPDATE_ACCOUNT_DATA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GMTICKET_GETTICKET) {
        return this->CMSG_GMTICKET_GETTICKET.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_UNLEARN_TALENTS) {
        return this->CMSG_UNLEARN_TALENTS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_CORPSE_QUERY) {
        return this->MSG_CORPSE_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GMTICKET_DELETETICKET) {
        return this->CMSG_GMTICKET_DELETETICKET.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GMTICKET_SYSTEMSTATUS) {
        return this->CMSG_GMTICKET_SYSTEMSTATUS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) {
        return this->CMSG_SPIRIT_HEALER_ACTIVATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHAT_IGNORED) {
        return this->CMSG_CHAT_IGNORED.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_RANK) {
        return this->CMSG_GUILD_RANK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_ADD_RANK) {
        return this->CMSG_GUILD_ADD_RANK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_DEL_RANK) {
        return this->CMSG_GUILD_DEL_RANK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) {
        return this->CMSG_GUILD_SET_PUBLIC_NOTE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_SET_OFFICER_NOTE) {
        return this->CMSG_GUILD_SET_OFFICER_NOTE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SEND_MAIL) {
        return this->CMSG_SEND_MAIL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GET_MAIL_LIST) {
        return this->CMSG_GET_MAIL_LIST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BATTLEFIELD_LIST) {
        return this->CMSG_BATTLEFIELD_LIST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ITEM_TEXT_QUERY) {
        return this->CMSG_ITEM_TEXT_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MAIL_TAKE_MONEY) {
        return this->CMSG_MAIL_TAKE_MONEY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MAIL_TAKE_ITEM) {
        return this->CMSG_MAIL_TAKE_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MAIL_MARK_AS_READ) {
        return this->CMSG_MAIL_MARK_AS_READ.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MAIL_RETURN_TO_SENDER) {
        return this->CMSG_MAIL_RETURN_TO_SENDER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MAIL_DELETE) {
        return this->CMSG_MAIL_DELETE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) {
        return this->CMSG_MAIL_CREATE_TEXT_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LEARN_TALENT) {
        return this->CMSG_LEARN_TALENT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TOGGLE_PVP) {
        return this->CMSG_TOGGLE_PVP.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_AUCTION_HELLO) {
        return this->MSG_AUCTION_HELLO.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUCTION_SELL_ITEM) {
        return this->CMSG_AUCTION_SELL_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUCTION_REMOVE_ITEM) {
        return this->CMSG_AUCTION_REMOVE_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUCTION_LIST_ITEMS) {
        return this->CMSG_AUCTION_LIST_ITEMS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) {
        return this->CMSG_AUCTION_LIST_OWNER_ITEMS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUCTION_PLACE_BID) {
        return this->CMSG_AUCTION_PLACE_BID.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) {
        return this->CMSG_AUCTION_LIST_BIDDER_ITEMS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_AMMO) {
        return this->CMSG_SET_AMMO.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_ACTIVE_MOVER) {
        return this->CMSG_SET_ACTIVE_MOVER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_CANCEL_AURA) {
        return this->CMSG_PET_CANCEL_AURA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) {
        return this->CMSG_CANCEL_AUTO_REPEAT_SPELL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_LIST_STABLED_PETS) {
        return this->MSG_LIST_STABLED_PETS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_STABLE_PET) {
        return this->CMSG_STABLE_PET.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_UNSTABLE_PET) {
        return this->CMSG_UNSTABLE_PET.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BUY_STABLE_SLOT) {
        return this->CMSG_BUY_STABLE_SLOT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_STABLE_SWAP_PET) {
        return this->CMSG_STABLE_SWAP_PET.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_QUEST_PUSH_RESULT) {
        return this->MSG_QUEST_PUSH_RESULT.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REQUEST_PET_INFO) {
        return this->CMSG_REQUEST_PET_INFO.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FAR_SIGHT) {
        return this->CMSG_FAR_SIGHT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) {
        return this->CMSG_GROUP_CHANGE_SUB_GROUP.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) {
        return this->CMSG_REQUEST_PARTY_MEMBER_STATS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_SWAP_SUB_GROUP) {
        return this->CMSG_GROUP_SWAP_SUB_GROUP.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUTOSTORE_BANK_ITEM) {
        return this->CMSG_AUTOSTORE_BANK_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUTOBANK_ITEM) {
        return this->CMSG_AUTOBANK_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        return this->MSG_QUERY_NEXT_MAIL_TIME.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_RAID_CONVERT) {
        return this->CMSG_GROUP_RAID_CONVERT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GROUP_ASSISTANT_LEADER) {
        return this->CMSG_GROUP_ASSISTANT_LEADER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BUYBACK_ITEM) {
        return this->CMSG_BUYBACK_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) {
        return this->CMSG_SET_SAVED_INSTANCE_EXTEND.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LFG_GET_STATUS) {
        return this->CMSG_LFG_GET_STATUS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) {
        return this->CMSG_GMTICKETSYSTEM_TOGGLE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CANCEL_GROWTH_AURA) {
        return this->CMSG_CANCEL_GROWTH_AURA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LOOT_ROLL) {
        return this->CMSG_LOOT_ROLL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LOOT_MASTER_GIVE) {
        return this->CMSG_LOOT_MASTER_GIVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REPAIR_ITEM) {
        return this->CMSG_REPAIR_ITEM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_TALENT_WIPE_CONFIRM) {
        return this->MSG_TALENT_WIPE_CONFIRM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SUMMON_RESPONSE) {
        return this->CMSG_SUMMON_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_WATER_WALK) {
        return this->MSG_MOVE_WATER_WALK.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SELF_RES) {
        return this->CMSG_SELF_RES.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TOGGLE_HELM) {
        return this->CMSG_TOGGLE_HELM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TOGGLE_CLOAK) {
        return this->CMSG_TOGGLE_CLOAK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_ACTIONBAR_TOGGLES) {
        return this->CMSG_SET_ACTIONBAR_TOGGLES.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_PETITION_RENAME) {
        return this->MSG_PETITION_RENAME.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ITEM_NAME_QUERY) {
        return this->CMSG_ITEM_NAME_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHAR_RENAME) {
        return this->CMSG_CHAR_RENAME.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_SPLINE_DONE) {
        return this->CMSG_MOVE_SPLINE_DONE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_FALL_RESET) {
        return this->CMSG_MOVE_FALL_RESET.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REQUEST_RAID_INFO) {
        return this->CMSG_REQUEST_RAID_INFO.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_TIME_SKIPPED) {
        return this->CMSG_MOVE_TIME_SKIPPED.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_FEATHER_FALL_ACK) {
        return this->CMSG_MOVE_FEATHER_FALL_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_WATER_WALK_ACK) {
        return this->CMSG_MOVE_WATER_WALK_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) {
        return this->CMSG_MOVE_NOT_ACTIVE_MOVER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BATTLEFIELD_STATUS) {
        return this->CMSG_BATTLEFIELD_STATUS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BATTLEFIELD_PORT) {
        return this->CMSG_BATTLEFIELD_PORT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_INSPECT_HONOR_STATS) {
        return this->MSG_INSPECT_HONOR_STATS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BATTLEMASTER_HELLO) {
        return this->CMSG_BATTLEMASTER_HELLO.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) {
        return this->CMSG_FORCE_WALK_SPEED_CHANGE_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) {
        return this->CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) {
        return this->CMSG_FORCE_TURN_RATE_CHANGE_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_PVP_LOG_DATA) {
        return this->MSG_PVP_LOG_DATA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LEAVE_BATTLEFIELD) {
        return this->CMSG_LEAVE_BATTLEFIELD.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) {
        return this->CMSG_AREA_SPIRIT_HEALER_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) {
        return this->CMSG_AREA_SPIRIT_HEALER_QUEUE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_WARDEN_DATA) {
        return this->CMSG_WARDEN_DATA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        return this->MSG_BATTLEGROUND_PLAYER_POSITIONS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_STOP_ATTACK) {
        return this->CMSG_PET_STOP_ATTACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BATTLEMASTER_JOIN) {
        return this->CMSG_BATTLEMASTER_JOIN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_UNLEARN) {
        return this->CMSG_PET_UNLEARN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_SPELL_AUTOCAST) {
        return this->CMSG_PET_SPELL_AUTOCAST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_INFO_TEXT) {
        return this->CMSG_GUILD_INFO_TEXT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ACTIVATETAXIEXPRESS) {
        return this->CMSG_ACTIVATETAXIEXPRESS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_FACTION_INACTIVE) {
        return this->CMSG_SET_FACTION_INACTIVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_WATCHED_FACTION) {
        return this->CMSG_SET_WATCHED_FACTION.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_RESET_INSTANCES) {
        return this->CMSG_RESET_INSTANCES.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_RAID_TARGET_UPDATE) {
        return this->MSG_RAID_TARGET_UPDATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_RAID_READY_CHECK) {
        return this->MSG_RAID_READY_CHECK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        return this->MSG_SET_DUNGEON_DIFFICULTY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GMSURVEY_SUBMIT) {
        return this->CMSG_GMSURVEY_SUBMIT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) {
        return this->CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) {
        return this->CMSG_MOVE_SET_CAN_FLY_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_SET_FLY) {
        return this->CMSG_MOVE_SET_FLY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SOCKET_GEMS) {
        return this->CMSG_SOCKET_GEMS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ARENA_TEAM_ROSTER) {
        return this->CMSG_ARENA_TEAM_ROSTER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ARENA_TEAM_INVITE) {
        return this->CMSG_ARENA_TEAM_INVITE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ARENA_TEAM_ACCEPT) {
        return this->CMSG_ARENA_TEAM_ACCEPT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ARENA_TEAM_DECLINE) {
        return this->CMSG_ARENA_TEAM_DECLINE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ARENA_TEAM_LEAVE) {
        return this->CMSG_ARENA_TEAM_LEAVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ARENA_TEAM_REMOVE) {
        return this->CMSG_ARENA_TEAM_REMOVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ARENA_TEAM_DISBAND) {
        return this->CMSG_ARENA_TEAM_DISBAND.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ARENA_TEAM_LEADER) {
        return this->CMSG_ARENA_TEAM_LEADER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) {
        return this->CMSG_BATTLEMASTER_JOIN_ARENA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_ASCEND) {
        return this->MSG_MOVE_START_ASCEND.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_STOP_ASCEND) {
        return this->MSG_MOVE_STOP_ASCEND.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LFG_JOIN) {
        return this->CMSG_LFG_JOIN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LFG_LEAVE) {
        return this->CMSG_LFG_LEAVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SEARCH_LFG_JOIN) {
        return this->CMSG_SEARCH_LFG_JOIN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SEARCH_LFG_LEAVE) {
        return this->CMSG_SEARCH_LFG_LEAVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LFG_PROPOSAL_RESULT) {
        return this->CMSG_LFG_PROPOSAL_RESULT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_LFG_COMMENT) {
        return this->CMSG_SET_LFG_COMMENT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LFG_SET_ROLES) {
        return this->CMSG_LFG_SET_ROLES.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LFG_SET_BOOT_VOTE) {
        return this->CMSG_LFG_SET_BOOT_VOTE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) {
        return this->CMSG_LFD_PLAYER_LOCK_INFO_REQUEST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LFG_TELEPORT) {
        return this->CMSG_LFG_TELEPORT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) {
        return this->CMSG_LFD_PARTY_LOCK_INFO_REQUEST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_TITLE) {
        return this->CMSG_SET_TITLE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CANCEL_MOUNT_AURA) {
        return this->CMSG_CANCEL_MOUNT_AURA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_INSPECT_ARENA_TEAMS) {
        return this->MSG_INSPECT_ARENA_TEAMS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) {
        return this->CMSG_CANCEL_TEMP_ENCHANTMENT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        return this->MSG_MOVE_SET_FLIGHT_BACK_SPEED.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) {
        return this->CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) {
        return this->CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) {
        return this->CMSG_SET_TAXI_BENCHMARK_MODE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REALM_SPLIT) {
        return this->CMSG_REALM_SPLIT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_CHNG_TRANSPORT) {
        return this->CMSG_MOVE_CHNG_TRANSPORT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_PARTY_ASSIGNMENT) {
        return this->MSG_PARTY_ASSIGNMENT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TIME_SYNC_RESP) {
        return this->CMSG_TIME_SYNC_RESP.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_MOVE_START_DESCEND) {
        return this->MSG_MOVE_START_DESCEND.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        return this->MSG_RAID_READY_CHECK_CONFIRM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_VOICE_SESSION_ENABLE) {
        return this->CMSG_VOICE_SESSION_ENABLE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_COMMENTATOR_ENABLE) {
        return this->CMSG_COMMENTATOR_ENABLE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_RAID_READY_CHECK_FINISHED) {
        return this->MSG_RAID_READY_CHECK_FINISHED.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_COMPLAIN) {
        return this->CMSG_COMPLAIN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_DISPLAY_LIST) {
        return this->CMSG_CHANNEL_DISPLAY_LIST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) {
        return this->CMSG_SET_ACTIVE_VOICE_CHANNEL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) {
        return this->CMSG_GET_CHANNEL_MEMBER_COUNT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANNEL_VOICE_ON) {
        return this->CMSG_CHANNEL_VOICE_ON.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REPORT_PVP_AFK) {
        return this->CMSG_REPORT_PVP_AFK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_BANKER_ACTIVATE) {
        return this->CMSG_GUILD_BANKER_ACTIVATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_BANK_QUERY_TAB) {
        return this->CMSG_GUILD_BANK_QUERY_TAB.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) {
        return this->CMSG_GUILD_BANK_SWAP_ITEMS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_BANK_BUY_TAB) {
        return this->CMSG_GUILD_BANK_BUY_TAB.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_BANK_UPDATE_TAB) {
        return this->CMSG_GUILD_BANK_UPDATE_TAB.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) {
        return this->CMSG_GUILD_BANK_DEPOSIT_MONEY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) {
        return this->CMSG_GUILD_BANK_WITHDRAW_MONEY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        return this->MSG_GUILD_BANK_LOG_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_CHANNEL_WATCH) {
        return this->CMSG_SET_CHANNEL_WATCH.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CLEAR_CHANNEL_WATCH) {
        return this->CMSG_CLEAR_CHANNEL_WATCH.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SPELLCLICK) {
        return this->CMSG_SPELLCLICK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_GUILD_PERMISSIONS) {
        return this->MSG_GUILD_PERMISSIONS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        return this->MSG_GUILD_BANK_MONEY_WITHDRAWN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        return this->MSG_GUILD_EVENT_LOG_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GET_MIRRORIMAGE_DATA) {
        return this->CMSG_GET_MIRRORIMAGE_DATA.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_KEEP_ALIVE) {
        return this->CMSG_KEEP_ALIVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_OPT_OUT_OF_LOOT) {
        return this->CMSG_OPT_OUT_OF_LOOT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        return this->MSG_QUERY_GUILD_BANK_TEXT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_GUILD_BANK_TEXT) {
        return this->CMSG_SET_GUILD_BANK_TEXT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GRANT_LEVEL) {
        return this->CMSG_GRANT_LEVEL.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_TOTEM_DESTROYED) {
        return this->CMSG_TOTEM_DESTROYED.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) {
        return this->CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) {
        return this->CMSG_SET_PLAYER_DECLINED_NAMES.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ACCEPT_LEVEL_GRANT) {
        return this->CMSG_ACCEPT_LEVEL_GRANT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ALTER_APPEARANCE) {
        return this->CMSG_ALTER_APPEARANCE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_GET_CALENDAR) {
        return this->CMSG_CALENDAR_GET_CALENDAR.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_GET_EVENT) {
        return this->CMSG_CALENDAR_GET_EVENT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_GUILD_FILTER) {
        return this->CMSG_CALENDAR_GUILD_FILTER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_ARENA_TEAM) {
        return this->CMSG_CALENDAR_ARENA_TEAM.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_ADD_EVENT) {
        return this->CMSG_CALENDAR_ADD_EVENT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_UPDATE_EVENT) {
        return this->CMSG_CALENDAR_UPDATE_EVENT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_REMOVE_EVENT) {
        return this->CMSG_CALENDAR_REMOVE_EVENT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_COPY_EVENT) {
        return this->CMSG_CALENDAR_COPY_EVENT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_INVITE) {
        return this->CMSG_CALENDAR_EVENT_INVITE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_RSVP) {
        return this->CMSG_CALENDAR_EVENT_RSVP.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) {
        return this->CMSG_CALENDAR_EVENT_REMOVE_INVITE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_STATUS) {
        return this->CMSG_CALENDAR_EVENT_STATUS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) {
        return this->CMSG_CALENDAR_EVENT_MODERATOR_STATUS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_COMPLAIN) {
        return this->CMSG_CALENDAR_COMPLAIN.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        return this->CMSG_CALENDAR_GET_NUM_PENDING.write_cmsg(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) {
        return this->CMSG_UPDATE_MISSILE_TRAJECTORY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_COMPLETE_MOVIE) {
        return this->CMSG_COMPLETE_MOVIE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) {
        return this->CMSG_QUERY_INSPECT_ACHIEVEMENTS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) {
        return this->CMSG_DISMISS_CONTROLLED_VEHICLE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHAR_CUSTOMIZE) {
        return this->CMSG_CHAR_CUSTOMIZE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REQUEST_VEHICLE_EXIT) {
        return this->CMSG_REQUEST_VEHICLE_EXIT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) {
        return this->CMSG_REQUEST_VEHICLE_PREV_SEAT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) {
        return this->CMSG_REQUEST_VEHICLE_NEXT_SEAT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) {
        return this->CMSG_REQUEST_VEHICLE_SWITCH_SEAT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PET_LEARN_TALENT) {
        return this->CMSG_PET_LEARN_TALENT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GAMEOBJ_REPORT_USE) {
        return this->CMSG_GAMEOBJ_REPORT_USE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_REMOVE_GLYPH) {
        return this->CMSG_REMOVE_GLYPH.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_DISMISS_CRITTER) {
        return this->CMSG_DISMISS_CRITTER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_AUCTION_LIST_PENDING_SALES) {
        return this->CMSG_AUCTION_LIST_PENDING_SALES.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ENABLETAXI) {
        return this->CMSG_ENABLETAXI.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) {
        return this->CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_HEARTH_AND_RESURRECT) {
        return this->CMSG_HEARTH_AND_RESURRECT.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_PLAYER_VEHICLE_ENTER) {
        return this->CMSG_PLAYER_VEHICLE_ENTER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) {
        return this->CMSG_CONTROLLER_EJECT_PASSENGER.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ITEM_REFUND_INFO) {
        return this->CMSG_ITEM_REFUND_INFO.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_ITEM_REFUND) {
        return this->CMSG_ITEM_REFUND.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) {
        return this->CMSG_CORPSE_MAP_POSITION_QUERY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CALENDAR_EVENT_SIGNUP) {
        return this->CMSG_CALENDAR_EVENT_SIGNUP.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_EQUIPMENT_SET_SAVE) {
        return this->CMSG_EQUIPMENT_SET_SAVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_UPDATE_PROJECTILE_POSITION) {
        return this->CMSG_UPDATE_PROJECTILE_POSITION.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LEARN_PREVIEW_TALENTS) {
        return this->CMSG_LEARN_PREVIEW_TALENTS.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) {
        return this->CMSG_LEARN_PREVIEW_TALENTS_PET.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) {
        return this->CMSG_MOVE_GRAVITY_DISABLE_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) {
        return this->CMSG_MOVE_GRAVITY_ENABLE_ACK.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_EQUIPMENT_SET_USE) {
        return this->CMSG_EQUIPMENT_SET_USE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHAR_FACTION_CHANGE) {
        return this->CMSG_CHAR_FACTION_CHANGE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) {
        return this->CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) {
        return this->CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) {
        return this->CMSG_BATTLEFIELD_MGR_EXIT_REQUEST.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::MSG_SET_RAID_DIFFICULTY) {
        return this->MSG_SET_RAID_DIFFICULTY.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GMRESPONSE_RESOLVE) {
        return this->CMSG_GMRESPONSE_RESOLVE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        return this->CMSG_WORLD_STATE_UI_TIMER_UPDATE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_CHAR_RACE_CHANGE) {
        return this->CMSG_CHAR_RACE_CHANGE.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) {
        return this->CMSG_READY_FOR_ACCOUNT_DATA_TIMES.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_QUERY_QUESTS_COMPLETED) {
        return this->CMSG_QUERY_QUESTS_COMPLETED.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_GM_REPORT_LAG) {
        return this->CMSG_GM_REPORT_LAG.write(encrypt);;
    }
    if (this->opcode == ClientOpcode::Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) {
        return this->CMSG_MOVE_SET_COLLISION_HGT_ACK.write(encrypt);;
    }

    return {}; /* unreachable */
}
/* 1 destructor */
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::~ClientOpcode() {
    if (opcode == Opcode::CMSG_BOOTME) {
        this->CMSG_BOOTME.~CMSG_BOOTME();
    }
    if (opcode == Opcode::CMSG_DBLOOKUP) {
        this->CMSG_DBLOOKUP.~CMSG_DBLOOKUP();
    }
    if (opcode == Opcode::CMSG_WORLD_TELEPORT) {
        this->CMSG_WORLD_TELEPORT.~CMSG_WORLD_TELEPORT();
    }
    if (opcode == Opcode::CMSG_TELEPORT_TO_UNIT) {
        this->CMSG_TELEPORT_TO_UNIT.~CMSG_TELEPORT_TO_UNIT();
    }
    if (opcode == Opcode::CMSG_CHAR_CREATE) {
        this->CMSG_CHAR_CREATE.~CMSG_CHAR_CREATE();
    }
    if (opcode == Opcode::CMSG_CHAR_ENUM) {
        this->CMSG_CHAR_ENUM.~CMSG_CHAR_ENUM();
    }
    if (opcode == Opcode::CMSG_CHAR_DELETE) {
        this->CMSG_CHAR_DELETE.~CMSG_CHAR_DELETE();
    }
    if (opcode == Opcode::CMSG_PLAYER_LOGIN) {
        this->CMSG_PLAYER_LOGIN.~CMSG_PLAYER_LOGIN();
    }
    if (opcode == Opcode::CMSG_PLAYER_LOGOUT) {
        this->CMSG_PLAYER_LOGOUT.~CMSG_PLAYER_LOGOUT();
    }
    if (opcode == Opcode::CMSG_LOGOUT_REQUEST) {
        this->CMSG_LOGOUT_REQUEST.~CMSG_LOGOUT_REQUEST();
    }
    if (opcode == Opcode::CMSG_LOGOUT_CANCEL) {
        this->CMSG_LOGOUT_CANCEL.~CMSG_LOGOUT_CANCEL();
    }
    if (opcode == Opcode::CMSG_NAME_QUERY) {
        this->CMSG_NAME_QUERY.~CMSG_NAME_QUERY();
    }
    if (opcode == Opcode::CMSG_PET_NAME_QUERY) {
        this->CMSG_PET_NAME_QUERY.~CMSG_PET_NAME_QUERY();
    }
    if (opcode == Opcode::CMSG_GUILD_QUERY) {
        this->CMSG_GUILD_QUERY.~CMSG_GUILD_QUERY();
    }
    if (opcode == Opcode::CMSG_ITEM_QUERY_SINGLE) {
        this->CMSG_ITEM_QUERY_SINGLE.~CMSG_ITEM_QUERY_SINGLE();
    }
    if (opcode == Opcode::CMSG_PAGE_TEXT_QUERY) {
        this->CMSG_PAGE_TEXT_QUERY.~CMSG_PAGE_TEXT_QUERY();
    }
    if (opcode == Opcode::CMSG_QUEST_QUERY) {
        this->CMSG_QUEST_QUERY.~CMSG_QUEST_QUERY();
    }
    if (opcode == Opcode::CMSG_GAMEOBJECT_QUERY) {
        this->CMSG_GAMEOBJECT_QUERY.~CMSG_GAMEOBJECT_QUERY();
    }
    if (opcode == Opcode::CMSG_CREATURE_QUERY) {
        this->CMSG_CREATURE_QUERY.~CMSG_CREATURE_QUERY();
    }
    if (opcode == Opcode::CMSG_WHO) {
        this->CMSG_WHO.~CMSG_WHO();
    }
    if (opcode == Opcode::CMSG_WHOIS) {
        this->CMSG_WHOIS.~CMSG_WHOIS();
    }
    if (opcode == Opcode::CMSG_CONTACT_LIST) {
        this->CMSG_CONTACT_LIST.~CMSG_CONTACT_LIST();
    }
    if (opcode == Opcode::CMSG_ADD_FRIEND) {
        this->CMSG_ADD_FRIEND.~CMSG_ADD_FRIEND();
    }
    if (opcode == Opcode::CMSG_DEL_FRIEND) {
        this->CMSG_DEL_FRIEND.~CMSG_DEL_FRIEND();
    }
    if (opcode == Opcode::CMSG_SET_CONTACT_NOTES) {
        this->CMSG_SET_CONTACT_NOTES.~CMSG_SET_CONTACT_NOTES();
    }
    if (opcode == Opcode::CMSG_ADD_IGNORE) {
        this->CMSG_ADD_IGNORE.~CMSG_ADD_IGNORE();
    }
    if (opcode == Opcode::CMSG_DEL_IGNORE) {
        this->CMSG_DEL_IGNORE.~CMSG_DEL_IGNORE();
    }
    if (opcode == Opcode::CMSG_GROUP_INVITE) {
        this->CMSG_GROUP_INVITE.~CMSG_GROUP_INVITE();
    }
    if (opcode == Opcode::CMSG_GROUP_CANCEL) {
        this->CMSG_GROUP_CANCEL.~CMSG_GROUP_CANCEL();
    }
    if (opcode == Opcode::CMSG_GROUP_ACCEPT) {
        this->CMSG_GROUP_ACCEPT.~CMSG_GROUP_ACCEPT();
    }
    if (opcode == Opcode::CMSG_GROUP_DECLINE) {
        this->CMSG_GROUP_DECLINE.~CMSG_GROUP_DECLINE();
    }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE) {
        this->CMSG_GROUP_UNINVITE.~CMSG_GROUP_UNINVITE();
    }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE_GUID) {
        this->CMSG_GROUP_UNINVITE_GUID.~CMSG_GROUP_UNINVITE_GUID();
    }
    if (opcode == Opcode::CMSG_GROUP_SET_LEADER) {
        this->CMSG_GROUP_SET_LEADER.~CMSG_GROUP_SET_LEADER();
    }
    if (opcode == Opcode::CMSG_LOOT_METHOD) {
        this->CMSG_LOOT_METHOD.~CMSG_LOOT_METHOD();
    }
    if (opcode == Opcode::CMSG_GROUP_DISBAND) {
        this->CMSG_GROUP_DISBAND.~CMSG_GROUP_DISBAND();
    }
    if (opcode == Opcode::CMSG_GUILD_CREATE) {
        this->CMSG_GUILD_CREATE.~CMSG_GUILD_CREATE();
    }
    if (opcode == Opcode::CMSG_GUILD_INVITE) {
        this->CMSG_GUILD_INVITE.~CMSG_GUILD_INVITE();
    }
    if (opcode == Opcode::CMSG_GUILD_ACCEPT) {
        this->CMSG_GUILD_ACCEPT.~CMSG_GUILD_ACCEPT();
    }
    if (opcode == Opcode::CMSG_GUILD_DECLINE) {
        this->CMSG_GUILD_DECLINE.~CMSG_GUILD_DECLINE();
    }
    if (opcode == Opcode::CMSG_GUILD_INFO) {
        this->CMSG_GUILD_INFO.~CMSG_GUILD_INFO();
    }
    if (opcode == Opcode::CMSG_GUILD_ROSTER) {
        this->CMSG_GUILD_ROSTER.~CMSG_GUILD_ROSTER();
    }
    if (opcode == Opcode::CMSG_GUILD_PROMOTE) {
        this->CMSG_GUILD_PROMOTE.~CMSG_GUILD_PROMOTE();
    }
    if (opcode == Opcode::CMSG_GUILD_DEMOTE) {
        this->CMSG_GUILD_DEMOTE.~CMSG_GUILD_DEMOTE();
    }
    if (opcode == Opcode::CMSG_GUILD_LEAVE) {
        this->CMSG_GUILD_LEAVE.~CMSG_GUILD_LEAVE();
    }
    if (opcode == Opcode::CMSG_GUILD_REMOVE) {
        this->CMSG_GUILD_REMOVE.~CMSG_GUILD_REMOVE();
    }
    if (opcode == Opcode::CMSG_GUILD_DISBAND) {
        this->CMSG_GUILD_DISBAND.~CMSG_GUILD_DISBAND();
    }
    if (opcode == Opcode::CMSG_GUILD_LEADER) {
        this->CMSG_GUILD_LEADER.~CMSG_GUILD_LEADER();
    }
    if (opcode == Opcode::CMSG_GUILD_MOTD) {
        this->CMSG_GUILD_MOTD.~CMSG_GUILD_MOTD();
    }
    if (opcode == Opcode::CMSG_MESSAGECHAT) {
        this->CMSG_MESSAGECHAT.~CMSG_MESSAGECHAT();
    }
    if (opcode == Opcode::CMSG_JOIN_CHANNEL) {
        this->CMSG_JOIN_CHANNEL.~CMSG_JOIN_CHANNEL();
    }
    if (opcode == Opcode::CMSG_LEAVE_CHANNEL) {
        this->CMSG_LEAVE_CHANNEL.~CMSG_LEAVE_CHANNEL();
    }
    if (opcode == Opcode::CMSG_CHANNEL_LIST) {
        this->CMSG_CHANNEL_LIST.~CMSG_CHANNEL_LIST();
    }
    if (opcode == Opcode::CMSG_CHANNEL_PASSWORD) {
        this->CMSG_CHANNEL_PASSWORD.~CMSG_CHANNEL_PASSWORD();
    }
    if (opcode == Opcode::CMSG_CHANNEL_SET_OWNER) {
        this->CMSG_CHANNEL_SET_OWNER.~CMSG_CHANNEL_SET_OWNER();
    }
    if (opcode == Opcode::CMSG_CHANNEL_OWNER) {
        this->CMSG_CHANNEL_OWNER.~CMSG_CHANNEL_OWNER();
    }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATOR) {
        this->CMSG_CHANNEL_MODERATOR.~CMSG_CHANNEL_MODERATOR();
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNMODERATOR) {
        this->CMSG_CHANNEL_UNMODERATOR.~CMSG_CHANNEL_UNMODERATOR();
    }
    if (opcode == Opcode::CMSG_CHANNEL_MUTE) {
        this->CMSG_CHANNEL_MUTE.~CMSG_CHANNEL_MUTE();
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNMUTE) {
        this->CMSG_CHANNEL_UNMUTE.~CMSG_CHANNEL_UNMUTE();
    }
    if (opcode == Opcode::CMSG_CHANNEL_INVITE) {
        this->CMSG_CHANNEL_INVITE.~CMSG_CHANNEL_INVITE();
    }
    if (opcode == Opcode::CMSG_CHANNEL_KICK) {
        this->CMSG_CHANNEL_KICK.~CMSG_CHANNEL_KICK();
    }
    if (opcode == Opcode::CMSG_CHANNEL_BAN) {
        this->CMSG_CHANNEL_BAN.~CMSG_CHANNEL_BAN();
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNBAN) {
        this->CMSG_CHANNEL_UNBAN.~CMSG_CHANNEL_UNBAN();
    }
    if (opcode == Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) {
        this->CMSG_CHANNEL_ANNOUNCEMENTS.~CMSG_CHANNEL_ANNOUNCEMENTS();
    }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATE) {
        this->CMSG_CHANNEL_MODERATE.~CMSG_CHANNEL_MODERATE();
    }
    if (opcode == Opcode::CMSG_USE_ITEM) {
        this->CMSG_USE_ITEM.~CMSG_USE_ITEM();
    }
    if (opcode == Opcode::CMSG_OPEN_ITEM) {
        this->CMSG_OPEN_ITEM.~CMSG_OPEN_ITEM();
    }
    if (opcode == Opcode::CMSG_READ_ITEM) {
        this->CMSG_READ_ITEM.~CMSG_READ_ITEM();
    }
    if (opcode == Opcode::CMSG_GAMEOBJ_USE) {
        this->CMSG_GAMEOBJ_USE.~CMSG_GAMEOBJ_USE();
    }
    if (opcode == Opcode::CMSG_AREATRIGGER) {
        this->CMSG_AREATRIGGER.~CMSG_AREATRIGGER();
    }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        this->MSG_MOVE_START_FORWARD.~MSG_MOVE_START_FORWARD();
    }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        this->MSG_MOVE_START_BACKWARD.~MSG_MOVE_START_BACKWARD();
    }
    if (opcode == Opcode::MSG_MOVE_STOP) {
        this->MSG_MOVE_STOP.~MSG_MOVE_STOP();
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        this->MSG_MOVE_START_STRAFE_LEFT.~MSG_MOVE_START_STRAFE_LEFT();
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        this->MSG_MOVE_START_STRAFE_RIGHT.~MSG_MOVE_START_STRAFE_RIGHT();
    }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        this->MSG_MOVE_STOP_STRAFE.~MSG_MOVE_STOP_STRAFE();
    }
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        this->MSG_MOVE_JUMP.~MSG_MOVE_JUMP();
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        this->MSG_MOVE_START_TURN_LEFT.~MSG_MOVE_START_TURN_LEFT();
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        this->MSG_MOVE_START_TURN_RIGHT.~MSG_MOVE_START_TURN_RIGHT();
    }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        this->MSG_MOVE_STOP_TURN.~MSG_MOVE_STOP_TURN();
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        this->MSG_MOVE_START_PITCH_UP.~MSG_MOVE_START_PITCH_UP();
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        this->MSG_MOVE_START_PITCH_DOWN.~MSG_MOVE_START_PITCH_DOWN();
    }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        this->MSG_MOVE_STOP_PITCH.~MSG_MOVE_STOP_PITCH();
    }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        this->MSG_MOVE_SET_RUN_MODE.~MSG_MOVE_SET_RUN_MODE();
    }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        this->MSG_MOVE_SET_WALK_MODE.~MSG_MOVE_SET_WALK_MODE();
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT) {
        this->MSG_MOVE_TELEPORT.~MSG_MOVE_TELEPORT_Server();
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        this->MSG_MOVE_TELEPORT_ACK.~MSG_MOVE_TELEPORT_ACK_Client();
    }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        this->MSG_MOVE_FALL_LAND.~MSG_MOVE_FALL_LAND();
    }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        this->MSG_MOVE_START_SWIM.~MSG_MOVE_START_SWIM();
    }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        this->MSG_MOVE_STOP_SWIM.~MSG_MOVE_STOP_SWIM();
    }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        this->MSG_MOVE_SET_FACING.~MSG_MOVE_SET_FACING();
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        this->MSG_MOVE_SET_PITCH.~MSG_MOVE_SET_PITCH();
    }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        this->MSG_MOVE_WORLDPORT_ACK.~MSG_MOVE_WORLDPORT_ACK();
    }
    if (opcode == Opcode::CMSG_MOVE_SET_RAW_POSITION) {
        this->CMSG_MOVE_SET_RAW_POSITION.~CMSG_MOVE_SET_RAW_POSITION();
    }
    if (opcode == Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_RUN_SPEED_CHANGE_ACK.~CMSG_FORCE_RUN_SPEED_CHANGE_ACK();
    }
    if (opcode == Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK.~CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK();
    }
    if (opcode == Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_SWIM_SPEED_CHANGE_ACK.~CMSG_FORCE_SWIM_SPEED_CHANGE_ACK();
    }
    if (opcode == Opcode::CMSG_FORCE_MOVE_ROOT_ACK) {
        this->CMSG_FORCE_MOVE_ROOT_ACK.~CMSG_FORCE_MOVE_ROOT_ACK();
    }
    if (opcode == Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) {
        this->CMSG_FORCE_MOVE_UNROOT_ACK.~CMSG_FORCE_MOVE_UNROOT_ACK();
    }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        this->MSG_MOVE_HEARTBEAT.~MSG_MOVE_HEARTBEAT();
    }
    if (opcode == Opcode::CMSG_MOVE_KNOCK_BACK_ACK) {
        this->CMSG_MOVE_KNOCK_BACK_ACK.~CMSG_MOVE_KNOCK_BACK_ACK();
    }
    if (opcode == Opcode::CMSG_MOVE_HOVER_ACK) {
        this->CMSG_MOVE_HOVER_ACK.~CMSG_MOVE_HOVER_ACK();
    }
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        this->MSG_MOVE_HOVER.~MSG_MOVE_HOVER();
    }
    if (opcode == Opcode::CMSG_NEXT_CINEMATIC_CAMERA) {
        this->CMSG_NEXT_CINEMATIC_CAMERA.~CMSG_NEXT_CINEMATIC_CAMERA();
    }
    if (opcode == Opcode::CMSG_COMPLETE_CINEMATIC) {
        this->CMSG_COMPLETE_CINEMATIC.~CMSG_COMPLETE_CINEMATIC();
    }
    if (opcode == Opcode::CMSG_TUTORIAL_FLAG) {
        this->CMSG_TUTORIAL_FLAG.~CMSG_TUTORIAL_FLAG();
    }
    if (opcode == Opcode::CMSG_TUTORIAL_CLEAR) {
        this->CMSG_TUTORIAL_CLEAR.~CMSG_TUTORIAL_CLEAR();
    }
    if (opcode == Opcode::CMSG_TUTORIAL_RESET) {
        this->CMSG_TUTORIAL_RESET.~CMSG_TUTORIAL_RESET();
    }
    if (opcode == Opcode::CMSG_STANDSTATECHANGE) {
        this->CMSG_STANDSTATECHANGE.~CMSG_STANDSTATECHANGE();
    }
    if (opcode == Opcode::CMSG_EMOTE) {
        this->CMSG_EMOTE.~CMSG_EMOTE();
    }
    if (opcode == Opcode::CMSG_TEXT_EMOTE) {
        this->CMSG_TEXT_EMOTE.~CMSG_TEXT_EMOTE();
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_LOOT_ITEM) {
        this->CMSG_AUTOSTORE_LOOT_ITEM.~CMSG_AUTOSTORE_LOOT_ITEM();
    }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM) {
        this->CMSG_AUTOEQUIP_ITEM.~CMSG_AUTOEQUIP_ITEM();
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_BAG_ITEM) {
        this->CMSG_AUTOSTORE_BAG_ITEM.~CMSG_AUTOSTORE_BAG_ITEM();
    }
    if (opcode == Opcode::CMSG_SWAP_ITEM) {
        this->CMSG_SWAP_ITEM.~CMSG_SWAP_ITEM();
    }
    if (opcode == Opcode::CMSG_SWAP_INV_ITEM) {
        this->CMSG_SWAP_INV_ITEM.~CMSG_SWAP_INV_ITEM();
    }
    if (opcode == Opcode::CMSG_SPLIT_ITEM) {
        this->CMSG_SPLIT_ITEM.~CMSG_SPLIT_ITEM();
    }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) {
        this->CMSG_AUTOEQUIP_ITEM_SLOT.~CMSG_AUTOEQUIP_ITEM_SLOT();
    }
    if (opcode == Opcode::CMSG_DESTROYITEM) {
        this->CMSG_DESTROYITEM.~CMSG_DESTROYITEM();
    }
    if (opcode == Opcode::CMSG_INSPECT) {
        this->CMSG_INSPECT.~CMSG_INSPECT();
    }
    if (opcode == Opcode::CMSG_INITIATE_TRADE) {
        this->CMSG_INITIATE_TRADE.~CMSG_INITIATE_TRADE();
    }
    if (opcode == Opcode::CMSG_BEGIN_TRADE) {
        this->CMSG_BEGIN_TRADE.~CMSG_BEGIN_TRADE();
    }
    if (opcode == Opcode::CMSG_BUSY_TRADE) {
        this->CMSG_BUSY_TRADE.~CMSG_BUSY_TRADE();
    }
    if (opcode == Opcode::CMSG_IGNORE_TRADE) {
        this->CMSG_IGNORE_TRADE.~CMSG_IGNORE_TRADE();
    }
    if (opcode == Opcode::CMSG_ACCEPT_TRADE) {
        this->CMSG_ACCEPT_TRADE.~CMSG_ACCEPT_TRADE();
    }
    if (opcode == Opcode::CMSG_UNACCEPT_TRADE) {
        this->CMSG_UNACCEPT_TRADE.~CMSG_UNACCEPT_TRADE();
    }
    if (opcode == Opcode::CMSG_CANCEL_TRADE) {
        this->CMSG_CANCEL_TRADE.~CMSG_CANCEL_TRADE();
    }
    if (opcode == Opcode::CMSG_SET_TRADE_ITEM) {
        this->CMSG_SET_TRADE_ITEM.~CMSG_SET_TRADE_ITEM();
    }
    if (opcode == Opcode::CMSG_CLEAR_TRADE_ITEM) {
        this->CMSG_CLEAR_TRADE_ITEM.~CMSG_CLEAR_TRADE_ITEM();
    }
    if (opcode == Opcode::CMSG_SET_TRADE_GOLD) {
        this->CMSG_SET_TRADE_GOLD.~CMSG_SET_TRADE_GOLD();
    }
    if (opcode == Opcode::CMSG_SET_FACTION_ATWAR) {
        this->CMSG_SET_FACTION_ATWAR.~CMSG_SET_FACTION_ATWAR();
    }
    if (opcode == Opcode::CMSG_SET_ACTION_BUTTON) {
        this->CMSG_SET_ACTION_BUTTON.~CMSG_SET_ACTION_BUTTON();
    }
    if (opcode == Opcode::CMSG_CAST_SPELL) {
        this->CMSG_CAST_SPELL.~CMSG_CAST_SPELL();
    }
    if (opcode == Opcode::CMSG_CANCEL_CAST) {
        this->CMSG_CANCEL_CAST.~CMSG_CANCEL_CAST();
    }
    if (opcode == Opcode::CMSG_CANCEL_AURA) {
        this->CMSG_CANCEL_AURA.~CMSG_CANCEL_AURA();
    }
    if (opcode == Opcode::CMSG_CANCEL_CHANNELLING) {
        this->CMSG_CANCEL_CHANNELLING.~CMSG_CANCEL_CHANNELLING();
    }
    if (opcode == Opcode::CMSG_SET_SELECTION) {
        this->CMSG_SET_SELECTION.~CMSG_SET_SELECTION();
    }
    if (opcode == Opcode::CMSG_DELETEEQUIPMENT_SET) {
        this->CMSG_DELETEEQUIPMENT_SET.~CMSG_DELETEEQUIPMENT_SET();
    }
    if (opcode == Opcode::CMSG_INSTANCE_LOCK_RESPONSE) {
        this->CMSG_INSTANCE_LOCK_RESPONSE.~CMSG_INSTANCE_LOCK_RESPONSE();
    }
    if (opcode == Opcode::CMSG_ATTACKSWING) {
        this->CMSG_ATTACKSWING.~CMSG_ATTACKSWING();
    }
    if (opcode == Opcode::CMSG_ATTACKSTOP) {
        this->CMSG_ATTACKSTOP.~CMSG_ATTACKSTOP();
    }
    if (opcode == Opcode::CMSG_REPOP_REQUEST) {
        this->CMSG_REPOP_REQUEST.~CMSG_REPOP_REQUEST();
    }
    if (opcode == Opcode::CMSG_RESURRECT_RESPONSE) {
        this->CMSG_RESURRECT_RESPONSE.~CMSG_RESURRECT_RESPONSE();
    }
    if (opcode == Opcode::CMSG_LOOT) {
        this->CMSG_LOOT.~CMSG_LOOT();
    }
    if (opcode == Opcode::CMSG_LOOT_MONEY) {
        this->CMSG_LOOT_MONEY.~CMSG_LOOT_MONEY();
    }
    if (opcode == Opcode::CMSG_LOOT_RELEASE) {
        this->CMSG_LOOT_RELEASE.~CMSG_LOOT_RELEASE();
    }
    if (opcode == Opcode::CMSG_DUEL_ACCEPTED) {
        this->CMSG_DUEL_ACCEPTED.~CMSG_DUEL_ACCEPTED();
    }
    if (opcode == Opcode::CMSG_DUEL_CANCELLED) {
        this->CMSG_DUEL_CANCELLED.~CMSG_DUEL_CANCELLED();
    }
    if (opcode == Opcode::CMSG_MOUNTSPECIAL_ANIM) {
        this->CMSG_MOUNTSPECIAL_ANIM.~CMSG_MOUNTSPECIAL_ANIM();
    }
    if (opcode == Opcode::CMSG_PET_SET_ACTION) {
        this->CMSG_PET_SET_ACTION.~CMSG_PET_SET_ACTION();
    }
    if (opcode == Opcode::CMSG_PET_ACTION) {
        this->CMSG_PET_ACTION.~CMSG_PET_ACTION();
    }
    if (opcode == Opcode::CMSG_PET_ABANDON) {
        this->CMSG_PET_ABANDON.~CMSG_PET_ABANDON();
    }
    if (opcode == Opcode::CMSG_PET_RENAME) {
        this->CMSG_PET_RENAME.~CMSG_PET_RENAME();
    }
    if (opcode == Opcode::CMSG_GOSSIP_HELLO) {
        this->CMSG_GOSSIP_HELLO.~CMSG_GOSSIP_HELLO();
    }
    if (opcode == Opcode::CMSG_GOSSIP_SELECT_OPTION) {
        this->CMSG_GOSSIP_SELECT_OPTION.~CMSG_GOSSIP_SELECT_OPTION();
    }
    if (opcode == Opcode::CMSG_NPC_TEXT_QUERY) {
        this->CMSG_NPC_TEXT_QUERY.~CMSG_NPC_TEXT_QUERY();
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_QUERY) {
        this->CMSG_QUESTGIVER_STATUS_QUERY.~CMSG_QUESTGIVER_STATUS_QUERY();
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_HELLO) {
        this->CMSG_QUESTGIVER_HELLO.~CMSG_QUESTGIVER_HELLO();
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUERY_QUEST) {
        this->CMSG_QUESTGIVER_QUERY_QUEST.~CMSG_QUESTGIVER_QUERY_QUEST();
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) {
        this->CMSG_QUESTGIVER_QUEST_AUTOLAUNCH.~CMSG_QUESTGIVER_QUEST_AUTOLAUNCH();
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) {
        this->CMSG_QUESTGIVER_ACCEPT_QUEST.~CMSG_QUESTGIVER_ACCEPT_QUEST();
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) {
        this->CMSG_QUESTGIVER_COMPLETE_QUEST.~CMSG_QUESTGIVER_COMPLETE_QUEST();
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) {
        this->CMSG_QUESTGIVER_REQUEST_REWARD.~CMSG_QUESTGIVER_REQUEST_REWARD();
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) {
        this->CMSG_QUESTGIVER_CHOOSE_REWARD.~CMSG_QUESTGIVER_CHOOSE_REWARD();
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_CANCEL) {
        this->CMSG_QUESTGIVER_CANCEL.~CMSG_QUESTGIVER_CANCEL();
    }
    if (opcode == Opcode::CMSG_QUESTLOG_SWAP_QUEST) {
        this->CMSG_QUESTLOG_SWAP_QUEST.~CMSG_QUESTLOG_SWAP_QUEST();
    }
    if (opcode == Opcode::CMSG_QUESTLOG_REMOVE_QUEST) {
        this->CMSG_QUESTLOG_REMOVE_QUEST.~CMSG_QUESTLOG_REMOVE_QUEST();
    }
    if (opcode == Opcode::CMSG_QUEST_CONFIRM_ACCEPT) {
        this->CMSG_QUEST_CONFIRM_ACCEPT.~CMSG_QUEST_CONFIRM_ACCEPT();
    }
    if (opcode == Opcode::CMSG_PUSHQUESTTOPARTY) {
        this->CMSG_PUSHQUESTTOPARTY.~CMSG_PUSHQUESTTOPARTY();
    }
    if (opcode == Opcode::CMSG_LIST_INVENTORY) {
        this->CMSG_LIST_INVENTORY.~CMSG_LIST_INVENTORY();
    }
    if (opcode == Opcode::CMSG_SELL_ITEM) {
        this->CMSG_SELL_ITEM.~CMSG_SELL_ITEM();
    }
    if (opcode == Opcode::CMSG_BUY_ITEM) {
        this->CMSG_BUY_ITEM.~CMSG_BUY_ITEM();
    }
    if (opcode == Opcode::CMSG_BUY_ITEM_IN_SLOT) {
        this->CMSG_BUY_ITEM_IN_SLOT.~CMSG_BUY_ITEM_IN_SLOT();
    }
    if (opcode == Opcode::CMSG_TAXINODE_STATUS_QUERY) {
        this->CMSG_TAXINODE_STATUS_QUERY.~CMSG_TAXINODE_STATUS_QUERY();
    }
    if (opcode == Opcode::CMSG_TAXIQUERYAVAILABLENODES) {
        this->CMSG_TAXIQUERYAVAILABLENODES.~CMSG_TAXIQUERYAVAILABLENODES();
    }
    if (opcode == Opcode::CMSG_ACTIVATETAXI) {
        this->CMSG_ACTIVATETAXI.~CMSG_ACTIVATETAXI();
    }
    if (opcode == Opcode::CMSG_TRAINER_LIST) {
        this->CMSG_TRAINER_LIST.~CMSG_TRAINER_LIST();
    }
    if (opcode == Opcode::CMSG_TRAINER_BUY_SPELL) {
        this->CMSG_TRAINER_BUY_SPELL.~CMSG_TRAINER_BUY_SPELL();
    }
    if (opcode == Opcode::CMSG_BINDER_ACTIVATE) {
        this->CMSG_BINDER_ACTIVATE.~CMSG_BINDER_ACTIVATE();
    }
    if (opcode == Opcode::CMSG_BANKER_ACTIVATE) {
        this->CMSG_BANKER_ACTIVATE.~CMSG_BANKER_ACTIVATE();
    }
    if (opcode == Opcode::CMSG_BUY_BANK_SLOT) {
        this->CMSG_BUY_BANK_SLOT.~CMSG_BUY_BANK_SLOT();
    }
    if (opcode == Opcode::CMSG_PETITION_SHOWLIST) {
        this->CMSG_PETITION_SHOWLIST.~CMSG_PETITION_SHOWLIST();
    }
    if (opcode == Opcode::CMSG_PETITION_BUY) {
        this->CMSG_PETITION_BUY.~CMSG_PETITION_BUY();
    }
    if (opcode == Opcode::CMSG_PETITION_SHOW_SIGNATURES) {
        this->CMSG_PETITION_SHOW_SIGNATURES.~CMSG_PETITION_SHOW_SIGNATURES();
    }
    if (opcode == Opcode::CMSG_PETITION_SIGN) {
        this->CMSG_PETITION_SIGN.~CMSG_PETITION_SIGN();
    }
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        this->MSG_PETITION_DECLINE.~MSG_PETITION_DECLINE();
    }
    if (opcode == Opcode::CMSG_OFFER_PETITION) {
        this->CMSG_OFFER_PETITION.~CMSG_OFFER_PETITION();
    }
    if (opcode == Opcode::CMSG_TURN_IN_PETITION) {
        this->CMSG_TURN_IN_PETITION.~CMSG_TURN_IN_PETITION();
    }
    if (opcode == Opcode::CMSG_PETITION_QUERY) {
        this->CMSG_PETITION_QUERY.~CMSG_PETITION_QUERY();
    }
    if (opcode == Opcode::CMSG_BUG) {
        this->CMSG_BUG.~CMSG_BUG();
    }
    if (opcode == Opcode::CMSG_PLAYED_TIME) {
        this->CMSG_PLAYED_TIME.~CMSG_PLAYED_TIME();
    }
    if (opcode == Opcode::CMSG_QUERY_TIME) {
        this->CMSG_QUERY_TIME.~CMSG_QUERY_TIME();
    }
    if (opcode == Opcode::CMSG_RECLAIM_CORPSE) {
        this->CMSG_RECLAIM_CORPSE.~CMSG_RECLAIM_CORPSE();
    }
    if (opcode == Opcode::CMSG_WRAP_ITEM) {
        this->CMSG_WRAP_ITEM.~CMSG_WRAP_ITEM();
    }
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        this->MSG_MINIMAP_PING.~MSG_MINIMAP_PING_Client();
    }
    if (opcode == Opcode::CMSG_PING) {
        this->CMSG_PING.~CMSG_PING();
    }
    if (opcode == Opcode::CMSG_SETSHEATHED) {
        this->CMSG_SETSHEATHED.~CMSG_SETSHEATHED();
    }
    if (opcode == Opcode::CMSG_QUEST_POI_QUERY) {
        this->CMSG_QUEST_POI_QUERY.~CMSG_QUEST_POI_QUERY();
    }
    if (opcode == Opcode::CMSG_AUTH_SESSION) {
        this->CMSG_AUTH_SESSION.~CMSG_AUTH_SESSION();
    }
    if (opcode == Opcode::CMSG_PET_CAST_SPELL) {
        this->CMSG_PET_CAST_SPELL.~CMSG_PET_CAST_SPELL();
    }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        this->MSG_SAVE_GUILD_EMBLEM.~MSG_SAVE_GUILD_EMBLEM_Client();
    }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        this->MSG_TABARDVENDOR_ACTIVATE.~MSG_TABARDVENDOR_ACTIVATE();
    }
    if (opcode == Opcode::CMSG_ZONEUPDATE) {
        this->CMSG_ZONEUPDATE.~CMSG_ZONEUPDATE();
    }
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        this->MSG_RANDOM_ROLL.~MSG_RANDOM_ROLL_Client();
    }
    if (opcode == Opcode::CMSG_UNLEARN_SKILL) {
        this->CMSG_UNLEARN_SKILL.~CMSG_UNLEARN_SKILL();
    }
    if (opcode == Opcode::CMSG_GMTICKET_CREATE) {
        this->CMSG_GMTICKET_CREATE.~CMSG_GMTICKET_CREATE();
    }
    if (opcode == Opcode::CMSG_GMTICKET_UPDATETEXT) {
        this->CMSG_GMTICKET_UPDATETEXT.~CMSG_GMTICKET_UPDATETEXT();
    }
    if (opcode == Opcode::CMSG_REQUEST_ACCOUNT_DATA) {
        this->CMSG_REQUEST_ACCOUNT_DATA.~CMSG_REQUEST_ACCOUNT_DATA();
    }
    if (opcode == Opcode::CMSG_UPDATE_ACCOUNT_DATA) {
        this->CMSG_UPDATE_ACCOUNT_DATA.~CMSG_UPDATE_ACCOUNT_DATA();
    }
    if (opcode == Opcode::CMSG_GMTICKET_GETTICKET) {
        this->CMSG_GMTICKET_GETTICKET.~CMSG_GMTICKET_GETTICKET();
    }
    if (opcode == Opcode::CMSG_UNLEARN_TALENTS) {
        this->CMSG_UNLEARN_TALENTS.~CMSG_UNLEARN_TALENTS();
    }
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        this->MSG_CORPSE_QUERY.~MSG_CORPSE_QUERY_Client();
    }
    if (opcode == Opcode::CMSG_GMTICKET_DELETETICKET) {
        this->CMSG_GMTICKET_DELETETICKET.~CMSG_GMTICKET_DELETETICKET();
    }
    if (opcode == Opcode::CMSG_GMTICKET_SYSTEMSTATUS) {
        this->CMSG_GMTICKET_SYSTEMSTATUS.~CMSG_GMTICKET_SYSTEMSTATUS();
    }
    if (opcode == Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) {
        this->CMSG_SPIRIT_HEALER_ACTIVATE.~CMSG_SPIRIT_HEALER_ACTIVATE();
    }
    if (opcode == Opcode::CMSG_CHAT_IGNORED) {
        this->CMSG_CHAT_IGNORED.~CMSG_CHAT_IGNORED();
    }
    if (opcode == Opcode::CMSG_GUILD_RANK) {
        this->CMSG_GUILD_RANK.~CMSG_GUILD_RANK();
    }
    if (opcode == Opcode::CMSG_GUILD_ADD_RANK) {
        this->CMSG_GUILD_ADD_RANK.~CMSG_GUILD_ADD_RANK();
    }
    if (opcode == Opcode::CMSG_GUILD_DEL_RANK) {
        this->CMSG_GUILD_DEL_RANK.~CMSG_GUILD_DEL_RANK();
    }
    if (opcode == Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) {
        this->CMSG_GUILD_SET_PUBLIC_NOTE.~CMSG_GUILD_SET_PUBLIC_NOTE();
    }
    if (opcode == Opcode::CMSG_GUILD_SET_OFFICER_NOTE) {
        this->CMSG_GUILD_SET_OFFICER_NOTE.~CMSG_GUILD_SET_OFFICER_NOTE();
    }
    if (opcode == Opcode::CMSG_SEND_MAIL) {
        this->CMSG_SEND_MAIL.~CMSG_SEND_MAIL();
    }
    if (opcode == Opcode::CMSG_GET_MAIL_LIST) {
        this->CMSG_GET_MAIL_LIST.~CMSG_GET_MAIL_LIST();
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_LIST) {
        this->CMSG_BATTLEFIELD_LIST.~CMSG_BATTLEFIELD_LIST();
    }
    if (opcode == Opcode::CMSG_ITEM_TEXT_QUERY) {
        this->CMSG_ITEM_TEXT_QUERY.~CMSG_ITEM_TEXT_QUERY();
    }
    if (opcode == Opcode::CMSG_MAIL_TAKE_MONEY) {
        this->CMSG_MAIL_TAKE_MONEY.~CMSG_MAIL_TAKE_MONEY();
    }
    if (opcode == Opcode::CMSG_MAIL_TAKE_ITEM) {
        this->CMSG_MAIL_TAKE_ITEM.~CMSG_MAIL_TAKE_ITEM();
    }
    if (opcode == Opcode::CMSG_MAIL_MARK_AS_READ) {
        this->CMSG_MAIL_MARK_AS_READ.~CMSG_MAIL_MARK_AS_READ();
    }
    if (opcode == Opcode::CMSG_MAIL_RETURN_TO_SENDER) {
        this->CMSG_MAIL_RETURN_TO_SENDER.~CMSG_MAIL_RETURN_TO_SENDER();
    }
    if (opcode == Opcode::CMSG_MAIL_DELETE) {
        this->CMSG_MAIL_DELETE.~CMSG_MAIL_DELETE();
    }
    if (opcode == Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) {
        this->CMSG_MAIL_CREATE_TEXT_ITEM.~CMSG_MAIL_CREATE_TEXT_ITEM();
    }
    if (opcode == Opcode::CMSG_LEARN_TALENT) {
        this->CMSG_LEARN_TALENT.~CMSG_LEARN_TALENT();
    }
    if (opcode == Opcode::CMSG_TOGGLE_PVP) {
        this->CMSG_TOGGLE_PVP.~CMSG_TOGGLE_PVP();
    }
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        this->MSG_AUCTION_HELLO.~MSG_AUCTION_HELLO_Client();
    }
    if (opcode == Opcode::CMSG_AUCTION_SELL_ITEM) {
        this->CMSG_AUCTION_SELL_ITEM.~CMSG_AUCTION_SELL_ITEM();
    }
    if (opcode == Opcode::CMSG_AUCTION_REMOVE_ITEM) {
        this->CMSG_AUCTION_REMOVE_ITEM.~CMSG_AUCTION_REMOVE_ITEM();
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_ITEMS) {
        this->CMSG_AUCTION_LIST_ITEMS.~CMSG_AUCTION_LIST_ITEMS();
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) {
        this->CMSG_AUCTION_LIST_OWNER_ITEMS.~CMSG_AUCTION_LIST_OWNER_ITEMS();
    }
    if (opcode == Opcode::CMSG_AUCTION_PLACE_BID) {
        this->CMSG_AUCTION_PLACE_BID.~CMSG_AUCTION_PLACE_BID();
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) {
        this->CMSG_AUCTION_LIST_BIDDER_ITEMS.~CMSG_AUCTION_LIST_BIDDER_ITEMS();
    }
    if (opcode == Opcode::CMSG_SET_AMMO) {
        this->CMSG_SET_AMMO.~CMSG_SET_AMMO();
    }
    if (opcode == Opcode::CMSG_SET_ACTIVE_MOVER) {
        this->CMSG_SET_ACTIVE_MOVER.~CMSG_SET_ACTIVE_MOVER();
    }
    if (opcode == Opcode::CMSG_PET_CANCEL_AURA) {
        this->CMSG_PET_CANCEL_AURA.~CMSG_PET_CANCEL_AURA();
    }
    if (opcode == Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) {
        this->CMSG_CANCEL_AUTO_REPEAT_SPELL.~CMSG_CANCEL_AUTO_REPEAT_SPELL();
    }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        this->MSG_LIST_STABLED_PETS.~MSG_LIST_STABLED_PETS_Client();
    }
    if (opcode == Opcode::CMSG_STABLE_PET) {
        this->CMSG_STABLE_PET.~CMSG_STABLE_PET();
    }
    if (opcode == Opcode::CMSG_UNSTABLE_PET) {
        this->CMSG_UNSTABLE_PET.~CMSG_UNSTABLE_PET();
    }
    if (opcode == Opcode::CMSG_BUY_STABLE_SLOT) {
        this->CMSG_BUY_STABLE_SLOT.~CMSG_BUY_STABLE_SLOT();
    }
    if (opcode == Opcode::CMSG_STABLE_SWAP_PET) {
        this->CMSG_STABLE_SWAP_PET.~CMSG_STABLE_SWAP_PET();
    }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        this->MSG_QUEST_PUSH_RESULT.~MSG_QUEST_PUSH_RESULT();
    }
    if (opcode == Opcode::CMSG_REQUEST_PET_INFO) {
        this->CMSG_REQUEST_PET_INFO.~CMSG_REQUEST_PET_INFO();
    }
    if (opcode == Opcode::CMSG_FAR_SIGHT) {
        this->CMSG_FAR_SIGHT.~CMSG_FAR_SIGHT();
    }
    if (opcode == Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) {
        this->CMSG_GROUP_CHANGE_SUB_GROUP.~CMSG_GROUP_CHANGE_SUB_GROUP();
    }
    if (opcode == Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) {
        this->CMSG_REQUEST_PARTY_MEMBER_STATS.~CMSG_REQUEST_PARTY_MEMBER_STATS();
    }
    if (opcode == Opcode::CMSG_GROUP_SWAP_SUB_GROUP) {
        this->CMSG_GROUP_SWAP_SUB_GROUP.~CMSG_GROUP_SWAP_SUB_GROUP();
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_BANK_ITEM) {
        this->CMSG_AUTOSTORE_BANK_ITEM.~CMSG_AUTOSTORE_BANK_ITEM();
    }
    if (opcode == Opcode::CMSG_AUTOBANK_ITEM) {
        this->CMSG_AUTOBANK_ITEM.~CMSG_AUTOBANK_ITEM();
    }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        this->MSG_QUERY_NEXT_MAIL_TIME.~MSG_QUERY_NEXT_MAIL_TIME_Client();
    }
    if (opcode == Opcode::CMSG_GROUP_RAID_CONVERT) {
        this->CMSG_GROUP_RAID_CONVERT.~CMSG_GROUP_RAID_CONVERT();
    }
    if (opcode == Opcode::CMSG_GROUP_ASSISTANT_LEADER) {
        this->CMSG_GROUP_ASSISTANT_LEADER.~CMSG_GROUP_ASSISTANT_LEADER();
    }
    if (opcode == Opcode::CMSG_BUYBACK_ITEM) {
        this->CMSG_BUYBACK_ITEM.~CMSG_BUYBACK_ITEM();
    }
    if (opcode == Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) {
        this->CMSG_SET_SAVED_INSTANCE_EXTEND.~CMSG_SET_SAVED_INSTANCE_EXTEND();
    }
    if (opcode == Opcode::CMSG_LFG_GET_STATUS) {
        this->CMSG_LFG_GET_STATUS.~CMSG_LFG_GET_STATUS();
    }
    if (opcode == Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) {
        this->CMSG_GMTICKETSYSTEM_TOGGLE.~CMSG_GMTICKETSYSTEM_TOGGLE();
    }
    if (opcode == Opcode::CMSG_CANCEL_GROWTH_AURA) {
        this->CMSG_CANCEL_GROWTH_AURA.~CMSG_CANCEL_GROWTH_AURA();
    }
    if (opcode == Opcode::CMSG_LOOT_ROLL) {
        this->CMSG_LOOT_ROLL.~CMSG_LOOT_ROLL();
    }
    if (opcode == Opcode::CMSG_LOOT_MASTER_GIVE) {
        this->CMSG_LOOT_MASTER_GIVE.~CMSG_LOOT_MASTER_GIVE();
    }
    if (opcode == Opcode::CMSG_REPAIR_ITEM) {
        this->CMSG_REPAIR_ITEM.~CMSG_REPAIR_ITEM();
    }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        this->MSG_TALENT_WIPE_CONFIRM.~MSG_TALENT_WIPE_CONFIRM_Client();
    }
    if (opcode == Opcode::CMSG_SUMMON_RESPONSE) {
        this->CMSG_SUMMON_RESPONSE.~CMSG_SUMMON_RESPONSE();
    }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        this->MSG_MOVE_WATER_WALK.~MSG_MOVE_WATER_WALK();
    }
    if (opcode == Opcode::CMSG_SELF_RES) {
        this->CMSG_SELF_RES.~CMSG_SELF_RES();
    }
    if (opcode == Opcode::CMSG_TOGGLE_HELM) {
        this->CMSG_TOGGLE_HELM.~CMSG_TOGGLE_HELM();
    }
    if (opcode == Opcode::CMSG_TOGGLE_CLOAK) {
        this->CMSG_TOGGLE_CLOAK.~CMSG_TOGGLE_CLOAK();
    }
    if (opcode == Opcode::CMSG_SET_ACTIONBAR_TOGGLES) {
        this->CMSG_SET_ACTIONBAR_TOGGLES.~CMSG_SET_ACTIONBAR_TOGGLES();
    }
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        this->MSG_PETITION_RENAME.~MSG_PETITION_RENAME();
    }
    if (opcode == Opcode::CMSG_ITEM_NAME_QUERY) {
        this->CMSG_ITEM_NAME_QUERY.~CMSG_ITEM_NAME_QUERY();
    }
    if (opcode == Opcode::CMSG_CHAR_RENAME) {
        this->CMSG_CHAR_RENAME.~CMSG_CHAR_RENAME();
    }
    if (opcode == Opcode::CMSG_MOVE_SPLINE_DONE) {
        this->CMSG_MOVE_SPLINE_DONE.~CMSG_MOVE_SPLINE_DONE();
    }
    if (opcode == Opcode::CMSG_MOVE_FALL_RESET) {
        this->CMSG_MOVE_FALL_RESET.~CMSG_MOVE_FALL_RESET();
    }
    if (opcode == Opcode::CMSG_REQUEST_RAID_INFO) {
        this->CMSG_REQUEST_RAID_INFO.~CMSG_REQUEST_RAID_INFO();
    }
    if (opcode == Opcode::CMSG_MOVE_TIME_SKIPPED) {
        this->CMSG_MOVE_TIME_SKIPPED.~CMSG_MOVE_TIME_SKIPPED();
    }
    if (opcode == Opcode::CMSG_MOVE_FEATHER_FALL_ACK) {
        this->CMSG_MOVE_FEATHER_FALL_ACK.~CMSG_MOVE_FEATHER_FALL_ACK();
    }
    if (opcode == Opcode::CMSG_MOVE_WATER_WALK_ACK) {
        this->CMSG_MOVE_WATER_WALK_ACK.~CMSG_MOVE_WATER_WALK_ACK();
    }
    if (opcode == Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) {
        this->CMSG_MOVE_NOT_ACTIVE_MOVER.~CMSG_MOVE_NOT_ACTIVE_MOVER();
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_STATUS) {
        this->CMSG_BATTLEFIELD_STATUS.~CMSG_BATTLEFIELD_STATUS();
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_PORT) {
        this->CMSG_BATTLEFIELD_PORT.~CMSG_BATTLEFIELD_PORT();
    }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        this->MSG_INSPECT_HONOR_STATS.~MSG_INSPECT_HONOR_STATS_Client();
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_HELLO) {
        this->CMSG_BATTLEMASTER_HELLO.~CMSG_BATTLEMASTER_HELLO();
    }
    if (opcode == Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_WALK_SPEED_CHANGE_ACK.~CMSG_FORCE_WALK_SPEED_CHANGE_ACK();
    }
    if (opcode == Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK.~CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK();
    }
    if (opcode == Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) {
        this->CMSG_FORCE_TURN_RATE_CHANGE_ACK.~CMSG_FORCE_TURN_RATE_CHANGE_ACK();
    }
    if (opcode == Opcode::MSG_PVP_LOG_DATA) {
        this->MSG_PVP_LOG_DATA.~MSG_PVP_LOG_DATA_Client();
    }
    if (opcode == Opcode::CMSG_LEAVE_BATTLEFIELD) {
        this->CMSG_LEAVE_BATTLEFIELD.~CMSG_LEAVE_BATTLEFIELD();
    }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) {
        this->CMSG_AREA_SPIRIT_HEALER_QUERY.~CMSG_AREA_SPIRIT_HEALER_QUERY();
    }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) {
        this->CMSG_AREA_SPIRIT_HEALER_QUEUE.~CMSG_AREA_SPIRIT_HEALER_QUEUE();
    }
    if (opcode == Opcode::CMSG_WARDEN_DATA) {
        this->CMSG_WARDEN_DATA.~CMSG_WARDEN_DATA();
    }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        this->MSG_BATTLEGROUND_PLAYER_POSITIONS.~MSG_BATTLEGROUND_PLAYER_POSITIONS_Client();
    }
    if (opcode == Opcode::CMSG_PET_STOP_ATTACK) {
        this->CMSG_PET_STOP_ATTACK.~CMSG_PET_STOP_ATTACK();
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN) {
        this->CMSG_BATTLEMASTER_JOIN.~CMSG_BATTLEMASTER_JOIN();
    }
    if (opcode == Opcode::CMSG_PET_UNLEARN) {
        this->CMSG_PET_UNLEARN.~CMSG_PET_UNLEARN();
    }
    if (opcode == Opcode::CMSG_PET_SPELL_AUTOCAST) {
        this->CMSG_PET_SPELL_AUTOCAST.~CMSG_PET_SPELL_AUTOCAST();
    }
    if (opcode == Opcode::CMSG_GUILD_INFO_TEXT) {
        this->CMSG_GUILD_INFO_TEXT.~CMSG_GUILD_INFO_TEXT();
    }
    if (opcode == Opcode::CMSG_ACTIVATETAXIEXPRESS) {
        this->CMSG_ACTIVATETAXIEXPRESS.~CMSG_ACTIVATETAXIEXPRESS();
    }
    if (opcode == Opcode::CMSG_SET_FACTION_INACTIVE) {
        this->CMSG_SET_FACTION_INACTIVE.~CMSG_SET_FACTION_INACTIVE();
    }
    if (opcode == Opcode::CMSG_SET_WATCHED_FACTION) {
        this->CMSG_SET_WATCHED_FACTION.~CMSG_SET_WATCHED_FACTION();
    }
    if (opcode == Opcode::CMSG_RESET_INSTANCES) {
        this->CMSG_RESET_INSTANCES.~CMSG_RESET_INSTANCES();
    }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        this->MSG_RAID_TARGET_UPDATE.~MSG_RAID_TARGET_UPDATE_Client();
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        this->MSG_RAID_READY_CHECK.~MSG_RAID_READY_CHECK_Client();
    }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        this->MSG_SET_DUNGEON_DIFFICULTY.~MSG_SET_DUNGEON_DIFFICULTY_Client();
    }
    if (opcode == Opcode::CMSG_GMSURVEY_SUBMIT) {
        this->CMSG_GMSURVEY_SUBMIT.~CMSG_GMSURVEY_SUBMIT();
    }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) {
        this->CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK.~CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK();
    }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) {
        this->CMSG_MOVE_SET_CAN_FLY_ACK.~CMSG_MOVE_SET_CAN_FLY_ACK();
    }
    if (opcode == Opcode::CMSG_MOVE_SET_FLY) {
        this->CMSG_MOVE_SET_FLY.~CMSG_MOVE_SET_FLY();
    }
    if (opcode == Opcode::CMSG_SOCKET_GEMS) {
        this->CMSG_SOCKET_GEMS.~CMSG_SOCKET_GEMS();
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ROSTER) {
        this->CMSG_ARENA_TEAM_ROSTER.~CMSG_ARENA_TEAM_ROSTER();
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_INVITE) {
        this->CMSG_ARENA_TEAM_INVITE.~CMSG_ARENA_TEAM_INVITE();
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ACCEPT) {
        this->CMSG_ARENA_TEAM_ACCEPT.~CMSG_ARENA_TEAM_ACCEPT();
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DECLINE) {
        this->CMSG_ARENA_TEAM_DECLINE.~CMSG_ARENA_TEAM_DECLINE();
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEAVE) {
        this->CMSG_ARENA_TEAM_LEAVE.~CMSG_ARENA_TEAM_LEAVE();
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_REMOVE) {
        this->CMSG_ARENA_TEAM_REMOVE.~CMSG_ARENA_TEAM_REMOVE();
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DISBAND) {
        this->CMSG_ARENA_TEAM_DISBAND.~CMSG_ARENA_TEAM_DISBAND();
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEADER) {
        this->CMSG_ARENA_TEAM_LEADER.~CMSG_ARENA_TEAM_LEADER();
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) {
        this->CMSG_BATTLEMASTER_JOIN_ARENA.~CMSG_BATTLEMASTER_JOIN_ARENA();
    }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        this->MSG_MOVE_START_ASCEND.~MSG_MOVE_START_ASCEND();
    }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        this->MSG_MOVE_STOP_ASCEND.~MSG_MOVE_STOP_ASCEND();
    }
    if (opcode == Opcode::CMSG_LFG_JOIN) {
        this->CMSG_LFG_JOIN.~CMSG_LFG_JOIN();
    }
    if (opcode == Opcode::CMSG_LFG_LEAVE) {
        this->CMSG_LFG_LEAVE.~CMSG_LFG_LEAVE();
    }
    if (opcode == Opcode::CMSG_SEARCH_LFG_JOIN) {
        this->CMSG_SEARCH_LFG_JOIN.~CMSG_SEARCH_LFG_JOIN();
    }
    if (opcode == Opcode::CMSG_SEARCH_LFG_LEAVE) {
        this->CMSG_SEARCH_LFG_LEAVE.~CMSG_SEARCH_LFG_LEAVE();
    }
    if (opcode == Opcode::CMSG_LFG_PROPOSAL_RESULT) {
        this->CMSG_LFG_PROPOSAL_RESULT.~CMSG_LFG_PROPOSAL_RESULT();
    }
    if (opcode == Opcode::CMSG_SET_LFG_COMMENT) {
        this->CMSG_SET_LFG_COMMENT.~CMSG_SET_LFG_COMMENT();
    }
    if (opcode == Opcode::CMSG_LFG_SET_ROLES) {
        this->CMSG_LFG_SET_ROLES.~CMSG_LFG_SET_ROLES();
    }
    if (opcode == Opcode::CMSG_LFG_SET_BOOT_VOTE) {
        this->CMSG_LFG_SET_BOOT_VOTE.~CMSG_LFG_SET_BOOT_VOTE();
    }
    if (opcode == Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) {
        this->CMSG_LFD_PLAYER_LOCK_INFO_REQUEST.~CMSG_LFD_PLAYER_LOCK_INFO_REQUEST();
    }
    if (opcode == Opcode::CMSG_LFG_TELEPORT) {
        this->CMSG_LFG_TELEPORT.~CMSG_LFG_TELEPORT();
    }
    if (opcode == Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) {
        this->CMSG_LFD_PARTY_LOCK_INFO_REQUEST.~CMSG_LFD_PARTY_LOCK_INFO_REQUEST();
    }
    if (opcode == Opcode::CMSG_SET_TITLE) {
        this->CMSG_SET_TITLE.~CMSG_SET_TITLE();
    }
    if (opcode == Opcode::CMSG_CANCEL_MOUNT_AURA) {
        this->CMSG_CANCEL_MOUNT_AURA.~CMSG_CANCEL_MOUNT_AURA();
    }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        this->MSG_INSPECT_ARENA_TEAMS.~MSG_INSPECT_ARENA_TEAMS_Client();
    }
    if (opcode == Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) {
        this->CMSG_CANCEL_TEMP_ENCHANTMENT.~CMSG_CANCEL_TEMP_ENCHANTMENT();
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        this->MSG_MOVE_SET_FLIGHT_BACK_SPEED.~MSG_MOVE_SET_FLIGHT_BACK_SPEED();
    }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK.~CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK();
    }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK.~CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK();
    }
    if (opcode == Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) {
        this->CMSG_SET_TAXI_BENCHMARK_MODE.~CMSG_SET_TAXI_BENCHMARK_MODE();
    }
    if (opcode == Opcode::CMSG_REALM_SPLIT) {
        this->CMSG_REALM_SPLIT.~CMSG_REALM_SPLIT();
    }
    if (opcode == Opcode::CMSG_MOVE_CHNG_TRANSPORT) {
        this->CMSG_MOVE_CHNG_TRANSPORT.~CMSG_MOVE_CHNG_TRANSPORT();
    }
    if (opcode == Opcode::MSG_PARTY_ASSIGNMENT) {
        this->MSG_PARTY_ASSIGNMENT.~MSG_PARTY_ASSIGNMENT_Client();
    }
    if (opcode == Opcode::CMSG_TIME_SYNC_RESP) {
        this->CMSG_TIME_SYNC_RESP.~CMSG_TIME_SYNC_RESP();
    }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        this->MSG_MOVE_START_DESCEND.~MSG_MOVE_START_DESCEND();
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        this->MSG_RAID_READY_CHECK_CONFIRM.~MSG_RAID_READY_CHECK_CONFIRM_Client();
    }
    if (opcode == Opcode::CMSG_VOICE_SESSION_ENABLE) {
        this->CMSG_VOICE_SESSION_ENABLE.~CMSG_VOICE_SESSION_ENABLE();
    }
    if (opcode == Opcode::CMSG_COMMENTATOR_ENABLE) {
        this->CMSG_COMMENTATOR_ENABLE.~CMSG_COMMENTATOR_ENABLE();
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_FINISHED) {
        this->MSG_RAID_READY_CHECK_FINISHED.~MSG_RAID_READY_CHECK_FINISHED_Client();
    }
    if (opcode == Opcode::CMSG_COMPLAIN) {
        this->CMSG_COMPLAIN.~CMSG_COMPLAIN();
    }
    if (opcode == Opcode::CMSG_CHANNEL_DISPLAY_LIST) {
        this->CMSG_CHANNEL_DISPLAY_LIST.~CMSG_CHANNEL_DISPLAY_LIST();
    }
    if (opcode == Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) {
        this->CMSG_SET_ACTIVE_VOICE_CHANNEL.~CMSG_SET_ACTIVE_VOICE_CHANNEL();
    }
    if (opcode == Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) {
        this->CMSG_GET_CHANNEL_MEMBER_COUNT.~CMSG_GET_CHANNEL_MEMBER_COUNT();
    }
    if (opcode == Opcode::CMSG_CHANNEL_VOICE_ON) {
        this->CMSG_CHANNEL_VOICE_ON.~CMSG_CHANNEL_VOICE_ON();
    }
    if (opcode == Opcode::CMSG_REPORT_PVP_AFK) {
        this->CMSG_REPORT_PVP_AFK.~CMSG_REPORT_PVP_AFK();
    }
    if (opcode == Opcode::CMSG_GUILD_BANKER_ACTIVATE) {
        this->CMSG_GUILD_BANKER_ACTIVATE.~CMSG_GUILD_BANKER_ACTIVATE();
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_QUERY_TAB) {
        this->CMSG_GUILD_BANK_QUERY_TAB.~CMSG_GUILD_BANK_QUERY_TAB();
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) {
        this->CMSG_GUILD_BANK_SWAP_ITEMS.~CMSG_GUILD_BANK_SWAP_ITEMS();
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_BUY_TAB) {
        this->CMSG_GUILD_BANK_BUY_TAB.~CMSG_GUILD_BANK_BUY_TAB();
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_UPDATE_TAB) {
        this->CMSG_GUILD_BANK_UPDATE_TAB.~CMSG_GUILD_BANK_UPDATE_TAB();
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) {
        this->CMSG_GUILD_BANK_DEPOSIT_MONEY.~CMSG_GUILD_BANK_DEPOSIT_MONEY();
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) {
        this->CMSG_GUILD_BANK_WITHDRAW_MONEY.~CMSG_GUILD_BANK_WITHDRAW_MONEY();
    }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        this->MSG_GUILD_BANK_LOG_QUERY.~MSG_GUILD_BANK_LOG_QUERY_Client();
    }
    if (opcode == Opcode::CMSG_SET_CHANNEL_WATCH) {
        this->CMSG_SET_CHANNEL_WATCH.~CMSG_SET_CHANNEL_WATCH();
    }
    if (opcode == Opcode::CMSG_CLEAR_CHANNEL_WATCH) {
        this->CMSG_CLEAR_CHANNEL_WATCH.~CMSG_CLEAR_CHANNEL_WATCH();
    }
    if (opcode == Opcode::CMSG_SPELLCLICK) {
        this->CMSG_SPELLCLICK.~CMSG_SPELLCLICK();
    }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        this->MSG_GUILD_PERMISSIONS.~MSG_GUILD_PERMISSIONS_Client();
    }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        this->MSG_GUILD_BANK_MONEY_WITHDRAWN.~MSG_GUILD_BANK_MONEY_WITHDRAWN_Client();
    }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        this->MSG_GUILD_EVENT_LOG_QUERY.~MSG_GUILD_EVENT_LOG_QUERY_Client();
    }
    if (opcode == Opcode::CMSG_GET_MIRRORIMAGE_DATA) {
        this->CMSG_GET_MIRRORIMAGE_DATA.~CMSG_GET_MIRRORIMAGE_DATA();
    }
    if (opcode == Opcode::CMSG_KEEP_ALIVE) {
        this->CMSG_KEEP_ALIVE.~CMSG_KEEP_ALIVE();
    }
    if (opcode == Opcode::CMSG_OPT_OUT_OF_LOOT) {
        this->CMSG_OPT_OUT_OF_LOOT.~CMSG_OPT_OUT_OF_LOOT();
    }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        this->MSG_QUERY_GUILD_BANK_TEXT.~MSG_QUERY_GUILD_BANK_TEXT_Client();
    }
    if (opcode == Opcode::CMSG_SET_GUILD_BANK_TEXT) {
        this->CMSG_SET_GUILD_BANK_TEXT.~CMSG_SET_GUILD_BANK_TEXT();
    }
    if (opcode == Opcode::CMSG_GRANT_LEVEL) {
        this->CMSG_GRANT_LEVEL.~CMSG_GRANT_LEVEL();
    }
    if (opcode == Opcode::CMSG_TOTEM_DESTROYED) {
        this->CMSG_TOTEM_DESTROYED.~CMSG_TOTEM_DESTROYED();
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) {
        this->CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY.~CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY();
    }
    if (opcode == Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) {
        this->CMSG_SET_PLAYER_DECLINED_NAMES.~CMSG_SET_PLAYER_DECLINED_NAMES();
    }
    if (opcode == Opcode::CMSG_ACCEPT_LEVEL_GRANT) {
        this->CMSG_ACCEPT_LEVEL_GRANT.~CMSG_ACCEPT_LEVEL_GRANT();
    }
    if (opcode == Opcode::CMSG_ALTER_APPEARANCE) {
        this->CMSG_ALTER_APPEARANCE.~CMSG_ALTER_APPEARANCE();
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_CALENDAR) {
        this->CMSG_CALENDAR_GET_CALENDAR.~CMSG_CALENDAR_GET_CALENDAR();
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_EVENT) {
        this->CMSG_CALENDAR_GET_EVENT.~CMSG_CALENDAR_GET_EVENT();
    }
    if (opcode == Opcode::CMSG_CALENDAR_GUILD_FILTER) {
        this->CMSG_CALENDAR_GUILD_FILTER.~CMSG_CALENDAR_GUILD_FILTER();
    }
    if (opcode == Opcode::CMSG_CALENDAR_ARENA_TEAM) {
        this->CMSG_CALENDAR_ARENA_TEAM.~CMSG_CALENDAR_ARENA_TEAM();
    }
    if (opcode == Opcode::CMSG_CALENDAR_ADD_EVENT) {
        this->CMSG_CALENDAR_ADD_EVENT.~CMSG_CALENDAR_ADD_EVENT();
    }
    if (opcode == Opcode::CMSG_CALENDAR_UPDATE_EVENT) {
        this->CMSG_CALENDAR_UPDATE_EVENT.~CMSG_CALENDAR_UPDATE_EVENT();
    }
    if (opcode == Opcode::CMSG_CALENDAR_REMOVE_EVENT) {
        this->CMSG_CALENDAR_REMOVE_EVENT.~CMSG_CALENDAR_REMOVE_EVENT();
    }
    if (opcode == Opcode::CMSG_CALENDAR_COPY_EVENT) {
        this->CMSG_CALENDAR_COPY_EVENT.~CMSG_CALENDAR_COPY_EVENT();
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_INVITE) {
        this->CMSG_CALENDAR_EVENT_INVITE.~CMSG_CALENDAR_EVENT_INVITE();
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_RSVP) {
        this->CMSG_CALENDAR_EVENT_RSVP.~CMSG_CALENDAR_EVENT_RSVP();
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) {
        this->CMSG_CALENDAR_EVENT_REMOVE_INVITE.~CMSG_CALENDAR_EVENT_REMOVE_INVITE();
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_STATUS) {
        this->CMSG_CALENDAR_EVENT_STATUS.~CMSG_CALENDAR_EVENT_STATUS();
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) {
        this->CMSG_CALENDAR_EVENT_MODERATOR_STATUS.~CMSG_CALENDAR_EVENT_MODERATOR_STATUS();
    }
    if (opcode == Opcode::CMSG_CALENDAR_COMPLAIN) {
        this->CMSG_CALENDAR_COMPLAIN.~CMSG_CALENDAR_COMPLAIN();
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        this->CMSG_CALENDAR_GET_NUM_PENDING.~CMSG_CALENDAR_GET_NUM_PENDING();
    }
    if (opcode == Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) {
        this->CMSG_UPDATE_MISSILE_TRAJECTORY.~CMSG_UPDATE_MISSILE_TRAJECTORY();
    }
    if (opcode == Opcode::CMSG_COMPLETE_MOVIE) {
        this->CMSG_COMPLETE_MOVIE.~CMSG_COMPLETE_MOVIE();
    }
    if (opcode == Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) {
        this->CMSG_QUERY_INSPECT_ACHIEVEMENTS.~CMSG_QUERY_INSPECT_ACHIEVEMENTS();
    }
    if (opcode == Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) {
        this->CMSG_DISMISS_CONTROLLED_VEHICLE.~CMSG_DISMISS_CONTROLLED_VEHICLE();
    }
    if (opcode == Opcode::CMSG_CHAR_CUSTOMIZE) {
        this->CMSG_CHAR_CUSTOMIZE.~CMSG_CHAR_CUSTOMIZE();
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_EXIT) {
        this->CMSG_REQUEST_VEHICLE_EXIT.~CMSG_REQUEST_VEHICLE_EXIT();
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) {
        this->CMSG_REQUEST_VEHICLE_PREV_SEAT.~CMSG_REQUEST_VEHICLE_PREV_SEAT();
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) {
        this->CMSG_REQUEST_VEHICLE_NEXT_SEAT.~CMSG_REQUEST_VEHICLE_NEXT_SEAT();
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) {
        this->CMSG_REQUEST_VEHICLE_SWITCH_SEAT.~CMSG_REQUEST_VEHICLE_SWITCH_SEAT();
    }
    if (opcode == Opcode::CMSG_PET_LEARN_TALENT) {
        this->CMSG_PET_LEARN_TALENT.~CMSG_PET_LEARN_TALENT();
    }
    if (opcode == Opcode::CMSG_GAMEOBJ_REPORT_USE) {
        this->CMSG_GAMEOBJ_REPORT_USE.~CMSG_GAMEOBJ_REPORT_USE();
    }
    if (opcode == Opcode::CMSG_REMOVE_GLYPH) {
        this->CMSG_REMOVE_GLYPH.~CMSG_REMOVE_GLYPH();
    }
    if (opcode == Opcode::CMSG_DISMISS_CRITTER) {
        this->CMSG_DISMISS_CRITTER.~CMSG_DISMISS_CRITTER();
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_PENDING_SALES) {
        this->CMSG_AUCTION_LIST_PENDING_SALES.~CMSG_AUCTION_LIST_PENDING_SALES();
    }
    if (opcode == Opcode::CMSG_ENABLETAXI) {
        this->CMSG_ENABLETAXI.~CMSG_ENABLETAXI();
    }
    if (opcode == Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) {
        this->CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE.~CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE();
    }
    if (opcode == Opcode::CMSG_HEARTH_AND_RESURRECT) {
        this->CMSG_HEARTH_AND_RESURRECT.~CMSG_HEARTH_AND_RESURRECT();
    }
    if (opcode == Opcode::CMSG_PLAYER_VEHICLE_ENTER) {
        this->CMSG_PLAYER_VEHICLE_ENTER.~CMSG_PLAYER_VEHICLE_ENTER();
    }
    if (opcode == Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) {
        this->CMSG_CONTROLLER_EJECT_PASSENGER.~CMSG_CONTROLLER_EJECT_PASSENGER();
    }
    if (opcode == Opcode::CMSG_ITEM_REFUND_INFO) {
        this->CMSG_ITEM_REFUND_INFO.~CMSG_ITEM_REFUND_INFO();
    }
    if (opcode == Opcode::CMSG_ITEM_REFUND) {
        this->CMSG_ITEM_REFUND.~CMSG_ITEM_REFUND();
    }
    if (opcode == Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) {
        this->CMSG_CORPSE_MAP_POSITION_QUERY.~CMSG_CORPSE_MAP_POSITION_QUERY();
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_SIGNUP) {
        this->CMSG_CALENDAR_EVENT_SIGNUP.~CMSG_CALENDAR_EVENT_SIGNUP();
    }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_SAVE) {
        this->CMSG_EQUIPMENT_SET_SAVE.~CMSG_EQUIPMENT_SET_SAVE();
    }
    if (opcode == Opcode::CMSG_UPDATE_PROJECTILE_POSITION) {
        this->CMSG_UPDATE_PROJECTILE_POSITION.~CMSG_UPDATE_PROJECTILE_POSITION();
    }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS) {
        this->CMSG_LEARN_PREVIEW_TALENTS.~CMSG_LEARN_PREVIEW_TALENTS();
    }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) {
        this->CMSG_LEARN_PREVIEW_TALENTS_PET.~CMSG_LEARN_PREVIEW_TALENTS_PET();
    }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) {
        this->CMSG_MOVE_GRAVITY_DISABLE_ACK.~CMSG_MOVE_GRAVITY_DISABLE_ACK();
    }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) {
        this->CMSG_MOVE_GRAVITY_ENABLE_ACK.~CMSG_MOVE_GRAVITY_ENABLE_ACK();
    }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_USE) {
        this->CMSG_EQUIPMENT_SET_USE.~CMSG_EQUIPMENT_SET_USE();
    }
    if (opcode == Opcode::CMSG_CHAR_FACTION_CHANGE) {
        this->CMSG_CHAR_FACTION_CHANGE.~CMSG_CHAR_FACTION_CHANGE();
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) {
        this->CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE.~CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE();
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) {
        this->CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE.~CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE();
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) {
        this->CMSG_BATTLEFIELD_MGR_EXIT_REQUEST.~CMSG_BATTLEFIELD_MGR_EXIT_REQUEST();
    }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        this->MSG_SET_RAID_DIFFICULTY.~MSG_SET_RAID_DIFFICULTY_Client();
    }
    if (opcode == Opcode::CMSG_GMRESPONSE_RESOLVE) {
        this->CMSG_GMRESPONSE_RESOLVE.~CMSG_GMRESPONSE_RESOLVE();
    }
    if (opcode == Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        this->CMSG_WORLD_STATE_UI_TIMER_UPDATE.~CMSG_WORLD_STATE_UI_TIMER_UPDATE();
    }
    if (opcode == Opcode::CMSG_CHAR_RACE_CHANGE) {
        this->CMSG_CHAR_RACE_CHANGE.~CMSG_CHAR_RACE_CHANGE();
    }
    if (opcode == Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) {
        this->CMSG_READY_FOR_ACCOUNT_DATA_TIMES.~CMSG_READY_FOR_ACCOUNT_DATA_TIMES();
    }
    if (opcode == Opcode::CMSG_QUERY_QUESTS_COMPLETED) {
        this->CMSG_QUERY_QUESTS_COMPLETED.~CMSG_QUERY_QUESTS_COMPLETED();
    }
    if (opcode == Opcode::CMSG_GM_REPORT_LAG) {
        this->CMSG_GM_REPORT_LAG.~CMSG_GM_REPORT_LAG();
    }
    if (opcode == Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) {
        this->CMSG_MOVE_SET_COLLISION_HGT_ACK.~CMSG_MOVE_SET_COLLISION_HGT_ACK();
    }
}

/* 2 copy constructor */
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(const ClientOpcode& other) {
    this->opcode = other.opcode;
    if (opcode == Opcode::CMSG_BOOTME) {
        new (&CMSG_BOOTME) auto(other.CMSG_BOOTME);
    }
    if (opcode == Opcode::CMSG_DBLOOKUP) {
        new (&CMSG_DBLOOKUP) auto(other.CMSG_DBLOOKUP);
    }
    if (opcode == Opcode::CMSG_WORLD_TELEPORT) {
        new (&CMSG_WORLD_TELEPORT) auto(other.CMSG_WORLD_TELEPORT);
    }
    if (opcode == Opcode::CMSG_TELEPORT_TO_UNIT) {
        new (&CMSG_TELEPORT_TO_UNIT) auto(other.CMSG_TELEPORT_TO_UNIT);
    }
    if (opcode == Opcode::CMSG_CHAR_CREATE) {
        new (&CMSG_CHAR_CREATE) auto(other.CMSG_CHAR_CREATE);
    }
    if (opcode == Opcode::CMSG_CHAR_ENUM) {
        new (&CMSG_CHAR_ENUM) auto(other.CMSG_CHAR_ENUM);
    }
    if (opcode == Opcode::CMSG_CHAR_DELETE) {
        new (&CMSG_CHAR_DELETE) auto(other.CMSG_CHAR_DELETE);
    }
    if (opcode == Opcode::CMSG_PLAYER_LOGIN) {
        new (&CMSG_PLAYER_LOGIN) auto(other.CMSG_PLAYER_LOGIN);
    }
    if (opcode == Opcode::CMSG_PLAYER_LOGOUT) {
        new (&CMSG_PLAYER_LOGOUT) auto(other.CMSG_PLAYER_LOGOUT);
    }
    if (opcode == Opcode::CMSG_LOGOUT_REQUEST) {
        new (&CMSG_LOGOUT_REQUEST) auto(other.CMSG_LOGOUT_REQUEST);
    }
    if (opcode == Opcode::CMSG_LOGOUT_CANCEL) {
        new (&CMSG_LOGOUT_CANCEL) auto(other.CMSG_LOGOUT_CANCEL);
    }
    if (opcode == Opcode::CMSG_NAME_QUERY) {
        new (&CMSG_NAME_QUERY) auto(other.CMSG_NAME_QUERY);
    }
    if (opcode == Opcode::CMSG_PET_NAME_QUERY) {
        new (&CMSG_PET_NAME_QUERY) auto(other.CMSG_PET_NAME_QUERY);
    }
    if (opcode == Opcode::CMSG_GUILD_QUERY) {
        new (&CMSG_GUILD_QUERY) auto(other.CMSG_GUILD_QUERY);
    }
    if (opcode == Opcode::CMSG_ITEM_QUERY_SINGLE) {
        new (&CMSG_ITEM_QUERY_SINGLE) auto(other.CMSG_ITEM_QUERY_SINGLE);
    }
    if (opcode == Opcode::CMSG_PAGE_TEXT_QUERY) {
        new (&CMSG_PAGE_TEXT_QUERY) auto(other.CMSG_PAGE_TEXT_QUERY);
    }
    if (opcode == Opcode::CMSG_QUEST_QUERY) {
        new (&CMSG_QUEST_QUERY) auto(other.CMSG_QUEST_QUERY);
    }
    if (opcode == Opcode::CMSG_GAMEOBJECT_QUERY) {
        new (&CMSG_GAMEOBJECT_QUERY) auto(other.CMSG_GAMEOBJECT_QUERY);
    }
    if (opcode == Opcode::CMSG_CREATURE_QUERY) {
        new (&CMSG_CREATURE_QUERY) auto(other.CMSG_CREATURE_QUERY);
    }
    if (opcode == Opcode::CMSG_WHO) {
        new (&CMSG_WHO) auto(other.CMSG_WHO);
    }
    if (opcode == Opcode::CMSG_WHOIS) {
        new (&CMSG_WHOIS) auto(other.CMSG_WHOIS);
    }
    if (opcode == Opcode::CMSG_CONTACT_LIST) {
        new (&CMSG_CONTACT_LIST) auto(other.CMSG_CONTACT_LIST);
    }
    if (opcode == Opcode::CMSG_ADD_FRIEND) {
        new (&CMSG_ADD_FRIEND) auto(other.CMSG_ADD_FRIEND);
    }
    if (opcode == Opcode::CMSG_DEL_FRIEND) {
        new (&CMSG_DEL_FRIEND) auto(other.CMSG_DEL_FRIEND);
    }
    if (opcode == Opcode::CMSG_SET_CONTACT_NOTES) {
        new (&CMSG_SET_CONTACT_NOTES) auto(other.CMSG_SET_CONTACT_NOTES);
    }
    if (opcode == Opcode::CMSG_ADD_IGNORE) {
        new (&CMSG_ADD_IGNORE) auto(other.CMSG_ADD_IGNORE);
    }
    if (opcode == Opcode::CMSG_DEL_IGNORE) {
        new (&CMSG_DEL_IGNORE) auto(other.CMSG_DEL_IGNORE);
    }
    if (opcode == Opcode::CMSG_GROUP_INVITE) {
        new (&CMSG_GROUP_INVITE) auto(other.CMSG_GROUP_INVITE);
    }
    if (opcode == Opcode::CMSG_GROUP_CANCEL) {
        new (&CMSG_GROUP_CANCEL) auto(other.CMSG_GROUP_CANCEL);
    }
    if (opcode == Opcode::CMSG_GROUP_ACCEPT) {
        new (&CMSG_GROUP_ACCEPT) auto(other.CMSG_GROUP_ACCEPT);
    }
    if (opcode == Opcode::CMSG_GROUP_DECLINE) {
        new (&CMSG_GROUP_DECLINE) auto(other.CMSG_GROUP_DECLINE);
    }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE) {
        new (&CMSG_GROUP_UNINVITE) auto(other.CMSG_GROUP_UNINVITE);
    }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE_GUID) {
        new (&CMSG_GROUP_UNINVITE_GUID) auto(other.CMSG_GROUP_UNINVITE_GUID);
    }
    if (opcode == Opcode::CMSG_GROUP_SET_LEADER) {
        new (&CMSG_GROUP_SET_LEADER) auto(other.CMSG_GROUP_SET_LEADER);
    }
    if (opcode == Opcode::CMSG_LOOT_METHOD) {
        new (&CMSG_LOOT_METHOD) auto(other.CMSG_LOOT_METHOD);
    }
    if (opcode == Opcode::CMSG_GROUP_DISBAND) {
        new (&CMSG_GROUP_DISBAND) auto(other.CMSG_GROUP_DISBAND);
    }
    if (opcode == Opcode::CMSG_GUILD_CREATE) {
        new (&CMSG_GUILD_CREATE) auto(other.CMSG_GUILD_CREATE);
    }
    if (opcode == Opcode::CMSG_GUILD_INVITE) {
        new (&CMSG_GUILD_INVITE) auto(other.CMSG_GUILD_INVITE);
    }
    if (opcode == Opcode::CMSG_GUILD_ACCEPT) {
        new (&CMSG_GUILD_ACCEPT) auto(other.CMSG_GUILD_ACCEPT);
    }
    if (opcode == Opcode::CMSG_GUILD_DECLINE) {
        new (&CMSG_GUILD_DECLINE) auto(other.CMSG_GUILD_DECLINE);
    }
    if (opcode == Opcode::CMSG_GUILD_INFO) {
        new (&CMSG_GUILD_INFO) auto(other.CMSG_GUILD_INFO);
    }
    if (opcode == Opcode::CMSG_GUILD_ROSTER) {
        new (&CMSG_GUILD_ROSTER) auto(other.CMSG_GUILD_ROSTER);
    }
    if (opcode == Opcode::CMSG_GUILD_PROMOTE) {
        new (&CMSG_GUILD_PROMOTE) auto(other.CMSG_GUILD_PROMOTE);
    }
    if (opcode == Opcode::CMSG_GUILD_DEMOTE) {
        new (&CMSG_GUILD_DEMOTE) auto(other.CMSG_GUILD_DEMOTE);
    }
    if (opcode == Opcode::CMSG_GUILD_LEAVE) {
        new (&CMSG_GUILD_LEAVE) auto(other.CMSG_GUILD_LEAVE);
    }
    if (opcode == Opcode::CMSG_GUILD_REMOVE) {
        new (&CMSG_GUILD_REMOVE) auto(other.CMSG_GUILD_REMOVE);
    }
    if (opcode == Opcode::CMSG_GUILD_DISBAND) {
        new (&CMSG_GUILD_DISBAND) auto(other.CMSG_GUILD_DISBAND);
    }
    if (opcode == Opcode::CMSG_GUILD_LEADER) {
        new (&CMSG_GUILD_LEADER) auto(other.CMSG_GUILD_LEADER);
    }
    if (opcode == Opcode::CMSG_GUILD_MOTD) {
        new (&CMSG_GUILD_MOTD) auto(other.CMSG_GUILD_MOTD);
    }
    if (opcode == Opcode::CMSG_MESSAGECHAT) {
        new (&CMSG_MESSAGECHAT) auto(other.CMSG_MESSAGECHAT);
    }
    if (opcode == Opcode::CMSG_JOIN_CHANNEL) {
        new (&CMSG_JOIN_CHANNEL) auto(other.CMSG_JOIN_CHANNEL);
    }
    if (opcode == Opcode::CMSG_LEAVE_CHANNEL) {
        new (&CMSG_LEAVE_CHANNEL) auto(other.CMSG_LEAVE_CHANNEL);
    }
    if (opcode == Opcode::CMSG_CHANNEL_LIST) {
        new (&CMSG_CHANNEL_LIST) auto(other.CMSG_CHANNEL_LIST);
    }
    if (opcode == Opcode::CMSG_CHANNEL_PASSWORD) {
        new (&CMSG_CHANNEL_PASSWORD) auto(other.CMSG_CHANNEL_PASSWORD);
    }
    if (opcode == Opcode::CMSG_CHANNEL_SET_OWNER) {
        new (&CMSG_CHANNEL_SET_OWNER) auto(other.CMSG_CHANNEL_SET_OWNER);
    }
    if (opcode == Opcode::CMSG_CHANNEL_OWNER) {
        new (&CMSG_CHANNEL_OWNER) auto(other.CMSG_CHANNEL_OWNER);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATOR) {
        new (&CMSG_CHANNEL_MODERATOR) auto(other.CMSG_CHANNEL_MODERATOR);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNMODERATOR) {
        new (&CMSG_CHANNEL_UNMODERATOR) auto(other.CMSG_CHANNEL_UNMODERATOR);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MUTE) {
        new (&CMSG_CHANNEL_MUTE) auto(other.CMSG_CHANNEL_MUTE);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNMUTE) {
        new (&CMSG_CHANNEL_UNMUTE) auto(other.CMSG_CHANNEL_UNMUTE);
    }
    if (opcode == Opcode::CMSG_CHANNEL_INVITE) {
        new (&CMSG_CHANNEL_INVITE) auto(other.CMSG_CHANNEL_INVITE);
    }
    if (opcode == Opcode::CMSG_CHANNEL_KICK) {
        new (&CMSG_CHANNEL_KICK) auto(other.CMSG_CHANNEL_KICK);
    }
    if (opcode == Opcode::CMSG_CHANNEL_BAN) {
        new (&CMSG_CHANNEL_BAN) auto(other.CMSG_CHANNEL_BAN);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNBAN) {
        new (&CMSG_CHANNEL_UNBAN) auto(other.CMSG_CHANNEL_UNBAN);
    }
    if (opcode == Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) {
        new (&CMSG_CHANNEL_ANNOUNCEMENTS) auto(other.CMSG_CHANNEL_ANNOUNCEMENTS);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATE) {
        new (&CMSG_CHANNEL_MODERATE) auto(other.CMSG_CHANNEL_MODERATE);
    }
    if (opcode == Opcode::CMSG_USE_ITEM) {
        new (&CMSG_USE_ITEM) auto(other.CMSG_USE_ITEM);
    }
    if (opcode == Opcode::CMSG_OPEN_ITEM) {
        new (&CMSG_OPEN_ITEM) auto(other.CMSG_OPEN_ITEM);
    }
    if (opcode == Opcode::CMSG_READ_ITEM) {
        new (&CMSG_READ_ITEM) auto(other.CMSG_READ_ITEM);
    }
    if (opcode == Opcode::CMSG_GAMEOBJ_USE) {
        new (&CMSG_GAMEOBJ_USE) auto(other.CMSG_GAMEOBJ_USE);
    }
    if (opcode == Opcode::CMSG_AREATRIGGER) {
        new (&CMSG_AREATRIGGER) auto(other.CMSG_AREATRIGGER);
    }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        new (&MSG_MOVE_START_FORWARD) auto(other.MSG_MOVE_START_FORWARD);
    }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        new (&MSG_MOVE_START_BACKWARD) auto(other.MSG_MOVE_START_BACKWARD);
    }
    if (opcode == Opcode::MSG_MOVE_STOP) {
        new (&MSG_MOVE_STOP) auto(other.MSG_MOVE_STOP);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        new (&MSG_MOVE_START_STRAFE_LEFT) auto(other.MSG_MOVE_START_STRAFE_LEFT);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        new (&MSG_MOVE_START_STRAFE_RIGHT) auto(other.MSG_MOVE_START_STRAFE_RIGHT);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        new (&MSG_MOVE_STOP_STRAFE) auto(other.MSG_MOVE_STOP_STRAFE);
    }
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        new (&MSG_MOVE_JUMP) auto(other.MSG_MOVE_JUMP);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        new (&MSG_MOVE_START_TURN_LEFT) auto(other.MSG_MOVE_START_TURN_LEFT);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        new (&MSG_MOVE_START_TURN_RIGHT) auto(other.MSG_MOVE_START_TURN_RIGHT);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        new (&MSG_MOVE_STOP_TURN) auto(other.MSG_MOVE_STOP_TURN);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        new (&MSG_MOVE_START_PITCH_UP) auto(other.MSG_MOVE_START_PITCH_UP);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        new (&MSG_MOVE_START_PITCH_DOWN) auto(other.MSG_MOVE_START_PITCH_DOWN);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        new (&MSG_MOVE_STOP_PITCH) auto(other.MSG_MOVE_STOP_PITCH);
    }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        new (&MSG_MOVE_SET_RUN_MODE) auto(other.MSG_MOVE_SET_RUN_MODE);
    }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        new (&MSG_MOVE_SET_WALK_MODE) auto(other.MSG_MOVE_SET_WALK_MODE);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT) {
        new (&MSG_MOVE_TELEPORT) auto(other.MSG_MOVE_TELEPORT);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        new (&MSG_MOVE_TELEPORT_ACK) auto(other.MSG_MOVE_TELEPORT_ACK);
    }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        new (&MSG_MOVE_FALL_LAND) auto(other.MSG_MOVE_FALL_LAND);
    }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        new (&MSG_MOVE_START_SWIM) auto(other.MSG_MOVE_START_SWIM);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        new (&MSG_MOVE_STOP_SWIM) auto(other.MSG_MOVE_STOP_SWIM);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        new (&MSG_MOVE_SET_FACING) auto(other.MSG_MOVE_SET_FACING);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        new (&MSG_MOVE_SET_PITCH) auto(other.MSG_MOVE_SET_PITCH);
    }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        new (&MSG_MOVE_WORLDPORT_ACK) auto(other.MSG_MOVE_WORLDPORT_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_RAW_POSITION) {
        new (&CMSG_MOVE_SET_RAW_POSITION) auto(other.CMSG_MOVE_SET_RAW_POSITION);
    }
    if (opcode == Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) {
        new (&CMSG_FORCE_RUN_SPEED_CHANGE_ACK) auto(other.CMSG_FORCE_RUN_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) {
        new (&CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) auto(other.CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) {
        new (&CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) auto(other.CMSG_FORCE_SWIM_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_MOVE_ROOT_ACK) {
        new (&CMSG_FORCE_MOVE_ROOT_ACK) auto(other.CMSG_FORCE_MOVE_ROOT_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) {
        new (&CMSG_FORCE_MOVE_UNROOT_ACK) auto(other.CMSG_FORCE_MOVE_UNROOT_ACK);
    }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        new (&MSG_MOVE_HEARTBEAT) auto(other.MSG_MOVE_HEARTBEAT);
    }
    if (opcode == Opcode::CMSG_MOVE_KNOCK_BACK_ACK) {
        new (&CMSG_MOVE_KNOCK_BACK_ACK) auto(other.CMSG_MOVE_KNOCK_BACK_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_HOVER_ACK) {
        new (&CMSG_MOVE_HOVER_ACK) auto(other.CMSG_MOVE_HOVER_ACK);
    }
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        new (&MSG_MOVE_HOVER) auto(other.MSG_MOVE_HOVER);
    }
    if (opcode == Opcode::CMSG_NEXT_CINEMATIC_CAMERA) {
        new (&CMSG_NEXT_CINEMATIC_CAMERA) auto(other.CMSG_NEXT_CINEMATIC_CAMERA);
    }
    if (opcode == Opcode::CMSG_COMPLETE_CINEMATIC) {
        new (&CMSG_COMPLETE_CINEMATIC) auto(other.CMSG_COMPLETE_CINEMATIC);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_FLAG) {
        new (&CMSG_TUTORIAL_FLAG) auto(other.CMSG_TUTORIAL_FLAG);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_CLEAR) {
        new (&CMSG_TUTORIAL_CLEAR) auto(other.CMSG_TUTORIAL_CLEAR);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_RESET) {
        new (&CMSG_TUTORIAL_RESET) auto(other.CMSG_TUTORIAL_RESET);
    }
    if (opcode == Opcode::CMSG_STANDSTATECHANGE) {
        new (&CMSG_STANDSTATECHANGE) auto(other.CMSG_STANDSTATECHANGE);
    }
    if (opcode == Opcode::CMSG_EMOTE) {
        new (&CMSG_EMOTE) auto(other.CMSG_EMOTE);
    }
    if (opcode == Opcode::CMSG_TEXT_EMOTE) {
        new (&CMSG_TEXT_EMOTE) auto(other.CMSG_TEXT_EMOTE);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_LOOT_ITEM) {
        new (&CMSG_AUTOSTORE_LOOT_ITEM) auto(other.CMSG_AUTOSTORE_LOOT_ITEM);
    }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM) {
        new (&CMSG_AUTOEQUIP_ITEM) auto(other.CMSG_AUTOEQUIP_ITEM);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_BAG_ITEM) {
        new (&CMSG_AUTOSTORE_BAG_ITEM) auto(other.CMSG_AUTOSTORE_BAG_ITEM);
    }
    if (opcode == Opcode::CMSG_SWAP_ITEM) {
        new (&CMSG_SWAP_ITEM) auto(other.CMSG_SWAP_ITEM);
    }
    if (opcode == Opcode::CMSG_SWAP_INV_ITEM) {
        new (&CMSG_SWAP_INV_ITEM) auto(other.CMSG_SWAP_INV_ITEM);
    }
    if (opcode == Opcode::CMSG_SPLIT_ITEM) {
        new (&CMSG_SPLIT_ITEM) auto(other.CMSG_SPLIT_ITEM);
    }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) {
        new (&CMSG_AUTOEQUIP_ITEM_SLOT) auto(other.CMSG_AUTOEQUIP_ITEM_SLOT);
    }
    if (opcode == Opcode::CMSG_DESTROYITEM) {
        new (&CMSG_DESTROYITEM) auto(other.CMSG_DESTROYITEM);
    }
    if (opcode == Opcode::CMSG_INSPECT) {
        new (&CMSG_INSPECT) auto(other.CMSG_INSPECT);
    }
    if (opcode == Opcode::CMSG_INITIATE_TRADE) {
        new (&CMSG_INITIATE_TRADE) auto(other.CMSG_INITIATE_TRADE);
    }
    if (opcode == Opcode::CMSG_BEGIN_TRADE) {
        new (&CMSG_BEGIN_TRADE) auto(other.CMSG_BEGIN_TRADE);
    }
    if (opcode == Opcode::CMSG_BUSY_TRADE) {
        new (&CMSG_BUSY_TRADE) auto(other.CMSG_BUSY_TRADE);
    }
    if (opcode == Opcode::CMSG_IGNORE_TRADE) {
        new (&CMSG_IGNORE_TRADE) auto(other.CMSG_IGNORE_TRADE);
    }
    if (opcode == Opcode::CMSG_ACCEPT_TRADE) {
        new (&CMSG_ACCEPT_TRADE) auto(other.CMSG_ACCEPT_TRADE);
    }
    if (opcode == Opcode::CMSG_UNACCEPT_TRADE) {
        new (&CMSG_UNACCEPT_TRADE) auto(other.CMSG_UNACCEPT_TRADE);
    }
    if (opcode == Opcode::CMSG_CANCEL_TRADE) {
        new (&CMSG_CANCEL_TRADE) auto(other.CMSG_CANCEL_TRADE);
    }
    if (opcode == Opcode::CMSG_SET_TRADE_ITEM) {
        new (&CMSG_SET_TRADE_ITEM) auto(other.CMSG_SET_TRADE_ITEM);
    }
    if (opcode == Opcode::CMSG_CLEAR_TRADE_ITEM) {
        new (&CMSG_CLEAR_TRADE_ITEM) auto(other.CMSG_CLEAR_TRADE_ITEM);
    }
    if (opcode == Opcode::CMSG_SET_TRADE_GOLD) {
        new (&CMSG_SET_TRADE_GOLD) auto(other.CMSG_SET_TRADE_GOLD);
    }
    if (opcode == Opcode::CMSG_SET_FACTION_ATWAR) {
        new (&CMSG_SET_FACTION_ATWAR) auto(other.CMSG_SET_FACTION_ATWAR);
    }
    if (opcode == Opcode::CMSG_SET_ACTION_BUTTON) {
        new (&CMSG_SET_ACTION_BUTTON) auto(other.CMSG_SET_ACTION_BUTTON);
    }
    if (opcode == Opcode::CMSG_CAST_SPELL) {
        new (&CMSG_CAST_SPELL) auto(other.CMSG_CAST_SPELL);
    }
    if (opcode == Opcode::CMSG_CANCEL_CAST) {
        new (&CMSG_CANCEL_CAST) auto(other.CMSG_CANCEL_CAST);
    }
    if (opcode == Opcode::CMSG_CANCEL_AURA) {
        new (&CMSG_CANCEL_AURA) auto(other.CMSG_CANCEL_AURA);
    }
    if (opcode == Opcode::CMSG_CANCEL_CHANNELLING) {
        new (&CMSG_CANCEL_CHANNELLING) auto(other.CMSG_CANCEL_CHANNELLING);
    }
    if (opcode == Opcode::CMSG_SET_SELECTION) {
        new (&CMSG_SET_SELECTION) auto(other.CMSG_SET_SELECTION);
    }
    if (opcode == Opcode::CMSG_DELETEEQUIPMENT_SET) {
        new (&CMSG_DELETEEQUIPMENT_SET) auto(other.CMSG_DELETEEQUIPMENT_SET);
    }
    if (opcode == Opcode::CMSG_INSTANCE_LOCK_RESPONSE) {
        new (&CMSG_INSTANCE_LOCK_RESPONSE) auto(other.CMSG_INSTANCE_LOCK_RESPONSE);
    }
    if (opcode == Opcode::CMSG_ATTACKSWING) {
        new (&CMSG_ATTACKSWING) auto(other.CMSG_ATTACKSWING);
    }
    if (opcode == Opcode::CMSG_ATTACKSTOP) {
        new (&CMSG_ATTACKSTOP) auto(other.CMSG_ATTACKSTOP);
    }
    if (opcode == Opcode::CMSG_REPOP_REQUEST) {
        new (&CMSG_REPOP_REQUEST) auto(other.CMSG_REPOP_REQUEST);
    }
    if (opcode == Opcode::CMSG_RESURRECT_RESPONSE) {
        new (&CMSG_RESURRECT_RESPONSE) auto(other.CMSG_RESURRECT_RESPONSE);
    }
    if (opcode == Opcode::CMSG_LOOT) {
        new (&CMSG_LOOT) auto(other.CMSG_LOOT);
    }
    if (opcode == Opcode::CMSG_LOOT_MONEY) {
        new (&CMSG_LOOT_MONEY) auto(other.CMSG_LOOT_MONEY);
    }
    if (opcode == Opcode::CMSG_LOOT_RELEASE) {
        new (&CMSG_LOOT_RELEASE) auto(other.CMSG_LOOT_RELEASE);
    }
    if (opcode == Opcode::CMSG_DUEL_ACCEPTED) {
        new (&CMSG_DUEL_ACCEPTED) auto(other.CMSG_DUEL_ACCEPTED);
    }
    if (opcode == Opcode::CMSG_DUEL_CANCELLED) {
        new (&CMSG_DUEL_CANCELLED) auto(other.CMSG_DUEL_CANCELLED);
    }
    if (opcode == Opcode::CMSG_MOUNTSPECIAL_ANIM) {
        new (&CMSG_MOUNTSPECIAL_ANIM) auto(other.CMSG_MOUNTSPECIAL_ANIM);
    }
    if (opcode == Opcode::CMSG_PET_SET_ACTION) {
        new (&CMSG_PET_SET_ACTION) auto(other.CMSG_PET_SET_ACTION);
    }
    if (opcode == Opcode::CMSG_PET_ACTION) {
        new (&CMSG_PET_ACTION) auto(other.CMSG_PET_ACTION);
    }
    if (opcode == Opcode::CMSG_PET_ABANDON) {
        new (&CMSG_PET_ABANDON) auto(other.CMSG_PET_ABANDON);
    }
    if (opcode == Opcode::CMSG_PET_RENAME) {
        new (&CMSG_PET_RENAME) auto(other.CMSG_PET_RENAME);
    }
    if (opcode == Opcode::CMSG_GOSSIP_HELLO) {
        new (&CMSG_GOSSIP_HELLO) auto(other.CMSG_GOSSIP_HELLO);
    }
    if (opcode == Opcode::CMSG_GOSSIP_SELECT_OPTION) {
        new (&CMSG_GOSSIP_SELECT_OPTION) auto(other.CMSG_GOSSIP_SELECT_OPTION);
    }
    if (opcode == Opcode::CMSG_NPC_TEXT_QUERY) {
        new (&CMSG_NPC_TEXT_QUERY) auto(other.CMSG_NPC_TEXT_QUERY);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_QUERY) {
        new (&CMSG_QUESTGIVER_STATUS_QUERY) auto(other.CMSG_QUESTGIVER_STATUS_QUERY);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_HELLO) {
        new (&CMSG_QUESTGIVER_HELLO) auto(other.CMSG_QUESTGIVER_HELLO);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUERY_QUEST) {
        new (&CMSG_QUESTGIVER_QUERY_QUEST) auto(other.CMSG_QUESTGIVER_QUERY_QUEST);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) {
        new (&CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) auto(other.CMSG_QUESTGIVER_QUEST_AUTOLAUNCH);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) {
        new (&CMSG_QUESTGIVER_ACCEPT_QUEST) auto(other.CMSG_QUESTGIVER_ACCEPT_QUEST);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) {
        new (&CMSG_QUESTGIVER_COMPLETE_QUEST) auto(other.CMSG_QUESTGIVER_COMPLETE_QUEST);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) {
        new (&CMSG_QUESTGIVER_REQUEST_REWARD) auto(other.CMSG_QUESTGIVER_REQUEST_REWARD);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) {
        new (&CMSG_QUESTGIVER_CHOOSE_REWARD) auto(other.CMSG_QUESTGIVER_CHOOSE_REWARD);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_CANCEL) {
        new (&CMSG_QUESTGIVER_CANCEL) auto(other.CMSG_QUESTGIVER_CANCEL);
    }
    if (opcode == Opcode::CMSG_QUESTLOG_SWAP_QUEST) {
        new (&CMSG_QUESTLOG_SWAP_QUEST) auto(other.CMSG_QUESTLOG_SWAP_QUEST);
    }
    if (opcode == Opcode::CMSG_QUESTLOG_REMOVE_QUEST) {
        new (&CMSG_QUESTLOG_REMOVE_QUEST) auto(other.CMSG_QUESTLOG_REMOVE_QUEST);
    }
    if (opcode == Opcode::CMSG_QUEST_CONFIRM_ACCEPT) {
        new (&CMSG_QUEST_CONFIRM_ACCEPT) auto(other.CMSG_QUEST_CONFIRM_ACCEPT);
    }
    if (opcode == Opcode::CMSG_PUSHQUESTTOPARTY) {
        new (&CMSG_PUSHQUESTTOPARTY) auto(other.CMSG_PUSHQUESTTOPARTY);
    }
    if (opcode == Opcode::CMSG_LIST_INVENTORY) {
        new (&CMSG_LIST_INVENTORY) auto(other.CMSG_LIST_INVENTORY);
    }
    if (opcode == Opcode::CMSG_SELL_ITEM) {
        new (&CMSG_SELL_ITEM) auto(other.CMSG_SELL_ITEM);
    }
    if (opcode == Opcode::CMSG_BUY_ITEM) {
        new (&CMSG_BUY_ITEM) auto(other.CMSG_BUY_ITEM);
    }
    if (opcode == Opcode::CMSG_BUY_ITEM_IN_SLOT) {
        new (&CMSG_BUY_ITEM_IN_SLOT) auto(other.CMSG_BUY_ITEM_IN_SLOT);
    }
    if (opcode == Opcode::CMSG_TAXINODE_STATUS_QUERY) {
        new (&CMSG_TAXINODE_STATUS_QUERY) auto(other.CMSG_TAXINODE_STATUS_QUERY);
    }
    if (opcode == Opcode::CMSG_TAXIQUERYAVAILABLENODES) {
        new (&CMSG_TAXIQUERYAVAILABLENODES) auto(other.CMSG_TAXIQUERYAVAILABLENODES);
    }
    if (opcode == Opcode::CMSG_ACTIVATETAXI) {
        new (&CMSG_ACTIVATETAXI) auto(other.CMSG_ACTIVATETAXI);
    }
    if (opcode == Opcode::CMSG_TRAINER_LIST) {
        new (&CMSG_TRAINER_LIST) auto(other.CMSG_TRAINER_LIST);
    }
    if (opcode == Opcode::CMSG_TRAINER_BUY_SPELL) {
        new (&CMSG_TRAINER_BUY_SPELL) auto(other.CMSG_TRAINER_BUY_SPELL);
    }
    if (opcode == Opcode::CMSG_BINDER_ACTIVATE) {
        new (&CMSG_BINDER_ACTIVATE) auto(other.CMSG_BINDER_ACTIVATE);
    }
    if (opcode == Opcode::CMSG_BANKER_ACTIVATE) {
        new (&CMSG_BANKER_ACTIVATE) auto(other.CMSG_BANKER_ACTIVATE);
    }
    if (opcode == Opcode::CMSG_BUY_BANK_SLOT) {
        new (&CMSG_BUY_BANK_SLOT) auto(other.CMSG_BUY_BANK_SLOT);
    }
    if (opcode == Opcode::CMSG_PETITION_SHOWLIST) {
        new (&CMSG_PETITION_SHOWLIST) auto(other.CMSG_PETITION_SHOWLIST);
    }
    if (opcode == Opcode::CMSG_PETITION_BUY) {
        new (&CMSG_PETITION_BUY) auto(other.CMSG_PETITION_BUY);
    }
    if (opcode == Opcode::CMSG_PETITION_SHOW_SIGNATURES) {
        new (&CMSG_PETITION_SHOW_SIGNATURES) auto(other.CMSG_PETITION_SHOW_SIGNATURES);
    }
    if (opcode == Opcode::CMSG_PETITION_SIGN) {
        new (&CMSG_PETITION_SIGN) auto(other.CMSG_PETITION_SIGN);
    }
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        new (&MSG_PETITION_DECLINE) auto(other.MSG_PETITION_DECLINE);
    }
    if (opcode == Opcode::CMSG_OFFER_PETITION) {
        new (&CMSG_OFFER_PETITION) auto(other.CMSG_OFFER_PETITION);
    }
    if (opcode == Opcode::CMSG_TURN_IN_PETITION) {
        new (&CMSG_TURN_IN_PETITION) auto(other.CMSG_TURN_IN_PETITION);
    }
    if (opcode == Opcode::CMSG_PETITION_QUERY) {
        new (&CMSG_PETITION_QUERY) auto(other.CMSG_PETITION_QUERY);
    }
    if (opcode == Opcode::CMSG_BUG) {
        new (&CMSG_BUG) auto(other.CMSG_BUG);
    }
    if (opcode == Opcode::CMSG_PLAYED_TIME) {
        new (&CMSG_PLAYED_TIME) auto(other.CMSG_PLAYED_TIME);
    }
    if (opcode == Opcode::CMSG_QUERY_TIME) {
        new (&CMSG_QUERY_TIME) auto(other.CMSG_QUERY_TIME);
    }
    if (opcode == Opcode::CMSG_RECLAIM_CORPSE) {
        new (&CMSG_RECLAIM_CORPSE) auto(other.CMSG_RECLAIM_CORPSE);
    }
    if (opcode == Opcode::CMSG_WRAP_ITEM) {
        new (&CMSG_WRAP_ITEM) auto(other.CMSG_WRAP_ITEM);
    }
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        new (&MSG_MINIMAP_PING) auto(other.MSG_MINIMAP_PING);
    }
    if (opcode == Opcode::CMSG_PING) {
        new (&CMSG_PING) auto(other.CMSG_PING);
    }
    if (opcode == Opcode::CMSG_SETSHEATHED) {
        new (&CMSG_SETSHEATHED) auto(other.CMSG_SETSHEATHED);
    }
    if (opcode == Opcode::CMSG_QUEST_POI_QUERY) {
        new (&CMSG_QUEST_POI_QUERY) auto(other.CMSG_QUEST_POI_QUERY);
    }
    if (opcode == Opcode::CMSG_AUTH_SESSION) {
        new (&CMSG_AUTH_SESSION) auto(other.CMSG_AUTH_SESSION);
    }
    if (opcode == Opcode::CMSG_PET_CAST_SPELL) {
        new (&CMSG_PET_CAST_SPELL) auto(other.CMSG_PET_CAST_SPELL);
    }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        new (&MSG_SAVE_GUILD_EMBLEM) auto(other.MSG_SAVE_GUILD_EMBLEM);
    }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        new (&MSG_TABARDVENDOR_ACTIVATE) auto(other.MSG_TABARDVENDOR_ACTIVATE);
    }
    if (opcode == Opcode::CMSG_ZONEUPDATE) {
        new (&CMSG_ZONEUPDATE) auto(other.CMSG_ZONEUPDATE);
    }
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        new (&MSG_RANDOM_ROLL) auto(other.MSG_RANDOM_ROLL);
    }
    if (opcode == Opcode::CMSG_UNLEARN_SKILL) {
        new (&CMSG_UNLEARN_SKILL) auto(other.CMSG_UNLEARN_SKILL);
    }
    if (opcode == Opcode::CMSG_GMTICKET_CREATE) {
        new (&CMSG_GMTICKET_CREATE) auto(other.CMSG_GMTICKET_CREATE);
    }
    if (opcode == Opcode::CMSG_GMTICKET_UPDATETEXT) {
        new (&CMSG_GMTICKET_UPDATETEXT) auto(other.CMSG_GMTICKET_UPDATETEXT);
    }
    if (opcode == Opcode::CMSG_REQUEST_ACCOUNT_DATA) {
        new (&CMSG_REQUEST_ACCOUNT_DATA) auto(other.CMSG_REQUEST_ACCOUNT_DATA);
    }
    if (opcode == Opcode::CMSG_UPDATE_ACCOUNT_DATA) {
        new (&CMSG_UPDATE_ACCOUNT_DATA) auto(other.CMSG_UPDATE_ACCOUNT_DATA);
    }
    if (opcode == Opcode::CMSG_GMTICKET_GETTICKET) {
        new (&CMSG_GMTICKET_GETTICKET) auto(other.CMSG_GMTICKET_GETTICKET);
    }
    if (opcode == Opcode::CMSG_UNLEARN_TALENTS) {
        new (&CMSG_UNLEARN_TALENTS) auto(other.CMSG_UNLEARN_TALENTS);
    }
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        new (&MSG_CORPSE_QUERY) auto(other.MSG_CORPSE_QUERY);
    }
    if (opcode == Opcode::CMSG_GMTICKET_DELETETICKET) {
        new (&CMSG_GMTICKET_DELETETICKET) auto(other.CMSG_GMTICKET_DELETETICKET);
    }
    if (opcode == Opcode::CMSG_GMTICKET_SYSTEMSTATUS) {
        new (&CMSG_GMTICKET_SYSTEMSTATUS) auto(other.CMSG_GMTICKET_SYSTEMSTATUS);
    }
    if (opcode == Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) {
        new (&CMSG_SPIRIT_HEALER_ACTIVATE) auto(other.CMSG_SPIRIT_HEALER_ACTIVATE);
    }
    if (opcode == Opcode::CMSG_CHAT_IGNORED) {
        new (&CMSG_CHAT_IGNORED) auto(other.CMSG_CHAT_IGNORED);
    }
    if (opcode == Opcode::CMSG_GUILD_RANK) {
        new (&CMSG_GUILD_RANK) auto(other.CMSG_GUILD_RANK);
    }
    if (opcode == Opcode::CMSG_GUILD_ADD_RANK) {
        new (&CMSG_GUILD_ADD_RANK) auto(other.CMSG_GUILD_ADD_RANK);
    }
    if (opcode == Opcode::CMSG_GUILD_DEL_RANK) {
        new (&CMSG_GUILD_DEL_RANK) auto(other.CMSG_GUILD_DEL_RANK);
    }
    if (opcode == Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) {
        new (&CMSG_GUILD_SET_PUBLIC_NOTE) auto(other.CMSG_GUILD_SET_PUBLIC_NOTE);
    }
    if (opcode == Opcode::CMSG_GUILD_SET_OFFICER_NOTE) {
        new (&CMSG_GUILD_SET_OFFICER_NOTE) auto(other.CMSG_GUILD_SET_OFFICER_NOTE);
    }
    if (opcode == Opcode::CMSG_SEND_MAIL) {
        new (&CMSG_SEND_MAIL) auto(other.CMSG_SEND_MAIL);
    }
    if (opcode == Opcode::CMSG_GET_MAIL_LIST) {
        new (&CMSG_GET_MAIL_LIST) auto(other.CMSG_GET_MAIL_LIST);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_LIST) {
        new (&CMSG_BATTLEFIELD_LIST) auto(other.CMSG_BATTLEFIELD_LIST);
    }
    if (opcode == Opcode::CMSG_ITEM_TEXT_QUERY) {
        new (&CMSG_ITEM_TEXT_QUERY) auto(other.CMSG_ITEM_TEXT_QUERY);
    }
    if (opcode == Opcode::CMSG_MAIL_TAKE_MONEY) {
        new (&CMSG_MAIL_TAKE_MONEY) auto(other.CMSG_MAIL_TAKE_MONEY);
    }
    if (opcode == Opcode::CMSG_MAIL_TAKE_ITEM) {
        new (&CMSG_MAIL_TAKE_ITEM) auto(other.CMSG_MAIL_TAKE_ITEM);
    }
    if (opcode == Opcode::CMSG_MAIL_MARK_AS_READ) {
        new (&CMSG_MAIL_MARK_AS_READ) auto(other.CMSG_MAIL_MARK_AS_READ);
    }
    if (opcode == Opcode::CMSG_MAIL_RETURN_TO_SENDER) {
        new (&CMSG_MAIL_RETURN_TO_SENDER) auto(other.CMSG_MAIL_RETURN_TO_SENDER);
    }
    if (opcode == Opcode::CMSG_MAIL_DELETE) {
        new (&CMSG_MAIL_DELETE) auto(other.CMSG_MAIL_DELETE);
    }
    if (opcode == Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) {
        new (&CMSG_MAIL_CREATE_TEXT_ITEM) auto(other.CMSG_MAIL_CREATE_TEXT_ITEM);
    }
    if (opcode == Opcode::CMSG_LEARN_TALENT) {
        new (&CMSG_LEARN_TALENT) auto(other.CMSG_LEARN_TALENT);
    }
    if (opcode == Opcode::CMSG_TOGGLE_PVP) {
        new (&CMSG_TOGGLE_PVP) auto(other.CMSG_TOGGLE_PVP);
    }
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        new (&MSG_AUCTION_HELLO) auto(other.MSG_AUCTION_HELLO);
    }
    if (opcode == Opcode::CMSG_AUCTION_SELL_ITEM) {
        new (&CMSG_AUCTION_SELL_ITEM) auto(other.CMSG_AUCTION_SELL_ITEM);
    }
    if (opcode == Opcode::CMSG_AUCTION_REMOVE_ITEM) {
        new (&CMSG_AUCTION_REMOVE_ITEM) auto(other.CMSG_AUCTION_REMOVE_ITEM);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_ITEMS) {
        new (&CMSG_AUCTION_LIST_ITEMS) auto(other.CMSG_AUCTION_LIST_ITEMS);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) {
        new (&CMSG_AUCTION_LIST_OWNER_ITEMS) auto(other.CMSG_AUCTION_LIST_OWNER_ITEMS);
    }
    if (opcode == Opcode::CMSG_AUCTION_PLACE_BID) {
        new (&CMSG_AUCTION_PLACE_BID) auto(other.CMSG_AUCTION_PLACE_BID);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) {
        new (&CMSG_AUCTION_LIST_BIDDER_ITEMS) auto(other.CMSG_AUCTION_LIST_BIDDER_ITEMS);
    }
    if (opcode == Opcode::CMSG_SET_AMMO) {
        new (&CMSG_SET_AMMO) auto(other.CMSG_SET_AMMO);
    }
    if (opcode == Opcode::CMSG_SET_ACTIVE_MOVER) {
        new (&CMSG_SET_ACTIVE_MOVER) auto(other.CMSG_SET_ACTIVE_MOVER);
    }
    if (opcode == Opcode::CMSG_PET_CANCEL_AURA) {
        new (&CMSG_PET_CANCEL_AURA) auto(other.CMSG_PET_CANCEL_AURA);
    }
    if (opcode == Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) {
        new (&CMSG_CANCEL_AUTO_REPEAT_SPELL) auto(other.CMSG_CANCEL_AUTO_REPEAT_SPELL);
    }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        new (&MSG_LIST_STABLED_PETS) auto(other.MSG_LIST_STABLED_PETS);
    }
    if (opcode == Opcode::CMSG_STABLE_PET) {
        new (&CMSG_STABLE_PET) auto(other.CMSG_STABLE_PET);
    }
    if (opcode == Opcode::CMSG_UNSTABLE_PET) {
        new (&CMSG_UNSTABLE_PET) auto(other.CMSG_UNSTABLE_PET);
    }
    if (opcode == Opcode::CMSG_BUY_STABLE_SLOT) {
        new (&CMSG_BUY_STABLE_SLOT) auto(other.CMSG_BUY_STABLE_SLOT);
    }
    if (opcode == Opcode::CMSG_STABLE_SWAP_PET) {
        new (&CMSG_STABLE_SWAP_PET) auto(other.CMSG_STABLE_SWAP_PET);
    }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        new (&MSG_QUEST_PUSH_RESULT) auto(other.MSG_QUEST_PUSH_RESULT);
    }
    if (opcode == Opcode::CMSG_REQUEST_PET_INFO) {
        new (&CMSG_REQUEST_PET_INFO) auto(other.CMSG_REQUEST_PET_INFO);
    }
    if (opcode == Opcode::CMSG_FAR_SIGHT) {
        new (&CMSG_FAR_SIGHT) auto(other.CMSG_FAR_SIGHT);
    }
    if (opcode == Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) {
        new (&CMSG_GROUP_CHANGE_SUB_GROUP) auto(other.CMSG_GROUP_CHANGE_SUB_GROUP);
    }
    if (opcode == Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) {
        new (&CMSG_REQUEST_PARTY_MEMBER_STATS) auto(other.CMSG_REQUEST_PARTY_MEMBER_STATS);
    }
    if (opcode == Opcode::CMSG_GROUP_SWAP_SUB_GROUP) {
        new (&CMSG_GROUP_SWAP_SUB_GROUP) auto(other.CMSG_GROUP_SWAP_SUB_GROUP);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_BANK_ITEM) {
        new (&CMSG_AUTOSTORE_BANK_ITEM) auto(other.CMSG_AUTOSTORE_BANK_ITEM);
    }
    if (opcode == Opcode::CMSG_AUTOBANK_ITEM) {
        new (&CMSG_AUTOBANK_ITEM) auto(other.CMSG_AUTOBANK_ITEM);
    }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        new (&MSG_QUERY_NEXT_MAIL_TIME) auto(other.MSG_QUERY_NEXT_MAIL_TIME);
    }
    if (opcode == Opcode::CMSG_GROUP_RAID_CONVERT) {
        new (&CMSG_GROUP_RAID_CONVERT) auto(other.CMSG_GROUP_RAID_CONVERT);
    }
    if (opcode == Opcode::CMSG_GROUP_ASSISTANT_LEADER) {
        new (&CMSG_GROUP_ASSISTANT_LEADER) auto(other.CMSG_GROUP_ASSISTANT_LEADER);
    }
    if (opcode == Opcode::CMSG_BUYBACK_ITEM) {
        new (&CMSG_BUYBACK_ITEM) auto(other.CMSG_BUYBACK_ITEM);
    }
    if (opcode == Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) {
        new (&CMSG_SET_SAVED_INSTANCE_EXTEND) auto(other.CMSG_SET_SAVED_INSTANCE_EXTEND);
    }
    if (opcode == Opcode::CMSG_LFG_GET_STATUS) {
        new (&CMSG_LFG_GET_STATUS) auto(other.CMSG_LFG_GET_STATUS);
    }
    if (opcode == Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) {
        new (&CMSG_GMTICKETSYSTEM_TOGGLE) auto(other.CMSG_GMTICKETSYSTEM_TOGGLE);
    }
    if (opcode == Opcode::CMSG_CANCEL_GROWTH_AURA) {
        new (&CMSG_CANCEL_GROWTH_AURA) auto(other.CMSG_CANCEL_GROWTH_AURA);
    }
    if (opcode == Opcode::CMSG_LOOT_ROLL) {
        new (&CMSG_LOOT_ROLL) auto(other.CMSG_LOOT_ROLL);
    }
    if (opcode == Opcode::CMSG_LOOT_MASTER_GIVE) {
        new (&CMSG_LOOT_MASTER_GIVE) auto(other.CMSG_LOOT_MASTER_GIVE);
    }
    if (opcode == Opcode::CMSG_REPAIR_ITEM) {
        new (&CMSG_REPAIR_ITEM) auto(other.CMSG_REPAIR_ITEM);
    }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        new (&MSG_TALENT_WIPE_CONFIRM) auto(other.MSG_TALENT_WIPE_CONFIRM);
    }
    if (opcode == Opcode::CMSG_SUMMON_RESPONSE) {
        new (&CMSG_SUMMON_RESPONSE) auto(other.CMSG_SUMMON_RESPONSE);
    }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        new (&MSG_MOVE_WATER_WALK) auto(other.MSG_MOVE_WATER_WALK);
    }
    if (opcode == Opcode::CMSG_SELF_RES) {
        new (&CMSG_SELF_RES) auto(other.CMSG_SELF_RES);
    }
    if (opcode == Opcode::CMSG_TOGGLE_HELM) {
        new (&CMSG_TOGGLE_HELM) auto(other.CMSG_TOGGLE_HELM);
    }
    if (opcode == Opcode::CMSG_TOGGLE_CLOAK) {
        new (&CMSG_TOGGLE_CLOAK) auto(other.CMSG_TOGGLE_CLOAK);
    }
    if (opcode == Opcode::CMSG_SET_ACTIONBAR_TOGGLES) {
        new (&CMSG_SET_ACTIONBAR_TOGGLES) auto(other.CMSG_SET_ACTIONBAR_TOGGLES);
    }
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        new (&MSG_PETITION_RENAME) auto(other.MSG_PETITION_RENAME);
    }
    if (opcode == Opcode::CMSG_ITEM_NAME_QUERY) {
        new (&CMSG_ITEM_NAME_QUERY) auto(other.CMSG_ITEM_NAME_QUERY);
    }
    if (opcode == Opcode::CMSG_CHAR_RENAME) {
        new (&CMSG_CHAR_RENAME) auto(other.CMSG_CHAR_RENAME);
    }
    if (opcode == Opcode::CMSG_MOVE_SPLINE_DONE) {
        new (&CMSG_MOVE_SPLINE_DONE) auto(other.CMSG_MOVE_SPLINE_DONE);
    }
    if (opcode == Opcode::CMSG_MOVE_FALL_RESET) {
        new (&CMSG_MOVE_FALL_RESET) auto(other.CMSG_MOVE_FALL_RESET);
    }
    if (opcode == Opcode::CMSG_REQUEST_RAID_INFO) {
        new (&CMSG_REQUEST_RAID_INFO) auto(other.CMSG_REQUEST_RAID_INFO);
    }
    if (opcode == Opcode::CMSG_MOVE_TIME_SKIPPED) {
        new (&CMSG_MOVE_TIME_SKIPPED) auto(other.CMSG_MOVE_TIME_SKIPPED);
    }
    if (opcode == Opcode::CMSG_MOVE_FEATHER_FALL_ACK) {
        new (&CMSG_MOVE_FEATHER_FALL_ACK) auto(other.CMSG_MOVE_FEATHER_FALL_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_WATER_WALK_ACK) {
        new (&CMSG_MOVE_WATER_WALK_ACK) auto(other.CMSG_MOVE_WATER_WALK_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) {
        new (&CMSG_MOVE_NOT_ACTIVE_MOVER) auto(other.CMSG_MOVE_NOT_ACTIVE_MOVER);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_STATUS) {
        new (&CMSG_BATTLEFIELD_STATUS) auto(other.CMSG_BATTLEFIELD_STATUS);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_PORT) {
        new (&CMSG_BATTLEFIELD_PORT) auto(other.CMSG_BATTLEFIELD_PORT);
    }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        new (&MSG_INSPECT_HONOR_STATS) auto(other.MSG_INSPECT_HONOR_STATS);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_HELLO) {
        new (&CMSG_BATTLEMASTER_HELLO) auto(other.CMSG_BATTLEMASTER_HELLO);
    }
    if (opcode == Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) {
        new (&CMSG_FORCE_WALK_SPEED_CHANGE_ACK) auto(other.CMSG_FORCE_WALK_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) {
        new (&CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) auto(other.CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) {
        new (&CMSG_FORCE_TURN_RATE_CHANGE_ACK) auto(other.CMSG_FORCE_TURN_RATE_CHANGE_ACK);
    }
    if (opcode == Opcode::MSG_PVP_LOG_DATA) {
        new (&MSG_PVP_LOG_DATA) auto(other.MSG_PVP_LOG_DATA);
    }
    if (opcode == Opcode::CMSG_LEAVE_BATTLEFIELD) {
        new (&CMSG_LEAVE_BATTLEFIELD) auto(other.CMSG_LEAVE_BATTLEFIELD);
    }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) {
        new (&CMSG_AREA_SPIRIT_HEALER_QUERY) auto(other.CMSG_AREA_SPIRIT_HEALER_QUERY);
    }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) {
        new (&CMSG_AREA_SPIRIT_HEALER_QUEUE) auto(other.CMSG_AREA_SPIRIT_HEALER_QUEUE);
    }
    if (opcode == Opcode::CMSG_WARDEN_DATA) {
        new (&CMSG_WARDEN_DATA) auto(other.CMSG_WARDEN_DATA);
    }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        new (&MSG_BATTLEGROUND_PLAYER_POSITIONS) auto(other.MSG_BATTLEGROUND_PLAYER_POSITIONS);
    }
    if (opcode == Opcode::CMSG_PET_STOP_ATTACK) {
        new (&CMSG_PET_STOP_ATTACK) auto(other.CMSG_PET_STOP_ATTACK);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN) {
        new (&CMSG_BATTLEMASTER_JOIN) auto(other.CMSG_BATTLEMASTER_JOIN);
    }
    if (opcode == Opcode::CMSG_PET_UNLEARN) {
        new (&CMSG_PET_UNLEARN) auto(other.CMSG_PET_UNLEARN);
    }
    if (opcode == Opcode::CMSG_PET_SPELL_AUTOCAST) {
        new (&CMSG_PET_SPELL_AUTOCAST) auto(other.CMSG_PET_SPELL_AUTOCAST);
    }
    if (opcode == Opcode::CMSG_GUILD_INFO_TEXT) {
        new (&CMSG_GUILD_INFO_TEXT) auto(other.CMSG_GUILD_INFO_TEXT);
    }
    if (opcode == Opcode::CMSG_ACTIVATETAXIEXPRESS) {
        new (&CMSG_ACTIVATETAXIEXPRESS) auto(other.CMSG_ACTIVATETAXIEXPRESS);
    }
    if (opcode == Opcode::CMSG_SET_FACTION_INACTIVE) {
        new (&CMSG_SET_FACTION_INACTIVE) auto(other.CMSG_SET_FACTION_INACTIVE);
    }
    if (opcode == Opcode::CMSG_SET_WATCHED_FACTION) {
        new (&CMSG_SET_WATCHED_FACTION) auto(other.CMSG_SET_WATCHED_FACTION);
    }
    if (opcode == Opcode::CMSG_RESET_INSTANCES) {
        new (&CMSG_RESET_INSTANCES) auto(other.CMSG_RESET_INSTANCES);
    }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        new (&MSG_RAID_TARGET_UPDATE) auto(other.MSG_RAID_TARGET_UPDATE);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        new (&MSG_RAID_READY_CHECK) auto(other.MSG_RAID_READY_CHECK);
    }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        new (&MSG_SET_DUNGEON_DIFFICULTY) auto(other.MSG_SET_DUNGEON_DIFFICULTY);
    }
    if (opcode == Opcode::CMSG_GMSURVEY_SUBMIT) {
        new (&CMSG_GMSURVEY_SUBMIT) auto(other.CMSG_GMSURVEY_SUBMIT);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) {
        new (&CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) auto(other.CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) {
        new (&CMSG_MOVE_SET_CAN_FLY_ACK) auto(other.CMSG_MOVE_SET_CAN_FLY_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_FLY) {
        new (&CMSG_MOVE_SET_FLY) auto(other.CMSG_MOVE_SET_FLY);
    }
    if (opcode == Opcode::CMSG_SOCKET_GEMS) {
        new (&CMSG_SOCKET_GEMS) auto(other.CMSG_SOCKET_GEMS);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ROSTER) {
        new (&CMSG_ARENA_TEAM_ROSTER) auto(other.CMSG_ARENA_TEAM_ROSTER);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_INVITE) {
        new (&CMSG_ARENA_TEAM_INVITE) auto(other.CMSG_ARENA_TEAM_INVITE);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ACCEPT) {
        new (&CMSG_ARENA_TEAM_ACCEPT) auto(other.CMSG_ARENA_TEAM_ACCEPT);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DECLINE) {
        new (&CMSG_ARENA_TEAM_DECLINE) auto(other.CMSG_ARENA_TEAM_DECLINE);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEAVE) {
        new (&CMSG_ARENA_TEAM_LEAVE) auto(other.CMSG_ARENA_TEAM_LEAVE);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_REMOVE) {
        new (&CMSG_ARENA_TEAM_REMOVE) auto(other.CMSG_ARENA_TEAM_REMOVE);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DISBAND) {
        new (&CMSG_ARENA_TEAM_DISBAND) auto(other.CMSG_ARENA_TEAM_DISBAND);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEADER) {
        new (&CMSG_ARENA_TEAM_LEADER) auto(other.CMSG_ARENA_TEAM_LEADER);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) {
        new (&CMSG_BATTLEMASTER_JOIN_ARENA) auto(other.CMSG_BATTLEMASTER_JOIN_ARENA);
    }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        new (&MSG_MOVE_START_ASCEND) auto(other.MSG_MOVE_START_ASCEND);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        new (&MSG_MOVE_STOP_ASCEND) auto(other.MSG_MOVE_STOP_ASCEND);
    }
    if (opcode == Opcode::CMSG_LFG_JOIN) {
        new (&CMSG_LFG_JOIN) auto(other.CMSG_LFG_JOIN);
    }
    if (opcode == Opcode::CMSG_LFG_LEAVE) {
        new (&CMSG_LFG_LEAVE) auto(other.CMSG_LFG_LEAVE);
    }
    if (opcode == Opcode::CMSG_SEARCH_LFG_JOIN) {
        new (&CMSG_SEARCH_LFG_JOIN) auto(other.CMSG_SEARCH_LFG_JOIN);
    }
    if (opcode == Opcode::CMSG_SEARCH_LFG_LEAVE) {
        new (&CMSG_SEARCH_LFG_LEAVE) auto(other.CMSG_SEARCH_LFG_LEAVE);
    }
    if (opcode == Opcode::CMSG_LFG_PROPOSAL_RESULT) {
        new (&CMSG_LFG_PROPOSAL_RESULT) auto(other.CMSG_LFG_PROPOSAL_RESULT);
    }
    if (opcode == Opcode::CMSG_SET_LFG_COMMENT) {
        new (&CMSG_SET_LFG_COMMENT) auto(other.CMSG_SET_LFG_COMMENT);
    }
    if (opcode == Opcode::CMSG_LFG_SET_ROLES) {
        new (&CMSG_LFG_SET_ROLES) auto(other.CMSG_LFG_SET_ROLES);
    }
    if (opcode == Opcode::CMSG_LFG_SET_BOOT_VOTE) {
        new (&CMSG_LFG_SET_BOOT_VOTE) auto(other.CMSG_LFG_SET_BOOT_VOTE);
    }
    if (opcode == Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) {
        new (&CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) auto(other.CMSG_LFD_PLAYER_LOCK_INFO_REQUEST);
    }
    if (opcode == Opcode::CMSG_LFG_TELEPORT) {
        new (&CMSG_LFG_TELEPORT) auto(other.CMSG_LFG_TELEPORT);
    }
    if (opcode == Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) {
        new (&CMSG_LFD_PARTY_LOCK_INFO_REQUEST) auto(other.CMSG_LFD_PARTY_LOCK_INFO_REQUEST);
    }
    if (opcode == Opcode::CMSG_SET_TITLE) {
        new (&CMSG_SET_TITLE) auto(other.CMSG_SET_TITLE);
    }
    if (opcode == Opcode::CMSG_CANCEL_MOUNT_AURA) {
        new (&CMSG_CANCEL_MOUNT_AURA) auto(other.CMSG_CANCEL_MOUNT_AURA);
    }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        new (&MSG_INSPECT_ARENA_TEAMS) auto(other.MSG_INSPECT_ARENA_TEAMS);
    }
    if (opcode == Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) {
        new (&CMSG_CANCEL_TEMP_ENCHANTMENT) auto(other.CMSG_CANCEL_TEMP_ENCHANTMENT);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        new (&MSG_MOVE_SET_FLIGHT_BACK_SPEED) auto(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED);
    }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) {
        new (&CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) auto(other.CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) {
        new (&CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) auto(other.CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) {
        new (&CMSG_SET_TAXI_BENCHMARK_MODE) auto(other.CMSG_SET_TAXI_BENCHMARK_MODE);
    }
    if (opcode == Opcode::CMSG_REALM_SPLIT) {
        new (&CMSG_REALM_SPLIT) auto(other.CMSG_REALM_SPLIT);
    }
    if (opcode == Opcode::CMSG_MOVE_CHNG_TRANSPORT) {
        new (&CMSG_MOVE_CHNG_TRANSPORT) auto(other.CMSG_MOVE_CHNG_TRANSPORT);
    }
    if (opcode == Opcode::MSG_PARTY_ASSIGNMENT) {
        new (&MSG_PARTY_ASSIGNMENT) auto(other.MSG_PARTY_ASSIGNMENT);
    }
    if (opcode == Opcode::CMSG_TIME_SYNC_RESP) {
        new (&CMSG_TIME_SYNC_RESP) auto(other.CMSG_TIME_SYNC_RESP);
    }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        new (&MSG_MOVE_START_DESCEND) auto(other.MSG_MOVE_START_DESCEND);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        new (&MSG_RAID_READY_CHECK_CONFIRM) auto(other.MSG_RAID_READY_CHECK_CONFIRM);
    }
    if (opcode == Opcode::CMSG_VOICE_SESSION_ENABLE) {
        new (&CMSG_VOICE_SESSION_ENABLE) auto(other.CMSG_VOICE_SESSION_ENABLE);
    }
    if (opcode == Opcode::CMSG_COMMENTATOR_ENABLE) {
        new (&CMSG_COMMENTATOR_ENABLE) auto(other.CMSG_COMMENTATOR_ENABLE);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_FINISHED) {
        new (&MSG_RAID_READY_CHECK_FINISHED) auto(other.MSG_RAID_READY_CHECK_FINISHED);
    }
    if (opcode == Opcode::CMSG_COMPLAIN) {
        new (&CMSG_COMPLAIN) auto(other.CMSG_COMPLAIN);
    }
    if (opcode == Opcode::CMSG_CHANNEL_DISPLAY_LIST) {
        new (&CMSG_CHANNEL_DISPLAY_LIST) auto(other.CMSG_CHANNEL_DISPLAY_LIST);
    }
    if (opcode == Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) {
        new (&CMSG_SET_ACTIVE_VOICE_CHANNEL) auto(other.CMSG_SET_ACTIVE_VOICE_CHANNEL);
    }
    if (opcode == Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) {
        new (&CMSG_GET_CHANNEL_MEMBER_COUNT) auto(other.CMSG_GET_CHANNEL_MEMBER_COUNT);
    }
    if (opcode == Opcode::CMSG_CHANNEL_VOICE_ON) {
        new (&CMSG_CHANNEL_VOICE_ON) auto(other.CMSG_CHANNEL_VOICE_ON);
    }
    if (opcode == Opcode::CMSG_REPORT_PVP_AFK) {
        new (&CMSG_REPORT_PVP_AFK) auto(other.CMSG_REPORT_PVP_AFK);
    }
    if (opcode == Opcode::CMSG_GUILD_BANKER_ACTIVATE) {
        new (&CMSG_GUILD_BANKER_ACTIVATE) auto(other.CMSG_GUILD_BANKER_ACTIVATE);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_QUERY_TAB) {
        new (&CMSG_GUILD_BANK_QUERY_TAB) auto(other.CMSG_GUILD_BANK_QUERY_TAB);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) {
        new (&CMSG_GUILD_BANK_SWAP_ITEMS) auto(other.CMSG_GUILD_BANK_SWAP_ITEMS);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_BUY_TAB) {
        new (&CMSG_GUILD_BANK_BUY_TAB) auto(other.CMSG_GUILD_BANK_BUY_TAB);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_UPDATE_TAB) {
        new (&CMSG_GUILD_BANK_UPDATE_TAB) auto(other.CMSG_GUILD_BANK_UPDATE_TAB);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) {
        new (&CMSG_GUILD_BANK_DEPOSIT_MONEY) auto(other.CMSG_GUILD_BANK_DEPOSIT_MONEY);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) {
        new (&CMSG_GUILD_BANK_WITHDRAW_MONEY) auto(other.CMSG_GUILD_BANK_WITHDRAW_MONEY);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        new (&MSG_GUILD_BANK_LOG_QUERY) auto(other.MSG_GUILD_BANK_LOG_QUERY);
    }
    if (opcode == Opcode::CMSG_SET_CHANNEL_WATCH) {
        new (&CMSG_SET_CHANNEL_WATCH) auto(other.CMSG_SET_CHANNEL_WATCH);
    }
    if (opcode == Opcode::CMSG_CLEAR_CHANNEL_WATCH) {
        new (&CMSG_CLEAR_CHANNEL_WATCH) auto(other.CMSG_CLEAR_CHANNEL_WATCH);
    }
    if (opcode == Opcode::CMSG_SPELLCLICK) {
        new (&CMSG_SPELLCLICK) auto(other.CMSG_SPELLCLICK);
    }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        new (&MSG_GUILD_PERMISSIONS) auto(other.MSG_GUILD_PERMISSIONS);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        new (&MSG_GUILD_BANK_MONEY_WITHDRAWN) auto(other.MSG_GUILD_BANK_MONEY_WITHDRAWN);
    }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        new (&MSG_GUILD_EVENT_LOG_QUERY) auto(other.MSG_GUILD_EVENT_LOG_QUERY);
    }
    if (opcode == Opcode::CMSG_GET_MIRRORIMAGE_DATA) {
        new (&CMSG_GET_MIRRORIMAGE_DATA) auto(other.CMSG_GET_MIRRORIMAGE_DATA);
    }
    if (opcode == Opcode::CMSG_KEEP_ALIVE) {
        new (&CMSG_KEEP_ALIVE) auto(other.CMSG_KEEP_ALIVE);
    }
    if (opcode == Opcode::CMSG_OPT_OUT_OF_LOOT) {
        new (&CMSG_OPT_OUT_OF_LOOT) auto(other.CMSG_OPT_OUT_OF_LOOT);
    }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        new (&MSG_QUERY_GUILD_BANK_TEXT) auto(other.MSG_QUERY_GUILD_BANK_TEXT);
    }
    if (opcode == Opcode::CMSG_SET_GUILD_BANK_TEXT) {
        new (&CMSG_SET_GUILD_BANK_TEXT) auto(other.CMSG_SET_GUILD_BANK_TEXT);
    }
    if (opcode == Opcode::CMSG_GRANT_LEVEL) {
        new (&CMSG_GRANT_LEVEL) auto(other.CMSG_GRANT_LEVEL);
    }
    if (opcode == Opcode::CMSG_TOTEM_DESTROYED) {
        new (&CMSG_TOTEM_DESTROYED) auto(other.CMSG_TOTEM_DESTROYED);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) {
        new (&CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) auto(other.CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY);
    }
    if (opcode == Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) {
        new (&CMSG_SET_PLAYER_DECLINED_NAMES) auto(other.CMSG_SET_PLAYER_DECLINED_NAMES);
    }
    if (opcode == Opcode::CMSG_ACCEPT_LEVEL_GRANT) {
        new (&CMSG_ACCEPT_LEVEL_GRANT) auto(other.CMSG_ACCEPT_LEVEL_GRANT);
    }
    if (opcode == Opcode::CMSG_ALTER_APPEARANCE) {
        new (&CMSG_ALTER_APPEARANCE) auto(other.CMSG_ALTER_APPEARANCE);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_CALENDAR) {
        new (&CMSG_CALENDAR_GET_CALENDAR) auto(other.CMSG_CALENDAR_GET_CALENDAR);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_EVENT) {
        new (&CMSG_CALENDAR_GET_EVENT) auto(other.CMSG_CALENDAR_GET_EVENT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GUILD_FILTER) {
        new (&CMSG_CALENDAR_GUILD_FILTER) auto(other.CMSG_CALENDAR_GUILD_FILTER);
    }
    if (opcode == Opcode::CMSG_CALENDAR_ARENA_TEAM) {
        new (&CMSG_CALENDAR_ARENA_TEAM) auto(other.CMSG_CALENDAR_ARENA_TEAM);
    }
    if (opcode == Opcode::CMSG_CALENDAR_ADD_EVENT) {
        new (&CMSG_CALENDAR_ADD_EVENT) auto(other.CMSG_CALENDAR_ADD_EVENT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_UPDATE_EVENT) {
        new (&CMSG_CALENDAR_UPDATE_EVENT) auto(other.CMSG_CALENDAR_UPDATE_EVENT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_REMOVE_EVENT) {
        new (&CMSG_CALENDAR_REMOVE_EVENT) auto(other.CMSG_CALENDAR_REMOVE_EVENT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_COPY_EVENT) {
        new (&CMSG_CALENDAR_COPY_EVENT) auto(other.CMSG_CALENDAR_COPY_EVENT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_INVITE) {
        new (&CMSG_CALENDAR_EVENT_INVITE) auto(other.CMSG_CALENDAR_EVENT_INVITE);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_RSVP) {
        new (&CMSG_CALENDAR_EVENT_RSVP) auto(other.CMSG_CALENDAR_EVENT_RSVP);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) {
        new (&CMSG_CALENDAR_EVENT_REMOVE_INVITE) auto(other.CMSG_CALENDAR_EVENT_REMOVE_INVITE);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_STATUS) {
        new (&CMSG_CALENDAR_EVENT_STATUS) auto(other.CMSG_CALENDAR_EVENT_STATUS);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) {
        new (&CMSG_CALENDAR_EVENT_MODERATOR_STATUS) auto(other.CMSG_CALENDAR_EVENT_MODERATOR_STATUS);
    }
    if (opcode == Opcode::CMSG_CALENDAR_COMPLAIN) {
        new (&CMSG_CALENDAR_COMPLAIN) auto(other.CMSG_CALENDAR_COMPLAIN);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        new (&CMSG_CALENDAR_GET_NUM_PENDING) auto(other.CMSG_CALENDAR_GET_NUM_PENDING);
    }
    if (opcode == Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) {
        new (&CMSG_UPDATE_MISSILE_TRAJECTORY) auto(other.CMSG_UPDATE_MISSILE_TRAJECTORY);
    }
    if (opcode == Opcode::CMSG_COMPLETE_MOVIE) {
        new (&CMSG_COMPLETE_MOVIE) auto(other.CMSG_COMPLETE_MOVIE);
    }
    if (opcode == Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) {
        new (&CMSG_QUERY_INSPECT_ACHIEVEMENTS) auto(other.CMSG_QUERY_INSPECT_ACHIEVEMENTS);
    }
    if (opcode == Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) {
        new (&CMSG_DISMISS_CONTROLLED_VEHICLE) auto(other.CMSG_DISMISS_CONTROLLED_VEHICLE);
    }
    if (opcode == Opcode::CMSG_CHAR_CUSTOMIZE) {
        new (&CMSG_CHAR_CUSTOMIZE) auto(other.CMSG_CHAR_CUSTOMIZE);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_EXIT) {
        new (&CMSG_REQUEST_VEHICLE_EXIT) auto(other.CMSG_REQUEST_VEHICLE_EXIT);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) {
        new (&CMSG_REQUEST_VEHICLE_PREV_SEAT) auto(other.CMSG_REQUEST_VEHICLE_PREV_SEAT);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) {
        new (&CMSG_REQUEST_VEHICLE_NEXT_SEAT) auto(other.CMSG_REQUEST_VEHICLE_NEXT_SEAT);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) {
        new (&CMSG_REQUEST_VEHICLE_SWITCH_SEAT) auto(other.CMSG_REQUEST_VEHICLE_SWITCH_SEAT);
    }
    if (opcode == Opcode::CMSG_PET_LEARN_TALENT) {
        new (&CMSG_PET_LEARN_TALENT) auto(other.CMSG_PET_LEARN_TALENT);
    }
    if (opcode == Opcode::CMSG_GAMEOBJ_REPORT_USE) {
        new (&CMSG_GAMEOBJ_REPORT_USE) auto(other.CMSG_GAMEOBJ_REPORT_USE);
    }
    if (opcode == Opcode::CMSG_REMOVE_GLYPH) {
        new (&CMSG_REMOVE_GLYPH) auto(other.CMSG_REMOVE_GLYPH);
    }
    if (opcode == Opcode::CMSG_DISMISS_CRITTER) {
        new (&CMSG_DISMISS_CRITTER) auto(other.CMSG_DISMISS_CRITTER);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_PENDING_SALES) {
        new (&CMSG_AUCTION_LIST_PENDING_SALES) auto(other.CMSG_AUCTION_LIST_PENDING_SALES);
    }
    if (opcode == Opcode::CMSG_ENABLETAXI) {
        new (&CMSG_ENABLETAXI) auto(other.CMSG_ENABLETAXI);
    }
    if (opcode == Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) {
        new (&CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) auto(other.CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE);
    }
    if (opcode == Opcode::CMSG_HEARTH_AND_RESURRECT) {
        new (&CMSG_HEARTH_AND_RESURRECT) auto(other.CMSG_HEARTH_AND_RESURRECT);
    }
    if (opcode == Opcode::CMSG_PLAYER_VEHICLE_ENTER) {
        new (&CMSG_PLAYER_VEHICLE_ENTER) auto(other.CMSG_PLAYER_VEHICLE_ENTER);
    }
    if (opcode == Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) {
        new (&CMSG_CONTROLLER_EJECT_PASSENGER) auto(other.CMSG_CONTROLLER_EJECT_PASSENGER);
    }
    if (opcode == Opcode::CMSG_ITEM_REFUND_INFO) {
        new (&CMSG_ITEM_REFUND_INFO) auto(other.CMSG_ITEM_REFUND_INFO);
    }
    if (opcode == Opcode::CMSG_ITEM_REFUND) {
        new (&CMSG_ITEM_REFUND) auto(other.CMSG_ITEM_REFUND);
    }
    if (opcode == Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) {
        new (&CMSG_CORPSE_MAP_POSITION_QUERY) auto(other.CMSG_CORPSE_MAP_POSITION_QUERY);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_SIGNUP) {
        new (&CMSG_CALENDAR_EVENT_SIGNUP) auto(other.CMSG_CALENDAR_EVENT_SIGNUP);
    }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_SAVE) {
        new (&CMSG_EQUIPMENT_SET_SAVE) auto(other.CMSG_EQUIPMENT_SET_SAVE);
    }
    if (opcode == Opcode::CMSG_UPDATE_PROJECTILE_POSITION) {
        new (&CMSG_UPDATE_PROJECTILE_POSITION) auto(other.CMSG_UPDATE_PROJECTILE_POSITION);
    }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS) {
        new (&CMSG_LEARN_PREVIEW_TALENTS) auto(other.CMSG_LEARN_PREVIEW_TALENTS);
    }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) {
        new (&CMSG_LEARN_PREVIEW_TALENTS_PET) auto(other.CMSG_LEARN_PREVIEW_TALENTS_PET);
    }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) {
        new (&CMSG_MOVE_GRAVITY_DISABLE_ACK) auto(other.CMSG_MOVE_GRAVITY_DISABLE_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) {
        new (&CMSG_MOVE_GRAVITY_ENABLE_ACK) auto(other.CMSG_MOVE_GRAVITY_ENABLE_ACK);
    }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_USE) {
        new (&CMSG_EQUIPMENT_SET_USE) auto(other.CMSG_EQUIPMENT_SET_USE);
    }
    if (opcode == Opcode::CMSG_CHAR_FACTION_CHANGE) {
        new (&CMSG_CHAR_FACTION_CHANGE) auto(other.CMSG_CHAR_FACTION_CHANGE);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) {
        new (&CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) auto(other.CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) {
        new (&CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) auto(other.CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) {
        new (&CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) auto(other.CMSG_BATTLEFIELD_MGR_EXIT_REQUEST);
    }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        new (&MSG_SET_RAID_DIFFICULTY) auto(other.MSG_SET_RAID_DIFFICULTY);
    }
    if (opcode == Opcode::CMSG_GMRESPONSE_RESOLVE) {
        new (&CMSG_GMRESPONSE_RESOLVE) auto(other.CMSG_GMRESPONSE_RESOLVE);
    }
    if (opcode == Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        new (&CMSG_WORLD_STATE_UI_TIMER_UPDATE) auto(other.CMSG_WORLD_STATE_UI_TIMER_UPDATE);
    }
    if (opcode == Opcode::CMSG_CHAR_RACE_CHANGE) {
        new (&CMSG_CHAR_RACE_CHANGE) auto(other.CMSG_CHAR_RACE_CHANGE);
    }
    if (opcode == Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) {
        new (&CMSG_READY_FOR_ACCOUNT_DATA_TIMES) auto(other.CMSG_READY_FOR_ACCOUNT_DATA_TIMES);
    }
    if (opcode == Opcode::CMSG_QUERY_QUESTS_COMPLETED) {
        new (&CMSG_QUERY_QUESTS_COMPLETED) auto(other.CMSG_QUERY_QUESTS_COMPLETED);
    }
    if (opcode == Opcode::CMSG_GM_REPORT_LAG) {
        new (&CMSG_GM_REPORT_LAG) auto(other.CMSG_GM_REPORT_LAG);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) {
        new (&CMSG_MOVE_SET_COLLISION_HGT_ACK) auto(other.CMSG_MOVE_SET_COLLISION_HGT_ACK);
    }
}

/* 3 copy assignment */
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode& ClientOpcode::operator=(const ClientOpcode& other) {
    if (this == &other) {
        return *this;
    }

    this->opcode = other.opcode;
    if (opcode == Opcode::CMSG_BOOTME) {
        wrath::CMSG_BOOTME CMSG_BOOTMEswap(other.CMSG_BOOTME);
        std::swap(this->CMSG_BOOTME, CMSG_BOOTMEswap);
    }
    if (opcode == Opcode::CMSG_DBLOOKUP) {
        wrath::CMSG_DBLOOKUP CMSG_DBLOOKUPswap(other.CMSG_DBLOOKUP);
        std::swap(this->CMSG_DBLOOKUP, CMSG_DBLOOKUPswap);
    }
    if (opcode == Opcode::CMSG_WORLD_TELEPORT) {
        wrath::CMSG_WORLD_TELEPORT CMSG_WORLD_TELEPORTswap(other.CMSG_WORLD_TELEPORT);
        std::swap(this->CMSG_WORLD_TELEPORT, CMSG_WORLD_TELEPORTswap);
    }
    if (opcode == Opcode::CMSG_TELEPORT_TO_UNIT) {
        wrath::CMSG_TELEPORT_TO_UNIT CMSG_TELEPORT_TO_UNITswap(other.CMSG_TELEPORT_TO_UNIT);
        std::swap(this->CMSG_TELEPORT_TO_UNIT, CMSG_TELEPORT_TO_UNITswap);
    }
    if (opcode == Opcode::CMSG_CHAR_CREATE) {
        wrath::CMSG_CHAR_CREATE CMSG_CHAR_CREATEswap(other.CMSG_CHAR_CREATE);
        std::swap(this->CMSG_CHAR_CREATE, CMSG_CHAR_CREATEswap);
    }
    if (opcode == Opcode::CMSG_CHAR_ENUM) {
        wrath::CMSG_CHAR_ENUM CMSG_CHAR_ENUMswap(other.CMSG_CHAR_ENUM);
        std::swap(this->CMSG_CHAR_ENUM, CMSG_CHAR_ENUMswap);
    }
    if (opcode == Opcode::CMSG_CHAR_DELETE) {
        wrath::CMSG_CHAR_DELETE CMSG_CHAR_DELETEswap(other.CMSG_CHAR_DELETE);
        std::swap(this->CMSG_CHAR_DELETE, CMSG_CHAR_DELETEswap);
    }
    if (opcode == Opcode::CMSG_PLAYER_LOGIN) {
        wrath::CMSG_PLAYER_LOGIN CMSG_PLAYER_LOGINswap(other.CMSG_PLAYER_LOGIN);
        std::swap(this->CMSG_PLAYER_LOGIN, CMSG_PLAYER_LOGINswap);
    }
    if (opcode == Opcode::CMSG_PLAYER_LOGOUT) {
        wrath::CMSG_PLAYER_LOGOUT CMSG_PLAYER_LOGOUTswap(other.CMSG_PLAYER_LOGOUT);
        std::swap(this->CMSG_PLAYER_LOGOUT, CMSG_PLAYER_LOGOUTswap);
    }
    if (opcode == Opcode::CMSG_LOGOUT_REQUEST) {
        wrath::CMSG_LOGOUT_REQUEST CMSG_LOGOUT_REQUESTswap(other.CMSG_LOGOUT_REQUEST);
        std::swap(this->CMSG_LOGOUT_REQUEST, CMSG_LOGOUT_REQUESTswap);
    }
    if (opcode == Opcode::CMSG_LOGOUT_CANCEL) {
        wrath::CMSG_LOGOUT_CANCEL CMSG_LOGOUT_CANCELswap(other.CMSG_LOGOUT_CANCEL);
        std::swap(this->CMSG_LOGOUT_CANCEL, CMSG_LOGOUT_CANCELswap);
    }
    if (opcode == Opcode::CMSG_NAME_QUERY) {
        wrath::CMSG_NAME_QUERY CMSG_NAME_QUERYswap(other.CMSG_NAME_QUERY);
        std::swap(this->CMSG_NAME_QUERY, CMSG_NAME_QUERYswap);
    }
    if (opcode == Opcode::CMSG_PET_NAME_QUERY) {
        wrath::CMSG_PET_NAME_QUERY CMSG_PET_NAME_QUERYswap(other.CMSG_PET_NAME_QUERY);
        std::swap(this->CMSG_PET_NAME_QUERY, CMSG_PET_NAME_QUERYswap);
    }
    if (opcode == Opcode::CMSG_GUILD_QUERY) {
        wrath::CMSG_GUILD_QUERY CMSG_GUILD_QUERYswap(other.CMSG_GUILD_QUERY);
        std::swap(this->CMSG_GUILD_QUERY, CMSG_GUILD_QUERYswap);
    }
    if (opcode == Opcode::CMSG_ITEM_QUERY_SINGLE) {
        wrath::CMSG_ITEM_QUERY_SINGLE CMSG_ITEM_QUERY_SINGLEswap(other.CMSG_ITEM_QUERY_SINGLE);
        std::swap(this->CMSG_ITEM_QUERY_SINGLE, CMSG_ITEM_QUERY_SINGLEswap);
    }
    if (opcode == Opcode::CMSG_PAGE_TEXT_QUERY) {
        wrath::CMSG_PAGE_TEXT_QUERY CMSG_PAGE_TEXT_QUERYswap(other.CMSG_PAGE_TEXT_QUERY);
        std::swap(this->CMSG_PAGE_TEXT_QUERY, CMSG_PAGE_TEXT_QUERYswap);
    }
    if (opcode == Opcode::CMSG_QUEST_QUERY) {
        wrath::CMSG_QUEST_QUERY CMSG_QUEST_QUERYswap(other.CMSG_QUEST_QUERY);
        std::swap(this->CMSG_QUEST_QUERY, CMSG_QUEST_QUERYswap);
    }
    if (opcode == Opcode::CMSG_GAMEOBJECT_QUERY) {
        wrath::CMSG_GAMEOBJECT_QUERY CMSG_GAMEOBJECT_QUERYswap(other.CMSG_GAMEOBJECT_QUERY);
        std::swap(this->CMSG_GAMEOBJECT_QUERY, CMSG_GAMEOBJECT_QUERYswap);
    }
    if (opcode == Opcode::CMSG_CREATURE_QUERY) {
        wrath::CMSG_CREATURE_QUERY CMSG_CREATURE_QUERYswap(other.CMSG_CREATURE_QUERY);
        std::swap(this->CMSG_CREATURE_QUERY, CMSG_CREATURE_QUERYswap);
    }
    if (opcode == Opcode::CMSG_WHO) {
        wrath::CMSG_WHO CMSG_WHOswap(other.CMSG_WHO);
        std::swap(this->CMSG_WHO, CMSG_WHOswap);
    }
    if (opcode == Opcode::CMSG_WHOIS) {
        wrath::CMSG_WHOIS CMSG_WHOISswap(other.CMSG_WHOIS);
        std::swap(this->CMSG_WHOIS, CMSG_WHOISswap);
    }
    if (opcode == Opcode::CMSG_CONTACT_LIST) {
        wrath::CMSG_CONTACT_LIST CMSG_CONTACT_LISTswap(other.CMSG_CONTACT_LIST);
        std::swap(this->CMSG_CONTACT_LIST, CMSG_CONTACT_LISTswap);
    }
    if (opcode == Opcode::CMSG_ADD_FRIEND) {
        wrath::CMSG_ADD_FRIEND CMSG_ADD_FRIENDswap(other.CMSG_ADD_FRIEND);
        std::swap(this->CMSG_ADD_FRIEND, CMSG_ADD_FRIENDswap);
    }
    if (opcode == Opcode::CMSG_DEL_FRIEND) {
        wrath::CMSG_DEL_FRIEND CMSG_DEL_FRIENDswap(other.CMSG_DEL_FRIEND);
        std::swap(this->CMSG_DEL_FRIEND, CMSG_DEL_FRIENDswap);
    }
    if (opcode == Opcode::CMSG_SET_CONTACT_NOTES) {
        wrath::CMSG_SET_CONTACT_NOTES CMSG_SET_CONTACT_NOTESswap(other.CMSG_SET_CONTACT_NOTES);
        std::swap(this->CMSG_SET_CONTACT_NOTES, CMSG_SET_CONTACT_NOTESswap);
    }
    if (opcode == Opcode::CMSG_ADD_IGNORE) {
        wrath::CMSG_ADD_IGNORE CMSG_ADD_IGNOREswap(other.CMSG_ADD_IGNORE);
        std::swap(this->CMSG_ADD_IGNORE, CMSG_ADD_IGNOREswap);
    }
    if (opcode == Opcode::CMSG_DEL_IGNORE) {
        wrath::CMSG_DEL_IGNORE CMSG_DEL_IGNOREswap(other.CMSG_DEL_IGNORE);
        std::swap(this->CMSG_DEL_IGNORE, CMSG_DEL_IGNOREswap);
    }
    if (opcode == Opcode::CMSG_GROUP_INVITE) {
        wrath::CMSG_GROUP_INVITE CMSG_GROUP_INVITEswap(other.CMSG_GROUP_INVITE);
        std::swap(this->CMSG_GROUP_INVITE, CMSG_GROUP_INVITEswap);
    }
    if (opcode == Opcode::CMSG_GROUP_CANCEL) {
        wrath::CMSG_GROUP_CANCEL CMSG_GROUP_CANCELswap(other.CMSG_GROUP_CANCEL);
        std::swap(this->CMSG_GROUP_CANCEL, CMSG_GROUP_CANCELswap);
    }
    if (opcode == Opcode::CMSG_GROUP_ACCEPT) {
        wrath::CMSG_GROUP_ACCEPT CMSG_GROUP_ACCEPTswap(other.CMSG_GROUP_ACCEPT);
        std::swap(this->CMSG_GROUP_ACCEPT, CMSG_GROUP_ACCEPTswap);
    }
    if (opcode == Opcode::CMSG_GROUP_DECLINE) {
        wrath::CMSG_GROUP_DECLINE CMSG_GROUP_DECLINEswap(other.CMSG_GROUP_DECLINE);
        std::swap(this->CMSG_GROUP_DECLINE, CMSG_GROUP_DECLINEswap);
    }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE) {
        wrath::CMSG_GROUP_UNINVITE CMSG_GROUP_UNINVITEswap(other.CMSG_GROUP_UNINVITE);
        std::swap(this->CMSG_GROUP_UNINVITE, CMSG_GROUP_UNINVITEswap);
    }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE_GUID) {
        wrath::CMSG_GROUP_UNINVITE_GUID CMSG_GROUP_UNINVITE_GUIDswap(other.CMSG_GROUP_UNINVITE_GUID);
        std::swap(this->CMSG_GROUP_UNINVITE_GUID, CMSG_GROUP_UNINVITE_GUIDswap);
    }
    if (opcode == Opcode::CMSG_GROUP_SET_LEADER) {
        wrath::CMSG_GROUP_SET_LEADER CMSG_GROUP_SET_LEADERswap(other.CMSG_GROUP_SET_LEADER);
        std::swap(this->CMSG_GROUP_SET_LEADER, CMSG_GROUP_SET_LEADERswap);
    }
    if (opcode == Opcode::CMSG_LOOT_METHOD) {
        wrath::CMSG_LOOT_METHOD CMSG_LOOT_METHODswap(other.CMSG_LOOT_METHOD);
        std::swap(this->CMSG_LOOT_METHOD, CMSG_LOOT_METHODswap);
    }
    if (opcode == Opcode::CMSG_GROUP_DISBAND) {
        wrath::CMSG_GROUP_DISBAND CMSG_GROUP_DISBANDswap(other.CMSG_GROUP_DISBAND);
        std::swap(this->CMSG_GROUP_DISBAND, CMSG_GROUP_DISBANDswap);
    }
    if (opcode == Opcode::CMSG_GUILD_CREATE) {
        wrath::CMSG_GUILD_CREATE CMSG_GUILD_CREATEswap(other.CMSG_GUILD_CREATE);
        std::swap(this->CMSG_GUILD_CREATE, CMSG_GUILD_CREATEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_INVITE) {
        wrath::CMSG_GUILD_INVITE CMSG_GUILD_INVITEswap(other.CMSG_GUILD_INVITE);
        std::swap(this->CMSG_GUILD_INVITE, CMSG_GUILD_INVITEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_ACCEPT) {
        wrath::CMSG_GUILD_ACCEPT CMSG_GUILD_ACCEPTswap(other.CMSG_GUILD_ACCEPT);
        std::swap(this->CMSG_GUILD_ACCEPT, CMSG_GUILD_ACCEPTswap);
    }
    if (opcode == Opcode::CMSG_GUILD_DECLINE) {
        wrath::CMSG_GUILD_DECLINE CMSG_GUILD_DECLINEswap(other.CMSG_GUILD_DECLINE);
        std::swap(this->CMSG_GUILD_DECLINE, CMSG_GUILD_DECLINEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_INFO) {
        wrath::CMSG_GUILD_INFO CMSG_GUILD_INFOswap(other.CMSG_GUILD_INFO);
        std::swap(this->CMSG_GUILD_INFO, CMSG_GUILD_INFOswap);
    }
    if (opcode == Opcode::CMSG_GUILD_ROSTER) {
        wrath::CMSG_GUILD_ROSTER CMSG_GUILD_ROSTERswap(other.CMSG_GUILD_ROSTER);
        std::swap(this->CMSG_GUILD_ROSTER, CMSG_GUILD_ROSTERswap);
    }
    if (opcode == Opcode::CMSG_GUILD_PROMOTE) {
        wrath::CMSG_GUILD_PROMOTE CMSG_GUILD_PROMOTEswap(other.CMSG_GUILD_PROMOTE);
        std::swap(this->CMSG_GUILD_PROMOTE, CMSG_GUILD_PROMOTEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_DEMOTE) {
        wrath::CMSG_GUILD_DEMOTE CMSG_GUILD_DEMOTEswap(other.CMSG_GUILD_DEMOTE);
        std::swap(this->CMSG_GUILD_DEMOTE, CMSG_GUILD_DEMOTEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_LEAVE) {
        wrath::CMSG_GUILD_LEAVE CMSG_GUILD_LEAVEswap(other.CMSG_GUILD_LEAVE);
        std::swap(this->CMSG_GUILD_LEAVE, CMSG_GUILD_LEAVEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_REMOVE) {
        wrath::CMSG_GUILD_REMOVE CMSG_GUILD_REMOVEswap(other.CMSG_GUILD_REMOVE);
        std::swap(this->CMSG_GUILD_REMOVE, CMSG_GUILD_REMOVEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_DISBAND) {
        wrath::CMSG_GUILD_DISBAND CMSG_GUILD_DISBANDswap(other.CMSG_GUILD_DISBAND);
        std::swap(this->CMSG_GUILD_DISBAND, CMSG_GUILD_DISBANDswap);
    }
    if (opcode == Opcode::CMSG_GUILD_LEADER) {
        wrath::CMSG_GUILD_LEADER CMSG_GUILD_LEADERswap(other.CMSG_GUILD_LEADER);
        std::swap(this->CMSG_GUILD_LEADER, CMSG_GUILD_LEADERswap);
    }
    if (opcode == Opcode::CMSG_GUILD_MOTD) {
        wrath::CMSG_GUILD_MOTD CMSG_GUILD_MOTDswap(other.CMSG_GUILD_MOTD);
        std::swap(this->CMSG_GUILD_MOTD, CMSG_GUILD_MOTDswap);
    }
    if (opcode == Opcode::CMSG_MESSAGECHAT) {
        wrath::CMSG_MESSAGECHAT CMSG_MESSAGECHATswap(other.CMSG_MESSAGECHAT);
        std::swap(this->CMSG_MESSAGECHAT, CMSG_MESSAGECHATswap);
    }
    if (opcode == Opcode::CMSG_JOIN_CHANNEL) {
        wrath::CMSG_JOIN_CHANNEL CMSG_JOIN_CHANNELswap(other.CMSG_JOIN_CHANNEL);
        std::swap(this->CMSG_JOIN_CHANNEL, CMSG_JOIN_CHANNELswap);
    }
    if (opcode == Opcode::CMSG_LEAVE_CHANNEL) {
        wrath::CMSG_LEAVE_CHANNEL CMSG_LEAVE_CHANNELswap(other.CMSG_LEAVE_CHANNEL);
        std::swap(this->CMSG_LEAVE_CHANNEL, CMSG_LEAVE_CHANNELswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_LIST) {
        wrath::CMSG_CHANNEL_LIST CMSG_CHANNEL_LISTswap(other.CMSG_CHANNEL_LIST);
        std::swap(this->CMSG_CHANNEL_LIST, CMSG_CHANNEL_LISTswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_PASSWORD) {
        wrath::CMSG_CHANNEL_PASSWORD CMSG_CHANNEL_PASSWORDswap(other.CMSG_CHANNEL_PASSWORD);
        std::swap(this->CMSG_CHANNEL_PASSWORD, CMSG_CHANNEL_PASSWORDswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_SET_OWNER) {
        wrath::CMSG_CHANNEL_SET_OWNER CMSG_CHANNEL_SET_OWNERswap(other.CMSG_CHANNEL_SET_OWNER);
        std::swap(this->CMSG_CHANNEL_SET_OWNER, CMSG_CHANNEL_SET_OWNERswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_OWNER) {
        wrath::CMSG_CHANNEL_OWNER CMSG_CHANNEL_OWNERswap(other.CMSG_CHANNEL_OWNER);
        std::swap(this->CMSG_CHANNEL_OWNER, CMSG_CHANNEL_OWNERswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATOR) {
        wrath::CMSG_CHANNEL_MODERATOR CMSG_CHANNEL_MODERATORswap(other.CMSG_CHANNEL_MODERATOR);
        std::swap(this->CMSG_CHANNEL_MODERATOR, CMSG_CHANNEL_MODERATORswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNMODERATOR) {
        wrath::CMSG_CHANNEL_UNMODERATOR CMSG_CHANNEL_UNMODERATORswap(other.CMSG_CHANNEL_UNMODERATOR);
        std::swap(this->CMSG_CHANNEL_UNMODERATOR, CMSG_CHANNEL_UNMODERATORswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MUTE) {
        wrath::CMSG_CHANNEL_MUTE CMSG_CHANNEL_MUTEswap(other.CMSG_CHANNEL_MUTE);
        std::swap(this->CMSG_CHANNEL_MUTE, CMSG_CHANNEL_MUTEswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNMUTE) {
        wrath::CMSG_CHANNEL_UNMUTE CMSG_CHANNEL_UNMUTEswap(other.CMSG_CHANNEL_UNMUTE);
        std::swap(this->CMSG_CHANNEL_UNMUTE, CMSG_CHANNEL_UNMUTEswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_INVITE) {
        wrath::CMSG_CHANNEL_INVITE CMSG_CHANNEL_INVITEswap(other.CMSG_CHANNEL_INVITE);
        std::swap(this->CMSG_CHANNEL_INVITE, CMSG_CHANNEL_INVITEswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_KICK) {
        wrath::CMSG_CHANNEL_KICK CMSG_CHANNEL_KICKswap(other.CMSG_CHANNEL_KICK);
        std::swap(this->CMSG_CHANNEL_KICK, CMSG_CHANNEL_KICKswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_BAN) {
        wrath::CMSG_CHANNEL_BAN CMSG_CHANNEL_BANswap(other.CMSG_CHANNEL_BAN);
        std::swap(this->CMSG_CHANNEL_BAN, CMSG_CHANNEL_BANswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNBAN) {
        wrath::CMSG_CHANNEL_UNBAN CMSG_CHANNEL_UNBANswap(other.CMSG_CHANNEL_UNBAN);
        std::swap(this->CMSG_CHANNEL_UNBAN, CMSG_CHANNEL_UNBANswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) {
        wrath::CMSG_CHANNEL_ANNOUNCEMENTS CMSG_CHANNEL_ANNOUNCEMENTSswap(other.CMSG_CHANNEL_ANNOUNCEMENTS);
        std::swap(this->CMSG_CHANNEL_ANNOUNCEMENTS, CMSG_CHANNEL_ANNOUNCEMENTSswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATE) {
        wrath::CMSG_CHANNEL_MODERATE CMSG_CHANNEL_MODERATEswap(other.CMSG_CHANNEL_MODERATE);
        std::swap(this->CMSG_CHANNEL_MODERATE, CMSG_CHANNEL_MODERATEswap);
    }
    if (opcode == Opcode::CMSG_USE_ITEM) {
        wrath::CMSG_USE_ITEM CMSG_USE_ITEMswap(other.CMSG_USE_ITEM);
        std::swap(this->CMSG_USE_ITEM, CMSG_USE_ITEMswap);
    }
    if (opcode == Opcode::CMSG_OPEN_ITEM) {
        wrath::CMSG_OPEN_ITEM CMSG_OPEN_ITEMswap(other.CMSG_OPEN_ITEM);
        std::swap(this->CMSG_OPEN_ITEM, CMSG_OPEN_ITEMswap);
    }
    if (opcode == Opcode::CMSG_READ_ITEM) {
        wrath::CMSG_READ_ITEM CMSG_READ_ITEMswap(other.CMSG_READ_ITEM);
        std::swap(this->CMSG_READ_ITEM, CMSG_READ_ITEMswap);
    }
    if (opcode == Opcode::CMSG_GAMEOBJ_USE) {
        wrath::CMSG_GAMEOBJ_USE CMSG_GAMEOBJ_USEswap(other.CMSG_GAMEOBJ_USE);
        std::swap(this->CMSG_GAMEOBJ_USE, CMSG_GAMEOBJ_USEswap);
    }
    if (opcode == Opcode::CMSG_AREATRIGGER) {
        wrath::CMSG_AREATRIGGER CMSG_AREATRIGGERswap(other.CMSG_AREATRIGGER);
        std::swap(this->CMSG_AREATRIGGER, CMSG_AREATRIGGERswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        wrath::MSG_MOVE_START_FORWARD MSG_MOVE_START_FORWARDswap(other.MSG_MOVE_START_FORWARD);
        std::swap(this->MSG_MOVE_START_FORWARD, MSG_MOVE_START_FORWARDswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        wrath::MSG_MOVE_START_BACKWARD MSG_MOVE_START_BACKWARDswap(other.MSG_MOVE_START_BACKWARD);
        std::swap(this->MSG_MOVE_START_BACKWARD, MSG_MOVE_START_BACKWARDswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP) {
        wrath::MSG_MOVE_STOP MSG_MOVE_STOPswap(other.MSG_MOVE_STOP);
        std::swap(this->MSG_MOVE_STOP, MSG_MOVE_STOPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        wrath::MSG_MOVE_START_STRAFE_LEFT MSG_MOVE_START_STRAFE_LEFTswap(other.MSG_MOVE_START_STRAFE_LEFT);
        std::swap(this->MSG_MOVE_START_STRAFE_LEFT, MSG_MOVE_START_STRAFE_LEFTswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        wrath::MSG_MOVE_START_STRAFE_RIGHT MSG_MOVE_START_STRAFE_RIGHTswap(other.MSG_MOVE_START_STRAFE_RIGHT);
        std::swap(this->MSG_MOVE_START_STRAFE_RIGHT, MSG_MOVE_START_STRAFE_RIGHTswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        wrath::MSG_MOVE_STOP_STRAFE MSG_MOVE_STOP_STRAFEswap(other.MSG_MOVE_STOP_STRAFE);
        std::swap(this->MSG_MOVE_STOP_STRAFE, MSG_MOVE_STOP_STRAFEswap);
    }
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        wrath::MSG_MOVE_JUMP MSG_MOVE_JUMPswap(other.MSG_MOVE_JUMP);
        std::swap(this->MSG_MOVE_JUMP, MSG_MOVE_JUMPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        wrath::MSG_MOVE_START_TURN_LEFT MSG_MOVE_START_TURN_LEFTswap(other.MSG_MOVE_START_TURN_LEFT);
        std::swap(this->MSG_MOVE_START_TURN_LEFT, MSG_MOVE_START_TURN_LEFTswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        wrath::MSG_MOVE_START_TURN_RIGHT MSG_MOVE_START_TURN_RIGHTswap(other.MSG_MOVE_START_TURN_RIGHT);
        std::swap(this->MSG_MOVE_START_TURN_RIGHT, MSG_MOVE_START_TURN_RIGHTswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        wrath::MSG_MOVE_STOP_TURN MSG_MOVE_STOP_TURNswap(other.MSG_MOVE_STOP_TURN);
        std::swap(this->MSG_MOVE_STOP_TURN, MSG_MOVE_STOP_TURNswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        wrath::MSG_MOVE_START_PITCH_UP MSG_MOVE_START_PITCH_UPswap(other.MSG_MOVE_START_PITCH_UP);
        std::swap(this->MSG_MOVE_START_PITCH_UP, MSG_MOVE_START_PITCH_UPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        wrath::MSG_MOVE_START_PITCH_DOWN MSG_MOVE_START_PITCH_DOWNswap(other.MSG_MOVE_START_PITCH_DOWN);
        std::swap(this->MSG_MOVE_START_PITCH_DOWN, MSG_MOVE_START_PITCH_DOWNswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        wrath::MSG_MOVE_STOP_PITCH MSG_MOVE_STOP_PITCHswap(other.MSG_MOVE_STOP_PITCH);
        std::swap(this->MSG_MOVE_STOP_PITCH, MSG_MOVE_STOP_PITCHswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        wrath::MSG_MOVE_SET_RUN_MODE MSG_MOVE_SET_RUN_MODEswap(other.MSG_MOVE_SET_RUN_MODE);
        std::swap(this->MSG_MOVE_SET_RUN_MODE, MSG_MOVE_SET_RUN_MODEswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        wrath::MSG_MOVE_SET_WALK_MODE MSG_MOVE_SET_WALK_MODEswap(other.MSG_MOVE_SET_WALK_MODE);
        std::swap(this->MSG_MOVE_SET_WALK_MODE, MSG_MOVE_SET_WALK_MODEswap);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT) {
        wrath::MSG_MOVE_TELEPORT_Server MSG_MOVE_TELEPORTswap(other.MSG_MOVE_TELEPORT);
        std::swap(this->MSG_MOVE_TELEPORT, MSG_MOVE_TELEPORTswap);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        wrath::MSG_MOVE_TELEPORT_ACK_Client MSG_MOVE_TELEPORT_ACKswap(other.MSG_MOVE_TELEPORT_ACK);
        std::swap(this->MSG_MOVE_TELEPORT_ACK, MSG_MOVE_TELEPORT_ACKswap);
    }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        wrath::MSG_MOVE_FALL_LAND MSG_MOVE_FALL_LANDswap(other.MSG_MOVE_FALL_LAND);
        std::swap(this->MSG_MOVE_FALL_LAND, MSG_MOVE_FALL_LANDswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        wrath::MSG_MOVE_START_SWIM MSG_MOVE_START_SWIMswap(other.MSG_MOVE_START_SWIM);
        std::swap(this->MSG_MOVE_START_SWIM, MSG_MOVE_START_SWIMswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        wrath::MSG_MOVE_STOP_SWIM MSG_MOVE_STOP_SWIMswap(other.MSG_MOVE_STOP_SWIM);
        std::swap(this->MSG_MOVE_STOP_SWIM, MSG_MOVE_STOP_SWIMswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        wrath::MSG_MOVE_SET_FACING MSG_MOVE_SET_FACINGswap(other.MSG_MOVE_SET_FACING);
        std::swap(this->MSG_MOVE_SET_FACING, MSG_MOVE_SET_FACINGswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        wrath::MSG_MOVE_SET_PITCH MSG_MOVE_SET_PITCHswap(other.MSG_MOVE_SET_PITCH);
        std::swap(this->MSG_MOVE_SET_PITCH, MSG_MOVE_SET_PITCHswap);
    }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        wrath::MSG_MOVE_WORLDPORT_ACK MSG_MOVE_WORLDPORT_ACKswap(other.MSG_MOVE_WORLDPORT_ACK);
        std::swap(this->MSG_MOVE_WORLDPORT_ACK, MSG_MOVE_WORLDPORT_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_RAW_POSITION) {
        wrath::CMSG_MOVE_SET_RAW_POSITION CMSG_MOVE_SET_RAW_POSITIONswap(other.CMSG_MOVE_SET_RAW_POSITION);
        std::swap(this->CMSG_MOVE_SET_RAW_POSITION, CMSG_MOVE_SET_RAW_POSITIONswap);
    }
    if (opcode == Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK CMSG_FORCE_RUN_SPEED_CHANGE_ACKswap(other.CMSG_FORCE_RUN_SPEED_CHANGE_ACK);
        std::swap(this->CMSG_FORCE_RUN_SPEED_CHANGE_ACK, CMSG_FORCE_RUN_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACKswap(other.CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK);
        std::swap(this->CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK, CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_SPEED_CHANGE_ACKswap(other.CMSG_FORCE_SWIM_SPEED_CHANGE_ACK);
        std::swap(this->CMSG_FORCE_SWIM_SPEED_CHANGE_ACK, CMSG_FORCE_SWIM_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_MOVE_ROOT_ACK) {
        wrath::CMSG_FORCE_MOVE_ROOT_ACK CMSG_FORCE_MOVE_ROOT_ACKswap(other.CMSG_FORCE_MOVE_ROOT_ACK);
        std::swap(this->CMSG_FORCE_MOVE_ROOT_ACK, CMSG_FORCE_MOVE_ROOT_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) {
        wrath::CMSG_FORCE_MOVE_UNROOT_ACK CMSG_FORCE_MOVE_UNROOT_ACKswap(other.CMSG_FORCE_MOVE_UNROOT_ACK);
        std::swap(this->CMSG_FORCE_MOVE_UNROOT_ACK, CMSG_FORCE_MOVE_UNROOT_ACKswap);
    }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        wrath::MSG_MOVE_HEARTBEAT MSG_MOVE_HEARTBEATswap(other.MSG_MOVE_HEARTBEAT);
        std::swap(this->MSG_MOVE_HEARTBEAT, MSG_MOVE_HEARTBEATswap);
    }
    if (opcode == Opcode::CMSG_MOVE_KNOCK_BACK_ACK) {
        wrath::CMSG_MOVE_KNOCK_BACK_ACK CMSG_MOVE_KNOCK_BACK_ACKswap(other.CMSG_MOVE_KNOCK_BACK_ACK);
        std::swap(this->CMSG_MOVE_KNOCK_BACK_ACK, CMSG_MOVE_KNOCK_BACK_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_HOVER_ACK) {
        wrath::CMSG_MOVE_HOVER_ACK CMSG_MOVE_HOVER_ACKswap(other.CMSG_MOVE_HOVER_ACK);
        std::swap(this->CMSG_MOVE_HOVER_ACK, CMSG_MOVE_HOVER_ACKswap);
    }
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        wrath::MSG_MOVE_HOVER MSG_MOVE_HOVERswap(other.MSG_MOVE_HOVER);
        std::swap(this->MSG_MOVE_HOVER, MSG_MOVE_HOVERswap);
    }
    if (opcode == Opcode::CMSG_NEXT_CINEMATIC_CAMERA) {
        wrath::CMSG_NEXT_CINEMATIC_CAMERA CMSG_NEXT_CINEMATIC_CAMERAswap(other.CMSG_NEXT_CINEMATIC_CAMERA);
        std::swap(this->CMSG_NEXT_CINEMATIC_CAMERA, CMSG_NEXT_CINEMATIC_CAMERAswap);
    }
    if (opcode == Opcode::CMSG_COMPLETE_CINEMATIC) {
        wrath::CMSG_COMPLETE_CINEMATIC CMSG_COMPLETE_CINEMATICswap(other.CMSG_COMPLETE_CINEMATIC);
        std::swap(this->CMSG_COMPLETE_CINEMATIC, CMSG_COMPLETE_CINEMATICswap);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_FLAG) {
        wrath::CMSG_TUTORIAL_FLAG CMSG_TUTORIAL_FLAGswap(other.CMSG_TUTORIAL_FLAG);
        std::swap(this->CMSG_TUTORIAL_FLAG, CMSG_TUTORIAL_FLAGswap);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_CLEAR) {
        wrath::CMSG_TUTORIAL_CLEAR CMSG_TUTORIAL_CLEARswap(other.CMSG_TUTORIAL_CLEAR);
        std::swap(this->CMSG_TUTORIAL_CLEAR, CMSG_TUTORIAL_CLEARswap);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_RESET) {
        wrath::CMSG_TUTORIAL_RESET CMSG_TUTORIAL_RESETswap(other.CMSG_TUTORIAL_RESET);
        std::swap(this->CMSG_TUTORIAL_RESET, CMSG_TUTORIAL_RESETswap);
    }
    if (opcode == Opcode::CMSG_STANDSTATECHANGE) {
        wrath::CMSG_STANDSTATECHANGE CMSG_STANDSTATECHANGEswap(other.CMSG_STANDSTATECHANGE);
        std::swap(this->CMSG_STANDSTATECHANGE, CMSG_STANDSTATECHANGEswap);
    }
    if (opcode == Opcode::CMSG_EMOTE) {
        wrath::CMSG_EMOTE CMSG_EMOTEswap(other.CMSG_EMOTE);
        std::swap(this->CMSG_EMOTE, CMSG_EMOTEswap);
    }
    if (opcode == Opcode::CMSG_TEXT_EMOTE) {
        wrath::CMSG_TEXT_EMOTE CMSG_TEXT_EMOTEswap(other.CMSG_TEXT_EMOTE);
        std::swap(this->CMSG_TEXT_EMOTE, CMSG_TEXT_EMOTEswap);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_LOOT_ITEM) {
        wrath::CMSG_AUTOSTORE_LOOT_ITEM CMSG_AUTOSTORE_LOOT_ITEMswap(other.CMSG_AUTOSTORE_LOOT_ITEM);
        std::swap(this->CMSG_AUTOSTORE_LOOT_ITEM, CMSG_AUTOSTORE_LOOT_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM) {
        wrath::CMSG_AUTOEQUIP_ITEM CMSG_AUTOEQUIP_ITEMswap(other.CMSG_AUTOEQUIP_ITEM);
        std::swap(this->CMSG_AUTOEQUIP_ITEM, CMSG_AUTOEQUIP_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_BAG_ITEM) {
        wrath::CMSG_AUTOSTORE_BAG_ITEM CMSG_AUTOSTORE_BAG_ITEMswap(other.CMSG_AUTOSTORE_BAG_ITEM);
        std::swap(this->CMSG_AUTOSTORE_BAG_ITEM, CMSG_AUTOSTORE_BAG_ITEMswap);
    }
    if (opcode == Opcode::CMSG_SWAP_ITEM) {
        wrath::CMSG_SWAP_ITEM CMSG_SWAP_ITEMswap(other.CMSG_SWAP_ITEM);
        std::swap(this->CMSG_SWAP_ITEM, CMSG_SWAP_ITEMswap);
    }
    if (opcode == Opcode::CMSG_SWAP_INV_ITEM) {
        wrath::CMSG_SWAP_INV_ITEM CMSG_SWAP_INV_ITEMswap(other.CMSG_SWAP_INV_ITEM);
        std::swap(this->CMSG_SWAP_INV_ITEM, CMSG_SWAP_INV_ITEMswap);
    }
    if (opcode == Opcode::CMSG_SPLIT_ITEM) {
        wrath::CMSG_SPLIT_ITEM CMSG_SPLIT_ITEMswap(other.CMSG_SPLIT_ITEM);
        std::swap(this->CMSG_SPLIT_ITEM, CMSG_SPLIT_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) {
        wrath::CMSG_AUTOEQUIP_ITEM_SLOT CMSG_AUTOEQUIP_ITEM_SLOTswap(other.CMSG_AUTOEQUIP_ITEM_SLOT);
        std::swap(this->CMSG_AUTOEQUIP_ITEM_SLOT, CMSG_AUTOEQUIP_ITEM_SLOTswap);
    }
    if (opcode == Opcode::CMSG_DESTROYITEM) {
        wrath::CMSG_DESTROYITEM CMSG_DESTROYITEMswap(other.CMSG_DESTROYITEM);
        std::swap(this->CMSG_DESTROYITEM, CMSG_DESTROYITEMswap);
    }
    if (opcode == Opcode::CMSG_INSPECT) {
        wrath::CMSG_INSPECT CMSG_INSPECTswap(other.CMSG_INSPECT);
        std::swap(this->CMSG_INSPECT, CMSG_INSPECTswap);
    }
    if (opcode == Opcode::CMSG_INITIATE_TRADE) {
        wrath::CMSG_INITIATE_TRADE CMSG_INITIATE_TRADEswap(other.CMSG_INITIATE_TRADE);
        std::swap(this->CMSG_INITIATE_TRADE, CMSG_INITIATE_TRADEswap);
    }
    if (opcode == Opcode::CMSG_BEGIN_TRADE) {
        wrath::CMSG_BEGIN_TRADE CMSG_BEGIN_TRADEswap(other.CMSG_BEGIN_TRADE);
        std::swap(this->CMSG_BEGIN_TRADE, CMSG_BEGIN_TRADEswap);
    }
    if (opcode == Opcode::CMSG_BUSY_TRADE) {
        wrath::CMSG_BUSY_TRADE CMSG_BUSY_TRADEswap(other.CMSG_BUSY_TRADE);
        std::swap(this->CMSG_BUSY_TRADE, CMSG_BUSY_TRADEswap);
    }
    if (opcode == Opcode::CMSG_IGNORE_TRADE) {
        wrath::CMSG_IGNORE_TRADE CMSG_IGNORE_TRADEswap(other.CMSG_IGNORE_TRADE);
        std::swap(this->CMSG_IGNORE_TRADE, CMSG_IGNORE_TRADEswap);
    }
    if (opcode == Opcode::CMSG_ACCEPT_TRADE) {
        wrath::CMSG_ACCEPT_TRADE CMSG_ACCEPT_TRADEswap(other.CMSG_ACCEPT_TRADE);
        std::swap(this->CMSG_ACCEPT_TRADE, CMSG_ACCEPT_TRADEswap);
    }
    if (opcode == Opcode::CMSG_UNACCEPT_TRADE) {
        wrath::CMSG_UNACCEPT_TRADE CMSG_UNACCEPT_TRADEswap(other.CMSG_UNACCEPT_TRADE);
        std::swap(this->CMSG_UNACCEPT_TRADE, CMSG_UNACCEPT_TRADEswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_TRADE) {
        wrath::CMSG_CANCEL_TRADE CMSG_CANCEL_TRADEswap(other.CMSG_CANCEL_TRADE);
        std::swap(this->CMSG_CANCEL_TRADE, CMSG_CANCEL_TRADEswap);
    }
    if (opcode == Opcode::CMSG_SET_TRADE_ITEM) {
        wrath::CMSG_SET_TRADE_ITEM CMSG_SET_TRADE_ITEMswap(other.CMSG_SET_TRADE_ITEM);
        std::swap(this->CMSG_SET_TRADE_ITEM, CMSG_SET_TRADE_ITEMswap);
    }
    if (opcode == Opcode::CMSG_CLEAR_TRADE_ITEM) {
        wrath::CMSG_CLEAR_TRADE_ITEM CMSG_CLEAR_TRADE_ITEMswap(other.CMSG_CLEAR_TRADE_ITEM);
        std::swap(this->CMSG_CLEAR_TRADE_ITEM, CMSG_CLEAR_TRADE_ITEMswap);
    }
    if (opcode == Opcode::CMSG_SET_TRADE_GOLD) {
        wrath::CMSG_SET_TRADE_GOLD CMSG_SET_TRADE_GOLDswap(other.CMSG_SET_TRADE_GOLD);
        std::swap(this->CMSG_SET_TRADE_GOLD, CMSG_SET_TRADE_GOLDswap);
    }
    if (opcode == Opcode::CMSG_SET_FACTION_ATWAR) {
        wrath::CMSG_SET_FACTION_ATWAR CMSG_SET_FACTION_ATWARswap(other.CMSG_SET_FACTION_ATWAR);
        std::swap(this->CMSG_SET_FACTION_ATWAR, CMSG_SET_FACTION_ATWARswap);
    }
    if (opcode == Opcode::CMSG_SET_ACTION_BUTTON) {
        wrath::CMSG_SET_ACTION_BUTTON CMSG_SET_ACTION_BUTTONswap(other.CMSG_SET_ACTION_BUTTON);
        std::swap(this->CMSG_SET_ACTION_BUTTON, CMSG_SET_ACTION_BUTTONswap);
    }
    if (opcode == Opcode::CMSG_CAST_SPELL) {
        wrath::CMSG_CAST_SPELL CMSG_CAST_SPELLswap(other.CMSG_CAST_SPELL);
        std::swap(this->CMSG_CAST_SPELL, CMSG_CAST_SPELLswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_CAST) {
        wrath::CMSG_CANCEL_CAST CMSG_CANCEL_CASTswap(other.CMSG_CANCEL_CAST);
        std::swap(this->CMSG_CANCEL_CAST, CMSG_CANCEL_CASTswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_AURA) {
        wrath::CMSG_CANCEL_AURA CMSG_CANCEL_AURAswap(other.CMSG_CANCEL_AURA);
        std::swap(this->CMSG_CANCEL_AURA, CMSG_CANCEL_AURAswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_CHANNELLING) {
        wrath::CMSG_CANCEL_CHANNELLING CMSG_CANCEL_CHANNELLINGswap(other.CMSG_CANCEL_CHANNELLING);
        std::swap(this->CMSG_CANCEL_CHANNELLING, CMSG_CANCEL_CHANNELLINGswap);
    }
    if (opcode == Opcode::CMSG_SET_SELECTION) {
        wrath::CMSG_SET_SELECTION CMSG_SET_SELECTIONswap(other.CMSG_SET_SELECTION);
        std::swap(this->CMSG_SET_SELECTION, CMSG_SET_SELECTIONswap);
    }
    if (opcode == Opcode::CMSG_DELETEEQUIPMENT_SET) {
        wrath::CMSG_DELETEEQUIPMENT_SET CMSG_DELETEEQUIPMENT_SETswap(other.CMSG_DELETEEQUIPMENT_SET);
        std::swap(this->CMSG_DELETEEQUIPMENT_SET, CMSG_DELETEEQUIPMENT_SETswap);
    }
    if (opcode == Opcode::CMSG_INSTANCE_LOCK_RESPONSE) {
        wrath::CMSG_INSTANCE_LOCK_RESPONSE CMSG_INSTANCE_LOCK_RESPONSEswap(other.CMSG_INSTANCE_LOCK_RESPONSE);
        std::swap(this->CMSG_INSTANCE_LOCK_RESPONSE, CMSG_INSTANCE_LOCK_RESPONSEswap);
    }
    if (opcode == Opcode::CMSG_ATTACKSWING) {
        wrath::CMSG_ATTACKSWING CMSG_ATTACKSWINGswap(other.CMSG_ATTACKSWING);
        std::swap(this->CMSG_ATTACKSWING, CMSG_ATTACKSWINGswap);
    }
    if (opcode == Opcode::CMSG_ATTACKSTOP) {
        wrath::CMSG_ATTACKSTOP CMSG_ATTACKSTOPswap(other.CMSG_ATTACKSTOP);
        std::swap(this->CMSG_ATTACKSTOP, CMSG_ATTACKSTOPswap);
    }
    if (opcode == Opcode::CMSG_REPOP_REQUEST) {
        wrath::CMSG_REPOP_REQUEST CMSG_REPOP_REQUESTswap(other.CMSG_REPOP_REQUEST);
        std::swap(this->CMSG_REPOP_REQUEST, CMSG_REPOP_REQUESTswap);
    }
    if (opcode == Opcode::CMSG_RESURRECT_RESPONSE) {
        wrath::CMSG_RESURRECT_RESPONSE CMSG_RESURRECT_RESPONSEswap(other.CMSG_RESURRECT_RESPONSE);
        std::swap(this->CMSG_RESURRECT_RESPONSE, CMSG_RESURRECT_RESPONSEswap);
    }
    if (opcode == Opcode::CMSG_LOOT) {
        wrath::CMSG_LOOT CMSG_LOOTswap(other.CMSG_LOOT);
        std::swap(this->CMSG_LOOT, CMSG_LOOTswap);
    }
    if (opcode == Opcode::CMSG_LOOT_MONEY) {
        wrath::CMSG_LOOT_MONEY CMSG_LOOT_MONEYswap(other.CMSG_LOOT_MONEY);
        std::swap(this->CMSG_LOOT_MONEY, CMSG_LOOT_MONEYswap);
    }
    if (opcode == Opcode::CMSG_LOOT_RELEASE) {
        wrath::CMSG_LOOT_RELEASE CMSG_LOOT_RELEASEswap(other.CMSG_LOOT_RELEASE);
        std::swap(this->CMSG_LOOT_RELEASE, CMSG_LOOT_RELEASEswap);
    }
    if (opcode == Opcode::CMSG_DUEL_ACCEPTED) {
        wrath::CMSG_DUEL_ACCEPTED CMSG_DUEL_ACCEPTEDswap(other.CMSG_DUEL_ACCEPTED);
        std::swap(this->CMSG_DUEL_ACCEPTED, CMSG_DUEL_ACCEPTEDswap);
    }
    if (opcode == Opcode::CMSG_DUEL_CANCELLED) {
        wrath::CMSG_DUEL_CANCELLED CMSG_DUEL_CANCELLEDswap(other.CMSG_DUEL_CANCELLED);
        std::swap(this->CMSG_DUEL_CANCELLED, CMSG_DUEL_CANCELLEDswap);
    }
    if (opcode == Opcode::CMSG_MOUNTSPECIAL_ANIM) {
        wrath::CMSG_MOUNTSPECIAL_ANIM CMSG_MOUNTSPECIAL_ANIMswap(other.CMSG_MOUNTSPECIAL_ANIM);
        std::swap(this->CMSG_MOUNTSPECIAL_ANIM, CMSG_MOUNTSPECIAL_ANIMswap);
    }
    if (opcode == Opcode::CMSG_PET_SET_ACTION) {
        wrath::CMSG_PET_SET_ACTION CMSG_PET_SET_ACTIONswap(other.CMSG_PET_SET_ACTION);
        std::swap(this->CMSG_PET_SET_ACTION, CMSG_PET_SET_ACTIONswap);
    }
    if (opcode == Opcode::CMSG_PET_ACTION) {
        wrath::CMSG_PET_ACTION CMSG_PET_ACTIONswap(other.CMSG_PET_ACTION);
        std::swap(this->CMSG_PET_ACTION, CMSG_PET_ACTIONswap);
    }
    if (opcode == Opcode::CMSG_PET_ABANDON) {
        wrath::CMSG_PET_ABANDON CMSG_PET_ABANDONswap(other.CMSG_PET_ABANDON);
        std::swap(this->CMSG_PET_ABANDON, CMSG_PET_ABANDONswap);
    }
    if (opcode == Opcode::CMSG_PET_RENAME) {
        wrath::CMSG_PET_RENAME CMSG_PET_RENAMEswap(other.CMSG_PET_RENAME);
        std::swap(this->CMSG_PET_RENAME, CMSG_PET_RENAMEswap);
    }
    if (opcode == Opcode::CMSG_GOSSIP_HELLO) {
        wrath::CMSG_GOSSIP_HELLO CMSG_GOSSIP_HELLOswap(other.CMSG_GOSSIP_HELLO);
        std::swap(this->CMSG_GOSSIP_HELLO, CMSG_GOSSIP_HELLOswap);
    }
    if (opcode == Opcode::CMSG_GOSSIP_SELECT_OPTION) {
        wrath::CMSG_GOSSIP_SELECT_OPTION CMSG_GOSSIP_SELECT_OPTIONswap(other.CMSG_GOSSIP_SELECT_OPTION);
        std::swap(this->CMSG_GOSSIP_SELECT_OPTION, CMSG_GOSSIP_SELECT_OPTIONswap);
    }
    if (opcode == Opcode::CMSG_NPC_TEXT_QUERY) {
        wrath::CMSG_NPC_TEXT_QUERY CMSG_NPC_TEXT_QUERYswap(other.CMSG_NPC_TEXT_QUERY);
        std::swap(this->CMSG_NPC_TEXT_QUERY, CMSG_NPC_TEXT_QUERYswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_QUERY) {
        wrath::CMSG_QUESTGIVER_STATUS_QUERY CMSG_QUESTGIVER_STATUS_QUERYswap(other.CMSG_QUESTGIVER_STATUS_QUERY);
        std::swap(this->CMSG_QUESTGIVER_STATUS_QUERY, CMSG_QUESTGIVER_STATUS_QUERYswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_HELLO) {
        wrath::CMSG_QUESTGIVER_HELLO CMSG_QUESTGIVER_HELLOswap(other.CMSG_QUESTGIVER_HELLO);
        std::swap(this->CMSG_QUESTGIVER_HELLO, CMSG_QUESTGIVER_HELLOswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUERY_QUEST) {
        wrath::CMSG_QUESTGIVER_QUERY_QUEST CMSG_QUESTGIVER_QUERY_QUESTswap(other.CMSG_QUESTGIVER_QUERY_QUEST);
        std::swap(this->CMSG_QUESTGIVER_QUERY_QUEST, CMSG_QUESTGIVER_QUERY_QUESTswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) {
        wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH CMSG_QUESTGIVER_QUEST_AUTOLAUNCHswap(other.CMSG_QUESTGIVER_QUEST_AUTOLAUNCH);
        std::swap(this->CMSG_QUESTGIVER_QUEST_AUTOLAUNCH, CMSG_QUESTGIVER_QUEST_AUTOLAUNCHswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) {
        wrath::CMSG_QUESTGIVER_ACCEPT_QUEST CMSG_QUESTGIVER_ACCEPT_QUESTswap(other.CMSG_QUESTGIVER_ACCEPT_QUEST);
        std::swap(this->CMSG_QUESTGIVER_ACCEPT_QUEST, CMSG_QUESTGIVER_ACCEPT_QUESTswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) {
        wrath::CMSG_QUESTGIVER_COMPLETE_QUEST CMSG_QUESTGIVER_COMPLETE_QUESTswap(other.CMSG_QUESTGIVER_COMPLETE_QUEST);
        std::swap(this->CMSG_QUESTGIVER_COMPLETE_QUEST, CMSG_QUESTGIVER_COMPLETE_QUESTswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) {
        wrath::CMSG_QUESTGIVER_REQUEST_REWARD CMSG_QUESTGIVER_REQUEST_REWARDswap(other.CMSG_QUESTGIVER_REQUEST_REWARD);
        std::swap(this->CMSG_QUESTGIVER_REQUEST_REWARD, CMSG_QUESTGIVER_REQUEST_REWARDswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) {
        wrath::CMSG_QUESTGIVER_CHOOSE_REWARD CMSG_QUESTGIVER_CHOOSE_REWARDswap(other.CMSG_QUESTGIVER_CHOOSE_REWARD);
        std::swap(this->CMSG_QUESTGIVER_CHOOSE_REWARD, CMSG_QUESTGIVER_CHOOSE_REWARDswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_CANCEL) {
        wrath::CMSG_QUESTGIVER_CANCEL CMSG_QUESTGIVER_CANCELswap(other.CMSG_QUESTGIVER_CANCEL);
        std::swap(this->CMSG_QUESTGIVER_CANCEL, CMSG_QUESTGIVER_CANCELswap);
    }
    if (opcode == Opcode::CMSG_QUESTLOG_SWAP_QUEST) {
        wrath::CMSG_QUESTLOG_SWAP_QUEST CMSG_QUESTLOG_SWAP_QUESTswap(other.CMSG_QUESTLOG_SWAP_QUEST);
        std::swap(this->CMSG_QUESTLOG_SWAP_QUEST, CMSG_QUESTLOG_SWAP_QUESTswap);
    }
    if (opcode == Opcode::CMSG_QUESTLOG_REMOVE_QUEST) {
        wrath::CMSG_QUESTLOG_REMOVE_QUEST CMSG_QUESTLOG_REMOVE_QUESTswap(other.CMSG_QUESTLOG_REMOVE_QUEST);
        std::swap(this->CMSG_QUESTLOG_REMOVE_QUEST, CMSG_QUESTLOG_REMOVE_QUESTswap);
    }
    if (opcode == Opcode::CMSG_QUEST_CONFIRM_ACCEPT) {
        wrath::CMSG_QUEST_CONFIRM_ACCEPT CMSG_QUEST_CONFIRM_ACCEPTswap(other.CMSG_QUEST_CONFIRM_ACCEPT);
        std::swap(this->CMSG_QUEST_CONFIRM_ACCEPT, CMSG_QUEST_CONFIRM_ACCEPTswap);
    }
    if (opcode == Opcode::CMSG_PUSHQUESTTOPARTY) {
        wrath::CMSG_PUSHQUESTTOPARTY CMSG_PUSHQUESTTOPARTYswap(other.CMSG_PUSHQUESTTOPARTY);
        std::swap(this->CMSG_PUSHQUESTTOPARTY, CMSG_PUSHQUESTTOPARTYswap);
    }
    if (opcode == Opcode::CMSG_LIST_INVENTORY) {
        wrath::CMSG_LIST_INVENTORY CMSG_LIST_INVENTORYswap(other.CMSG_LIST_INVENTORY);
        std::swap(this->CMSG_LIST_INVENTORY, CMSG_LIST_INVENTORYswap);
    }
    if (opcode == Opcode::CMSG_SELL_ITEM) {
        wrath::CMSG_SELL_ITEM CMSG_SELL_ITEMswap(other.CMSG_SELL_ITEM);
        std::swap(this->CMSG_SELL_ITEM, CMSG_SELL_ITEMswap);
    }
    if (opcode == Opcode::CMSG_BUY_ITEM) {
        wrath::CMSG_BUY_ITEM CMSG_BUY_ITEMswap(other.CMSG_BUY_ITEM);
        std::swap(this->CMSG_BUY_ITEM, CMSG_BUY_ITEMswap);
    }
    if (opcode == Opcode::CMSG_BUY_ITEM_IN_SLOT) {
        wrath::CMSG_BUY_ITEM_IN_SLOT CMSG_BUY_ITEM_IN_SLOTswap(other.CMSG_BUY_ITEM_IN_SLOT);
        std::swap(this->CMSG_BUY_ITEM_IN_SLOT, CMSG_BUY_ITEM_IN_SLOTswap);
    }
    if (opcode == Opcode::CMSG_TAXINODE_STATUS_QUERY) {
        wrath::CMSG_TAXINODE_STATUS_QUERY CMSG_TAXINODE_STATUS_QUERYswap(other.CMSG_TAXINODE_STATUS_QUERY);
        std::swap(this->CMSG_TAXINODE_STATUS_QUERY, CMSG_TAXINODE_STATUS_QUERYswap);
    }
    if (opcode == Opcode::CMSG_TAXIQUERYAVAILABLENODES) {
        wrath::CMSG_TAXIQUERYAVAILABLENODES CMSG_TAXIQUERYAVAILABLENODESswap(other.CMSG_TAXIQUERYAVAILABLENODES);
        std::swap(this->CMSG_TAXIQUERYAVAILABLENODES, CMSG_TAXIQUERYAVAILABLENODESswap);
    }
    if (opcode == Opcode::CMSG_ACTIVATETAXI) {
        wrath::CMSG_ACTIVATETAXI CMSG_ACTIVATETAXIswap(other.CMSG_ACTIVATETAXI);
        std::swap(this->CMSG_ACTIVATETAXI, CMSG_ACTIVATETAXIswap);
    }
    if (opcode == Opcode::CMSG_TRAINER_LIST) {
        wrath::CMSG_TRAINER_LIST CMSG_TRAINER_LISTswap(other.CMSG_TRAINER_LIST);
        std::swap(this->CMSG_TRAINER_LIST, CMSG_TRAINER_LISTswap);
    }
    if (opcode == Opcode::CMSG_TRAINER_BUY_SPELL) {
        wrath::CMSG_TRAINER_BUY_SPELL CMSG_TRAINER_BUY_SPELLswap(other.CMSG_TRAINER_BUY_SPELL);
        std::swap(this->CMSG_TRAINER_BUY_SPELL, CMSG_TRAINER_BUY_SPELLswap);
    }
    if (opcode == Opcode::CMSG_BINDER_ACTIVATE) {
        wrath::CMSG_BINDER_ACTIVATE CMSG_BINDER_ACTIVATEswap(other.CMSG_BINDER_ACTIVATE);
        std::swap(this->CMSG_BINDER_ACTIVATE, CMSG_BINDER_ACTIVATEswap);
    }
    if (opcode == Opcode::CMSG_BANKER_ACTIVATE) {
        wrath::CMSG_BANKER_ACTIVATE CMSG_BANKER_ACTIVATEswap(other.CMSG_BANKER_ACTIVATE);
        std::swap(this->CMSG_BANKER_ACTIVATE, CMSG_BANKER_ACTIVATEswap);
    }
    if (opcode == Opcode::CMSG_BUY_BANK_SLOT) {
        wrath::CMSG_BUY_BANK_SLOT CMSG_BUY_BANK_SLOTswap(other.CMSG_BUY_BANK_SLOT);
        std::swap(this->CMSG_BUY_BANK_SLOT, CMSG_BUY_BANK_SLOTswap);
    }
    if (opcode == Opcode::CMSG_PETITION_SHOWLIST) {
        wrath::CMSG_PETITION_SHOWLIST CMSG_PETITION_SHOWLISTswap(other.CMSG_PETITION_SHOWLIST);
        std::swap(this->CMSG_PETITION_SHOWLIST, CMSG_PETITION_SHOWLISTswap);
    }
    if (opcode == Opcode::CMSG_PETITION_BUY) {
        wrath::CMSG_PETITION_BUY CMSG_PETITION_BUYswap(other.CMSG_PETITION_BUY);
        std::swap(this->CMSG_PETITION_BUY, CMSG_PETITION_BUYswap);
    }
    if (opcode == Opcode::CMSG_PETITION_SHOW_SIGNATURES) {
        wrath::CMSG_PETITION_SHOW_SIGNATURES CMSG_PETITION_SHOW_SIGNATURESswap(other.CMSG_PETITION_SHOW_SIGNATURES);
        std::swap(this->CMSG_PETITION_SHOW_SIGNATURES, CMSG_PETITION_SHOW_SIGNATURESswap);
    }
    if (opcode == Opcode::CMSG_PETITION_SIGN) {
        wrath::CMSG_PETITION_SIGN CMSG_PETITION_SIGNswap(other.CMSG_PETITION_SIGN);
        std::swap(this->CMSG_PETITION_SIGN, CMSG_PETITION_SIGNswap);
    }
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        wrath::MSG_PETITION_DECLINE MSG_PETITION_DECLINEswap(other.MSG_PETITION_DECLINE);
        std::swap(this->MSG_PETITION_DECLINE, MSG_PETITION_DECLINEswap);
    }
    if (opcode == Opcode::CMSG_OFFER_PETITION) {
        wrath::CMSG_OFFER_PETITION CMSG_OFFER_PETITIONswap(other.CMSG_OFFER_PETITION);
        std::swap(this->CMSG_OFFER_PETITION, CMSG_OFFER_PETITIONswap);
    }
    if (opcode == Opcode::CMSG_TURN_IN_PETITION) {
        wrath::CMSG_TURN_IN_PETITION CMSG_TURN_IN_PETITIONswap(other.CMSG_TURN_IN_PETITION);
        std::swap(this->CMSG_TURN_IN_PETITION, CMSG_TURN_IN_PETITIONswap);
    }
    if (opcode == Opcode::CMSG_PETITION_QUERY) {
        wrath::CMSG_PETITION_QUERY CMSG_PETITION_QUERYswap(other.CMSG_PETITION_QUERY);
        std::swap(this->CMSG_PETITION_QUERY, CMSG_PETITION_QUERYswap);
    }
    if (opcode == Opcode::CMSG_BUG) {
        wrath::CMSG_BUG CMSG_BUGswap(other.CMSG_BUG);
        std::swap(this->CMSG_BUG, CMSG_BUGswap);
    }
    if (opcode == Opcode::CMSG_PLAYED_TIME) {
        wrath::CMSG_PLAYED_TIME CMSG_PLAYED_TIMEswap(other.CMSG_PLAYED_TIME);
        std::swap(this->CMSG_PLAYED_TIME, CMSG_PLAYED_TIMEswap);
    }
    if (opcode == Opcode::CMSG_QUERY_TIME) {
        wrath::CMSG_QUERY_TIME CMSG_QUERY_TIMEswap(other.CMSG_QUERY_TIME);
        std::swap(this->CMSG_QUERY_TIME, CMSG_QUERY_TIMEswap);
    }
    if (opcode == Opcode::CMSG_RECLAIM_CORPSE) {
        wrath::CMSG_RECLAIM_CORPSE CMSG_RECLAIM_CORPSEswap(other.CMSG_RECLAIM_CORPSE);
        std::swap(this->CMSG_RECLAIM_CORPSE, CMSG_RECLAIM_CORPSEswap);
    }
    if (opcode == Opcode::CMSG_WRAP_ITEM) {
        wrath::CMSG_WRAP_ITEM CMSG_WRAP_ITEMswap(other.CMSG_WRAP_ITEM);
        std::swap(this->CMSG_WRAP_ITEM, CMSG_WRAP_ITEMswap);
    }
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        wrath::MSG_MINIMAP_PING_Client MSG_MINIMAP_PINGswap(other.MSG_MINIMAP_PING);
        std::swap(this->MSG_MINIMAP_PING, MSG_MINIMAP_PINGswap);
    }
    if (opcode == Opcode::CMSG_PING) {
        wrath::CMSG_PING CMSG_PINGswap(other.CMSG_PING);
        std::swap(this->CMSG_PING, CMSG_PINGswap);
    }
    if (opcode == Opcode::CMSG_SETSHEATHED) {
        wrath::CMSG_SETSHEATHED CMSG_SETSHEATHEDswap(other.CMSG_SETSHEATHED);
        std::swap(this->CMSG_SETSHEATHED, CMSG_SETSHEATHEDswap);
    }
    if (opcode == Opcode::CMSG_QUEST_POI_QUERY) {
        wrath::CMSG_QUEST_POI_QUERY CMSG_QUEST_POI_QUERYswap(other.CMSG_QUEST_POI_QUERY);
        std::swap(this->CMSG_QUEST_POI_QUERY, CMSG_QUEST_POI_QUERYswap);
    }
    if (opcode == Opcode::CMSG_AUTH_SESSION) {
        wrath::CMSG_AUTH_SESSION CMSG_AUTH_SESSIONswap(other.CMSG_AUTH_SESSION);
        std::swap(this->CMSG_AUTH_SESSION, CMSG_AUTH_SESSIONswap);
    }
    if (opcode == Opcode::CMSG_PET_CAST_SPELL) {
        wrath::CMSG_PET_CAST_SPELL CMSG_PET_CAST_SPELLswap(other.CMSG_PET_CAST_SPELL);
        std::swap(this->CMSG_PET_CAST_SPELL, CMSG_PET_CAST_SPELLswap);
    }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        wrath::MSG_SAVE_GUILD_EMBLEM_Client MSG_SAVE_GUILD_EMBLEMswap(other.MSG_SAVE_GUILD_EMBLEM);
        std::swap(this->MSG_SAVE_GUILD_EMBLEM, MSG_SAVE_GUILD_EMBLEMswap);
    }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        wrath::MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATEswap(other.MSG_TABARDVENDOR_ACTIVATE);
        std::swap(this->MSG_TABARDVENDOR_ACTIVATE, MSG_TABARDVENDOR_ACTIVATEswap);
    }
    if (opcode == Opcode::CMSG_ZONEUPDATE) {
        wrath::CMSG_ZONEUPDATE CMSG_ZONEUPDATEswap(other.CMSG_ZONEUPDATE);
        std::swap(this->CMSG_ZONEUPDATE, CMSG_ZONEUPDATEswap);
    }
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        wrath::MSG_RANDOM_ROLL_Client MSG_RANDOM_ROLLswap(other.MSG_RANDOM_ROLL);
        std::swap(this->MSG_RANDOM_ROLL, MSG_RANDOM_ROLLswap);
    }
    if (opcode == Opcode::CMSG_UNLEARN_SKILL) {
        wrath::CMSG_UNLEARN_SKILL CMSG_UNLEARN_SKILLswap(other.CMSG_UNLEARN_SKILL);
        std::swap(this->CMSG_UNLEARN_SKILL, CMSG_UNLEARN_SKILLswap);
    }
    if (opcode == Opcode::CMSG_GMTICKET_CREATE) {
        wrath::CMSG_GMTICKET_CREATE CMSG_GMTICKET_CREATEswap(other.CMSG_GMTICKET_CREATE);
        std::swap(this->CMSG_GMTICKET_CREATE, CMSG_GMTICKET_CREATEswap);
    }
    if (opcode == Opcode::CMSG_GMTICKET_UPDATETEXT) {
        wrath::CMSG_GMTICKET_UPDATETEXT CMSG_GMTICKET_UPDATETEXTswap(other.CMSG_GMTICKET_UPDATETEXT);
        std::swap(this->CMSG_GMTICKET_UPDATETEXT, CMSG_GMTICKET_UPDATETEXTswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_ACCOUNT_DATA) {
        wrath::CMSG_REQUEST_ACCOUNT_DATA CMSG_REQUEST_ACCOUNT_DATAswap(other.CMSG_REQUEST_ACCOUNT_DATA);
        std::swap(this->CMSG_REQUEST_ACCOUNT_DATA, CMSG_REQUEST_ACCOUNT_DATAswap);
    }
    if (opcode == Opcode::CMSG_UPDATE_ACCOUNT_DATA) {
        wrath::CMSG_UPDATE_ACCOUNT_DATA CMSG_UPDATE_ACCOUNT_DATAswap(other.CMSG_UPDATE_ACCOUNT_DATA);
        std::swap(this->CMSG_UPDATE_ACCOUNT_DATA, CMSG_UPDATE_ACCOUNT_DATAswap);
    }
    if (opcode == Opcode::CMSG_GMTICKET_GETTICKET) {
        wrath::CMSG_GMTICKET_GETTICKET CMSG_GMTICKET_GETTICKETswap(other.CMSG_GMTICKET_GETTICKET);
        std::swap(this->CMSG_GMTICKET_GETTICKET, CMSG_GMTICKET_GETTICKETswap);
    }
    if (opcode == Opcode::CMSG_UNLEARN_TALENTS) {
        wrath::CMSG_UNLEARN_TALENTS CMSG_UNLEARN_TALENTSswap(other.CMSG_UNLEARN_TALENTS);
        std::swap(this->CMSG_UNLEARN_TALENTS, CMSG_UNLEARN_TALENTSswap);
    }
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        wrath::MSG_CORPSE_QUERY_Client MSG_CORPSE_QUERYswap(other.MSG_CORPSE_QUERY);
        std::swap(this->MSG_CORPSE_QUERY, MSG_CORPSE_QUERYswap);
    }
    if (opcode == Opcode::CMSG_GMTICKET_DELETETICKET) {
        wrath::CMSG_GMTICKET_DELETETICKET CMSG_GMTICKET_DELETETICKETswap(other.CMSG_GMTICKET_DELETETICKET);
        std::swap(this->CMSG_GMTICKET_DELETETICKET, CMSG_GMTICKET_DELETETICKETswap);
    }
    if (opcode == Opcode::CMSG_GMTICKET_SYSTEMSTATUS) {
        wrath::CMSG_GMTICKET_SYSTEMSTATUS CMSG_GMTICKET_SYSTEMSTATUSswap(other.CMSG_GMTICKET_SYSTEMSTATUS);
        std::swap(this->CMSG_GMTICKET_SYSTEMSTATUS, CMSG_GMTICKET_SYSTEMSTATUSswap);
    }
    if (opcode == Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) {
        wrath::CMSG_SPIRIT_HEALER_ACTIVATE CMSG_SPIRIT_HEALER_ACTIVATEswap(other.CMSG_SPIRIT_HEALER_ACTIVATE);
        std::swap(this->CMSG_SPIRIT_HEALER_ACTIVATE, CMSG_SPIRIT_HEALER_ACTIVATEswap);
    }
    if (opcode == Opcode::CMSG_CHAT_IGNORED) {
        wrath::CMSG_CHAT_IGNORED CMSG_CHAT_IGNOREDswap(other.CMSG_CHAT_IGNORED);
        std::swap(this->CMSG_CHAT_IGNORED, CMSG_CHAT_IGNOREDswap);
    }
    if (opcode == Opcode::CMSG_GUILD_RANK) {
        wrath::CMSG_GUILD_RANK CMSG_GUILD_RANKswap(other.CMSG_GUILD_RANK);
        std::swap(this->CMSG_GUILD_RANK, CMSG_GUILD_RANKswap);
    }
    if (opcode == Opcode::CMSG_GUILD_ADD_RANK) {
        wrath::CMSG_GUILD_ADD_RANK CMSG_GUILD_ADD_RANKswap(other.CMSG_GUILD_ADD_RANK);
        std::swap(this->CMSG_GUILD_ADD_RANK, CMSG_GUILD_ADD_RANKswap);
    }
    if (opcode == Opcode::CMSG_GUILD_DEL_RANK) {
        wrath::CMSG_GUILD_DEL_RANK CMSG_GUILD_DEL_RANKswap(other.CMSG_GUILD_DEL_RANK);
        std::swap(this->CMSG_GUILD_DEL_RANK, CMSG_GUILD_DEL_RANKswap);
    }
    if (opcode == Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) {
        wrath::CMSG_GUILD_SET_PUBLIC_NOTE CMSG_GUILD_SET_PUBLIC_NOTEswap(other.CMSG_GUILD_SET_PUBLIC_NOTE);
        std::swap(this->CMSG_GUILD_SET_PUBLIC_NOTE, CMSG_GUILD_SET_PUBLIC_NOTEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_SET_OFFICER_NOTE) {
        wrath::CMSG_GUILD_SET_OFFICER_NOTE CMSG_GUILD_SET_OFFICER_NOTEswap(other.CMSG_GUILD_SET_OFFICER_NOTE);
        std::swap(this->CMSG_GUILD_SET_OFFICER_NOTE, CMSG_GUILD_SET_OFFICER_NOTEswap);
    }
    if (opcode == Opcode::CMSG_SEND_MAIL) {
        wrath::CMSG_SEND_MAIL CMSG_SEND_MAILswap(other.CMSG_SEND_MAIL);
        std::swap(this->CMSG_SEND_MAIL, CMSG_SEND_MAILswap);
    }
    if (opcode == Opcode::CMSG_GET_MAIL_LIST) {
        wrath::CMSG_GET_MAIL_LIST CMSG_GET_MAIL_LISTswap(other.CMSG_GET_MAIL_LIST);
        std::swap(this->CMSG_GET_MAIL_LIST, CMSG_GET_MAIL_LISTswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_LIST) {
        wrath::CMSG_BATTLEFIELD_LIST CMSG_BATTLEFIELD_LISTswap(other.CMSG_BATTLEFIELD_LIST);
        std::swap(this->CMSG_BATTLEFIELD_LIST, CMSG_BATTLEFIELD_LISTswap);
    }
    if (opcode == Opcode::CMSG_ITEM_TEXT_QUERY) {
        wrath::CMSG_ITEM_TEXT_QUERY CMSG_ITEM_TEXT_QUERYswap(other.CMSG_ITEM_TEXT_QUERY);
        std::swap(this->CMSG_ITEM_TEXT_QUERY, CMSG_ITEM_TEXT_QUERYswap);
    }
    if (opcode == Opcode::CMSG_MAIL_TAKE_MONEY) {
        wrath::CMSG_MAIL_TAKE_MONEY CMSG_MAIL_TAKE_MONEYswap(other.CMSG_MAIL_TAKE_MONEY);
        std::swap(this->CMSG_MAIL_TAKE_MONEY, CMSG_MAIL_TAKE_MONEYswap);
    }
    if (opcode == Opcode::CMSG_MAIL_TAKE_ITEM) {
        wrath::CMSG_MAIL_TAKE_ITEM CMSG_MAIL_TAKE_ITEMswap(other.CMSG_MAIL_TAKE_ITEM);
        std::swap(this->CMSG_MAIL_TAKE_ITEM, CMSG_MAIL_TAKE_ITEMswap);
    }
    if (opcode == Opcode::CMSG_MAIL_MARK_AS_READ) {
        wrath::CMSG_MAIL_MARK_AS_READ CMSG_MAIL_MARK_AS_READswap(other.CMSG_MAIL_MARK_AS_READ);
        std::swap(this->CMSG_MAIL_MARK_AS_READ, CMSG_MAIL_MARK_AS_READswap);
    }
    if (opcode == Opcode::CMSG_MAIL_RETURN_TO_SENDER) {
        wrath::CMSG_MAIL_RETURN_TO_SENDER CMSG_MAIL_RETURN_TO_SENDERswap(other.CMSG_MAIL_RETURN_TO_SENDER);
        std::swap(this->CMSG_MAIL_RETURN_TO_SENDER, CMSG_MAIL_RETURN_TO_SENDERswap);
    }
    if (opcode == Opcode::CMSG_MAIL_DELETE) {
        wrath::CMSG_MAIL_DELETE CMSG_MAIL_DELETEswap(other.CMSG_MAIL_DELETE);
        std::swap(this->CMSG_MAIL_DELETE, CMSG_MAIL_DELETEswap);
    }
    if (opcode == Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) {
        wrath::CMSG_MAIL_CREATE_TEXT_ITEM CMSG_MAIL_CREATE_TEXT_ITEMswap(other.CMSG_MAIL_CREATE_TEXT_ITEM);
        std::swap(this->CMSG_MAIL_CREATE_TEXT_ITEM, CMSG_MAIL_CREATE_TEXT_ITEMswap);
    }
    if (opcode == Opcode::CMSG_LEARN_TALENT) {
        wrath::CMSG_LEARN_TALENT CMSG_LEARN_TALENTswap(other.CMSG_LEARN_TALENT);
        std::swap(this->CMSG_LEARN_TALENT, CMSG_LEARN_TALENTswap);
    }
    if (opcode == Opcode::CMSG_TOGGLE_PVP) {
        wrath::CMSG_TOGGLE_PVP CMSG_TOGGLE_PVPswap(other.CMSG_TOGGLE_PVP);
        std::swap(this->CMSG_TOGGLE_PVP, CMSG_TOGGLE_PVPswap);
    }
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        wrath::MSG_AUCTION_HELLO_Client MSG_AUCTION_HELLOswap(other.MSG_AUCTION_HELLO);
        std::swap(this->MSG_AUCTION_HELLO, MSG_AUCTION_HELLOswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_SELL_ITEM) {
        wrath::CMSG_AUCTION_SELL_ITEM CMSG_AUCTION_SELL_ITEMswap(other.CMSG_AUCTION_SELL_ITEM);
        std::swap(this->CMSG_AUCTION_SELL_ITEM, CMSG_AUCTION_SELL_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_REMOVE_ITEM) {
        wrath::CMSG_AUCTION_REMOVE_ITEM CMSG_AUCTION_REMOVE_ITEMswap(other.CMSG_AUCTION_REMOVE_ITEM);
        std::swap(this->CMSG_AUCTION_REMOVE_ITEM, CMSG_AUCTION_REMOVE_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_ITEMS) {
        wrath::CMSG_AUCTION_LIST_ITEMS CMSG_AUCTION_LIST_ITEMSswap(other.CMSG_AUCTION_LIST_ITEMS);
        std::swap(this->CMSG_AUCTION_LIST_ITEMS, CMSG_AUCTION_LIST_ITEMSswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) {
        wrath::CMSG_AUCTION_LIST_OWNER_ITEMS CMSG_AUCTION_LIST_OWNER_ITEMSswap(other.CMSG_AUCTION_LIST_OWNER_ITEMS);
        std::swap(this->CMSG_AUCTION_LIST_OWNER_ITEMS, CMSG_AUCTION_LIST_OWNER_ITEMSswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_PLACE_BID) {
        wrath::CMSG_AUCTION_PLACE_BID CMSG_AUCTION_PLACE_BIDswap(other.CMSG_AUCTION_PLACE_BID);
        std::swap(this->CMSG_AUCTION_PLACE_BID, CMSG_AUCTION_PLACE_BIDswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) {
        wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS CMSG_AUCTION_LIST_BIDDER_ITEMSswap(other.CMSG_AUCTION_LIST_BIDDER_ITEMS);
        std::swap(this->CMSG_AUCTION_LIST_BIDDER_ITEMS, CMSG_AUCTION_LIST_BIDDER_ITEMSswap);
    }
    if (opcode == Opcode::CMSG_SET_AMMO) {
        wrath::CMSG_SET_AMMO CMSG_SET_AMMOswap(other.CMSG_SET_AMMO);
        std::swap(this->CMSG_SET_AMMO, CMSG_SET_AMMOswap);
    }
    if (opcode == Opcode::CMSG_SET_ACTIVE_MOVER) {
        wrath::CMSG_SET_ACTIVE_MOVER CMSG_SET_ACTIVE_MOVERswap(other.CMSG_SET_ACTIVE_MOVER);
        std::swap(this->CMSG_SET_ACTIVE_MOVER, CMSG_SET_ACTIVE_MOVERswap);
    }
    if (opcode == Opcode::CMSG_PET_CANCEL_AURA) {
        wrath::CMSG_PET_CANCEL_AURA CMSG_PET_CANCEL_AURAswap(other.CMSG_PET_CANCEL_AURA);
        std::swap(this->CMSG_PET_CANCEL_AURA, CMSG_PET_CANCEL_AURAswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) {
        wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL CMSG_CANCEL_AUTO_REPEAT_SPELLswap(other.CMSG_CANCEL_AUTO_REPEAT_SPELL);
        std::swap(this->CMSG_CANCEL_AUTO_REPEAT_SPELL, CMSG_CANCEL_AUTO_REPEAT_SPELLswap);
    }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        wrath::MSG_LIST_STABLED_PETS_Client MSG_LIST_STABLED_PETSswap(other.MSG_LIST_STABLED_PETS);
        std::swap(this->MSG_LIST_STABLED_PETS, MSG_LIST_STABLED_PETSswap);
    }
    if (opcode == Opcode::CMSG_STABLE_PET) {
        wrath::CMSG_STABLE_PET CMSG_STABLE_PETswap(other.CMSG_STABLE_PET);
        std::swap(this->CMSG_STABLE_PET, CMSG_STABLE_PETswap);
    }
    if (opcode == Opcode::CMSG_UNSTABLE_PET) {
        wrath::CMSG_UNSTABLE_PET CMSG_UNSTABLE_PETswap(other.CMSG_UNSTABLE_PET);
        std::swap(this->CMSG_UNSTABLE_PET, CMSG_UNSTABLE_PETswap);
    }
    if (opcode == Opcode::CMSG_BUY_STABLE_SLOT) {
        wrath::CMSG_BUY_STABLE_SLOT CMSG_BUY_STABLE_SLOTswap(other.CMSG_BUY_STABLE_SLOT);
        std::swap(this->CMSG_BUY_STABLE_SLOT, CMSG_BUY_STABLE_SLOTswap);
    }
    if (opcode == Opcode::CMSG_STABLE_SWAP_PET) {
        wrath::CMSG_STABLE_SWAP_PET CMSG_STABLE_SWAP_PETswap(other.CMSG_STABLE_SWAP_PET);
        std::swap(this->CMSG_STABLE_SWAP_PET, CMSG_STABLE_SWAP_PETswap);
    }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        wrath::MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULTswap(other.MSG_QUEST_PUSH_RESULT);
        std::swap(this->MSG_QUEST_PUSH_RESULT, MSG_QUEST_PUSH_RESULTswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_PET_INFO) {
        wrath::CMSG_REQUEST_PET_INFO CMSG_REQUEST_PET_INFOswap(other.CMSG_REQUEST_PET_INFO);
        std::swap(this->CMSG_REQUEST_PET_INFO, CMSG_REQUEST_PET_INFOswap);
    }
    if (opcode == Opcode::CMSG_FAR_SIGHT) {
        wrath::CMSG_FAR_SIGHT CMSG_FAR_SIGHTswap(other.CMSG_FAR_SIGHT);
        std::swap(this->CMSG_FAR_SIGHT, CMSG_FAR_SIGHTswap);
    }
    if (opcode == Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) {
        wrath::CMSG_GROUP_CHANGE_SUB_GROUP CMSG_GROUP_CHANGE_SUB_GROUPswap(other.CMSG_GROUP_CHANGE_SUB_GROUP);
        std::swap(this->CMSG_GROUP_CHANGE_SUB_GROUP, CMSG_GROUP_CHANGE_SUB_GROUPswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) {
        wrath::CMSG_REQUEST_PARTY_MEMBER_STATS CMSG_REQUEST_PARTY_MEMBER_STATSswap(other.CMSG_REQUEST_PARTY_MEMBER_STATS);
        std::swap(this->CMSG_REQUEST_PARTY_MEMBER_STATS, CMSG_REQUEST_PARTY_MEMBER_STATSswap);
    }
    if (opcode == Opcode::CMSG_GROUP_SWAP_SUB_GROUP) {
        wrath::CMSG_GROUP_SWAP_SUB_GROUP CMSG_GROUP_SWAP_SUB_GROUPswap(other.CMSG_GROUP_SWAP_SUB_GROUP);
        std::swap(this->CMSG_GROUP_SWAP_SUB_GROUP, CMSG_GROUP_SWAP_SUB_GROUPswap);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_BANK_ITEM) {
        wrath::CMSG_AUTOSTORE_BANK_ITEM CMSG_AUTOSTORE_BANK_ITEMswap(other.CMSG_AUTOSTORE_BANK_ITEM);
        std::swap(this->CMSG_AUTOSTORE_BANK_ITEM, CMSG_AUTOSTORE_BANK_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUTOBANK_ITEM) {
        wrath::CMSG_AUTOBANK_ITEM CMSG_AUTOBANK_ITEMswap(other.CMSG_AUTOBANK_ITEM);
        std::swap(this->CMSG_AUTOBANK_ITEM, CMSG_AUTOBANK_ITEMswap);
    }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        wrath::MSG_QUERY_NEXT_MAIL_TIME_Client MSG_QUERY_NEXT_MAIL_TIMEswap(other.MSG_QUERY_NEXT_MAIL_TIME);
        std::swap(this->MSG_QUERY_NEXT_MAIL_TIME, MSG_QUERY_NEXT_MAIL_TIMEswap);
    }
    if (opcode == Opcode::CMSG_GROUP_RAID_CONVERT) {
        wrath::CMSG_GROUP_RAID_CONVERT CMSG_GROUP_RAID_CONVERTswap(other.CMSG_GROUP_RAID_CONVERT);
        std::swap(this->CMSG_GROUP_RAID_CONVERT, CMSG_GROUP_RAID_CONVERTswap);
    }
    if (opcode == Opcode::CMSG_GROUP_ASSISTANT_LEADER) {
        wrath::CMSG_GROUP_ASSISTANT_LEADER CMSG_GROUP_ASSISTANT_LEADERswap(other.CMSG_GROUP_ASSISTANT_LEADER);
        std::swap(this->CMSG_GROUP_ASSISTANT_LEADER, CMSG_GROUP_ASSISTANT_LEADERswap);
    }
    if (opcode == Opcode::CMSG_BUYBACK_ITEM) {
        wrath::CMSG_BUYBACK_ITEM CMSG_BUYBACK_ITEMswap(other.CMSG_BUYBACK_ITEM);
        std::swap(this->CMSG_BUYBACK_ITEM, CMSG_BUYBACK_ITEMswap);
    }
    if (opcode == Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) {
        wrath::CMSG_SET_SAVED_INSTANCE_EXTEND CMSG_SET_SAVED_INSTANCE_EXTENDswap(other.CMSG_SET_SAVED_INSTANCE_EXTEND);
        std::swap(this->CMSG_SET_SAVED_INSTANCE_EXTEND, CMSG_SET_SAVED_INSTANCE_EXTENDswap);
    }
    if (opcode == Opcode::CMSG_LFG_GET_STATUS) {
        wrath::CMSG_LFG_GET_STATUS CMSG_LFG_GET_STATUSswap(other.CMSG_LFG_GET_STATUS);
        std::swap(this->CMSG_LFG_GET_STATUS, CMSG_LFG_GET_STATUSswap);
    }
    if (opcode == Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) {
        wrath::CMSG_GMTICKETSYSTEM_TOGGLE CMSG_GMTICKETSYSTEM_TOGGLEswap(other.CMSG_GMTICKETSYSTEM_TOGGLE);
        std::swap(this->CMSG_GMTICKETSYSTEM_TOGGLE, CMSG_GMTICKETSYSTEM_TOGGLEswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_GROWTH_AURA) {
        wrath::CMSG_CANCEL_GROWTH_AURA CMSG_CANCEL_GROWTH_AURAswap(other.CMSG_CANCEL_GROWTH_AURA);
        std::swap(this->CMSG_CANCEL_GROWTH_AURA, CMSG_CANCEL_GROWTH_AURAswap);
    }
    if (opcode == Opcode::CMSG_LOOT_ROLL) {
        wrath::CMSG_LOOT_ROLL CMSG_LOOT_ROLLswap(other.CMSG_LOOT_ROLL);
        std::swap(this->CMSG_LOOT_ROLL, CMSG_LOOT_ROLLswap);
    }
    if (opcode == Opcode::CMSG_LOOT_MASTER_GIVE) {
        wrath::CMSG_LOOT_MASTER_GIVE CMSG_LOOT_MASTER_GIVEswap(other.CMSG_LOOT_MASTER_GIVE);
        std::swap(this->CMSG_LOOT_MASTER_GIVE, CMSG_LOOT_MASTER_GIVEswap);
    }
    if (opcode == Opcode::CMSG_REPAIR_ITEM) {
        wrath::CMSG_REPAIR_ITEM CMSG_REPAIR_ITEMswap(other.CMSG_REPAIR_ITEM);
        std::swap(this->CMSG_REPAIR_ITEM, CMSG_REPAIR_ITEMswap);
    }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        wrath::MSG_TALENT_WIPE_CONFIRM_Client MSG_TALENT_WIPE_CONFIRMswap(other.MSG_TALENT_WIPE_CONFIRM);
        std::swap(this->MSG_TALENT_WIPE_CONFIRM, MSG_TALENT_WIPE_CONFIRMswap);
    }
    if (opcode == Opcode::CMSG_SUMMON_RESPONSE) {
        wrath::CMSG_SUMMON_RESPONSE CMSG_SUMMON_RESPONSEswap(other.CMSG_SUMMON_RESPONSE);
        std::swap(this->CMSG_SUMMON_RESPONSE, CMSG_SUMMON_RESPONSEswap);
    }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        wrath::MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALKswap(other.MSG_MOVE_WATER_WALK);
        std::swap(this->MSG_MOVE_WATER_WALK, MSG_MOVE_WATER_WALKswap);
    }
    if (opcode == Opcode::CMSG_SELF_RES) {
        wrath::CMSG_SELF_RES CMSG_SELF_RESswap(other.CMSG_SELF_RES);
        std::swap(this->CMSG_SELF_RES, CMSG_SELF_RESswap);
    }
    if (opcode == Opcode::CMSG_TOGGLE_HELM) {
        wrath::CMSG_TOGGLE_HELM CMSG_TOGGLE_HELMswap(other.CMSG_TOGGLE_HELM);
        std::swap(this->CMSG_TOGGLE_HELM, CMSG_TOGGLE_HELMswap);
    }
    if (opcode == Opcode::CMSG_TOGGLE_CLOAK) {
        wrath::CMSG_TOGGLE_CLOAK CMSG_TOGGLE_CLOAKswap(other.CMSG_TOGGLE_CLOAK);
        std::swap(this->CMSG_TOGGLE_CLOAK, CMSG_TOGGLE_CLOAKswap);
    }
    if (opcode == Opcode::CMSG_SET_ACTIONBAR_TOGGLES) {
        wrath::CMSG_SET_ACTIONBAR_TOGGLES CMSG_SET_ACTIONBAR_TOGGLESswap(other.CMSG_SET_ACTIONBAR_TOGGLES);
        std::swap(this->CMSG_SET_ACTIONBAR_TOGGLES, CMSG_SET_ACTIONBAR_TOGGLESswap);
    }
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        wrath::MSG_PETITION_RENAME MSG_PETITION_RENAMEswap(other.MSG_PETITION_RENAME);
        std::swap(this->MSG_PETITION_RENAME, MSG_PETITION_RENAMEswap);
    }
    if (opcode == Opcode::CMSG_ITEM_NAME_QUERY) {
        wrath::CMSG_ITEM_NAME_QUERY CMSG_ITEM_NAME_QUERYswap(other.CMSG_ITEM_NAME_QUERY);
        std::swap(this->CMSG_ITEM_NAME_QUERY, CMSG_ITEM_NAME_QUERYswap);
    }
    if (opcode == Opcode::CMSG_CHAR_RENAME) {
        wrath::CMSG_CHAR_RENAME CMSG_CHAR_RENAMEswap(other.CMSG_CHAR_RENAME);
        std::swap(this->CMSG_CHAR_RENAME, CMSG_CHAR_RENAMEswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SPLINE_DONE) {
        wrath::CMSG_MOVE_SPLINE_DONE CMSG_MOVE_SPLINE_DONEswap(other.CMSG_MOVE_SPLINE_DONE);
        std::swap(this->CMSG_MOVE_SPLINE_DONE, CMSG_MOVE_SPLINE_DONEswap);
    }
    if (opcode == Opcode::CMSG_MOVE_FALL_RESET) {
        wrath::CMSG_MOVE_FALL_RESET CMSG_MOVE_FALL_RESETswap(other.CMSG_MOVE_FALL_RESET);
        std::swap(this->CMSG_MOVE_FALL_RESET, CMSG_MOVE_FALL_RESETswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_RAID_INFO) {
        wrath::CMSG_REQUEST_RAID_INFO CMSG_REQUEST_RAID_INFOswap(other.CMSG_REQUEST_RAID_INFO);
        std::swap(this->CMSG_REQUEST_RAID_INFO, CMSG_REQUEST_RAID_INFOswap);
    }
    if (opcode == Opcode::CMSG_MOVE_TIME_SKIPPED) {
        wrath::CMSG_MOVE_TIME_SKIPPED CMSG_MOVE_TIME_SKIPPEDswap(other.CMSG_MOVE_TIME_SKIPPED);
        std::swap(this->CMSG_MOVE_TIME_SKIPPED, CMSG_MOVE_TIME_SKIPPEDswap);
    }
    if (opcode == Opcode::CMSG_MOVE_FEATHER_FALL_ACK) {
        wrath::CMSG_MOVE_FEATHER_FALL_ACK CMSG_MOVE_FEATHER_FALL_ACKswap(other.CMSG_MOVE_FEATHER_FALL_ACK);
        std::swap(this->CMSG_MOVE_FEATHER_FALL_ACK, CMSG_MOVE_FEATHER_FALL_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_WATER_WALK_ACK) {
        wrath::CMSG_MOVE_WATER_WALK_ACK CMSG_MOVE_WATER_WALK_ACKswap(other.CMSG_MOVE_WATER_WALK_ACK);
        std::swap(this->CMSG_MOVE_WATER_WALK_ACK, CMSG_MOVE_WATER_WALK_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) {
        wrath::CMSG_MOVE_NOT_ACTIVE_MOVER CMSG_MOVE_NOT_ACTIVE_MOVERswap(other.CMSG_MOVE_NOT_ACTIVE_MOVER);
        std::swap(this->CMSG_MOVE_NOT_ACTIVE_MOVER, CMSG_MOVE_NOT_ACTIVE_MOVERswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_STATUS) {
        wrath::CMSG_BATTLEFIELD_STATUS CMSG_BATTLEFIELD_STATUSswap(other.CMSG_BATTLEFIELD_STATUS);
        std::swap(this->CMSG_BATTLEFIELD_STATUS, CMSG_BATTLEFIELD_STATUSswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_PORT) {
        wrath::CMSG_BATTLEFIELD_PORT CMSG_BATTLEFIELD_PORTswap(other.CMSG_BATTLEFIELD_PORT);
        std::swap(this->CMSG_BATTLEFIELD_PORT, CMSG_BATTLEFIELD_PORTswap);
    }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        wrath::MSG_INSPECT_HONOR_STATS_Client MSG_INSPECT_HONOR_STATSswap(other.MSG_INSPECT_HONOR_STATS);
        std::swap(this->MSG_INSPECT_HONOR_STATS, MSG_INSPECT_HONOR_STATSswap);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_HELLO) {
        wrath::CMSG_BATTLEMASTER_HELLO CMSG_BATTLEMASTER_HELLOswap(other.CMSG_BATTLEMASTER_HELLO);
        std::swap(this->CMSG_BATTLEMASTER_HELLO, CMSG_BATTLEMASTER_HELLOswap);
    }
    if (opcode == Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK CMSG_FORCE_WALK_SPEED_CHANGE_ACKswap(other.CMSG_FORCE_WALK_SPEED_CHANGE_ACK);
        std::swap(this->CMSG_FORCE_WALK_SPEED_CHANGE_ACK, CMSG_FORCE_WALK_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACKswap(other.CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK);
        std::swap(this->CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK, CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) {
        wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK CMSG_FORCE_TURN_RATE_CHANGE_ACKswap(other.CMSG_FORCE_TURN_RATE_CHANGE_ACK);
        std::swap(this->CMSG_FORCE_TURN_RATE_CHANGE_ACK, CMSG_FORCE_TURN_RATE_CHANGE_ACKswap);
    }
    if (opcode == Opcode::MSG_PVP_LOG_DATA) {
        wrath::MSG_PVP_LOG_DATA_Client MSG_PVP_LOG_DATAswap(other.MSG_PVP_LOG_DATA);
        std::swap(this->MSG_PVP_LOG_DATA, MSG_PVP_LOG_DATAswap);
    }
    if (opcode == Opcode::CMSG_LEAVE_BATTLEFIELD) {
        wrath::CMSG_LEAVE_BATTLEFIELD CMSG_LEAVE_BATTLEFIELDswap(other.CMSG_LEAVE_BATTLEFIELD);
        std::swap(this->CMSG_LEAVE_BATTLEFIELD, CMSG_LEAVE_BATTLEFIELDswap);
    }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) {
        wrath::CMSG_AREA_SPIRIT_HEALER_QUERY CMSG_AREA_SPIRIT_HEALER_QUERYswap(other.CMSG_AREA_SPIRIT_HEALER_QUERY);
        std::swap(this->CMSG_AREA_SPIRIT_HEALER_QUERY, CMSG_AREA_SPIRIT_HEALER_QUERYswap);
    }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) {
        wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE CMSG_AREA_SPIRIT_HEALER_QUEUEswap(other.CMSG_AREA_SPIRIT_HEALER_QUEUE);
        std::swap(this->CMSG_AREA_SPIRIT_HEALER_QUEUE, CMSG_AREA_SPIRIT_HEALER_QUEUEswap);
    }
    if (opcode == Opcode::CMSG_WARDEN_DATA) {
        wrath::CMSG_WARDEN_DATA CMSG_WARDEN_DATAswap(other.CMSG_WARDEN_DATA);
        std::swap(this->CMSG_WARDEN_DATA, CMSG_WARDEN_DATAswap);
    }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client MSG_BATTLEGROUND_PLAYER_POSITIONSswap(other.MSG_BATTLEGROUND_PLAYER_POSITIONS);
        std::swap(this->MSG_BATTLEGROUND_PLAYER_POSITIONS, MSG_BATTLEGROUND_PLAYER_POSITIONSswap);
    }
    if (opcode == Opcode::CMSG_PET_STOP_ATTACK) {
        wrath::CMSG_PET_STOP_ATTACK CMSG_PET_STOP_ATTACKswap(other.CMSG_PET_STOP_ATTACK);
        std::swap(this->CMSG_PET_STOP_ATTACK, CMSG_PET_STOP_ATTACKswap);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN) {
        wrath::CMSG_BATTLEMASTER_JOIN CMSG_BATTLEMASTER_JOINswap(other.CMSG_BATTLEMASTER_JOIN);
        std::swap(this->CMSG_BATTLEMASTER_JOIN, CMSG_BATTLEMASTER_JOINswap);
    }
    if (opcode == Opcode::CMSG_PET_UNLEARN) {
        wrath::CMSG_PET_UNLEARN CMSG_PET_UNLEARNswap(other.CMSG_PET_UNLEARN);
        std::swap(this->CMSG_PET_UNLEARN, CMSG_PET_UNLEARNswap);
    }
    if (opcode == Opcode::CMSG_PET_SPELL_AUTOCAST) {
        wrath::CMSG_PET_SPELL_AUTOCAST CMSG_PET_SPELL_AUTOCASTswap(other.CMSG_PET_SPELL_AUTOCAST);
        std::swap(this->CMSG_PET_SPELL_AUTOCAST, CMSG_PET_SPELL_AUTOCASTswap);
    }
    if (opcode == Opcode::CMSG_GUILD_INFO_TEXT) {
        wrath::CMSG_GUILD_INFO_TEXT CMSG_GUILD_INFO_TEXTswap(other.CMSG_GUILD_INFO_TEXT);
        std::swap(this->CMSG_GUILD_INFO_TEXT, CMSG_GUILD_INFO_TEXTswap);
    }
    if (opcode == Opcode::CMSG_ACTIVATETAXIEXPRESS) {
        wrath::CMSG_ACTIVATETAXIEXPRESS CMSG_ACTIVATETAXIEXPRESSswap(other.CMSG_ACTIVATETAXIEXPRESS);
        std::swap(this->CMSG_ACTIVATETAXIEXPRESS, CMSG_ACTIVATETAXIEXPRESSswap);
    }
    if (opcode == Opcode::CMSG_SET_FACTION_INACTIVE) {
        wrath::CMSG_SET_FACTION_INACTIVE CMSG_SET_FACTION_INACTIVEswap(other.CMSG_SET_FACTION_INACTIVE);
        std::swap(this->CMSG_SET_FACTION_INACTIVE, CMSG_SET_FACTION_INACTIVEswap);
    }
    if (opcode == Opcode::CMSG_SET_WATCHED_FACTION) {
        wrath::CMSG_SET_WATCHED_FACTION CMSG_SET_WATCHED_FACTIONswap(other.CMSG_SET_WATCHED_FACTION);
        std::swap(this->CMSG_SET_WATCHED_FACTION, CMSG_SET_WATCHED_FACTIONswap);
    }
    if (opcode == Opcode::CMSG_RESET_INSTANCES) {
        wrath::CMSG_RESET_INSTANCES CMSG_RESET_INSTANCESswap(other.CMSG_RESET_INSTANCES);
        std::swap(this->CMSG_RESET_INSTANCES, CMSG_RESET_INSTANCESswap);
    }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        wrath::MSG_RAID_TARGET_UPDATE_Client MSG_RAID_TARGET_UPDATEswap(other.MSG_RAID_TARGET_UPDATE);
        std::swap(this->MSG_RAID_TARGET_UPDATE, MSG_RAID_TARGET_UPDATEswap);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        wrath::MSG_RAID_READY_CHECK_Client MSG_RAID_READY_CHECKswap(other.MSG_RAID_READY_CHECK);
        std::swap(this->MSG_RAID_READY_CHECK, MSG_RAID_READY_CHECKswap);
    }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        wrath::MSG_SET_DUNGEON_DIFFICULTY_Client MSG_SET_DUNGEON_DIFFICULTYswap(other.MSG_SET_DUNGEON_DIFFICULTY);
        std::swap(this->MSG_SET_DUNGEON_DIFFICULTY, MSG_SET_DUNGEON_DIFFICULTYswap);
    }
    if (opcode == Opcode::CMSG_GMSURVEY_SUBMIT) {
        wrath::CMSG_GMSURVEY_SUBMIT CMSG_GMSURVEY_SUBMITswap(other.CMSG_GMSURVEY_SUBMIT);
        std::swap(this->CMSG_GMSURVEY_SUBMIT, CMSG_GMSURVEY_SUBMITswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) {
        wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACKswap(other.CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK);
        std::swap(this->CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK, CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) {
        wrath::CMSG_MOVE_SET_CAN_FLY_ACK CMSG_MOVE_SET_CAN_FLY_ACKswap(other.CMSG_MOVE_SET_CAN_FLY_ACK);
        std::swap(this->CMSG_MOVE_SET_CAN_FLY_ACK, CMSG_MOVE_SET_CAN_FLY_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_FLY) {
        wrath::CMSG_MOVE_SET_FLY CMSG_MOVE_SET_FLYswap(other.CMSG_MOVE_SET_FLY);
        std::swap(this->CMSG_MOVE_SET_FLY, CMSG_MOVE_SET_FLYswap);
    }
    if (opcode == Opcode::CMSG_SOCKET_GEMS) {
        wrath::CMSG_SOCKET_GEMS CMSG_SOCKET_GEMSswap(other.CMSG_SOCKET_GEMS);
        std::swap(this->CMSG_SOCKET_GEMS, CMSG_SOCKET_GEMSswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ROSTER) {
        wrath::CMSG_ARENA_TEAM_ROSTER CMSG_ARENA_TEAM_ROSTERswap(other.CMSG_ARENA_TEAM_ROSTER);
        std::swap(this->CMSG_ARENA_TEAM_ROSTER, CMSG_ARENA_TEAM_ROSTERswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_INVITE) {
        wrath::CMSG_ARENA_TEAM_INVITE CMSG_ARENA_TEAM_INVITEswap(other.CMSG_ARENA_TEAM_INVITE);
        std::swap(this->CMSG_ARENA_TEAM_INVITE, CMSG_ARENA_TEAM_INVITEswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ACCEPT) {
        wrath::CMSG_ARENA_TEAM_ACCEPT CMSG_ARENA_TEAM_ACCEPTswap(other.CMSG_ARENA_TEAM_ACCEPT);
        std::swap(this->CMSG_ARENA_TEAM_ACCEPT, CMSG_ARENA_TEAM_ACCEPTswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DECLINE) {
        wrath::CMSG_ARENA_TEAM_DECLINE CMSG_ARENA_TEAM_DECLINEswap(other.CMSG_ARENA_TEAM_DECLINE);
        std::swap(this->CMSG_ARENA_TEAM_DECLINE, CMSG_ARENA_TEAM_DECLINEswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEAVE) {
        wrath::CMSG_ARENA_TEAM_LEAVE CMSG_ARENA_TEAM_LEAVEswap(other.CMSG_ARENA_TEAM_LEAVE);
        std::swap(this->CMSG_ARENA_TEAM_LEAVE, CMSG_ARENA_TEAM_LEAVEswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_REMOVE) {
        wrath::CMSG_ARENA_TEAM_REMOVE CMSG_ARENA_TEAM_REMOVEswap(other.CMSG_ARENA_TEAM_REMOVE);
        std::swap(this->CMSG_ARENA_TEAM_REMOVE, CMSG_ARENA_TEAM_REMOVEswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DISBAND) {
        wrath::CMSG_ARENA_TEAM_DISBAND CMSG_ARENA_TEAM_DISBANDswap(other.CMSG_ARENA_TEAM_DISBAND);
        std::swap(this->CMSG_ARENA_TEAM_DISBAND, CMSG_ARENA_TEAM_DISBANDswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEADER) {
        wrath::CMSG_ARENA_TEAM_LEADER CMSG_ARENA_TEAM_LEADERswap(other.CMSG_ARENA_TEAM_LEADER);
        std::swap(this->CMSG_ARENA_TEAM_LEADER, CMSG_ARENA_TEAM_LEADERswap);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) {
        wrath::CMSG_BATTLEMASTER_JOIN_ARENA CMSG_BATTLEMASTER_JOIN_ARENAswap(other.CMSG_BATTLEMASTER_JOIN_ARENA);
        std::swap(this->CMSG_BATTLEMASTER_JOIN_ARENA, CMSG_BATTLEMASTER_JOIN_ARENAswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        wrath::MSG_MOVE_START_ASCEND MSG_MOVE_START_ASCENDswap(other.MSG_MOVE_START_ASCEND);
        std::swap(this->MSG_MOVE_START_ASCEND, MSG_MOVE_START_ASCENDswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        wrath::MSG_MOVE_STOP_ASCEND MSG_MOVE_STOP_ASCENDswap(other.MSG_MOVE_STOP_ASCEND);
        std::swap(this->MSG_MOVE_STOP_ASCEND, MSG_MOVE_STOP_ASCENDswap);
    }
    if (opcode == Opcode::CMSG_LFG_JOIN) {
        wrath::CMSG_LFG_JOIN CMSG_LFG_JOINswap(other.CMSG_LFG_JOIN);
        std::swap(this->CMSG_LFG_JOIN, CMSG_LFG_JOINswap);
    }
    if (opcode == Opcode::CMSG_LFG_LEAVE) {
        wrath::CMSG_LFG_LEAVE CMSG_LFG_LEAVEswap(other.CMSG_LFG_LEAVE);
        std::swap(this->CMSG_LFG_LEAVE, CMSG_LFG_LEAVEswap);
    }
    if (opcode == Opcode::CMSG_SEARCH_LFG_JOIN) {
        wrath::CMSG_SEARCH_LFG_JOIN CMSG_SEARCH_LFG_JOINswap(other.CMSG_SEARCH_LFG_JOIN);
        std::swap(this->CMSG_SEARCH_LFG_JOIN, CMSG_SEARCH_LFG_JOINswap);
    }
    if (opcode == Opcode::CMSG_SEARCH_LFG_LEAVE) {
        wrath::CMSG_SEARCH_LFG_LEAVE CMSG_SEARCH_LFG_LEAVEswap(other.CMSG_SEARCH_LFG_LEAVE);
        std::swap(this->CMSG_SEARCH_LFG_LEAVE, CMSG_SEARCH_LFG_LEAVEswap);
    }
    if (opcode == Opcode::CMSG_LFG_PROPOSAL_RESULT) {
        wrath::CMSG_LFG_PROPOSAL_RESULT CMSG_LFG_PROPOSAL_RESULTswap(other.CMSG_LFG_PROPOSAL_RESULT);
        std::swap(this->CMSG_LFG_PROPOSAL_RESULT, CMSG_LFG_PROPOSAL_RESULTswap);
    }
    if (opcode == Opcode::CMSG_SET_LFG_COMMENT) {
        wrath::CMSG_SET_LFG_COMMENT CMSG_SET_LFG_COMMENTswap(other.CMSG_SET_LFG_COMMENT);
        std::swap(this->CMSG_SET_LFG_COMMENT, CMSG_SET_LFG_COMMENTswap);
    }
    if (opcode == Opcode::CMSG_LFG_SET_ROLES) {
        wrath::CMSG_LFG_SET_ROLES CMSG_LFG_SET_ROLESswap(other.CMSG_LFG_SET_ROLES);
        std::swap(this->CMSG_LFG_SET_ROLES, CMSG_LFG_SET_ROLESswap);
    }
    if (opcode == Opcode::CMSG_LFG_SET_BOOT_VOTE) {
        wrath::CMSG_LFG_SET_BOOT_VOTE CMSG_LFG_SET_BOOT_VOTEswap(other.CMSG_LFG_SET_BOOT_VOTE);
        std::swap(this->CMSG_LFG_SET_BOOT_VOTE, CMSG_LFG_SET_BOOT_VOTEswap);
    }
    if (opcode == Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) {
        wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST CMSG_LFD_PLAYER_LOCK_INFO_REQUESTswap(other.CMSG_LFD_PLAYER_LOCK_INFO_REQUEST);
        std::swap(this->CMSG_LFD_PLAYER_LOCK_INFO_REQUEST, CMSG_LFD_PLAYER_LOCK_INFO_REQUESTswap);
    }
    if (opcode == Opcode::CMSG_LFG_TELEPORT) {
        wrath::CMSG_LFG_TELEPORT CMSG_LFG_TELEPORTswap(other.CMSG_LFG_TELEPORT);
        std::swap(this->CMSG_LFG_TELEPORT, CMSG_LFG_TELEPORTswap);
    }
    if (opcode == Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) {
        wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST CMSG_LFD_PARTY_LOCK_INFO_REQUESTswap(other.CMSG_LFD_PARTY_LOCK_INFO_REQUEST);
        std::swap(this->CMSG_LFD_PARTY_LOCK_INFO_REQUEST, CMSG_LFD_PARTY_LOCK_INFO_REQUESTswap);
    }
    if (opcode == Opcode::CMSG_SET_TITLE) {
        wrath::CMSG_SET_TITLE CMSG_SET_TITLEswap(other.CMSG_SET_TITLE);
        std::swap(this->CMSG_SET_TITLE, CMSG_SET_TITLEswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_MOUNT_AURA) {
        wrath::CMSG_CANCEL_MOUNT_AURA CMSG_CANCEL_MOUNT_AURAswap(other.CMSG_CANCEL_MOUNT_AURA);
        std::swap(this->CMSG_CANCEL_MOUNT_AURA, CMSG_CANCEL_MOUNT_AURAswap);
    }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        wrath::MSG_INSPECT_ARENA_TEAMS_Client MSG_INSPECT_ARENA_TEAMSswap(other.MSG_INSPECT_ARENA_TEAMS);
        std::swap(this->MSG_INSPECT_ARENA_TEAMS, MSG_INSPECT_ARENA_TEAMSswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) {
        wrath::CMSG_CANCEL_TEMP_ENCHANTMENT CMSG_CANCEL_TEMP_ENCHANTMENTswap(other.CMSG_CANCEL_TEMP_ENCHANTMENT);
        std::swap(this->CMSG_CANCEL_TEMP_ENCHANTMENT, CMSG_CANCEL_TEMP_ENCHANTMENTswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEEDswap(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED);
        std::swap(this->MSG_MOVE_SET_FLIGHT_BACK_SPEED, MSG_MOVE_SET_FLIGHT_BACK_SPEEDswap);
    }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACKswap(other.CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK);
        std::swap(this->CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK, CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACKswap(other.CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK);
        std::swap(this->CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK, CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) {
        wrath::CMSG_SET_TAXI_BENCHMARK_MODE CMSG_SET_TAXI_BENCHMARK_MODEswap(other.CMSG_SET_TAXI_BENCHMARK_MODE);
        std::swap(this->CMSG_SET_TAXI_BENCHMARK_MODE, CMSG_SET_TAXI_BENCHMARK_MODEswap);
    }
    if (opcode == Opcode::CMSG_REALM_SPLIT) {
        wrath::CMSG_REALM_SPLIT CMSG_REALM_SPLITswap(other.CMSG_REALM_SPLIT);
        std::swap(this->CMSG_REALM_SPLIT, CMSG_REALM_SPLITswap);
    }
    if (opcode == Opcode::CMSG_MOVE_CHNG_TRANSPORT) {
        wrath::CMSG_MOVE_CHNG_TRANSPORT CMSG_MOVE_CHNG_TRANSPORTswap(other.CMSG_MOVE_CHNG_TRANSPORT);
        std::swap(this->CMSG_MOVE_CHNG_TRANSPORT, CMSG_MOVE_CHNG_TRANSPORTswap);
    }
    if (opcode == Opcode::MSG_PARTY_ASSIGNMENT) {
        wrath::MSG_PARTY_ASSIGNMENT_Client MSG_PARTY_ASSIGNMENTswap(other.MSG_PARTY_ASSIGNMENT);
        std::swap(this->MSG_PARTY_ASSIGNMENT, MSG_PARTY_ASSIGNMENTswap);
    }
    if (opcode == Opcode::CMSG_TIME_SYNC_RESP) {
        wrath::CMSG_TIME_SYNC_RESP CMSG_TIME_SYNC_RESPswap(other.CMSG_TIME_SYNC_RESP);
        std::swap(this->CMSG_TIME_SYNC_RESP, CMSG_TIME_SYNC_RESPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        wrath::MSG_MOVE_START_DESCEND MSG_MOVE_START_DESCENDswap(other.MSG_MOVE_START_DESCEND);
        std::swap(this->MSG_MOVE_START_DESCEND, MSG_MOVE_START_DESCENDswap);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        wrath::MSG_RAID_READY_CHECK_CONFIRM_Client MSG_RAID_READY_CHECK_CONFIRMswap(other.MSG_RAID_READY_CHECK_CONFIRM);
        std::swap(this->MSG_RAID_READY_CHECK_CONFIRM, MSG_RAID_READY_CHECK_CONFIRMswap);
    }
    if (opcode == Opcode::CMSG_VOICE_SESSION_ENABLE) {
        wrath::CMSG_VOICE_SESSION_ENABLE CMSG_VOICE_SESSION_ENABLEswap(other.CMSG_VOICE_SESSION_ENABLE);
        std::swap(this->CMSG_VOICE_SESSION_ENABLE, CMSG_VOICE_SESSION_ENABLEswap);
    }
    if (opcode == Opcode::CMSG_COMMENTATOR_ENABLE) {
        wrath::CMSG_COMMENTATOR_ENABLE CMSG_COMMENTATOR_ENABLEswap(other.CMSG_COMMENTATOR_ENABLE);
        std::swap(this->CMSG_COMMENTATOR_ENABLE, CMSG_COMMENTATOR_ENABLEswap);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_FINISHED) {
        wrath::MSG_RAID_READY_CHECK_FINISHED_Client MSG_RAID_READY_CHECK_FINISHEDswap(other.MSG_RAID_READY_CHECK_FINISHED);
        std::swap(this->MSG_RAID_READY_CHECK_FINISHED, MSG_RAID_READY_CHECK_FINISHEDswap);
    }
    if (opcode == Opcode::CMSG_COMPLAIN) {
        wrath::CMSG_COMPLAIN CMSG_COMPLAINswap(other.CMSG_COMPLAIN);
        std::swap(this->CMSG_COMPLAIN, CMSG_COMPLAINswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_DISPLAY_LIST) {
        wrath::CMSG_CHANNEL_DISPLAY_LIST CMSG_CHANNEL_DISPLAY_LISTswap(other.CMSG_CHANNEL_DISPLAY_LIST);
        std::swap(this->CMSG_CHANNEL_DISPLAY_LIST, CMSG_CHANNEL_DISPLAY_LISTswap);
    }
    if (opcode == Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) {
        wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL CMSG_SET_ACTIVE_VOICE_CHANNELswap(other.CMSG_SET_ACTIVE_VOICE_CHANNEL);
        std::swap(this->CMSG_SET_ACTIVE_VOICE_CHANNEL, CMSG_SET_ACTIVE_VOICE_CHANNELswap);
    }
    if (opcode == Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) {
        wrath::CMSG_GET_CHANNEL_MEMBER_COUNT CMSG_GET_CHANNEL_MEMBER_COUNTswap(other.CMSG_GET_CHANNEL_MEMBER_COUNT);
        std::swap(this->CMSG_GET_CHANNEL_MEMBER_COUNT, CMSG_GET_CHANNEL_MEMBER_COUNTswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_VOICE_ON) {
        wrath::CMSG_CHANNEL_VOICE_ON CMSG_CHANNEL_VOICE_ONswap(other.CMSG_CHANNEL_VOICE_ON);
        std::swap(this->CMSG_CHANNEL_VOICE_ON, CMSG_CHANNEL_VOICE_ONswap);
    }
    if (opcode == Opcode::CMSG_REPORT_PVP_AFK) {
        wrath::CMSG_REPORT_PVP_AFK CMSG_REPORT_PVP_AFKswap(other.CMSG_REPORT_PVP_AFK);
        std::swap(this->CMSG_REPORT_PVP_AFK, CMSG_REPORT_PVP_AFKswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANKER_ACTIVATE) {
        wrath::CMSG_GUILD_BANKER_ACTIVATE CMSG_GUILD_BANKER_ACTIVATEswap(other.CMSG_GUILD_BANKER_ACTIVATE);
        std::swap(this->CMSG_GUILD_BANKER_ACTIVATE, CMSG_GUILD_BANKER_ACTIVATEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_QUERY_TAB) {
        wrath::CMSG_GUILD_BANK_QUERY_TAB CMSG_GUILD_BANK_QUERY_TABswap(other.CMSG_GUILD_BANK_QUERY_TAB);
        std::swap(this->CMSG_GUILD_BANK_QUERY_TAB, CMSG_GUILD_BANK_QUERY_TABswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) {
        wrath::CMSG_GUILD_BANK_SWAP_ITEMS CMSG_GUILD_BANK_SWAP_ITEMSswap(other.CMSG_GUILD_BANK_SWAP_ITEMS);
        std::swap(this->CMSG_GUILD_BANK_SWAP_ITEMS, CMSG_GUILD_BANK_SWAP_ITEMSswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_BUY_TAB) {
        wrath::CMSG_GUILD_BANK_BUY_TAB CMSG_GUILD_BANK_BUY_TABswap(other.CMSG_GUILD_BANK_BUY_TAB);
        std::swap(this->CMSG_GUILD_BANK_BUY_TAB, CMSG_GUILD_BANK_BUY_TABswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_UPDATE_TAB) {
        wrath::CMSG_GUILD_BANK_UPDATE_TAB CMSG_GUILD_BANK_UPDATE_TABswap(other.CMSG_GUILD_BANK_UPDATE_TAB);
        std::swap(this->CMSG_GUILD_BANK_UPDATE_TAB, CMSG_GUILD_BANK_UPDATE_TABswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) {
        wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY CMSG_GUILD_BANK_DEPOSIT_MONEYswap(other.CMSG_GUILD_BANK_DEPOSIT_MONEY);
        std::swap(this->CMSG_GUILD_BANK_DEPOSIT_MONEY, CMSG_GUILD_BANK_DEPOSIT_MONEYswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) {
        wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY CMSG_GUILD_BANK_WITHDRAW_MONEYswap(other.CMSG_GUILD_BANK_WITHDRAW_MONEY);
        std::swap(this->CMSG_GUILD_BANK_WITHDRAW_MONEY, CMSG_GUILD_BANK_WITHDRAW_MONEYswap);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        wrath::MSG_GUILD_BANK_LOG_QUERY_Client MSG_GUILD_BANK_LOG_QUERYswap(other.MSG_GUILD_BANK_LOG_QUERY);
        std::swap(this->MSG_GUILD_BANK_LOG_QUERY, MSG_GUILD_BANK_LOG_QUERYswap);
    }
    if (opcode == Opcode::CMSG_SET_CHANNEL_WATCH) {
        wrath::CMSG_SET_CHANNEL_WATCH CMSG_SET_CHANNEL_WATCHswap(other.CMSG_SET_CHANNEL_WATCH);
        std::swap(this->CMSG_SET_CHANNEL_WATCH, CMSG_SET_CHANNEL_WATCHswap);
    }
    if (opcode == Opcode::CMSG_CLEAR_CHANNEL_WATCH) {
        wrath::CMSG_CLEAR_CHANNEL_WATCH CMSG_CLEAR_CHANNEL_WATCHswap(other.CMSG_CLEAR_CHANNEL_WATCH);
        std::swap(this->CMSG_CLEAR_CHANNEL_WATCH, CMSG_CLEAR_CHANNEL_WATCHswap);
    }
    if (opcode == Opcode::CMSG_SPELLCLICK) {
        wrath::CMSG_SPELLCLICK CMSG_SPELLCLICKswap(other.CMSG_SPELLCLICK);
        std::swap(this->CMSG_SPELLCLICK, CMSG_SPELLCLICKswap);
    }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        wrath::MSG_GUILD_PERMISSIONS_Client MSG_GUILD_PERMISSIONSswap(other.MSG_GUILD_PERMISSIONS);
        std::swap(this->MSG_GUILD_PERMISSIONS, MSG_GUILD_PERMISSIONSswap);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client MSG_GUILD_BANK_MONEY_WITHDRAWNswap(other.MSG_GUILD_BANK_MONEY_WITHDRAWN);
        std::swap(this->MSG_GUILD_BANK_MONEY_WITHDRAWN, MSG_GUILD_BANK_MONEY_WITHDRAWNswap);
    }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        wrath::MSG_GUILD_EVENT_LOG_QUERY_Client MSG_GUILD_EVENT_LOG_QUERYswap(other.MSG_GUILD_EVENT_LOG_QUERY);
        std::swap(this->MSG_GUILD_EVENT_LOG_QUERY, MSG_GUILD_EVENT_LOG_QUERYswap);
    }
    if (opcode == Opcode::CMSG_GET_MIRRORIMAGE_DATA) {
        wrath::CMSG_GET_MIRRORIMAGE_DATA CMSG_GET_MIRRORIMAGE_DATAswap(other.CMSG_GET_MIRRORIMAGE_DATA);
        std::swap(this->CMSG_GET_MIRRORIMAGE_DATA, CMSG_GET_MIRRORIMAGE_DATAswap);
    }
    if (opcode == Opcode::CMSG_KEEP_ALIVE) {
        wrath::CMSG_KEEP_ALIVE CMSG_KEEP_ALIVEswap(other.CMSG_KEEP_ALIVE);
        std::swap(this->CMSG_KEEP_ALIVE, CMSG_KEEP_ALIVEswap);
    }
    if (opcode == Opcode::CMSG_OPT_OUT_OF_LOOT) {
        wrath::CMSG_OPT_OUT_OF_LOOT CMSG_OPT_OUT_OF_LOOTswap(other.CMSG_OPT_OUT_OF_LOOT);
        std::swap(this->CMSG_OPT_OUT_OF_LOOT, CMSG_OPT_OUT_OF_LOOTswap);
    }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        wrath::MSG_QUERY_GUILD_BANK_TEXT_Client MSG_QUERY_GUILD_BANK_TEXTswap(other.MSG_QUERY_GUILD_BANK_TEXT);
        std::swap(this->MSG_QUERY_GUILD_BANK_TEXT, MSG_QUERY_GUILD_BANK_TEXTswap);
    }
    if (opcode == Opcode::CMSG_SET_GUILD_BANK_TEXT) {
        wrath::CMSG_SET_GUILD_BANK_TEXT CMSG_SET_GUILD_BANK_TEXTswap(other.CMSG_SET_GUILD_BANK_TEXT);
        std::swap(this->CMSG_SET_GUILD_BANK_TEXT, CMSG_SET_GUILD_BANK_TEXTswap);
    }
    if (opcode == Opcode::CMSG_GRANT_LEVEL) {
        wrath::CMSG_GRANT_LEVEL CMSG_GRANT_LEVELswap(other.CMSG_GRANT_LEVEL);
        std::swap(this->CMSG_GRANT_LEVEL, CMSG_GRANT_LEVELswap);
    }
    if (opcode == Opcode::CMSG_TOTEM_DESTROYED) {
        wrath::CMSG_TOTEM_DESTROYED CMSG_TOTEM_DESTROYEDswap(other.CMSG_TOTEM_DESTROYED);
        std::swap(this->CMSG_TOTEM_DESTROYED, CMSG_TOTEM_DESTROYEDswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) {
        wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERYswap(other.CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY);
        std::swap(this->CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY, CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERYswap);
    }
    if (opcode == Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) {
        wrath::CMSG_SET_PLAYER_DECLINED_NAMES CMSG_SET_PLAYER_DECLINED_NAMESswap(other.CMSG_SET_PLAYER_DECLINED_NAMES);
        std::swap(this->CMSG_SET_PLAYER_DECLINED_NAMES, CMSG_SET_PLAYER_DECLINED_NAMESswap);
    }
    if (opcode == Opcode::CMSG_ACCEPT_LEVEL_GRANT) {
        wrath::CMSG_ACCEPT_LEVEL_GRANT CMSG_ACCEPT_LEVEL_GRANTswap(other.CMSG_ACCEPT_LEVEL_GRANT);
        std::swap(this->CMSG_ACCEPT_LEVEL_GRANT, CMSG_ACCEPT_LEVEL_GRANTswap);
    }
    if (opcode == Opcode::CMSG_ALTER_APPEARANCE) {
        wrath::CMSG_ALTER_APPEARANCE CMSG_ALTER_APPEARANCEswap(other.CMSG_ALTER_APPEARANCE);
        std::swap(this->CMSG_ALTER_APPEARANCE, CMSG_ALTER_APPEARANCEswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_CALENDAR) {
        wrath::CMSG_CALENDAR_GET_CALENDAR CMSG_CALENDAR_GET_CALENDARswap(other.CMSG_CALENDAR_GET_CALENDAR);
        std::swap(this->CMSG_CALENDAR_GET_CALENDAR, CMSG_CALENDAR_GET_CALENDARswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_EVENT) {
        wrath::CMSG_CALENDAR_GET_EVENT CMSG_CALENDAR_GET_EVENTswap(other.CMSG_CALENDAR_GET_EVENT);
        std::swap(this->CMSG_CALENDAR_GET_EVENT, CMSG_CALENDAR_GET_EVENTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GUILD_FILTER) {
        wrath::CMSG_CALENDAR_GUILD_FILTER CMSG_CALENDAR_GUILD_FILTERswap(other.CMSG_CALENDAR_GUILD_FILTER);
        std::swap(this->CMSG_CALENDAR_GUILD_FILTER, CMSG_CALENDAR_GUILD_FILTERswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_ARENA_TEAM) {
        wrath::CMSG_CALENDAR_ARENA_TEAM CMSG_CALENDAR_ARENA_TEAMswap(other.CMSG_CALENDAR_ARENA_TEAM);
        std::swap(this->CMSG_CALENDAR_ARENA_TEAM, CMSG_CALENDAR_ARENA_TEAMswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_ADD_EVENT) {
        wrath::CMSG_CALENDAR_ADD_EVENT CMSG_CALENDAR_ADD_EVENTswap(other.CMSG_CALENDAR_ADD_EVENT);
        std::swap(this->CMSG_CALENDAR_ADD_EVENT, CMSG_CALENDAR_ADD_EVENTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_UPDATE_EVENT) {
        wrath::CMSG_CALENDAR_UPDATE_EVENT CMSG_CALENDAR_UPDATE_EVENTswap(other.CMSG_CALENDAR_UPDATE_EVENT);
        std::swap(this->CMSG_CALENDAR_UPDATE_EVENT, CMSG_CALENDAR_UPDATE_EVENTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_REMOVE_EVENT) {
        wrath::CMSG_CALENDAR_REMOVE_EVENT CMSG_CALENDAR_REMOVE_EVENTswap(other.CMSG_CALENDAR_REMOVE_EVENT);
        std::swap(this->CMSG_CALENDAR_REMOVE_EVENT, CMSG_CALENDAR_REMOVE_EVENTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_COPY_EVENT) {
        wrath::CMSG_CALENDAR_COPY_EVENT CMSG_CALENDAR_COPY_EVENTswap(other.CMSG_CALENDAR_COPY_EVENT);
        std::swap(this->CMSG_CALENDAR_COPY_EVENT, CMSG_CALENDAR_COPY_EVENTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_INVITE) {
        wrath::CMSG_CALENDAR_EVENT_INVITE CMSG_CALENDAR_EVENT_INVITEswap(other.CMSG_CALENDAR_EVENT_INVITE);
        std::swap(this->CMSG_CALENDAR_EVENT_INVITE, CMSG_CALENDAR_EVENT_INVITEswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_RSVP) {
        wrath::CMSG_CALENDAR_EVENT_RSVP CMSG_CALENDAR_EVENT_RSVPswap(other.CMSG_CALENDAR_EVENT_RSVP);
        std::swap(this->CMSG_CALENDAR_EVENT_RSVP, CMSG_CALENDAR_EVENT_RSVPswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) {
        wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE CMSG_CALENDAR_EVENT_REMOVE_INVITEswap(other.CMSG_CALENDAR_EVENT_REMOVE_INVITE);
        std::swap(this->CMSG_CALENDAR_EVENT_REMOVE_INVITE, CMSG_CALENDAR_EVENT_REMOVE_INVITEswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_STATUS) {
        wrath::CMSG_CALENDAR_EVENT_STATUS CMSG_CALENDAR_EVENT_STATUSswap(other.CMSG_CALENDAR_EVENT_STATUS);
        std::swap(this->CMSG_CALENDAR_EVENT_STATUS, CMSG_CALENDAR_EVENT_STATUSswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) {
        wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS CMSG_CALENDAR_EVENT_MODERATOR_STATUSswap(other.CMSG_CALENDAR_EVENT_MODERATOR_STATUS);
        std::swap(this->CMSG_CALENDAR_EVENT_MODERATOR_STATUS, CMSG_CALENDAR_EVENT_MODERATOR_STATUSswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_COMPLAIN) {
        wrath::CMSG_CALENDAR_COMPLAIN CMSG_CALENDAR_COMPLAINswap(other.CMSG_CALENDAR_COMPLAIN);
        std::swap(this->CMSG_CALENDAR_COMPLAIN, CMSG_CALENDAR_COMPLAINswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        wrath::CMSG_CALENDAR_GET_NUM_PENDING CMSG_CALENDAR_GET_NUM_PENDINGswap(other.CMSG_CALENDAR_GET_NUM_PENDING);
        std::swap(this->CMSG_CALENDAR_GET_NUM_PENDING, CMSG_CALENDAR_GET_NUM_PENDINGswap);
    }
    if (opcode == Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) {
        wrath::CMSG_UPDATE_MISSILE_TRAJECTORY CMSG_UPDATE_MISSILE_TRAJECTORYswap(other.CMSG_UPDATE_MISSILE_TRAJECTORY);
        std::swap(this->CMSG_UPDATE_MISSILE_TRAJECTORY, CMSG_UPDATE_MISSILE_TRAJECTORYswap);
    }
    if (opcode == Opcode::CMSG_COMPLETE_MOVIE) {
        wrath::CMSG_COMPLETE_MOVIE CMSG_COMPLETE_MOVIEswap(other.CMSG_COMPLETE_MOVIE);
        std::swap(this->CMSG_COMPLETE_MOVIE, CMSG_COMPLETE_MOVIEswap);
    }
    if (opcode == Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) {
        wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS CMSG_QUERY_INSPECT_ACHIEVEMENTSswap(other.CMSG_QUERY_INSPECT_ACHIEVEMENTS);
        std::swap(this->CMSG_QUERY_INSPECT_ACHIEVEMENTS, CMSG_QUERY_INSPECT_ACHIEVEMENTSswap);
    }
    if (opcode == Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) {
        wrath::CMSG_DISMISS_CONTROLLED_VEHICLE CMSG_DISMISS_CONTROLLED_VEHICLEswap(other.CMSG_DISMISS_CONTROLLED_VEHICLE);
        std::swap(this->CMSG_DISMISS_CONTROLLED_VEHICLE, CMSG_DISMISS_CONTROLLED_VEHICLEswap);
    }
    if (opcode == Opcode::CMSG_CHAR_CUSTOMIZE) {
        wrath::CMSG_CHAR_CUSTOMIZE CMSG_CHAR_CUSTOMIZEswap(other.CMSG_CHAR_CUSTOMIZE);
        std::swap(this->CMSG_CHAR_CUSTOMIZE, CMSG_CHAR_CUSTOMIZEswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_EXIT) {
        wrath::CMSG_REQUEST_VEHICLE_EXIT CMSG_REQUEST_VEHICLE_EXITswap(other.CMSG_REQUEST_VEHICLE_EXIT);
        std::swap(this->CMSG_REQUEST_VEHICLE_EXIT, CMSG_REQUEST_VEHICLE_EXITswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) {
        wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT CMSG_REQUEST_VEHICLE_PREV_SEATswap(other.CMSG_REQUEST_VEHICLE_PREV_SEAT);
        std::swap(this->CMSG_REQUEST_VEHICLE_PREV_SEAT, CMSG_REQUEST_VEHICLE_PREV_SEATswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) {
        wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT CMSG_REQUEST_VEHICLE_NEXT_SEATswap(other.CMSG_REQUEST_VEHICLE_NEXT_SEAT);
        std::swap(this->CMSG_REQUEST_VEHICLE_NEXT_SEAT, CMSG_REQUEST_VEHICLE_NEXT_SEATswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) {
        wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT CMSG_REQUEST_VEHICLE_SWITCH_SEATswap(other.CMSG_REQUEST_VEHICLE_SWITCH_SEAT);
        std::swap(this->CMSG_REQUEST_VEHICLE_SWITCH_SEAT, CMSG_REQUEST_VEHICLE_SWITCH_SEATswap);
    }
    if (opcode == Opcode::CMSG_PET_LEARN_TALENT) {
        wrath::CMSG_PET_LEARN_TALENT CMSG_PET_LEARN_TALENTswap(other.CMSG_PET_LEARN_TALENT);
        std::swap(this->CMSG_PET_LEARN_TALENT, CMSG_PET_LEARN_TALENTswap);
    }
    if (opcode == Opcode::CMSG_GAMEOBJ_REPORT_USE) {
        wrath::CMSG_GAMEOBJ_REPORT_USE CMSG_GAMEOBJ_REPORT_USEswap(other.CMSG_GAMEOBJ_REPORT_USE);
        std::swap(this->CMSG_GAMEOBJ_REPORT_USE, CMSG_GAMEOBJ_REPORT_USEswap);
    }
    if (opcode == Opcode::CMSG_REMOVE_GLYPH) {
        wrath::CMSG_REMOVE_GLYPH CMSG_REMOVE_GLYPHswap(other.CMSG_REMOVE_GLYPH);
        std::swap(this->CMSG_REMOVE_GLYPH, CMSG_REMOVE_GLYPHswap);
    }
    if (opcode == Opcode::CMSG_DISMISS_CRITTER) {
        wrath::CMSG_DISMISS_CRITTER CMSG_DISMISS_CRITTERswap(other.CMSG_DISMISS_CRITTER);
        std::swap(this->CMSG_DISMISS_CRITTER, CMSG_DISMISS_CRITTERswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_PENDING_SALES) {
        wrath::CMSG_AUCTION_LIST_PENDING_SALES CMSG_AUCTION_LIST_PENDING_SALESswap(other.CMSG_AUCTION_LIST_PENDING_SALES);
        std::swap(this->CMSG_AUCTION_LIST_PENDING_SALES, CMSG_AUCTION_LIST_PENDING_SALESswap);
    }
    if (opcode == Opcode::CMSG_ENABLETAXI) {
        wrath::CMSG_ENABLETAXI CMSG_ENABLETAXIswap(other.CMSG_ENABLETAXI);
        std::swap(this->CMSG_ENABLETAXI, CMSG_ENABLETAXIswap);
    }
    if (opcode == Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) {
        wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLEswap(other.CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE);
        std::swap(this->CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE, CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLEswap);
    }
    if (opcode == Opcode::CMSG_HEARTH_AND_RESURRECT) {
        wrath::CMSG_HEARTH_AND_RESURRECT CMSG_HEARTH_AND_RESURRECTswap(other.CMSG_HEARTH_AND_RESURRECT);
        std::swap(this->CMSG_HEARTH_AND_RESURRECT, CMSG_HEARTH_AND_RESURRECTswap);
    }
    if (opcode == Opcode::CMSG_PLAYER_VEHICLE_ENTER) {
        wrath::CMSG_PLAYER_VEHICLE_ENTER CMSG_PLAYER_VEHICLE_ENTERswap(other.CMSG_PLAYER_VEHICLE_ENTER);
        std::swap(this->CMSG_PLAYER_VEHICLE_ENTER, CMSG_PLAYER_VEHICLE_ENTERswap);
    }
    if (opcode == Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) {
        wrath::CMSG_CONTROLLER_EJECT_PASSENGER CMSG_CONTROLLER_EJECT_PASSENGERswap(other.CMSG_CONTROLLER_EJECT_PASSENGER);
        std::swap(this->CMSG_CONTROLLER_EJECT_PASSENGER, CMSG_CONTROLLER_EJECT_PASSENGERswap);
    }
    if (opcode == Opcode::CMSG_ITEM_REFUND_INFO) {
        wrath::CMSG_ITEM_REFUND_INFO CMSG_ITEM_REFUND_INFOswap(other.CMSG_ITEM_REFUND_INFO);
        std::swap(this->CMSG_ITEM_REFUND_INFO, CMSG_ITEM_REFUND_INFOswap);
    }
    if (opcode == Opcode::CMSG_ITEM_REFUND) {
        wrath::CMSG_ITEM_REFUND CMSG_ITEM_REFUNDswap(other.CMSG_ITEM_REFUND);
        std::swap(this->CMSG_ITEM_REFUND, CMSG_ITEM_REFUNDswap);
    }
    if (opcode == Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) {
        wrath::CMSG_CORPSE_MAP_POSITION_QUERY CMSG_CORPSE_MAP_POSITION_QUERYswap(other.CMSG_CORPSE_MAP_POSITION_QUERY);
        std::swap(this->CMSG_CORPSE_MAP_POSITION_QUERY, CMSG_CORPSE_MAP_POSITION_QUERYswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_SIGNUP) {
        wrath::CMSG_CALENDAR_EVENT_SIGNUP CMSG_CALENDAR_EVENT_SIGNUPswap(other.CMSG_CALENDAR_EVENT_SIGNUP);
        std::swap(this->CMSG_CALENDAR_EVENT_SIGNUP, CMSG_CALENDAR_EVENT_SIGNUPswap);
    }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_SAVE) {
        wrath::CMSG_EQUIPMENT_SET_SAVE CMSG_EQUIPMENT_SET_SAVEswap(other.CMSG_EQUIPMENT_SET_SAVE);
        std::swap(this->CMSG_EQUIPMENT_SET_SAVE, CMSG_EQUIPMENT_SET_SAVEswap);
    }
    if (opcode == Opcode::CMSG_UPDATE_PROJECTILE_POSITION) {
        wrath::CMSG_UPDATE_PROJECTILE_POSITION CMSG_UPDATE_PROJECTILE_POSITIONswap(other.CMSG_UPDATE_PROJECTILE_POSITION);
        std::swap(this->CMSG_UPDATE_PROJECTILE_POSITION, CMSG_UPDATE_PROJECTILE_POSITIONswap);
    }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS) {
        wrath::CMSG_LEARN_PREVIEW_TALENTS CMSG_LEARN_PREVIEW_TALENTSswap(other.CMSG_LEARN_PREVIEW_TALENTS);
        std::swap(this->CMSG_LEARN_PREVIEW_TALENTS, CMSG_LEARN_PREVIEW_TALENTSswap);
    }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) {
        wrath::CMSG_LEARN_PREVIEW_TALENTS_PET CMSG_LEARN_PREVIEW_TALENTS_PETswap(other.CMSG_LEARN_PREVIEW_TALENTS_PET);
        std::swap(this->CMSG_LEARN_PREVIEW_TALENTS_PET, CMSG_LEARN_PREVIEW_TALENTS_PETswap);
    }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) {
        wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK CMSG_MOVE_GRAVITY_DISABLE_ACKswap(other.CMSG_MOVE_GRAVITY_DISABLE_ACK);
        std::swap(this->CMSG_MOVE_GRAVITY_DISABLE_ACK, CMSG_MOVE_GRAVITY_DISABLE_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) {
        wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK CMSG_MOVE_GRAVITY_ENABLE_ACKswap(other.CMSG_MOVE_GRAVITY_ENABLE_ACK);
        std::swap(this->CMSG_MOVE_GRAVITY_ENABLE_ACK, CMSG_MOVE_GRAVITY_ENABLE_ACKswap);
    }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_USE) {
        wrath::CMSG_EQUIPMENT_SET_USE CMSG_EQUIPMENT_SET_USEswap(other.CMSG_EQUIPMENT_SET_USE);
        std::swap(this->CMSG_EQUIPMENT_SET_USE, CMSG_EQUIPMENT_SET_USEswap);
    }
    if (opcode == Opcode::CMSG_CHAR_FACTION_CHANGE) {
        wrath::CMSG_CHAR_FACTION_CHANGE CMSG_CHAR_FACTION_CHANGEswap(other.CMSG_CHAR_FACTION_CHANGE);
        std::swap(this->CMSG_CHAR_FACTION_CHANGE, CMSG_CHAR_FACTION_CHANGEswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) {
        wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSEswap(other.CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE);
        std::swap(this->CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE, CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSEswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) {
        wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSEswap(other.CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE);
        std::swap(this->CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE, CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSEswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) {
        wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST CMSG_BATTLEFIELD_MGR_EXIT_REQUESTswap(other.CMSG_BATTLEFIELD_MGR_EXIT_REQUEST);
        std::swap(this->CMSG_BATTLEFIELD_MGR_EXIT_REQUEST, CMSG_BATTLEFIELD_MGR_EXIT_REQUESTswap);
    }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        wrath::MSG_SET_RAID_DIFFICULTY_Client MSG_SET_RAID_DIFFICULTYswap(other.MSG_SET_RAID_DIFFICULTY);
        std::swap(this->MSG_SET_RAID_DIFFICULTY, MSG_SET_RAID_DIFFICULTYswap);
    }
    if (opcode == Opcode::CMSG_GMRESPONSE_RESOLVE) {
        wrath::CMSG_GMRESPONSE_RESOLVE CMSG_GMRESPONSE_RESOLVEswap(other.CMSG_GMRESPONSE_RESOLVE);
        std::swap(this->CMSG_GMRESPONSE_RESOLVE, CMSG_GMRESPONSE_RESOLVEswap);
    }
    if (opcode == Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE CMSG_WORLD_STATE_UI_TIMER_UPDATEswap(other.CMSG_WORLD_STATE_UI_TIMER_UPDATE);
        std::swap(this->CMSG_WORLD_STATE_UI_TIMER_UPDATE, CMSG_WORLD_STATE_UI_TIMER_UPDATEswap);
    }
    if (opcode == Opcode::CMSG_CHAR_RACE_CHANGE) {
        wrath::CMSG_CHAR_RACE_CHANGE CMSG_CHAR_RACE_CHANGEswap(other.CMSG_CHAR_RACE_CHANGE);
        std::swap(this->CMSG_CHAR_RACE_CHANGE, CMSG_CHAR_RACE_CHANGEswap);
    }
    if (opcode == Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) {
        wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES CMSG_READY_FOR_ACCOUNT_DATA_TIMESswap(other.CMSG_READY_FOR_ACCOUNT_DATA_TIMES);
        std::swap(this->CMSG_READY_FOR_ACCOUNT_DATA_TIMES, CMSG_READY_FOR_ACCOUNT_DATA_TIMESswap);
    }
    if (opcode == Opcode::CMSG_QUERY_QUESTS_COMPLETED) {
        wrath::CMSG_QUERY_QUESTS_COMPLETED CMSG_QUERY_QUESTS_COMPLETEDswap(other.CMSG_QUERY_QUESTS_COMPLETED);
        std::swap(this->CMSG_QUERY_QUESTS_COMPLETED, CMSG_QUERY_QUESTS_COMPLETEDswap);
    }
    if (opcode == Opcode::CMSG_GM_REPORT_LAG) {
        wrath::CMSG_GM_REPORT_LAG CMSG_GM_REPORT_LAGswap(other.CMSG_GM_REPORT_LAG);
        std::swap(this->CMSG_GM_REPORT_LAG, CMSG_GM_REPORT_LAGswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) {
        wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK CMSG_MOVE_SET_COLLISION_HGT_ACKswap(other.CMSG_MOVE_SET_COLLISION_HGT_ACK);
        std::swap(this->CMSG_MOVE_SET_COLLISION_HGT_ACK, CMSG_MOVE_SET_COLLISION_HGT_ACKswap);
    }
    return *this;
}

/* 4 move constructor */
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(ClientOpcode&& other) noexcept {
    this->opcode = other.opcode;
    other.opcode = Opcode::NONE;
    if (opcode == Opcode::CMSG_BOOTME) {
        this->CMSG_BOOTME = std::move(other.CMSG_BOOTME);
    }
    if (opcode == Opcode::CMSG_DBLOOKUP) {
        this->CMSG_DBLOOKUP = std::move(other.CMSG_DBLOOKUP);
    }
    if (opcode == Opcode::CMSG_WORLD_TELEPORT) {
        this->CMSG_WORLD_TELEPORT = std::move(other.CMSG_WORLD_TELEPORT);
    }
    if (opcode == Opcode::CMSG_TELEPORT_TO_UNIT) {
        this->CMSG_TELEPORT_TO_UNIT = std::move(other.CMSG_TELEPORT_TO_UNIT);
    }
    if (opcode == Opcode::CMSG_CHAR_CREATE) {
        this->CMSG_CHAR_CREATE = std::move(other.CMSG_CHAR_CREATE);
    }
    if (opcode == Opcode::CMSG_CHAR_ENUM) {
        this->CMSG_CHAR_ENUM = std::move(other.CMSG_CHAR_ENUM);
    }
    if (opcode == Opcode::CMSG_CHAR_DELETE) {
        this->CMSG_CHAR_DELETE = std::move(other.CMSG_CHAR_DELETE);
    }
    if (opcode == Opcode::CMSG_PLAYER_LOGIN) {
        this->CMSG_PLAYER_LOGIN = std::move(other.CMSG_PLAYER_LOGIN);
    }
    if (opcode == Opcode::CMSG_PLAYER_LOGOUT) {
        this->CMSG_PLAYER_LOGOUT = std::move(other.CMSG_PLAYER_LOGOUT);
    }
    if (opcode == Opcode::CMSG_LOGOUT_REQUEST) {
        this->CMSG_LOGOUT_REQUEST = std::move(other.CMSG_LOGOUT_REQUEST);
    }
    if (opcode == Opcode::CMSG_LOGOUT_CANCEL) {
        this->CMSG_LOGOUT_CANCEL = std::move(other.CMSG_LOGOUT_CANCEL);
    }
    if (opcode == Opcode::CMSG_NAME_QUERY) {
        this->CMSG_NAME_QUERY = std::move(other.CMSG_NAME_QUERY);
    }
    if (opcode == Opcode::CMSG_PET_NAME_QUERY) {
        this->CMSG_PET_NAME_QUERY = std::move(other.CMSG_PET_NAME_QUERY);
    }
    if (opcode == Opcode::CMSG_GUILD_QUERY) {
        this->CMSG_GUILD_QUERY = std::move(other.CMSG_GUILD_QUERY);
    }
    if (opcode == Opcode::CMSG_ITEM_QUERY_SINGLE) {
        this->CMSG_ITEM_QUERY_SINGLE = std::move(other.CMSG_ITEM_QUERY_SINGLE);
    }
    if (opcode == Opcode::CMSG_PAGE_TEXT_QUERY) {
        this->CMSG_PAGE_TEXT_QUERY = std::move(other.CMSG_PAGE_TEXT_QUERY);
    }
    if (opcode == Opcode::CMSG_QUEST_QUERY) {
        this->CMSG_QUEST_QUERY = std::move(other.CMSG_QUEST_QUERY);
    }
    if (opcode == Opcode::CMSG_GAMEOBJECT_QUERY) {
        this->CMSG_GAMEOBJECT_QUERY = std::move(other.CMSG_GAMEOBJECT_QUERY);
    }
    if (opcode == Opcode::CMSG_CREATURE_QUERY) {
        this->CMSG_CREATURE_QUERY = std::move(other.CMSG_CREATURE_QUERY);
    }
    if (opcode == Opcode::CMSG_WHO) {
        this->CMSG_WHO = std::move(other.CMSG_WHO);
    }
    if (opcode == Opcode::CMSG_WHOIS) {
        this->CMSG_WHOIS = std::move(other.CMSG_WHOIS);
    }
    if (opcode == Opcode::CMSG_CONTACT_LIST) {
        this->CMSG_CONTACT_LIST = std::move(other.CMSG_CONTACT_LIST);
    }
    if (opcode == Opcode::CMSG_ADD_FRIEND) {
        this->CMSG_ADD_FRIEND = std::move(other.CMSG_ADD_FRIEND);
    }
    if (opcode == Opcode::CMSG_DEL_FRIEND) {
        this->CMSG_DEL_FRIEND = std::move(other.CMSG_DEL_FRIEND);
    }
    if (opcode == Opcode::CMSG_SET_CONTACT_NOTES) {
        this->CMSG_SET_CONTACT_NOTES = std::move(other.CMSG_SET_CONTACT_NOTES);
    }
    if (opcode == Opcode::CMSG_ADD_IGNORE) {
        this->CMSG_ADD_IGNORE = std::move(other.CMSG_ADD_IGNORE);
    }
    if (opcode == Opcode::CMSG_DEL_IGNORE) {
        this->CMSG_DEL_IGNORE = std::move(other.CMSG_DEL_IGNORE);
    }
    if (opcode == Opcode::CMSG_GROUP_INVITE) {
        this->CMSG_GROUP_INVITE = std::move(other.CMSG_GROUP_INVITE);
    }
    if (opcode == Opcode::CMSG_GROUP_CANCEL) {
        this->CMSG_GROUP_CANCEL = std::move(other.CMSG_GROUP_CANCEL);
    }
    if (opcode == Opcode::CMSG_GROUP_ACCEPT) {
        this->CMSG_GROUP_ACCEPT = std::move(other.CMSG_GROUP_ACCEPT);
    }
    if (opcode == Opcode::CMSG_GROUP_DECLINE) {
        this->CMSG_GROUP_DECLINE = std::move(other.CMSG_GROUP_DECLINE);
    }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE) {
        this->CMSG_GROUP_UNINVITE = std::move(other.CMSG_GROUP_UNINVITE);
    }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE_GUID) {
        this->CMSG_GROUP_UNINVITE_GUID = std::move(other.CMSG_GROUP_UNINVITE_GUID);
    }
    if (opcode == Opcode::CMSG_GROUP_SET_LEADER) {
        this->CMSG_GROUP_SET_LEADER = std::move(other.CMSG_GROUP_SET_LEADER);
    }
    if (opcode == Opcode::CMSG_LOOT_METHOD) {
        this->CMSG_LOOT_METHOD = std::move(other.CMSG_LOOT_METHOD);
    }
    if (opcode == Opcode::CMSG_GROUP_DISBAND) {
        this->CMSG_GROUP_DISBAND = std::move(other.CMSG_GROUP_DISBAND);
    }
    if (opcode == Opcode::CMSG_GUILD_CREATE) {
        this->CMSG_GUILD_CREATE = std::move(other.CMSG_GUILD_CREATE);
    }
    if (opcode == Opcode::CMSG_GUILD_INVITE) {
        this->CMSG_GUILD_INVITE = std::move(other.CMSG_GUILD_INVITE);
    }
    if (opcode == Opcode::CMSG_GUILD_ACCEPT) {
        this->CMSG_GUILD_ACCEPT = std::move(other.CMSG_GUILD_ACCEPT);
    }
    if (opcode == Opcode::CMSG_GUILD_DECLINE) {
        this->CMSG_GUILD_DECLINE = std::move(other.CMSG_GUILD_DECLINE);
    }
    if (opcode == Opcode::CMSG_GUILD_INFO) {
        this->CMSG_GUILD_INFO = std::move(other.CMSG_GUILD_INFO);
    }
    if (opcode == Opcode::CMSG_GUILD_ROSTER) {
        this->CMSG_GUILD_ROSTER = std::move(other.CMSG_GUILD_ROSTER);
    }
    if (opcode == Opcode::CMSG_GUILD_PROMOTE) {
        this->CMSG_GUILD_PROMOTE = std::move(other.CMSG_GUILD_PROMOTE);
    }
    if (opcode == Opcode::CMSG_GUILD_DEMOTE) {
        this->CMSG_GUILD_DEMOTE = std::move(other.CMSG_GUILD_DEMOTE);
    }
    if (opcode == Opcode::CMSG_GUILD_LEAVE) {
        this->CMSG_GUILD_LEAVE = std::move(other.CMSG_GUILD_LEAVE);
    }
    if (opcode == Opcode::CMSG_GUILD_REMOVE) {
        this->CMSG_GUILD_REMOVE = std::move(other.CMSG_GUILD_REMOVE);
    }
    if (opcode == Opcode::CMSG_GUILD_DISBAND) {
        this->CMSG_GUILD_DISBAND = std::move(other.CMSG_GUILD_DISBAND);
    }
    if (opcode == Opcode::CMSG_GUILD_LEADER) {
        this->CMSG_GUILD_LEADER = std::move(other.CMSG_GUILD_LEADER);
    }
    if (opcode == Opcode::CMSG_GUILD_MOTD) {
        this->CMSG_GUILD_MOTD = std::move(other.CMSG_GUILD_MOTD);
    }
    if (opcode == Opcode::CMSG_MESSAGECHAT) {
        this->CMSG_MESSAGECHAT = std::move(other.CMSG_MESSAGECHAT);
    }
    if (opcode == Opcode::CMSG_JOIN_CHANNEL) {
        this->CMSG_JOIN_CHANNEL = std::move(other.CMSG_JOIN_CHANNEL);
    }
    if (opcode == Opcode::CMSG_LEAVE_CHANNEL) {
        this->CMSG_LEAVE_CHANNEL = std::move(other.CMSG_LEAVE_CHANNEL);
    }
    if (opcode == Opcode::CMSG_CHANNEL_LIST) {
        this->CMSG_CHANNEL_LIST = std::move(other.CMSG_CHANNEL_LIST);
    }
    if (opcode == Opcode::CMSG_CHANNEL_PASSWORD) {
        this->CMSG_CHANNEL_PASSWORD = std::move(other.CMSG_CHANNEL_PASSWORD);
    }
    if (opcode == Opcode::CMSG_CHANNEL_SET_OWNER) {
        this->CMSG_CHANNEL_SET_OWNER = std::move(other.CMSG_CHANNEL_SET_OWNER);
    }
    if (opcode == Opcode::CMSG_CHANNEL_OWNER) {
        this->CMSG_CHANNEL_OWNER = std::move(other.CMSG_CHANNEL_OWNER);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATOR) {
        this->CMSG_CHANNEL_MODERATOR = std::move(other.CMSG_CHANNEL_MODERATOR);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNMODERATOR) {
        this->CMSG_CHANNEL_UNMODERATOR = std::move(other.CMSG_CHANNEL_UNMODERATOR);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MUTE) {
        this->CMSG_CHANNEL_MUTE = std::move(other.CMSG_CHANNEL_MUTE);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNMUTE) {
        this->CMSG_CHANNEL_UNMUTE = std::move(other.CMSG_CHANNEL_UNMUTE);
    }
    if (opcode == Opcode::CMSG_CHANNEL_INVITE) {
        this->CMSG_CHANNEL_INVITE = std::move(other.CMSG_CHANNEL_INVITE);
    }
    if (opcode == Opcode::CMSG_CHANNEL_KICK) {
        this->CMSG_CHANNEL_KICK = std::move(other.CMSG_CHANNEL_KICK);
    }
    if (opcode == Opcode::CMSG_CHANNEL_BAN) {
        this->CMSG_CHANNEL_BAN = std::move(other.CMSG_CHANNEL_BAN);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNBAN) {
        this->CMSG_CHANNEL_UNBAN = std::move(other.CMSG_CHANNEL_UNBAN);
    }
    if (opcode == Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) {
        this->CMSG_CHANNEL_ANNOUNCEMENTS = std::move(other.CMSG_CHANNEL_ANNOUNCEMENTS);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATE) {
        this->CMSG_CHANNEL_MODERATE = std::move(other.CMSG_CHANNEL_MODERATE);
    }
    if (opcode == Opcode::CMSG_USE_ITEM) {
        this->CMSG_USE_ITEM = std::move(other.CMSG_USE_ITEM);
    }
    if (opcode == Opcode::CMSG_OPEN_ITEM) {
        this->CMSG_OPEN_ITEM = std::move(other.CMSG_OPEN_ITEM);
    }
    if (opcode == Opcode::CMSG_READ_ITEM) {
        this->CMSG_READ_ITEM = std::move(other.CMSG_READ_ITEM);
    }
    if (opcode == Opcode::CMSG_GAMEOBJ_USE) {
        this->CMSG_GAMEOBJ_USE = std::move(other.CMSG_GAMEOBJ_USE);
    }
    if (opcode == Opcode::CMSG_AREATRIGGER) {
        this->CMSG_AREATRIGGER = std::move(other.CMSG_AREATRIGGER);
    }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        this->MSG_MOVE_START_FORWARD = std::move(other.MSG_MOVE_START_FORWARD);
    }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        this->MSG_MOVE_START_BACKWARD = std::move(other.MSG_MOVE_START_BACKWARD);
    }
    if (opcode == Opcode::MSG_MOVE_STOP) {
        this->MSG_MOVE_STOP = std::move(other.MSG_MOVE_STOP);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        this->MSG_MOVE_START_STRAFE_LEFT = std::move(other.MSG_MOVE_START_STRAFE_LEFT);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        this->MSG_MOVE_START_STRAFE_RIGHT = std::move(other.MSG_MOVE_START_STRAFE_RIGHT);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        this->MSG_MOVE_STOP_STRAFE = std::move(other.MSG_MOVE_STOP_STRAFE);
    }
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        this->MSG_MOVE_JUMP = std::move(other.MSG_MOVE_JUMP);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        this->MSG_MOVE_START_TURN_LEFT = std::move(other.MSG_MOVE_START_TURN_LEFT);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        this->MSG_MOVE_START_TURN_RIGHT = std::move(other.MSG_MOVE_START_TURN_RIGHT);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        this->MSG_MOVE_STOP_TURN = std::move(other.MSG_MOVE_STOP_TURN);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        this->MSG_MOVE_START_PITCH_UP = std::move(other.MSG_MOVE_START_PITCH_UP);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        this->MSG_MOVE_START_PITCH_DOWN = std::move(other.MSG_MOVE_START_PITCH_DOWN);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        this->MSG_MOVE_STOP_PITCH = std::move(other.MSG_MOVE_STOP_PITCH);
    }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        this->MSG_MOVE_SET_RUN_MODE = std::move(other.MSG_MOVE_SET_RUN_MODE);
    }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        this->MSG_MOVE_SET_WALK_MODE = std::move(other.MSG_MOVE_SET_WALK_MODE);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT) {
        this->MSG_MOVE_TELEPORT = std::move(other.MSG_MOVE_TELEPORT);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        this->MSG_MOVE_TELEPORT_ACK = std::move(other.MSG_MOVE_TELEPORT_ACK);
    }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        this->MSG_MOVE_FALL_LAND = std::move(other.MSG_MOVE_FALL_LAND);
    }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        this->MSG_MOVE_START_SWIM = std::move(other.MSG_MOVE_START_SWIM);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        this->MSG_MOVE_STOP_SWIM = std::move(other.MSG_MOVE_STOP_SWIM);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        this->MSG_MOVE_SET_FACING = std::move(other.MSG_MOVE_SET_FACING);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        this->MSG_MOVE_SET_PITCH = std::move(other.MSG_MOVE_SET_PITCH);
    }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        this->MSG_MOVE_WORLDPORT_ACK = std::move(other.MSG_MOVE_WORLDPORT_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_RAW_POSITION) {
        this->CMSG_MOVE_SET_RAW_POSITION = std::move(other.CMSG_MOVE_SET_RAW_POSITION);
    }
    if (opcode == Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_RUN_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_RUN_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_SWIM_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_SWIM_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_MOVE_ROOT_ACK) {
        this->CMSG_FORCE_MOVE_ROOT_ACK = std::move(other.CMSG_FORCE_MOVE_ROOT_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) {
        this->CMSG_FORCE_MOVE_UNROOT_ACK = std::move(other.CMSG_FORCE_MOVE_UNROOT_ACK);
    }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        this->MSG_MOVE_HEARTBEAT = std::move(other.MSG_MOVE_HEARTBEAT);
    }
    if (opcode == Opcode::CMSG_MOVE_KNOCK_BACK_ACK) {
        this->CMSG_MOVE_KNOCK_BACK_ACK = std::move(other.CMSG_MOVE_KNOCK_BACK_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_HOVER_ACK) {
        this->CMSG_MOVE_HOVER_ACK = std::move(other.CMSG_MOVE_HOVER_ACK);
    }
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        this->MSG_MOVE_HOVER = std::move(other.MSG_MOVE_HOVER);
    }
    if (opcode == Opcode::CMSG_NEXT_CINEMATIC_CAMERA) {
        this->CMSG_NEXT_CINEMATIC_CAMERA = std::move(other.CMSG_NEXT_CINEMATIC_CAMERA);
    }
    if (opcode == Opcode::CMSG_COMPLETE_CINEMATIC) {
        this->CMSG_COMPLETE_CINEMATIC = std::move(other.CMSG_COMPLETE_CINEMATIC);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_FLAG) {
        this->CMSG_TUTORIAL_FLAG = std::move(other.CMSG_TUTORIAL_FLAG);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_CLEAR) {
        this->CMSG_TUTORIAL_CLEAR = std::move(other.CMSG_TUTORIAL_CLEAR);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_RESET) {
        this->CMSG_TUTORIAL_RESET = std::move(other.CMSG_TUTORIAL_RESET);
    }
    if (opcode == Opcode::CMSG_STANDSTATECHANGE) {
        this->CMSG_STANDSTATECHANGE = std::move(other.CMSG_STANDSTATECHANGE);
    }
    if (opcode == Opcode::CMSG_EMOTE) {
        this->CMSG_EMOTE = std::move(other.CMSG_EMOTE);
    }
    if (opcode == Opcode::CMSG_TEXT_EMOTE) {
        this->CMSG_TEXT_EMOTE = std::move(other.CMSG_TEXT_EMOTE);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_LOOT_ITEM) {
        this->CMSG_AUTOSTORE_LOOT_ITEM = std::move(other.CMSG_AUTOSTORE_LOOT_ITEM);
    }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM) {
        this->CMSG_AUTOEQUIP_ITEM = std::move(other.CMSG_AUTOEQUIP_ITEM);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_BAG_ITEM) {
        this->CMSG_AUTOSTORE_BAG_ITEM = std::move(other.CMSG_AUTOSTORE_BAG_ITEM);
    }
    if (opcode == Opcode::CMSG_SWAP_ITEM) {
        this->CMSG_SWAP_ITEM = std::move(other.CMSG_SWAP_ITEM);
    }
    if (opcode == Opcode::CMSG_SWAP_INV_ITEM) {
        this->CMSG_SWAP_INV_ITEM = std::move(other.CMSG_SWAP_INV_ITEM);
    }
    if (opcode == Opcode::CMSG_SPLIT_ITEM) {
        this->CMSG_SPLIT_ITEM = std::move(other.CMSG_SPLIT_ITEM);
    }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) {
        this->CMSG_AUTOEQUIP_ITEM_SLOT = std::move(other.CMSG_AUTOEQUIP_ITEM_SLOT);
    }
    if (opcode == Opcode::CMSG_DESTROYITEM) {
        this->CMSG_DESTROYITEM = std::move(other.CMSG_DESTROYITEM);
    }
    if (opcode == Opcode::CMSG_INSPECT) {
        this->CMSG_INSPECT = std::move(other.CMSG_INSPECT);
    }
    if (opcode == Opcode::CMSG_INITIATE_TRADE) {
        this->CMSG_INITIATE_TRADE = std::move(other.CMSG_INITIATE_TRADE);
    }
    if (opcode == Opcode::CMSG_BEGIN_TRADE) {
        this->CMSG_BEGIN_TRADE = std::move(other.CMSG_BEGIN_TRADE);
    }
    if (opcode == Opcode::CMSG_BUSY_TRADE) {
        this->CMSG_BUSY_TRADE = std::move(other.CMSG_BUSY_TRADE);
    }
    if (opcode == Opcode::CMSG_IGNORE_TRADE) {
        this->CMSG_IGNORE_TRADE = std::move(other.CMSG_IGNORE_TRADE);
    }
    if (opcode == Opcode::CMSG_ACCEPT_TRADE) {
        this->CMSG_ACCEPT_TRADE = std::move(other.CMSG_ACCEPT_TRADE);
    }
    if (opcode == Opcode::CMSG_UNACCEPT_TRADE) {
        this->CMSG_UNACCEPT_TRADE = std::move(other.CMSG_UNACCEPT_TRADE);
    }
    if (opcode == Opcode::CMSG_CANCEL_TRADE) {
        this->CMSG_CANCEL_TRADE = std::move(other.CMSG_CANCEL_TRADE);
    }
    if (opcode == Opcode::CMSG_SET_TRADE_ITEM) {
        this->CMSG_SET_TRADE_ITEM = std::move(other.CMSG_SET_TRADE_ITEM);
    }
    if (opcode == Opcode::CMSG_CLEAR_TRADE_ITEM) {
        this->CMSG_CLEAR_TRADE_ITEM = std::move(other.CMSG_CLEAR_TRADE_ITEM);
    }
    if (opcode == Opcode::CMSG_SET_TRADE_GOLD) {
        this->CMSG_SET_TRADE_GOLD = std::move(other.CMSG_SET_TRADE_GOLD);
    }
    if (opcode == Opcode::CMSG_SET_FACTION_ATWAR) {
        this->CMSG_SET_FACTION_ATWAR = std::move(other.CMSG_SET_FACTION_ATWAR);
    }
    if (opcode == Opcode::CMSG_SET_ACTION_BUTTON) {
        this->CMSG_SET_ACTION_BUTTON = std::move(other.CMSG_SET_ACTION_BUTTON);
    }
    if (opcode == Opcode::CMSG_CAST_SPELL) {
        this->CMSG_CAST_SPELL = std::move(other.CMSG_CAST_SPELL);
    }
    if (opcode == Opcode::CMSG_CANCEL_CAST) {
        this->CMSG_CANCEL_CAST = std::move(other.CMSG_CANCEL_CAST);
    }
    if (opcode == Opcode::CMSG_CANCEL_AURA) {
        this->CMSG_CANCEL_AURA = std::move(other.CMSG_CANCEL_AURA);
    }
    if (opcode == Opcode::CMSG_CANCEL_CHANNELLING) {
        this->CMSG_CANCEL_CHANNELLING = std::move(other.CMSG_CANCEL_CHANNELLING);
    }
    if (opcode == Opcode::CMSG_SET_SELECTION) {
        this->CMSG_SET_SELECTION = std::move(other.CMSG_SET_SELECTION);
    }
    if (opcode == Opcode::CMSG_DELETEEQUIPMENT_SET) {
        this->CMSG_DELETEEQUIPMENT_SET = std::move(other.CMSG_DELETEEQUIPMENT_SET);
    }
    if (opcode == Opcode::CMSG_INSTANCE_LOCK_RESPONSE) {
        this->CMSG_INSTANCE_LOCK_RESPONSE = std::move(other.CMSG_INSTANCE_LOCK_RESPONSE);
    }
    if (opcode == Opcode::CMSG_ATTACKSWING) {
        this->CMSG_ATTACKSWING = std::move(other.CMSG_ATTACKSWING);
    }
    if (opcode == Opcode::CMSG_ATTACKSTOP) {
        this->CMSG_ATTACKSTOP = std::move(other.CMSG_ATTACKSTOP);
    }
    if (opcode == Opcode::CMSG_REPOP_REQUEST) {
        this->CMSG_REPOP_REQUEST = std::move(other.CMSG_REPOP_REQUEST);
    }
    if (opcode == Opcode::CMSG_RESURRECT_RESPONSE) {
        this->CMSG_RESURRECT_RESPONSE = std::move(other.CMSG_RESURRECT_RESPONSE);
    }
    if (opcode == Opcode::CMSG_LOOT) {
        this->CMSG_LOOT = std::move(other.CMSG_LOOT);
    }
    if (opcode == Opcode::CMSG_LOOT_MONEY) {
        this->CMSG_LOOT_MONEY = std::move(other.CMSG_LOOT_MONEY);
    }
    if (opcode == Opcode::CMSG_LOOT_RELEASE) {
        this->CMSG_LOOT_RELEASE = std::move(other.CMSG_LOOT_RELEASE);
    }
    if (opcode == Opcode::CMSG_DUEL_ACCEPTED) {
        this->CMSG_DUEL_ACCEPTED = std::move(other.CMSG_DUEL_ACCEPTED);
    }
    if (opcode == Opcode::CMSG_DUEL_CANCELLED) {
        this->CMSG_DUEL_CANCELLED = std::move(other.CMSG_DUEL_CANCELLED);
    }
    if (opcode == Opcode::CMSG_MOUNTSPECIAL_ANIM) {
        this->CMSG_MOUNTSPECIAL_ANIM = std::move(other.CMSG_MOUNTSPECIAL_ANIM);
    }
    if (opcode == Opcode::CMSG_PET_SET_ACTION) {
        this->CMSG_PET_SET_ACTION = std::move(other.CMSG_PET_SET_ACTION);
    }
    if (opcode == Opcode::CMSG_PET_ACTION) {
        this->CMSG_PET_ACTION = std::move(other.CMSG_PET_ACTION);
    }
    if (opcode == Opcode::CMSG_PET_ABANDON) {
        this->CMSG_PET_ABANDON = std::move(other.CMSG_PET_ABANDON);
    }
    if (opcode == Opcode::CMSG_PET_RENAME) {
        this->CMSG_PET_RENAME = std::move(other.CMSG_PET_RENAME);
    }
    if (opcode == Opcode::CMSG_GOSSIP_HELLO) {
        this->CMSG_GOSSIP_HELLO = std::move(other.CMSG_GOSSIP_HELLO);
    }
    if (opcode == Opcode::CMSG_GOSSIP_SELECT_OPTION) {
        this->CMSG_GOSSIP_SELECT_OPTION = std::move(other.CMSG_GOSSIP_SELECT_OPTION);
    }
    if (opcode == Opcode::CMSG_NPC_TEXT_QUERY) {
        this->CMSG_NPC_TEXT_QUERY = std::move(other.CMSG_NPC_TEXT_QUERY);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_QUERY) {
        this->CMSG_QUESTGIVER_STATUS_QUERY = std::move(other.CMSG_QUESTGIVER_STATUS_QUERY);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_HELLO) {
        this->CMSG_QUESTGIVER_HELLO = std::move(other.CMSG_QUESTGIVER_HELLO);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUERY_QUEST) {
        this->CMSG_QUESTGIVER_QUERY_QUEST = std::move(other.CMSG_QUESTGIVER_QUERY_QUEST);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) {
        this->CMSG_QUESTGIVER_QUEST_AUTOLAUNCH = std::move(other.CMSG_QUESTGIVER_QUEST_AUTOLAUNCH);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) {
        this->CMSG_QUESTGIVER_ACCEPT_QUEST = std::move(other.CMSG_QUESTGIVER_ACCEPT_QUEST);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) {
        this->CMSG_QUESTGIVER_COMPLETE_QUEST = std::move(other.CMSG_QUESTGIVER_COMPLETE_QUEST);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) {
        this->CMSG_QUESTGIVER_REQUEST_REWARD = std::move(other.CMSG_QUESTGIVER_REQUEST_REWARD);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) {
        this->CMSG_QUESTGIVER_CHOOSE_REWARD = std::move(other.CMSG_QUESTGIVER_CHOOSE_REWARD);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_CANCEL) {
        this->CMSG_QUESTGIVER_CANCEL = std::move(other.CMSG_QUESTGIVER_CANCEL);
    }
    if (opcode == Opcode::CMSG_QUESTLOG_SWAP_QUEST) {
        this->CMSG_QUESTLOG_SWAP_QUEST = std::move(other.CMSG_QUESTLOG_SWAP_QUEST);
    }
    if (opcode == Opcode::CMSG_QUESTLOG_REMOVE_QUEST) {
        this->CMSG_QUESTLOG_REMOVE_QUEST = std::move(other.CMSG_QUESTLOG_REMOVE_QUEST);
    }
    if (opcode == Opcode::CMSG_QUEST_CONFIRM_ACCEPT) {
        this->CMSG_QUEST_CONFIRM_ACCEPT = std::move(other.CMSG_QUEST_CONFIRM_ACCEPT);
    }
    if (opcode == Opcode::CMSG_PUSHQUESTTOPARTY) {
        this->CMSG_PUSHQUESTTOPARTY = std::move(other.CMSG_PUSHQUESTTOPARTY);
    }
    if (opcode == Opcode::CMSG_LIST_INVENTORY) {
        this->CMSG_LIST_INVENTORY = std::move(other.CMSG_LIST_INVENTORY);
    }
    if (opcode == Opcode::CMSG_SELL_ITEM) {
        this->CMSG_SELL_ITEM = std::move(other.CMSG_SELL_ITEM);
    }
    if (opcode == Opcode::CMSG_BUY_ITEM) {
        this->CMSG_BUY_ITEM = std::move(other.CMSG_BUY_ITEM);
    }
    if (opcode == Opcode::CMSG_BUY_ITEM_IN_SLOT) {
        this->CMSG_BUY_ITEM_IN_SLOT = std::move(other.CMSG_BUY_ITEM_IN_SLOT);
    }
    if (opcode == Opcode::CMSG_TAXINODE_STATUS_QUERY) {
        this->CMSG_TAXINODE_STATUS_QUERY = std::move(other.CMSG_TAXINODE_STATUS_QUERY);
    }
    if (opcode == Opcode::CMSG_TAXIQUERYAVAILABLENODES) {
        this->CMSG_TAXIQUERYAVAILABLENODES = std::move(other.CMSG_TAXIQUERYAVAILABLENODES);
    }
    if (opcode == Opcode::CMSG_ACTIVATETAXI) {
        this->CMSG_ACTIVATETAXI = std::move(other.CMSG_ACTIVATETAXI);
    }
    if (opcode == Opcode::CMSG_TRAINER_LIST) {
        this->CMSG_TRAINER_LIST = std::move(other.CMSG_TRAINER_LIST);
    }
    if (opcode == Opcode::CMSG_TRAINER_BUY_SPELL) {
        this->CMSG_TRAINER_BUY_SPELL = std::move(other.CMSG_TRAINER_BUY_SPELL);
    }
    if (opcode == Opcode::CMSG_BINDER_ACTIVATE) {
        this->CMSG_BINDER_ACTIVATE = std::move(other.CMSG_BINDER_ACTIVATE);
    }
    if (opcode == Opcode::CMSG_BANKER_ACTIVATE) {
        this->CMSG_BANKER_ACTIVATE = std::move(other.CMSG_BANKER_ACTIVATE);
    }
    if (opcode == Opcode::CMSG_BUY_BANK_SLOT) {
        this->CMSG_BUY_BANK_SLOT = std::move(other.CMSG_BUY_BANK_SLOT);
    }
    if (opcode == Opcode::CMSG_PETITION_SHOWLIST) {
        this->CMSG_PETITION_SHOWLIST = std::move(other.CMSG_PETITION_SHOWLIST);
    }
    if (opcode == Opcode::CMSG_PETITION_BUY) {
        this->CMSG_PETITION_BUY = std::move(other.CMSG_PETITION_BUY);
    }
    if (opcode == Opcode::CMSG_PETITION_SHOW_SIGNATURES) {
        this->CMSG_PETITION_SHOW_SIGNATURES = std::move(other.CMSG_PETITION_SHOW_SIGNATURES);
    }
    if (opcode == Opcode::CMSG_PETITION_SIGN) {
        this->CMSG_PETITION_SIGN = std::move(other.CMSG_PETITION_SIGN);
    }
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        this->MSG_PETITION_DECLINE = std::move(other.MSG_PETITION_DECLINE);
    }
    if (opcode == Opcode::CMSG_OFFER_PETITION) {
        this->CMSG_OFFER_PETITION = std::move(other.CMSG_OFFER_PETITION);
    }
    if (opcode == Opcode::CMSG_TURN_IN_PETITION) {
        this->CMSG_TURN_IN_PETITION = std::move(other.CMSG_TURN_IN_PETITION);
    }
    if (opcode == Opcode::CMSG_PETITION_QUERY) {
        this->CMSG_PETITION_QUERY = std::move(other.CMSG_PETITION_QUERY);
    }
    if (opcode == Opcode::CMSG_BUG) {
        this->CMSG_BUG = std::move(other.CMSG_BUG);
    }
    if (opcode == Opcode::CMSG_PLAYED_TIME) {
        this->CMSG_PLAYED_TIME = std::move(other.CMSG_PLAYED_TIME);
    }
    if (opcode == Opcode::CMSG_QUERY_TIME) {
        this->CMSG_QUERY_TIME = std::move(other.CMSG_QUERY_TIME);
    }
    if (opcode == Opcode::CMSG_RECLAIM_CORPSE) {
        this->CMSG_RECLAIM_CORPSE = std::move(other.CMSG_RECLAIM_CORPSE);
    }
    if (opcode == Opcode::CMSG_WRAP_ITEM) {
        this->CMSG_WRAP_ITEM = std::move(other.CMSG_WRAP_ITEM);
    }
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        this->MSG_MINIMAP_PING = std::move(other.MSG_MINIMAP_PING);
    }
    if (opcode == Opcode::CMSG_PING) {
        this->CMSG_PING = std::move(other.CMSG_PING);
    }
    if (opcode == Opcode::CMSG_SETSHEATHED) {
        this->CMSG_SETSHEATHED = std::move(other.CMSG_SETSHEATHED);
    }
    if (opcode == Opcode::CMSG_QUEST_POI_QUERY) {
        this->CMSG_QUEST_POI_QUERY = std::move(other.CMSG_QUEST_POI_QUERY);
    }
    if (opcode == Opcode::CMSG_AUTH_SESSION) {
        this->CMSG_AUTH_SESSION = std::move(other.CMSG_AUTH_SESSION);
    }
    if (opcode == Opcode::CMSG_PET_CAST_SPELL) {
        this->CMSG_PET_CAST_SPELL = std::move(other.CMSG_PET_CAST_SPELL);
    }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        this->MSG_SAVE_GUILD_EMBLEM = std::move(other.MSG_SAVE_GUILD_EMBLEM);
    }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        this->MSG_TABARDVENDOR_ACTIVATE = std::move(other.MSG_TABARDVENDOR_ACTIVATE);
    }
    if (opcode == Opcode::CMSG_ZONEUPDATE) {
        this->CMSG_ZONEUPDATE = std::move(other.CMSG_ZONEUPDATE);
    }
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        this->MSG_RANDOM_ROLL = std::move(other.MSG_RANDOM_ROLL);
    }
    if (opcode == Opcode::CMSG_UNLEARN_SKILL) {
        this->CMSG_UNLEARN_SKILL = std::move(other.CMSG_UNLEARN_SKILL);
    }
    if (opcode == Opcode::CMSG_GMTICKET_CREATE) {
        this->CMSG_GMTICKET_CREATE = std::move(other.CMSG_GMTICKET_CREATE);
    }
    if (opcode == Opcode::CMSG_GMTICKET_UPDATETEXT) {
        this->CMSG_GMTICKET_UPDATETEXT = std::move(other.CMSG_GMTICKET_UPDATETEXT);
    }
    if (opcode == Opcode::CMSG_REQUEST_ACCOUNT_DATA) {
        this->CMSG_REQUEST_ACCOUNT_DATA = std::move(other.CMSG_REQUEST_ACCOUNT_DATA);
    }
    if (opcode == Opcode::CMSG_UPDATE_ACCOUNT_DATA) {
        this->CMSG_UPDATE_ACCOUNT_DATA = std::move(other.CMSG_UPDATE_ACCOUNT_DATA);
    }
    if (opcode == Opcode::CMSG_GMTICKET_GETTICKET) {
        this->CMSG_GMTICKET_GETTICKET = std::move(other.CMSG_GMTICKET_GETTICKET);
    }
    if (opcode == Opcode::CMSG_UNLEARN_TALENTS) {
        this->CMSG_UNLEARN_TALENTS = std::move(other.CMSG_UNLEARN_TALENTS);
    }
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        this->MSG_CORPSE_QUERY = std::move(other.MSG_CORPSE_QUERY);
    }
    if (opcode == Opcode::CMSG_GMTICKET_DELETETICKET) {
        this->CMSG_GMTICKET_DELETETICKET = std::move(other.CMSG_GMTICKET_DELETETICKET);
    }
    if (opcode == Opcode::CMSG_GMTICKET_SYSTEMSTATUS) {
        this->CMSG_GMTICKET_SYSTEMSTATUS = std::move(other.CMSG_GMTICKET_SYSTEMSTATUS);
    }
    if (opcode == Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) {
        this->CMSG_SPIRIT_HEALER_ACTIVATE = std::move(other.CMSG_SPIRIT_HEALER_ACTIVATE);
    }
    if (opcode == Opcode::CMSG_CHAT_IGNORED) {
        this->CMSG_CHAT_IGNORED = std::move(other.CMSG_CHAT_IGNORED);
    }
    if (opcode == Opcode::CMSG_GUILD_RANK) {
        this->CMSG_GUILD_RANK = std::move(other.CMSG_GUILD_RANK);
    }
    if (opcode == Opcode::CMSG_GUILD_ADD_RANK) {
        this->CMSG_GUILD_ADD_RANK = std::move(other.CMSG_GUILD_ADD_RANK);
    }
    if (opcode == Opcode::CMSG_GUILD_DEL_RANK) {
        this->CMSG_GUILD_DEL_RANK = std::move(other.CMSG_GUILD_DEL_RANK);
    }
    if (opcode == Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) {
        this->CMSG_GUILD_SET_PUBLIC_NOTE = std::move(other.CMSG_GUILD_SET_PUBLIC_NOTE);
    }
    if (opcode == Opcode::CMSG_GUILD_SET_OFFICER_NOTE) {
        this->CMSG_GUILD_SET_OFFICER_NOTE = std::move(other.CMSG_GUILD_SET_OFFICER_NOTE);
    }
    if (opcode == Opcode::CMSG_SEND_MAIL) {
        this->CMSG_SEND_MAIL = std::move(other.CMSG_SEND_MAIL);
    }
    if (opcode == Opcode::CMSG_GET_MAIL_LIST) {
        this->CMSG_GET_MAIL_LIST = std::move(other.CMSG_GET_MAIL_LIST);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_LIST) {
        this->CMSG_BATTLEFIELD_LIST = std::move(other.CMSG_BATTLEFIELD_LIST);
    }
    if (opcode == Opcode::CMSG_ITEM_TEXT_QUERY) {
        this->CMSG_ITEM_TEXT_QUERY = std::move(other.CMSG_ITEM_TEXT_QUERY);
    }
    if (opcode == Opcode::CMSG_MAIL_TAKE_MONEY) {
        this->CMSG_MAIL_TAKE_MONEY = std::move(other.CMSG_MAIL_TAKE_MONEY);
    }
    if (opcode == Opcode::CMSG_MAIL_TAKE_ITEM) {
        this->CMSG_MAIL_TAKE_ITEM = std::move(other.CMSG_MAIL_TAKE_ITEM);
    }
    if (opcode == Opcode::CMSG_MAIL_MARK_AS_READ) {
        this->CMSG_MAIL_MARK_AS_READ = std::move(other.CMSG_MAIL_MARK_AS_READ);
    }
    if (opcode == Opcode::CMSG_MAIL_RETURN_TO_SENDER) {
        this->CMSG_MAIL_RETURN_TO_SENDER = std::move(other.CMSG_MAIL_RETURN_TO_SENDER);
    }
    if (opcode == Opcode::CMSG_MAIL_DELETE) {
        this->CMSG_MAIL_DELETE = std::move(other.CMSG_MAIL_DELETE);
    }
    if (opcode == Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) {
        this->CMSG_MAIL_CREATE_TEXT_ITEM = std::move(other.CMSG_MAIL_CREATE_TEXT_ITEM);
    }
    if (opcode == Opcode::CMSG_LEARN_TALENT) {
        this->CMSG_LEARN_TALENT = std::move(other.CMSG_LEARN_TALENT);
    }
    if (opcode == Opcode::CMSG_TOGGLE_PVP) {
        this->CMSG_TOGGLE_PVP = std::move(other.CMSG_TOGGLE_PVP);
    }
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        this->MSG_AUCTION_HELLO = std::move(other.MSG_AUCTION_HELLO);
    }
    if (opcode == Opcode::CMSG_AUCTION_SELL_ITEM) {
        this->CMSG_AUCTION_SELL_ITEM = std::move(other.CMSG_AUCTION_SELL_ITEM);
    }
    if (opcode == Opcode::CMSG_AUCTION_REMOVE_ITEM) {
        this->CMSG_AUCTION_REMOVE_ITEM = std::move(other.CMSG_AUCTION_REMOVE_ITEM);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_ITEMS) {
        this->CMSG_AUCTION_LIST_ITEMS = std::move(other.CMSG_AUCTION_LIST_ITEMS);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) {
        this->CMSG_AUCTION_LIST_OWNER_ITEMS = std::move(other.CMSG_AUCTION_LIST_OWNER_ITEMS);
    }
    if (opcode == Opcode::CMSG_AUCTION_PLACE_BID) {
        this->CMSG_AUCTION_PLACE_BID = std::move(other.CMSG_AUCTION_PLACE_BID);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) {
        this->CMSG_AUCTION_LIST_BIDDER_ITEMS = std::move(other.CMSG_AUCTION_LIST_BIDDER_ITEMS);
    }
    if (opcode == Opcode::CMSG_SET_AMMO) {
        this->CMSG_SET_AMMO = std::move(other.CMSG_SET_AMMO);
    }
    if (opcode == Opcode::CMSG_SET_ACTIVE_MOVER) {
        this->CMSG_SET_ACTIVE_MOVER = std::move(other.CMSG_SET_ACTIVE_MOVER);
    }
    if (opcode == Opcode::CMSG_PET_CANCEL_AURA) {
        this->CMSG_PET_CANCEL_AURA = std::move(other.CMSG_PET_CANCEL_AURA);
    }
    if (opcode == Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) {
        this->CMSG_CANCEL_AUTO_REPEAT_SPELL = std::move(other.CMSG_CANCEL_AUTO_REPEAT_SPELL);
    }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        this->MSG_LIST_STABLED_PETS = std::move(other.MSG_LIST_STABLED_PETS);
    }
    if (opcode == Opcode::CMSG_STABLE_PET) {
        this->CMSG_STABLE_PET = std::move(other.CMSG_STABLE_PET);
    }
    if (opcode == Opcode::CMSG_UNSTABLE_PET) {
        this->CMSG_UNSTABLE_PET = std::move(other.CMSG_UNSTABLE_PET);
    }
    if (opcode == Opcode::CMSG_BUY_STABLE_SLOT) {
        this->CMSG_BUY_STABLE_SLOT = std::move(other.CMSG_BUY_STABLE_SLOT);
    }
    if (opcode == Opcode::CMSG_STABLE_SWAP_PET) {
        this->CMSG_STABLE_SWAP_PET = std::move(other.CMSG_STABLE_SWAP_PET);
    }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        this->MSG_QUEST_PUSH_RESULT = std::move(other.MSG_QUEST_PUSH_RESULT);
    }
    if (opcode == Opcode::CMSG_REQUEST_PET_INFO) {
        this->CMSG_REQUEST_PET_INFO = std::move(other.CMSG_REQUEST_PET_INFO);
    }
    if (opcode == Opcode::CMSG_FAR_SIGHT) {
        this->CMSG_FAR_SIGHT = std::move(other.CMSG_FAR_SIGHT);
    }
    if (opcode == Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) {
        this->CMSG_GROUP_CHANGE_SUB_GROUP = std::move(other.CMSG_GROUP_CHANGE_SUB_GROUP);
    }
    if (opcode == Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) {
        this->CMSG_REQUEST_PARTY_MEMBER_STATS = std::move(other.CMSG_REQUEST_PARTY_MEMBER_STATS);
    }
    if (opcode == Opcode::CMSG_GROUP_SWAP_SUB_GROUP) {
        this->CMSG_GROUP_SWAP_SUB_GROUP = std::move(other.CMSG_GROUP_SWAP_SUB_GROUP);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_BANK_ITEM) {
        this->CMSG_AUTOSTORE_BANK_ITEM = std::move(other.CMSG_AUTOSTORE_BANK_ITEM);
    }
    if (opcode == Opcode::CMSG_AUTOBANK_ITEM) {
        this->CMSG_AUTOBANK_ITEM = std::move(other.CMSG_AUTOBANK_ITEM);
    }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        this->MSG_QUERY_NEXT_MAIL_TIME = std::move(other.MSG_QUERY_NEXT_MAIL_TIME);
    }
    if (opcode == Opcode::CMSG_GROUP_RAID_CONVERT) {
        this->CMSG_GROUP_RAID_CONVERT = std::move(other.CMSG_GROUP_RAID_CONVERT);
    }
    if (opcode == Opcode::CMSG_GROUP_ASSISTANT_LEADER) {
        this->CMSG_GROUP_ASSISTANT_LEADER = std::move(other.CMSG_GROUP_ASSISTANT_LEADER);
    }
    if (opcode == Opcode::CMSG_BUYBACK_ITEM) {
        this->CMSG_BUYBACK_ITEM = std::move(other.CMSG_BUYBACK_ITEM);
    }
    if (opcode == Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) {
        this->CMSG_SET_SAVED_INSTANCE_EXTEND = std::move(other.CMSG_SET_SAVED_INSTANCE_EXTEND);
    }
    if (opcode == Opcode::CMSG_LFG_GET_STATUS) {
        this->CMSG_LFG_GET_STATUS = std::move(other.CMSG_LFG_GET_STATUS);
    }
    if (opcode == Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) {
        this->CMSG_GMTICKETSYSTEM_TOGGLE = std::move(other.CMSG_GMTICKETSYSTEM_TOGGLE);
    }
    if (opcode == Opcode::CMSG_CANCEL_GROWTH_AURA) {
        this->CMSG_CANCEL_GROWTH_AURA = std::move(other.CMSG_CANCEL_GROWTH_AURA);
    }
    if (opcode == Opcode::CMSG_LOOT_ROLL) {
        this->CMSG_LOOT_ROLL = std::move(other.CMSG_LOOT_ROLL);
    }
    if (opcode == Opcode::CMSG_LOOT_MASTER_GIVE) {
        this->CMSG_LOOT_MASTER_GIVE = std::move(other.CMSG_LOOT_MASTER_GIVE);
    }
    if (opcode == Opcode::CMSG_REPAIR_ITEM) {
        this->CMSG_REPAIR_ITEM = std::move(other.CMSG_REPAIR_ITEM);
    }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        this->MSG_TALENT_WIPE_CONFIRM = std::move(other.MSG_TALENT_WIPE_CONFIRM);
    }
    if (opcode == Opcode::CMSG_SUMMON_RESPONSE) {
        this->CMSG_SUMMON_RESPONSE = std::move(other.CMSG_SUMMON_RESPONSE);
    }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        this->MSG_MOVE_WATER_WALK = std::move(other.MSG_MOVE_WATER_WALK);
    }
    if (opcode == Opcode::CMSG_SELF_RES) {
        this->CMSG_SELF_RES = std::move(other.CMSG_SELF_RES);
    }
    if (opcode == Opcode::CMSG_TOGGLE_HELM) {
        this->CMSG_TOGGLE_HELM = std::move(other.CMSG_TOGGLE_HELM);
    }
    if (opcode == Opcode::CMSG_TOGGLE_CLOAK) {
        this->CMSG_TOGGLE_CLOAK = std::move(other.CMSG_TOGGLE_CLOAK);
    }
    if (opcode == Opcode::CMSG_SET_ACTIONBAR_TOGGLES) {
        this->CMSG_SET_ACTIONBAR_TOGGLES = std::move(other.CMSG_SET_ACTIONBAR_TOGGLES);
    }
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        this->MSG_PETITION_RENAME = std::move(other.MSG_PETITION_RENAME);
    }
    if (opcode == Opcode::CMSG_ITEM_NAME_QUERY) {
        this->CMSG_ITEM_NAME_QUERY = std::move(other.CMSG_ITEM_NAME_QUERY);
    }
    if (opcode == Opcode::CMSG_CHAR_RENAME) {
        this->CMSG_CHAR_RENAME = std::move(other.CMSG_CHAR_RENAME);
    }
    if (opcode == Opcode::CMSG_MOVE_SPLINE_DONE) {
        this->CMSG_MOVE_SPLINE_DONE = std::move(other.CMSG_MOVE_SPLINE_DONE);
    }
    if (opcode == Opcode::CMSG_MOVE_FALL_RESET) {
        this->CMSG_MOVE_FALL_RESET = std::move(other.CMSG_MOVE_FALL_RESET);
    }
    if (opcode == Opcode::CMSG_REQUEST_RAID_INFO) {
        this->CMSG_REQUEST_RAID_INFO = std::move(other.CMSG_REQUEST_RAID_INFO);
    }
    if (opcode == Opcode::CMSG_MOVE_TIME_SKIPPED) {
        this->CMSG_MOVE_TIME_SKIPPED = std::move(other.CMSG_MOVE_TIME_SKIPPED);
    }
    if (opcode == Opcode::CMSG_MOVE_FEATHER_FALL_ACK) {
        this->CMSG_MOVE_FEATHER_FALL_ACK = std::move(other.CMSG_MOVE_FEATHER_FALL_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_WATER_WALK_ACK) {
        this->CMSG_MOVE_WATER_WALK_ACK = std::move(other.CMSG_MOVE_WATER_WALK_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) {
        this->CMSG_MOVE_NOT_ACTIVE_MOVER = std::move(other.CMSG_MOVE_NOT_ACTIVE_MOVER);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_STATUS) {
        this->CMSG_BATTLEFIELD_STATUS = std::move(other.CMSG_BATTLEFIELD_STATUS);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_PORT) {
        this->CMSG_BATTLEFIELD_PORT = std::move(other.CMSG_BATTLEFIELD_PORT);
    }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        this->MSG_INSPECT_HONOR_STATS = std::move(other.MSG_INSPECT_HONOR_STATS);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_HELLO) {
        this->CMSG_BATTLEMASTER_HELLO = std::move(other.CMSG_BATTLEMASTER_HELLO);
    }
    if (opcode == Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_WALK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_WALK_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) {
        this->CMSG_FORCE_TURN_RATE_CHANGE_ACK = std::move(other.CMSG_FORCE_TURN_RATE_CHANGE_ACK);
    }
    if (opcode == Opcode::MSG_PVP_LOG_DATA) {
        this->MSG_PVP_LOG_DATA = std::move(other.MSG_PVP_LOG_DATA);
    }
    if (opcode == Opcode::CMSG_LEAVE_BATTLEFIELD) {
        this->CMSG_LEAVE_BATTLEFIELD = std::move(other.CMSG_LEAVE_BATTLEFIELD);
    }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) {
        this->CMSG_AREA_SPIRIT_HEALER_QUERY = std::move(other.CMSG_AREA_SPIRIT_HEALER_QUERY);
    }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) {
        this->CMSG_AREA_SPIRIT_HEALER_QUEUE = std::move(other.CMSG_AREA_SPIRIT_HEALER_QUEUE);
    }
    if (opcode == Opcode::CMSG_WARDEN_DATA) {
        this->CMSG_WARDEN_DATA = std::move(other.CMSG_WARDEN_DATA);
    }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        this->MSG_BATTLEGROUND_PLAYER_POSITIONS = std::move(other.MSG_BATTLEGROUND_PLAYER_POSITIONS);
    }
    if (opcode == Opcode::CMSG_PET_STOP_ATTACK) {
        this->CMSG_PET_STOP_ATTACK = std::move(other.CMSG_PET_STOP_ATTACK);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN) {
        this->CMSG_BATTLEMASTER_JOIN = std::move(other.CMSG_BATTLEMASTER_JOIN);
    }
    if (opcode == Opcode::CMSG_PET_UNLEARN) {
        this->CMSG_PET_UNLEARN = std::move(other.CMSG_PET_UNLEARN);
    }
    if (opcode == Opcode::CMSG_PET_SPELL_AUTOCAST) {
        this->CMSG_PET_SPELL_AUTOCAST = std::move(other.CMSG_PET_SPELL_AUTOCAST);
    }
    if (opcode == Opcode::CMSG_GUILD_INFO_TEXT) {
        this->CMSG_GUILD_INFO_TEXT = std::move(other.CMSG_GUILD_INFO_TEXT);
    }
    if (opcode == Opcode::CMSG_ACTIVATETAXIEXPRESS) {
        this->CMSG_ACTIVATETAXIEXPRESS = std::move(other.CMSG_ACTIVATETAXIEXPRESS);
    }
    if (opcode == Opcode::CMSG_SET_FACTION_INACTIVE) {
        this->CMSG_SET_FACTION_INACTIVE = std::move(other.CMSG_SET_FACTION_INACTIVE);
    }
    if (opcode == Opcode::CMSG_SET_WATCHED_FACTION) {
        this->CMSG_SET_WATCHED_FACTION = std::move(other.CMSG_SET_WATCHED_FACTION);
    }
    if (opcode == Opcode::CMSG_RESET_INSTANCES) {
        this->CMSG_RESET_INSTANCES = std::move(other.CMSG_RESET_INSTANCES);
    }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        this->MSG_RAID_TARGET_UPDATE = std::move(other.MSG_RAID_TARGET_UPDATE);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        this->MSG_RAID_READY_CHECK = std::move(other.MSG_RAID_READY_CHECK);
    }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        this->MSG_SET_DUNGEON_DIFFICULTY = std::move(other.MSG_SET_DUNGEON_DIFFICULTY);
    }
    if (opcode == Opcode::CMSG_GMSURVEY_SUBMIT) {
        this->CMSG_GMSURVEY_SUBMIT = std::move(other.CMSG_GMSURVEY_SUBMIT);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) {
        this->CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK = std::move(other.CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) {
        this->CMSG_MOVE_SET_CAN_FLY_ACK = std::move(other.CMSG_MOVE_SET_CAN_FLY_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_FLY) {
        this->CMSG_MOVE_SET_FLY = std::move(other.CMSG_MOVE_SET_FLY);
    }
    if (opcode == Opcode::CMSG_SOCKET_GEMS) {
        this->CMSG_SOCKET_GEMS = std::move(other.CMSG_SOCKET_GEMS);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ROSTER) {
        this->CMSG_ARENA_TEAM_ROSTER = std::move(other.CMSG_ARENA_TEAM_ROSTER);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_INVITE) {
        this->CMSG_ARENA_TEAM_INVITE = std::move(other.CMSG_ARENA_TEAM_INVITE);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ACCEPT) {
        this->CMSG_ARENA_TEAM_ACCEPT = std::move(other.CMSG_ARENA_TEAM_ACCEPT);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DECLINE) {
        this->CMSG_ARENA_TEAM_DECLINE = std::move(other.CMSG_ARENA_TEAM_DECLINE);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEAVE) {
        this->CMSG_ARENA_TEAM_LEAVE = std::move(other.CMSG_ARENA_TEAM_LEAVE);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_REMOVE) {
        this->CMSG_ARENA_TEAM_REMOVE = std::move(other.CMSG_ARENA_TEAM_REMOVE);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DISBAND) {
        this->CMSG_ARENA_TEAM_DISBAND = std::move(other.CMSG_ARENA_TEAM_DISBAND);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEADER) {
        this->CMSG_ARENA_TEAM_LEADER = std::move(other.CMSG_ARENA_TEAM_LEADER);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) {
        this->CMSG_BATTLEMASTER_JOIN_ARENA = std::move(other.CMSG_BATTLEMASTER_JOIN_ARENA);
    }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        this->MSG_MOVE_START_ASCEND = std::move(other.MSG_MOVE_START_ASCEND);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        this->MSG_MOVE_STOP_ASCEND = std::move(other.MSG_MOVE_STOP_ASCEND);
    }
    if (opcode == Opcode::CMSG_LFG_JOIN) {
        this->CMSG_LFG_JOIN = std::move(other.CMSG_LFG_JOIN);
    }
    if (opcode == Opcode::CMSG_LFG_LEAVE) {
        this->CMSG_LFG_LEAVE = std::move(other.CMSG_LFG_LEAVE);
    }
    if (opcode == Opcode::CMSG_SEARCH_LFG_JOIN) {
        this->CMSG_SEARCH_LFG_JOIN = std::move(other.CMSG_SEARCH_LFG_JOIN);
    }
    if (opcode == Opcode::CMSG_SEARCH_LFG_LEAVE) {
        this->CMSG_SEARCH_LFG_LEAVE = std::move(other.CMSG_SEARCH_LFG_LEAVE);
    }
    if (opcode == Opcode::CMSG_LFG_PROPOSAL_RESULT) {
        this->CMSG_LFG_PROPOSAL_RESULT = std::move(other.CMSG_LFG_PROPOSAL_RESULT);
    }
    if (opcode == Opcode::CMSG_SET_LFG_COMMENT) {
        this->CMSG_SET_LFG_COMMENT = std::move(other.CMSG_SET_LFG_COMMENT);
    }
    if (opcode == Opcode::CMSG_LFG_SET_ROLES) {
        this->CMSG_LFG_SET_ROLES = std::move(other.CMSG_LFG_SET_ROLES);
    }
    if (opcode == Opcode::CMSG_LFG_SET_BOOT_VOTE) {
        this->CMSG_LFG_SET_BOOT_VOTE = std::move(other.CMSG_LFG_SET_BOOT_VOTE);
    }
    if (opcode == Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) {
        this->CMSG_LFD_PLAYER_LOCK_INFO_REQUEST = std::move(other.CMSG_LFD_PLAYER_LOCK_INFO_REQUEST);
    }
    if (opcode == Opcode::CMSG_LFG_TELEPORT) {
        this->CMSG_LFG_TELEPORT = std::move(other.CMSG_LFG_TELEPORT);
    }
    if (opcode == Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) {
        this->CMSG_LFD_PARTY_LOCK_INFO_REQUEST = std::move(other.CMSG_LFD_PARTY_LOCK_INFO_REQUEST);
    }
    if (opcode == Opcode::CMSG_SET_TITLE) {
        this->CMSG_SET_TITLE = std::move(other.CMSG_SET_TITLE);
    }
    if (opcode == Opcode::CMSG_CANCEL_MOUNT_AURA) {
        this->CMSG_CANCEL_MOUNT_AURA = std::move(other.CMSG_CANCEL_MOUNT_AURA);
    }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        this->MSG_INSPECT_ARENA_TEAMS = std::move(other.MSG_INSPECT_ARENA_TEAMS);
    }
    if (opcode == Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) {
        this->CMSG_CANCEL_TEMP_ENCHANTMENT = std::move(other.CMSG_CANCEL_TEMP_ENCHANTMENT);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        this->MSG_MOVE_SET_FLIGHT_BACK_SPEED = std::move(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED);
    }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) {
        this->CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK = std::move(other.CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK);
    }
    if (opcode == Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) {
        this->CMSG_SET_TAXI_BENCHMARK_MODE = std::move(other.CMSG_SET_TAXI_BENCHMARK_MODE);
    }
    if (opcode == Opcode::CMSG_REALM_SPLIT) {
        this->CMSG_REALM_SPLIT = std::move(other.CMSG_REALM_SPLIT);
    }
    if (opcode == Opcode::CMSG_MOVE_CHNG_TRANSPORT) {
        this->CMSG_MOVE_CHNG_TRANSPORT = std::move(other.CMSG_MOVE_CHNG_TRANSPORT);
    }
    if (opcode == Opcode::MSG_PARTY_ASSIGNMENT) {
        this->MSG_PARTY_ASSIGNMENT = std::move(other.MSG_PARTY_ASSIGNMENT);
    }
    if (opcode == Opcode::CMSG_TIME_SYNC_RESP) {
        this->CMSG_TIME_SYNC_RESP = std::move(other.CMSG_TIME_SYNC_RESP);
    }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        this->MSG_MOVE_START_DESCEND = std::move(other.MSG_MOVE_START_DESCEND);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        this->MSG_RAID_READY_CHECK_CONFIRM = std::move(other.MSG_RAID_READY_CHECK_CONFIRM);
    }
    if (opcode == Opcode::CMSG_VOICE_SESSION_ENABLE) {
        this->CMSG_VOICE_SESSION_ENABLE = std::move(other.CMSG_VOICE_SESSION_ENABLE);
    }
    if (opcode == Opcode::CMSG_COMMENTATOR_ENABLE) {
        this->CMSG_COMMENTATOR_ENABLE = std::move(other.CMSG_COMMENTATOR_ENABLE);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_FINISHED) {
        this->MSG_RAID_READY_CHECK_FINISHED = std::move(other.MSG_RAID_READY_CHECK_FINISHED);
    }
    if (opcode == Opcode::CMSG_COMPLAIN) {
        this->CMSG_COMPLAIN = std::move(other.CMSG_COMPLAIN);
    }
    if (opcode == Opcode::CMSG_CHANNEL_DISPLAY_LIST) {
        this->CMSG_CHANNEL_DISPLAY_LIST = std::move(other.CMSG_CHANNEL_DISPLAY_LIST);
    }
    if (opcode == Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) {
        this->CMSG_SET_ACTIVE_VOICE_CHANNEL = std::move(other.CMSG_SET_ACTIVE_VOICE_CHANNEL);
    }
    if (opcode == Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) {
        this->CMSG_GET_CHANNEL_MEMBER_COUNT = std::move(other.CMSG_GET_CHANNEL_MEMBER_COUNT);
    }
    if (opcode == Opcode::CMSG_CHANNEL_VOICE_ON) {
        this->CMSG_CHANNEL_VOICE_ON = std::move(other.CMSG_CHANNEL_VOICE_ON);
    }
    if (opcode == Opcode::CMSG_REPORT_PVP_AFK) {
        this->CMSG_REPORT_PVP_AFK = std::move(other.CMSG_REPORT_PVP_AFK);
    }
    if (opcode == Opcode::CMSG_GUILD_BANKER_ACTIVATE) {
        this->CMSG_GUILD_BANKER_ACTIVATE = std::move(other.CMSG_GUILD_BANKER_ACTIVATE);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_QUERY_TAB) {
        this->CMSG_GUILD_BANK_QUERY_TAB = std::move(other.CMSG_GUILD_BANK_QUERY_TAB);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) {
        this->CMSG_GUILD_BANK_SWAP_ITEMS = std::move(other.CMSG_GUILD_BANK_SWAP_ITEMS);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_BUY_TAB) {
        this->CMSG_GUILD_BANK_BUY_TAB = std::move(other.CMSG_GUILD_BANK_BUY_TAB);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_UPDATE_TAB) {
        this->CMSG_GUILD_BANK_UPDATE_TAB = std::move(other.CMSG_GUILD_BANK_UPDATE_TAB);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) {
        this->CMSG_GUILD_BANK_DEPOSIT_MONEY = std::move(other.CMSG_GUILD_BANK_DEPOSIT_MONEY);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) {
        this->CMSG_GUILD_BANK_WITHDRAW_MONEY = std::move(other.CMSG_GUILD_BANK_WITHDRAW_MONEY);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        this->MSG_GUILD_BANK_LOG_QUERY = std::move(other.MSG_GUILD_BANK_LOG_QUERY);
    }
    if (opcode == Opcode::CMSG_SET_CHANNEL_WATCH) {
        this->CMSG_SET_CHANNEL_WATCH = std::move(other.CMSG_SET_CHANNEL_WATCH);
    }
    if (opcode == Opcode::CMSG_CLEAR_CHANNEL_WATCH) {
        this->CMSG_CLEAR_CHANNEL_WATCH = std::move(other.CMSG_CLEAR_CHANNEL_WATCH);
    }
    if (opcode == Opcode::CMSG_SPELLCLICK) {
        this->CMSG_SPELLCLICK = std::move(other.CMSG_SPELLCLICK);
    }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        this->MSG_GUILD_PERMISSIONS = std::move(other.MSG_GUILD_PERMISSIONS);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        this->MSG_GUILD_BANK_MONEY_WITHDRAWN = std::move(other.MSG_GUILD_BANK_MONEY_WITHDRAWN);
    }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        this->MSG_GUILD_EVENT_LOG_QUERY = std::move(other.MSG_GUILD_EVENT_LOG_QUERY);
    }
    if (opcode == Opcode::CMSG_GET_MIRRORIMAGE_DATA) {
        this->CMSG_GET_MIRRORIMAGE_DATA = std::move(other.CMSG_GET_MIRRORIMAGE_DATA);
    }
    if (opcode == Opcode::CMSG_KEEP_ALIVE) {
        this->CMSG_KEEP_ALIVE = std::move(other.CMSG_KEEP_ALIVE);
    }
    if (opcode == Opcode::CMSG_OPT_OUT_OF_LOOT) {
        this->CMSG_OPT_OUT_OF_LOOT = std::move(other.CMSG_OPT_OUT_OF_LOOT);
    }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        this->MSG_QUERY_GUILD_BANK_TEXT = std::move(other.MSG_QUERY_GUILD_BANK_TEXT);
    }
    if (opcode == Opcode::CMSG_SET_GUILD_BANK_TEXT) {
        this->CMSG_SET_GUILD_BANK_TEXT = std::move(other.CMSG_SET_GUILD_BANK_TEXT);
    }
    if (opcode == Opcode::CMSG_GRANT_LEVEL) {
        this->CMSG_GRANT_LEVEL = std::move(other.CMSG_GRANT_LEVEL);
    }
    if (opcode == Opcode::CMSG_TOTEM_DESTROYED) {
        this->CMSG_TOTEM_DESTROYED = std::move(other.CMSG_TOTEM_DESTROYED);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) {
        this->CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY = std::move(other.CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY);
    }
    if (opcode == Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) {
        this->CMSG_SET_PLAYER_DECLINED_NAMES = std::move(other.CMSG_SET_PLAYER_DECLINED_NAMES);
    }
    if (opcode == Opcode::CMSG_ACCEPT_LEVEL_GRANT) {
        this->CMSG_ACCEPT_LEVEL_GRANT = std::move(other.CMSG_ACCEPT_LEVEL_GRANT);
    }
    if (opcode == Opcode::CMSG_ALTER_APPEARANCE) {
        this->CMSG_ALTER_APPEARANCE = std::move(other.CMSG_ALTER_APPEARANCE);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_CALENDAR) {
        this->CMSG_CALENDAR_GET_CALENDAR = std::move(other.CMSG_CALENDAR_GET_CALENDAR);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_EVENT) {
        this->CMSG_CALENDAR_GET_EVENT = std::move(other.CMSG_CALENDAR_GET_EVENT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GUILD_FILTER) {
        this->CMSG_CALENDAR_GUILD_FILTER = std::move(other.CMSG_CALENDAR_GUILD_FILTER);
    }
    if (opcode == Opcode::CMSG_CALENDAR_ARENA_TEAM) {
        this->CMSG_CALENDAR_ARENA_TEAM = std::move(other.CMSG_CALENDAR_ARENA_TEAM);
    }
    if (opcode == Opcode::CMSG_CALENDAR_ADD_EVENT) {
        this->CMSG_CALENDAR_ADD_EVENT = std::move(other.CMSG_CALENDAR_ADD_EVENT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_UPDATE_EVENT) {
        this->CMSG_CALENDAR_UPDATE_EVENT = std::move(other.CMSG_CALENDAR_UPDATE_EVENT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_REMOVE_EVENT) {
        this->CMSG_CALENDAR_REMOVE_EVENT = std::move(other.CMSG_CALENDAR_REMOVE_EVENT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_COPY_EVENT) {
        this->CMSG_CALENDAR_COPY_EVENT = std::move(other.CMSG_CALENDAR_COPY_EVENT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_INVITE) {
        this->CMSG_CALENDAR_EVENT_INVITE = std::move(other.CMSG_CALENDAR_EVENT_INVITE);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_RSVP) {
        this->CMSG_CALENDAR_EVENT_RSVP = std::move(other.CMSG_CALENDAR_EVENT_RSVP);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) {
        this->CMSG_CALENDAR_EVENT_REMOVE_INVITE = std::move(other.CMSG_CALENDAR_EVENT_REMOVE_INVITE);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_STATUS) {
        this->CMSG_CALENDAR_EVENT_STATUS = std::move(other.CMSG_CALENDAR_EVENT_STATUS);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) {
        this->CMSG_CALENDAR_EVENT_MODERATOR_STATUS = std::move(other.CMSG_CALENDAR_EVENT_MODERATOR_STATUS);
    }
    if (opcode == Opcode::CMSG_CALENDAR_COMPLAIN) {
        this->CMSG_CALENDAR_COMPLAIN = std::move(other.CMSG_CALENDAR_COMPLAIN);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        this->CMSG_CALENDAR_GET_NUM_PENDING = std::move(other.CMSG_CALENDAR_GET_NUM_PENDING);
    }
    if (opcode == Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) {
        this->CMSG_UPDATE_MISSILE_TRAJECTORY = std::move(other.CMSG_UPDATE_MISSILE_TRAJECTORY);
    }
    if (opcode == Opcode::CMSG_COMPLETE_MOVIE) {
        this->CMSG_COMPLETE_MOVIE = std::move(other.CMSG_COMPLETE_MOVIE);
    }
    if (opcode == Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) {
        this->CMSG_QUERY_INSPECT_ACHIEVEMENTS = std::move(other.CMSG_QUERY_INSPECT_ACHIEVEMENTS);
    }
    if (opcode == Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) {
        this->CMSG_DISMISS_CONTROLLED_VEHICLE = std::move(other.CMSG_DISMISS_CONTROLLED_VEHICLE);
    }
    if (opcode == Opcode::CMSG_CHAR_CUSTOMIZE) {
        this->CMSG_CHAR_CUSTOMIZE = std::move(other.CMSG_CHAR_CUSTOMIZE);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_EXIT) {
        this->CMSG_REQUEST_VEHICLE_EXIT = std::move(other.CMSG_REQUEST_VEHICLE_EXIT);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) {
        this->CMSG_REQUEST_VEHICLE_PREV_SEAT = std::move(other.CMSG_REQUEST_VEHICLE_PREV_SEAT);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) {
        this->CMSG_REQUEST_VEHICLE_NEXT_SEAT = std::move(other.CMSG_REQUEST_VEHICLE_NEXT_SEAT);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) {
        this->CMSG_REQUEST_VEHICLE_SWITCH_SEAT = std::move(other.CMSG_REQUEST_VEHICLE_SWITCH_SEAT);
    }
    if (opcode == Opcode::CMSG_PET_LEARN_TALENT) {
        this->CMSG_PET_LEARN_TALENT = std::move(other.CMSG_PET_LEARN_TALENT);
    }
    if (opcode == Opcode::CMSG_GAMEOBJ_REPORT_USE) {
        this->CMSG_GAMEOBJ_REPORT_USE = std::move(other.CMSG_GAMEOBJ_REPORT_USE);
    }
    if (opcode == Opcode::CMSG_REMOVE_GLYPH) {
        this->CMSG_REMOVE_GLYPH = std::move(other.CMSG_REMOVE_GLYPH);
    }
    if (opcode == Opcode::CMSG_DISMISS_CRITTER) {
        this->CMSG_DISMISS_CRITTER = std::move(other.CMSG_DISMISS_CRITTER);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_PENDING_SALES) {
        this->CMSG_AUCTION_LIST_PENDING_SALES = std::move(other.CMSG_AUCTION_LIST_PENDING_SALES);
    }
    if (opcode == Opcode::CMSG_ENABLETAXI) {
        this->CMSG_ENABLETAXI = std::move(other.CMSG_ENABLETAXI);
    }
    if (opcode == Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) {
        this->CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE = std::move(other.CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE);
    }
    if (opcode == Opcode::CMSG_HEARTH_AND_RESURRECT) {
        this->CMSG_HEARTH_AND_RESURRECT = std::move(other.CMSG_HEARTH_AND_RESURRECT);
    }
    if (opcode == Opcode::CMSG_PLAYER_VEHICLE_ENTER) {
        this->CMSG_PLAYER_VEHICLE_ENTER = std::move(other.CMSG_PLAYER_VEHICLE_ENTER);
    }
    if (opcode == Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) {
        this->CMSG_CONTROLLER_EJECT_PASSENGER = std::move(other.CMSG_CONTROLLER_EJECT_PASSENGER);
    }
    if (opcode == Opcode::CMSG_ITEM_REFUND_INFO) {
        this->CMSG_ITEM_REFUND_INFO = std::move(other.CMSG_ITEM_REFUND_INFO);
    }
    if (opcode == Opcode::CMSG_ITEM_REFUND) {
        this->CMSG_ITEM_REFUND = std::move(other.CMSG_ITEM_REFUND);
    }
    if (opcode == Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) {
        this->CMSG_CORPSE_MAP_POSITION_QUERY = std::move(other.CMSG_CORPSE_MAP_POSITION_QUERY);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_SIGNUP) {
        this->CMSG_CALENDAR_EVENT_SIGNUP = std::move(other.CMSG_CALENDAR_EVENT_SIGNUP);
    }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_SAVE) {
        this->CMSG_EQUIPMENT_SET_SAVE = std::move(other.CMSG_EQUIPMENT_SET_SAVE);
    }
    if (opcode == Opcode::CMSG_UPDATE_PROJECTILE_POSITION) {
        this->CMSG_UPDATE_PROJECTILE_POSITION = std::move(other.CMSG_UPDATE_PROJECTILE_POSITION);
    }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS) {
        this->CMSG_LEARN_PREVIEW_TALENTS = std::move(other.CMSG_LEARN_PREVIEW_TALENTS);
    }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) {
        this->CMSG_LEARN_PREVIEW_TALENTS_PET = std::move(other.CMSG_LEARN_PREVIEW_TALENTS_PET);
    }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) {
        this->CMSG_MOVE_GRAVITY_DISABLE_ACK = std::move(other.CMSG_MOVE_GRAVITY_DISABLE_ACK);
    }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) {
        this->CMSG_MOVE_GRAVITY_ENABLE_ACK = std::move(other.CMSG_MOVE_GRAVITY_ENABLE_ACK);
    }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_USE) {
        this->CMSG_EQUIPMENT_SET_USE = std::move(other.CMSG_EQUIPMENT_SET_USE);
    }
    if (opcode == Opcode::CMSG_CHAR_FACTION_CHANGE) {
        this->CMSG_CHAR_FACTION_CHANGE = std::move(other.CMSG_CHAR_FACTION_CHANGE);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) {
        this->CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE = std::move(other.CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) {
        this->CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE = std::move(other.CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) {
        this->CMSG_BATTLEFIELD_MGR_EXIT_REQUEST = std::move(other.CMSG_BATTLEFIELD_MGR_EXIT_REQUEST);
    }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        this->MSG_SET_RAID_DIFFICULTY = std::move(other.MSG_SET_RAID_DIFFICULTY);
    }
    if (opcode == Opcode::CMSG_GMRESPONSE_RESOLVE) {
        this->CMSG_GMRESPONSE_RESOLVE = std::move(other.CMSG_GMRESPONSE_RESOLVE);
    }
    if (opcode == Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        this->CMSG_WORLD_STATE_UI_TIMER_UPDATE = std::move(other.CMSG_WORLD_STATE_UI_TIMER_UPDATE);
    }
    if (opcode == Opcode::CMSG_CHAR_RACE_CHANGE) {
        this->CMSG_CHAR_RACE_CHANGE = std::move(other.CMSG_CHAR_RACE_CHANGE);
    }
    if (opcode == Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) {
        this->CMSG_READY_FOR_ACCOUNT_DATA_TIMES = std::move(other.CMSG_READY_FOR_ACCOUNT_DATA_TIMES);
    }
    if (opcode == Opcode::CMSG_QUERY_QUESTS_COMPLETED) {
        this->CMSG_QUERY_QUESTS_COMPLETED = std::move(other.CMSG_QUERY_QUESTS_COMPLETED);
    }
    if (opcode == Opcode::CMSG_GM_REPORT_LAG) {
        this->CMSG_GM_REPORT_LAG = std::move(other.CMSG_GM_REPORT_LAG);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) {
        this->CMSG_MOVE_SET_COLLISION_HGT_ACK = std::move(other.CMSG_MOVE_SET_COLLISION_HGT_ACK);
    }
}

/* 5 move assignment */
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode& ClientOpcode::operator=(ClientOpcode&& other) noexcept {
    this->opcode = other.opcode;
    other.opcode = Opcode::NONE;
    if (opcode == Opcode::CMSG_BOOTME) {
        wrath::CMSG_BOOTME CMSG_BOOTMEswap(std::move(other.CMSG_BOOTME));
        std::swap(this->CMSG_BOOTME, CMSG_BOOTMEswap);
    }
    if (opcode == Opcode::CMSG_DBLOOKUP) {
        wrath::CMSG_DBLOOKUP CMSG_DBLOOKUPswap(std::move(other.CMSG_DBLOOKUP));
        std::swap(this->CMSG_DBLOOKUP, CMSG_DBLOOKUPswap);
    }
    if (opcode == Opcode::CMSG_WORLD_TELEPORT) {
        wrath::CMSG_WORLD_TELEPORT CMSG_WORLD_TELEPORTswap(std::move(other.CMSG_WORLD_TELEPORT));
        std::swap(this->CMSG_WORLD_TELEPORT, CMSG_WORLD_TELEPORTswap);
    }
    if (opcode == Opcode::CMSG_TELEPORT_TO_UNIT) {
        wrath::CMSG_TELEPORT_TO_UNIT CMSG_TELEPORT_TO_UNITswap(std::move(other.CMSG_TELEPORT_TO_UNIT));
        std::swap(this->CMSG_TELEPORT_TO_UNIT, CMSG_TELEPORT_TO_UNITswap);
    }
    if (opcode == Opcode::CMSG_CHAR_CREATE) {
        wrath::CMSG_CHAR_CREATE CMSG_CHAR_CREATEswap(std::move(other.CMSG_CHAR_CREATE));
        std::swap(this->CMSG_CHAR_CREATE, CMSG_CHAR_CREATEswap);
    }
    if (opcode == Opcode::CMSG_CHAR_ENUM) {
        wrath::CMSG_CHAR_ENUM CMSG_CHAR_ENUMswap(std::move(other.CMSG_CHAR_ENUM));
        std::swap(this->CMSG_CHAR_ENUM, CMSG_CHAR_ENUMswap);
    }
    if (opcode == Opcode::CMSG_CHAR_DELETE) {
        wrath::CMSG_CHAR_DELETE CMSG_CHAR_DELETEswap(std::move(other.CMSG_CHAR_DELETE));
        std::swap(this->CMSG_CHAR_DELETE, CMSG_CHAR_DELETEswap);
    }
    if (opcode == Opcode::CMSG_PLAYER_LOGIN) {
        wrath::CMSG_PLAYER_LOGIN CMSG_PLAYER_LOGINswap(std::move(other.CMSG_PLAYER_LOGIN));
        std::swap(this->CMSG_PLAYER_LOGIN, CMSG_PLAYER_LOGINswap);
    }
    if (opcode == Opcode::CMSG_PLAYER_LOGOUT) {
        wrath::CMSG_PLAYER_LOGOUT CMSG_PLAYER_LOGOUTswap(std::move(other.CMSG_PLAYER_LOGOUT));
        std::swap(this->CMSG_PLAYER_LOGOUT, CMSG_PLAYER_LOGOUTswap);
    }
    if (opcode == Opcode::CMSG_LOGOUT_REQUEST) {
        wrath::CMSG_LOGOUT_REQUEST CMSG_LOGOUT_REQUESTswap(std::move(other.CMSG_LOGOUT_REQUEST));
        std::swap(this->CMSG_LOGOUT_REQUEST, CMSG_LOGOUT_REQUESTswap);
    }
    if (opcode == Opcode::CMSG_LOGOUT_CANCEL) {
        wrath::CMSG_LOGOUT_CANCEL CMSG_LOGOUT_CANCELswap(std::move(other.CMSG_LOGOUT_CANCEL));
        std::swap(this->CMSG_LOGOUT_CANCEL, CMSG_LOGOUT_CANCELswap);
    }
    if (opcode == Opcode::CMSG_NAME_QUERY) {
        wrath::CMSG_NAME_QUERY CMSG_NAME_QUERYswap(std::move(other.CMSG_NAME_QUERY));
        std::swap(this->CMSG_NAME_QUERY, CMSG_NAME_QUERYswap);
    }
    if (opcode == Opcode::CMSG_PET_NAME_QUERY) {
        wrath::CMSG_PET_NAME_QUERY CMSG_PET_NAME_QUERYswap(std::move(other.CMSG_PET_NAME_QUERY));
        std::swap(this->CMSG_PET_NAME_QUERY, CMSG_PET_NAME_QUERYswap);
    }
    if (opcode == Opcode::CMSG_GUILD_QUERY) {
        wrath::CMSG_GUILD_QUERY CMSG_GUILD_QUERYswap(std::move(other.CMSG_GUILD_QUERY));
        std::swap(this->CMSG_GUILD_QUERY, CMSG_GUILD_QUERYswap);
    }
    if (opcode == Opcode::CMSG_ITEM_QUERY_SINGLE) {
        wrath::CMSG_ITEM_QUERY_SINGLE CMSG_ITEM_QUERY_SINGLEswap(std::move(other.CMSG_ITEM_QUERY_SINGLE));
        std::swap(this->CMSG_ITEM_QUERY_SINGLE, CMSG_ITEM_QUERY_SINGLEswap);
    }
    if (opcode == Opcode::CMSG_PAGE_TEXT_QUERY) {
        wrath::CMSG_PAGE_TEXT_QUERY CMSG_PAGE_TEXT_QUERYswap(std::move(other.CMSG_PAGE_TEXT_QUERY));
        std::swap(this->CMSG_PAGE_TEXT_QUERY, CMSG_PAGE_TEXT_QUERYswap);
    }
    if (opcode == Opcode::CMSG_QUEST_QUERY) {
        wrath::CMSG_QUEST_QUERY CMSG_QUEST_QUERYswap(std::move(other.CMSG_QUEST_QUERY));
        std::swap(this->CMSG_QUEST_QUERY, CMSG_QUEST_QUERYswap);
    }
    if (opcode == Opcode::CMSG_GAMEOBJECT_QUERY) {
        wrath::CMSG_GAMEOBJECT_QUERY CMSG_GAMEOBJECT_QUERYswap(std::move(other.CMSG_GAMEOBJECT_QUERY));
        std::swap(this->CMSG_GAMEOBJECT_QUERY, CMSG_GAMEOBJECT_QUERYswap);
    }
    if (opcode == Opcode::CMSG_CREATURE_QUERY) {
        wrath::CMSG_CREATURE_QUERY CMSG_CREATURE_QUERYswap(std::move(other.CMSG_CREATURE_QUERY));
        std::swap(this->CMSG_CREATURE_QUERY, CMSG_CREATURE_QUERYswap);
    }
    if (opcode == Opcode::CMSG_WHO) {
        wrath::CMSG_WHO CMSG_WHOswap(std::move(other.CMSG_WHO));
        std::swap(this->CMSG_WHO, CMSG_WHOswap);
    }
    if (opcode == Opcode::CMSG_WHOIS) {
        wrath::CMSG_WHOIS CMSG_WHOISswap(std::move(other.CMSG_WHOIS));
        std::swap(this->CMSG_WHOIS, CMSG_WHOISswap);
    }
    if (opcode == Opcode::CMSG_CONTACT_LIST) {
        wrath::CMSG_CONTACT_LIST CMSG_CONTACT_LISTswap(std::move(other.CMSG_CONTACT_LIST));
        std::swap(this->CMSG_CONTACT_LIST, CMSG_CONTACT_LISTswap);
    }
    if (opcode == Opcode::CMSG_ADD_FRIEND) {
        wrath::CMSG_ADD_FRIEND CMSG_ADD_FRIENDswap(std::move(other.CMSG_ADD_FRIEND));
        std::swap(this->CMSG_ADD_FRIEND, CMSG_ADD_FRIENDswap);
    }
    if (opcode == Opcode::CMSG_DEL_FRIEND) {
        wrath::CMSG_DEL_FRIEND CMSG_DEL_FRIENDswap(std::move(other.CMSG_DEL_FRIEND));
        std::swap(this->CMSG_DEL_FRIEND, CMSG_DEL_FRIENDswap);
    }
    if (opcode == Opcode::CMSG_SET_CONTACT_NOTES) {
        wrath::CMSG_SET_CONTACT_NOTES CMSG_SET_CONTACT_NOTESswap(std::move(other.CMSG_SET_CONTACT_NOTES));
        std::swap(this->CMSG_SET_CONTACT_NOTES, CMSG_SET_CONTACT_NOTESswap);
    }
    if (opcode == Opcode::CMSG_ADD_IGNORE) {
        wrath::CMSG_ADD_IGNORE CMSG_ADD_IGNOREswap(std::move(other.CMSG_ADD_IGNORE));
        std::swap(this->CMSG_ADD_IGNORE, CMSG_ADD_IGNOREswap);
    }
    if (opcode == Opcode::CMSG_DEL_IGNORE) {
        wrath::CMSG_DEL_IGNORE CMSG_DEL_IGNOREswap(std::move(other.CMSG_DEL_IGNORE));
        std::swap(this->CMSG_DEL_IGNORE, CMSG_DEL_IGNOREswap);
    }
    if (opcode == Opcode::CMSG_GROUP_INVITE) {
        wrath::CMSG_GROUP_INVITE CMSG_GROUP_INVITEswap(std::move(other.CMSG_GROUP_INVITE));
        std::swap(this->CMSG_GROUP_INVITE, CMSG_GROUP_INVITEswap);
    }
    if (opcode == Opcode::CMSG_GROUP_CANCEL) {
        wrath::CMSG_GROUP_CANCEL CMSG_GROUP_CANCELswap(std::move(other.CMSG_GROUP_CANCEL));
        std::swap(this->CMSG_GROUP_CANCEL, CMSG_GROUP_CANCELswap);
    }
    if (opcode == Opcode::CMSG_GROUP_ACCEPT) {
        wrath::CMSG_GROUP_ACCEPT CMSG_GROUP_ACCEPTswap(std::move(other.CMSG_GROUP_ACCEPT));
        std::swap(this->CMSG_GROUP_ACCEPT, CMSG_GROUP_ACCEPTswap);
    }
    if (opcode == Opcode::CMSG_GROUP_DECLINE) {
        wrath::CMSG_GROUP_DECLINE CMSG_GROUP_DECLINEswap(std::move(other.CMSG_GROUP_DECLINE));
        std::swap(this->CMSG_GROUP_DECLINE, CMSG_GROUP_DECLINEswap);
    }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE) {
        wrath::CMSG_GROUP_UNINVITE CMSG_GROUP_UNINVITEswap(std::move(other.CMSG_GROUP_UNINVITE));
        std::swap(this->CMSG_GROUP_UNINVITE, CMSG_GROUP_UNINVITEswap);
    }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE_GUID) {
        wrath::CMSG_GROUP_UNINVITE_GUID CMSG_GROUP_UNINVITE_GUIDswap(std::move(other.CMSG_GROUP_UNINVITE_GUID));
        std::swap(this->CMSG_GROUP_UNINVITE_GUID, CMSG_GROUP_UNINVITE_GUIDswap);
    }
    if (opcode == Opcode::CMSG_GROUP_SET_LEADER) {
        wrath::CMSG_GROUP_SET_LEADER CMSG_GROUP_SET_LEADERswap(std::move(other.CMSG_GROUP_SET_LEADER));
        std::swap(this->CMSG_GROUP_SET_LEADER, CMSG_GROUP_SET_LEADERswap);
    }
    if (opcode == Opcode::CMSG_LOOT_METHOD) {
        wrath::CMSG_LOOT_METHOD CMSG_LOOT_METHODswap(std::move(other.CMSG_LOOT_METHOD));
        std::swap(this->CMSG_LOOT_METHOD, CMSG_LOOT_METHODswap);
    }
    if (opcode == Opcode::CMSG_GROUP_DISBAND) {
        wrath::CMSG_GROUP_DISBAND CMSG_GROUP_DISBANDswap(std::move(other.CMSG_GROUP_DISBAND));
        std::swap(this->CMSG_GROUP_DISBAND, CMSG_GROUP_DISBANDswap);
    }
    if (opcode == Opcode::CMSG_GUILD_CREATE) {
        wrath::CMSG_GUILD_CREATE CMSG_GUILD_CREATEswap(std::move(other.CMSG_GUILD_CREATE));
        std::swap(this->CMSG_GUILD_CREATE, CMSG_GUILD_CREATEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_INVITE) {
        wrath::CMSG_GUILD_INVITE CMSG_GUILD_INVITEswap(std::move(other.CMSG_GUILD_INVITE));
        std::swap(this->CMSG_GUILD_INVITE, CMSG_GUILD_INVITEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_ACCEPT) {
        wrath::CMSG_GUILD_ACCEPT CMSG_GUILD_ACCEPTswap(std::move(other.CMSG_GUILD_ACCEPT));
        std::swap(this->CMSG_GUILD_ACCEPT, CMSG_GUILD_ACCEPTswap);
    }
    if (opcode == Opcode::CMSG_GUILD_DECLINE) {
        wrath::CMSG_GUILD_DECLINE CMSG_GUILD_DECLINEswap(std::move(other.CMSG_GUILD_DECLINE));
        std::swap(this->CMSG_GUILD_DECLINE, CMSG_GUILD_DECLINEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_INFO) {
        wrath::CMSG_GUILD_INFO CMSG_GUILD_INFOswap(std::move(other.CMSG_GUILD_INFO));
        std::swap(this->CMSG_GUILD_INFO, CMSG_GUILD_INFOswap);
    }
    if (opcode == Opcode::CMSG_GUILD_ROSTER) {
        wrath::CMSG_GUILD_ROSTER CMSG_GUILD_ROSTERswap(std::move(other.CMSG_GUILD_ROSTER));
        std::swap(this->CMSG_GUILD_ROSTER, CMSG_GUILD_ROSTERswap);
    }
    if (opcode == Opcode::CMSG_GUILD_PROMOTE) {
        wrath::CMSG_GUILD_PROMOTE CMSG_GUILD_PROMOTEswap(std::move(other.CMSG_GUILD_PROMOTE));
        std::swap(this->CMSG_GUILD_PROMOTE, CMSG_GUILD_PROMOTEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_DEMOTE) {
        wrath::CMSG_GUILD_DEMOTE CMSG_GUILD_DEMOTEswap(std::move(other.CMSG_GUILD_DEMOTE));
        std::swap(this->CMSG_GUILD_DEMOTE, CMSG_GUILD_DEMOTEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_LEAVE) {
        wrath::CMSG_GUILD_LEAVE CMSG_GUILD_LEAVEswap(std::move(other.CMSG_GUILD_LEAVE));
        std::swap(this->CMSG_GUILD_LEAVE, CMSG_GUILD_LEAVEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_REMOVE) {
        wrath::CMSG_GUILD_REMOVE CMSG_GUILD_REMOVEswap(std::move(other.CMSG_GUILD_REMOVE));
        std::swap(this->CMSG_GUILD_REMOVE, CMSG_GUILD_REMOVEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_DISBAND) {
        wrath::CMSG_GUILD_DISBAND CMSG_GUILD_DISBANDswap(std::move(other.CMSG_GUILD_DISBAND));
        std::swap(this->CMSG_GUILD_DISBAND, CMSG_GUILD_DISBANDswap);
    }
    if (opcode == Opcode::CMSG_GUILD_LEADER) {
        wrath::CMSG_GUILD_LEADER CMSG_GUILD_LEADERswap(std::move(other.CMSG_GUILD_LEADER));
        std::swap(this->CMSG_GUILD_LEADER, CMSG_GUILD_LEADERswap);
    }
    if (opcode == Opcode::CMSG_GUILD_MOTD) {
        wrath::CMSG_GUILD_MOTD CMSG_GUILD_MOTDswap(std::move(other.CMSG_GUILD_MOTD));
        std::swap(this->CMSG_GUILD_MOTD, CMSG_GUILD_MOTDswap);
    }
    if (opcode == Opcode::CMSG_MESSAGECHAT) {
        wrath::CMSG_MESSAGECHAT CMSG_MESSAGECHATswap(std::move(other.CMSG_MESSAGECHAT));
        std::swap(this->CMSG_MESSAGECHAT, CMSG_MESSAGECHATswap);
    }
    if (opcode == Opcode::CMSG_JOIN_CHANNEL) {
        wrath::CMSG_JOIN_CHANNEL CMSG_JOIN_CHANNELswap(std::move(other.CMSG_JOIN_CHANNEL));
        std::swap(this->CMSG_JOIN_CHANNEL, CMSG_JOIN_CHANNELswap);
    }
    if (opcode == Opcode::CMSG_LEAVE_CHANNEL) {
        wrath::CMSG_LEAVE_CHANNEL CMSG_LEAVE_CHANNELswap(std::move(other.CMSG_LEAVE_CHANNEL));
        std::swap(this->CMSG_LEAVE_CHANNEL, CMSG_LEAVE_CHANNELswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_LIST) {
        wrath::CMSG_CHANNEL_LIST CMSG_CHANNEL_LISTswap(std::move(other.CMSG_CHANNEL_LIST));
        std::swap(this->CMSG_CHANNEL_LIST, CMSG_CHANNEL_LISTswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_PASSWORD) {
        wrath::CMSG_CHANNEL_PASSWORD CMSG_CHANNEL_PASSWORDswap(std::move(other.CMSG_CHANNEL_PASSWORD));
        std::swap(this->CMSG_CHANNEL_PASSWORD, CMSG_CHANNEL_PASSWORDswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_SET_OWNER) {
        wrath::CMSG_CHANNEL_SET_OWNER CMSG_CHANNEL_SET_OWNERswap(std::move(other.CMSG_CHANNEL_SET_OWNER));
        std::swap(this->CMSG_CHANNEL_SET_OWNER, CMSG_CHANNEL_SET_OWNERswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_OWNER) {
        wrath::CMSG_CHANNEL_OWNER CMSG_CHANNEL_OWNERswap(std::move(other.CMSG_CHANNEL_OWNER));
        std::swap(this->CMSG_CHANNEL_OWNER, CMSG_CHANNEL_OWNERswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATOR) {
        wrath::CMSG_CHANNEL_MODERATOR CMSG_CHANNEL_MODERATORswap(std::move(other.CMSG_CHANNEL_MODERATOR));
        std::swap(this->CMSG_CHANNEL_MODERATOR, CMSG_CHANNEL_MODERATORswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNMODERATOR) {
        wrath::CMSG_CHANNEL_UNMODERATOR CMSG_CHANNEL_UNMODERATORswap(std::move(other.CMSG_CHANNEL_UNMODERATOR));
        std::swap(this->CMSG_CHANNEL_UNMODERATOR, CMSG_CHANNEL_UNMODERATORswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MUTE) {
        wrath::CMSG_CHANNEL_MUTE CMSG_CHANNEL_MUTEswap(std::move(other.CMSG_CHANNEL_MUTE));
        std::swap(this->CMSG_CHANNEL_MUTE, CMSG_CHANNEL_MUTEswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNMUTE) {
        wrath::CMSG_CHANNEL_UNMUTE CMSG_CHANNEL_UNMUTEswap(std::move(other.CMSG_CHANNEL_UNMUTE));
        std::swap(this->CMSG_CHANNEL_UNMUTE, CMSG_CHANNEL_UNMUTEswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_INVITE) {
        wrath::CMSG_CHANNEL_INVITE CMSG_CHANNEL_INVITEswap(std::move(other.CMSG_CHANNEL_INVITE));
        std::swap(this->CMSG_CHANNEL_INVITE, CMSG_CHANNEL_INVITEswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_KICK) {
        wrath::CMSG_CHANNEL_KICK CMSG_CHANNEL_KICKswap(std::move(other.CMSG_CHANNEL_KICK));
        std::swap(this->CMSG_CHANNEL_KICK, CMSG_CHANNEL_KICKswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_BAN) {
        wrath::CMSG_CHANNEL_BAN CMSG_CHANNEL_BANswap(std::move(other.CMSG_CHANNEL_BAN));
        std::swap(this->CMSG_CHANNEL_BAN, CMSG_CHANNEL_BANswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_UNBAN) {
        wrath::CMSG_CHANNEL_UNBAN CMSG_CHANNEL_UNBANswap(std::move(other.CMSG_CHANNEL_UNBAN));
        std::swap(this->CMSG_CHANNEL_UNBAN, CMSG_CHANNEL_UNBANswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) {
        wrath::CMSG_CHANNEL_ANNOUNCEMENTS CMSG_CHANNEL_ANNOUNCEMENTSswap(std::move(other.CMSG_CHANNEL_ANNOUNCEMENTS));
        std::swap(this->CMSG_CHANNEL_ANNOUNCEMENTS, CMSG_CHANNEL_ANNOUNCEMENTSswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATE) {
        wrath::CMSG_CHANNEL_MODERATE CMSG_CHANNEL_MODERATEswap(std::move(other.CMSG_CHANNEL_MODERATE));
        std::swap(this->CMSG_CHANNEL_MODERATE, CMSG_CHANNEL_MODERATEswap);
    }
    if (opcode == Opcode::CMSG_USE_ITEM) {
        wrath::CMSG_USE_ITEM CMSG_USE_ITEMswap(std::move(other.CMSG_USE_ITEM));
        std::swap(this->CMSG_USE_ITEM, CMSG_USE_ITEMswap);
    }
    if (opcode == Opcode::CMSG_OPEN_ITEM) {
        wrath::CMSG_OPEN_ITEM CMSG_OPEN_ITEMswap(std::move(other.CMSG_OPEN_ITEM));
        std::swap(this->CMSG_OPEN_ITEM, CMSG_OPEN_ITEMswap);
    }
    if (opcode == Opcode::CMSG_READ_ITEM) {
        wrath::CMSG_READ_ITEM CMSG_READ_ITEMswap(std::move(other.CMSG_READ_ITEM));
        std::swap(this->CMSG_READ_ITEM, CMSG_READ_ITEMswap);
    }
    if (opcode == Opcode::CMSG_GAMEOBJ_USE) {
        wrath::CMSG_GAMEOBJ_USE CMSG_GAMEOBJ_USEswap(std::move(other.CMSG_GAMEOBJ_USE));
        std::swap(this->CMSG_GAMEOBJ_USE, CMSG_GAMEOBJ_USEswap);
    }
    if (opcode == Opcode::CMSG_AREATRIGGER) {
        wrath::CMSG_AREATRIGGER CMSG_AREATRIGGERswap(std::move(other.CMSG_AREATRIGGER));
        std::swap(this->CMSG_AREATRIGGER, CMSG_AREATRIGGERswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        wrath::MSG_MOVE_START_FORWARD MSG_MOVE_START_FORWARDswap(std::move(other.MSG_MOVE_START_FORWARD));
        std::swap(this->MSG_MOVE_START_FORWARD, MSG_MOVE_START_FORWARDswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        wrath::MSG_MOVE_START_BACKWARD MSG_MOVE_START_BACKWARDswap(std::move(other.MSG_MOVE_START_BACKWARD));
        std::swap(this->MSG_MOVE_START_BACKWARD, MSG_MOVE_START_BACKWARDswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP) {
        wrath::MSG_MOVE_STOP MSG_MOVE_STOPswap(std::move(other.MSG_MOVE_STOP));
        std::swap(this->MSG_MOVE_STOP, MSG_MOVE_STOPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        wrath::MSG_MOVE_START_STRAFE_LEFT MSG_MOVE_START_STRAFE_LEFTswap(std::move(other.MSG_MOVE_START_STRAFE_LEFT));
        std::swap(this->MSG_MOVE_START_STRAFE_LEFT, MSG_MOVE_START_STRAFE_LEFTswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        wrath::MSG_MOVE_START_STRAFE_RIGHT MSG_MOVE_START_STRAFE_RIGHTswap(std::move(other.MSG_MOVE_START_STRAFE_RIGHT));
        std::swap(this->MSG_MOVE_START_STRAFE_RIGHT, MSG_MOVE_START_STRAFE_RIGHTswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        wrath::MSG_MOVE_STOP_STRAFE MSG_MOVE_STOP_STRAFEswap(std::move(other.MSG_MOVE_STOP_STRAFE));
        std::swap(this->MSG_MOVE_STOP_STRAFE, MSG_MOVE_STOP_STRAFEswap);
    }
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        wrath::MSG_MOVE_JUMP MSG_MOVE_JUMPswap(std::move(other.MSG_MOVE_JUMP));
        std::swap(this->MSG_MOVE_JUMP, MSG_MOVE_JUMPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        wrath::MSG_MOVE_START_TURN_LEFT MSG_MOVE_START_TURN_LEFTswap(std::move(other.MSG_MOVE_START_TURN_LEFT));
        std::swap(this->MSG_MOVE_START_TURN_LEFT, MSG_MOVE_START_TURN_LEFTswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        wrath::MSG_MOVE_START_TURN_RIGHT MSG_MOVE_START_TURN_RIGHTswap(std::move(other.MSG_MOVE_START_TURN_RIGHT));
        std::swap(this->MSG_MOVE_START_TURN_RIGHT, MSG_MOVE_START_TURN_RIGHTswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        wrath::MSG_MOVE_STOP_TURN MSG_MOVE_STOP_TURNswap(std::move(other.MSG_MOVE_STOP_TURN));
        std::swap(this->MSG_MOVE_STOP_TURN, MSG_MOVE_STOP_TURNswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        wrath::MSG_MOVE_START_PITCH_UP MSG_MOVE_START_PITCH_UPswap(std::move(other.MSG_MOVE_START_PITCH_UP));
        std::swap(this->MSG_MOVE_START_PITCH_UP, MSG_MOVE_START_PITCH_UPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        wrath::MSG_MOVE_START_PITCH_DOWN MSG_MOVE_START_PITCH_DOWNswap(std::move(other.MSG_MOVE_START_PITCH_DOWN));
        std::swap(this->MSG_MOVE_START_PITCH_DOWN, MSG_MOVE_START_PITCH_DOWNswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        wrath::MSG_MOVE_STOP_PITCH MSG_MOVE_STOP_PITCHswap(std::move(other.MSG_MOVE_STOP_PITCH));
        std::swap(this->MSG_MOVE_STOP_PITCH, MSG_MOVE_STOP_PITCHswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        wrath::MSG_MOVE_SET_RUN_MODE MSG_MOVE_SET_RUN_MODEswap(std::move(other.MSG_MOVE_SET_RUN_MODE));
        std::swap(this->MSG_MOVE_SET_RUN_MODE, MSG_MOVE_SET_RUN_MODEswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        wrath::MSG_MOVE_SET_WALK_MODE MSG_MOVE_SET_WALK_MODEswap(std::move(other.MSG_MOVE_SET_WALK_MODE));
        std::swap(this->MSG_MOVE_SET_WALK_MODE, MSG_MOVE_SET_WALK_MODEswap);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT) {
        wrath::MSG_MOVE_TELEPORT_Server MSG_MOVE_TELEPORTswap(std::move(other.MSG_MOVE_TELEPORT));
        std::swap(this->MSG_MOVE_TELEPORT, MSG_MOVE_TELEPORTswap);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        wrath::MSG_MOVE_TELEPORT_ACK_Client MSG_MOVE_TELEPORT_ACKswap(std::move(other.MSG_MOVE_TELEPORT_ACK));
        std::swap(this->MSG_MOVE_TELEPORT_ACK, MSG_MOVE_TELEPORT_ACKswap);
    }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        wrath::MSG_MOVE_FALL_LAND MSG_MOVE_FALL_LANDswap(std::move(other.MSG_MOVE_FALL_LAND));
        std::swap(this->MSG_MOVE_FALL_LAND, MSG_MOVE_FALL_LANDswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        wrath::MSG_MOVE_START_SWIM MSG_MOVE_START_SWIMswap(std::move(other.MSG_MOVE_START_SWIM));
        std::swap(this->MSG_MOVE_START_SWIM, MSG_MOVE_START_SWIMswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        wrath::MSG_MOVE_STOP_SWIM MSG_MOVE_STOP_SWIMswap(std::move(other.MSG_MOVE_STOP_SWIM));
        std::swap(this->MSG_MOVE_STOP_SWIM, MSG_MOVE_STOP_SWIMswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        wrath::MSG_MOVE_SET_FACING MSG_MOVE_SET_FACINGswap(std::move(other.MSG_MOVE_SET_FACING));
        std::swap(this->MSG_MOVE_SET_FACING, MSG_MOVE_SET_FACINGswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        wrath::MSG_MOVE_SET_PITCH MSG_MOVE_SET_PITCHswap(std::move(other.MSG_MOVE_SET_PITCH));
        std::swap(this->MSG_MOVE_SET_PITCH, MSG_MOVE_SET_PITCHswap);
    }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        wrath::MSG_MOVE_WORLDPORT_ACK MSG_MOVE_WORLDPORT_ACKswap(std::move(other.MSG_MOVE_WORLDPORT_ACK));
        std::swap(this->MSG_MOVE_WORLDPORT_ACK, MSG_MOVE_WORLDPORT_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_RAW_POSITION) {
        wrath::CMSG_MOVE_SET_RAW_POSITION CMSG_MOVE_SET_RAW_POSITIONswap(std::move(other.CMSG_MOVE_SET_RAW_POSITION));
        std::swap(this->CMSG_MOVE_SET_RAW_POSITION, CMSG_MOVE_SET_RAW_POSITIONswap);
    }
    if (opcode == Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK CMSG_FORCE_RUN_SPEED_CHANGE_ACKswap(std::move(other.CMSG_FORCE_RUN_SPEED_CHANGE_ACK));
        std::swap(this->CMSG_FORCE_RUN_SPEED_CHANGE_ACK, CMSG_FORCE_RUN_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACKswap(std::move(other.CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK));
        std::swap(this->CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK, CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_SPEED_CHANGE_ACKswap(std::move(other.CMSG_FORCE_SWIM_SPEED_CHANGE_ACK));
        std::swap(this->CMSG_FORCE_SWIM_SPEED_CHANGE_ACK, CMSG_FORCE_SWIM_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_MOVE_ROOT_ACK) {
        wrath::CMSG_FORCE_MOVE_ROOT_ACK CMSG_FORCE_MOVE_ROOT_ACKswap(std::move(other.CMSG_FORCE_MOVE_ROOT_ACK));
        std::swap(this->CMSG_FORCE_MOVE_ROOT_ACK, CMSG_FORCE_MOVE_ROOT_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) {
        wrath::CMSG_FORCE_MOVE_UNROOT_ACK CMSG_FORCE_MOVE_UNROOT_ACKswap(std::move(other.CMSG_FORCE_MOVE_UNROOT_ACK));
        std::swap(this->CMSG_FORCE_MOVE_UNROOT_ACK, CMSG_FORCE_MOVE_UNROOT_ACKswap);
    }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        wrath::MSG_MOVE_HEARTBEAT MSG_MOVE_HEARTBEATswap(std::move(other.MSG_MOVE_HEARTBEAT));
        std::swap(this->MSG_MOVE_HEARTBEAT, MSG_MOVE_HEARTBEATswap);
    }
    if (opcode == Opcode::CMSG_MOVE_KNOCK_BACK_ACK) {
        wrath::CMSG_MOVE_KNOCK_BACK_ACK CMSG_MOVE_KNOCK_BACK_ACKswap(std::move(other.CMSG_MOVE_KNOCK_BACK_ACK));
        std::swap(this->CMSG_MOVE_KNOCK_BACK_ACK, CMSG_MOVE_KNOCK_BACK_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_HOVER_ACK) {
        wrath::CMSG_MOVE_HOVER_ACK CMSG_MOVE_HOVER_ACKswap(std::move(other.CMSG_MOVE_HOVER_ACK));
        std::swap(this->CMSG_MOVE_HOVER_ACK, CMSG_MOVE_HOVER_ACKswap);
    }
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        wrath::MSG_MOVE_HOVER MSG_MOVE_HOVERswap(std::move(other.MSG_MOVE_HOVER));
        std::swap(this->MSG_MOVE_HOVER, MSG_MOVE_HOVERswap);
    }
    if (opcode == Opcode::CMSG_NEXT_CINEMATIC_CAMERA) {
        wrath::CMSG_NEXT_CINEMATIC_CAMERA CMSG_NEXT_CINEMATIC_CAMERAswap(std::move(other.CMSG_NEXT_CINEMATIC_CAMERA));
        std::swap(this->CMSG_NEXT_CINEMATIC_CAMERA, CMSG_NEXT_CINEMATIC_CAMERAswap);
    }
    if (opcode == Opcode::CMSG_COMPLETE_CINEMATIC) {
        wrath::CMSG_COMPLETE_CINEMATIC CMSG_COMPLETE_CINEMATICswap(std::move(other.CMSG_COMPLETE_CINEMATIC));
        std::swap(this->CMSG_COMPLETE_CINEMATIC, CMSG_COMPLETE_CINEMATICswap);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_FLAG) {
        wrath::CMSG_TUTORIAL_FLAG CMSG_TUTORIAL_FLAGswap(std::move(other.CMSG_TUTORIAL_FLAG));
        std::swap(this->CMSG_TUTORIAL_FLAG, CMSG_TUTORIAL_FLAGswap);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_CLEAR) {
        wrath::CMSG_TUTORIAL_CLEAR CMSG_TUTORIAL_CLEARswap(std::move(other.CMSG_TUTORIAL_CLEAR));
        std::swap(this->CMSG_TUTORIAL_CLEAR, CMSG_TUTORIAL_CLEARswap);
    }
    if (opcode == Opcode::CMSG_TUTORIAL_RESET) {
        wrath::CMSG_TUTORIAL_RESET CMSG_TUTORIAL_RESETswap(std::move(other.CMSG_TUTORIAL_RESET));
        std::swap(this->CMSG_TUTORIAL_RESET, CMSG_TUTORIAL_RESETswap);
    }
    if (opcode == Opcode::CMSG_STANDSTATECHANGE) {
        wrath::CMSG_STANDSTATECHANGE CMSG_STANDSTATECHANGEswap(std::move(other.CMSG_STANDSTATECHANGE));
        std::swap(this->CMSG_STANDSTATECHANGE, CMSG_STANDSTATECHANGEswap);
    }
    if (opcode == Opcode::CMSG_EMOTE) {
        wrath::CMSG_EMOTE CMSG_EMOTEswap(std::move(other.CMSG_EMOTE));
        std::swap(this->CMSG_EMOTE, CMSG_EMOTEswap);
    }
    if (opcode == Opcode::CMSG_TEXT_EMOTE) {
        wrath::CMSG_TEXT_EMOTE CMSG_TEXT_EMOTEswap(std::move(other.CMSG_TEXT_EMOTE));
        std::swap(this->CMSG_TEXT_EMOTE, CMSG_TEXT_EMOTEswap);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_LOOT_ITEM) {
        wrath::CMSG_AUTOSTORE_LOOT_ITEM CMSG_AUTOSTORE_LOOT_ITEMswap(std::move(other.CMSG_AUTOSTORE_LOOT_ITEM));
        std::swap(this->CMSG_AUTOSTORE_LOOT_ITEM, CMSG_AUTOSTORE_LOOT_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM) {
        wrath::CMSG_AUTOEQUIP_ITEM CMSG_AUTOEQUIP_ITEMswap(std::move(other.CMSG_AUTOEQUIP_ITEM));
        std::swap(this->CMSG_AUTOEQUIP_ITEM, CMSG_AUTOEQUIP_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_BAG_ITEM) {
        wrath::CMSG_AUTOSTORE_BAG_ITEM CMSG_AUTOSTORE_BAG_ITEMswap(std::move(other.CMSG_AUTOSTORE_BAG_ITEM));
        std::swap(this->CMSG_AUTOSTORE_BAG_ITEM, CMSG_AUTOSTORE_BAG_ITEMswap);
    }
    if (opcode == Opcode::CMSG_SWAP_ITEM) {
        wrath::CMSG_SWAP_ITEM CMSG_SWAP_ITEMswap(std::move(other.CMSG_SWAP_ITEM));
        std::swap(this->CMSG_SWAP_ITEM, CMSG_SWAP_ITEMswap);
    }
    if (opcode == Opcode::CMSG_SWAP_INV_ITEM) {
        wrath::CMSG_SWAP_INV_ITEM CMSG_SWAP_INV_ITEMswap(std::move(other.CMSG_SWAP_INV_ITEM));
        std::swap(this->CMSG_SWAP_INV_ITEM, CMSG_SWAP_INV_ITEMswap);
    }
    if (opcode == Opcode::CMSG_SPLIT_ITEM) {
        wrath::CMSG_SPLIT_ITEM CMSG_SPLIT_ITEMswap(std::move(other.CMSG_SPLIT_ITEM));
        std::swap(this->CMSG_SPLIT_ITEM, CMSG_SPLIT_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) {
        wrath::CMSG_AUTOEQUIP_ITEM_SLOT CMSG_AUTOEQUIP_ITEM_SLOTswap(std::move(other.CMSG_AUTOEQUIP_ITEM_SLOT));
        std::swap(this->CMSG_AUTOEQUIP_ITEM_SLOT, CMSG_AUTOEQUIP_ITEM_SLOTswap);
    }
    if (opcode == Opcode::CMSG_DESTROYITEM) {
        wrath::CMSG_DESTROYITEM CMSG_DESTROYITEMswap(std::move(other.CMSG_DESTROYITEM));
        std::swap(this->CMSG_DESTROYITEM, CMSG_DESTROYITEMswap);
    }
    if (opcode == Opcode::CMSG_INSPECT) {
        wrath::CMSG_INSPECT CMSG_INSPECTswap(std::move(other.CMSG_INSPECT));
        std::swap(this->CMSG_INSPECT, CMSG_INSPECTswap);
    }
    if (opcode == Opcode::CMSG_INITIATE_TRADE) {
        wrath::CMSG_INITIATE_TRADE CMSG_INITIATE_TRADEswap(std::move(other.CMSG_INITIATE_TRADE));
        std::swap(this->CMSG_INITIATE_TRADE, CMSG_INITIATE_TRADEswap);
    }
    if (opcode == Opcode::CMSG_BEGIN_TRADE) {
        wrath::CMSG_BEGIN_TRADE CMSG_BEGIN_TRADEswap(std::move(other.CMSG_BEGIN_TRADE));
        std::swap(this->CMSG_BEGIN_TRADE, CMSG_BEGIN_TRADEswap);
    }
    if (opcode == Opcode::CMSG_BUSY_TRADE) {
        wrath::CMSG_BUSY_TRADE CMSG_BUSY_TRADEswap(std::move(other.CMSG_BUSY_TRADE));
        std::swap(this->CMSG_BUSY_TRADE, CMSG_BUSY_TRADEswap);
    }
    if (opcode == Opcode::CMSG_IGNORE_TRADE) {
        wrath::CMSG_IGNORE_TRADE CMSG_IGNORE_TRADEswap(std::move(other.CMSG_IGNORE_TRADE));
        std::swap(this->CMSG_IGNORE_TRADE, CMSG_IGNORE_TRADEswap);
    }
    if (opcode == Opcode::CMSG_ACCEPT_TRADE) {
        wrath::CMSG_ACCEPT_TRADE CMSG_ACCEPT_TRADEswap(std::move(other.CMSG_ACCEPT_TRADE));
        std::swap(this->CMSG_ACCEPT_TRADE, CMSG_ACCEPT_TRADEswap);
    }
    if (opcode == Opcode::CMSG_UNACCEPT_TRADE) {
        wrath::CMSG_UNACCEPT_TRADE CMSG_UNACCEPT_TRADEswap(std::move(other.CMSG_UNACCEPT_TRADE));
        std::swap(this->CMSG_UNACCEPT_TRADE, CMSG_UNACCEPT_TRADEswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_TRADE) {
        wrath::CMSG_CANCEL_TRADE CMSG_CANCEL_TRADEswap(std::move(other.CMSG_CANCEL_TRADE));
        std::swap(this->CMSG_CANCEL_TRADE, CMSG_CANCEL_TRADEswap);
    }
    if (opcode == Opcode::CMSG_SET_TRADE_ITEM) {
        wrath::CMSG_SET_TRADE_ITEM CMSG_SET_TRADE_ITEMswap(std::move(other.CMSG_SET_TRADE_ITEM));
        std::swap(this->CMSG_SET_TRADE_ITEM, CMSG_SET_TRADE_ITEMswap);
    }
    if (opcode == Opcode::CMSG_CLEAR_TRADE_ITEM) {
        wrath::CMSG_CLEAR_TRADE_ITEM CMSG_CLEAR_TRADE_ITEMswap(std::move(other.CMSG_CLEAR_TRADE_ITEM));
        std::swap(this->CMSG_CLEAR_TRADE_ITEM, CMSG_CLEAR_TRADE_ITEMswap);
    }
    if (opcode == Opcode::CMSG_SET_TRADE_GOLD) {
        wrath::CMSG_SET_TRADE_GOLD CMSG_SET_TRADE_GOLDswap(std::move(other.CMSG_SET_TRADE_GOLD));
        std::swap(this->CMSG_SET_TRADE_GOLD, CMSG_SET_TRADE_GOLDswap);
    }
    if (opcode == Opcode::CMSG_SET_FACTION_ATWAR) {
        wrath::CMSG_SET_FACTION_ATWAR CMSG_SET_FACTION_ATWARswap(std::move(other.CMSG_SET_FACTION_ATWAR));
        std::swap(this->CMSG_SET_FACTION_ATWAR, CMSG_SET_FACTION_ATWARswap);
    }
    if (opcode == Opcode::CMSG_SET_ACTION_BUTTON) {
        wrath::CMSG_SET_ACTION_BUTTON CMSG_SET_ACTION_BUTTONswap(std::move(other.CMSG_SET_ACTION_BUTTON));
        std::swap(this->CMSG_SET_ACTION_BUTTON, CMSG_SET_ACTION_BUTTONswap);
    }
    if (opcode == Opcode::CMSG_CAST_SPELL) {
        wrath::CMSG_CAST_SPELL CMSG_CAST_SPELLswap(std::move(other.CMSG_CAST_SPELL));
        std::swap(this->CMSG_CAST_SPELL, CMSG_CAST_SPELLswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_CAST) {
        wrath::CMSG_CANCEL_CAST CMSG_CANCEL_CASTswap(std::move(other.CMSG_CANCEL_CAST));
        std::swap(this->CMSG_CANCEL_CAST, CMSG_CANCEL_CASTswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_AURA) {
        wrath::CMSG_CANCEL_AURA CMSG_CANCEL_AURAswap(std::move(other.CMSG_CANCEL_AURA));
        std::swap(this->CMSG_CANCEL_AURA, CMSG_CANCEL_AURAswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_CHANNELLING) {
        wrath::CMSG_CANCEL_CHANNELLING CMSG_CANCEL_CHANNELLINGswap(std::move(other.CMSG_CANCEL_CHANNELLING));
        std::swap(this->CMSG_CANCEL_CHANNELLING, CMSG_CANCEL_CHANNELLINGswap);
    }
    if (opcode == Opcode::CMSG_SET_SELECTION) {
        wrath::CMSG_SET_SELECTION CMSG_SET_SELECTIONswap(std::move(other.CMSG_SET_SELECTION));
        std::swap(this->CMSG_SET_SELECTION, CMSG_SET_SELECTIONswap);
    }
    if (opcode == Opcode::CMSG_DELETEEQUIPMENT_SET) {
        wrath::CMSG_DELETEEQUIPMENT_SET CMSG_DELETEEQUIPMENT_SETswap(std::move(other.CMSG_DELETEEQUIPMENT_SET));
        std::swap(this->CMSG_DELETEEQUIPMENT_SET, CMSG_DELETEEQUIPMENT_SETswap);
    }
    if (opcode == Opcode::CMSG_INSTANCE_LOCK_RESPONSE) {
        wrath::CMSG_INSTANCE_LOCK_RESPONSE CMSG_INSTANCE_LOCK_RESPONSEswap(std::move(other.CMSG_INSTANCE_LOCK_RESPONSE));
        std::swap(this->CMSG_INSTANCE_LOCK_RESPONSE, CMSG_INSTANCE_LOCK_RESPONSEswap);
    }
    if (opcode == Opcode::CMSG_ATTACKSWING) {
        wrath::CMSG_ATTACKSWING CMSG_ATTACKSWINGswap(std::move(other.CMSG_ATTACKSWING));
        std::swap(this->CMSG_ATTACKSWING, CMSG_ATTACKSWINGswap);
    }
    if (opcode == Opcode::CMSG_ATTACKSTOP) {
        wrath::CMSG_ATTACKSTOP CMSG_ATTACKSTOPswap(std::move(other.CMSG_ATTACKSTOP));
        std::swap(this->CMSG_ATTACKSTOP, CMSG_ATTACKSTOPswap);
    }
    if (opcode == Opcode::CMSG_REPOP_REQUEST) {
        wrath::CMSG_REPOP_REQUEST CMSG_REPOP_REQUESTswap(std::move(other.CMSG_REPOP_REQUEST));
        std::swap(this->CMSG_REPOP_REQUEST, CMSG_REPOP_REQUESTswap);
    }
    if (opcode == Opcode::CMSG_RESURRECT_RESPONSE) {
        wrath::CMSG_RESURRECT_RESPONSE CMSG_RESURRECT_RESPONSEswap(std::move(other.CMSG_RESURRECT_RESPONSE));
        std::swap(this->CMSG_RESURRECT_RESPONSE, CMSG_RESURRECT_RESPONSEswap);
    }
    if (opcode == Opcode::CMSG_LOOT) {
        wrath::CMSG_LOOT CMSG_LOOTswap(std::move(other.CMSG_LOOT));
        std::swap(this->CMSG_LOOT, CMSG_LOOTswap);
    }
    if (opcode == Opcode::CMSG_LOOT_MONEY) {
        wrath::CMSG_LOOT_MONEY CMSG_LOOT_MONEYswap(std::move(other.CMSG_LOOT_MONEY));
        std::swap(this->CMSG_LOOT_MONEY, CMSG_LOOT_MONEYswap);
    }
    if (opcode == Opcode::CMSG_LOOT_RELEASE) {
        wrath::CMSG_LOOT_RELEASE CMSG_LOOT_RELEASEswap(std::move(other.CMSG_LOOT_RELEASE));
        std::swap(this->CMSG_LOOT_RELEASE, CMSG_LOOT_RELEASEswap);
    }
    if (opcode == Opcode::CMSG_DUEL_ACCEPTED) {
        wrath::CMSG_DUEL_ACCEPTED CMSG_DUEL_ACCEPTEDswap(std::move(other.CMSG_DUEL_ACCEPTED));
        std::swap(this->CMSG_DUEL_ACCEPTED, CMSG_DUEL_ACCEPTEDswap);
    }
    if (opcode == Opcode::CMSG_DUEL_CANCELLED) {
        wrath::CMSG_DUEL_CANCELLED CMSG_DUEL_CANCELLEDswap(std::move(other.CMSG_DUEL_CANCELLED));
        std::swap(this->CMSG_DUEL_CANCELLED, CMSG_DUEL_CANCELLEDswap);
    }
    if (opcode == Opcode::CMSG_MOUNTSPECIAL_ANIM) {
        wrath::CMSG_MOUNTSPECIAL_ANIM CMSG_MOUNTSPECIAL_ANIMswap(std::move(other.CMSG_MOUNTSPECIAL_ANIM));
        std::swap(this->CMSG_MOUNTSPECIAL_ANIM, CMSG_MOUNTSPECIAL_ANIMswap);
    }
    if (opcode == Opcode::CMSG_PET_SET_ACTION) {
        wrath::CMSG_PET_SET_ACTION CMSG_PET_SET_ACTIONswap(std::move(other.CMSG_PET_SET_ACTION));
        std::swap(this->CMSG_PET_SET_ACTION, CMSG_PET_SET_ACTIONswap);
    }
    if (opcode == Opcode::CMSG_PET_ACTION) {
        wrath::CMSG_PET_ACTION CMSG_PET_ACTIONswap(std::move(other.CMSG_PET_ACTION));
        std::swap(this->CMSG_PET_ACTION, CMSG_PET_ACTIONswap);
    }
    if (opcode == Opcode::CMSG_PET_ABANDON) {
        wrath::CMSG_PET_ABANDON CMSG_PET_ABANDONswap(std::move(other.CMSG_PET_ABANDON));
        std::swap(this->CMSG_PET_ABANDON, CMSG_PET_ABANDONswap);
    }
    if (opcode == Opcode::CMSG_PET_RENAME) {
        wrath::CMSG_PET_RENAME CMSG_PET_RENAMEswap(std::move(other.CMSG_PET_RENAME));
        std::swap(this->CMSG_PET_RENAME, CMSG_PET_RENAMEswap);
    }
    if (opcode == Opcode::CMSG_GOSSIP_HELLO) {
        wrath::CMSG_GOSSIP_HELLO CMSG_GOSSIP_HELLOswap(std::move(other.CMSG_GOSSIP_HELLO));
        std::swap(this->CMSG_GOSSIP_HELLO, CMSG_GOSSIP_HELLOswap);
    }
    if (opcode == Opcode::CMSG_GOSSIP_SELECT_OPTION) {
        wrath::CMSG_GOSSIP_SELECT_OPTION CMSG_GOSSIP_SELECT_OPTIONswap(std::move(other.CMSG_GOSSIP_SELECT_OPTION));
        std::swap(this->CMSG_GOSSIP_SELECT_OPTION, CMSG_GOSSIP_SELECT_OPTIONswap);
    }
    if (opcode == Opcode::CMSG_NPC_TEXT_QUERY) {
        wrath::CMSG_NPC_TEXT_QUERY CMSG_NPC_TEXT_QUERYswap(std::move(other.CMSG_NPC_TEXT_QUERY));
        std::swap(this->CMSG_NPC_TEXT_QUERY, CMSG_NPC_TEXT_QUERYswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_QUERY) {
        wrath::CMSG_QUESTGIVER_STATUS_QUERY CMSG_QUESTGIVER_STATUS_QUERYswap(std::move(other.CMSG_QUESTGIVER_STATUS_QUERY));
        std::swap(this->CMSG_QUESTGIVER_STATUS_QUERY, CMSG_QUESTGIVER_STATUS_QUERYswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_HELLO) {
        wrath::CMSG_QUESTGIVER_HELLO CMSG_QUESTGIVER_HELLOswap(std::move(other.CMSG_QUESTGIVER_HELLO));
        std::swap(this->CMSG_QUESTGIVER_HELLO, CMSG_QUESTGIVER_HELLOswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUERY_QUEST) {
        wrath::CMSG_QUESTGIVER_QUERY_QUEST CMSG_QUESTGIVER_QUERY_QUESTswap(std::move(other.CMSG_QUESTGIVER_QUERY_QUEST));
        std::swap(this->CMSG_QUESTGIVER_QUERY_QUEST, CMSG_QUESTGIVER_QUERY_QUESTswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) {
        wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH CMSG_QUESTGIVER_QUEST_AUTOLAUNCHswap(std::move(other.CMSG_QUESTGIVER_QUEST_AUTOLAUNCH));
        std::swap(this->CMSG_QUESTGIVER_QUEST_AUTOLAUNCH, CMSG_QUESTGIVER_QUEST_AUTOLAUNCHswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) {
        wrath::CMSG_QUESTGIVER_ACCEPT_QUEST CMSG_QUESTGIVER_ACCEPT_QUESTswap(std::move(other.CMSG_QUESTGIVER_ACCEPT_QUEST));
        std::swap(this->CMSG_QUESTGIVER_ACCEPT_QUEST, CMSG_QUESTGIVER_ACCEPT_QUESTswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) {
        wrath::CMSG_QUESTGIVER_COMPLETE_QUEST CMSG_QUESTGIVER_COMPLETE_QUESTswap(std::move(other.CMSG_QUESTGIVER_COMPLETE_QUEST));
        std::swap(this->CMSG_QUESTGIVER_COMPLETE_QUEST, CMSG_QUESTGIVER_COMPLETE_QUESTswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) {
        wrath::CMSG_QUESTGIVER_REQUEST_REWARD CMSG_QUESTGIVER_REQUEST_REWARDswap(std::move(other.CMSG_QUESTGIVER_REQUEST_REWARD));
        std::swap(this->CMSG_QUESTGIVER_REQUEST_REWARD, CMSG_QUESTGIVER_REQUEST_REWARDswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) {
        wrath::CMSG_QUESTGIVER_CHOOSE_REWARD CMSG_QUESTGIVER_CHOOSE_REWARDswap(std::move(other.CMSG_QUESTGIVER_CHOOSE_REWARD));
        std::swap(this->CMSG_QUESTGIVER_CHOOSE_REWARD, CMSG_QUESTGIVER_CHOOSE_REWARDswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_CANCEL) {
        wrath::CMSG_QUESTGIVER_CANCEL CMSG_QUESTGIVER_CANCELswap(std::move(other.CMSG_QUESTGIVER_CANCEL));
        std::swap(this->CMSG_QUESTGIVER_CANCEL, CMSG_QUESTGIVER_CANCELswap);
    }
    if (opcode == Opcode::CMSG_QUESTLOG_SWAP_QUEST) {
        wrath::CMSG_QUESTLOG_SWAP_QUEST CMSG_QUESTLOG_SWAP_QUESTswap(std::move(other.CMSG_QUESTLOG_SWAP_QUEST));
        std::swap(this->CMSG_QUESTLOG_SWAP_QUEST, CMSG_QUESTLOG_SWAP_QUESTswap);
    }
    if (opcode == Opcode::CMSG_QUESTLOG_REMOVE_QUEST) {
        wrath::CMSG_QUESTLOG_REMOVE_QUEST CMSG_QUESTLOG_REMOVE_QUESTswap(std::move(other.CMSG_QUESTLOG_REMOVE_QUEST));
        std::swap(this->CMSG_QUESTLOG_REMOVE_QUEST, CMSG_QUESTLOG_REMOVE_QUESTswap);
    }
    if (opcode == Opcode::CMSG_QUEST_CONFIRM_ACCEPT) {
        wrath::CMSG_QUEST_CONFIRM_ACCEPT CMSG_QUEST_CONFIRM_ACCEPTswap(std::move(other.CMSG_QUEST_CONFIRM_ACCEPT));
        std::swap(this->CMSG_QUEST_CONFIRM_ACCEPT, CMSG_QUEST_CONFIRM_ACCEPTswap);
    }
    if (opcode == Opcode::CMSG_PUSHQUESTTOPARTY) {
        wrath::CMSG_PUSHQUESTTOPARTY CMSG_PUSHQUESTTOPARTYswap(std::move(other.CMSG_PUSHQUESTTOPARTY));
        std::swap(this->CMSG_PUSHQUESTTOPARTY, CMSG_PUSHQUESTTOPARTYswap);
    }
    if (opcode == Opcode::CMSG_LIST_INVENTORY) {
        wrath::CMSG_LIST_INVENTORY CMSG_LIST_INVENTORYswap(std::move(other.CMSG_LIST_INVENTORY));
        std::swap(this->CMSG_LIST_INVENTORY, CMSG_LIST_INVENTORYswap);
    }
    if (opcode == Opcode::CMSG_SELL_ITEM) {
        wrath::CMSG_SELL_ITEM CMSG_SELL_ITEMswap(std::move(other.CMSG_SELL_ITEM));
        std::swap(this->CMSG_SELL_ITEM, CMSG_SELL_ITEMswap);
    }
    if (opcode == Opcode::CMSG_BUY_ITEM) {
        wrath::CMSG_BUY_ITEM CMSG_BUY_ITEMswap(std::move(other.CMSG_BUY_ITEM));
        std::swap(this->CMSG_BUY_ITEM, CMSG_BUY_ITEMswap);
    }
    if (opcode == Opcode::CMSG_BUY_ITEM_IN_SLOT) {
        wrath::CMSG_BUY_ITEM_IN_SLOT CMSG_BUY_ITEM_IN_SLOTswap(std::move(other.CMSG_BUY_ITEM_IN_SLOT));
        std::swap(this->CMSG_BUY_ITEM_IN_SLOT, CMSG_BUY_ITEM_IN_SLOTswap);
    }
    if (opcode == Opcode::CMSG_TAXINODE_STATUS_QUERY) {
        wrath::CMSG_TAXINODE_STATUS_QUERY CMSG_TAXINODE_STATUS_QUERYswap(std::move(other.CMSG_TAXINODE_STATUS_QUERY));
        std::swap(this->CMSG_TAXINODE_STATUS_QUERY, CMSG_TAXINODE_STATUS_QUERYswap);
    }
    if (opcode == Opcode::CMSG_TAXIQUERYAVAILABLENODES) {
        wrath::CMSG_TAXIQUERYAVAILABLENODES CMSG_TAXIQUERYAVAILABLENODESswap(std::move(other.CMSG_TAXIQUERYAVAILABLENODES));
        std::swap(this->CMSG_TAXIQUERYAVAILABLENODES, CMSG_TAXIQUERYAVAILABLENODESswap);
    }
    if (opcode == Opcode::CMSG_ACTIVATETAXI) {
        wrath::CMSG_ACTIVATETAXI CMSG_ACTIVATETAXIswap(std::move(other.CMSG_ACTIVATETAXI));
        std::swap(this->CMSG_ACTIVATETAXI, CMSG_ACTIVATETAXIswap);
    }
    if (opcode == Opcode::CMSG_TRAINER_LIST) {
        wrath::CMSG_TRAINER_LIST CMSG_TRAINER_LISTswap(std::move(other.CMSG_TRAINER_LIST));
        std::swap(this->CMSG_TRAINER_LIST, CMSG_TRAINER_LISTswap);
    }
    if (opcode == Opcode::CMSG_TRAINER_BUY_SPELL) {
        wrath::CMSG_TRAINER_BUY_SPELL CMSG_TRAINER_BUY_SPELLswap(std::move(other.CMSG_TRAINER_BUY_SPELL));
        std::swap(this->CMSG_TRAINER_BUY_SPELL, CMSG_TRAINER_BUY_SPELLswap);
    }
    if (opcode == Opcode::CMSG_BINDER_ACTIVATE) {
        wrath::CMSG_BINDER_ACTIVATE CMSG_BINDER_ACTIVATEswap(std::move(other.CMSG_BINDER_ACTIVATE));
        std::swap(this->CMSG_BINDER_ACTIVATE, CMSG_BINDER_ACTIVATEswap);
    }
    if (opcode == Opcode::CMSG_BANKER_ACTIVATE) {
        wrath::CMSG_BANKER_ACTIVATE CMSG_BANKER_ACTIVATEswap(std::move(other.CMSG_BANKER_ACTIVATE));
        std::swap(this->CMSG_BANKER_ACTIVATE, CMSG_BANKER_ACTIVATEswap);
    }
    if (opcode == Opcode::CMSG_BUY_BANK_SLOT) {
        wrath::CMSG_BUY_BANK_SLOT CMSG_BUY_BANK_SLOTswap(std::move(other.CMSG_BUY_BANK_SLOT));
        std::swap(this->CMSG_BUY_BANK_SLOT, CMSG_BUY_BANK_SLOTswap);
    }
    if (opcode == Opcode::CMSG_PETITION_SHOWLIST) {
        wrath::CMSG_PETITION_SHOWLIST CMSG_PETITION_SHOWLISTswap(std::move(other.CMSG_PETITION_SHOWLIST));
        std::swap(this->CMSG_PETITION_SHOWLIST, CMSG_PETITION_SHOWLISTswap);
    }
    if (opcode == Opcode::CMSG_PETITION_BUY) {
        wrath::CMSG_PETITION_BUY CMSG_PETITION_BUYswap(std::move(other.CMSG_PETITION_BUY));
        std::swap(this->CMSG_PETITION_BUY, CMSG_PETITION_BUYswap);
    }
    if (opcode == Opcode::CMSG_PETITION_SHOW_SIGNATURES) {
        wrath::CMSG_PETITION_SHOW_SIGNATURES CMSG_PETITION_SHOW_SIGNATURESswap(std::move(other.CMSG_PETITION_SHOW_SIGNATURES));
        std::swap(this->CMSG_PETITION_SHOW_SIGNATURES, CMSG_PETITION_SHOW_SIGNATURESswap);
    }
    if (opcode == Opcode::CMSG_PETITION_SIGN) {
        wrath::CMSG_PETITION_SIGN CMSG_PETITION_SIGNswap(std::move(other.CMSG_PETITION_SIGN));
        std::swap(this->CMSG_PETITION_SIGN, CMSG_PETITION_SIGNswap);
    }
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        wrath::MSG_PETITION_DECLINE MSG_PETITION_DECLINEswap(std::move(other.MSG_PETITION_DECLINE));
        std::swap(this->MSG_PETITION_DECLINE, MSG_PETITION_DECLINEswap);
    }
    if (opcode == Opcode::CMSG_OFFER_PETITION) {
        wrath::CMSG_OFFER_PETITION CMSG_OFFER_PETITIONswap(std::move(other.CMSG_OFFER_PETITION));
        std::swap(this->CMSG_OFFER_PETITION, CMSG_OFFER_PETITIONswap);
    }
    if (opcode == Opcode::CMSG_TURN_IN_PETITION) {
        wrath::CMSG_TURN_IN_PETITION CMSG_TURN_IN_PETITIONswap(std::move(other.CMSG_TURN_IN_PETITION));
        std::swap(this->CMSG_TURN_IN_PETITION, CMSG_TURN_IN_PETITIONswap);
    }
    if (opcode == Opcode::CMSG_PETITION_QUERY) {
        wrath::CMSG_PETITION_QUERY CMSG_PETITION_QUERYswap(std::move(other.CMSG_PETITION_QUERY));
        std::swap(this->CMSG_PETITION_QUERY, CMSG_PETITION_QUERYswap);
    }
    if (opcode == Opcode::CMSG_BUG) {
        wrath::CMSG_BUG CMSG_BUGswap(std::move(other.CMSG_BUG));
        std::swap(this->CMSG_BUG, CMSG_BUGswap);
    }
    if (opcode == Opcode::CMSG_PLAYED_TIME) {
        wrath::CMSG_PLAYED_TIME CMSG_PLAYED_TIMEswap(std::move(other.CMSG_PLAYED_TIME));
        std::swap(this->CMSG_PLAYED_TIME, CMSG_PLAYED_TIMEswap);
    }
    if (opcode == Opcode::CMSG_QUERY_TIME) {
        wrath::CMSG_QUERY_TIME CMSG_QUERY_TIMEswap(std::move(other.CMSG_QUERY_TIME));
        std::swap(this->CMSG_QUERY_TIME, CMSG_QUERY_TIMEswap);
    }
    if (opcode == Opcode::CMSG_RECLAIM_CORPSE) {
        wrath::CMSG_RECLAIM_CORPSE CMSG_RECLAIM_CORPSEswap(std::move(other.CMSG_RECLAIM_CORPSE));
        std::swap(this->CMSG_RECLAIM_CORPSE, CMSG_RECLAIM_CORPSEswap);
    }
    if (opcode == Opcode::CMSG_WRAP_ITEM) {
        wrath::CMSG_WRAP_ITEM CMSG_WRAP_ITEMswap(std::move(other.CMSG_WRAP_ITEM));
        std::swap(this->CMSG_WRAP_ITEM, CMSG_WRAP_ITEMswap);
    }
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        wrath::MSG_MINIMAP_PING_Client MSG_MINIMAP_PINGswap(std::move(other.MSG_MINIMAP_PING));
        std::swap(this->MSG_MINIMAP_PING, MSG_MINIMAP_PINGswap);
    }
    if (opcode == Opcode::CMSG_PING) {
        wrath::CMSG_PING CMSG_PINGswap(std::move(other.CMSG_PING));
        std::swap(this->CMSG_PING, CMSG_PINGswap);
    }
    if (opcode == Opcode::CMSG_SETSHEATHED) {
        wrath::CMSG_SETSHEATHED CMSG_SETSHEATHEDswap(std::move(other.CMSG_SETSHEATHED));
        std::swap(this->CMSG_SETSHEATHED, CMSG_SETSHEATHEDswap);
    }
    if (opcode == Opcode::CMSG_QUEST_POI_QUERY) {
        wrath::CMSG_QUEST_POI_QUERY CMSG_QUEST_POI_QUERYswap(std::move(other.CMSG_QUEST_POI_QUERY));
        std::swap(this->CMSG_QUEST_POI_QUERY, CMSG_QUEST_POI_QUERYswap);
    }
    if (opcode == Opcode::CMSG_AUTH_SESSION) {
        wrath::CMSG_AUTH_SESSION CMSG_AUTH_SESSIONswap(std::move(other.CMSG_AUTH_SESSION));
        std::swap(this->CMSG_AUTH_SESSION, CMSG_AUTH_SESSIONswap);
    }
    if (opcode == Opcode::CMSG_PET_CAST_SPELL) {
        wrath::CMSG_PET_CAST_SPELL CMSG_PET_CAST_SPELLswap(std::move(other.CMSG_PET_CAST_SPELL));
        std::swap(this->CMSG_PET_CAST_SPELL, CMSG_PET_CAST_SPELLswap);
    }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        wrath::MSG_SAVE_GUILD_EMBLEM_Client MSG_SAVE_GUILD_EMBLEMswap(std::move(other.MSG_SAVE_GUILD_EMBLEM));
        std::swap(this->MSG_SAVE_GUILD_EMBLEM, MSG_SAVE_GUILD_EMBLEMswap);
    }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        wrath::MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATEswap(std::move(other.MSG_TABARDVENDOR_ACTIVATE));
        std::swap(this->MSG_TABARDVENDOR_ACTIVATE, MSG_TABARDVENDOR_ACTIVATEswap);
    }
    if (opcode == Opcode::CMSG_ZONEUPDATE) {
        wrath::CMSG_ZONEUPDATE CMSG_ZONEUPDATEswap(std::move(other.CMSG_ZONEUPDATE));
        std::swap(this->CMSG_ZONEUPDATE, CMSG_ZONEUPDATEswap);
    }
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        wrath::MSG_RANDOM_ROLL_Client MSG_RANDOM_ROLLswap(std::move(other.MSG_RANDOM_ROLL));
        std::swap(this->MSG_RANDOM_ROLL, MSG_RANDOM_ROLLswap);
    }
    if (opcode == Opcode::CMSG_UNLEARN_SKILL) {
        wrath::CMSG_UNLEARN_SKILL CMSG_UNLEARN_SKILLswap(std::move(other.CMSG_UNLEARN_SKILL));
        std::swap(this->CMSG_UNLEARN_SKILL, CMSG_UNLEARN_SKILLswap);
    }
    if (opcode == Opcode::CMSG_GMTICKET_CREATE) {
        wrath::CMSG_GMTICKET_CREATE CMSG_GMTICKET_CREATEswap(std::move(other.CMSG_GMTICKET_CREATE));
        std::swap(this->CMSG_GMTICKET_CREATE, CMSG_GMTICKET_CREATEswap);
    }
    if (opcode == Opcode::CMSG_GMTICKET_UPDATETEXT) {
        wrath::CMSG_GMTICKET_UPDATETEXT CMSG_GMTICKET_UPDATETEXTswap(std::move(other.CMSG_GMTICKET_UPDATETEXT));
        std::swap(this->CMSG_GMTICKET_UPDATETEXT, CMSG_GMTICKET_UPDATETEXTswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_ACCOUNT_DATA) {
        wrath::CMSG_REQUEST_ACCOUNT_DATA CMSG_REQUEST_ACCOUNT_DATAswap(std::move(other.CMSG_REQUEST_ACCOUNT_DATA));
        std::swap(this->CMSG_REQUEST_ACCOUNT_DATA, CMSG_REQUEST_ACCOUNT_DATAswap);
    }
    if (opcode == Opcode::CMSG_UPDATE_ACCOUNT_DATA) {
        wrath::CMSG_UPDATE_ACCOUNT_DATA CMSG_UPDATE_ACCOUNT_DATAswap(std::move(other.CMSG_UPDATE_ACCOUNT_DATA));
        std::swap(this->CMSG_UPDATE_ACCOUNT_DATA, CMSG_UPDATE_ACCOUNT_DATAswap);
    }
    if (opcode == Opcode::CMSG_GMTICKET_GETTICKET) {
        wrath::CMSG_GMTICKET_GETTICKET CMSG_GMTICKET_GETTICKETswap(std::move(other.CMSG_GMTICKET_GETTICKET));
        std::swap(this->CMSG_GMTICKET_GETTICKET, CMSG_GMTICKET_GETTICKETswap);
    }
    if (opcode == Opcode::CMSG_UNLEARN_TALENTS) {
        wrath::CMSG_UNLEARN_TALENTS CMSG_UNLEARN_TALENTSswap(std::move(other.CMSG_UNLEARN_TALENTS));
        std::swap(this->CMSG_UNLEARN_TALENTS, CMSG_UNLEARN_TALENTSswap);
    }
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        wrath::MSG_CORPSE_QUERY_Client MSG_CORPSE_QUERYswap(std::move(other.MSG_CORPSE_QUERY));
        std::swap(this->MSG_CORPSE_QUERY, MSG_CORPSE_QUERYswap);
    }
    if (opcode == Opcode::CMSG_GMTICKET_DELETETICKET) {
        wrath::CMSG_GMTICKET_DELETETICKET CMSG_GMTICKET_DELETETICKETswap(std::move(other.CMSG_GMTICKET_DELETETICKET));
        std::swap(this->CMSG_GMTICKET_DELETETICKET, CMSG_GMTICKET_DELETETICKETswap);
    }
    if (opcode == Opcode::CMSG_GMTICKET_SYSTEMSTATUS) {
        wrath::CMSG_GMTICKET_SYSTEMSTATUS CMSG_GMTICKET_SYSTEMSTATUSswap(std::move(other.CMSG_GMTICKET_SYSTEMSTATUS));
        std::swap(this->CMSG_GMTICKET_SYSTEMSTATUS, CMSG_GMTICKET_SYSTEMSTATUSswap);
    }
    if (opcode == Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) {
        wrath::CMSG_SPIRIT_HEALER_ACTIVATE CMSG_SPIRIT_HEALER_ACTIVATEswap(std::move(other.CMSG_SPIRIT_HEALER_ACTIVATE));
        std::swap(this->CMSG_SPIRIT_HEALER_ACTIVATE, CMSG_SPIRIT_HEALER_ACTIVATEswap);
    }
    if (opcode == Opcode::CMSG_CHAT_IGNORED) {
        wrath::CMSG_CHAT_IGNORED CMSG_CHAT_IGNOREDswap(std::move(other.CMSG_CHAT_IGNORED));
        std::swap(this->CMSG_CHAT_IGNORED, CMSG_CHAT_IGNOREDswap);
    }
    if (opcode == Opcode::CMSG_GUILD_RANK) {
        wrath::CMSG_GUILD_RANK CMSG_GUILD_RANKswap(std::move(other.CMSG_GUILD_RANK));
        std::swap(this->CMSG_GUILD_RANK, CMSG_GUILD_RANKswap);
    }
    if (opcode == Opcode::CMSG_GUILD_ADD_RANK) {
        wrath::CMSG_GUILD_ADD_RANK CMSG_GUILD_ADD_RANKswap(std::move(other.CMSG_GUILD_ADD_RANK));
        std::swap(this->CMSG_GUILD_ADD_RANK, CMSG_GUILD_ADD_RANKswap);
    }
    if (opcode == Opcode::CMSG_GUILD_DEL_RANK) {
        wrath::CMSG_GUILD_DEL_RANK CMSG_GUILD_DEL_RANKswap(std::move(other.CMSG_GUILD_DEL_RANK));
        std::swap(this->CMSG_GUILD_DEL_RANK, CMSG_GUILD_DEL_RANKswap);
    }
    if (opcode == Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) {
        wrath::CMSG_GUILD_SET_PUBLIC_NOTE CMSG_GUILD_SET_PUBLIC_NOTEswap(std::move(other.CMSG_GUILD_SET_PUBLIC_NOTE));
        std::swap(this->CMSG_GUILD_SET_PUBLIC_NOTE, CMSG_GUILD_SET_PUBLIC_NOTEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_SET_OFFICER_NOTE) {
        wrath::CMSG_GUILD_SET_OFFICER_NOTE CMSG_GUILD_SET_OFFICER_NOTEswap(std::move(other.CMSG_GUILD_SET_OFFICER_NOTE));
        std::swap(this->CMSG_GUILD_SET_OFFICER_NOTE, CMSG_GUILD_SET_OFFICER_NOTEswap);
    }
    if (opcode == Opcode::CMSG_SEND_MAIL) {
        wrath::CMSG_SEND_MAIL CMSG_SEND_MAILswap(std::move(other.CMSG_SEND_MAIL));
        std::swap(this->CMSG_SEND_MAIL, CMSG_SEND_MAILswap);
    }
    if (opcode == Opcode::CMSG_GET_MAIL_LIST) {
        wrath::CMSG_GET_MAIL_LIST CMSG_GET_MAIL_LISTswap(std::move(other.CMSG_GET_MAIL_LIST));
        std::swap(this->CMSG_GET_MAIL_LIST, CMSG_GET_MAIL_LISTswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_LIST) {
        wrath::CMSG_BATTLEFIELD_LIST CMSG_BATTLEFIELD_LISTswap(std::move(other.CMSG_BATTLEFIELD_LIST));
        std::swap(this->CMSG_BATTLEFIELD_LIST, CMSG_BATTLEFIELD_LISTswap);
    }
    if (opcode == Opcode::CMSG_ITEM_TEXT_QUERY) {
        wrath::CMSG_ITEM_TEXT_QUERY CMSG_ITEM_TEXT_QUERYswap(std::move(other.CMSG_ITEM_TEXT_QUERY));
        std::swap(this->CMSG_ITEM_TEXT_QUERY, CMSG_ITEM_TEXT_QUERYswap);
    }
    if (opcode == Opcode::CMSG_MAIL_TAKE_MONEY) {
        wrath::CMSG_MAIL_TAKE_MONEY CMSG_MAIL_TAKE_MONEYswap(std::move(other.CMSG_MAIL_TAKE_MONEY));
        std::swap(this->CMSG_MAIL_TAKE_MONEY, CMSG_MAIL_TAKE_MONEYswap);
    }
    if (opcode == Opcode::CMSG_MAIL_TAKE_ITEM) {
        wrath::CMSG_MAIL_TAKE_ITEM CMSG_MAIL_TAKE_ITEMswap(std::move(other.CMSG_MAIL_TAKE_ITEM));
        std::swap(this->CMSG_MAIL_TAKE_ITEM, CMSG_MAIL_TAKE_ITEMswap);
    }
    if (opcode == Opcode::CMSG_MAIL_MARK_AS_READ) {
        wrath::CMSG_MAIL_MARK_AS_READ CMSG_MAIL_MARK_AS_READswap(std::move(other.CMSG_MAIL_MARK_AS_READ));
        std::swap(this->CMSG_MAIL_MARK_AS_READ, CMSG_MAIL_MARK_AS_READswap);
    }
    if (opcode == Opcode::CMSG_MAIL_RETURN_TO_SENDER) {
        wrath::CMSG_MAIL_RETURN_TO_SENDER CMSG_MAIL_RETURN_TO_SENDERswap(std::move(other.CMSG_MAIL_RETURN_TO_SENDER));
        std::swap(this->CMSG_MAIL_RETURN_TO_SENDER, CMSG_MAIL_RETURN_TO_SENDERswap);
    }
    if (opcode == Opcode::CMSG_MAIL_DELETE) {
        wrath::CMSG_MAIL_DELETE CMSG_MAIL_DELETEswap(std::move(other.CMSG_MAIL_DELETE));
        std::swap(this->CMSG_MAIL_DELETE, CMSG_MAIL_DELETEswap);
    }
    if (opcode == Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) {
        wrath::CMSG_MAIL_CREATE_TEXT_ITEM CMSG_MAIL_CREATE_TEXT_ITEMswap(std::move(other.CMSG_MAIL_CREATE_TEXT_ITEM));
        std::swap(this->CMSG_MAIL_CREATE_TEXT_ITEM, CMSG_MAIL_CREATE_TEXT_ITEMswap);
    }
    if (opcode == Opcode::CMSG_LEARN_TALENT) {
        wrath::CMSG_LEARN_TALENT CMSG_LEARN_TALENTswap(std::move(other.CMSG_LEARN_TALENT));
        std::swap(this->CMSG_LEARN_TALENT, CMSG_LEARN_TALENTswap);
    }
    if (opcode == Opcode::CMSG_TOGGLE_PVP) {
        wrath::CMSG_TOGGLE_PVP CMSG_TOGGLE_PVPswap(std::move(other.CMSG_TOGGLE_PVP));
        std::swap(this->CMSG_TOGGLE_PVP, CMSG_TOGGLE_PVPswap);
    }
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        wrath::MSG_AUCTION_HELLO_Client MSG_AUCTION_HELLOswap(std::move(other.MSG_AUCTION_HELLO));
        std::swap(this->MSG_AUCTION_HELLO, MSG_AUCTION_HELLOswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_SELL_ITEM) {
        wrath::CMSG_AUCTION_SELL_ITEM CMSG_AUCTION_SELL_ITEMswap(std::move(other.CMSG_AUCTION_SELL_ITEM));
        std::swap(this->CMSG_AUCTION_SELL_ITEM, CMSG_AUCTION_SELL_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_REMOVE_ITEM) {
        wrath::CMSG_AUCTION_REMOVE_ITEM CMSG_AUCTION_REMOVE_ITEMswap(std::move(other.CMSG_AUCTION_REMOVE_ITEM));
        std::swap(this->CMSG_AUCTION_REMOVE_ITEM, CMSG_AUCTION_REMOVE_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_ITEMS) {
        wrath::CMSG_AUCTION_LIST_ITEMS CMSG_AUCTION_LIST_ITEMSswap(std::move(other.CMSG_AUCTION_LIST_ITEMS));
        std::swap(this->CMSG_AUCTION_LIST_ITEMS, CMSG_AUCTION_LIST_ITEMSswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) {
        wrath::CMSG_AUCTION_LIST_OWNER_ITEMS CMSG_AUCTION_LIST_OWNER_ITEMSswap(std::move(other.CMSG_AUCTION_LIST_OWNER_ITEMS));
        std::swap(this->CMSG_AUCTION_LIST_OWNER_ITEMS, CMSG_AUCTION_LIST_OWNER_ITEMSswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_PLACE_BID) {
        wrath::CMSG_AUCTION_PLACE_BID CMSG_AUCTION_PLACE_BIDswap(std::move(other.CMSG_AUCTION_PLACE_BID));
        std::swap(this->CMSG_AUCTION_PLACE_BID, CMSG_AUCTION_PLACE_BIDswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) {
        wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS CMSG_AUCTION_LIST_BIDDER_ITEMSswap(std::move(other.CMSG_AUCTION_LIST_BIDDER_ITEMS));
        std::swap(this->CMSG_AUCTION_LIST_BIDDER_ITEMS, CMSG_AUCTION_LIST_BIDDER_ITEMSswap);
    }
    if (opcode == Opcode::CMSG_SET_AMMO) {
        wrath::CMSG_SET_AMMO CMSG_SET_AMMOswap(std::move(other.CMSG_SET_AMMO));
        std::swap(this->CMSG_SET_AMMO, CMSG_SET_AMMOswap);
    }
    if (opcode == Opcode::CMSG_SET_ACTIVE_MOVER) {
        wrath::CMSG_SET_ACTIVE_MOVER CMSG_SET_ACTIVE_MOVERswap(std::move(other.CMSG_SET_ACTIVE_MOVER));
        std::swap(this->CMSG_SET_ACTIVE_MOVER, CMSG_SET_ACTIVE_MOVERswap);
    }
    if (opcode == Opcode::CMSG_PET_CANCEL_AURA) {
        wrath::CMSG_PET_CANCEL_AURA CMSG_PET_CANCEL_AURAswap(std::move(other.CMSG_PET_CANCEL_AURA));
        std::swap(this->CMSG_PET_CANCEL_AURA, CMSG_PET_CANCEL_AURAswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) {
        wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL CMSG_CANCEL_AUTO_REPEAT_SPELLswap(std::move(other.CMSG_CANCEL_AUTO_REPEAT_SPELL));
        std::swap(this->CMSG_CANCEL_AUTO_REPEAT_SPELL, CMSG_CANCEL_AUTO_REPEAT_SPELLswap);
    }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        wrath::MSG_LIST_STABLED_PETS_Client MSG_LIST_STABLED_PETSswap(std::move(other.MSG_LIST_STABLED_PETS));
        std::swap(this->MSG_LIST_STABLED_PETS, MSG_LIST_STABLED_PETSswap);
    }
    if (opcode == Opcode::CMSG_STABLE_PET) {
        wrath::CMSG_STABLE_PET CMSG_STABLE_PETswap(std::move(other.CMSG_STABLE_PET));
        std::swap(this->CMSG_STABLE_PET, CMSG_STABLE_PETswap);
    }
    if (opcode == Opcode::CMSG_UNSTABLE_PET) {
        wrath::CMSG_UNSTABLE_PET CMSG_UNSTABLE_PETswap(std::move(other.CMSG_UNSTABLE_PET));
        std::swap(this->CMSG_UNSTABLE_PET, CMSG_UNSTABLE_PETswap);
    }
    if (opcode == Opcode::CMSG_BUY_STABLE_SLOT) {
        wrath::CMSG_BUY_STABLE_SLOT CMSG_BUY_STABLE_SLOTswap(std::move(other.CMSG_BUY_STABLE_SLOT));
        std::swap(this->CMSG_BUY_STABLE_SLOT, CMSG_BUY_STABLE_SLOTswap);
    }
    if (opcode == Opcode::CMSG_STABLE_SWAP_PET) {
        wrath::CMSG_STABLE_SWAP_PET CMSG_STABLE_SWAP_PETswap(std::move(other.CMSG_STABLE_SWAP_PET));
        std::swap(this->CMSG_STABLE_SWAP_PET, CMSG_STABLE_SWAP_PETswap);
    }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        wrath::MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULTswap(std::move(other.MSG_QUEST_PUSH_RESULT));
        std::swap(this->MSG_QUEST_PUSH_RESULT, MSG_QUEST_PUSH_RESULTswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_PET_INFO) {
        wrath::CMSG_REQUEST_PET_INFO CMSG_REQUEST_PET_INFOswap(std::move(other.CMSG_REQUEST_PET_INFO));
        std::swap(this->CMSG_REQUEST_PET_INFO, CMSG_REQUEST_PET_INFOswap);
    }
    if (opcode == Opcode::CMSG_FAR_SIGHT) {
        wrath::CMSG_FAR_SIGHT CMSG_FAR_SIGHTswap(std::move(other.CMSG_FAR_SIGHT));
        std::swap(this->CMSG_FAR_SIGHT, CMSG_FAR_SIGHTswap);
    }
    if (opcode == Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) {
        wrath::CMSG_GROUP_CHANGE_SUB_GROUP CMSG_GROUP_CHANGE_SUB_GROUPswap(std::move(other.CMSG_GROUP_CHANGE_SUB_GROUP));
        std::swap(this->CMSG_GROUP_CHANGE_SUB_GROUP, CMSG_GROUP_CHANGE_SUB_GROUPswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) {
        wrath::CMSG_REQUEST_PARTY_MEMBER_STATS CMSG_REQUEST_PARTY_MEMBER_STATSswap(std::move(other.CMSG_REQUEST_PARTY_MEMBER_STATS));
        std::swap(this->CMSG_REQUEST_PARTY_MEMBER_STATS, CMSG_REQUEST_PARTY_MEMBER_STATSswap);
    }
    if (opcode == Opcode::CMSG_GROUP_SWAP_SUB_GROUP) {
        wrath::CMSG_GROUP_SWAP_SUB_GROUP CMSG_GROUP_SWAP_SUB_GROUPswap(std::move(other.CMSG_GROUP_SWAP_SUB_GROUP));
        std::swap(this->CMSG_GROUP_SWAP_SUB_GROUP, CMSG_GROUP_SWAP_SUB_GROUPswap);
    }
    if (opcode == Opcode::CMSG_AUTOSTORE_BANK_ITEM) {
        wrath::CMSG_AUTOSTORE_BANK_ITEM CMSG_AUTOSTORE_BANK_ITEMswap(std::move(other.CMSG_AUTOSTORE_BANK_ITEM));
        std::swap(this->CMSG_AUTOSTORE_BANK_ITEM, CMSG_AUTOSTORE_BANK_ITEMswap);
    }
    if (opcode == Opcode::CMSG_AUTOBANK_ITEM) {
        wrath::CMSG_AUTOBANK_ITEM CMSG_AUTOBANK_ITEMswap(std::move(other.CMSG_AUTOBANK_ITEM));
        std::swap(this->CMSG_AUTOBANK_ITEM, CMSG_AUTOBANK_ITEMswap);
    }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        wrath::MSG_QUERY_NEXT_MAIL_TIME_Client MSG_QUERY_NEXT_MAIL_TIMEswap(std::move(other.MSG_QUERY_NEXT_MAIL_TIME));
        std::swap(this->MSG_QUERY_NEXT_MAIL_TIME, MSG_QUERY_NEXT_MAIL_TIMEswap);
    }
    if (opcode == Opcode::CMSG_GROUP_RAID_CONVERT) {
        wrath::CMSG_GROUP_RAID_CONVERT CMSG_GROUP_RAID_CONVERTswap(std::move(other.CMSG_GROUP_RAID_CONVERT));
        std::swap(this->CMSG_GROUP_RAID_CONVERT, CMSG_GROUP_RAID_CONVERTswap);
    }
    if (opcode == Opcode::CMSG_GROUP_ASSISTANT_LEADER) {
        wrath::CMSG_GROUP_ASSISTANT_LEADER CMSG_GROUP_ASSISTANT_LEADERswap(std::move(other.CMSG_GROUP_ASSISTANT_LEADER));
        std::swap(this->CMSG_GROUP_ASSISTANT_LEADER, CMSG_GROUP_ASSISTANT_LEADERswap);
    }
    if (opcode == Opcode::CMSG_BUYBACK_ITEM) {
        wrath::CMSG_BUYBACK_ITEM CMSG_BUYBACK_ITEMswap(std::move(other.CMSG_BUYBACK_ITEM));
        std::swap(this->CMSG_BUYBACK_ITEM, CMSG_BUYBACK_ITEMswap);
    }
    if (opcode == Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) {
        wrath::CMSG_SET_SAVED_INSTANCE_EXTEND CMSG_SET_SAVED_INSTANCE_EXTENDswap(std::move(other.CMSG_SET_SAVED_INSTANCE_EXTEND));
        std::swap(this->CMSG_SET_SAVED_INSTANCE_EXTEND, CMSG_SET_SAVED_INSTANCE_EXTENDswap);
    }
    if (opcode == Opcode::CMSG_LFG_GET_STATUS) {
        wrath::CMSG_LFG_GET_STATUS CMSG_LFG_GET_STATUSswap(std::move(other.CMSG_LFG_GET_STATUS));
        std::swap(this->CMSG_LFG_GET_STATUS, CMSG_LFG_GET_STATUSswap);
    }
    if (opcode == Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) {
        wrath::CMSG_GMTICKETSYSTEM_TOGGLE CMSG_GMTICKETSYSTEM_TOGGLEswap(std::move(other.CMSG_GMTICKETSYSTEM_TOGGLE));
        std::swap(this->CMSG_GMTICKETSYSTEM_TOGGLE, CMSG_GMTICKETSYSTEM_TOGGLEswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_GROWTH_AURA) {
        wrath::CMSG_CANCEL_GROWTH_AURA CMSG_CANCEL_GROWTH_AURAswap(std::move(other.CMSG_CANCEL_GROWTH_AURA));
        std::swap(this->CMSG_CANCEL_GROWTH_AURA, CMSG_CANCEL_GROWTH_AURAswap);
    }
    if (opcode == Opcode::CMSG_LOOT_ROLL) {
        wrath::CMSG_LOOT_ROLL CMSG_LOOT_ROLLswap(std::move(other.CMSG_LOOT_ROLL));
        std::swap(this->CMSG_LOOT_ROLL, CMSG_LOOT_ROLLswap);
    }
    if (opcode == Opcode::CMSG_LOOT_MASTER_GIVE) {
        wrath::CMSG_LOOT_MASTER_GIVE CMSG_LOOT_MASTER_GIVEswap(std::move(other.CMSG_LOOT_MASTER_GIVE));
        std::swap(this->CMSG_LOOT_MASTER_GIVE, CMSG_LOOT_MASTER_GIVEswap);
    }
    if (opcode == Opcode::CMSG_REPAIR_ITEM) {
        wrath::CMSG_REPAIR_ITEM CMSG_REPAIR_ITEMswap(std::move(other.CMSG_REPAIR_ITEM));
        std::swap(this->CMSG_REPAIR_ITEM, CMSG_REPAIR_ITEMswap);
    }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        wrath::MSG_TALENT_WIPE_CONFIRM_Client MSG_TALENT_WIPE_CONFIRMswap(std::move(other.MSG_TALENT_WIPE_CONFIRM));
        std::swap(this->MSG_TALENT_WIPE_CONFIRM, MSG_TALENT_WIPE_CONFIRMswap);
    }
    if (opcode == Opcode::CMSG_SUMMON_RESPONSE) {
        wrath::CMSG_SUMMON_RESPONSE CMSG_SUMMON_RESPONSEswap(std::move(other.CMSG_SUMMON_RESPONSE));
        std::swap(this->CMSG_SUMMON_RESPONSE, CMSG_SUMMON_RESPONSEswap);
    }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        wrath::MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALKswap(std::move(other.MSG_MOVE_WATER_WALK));
        std::swap(this->MSG_MOVE_WATER_WALK, MSG_MOVE_WATER_WALKswap);
    }
    if (opcode == Opcode::CMSG_SELF_RES) {
        wrath::CMSG_SELF_RES CMSG_SELF_RESswap(std::move(other.CMSG_SELF_RES));
        std::swap(this->CMSG_SELF_RES, CMSG_SELF_RESswap);
    }
    if (opcode == Opcode::CMSG_TOGGLE_HELM) {
        wrath::CMSG_TOGGLE_HELM CMSG_TOGGLE_HELMswap(std::move(other.CMSG_TOGGLE_HELM));
        std::swap(this->CMSG_TOGGLE_HELM, CMSG_TOGGLE_HELMswap);
    }
    if (opcode == Opcode::CMSG_TOGGLE_CLOAK) {
        wrath::CMSG_TOGGLE_CLOAK CMSG_TOGGLE_CLOAKswap(std::move(other.CMSG_TOGGLE_CLOAK));
        std::swap(this->CMSG_TOGGLE_CLOAK, CMSG_TOGGLE_CLOAKswap);
    }
    if (opcode == Opcode::CMSG_SET_ACTIONBAR_TOGGLES) {
        wrath::CMSG_SET_ACTIONBAR_TOGGLES CMSG_SET_ACTIONBAR_TOGGLESswap(std::move(other.CMSG_SET_ACTIONBAR_TOGGLES));
        std::swap(this->CMSG_SET_ACTIONBAR_TOGGLES, CMSG_SET_ACTIONBAR_TOGGLESswap);
    }
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        wrath::MSG_PETITION_RENAME MSG_PETITION_RENAMEswap(std::move(other.MSG_PETITION_RENAME));
        std::swap(this->MSG_PETITION_RENAME, MSG_PETITION_RENAMEswap);
    }
    if (opcode == Opcode::CMSG_ITEM_NAME_QUERY) {
        wrath::CMSG_ITEM_NAME_QUERY CMSG_ITEM_NAME_QUERYswap(std::move(other.CMSG_ITEM_NAME_QUERY));
        std::swap(this->CMSG_ITEM_NAME_QUERY, CMSG_ITEM_NAME_QUERYswap);
    }
    if (opcode == Opcode::CMSG_CHAR_RENAME) {
        wrath::CMSG_CHAR_RENAME CMSG_CHAR_RENAMEswap(std::move(other.CMSG_CHAR_RENAME));
        std::swap(this->CMSG_CHAR_RENAME, CMSG_CHAR_RENAMEswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SPLINE_DONE) {
        wrath::CMSG_MOVE_SPLINE_DONE CMSG_MOVE_SPLINE_DONEswap(std::move(other.CMSG_MOVE_SPLINE_DONE));
        std::swap(this->CMSG_MOVE_SPLINE_DONE, CMSG_MOVE_SPLINE_DONEswap);
    }
    if (opcode == Opcode::CMSG_MOVE_FALL_RESET) {
        wrath::CMSG_MOVE_FALL_RESET CMSG_MOVE_FALL_RESETswap(std::move(other.CMSG_MOVE_FALL_RESET));
        std::swap(this->CMSG_MOVE_FALL_RESET, CMSG_MOVE_FALL_RESETswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_RAID_INFO) {
        wrath::CMSG_REQUEST_RAID_INFO CMSG_REQUEST_RAID_INFOswap(std::move(other.CMSG_REQUEST_RAID_INFO));
        std::swap(this->CMSG_REQUEST_RAID_INFO, CMSG_REQUEST_RAID_INFOswap);
    }
    if (opcode == Opcode::CMSG_MOVE_TIME_SKIPPED) {
        wrath::CMSG_MOVE_TIME_SKIPPED CMSG_MOVE_TIME_SKIPPEDswap(std::move(other.CMSG_MOVE_TIME_SKIPPED));
        std::swap(this->CMSG_MOVE_TIME_SKIPPED, CMSG_MOVE_TIME_SKIPPEDswap);
    }
    if (opcode == Opcode::CMSG_MOVE_FEATHER_FALL_ACK) {
        wrath::CMSG_MOVE_FEATHER_FALL_ACK CMSG_MOVE_FEATHER_FALL_ACKswap(std::move(other.CMSG_MOVE_FEATHER_FALL_ACK));
        std::swap(this->CMSG_MOVE_FEATHER_FALL_ACK, CMSG_MOVE_FEATHER_FALL_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_WATER_WALK_ACK) {
        wrath::CMSG_MOVE_WATER_WALK_ACK CMSG_MOVE_WATER_WALK_ACKswap(std::move(other.CMSG_MOVE_WATER_WALK_ACK));
        std::swap(this->CMSG_MOVE_WATER_WALK_ACK, CMSG_MOVE_WATER_WALK_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) {
        wrath::CMSG_MOVE_NOT_ACTIVE_MOVER CMSG_MOVE_NOT_ACTIVE_MOVERswap(std::move(other.CMSG_MOVE_NOT_ACTIVE_MOVER));
        std::swap(this->CMSG_MOVE_NOT_ACTIVE_MOVER, CMSG_MOVE_NOT_ACTIVE_MOVERswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_STATUS) {
        wrath::CMSG_BATTLEFIELD_STATUS CMSG_BATTLEFIELD_STATUSswap(std::move(other.CMSG_BATTLEFIELD_STATUS));
        std::swap(this->CMSG_BATTLEFIELD_STATUS, CMSG_BATTLEFIELD_STATUSswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_PORT) {
        wrath::CMSG_BATTLEFIELD_PORT CMSG_BATTLEFIELD_PORTswap(std::move(other.CMSG_BATTLEFIELD_PORT));
        std::swap(this->CMSG_BATTLEFIELD_PORT, CMSG_BATTLEFIELD_PORTswap);
    }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        wrath::MSG_INSPECT_HONOR_STATS_Client MSG_INSPECT_HONOR_STATSswap(std::move(other.MSG_INSPECT_HONOR_STATS));
        std::swap(this->MSG_INSPECT_HONOR_STATS, MSG_INSPECT_HONOR_STATSswap);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_HELLO) {
        wrath::CMSG_BATTLEMASTER_HELLO CMSG_BATTLEMASTER_HELLOswap(std::move(other.CMSG_BATTLEMASTER_HELLO));
        std::swap(this->CMSG_BATTLEMASTER_HELLO, CMSG_BATTLEMASTER_HELLOswap);
    }
    if (opcode == Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK CMSG_FORCE_WALK_SPEED_CHANGE_ACKswap(std::move(other.CMSG_FORCE_WALK_SPEED_CHANGE_ACK));
        std::swap(this->CMSG_FORCE_WALK_SPEED_CHANGE_ACK, CMSG_FORCE_WALK_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACKswap(std::move(other.CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK));
        std::swap(this->CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK, CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) {
        wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK CMSG_FORCE_TURN_RATE_CHANGE_ACKswap(std::move(other.CMSG_FORCE_TURN_RATE_CHANGE_ACK));
        std::swap(this->CMSG_FORCE_TURN_RATE_CHANGE_ACK, CMSG_FORCE_TURN_RATE_CHANGE_ACKswap);
    }
    if (opcode == Opcode::MSG_PVP_LOG_DATA) {
        wrath::MSG_PVP_LOG_DATA_Client MSG_PVP_LOG_DATAswap(std::move(other.MSG_PVP_LOG_DATA));
        std::swap(this->MSG_PVP_LOG_DATA, MSG_PVP_LOG_DATAswap);
    }
    if (opcode == Opcode::CMSG_LEAVE_BATTLEFIELD) {
        wrath::CMSG_LEAVE_BATTLEFIELD CMSG_LEAVE_BATTLEFIELDswap(std::move(other.CMSG_LEAVE_BATTLEFIELD));
        std::swap(this->CMSG_LEAVE_BATTLEFIELD, CMSG_LEAVE_BATTLEFIELDswap);
    }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) {
        wrath::CMSG_AREA_SPIRIT_HEALER_QUERY CMSG_AREA_SPIRIT_HEALER_QUERYswap(std::move(other.CMSG_AREA_SPIRIT_HEALER_QUERY));
        std::swap(this->CMSG_AREA_SPIRIT_HEALER_QUERY, CMSG_AREA_SPIRIT_HEALER_QUERYswap);
    }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) {
        wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE CMSG_AREA_SPIRIT_HEALER_QUEUEswap(std::move(other.CMSG_AREA_SPIRIT_HEALER_QUEUE));
        std::swap(this->CMSG_AREA_SPIRIT_HEALER_QUEUE, CMSG_AREA_SPIRIT_HEALER_QUEUEswap);
    }
    if (opcode == Opcode::CMSG_WARDEN_DATA) {
        wrath::CMSG_WARDEN_DATA CMSG_WARDEN_DATAswap(std::move(other.CMSG_WARDEN_DATA));
        std::swap(this->CMSG_WARDEN_DATA, CMSG_WARDEN_DATAswap);
    }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client MSG_BATTLEGROUND_PLAYER_POSITIONSswap(std::move(other.MSG_BATTLEGROUND_PLAYER_POSITIONS));
        std::swap(this->MSG_BATTLEGROUND_PLAYER_POSITIONS, MSG_BATTLEGROUND_PLAYER_POSITIONSswap);
    }
    if (opcode == Opcode::CMSG_PET_STOP_ATTACK) {
        wrath::CMSG_PET_STOP_ATTACK CMSG_PET_STOP_ATTACKswap(std::move(other.CMSG_PET_STOP_ATTACK));
        std::swap(this->CMSG_PET_STOP_ATTACK, CMSG_PET_STOP_ATTACKswap);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN) {
        wrath::CMSG_BATTLEMASTER_JOIN CMSG_BATTLEMASTER_JOINswap(std::move(other.CMSG_BATTLEMASTER_JOIN));
        std::swap(this->CMSG_BATTLEMASTER_JOIN, CMSG_BATTLEMASTER_JOINswap);
    }
    if (opcode == Opcode::CMSG_PET_UNLEARN) {
        wrath::CMSG_PET_UNLEARN CMSG_PET_UNLEARNswap(std::move(other.CMSG_PET_UNLEARN));
        std::swap(this->CMSG_PET_UNLEARN, CMSG_PET_UNLEARNswap);
    }
    if (opcode == Opcode::CMSG_PET_SPELL_AUTOCAST) {
        wrath::CMSG_PET_SPELL_AUTOCAST CMSG_PET_SPELL_AUTOCASTswap(std::move(other.CMSG_PET_SPELL_AUTOCAST));
        std::swap(this->CMSG_PET_SPELL_AUTOCAST, CMSG_PET_SPELL_AUTOCASTswap);
    }
    if (opcode == Opcode::CMSG_GUILD_INFO_TEXT) {
        wrath::CMSG_GUILD_INFO_TEXT CMSG_GUILD_INFO_TEXTswap(std::move(other.CMSG_GUILD_INFO_TEXT));
        std::swap(this->CMSG_GUILD_INFO_TEXT, CMSG_GUILD_INFO_TEXTswap);
    }
    if (opcode == Opcode::CMSG_ACTIVATETAXIEXPRESS) {
        wrath::CMSG_ACTIVATETAXIEXPRESS CMSG_ACTIVATETAXIEXPRESSswap(std::move(other.CMSG_ACTIVATETAXIEXPRESS));
        std::swap(this->CMSG_ACTIVATETAXIEXPRESS, CMSG_ACTIVATETAXIEXPRESSswap);
    }
    if (opcode == Opcode::CMSG_SET_FACTION_INACTIVE) {
        wrath::CMSG_SET_FACTION_INACTIVE CMSG_SET_FACTION_INACTIVEswap(std::move(other.CMSG_SET_FACTION_INACTIVE));
        std::swap(this->CMSG_SET_FACTION_INACTIVE, CMSG_SET_FACTION_INACTIVEswap);
    }
    if (opcode == Opcode::CMSG_SET_WATCHED_FACTION) {
        wrath::CMSG_SET_WATCHED_FACTION CMSG_SET_WATCHED_FACTIONswap(std::move(other.CMSG_SET_WATCHED_FACTION));
        std::swap(this->CMSG_SET_WATCHED_FACTION, CMSG_SET_WATCHED_FACTIONswap);
    }
    if (opcode == Opcode::CMSG_RESET_INSTANCES) {
        wrath::CMSG_RESET_INSTANCES CMSG_RESET_INSTANCESswap(std::move(other.CMSG_RESET_INSTANCES));
        std::swap(this->CMSG_RESET_INSTANCES, CMSG_RESET_INSTANCESswap);
    }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        wrath::MSG_RAID_TARGET_UPDATE_Client MSG_RAID_TARGET_UPDATEswap(std::move(other.MSG_RAID_TARGET_UPDATE));
        std::swap(this->MSG_RAID_TARGET_UPDATE, MSG_RAID_TARGET_UPDATEswap);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        wrath::MSG_RAID_READY_CHECK_Client MSG_RAID_READY_CHECKswap(std::move(other.MSG_RAID_READY_CHECK));
        std::swap(this->MSG_RAID_READY_CHECK, MSG_RAID_READY_CHECKswap);
    }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        wrath::MSG_SET_DUNGEON_DIFFICULTY_Client MSG_SET_DUNGEON_DIFFICULTYswap(std::move(other.MSG_SET_DUNGEON_DIFFICULTY));
        std::swap(this->MSG_SET_DUNGEON_DIFFICULTY, MSG_SET_DUNGEON_DIFFICULTYswap);
    }
    if (opcode == Opcode::CMSG_GMSURVEY_SUBMIT) {
        wrath::CMSG_GMSURVEY_SUBMIT CMSG_GMSURVEY_SUBMITswap(std::move(other.CMSG_GMSURVEY_SUBMIT));
        std::swap(this->CMSG_GMSURVEY_SUBMIT, CMSG_GMSURVEY_SUBMITswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) {
        wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACKswap(std::move(other.CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK));
        std::swap(this->CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK, CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) {
        wrath::CMSG_MOVE_SET_CAN_FLY_ACK CMSG_MOVE_SET_CAN_FLY_ACKswap(std::move(other.CMSG_MOVE_SET_CAN_FLY_ACK));
        std::swap(this->CMSG_MOVE_SET_CAN_FLY_ACK, CMSG_MOVE_SET_CAN_FLY_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_FLY) {
        wrath::CMSG_MOVE_SET_FLY CMSG_MOVE_SET_FLYswap(std::move(other.CMSG_MOVE_SET_FLY));
        std::swap(this->CMSG_MOVE_SET_FLY, CMSG_MOVE_SET_FLYswap);
    }
    if (opcode == Opcode::CMSG_SOCKET_GEMS) {
        wrath::CMSG_SOCKET_GEMS CMSG_SOCKET_GEMSswap(std::move(other.CMSG_SOCKET_GEMS));
        std::swap(this->CMSG_SOCKET_GEMS, CMSG_SOCKET_GEMSswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ROSTER) {
        wrath::CMSG_ARENA_TEAM_ROSTER CMSG_ARENA_TEAM_ROSTERswap(std::move(other.CMSG_ARENA_TEAM_ROSTER));
        std::swap(this->CMSG_ARENA_TEAM_ROSTER, CMSG_ARENA_TEAM_ROSTERswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_INVITE) {
        wrath::CMSG_ARENA_TEAM_INVITE CMSG_ARENA_TEAM_INVITEswap(std::move(other.CMSG_ARENA_TEAM_INVITE));
        std::swap(this->CMSG_ARENA_TEAM_INVITE, CMSG_ARENA_TEAM_INVITEswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ACCEPT) {
        wrath::CMSG_ARENA_TEAM_ACCEPT CMSG_ARENA_TEAM_ACCEPTswap(std::move(other.CMSG_ARENA_TEAM_ACCEPT));
        std::swap(this->CMSG_ARENA_TEAM_ACCEPT, CMSG_ARENA_TEAM_ACCEPTswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DECLINE) {
        wrath::CMSG_ARENA_TEAM_DECLINE CMSG_ARENA_TEAM_DECLINEswap(std::move(other.CMSG_ARENA_TEAM_DECLINE));
        std::swap(this->CMSG_ARENA_TEAM_DECLINE, CMSG_ARENA_TEAM_DECLINEswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEAVE) {
        wrath::CMSG_ARENA_TEAM_LEAVE CMSG_ARENA_TEAM_LEAVEswap(std::move(other.CMSG_ARENA_TEAM_LEAVE));
        std::swap(this->CMSG_ARENA_TEAM_LEAVE, CMSG_ARENA_TEAM_LEAVEswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_REMOVE) {
        wrath::CMSG_ARENA_TEAM_REMOVE CMSG_ARENA_TEAM_REMOVEswap(std::move(other.CMSG_ARENA_TEAM_REMOVE));
        std::swap(this->CMSG_ARENA_TEAM_REMOVE, CMSG_ARENA_TEAM_REMOVEswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DISBAND) {
        wrath::CMSG_ARENA_TEAM_DISBAND CMSG_ARENA_TEAM_DISBANDswap(std::move(other.CMSG_ARENA_TEAM_DISBAND));
        std::swap(this->CMSG_ARENA_TEAM_DISBAND, CMSG_ARENA_TEAM_DISBANDswap);
    }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEADER) {
        wrath::CMSG_ARENA_TEAM_LEADER CMSG_ARENA_TEAM_LEADERswap(std::move(other.CMSG_ARENA_TEAM_LEADER));
        std::swap(this->CMSG_ARENA_TEAM_LEADER, CMSG_ARENA_TEAM_LEADERswap);
    }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) {
        wrath::CMSG_BATTLEMASTER_JOIN_ARENA CMSG_BATTLEMASTER_JOIN_ARENAswap(std::move(other.CMSG_BATTLEMASTER_JOIN_ARENA));
        std::swap(this->CMSG_BATTLEMASTER_JOIN_ARENA, CMSG_BATTLEMASTER_JOIN_ARENAswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        wrath::MSG_MOVE_START_ASCEND MSG_MOVE_START_ASCENDswap(std::move(other.MSG_MOVE_START_ASCEND));
        std::swap(this->MSG_MOVE_START_ASCEND, MSG_MOVE_START_ASCENDswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        wrath::MSG_MOVE_STOP_ASCEND MSG_MOVE_STOP_ASCENDswap(std::move(other.MSG_MOVE_STOP_ASCEND));
        std::swap(this->MSG_MOVE_STOP_ASCEND, MSG_MOVE_STOP_ASCENDswap);
    }
    if (opcode == Opcode::CMSG_LFG_JOIN) {
        wrath::CMSG_LFG_JOIN CMSG_LFG_JOINswap(std::move(other.CMSG_LFG_JOIN));
        std::swap(this->CMSG_LFG_JOIN, CMSG_LFG_JOINswap);
    }
    if (opcode == Opcode::CMSG_LFG_LEAVE) {
        wrath::CMSG_LFG_LEAVE CMSG_LFG_LEAVEswap(std::move(other.CMSG_LFG_LEAVE));
        std::swap(this->CMSG_LFG_LEAVE, CMSG_LFG_LEAVEswap);
    }
    if (opcode == Opcode::CMSG_SEARCH_LFG_JOIN) {
        wrath::CMSG_SEARCH_LFG_JOIN CMSG_SEARCH_LFG_JOINswap(std::move(other.CMSG_SEARCH_LFG_JOIN));
        std::swap(this->CMSG_SEARCH_LFG_JOIN, CMSG_SEARCH_LFG_JOINswap);
    }
    if (opcode == Opcode::CMSG_SEARCH_LFG_LEAVE) {
        wrath::CMSG_SEARCH_LFG_LEAVE CMSG_SEARCH_LFG_LEAVEswap(std::move(other.CMSG_SEARCH_LFG_LEAVE));
        std::swap(this->CMSG_SEARCH_LFG_LEAVE, CMSG_SEARCH_LFG_LEAVEswap);
    }
    if (opcode == Opcode::CMSG_LFG_PROPOSAL_RESULT) {
        wrath::CMSG_LFG_PROPOSAL_RESULT CMSG_LFG_PROPOSAL_RESULTswap(std::move(other.CMSG_LFG_PROPOSAL_RESULT));
        std::swap(this->CMSG_LFG_PROPOSAL_RESULT, CMSG_LFG_PROPOSAL_RESULTswap);
    }
    if (opcode == Opcode::CMSG_SET_LFG_COMMENT) {
        wrath::CMSG_SET_LFG_COMMENT CMSG_SET_LFG_COMMENTswap(std::move(other.CMSG_SET_LFG_COMMENT));
        std::swap(this->CMSG_SET_LFG_COMMENT, CMSG_SET_LFG_COMMENTswap);
    }
    if (opcode == Opcode::CMSG_LFG_SET_ROLES) {
        wrath::CMSG_LFG_SET_ROLES CMSG_LFG_SET_ROLESswap(std::move(other.CMSG_LFG_SET_ROLES));
        std::swap(this->CMSG_LFG_SET_ROLES, CMSG_LFG_SET_ROLESswap);
    }
    if (opcode == Opcode::CMSG_LFG_SET_BOOT_VOTE) {
        wrath::CMSG_LFG_SET_BOOT_VOTE CMSG_LFG_SET_BOOT_VOTEswap(std::move(other.CMSG_LFG_SET_BOOT_VOTE));
        std::swap(this->CMSG_LFG_SET_BOOT_VOTE, CMSG_LFG_SET_BOOT_VOTEswap);
    }
    if (opcode == Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) {
        wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST CMSG_LFD_PLAYER_LOCK_INFO_REQUESTswap(std::move(other.CMSG_LFD_PLAYER_LOCK_INFO_REQUEST));
        std::swap(this->CMSG_LFD_PLAYER_LOCK_INFO_REQUEST, CMSG_LFD_PLAYER_LOCK_INFO_REQUESTswap);
    }
    if (opcode == Opcode::CMSG_LFG_TELEPORT) {
        wrath::CMSG_LFG_TELEPORT CMSG_LFG_TELEPORTswap(std::move(other.CMSG_LFG_TELEPORT));
        std::swap(this->CMSG_LFG_TELEPORT, CMSG_LFG_TELEPORTswap);
    }
    if (opcode == Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) {
        wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST CMSG_LFD_PARTY_LOCK_INFO_REQUESTswap(std::move(other.CMSG_LFD_PARTY_LOCK_INFO_REQUEST));
        std::swap(this->CMSG_LFD_PARTY_LOCK_INFO_REQUEST, CMSG_LFD_PARTY_LOCK_INFO_REQUESTswap);
    }
    if (opcode == Opcode::CMSG_SET_TITLE) {
        wrath::CMSG_SET_TITLE CMSG_SET_TITLEswap(std::move(other.CMSG_SET_TITLE));
        std::swap(this->CMSG_SET_TITLE, CMSG_SET_TITLEswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_MOUNT_AURA) {
        wrath::CMSG_CANCEL_MOUNT_AURA CMSG_CANCEL_MOUNT_AURAswap(std::move(other.CMSG_CANCEL_MOUNT_AURA));
        std::swap(this->CMSG_CANCEL_MOUNT_AURA, CMSG_CANCEL_MOUNT_AURAswap);
    }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        wrath::MSG_INSPECT_ARENA_TEAMS_Client MSG_INSPECT_ARENA_TEAMSswap(std::move(other.MSG_INSPECT_ARENA_TEAMS));
        std::swap(this->MSG_INSPECT_ARENA_TEAMS, MSG_INSPECT_ARENA_TEAMSswap);
    }
    if (opcode == Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) {
        wrath::CMSG_CANCEL_TEMP_ENCHANTMENT CMSG_CANCEL_TEMP_ENCHANTMENTswap(std::move(other.CMSG_CANCEL_TEMP_ENCHANTMENT));
        std::swap(this->CMSG_CANCEL_TEMP_ENCHANTMENT, CMSG_CANCEL_TEMP_ENCHANTMENTswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEEDswap(std::move(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED));
        std::swap(this->MSG_MOVE_SET_FLIGHT_BACK_SPEED, MSG_MOVE_SET_FLIGHT_BACK_SPEEDswap);
    }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACKswap(std::move(other.CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK));
        std::swap(this->CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK, CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) {
        wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACKswap(std::move(other.CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK));
        std::swap(this->CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK, CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACKswap);
    }
    if (opcode == Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) {
        wrath::CMSG_SET_TAXI_BENCHMARK_MODE CMSG_SET_TAXI_BENCHMARK_MODEswap(std::move(other.CMSG_SET_TAXI_BENCHMARK_MODE));
        std::swap(this->CMSG_SET_TAXI_BENCHMARK_MODE, CMSG_SET_TAXI_BENCHMARK_MODEswap);
    }
    if (opcode == Opcode::CMSG_REALM_SPLIT) {
        wrath::CMSG_REALM_SPLIT CMSG_REALM_SPLITswap(std::move(other.CMSG_REALM_SPLIT));
        std::swap(this->CMSG_REALM_SPLIT, CMSG_REALM_SPLITswap);
    }
    if (opcode == Opcode::CMSG_MOVE_CHNG_TRANSPORT) {
        wrath::CMSG_MOVE_CHNG_TRANSPORT CMSG_MOVE_CHNG_TRANSPORTswap(std::move(other.CMSG_MOVE_CHNG_TRANSPORT));
        std::swap(this->CMSG_MOVE_CHNG_TRANSPORT, CMSG_MOVE_CHNG_TRANSPORTswap);
    }
    if (opcode == Opcode::MSG_PARTY_ASSIGNMENT) {
        wrath::MSG_PARTY_ASSIGNMENT_Client MSG_PARTY_ASSIGNMENTswap(std::move(other.MSG_PARTY_ASSIGNMENT));
        std::swap(this->MSG_PARTY_ASSIGNMENT, MSG_PARTY_ASSIGNMENTswap);
    }
    if (opcode == Opcode::CMSG_TIME_SYNC_RESP) {
        wrath::CMSG_TIME_SYNC_RESP CMSG_TIME_SYNC_RESPswap(std::move(other.CMSG_TIME_SYNC_RESP));
        std::swap(this->CMSG_TIME_SYNC_RESP, CMSG_TIME_SYNC_RESPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        wrath::MSG_MOVE_START_DESCEND MSG_MOVE_START_DESCENDswap(std::move(other.MSG_MOVE_START_DESCEND));
        std::swap(this->MSG_MOVE_START_DESCEND, MSG_MOVE_START_DESCENDswap);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        wrath::MSG_RAID_READY_CHECK_CONFIRM_Client MSG_RAID_READY_CHECK_CONFIRMswap(std::move(other.MSG_RAID_READY_CHECK_CONFIRM));
        std::swap(this->MSG_RAID_READY_CHECK_CONFIRM, MSG_RAID_READY_CHECK_CONFIRMswap);
    }
    if (opcode == Opcode::CMSG_VOICE_SESSION_ENABLE) {
        wrath::CMSG_VOICE_SESSION_ENABLE CMSG_VOICE_SESSION_ENABLEswap(std::move(other.CMSG_VOICE_SESSION_ENABLE));
        std::swap(this->CMSG_VOICE_SESSION_ENABLE, CMSG_VOICE_SESSION_ENABLEswap);
    }
    if (opcode == Opcode::CMSG_COMMENTATOR_ENABLE) {
        wrath::CMSG_COMMENTATOR_ENABLE CMSG_COMMENTATOR_ENABLEswap(std::move(other.CMSG_COMMENTATOR_ENABLE));
        std::swap(this->CMSG_COMMENTATOR_ENABLE, CMSG_COMMENTATOR_ENABLEswap);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_FINISHED) {
        wrath::MSG_RAID_READY_CHECK_FINISHED_Client MSG_RAID_READY_CHECK_FINISHEDswap(std::move(other.MSG_RAID_READY_CHECK_FINISHED));
        std::swap(this->MSG_RAID_READY_CHECK_FINISHED, MSG_RAID_READY_CHECK_FINISHEDswap);
    }
    if (opcode == Opcode::CMSG_COMPLAIN) {
        wrath::CMSG_COMPLAIN CMSG_COMPLAINswap(std::move(other.CMSG_COMPLAIN));
        std::swap(this->CMSG_COMPLAIN, CMSG_COMPLAINswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_DISPLAY_LIST) {
        wrath::CMSG_CHANNEL_DISPLAY_LIST CMSG_CHANNEL_DISPLAY_LISTswap(std::move(other.CMSG_CHANNEL_DISPLAY_LIST));
        std::swap(this->CMSG_CHANNEL_DISPLAY_LIST, CMSG_CHANNEL_DISPLAY_LISTswap);
    }
    if (opcode == Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) {
        wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL CMSG_SET_ACTIVE_VOICE_CHANNELswap(std::move(other.CMSG_SET_ACTIVE_VOICE_CHANNEL));
        std::swap(this->CMSG_SET_ACTIVE_VOICE_CHANNEL, CMSG_SET_ACTIVE_VOICE_CHANNELswap);
    }
    if (opcode == Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) {
        wrath::CMSG_GET_CHANNEL_MEMBER_COUNT CMSG_GET_CHANNEL_MEMBER_COUNTswap(std::move(other.CMSG_GET_CHANNEL_MEMBER_COUNT));
        std::swap(this->CMSG_GET_CHANNEL_MEMBER_COUNT, CMSG_GET_CHANNEL_MEMBER_COUNTswap);
    }
    if (opcode == Opcode::CMSG_CHANNEL_VOICE_ON) {
        wrath::CMSG_CHANNEL_VOICE_ON CMSG_CHANNEL_VOICE_ONswap(std::move(other.CMSG_CHANNEL_VOICE_ON));
        std::swap(this->CMSG_CHANNEL_VOICE_ON, CMSG_CHANNEL_VOICE_ONswap);
    }
    if (opcode == Opcode::CMSG_REPORT_PVP_AFK) {
        wrath::CMSG_REPORT_PVP_AFK CMSG_REPORT_PVP_AFKswap(std::move(other.CMSG_REPORT_PVP_AFK));
        std::swap(this->CMSG_REPORT_PVP_AFK, CMSG_REPORT_PVP_AFKswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANKER_ACTIVATE) {
        wrath::CMSG_GUILD_BANKER_ACTIVATE CMSG_GUILD_BANKER_ACTIVATEswap(std::move(other.CMSG_GUILD_BANKER_ACTIVATE));
        std::swap(this->CMSG_GUILD_BANKER_ACTIVATE, CMSG_GUILD_BANKER_ACTIVATEswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_QUERY_TAB) {
        wrath::CMSG_GUILD_BANK_QUERY_TAB CMSG_GUILD_BANK_QUERY_TABswap(std::move(other.CMSG_GUILD_BANK_QUERY_TAB));
        std::swap(this->CMSG_GUILD_BANK_QUERY_TAB, CMSG_GUILD_BANK_QUERY_TABswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) {
        wrath::CMSG_GUILD_BANK_SWAP_ITEMS CMSG_GUILD_BANK_SWAP_ITEMSswap(std::move(other.CMSG_GUILD_BANK_SWAP_ITEMS));
        std::swap(this->CMSG_GUILD_BANK_SWAP_ITEMS, CMSG_GUILD_BANK_SWAP_ITEMSswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_BUY_TAB) {
        wrath::CMSG_GUILD_BANK_BUY_TAB CMSG_GUILD_BANK_BUY_TABswap(std::move(other.CMSG_GUILD_BANK_BUY_TAB));
        std::swap(this->CMSG_GUILD_BANK_BUY_TAB, CMSG_GUILD_BANK_BUY_TABswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_UPDATE_TAB) {
        wrath::CMSG_GUILD_BANK_UPDATE_TAB CMSG_GUILD_BANK_UPDATE_TABswap(std::move(other.CMSG_GUILD_BANK_UPDATE_TAB));
        std::swap(this->CMSG_GUILD_BANK_UPDATE_TAB, CMSG_GUILD_BANK_UPDATE_TABswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) {
        wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY CMSG_GUILD_BANK_DEPOSIT_MONEYswap(std::move(other.CMSG_GUILD_BANK_DEPOSIT_MONEY));
        std::swap(this->CMSG_GUILD_BANK_DEPOSIT_MONEY, CMSG_GUILD_BANK_DEPOSIT_MONEYswap);
    }
    if (opcode == Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) {
        wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY CMSG_GUILD_BANK_WITHDRAW_MONEYswap(std::move(other.CMSG_GUILD_BANK_WITHDRAW_MONEY));
        std::swap(this->CMSG_GUILD_BANK_WITHDRAW_MONEY, CMSG_GUILD_BANK_WITHDRAW_MONEYswap);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        wrath::MSG_GUILD_BANK_LOG_QUERY_Client MSG_GUILD_BANK_LOG_QUERYswap(std::move(other.MSG_GUILD_BANK_LOG_QUERY));
        std::swap(this->MSG_GUILD_BANK_LOG_QUERY, MSG_GUILD_BANK_LOG_QUERYswap);
    }
    if (opcode == Opcode::CMSG_SET_CHANNEL_WATCH) {
        wrath::CMSG_SET_CHANNEL_WATCH CMSG_SET_CHANNEL_WATCHswap(std::move(other.CMSG_SET_CHANNEL_WATCH));
        std::swap(this->CMSG_SET_CHANNEL_WATCH, CMSG_SET_CHANNEL_WATCHswap);
    }
    if (opcode == Opcode::CMSG_CLEAR_CHANNEL_WATCH) {
        wrath::CMSG_CLEAR_CHANNEL_WATCH CMSG_CLEAR_CHANNEL_WATCHswap(std::move(other.CMSG_CLEAR_CHANNEL_WATCH));
        std::swap(this->CMSG_CLEAR_CHANNEL_WATCH, CMSG_CLEAR_CHANNEL_WATCHswap);
    }
    if (opcode == Opcode::CMSG_SPELLCLICK) {
        wrath::CMSG_SPELLCLICK CMSG_SPELLCLICKswap(std::move(other.CMSG_SPELLCLICK));
        std::swap(this->CMSG_SPELLCLICK, CMSG_SPELLCLICKswap);
    }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        wrath::MSG_GUILD_PERMISSIONS_Client MSG_GUILD_PERMISSIONSswap(std::move(other.MSG_GUILD_PERMISSIONS));
        std::swap(this->MSG_GUILD_PERMISSIONS, MSG_GUILD_PERMISSIONSswap);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client MSG_GUILD_BANK_MONEY_WITHDRAWNswap(std::move(other.MSG_GUILD_BANK_MONEY_WITHDRAWN));
        std::swap(this->MSG_GUILD_BANK_MONEY_WITHDRAWN, MSG_GUILD_BANK_MONEY_WITHDRAWNswap);
    }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        wrath::MSG_GUILD_EVENT_LOG_QUERY_Client MSG_GUILD_EVENT_LOG_QUERYswap(std::move(other.MSG_GUILD_EVENT_LOG_QUERY));
        std::swap(this->MSG_GUILD_EVENT_LOG_QUERY, MSG_GUILD_EVENT_LOG_QUERYswap);
    }
    if (opcode == Opcode::CMSG_GET_MIRRORIMAGE_DATA) {
        wrath::CMSG_GET_MIRRORIMAGE_DATA CMSG_GET_MIRRORIMAGE_DATAswap(std::move(other.CMSG_GET_MIRRORIMAGE_DATA));
        std::swap(this->CMSG_GET_MIRRORIMAGE_DATA, CMSG_GET_MIRRORIMAGE_DATAswap);
    }
    if (opcode == Opcode::CMSG_KEEP_ALIVE) {
        wrath::CMSG_KEEP_ALIVE CMSG_KEEP_ALIVEswap(std::move(other.CMSG_KEEP_ALIVE));
        std::swap(this->CMSG_KEEP_ALIVE, CMSG_KEEP_ALIVEswap);
    }
    if (opcode == Opcode::CMSG_OPT_OUT_OF_LOOT) {
        wrath::CMSG_OPT_OUT_OF_LOOT CMSG_OPT_OUT_OF_LOOTswap(std::move(other.CMSG_OPT_OUT_OF_LOOT));
        std::swap(this->CMSG_OPT_OUT_OF_LOOT, CMSG_OPT_OUT_OF_LOOTswap);
    }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        wrath::MSG_QUERY_GUILD_BANK_TEXT_Client MSG_QUERY_GUILD_BANK_TEXTswap(std::move(other.MSG_QUERY_GUILD_BANK_TEXT));
        std::swap(this->MSG_QUERY_GUILD_BANK_TEXT, MSG_QUERY_GUILD_BANK_TEXTswap);
    }
    if (opcode == Opcode::CMSG_SET_GUILD_BANK_TEXT) {
        wrath::CMSG_SET_GUILD_BANK_TEXT CMSG_SET_GUILD_BANK_TEXTswap(std::move(other.CMSG_SET_GUILD_BANK_TEXT));
        std::swap(this->CMSG_SET_GUILD_BANK_TEXT, CMSG_SET_GUILD_BANK_TEXTswap);
    }
    if (opcode == Opcode::CMSG_GRANT_LEVEL) {
        wrath::CMSG_GRANT_LEVEL CMSG_GRANT_LEVELswap(std::move(other.CMSG_GRANT_LEVEL));
        std::swap(this->CMSG_GRANT_LEVEL, CMSG_GRANT_LEVELswap);
    }
    if (opcode == Opcode::CMSG_TOTEM_DESTROYED) {
        wrath::CMSG_TOTEM_DESTROYED CMSG_TOTEM_DESTROYEDswap(std::move(other.CMSG_TOTEM_DESTROYED));
        std::swap(this->CMSG_TOTEM_DESTROYED, CMSG_TOTEM_DESTROYEDswap);
    }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) {
        wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERYswap(std::move(other.CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY));
        std::swap(this->CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY, CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERYswap);
    }
    if (opcode == Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) {
        wrath::CMSG_SET_PLAYER_DECLINED_NAMES CMSG_SET_PLAYER_DECLINED_NAMESswap(std::move(other.CMSG_SET_PLAYER_DECLINED_NAMES));
        std::swap(this->CMSG_SET_PLAYER_DECLINED_NAMES, CMSG_SET_PLAYER_DECLINED_NAMESswap);
    }
    if (opcode == Opcode::CMSG_ACCEPT_LEVEL_GRANT) {
        wrath::CMSG_ACCEPT_LEVEL_GRANT CMSG_ACCEPT_LEVEL_GRANTswap(std::move(other.CMSG_ACCEPT_LEVEL_GRANT));
        std::swap(this->CMSG_ACCEPT_LEVEL_GRANT, CMSG_ACCEPT_LEVEL_GRANTswap);
    }
    if (opcode == Opcode::CMSG_ALTER_APPEARANCE) {
        wrath::CMSG_ALTER_APPEARANCE CMSG_ALTER_APPEARANCEswap(std::move(other.CMSG_ALTER_APPEARANCE));
        std::swap(this->CMSG_ALTER_APPEARANCE, CMSG_ALTER_APPEARANCEswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_CALENDAR) {
        wrath::CMSG_CALENDAR_GET_CALENDAR CMSG_CALENDAR_GET_CALENDARswap(std::move(other.CMSG_CALENDAR_GET_CALENDAR));
        std::swap(this->CMSG_CALENDAR_GET_CALENDAR, CMSG_CALENDAR_GET_CALENDARswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_EVENT) {
        wrath::CMSG_CALENDAR_GET_EVENT CMSG_CALENDAR_GET_EVENTswap(std::move(other.CMSG_CALENDAR_GET_EVENT));
        std::swap(this->CMSG_CALENDAR_GET_EVENT, CMSG_CALENDAR_GET_EVENTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GUILD_FILTER) {
        wrath::CMSG_CALENDAR_GUILD_FILTER CMSG_CALENDAR_GUILD_FILTERswap(std::move(other.CMSG_CALENDAR_GUILD_FILTER));
        std::swap(this->CMSG_CALENDAR_GUILD_FILTER, CMSG_CALENDAR_GUILD_FILTERswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_ARENA_TEAM) {
        wrath::CMSG_CALENDAR_ARENA_TEAM CMSG_CALENDAR_ARENA_TEAMswap(std::move(other.CMSG_CALENDAR_ARENA_TEAM));
        std::swap(this->CMSG_CALENDAR_ARENA_TEAM, CMSG_CALENDAR_ARENA_TEAMswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_ADD_EVENT) {
        wrath::CMSG_CALENDAR_ADD_EVENT CMSG_CALENDAR_ADD_EVENTswap(std::move(other.CMSG_CALENDAR_ADD_EVENT));
        std::swap(this->CMSG_CALENDAR_ADD_EVENT, CMSG_CALENDAR_ADD_EVENTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_UPDATE_EVENT) {
        wrath::CMSG_CALENDAR_UPDATE_EVENT CMSG_CALENDAR_UPDATE_EVENTswap(std::move(other.CMSG_CALENDAR_UPDATE_EVENT));
        std::swap(this->CMSG_CALENDAR_UPDATE_EVENT, CMSG_CALENDAR_UPDATE_EVENTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_REMOVE_EVENT) {
        wrath::CMSG_CALENDAR_REMOVE_EVENT CMSG_CALENDAR_REMOVE_EVENTswap(std::move(other.CMSG_CALENDAR_REMOVE_EVENT));
        std::swap(this->CMSG_CALENDAR_REMOVE_EVENT, CMSG_CALENDAR_REMOVE_EVENTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_COPY_EVENT) {
        wrath::CMSG_CALENDAR_COPY_EVENT CMSG_CALENDAR_COPY_EVENTswap(std::move(other.CMSG_CALENDAR_COPY_EVENT));
        std::swap(this->CMSG_CALENDAR_COPY_EVENT, CMSG_CALENDAR_COPY_EVENTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_INVITE) {
        wrath::CMSG_CALENDAR_EVENT_INVITE CMSG_CALENDAR_EVENT_INVITEswap(std::move(other.CMSG_CALENDAR_EVENT_INVITE));
        std::swap(this->CMSG_CALENDAR_EVENT_INVITE, CMSG_CALENDAR_EVENT_INVITEswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_RSVP) {
        wrath::CMSG_CALENDAR_EVENT_RSVP CMSG_CALENDAR_EVENT_RSVPswap(std::move(other.CMSG_CALENDAR_EVENT_RSVP));
        std::swap(this->CMSG_CALENDAR_EVENT_RSVP, CMSG_CALENDAR_EVENT_RSVPswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) {
        wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE CMSG_CALENDAR_EVENT_REMOVE_INVITEswap(std::move(other.CMSG_CALENDAR_EVENT_REMOVE_INVITE));
        std::swap(this->CMSG_CALENDAR_EVENT_REMOVE_INVITE, CMSG_CALENDAR_EVENT_REMOVE_INVITEswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_STATUS) {
        wrath::CMSG_CALENDAR_EVENT_STATUS CMSG_CALENDAR_EVENT_STATUSswap(std::move(other.CMSG_CALENDAR_EVENT_STATUS));
        std::swap(this->CMSG_CALENDAR_EVENT_STATUS, CMSG_CALENDAR_EVENT_STATUSswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) {
        wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS CMSG_CALENDAR_EVENT_MODERATOR_STATUSswap(std::move(other.CMSG_CALENDAR_EVENT_MODERATOR_STATUS));
        std::swap(this->CMSG_CALENDAR_EVENT_MODERATOR_STATUS, CMSG_CALENDAR_EVENT_MODERATOR_STATUSswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_COMPLAIN) {
        wrath::CMSG_CALENDAR_COMPLAIN CMSG_CALENDAR_COMPLAINswap(std::move(other.CMSG_CALENDAR_COMPLAIN));
        std::swap(this->CMSG_CALENDAR_COMPLAIN, CMSG_CALENDAR_COMPLAINswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        wrath::CMSG_CALENDAR_GET_NUM_PENDING CMSG_CALENDAR_GET_NUM_PENDINGswap(std::move(other.CMSG_CALENDAR_GET_NUM_PENDING));
        std::swap(this->CMSG_CALENDAR_GET_NUM_PENDING, CMSG_CALENDAR_GET_NUM_PENDINGswap);
    }
    if (opcode == Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) {
        wrath::CMSG_UPDATE_MISSILE_TRAJECTORY CMSG_UPDATE_MISSILE_TRAJECTORYswap(std::move(other.CMSG_UPDATE_MISSILE_TRAJECTORY));
        std::swap(this->CMSG_UPDATE_MISSILE_TRAJECTORY, CMSG_UPDATE_MISSILE_TRAJECTORYswap);
    }
    if (opcode == Opcode::CMSG_COMPLETE_MOVIE) {
        wrath::CMSG_COMPLETE_MOVIE CMSG_COMPLETE_MOVIEswap(std::move(other.CMSG_COMPLETE_MOVIE));
        std::swap(this->CMSG_COMPLETE_MOVIE, CMSG_COMPLETE_MOVIEswap);
    }
    if (opcode == Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) {
        wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS CMSG_QUERY_INSPECT_ACHIEVEMENTSswap(std::move(other.CMSG_QUERY_INSPECT_ACHIEVEMENTS));
        std::swap(this->CMSG_QUERY_INSPECT_ACHIEVEMENTS, CMSG_QUERY_INSPECT_ACHIEVEMENTSswap);
    }
    if (opcode == Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) {
        wrath::CMSG_DISMISS_CONTROLLED_VEHICLE CMSG_DISMISS_CONTROLLED_VEHICLEswap(std::move(other.CMSG_DISMISS_CONTROLLED_VEHICLE));
        std::swap(this->CMSG_DISMISS_CONTROLLED_VEHICLE, CMSG_DISMISS_CONTROLLED_VEHICLEswap);
    }
    if (opcode == Opcode::CMSG_CHAR_CUSTOMIZE) {
        wrath::CMSG_CHAR_CUSTOMIZE CMSG_CHAR_CUSTOMIZEswap(std::move(other.CMSG_CHAR_CUSTOMIZE));
        std::swap(this->CMSG_CHAR_CUSTOMIZE, CMSG_CHAR_CUSTOMIZEswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_EXIT) {
        wrath::CMSG_REQUEST_VEHICLE_EXIT CMSG_REQUEST_VEHICLE_EXITswap(std::move(other.CMSG_REQUEST_VEHICLE_EXIT));
        std::swap(this->CMSG_REQUEST_VEHICLE_EXIT, CMSG_REQUEST_VEHICLE_EXITswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) {
        wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT CMSG_REQUEST_VEHICLE_PREV_SEATswap(std::move(other.CMSG_REQUEST_VEHICLE_PREV_SEAT));
        std::swap(this->CMSG_REQUEST_VEHICLE_PREV_SEAT, CMSG_REQUEST_VEHICLE_PREV_SEATswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) {
        wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT CMSG_REQUEST_VEHICLE_NEXT_SEATswap(std::move(other.CMSG_REQUEST_VEHICLE_NEXT_SEAT));
        std::swap(this->CMSG_REQUEST_VEHICLE_NEXT_SEAT, CMSG_REQUEST_VEHICLE_NEXT_SEATswap);
    }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) {
        wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT CMSG_REQUEST_VEHICLE_SWITCH_SEATswap(std::move(other.CMSG_REQUEST_VEHICLE_SWITCH_SEAT));
        std::swap(this->CMSG_REQUEST_VEHICLE_SWITCH_SEAT, CMSG_REQUEST_VEHICLE_SWITCH_SEATswap);
    }
    if (opcode == Opcode::CMSG_PET_LEARN_TALENT) {
        wrath::CMSG_PET_LEARN_TALENT CMSG_PET_LEARN_TALENTswap(std::move(other.CMSG_PET_LEARN_TALENT));
        std::swap(this->CMSG_PET_LEARN_TALENT, CMSG_PET_LEARN_TALENTswap);
    }
    if (opcode == Opcode::CMSG_GAMEOBJ_REPORT_USE) {
        wrath::CMSG_GAMEOBJ_REPORT_USE CMSG_GAMEOBJ_REPORT_USEswap(std::move(other.CMSG_GAMEOBJ_REPORT_USE));
        std::swap(this->CMSG_GAMEOBJ_REPORT_USE, CMSG_GAMEOBJ_REPORT_USEswap);
    }
    if (opcode == Opcode::CMSG_REMOVE_GLYPH) {
        wrath::CMSG_REMOVE_GLYPH CMSG_REMOVE_GLYPHswap(std::move(other.CMSG_REMOVE_GLYPH));
        std::swap(this->CMSG_REMOVE_GLYPH, CMSG_REMOVE_GLYPHswap);
    }
    if (opcode == Opcode::CMSG_DISMISS_CRITTER) {
        wrath::CMSG_DISMISS_CRITTER CMSG_DISMISS_CRITTERswap(std::move(other.CMSG_DISMISS_CRITTER));
        std::swap(this->CMSG_DISMISS_CRITTER, CMSG_DISMISS_CRITTERswap);
    }
    if (opcode == Opcode::CMSG_AUCTION_LIST_PENDING_SALES) {
        wrath::CMSG_AUCTION_LIST_PENDING_SALES CMSG_AUCTION_LIST_PENDING_SALESswap(std::move(other.CMSG_AUCTION_LIST_PENDING_SALES));
        std::swap(this->CMSG_AUCTION_LIST_PENDING_SALES, CMSG_AUCTION_LIST_PENDING_SALESswap);
    }
    if (opcode == Opcode::CMSG_ENABLETAXI) {
        wrath::CMSG_ENABLETAXI CMSG_ENABLETAXIswap(std::move(other.CMSG_ENABLETAXI));
        std::swap(this->CMSG_ENABLETAXI, CMSG_ENABLETAXIswap);
    }
    if (opcode == Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) {
        wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLEswap(std::move(other.CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE));
        std::swap(this->CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE, CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLEswap);
    }
    if (opcode == Opcode::CMSG_HEARTH_AND_RESURRECT) {
        wrath::CMSG_HEARTH_AND_RESURRECT CMSG_HEARTH_AND_RESURRECTswap(std::move(other.CMSG_HEARTH_AND_RESURRECT));
        std::swap(this->CMSG_HEARTH_AND_RESURRECT, CMSG_HEARTH_AND_RESURRECTswap);
    }
    if (opcode == Opcode::CMSG_PLAYER_VEHICLE_ENTER) {
        wrath::CMSG_PLAYER_VEHICLE_ENTER CMSG_PLAYER_VEHICLE_ENTERswap(std::move(other.CMSG_PLAYER_VEHICLE_ENTER));
        std::swap(this->CMSG_PLAYER_VEHICLE_ENTER, CMSG_PLAYER_VEHICLE_ENTERswap);
    }
    if (opcode == Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) {
        wrath::CMSG_CONTROLLER_EJECT_PASSENGER CMSG_CONTROLLER_EJECT_PASSENGERswap(std::move(other.CMSG_CONTROLLER_EJECT_PASSENGER));
        std::swap(this->CMSG_CONTROLLER_EJECT_PASSENGER, CMSG_CONTROLLER_EJECT_PASSENGERswap);
    }
    if (opcode == Opcode::CMSG_ITEM_REFUND_INFO) {
        wrath::CMSG_ITEM_REFUND_INFO CMSG_ITEM_REFUND_INFOswap(std::move(other.CMSG_ITEM_REFUND_INFO));
        std::swap(this->CMSG_ITEM_REFUND_INFO, CMSG_ITEM_REFUND_INFOswap);
    }
    if (opcode == Opcode::CMSG_ITEM_REFUND) {
        wrath::CMSG_ITEM_REFUND CMSG_ITEM_REFUNDswap(std::move(other.CMSG_ITEM_REFUND));
        std::swap(this->CMSG_ITEM_REFUND, CMSG_ITEM_REFUNDswap);
    }
    if (opcode == Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) {
        wrath::CMSG_CORPSE_MAP_POSITION_QUERY CMSG_CORPSE_MAP_POSITION_QUERYswap(std::move(other.CMSG_CORPSE_MAP_POSITION_QUERY));
        std::swap(this->CMSG_CORPSE_MAP_POSITION_QUERY, CMSG_CORPSE_MAP_POSITION_QUERYswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_SIGNUP) {
        wrath::CMSG_CALENDAR_EVENT_SIGNUP CMSG_CALENDAR_EVENT_SIGNUPswap(std::move(other.CMSG_CALENDAR_EVENT_SIGNUP));
        std::swap(this->CMSG_CALENDAR_EVENT_SIGNUP, CMSG_CALENDAR_EVENT_SIGNUPswap);
    }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_SAVE) {
        wrath::CMSG_EQUIPMENT_SET_SAVE CMSG_EQUIPMENT_SET_SAVEswap(std::move(other.CMSG_EQUIPMENT_SET_SAVE));
        std::swap(this->CMSG_EQUIPMENT_SET_SAVE, CMSG_EQUIPMENT_SET_SAVEswap);
    }
    if (opcode == Opcode::CMSG_UPDATE_PROJECTILE_POSITION) {
        wrath::CMSG_UPDATE_PROJECTILE_POSITION CMSG_UPDATE_PROJECTILE_POSITIONswap(std::move(other.CMSG_UPDATE_PROJECTILE_POSITION));
        std::swap(this->CMSG_UPDATE_PROJECTILE_POSITION, CMSG_UPDATE_PROJECTILE_POSITIONswap);
    }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS) {
        wrath::CMSG_LEARN_PREVIEW_TALENTS CMSG_LEARN_PREVIEW_TALENTSswap(std::move(other.CMSG_LEARN_PREVIEW_TALENTS));
        std::swap(this->CMSG_LEARN_PREVIEW_TALENTS, CMSG_LEARN_PREVIEW_TALENTSswap);
    }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) {
        wrath::CMSG_LEARN_PREVIEW_TALENTS_PET CMSG_LEARN_PREVIEW_TALENTS_PETswap(std::move(other.CMSG_LEARN_PREVIEW_TALENTS_PET));
        std::swap(this->CMSG_LEARN_PREVIEW_TALENTS_PET, CMSG_LEARN_PREVIEW_TALENTS_PETswap);
    }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) {
        wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK CMSG_MOVE_GRAVITY_DISABLE_ACKswap(std::move(other.CMSG_MOVE_GRAVITY_DISABLE_ACK));
        std::swap(this->CMSG_MOVE_GRAVITY_DISABLE_ACK, CMSG_MOVE_GRAVITY_DISABLE_ACKswap);
    }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) {
        wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK CMSG_MOVE_GRAVITY_ENABLE_ACKswap(std::move(other.CMSG_MOVE_GRAVITY_ENABLE_ACK));
        std::swap(this->CMSG_MOVE_GRAVITY_ENABLE_ACK, CMSG_MOVE_GRAVITY_ENABLE_ACKswap);
    }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_USE) {
        wrath::CMSG_EQUIPMENT_SET_USE CMSG_EQUIPMENT_SET_USEswap(std::move(other.CMSG_EQUIPMENT_SET_USE));
        std::swap(this->CMSG_EQUIPMENT_SET_USE, CMSG_EQUIPMENT_SET_USEswap);
    }
    if (opcode == Opcode::CMSG_CHAR_FACTION_CHANGE) {
        wrath::CMSG_CHAR_FACTION_CHANGE CMSG_CHAR_FACTION_CHANGEswap(std::move(other.CMSG_CHAR_FACTION_CHANGE));
        std::swap(this->CMSG_CHAR_FACTION_CHANGE, CMSG_CHAR_FACTION_CHANGEswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) {
        wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSEswap(std::move(other.CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE));
        std::swap(this->CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE, CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSEswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) {
        wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSEswap(std::move(other.CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE));
        std::swap(this->CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE, CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSEswap);
    }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) {
        wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST CMSG_BATTLEFIELD_MGR_EXIT_REQUESTswap(std::move(other.CMSG_BATTLEFIELD_MGR_EXIT_REQUEST));
        std::swap(this->CMSG_BATTLEFIELD_MGR_EXIT_REQUEST, CMSG_BATTLEFIELD_MGR_EXIT_REQUESTswap);
    }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        wrath::MSG_SET_RAID_DIFFICULTY_Client MSG_SET_RAID_DIFFICULTYswap(std::move(other.MSG_SET_RAID_DIFFICULTY));
        std::swap(this->MSG_SET_RAID_DIFFICULTY, MSG_SET_RAID_DIFFICULTYswap);
    }
    if (opcode == Opcode::CMSG_GMRESPONSE_RESOLVE) {
        wrath::CMSG_GMRESPONSE_RESOLVE CMSG_GMRESPONSE_RESOLVEswap(std::move(other.CMSG_GMRESPONSE_RESOLVE));
        std::swap(this->CMSG_GMRESPONSE_RESOLVE, CMSG_GMRESPONSE_RESOLVEswap);
    }
    if (opcode == Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE CMSG_WORLD_STATE_UI_TIMER_UPDATEswap(std::move(other.CMSG_WORLD_STATE_UI_TIMER_UPDATE));
        std::swap(this->CMSG_WORLD_STATE_UI_TIMER_UPDATE, CMSG_WORLD_STATE_UI_TIMER_UPDATEswap);
    }
    if (opcode == Opcode::CMSG_CHAR_RACE_CHANGE) {
        wrath::CMSG_CHAR_RACE_CHANGE CMSG_CHAR_RACE_CHANGEswap(std::move(other.CMSG_CHAR_RACE_CHANGE));
        std::swap(this->CMSG_CHAR_RACE_CHANGE, CMSG_CHAR_RACE_CHANGEswap);
    }
    if (opcode == Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) {
        wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES CMSG_READY_FOR_ACCOUNT_DATA_TIMESswap(std::move(other.CMSG_READY_FOR_ACCOUNT_DATA_TIMES));
        std::swap(this->CMSG_READY_FOR_ACCOUNT_DATA_TIMES, CMSG_READY_FOR_ACCOUNT_DATA_TIMESswap);
    }
    if (opcode == Opcode::CMSG_QUERY_QUESTS_COMPLETED) {
        wrath::CMSG_QUERY_QUESTS_COMPLETED CMSG_QUERY_QUESTS_COMPLETEDswap(std::move(other.CMSG_QUERY_QUESTS_COMPLETED));
        std::swap(this->CMSG_QUERY_QUESTS_COMPLETED, CMSG_QUERY_QUESTS_COMPLETEDswap);
    }
    if (opcode == Opcode::CMSG_GM_REPORT_LAG) {
        wrath::CMSG_GM_REPORT_LAG CMSG_GM_REPORT_LAGswap(std::move(other.CMSG_GM_REPORT_LAG));
        std::swap(this->CMSG_GM_REPORT_LAG, CMSG_GM_REPORT_LAGswap);
    }
    if (opcode == Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) {
        wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK CMSG_MOVE_SET_COLLISION_HGT_ACKswap(std::move(other.CMSG_MOVE_SET_COLLISION_HGT_ACK));
        std::swap(this->CMSG_MOVE_SET_COLLISION_HGT_ACK, CMSG_MOVE_SET_COLLISION_HGT_ACKswap);
    }
    return *this;
}

WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BOOTME&& obj) {
    opcode = Opcode::CMSG_BOOTME;
    new (&this->CMSG_BOOTME) wrath::CMSG_BOOTME (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_DBLOOKUP&& obj) {
    opcode = Opcode::CMSG_DBLOOKUP;
    new (&this->CMSG_DBLOOKUP) wrath::CMSG_DBLOOKUP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_WORLD_TELEPORT&& obj) {
    opcode = Opcode::CMSG_WORLD_TELEPORT;
    new (&this->CMSG_WORLD_TELEPORT) wrath::CMSG_WORLD_TELEPORT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TELEPORT_TO_UNIT&& obj) {
    opcode = Opcode::CMSG_TELEPORT_TO_UNIT;
    new (&this->CMSG_TELEPORT_TO_UNIT) wrath::CMSG_TELEPORT_TO_UNIT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHAR_CREATE&& obj) {
    opcode = Opcode::CMSG_CHAR_CREATE;
    new (&this->CMSG_CHAR_CREATE) wrath::CMSG_CHAR_CREATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHAR_ENUM&& obj) {
    opcode = Opcode::CMSG_CHAR_ENUM;
    new (&this->CMSG_CHAR_ENUM) wrath::CMSG_CHAR_ENUM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHAR_DELETE&& obj) {
    opcode = Opcode::CMSG_CHAR_DELETE;
    new (&this->CMSG_CHAR_DELETE) wrath::CMSG_CHAR_DELETE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PLAYER_LOGIN&& obj) {
    opcode = Opcode::CMSG_PLAYER_LOGIN;
    new (&this->CMSG_PLAYER_LOGIN) wrath::CMSG_PLAYER_LOGIN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PLAYER_LOGOUT&& obj) {
    opcode = Opcode::CMSG_PLAYER_LOGOUT;
    new (&this->CMSG_PLAYER_LOGOUT) wrath::CMSG_PLAYER_LOGOUT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LOGOUT_REQUEST&& obj) {
    opcode = Opcode::CMSG_LOGOUT_REQUEST;
    new (&this->CMSG_LOGOUT_REQUEST) wrath::CMSG_LOGOUT_REQUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LOGOUT_CANCEL&& obj) {
    opcode = Opcode::CMSG_LOGOUT_CANCEL;
    new (&this->CMSG_LOGOUT_CANCEL) wrath::CMSG_LOGOUT_CANCEL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_NAME_QUERY&& obj) {
    opcode = Opcode::CMSG_NAME_QUERY;
    new (&this->CMSG_NAME_QUERY) wrath::CMSG_NAME_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_NAME_QUERY&& obj) {
    opcode = Opcode::CMSG_PET_NAME_QUERY;
    new (&this->CMSG_PET_NAME_QUERY) wrath::CMSG_PET_NAME_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_QUERY&& obj) {
    opcode = Opcode::CMSG_GUILD_QUERY;
    new (&this->CMSG_GUILD_QUERY) wrath::CMSG_GUILD_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ITEM_QUERY_SINGLE&& obj) {
    opcode = Opcode::CMSG_ITEM_QUERY_SINGLE;
    new (&this->CMSG_ITEM_QUERY_SINGLE) wrath::CMSG_ITEM_QUERY_SINGLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PAGE_TEXT_QUERY&& obj) {
    opcode = Opcode::CMSG_PAGE_TEXT_QUERY;
    new (&this->CMSG_PAGE_TEXT_QUERY) wrath::CMSG_PAGE_TEXT_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUEST_QUERY&& obj) {
    opcode = Opcode::CMSG_QUEST_QUERY;
    new (&this->CMSG_QUEST_QUERY) wrath::CMSG_QUEST_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GAMEOBJECT_QUERY&& obj) {
    opcode = Opcode::CMSG_GAMEOBJECT_QUERY;
    new (&this->CMSG_GAMEOBJECT_QUERY) wrath::CMSG_GAMEOBJECT_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CREATURE_QUERY&& obj) {
    opcode = Opcode::CMSG_CREATURE_QUERY;
    new (&this->CMSG_CREATURE_QUERY) wrath::CMSG_CREATURE_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_WHO&& obj) {
    opcode = Opcode::CMSG_WHO;
    new (&this->CMSG_WHO) wrath::CMSG_WHO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_WHOIS&& obj) {
    opcode = Opcode::CMSG_WHOIS;
    new (&this->CMSG_WHOIS) wrath::CMSG_WHOIS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CONTACT_LIST&& obj) {
    opcode = Opcode::CMSG_CONTACT_LIST;
    new (&this->CMSG_CONTACT_LIST) wrath::CMSG_CONTACT_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ADD_FRIEND&& obj) {
    opcode = Opcode::CMSG_ADD_FRIEND;
    new (&this->CMSG_ADD_FRIEND) wrath::CMSG_ADD_FRIEND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_DEL_FRIEND&& obj) {
    opcode = Opcode::CMSG_DEL_FRIEND;
    new (&this->CMSG_DEL_FRIEND) wrath::CMSG_DEL_FRIEND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_CONTACT_NOTES&& obj) {
    opcode = Opcode::CMSG_SET_CONTACT_NOTES;
    new (&this->CMSG_SET_CONTACT_NOTES) wrath::CMSG_SET_CONTACT_NOTES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ADD_IGNORE&& obj) {
    opcode = Opcode::CMSG_ADD_IGNORE;
    new (&this->CMSG_ADD_IGNORE) wrath::CMSG_ADD_IGNORE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_DEL_IGNORE&& obj) {
    opcode = Opcode::CMSG_DEL_IGNORE;
    new (&this->CMSG_DEL_IGNORE) wrath::CMSG_DEL_IGNORE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_INVITE&& obj) {
    opcode = Opcode::CMSG_GROUP_INVITE;
    new (&this->CMSG_GROUP_INVITE) wrath::CMSG_GROUP_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_CANCEL&& obj) {
    opcode = Opcode::CMSG_GROUP_CANCEL;
    new (&this->CMSG_GROUP_CANCEL) wrath::CMSG_GROUP_CANCEL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_ACCEPT&& obj) {
    opcode = Opcode::CMSG_GROUP_ACCEPT;
    new (&this->CMSG_GROUP_ACCEPT) wrath::CMSG_GROUP_ACCEPT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_DECLINE&& obj) {
    opcode = Opcode::CMSG_GROUP_DECLINE;
    new (&this->CMSG_GROUP_DECLINE) wrath::CMSG_GROUP_DECLINE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_UNINVITE&& obj) {
    opcode = Opcode::CMSG_GROUP_UNINVITE;
    new (&this->CMSG_GROUP_UNINVITE) wrath::CMSG_GROUP_UNINVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_UNINVITE_GUID&& obj) {
    opcode = Opcode::CMSG_GROUP_UNINVITE_GUID;
    new (&this->CMSG_GROUP_UNINVITE_GUID) wrath::CMSG_GROUP_UNINVITE_GUID (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_SET_LEADER&& obj) {
    opcode = Opcode::CMSG_GROUP_SET_LEADER;
    new (&this->CMSG_GROUP_SET_LEADER) wrath::CMSG_GROUP_SET_LEADER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LOOT_METHOD&& obj) {
    opcode = Opcode::CMSG_LOOT_METHOD;
    new (&this->CMSG_LOOT_METHOD) wrath::CMSG_LOOT_METHOD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_DISBAND&& obj) {
    opcode = Opcode::CMSG_GROUP_DISBAND;
    new (&this->CMSG_GROUP_DISBAND) wrath::CMSG_GROUP_DISBAND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_CREATE&& obj) {
    opcode = Opcode::CMSG_GUILD_CREATE;
    new (&this->CMSG_GUILD_CREATE) wrath::CMSG_GUILD_CREATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_INVITE&& obj) {
    opcode = Opcode::CMSG_GUILD_INVITE;
    new (&this->CMSG_GUILD_INVITE) wrath::CMSG_GUILD_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_ACCEPT&& obj) {
    opcode = Opcode::CMSG_GUILD_ACCEPT;
    new (&this->CMSG_GUILD_ACCEPT) wrath::CMSG_GUILD_ACCEPT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_DECLINE&& obj) {
    opcode = Opcode::CMSG_GUILD_DECLINE;
    new (&this->CMSG_GUILD_DECLINE) wrath::CMSG_GUILD_DECLINE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_INFO&& obj) {
    opcode = Opcode::CMSG_GUILD_INFO;
    new (&this->CMSG_GUILD_INFO) wrath::CMSG_GUILD_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_ROSTER&& obj) {
    opcode = Opcode::CMSG_GUILD_ROSTER;
    new (&this->CMSG_GUILD_ROSTER) wrath::CMSG_GUILD_ROSTER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_PROMOTE&& obj) {
    opcode = Opcode::CMSG_GUILD_PROMOTE;
    new (&this->CMSG_GUILD_PROMOTE) wrath::CMSG_GUILD_PROMOTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_DEMOTE&& obj) {
    opcode = Opcode::CMSG_GUILD_DEMOTE;
    new (&this->CMSG_GUILD_DEMOTE) wrath::CMSG_GUILD_DEMOTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_LEAVE&& obj) {
    opcode = Opcode::CMSG_GUILD_LEAVE;
    new (&this->CMSG_GUILD_LEAVE) wrath::CMSG_GUILD_LEAVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_REMOVE&& obj) {
    opcode = Opcode::CMSG_GUILD_REMOVE;
    new (&this->CMSG_GUILD_REMOVE) wrath::CMSG_GUILD_REMOVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_DISBAND&& obj) {
    opcode = Opcode::CMSG_GUILD_DISBAND;
    new (&this->CMSG_GUILD_DISBAND) wrath::CMSG_GUILD_DISBAND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_LEADER&& obj) {
    opcode = Opcode::CMSG_GUILD_LEADER;
    new (&this->CMSG_GUILD_LEADER) wrath::CMSG_GUILD_LEADER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_MOTD&& obj) {
    opcode = Opcode::CMSG_GUILD_MOTD;
    new (&this->CMSG_GUILD_MOTD) wrath::CMSG_GUILD_MOTD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MESSAGECHAT&& obj) {
    opcode = Opcode::CMSG_MESSAGECHAT;
    new (&this->CMSG_MESSAGECHAT) wrath::CMSG_MESSAGECHAT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_JOIN_CHANNEL&& obj) {
    opcode = Opcode::CMSG_JOIN_CHANNEL;
    new (&this->CMSG_JOIN_CHANNEL) wrath::CMSG_JOIN_CHANNEL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LEAVE_CHANNEL&& obj) {
    opcode = Opcode::CMSG_LEAVE_CHANNEL;
    new (&this->CMSG_LEAVE_CHANNEL) wrath::CMSG_LEAVE_CHANNEL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_LIST&& obj) {
    opcode = Opcode::CMSG_CHANNEL_LIST;
    new (&this->CMSG_CHANNEL_LIST) wrath::CMSG_CHANNEL_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_PASSWORD&& obj) {
    opcode = Opcode::CMSG_CHANNEL_PASSWORD;
    new (&this->CMSG_CHANNEL_PASSWORD) wrath::CMSG_CHANNEL_PASSWORD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_SET_OWNER&& obj) {
    opcode = Opcode::CMSG_CHANNEL_SET_OWNER;
    new (&this->CMSG_CHANNEL_SET_OWNER) wrath::CMSG_CHANNEL_SET_OWNER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_OWNER&& obj) {
    opcode = Opcode::CMSG_CHANNEL_OWNER;
    new (&this->CMSG_CHANNEL_OWNER) wrath::CMSG_CHANNEL_OWNER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_MODERATOR&& obj) {
    opcode = Opcode::CMSG_CHANNEL_MODERATOR;
    new (&this->CMSG_CHANNEL_MODERATOR) wrath::CMSG_CHANNEL_MODERATOR (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_UNMODERATOR&& obj) {
    opcode = Opcode::CMSG_CHANNEL_UNMODERATOR;
    new (&this->CMSG_CHANNEL_UNMODERATOR) wrath::CMSG_CHANNEL_UNMODERATOR (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_MUTE&& obj) {
    opcode = Opcode::CMSG_CHANNEL_MUTE;
    new (&this->CMSG_CHANNEL_MUTE) wrath::CMSG_CHANNEL_MUTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_UNMUTE&& obj) {
    opcode = Opcode::CMSG_CHANNEL_UNMUTE;
    new (&this->CMSG_CHANNEL_UNMUTE) wrath::CMSG_CHANNEL_UNMUTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_INVITE&& obj) {
    opcode = Opcode::CMSG_CHANNEL_INVITE;
    new (&this->CMSG_CHANNEL_INVITE) wrath::CMSG_CHANNEL_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_KICK&& obj) {
    opcode = Opcode::CMSG_CHANNEL_KICK;
    new (&this->CMSG_CHANNEL_KICK) wrath::CMSG_CHANNEL_KICK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_BAN&& obj) {
    opcode = Opcode::CMSG_CHANNEL_BAN;
    new (&this->CMSG_CHANNEL_BAN) wrath::CMSG_CHANNEL_BAN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_UNBAN&& obj) {
    opcode = Opcode::CMSG_CHANNEL_UNBAN;
    new (&this->CMSG_CHANNEL_UNBAN) wrath::CMSG_CHANNEL_UNBAN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_ANNOUNCEMENTS&& obj) {
    opcode = Opcode::CMSG_CHANNEL_ANNOUNCEMENTS;
    new (&this->CMSG_CHANNEL_ANNOUNCEMENTS) wrath::CMSG_CHANNEL_ANNOUNCEMENTS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_MODERATE&& obj) {
    opcode = Opcode::CMSG_CHANNEL_MODERATE;
    new (&this->CMSG_CHANNEL_MODERATE) wrath::CMSG_CHANNEL_MODERATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_USE_ITEM&& obj) {
    opcode = Opcode::CMSG_USE_ITEM;
    new (&this->CMSG_USE_ITEM) wrath::CMSG_USE_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_OPEN_ITEM&& obj) {
    opcode = Opcode::CMSG_OPEN_ITEM;
    new (&this->CMSG_OPEN_ITEM) wrath::CMSG_OPEN_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_READ_ITEM&& obj) {
    opcode = Opcode::CMSG_READ_ITEM;
    new (&this->CMSG_READ_ITEM) wrath::CMSG_READ_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GAMEOBJ_USE&& obj) {
    opcode = Opcode::CMSG_GAMEOBJ_USE;
    new (&this->CMSG_GAMEOBJ_USE) wrath::CMSG_GAMEOBJ_USE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AREATRIGGER&& obj) {
    opcode = Opcode::CMSG_AREATRIGGER;
    new (&this->CMSG_AREATRIGGER) wrath::CMSG_AREATRIGGER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_FORWARD&& obj) {
    opcode = Opcode::MSG_MOVE_START_FORWARD;
    new (&this->MSG_MOVE_START_FORWARD) wrath::MSG_MOVE_START_FORWARD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_BACKWARD&& obj) {
    opcode = Opcode::MSG_MOVE_START_BACKWARD;
    new (&this->MSG_MOVE_START_BACKWARD) wrath::MSG_MOVE_START_BACKWARD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_STOP&& obj) {
    opcode = Opcode::MSG_MOVE_STOP;
    new (&this->MSG_MOVE_STOP) wrath::MSG_MOVE_STOP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_STRAFE_LEFT&& obj) {
    opcode = Opcode::MSG_MOVE_START_STRAFE_LEFT;
    new (&this->MSG_MOVE_START_STRAFE_LEFT) wrath::MSG_MOVE_START_STRAFE_LEFT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_STRAFE_RIGHT&& obj) {
    opcode = Opcode::MSG_MOVE_START_STRAFE_RIGHT;
    new (&this->MSG_MOVE_START_STRAFE_RIGHT) wrath::MSG_MOVE_START_STRAFE_RIGHT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_STOP_STRAFE&& obj) {
    opcode = Opcode::MSG_MOVE_STOP_STRAFE;
    new (&this->MSG_MOVE_STOP_STRAFE) wrath::MSG_MOVE_STOP_STRAFE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_JUMP&& obj) {
    opcode = Opcode::MSG_MOVE_JUMP;
    new (&this->MSG_MOVE_JUMP) wrath::MSG_MOVE_JUMP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_TURN_LEFT&& obj) {
    opcode = Opcode::MSG_MOVE_START_TURN_LEFT;
    new (&this->MSG_MOVE_START_TURN_LEFT) wrath::MSG_MOVE_START_TURN_LEFT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_TURN_RIGHT&& obj) {
    opcode = Opcode::MSG_MOVE_START_TURN_RIGHT;
    new (&this->MSG_MOVE_START_TURN_RIGHT) wrath::MSG_MOVE_START_TURN_RIGHT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_STOP_TURN&& obj) {
    opcode = Opcode::MSG_MOVE_STOP_TURN;
    new (&this->MSG_MOVE_STOP_TURN) wrath::MSG_MOVE_STOP_TURN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_PITCH_UP&& obj) {
    opcode = Opcode::MSG_MOVE_START_PITCH_UP;
    new (&this->MSG_MOVE_START_PITCH_UP) wrath::MSG_MOVE_START_PITCH_UP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_PITCH_DOWN&& obj) {
    opcode = Opcode::MSG_MOVE_START_PITCH_DOWN;
    new (&this->MSG_MOVE_START_PITCH_DOWN) wrath::MSG_MOVE_START_PITCH_DOWN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_STOP_PITCH&& obj) {
    opcode = Opcode::MSG_MOVE_STOP_PITCH;
    new (&this->MSG_MOVE_STOP_PITCH) wrath::MSG_MOVE_STOP_PITCH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_SET_RUN_MODE&& obj) {
    opcode = Opcode::MSG_MOVE_SET_RUN_MODE;
    new (&this->MSG_MOVE_SET_RUN_MODE) wrath::MSG_MOVE_SET_RUN_MODE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_SET_WALK_MODE&& obj) {
    opcode = Opcode::MSG_MOVE_SET_WALK_MODE;
    new (&this->MSG_MOVE_SET_WALK_MODE) wrath::MSG_MOVE_SET_WALK_MODE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_TELEPORT_Server&& obj) {
    opcode = Opcode::MSG_MOVE_TELEPORT;
    new (&this->MSG_MOVE_TELEPORT) wrath::MSG_MOVE_TELEPORT_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_TELEPORT_ACK_Client&& obj) {
    opcode = Opcode::MSG_MOVE_TELEPORT_ACK;
    new (&this->MSG_MOVE_TELEPORT_ACK) wrath::MSG_MOVE_TELEPORT_ACK_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_FALL_LAND&& obj) {
    opcode = Opcode::MSG_MOVE_FALL_LAND;
    new (&this->MSG_MOVE_FALL_LAND) wrath::MSG_MOVE_FALL_LAND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_SWIM&& obj) {
    opcode = Opcode::MSG_MOVE_START_SWIM;
    new (&this->MSG_MOVE_START_SWIM) wrath::MSG_MOVE_START_SWIM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_STOP_SWIM&& obj) {
    opcode = Opcode::MSG_MOVE_STOP_SWIM;
    new (&this->MSG_MOVE_STOP_SWIM) wrath::MSG_MOVE_STOP_SWIM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_SET_FACING&& obj) {
    opcode = Opcode::MSG_MOVE_SET_FACING;
    new (&this->MSG_MOVE_SET_FACING) wrath::MSG_MOVE_SET_FACING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_SET_PITCH&& obj) {
    opcode = Opcode::MSG_MOVE_SET_PITCH;
    new (&this->MSG_MOVE_SET_PITCH) wrath::MSG_MOVE_SET_PITCH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_WORLDPORT_ACK&& obj) {
    opcode = Opcode::MSG_MOVE_WORLDPORT_ACK;
    new (&this->MSG_MOVE_WORLDPORT_ACK) wrath::MSG_MOVE_WORLDPORT_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_SET_RAW_POSITION&& obj) {
    opcode = Opcode::CMSG_MOVE_SET_RAW_POSITION;
    new (&this->CMSG_MOVE_SET_RAW_POSITION) wrath::CMSG_MOVE_SET_RAW_POSITION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK&& obj) {
    opcode = Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
    new (&this->CMSG_FORCE_RUN_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK&& obj) {
    opcode = Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
    new (&this->CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK&& obj) {
    opcode = Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
    new (&this->CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FORCE_MOVE_ROOT_ACK&& obj) {
    opcode = Opcode::CMSG_FORCE_MOVE_ROOT_ACK;
    new (&this->CMSG_FORCE_MOVE_ROOT_ACK) wrath::CMSG_FORCE_MOVE_ROOT_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FORCE_MOVE_UNROOT_ACK&& obj) {
    opcode = Opcode::CMSG_FORCE_MOVE_UNROOT_ACK;
    new (&this->CMSG_FORCE_MOVE_UNROOT_ACK) wrath::CMSG_FORCE_MOVE_UNROOT_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_HEARTBEAT&& obj) {
    opcode = Opcode::MSG_MOVE_HEARTBEAT;
    new (&this->MSG_MOVE_HEARTBEAT) wrath::MSG_MOVE_HEARTBEAT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_KNOCK_BACK_ACK&& obj) {
    opcode = Opcode::CMSG_MOVE_KNOCK_BACK_ACK;
    new (&this->CMSG_MOVE_KNOCK_BACK_ACK) wrath::CMSG_MOVE_KNOCK_BACK_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_HOVER_ACK&& obj) {
    opcode = Opcode::CMSG_MOVE_HOVER_ACK;
    new (&this->CMSG_MOVE_HOVER_ACK) wrath::CMSG_MOVE_HOVER_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_HOVER&& obj) {
    opcode = Opcode::MSG_MOVE_HOVER;
    new (&this->MSG_MOVE_HOVER) wrath::MSG_MOVE_HOVER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_NEXT_CINEMATIC_CAMERA&& obj) {
    opcode = Opcode::CMSG_NEXT_CINEMATIC_CAMERA;
    new (&this->CMSG_NEXT_CINEMATIC_CAMERA) wrath::CMSG_NEXT_CINEMATIC_CAMERA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_COMPLETE_CINEMATIC&& obj) {
    opcode = Opcode::CMSG_COMPLETE_CINEMATIC;
    new (&this->CMSG_COMPLETE_CINEMATIC) wrath::CMSG_COMPLETE_CINEMATIC (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TUTORIAL_FLAG&& obj) {
    opcode = Opcode::CMSG_TUTORIAL_FLAG;
    new (&this->CMSG_TUTORIAL_FLAG) wrath::CMSG_TUTORIAL_FLAG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TUTORIAL_CLEAR&& obj) {
    opcode = Opcode::CMSG_TUTORIAL_CLEAR;
    new (&this->CMSG_TUTORIAL_CLEAR) wrath::CMSG_TUTORIAL_CLEAR (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TUTORIAL_RESET&& obj) {
    opcode = Opcode::CMSG_TUTORIAL_RESET;
    new (&this->CMSG_TUTORIAL_RESET) wrath::CMSG_TUTORIAL_RESET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_STANDSTATECHANGE&& obj) {
    opcode = Opcode::CMSG_STANDSTATECHANGE;
    new (&this->CMSG_STANDSTATECHANGE) wrath::CMSG_STANDSTATECHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_EMOTE&& obj) {
    opcode = Opcode::CMSG_EMOTE;
    new (&this->CMSG_EMOTE) wrath::CMSG_EMOTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TEXT_EMOTE&& obj) {
    opcode = Opcode::CMSG_TEXT_EMOTE;
    new (&this->CMSG_TEXT_EMOTE) wrath::CMSG_TEXT_EMOTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUTOSTORE_LOOT_ITEM&& obj) {
    opcode = Opcode::CMSG_AUTOSTORE_LOOT_ITEM;
    new (&this->CMSG_AUTOSTORE_LOOT_ITEM) wrath::CMSG_AUTOSTORE_LOOT_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUTOEQUIP_ITEM&& obj) {
    opcode = Opcode::CMSG_AUTOEQUIP_ITEM;
    new (&this->CMSG_AUTOEQUIP_ITEM) wrath::CMSG_AUTOEQUIP_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUTOSTORE_BAG_ITEM&& obj) {
    opcode = Opcode::CMSG_AUTOSTORE_BAG_ITEM;
    new (&this->CMSG_AUTOSTORE_BAG_ITEM) wrath::CMSG_AUTOSTORE_BAG_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SWAP_ITEM&& obj) {
    opcode = Opcode::CMSG_SWAP_ITEM;
    new (&this->CMSG_SWAP_ITEM) wrath::CMSG_SWAP_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SWAP_INV_ITEM&& obj) {
    opcode = Opcode::CMSG_SWAP_INV_ITEM;
    new (&this->CMSG_SWAP_INV_ITEM) wrath::CMSG_SWAP_INV_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SPLIT_ITEM&& obj) {
    opcode = Opcode::CMSG_SPLIT_ITEM;
    new (&this->CMSG_SPLIT_ITEM) wrath::CMSG_SPLIT_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUTOEQUIP_ITEM_SLOT&& obj) {
    opcode = Opcode::CMSG_AUTOEQUIP_ITEM_SLOT;
    new (&this->CMSG_AUTOEQUIP_ITEM_SLOT) wrath::CMSG_AUTOEQUIP_ITEM_SLOT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_DESTROYITEM&& obj) {
    opcode = Opcode::CMSG_DESTROYITEM;
    new (&this->CMSG_DESTROYITEM) wrath::CMSG_DESTROYITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_INSPECT&& obj) {
    opcode = Opcode::CMSG_INSPECT;
    new (&this->CMSG_INSPECT) wrath::CMSG_INSPECT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_INITIATE_TRADE&& obj) {
    opcode = Opcode::CMSG_INITIATE_TRADE;
    new (&this->CMSG_INITIATE_TRADE) wrath::CMSG_INITIATE_TRADE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BEGIN_TRADE&& obj) {
    opcode = Opcode::CMSG_BEGIN_TRADE;
    new (&this->CMSG_BEGIN_TRADE) wrath::CMSG_BEGIN_TRADE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BUSY_TRADE&& obj) {
    opcode = Opcode::CMSG_BUSY_TRADE;
    new (&this->CMSG_BUSY_TRADE) wrath::CMSG_BUSY_TRADE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_IGNORE_TRADE&& obj) {
    opcode = Opcode::CMSG_IGNORE_TRADE;
    new (&this->CMSG_IGNORE_TRADE) wrath::CMSG_IGNORE_TRADE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ACCEPT_TRADE&& obj) {
    opcode = Opcode::CMSG_ACCEPT_TRADE;
    new (&this->CMSG_ACCEPT_TRADE) wrath::CMSG_ACCEPT_TRADE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_UNACCEPT_TRADE&& obj) {
    opcode = Opcode::CMSG_UNACCEPT_TRADE;
    new (&this->CMSG_UNACCEPT_TRADE) wrath::CMSG_UNACCEPT_TRADE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CANCEL_TRADE&& obj) {
    opcode = Opcode::CMSG_CANCEL_TRADE;
    new (&this->CMSG_CANCEL_TRADE) wrath::CMSG_CANCEL_TRADE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_TRADE_ITEM&& obj) {
    opcode = Opcode::CMSG_SET_TRADE_ITEM;
    new (&this->CMSG_SET_TRADE_ITEM) wrath::CMSG_SET_TRADE_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CLEAR_TRADE_ITEM&& obj) {
    opcode = Opcode::CMSG_CLEAR_TRADE_ITEM;
    new (&this->CMSG_CLEAR_TRADE_ITEM) wrath::CMSG_CLEAR_TRADE_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_TRADE_GOLD&& obj) {
    opcode = Opcode::CMSG_SET_TRADE_GOLD;
    new (&this->CMSG_SET_TRADE_GOLD) wrath::CMSG_SET_TRADE_GOLD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_FACTION_ATWAR&& obj) {
    opcode = Opcode::CMSG_SET_FACTION_ATWAR;
    new (&this->CMSG_SET_FACTION_ATWAR) wrath::CMSG_SET_FACTION_ATWAR (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_ACTION_BUTTON&& obj) {
    opcode = Opcode::CMSG_SET_ACTION_BUTTON;
    new (&this->CMSG_SET_ACTION_BUTTON) wrath::CMSG_SET_ACTION_BUTTON (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CAST_SPELL&& obj) {
    opcode = Opcode::CMSG_CAST_SPELL;
    new (&this->CMSG_CAST_SPELL) wrath::CMSG_CAST_SPELL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CANCEL_CAST&& obj) {
    opcode = Opcode::CMSG_CANCEL_CAST;
    new (&this->CMSG_CANCEL_CAST) wrath::CMSG_CANCEL_CAST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CANCEL_AURA&& obj) {
    opcode = Opcode::CMSG_CANCEL_AURA;
    new (&this->CMSG_CANCEL_AURA) wrath::CMSG_CANCEL_AURA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CANCEL_CHANNELLING&& obj) {
    opcode = Opcode::CMSG_CANCEL_CHANNELLING;
    new (&this->CMSG_CANCEL_CHANNELLING) wrath::CMSG_CANCEL_CHANNELLING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_SELECTION&& obj) {
    opcode = Opcode::CMSG_SET_SELECTION;
    new (&this->CMSG_SET_SELECTION) wrath::CMSG_SET_SELECTION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_DELETEEQUIPMENT_SET&& obj) {
    opcode = Opcode::CMSG_DELETEEQUIPMENT_SET;
    new (&this->CMSG_DELETEEQUIPMENT_SET) wrath::CMSG_DELETEEQUIPMENT_SET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_INSTANCE_LOCK_RESPONSE&& obj) {
    opcode = Opcode::CMSG_INSTANCE_LOCK_RESPONSE;
    new (&this->CMSG_INSTANCE_LOCK_RESPONSE) wrath::CMSG_INSTANCE_LOCK_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ATTACKSWING&& obj) {
    opcode = Opcode::CMSG_ATTACKSWING;
    new (&this->CMSG_ATTACKSWING) wrath::CMSG_ATTACKSWING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ATTACKSTOP&& obj) {
    opcode = Opcode::CMSG_ATTACKSTOP;
    new (&this->CMSG_ATTACKSTOP) wrath::CMSG_ATTACKSTOP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REPOP_REQUEST&& obj) {
    opcode = Opcode::CMSG_REPOP_REQUEST;
    new (&this->CMSG_REPOP_REQUEST) wrath::CMSG_REPOP_REQUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_RESURRECT_RESPONSE&& obj) {
    opcode = Opcode::CMSG_RESURRECT_RESPONSE;
    new (&this->CMSG_RESURRECT_RESPONSE) wrath::CMSG_RESURRECT_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LOOT&& obj) {
    opcode = Opcode::CMSG_LOOT;
    new (&this->CMSG_LOOT) wrath::CMSG_LOOT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LOOT_MONEY&& obj) {
    opcode = Opcode::CMSG_LOOT_MONEY;
    new (&this->CMSG_LOOT_MONEY) wrath::CMSG_LOOT_MONEY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LOOT_RELEASE&& obj) {
    opcode = Opcode::CMSG_LOOT_RELEASE;
    new (&this->CMSG_LOOT_RELEASE) wrath::CMSG_LOOT_RELEASE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_DUEL_ACCEPTED&& obj) {
    opcode = Opcode::CMSG_DUEL_ACCEPTED;
    new (&this->CMSG_DUEL_ACCEPTED) wrath::CMSG_DUEL_ACCEPTED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_DUEL_CANCELLED&& obj) {
    opcode = Opcode::CMSG_DUEL_CANCELLED;
    new (&this->CMSG_DUEL_CANCELLED) wrath::CMSG_DUEL_CANCELLED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOUNTSPECIAL_ANIM&& obj) {
    opcode = Opcode::CMSG_MOUNTSPECIAL_ANIM;
    new (&this->CMSG_MOUNTSPECIAL_ANIM) wrath::CMSG_MOUNTSPECIAL_ANIM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_SET_ACTION&& obj) {
    opcode = Opcode::CMSG_PET_SET_ACTION;
    new (&this->CMSG_PET_SET_ACTION) wrath::CMSG_PET_SET_ACTION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_ACTION&& obj) {
    opcode = Opcode::CMSG_PET_ACTION;
    new (&this->CMSG_PET_ACTION) wrath::CMSG_PET_ACTION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_ABANDON&& obj) {
    opcode = Opcode::CMSG_PET_ABANDON;
    new (&this->CMSG_PET_ABANDON) wrath::CMSG_PET_ABANDON (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_RENAME&& obj) {
    opcode = Opcode::CMSG_PET_RENAME;
    new (&this->CMSG_PET_RENAME) wrath::CMSG_PET_RENAME (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GOSSIP_HELLO&& obj) {
    opcode = Opcode::CMSG_GOSSIP_HELLO;
    new (&this->CMSG_GOSSIP_HELLO) wrath::CMSG_GOSSIP_HELLO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GOSSIP_SELECT_OPTION&& obj) {
    opcode = Opcode::CMSG_GOSSIP_SELECT_OPTION;
    new (&this->CMSG_GOSSIP_SELECT_OPTION) wrath::CMSG_GOSSIP_SELECT_OPTION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_NPC_TEXT_QUERY&& obj) {
    opcode = Opcode::CMSG_NPC_TEXT_QUERY;
    new (&this->CMSG_NPC_TEXT_QUERY) wrath::CMSG_NPC_TEXT_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTGIVER_STATUS_QUERY&& obj) {
    opcode = Opcode::CMSG_QUESTGIVER_STATUS_QUERY;
    new (&this->CMSG_QUESTGIVER_STATUS_QUERY) wrath::CMSG_QUESTGIVER_STATUS_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTGIVER_HELLO&& obj) {
    opcode = Opcode::CMSG_QUESTGIVER_HELLO;
    new (&this->CMSG_QUESTGIVER_HELLO) wrath::CMSG_QUESTGIVER_HELLO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTGIVER_QUERY_QUEST&& obj) {
    opcode = Opcode::CMSG_QUESTGIVER_QUERY_QUEST;
    new (&this->CMSG_QUESTGIVER_QUERY_QUEST) wrath::CMSG_QUESTGIVER_QUERY_QUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH&& obj) {
    opcode = Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH;
    new (&this->CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTGIVER_ACCEPT_QUEST&& obj) {
    opcode = Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST;
    new (&this->CMSG_QUESTGIVER_ACCEPT_QUEST) wrath::CMSG_QUESTGIVER_ACCEPT_QUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTGIVER_COMPLETE_QUEST&& obj) {
    opcode = Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST;
    new (&this->CMSG_QUESTGIVER_COMPLETE_QUEST) wrath::CMSG_QUESTGIVER_COMPLETE_QUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTGIVER_REQUEST_REWARD&& obj) {
    opcode = Opcode::CMSG_QUESTGIVER_REQUEST_REWARD;
    new (&this->CMSG_QUESTGIVER_REQUEST_REWARD) wrath::CMSG_QUESTGIVER_REQUEST_REWARD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTGIVER_CHOOSE_REWARD&& obj) {
    opcode = Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD;
    new (&this->CMSG_QUESTGIVER_CHOOSE_REWARD) wrath::CMSG_QUESTGIVER_CHOOSE_REWARD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTGIVER_CANCEL&& obj) {
    opcode = Opcode::CMSG_QUESTGIVER_CANCEL;
    new (&this->CMSG_QUESTGIVER_CANCEL) wrath::CMSG_QUESTGIVER_CANCEL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTLOG_SWAP_QUEST&& obj) {
    opcode = Opcode::CMSG_QUESTLOG_SWAP_QUEST;
    new (&this->CMSG_QUESTLOG_SWAP_QUEST) wrath::CMSG_QUESTLOG_SWAP_QUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTLOG_REMOVE_QUEST&& obj) {
    opcode = Opcode::CMSG_QUESTLOG_REMOVE_QUEST;
    new (&this->CMSG_QUESTLOG_REMOVE_QUEST) wrath::CMSG_QUESTLOG_REMOVE_QUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUEST_CONFIRM_ACCEPT&& obj) {
    opcode = Opcode::CMSG_QUEST_CONFIRM_ACCEPT;
    new (&this->CMSG_QUEST_CONFIRM_ACCEPT) wrath::CMSG_QUEST_CONFIRM_ACCEPT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PUSHQUESTTOPARTY&& obj) {
    opcode = Opcode::CMSG_PUSHQUESTTOPARTY;
    new (&this->CMSG_PUSHQUESTTOPARTY) wrath::CMSG_PUSHQUESTTOPARTY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LIST_INVENTORY&& obj) {
    opcode = Opcode::CMSG_LIST_INVENTORY;
    new (&this->CMSG_LIST_INVENTORY) wrath::CMSG_LIST_INVENTORY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SELL_ITEM&& obj) {
    opcode = Opcode::CMSG_SELL_ITEM;
    new (&this->CMSG_SELL_ITEM) wrath::CMSG_SELL_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BUY_ITEM&& obj) {
    opcode = Opcode::CMSG_BUY_ITEM;
    new (&this->CMSG_BUY_ITEM) wrath::CMSG_BUY_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BUY_ITEM_IN_SLOT&& obj) {
    opcode = Opcode::CMSG_BUY_ITEM_IN_SLOT;
    new (&this->CMSG_BUY_ITEM_IN_SLOT) wrath::CMSG_BUY_ITEM_IN_SLOT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TAXINODE_STATUS_QUERY&& obj) {
    opcode = Opcode::CMSG_TAXINODE_STATUS_QUERY;
    new (&this->CMSG_TAXINODE_STATUS_QUERY) wrath::CMSG_TAXINODE_STATUS_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TAXIQUERYAVAILABLENODES&& obj) {
    opcode = Opcode::CMSG_TAXIQUERYAVAILABLENODES;
    new (&this->CMSG_TAXIQUERYAVAILABLENODES) wrath::CMSG_TAXIQUERYAVAILABLENODES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ACTIVATETAXI&& obj) {
    opcode = Opcode::CMSG_ACTIVATETAXI;
    new (&this->CMSG_ACTIVATETAXI) wrath::CMSG_ACTIVATETAXI (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TRAINER_LIST&& obj) {
    opcode = Opcode::CMSG_TRAINER_LIST;
    new (&this->CMSG_TRAINER_LIST) wrath::CMSG_TRAINER_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TRAINER_BUY_SPELL&& obj) {
    opcode = Opcode::CMSG_TRAINER_BUY_SPELL;
    new (&this->CMSG_TRAINER_BUY_SPELL) wrath::CMSG_TRAINER_BUY_SPELL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BINDER_ACTIVATE&& obj) {
    opcode = Opcode::CMSG_BINDER_ACTIVATE;
    new (&this->CMSG_BINDER_ACTIVATE) wrath::CMSG_BINDER_ACTIVATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BANKER_ACTIVATE&& obj) {
    opcode = Opcode::CMSG_BANKER_ACTIVATE;
    new (&this->CMSG_BANKER_ACTIVATE) wrath::CMSG_BANKER_ACTIVATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BUY_BANK_SLOT&& obj) {
    opcode = Opcode::CMSG_BUY_BANK_SLOT;
    new (&this->CMSG_BUY_BANK_SLOT) wrath::CMSG_BUY_BANK_SLOT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PETITION_SHOWLIST&& obj) {
    opcode = Opcode::CMSG_PETITION_SHOWLIST;
    new (&this->CMSG_PETITION_SHOWLIST) wrath::CMSG_PETITION_SHOWLIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PETITION_BUY&& obj) {
    opcode = Opcode::CMSG_PETITION_BUY;
    new (&this->CMSG_PETITION_BUY) wrath::CMSG_PETITION_BUY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PETITION_SHOW_SIGNATURES&& obj) {
    opcode = Opcode::CMSG_PETITION_SHOW_SIGNATURES;
    new (&this->CMSG_PETITION_SHOW_SIGNATURES) wrath::CMSG_PETITION_SHOW_SIGNATURES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PETITION_SIGN&& obj) {
    opcode = Opcode::CMSG_PETITION_SIGN;
    new (&this->CMSG_PETITION_SIGN) wrath::CMSG_PETITION_SIGN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_PETITION_DECLINE&& obj) {
    opcode = Opcode::MSG_PETITION_DECLINE;
    new (&this->MSG_PETITION_DECLINE) wrath::MSG_PETITION_DECLINE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_OFFER_PETITION&& obj) {
    opcode = Opcode::CMSG_OFFER_PETITION;
    new (&this->CMSG_OFFER_PETITION) wrath::CMSG_OFFER_PETITION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TURN_IN_PETITION&& obj) {
    opcode = Opcode::CMSG_TURN_IN_PETITION;
    new (&this->CMSG_TURN_IN_PETITION) wrath::CMSG_TURN_IN_PETITION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PETITION_QUERY&& obj) {
    opcode = Opcode::CMSG_PETITION_QUERY;
    new (&this->CMSG_PETITION_QUERY) wrath::CMSG_PETITION_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BUG&& obj) {
    opcode = Opcode::CMSG_BUG;
    new (&this->CMSG_BUG) wrath::CMSG_BUG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PLAYED_TIME&& obj) {
    opcode = Opcode::CMSG_PLAYED_TIME;
    new (&this->CMSG_PLAYED_TIME) wrath::CMSG_PLAYED_TIME (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUERY_TIME&& obj) {
    opcode = Opcode::CMSG_QUERY_TIME;
    new (&this->CMSG_QUERY_TIME) wrath::CMSG_QUERY_TIME (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_RECLAIM_CORPSE&& obj) {
    opcode = Opcode::CMSG_RECLAIM_CORPSE;
    new (&this->CMSG_RECLAIM_CORPSE) wrath::CMSG_RECLAIM_CORPSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_WRAP_ITEM&& obj) {
    opcode = Opcode::CMSG_WRAP_ITEM;
    new (&this->CMSG_WRAP_ITEM) wrath::CMSG_WRAP_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MINIMAP_PING_Client&& obj) {
    opcode = Opcode::MSG_MINIMAP_PING;
    new (&this->MSG_MINIMAP_PING) wrath::MSG_MINIMAP_PING_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PING&& obj) {
    opcode = Opcode::CMSG_PING;
    new (&this->CMSG_PING) wrath::CMSG_PING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SETSHEATHED&& obj) {
    opcode = Opcode::CMSG_SETSHEATHED;
    new (&this->CMSG_SETSHEATHED) wrath::CMSG_SETSHEATHED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUEST_POI_QUERY&& obj) {
    opcode = Opcode::CMSG_QUEST_POI_QUERY;
    new (&this->CMSG_QUEST_POI_QUERY) wrath::CMSG_QUEST_POI_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUTH_SESSION&& obj) {
    opcode = Opcode::CMSG_AUTH_SESSION;
    new (&this->CMSG_AUTH_SESSION) wrath::CMSG_AUTH_SESSION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_CAST_SPELL&& obj) {
    opcode = Opcode::CMSG_PET_CAST_SPELL;
    new (&this->CMSG_PET_CAST_SPELL) wrath::CMSG_PET_CAST_SPELL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_SAVE_GUILD_EMBLEM_Client&& obj) {
    opcode = Opcode::MSG_SAVE_GUILD_EMBLEM;
    new (&this->MSG_SAVE_GUILD_EMBLEM) wrath::MSG_SAVE_GUILD_EMBLEM_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_TABARDVENDOR_ACTIVATE&& obj) {
    opcode = Opcode::MSG_TABARDVENDOR_ACTIVATE;
    new (&this->MSG_TABARDVENDOR_ACTIVATE) wrath::MSG_TABARDVENDOR_ACTIVATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ZONEUPDATE&& obj) {
    opcode = Opcode::CMSG_ZONEUPDATE;
    new (&this->CMSG_ZONEUPDATE) wrath::CMSG_ZONEUPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_RANDOM_ROLL_Client&& obj) {
    opcode = Opcode::MSG_RANDOM_ROLL;
    new (&this->MSG_RANDOM_ROLL) wrath::MSG_RANDOM_ROLL_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_UNLEARN_SKILL&& obj) {
    opcode = Opcode::CMSG_UNLEARN_SKILL;
    new (&this->CMSG_UNLEARN_SKILL) wrath::CMSG_UNLEARN_SKILL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GMTICKET_CREATE&& obj) {
    opcode = Opcode::CMSG_GMTICKET_CREATE;
    new (&this->CMSG_GMTICKET_CREATE) wrath::CMSG_GMTICKET_CREATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GMTICKET_UPDATETEXT&& obj) {
    opcode = Opcode::CMSG_GMTICKET_UPDATETEXT;
    new (&this->CMSG_GMTICKET_UPDATETEXT) wrath::CMSG_GMTICKET_UPDATETEXT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REQUEST_ACCOUNT_DATA&& obj) {
    opcode = Opcode::CMSG_REQUEST_ACCOUNT_DATA;
    new (&this->CMSG_REQUEST_ACCOUNT_DATA) wrath::CMSG_REQUEST_ACCOUNT_DATA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_UPDATE_ACCOUNT_DATA&& obj) {
    opcode = Opcode::CMSG_UPDATE_ACCOUNT_DATA;
    new (&this->CMSG_UPDATE_ACCOUNT_DATA) wrath::CMSG_UPDATE_ACCOUNT_DATA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GMTICKET_GETTICKET&& obj) {
    opcode = Opcode::CMSG_GMTICKET_GETTICKET;
    new (&this->CMSG_GMTICKET_GETTICKET) wrath::CMSG_GMTICKET_GETTICKET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_UNLEARN_TALENTS&& obj) {
    opcode = Opcode::CMSG_UNLEARN_TALENTS;
    new (&this->CMSG_UNLEARN_TALENTS) wrath::CMSG_UNLEARN_TALENTS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_CORPSE_QUERY_Client&& obj) {
    opcode = Opcode::MSG_CORPSE_QUERY;
    new (&this->MSG_CORPSE_QUERY) wrath::MSG_CORPSE_QUERY_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GMTICKET_DELETETICKET&& obj) {
    opcode = Opcode::CMSG_GMTICKET_DELETETICKET;
    new (&this->CMSG_GMTICKET_DELETETICKET) wrath::CMSG_GMTICKET_DELETETICKET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GMTICKET_SYSTEMSTATUS&& obj) {
    opcode = Opcode::CMSG_GMTICKET_SYSTEMSTATUS;
    new (&this->CMSG_GMTICKET_SYSTEMSTATUS) wrath::CMSG_GMTICKET_SYSTEMSTATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SPIRIT_HEALER_ACTIVATE&& obj) {
    opcode = Opcode::CMSG_SPIRIT_HEALER_ACTIVATE;
    new (&this->CMSG_SPIRIT_HEALER_ACTIVATE) wrath::CMSG_SPIRIT_HEALER_ACTIVATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHAT_IGNORED&& obj) {
    opcode = Opcode::CMSG_CHAT_IGNORED;
    new (&this->CMSG_CHAT_IGNORED) wrath::CMSG_CHAT_IGNORED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_RANK&& obj) {
    opcode = Opcode::CMSG_GUILD_RANK;
    new (&this->CMSG_GUILD_RANK) wrath::CMSG_GUILD_RANK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_ADD_RANK&& obj) {
    opcode = Opcode::CMSG_GUILD_ADD_RANK;
    new (&this->CMSG_GUILD_ADD_RANK) wrath::CMSG_GUILD_ADD_RANK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_DEL_RANK&& obj) {
    opcode = Opcode::CMSG_GUILD_DEL_RANK;
    new (&this->CMSG_GUILD_DEL_RANK) wrath::CMSG_GUILD_DEL_RANK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_SET_PUBLIC_NOTE&& obj) {
    opcode = Opcode::CMSG_GUILD_SET_PUBLIC_NOTE;
    new (&this->CMSG_GUILD_SET_PUBLIC_NOTE) wrath::CMSG_GUILD_SET_PUBLIC_NOTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_SET_OFFICER_NOTE&& obj) {
    opcode = Opcode::CMSG_GUILD_SET_OFFICER_NOTE;
    new (&this->CMSG_GUILD_SET_OFFICER_NOTE) wrath::CMSG_GUILD_SET_OFFICER_NOTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SEND_MAIL&& obj) {
    opcode = Opcode::CMSG_SEND_MAIL;
    new (&this->CMSG_SEND_MAIL) wrath::CMSG_SEND_MAIL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GET_MAIL_LIST&& obj) {
    opcode = Opcode::CMSG_GET_MAIL_LIST;
    new (&this->CMSG_GET_MAIL_LIST) wrath::CMSG_GET_MAIL_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BATTLEFIELD_LIST&& obj) {
    opcode = Opcode::CMSG_BATTLEFIELD_LIST;
    new (&this->CMSG_BATTLEFIELD_LIST) wrath::CMSG_BATTLEFIELD_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ITEM_TEXT_QUERY&& obj) {
    opcode = Opcode::CMSG_ITEM_TEXT_QUERY;
    new (&this->CMSG_ITEM_TEXT_QUERY) wrath::CMSG_ITEM_TEXT_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MAIL_TAKE_MONEY&& obj) {
    opcode = Opcode::CMSG_MAIL_TAKE_MONEY;
    new (&this->CMSG_MAIL_TAKE_MONEY) wrath::CMSG_MAIL_TAKE_MONEY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MAIL_TAKE_ITEM&& obj) {
    opcode = Opcode::CMSG_MAIL_TAKE_ITEM;
    new (&this->CMSG_MAIL_TAKE_ITEM) wrath::CMSG_MAIL_TAKE_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MAIL_MARK_AS_READ&& obj) {
    opcode = Opcode::CMSG_MAIL_MARK_AS_READ;
    new (&this->CMSG_MAIL_MARK_AS_READ) wrath::CMSG_MAIL_MARK_AS_READ (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MAIL_RETURN_TO_SENDER&& obj) {
    opcode = Opcode::CMSG_MAIL_RETURN_TO_SENDER;
    new (&this->CMSG_MAIL_RETURN_TO_SENDER) wrath::CMSG_MAIL_RETURN_TO_SENDER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MAIL_DELETE&& obj) {
    opcode = Opcode::CMSG_MAIL_DELETE;
    new (&this->CMSG_MAIL_DELETE) wrath::CMSG_MAIL_DELETE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MAIL_CREATE_TEXT_ITEM&& obj) {
    opcode = Opcode::CMSG_MAIL_CREATE_TEXT_ITEM;
    new (&this->CMSG_MAIL_CREATE_TEXT_ITEM) wrath::CMSG_MAIL_CREATE_TEXT_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LEARN_TALENT&& obj) {
    opcode = Opcode::CMSG_LEARN_TALENT;
    new (&this->CMSG_LEARN_TALENT) wrath::CMSG_LEARN_TALENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TOGGLE_PVP&& obj) {
    opcode = Opcode::CMSG_TOGGLE_PVP;
    new (&this->CMSG_TOGGLE_PVP) wrath::CMSG_TOGGLE_PVP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_AUCTION_HELLO_Client&& obj) {
    opcode = Opcode::MSG_AUCTION_HELLO;
    new (&this->MSG_AUCTION_HELLO) wrath::MSG_AUCTION_HELLO_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUCTION_SELL_ITEM&& obj) {
    opcode = Opcode::CMSG_AUCTION_SELL_ITEM;
    new (&this->CMSG_AUCTION_SELL_ITEM) wrath::CMSG_AUCTION_SELL_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUCTION_REMOVE_ITEM&& obj) {
    opcode = Opcode::CMSG_AUCTION_REMOVE_ITEM;
    new (&this->CMSG_AUCTION_REMOVE_ITEM) wrath::CMSG_AUCTION_REMOVE_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUCTION_LIST_ITEMS&& obj) {
    opcode = Opcode::CMSG_AUCTION_LIST_ITEMS;
    new (&this->CMSG_AUCTION_LIST_ITEMS) wrath::CMSG_AUCTION_LIST_ITEMS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUCTION_LIST_OWNER_ITEMS&& obj) {
    opcode = Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS;
    new (&this->CMSG_AUCTION_LIST_OWNER_ITEMS) wrath::CMSG_AUCTION_LIST_OWNER_ITEMS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUCTION_PLACE_BID&& obj) {
    opcode = Opcode::CMSG_AUCTION_PLACE_BID;
    new (&this->CMSG_AUCTION_PLACE_BID) wrath::CMSG_AUCTION_PLACE_BID (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS&& obj) {
    opcode = Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS;
    new (&this->CMSG_AUCTION_LIST_BIDDER_ITEMS) wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_AMMO&& obj) {
    opcode = Opcode::CMSG_SET_AMMO;
    new (&this->CMSG_SET_AMMO) wrath::CMSG_SET_AMMO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_ACTIVE_MOVER&& obj) {
    opcode = Opcode::CMSG_SET_ACTIVE_MOVER;
    new (&this->CMSG_SET_ACTIVE_MOVER) wrath::CMSG_SET_ACTIVE_MOVER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_CANCEL_AURA&& obj) {
    opcode = Opcode::CMSG_PET_CANCEL_AURA;
    new (&this->CMSG_PET_CANCEL_AURA) wrath::CMSG_PET_CANCEL_AURA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL&& obj) {
    opcode = Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL;
    new (&this->CMSG_CANCEL_AUTO_REPEAT_SPELL) wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_LIST_STABLED_PETS_Client&& obj) {
    opcode = Opcode::MSG_LIST_STABLED_PETS;
    new (&this->MSG_LIST_STABLED_PETS) wrath::MSG_LIST_STABLED_PETS_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_STABLE_PET&& obj) {
    opcode = Opcode::CMSG_STABLE_PET;
    new (&this->CMSG_STABLE_PET) wrath::CMSG_STABLE_PET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_UNSTABLE_PET&& obj) {
    opcode = Opcode::CMSG_UNSTABLE_PET;
    new (&this->CMSG_UNSTABLE_PET) wrath::CMSG_UNSTABLE_PET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BUY_STABLE_SLOT&& obj) {
    opcode = Opcode::CMSG_BUY_STABLE_SLOT;
    new (&this->CMSG_BUY_STABLE_SLOT) wrath::CMSG_BUY_STABLE_SLOT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_STABLE_SWAP_PET&& obj) {
    opcode = Opcode::CMSG_STABLE_SWAP_PET;
    new (&this->CMSG_STABLE_SWAP_PET) wrath::CMSG_STABLE_SWAP_PET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_QUEST_PUSH_RESULT&& obj) {
    opcode = Opcode::MSG_QUEST_PUSH_RESULT;
    new (&this->MSG_QUEST_PUSH_RESULT) wrath::MSG_QUEST_PUSH_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REQUEST_PET_INFO&& obj) {
    opcode = Opcode::CMSG_REQUEST_PET_INFO;
    new (&this->CMSG_REQUEST_PET_INFO) wrath::CMSG_REQUEST_PET_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FAR_SIGHT&& obj) {
    opcode = Opcode::CMSG_FAR_SIGHT;
    new (&this->CMSG_FAR_SIGHT) wrath::CMSG_FAR_SIGHT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_CHANGE_SUB_GROUP&& obj) {
    opcode = Opcode::CMSG_GROUP_CHANGE_SUB_GROUP;
    new (&this->CMSG_GROUP_CHANGE_SUB_GROUP) wrath::CMSG_GROUP_CHANGE_SUB_GROUP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REQUEST_PARTY_MEMBER_STATS&& obj) {
    opcode = Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS;
    new (&this->CMSG_REQUEST_PARTY_MEMBER_STATS) wrath::CMSG_REQUEST_PARTY_MEMBER_STATS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_SWAP_SUB_GROUP&& obj) {
    opcode = Opcode::CMSG_GROUP_SWAP_SUB_GROUP;
    new (&this->CMSG_GROUP_SWAP_SUB_GROUP) wrath::CMSG_GROUP_SWAP_SUB_GROUP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUTOSTORE_BANK_ITEM&& obj) {
    opcode = Opcode::CMSG_AUTOSTORE_BANK_ITEM;
    new (&this->CMSG_AUTOSTORE_BANK_ITEM) wrath::CMSG_AUTOSTORE_BANK_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUTOBANK_ITEM&& obj) {
    opcode = Opcode::CMSG_AUTOBANK_ITEM;
    new (&this->CMSG_AUTOBANK_ITEM) wrath::CMSG_AUTOBANK_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_QUERY_NEXT_MAIL_TIME_Client&& obj) {
    opcode = Opcode::MSG_QUERY_NEXT_MAIL_TIME;
    new (&this->MSG_QUERY_NEXT_MAIL_TIME) wrath::MSG_QUERY_NEXT_MAIL_TIME_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_RAID_CONVERT&& obj) {
    opcode = Opcode::CMSG_GROUP_RAID_CONVERT;
    new (&this->CMSG_GROUP_RAID_CONVERT) wrath::CMSG_GROUP_RAID_CONVERT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GROUP_ASSISTANT_LEADER&& obj) {
    opcode = Opcode::CMSG_GROUP_ASSISTANT_LEADER;
    new (&this->CMSG_GROUP_ASSISTANT_LEADER) wrath::CMSG_GROUP_ASSISTANT_LEADER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BUYBACK_ITEM&& obj) {
    opcode = Opcode::CMSG_BUYBACK_ITEM;
    new (&this->CMSG_BUYBACK_ITEM) wrath::CMSG_BUYBACK_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_SAVED_INSTANCE_EXTEND&& obj) {
    opcode = Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND;
    new (&this->CMSG_SET_SAVED_INSTANCE_EXTEND) wrath::CMSG_SET_SAVED_INSTANCE_EXTEND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LFG_GET_STATUS&& obj) {
    opcode = Opcode::CMSG_LFG_GET_STATUS;
    new (&this->CMSG_LFG_GET_STATUS) wrath::CMSG_LFG_GET_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GMTICKETSYSTEM_TOGGLE&& obj) {
    opcode = Opcode::CMSG_GMTICKETSYSTEM_TOGGLE;
    new (&this->CMSG_GMTICKETSYSTEM_TOGGLE) wrath::CMSG_GMTICKETSYSTEM_TOGGLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CANCEL_GROWTH_AURA&& obj) {
    opcode = Opcode::CMSG_CANCEL_GROWTH_AURA;
    new (&this->CMSG_CANCEL_GROWTH_AURA) wrath::CMSG_CANCEL_GROWTH_AURA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LOOT_ROLL&& obj) {
    opcode = Opcode::CMSG_LOOT_ROLL;
    new (&this->CMSG_LOOT_ROLL) wrath::CMSG_LOOT_ROLL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LOOT_MASTER_GIVE&& obj) {
    opcode = Opcode::CMSG_LOOT_MASTER_GIVE;
    new (&this->CMSG_LOOT_MASTER_GIVE) wrath::CMSG_LOOT_MASTER_GIVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REPAIR_ITEM&& obj) {
    opcode = Opcode::CMSG_REPAIR_ITEM;
    new (&this->CMSG_REPAIR_ITEM) wrath::CMSG_REPAIR_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_TALENT_WIPE_CONFIRM_Client&& obj) {
    opcode = Opcode::MSG_TALENT_WIPE_CONFIRM;
    new (&this->MSG_TALENT_WIPE_CONFIRM) wrath::MSG_TALENT_WIPE_CONFIRM_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SUMMON_RESPONSE&& obj) {
    opcode = Opcode::CMSG_SUMMON_RESPONSE;
    new (&this->CMSG_SUMMON_RESPONSE) wrath::CMSG_SUMMON_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_WATER_WALK&& obj) {
    opcode = Opcode::MSG_MOVE_WATER_WALK;
    new (&this->MSG_MOVE_WATER_WALK) wrath::MSG_MOVE_WATER_WALK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SELF_RES&& obj) {
    opcode = Opcode::CMSG_SELF_RES;
    new (&this->CMSG_SELF_RES) wrath::CMSG_SELF_RES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TOGGLE_HELM&& obj) {
    opcode = Opcode::CMSG_TOGGLE_HELM;
    new (&this->CMSG_TOGGLE_HELM) wrath::CMSG_TOGGLE_HELM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TOGGLE_CLOAK&& obj) {
    opcode = Opcode::CMSG_TOGGLE_CLOAK;
    new (&this->CMSG_TOGGLE_CLOAK) wrath::CMSG_TOGGLE_CLOAK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_ACTIONBAR_TOGGLES&& obj) {
    opcode = Opcode::CMSG_SET_ACTIONBAR_TOGGLES;
    new (&this->CMSG_SET_ACTIONBAR_TOGGLES) wrath::CMSG_SET_ACTIONBAR_TOGGLES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_PETITION_RENAME&& obj) {
    opcode = Opcode::MSG_PETITION_RENAME;
    new (&this->MSG_PETITION_RENAME) wrath::MSG_PETITION_RENAME (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ITEM_NAME_QUERY&& obj) {
    opcode = Opcode::CMSG_ITEM_NAME_QUERY;
    new (&this->CMSG_ITEM_NAME_QUERY) wrath::CMSG_ITEM_NAME_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHAR_RENAME&& obj) {
    opcode = Opcode::CMSG_CHAR_RENAME;
    new (&this->CMSG_CHAR_RENAME) wrath::CMSG_CHAR_RENAME (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_SPLINE_DONE&& obj) {
    opcode = Opcode::CMSG_MOVE_SPLINE_DONE;
    new (&this->CMSG_MOVE_SPLINE_DONE) wrath::CMSG_MOVE_SPLINE_DONE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_FALL_RESET&& obj) {
    opcode = Opcode::CMSG_MOVE_FALL_RESET;
    new (&this->CMSG_MOVE_FALL_RESET) wrath::CMSG_MOVE_FALL_RESET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REQUEST_RAID_INFO&& obj) {
    opcode = Opcode::CMSG_REQUEST_RAID_INFO;
    new (&this->CMSG_REQUEST_RAID_INFO) wrath::CMSG_REQUEST_RAID_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_TIME_SKIPPED&& obj) {
    opcode = Opcode::CMSG_MOVE_TIME_SKIPPED;
    new (&this->CMSG_MOVE_TIME_SKIPPED) wrath::CMSG_MOVE_TIME_SKIPPED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_FEATHER_FALL_ACK&& obj) {
    opcode = Opcode::CMSG_MOVE_FEATHER_FALL_ACK;
    new (&this->CMSG_MOVE_FEATHER_FALL_ACK) wrath::CMSG_MOVE_FEATHER_FALL_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_WATER_WALK_ACK&& obj) {
    opcode = Opcode::CMSG_MOVE_WATER_WALK_ACK;
    new (&this->CMSG_MOVE_WATER_WALK_ACK) wrath::CMSG_MOVE_WATER_WALK_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_NOT_ACTIVE_MOVER&& obj) {
    opcode = Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER;
    new (&this->CMSG_MOVE_NOT_ACTIVE_MOVER) wrath::CMSG_MOVE_NOT_ACTIVE_MOVER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BATTLEFIELD_STATUS&& obj) {
    opcode = Opcode::CMSG_BATTLEFIELD_STATUS;
    new (&this->CMSG_BATTLEFIELD_STATUS) wrath::CMSG_BATTLEFIELD_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BATTLEFIELD_PORT&& obj) {
    opcode = Opcode::CMSG_BATTLEFIELD_PORT;
    new (&this->CMSG_BATTLEFIELD_PORT) wrath::CMSG_BATTLEFIELD_PORT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_INSPECT_HONOR_STATS_Client&& obj) {
    opcode = Opcode::MSG_INSPECT_HONOR_STATS;
    new (&this->MSG_INSPECT_HONOR_STATS) wrath::MSG_INSPECT_HONOR_STATS_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BATTLEMASTER_HELLO&& obj) {
    opcode = Opcode::CMSG_BATTLEMASTER_HELLO;
    new (&this->CMSG_BATTLEMASTER_HELLO) wrath::CMSG_BATTLEMASTER_HELLO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK&& obj) {
    opcode = Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
    new (&this->CMSG_FORCE_WALK_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK&& obj) {
    opcode = Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
    new (&this->CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK&& obj) {
    opcode = Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK;
    new (&this->CMSG_FORCE_TURN_RATE_CHANGE_ACK) wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_PVP_LOG_DATA_Client&& obj) {
    opcode = Opcode::MSG_PVP_LOG_DATA;
    new (&this->MSG_PVP_LOG_DATA) wrath::MSG_PVP_LOG_DATA_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LEAVE_BATTLEFIELD&& obj) {
    opcode = Opcode::CMSG_LEAVE_BATTLEFIELD;
    new (&this->CMSG_LEAVE_BATTLEFIELD) wrath::CMSG_LEAVE_BATTLEFIELD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AREA_SPIRIT_HEALER_QUERY&& obj) {
    opcode = Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY;
    new (&this->CMSG_AREA_SPIRIT_HEALER_QUERY) wrath::CMSG_AREA_SPIRIT_HEALER_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE&& obj) {
    opcode = Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE;
    new (&this->CMSG_AREA_SPIRIT_HEALER_QUEUE) wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_WARDEN_DATA&& obj) {
    opcode = Opcode::CMSG_WARDEN_DATA;
    new (&this->CMSG_WARDEN_DATA) wrath::CMSG_WARDEN_DATA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client&& obj) {
    opcode = Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS;
    new (&this->MSG_BATTLEGROUND_PLAYER_POSITIONS) wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_STOP_ATTACK&& obj) {
    opcode = Opcode::CMSG_PET_STOP_ATTACK;
    new (&this->CMSG_PET_STOP_ATTACK) wrath::CMSG_PET_STOP_ATTACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BATTLEMASTER_JOIN&& obj) {
    opcode = Opcode::CMSG_BATTLEMASTER_JOIN;
    new (&this->CMSG_BATTLEMASTER_JOIN) wrath::CMSG_BATTLEMASTER_JOIN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_UNLEARN&& obj) {
    opcode = Opcode::CMSG_PET_UNLEARN;
    new (&this->CMSG_PET_UNLEARN) wrath::CMSG_PET_UNLEARN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_SPELL_AUTOCAST&& obj) {
    opcode = Opcode::CMSG_PET_SPELL_AUTOCAST;
    new (&this->CMSG_PET_SPELL_AUTOCAST) wrath::CMSG_PET_SPELL_AUTOCAST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_INFO_TEXT&& obj) {
    opcode = Opcode::CMSG_GUILD_INFO_TEXT;
    new (&this->CMSG_GUILD_INFO_TEXT) wrath::CMSG_GUILD_INFO_TEXT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ACTIVATETAXIEXPRESS&& obj) {
    opcode = Opcode::CMSG_ACTIVATETAXIEXPRESS;
    new (&this->CMSG_ACTIVATETAXIEXPRESS) wrath::CMSG_ACTIVATETAXIEXPRESS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_FACTION_INACTIVE&& obj) {
    opcode = Opcode::CMSG_SET_FACTION_INACTIVE;
    new (&this->CMSG_SET_FACTION_INACTIVE) wrath::CMSG_SET_FACTION_INACTIVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_WATCHED_FACTION&& obj) {
    opcode = Opcode::CMSG_SET_WATCHED_FACTION;
    new (&this->CMSG_SET_WATCHED_FACTION) wrath::CMSG_SET_WATCHED_FACTION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_RESET_INSTANCES&& obj) {
    opcode = Opcode::CMSG_RESET_INSTANCES;
    new (&this->CMSG_RESET_INSTANCES) wrath::CMSG_RESET_INSTANCES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_RAID_TARGET_UPDATE_Client&& obj) {
    opcode = Opcode::MSG_RAID_TARGET_UPDATE;
    new (&this->MSG_RAID_TARGET_UPDATE) wrath::MSG_RAID_TARGET_UPDATE_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_RAID_READY_CHECK_Client&& obj) {
    opcode = Opcode::MSG_RAID_READY_CHECK;
    new (&this->MSG_RAID_READY_CHECK) wrath::MSG_RAID_READY_CHECK_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_SET_DUNGEON_DIFFICULTY_Client&& obj) {
    opcode = Opcode::MSG_SET_DUNGEON_DIFFICULTY;
    new (&this->MSG_SET_DUNGEON_DIFFICULTY) wrath::MSG_SET_DUNGEON_DIFFICULTY_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GMSURVEY_SUBMIT&& obj) {
    opcode = Opcode::CMSG_GMSURVEY_SUBMIT;
    new (&this->CMSG_GMSURVEY_SUBMIT) wrath::CMSG_GMSURVEY_SUBMIT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK&& obj) {
    opcode = Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK;
    new (&this->CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_SET_CAN_FLY_ACK&& obj) {
    opcode = Opcode::CMSG_MOVE_SET_CAN_FLY_ACK;
    new (&this->CMSG_MOVE_SET_CAN_FLY_ACK) wrath::CMSG_MOVE_SET_CAN_FLY_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_SET_FLY&& obj) {
    opcode = Opcode::CMSG_MOVE_SET_FLY;
    new (&this->CMSG_MOVE_SET_FLY) wrath::CMSG_MOVE_SET_FLY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SOCKET_GEMS&& obj) {
    opcode = Opcode::CMSG_SOCKET_GEMS;
    new (&this->CMSG_SOCKET_GEMS) wrath::CMSG_SOCKET_GEMS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ARENA_TEAM_ROSTER&& obj) {
    opcode = Opcode::CMSG_ARENA_TEAM_ROSTER;
    new (&this->CMSG_ARENA_TEAM_ROSTER) wrath::CMSG_ARENA_TEAM_ROSTER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ARENA_TEAM_INVITE&& obj) {
    opcode = Opcode::CMSG_ARENA_TEAM_INVITE;
    new (&this->CMSG_ARENA_TEAM_INVITE) wrath::CMSG_ARENA_TEAM_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ARENA_TEAM_ACCEPT&& obj) {
    opcode = Opcode::CMSG_ARENA_TEAM_ACCEPT;
    new (&this->CMSG_ARENA_TEAM_ACCEPT) wrath::CMSG_ARENA_TEAM_ACCEPT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ARENA_TEAM_DECLINE&& obj) {
    opcode = Opcode::CMSG_ARENA_TEAM_DECLINE;
    new (&this->CMSG_ARENA_TEAM_DECLINE) wrath::CMSG_ARENA_TEAM_DECLINE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ARENA_TEAM_LEAVE&& obj) {
    opcode = Opcode::CMSG_ARENA_TEAM_LEAVE;
    new (&this->CMSG_ARENA_TEAM_LEAVE) wrath::CMSG_ARENA_TEAM_LEAVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ARENA_TEAM_REMOVE&& obj) {
    opcode = Opcode::CMSG_ARENA_TEAM_REMOVE;
    new (&this->CMSG_ARENA_TEAM_REMOVE) wrath::CMSG_ARENA_TEAM_REMOVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ARENA_TEAM_DISBAND&& obj) {
    opcode = Opcode::CMSG_ARENA_TEAM_DISBAND;
    new (&this->CMSG_ARENA_TEAM_DISBAND) wrath::CMSG_ARENA_TEAM_DISBAND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ARENA_TEAM_LEADER&& obj) {
    opcode = Opcode::CMSG_ARENA_TEAM_LEADER;
    new (&this->CMSG_ARENA_TEAM_LEADER) wrath::CMSG_ARENA_TEAM_LEADER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BATTLEMASTER_JOIN_ARENA&& obj) {
    opcode = Opcode::CMSG_BATTLEMASTER_JOIN_ARENA;
    new (&this->CMSG_BATTLEMASTER_JOIN_ARENA) wrath::CMSG_BATTLEMASTER_JOIN_ARENA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_ASCEND&& obj) {
    opcode = Opcode::MSG_MOVE_START_ASCEND;
    new (&this->MSG_MOVE_START_ASCEND) wrath::MSG_MOVE_START_ASCEND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_STOP_ASCEND&& obj) {
    opcode = Opcode::MSG_MOVE_STOP_ASCEND;
    new (&this->MSG_MOVE_STOP_ASCEND) wrath::MSG_MOVE_STOP_ASCEND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LFG_JOIN&& obj) {
    opcode = Opcode::CMSG_LFG_JOIN;
    new (&this->CMSG_LFG_JOIN) wrath::CMSG_LFG_JOIN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LFG_LEAVE&& obj) {
    opcode = Opcode::CMSG_LFG_LEAVE;
    new (&this->CMSG_LFG_LEAVE) wrath::CMSG_LFG_LEAVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SEARCH_LFG_JOIN&& obj) {
    opcode = Opcode::CMSG_SEARCH_LFG_JOIN;
    new (&this->CMSG_SEARCH_LFG_JOIN) wrath::CMSG_SEARCH_LFG_JOIN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SEARCH_LFG_LEAVE&& obj) {
    opcode = Opcode::CMSG_SEARCH_LFG_LEAVE;
    new (&this->CMSG_SEARCH_LFG_LEAVE) wrath::CMSG_SEARCH_LFG_LEAVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LFG_PROPOSAL_RESULT&& obj) {
    opcode = Opcode::CMSG_LFG_PROPOSAL_RESULT;
    new (&this->CMSG_LFG_PROPOSAL_RESULT) wrath::CMSG_LFG_PROPOSAL_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_LFG_COMMENT&& obj) {
    opcode = Opcode::CMSG_SET_LFG_COMMENT;
    new (&this->CMSG_SET_LFG_COMMENT) wrath::CMSG_SET_LFG_COMMENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LFG_SET_ROLES&& obj) {
    opcode = Opcode::CMSG_LFG_SET_ROLES;
    new (&this->CMSG_LFG_SET_ROLES) wrath::CMSG_LFG_SET_ROLES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LFG_SET_BOOT_VOTE&& obj) {
    opcode = Opcode::CMSG_LFG_SET_BOOT_VOTE;
    new (&this->CMSG_LFG_SET_BOOT_VOTE) wrath::CMSG_LFG_SET_BOOT_VOTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST&& obj) {
    opcode = Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST;
    new (&this->CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LFG_TELEPORT&& obj) {
    opcode = Opcode::CMSG_LFG_TELEPORT;
    new (&this->CMSG_LFG_TELEPORT) wrath::CMSG_LFG_TELEPORT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST&& obj) {
    opcode = Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST;
    new (&this->CMSG_LFD_PARTY_LOCK_INFO_REQUEST) wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_TITLE&& obj) {
    opcode = Opcode::CMSG_SET_TITLE;
    new (&this->CMSG_SET_TITLE) wrath::CMSG_SET_TITLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CANCEL_MOUNT_AURA&& obj) {
    opcode = Opcode::CMSG_CANCEL_MOUNT_AURA;
    new (&this->CMSG_CANCEL_MOUNT_AURA) wrath::CMSG_CANCEL_MOUNT_AURA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_INSPECT_ARENA_TEAMS_Client&& obj) {
    opcode = Opcode::MSG_INSPECT_ARENA_TEAMS;
    new (&this->MSG_INSPECT_ARENA_TEAMS) wrath::MSG_INSPECT_ARENA_TEAMS_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CANCEL_TEMP_ENCHANTMENT&& obj) {
    opcode = Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT;
    new (&this->CMSG_CANCEL_TEMP_ENCHANTMENT) wrath::CMSG_CANCEL_TEMP_ENCHANTMENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED&& obj) {
    opcode = Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED;
    new (&this->MSG_MOVE_SET_FLIGHT_BACK_SPEED) wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK&& obj) {
    opcode = Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK;
    new (&this->CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK&& obj) {
    opcode = Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK;
    new (&this->CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_TAXI_BENCHMARK_MODE&& obj) {
    opcode = Opcode::CMSG_SET_TAXI_BENCHMARK_MODE;
    new (&this->CMSG_SET_TAXI_BENCHMARK_MODE) wrath::CMSG_SET_TAXI_BENCHMARK_MODE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REALM_SPLIT&& obj) {
    opcode = Opcode::CMSG_REALM_SPLIT;
    new (&this->CMSG_REALM_SPLIT) wrath::CMSG_REALM_SPLIT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_CHNG_TRANSPORT&& obj) {
    opcode = Opcode::CMSG_MOVE_CHNG_TRANSPORT;
    new (&this->CMSG_MOVE_CHNG_TRANSPORT) wrath::CMSG_MOVE_CHNG_TRANSPORT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_PARTY_ASSIGNMENT_Client&& obj) {
    opcode = Opcode::MSG_PARTY_ASSIGNMENT;
    new (&this->MSG_PARTY_ASSIGNMENT) wrath::MSG_PARTY_ASSIGNMENT_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TIME_SYNC_RESP&& obj) {
    opcode = Opcode::CMSG_TIME_SYNC_RESP;
    new (&this->CMSG_TIME_SYNC_RESP) wrath::CMSG_TIME_SYNC_RESP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_MOVE_START_DESCEND&& obj) {
    opcode = Opcode::MSG_MOVE_START_DESCEND;
    new (&this->MSG_MOVE_START_DESCEND) wrath::MSG_MOVE_START_DESCEND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_RAID_READY_CHECK_CONFIRM_Client&& obj) {
    opcode = Opcode::MSG_RAID_READY_CHECK_CONFIRM;
    new (&this->MSG_RAID_READY_CHECK_CONFIRM) wrath::MSG_RAID_READY_CHECK_CONFIRM_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_VOICE_SESSION_ENABLE&& obj) {
    opcode = Opcode::CMSG_VOICE_SESSION_ENABLE;
    new (&this->CMSG_VOICE_SESSION_ENABLE) wrath::CMSG_VOICE_SESSION_ENABLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_COMMENTATOR_ENABLE&& obj) {
    opcode = Opcode::CMSG_COMMENTATOR_ENABLE;
    new (&this->CMSG_COMMENTATOR_ENABLE) wrath::CMSG_COMMENTATOR_ENABLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_RAID_READY_CHECK_FINISHED_Client&& obj) {
    opcode = Opcode::MSG_RAID_READY_CHECK_FINISHED;
    new (&this->MSG_RAID_READY_CHECK_FINISHED) wrath::MSG_RAID_READY_CHECK_FINISHED_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_COMPLAIN&& obj) {
    opcode = Opcode::CMSG_COMPLAIN;
    new (&this->CMSG_COMPLAIN) wrath::CMSG_COMPLAIN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_DISPLAY_LIST&& obj) {
    opcode = Opcode::CMSG_CHANNEL_DISPLAY_LIST;
    new (&this->CMSG_CHANNEL_DISPLAY_LIST) wrath::CMSG_CHANNEL_DISPLAY_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL&& obj) {
    opcode = Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL;
    new (&this->CMSG_SET_ACTIVE_VOICE_CHANNEL) wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GET_CHANNEL_MEMBER_COUNT&& obj) {
    opcode = Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT;
    new (&this->CMSG_GET_CHANNEL_MEMBER_COUNT) wrath::CMSG_GET_CHANNEL_MEMBER_COUNT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANNEL_VOICE_ON&& obj) {
    opcode = Opcode::CMSG_CHANNEL_VOICE_ON;
    new (&this->CMSG_CHANNEL_VOICE_ON) wrath::CMSG_CHANNEL_VOICE_ON (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REPORT_PVP_AFK&& obj) {
    opcode = Opcode::CMSG_REPORT_PVP_AFK;
    new (&this->CMSG_REPORT_PVP_AFK) wrath::CMSG_REPORT_PVP_AFK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_BANKER_ACTIVATE&& obj) {
    opcode = Opcode::CMSG_GUILD_BANKER_ACTIVATE;
    new (&this->CMSG_GUILD_BANKER_ACTIVATE) wrath::CMSG_GUILD_BANKER_ACTIVATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_BANK_QUERY_TAB&& obj) {
    opcode = Opcode::CMSG_GUILD_BANK_QUERY_TAB;
    new (&this->CMSG_GUILD_BANK_QUERY_TAB) wrath::CMSG_GUILD_BANK_QUERY_TAB (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_BANK_SWAP_ITEMS&& obj) {
    opcode = Opcode::CMSG_GUILD_BANK_SWAP_ITEMS;
    new (&this->CMSG_GUILD_BANK_SWAP_ITEMS) wrath::CMSG_GUILD_BANK_SWAP_ITEMS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_BANK_BUY_TAB&& obj) {
    opcode = Opcode::CMSG_GUILD_BANK_BUY_TAB;
    new (&this->CMSG_GUILD_BANK_BUY_TAB) wrath::CMSG_GUILD_BANK_BUY_TAB (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_BANK_UPDATE_TAB&& obj) {
    opcode = Opcode::CMSG_GUILD_BANK_UPDATE_TAB;
    new (&this->CMSG_GUILD_BANK_UPDATE_TAB) wrath::CMSG_GUILD_BANK_UPDATE_TAB (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY&& obj) {
    opcode = Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY;
    new (&this->CMSG_GUILD_BANK_DEPOSIT_MONEY) wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY&& obj) {
    opcode = Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY;
    new (&this->CMSG_GUILD_BANK_WITHDRAW_MONEY) wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_GUILD_BANK_LOG_QUERY_Client&& obj) {
    opcode = Opcode::MSG_GUILD_BANK_LOG_QUERY;
    new (&this->MSG_GUILD_BANK_LOG_QUERY) wrath::MSG_GUILD_BANK_LOG_QUERY_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_CHANNEL_WATCH&& obj) {
    opcode = Opcode::CMSG_SET_CHANNEL_WATCH;
    new (&this->CMSG_SET_CHANNEL_WATCH) wrath::CMSG_SET_CHANNEL_WATCH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CLEAR_CHANNEL_WATCH&& obj) {
    opcode = Opcode::CMSG_CLEAR_CHANNEL_WATCH;
    new (&this->CMSG_CLEAR_CHANNEL_WATCH) wrath::CMSG_CLEAR_CHANNEL_WATCH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SPELLCLICK&& obj) {
    opcode = Opcode::CMSG_SPELLCLICK;
    new (&this->CMSG_SPELLCLICK) wrath::CMSG_SPELLCLICK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_GUILD_PERMISSIONS_Client&& obj) {
    opcode = Opcode::MSG_GUILD_PERMISSIONS;
    new (&this->MSG_GUILD_PERMISSIONS) wrath::MSG_GUILD_PERMISSIONS_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client&& obj) {
    opcode = Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN;
    new (&this->MSG_GUILD_BANK_MONEY_WITHDRAWN) wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_GUILD_EVENT_LOG_QUERY_Client&& obj) {
    opcode = Opcode::MSG_GUILD_EVENT_LOG_QUERY;
    new (&this->MSG_GUILD_EVENT_LOG_QUERY) wrath::MSG_GUILD_EVENT_LOG_QUERY_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GET_MIRRORIMAGE_DATA&& obj) {
    opcode = Opcode::CMSG_GET_MIRRORIMAGE_DATA;
    new (&this->CMSG_GET_MIRRORIMAGE_DATA) wrath::CMSG_GET_MIRRORIMAGE_DATA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_KEEP_ALIVE&& obj) {
    opcode = Opcode::CMSG_KEEP_ALIVE;
    new (&this->CMSG_KEEP_ALIVE) wrath::CMSG_KEEP_ALIVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_OPT_OUT_OF_LOOT&& obj) {
    opcode = Opcode::CMSG_OPT_OUT_OF_LOOT;
    new (&this->CMSG_OPT_OUT_OF_LOOT) wrath::CMSG_OPT_OUT_OF_LOOT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_QUERY_GUILD_BANK_TEXT_Client&& obj) {
    opcode = Opcode::MSG_QUERY_GUILD_BANK_TEXT;
    new (&this->MSG_QUERY_GUILD_BANK_TEXT) wrath::MSG_QUERY_GUILD_BANK_TEXT_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_GUILD_BANK_TEXT&& obj) {
    opcode = Opcode::CMSG_SET_GUILD_BANK_TEXT;
    new (&this->CMSG_SET_GUILD_BANK_TEXT) wrath::CMSG_SET_GUILD_BANK_TEXT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GRANT_LEVEL&& obj) {
    opcode = Opcode::CMSG_GRANT_LEVEL;
    new (&this->CMSG_GRANT_LEVEL) wrath::CMSG_GRANT_LEVEL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_TOTEM_DESTROYED&& obj) {
    opcode = Opcode::CMSG_TOTEM_DESTROYED;
    new (&this->CMSG_TOTEM_DESTROYED) wrath::CMSG_TOTEM_DESTROYED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY&& obj) {
    opcode = Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY;
    new (&this->CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_SET_PLAYER_DECLINED_NAMES&& obj) {
    opcode = Opcode::CMSG_SET_PLAYER_DECLINED_NAMES;
    new (&this->CMSG_SET_PLAYER_DECLINED_NAMES) wrath::CMSG_SET_PLAYER_DECLINED_NAMES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ACCEPT_LEVEL_GRANT&& obj) {
    opcode = Opcode::CMSG_ACCEPT_LEVEL_GRANT;
    new (&this->CMSG_ACCEPT_LEVEL_GRANT) wrath::CMSG_ACCEPT_LEVEL_GRANT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ALTER_APPEARANCE&& obj) {
    opcode = Opcode::CMSG_ALTER_APPEARANCE;
    new (&this->CMSG_ALTER_APPEARANCE) wrath::CMSG_ALTER_APPEARANCE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_GET_CALENDAR&& obj) {
    opcode = Opcode::CMSG_CALENDAR_GET_CALENDAR;
    new (&this->CMSG_CALENDAR_GET_CALENDAR) wrath::CMSG_CALENDAR_GET_CALENDAR (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_GET_EVENT&& obj) {
    opcode = Opcode::CMSG_CALENDAR_GET_EVENT;
    new (&this->CMSG_CALENDAR_GET_EVENT) wrath::CMSG_CALENDAR_GET_EVENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_GUILD_FILTER&& obj) {
    opcode = Opcode::CMSG_CALENDAR_GUILD_FILTER;
    new (&this->CMSG_CALENDAR_GUILD_FILTER) wrath::CMSG_CALENDAR_GUILD_FILTER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_ARENA_TEAM&& obj) {
    opcode = Opcode::CMSG_CALENDAR_ARENA_TEAM;
    new (&this->CMSG_CALENDAR_ARENA_TEAM) wrath::CMSG_CALENDAR_ARENA_TEAM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_ADD_EVENT&& obj) {
    opcode = Opcode::CMSG_CALENDAR_ADD_EVENT;
    new (&this->CMSG_CALENDAR_ADD_EVENT) wrath::CMSG_CALENDAR_ADD_EVENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_UPDATE_EVENT&& obj) {
    opcode = Opcode::CMSG_CALENDAR_UPDATE_EVENT;
    new (&this->CMSG_CALENDAR_UPDATE_EVENT) wrath::CMSG_CALENDAR_UPDATE_EVENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_REMOVE_EVENT&& obj) {
    opcode = Opcode::CMSG_CALENDAR_REMOVE_EVENT;
    new (&this->CMSG_CALENDAR_REMOVE_EVENT) wrath::CMSG_CALENDAR_REMOVE_EVENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_COPY_EVENT&& obj) {
    opcode = Opcode::CMSG_CALENDAR_COPY_EVENT;
    new (&this->CMSG_CALENDAR_COPY_EVENT) wrath::CMSG_CALENDAR_COPY_EVENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_EVENT_INVITE&& obj) {
    opcode = Opcode::CMSG_CALENDAR_EVENT_INVITE;
    new (&this->CMSG_CALENDAR_EVENT_INVITE) wrath::CMSG_CALENDAR_EVENT_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_EVENT_RSVP&& obj) {
    opcode = Opcode::CMSG_CALENDAR_EVENT_RSVP;
    new (&this->CMSG_CALENDAR_EVENT_RSVP) wrath::CMSG_CALENDAR_EVENT_RSVP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE&& obj) {
    opcode = Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE;
    new (&this->CMSG_CALENDAR_EVENT_REMOVE_INVITE) wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_EVENT_STATUS&& obj) {
    opcode = Opcode::CMSG_CALENDAR_EVENT_STATUS;
    new (&this->CMSG_CALENDAR_EVENT_STATUS) wrath::CMSG_CALENDAR_EVENT_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS&& obj) {
    opcode = Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS;
    new (&this->CMSG_CALENDAR_EVENT_MODERATOR_STATUS) wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_COMPLAIN&& obj) {
    opcode = Opcode::CMSG_CALENDAR_COMPLAIN;
    new (&this->CMSG_CALENDAR_COMPLAIN) wrath::CMSG_CALENDAR_COMPLAIN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_GET_NUM_PENDING&& obj) {
    opcode = Opcode::CMSG_CALENDAR_GET_NUM_PENDING;
    new (&this->CMSG_CALENDAR_GET_NUM_PENDING) wrath::CMSG_CALENDAR_GET_NUM_PENDING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_UPDATE_MISSILE_TRAJECTORY&& obj) {
    opcode = Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY;
    new (&this->CMSG_UPDATE_MISSILE_TRAJECTORY) wrath::CMSG_UPDATE_MISSILE_TRAJECTORY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_COMPLETE_MOVIE&& obj) {
    opcode = Opcode::CMSG_COMPLETE_MOVIE;
    new (&this->CMSG_COMPLETE_MOVIE) wrath::CMSG_COMPLETE_MOVIE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS&& obj) {
    opcode = Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS;
    new (&this->CMSG_QUERY_INSPECT_ACHIEVEMENTS) wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_DISMISS_CONTROLLED_VEHICLE&& obj) {
    opcode = Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE;
    new (&this->CMSG_DISMISS_CONTROLLED_VEHICLE) wrath::CMSG_DISMISS_CONTROLLED_VEHICLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHAR_CUSTOMIZE&& obj) {
    opcode = Opcode::CMSG_CHAR_CUSTOMIZE;
    new (&this->CMSG_CHAR_CUSTOMIZE) wrath::CMSG_CHAR_CUSTOMIZE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REQUEST_VEHICLE_EXIT&& obj) {
    opcode = Opcode::CMSG_REQUEST_VEHICLE_EXIT;
    new (&this->CMSG_REQUEST_VEHICLE_EXIT) wrath::CMSG_REQUEST_VEHICLE_EXIT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT&& obj) {
    opcode = Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT;
    new (&this->CMSG_REQUEST_VEHICLE_PREV_SEAT) wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT&& obj) {
    opcode = Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT;
    new (&this->CMSG_REQUEST_VEHICLE_NEXT_SEAT) wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT&& obj) {
    opcode = Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT;
    new (&this->CMSG_REQUEST_VEHICLE_SWITCH_SEAT) wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PET_LEARN_TALENT&& obj) {
    opcode = Opcode::CMSG_PET_LEARN_TALENT;
    new (&this->CMSG_PET_LEARN_TALENT) wrath::CMSG_PET_LEARN_TALENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GAMEOBJ_REPORT_USE&& obj) {
    opcode = Opcode::CMSG_GAMEOBJ_REPORT_USE;
    new (&this->CMSG_GAMEOBJ_REPORT_USE) wrath::CMSG_GAMEOBJ_REPORT_USE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_REMOVE_GLYPH&& obj) {
    opcode = Opcode::CMSG_REMOVE_GLYPH;
    new (&this->CMSG_REMOVE_GLYPH) wrath::CMSG_REMOVE_GLYPH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_DISMISS_CRITTER&& obj) {
    opcode = Opcode::CMSG_DISMISS_CRITTER;
    new (&this->CMSG_DISMISS_CRITTER) wrath::CMSG_DISMISS_CRITTER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_AUCTION_LIST_PENDING_SALES&& obj) {
    opcode = Opcode::CMSG_AUCTION_LIST_PENDING_SALES;
    new (&this->CMSG_AUCTION_LIST_PENDING_SALES) wrath::CMSG_AUCTION_LIST_PENDING_SALES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ENABLETAXI&& obj) {
    opcode = Opcode::CMSG_ENABLETAXI;
    new (&this->CMSG_ENABLETAXI) wrath::CMSG_ENABLETAXI (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE&& obj) {
    opcode = Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE;
    new (&this->CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_HEARTH_AND_RESURRECT&& obj) {
    opcode = Opcode::CMSG_HEARTH_AND_RESURRECT;
    new (&this->CMSG_HEARTH_AND_RESURRECT) wrath::CMSG_HEARTH_AND_RESURRECT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_PLAYER_VEHICLE_ENTER&& obj) {
    opcode = Opcode::CMSG_PLAYER_VEHICLE_ENTER;
    new (&this->CMSG_PLAYER_VEHICLE_ENTER) wrath::CMSG_PLAYER_VEHICLE_ENTER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CONTROLLER_EJECT_PASSENGER&& obj) {
    opcode = Opcode::CMSG_CONTROLLER_EJECT_PASSENGER;
    new (&this->CMSG_CONTROLLER_EJECT_PASSENGER) wrath::CMSG_CONTROLLER_EJECT_PASSENGER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ITEM_REFUND_INFO&& obj) {
    opcode = Opcode::CMSG_ITEM_REFUND_INFO;
    new (&this->CMSG_ITEM_REFUND_INFO) wrath::CMSG_ITEM_REFUND_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_ITEM_REFUND&& obj) {
    opcode = Opcode::CMSG_ITEM_REFUND;
    new (&this->CMSG_ITEM_REFUND) wrath::CMSG_ITEM_REFUND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CORPSE_MAP_POSITION_QUERY&& obj) {
    opcode = Opcode::CMSG_CORPSE_MAP_POSITION_QUERY;
    new (&this->CMSG_CORPSE_MAP_POSITION_QUERY) wrath::CMSG_CORPSE_MAP_POSITION_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CALENDAR_EVENT_SIGNUP&& obj) {
    opcode = Opcode::CMSG_CALENDAR_EVENT_SIGNUP;
    new (&this->CMSG_CALENDAR_EVENT_SIGNUP) wrath::CMSG_CALENDAR_EVENT_SIGNUP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_EQUIPMENT_SET_SAVE&& obj) {
    opcode = Opcode::CMSG_EQUIPMENT_SET_SAVE;
    new (&this->CMSG_EQUIPMENT_SET_SAVE) wrath::CMSG_EQUIPMENT_SET_SAVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_UPDATE_PROJECTILE_POSITION&& obj) {
    opcode = Opcode::CMSG_UPDATE_PROJECTILE_POSITION;
    new (&this->CMSG_UPDATE_PROJECTILE_POSITION) wrath::CMSG_UPDATE_PROJECTILE_POSITION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LEARN_PREVIEW_TALENTS&& obj) {
    opcode = Opcode::CMSG_LEARN_PREVIEW_TALENTS;
    new (&this->CMSG_LEARN_PREVIEW_TALENTS) wrath::CMSG_LEARN_PREVIEW_TALENTS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_LEARN_PREVIEW_TALENTS_PET&& obj) {
    opcode = Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET;
    new (&this->CMSG_LEARN_PREVIEW_TALENTS_PET) wrath::CMSG_LEARN_PREVIEW_TALENTS_PET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK&& obj) {
    opcode = Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK;
    new (&this->CMSG_MOVE_GRAVITY_DISABLE_ACK) wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK&& obj) {
    opcode = Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK;
    new (&this->CMSG_MOVE_GRAVITY_ENABLE_ACK) wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_EQUIPMENT_SET_USE&& obj) {
    opcode = Opcode::CMSG_EQUIPMENT_SET_USE;
    new (&this->CMSG_EQUIPMENT_SET_USE) wrath::CMSG_EQUIPMENT_SET_USE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHAR_FACTION_CHANGE&& obj) {
    opcode = Opcode::CMSG_CHAR_FACTION_CHANGE;
    new (&this->CMSG_CHAR_FACTION_CHANGE) wrath::CMSG_CHAR_FACTION_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE&& obj) {
    opcode = Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE;
    new (&this->CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE&& obj) {
    opcode = Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE;
    new (&this->CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST&& obj) {
    opcode = Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST;
    new (&this->CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::MSG_SET_RAID_DIFFICULTY_Client&& obj) {
    opcode = Opcode::MSG_SET_RAID_DIFFICULTY;
    new (&this->MSG_SET_RAID_DIFFICULTY) wrath::MSG_SET_RAID_DIFFICULTY_Client (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GMRESPONSE_RESOLVE&& obj) {
    opcode = Opcode::CMSG_GMRESPONSE_RESOLVE;
    new (&this->CMSG_GMRESPONSE_RESOLVE) wrath::CMSG_GMRESPONSE_RESOLVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE&& obj) {
    opcode = Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE;
    new (&this->CMSG_WORLD_STATE_UI_TIMER_UPDATE) wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_CHAR_RACE_CHANGE&& obj) {
    opcode = Opcode::CMSG_CHAR_RACE_CHANGE;
    new (&this->CMSG_CHAR_RACE_CHANGE) wrath::CMSG_CHAR_RACE_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES&& obj) {
    opcode = Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES;
    new (&this->CMSG_READY_FOR_ACCOUNT_DATA_TIMES) wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_QUERY_QUESTS_COMPLETED&& obj) {
    opcode = Opcode::CMSG_QUERY_QUESTS_COMPLETED;
    new (&this->CMSG_QUERY_QUESTS_COMPLETED) wrath::CMSG_QUERY_QUESTS_COMPLETED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_GM_REPORT_LAG&& obj) {
    opcode = Opcode::CMSG_GM_REPORT_LAG;
    new (&this->CMSG_GM_REPORT_LAG) wrath::CMSG_GM_REPORT_LAG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode::ClientOpcode(wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK&& obj) {
    opcode = Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK;
    new (&this->CMSG_MOVE_SET_COLLISION_HGT_ACK) wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK (std::move(obj));
}

WOW_WORLD_MESSAGES_CPP_EXPORT const char* ClientOpcode::to_string() const {
    if (opcode == Opcode::NONE) {{ return "NONE"; }}
    if (opcode == Opcode::CMSG_BOOTME) { return "CMSG_BOOTME"; }
    if (opcode == Opcode::CMSG_DBLOOKUP) { return "CMSG_DBLOOKUP"; }
    if (opcode == Opcode::CMSG_WORLD_TELEPORT) { return "CMSG_WORLD_TELEPORT"; }
    if (opcode == Opcode::CMSG_TELEPORT_TO_UNIT) { return "CMSG_TELEPORT_TO_UNIT"; }
    if (opcode == Opcode::CMSG_CHAR_CREATE) { return "CMSG_CHAR_CREATE"; }
    if (opcode == Opcode::CMSG_CHAR_ENUM) { return "CMSG_CHAR_ENUM"; }
    if (opcode == Opcode::CMSG_CHAR_DELETE) { return "CMSG_CHAR_DELETE"; }
    if (opcode == Opcode::CMSG_PLAYER_LOGIN) { return "CMSG_PLAYER_LOGIN"; }
    if (opcode == Opcode::CMSG_PLAYER_LOGOUT) { return "CMSG_PLAYER_LOGOUT"; }
    if (opcode == Opcode::CMSG_LOGOUT_REQUEST) { return "CMSG_LOGOUT_REQUEST"; }
    if (opcode == Opcode::CMSG_LOGOUT_CANCEL) { return "CMSG_LOGOUT_CANCEL"; }
    if (opcode == Opcode::CMSG_NAME_QUERY) { return "CMSG_NAME_QUERY"; }
    if (opcode == Opcode::CMSG_PET_NAME_QUERY) { return "CMSG_PET_NAME_QUERY"; }
    if (opcode == Opcode::CMSG_GUILD_QUERY) { return "CMSG_GUILD_QUERY"; }
    if (opcode == Opcode::CMSG_ITEM_QUERY_SINGLE) { return "CMSG_ITEM_QUERY_SINGLE"; }
    if (opcode == Opcode::CMSG_PAGE_TEXT_QUERY) { return "CMSG_PAGE_TEXT_QUERY"; }
    if (opcode == Opcode::CMSG_QUEST_QUERY) { return "CMSG_QUEST_QUERY"; }
    if (opcode == Opcode::CMSG_GAMEOBJECT_QUERY) { return "CMSG_GAMEOBJECT_QUERY"; }
    if (opcode == Opcode::CMSG_CREATURE_QUERY) { return "CMSG_CREATURE_QUERY"; }
    if (opcode == Opcode::CMSG_WHO) { return "CMSG_WHO"; }
    if (opcode == Opcode::CMSG_WHOIS) { return "CMSG_WHOIS"; }
    if (opcode == Opcode::CMSG_CONTACT_LIST) { return "CMSG_CONTACT_LIST"; }
    if (opcode == Opcode::CMSG_ADD_FRIEND) { return "CMSG_ADD_FRIEND"; }
    if (opcode == Opcode::CMSG_DEL_FRIEND) { return "CMSG_DEL_FRIEND"; }
    if (opcode == Opcode::CMSG_SET_CONTACT_NOTES) { return "CMSG_SET_CONTACT_NOTES"; }
    if (opcode == Opcode::CMSG_ADD_IGNORE) { return "CMSG_ADD_IGNORE"; }
    if (opcode == Opcode::CMSG_DEL_IGNORE) { return "CMSG_DEL_IGNORE"; }
    if (opcode == Opcode::CMSG_GROUP_INVITE) { return "CMSG_GROUP_INVITE"; }
    if (opcode == Opcode::CMSG_GROUP_CANCEL) { return "CMSG_GROUP_CANCEL"; }
    if (opcode == Opcode::CMSG_GROUP_ACCEPT) { return "CMSG_GROUP_ACCEPT"; }
    if (opcode == Opcode::CMSG_GROUP_DECLINE) { return "CMSG_GROUP_DECLINE"; }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE) { return "CMSG_GROUP_UNINVITE"; }
    if (opcode == Opcode::CMSG_GROUP_UNINVITE_GUID) { return "CMSG_GROUP_UNINVITE_GUID"; }
    if (opcode == Opcode::CMSG_GROUP_SET_LEADER) { return "CMSG_GROUP_SET_LEADER"; }
    if (opcode == Opcode::CMSG_LOOT_METHOD) { return "CMSG_LOOT_METHOD"; }
    if (opcode == Opcode::CMSG_GROUP_DISBAND) { return "CMSG_GROUP_DISBAND"; }
    if (opcode == Opcode::CMSG_GUILD_CREATE) { return "CMSG_GUILD_CREATE"; }
    if (opcode == Opcode::CMSG_GUILD_INVITE) { return "CMSG_GUILD_INVITE"; }
    if (opcode == Opcode::CMSG_GUILD_ACCEPT) { return "CMSG_GUILD_ACCEPT"; }
    if (opcode == Opcode::CMSG_GUILD_DECLINE) { return "CMSG_GUILD_DECLINE"; }
    if (opcode == Opcode::CMSG_GUILD_INFO) { return "CMSG_GUILD_INFO"; }
    if (opcode == Opcode::CMSG_GUILD_ROSTER) { return "CMSG_GUILD_ROSTER"; }
    if (opcode == Opcode::CMSG_GUILD_PROMOTE) { return "CMSG_GUILD_PROMOTE"; }
    if (opcode == Opcode::CMSG_GUILD_DEMOTE) { return "CMSG_GUILD_DEMOTE"; }
    if (opcode == Opcode::CMSG_GUILD_LEAVE) { return "CMSG_GUILD_LEAVE"; }
    if (opcode == Opcode::CMSG_GUILD_REMOVE) { return "CMSG_GUILD_REMOVE"; }
    if (opcode == Opcode::CMSG_GUILD_DISBAND) { return "CMSG_GUILD_DISBAND"; }
    if (opcode == Opcode::CMSG_GUILD_LEADER) { return "CMSG_GUILD_LEADER"; }
    if (opcode == Opcode::CMSG_GUILD_MOTD) { return "CMSG_GUILD_MOTD"; }
    if (opcode == Opcode::CMSG_MESSAGECHAT) { return "CMSG_MESSAGECHAT"; }
    if (opcode == Opcode::CMSG_JOIN_CHANNEL) { return "CMSG_JOIN_CHANNEL"; }
    if (opcode == Opcode::CMSG_LEAVE_CHANNEL) { return "CMSG_LEAVE_CHANNEL"; }
    if (opcode == Opcode::CMSG_CHANNEL_LIST) { return "CMSG_CHANNEL_LIST"; }
    if (opcode == Opcode::CMSG_CHANNEL_PASSWORD) { return "CMSG_CHANNEL_PASSWORD"; }
    if (opcode == Opcode::CMSG_CHANNEL_SET_OWNER) { return "CMSG_CHANNEL_SET_OWNER"; }
    if (opcode == Opcode::CMSG_CHANNEL_OWNER) { return "CMSG_CHANNEL_OWNER"; }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATOR) { return "CMSG_CHANNEL_MODERATOR"; }
    if (opcode == Opcode::CMSG_CHANNEL_UNMODERATOR) { return "CMSG_CHANNEL_UNMODERATOR"; }
    if (opcode == Opcode::CMSG_CHANNEL_MUTE) { return "CMSG_CHANNEL_MUTE"; }
    if (opcode == Opcode::CMSG_CHANNEL_UNMUTE) { return "CMSG_CHANNEL_UNMUTE"; }
    if (opcode == Opcode::CMSG_CHANNEL_INVITE) { return "CMSG_CHANNEL_INVITE"; }
    if (opcode == Opcode::CMSG_CHANNEL_KICK) { return "CMSG_CHANNEL_KICK"; }
    if (opcode == Opcode::CMSG_CHANNEL_BAN) { return "CMSG_CHANNEL_BAN"; }
    if (opcode == Opcode::CMSG_CHANNEL_UNBAN) { return "CMSG_CHANNEL_UNBAN"; }
    if (opcode == Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) { return "CMSG_CHANNEL_ANNOUNCEMENTS"; }
    if (opcode == Opcode::CMSG_CHANNEL_MODERATE) { return "CMSG_CHANNEL_MODERATE"; }
    if (opcode == Opcode::CMSG_USE_ITEM) { return "CMSG_USE_ITEM"; }
    if (opcode == Opcode::CMSG_OPEN_ITEM) { return "CMSG_OPEN_ITEM"; }
    if (opcode == Opcode::CMSG_READ_ITEM) { return "CMSG_READ_ITEM"; }
    if (opcode == Opcode::CMSG_GAMEOBJ_USE) { return "CMSG_GAMEOBJ_USE"; }
    if (opcode == Opcode::CMSG_AREATRIGGER) { return "CMSG_AREATRIGGER"; }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) { return "MSG_MOVE_START_FORWARD"; }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) { return "MSG_MOVE_START_BACKWARD"; }
    if (opcode == Opcode::MSG_MOVE_STOP) { return "MSG_MOVE_STOP"; }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) { return "MSG_MOVE_START_STRAFE_LEFT"; }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) { return "MSG_MOVE_START_STRAFE_RIGHT"; }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) { return "MSG_MOVE_STOP_STRAFE"; }
    if (opcode == Opcode::MSG_MOVE_JUMP) { return "MSG_MOVE_JUMP"; }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) { return "MSG_MOVE_START_TURN_LEFT"; }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) { return "MSG_MOVE_START_TURN_RIGHT"; }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) { return "MSG_MOVE_STOP_TURN"; }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) { return "MSG_MOVE_START_PITCH_UP"; }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) { return "MSG_MOVE_START_PITCH_DOWN"; }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) { return "MSG_MOVE_STOP_PITCH"; }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) { return "MSG_MOVE_SET_RUN_MODE"; }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) { return "MSG_MOVE_SET_WALK_MODE"; }
    if (opcode == Opcode::MSG_MOVE_TELEPORT) { return "MSG_MOVE_TELEPORT_Server"; }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) { return "MSG_MOVE_TELEPORT_ACK_Client"; }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) { return "MSG_MOVE_FALL_LAND"; }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) { return "MSG_MOVE_START_SWIM"; }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) { return "MSG_MOVE_STOP_SWIM"; }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) { return "MSG_MOVE_SET_FACING"; }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) { return "MSG_MOVE_SET_PITCH"; }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) { return "MSG_MOVE_WORLDPORT_ACK"; }
    if (opcode == Opcode::CMSG_MOVE_SET_RAW_POSITION) { return "CMSG_MOVE_SET_RAW_POSITION"; }
    if (opcode == Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) { return "CMSG_FORCE_RUN_SPEED_CHANGE_ACK"; }
    if (opcode == Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) { return "CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK"; }
    if (opcode == Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) { return "CMSG_FORCE_SWIM_SPEED_CHANGE_ACK"; }
    if (opcode == Opcode::CMSG_FORCE_MOVE_ROOT_ACK) { return "CMSG_FORCE_MOVE_ROOT_ACK"; }
    if (opcode == Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) { return "CMSG_FORCE_MOVE_UNROOT_ACK"; }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) { return "MSG_MOVE_HEARTBEAT"; }
    if (opcode == Opcode::CMSG_MOVE_KNOCK_BACK_ACK) { return "CMSG_MOVE_KNOCK_BACK_ACK"; }
    if (opcode == Opcode::CMSG_MOVE_HOVER_ACK) { return "CMSG_MOVE_HOVER_ACK"; }
    if (opcode == Opcode::MSG_MOVE_HOVER) { return "MSG_MOVE_HOVER"; }
    if (opcode == Opcode::CMSG_NEXT_CINEMATIC_CAMERA) { return "CMSG_NEXT_CINEMATIC_CAMERA"; }
    if (opcode == Opcode::CMSG_COMPLETE_CINEMATIC) { return "CMSG_COMPLETE_CINEMATIC"; }
    if (opcode == Opcode::CMSG_TUTORIAL_FLAG) { return "CMSG_TUTORIAL_FLAG"; }
    if (opcode == Opcode::CMSG_TUTORIAL_CLEAR) { return "CMSG_TUTORIAL_CLEAR"; }
    if (opcode == Opcode::CMSG_TUTORIAL_RESET) { return "CMSG_TUTORIAL_RESET"; }
    if (opcode == Opcode::CMSG_STANDSTATECHANGE) { return "CMSG_STANDSTATECHANGE"; }
    if (opcode == Opcode::CMSG_EMOTE) { return "CMSG_EMOTE"; }
    if (opcode == Opcode::CMSG_TEXT_EMOTE) { return "CMSG_TEXT_EMOTE"; }
    if (opcode == Opcode::CMSG_AUTOSTORE_LOOT_ITEM) { return "CMSG_AUTOSTORE_LOOT_ITEM"; }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM) { return "CMSG_AUTOEQUIP_ITEM"; }
    if (opcode == Opcode::CMSG_AUTOSTORE_BAG_ITEM) { return "CMSG_AUTOSTORE_BAG_ITEM"; }
    if (opcode == Opcode::CMSG_SWAP_ITEM) { return "CMSG_SWAP_ITEM"; }
    if (opcode == Opcode::CMSG_SWAP_INV_ITEM) { return "CMSG_SWAP_INV_ITEM"; }
    if (opcode == Opcode::CMSG_SPLIT_ITEM) { return "CMSG_SPLIT_ITEM"; }
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) { return "CMSG_AUTOEQUIP_ITEM_SLOT"; }
    if (opcode == Opcode::CMSG_DESTROYITEM) { return "CMSG_DESTROYITEM"; }
    if (opcode == Opcode::CMSG_INSPECT) { return "CMSG_INSPECT"; }
    if (opcode == Opcode::CMSG_INITIATE_TRADE) { return "CMSG_INITIATE_TRADE"; }
    if (opcode == Opcode::CMSG_BEGIN_TRADE) { return "CMSG_BEGIN_TRADE"; }
    if (opcode == Opcode::CMSG_BUSY_TRADE) { return "CMSG_BUSY_TRADE"; }
    if (opcode == Opcode::CMSG_IGNORE_TRADE) { return "CMSG_IGNORE_TRADE"; }
    if (opcode == Opcode::CMSG_ACCEPT_TRADE) { return "CMSG_ACCEPT_TRADE"; }
    if (opcode == Opcode::CMSG_UNACCEPT_TRADE) { return "CMSG_UNACCEPT_TRADE"; }
    if (opcode == Opcode::CMSG_CANCEL_TRADE) { return "CMSG_CANCEL_TRADE"; }
    if (opcode == Opcode::CMSG_SET_TRADE_ITEM) { return "CMSG_SET_TRADE_ITEM"; }
    if (opcode == Opcode::CMSG_CLEAR_TRADE_ITEM) { return "CMSG_CLEAR_TRADE_ITEM"; }
    if (opcode == Opcode::CMSG_SET_TRADE_GOLD) { return "CMSG_SET_TRADE_GOLD"; }
    if (opcode == Opcode::CMSG_SET_FACTION_ATWAR) { return "CMSG_SET_FACTION_ATWAR"; }
    if (opcode == Opcode::CMSG_SET_ACTION_BUTTON) { return "CMSG_SET_ACTION_BUTTON"; }
    if (opcode == Opcode::CMSG_CAST_SPELL) { return "CMSG_CAST_SPELL"; }
    if (opcode == Opcode::CMSG_CANCEL_CAST) { return "CMSG_CANCEL_CAST"; }
    if (opcode == Opcode::CMSG_CANCEL_AURA) { return "CMSG_CANCEL_AURA"; }
    if (opcode == Opcode::CMSG_CANCEL_CHANNELLING) { return "CMSG_CANCEL_CHANNELLING"; }
    if (opcode == Opcode::CMSG_SET_SELECTION) { return "CMSG_SET_SELECTION"; }
    if (opcode == Opcode::CMSG_DELETEEQUIPMENT_SET) { return "CMSG_DELETEEQUIPMENT_SET"; }
    if (opcode == Opcode::CMSG_INSTANCE_LOCK_RESPONSE) { return "CMSG_INSTANCE_LOCK_RESPONSE"; }
    if (opcode == Opcode::CMSG_ATTACKSWING) { return "CMSG_ATTACKSWING"; }
    if (opcode == Opcode::CMSG_ATTACKSTOP) { return "CMSG_ATTACKSTOP"; }
    if (opcode == Opcode::CMSG_REPOP_REQUEST) { return "CMSG_REPOP_REQUEST"; }
    if (opcode == Opcode::CMSG_RESURRECT_RESPONSE) { return "CMSG_RESURRECT_RESPONSE"; }
    if (opcode == Opcode::CMSG_LOOT) { return "CMSG_LOOT"; }
    if (opcode == Opcode::CMSG_LOOT_MONEY) { return "CMSG_LOOT_MONEY"; }
    if (opcode == Opcode::CMSG_LOOT_RELEASE) { return "CMSG_LOOT_RELEASE"; }
    if (opcode == Opcode::CMSG_DUEL_ACCEPTED) { return "CMSG_DUEL_ACCEPTED"; }
    if (opcode == Opcode::CMSG_DUEL_CANCELLED) { return "CMSG_DUEL_CANCELLED"; }
    if (opcode == Opcode::CMSG_MOUNTSPECIAL_ANIM) { return "CMSG_MOUNTSPECIAL_ANIM"; }
    if (opcode == Opcode::CMSG_PET_SET_ACTION) { return "CMSG_PET_SET_ACTION"; }
    if (opcode == Opcode::CMSG_PET_ACTION) { return "CMSG_PET_ACTION"; }
    if (opcode == Opcode::CMSG_PET_ABANDON) { return "CMSG_PET_ABANDON"; }
    if (opcode == Opcode::CMSG_PET_RENAME) { return "CMSG_PET_RENAME"; }
    if (opcode == Opcode::CMSG_GOSSIP_HELLO) { return "CMSG_GOSSIP_HELLO"; }
    if (opcode == Opcode::CMSG_GOSSIP_SELECT_OPTION) { return "CMSG_GOSSIP_SELECT_OPTION"; }
    if (opcode == Opcode::CMSG_NPC_TEXT_QUERY) { return "CMSG_NPC_TEXT_QUERY"; }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_QUERY) { return "CMSG_QUESTGIVER_STATUS_QUERY"; }
    if (opcode == Opcode::CMSG_QUESTGIVER_HELLO) { return "CMSG_QUESTGIVER_HELLO"; }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUERY_QUEST) { return "CMSG_QUESTGIVER_QUERY_QUEST"; }
    if (opcode == Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) { return "CMSG_QUESTGIVER_QUEST_AUTOLAUNCH"; }
    if (opcode == Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) { return "CMSG_QUESTGIVER_ACCEPT_QUEST"; }
    if (opcode == Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) { return "CMSG_QUESTGIVER_COMPLETE_QUEST"; }
    if (opcode == Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) { return "CMSG_QUESTGIVER_REQUEST_REWARD"; }
    if (opcode == Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) { return "CMSG_QUESTGIVER_CHOOSE_REWARD"; }
    if (opcode == Opcode::CMSG_QUESTGIVER_CANCEL) { return "CMSG_QUESTGIVER_CANCEL"; }
    if (opcode == Opcode::CMSG_QUESTLOG_SWAP_QUEST) { return "CMSG_QUESTLOG_SWAP_QUEST"; }
    if (opcode == Opcode::CMSG_QUESTLOG_REMOVE_QUEST) { return "CMSG_QUESTLOG_REMOVE_QUEST"; }
    if (opcode == Opcode::CMSG_QUEST_CONFIRM_ACCEPT) { return "CMSG_QUEST_CONFIRM_ACCEPT"; }
    if (opcode == Opcode::CMSG_PUSHQUESTTOPARTY) { return "CMSG_PUSHQUESTTOPARTY"; }
    if (opcode == Opcode::CMSG_LIST_INVENTORY) { return "CMSG_LIST_INVENTORY"; }
    if (opcode == Opcode::CMSG_SELL_ITEM) { return "CMSG_SELL_ITEM"; }
    if (opcode == Opcode::CMSG_BUY_ITEM) { return "CMSG_BUY_ITEM"; }
    if (opcode == Opcode::CMSG_BUY_ITEM_IN_SLOT) { return "CMSG_BUY_ITEM_IN_SLOT"; }
    if (opcode == Opcode::CMSG_TAXINODE_STATUS_QUERY) { return "CMSG_TAXINODE_STATUS_QUERY"; }
    if (opcode == Opcode::CMSG_TAXIQUERYAVAILABLENODES) { return "CMSG_TAXIQUERYAVAILABLENODES"; }
    if (opcode == Opcode::CMSG_ACTIVATETAXI) { return "CMSG_ACTIVATETAXI"; }
    if (opcode == Opcode::CMSG_TRAINER_LIST) { return "CMSG_TRAINER_LIST"; }
    if (opcode == Opcode::CMSG_TRAINER_BUY_SPELL) { return "CMSG_TRAINER_BUY_SPELL"; }
    if (opcode == Opcode::CMSG_BINDER_ACTIVATE) { return "CMSG_BINDER_ACTIVATE"; }
    if (opcode == Opcode::CMSG_BANKER_ACTIVATE) { return "CMSG_BANKER_ACTIVATE"; }
    if (opcode == Opcode::CMSG_BUY_BANK_SLOT) { return "CMSG_BUY_BANK_SLOT"; }
    if (opcode == Opcode::CMSG_PETITION_SHOWLIST) { return "CMSG_PETITION_SHOWLIST"; }
    if (opcode == Opcode::CMSG_PETITION_BUY) { return "CMSG_PETITION_BUY"; }
    if (opcode == Opcode::CMSG_PETITION_SHOW_SIGNATURES) { return "CMSG_PETITION_SHOW_SIGNATURES"; }
    if (opcode == Opcode::CMSG_PETITION_SIGN) { return "CMSG_PETITION_SIGN"; }
    if (opcode == Opcode::MSG_PETITION_DECLINE) { return "MSG_PETITION_DECLINE"; }
    if (opcode == Opcode::CMSG_OFFER_PETITION) { return "CMSG_OFFER_PETITION"; }
    if (opcode == Opcode::CMSG_TURN_IN_PETITION) { return "CMSG_TURN_IN_PETITION"; }
    if (opcode == Opcode::CMSG_PETITION_QUERY) { return "CMSG_PETITION_QUERY"; }
    if (opcode == Opcode::CMSG_BUG) { return "CMSG_BUG"; }
    if (opcode == Opcode::CMSG_PLAYED_TIME) { return "CMSG_PLAYED_TIME"; }
    if (opcode == Opcode::CMSG_QUERY_TIME) { return "CMSG_QUERY_TIME"; }
    if (opcode == Opcode::CMSG_RECLAIM_CORPSE) { return "CMSG_RECLAIM_CORPSE"; }
    if (opcode == Opcode::CMSG_WRAP_ITEM) { return "CMSG_WRAP_ITEM"; }
    if (opcode == Opcode::MSG_MINIMAP_PING) { return "MSG_MINIMAP_PING_Client"; }
    if (opcode == Opcode::CMSG_PING) { return "CMSG_PING"; }
    if (opcode == Opcode::CMSG_SETSHEATHED) { return "CMSG_SETSHEATHED"; }
    if (opcode == Opcode::CMSG_QUEST_POI_QUERY) { return "CMSG_QUEST_POI_QUERY"; }
    if (opcode == Opcode::CMSG_AUTH_SESSION) { return "CMSG_AUTH_SESSION"; }
    if (opcode == Opcode::CMSG_PET_CAST_SPELL) { return "CMSG_PET_CAST_SPELL"; }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) { return "MSG_SAVE_GUILD_EMBLEM_Client"; }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) { return "MSG_TABARDVENDOR_ACTIVATE"; }
    if (opcode == Opcode::CMSG_ZONEUPDATE) { return "CMSG_ZONEUPDATE"; }
    if (opcode == Opcode::MSG_RANDOM_ROLL) { return "MSG_RANDOM_ROLL_Client"; }
    if (opcode == Opcode::CMSG_UNLEARN_SKILL) { return "CMSG_UNLEARN_SKILL"; }
    if (opcode == Opcode::CMSG_GMTICKET_CREATE) { return "CMSG_GMTICKET_CREATE"; }
    if (opcode == Opcode::CMSG_GMTICKET_UPDATETEXT) { return "CMSG_GMTICKET_UPDATETEXT"; }
    if (opcode == Opcode::CMSG_REQUEST_ACCOUNT_DATA) { return "CMSG_REQUEST_ACCOUNT_DATA"; }
    if (opcode == Opcode::CMSG_UPDATE_ACCOUNT_DATA) { return "CMSG_UPDATE_ACCOUNT_DATA"; }
    if (opcode == Opcode::CMSG_GMTICKET_GETTICKET) { return "CMSG_GMTICKET_GETTICKET"; }
    if (opcode == Opcode::CMSG_UNLEARN_TALENTS) { return "CMSG_UNLEARN_TALENTS"; }
    if (opcode == Opcode::MSG_CORPSE_QUERY) { return "MSG_CORPSE_QUERY_Client"; }
    if (opcode == Opcode::CMSG_GMTICKET_DELETETICKET) { return "CMSG_GMTICKET_DELETETICKET"; }
    if (opcode == Opcode::CMSG_GMTICKET_SYSTEMSTATUS) { return "CMSG_GMTICKET_SYSTEMSTATUS"; }
    if (opcode == Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) { return "CMSG_SPIRIT_HEALER_ACTIVATE"; }
    if (opcode == Opcode::CMSG_CHAT_IGNORED) { return "CMSG_CHAT_IGNORED"; }
    if (opcode == Opcode::CMSG_GUILD_RANK) { return "CMSG_GUILD_RANK"; }
    if (opcode == Opcode::CMSG_GUILD_ADD_RANK) { return "CMSG_GUILD_ADD_RANK"; }
    if (opcode == Opcode::CMSG_GUILD_DEL_RANK) { return "CMSG_GUILD_DEL_RANK"; }
    if (opcode == Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) { return "CMSG_GUILD_SET_PUBLIC_NOTE"; }
    if (opcode == Opcode::CMSG_GUILD_SET_OFFICER_NOTE) { return "CMSG_GUILD_SET_OFFICER_NOTE"; }
    if (opcode == Opcode::CMSG_SEND_MAIL) { return "CMSG_SEND_MAIL"; }
    if (opcode == Opcode::CMSG_GET_MAIL_LIST) { return "CMSG_GET_MAIL_LIST"; }
    if (opcode == Opcode::CMSG_BATTLEFIELD_LIST) { return "CMSG_BATTLEFIELD_LIST"; }
    if (opcode == Opcode::CMSG_ITEM_TEXT_QUERY) { return "CMSG_ITEM_TEXT_QUERY"; }
    if (opcode == Opcode::CMSG_MAIL_TAKE_MONEY) { return "CMSG_MAIL_TAKE_MONEY"; }
    if (opcode == Opcode::CMSG_MAIL_TAKE_ITEM) { return "CMSG_MAIL_TAKE_ITEM"; }
    if (opcode == Opcode::CMSG_MAIL_MARK_AS_READ) { return "CMSG_MAIL_MARK_AS_READ"; }
    if (opcode == Opcode::CMSG_MAIL_RETURN_TO_SENDER) { return "CMSG_MAIL_RETURN_TO_SENDER"; }
    if (opcode == Opcode::CMSG_MAIL_DELETE) { return "CMSG_MAIL_DELETE"; }
    if (opcode == Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) { return "CMSG_MAIL_CREATE_TEXT_ITEM"; }
    if (opcode == Opcode::CMSG_LEARN_TALENT) { return "CMSG_LEARN_TALENT"; }
    if (opcode == Opcode::CMSG_TOGGLE_PVP) { return "CMSG_TOGGLE_PVP"; }
    if (opcode == Opcode::MSG_AUCTION_HELLO) { return "MSG_AUCTION_HELLO_Client"; }
    if (opcode == Opcode::CMSG_AUCTION_SELL_ITEM) { return "CMSG_AUCTION_SELL_ITEM"; }
    if (opcode == Opcode::CMSG_AUCTION_REMOVE_ITEM) { return "CMSG_AUCTION_REMOVE_ITEM"; }
    if (opcode == Opcode::CMSG_AUCTION_LIST_ITEMS) { return "CMSG_AUCTION_LIST_ITEMS"; }
    if (opcode == Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) { return "CMSG_AUCTION_LIST_OWNER_ITEMS"; }
    if (opcode == Opcode::CMSG_AUCTION_PLACE_BID) { return "CMSG_AUCTION_PLACE_BID"; }
    if (opcode == Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) { return "CMSG_AUCTION_LIST_BIDDER_ITEMS"; }
    if (opcode == Opcode::CMSG_SET_AMMO) { return "CMSG_SET_AMMO"; }
    if (opcode == Opcode::CMSG_SET_ACTIVE_MOVER) { return "CMSG_SET_ACTIVE_MOVER"; }
    if (opcode == Opcode::CMSG_PET_CANCEL_AURA) { return "CMSG_PET_CANCEL_AURA"; }
    if (opcode == Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) { return "CMSG_CANCEL_AUTO_REPEAT_SPELL"; }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) { return "MSG_LIST_STABLED_PETS_Client"; }
    if (opcode == Opcode::CMSG_STABLE_PET) { return "CMSG_STABLE_PET"; }
    if (opcode == Opcode::CMSG_UNSTABLE_PET) { return "CMSG_UNSTABLE_PET"; }
    if (opcode == Opcode::CMSG_BUY_STABLE_SLOT) { return "CMSG_BUY_STABLE_SLOT"; }
    if (opcode == Opcode::CMSG_STABLE_SWAP_PET) { return "CMSG_STABLE_SWAP_PET"; }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) { return "MSG_QUEST_PUSH_RESULT"; }
    if (opcode == Opcode::CMSG_REQUEST_PET_INFO) { return "CMSG_REQUEST_PET_INFO"; }
    if (opcode == Opcode::CMSG_FAR_SIGHT) { return "CMSG_FAR_SIGHT"; }
    if (opcode == Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) { return "CMSG_GROUP_CHANGE_SUB_GROUP"; }
    if (opcode == Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) { return "CMSG_REQUEST_PARTY_MEMBER_STATS"; }
    if (opcode == Opcode::CMSG_GROUP_SWAP_SUB_GROUP) { return "CMSG_GROUP_SWAP_SUB_GROUP"; }
    if (opcode == Opcode::CMSG_AUTOSTORE_BANK_ITEM) { return "CMSG_AUTOSTORE_BANK_ITEM"; }
    if (opcode == Opcode::CMSG_AUTOBANK_ITEM) { return "CMSG_AUTOBANK_ITEM"; }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) { return "MSG_QUERY_NEXT_MAIL_TIME_Client"; }
    if (opcode == Opcode::CMSG_GROUP_RAID_CONVERT) { return "CMSG_GROUP_RAID_CONVERT"; }
    if (opcode == Opcode::CMSG_GROUP_ASSISTANT_LEADER) { return "CMSG_GROUP_ASSISTANT_LEADER"; }
    if (opcode == Opcode::CMSG_BUYBACK_ITEM) { return "CMSG_BUYBACK_ITEM"; }
    if (opcode == Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) { return "CMSG_SET_SAVED_INSTANCE_EXTEND"; }
    if (opcode == Opcode::CMSG_LFG_GET_STATUS) { return "CMSG_LFG_GET_STATUS"; }
    if (opcode == Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) { return "CMSG_GMTICKETSYSTEM_TOGGLE"; }
    if (opcode == Opcode::CMSG_CANCEL_GROWTH_AURA) { return "CMSG_CANCEL_GROWTH_AURA"; }
    if (opcode == Opcode::CMSG_LOOT_ROLL) { return "CMSG_LOOT_ROLL"; }
    if (opcode == Opcode::CMSG_LOOT_MASTER_GIVE) { return "CMSG_LOOT_MASTER_GIVE"; }
    if (opcode == Opcode::CMSG_REPAIR_ITEM) { return "CMSG_REPAIR_ITEM"; }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) { return "MSG_TALENT_WIPE_CONFIRM_Client"; }
    if (opcode == Opcode::CMSG_SUMMON_RESPONSE) { return "CMSG_SUMMON_RESPONSE"; }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) { return "MSG_MOVE_WATER_WALK"; }
    if (opcode == Opcode::CMSG_SELF_RES) { return "CMSG_SELF_RES"; }
    if (opcode == Opcode::CMSG_TOGGLE_HELM) { return "CMSG_TOGGLE_HELM"; }
    if (opcode == Opcode::CMSG_TOGGLE_CLOAK) { return "CMSG_TOGGLE_CLOAK"; }
    if (opcode == Opcode::CMSG_SET_ACTIONBAR_TOGGLES) { return "CMSG_SET_ACTIONBAR_TOGGLES"; }
    if (opcode == Opcode::MSG_PETITION_RENAME) { return "MSG_PETITION_RENAME"; }
    if (opcode == Opcode::CMSG_ITEM_NAME_QUERY) { return "CMSG_ITEM_NAME_QUERY"; }
    if (opcode == Opcode::CMSG_CHAR_RENAME) { return "CMSG_CHAR_RENAME"; }
    if (opcode == Opcode::CMSG_MOVE_SPLINE_DONE) { return "CMSG_MOVE_SPLINE_DONE"; }
    if (opcode == Opcode::CMSG_MOVE_FALL_RESET) { return "CMSG_MOVE_FALL_RESET"; }
    if (opcode == Opcode::CMSG_REQUEST_RAID_INFO) { return "CMSG_REQUEST_RAID_INFO"; }
    if (opcode == Opcode::CMSG_MOVE_TIME_SKIPPED) { return "CMSG_MOVE_TIME_SKIPPED"; }
    if (opcode == Opcode::CMSG_MOVE_FEATHER_FALL_ACK) { return "CMSG_MOVE_FEATHER_FALL_ACK"; }
    if (opcode == Opcode::CMSG_MOVE_WATER_WALK_ACK) { return "CMSG_MOVE_WATER_WALK_ACK"; }
    if (opcode == Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) { return "CMSG_MOVE_NOT_ACTIVE_MOVER"; }
    if (opcode == Opcode::CMSG_BATTLEFIELD_STATUS) { return "CMSG_BATTLEFIELD_STATUS"; }
    if (opcode == Opcode::CMSG_BATTLEFIELD_PORT) { return "CMSG_BATTLEFIELD_PORT"; }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) { return "MSG_INSPECT_HONOR_STATS_Client"; }
    if (opcode == Opcode::CMSG_BATTLEMASTER_HELLO) { return "CMSG_BATTLEMASTER_HELLO"; }
    if (opcode == Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) { return "CMSG_FORCE_WALK_SPEED_CHANGE_ACK"; }
    if (opcode == Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) { return "CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK"; }
    if (opcode == Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) { return "CMSG_FORCE_TURN_RATE_CHANGE_ACK"; }
    if (opcode == Opcode::MSG_PVP_LOG_DATA) { return "MSG_PVP_LOG_DATA_Client"; }
    if (opcode == Opcode::CMSG_LEAVE_BATTLEFIELD) { return "CMSG_LEAVE_BATTLEFIELD"; }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) { return "CMSG_AREA_SPIRIT_HEALER_QUERY"; }
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) { return "CMSG_AREA_SPIRIT_HEALER_QUEUE"; }
    if (opcode == Opcode::CMSG_WARDEN_DATA) { return "CMSG_WARDEN_DATA"; }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) { return "MSG_BATTLEGROUND_PLAYER_POSITIONS_Client"; }
    if (opcode == Opcode::CMSG_PET_STOP_ATTACK) { return "CMSG_PET_STOP_ATTACK"; }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN) { return "CMSG_BATTLEMASTER_JOIN"; }
    if (opcode == Opcode::CMSG_PET_UNLEARN) { return "CMSG_PET_UNLEARN"; }
    if (opcode == Opcode::CMSG_PET_SPELL_AUTOCAST) { return "CMSG_PET_SPELL_AUTOCAST"; }
    if (opcode == Opcode::CMSG_GUILD_INFO_TEXT) { return "CMSG_GUILD_INFO_TEXT"; }
    if (opcode == Opcode::CMSG_ACTIVATETAXIEXPRESS) { return "CMSG_ACTIVATETAXIEXPRESS"; }
    if (opcode == Opcode::CMSG_SET_FACTION_INACTIVE) { return "CMSG_SET_FACTION_INACTIVE"; }
    if (opcode == Opcode::CMSG_SET_WATCHED_FACTION) { return "CMSG_SET_WATCHED_FACTION"; }
    if (opcode == Opcode::CMSG_RESET_INSTANCES) { return "CMSG_RESET_INSTANCES"; }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) { return "MSG_RAID_TARGET_UPDATE_Client"; }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) { return "MSG_RAID_READY_CHECK_Client"; }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) { return "MSG_SET_DUNGEON_DIFFICULTY_Client"; }
    if (opcode == Opcode::CMSG_GMSURVEY_SUBMIT) { return "CMSG_GMSURVEY_SUBMIT"; }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) { return "CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK"; }
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) { return "CMSG_MOVE_SET_CAN_FLY_ACK"; }
    if (opcode == Opcode::CMSG_MOVE_SET_FLY) { return "CMSG_MOVE_SET_FLY"; }
    if (opcode == Opcode::CMSG_SOCKET_GEMS) { return "CMSG_SOCKET_GEMS"; }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ROSTER) { return "CMSG_ARENA_TEAM_ROSTER"; }
    if (opcode == Opcode::CMSG_ARENA_TEAM_INVITE) { return "CMSG_ARENA_TEAM_INVITE"; }
    if (opcode == Opcode::CMSG_ARENA_TEAM_ACCEPT) { return "CMSG_ARENA_TEAM_ACCEPT"; }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DECLINE) { return "CMSG_ARENA_TEAM_DECLINE"; }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEAVE) { return "CMSG_ARENA_TEAM_LEAVE"; }
    if (opcode == Opcode::CMSG_ARENA_TEAM_REMOVE) { return "CMSG_ARENA_TEAM_REMOVE"; }
    if (opcode == Opcode::CMSG_ARENA_TEAM_DISBAND) { return "CMSG_ARENA_TEAM_DISBAND"; }
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEADER) { return "CMSG_ARENA_TEAM_LEADER"; }
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) { return "CMSG_BATTLEMASTER_JOIN_ARENA"; }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) { return "MSG_MOVE_START_ASCEND"; }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) { return "MSG_MOVE_STOP_ASCEND"; }
    if (opcode == Opcode::CMSG_LFG_JOIN) { return "CMSG_LFG_JOIN"; }
    if (opcode == Opcode::CMSG_LFG_LEAVE) { return "CMSG_LFG_LEAVE"; }
    if (opcode == Opcode::CMSG_SEARCH_LFG_JOIN) { return "CMSG_SEARCH_LFG_JOIN"; }
    if (opcode == Opcode::CMSG_SEARCH_LFG_LEAVE) { return "CMSG_SEARCH_LFG_LEAVE"; }
    if (opcode == Opcode::CMSG_LFG_PROPOSAL_RESULT) { return "CMSG_LFG_PROPOSAL_RESULT"; }
    if (opcode == Opcode::CMSG_SET_LFG_COMMENT) { return "CMSG_SET_LFG_COMMENT"; }
    if (opcode == Opcode::CMSG_LFG_SET_ROLES) { return "CMSG_LFG_SET_ROLES"; }
    if (opcode == Opcode::CMSG_LFG_SET_BOOT_VOTE) { return "CMSG_LFG_SET_BOOT_VOTE"; }
    if (opcode == Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) { return "CMSG_LFD_PLAYER_LOCK_INFO_REQUEST"; }
    if (opcode == Opcode::CMSG_LFG_TELEPORT) { return "CMSG_LFG_TELEPORT"; }
    if (opcode == Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) { return "CMSG_LFD_PARTY_LOCK_INFO_REQUEST"; }
    if (opcode == Opcode::CMSG_SET_TITLE) { return "CMSG_SET_TITLE"; }
    if (opcode == Opcode::CMSG_CANCEL_MOUNT_AURA) { return "CMSG_CANCEL_MOUNT_AURA"; }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) { return "MSG_INSPECT_ARENA_TEAMS_Client"; }
    if (opcode == Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) { return "CMSG_CANCEL_TEMP_ENCHANTMENT"; }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) { return "MSG_MOVE_SET_FLIGHT_BACK_SPEED"; }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) { return "CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK"; }
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) { return "CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK"; }
    if (opcode == Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) { return "CMSG_SET_TAXI_BENCHMARK_MODE"; }
    if (opcode == Opcode::CMSG_REALM_SPLIT) { return "CMSG_REALM_SPLIT"; }
    if (opcode == Opcode::CMSG_MOVE_CHNG_TRANSPORT) { return "CMSG_MOVE_CHNG_TRANSPORT"; }
    if (opcode == Opcode::MSG_PARTY_ASSIGNMENT) { return "MSG_PARTY_ASSIGNMENT_Client"; }
    if (opcode == Opcode::CMSG_TIME_SYNC_RESP) { return "CMSG_TIME_SYNC_RESP"; }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) { return "MSG_MOVE_START_DESCEND"; }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) { return "MSG_RAID_READY_CHECK_CONFIRM_Client"; }
    if (opcode == Opcode::CMSG_VOICE_SESSION_ENABLE) { return "CMSG_VOICE_SESSION_ENABLE"; }
    if (opcode == Opcode::CMSG_COMMENTATOR_ENABLE) { return "CMSG_COMMENTATOR_ENABLE"; }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_FINISHED) { return "MSG_RAID_READY_CHECK_FINISHED_Client"; }
    if (opcode == Opcode::CMSG_COMPLAIN) { return "CMSG_COMPLAIN"; }
    if (opcode == Opcode::CMSG_CHANNEL_DISPLAY_LIST) { return "CMSG_CHANNEL_DISPLAY_LIST"; }
    if (opcode == Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) { return "CMSG_SET_ACTIVE_VOICE_CHANNEL"; }
    if (opcode == Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) { return "CMSG_GET_CHANNEL_MEMBER_COUNT"; }
    if (opcode == Opcode::CMSG_CHANNEL_VOICE_ON) { return "CMSG_CHANNEL_VOICE_ON"; }
    if (opcode == Opcode::CMSG_REPORT_PVP_AFK) { return "CMSG_REPORT_PVP_AFK"; }
    if (opcode == Opcode::CMSG_GUILD_BANKER_ACTIVATE) { return "CMSG_GUILD_BANKER_ACTIVATE"; }
    if (opcode == Opcode::CMSG_GUILD_BANK_QUERY_TAB) { return "CMSG_GUILD_BANK_QUERY_TAB"; }
    if (opcode == Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) { return "CMSG_GUILD_BANK_SWAP_ITEMS"; }
    if (opcode == Opcode::CMSG_GUILD_BANK_BUY_TAB) { return "CMSG_GUILD_BANK_BUY_TAB"; }
    if (opcode == Opcode::CMSG_GUILD_BANK_UPDATE_TAB) { return "CMSG_GUILD_BANK_UPDATE_TAB"; }
    if (opcode == Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) { return "CMSG_GUILD_BANK_DEPOSIT_MONEY"; }
    if (opcode == Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) { return "CMSG_GUILD_BANK_WITHDRAW_MONEY"; }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) { return "MSG_GUILD_BANK_LOG_QUERY_Client"; }
    if (opcode == Opcode::CMSG_SET_CHANNEL_WATCH) { return "CMSG_SET_CHANNEL_WATCH"; }
    if (opcode == Opcode::CMSG_CLEAR_CHANNEL_WATCH) { return "CMSG_CLEAR_CHANNEL_WATCH"; }
    if (opcode == Opcode::CMSG_SPELLCLICK) { return "CMSG_SPELLCLICK"; }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) { return "MSG_GUILD_PERMISSIONS_Client"; }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) { return "MSG_GUILD_BANK_MONEY_WITHDRAWN_Client"; }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) { return "MSG_GUILD_EVENT_LOG_QUERY_Client"; }
    if (opcode == Opcode::CMSG_GET_MIRRORIMAGE_DATA) { return "CMSG_GET_MIRRORIMAGE_DATA"; }
    if (opcode == Opcode::CMSG_KEEP_ALIVE) { return "CMSG_KEEP_ALIVE"; }
    if (opcode == Opcode::CMSG_OPT_OUT_OF_LOOT) { return "CMSG_OPT_OUT_OF_LOOT"; }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) { return "MSG_QUERY_GUILD_BANK_TEXT_Client"; }
    if (opcode == Opcode::CMSG_SET_GUILD_BANK_TEXT) { return "CMSG_SET_GUILD_BANK_TEXT"; }
    if (opcode == Opcode::CMSG_GRANT_LEVEL) { return "CMSG_GRANT_LEVEL"; }
    if (opcode == Opcode::CMSG_TOTEM_DESTROYED) { return "CMSG_TOTEM_DESTROYED"; }
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) { return "CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY"; }
    if (opcode == Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) { return "CMSG_SET_PLAYER_DECLINED_NAMES"; }
    if (opcode == Opcode::CMSG_ACCEPT_LEVEL_GRANT) { return "CMSG_ACCEPT_LEVEL_GRANT"; }
    if (opcode == Opcode::CMSG_ALTER_APPEARANCE) { return "CMSG_ALTER_APPEARANCE"; }
    if (opcode == Opcode::CMSG_CALENDAR_GET_CALENDAR) { return "CMSG_CALENDAR_GET_CALENDAR"; }
    if (opcode == Opcode::CMSG_CALENDAR_GET_EVENT) { return "CMSG_CALENDAR_GET_EVENT"; }
    if (opcode == Opcode::CMSG_CALENDAR_GUILD_FILTER) { return "CMSG_CALENDAR_GUILD_FILTER"; }
    if (opcode == Opcode::CMSG_CALENDAR_ARENA_TEAM) { return "CMSG_CALENDAR_ARENA_TEAM"; }
    if (opcode == Opcode::CMSG_CALENDAR_ADD_EVENT) { return "CMSG_CALENDAR_ADD_EVENT"; }
    if (opcode == Opcode::CMSG_CALENDAR_UPDATE_EVENT) { return "CMSG_CALENDAR_UPDATE_EVENT"; }
    if (opcode == Opcode::CMSG_CALENDAR_REMOVE_EVENT) { return "CMSG_CALENDAR_REMOVE_EVENT"; }
    if (opcode == Opcode::CMSG_CALENDAR_COPY_EVENT) { return "CMSG_CALENDAR_COPY_EVENT"; }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_INVITE) { return "CMSG_CALENDAR_EVENT_INVITE"; }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_RSVP) { return "CMSG_CALENDAR_EVENT_RSVP"; }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) { return "CMSG_CALENDAR_EVENT_REMOVE_INVITE"; }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_STATUS) { return "CMSG_CALENDAR_EVENT_STATUS"; }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) { return "CMSG_CALENDAR_EVENT_MODERATOR_STATUS"; }
    if (opcode == Opcode::CMSG_CALENDAR_COMPLAIN) { return "CMSG_CALENDAR_COMPLAIN"; }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) { return "CMSG_CALENDAR_GET_NUM_PENDING"; }
    if (opcode == Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) { return "CMSG_UPDATE_MISSILE_TRAJECTORY"; }
    if (opcode == Opcode::CMSG_COMPLETE_MOVIE) { return "CMSG_COMPLETE_MOVIE"; }
    if (opcode == Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) { return "CMSG_QUERY_INSPECT_ACHIEVEMENTS"; }
    if (opcode == Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) { return "CMSG_DISMISS_CONTROLLED_VEHICLE"; }
    if (opcode == Opcode::CMSG_CHAR_CUSTOMIZE) { return "CMSG_CHAR_CUSTOMIZE"; }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_EXIT) { return "CMSG_REQUEST_VEHICLE_EXIT"; }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) { return "CMSG_REQUEST_VEHICLE_PREV_SEAT"; }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) { return "CMSG_REQUEST_VEHICLE_NEXT_SEAT"; }
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) { return "CMSG_REQUEST_VEHICLE_SWITCH_SEAT"; }
    if (opcode == Opcode::CMSG_PET_LEARN_TALENT) { return "CMSG_PET_LEARN_TALENT"; }
    if (opcode == Opcode::CMSG_GAMEOBJ_REPORT_USE) { return "CMSG_GAMEOBJ_REPORT_USE"; }
    if (opcode == Opcode::CMSG_REMOVE_GLYPH) { return "CMSG_REMOVE_GLYPH"; }
    if (opcode == Opcode::CMSG_DISMISS_CRITTER) { return "CMSG_DISMISS_CRITTER"; }
    if (opcode == Opcode::CMSG_AUCTION_LIST_PENDING_SALES) { return "CMSG_AUCTION_LIST_PENDING_SALES"; }
    if (opcode == Opcode::CMSG_ENABLETAXI) { return "CMSG_ENABLETAXI"; }
    if (opcode == Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) { return "CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE"; }
    if (opcode == Opcode::CMSG_HEARTH_AND_RESURRECT) { return "CMSG_HEARTH_AND_RESURRECT"; }
    if (opcode == Opcode::CMSG_PLAYER_VEHICLE_ENTER) { return "CMSG_PLAYER_VEHICLE_ENTER"; }
    if (opcode == Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) { return "CMSG_CONTROLLER_EJECT_PASSENGER"; }
    if (opcode == Opcode::CMSG_ITEM_REFUND_INFO) { return "CMSG_ITEM_REFUND_INFO"; }
    if (opcode == Opcode::CMSG_ITEM_REFUND) { return "CMSG_ITEM_REFUND"; }
    if (opcode == Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) { return "CMSG_CORPSE_MAP_POSITION_QUERY"; }
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_SIGNUP) { return "CMSG_CALENDAR_EVENT_SIGNUP"; }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_SAVE) { return "CMSG_EQUIPMENT_SET_SAVE"; }
    if (opcode == Opcode::CMSG_UPDATE_PROJECTILE_POSITION) { return "CMSG_UPDATE_PROJECTILE_POSITION"; }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS) { return "CMSG_LEARN_PREVIEW_TALENTS"; }
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) { return "CMSG_LEARN_PREVIEW_TALENTS_PET"; }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) { return "CMSG_MOVE_GRAVITY_DISABLE_ACK"; }
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) { return "CMSG_MOVE_GRAVITY_ENABLE_ACK"; }
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_USE) { return "CMSG_EQUIPMENT_SET_USE"; }
    if (opcode == Opcode::CMSG_CHAR_FACTION_CHANGE) { return "CMSG_CHAR_FACTION_CHANGE"; }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) { return "CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE"; }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) { return "CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE"; }
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) { return "CMSG_BATTLEFIELD_MGR_EXIT_REQUEST"; }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) { return "MSG_SET_RAID_DIFFICULTY_Client"; }
    if (opcode == Opcode::CMSG_GMRESPONSE_RESOLVE) { return "CMSG_GMRESPONSE_RESOLVE"; }
    if (opcode == Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) { return "CMSG_WORLD_STATE_UI_TIMER_UPDATE"; }
    if (opcode == Opcode::CMSG_CHAR_RACE_CHANGE) { return "CMSG_CHAR_RACE_CHANGE"; }
    if (opcode == Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) { return "CMSG_READY_FOR_ACCOUNT_DATA_TIMES"; }
    if (opcode == Opcode::CMSG_QUERY_QUESTS_COMPLETED) { return "CMSG_QUERY_QUESTS_COMPLETED"; }
    if (opcode == Opcode::CMSG_GM_REPORT_LAG) { return "CMSG_GM_REPORT_LAG"; }
    if (opcode == Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) { return "CMSG_MOVE_SET_COLLISION_HGT_ACK"; }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BOOTME* ClientOpcode::get_if<CMSG_BOOTME>() {
    if (opcode == Opcode::CMSG_BOOTME) {
        return &CMSG_BOOTME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BOOTME& ClientOpcode::get<CMSG_BOOTME>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BOOTME>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DBLOOKUP* ClientOpcode::get_if<CMSG_DBLOOKUP>() {
    if (opcode == Opcode::CMSG_DBLOOKUP) {
        return &CMSG_DBLOOKUP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DBLOOKUP& ClientOpcode::get<CMSG_DBLOOKUP>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_DBLOOKUP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WORLD_TELEPORT* ClientOpcode::get_if<CMSG_WORLD_TELEPORT>() {
    if (opcode == Opcode::CMSG_WORLD_TELEPORT) {
        return &CMSG_WORLD_TELEPORT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WORLD_TELEPORT& ClientOpcode::get<CMSG_WORLD_TELEPORT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_WORLD_TELEPORT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TELEPORT_TO_UNIT* ClientOpcode::get_if<CMSG_TELEPORT_TO_UNIT>() {
    if (opcode == Opcode::CMSG_TELEPORT_TO_UNIT) {
        return &CMSG_TELEPORT_TO_UNIT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TELEPORT_TO_UNIT& ClientOpcode::get<CMSG_TELEPORT_TO_UNIT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TELEPORT_TO_UNIT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_CREATE* ClientOpcode::get_if<CMSG_CHAR_CREATE>() {
    if (opcode == Opcode::CMSG_CHAR_CREATE) {
        return &CMSG_CHAR_CREATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_CREATE& ClientOpcode::get<CMSG_CHAR_CREATE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHAR_CREATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_ENUM* ClientOpcode::get_if<CMSG_CHAR_ENUM>() {
    if (opcode == Opcode::CMSG_CHAR_ENUM) {
        return &CMSG_CHAR_ENUM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_ENUM& ClientOpcode::get<CMSG_CHAR_ENUM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHAR_ENUM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_DELETE* ClientOpcode::get_if<CMSG_CHAR_DELETE>() {
    if (opcode == Opcode::CMSG_CHAR_DELETE) {
        return &CMSG_CHAR_DELETE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_DELETE& ClientOpcode::get<CMSG_CHAR_DELETE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHAR_DELETE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_LOGIN* ClientOpcode::get_if<CMSG_PLAYER_LOGIN>() {
    if (opcode == Opcode::CMSG_PLAYER_LOGIN) {
        return &CMSG_PLAYER_LOGIN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_LOGIN& ClientOpcode::get<CMSG_PLAYER_LOGIN>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PLAYER_LOGIN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_LOGOUT* ClientOpcode::get_if<CMSG_PLAYER_LOGOUT>() {
    if (opcode == Opcode::CMSG_PLAYER_LOGOUT) {
        return &CMSG_PLAYER_LOGOUT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_LOGOUT& ClientOpcode::get<CMSG_PLAYER_LOGOUT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PLAYER_LOGOUT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOGOUT_REQUEST* ClientOpcode::get_if<CMSG_LOGOUT_REQUEST>() {
    if (opcode == Opcode::CMSG_LOGOUT_REQUEST) {
        return &CMSG_LOGOUT_REQUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOGOUT_REQUEST& ClientOpcode::get<CMSG_LOGOUT_REQUEST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LOGOUT_REQUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOGOUT_CANCEL* ClientOpcode::get_if<CMSG_LOGOUT_CANCEL>() {
    if (opcode == Opcode::CMSG_LOGOUT_CANCEL) {
        return &CMSG_LOGOUT_CANCEL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOGOUT_CANCEL& ClientOpcode::get<CMSG_LOGOUT_CANCEL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LOGOUT_CANCEL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NAME_QUERY* ClientOpcode::get_if<CMSG_NAME_QUERY>() {
    if (opcode == Opcode::CMSG_NAME_QUERY) {
        return &CMSG_NAME_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NAME_QUERY& ClientOpcode::get<CMSG_NAME_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_NAME_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_NAME_QUERY* ClientOpcode::get_if<CMSG_PET_NAME_QUERY>() {
    if (opcode == Opcode::CMSG_PET_NAME_QUERY) {
        return &CMSG_PET_NAME_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_NAME_QUERY& ClientOpcode::get<CMSG_PET_NAME_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_NAME_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_QUERY* ClientOpcode::get_if<CMSG_GUILD_QUERY>() {
    if (opcode == Opcode::CMSG_GUILD_QUERY) {
        return &CMSG_GUILD_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_QUERY& ClientOpcode::get<CMSG_GUILD_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_QUERY_SINGLE* ClientOpcode::get_if<CMSG_ITEM_QUERY_SINGLE>() {
    if (opcode == Opcode::CMSG_ITEM_QUERY_SINGLE) {
        return &CMSG_ITEM_QUERY_SINGLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_QUERY_SINGLE& ClientOpcode::get<CMSG_ITEM_QUERY_SINGLE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ITEM_QUERY_SINGLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PAGE_TEXT_QUERY* ClientOpcode::get_if<CMSG_PAGE_TEXT_QUERY>() {
    if (opcode == Opcode::CMSG_PAGE_TEXT_QUERY) {
        return &CMSG_PAGE_TEXT_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PAGE_TEXT_QUERY& ClientOpcode::get<CMSG_PAGE_TEXT_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PAGE_TEXT_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_QUERY* ClientOpcode::get_if<CMSG_QUEST_QUERY>() {
    if (opcode == Opcode::CMSG_QUEST_QUERY) {
        return &CMSG_QUEST_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_QUERY& ClientOpcode::get<CMSG_QUEST_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUEST_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJECT_QUERY* ClientOpcode::get_if<CMSG_GAMEOBJECT_QUERY>() {
    if (opcode == Opcode::CMSG_GAMEOBJECT_QUERY) {
        return &CMSG_GAMEOBJECT_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJECT_QUERY& ClientOpcode::get<CMSG_GAMEOBJECT_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GAMEOBJECT_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CREATURE_QUERY* ClientOpcode::get_if<CMSG_CREATURE_QUERY>() {
    if (opcode == Opcode::CMSG_CREATURE_QUERY) {
        return &CMSG_CREATURE_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CREATURE_QUERY& ClientOpcode::get<CMSG_CREATURE_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CREATURE_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WHO* ClientOpcode::get_if<CMSG_WHO>() {
    if (opcode == Opcode::CMSG_WHO) {
        return &CMSG_WHO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WHO& ClientOpcode::get<CMSG_WHO>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_WHO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WHOIS* ClientOpcode::get_if<CMSG_WHOIS>() {
    if (opcode == Opcode::CMSG_WHOIS) {
        return &CMSG_WHOIS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WHOIS& ClientOpcode::get<CMSG_WHOIS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_WHOIS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CONTACT_LIST* ClientOpcode::get_if<CMSG_CONTACT_LIST>() {
    if (opcode == Opcode::CMSG_CONTACT_LIST) {
        return &CMSG_CONTACT_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CONTACT_LIST& ClientOpcode::get<CMSG_CONTACT_LIST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CONTACT_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ADD_FRIEND* ClientOpcode::get_if<CMSG_ADD_FRIEND>() {
    if (opcode == Opcode::CMSG_ADD_FRIEND) {
        return &CMSG_ADD_FRIEND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ADD_FRIEND& ClientOpcode::get<CMSG_ADD_FRIEND>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ADD_FRIEND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DEL_FRIEND* ClientOpcode::get_if<CMSG_DEL_FRIEND>() {
    if (opcode == Opcode::CMSG_DEL_FRIEND) {
        return &CMSG_DEL_FRIEND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DEL_FRIEND& ClientOpcode::get<CMSG_DEL_FRIEND>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_DEL_FRIEND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_CONTACT_NOTES* ClientOpcode::get_if<CMSG_SET_CONTACT_NOTES>() {
    if (opcode == Opcode::CMSG_SET_CONTACT_NOTES) {
        return &CMSG_SET_CONTACT_NOTES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_CONTACT_NOTES& ClientOpcode::get<CMSG_SET_CONTACT_NOTES>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_CONTACT_NOTES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ADD_IGNORE* ClientOpcode::get_if<CMSG_ADD_IGNORE>() {
    if (opcode == Opcode::CMSG_ADD_IGNORE) {
        return &CMSG_ADD_IGNORE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ADD_IGNORE& ClientOpcode::get<CMSG_ADD_IGNORE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ADD_IGNORE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DEL_IGNORE* ClientOpcode::get_if<CMSG_DEL_IGNORE>() {
    if (opcode == Opcode::CMSG_DEL_IGNORE) {
        return &CMSG_DEL_IGNORE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DEL_IGNORE& ClientOpcode::get<CMSG_DEL_IGNORE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_DEL_IGNORE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_INVITE* ClientOpcode::get_if<CMSG_GROUP_INVITE>() {
    if (opcode == Opcode::CMSG_GROUP_INVITE) {
        return &CMSG_GROUP_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_INVITE& ClientOpcode::get<CMSG_GROUP_INVITE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_CANCEL* ClientOpcode::get_if<CMSG_GROUP_CANCEL>() {
    if (opcode == Opcode::CMSG_GROUP_CANCEL) {
        return &CMSG_GROUP_CANCEL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_CANCEL& ClientOpcode::get<CMSG_GROUP_CANCEL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_CANCEL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_ACCEPT* ClientOpcode::get_if<CMSG_GROUP_ACCEPT>() {
    if (opcode == Opcode::CMSG_GROUP_ACCEPT) {
        return &CMSG_GROUP_ACCEPT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_ACCEPT& ClientOpcode::get<CMSG_GROUP_ACCEPT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_ACCEPT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_DECLINE* ClientOpcode::get_if<CMSG_GROUP_DECLINE>() {
    if (opcode == Opcode::CMSG_GROUP_DECLINE) {
        return &CMSG_GROUP_DECLINE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_DECLINE& ClientOpcode::get<CMSG_GROUP_DECLINE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_DECLINE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_UNINVITE* ClientOpcode::get_if<CMSG_GROUP_UNINVITE>() {
    if (opcode == Opcode::CMSG_GROUP_UNINVITE) {
        return &CMSG_GROUP_UNINVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_UNINVITE& ClientOpcode::get<CMSG_GROUP_UNINVITE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_UNINVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_UNINVITE_GUID* ClientOpcode::get_if<CMSG_GROUP_UNINVITE_GUID>() {
    if (opcode == Opcode::CMSG_GROUP_UNINVITE_GUID) {
        return &CMSG_GROUP_UNINVITE_GUID;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_UNINVITE_GUID& ClientOpcode::get<CMSG_GROUP_UNINVITE_GUID>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_UNINVITE_GUID>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_SET_LEADER* ClientOpcode::get_if<CMSG_GROUP_SET_LEADER>() {
    if (opcode == Opcode::CMSG_GROUP_SET_LEADER) {
        return &CMSG_GROUP_SET_LEADER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_SET_LEADER& ClientOpcode::get<CMSG_GROUP_SET_LEADER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_SET_LEADER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_METHOD* ClientOpcode::get_if<CMSG_LOOT_METHOD>() {
    if (opcode == Opcode::CMSG_LOOT_METHOD) {
        return &CMSG_LOOT_METHOD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_METHOD& ClientOpcode::get<CMSG_LOOT_METHOD>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LOOT_METHOD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_DISBAND* ClientOpcode::get_if<CMSG_GROUP_DISBAND>() {
    if (opcode == Opcode::CMSG_GROUP_DISBAND) {
        return &CMSG_GROUP_DISBAND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_DISBAND& ClientOpcode::get<CMSG_GROUP_DISBAND>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_DISBAND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_CREATE* ClientOpcode::get_if<CMSG_GUILD_CREATE>() {
    if (opcode == Opcode::CMSG_GUILD_CREATE) {
        return &CMSG_GUILD_CREATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_CREATE& ClientOpcode::get<CMSG_GUILD_CREATE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_CREATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INVITE* ClientOpcode::get_if<CMSG_GUILD_INVITE>() {
    if (opcode == Opcode::CMSG_GUILD_INVITE) {
        return &CMSG_GUILD_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INVITE& ClientOpcode::get<CMSG_GUILD_INVITE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ACCEPT* ClientOpcode::get_if<CMSG_GUILD_ACCEPT>() {
    if (opcode == Opcode::CMSG_GUILD_ACCEPT) {
        return &CMSG_GUILD_ACCEPT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ACCEPT& ClientOpcode::get<CMSG_GUILD_ACCEPT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_ACCEPT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DECLINE* ClientOpcode::get_if<CMSG_GUILD_DECLINE>() {
    if (opcode == Opcode::CMSG_GUILD_DECLINE) {
        return &CMSG_GUILD_DECLINE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DECLINE& ClientOpcode::get<CMSG_GUILD_DECLINE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_DECLINE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INFO* ClientOpcode::get_if<CMSG_GUILD_INFO>() {
    if (opcode == Opcode::CMSG_GUILD_INFO) {
        return &CMSG_GUILD_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INFO& ClientOpcode::get<CMSG_GUILD_INFO>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ROSTER* ClientOpcode::get_if<CMSG_GUILD_ROSTER>() {
    if (opcode == Opcode::CMSG_GUILD_ROSTER) {
        return &CMSG_GUILD_ROSTER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ROSTER& ClientOpcode::get<CMSG_GUILD_ROSTER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_ROSTER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_PROMOTE* ClientOpcode::get_if<CMSG_GUILD_PROMOTE>() {
    if (opcode == Opcode::CMSG_GUILD_PROMOTE) {
        return &CMSG_GUILD_PROMOTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_PROMOTE& ClientOpcode::get<CMSG_GUILD_PROMOTE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_PROMOTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DEMOTE* ClientOpcode::get_if<CMSG_GUILD_DEMOTE>() {
    if (opcode == Opcode::CMSG_GUILD_DEMOTE) {
        return &CMSG_GUILD_DEMOTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DEMOTE& ClientOpcode::get<CMSG_GUILD_DEMOTE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_DEMOTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_LEAVE* ClientOpcode::get_if<CMSG_GUILD_LEAVE>() {
    if (opcode == Opcode::CMSG_GUILD_LEAVE) {
        return &CMSG_GUILD_LEAVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_LEAVE& ClientOpcode::get<CMSG_GUILD_LEAVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_LEAVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_REMOVE* ClientOpcode::get_if<CMSG_GUILD_REMOVE>() {
    if (opcode == Opcode::CMSG_GUILD_REMOVE) {
        return &CMSG_GUILD_REMOVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_REMOVE& ClientOpcode::get<CMSG_GUILD_REMOVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_REMOVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DISBAND* ClientOpcode::get_if<CMSG_GUILD_DISBAND>() {
    if (opcode == Opcode::CMSG_GUILD_DISBAND) {
        return &CMSG_GUILD_DISBAND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DISBAND& ClientOpcode::get<CMSG_GUILD_DISBAND>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_DISBAND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_LEADER* ClientOpcode::get_if<CMSG_GUILD_LEADER>() {
    if (opcode == Opcode::CMSG_GUILD_LEADER) {
        return &CMSG_GUILD_LEADER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_LEADER& ClientOpcode::get<CMSG_GUILD_LEADER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_LEADER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_MOTD* ClientOpcode::get_if<CMSG_GUILD_MOTD>() {
    if (opcode == Opcode::CMSG_GUILD_MOTD) {
        return &CMSG_GUILD_MOTD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_MOTD& ClientOpcode::get<CMSG_GUILD_MOTD>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_MOTD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MESSAGECHAT* ClientOpcode::get_if<CMSG_MESSAGECHAT>() {
    if (opcode == Opcode::CMSG_MESSAGECHAT) {
        return &CMSG_MESSAGECHAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MESSAGECHAT& ClientOpcode::get<CMSG_MESSAGECHAT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MESSAGECHAT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_JOIN_CHANNEL* ClientOpcode::get_if<CMSG_JOIN_CHANNEL>() {
    if (opcode == Opcode::CMSG_JOIN_CHANNEL) {
        return &CMSG_JOIN_CHANNEL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_JOIN_CHANNEL& ClientOpcode::get<CMSG_JOIN_CHANNEL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_JOIN_CHANNEL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEAVE_CHANNEL* ClientOpcode::get_if<CMSG_LEAVE_CHANNEL>() {
    if (opcode == Opcode::CMSG_LEAVE_CHANNEL) {
        return &CMSG_LEAVE_CHANNEL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEAVE_CHANNEL& ClientOpcode::get<CMSG_LEAVE_CHANNEL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LEAVE_CHANNEL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_LIST* ClientOpcode::get_if<CMSG_CHANNEL_LIST>() {
    if (opcode == Opcode::CMSG_CHANNEL_LIST) {
        return &CMSG_CHANNEL_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_LIST& ClientOpcode::get<CMSG_CHANNEL_LIST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_PASSWORD* ClientOpcode::get_if<CMSG_CHANNEL_PASSWORD>() {
    if (opcode == Opcode::CMSG_CHANNEL_PASSWORD) {
        return &CMSG_CHANNEL_PASSWORD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_PASSWORD& ClientOpcode::get<CMSG_CHANNEL_PASSWORD>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_PASSWORD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_SET_OWNER* ClientOpcode::get_if<CMSG_CHANNEL_SET_OWNER>() {
    if (opcode == Opcode::CMSG_CHANNEL_SET_OWNER) {
        return &CMSG_CHANNEL_SET_OWNER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_SET_OWNER& ClientOpcode::get<CMSG_CHANNEL_SET_OWNER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_SET_OWNER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_OWNER* ClientOpcode::get_if<CMSG_CHANNEL_OWNER>() {
    if (opcode == Opcode::CMSG_CHANNEL_OWNER) {
        return &CMSG_CHANNEL_OWNER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_OWNER& ClientOpcode::get<CMSG_CHANNEL_OWNER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_OWNER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MODERATOR* ClientOpcode::get_if<CMSG_CHANNEL_MODERATOR>() {
    if (opcode == Opcode::CMSG_CHANNEL_MODERATOR) {
        return &CMSG_CHANNEL_MODERATOR;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MODERATOR& ClientOpcode::get<CMSG_CHANNEL_MODERATOR>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_MODERATOR>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNMODERATOR* ClientOpcode::get_if<CMSG_CHANNEL_UNMODERATOR>() {
    if (opcode == Opcode::CMSG_CHANNEL_UNMODERATOR) {
        return &CMSG_CHANNEL_UNMODERATOR;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNMODERATOR& ClientOpcode::get<CMSG_CHANNEL_UNMODERATOR>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_UNMODERATOR>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MUTE* ClientOpcode::get_if<CMSG_CHANNEL_MUTE>() {
    if (opcode == Opcode::CMSG_CHANNEL_MUTE) {
        return &CMSG_CHANNEL_MUTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MUTE& ClientOpcode::get<CMSG_CHANNEL_MUTE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_MUTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNMUTE* ClientOpcode::get_if<CMSG_CHANNEL_UNMUTE>() {
    if (opcode == Opcode::CMSG_CHANNEL_UNMUTE) {
        return &CMSG_CHANNEL_UNMUTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNMUTE& ClientOpcode::get<CMSG_CHANNEL_UNMUTE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_UNMUTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_INVITE* ClientOpcode::get_if<CMSG_CHANNEL_INVITE>() {
    if (opcode == Opcode::CMSG_CHANNEL_INVITE) {
        return &CMSG_CHANNEL_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_INVITE& ClientOpcode::get<CMSG_CHANNEL_INVITE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_KICK* ClientOpcode::get_if<CMSG_CHANNEL_KICK>() {
    if (opcode == Opcode::CMSG_CHANNEL_KICK) {
        return &CMSG_CHANNEL_KICK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_KICK& ClientOpcode::get<CMSG_CHANNEL_KICK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_KICK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_BAN* ClientOpcode::get_if<CMSG_CHANNEL_BAN>() {
    if (opcode == Opcode::CMSG_CHANNEL_BAN) {
        return &CMSG_CHANNEL_BAN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_BAN& ClientOpcode::get<CMSG_CHANNEL_BAN>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_BAN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNBAN* ClientOpcode::get_if<CMSG_CHANNEL_UNBAN>() {
    if (opcode == Opcode::CMSG_CHANNEL_UNBAN) {
        return &CMSG_CHANNEL_UNBAN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_UNBAN& ClientOpcode::get<CMSG_CHANNEL_UNBAN>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_UNBAN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_ANNOUNCEMENTS* ClientOpcode::get_if<CMSG_CHANNEL_ANNOUNCEMENTS>() {
    if (opcode == Opcode::CMSG_CHANNEL_ANNOUNCEMENTS) {
        return &CMSG_CHANNEL_ANNOUNCEMENTS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_ANNOUNCEMENTS& ClientOpcode::get<CMSG_CHANNEL_ANNOUNCEMENTS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_ANNOUNCEMENTS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MODERATE* ClientOpcode::get_if<CMSG_CHANNEL_MODERATE>() {
    if (opcode == Opcode::CMSG_CHANNEL_MODERATE) {
        return &CMSG_CHANNEL_MODERATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_MODERATE& ClientOpcode::get<CMSG_CHANNEL_MODERATE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_MODERATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_USE_ITEM* ClientOpcode::get_if<CMSG_USE_ITEM>() {
    if (opcode == Opcode::CMSG_USE_ITEM) {
        return &CMSG_USE_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_USE_ITEM& ClientOpcode::get<CMSG_USE_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_USE_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OPEN_ITEM* ClientOpcode::get_if<CMSG_OPEN_ITEM>() {
    if (opcode == Opcode::CMSG_OPEN_ITEM) {
        return &CMSG_OPEN_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OPEN_ITEM& ClientOpcode::get<CMSG_OPEN_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_OPEN_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_READ_ITEM* ClientOpcode::get_if<CMSG_READ_ITEM>() {
    if (opcode == Opcode::CMSG_READ_ITEM) {
        return &CMSG_READ_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_READ_ITEM& ClientOpcode::get<CMSG_READ_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_READ_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJ_USE* ClientOpcode::get_if<CMSG_GAMEOBJ_USE>() {
    if (opcode == Opcode::CMSG_GAMEOBJ_USE) {
        return &CMSG_GAMEOBJ_USE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJ_USE& ClientOpcode::get<CMSG_GAMEOBJ_USE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GAMEOBJ_USE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREATRIGGER* ClientOpcode::get_if<CMSG_AREATRIGGER>() {
    if (opcode == Opcode::CMSG_AREATRIGGER) {
        return &CMSG_AREATRIGGER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREATRIGGER& ClientOpcode::get<CMSG_AREATRIGGER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AREATRIGGER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_FORWARD* ClientOpcode::get_if<MSG_MOVE_START_FORWARD>() {
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        return &MSG_MOVE_START_FORWARD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_FORWARD& ClientOpcode::get<MSG_MOVE_START_FORWARD>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_FORWARD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_BACKWARD* ClientOpcode::get_if<MSG_MOVE_START_BACKWARD>() {
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        return &MSG_MOVE_START_BACKWARD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_BACKWARD& ClientOpcode::get<MSG_MOVE_START_BACKWARD>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_BACKWARD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP* ClientOpcode::get_if<MSG_MOVE_STOP>() {
    if (opcode == Opcode::MSG_MOVE_STOP) {
        return &MSG_MOVE_STOP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP& ClientOpcode::get<MSG_MOVE_STOP>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_STOP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_LEFT* ClientOpcode::get_if<MSG_MOVE_START_STRAFE_LEFT>() {
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        return &MSG_MOVE_START_STRAFE_LEFT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_LEFT& ClientOpcode::get<MSG_MOVE_START_STRAFE_LEFT>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_STRAFE_LEFT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_RIGHT* ClientOpcode::get_if<MSG_MOVE_START_STRAFE_RIGHT>() {
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        return &MSG_MOVE_START_STRAFE_RIGHT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_RIGHT& ClientOpcode::get<MSG_MOVE_START_STRAFE_RIGHT>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_STRAFE_RIGHT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_STRAFE* ClientOpcode::get_if<MSG_MOVE_STOP_STRAFE>() {
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        return &MSG_MOVE_STOP_STRAFE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_STRAFE& ClientOpcode::get<MSG_MOVE_STOP_STRAFE>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_STOP_STRAFE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_JUMP* ClientOpcode::get_if<MSG_MOVE_JUMP>() {
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        return &MSG_MOVE_JUMP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_JUMP& ClientOpcode::get<MSG_MOVE_JUMP>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_JUMP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_LEFT* ClientOpcode::get_if<MSG_MOVE_START_TURN_LEFT>() {
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        return &MSG_MOVE_START_TURN_LEFT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_LEFT& ClientOpcode::get<MSG_MOVE_START_TURN_LEFT>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_TURN_LEFT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_RIGHT* ClientOpcode::get_if<MSG_MOVE_START_TURN_RIGHT>() {
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        return &MSG_MOVE_START_TURN_RIGHT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_RIGHT& ClientOpcode::get<MSG_MOVE_START_TURN_RIGHT>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_TURN_RIGHT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_TURN* ClientOpcode::get_if<MSG_MOVE_STOP_TURN>() {
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        return &MSG_MOVE_STOP_TURN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_TURN& ClientOpcode::get<MSG_MOVE_STOP_TURN>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_STOP_TURN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_UP* ClientOpcode::get_if<MSG_MOVE_START_PITCH_UP>() {
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        return &MSG_MOVE_START_PITCH_UP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_UP& ClientOpcode::get<MSG_MOVE_START_PITCH_UP>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_PITCH_UP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_DOWN* ClientOpcode::get_if<MSG_MOVE_START_PITCH_DOWN>() {
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        return &MSG_MOVE_START_PITCH_DOWN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_DOWN& ClientOpcode::get<MSG_MOVE_START_PITCH_DOWN>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_PITCH_DOWN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_PITCH* ClientOpcode::get_if<MSG_MOVE_STOP_PITCH>() {
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        return &MSG_MOVE_STOP_PITCH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_PITCH& ClientOpcode::get<MSG_MOVE_STOP_PITCH>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_STOP_PITCH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_RUN_MODE* ClientOpcode::get_if<MSG_MOVE_SET_RUN_MODE>() {
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        return &MSG_MOVE_SET_RUN_MODE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_RUN_MODE& ClientOpcode::get<MSG_MOVE_SET_RUN_MODE>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_SET_RUN_MODE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_WALK_MODE* ClientOpcode::get_if<MSG_MOVE_SET_WALK_MODE>() {
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        return &MSG_MOVE_SET_WALK_MODE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_WALK_MODE& ClientOpcode::get<MSG_MOVE_SET_WALK_MODE>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_SET_WALK_MODE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_Server* ClientOpcode::get_if<MSG_MOVE_TELEPORT_Server>() {
    if (opcode == Opcode::MSG_MOVE_TELEPORT) {
        return &MSG_MOVE_TELEPORT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_Server& ClientOpcode::get<MSG_MOVE_TELEPORT_Server>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_TELEPORT_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_ACK_Client* ClientOpcode::get_if<MSG_MOVE_TELEPORT_ACK_Client>() {
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        return &MSG_MOVE_TELEPORT_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_ACK_Client& ClientOpcode::get<MSG_MOVE_TELEPORT_ACK_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_TELEPORT_ACK_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FALL_LAND* ClientOpcode::get_if<MSG_MOVE_FALL_LAND>() {
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        return &MSG_MOVE_FALL_LAND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FALL_LAND& ClientOpcode::get<MSG_MOVE_FALL_LAND>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_FALL_LAND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_SWIM* ClientOpcode::get_if<MSG_MOVE_START_SWIM>() {
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        return &MSG_MOVE_START_SWIM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_SWIM& ClientOpcode::get<MSG_MOVE_START_SWIM>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_SWIM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_SWIM* ClientOpcode::get_if<MSG_MOVE_STOP_SWIM>() {
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        return &MSG_MOVE_STOP_SWIM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_SWIM& ClientOpcode::get<MSG_MOVE_STOP_SWIM>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_STOP_SWIM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FACING* ClientOpcode::get_if<MSG_MOVE_SET_FACING>() {
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        return &MSG_MOVE_SET_FACING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FACING& ClientOpcode::get<MSG_MOVE_SET_FACING>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_SET_FACING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH* ClientOpcode::get_if<MSG_MOVE_SET_PITCH>() {
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        return &MSG_MOVE_SET_PITCH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH& ClientOpcode::get<MSG_MOVE_SET_PITCH>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_SET_PITCH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WORLDPORT_ACK* ClientOpcode::get_if<MSG_MOVE_WORLDPORT_ACK>() {
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        return &MSG_MOVE_WORLDPORT_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WORLDPORT_ACK& ClientOpcode::get<MSG_MOVE_WORLDPORT_ACK>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_WORLDPORT_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_RAW_POSITION* ClientOpcode::get_if<CMSG_MOVE_SET_RAW_POSITION>() {
    if (opcode == Opcode::CMSG_MOVE_SET_RAW_POSITION) {
        return &CMSG_MOVE_SET_RAW_POSITION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_RAW_POSITION& ClientOpcode::get<CMSG_MOVE_SET_RAW_POSITION>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_SET_RAW_POSITION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK* ClientOpcode::get_if<CMSG_FORCE_RUN_SPEED_CHANGE_ACK>() {
    if (opcode == Opcode::CMSG_FORCE_RUN_SPEED_CHANGE_ACK) {
        return &CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK& ClientOpcode::get<CMSG_FORCE_RUN_SPEED_CHANGE_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FORCE_RUN_SPEED_CHANGE_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK* ClientOpcode::get_if<CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK>() {
    if (opcode == Opcode::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) {
        return &CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK& ClientOpcode::get<CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK* ClientOpcode::get_if<CMSG_FORCE_SWIM_SPEED_CHANGE_ACK>() {
    if (opcode == Opcode::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) {
        return &CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK& ClientOpcode::get<CMSG_FORCE_SWIM_SPEED_CHANGE_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_MOVE_ROOT_ACK* ClientOpcode::get_if<CMSG_FORCE_MOVE_ROOT_ACK>() {
    if (opcode == Opcode::CMSG_FORCE_MOVE_ROOT_ACK) {
        return &CMSG_FORCE_MOVE_ROOT_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_MOVE_ROOT_ACK& ClientOpcode::get<CMSG_FORCE_MOVE_ROOT_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FORCE_MOVE_ROOT_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_MOVE_UNROOT_ACK* ClientOpcode::get_if<CMSG_FORCE_MOVE_UNROOT_ACK>() {
    if (opcode == Opcode::CMSG_FORCE_MOVE_UNROOT_ACK) {
        return &CMSG_FORCE_MOVE_UNROOT_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_MOVE_UNROOT_ACK& ClientOpcode::get<CMSG_FORCE_MOVE_UNROOT_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FORCE_MOVE_UNROOT_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HEARTBEAT* ClientOpcode::get_if<MSG_MOVE_HEARTBEAT>() {
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        return &MSG_MOVE_HEARTBEAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HEARTBEAT& ClientOpcode::get<MSG_MOVE_HEARTBEAT>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_HEARTBEAT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_KNOCK_BACK_ACK* ClientOpcode::get_if<CMSG_MOVE_KNOCK_BACK_ACK>() {
    if (opcode == Opcode::CMSG_MOVE_KNOCK_BACK_ACK) {
        return &CMSG_MOVE_KNOCK_BACK_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_KNOCK_BACK_ACK& ClientOpcode::get<CMSG_MOVE_KNOCK_BACK_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_KNOCK_BACK_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_HOVER_ACK* ClientOpcode::get_if<CMSG_MOVE_HOVER_ACK>() {
    if (opcode == Opcode::CMSG_MOVE_HOVER_ACK) {
        return &CMSG_MOVE_HOVER_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_HOVER_ACK& ClientOpcode::get<CMSG_MOVE_HOVER_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_HOVER_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HOVER* ClientOpcode::get_if<MSG_MOVE_HOVER>() {
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        return &MSG_MOVE_HOVER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HOVER& ClientOpcode::get<MSG_MOVE_HOVER>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_HOVER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NEXT_CINEMATIC_CAMERA* ClientOpcode::get_if<CMSG_NEXT_CINEMATIC_CAMERA>() {
    if (opcode == Opcode::CMSG_NEXT_CINEMATIC_CAMERA) {
        return &CMSG_NEXT_CINEMATIC_CAMERA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NEXT_CINEMATIC_CAMERA& ClientOpcode::get<CMSG_NEXT_CINEMATIC_CAMERA>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_NEXT_CINEMATIC_CAMERA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLETE_CINEMATIC* ClientOpcode::get_if<CMSG_COMPLETE_CINEMATIC>() {
    if (opcode == Opcode::CMSG_COMPLETE_CINEMATIC) {
        return &CMSG_COMPLETE_CINEMATIC;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLETE_CINEMATIC& ClientOpcode::get<CMSG_COMPLETE_CINEMATIC>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_COMPLETE_CINEMATIC>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_FLAG* ClientOpcode::get_if<CMSG_TUTORIAL_FLAG>() {
    if (opcode == Opcode::CMSG_TUTORIAL_FLAG) {
        return &CMSG_TUTORIAL_FLAG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_FLAG& ClientOpcode::get<CMSG_TUTORIAL_FLAG>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TUTORIAL_FLAG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_CLEAR* ClientOpcode::get_if<CMSG_TUTORIAL_CLEAR>() {
    if (opcode == Opcode::CMSG_TUTORIAL_CLEAR) {
        return &CMSG_TUTORIAL_CLEAR;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_CLEAR& ClientOpcode::get<CMSG_TUTORIAL_CLEAR>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TUTORIAL_CLEAR>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_RESET* ClientOpcode::get_if<CMSG_TUTORIAL_RESET>() {
    if (opcode == Opcode::CMSG_TUTORIAL_RESET) {
        return &CMSG_TUTORIAL_RESET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TUTORIAL_RESET& ClientOpcode::get<CMSG_TUTORIAL_RESET>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TUTORIAL_RESET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STANDSTATECHANGE* ClientOpcode::get_if<CMSG_STANDSTATECHANGE>() {
    if (opcode == Opcode::CMSG_STANDSTATECHANGE) {
        return &CMSG_STANDSTATECHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STANDSTATECHANGE& ClientOpcode::get<CMSG_STANDSTATECHANGE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_STANDSTATECHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EMOTE* ClientOpcode::get_if<CMSG_EMOTE>() {
    if (opcode == Opcode::CMSG_EMOTE) {
        return &CMSG_EMOTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EMOTE& ClientOpcode::get<CMSG_EMOTE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_EMOTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TEXT_EMOTE* ClientOpcode::get_if<CMSG_TEXT_EMOTE>() {
    if (opcode == Opcode::CMSG_TEXT_EMOTE) {
        return &CMSG_TEXT_EMOTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TEXT_EMOTE& ClientOpcode::get<CMSG_TEXT_EMOTE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TEXT_EMOTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_LOOT_ITEM* ClientOpcode::get_if<CMSG_AUTOSTORE_LOOT_ITEM>() {
    if (opcode == Opcode::CMSG_AUTOSTORE_LOOT_ITEM) {
        return &CMSG_AUTOSTORE_LOOT_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_LOOT_ITEM& ClientOpcode::get<CMSG_AUTOSTORE_LOOT_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUTOSTORE_LOOT_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOEQUIP_ITEM* ClientOpcode::get_if<CMSG_AUTOEQUIP_ITEM>() {
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM) {
        return &CMSG_AUTOEQUIP_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOEQUIP_ITEM& ClientOpcode::get<CMSG_AUTOEQUIP_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUTOEQUIP_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_BAG_ITEM* ClientOpcode::get_if<CMSG_AUTOSTORE_BAG_ITEM>() {
    if (opcode == Opcode::CMSG_AUTOSTORE_BAG_ITEM) {
        return &CMSG_AUTOSTORE_BAG_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_BAG_ITEM& ClientOpcode::get<CMSG_AUTOSTORE_BAG_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUTOSTORE_BAG_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SWAP_ITEM* ClientOpcode::get_if<CMSG_SWAP_ITEM>() {
    if (opcode == Opcode::CMSG_SWAP_ITEM) {
        return &CMSG_SWAP_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SWAP_ITEM& ClientOpcode::get<CMSG_SWAP_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SWAP_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SWAP_INV_ITEM* ClientOpcode::get_if<CMSG_SWAP_INV_ITEM>() {
    if (opcode == Opcode::CMSG_SWAP_INV_ITEM) {
        return &CMSG_SWAP_INV_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SWAP_INV_ITEM& ClientOpcode::get<CMSG_SWAP_INV_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SWAP_INV_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPLIT_ITEM* ClientOpcode::get_if<CMSG_SPLIT_ITEM>() {
    if (opcode == Opcode::CMSG_SPLIT_ITEM) {
        return &CMSG_SPLIT_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPLIT_ITEM& ClientOpcode::get<CMSG_SPLIT_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SPLIT_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOEQUIP_ITEM_SLOT* ClientOpcode::get_if<CMSG_AUTOEQUIP_ITEM_SLOT>() {
    if (opcode == Opcode::CMSG_AUTOEQUIP_ITEM_SLOT) {
        return &CMSG_AUTOEQUIP_ITEM_SLOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOEQUIP_ITEM_SLOT& ClientOpcode::get<CMSG_AUTOEQUIP_ITEM_SLOT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUTOEQUIP_ITEM_SLOT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DESTROYITEM* ClientOpcode::get_if<CMSG_DESTROYITEM>() {
    if (opcode == Opcode::CMSG_DESTROYITEM) {
        return &CMSG_DESTROYITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DESTROYITEM& ClientOpcode::get<CMSG_DESTROYITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_DESTROYITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INSPECT* ClientOpcode::get_if<CMSG_INSPECT>() {
    if (opcode == Opcode::CMSG_INSPECT) {
        return &CMSG_INSPECT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INSPECT& ClientOpcode::get<CMSG_INSPECT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_INSPECT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INITIATE_TRADE* ClientOpcode::get_if<CMSG_INITIATE_TRADE>() {
    if (opcode == Opcode::CMSG_INITIATE_TRADE) {
        return &CMSG_INITIATE_TRADE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INITIATE_TRADE& ClientOpcode::get<CMSG_INITIATE_TRADE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_INITIATE_TRADE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BEGIN_TRADE* ClientOpcode::get_if<CMSG_BEGIN_TRADE>() {
    if (opcode == Opcode::CMSG_BEGIN_TRADE) {
        return &CMSG_BEGIN_TRADE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BEGIN_TRADE& ClientOpcode::get<CMSG_BEGIN_TRADE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BEGIN_TRADE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUSY_TRADE* ClientOpcode::get_if<CMSG_BUSY_TRADE>() {
    if (opcode == Opcode::CMSG_BUSY_TRADE) {
        return &CMSG_BUSY_TRADE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUSY_TRADE& ClientOpcode::get<CMSG_BUSY_TRADE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BUSY_TRADE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_IGNORE_TRADE* ClientOpcode::get_if<CMSG_IGNORE_TRADE>() {
    if (opcode == Opcode::CMSG_IGNORE_TRADE) {
        return &CMSG_IGNORE_TRADE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_IGNORE_TRADE& ClientOpcode::get<CMSG_IGNORE_TRADE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_IGNORE_TRADE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACCEPT_TRADE* ClientOpcode::get_if<CMSG_ACCEPT_TRADE>() {
    if (opcode == Opcode::CMSG_ACCEPT_TRADE) {
        return &CMSG_ACCEPT_TRADE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACCEPT_TRADE& ClientOpcode::get<CMSG_ACCEPT_TRADE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ACCEPT_TRADE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNACCEPT_TRADE* ClientOpcode::get_if<CMSG_UNACCEPT_TRADE>() {
    if (opcode == Opcode::CMSG_UNACCEPT_TRADE) {
        return &CMSG_UNACCEPT_TRADE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNACCEPT_TRADE& ClientOpcode::get<CMSG_UNACCEPT_TRADE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_UNACCEPT_TRADE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_TRADE* ClientOpcode::get_if<CMSG_CANCEL_TRADE>() {
    if (opcode == Opcode::CMSG_CANCEL_TRADE) {
        return &CMSG_CANCEL_TRADE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_TRADE& ClientOpcode::get<CMSG_CANCEL_TRADE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CANCEL_TRADE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TRADE_ITEM* ClientOpcode::get_if<CMSG_SET_TRADE_ITEM>() {
    if (opcode == Opcode::CMSG_SET_TRADE_ITEM) {
        return &CMSG_SET_TRADE_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TRADE_ITEM& ClientOpcode::get<CMSG_SET_TRADE_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_TRADE_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CLEAR_TRADE_ITEM* ClientOpcode::get_if<CMSG_CLEAR_TRADE_ITEM>() {
    if (opcode == Opcode::CMSG_CLEAR_TRADE_ITEM) {
        return &CMSG_CLEAR_TRADE_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CLEAR_TRADE_ITEM& ClientOpcode::get<CMSG_CLEAR_TRADE_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CLEAR_TRADE_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TRADE_GOLD* ClientOpcode::get_if<CMSG_SET_TRADE_GOLD>() {
    if (opcode == Opcode::CMSG_SET_TRADE_GOLD) {
        return &CMSG_SET_TRADE_GOLD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TRADE_GOLD& ClientOpcode::get<CMSG_SET_TRADE_GOLD>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_TRADE_GOLD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_FACTION_ATWAR* ClientOpcode::get_if<CMSG_SET_FACTION_ATWAR>() {
    if (opcode == Opcode::CMSG_SET_FACTION_ATWAR) {
        return &CMSG_SET_FACTION_ATWAR;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_FACTION_ATWAR& ClientOpcode::get<CMSG_SET_FACTION_ATWAR>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_FACTION_ATWAR>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTION_BUTTON* ClientOpcode::get_if<CMSG_SET_ACTION_BUTTON>() {
    if (opcode == Opcode::CMSG_SET_ACTION_BUTTON) {
        return &CMSG_SET_ACTION_BUTTON;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTION_BUTTON& ClientOpcode::get<CMSG_SET_ACTION_BUTTON>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_ACTION_BUTTON>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CAST_SPELL* ClientOpcode::get_if<CMSG_CAST_SPELL>() {
    if (opcode == Opcode::CMSG_CAST_SPELL) {
        return &CMSG_CAST_SPELL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CAST_SPELL& ClientOpcode::get<CMSG_CAST_SPELL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CAST_SPELL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_CAST* ClientOpcode::get_if<CMSG_CANCEL_CAST>() {
    if (opcode == Opcode::CMSG_CANCEL_CAST) {
        return &CMSG_CANCEL_CAST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_CAST& ClientOpcode::get<CMSG_CANCEL_CAST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CANCEL_CAST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_AURA* ClientOpcode::get_if<CMSG_CANCEL_AURA>() {
    if (opcode == Opcode::CMSG_CANCEL_AURA) {
        return &CMSG_CANCEL_AURA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_AURA& ClientOpcode::get<CMSG_CANCEL_AURA>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CANCEL_AURA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_CHANNELLING* ClientOpcode::get_if<CMSG_CANCEL_CHANNELLING>() {
    if (opcode == Opcode::CMSG_CANCEL_CHANNELLING) {
        return &CMSG_CANCEL_CHANNELLING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_CHANNELLING& ClientOpcode::get<CMSG_CANCEL_CHANNELLING>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CANCEL_CHANNELLING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_SELECTION* ClientOpcode::get_if<CMSG_SET_SELECTION>() {
    if (opcode == Opcode::CMSG_SET_SELECTION) {
        return &CMSG_SET_SELECTION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_SELECTION& ClientOpcode::get<CMSG_SET_SELECTION>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_SELECTION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DELETEEQUIPMENT_SET* ClientOpcode::get_if<CMSG_DELETEEQUIPMENT_SET>() {
    if (opcode == Opcode::CMSG_DELETEEQUIPMENT_SET) {
        return &CMSG_DELETEEQUIPMENT_SET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DELETEEQUIPMENT_SET& ClientOpcode::get<CMSG_DELETEEQUIPMENT_SET>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_DELETEEQUIPMENT_SET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INSTANCE_LOCK_RESPONSE* ClientOpcode::get_if<CMSG_INSTANCE_LOCK_RESPONSE>() {
    if (opcode == Opcode::CMSG_INSTANCE_LOCK_RESPONSE) {
        return &CMSG_INSTANCE_LOCK_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_INSTANCE_LOCK_RESPONSE& ClientOpcode::get<CMSG_INSTANCE_LOCK_RESPONSE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_INSTANCE_LOCK_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ATTACKSWING* ClientOpcode::get_if<CMSG_ATTACKSWING>() {
    if (opcode == Opcode::CMSG_ATTACKSWING) {
        return &CMSG_ATTACKSWING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ATTACKSWING& ClientOpcode::get<CMSG_ATTACKSWING>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ATTACKSWING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ATTACKSTOP* ClientOpcode::get_if<CMSG_ATTACKSTOP>() {
    if (opcode == Opcode::CMSG_ATTACKSTOP) {
        return &CMSG_ATTACKSTOP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ATTACKSTOP& ClientOpcode::get<CMSG_ATTACKSTOP>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ATTACKSTOP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPOP_REQUEST* ClientOpcode::get_if<CMSG_REPOP_REQUEST>() {
    if (opcode == Opcode::CMSG_REPOP_REQUEST) {
        return &CMSG_REPOP_REQUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPOP_REQUEST& ClientOpcode::get<CMSG_REPOP_REQUEST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REPOP_REQUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RESURRECT_RESPONSE* ClientOpcode::get_if<CMSG_RESURRECT_RESPONSE>() {
    if (opcode == Opcode::CMSG_RESURRECT_RESPONSE) {
        return &CMSG_RESURRECT_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RESURRECT_RESPONSE& ClientOpcode::get<CMSG_RESURRECT_RESPONSE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_RESURRECT_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT* ClientOpcode::get_if<CMSG_LOOT>() {
    if (opcode == Opcode::CMSG_LOOT) {
        return &CMSG_LOOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT& ClientOpcode::get<CMSG_LOOT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LOOT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_MONEY* ClientOpcode::get_if<CMSG_LOOT_MONEY>() {
    if (opcode == Opcode::CMSG_LOOT_MONEY) {
        return &CMSG_LOOT_MONEY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_MONEY& ClientOpcode::get<CMSG_LOOT_MONEY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LOOT_MONEY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_RELEASE* ClientOpcode::get_if<CMSG_LOOT_RELEASE>() {
    if (opcode == Opcode::CMSG_LOOT_RELEASE) {
        return &CMSG_LOOT_RELEASE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_RELEASE& ClientOpcode::get<CMSG_LOOT_RELEASE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LOOT_RELEASE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DUEL_ACCEPTED* ClientOpcode::get_if<CMSG_DUEL_ACCEPTED>() {
    if (opcode == Opcode::CMSG_DUEL_ACCEPTED) {
        return &CMSG_DUEL_ACCEPTED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DUEL_ACCEPTED& ClientOpcode::get<CMSG_DUEL_ACCEPTED>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_DUEL_ACCEPTED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DUEL_CANCELLED* ClientOpcode::get_if<CMSG_DUEL_CANCELLED>() {
    if (opcode == Opcode::CMSG_DUEL_CANCELLED) {
        return &CMSG_DUEL_CANCELLED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DUEL_CANCELLED& ClientOpcode::get<CMSG_DUEL_CANCELLED>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_DUEL_CANCELLED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOUNTSPECIAL_ANIM* ClientOpcode::get_if<CMSG_MOUNTSPECIAL_ANIM>() {
    if (opcode == Opcode::CMSG_MOUNTSPECIAL_ANIM) {
        return &CMSG_MOUNTSPECIAL_ANIM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOUNTSPECIAL_ANIM& ClientOpcode::get<CMSG_MOUNTSPECIAL_ANIM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOUNTSPECIAL_ANIM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_SET_ACTION* ClientOpcode::get_if<CMSG_PET_SET_ACTION>() {
    if (opcode == Opcode::CMSG_PET_SET_ACTION) {
        return &CMSG_PET_SET_ACTION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_SET_ACTION& ClientOpcode::get<CMSG_PET_SET_ACTION>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_SET_ACTION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_ACTION* ClientOpcode::get_if<CMSG_PET_ACTION>() {
    if (opcode == Opcode::CMSG_PET_ACTION) {
        return &CMSG_PET_ACTION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_ACTION& ClientOpcode::get<CMSG_PET_ACTION>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_ACTION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_ABANDON* ClientOpcode::get_if<CMSG_PET_ABANDON>() {
    if (opcode == Opcode::CMSG_PET_ABANDON) {
        return &CMSG_PET_ABANDON;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_ABANDON& ClientOpcode::get<CMSG_PET_ABANDON>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_ABANDON>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_RENAME* ClientOpcode::get_if<CMSG_PET_RENAME>() {
    if (opcode == Opcode::CMSG_PET_RENAME) {
        return &CMSG_PET_RENAME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_RENAME& ClientOpcode::get<CMSG_PET_RENAME>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_RENAME>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GOSSIP_HELLO* ClientOpcode::get_if<CMSG_GOSSIP_HELLO>() {
    if (opcode == Opcode::CMSG_GOSSIP_HELLO) {
        return &CMSG_GOSSIP_HELLO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GOSSIP_HELLO& ClientOpcode::get<CMSG_GOSSIP_HELLO>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GOSSIP_HELLO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GOSSIP_SELECT_OPTION* ClientOpcode::get_if<CMSG_GOSSIP_SELECT_OPTION>() {
    if (opcode == Opcode::CMSG_GOSSIP_SELECT_OPTION) {
        return &CMSG_GOSSIP_SELECT_OPTION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GOSSIP_SELECT_OPTION& ClientOpcode::get<CMSG_GOSSIP_SELECT_OPTION>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GOSSIP_SELECT_OPTION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NPC_TEXT_QUERY* ClientOpcode::get_if<CMSG_NPC_TEXT_QUERY>() {
    if (opcode == Opcode::CMSG_NPC_TEXT_QUERY) {
        return &CMSG_NPC_TEXT_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_NPC_TEXT_QUERY& ClientOpcode::get<CMSG_NPC_TEXT_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_NPC_TEXT_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_STATUS_QUERY* ClientOpcode::get_if<CMSG_QUESTGIVER_STATUS_QUERY>() {
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_QUERY) {
        return &CMSG_QUESTGIVER_STATUS_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_STATUS_QUERY& ClientOpcode::get<CMSG_QUESTGIVER_STATUS_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTGIVER_STATUS_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_HELLO* ClientOpcode::get_if<CMSG_QUESTGIVER_HELLO>() {
    if (opcode == Opcode::CMSG_QUESTGIVER_HELLO) {
        return &CMSG_QUESTGIVER_HELLO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_HELLO& ClientOpcode::get<CMSG_QUESTGIVER_HELLO>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTGIVER_HELLO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_QUERY_QUEST* ClientOpcode::get_if<CMSG_QUESTGIVER_QUERY_QUEST>() {
    if (opcode == Opcode::CMSG_QUESTGIVER_QUERY_QUEST) {
        return &CMSG_QUESTGIVER_QUERY_QUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_QUERY_QUEST& ClientOpcode::get<CMSG_QUESTGIVER_QUERY_QUEST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTGIVER_QUERY_QUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH* ClientOpcode::get_if<CMSG_QUESTGIVER_QUEST_AUTOLAUNCH>() {
    if (opcode == Opcode::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) {
        return &CMSG_QUESTGIVER_QUEST_AUTOLAUNCH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH& ClientOpcode::get<CMSG_QUESTGIVER_QUEST_AUTOLAUNCH>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_ACCEPT_QUEST* ClientOpcode::get_if<CMSG_QUESTGIVER_ACCEPT_QUEST>() {
    if (opcode == Opcode::CMSG_QUESTGIVER_ACCEPT_QUEST) {
        return &CMSG_QUESTGIVER_ACCEPT_QUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_ACCEPT_QUEST& ClientOpcode::get<CMSG_QUESTGIVER_ACCEPT_QUEST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTGIVER_ACCEPT_QUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_COMPLETE_QUEST* ClientOpcode::get_if<CMSG_QUESTGIVER_COMPLETE_QUEST>() {
    if (opcode == Opcode::CMSG_QUESTGIVER_COMPLETE_QUEST) {
        return &CMSG_QUESTGIVER_COMPLETE_QUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_COMPLETE_QUEST& ClientOpcode::get<CMSG_QUESTGIVER_COMPLETE_QUEST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTGIVER_COMPLETE_QUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_REQUEST_REWARD* ClientOpcode::get_if<CMSG_QUESTGIVER_REQUEST_REWARD>() {
    if (opcode == Opcode::CMSG_QUESTGIVER_REQUEST_REWARD) {
        return &CMSG_QUESTGIVER_REQUEST_REWARD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_REQUEST_REWARD& ClientOpcode::get<CMSG_QUESTGIVER_REQUEST_REWARD>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTGIVER_REQUEST_REWARD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_CHOOSE_REWARD* ClientOpcode::get_if<CMSG_QUESTGIVER_CHOOSE_REWARD>() {
    if (opcode == Opcode::CMSG_QUESTGIVER_CHOOSE_REWARD) {
        return &CMSG_QUESTGIVER_CHOOSE_REWARD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_CHOOSE_REWARD& ClientOpcode::get<CMSG_QUESTGIVER_CHOOSE_REWARD>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTGIVER_CHOOSE_REWARD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_CANCEL* ClientOpcode::get_if<CMSG_QUESTGIVER_CANCEL>() {
    if (opcode == Opcode::CMSG_QUESTGIVER_CANCEL) {
        return &CMSG_QUESTGIVER_CANCEL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_CANCEL& ClientOpcode::get<CMSG_QUESTGIVER_CANCEL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTGIVER_CANCEL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTLOG_SWAP_QUEST* ClientOpcode::get_if<CMSG_QUESTLOG_SWAP_QUEST>() {
    if (opcode == Opcode::CMSG_QUESTLOG_SWAP_QUEST) {
        return &CMSG_QUESTLOG_SWAP_QUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTLOG_SWAP_QUEST& ClientOpcode::get<CMSG_QUESTLOG_SWAP_QUEST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTLOG_SWAP_QUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTLOG_REMOVE_QUEST* ClientOpcode::get_if<CMSG_QUESTLOG_REMOVE_QUEST>() {
    if (opcode == Opcode::CMSG_QUESTLOG_REMOVE_QUEST) {
        return &CMSG_QUESTLOG_REMOVE_QUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTLOG_REMOVE_QUEST& ClientOpcode::get<CMSG_QUESTLOG_REMOVE_QUEST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTLOG_REMOVE_QUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_CONFIRM_ACCEPT* ClientOpcode::get_if<CMSG_QUEST_CONFIRM_ACCEPT>() {
    if (opcode == Opcode::CMSG_QUEST_CONFIRM_ACCEPT) {
        return &CMSG_QUEST_CONFIRM_ACCEPT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_CONFIRM_ACCEPT& ClientOpcode::get<CMSG_QUEST_CONFIRM_ACCEPT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUEST_CONFIRM_ACCEPT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PUSHQUESTTOPARTY* ClientOpcode::get_if<CMSG_PUSHQUESTTOPARTY>() {
    if (opcode == Opcode::CMSG_PUSHQUESTTOPARTY) {
        return &CMSG_PUSHQUESTTOPARTY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PUSHQUESTTOPARTY& ClientOpcode::get<CMSG_PUSHQUESTTOPARTY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PUSHQUESTTOPARTY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LIST_INVENTORY* ClientOpcode::get_if<CMSG_LIST_INVENTORY>() {
    if (opcode == Opcode::CMSG_LIST_INVENTORY) {
        return &CMSG_LIST_INVENTORY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LIST_INVENTORY& ClientOpcode::get<CMSG_LIST_INVENTORY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LIST_INVENTORY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SELL_ITEM* ClientOpcode::get_if<CMSG_SELL_ITEM>() {
    if (opcode == Opcode::CMSG_SELL_ITEM) {
        return &CMSG_SELL_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SELL_ITEM& ClientOpcode::get<CMSG_SELL_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SELL_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_ITEM* ClientOpcode::get_if<CMSG_BUY_ITEM>() {
    if (opcode == Opcode::CMSG_BUY_ITEM) {
        return &CMSG_BUY_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_ITEM& ClientOpcode::get<CMSG_BUY_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BUY_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_ITEM_IN_SLOT* ClientOpcode::get_if<CMSG_BUY_ITEM_IN_SLOT>() {
    if (opcode == Opcode::CMSG_BUY_ITEM_IN_SLOT) {
        return &CMSG_BUY_ITEM_IN_SLOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_ITEM_IN_SLOT& ClientOpcode::get<CMSG_BUY_ITEM_IN_SLOT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BUY_ITEM_IN_SLOT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TAXINODE_STATUS_QUERY* ClientOpcode::get_if<CMSG_TAXINODE_STATUS_QUERY>() {
    if (opcode == Opcode::CMSG_TAXINODE_STATUS_QUERY) {
        return &CMSG_TAXINODE_STATUS_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TAXINODE_STATUS_QUERY& ClientOpcode::get<CMSG_TAXINODE_STATUS_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TAXINODE_STATUS_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TAXIQUERYAVAILABLENODES* ClientOpcode::get_if<CMSG_TAXIQUERYAVAILABLENODES>() {
    if (opcode == Opcode::CMSG_TAXIQUERYAVAILABLENODES) {
        return &CMSG_TAXIQUERYAVAILABLENODES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TAXIQUERYAVAILABLENODES& ClientOpcode::get<CMSG_TAXIQUERYAVAILABLENODES>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TAXIQUERYAVAILABLENODES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACTIVATETAXI* ClientOpcode::get_if<CMSG_ACTIVATETAXI>() {
    if (opcode == Opcode::CMSG_ACTIVATETAXI) {
        return &CMSG_ACTIVATETAXI;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACTIVATETAXI& ClientOpcode::get<CMSG_ACTIVATETAXI>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ACTIVATETAXI>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TRAINER_LIST* ClientOpcode::get_if<CMSG_TRAINER_LIST>() {
    if (opcode == Opcode::CMSG_TRAINER_LIST) {
        return &CMSG_TRAINER_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TRAINER_LIST& ClientOpcode::get<CMSG_TRAINER_LIST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TRAINER_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TRAINER_BUY_SPELL* ClientOpcode::get_if<CMSG_TRAINER_BUY_SPELL>() {
    if (opcode == Opcode::CMSG_TRAINER_BUY_SPELL) {
        return &CMSG_TRAINER_BUY_SPELL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TRAINER_BUY_SPELL& ClientOpcode::get<CMSG_TRAINER_BUY_SPELL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TRAINER_BUY_SPELL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BINDER_ACTIVATE* ClientOpcode::get_if<CMSG_BINDER_ACTIVATE>() {
    if (opcode == Opcode::CMSG_BINDER_ACTIVATE) {
        return &CMSG_BINDER_ACTIVATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BINDER_ACTIVATE& ClientOpcode::get<CMSG_BINDER_ACTIVATE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BINDER_ACTIVATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BANKER_ACTIVATE* ClientOpcode::get_if<CMSG_BANKER_ACTIVATE>() {
    if (opcode == Opcode::CMSG_BANKER_ACTIVATE) {
        return &CMSG_BANKER_ACTIVATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BANKER_ACTIVATE& ClientOpcode::get<CMSG_BANKER_ACTIVATE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BANKER_ACTIVATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_BANK_SLOT* ClientOpcode::get_if<CMSG_BUY_BANK_SLOT>() {
    if (opcode == Opcode::CMSG_BUY_BANK_SLOT) {
        return &CMSG_BUY_BANK_SLOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_BANK_SLOT& ClientOpcode::get<CMSG_BUY_BANK_SLOT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BUY_BANK_SLOT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SHOWLIST* ClientOpcode::get_if<CMSG_PETITION_SHOWLIST>() {
    if (opcode == Opcode::CMSG_PETITION_SHOWLIST) {
        return &CMSG_PETITION_SHOWLIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SHOWLIST& ClientOpcode::get<CMSG_PETITION_SHOWLIST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PETITION_SHOWLIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_BUY* ClientOpcode::get_if<CMSG_PETITION_BUY>() {
    if (opcode == Opcode::CMSG_PETITION_BUY) {
        return &CMSG_PETITION_BUY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_BUY& ClientOpcode::get<CMSG_PETITION_BUY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PETITION_BUY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SHOW_SIGNATURES* ClientOpcode::get_if<CMSG_PETITION_SHOW_SIGNATURES>() {
    if (opcode == Opcode::CMSG_PETITION_SHOW_SIGNATURES) {
        return &CMSG_PETITION_SHOW_SIGNATURES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SHOW_SIGNATURES& ClientOpcode::get<CMSG_PETITION_SHOW_SIGNATURES>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PETITION_SHOW_SIGNATURES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SIGN* ClientOpcode::get_if<CMSG_PETITION_SIGN>() {
    if (opcode == Opcode::CMSG_PETITION_SIGN) {
        return &CMSG_PETITION_SIGN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_SIGN& ClientOpcode::get<CMSG_PETITION_SIGN>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PETITION_SIGN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_DECLINE* ClientOpcode::get_if<MSG_PETITION_DECLINE>() {
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        return &MSG_PETITION_DECLINE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_DECLINE& ClientOpcode::get<MSG_PETITION_DECLINE>() {
    auto p = ClientOpcode::get_if<wrath::MSG_PETITION_DECLINE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OFFER_PETITION* ClientOpcode::get_if<CMSG_OFFER_PETITION>() {
    if (opcode == Opcode::CMSG_OFFER_PETITION) {
        return &CMSG_OFFER_PETITION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OFFER_PETITION& ClientOpcode::get<CMSG_OFFER_PETITION>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_OFFER_PETITION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TURN_IN_PETITION* ClientOpcode::get_if<CMSG_TURN_IN_PETITION>() {
    if (opcode == Opcode::CMSG_TURN_IN_PETITION) {
        return &CMSG_TURN_IN_PETITION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TURN_IN_PETITION& ClientOpcode::get<CMSG_TURN_IN_PETITION>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TURN_IN_PETITION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_QUERY* ClientOpcode::get_if<CMSG_PETITION_QUERY>() {
    if (opcode == Opcode::CMSG_PETITION_QUERY) {
        return &CMSG_PETITION_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PETITION_QUERY& ClientOpcode::get<CMSG_PETITION_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PETITION_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUG* ClientOpcode::get_if<CMSG_BUG>() {
    if (opcode == Opcode::CMSG_BUG) {
        return &CMSG_BUG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUG& ClientOpcode::get<CMSG_BUG>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BUG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYED_TIME* ClientOpcode::get_if<CMSG_PLAYED_TIME>() {
    if (opcode == Opcode::CMSG_PLAYED_TIME) {
        return &CMSG_PLAYED_TIME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYED_TIME& ClientOpcode::get<CMSG_PLAYED_TIME>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PLAYED_TIME>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_TIME* ClientOpcode::get_if<CMSG_QUERY_TIME>() {
    if (opcode == Opcode::CMSG_QUERY_TIME) {
        return &CMSG_QUERY_TIME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_TIME& ClientOpcode::get<CMSG_QUERY_TIME>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUERY_TIME>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RECLAIM_CORPSE* ClientOpcode::get_if<CMSG_RECLAIM_CORPSE>() {
    if (opcode == Opcode::CMSG_RECLAIM_CORPSE) {
        return &CMSG_RECLAIM_CORPSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RECLAIM_CORPSE& ClientOpcode::get<CMSG_RECLAIM_CORPSE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_RECLAIM_CORPSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WRAP_ITEM* ClientOpcode::get_if<CMSG_WRAP_ITEM>() {
    if (opcode == Opcode::CMSG_WRAP_ITEM) {
        return &CMSG_WRAP_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WRAP_ITEM& ClientOpcode::get<CMSG_WRAP_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_WRAP_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MINIMAP_PING_Client* ClientOpcode::get_if<MSG_MINIMAP_PING_Client>() {
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        return &MSG_MINIMAP_PING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MINIMAP_PING_Client& ClientOpcode::get<MSG_MINIMAP_PING_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MINIMAP_PING_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PING* ClientOpcode::get_if<CMSG_PING>() {
    if (opcode == Opcode::CMSG_PING) {
        return &CMSG_PING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PING& ClientOpcode::get<CMSG_PING>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SETSHEATHED* ClientOpcode::get_if<CMSG_SETSHEATHED>() {
    if (opcode == Opcode::CMSG_SETSHEATHED) {
        return &CMSG_SETSHEATHED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SETSHEATHED& ClientOpcode::get<CMSG_SETSHEATHED>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SETSHEATHED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_POI_QUERY* ClientOpcode::get_if<CMSG_QUEST_POI_QUERY>() {
    if (opcode == Opcode::CMSG_QUEST_POI_QUERY) {
        return &CMSG_QUEST_POI_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUEST_POI_QUERY& ClientOpcode::get<CMSG_QUEST_POI_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUEST_POI_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTH_SESSION* ClientOpcode::get_if<CMSG_AUTH_SESSION>() {
    if (opcode == Opcode::CMSG_AUTH_SESSION) {
        return &CMSG_AUTH_SESSION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTH_SESSION& ClientOpcode::get<CMSG_AUTH_SESSION>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUTH_SESSION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_CAST_SPELL* ClientOpcode::get_if<CMSG_PET_CAST_SPELL>() {
    if (opcode == Opcode::CMSG_PET_CAST_SPELL) {
        return &CMSG_PET_CAST_SPELL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_CAST_SPELL& ClientOpcode::get<CMSG_PET_CAST_SPELL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_CAST_SPELL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SAVE_GUILD_EMBLEM_Client* ClientOpcode::get_if<MSG_SAVE_GUILD_EMBLEM_Client>() {
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        return &MSG_SAVE_GUILD_EMBLEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SAVE_GUILD_EMBLEM_Client& ClientOpcode::get<MSG_SAVE_GUILD_EMBLEM_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_SAVE_GUILD_EMBLEM_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TABARDVENDOR_ACTIVATE* ClientOpcode::get_if<MSG_TABARDVENDOR_ACTIVATE>() {
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        return &MSG_TABARDVENDOR_ACTIVATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TABARDVENDOR_ACTIVATE& ClientOpcode::get<MSG_TABARDVENDOR_ACTIVATE>() {
    auto p = ClientOpcode::get_if<wrath::MSG_TABARDVENDOR_ACTIVATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ZONEUPDATE* ClientOpcode::get_if<CMSG_ZONEUPDATE>() {
    if (opcode == Opcode::CMSG_ZONEUPDATE) {
        return &CMSG_ZONEUPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ZONEUPDATE& ClientOpcode::get<CMSG_ZONEUPDATE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ZONEUPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RANDOM_ROLL_Client* ClientOpcode::get_if<MSG_RANDOM_ROLL_Client>() {
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        return &MSG_RANDOM_ROLL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RANDOM_ROLL_Client& ClientOpcode::get<MSG_RANDOM_ROLL_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_RANDOM_ROLL_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNLEARN_SKILL* ClientOpcode::get_if<CMSG_UNLEARN_SKILL>() {
    if (opcode == Opcode::CMSG_UNLEARN_SKILL) {
        return &CMSG_UNLEARN_SKILL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNLEARN_SKILL& ClientOpcode::get<CMSG_UNLEARN_SKILL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_UNLEARN_SKILL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_CREATE* ClientOpcode::get_if<CMSG_GMTICKET_CREATE>() {
    if (opcode == Opcode::CMSG_GMTICKET_CREATE) {
        return &CMSG_GMTICKET_CREATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_CREATE& ClientOpcode::get<CMSG_GMTICKET_CREATE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GMTICKET_CREATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_UPDATETEXT* ClientOpcode::get_if<CMSG_GMTICKET_UPDATETEXT>() {
    if (opcode == Opcode::CMSG_GMTICKET_UPDATETEXT) {
        return &CMSG_GMTICKET_UPDATETEXT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_UPDATETEXT& ClientOpcode::get<CMSG_GMTICKET_UPDATETEXT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GMTICKET_UPDATETEXT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_ACCOUNT_DATA* ClientOpcode::get_if<CMSG_REQUEST_ACCOUNT_DATA>() {
    if (opcode == Opcode::CMSG_REQUEST_ACCOUNT_DATA) {
        return &CMSG_REQUEST_ACCOUNT_DATA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_ACCOUNT_DATA& ClientOpcode::get<CMSG_REQUEST_ACCOUNT_DATA>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REQUEST_ACCOUNT_DATA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_ACCOUNT_DATA* ClientOpcode::get_if<CMSG_UPDATE_ACCOUNT_DATA>() {
    if (opcode == Opcode::CMSG_UPDATE_ACCOUNT_DATA) {
        return &CMSG_UPDATE_ACCOUNT_DATA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_ACCOUNT_DATA& ClientOpcode::get<CMSG_UPDATE_ACCOUNT_DATA>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_UPDATE_ACCOUNT_DATA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_GETTICKET* ClientOpcode::get_if<CMSG_GMTICKET_GETTICKET>() {
    if (opcode == Opcode::CMSG_GMTICKET_GETTICKET) {
        return &CMSG_GMTICKET_GETTICKET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_GETTICKET& ClientOpcode::get<CMSG_GMTICKET_GETTICKET>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GMTICKET_GETTICKET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNLEARN_TALENTS* ClientOpcode::get_if<CMSG_UNLEARN_TALENTS>() {
    if (opcode == Opcode::CMSG_UNLEARN_TALENTS) {
        return &CMSG_UNLEARN_TALENTS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNLEARN_TALENTS& ClientOpcode::get<CMSG_UNLEARN_TALENTS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_UNLEARN_TALENTS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CORPSE_QUERY_Client* ClientOpcode::get_if<MSG_CORPSE_QUERY_Client>() {
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        return &MSG_CORPSE_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CORPSE_QUERY_Client& ClientOpcode::get<MSG_CORPSE_QUERY_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_CORPSE_QUERY_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_DELETETICKET* ClientOpcode::get_if<CMSG_GMTICKET_DELETETICKET>() {
    if (opcode == Opcode::CMSG_GMTICKET_DELETETICKET) {
        return &CMSG_GMTICKET_DELETETICKET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_DELETETICKET& ClientOpcode::get<CMSG_GMTICKET_DELETETICKET>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GMTICKET_DELETETICKET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_SYSTEMSTATUS* ClientOpcode::get_if<CMSG_GMTICKET_SYSTEMSTATUS>() {
    if (opcode == Opcode::CMSG_GMTICKET_SYSTEMSTATUS) {
        return &CMSG_GMTICKET_SYSTEMSTATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKET_SYSTEMSTATUS& ClientOpcode::get<CMSG_GMTICKET_SYSTEMSTATUS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GMTICKET_SYSTEMSTATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPIRIT_HEALER_ACTIVATE* ClientOpcode::get_if<CMSG_SPIRIT_HEALER_ACTIVATE>() {
    if (opcode == Opcode::CMSG_SPIRIT_HEALER_ACTIVATE) {
        return &CMSG_SPIRIT_HEALER_ACTIVATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPIRIT_HEALER_ACTIVATE& ClientOpcode::get<CMSG_SPIRIT_HEALER_ACTIVATE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SPIRIT_HEALER_ACTIVATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAT_IGNORED* ClientOpcode::get_if<CMSG_CHAT_IGNORED>() {
    if (opcode == Opcode::CMSG_CHAT_IGNORED) {
        return &CMSG_CHAT_IGNORED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAT_IGNORED& ClientOpcode::get<CMSG_CHAT_IGNORED>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHAT_IGNORED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_RANK* ClientOpcode::get_if<CMSG_GUILD_RANK>() {
    if (opcode == Opcode::CMSG_GUILD_RANK) {
        return &CMSG_GUILD_RANK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_RANK& ClientOpcode::get<CMSG_GUILD_RANK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_RANK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ADD_RANK* ClientOpcode::get_if<CMSG_GUILD_ADD_RANK>() {
    if (opcode == Opcode::CMSG_GUILD_ADD_RANK) {
        return &CMSG_GUILD_ADD_RANK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_ADD_RANK& ClientOpcode::get<CMSG_GUILD_ADD_RANK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_ADD_RANK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DEL_RANK* ClientOpcode::get_if<CMSG_GUILD_DEL_RANK>() {
    if (opcode == Opcode::CMSG_GUILD_DEL_RANK) {
        return &CMSG_GUILD_DEL_RANK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_DEL_RANK& ClientOpcode::get<CMSG_GUILD_DEL_RANK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_DEL_RANK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_SET_PUBLIC_NOTE* ClientOpcode::get_if<CMSG_GUILD_SET_PUBLIC_NOTE>() {
    if (opcode == Opcode::CMSG_GUILD_SET_PUBLIC_NOTE) {
        return &CMSG_GUILD_SET_PUBLIC_NOTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_SET_PUBLIC_NOTE& ClientOpcode::get<CMSG_GUILD_SET_PUBLIC_NOTE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_SET_PUBLIC_NOTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_SET_OFFICER_NOTE* ClientOpcode::get_if<CMSG_GUILD_SET_OFFICER_NOTE>() {
    if (opcode == Opcode::CMSG_GUILD_SET_OFFICER_NOTE) {
        return &CMSG_GUILD_SET_OFFICER_NOTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_SET_OFFICER_NOTE& ClientOpcode::get<CMSG_GUILD_SET_OFFICER_NOTE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_SET_OFFICER_NOTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEND_MAIL* ClientOpcode::get_if<CMSG_SEND_MAIL>() {
    if (opcode == Opcode::CMSG_SEND_MAIL) {
        return &CMSG_SEND_MAIL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEND_MAIL& ClientOpcode::get<CMSG_SEND_MAIL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SEND_MAIL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_MAIL_LIST* ClientOpcode::get_if<CMSG_GET_MAIL_LIST>() {
    if (opcode == Opcode::CMSG_GET_MAIL_LIST) {
        return &CMSG_GET_MAIL_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_MAIL_LIST& ClientOpcode::get<CMSG_GET_MAIL_LIST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GET_MAIL_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_LIST* ClientOpcode::get_if<CMSG_BATTLEFIELD_LIST>() {
    if (opcode == Opcode::CMSG_BATTLEFIELD_LIST) {
        return &CMSG_BATTLEFIELD_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_LIST& ClientOpcode::get<CMSG_BATTLEFIELD_LIST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BATTLEFIELD_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_TEXT_QUERY* ClientOpcode::get_if<CMSG_ITEM_TEXT_QUERY>() {
    if (opcode == Opcode::CMSG_ITEM_TEXT_QUERY) {
        return &CMSG_ITEM_TEXT_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_TEXT_QUERY& ClientOpcode::get<CMSG_ITEM_TEXT_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ITEM_TEXT_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_TAKE_MONEY* ClientOpcode::get_if<CMSG_MAIL_TAKE_MONEY>() {
    if (opcode == Opcode::CMSG_MAIL_TAKE_MONEY) {
        return &CMSG_MAIL_TAKE_MONEY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_TAKE_MONEY& ClientOpcode::get<CMSG_MAIL_TAKE_MONEY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MAIL_TAKE_MONEY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_TAKE_ITEM* ClientOpcode::get_if<CMSG_MAIL_TAKE_ITEM>() {
    if (opcode == Opcode::CMSG_MAIL_TAKE_ITEM) {
        return &CMSG_MAIL_TAKE_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_TAKE_ITEM& ClientOpcode::get<CMSG_MAIL_TAKE_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MAIL_TAKE_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_MARK_AS_READ* ClientOpcode::get_if<CMSG_MAIL_MARK_AS_READ>() {
    if (opcode == Opcode::CMSG_MAIL_MARK_AS_READ) {
        return &CMSG_MAIL_MARK_AS_READ;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_MARK_AS_READ& ClientOpcode::get<CMSG_MAIL_MARK_AS_READ>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MAIL_MARK_AS_READ>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_RETURN_TO_SENDER* ClientOpcode::get_if<CMSG_MAIL_RETURN_TO_SENDER>() {
    if (opcode == Opcode::CMSG_MAIL_RETURN_TO_SENDER) {
        return &CMSG_MAIL_RETURN_TO_SENDER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_RETURN_TO_SENDER& ClientOpcode::get<CMSG_MAIL_RETURN_TO_SENDER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MAIL_RETURN_TO_SENDER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_DELETE* ClientOpcode::get_if<CMSG_MAIL_DELETE>() {
    if (opcode == Opcode::CMSG_MAIL_DELETE) {
        return &CMSG_MAIL_DELETE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_DELETE& ClientOpcode::get<CMSG_MAIL_DELETE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MAIL_DELETE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_CREATE_TEXT_ITEM* ClientOpcode::get_if<CMSG_MAIL_CREATE_TEXT_ITEM>() {
    if (opcode == Opcode::CMSG_MAIL_CREATE_TEXT_ITEM) {
        return &CMSG_MAIL_CREATE_TEXT_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MAIL_CREATE_TEXT_ITEM& ClientOpcode::get<CMSG_MAIL_CREATE_TEXT_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MAIL_CREATE_TEXT_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_TALENT* ClientOpcode::get_if<CMSG_LEARN_TALENT>() {
    if (opcode == Opcode::CMSG_LEARN_TALENT) {
        return &CMSG_LEARN_TALENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_TALENT& ClientOpcode::get<CMSG_LEARN_TALENT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LEARN_TALENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_PVP* ClientOpcode::get_if<CMSG_TOGGLE_PVP>() {
    if (opcode == Opcode::CMSG_TOGGLE_PVP) {
        return &CMSG_TOGGLE_PVP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_PVP& ClientOpcode::get<CMSG_TOGGLE_PVP>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TOGGLE_PVP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_AUCTION_HELLO_Client* ClientOpcode::get_if<MSG_AUCTION_HELLO_Client>() {
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        return &MSG_AUCTION_HELLO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_AUCTION_HELLO_Client& ClientOpcode::get<MSG_AUCTION_HELLO_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_AUCTION_HELLO_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_SELL_ITEM* ClientOpcode::get_if<CMSG_AUCTION_SELL_ITEM>() {
    if (opcode == Opcode::CMSG_AUCTION_SELL_ITEM) {
        return &CMSG_AUCTION_SELL_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_SELL_ITEM& ClientOpcode::get<CMSG_AUCTION_SELL_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUCTION_SELL_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_REMOVE_ITEM* ClientOpcode::get_if<CMSG_AUCTION_REMOVE_ITEM>() {
    if (opcode == Opcode::CMSG_AUCTION_REMOVE_ITEM) {
        return &CMSG_AUCTION_REMOVE_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_REMOVE_ITEM& ClientOpcode::get<CMSG_AUCTION_REMOVE_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUCTION_REMOVE_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_ITEMS* ClientOpcode::get_if<CMSG_AUCTION_LIST_ITEMS>() {
    if (opcode == Opcode::CMSG_AUCTION_LIST_ITEMS) {
        return &CMSG_AUCTION_LIST_ITEMS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_ITEMS& ClientOpcode::get<CMSG_AUCTION_LIST_ITEMS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUCTION_LIST_ITEMS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_OWNER_ITEMS* ClientOpcode::get_if<CMSG_AUCTION_LIST_OWNER_ITEMS>() {
    if (opcode == Opcode::CMSG_AUCTION_LIST_OWNER_ITEMS) {
        return &CMSG_AUCTION_LIST_OWNER_ITEMS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_OWNER_ITEMS& ClientOpcode::get<CMSG_AUCTION_LIST_OWNER_ITEMS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUCTION_LIST_OWNER_ITEMS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_PLACE_BID* ClientOpcode::get_if<CMSG_AUCTION_PLACE_BID>() {
    if (opcode == Opcode::CMSG_AUCTION_PLACE_BID) {
        return &CMSG_AUCTION_PLACE_BID;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_PLACE_BID& ClientOpcode::get<CMSG_AUCTION_PLACE_BID>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUCTION_PLACE_BID>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS* ClientOpcode::get_if<CMSG_AUCTION_LIST_BIDDER_ITEMS>() {
    if (opcode == Opcode::CMSG_AUCTION_LIST_BIDDER_ITEMS) {
        return &CMSG_AUCTION_LIST_BIDDER_ITEMS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS& ClientOpcode::get<CMSG_AUCTION_LIST_BIDDER_ITEMS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUCTION_LIST_BIDDER_ITEMS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_AMMO* ClientOpcode::get_if<CMSG_SET_AMMO>() {
    if (opcode == Opcode::CMSG_SET_AMMO) {
        return &CMSG_SET_AMMO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_AMMO& ClientOpcode::get<CMSG_SET_AMMO>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_AMMO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIVE_MOVER* ClientOpcode::get_if<CMSG_SET_ACTIVE_MOVER>() {
    if (opcode == Opcode::CMSG_SET_ACTIVE_MOVER) {
        return &CMSG_SET_ACTIVE_MOVER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIVE_MOVER& ClientOpcode::get<CMSG_SET_ACTIVE_MOVER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_ACTIVE_MOVER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_CANCEL_AURA* ClientOpcode::get_if<CMSG_PET_CANCEL_AURA>() {
    if (opcode == Opcode::CMSG_PET_CANCEL_AURA) {
        return &CMSG_PET_CANCEL_AURA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_CANCEL_AURA& ClientOpcode::get<CMSG_PET_CANCEL_AURA>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_CANCEL_AURA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL* ClientOpcode::get_if<CMSG_CANCEL_AUTO_REPEAT_SPELL>() {
    if (opcode == Opcode::CMSG_CANCEL_AUTO_REPEAT_SPELL) {
        return &CMSG_CANCEL_AUTO_REPEAT_SPELL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL& ClientOpcode::get<CMSG_CANCEL_AUTO_REPEAT_SPELL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CANCEL_AUTO_REPEAT_SPELL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_LIST_STABLED_PETS_Client* ClientOpcode::get_if<MSG_LIST_STABLED_PETS_Client>() {
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        return &MSG_LIST_STABLED_PETS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_LIST_STABLED_PETS_Client& ClientOpcode::get<MSG_LIST_STABLED_PETS_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_LIST_STABLED_PETS_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STABLE_PET* ClientOpcode::get_if<CMSG_STABLE_PET>() {
    if (opcode == Opcode::CMSG_STABLE_PET) {
        return &CMSG_STABLE_PET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STABLE_PET& ClientOpcode::get<CMSG_STABLE_PET>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_STABLE_PET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNSTABLE_PET* ClientOpcode::get_if<CMSG_UNSTABLE_PET>() {
    if (opcode == Opcode::CMSG_UNSTABLE_PET) {
        return &CMSG_UNSTABLE_PET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UNSTABLE_PET& ClientOpcode::get<CMSG_UNSTABLE_PET>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_UNSTABLE_PET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_STABLE_SLOT* ClientOpcode::get_if<CMSG_BUY_STABLE_SLOT>() {
    if (opcode == Opcode::CMSG_BUY_STABLE_SLOT) {
        return &CMSG_BUY_STABLE_SLOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUY_STABLE_SLOT& ClientOpcode::get<CMSG_BUY_STABLE_SLOT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BUY_STABLE_SLOT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STABLE_SWAP_PET* ClientOpcode::get_if<CMSG_STABLE_SWAP_PET>() {
    if (opcode == Opcode::CMSG_STABLE_SWAP_PET) {
        return &CMSG_STABLE_SWAP_PET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_STABLE_SWAP_PET& ClientOpcode::get<CMSG_STABLE_SWAP_PET>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_STABLE_SWAP_PET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUEST_PUSH_RESULT* ClientOpcode::get_if<MSG_QUEST_PUSH_RESULT>() {
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        return &MSG_QUEST_PUSH_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUEST_PUSH_RESULT& ClientOpcode::get<MSG_QUEST_PUSH_RESULT>() {
    auto p = ClientOpcode::get_if<wrath::MSG_QUEST_PUSH_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_PET_INFO* ClientOpcode::get_if<CMSG_REQUEST_PET_INFO>() {
    if (opcode == Opcode::CMSG_REQUEST_PET_INFO) {
        return &CMSG_REQUEST_PET_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_PET_INFO& ClientOpcode::get<CMSG_REQUEST_PET_INFO>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REQUEST_PET_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FAR_SIGHT* ClientOpcode::get_if<CMSG_FAR_SIGHT>() {
    if (opcode == Opcode::CMSG_FAR_SIGHT) {
        return &CMSG_FAR_SIGHT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FAR_SIGHT& ClientOpcode::get<CMSG_FAR_SIGHT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FAR_SIGHT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_CHANGE_SUB_GROUP* ClientOpcode::get_if<CMSG_GROUP_CHANGE_SUB_GROUP>() {
    if (opcode == Opcode::CMSG_GROUP_CHANGE_SUB_GROUP) {
        return &CMSG_GROUP_CHANGE_SUB_GROUP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_CHANGE_SUB_GROUP& ClientOpcode::get<CMSG_GROUP_CHANGE_SUB_GROUP>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_CHANGE_SUB_GROUP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_PARTY_MEMBER_STATS* ClientOpcode::get_if<CMSG_REQUEST_PARTY_MEMBER_STATS>() {
    if (opcode == Opcode::CMSG_REQUEST_PARTY_MEMBER_STATS) {
        return &CMSG_REQUEST_PARTY_MEMBER_STATS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_PARTY_MEMBER_STATS& ClientOpcode::get<CMSG_REQUEST_PARTY_MEMBER_STATS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REQUEST_PARTY_MEMBER_STATS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_SWAP_SUB_GROUP* ClientOpcode::get_if<CMSG_GROUP_SWAP_SUB_GROUP>() {
    if (opcode == Opcode::CMSG_GROUP_SWAP_SUB_GROUP) {
        return &CMSG_GROUP_SWAP_SUB_GROUP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_SWAP_SUB_GROUP& ClientOpcode::get<CMSG_GROUP_SWAP_SUB_GROUP>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_SWAP_SUB_GROUP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_BANK_ITEM* ClientOpcode::get_if<CMSG_AUTOSTORE_BANK_ITEM>() {
    if (opcode == Opcode::CMSG_AUTOSTORE_BANK_ITEM) {
        return &CMSG_AUTOSTORE_BANK_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOSTORE_BANK_ITEM& ClientOpcode::get<CMSG_AUTOSTORE_BANK_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUTOSTORE_BANK_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOBANK_ITEM* ClientOpcode::get_if<CMSG_AUTOBANK_ITEM>() {
    if (opcode == Opcode::CMSG_AUTOBANK_ITEM) {
        return &CMSG_AUTOBANK_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUTOBANK_ITEM& ClientOpcode::get<CMSG_AUTOBANK_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUTOBANK_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_NEXT_MAIL_TIME_Client* ClientOpcode::get_if<MSG_QUERY_NEXT_MAIL_TIME_Client>() {
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        return &MSG_QUERY_NEXT_MAIL_TIME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_NEXT_MAIL_TIME_Client& ClientOpcode::get<MSG_QUERY_NEXT_MAIL_TIME_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_QUERY_NEXT_MAIL_TIME_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_RAID_CONVERT* ClientOpcode::get_if<CMSG_GROUP_RAID_CONVERT>() {
    if (opcode == Opcode::CMSG_GROUP_RAID_CONVERT) {
        return &CMSG_GROUP_RAID_CONVERT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_RAID_CONVERT& ClientOpcode::get<CMSG_GROUP_RAID_CONVERT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_RAID_CONVERT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_ASSISTANT_LEADER* ClientOpcode::get_if<CMSG_GROUP_ASSISTANT_LEADER>() {
    if (opcode == Opcode::CMSG_GROUP_ASSISTANT_LEADER) {
        return &CMSG_GROUP_ASSISTANT_LEADER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GROUP_ASSISTANT_LEADER& ClientOpcode::get<CMSG_GROUP_ASSISTANT_LEADER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GROUP_ASSISTANT_LEADER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUYBACK_ITEM* ClientOpcode::get_if<CMSG_BUYBACK_ITEM>() {
    if (opcode == Opcode::CMSG_BUYBACK_ITEM) {
        return &CMSG_BUYBACK_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BUYBACK_ITEM& ClientOpcode::get<CMSG_BUYBACK_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BUYBACK_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_SAVED_INSTANCE_EXTEND* ClientOpcode::get_if<CMSG_SET_SAVED_INSTANCE_EXTEND>() {
    if (opcode == Opcode::CMSG_SET_SAVED_INSTANCE_EXTEND) {
        return &CMSG_SET_SAVED_INSTANCE_EXTEND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_SAVED_INSTANCE_EXTEND& ClientOpcode::get<CMSG_SET_SAVED_INSTANCE_EXTEND>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_SAVED_INSTANCE_EXTEND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_GET_STATUS* ClientOpcode::get_if<CMSG_LFG_GET_STATUS>() {
    if (opcode == Opcode::CMSG_LFG_GET_STATUS) {
        return &CMSG_LFG_GET_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_GET_STATUS& ClientOpcode::get<CMSG_LFG_GET_STATUS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LFG_GET_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKETSYSTEM_TOGGLE* ClientOpcode::get_if<CMSG_GMTICKETSYSTEM_TOGGLE>() {
    if (opcode == Opcode::CMSG_GMTICKETSYSTEM_TOGGLE) {
        return &CMSG_GMTICKETSYSTEM_TOGGLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMTICKETSYSTEM_TOGGLE& ClientOpcode::get<CMSG_GMTICKETSYSTEM_TOGGLE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GMTICKETSYSTEM_TOGGLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_GROWTH_AURA* ClientOpcode::get_if<CMSG_CANCEL_GROWTH_AURA>() {
    if (opcode == Opcode::CMSG_CANCEL_GROWTH_AURA) {
        return &CMSG_CANCEL_GROWTH_AURA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_GROWTH_AURA& ClientOpcode::get<CMSG_CANCEL_GROWTH_AURA>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CANCEL_GROWTH_AURA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_ROLL* ClientOpcode::get_if<CMSG_LOOT_ROLL>() {
    if (opcode == Opcode::CMSG_LOOT_ROLL) {
        return &CMSG_LOOT_ROLL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_ROLL& ClientOpcode::get<CMSG_LOOT_ROLL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LOOT_ROLL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_MASTER_GIVE* ClientOpcode::get_if<CMSG_LOOT_MASTER_GIVE>() {
    if (opcode == Opcode::CMSG_LOOT_MASTER_GIVE) {
        return &CMSG_LOOT_MASTER_GIVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LOOT_MASTER_GIVE& ClientOpcode::get<CMSG_LOOT_MASTER_GIVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LOOT_MASTER_GIVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPAIR_ITEM* ClientOpcode::get_if<CMSG_REPAIR_ITEM>() {
    if (opcode == Opcode::CMSG_REPAIR_ITEM) {
        return &CMSG_REPAIR_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPAIR_ITEM& ClientOpcode::get<CMSG_REPAIR_ITEM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REPAIR_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TALENT_WIPE_CONFIRM_Client* ClientOpcode::get_if<MSG_TALENT_WIPE_CONFIRM_Client>() {
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        return &MSG_TALENT_WIPE_CONFIRM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TALENT_WIPE_CONFIRM_Client& ClientOpcode::get<MSG_TALENT_WIPE_CONFIRM_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_TALENT_WIPE_CONFIRM_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SUMMON_RESPONSE* ClientOpcode::get_if<CMSG_SUMMON_RESPONSE>() {
    if (opcode == Opcode::CMSG_SUMMON_RESPONSE) {
        return &CMSG_SUMMON_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SUMMON_RESPONSE& ClientOpcode::get<CMSG_SUMMON_RESPONSE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SUMMON_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WATER_WALK* ClientOpcode::get_if<MSG_MOVE_WATER_WALK>() {
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        return &MSG_MOVE_WATER_WALK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WATER_WALK& ClientOpcode::get<MSG_MOVE_WATER_WALK>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_WATER_WALK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SELF_RES* ClientOpcode::get_if<CMSG_SELF_RES>() {
    if (opcode == Opcode::CMSG_SELF_RES) {
        return &CMSG_SELF_RES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SELF_RES& ClientOpcode::get<CMSG_SELF_RES>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SELF_RES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_HELM* ClientOpcode::get_if<CMSG_TOGGLE_HELM>() {
    if (opcode == Opcode::CMSG_TOGGLE_HELM) {
        return &CMSG_TOGGLE_HELM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_HELM& ClientOpcode::get<CMSG_TOGGLE_HELM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TOGGLE_HELM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_CLOAK* ClientOpcode::get_if<CMSG_TOGGLE_CLOAK>() {
    if (opcode == Opcode::CMSG_TOGGLE_CLOAK) {
        return &CMSG_TOGGLE_CLOAK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOGGLE_CLOAK& ClientOpcode::get<CMSG_TOGGLE_CLOAK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TOGGLE_CLOAK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIONBAR_TOGGLES* ClientOpcode::get_if<CMSG_SET_ACTIONBAR_TOGGLES>() {
    if (opcode == Opcode::CMSG_SET_ACTIONBAR_TOGGLES) {
        return &CMSG_SET_ACTIONBAR_TOGGLES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIONBAR_TOGGLES& ClientOpcode::get<CMSG_SET_ACTIONBAR_TOGGLES>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_ACTIONBAR_TOGGLES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_RENAME* ClientOpcode::get_if<MSG_PETITION_RENAME>() {
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        return &MSG_PETITION_RENAME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_RENAME& ClientOpcode::get<MSG_PETITION_RENAME>() {
    auto p = ClientOpcode::get_if<wrath::MSG_PETITION_RENAME>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_NAME_QUERY* ClientOpcode::get_if<CMSG_ITEM_NAME_QUERY>() {
    if (opcode == Opcode::CMSG_ITEM_NAME_QUERY) {
        return &CMSG_ITEM_NAME_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_NAME_QUERY& ClientOpcode::get<CMSG_ITEM_NAME_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ITEM_NAME_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_RENAME* ClientOpcode::get_if<CMSG_CHAR_RENAME>() {
    if (opcode == Opcode::CMSG_CHAR_RENAME) {
        return &CMSG_CHAR_RENAME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_RENAME& ClientOpcode::get<CMSG_CHAR_RENAME>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHAR_RENAME>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SPLINE_DONE* ClientOpcode::get_if<CMSG_MOVE_SPLINE_DONE>() {
    if (opcode == Opcode::CMSG_MOVE_SPLINE_DONE) {
        return &CMSG_MOVE_SPLINE_DONE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SPLINE_DONE& ClientOpcode::get<CMSG_MOVE_SPLINE_DONE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_SPLINE_DONE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_FALL_RESET* ClientOpcode::get_if<CMSG_MOVE_FALL_RESET>() {
    if (opcode == Opcode::CMSG_MOVE_FALL_RESET) {
        return &CMSG_MOVE_FALL_RESET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_FALL_RESET& ClientOpcode::get<CMSG_MOVE_FALL_RESET>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_FALL_RESET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_RAID_INFO* ClientOpcode::get_if<CMSG_REQUEST_RAID_INFO>() {
    if (opcode == Opcode::CMSG_REQUEST_RAID_INFO) {
        return &CMSG_REQUEST_RAID_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_RAID_INFO& ClientOpcode::get<CMSG_REQUEST_RAID_INFO>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REQUEST_RAID_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_TIME_SKIPPED* ClientOpcode::get_if<CMSG_MOVE_TIME_SKIPPED>() {
    if (opcode == Opcode::CMSG_MOVE_TIME_SKIPPED) {
        return &CMSG_MOVE_TIME_SKIPPED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_TIME_SKIPPED& ClientOpcode::get<CMSG_MOVE_TIME_SKIPPED>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_TIME_SKIPPED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_FEATHER_FALL_ACK* ClientOpcode::get_if<CMSG_MOVE_FEATHER_FALL_ACK>() {
    if (opcode == Opcode::CMSG_MOVE_FEATHER_FALL_ACK) {
        return &CMSG_MOVE_FEATHER_FALL_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_FEATHER_FALL_ACK& ClientOpcode::get<CMSG_MOVE_FEATHER_FALL_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_FEATHER_FALL_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_WATER_WALK_ACK* ClientOpcode::get_if<CMSG_MOVE_WATER_WALK_ACK>() {
    if (opcode == Opcode::CMSG_MOVE_WATER_WALK_ACK) {
        return &CMSG_MOVE_WATER_WALK_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_WATER_WALK_ACK& ClientOpcode::get<CMSG_MOVE_WATER_WALK_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_WATER_WALK_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_NOT_ACTIVE_MOVER* ClientOpcode::get_if<CMSG_MOVE_NOT_ACTIVE_MOVER>() {
    if (opcode == Opcode::CMSG_MOVE_NOT_ACTIVE_MOVER) {
        return &CMSG_MOVE_NOT_ACTIVE_MOVER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_NOT_ACTIVE_MOVER& ClientOpcode::get<CMSG_MOVE_NOT_ACTIVE_MOVER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_NOT_ACTIVE_MOVER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_STATUS* ClientOpcode::get_if<CMSG_BATTLEFIELD_STATUS>() {
    if (opcode == Opcode::CMSG_BATTLEFIELD_STATUS) {
        return &CMSG_BATTLEFIELD_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_STATUS& ClientOpcode::get<CMSG_BATTLEFIELD_STATUS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BATTLEFIELD_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_PORT* ClientOpcode::get_if<CMSG_BATTLEFIELD_PORT>() {
    if (opcode == Opcode::CMSG_BATTLEFIELD_PORT) {
        return &CMSG_BATTLEFIELD_PORT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_PORT& ClientOpcode::get<CMSG_BATTLEFIELD_PORT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BATTLEFIELD_PORT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_HONOR_STATS_Client* ClientOpcode::get_if<MSG_INSPECT_HONOR_STATS_Client>() {
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        return &MSG_INSPECT_HONOR_STATS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_HONOR_STATS_Client& ClientOpcode::get<MSG_INSPECT_HONOR_STATS_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_INSPECT_HONOR_STATS_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_HELLO* ClientOpcode::get_if<CMSG_BATTLEMASTER_HELLO>() {
    if (opcode == Opcode::CMSG_BATTLEMASTER_HELLO) {
        return &CMSG_BATTLEMASTER_HELLO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_HELLO& ClientOpcode::get<CMSG_BATTLEMASTER_HELLO>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BATTLEMASTER_HELLO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK* ClientOpcode::get_if<CMSG_FORCE_WALK_SPEED_CHANGE_ACK>() {
    if (opcode == Opcode::CMSG_FORCE_WALK_SPEED_CHANGE_ACK) {
        return &CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK& ClientOpcode::get<CMSG_FORCE_WALK_SPEED_CHANGE_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FORCE_WALK_SPEED_CHANGE_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK* ClientOpcode::get_if<CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK>() {
    if (opcode == Opcode::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) {
        return &CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK& ClientOpcode::get<CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK* ClientOpcode::get_if<CMSG_FORCE_TURN_RATE_CHANGE_ACK>() {
    if (opcode == Opcode::CMSG_FORCE_TURN_RATE_CHANGE_ACK) {
        return &CMSG_FORCE_TURN_RATE_CHANGE_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK& ClientOpcode::get<CMSG_FORCE_TURN_RATE_CHANGE_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FORCE_TURN_RATE_CHANGE_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PVP_LOG_DATA_Client* ClientOpcode::get_if<MSG_PVP_LOG_DATA_Client>() {
    if (opcode == Opcode::MSG_PVP_LOG_DATA) {
        return &MSG_PVP_LOG_DATA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PVP_LOG_DATA_Client& ClientOpcode::get<MSG_PVP_LOG_DATA_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_PVP_LOG_DATA_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEAVE_BATTLEFIELD* ClientOpcode::get_if<CMSG_LEAVE_BATTLEFIELD>() {
    if (opcode == Opcode::CMSG_LEAVE_BATTLEFIELD) {
        return &CMSG_LEAVE_BATTLEFIELD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEAVE_BATTLEFIELD& ClientOpcode::get<CMSG_LEAVE_BATTLEFIELD>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LEAVE_BATTLEFIELD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREA_SPIRIT_HEALER_QUERY* ClientOpcode::get_if<CMSG_AREA_SPIRIT_HEALER_QUERY>() {
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUERY) {
        return &CMSG_AREA_SPIRIT_HEALER_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREA_SPIRIT_HEALER_QUERY& ClientOpcode::get<CMSG_AREA_SPIRIT_HEALER_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AREA_SPIRIT_HEALER_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE* ClientOpcode::get_if<CMSG_AREA_SPIRIT_HEALER_QUEUE>() {
    if (opcode == Opcode::CMSG_AREA_SPIRIT_HEALER_QUEUE) {
        return &CMSG_AREA_SPIRIT_HEALER_QUEUE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE& ClientOpcode::get<CMSG_AREA_SPIRIT_HEALER_QUEUE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AREA_SPIRIT_HEALER_QUEUE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WARDEN_DATA* ClientOpcode::get_if<CMSG_WARDEN_DATA>() {
    if (opcode == Opcode::CMSG_WARDEN_DATA) {
        return &CMSG_WARDEN_DATA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WARDEN_DATA& ClientOpcode::get<CMSG_WARDEN_DATA>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_WARDEN_DATA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client* ClientOpcode::get_if<MSG_BATTLEGROUND_PLAYER_POSITIONS_Client>() {
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        return &MSG_BATTLEGROUND_PLAYER_POSITIONS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client& ClientOpcode::get<MSG_BATTLEGROUND_PLAYER_POSITIONS_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_STOP_ATTACK* ClientOpcode::get_if<CMSG_PET_STOP_ATTACK>() {
    if (opcode == Opcode::CMSG_PET_STOP_ATTACK) {
        return &CMSG_PET_STOP_ATTACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_STOP_ATTACK& ClientOpcode::get<CMSG_PET_STOP_ATTACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_STOP_ATTACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_JOIN* ClientOpcode::get_if<CMSG_BATTLEMASTER_JOIN>() {
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN) {
        return &CMSG_BATTLEMASTER_JOIN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_JOIN& ClientOpcode::get<CMSG_BATTLEMASTER_JOIN>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BATTLEMASTER_JOIN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_UNLEARN* ClientOpcode::get_if<CMSG_PET_UNLEARN>() {
    if (opcode == Opcode::CMSG_PET_UNLEARN) {
        return &CMSG_PET_UNLEARN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_UNLEARN& ClientOpcode::get<CMSG_PET_UNLEARN>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_UNLEARN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_SPELL_AUTOCAST* ClientOpcode::get_if<CMSG_PET_SPELL_AUTOCAST>() {
    if (opcode == Opcode::CMSG_PET_SPELL_AUTOCAST) {
        return &CMSG_PET_SPELL_AUTOCAST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_SPELL_AUTOCAST& ClientOpcode::get<CMSG_PET_SPELL_AUTOCAST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_SPELL_AUTOCAST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INFO_TEXT* ClientOpcode::get_if<CMSG_GUILD_INFO_TEXT>() {
    if (opcode == Opcode::CMSG_GUILD_INFO_TEXT) {
        return &CMSG_GUILD_INFO_TEXT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_INFO_TEXT& ClientOpcode::get<CMSG_GUILD_INFO_TEXT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_INFO_TEXT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACTIVATETAXIEXPRESS* ClientOpcode::get_if<CMSG_ACTIVATETAXIEXPRESS>() {
    if (opcode == Opcode::CMSG_ACTIVATETAXIEXPRESS) {
        return &CMSG_ACTIVATETAXIEXPRESS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACTIVATETAXIEXPRESS& ClientOpcode::get<CMSG_ACTIVATETAXIEXPRESS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ACTIVATETAXIEXPRESS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_FACTION_INACTIVE* ClientOpcode::get_if<CMSG_SET_FACTION_INACTIVE>() {
    if (opcode == Opcode::CMSG_SET_FACTION_INACTIVE) {
        return &CMSG_SET_FACTION_INACTIVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_FACTION_INACTIVE& ClientOpcode::get<CMSG_SET_FACTION_INACTIVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_FACTION_INACTIVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_WATCHED_FACTION* ClientOpcode::get_if<CMSG_SET_WATCHED_FACTION>() {
    if (opcode == Opcode::CMSG_SET_WATCHED_FACTION) {
        return &CMSG_SET_WATCHED_FACTION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_WATCHED_FACTION& ClientOpcode::get<CMSG_SET_WATCHED_FACTION>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_WATCHED_FACTION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RESET_INSTANCES* ClientOpcode::get_if<CMSG_RESET_INSTANCES>() {
    if (opcode == Opcode::CMSG_RESET_INSTANCES) {
        return &CMSG_RESET_INSTANCES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_RESET_INSTANCES& ClientOpcode::get<CMSG_RESET_INSTANCES>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_RESET_INSTANCES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_TARGET_UPDATE_Client* ClientOpcode::get_if<MSG_RAID_TARGET_UPDATE_Client>() {
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        return &MSG_RAID_TARGET_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_TARGET_UPDATE_Client& ClientOpcode::get<MSG_RAID_TARGET_UPDATE_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_RAID_TARGET_UPDATE_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_Client* ClientOpcode::get_if<MSG_RAID_READY_CHECK_Client>() {
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        return &MSG_RAID_READY_CHECK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_Client& ClientOpcode::get<MSG_RAID_READY_CHECK_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_RAID_READY_CHECK_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_DUNGEON_DIFFICULTY_Client* ClientOpcode::get_if<MSG_SET_DUNGEON_DIFFICULTY_Client>() {
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        return &MSG_SET_DUNGEON_DIFFICULTY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_DUNGEON_DIFFICULTY_Client& ClientOpcode::get<MSG_SET_DUNGEON_DIFFICULTY_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_SET_DUNGEON_DIFFICULTY_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMSURVEY_SUBMIT* ClientOpcode::get_if<CMSG_GMSURVEY_SUBMIT>() {
    if (opcode == Opcode::CMSG_GMSURVEY_SUBMIT) {
        return &CMSG_GMSURVEY_SUBMIT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMSURVEY_SUBMIT& ClientOpcode::get<CMSG_GMSURVEY_SUBMIT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GMSURVEY_SUBMIT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK* ClientOpcode::get_if<CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK>() {
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) {
        return &CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK& ClientOpcode::get<CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_CAN_FLY_ACK* ClientOpcode::get_if<CMSG_MOVE_SET_CAN_FLY_ACK>() {
    if (opcode == Opcode::CMSG_MOVE_SET_CAN_FLY_ACK) {
        return &CMSG_MOVE_SET_CAN_FLY_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_CAN_FLY_ACK& ClientOpcode::get<CMSG_MOVE_SET_CAN_FLY_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_SET_CAN_FLY_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_FLY* ClientOpcode::get_if<CMSG_MOVE_SET_FLY>() {
    if (opcode == Opcode::CMSG_MOVE_SET_FLY) {
        return &CMSG_MOVE_SET_FLY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_FLY& ClientOpcode::get<CMSG_MOVE_SET_FLY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_SET_FLY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SOCKET_GEMS* ClientOpcode::get_if<CMSG_SOCKET_GEMS>() {
    if (opcode == Opcode::CMSG_SOCKET_GEMS) {
        return &CMSG_SOCKET_GEMS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SOCKET_GEMS& ClientOpcode::get<CMSG_SOCKET_GEMS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SOCKET_GEMS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_ROSTER* ClientOpcode::get_if<CMSG_ARENA_TEAM_ROSTER>() {
    if (opcode == Opcode::CMSG_ARENA_TEAM_ROSTER) {
        return &CMSG_ARENA_TEAM_ROSTER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_ROSTER& ClientOpcode::get<CMSG_ARENA_TEAM_ROSTER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ARENA_TEAM_ROSTER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_INVITE* ClientOpcode::get_if<CMSG_ARENA_TEAM_INVITE>() {
    if (opcode == Opcode::CMSG_ARENA_TEAM_INVITE) {
        return &CMSG_ARENA_TEAM_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_INVITE& ClientOpcode::get<CMSG_ARENA_TEAM_INVITE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ARENA_TEAM_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_ACCEPT* ClientOpcode::get_if<CMSG_ARENA_TEAM_ACCEPT>() {
    if (opcode == Opcode::CMSG_ARENA_TEAM_ACCEPT) {
        return &CMSG_ARENA_TEAM_ACCEPT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_ACCEPT& ClientOpcode::get<CMSG_ARENA_TEAM_ACCEPT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ARENA_TEAM_ACCEPT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_DECLINE* ClientOpcode::get_if<CMSG_ARENA_TEAM_DECLINE>() {
    if (opcode == Opcode::CMSG_ARENA_TEAM_DECLINE) {
        return &CMSG_ARENA_TEAM_DECLINE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_DECLINE& ClientOpcode::get<CMSG_ARENA_TEAM_DECLINE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ARENA_TEAM_DECLINE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_LEAVE* ClientOpcode::get_if<CMSG_ARENA_TEAM_LEAVE>() {
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEAVE) {
        return &CMSG_ARENA_TEAM_LEAVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_LEAVE& ClientOpcode::get<CMSG_ARENA_TEAM_LEAVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ARENA_TEAM_LEAVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_REMOVE* ClientOpcode::get_if<CMSG_ARENA_TEAM_REMOVE>() {
    if (opcode == Opcode::CMSG_ARENA_TEAM_REMOVE) {
        return &CMSG_ARENA_TEAM_REMOVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_REMOVE& ClientOpcode::get<CMSG_ARENA_TEAM_REMOVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ARENA_TEAM_REMOVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_DISBAND* ClientOpcode::get_if<CMSG_ARENA_TEAM_DISBAND>() {
    if (opcode == Opcode::CMSG_ARENA_TEAM_DISBAND) {
        return &CMSG_ARENA_TEAM_DISBAND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_DISBAND& ClientOpcode::get<CMSG_ARENA_TEAM_DISBAND>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ARENA_TEAM_DISBAND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_LEADER* ClientOpcode::get_if<CMSG_ARENA_TEAM_LEADER>() {
    if (opcode == Opcode::CMSG_ARENA_TEAM_LEADER) {
        return &CMSG_ARENA_TEAM_LEADER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ARENA_TEAM_LEADER& ClientOpcode::get<CMSG_ARENA_TEAM_LEADER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ARENA_TEAM_LEADER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_JOIN_ARENA* ClientOpcode::get_if<CMSG_BATTLEMASTER_JOIN_ARENA>() {
    if (opcode == Opcode::CMSG_BATTLEMASTER_JOIN_ARENA) {
        return &CMSG_BATTLEMASTER_JOIN_ARENA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEMASTER_JOIN_ARENA& ClientOpcode::get<CMSG_BATTLEMASTER_JOIN_ARENA>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BATTLEMASTER_JOIN_ARENA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_ASCEND* ClientOpcode::get_if<MSG_MOVE_START_ASCEND>() {
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        return &MSG_MOVE_START_ASCEND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_ASCEND& ClientOpcode::get<MSG_MOVE_START_ASCEND>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_ASCEND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_ASCEND* ClientOpcode::get_if<MSG_MOVE_STOP_ASCEND>() {
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        return &MSG_MOVE_STOP_ASCEND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_ASCEND& ClientOpcode::get<MSG_MOVE_STOP_ASCEND>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_STOP_ASCEND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_JOIN* ClientOpcode::get_if<CMSG_LFG_JOIN>() {
    if (opcode == Opcode::CMSG_LFG_JOIN) {
        return &CMSG_LFG_JOIN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_JOIN& ClientOpcode::get<CMSG_LFG_JOIN>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LFG_JOIN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_LEAVE* ClientOpcode::get_if<CMSG_LFG_LEAVE>() {
    if (opcode == Opcode::CMSG_LFG_LEAVE) {
        return &CMSG_LFG_LEAVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_LEAVE& ClientOpcode::get<CMSG_LFG_LEAVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LFG_LEAVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEARCH_LFG_JOIN* ClientOpcode::get_if<CMSG_SEARCH_LFG_JOIN>() {
    if (opcode == Opcode::CMSG_SEARCH_LFG_JOIN) {
        return &CMSG_SEARCH_LFG_JOIN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEARCH_LFG_JOIN& ClientOpcode::get<CMSG_SEARCH_LFG_JOIN>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SEARCH_LFG_JOIN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEARCH_LFG_LEAVE* ClientOpcode::get_if<CMSG_SEARCH_LFG_LEAVE>() {
    if (opcode == Opcode::CMSG_SEARCH_LFG_LEAVE) {
        return &CMSG_SEARCH_LFG_LEAVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SEARCH_LFG_LEAVE& ClientOpcode::get<CMSG_SEARCH_LFG_LEAVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SEARCH_LFG_LEAVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_PROPOSAL_RESULT* ClientOpcode::get_if<CMSG_LFG_PROPOSAL_RESULT>() {
    if (opcode == Opcode::CMSG_LFG_PROPOSAL_RESULT) {
        return &CMSG_LFG_PROPOSAL_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_PROPOSAL_RESULT& ClientOpcode::get<CMSG_LFG_PROPOSAL_RESULT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LFG_PROPOSAL_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_LFG_COMMENT* ClientOpcode::get_if<CMSG_SET_LFG_COMMENT>() {
    if (opcode == Opcode::CMSG_SET_LFG_COMMENT) {
        return &CMSG_SET_LFG_COMMENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_LFG_COMMENT& ClientOpcode::get<CMSG_SET_LFG_COMMENT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_LFG_COMMENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_SET_ROLES* ClientOpcode::get_if<CMSG_LFG_SET_ROLES>() {
    if (opcode == Opcode::CMSG_LFG_SET_ROLES) {
        return &CMSG_LFG_SET_ROLES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_SET_ROLES& ClientOpcode::get<CMSG_LFG_SET_ROLES>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LFG_SET_ROLES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_SET_BOOT_VOTE* ClientOpcode::get_if<CMSG_LFG_SET_BOOT_VOTE>() {
    if (opcode == Opcode::CMSG_LFG_SET_BOOT_VOTE) {
        return &CMSG_LFG_SET_BOOT_VOTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_SET_BOOT_VOTE& ClientOpcode::get<CMSG_LFG_SET_BOOT_VOTE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LFG_SET_BOOT_VOTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST* ClientOpcode::get_if<CMSG_LFD_PLAYER_LOCK_INFO_REQUEST>() {
    if (opcode == Opcode::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) {
        return &CMSG_LFD_PLAYER_LOCK_INFO_REQUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST& ClientOpcode::get<CMSG_LFD_PLAYER_LOCK_INFO_REQUEST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_TELEPORT* ClientOpcode::get_if<CMSG_LFG_TELEPORT>() {
    if (opcode == Opcode::CMSG_LFG_TELEPORT) {
        return &CMSG_LFG_TELEPORT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFG_TELEPORT& ClientOpcode::get<CMSG_LFG_TELEPORT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LFG_TELEPORT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST* ClientOpcode::get_if<CMSG_LFD_PARTY_LOCK_INFO_REQUEST>() {
    if (opcode == Opcode::CMSG_LFD_PARTY_LOCK_INFO_REQUEST) {
        return &CMSG_LFD_PARTY_LOCK_INFO_REQUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST& ClientOpcode::get<CMSG_LFD_PARTY_LOCK_INFO_REQUEST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LFD_PARTY_LOCK_INFO_REQUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TITLE* ClientOpcode::get_if<CMSG_SET_TITLE>() {
    if (opcode == Opcode::CMSG_SET_TITLE) {
        return &CMSG_SET_TITLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TITLE& ClientOpcode::get<CMSG_SET_TITLE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_TITLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_MOUNT_AURA* ClientOpcode::get_if<CMSG_CANCEL_MOUNT_AURA>() {
    if (opcode == Opcode::CMSG_CANCEL_MOUNT_AURA) {
        return &CMSG_CANCEL_MOUNT_AURA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_MOUNT_AURA& ClientOpcode::get<CMSG_CANCEL_MOUNT_AURA>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CANCEL_MOUNT_AURA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_ARENA_TEAMS_Client* ClientOpcode::get_if<MSG_INSPECT_ARENA_TEAMS_Client>() {
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        return &MSG_INSPECT_ARENA_TEAMS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_ARENA_TEAMS_Client& ClientOpcode::get<MSG_INSPECT_ARENA_TEAMS_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_INSPECT_ARENA_TEAMS_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_TEMP_ENCHANTMENT* ClientOpcode::get_if<CMSG_CANCEL_TEMP_ENCHANTMENT>() {
    if (opcode == Opcode::CMSG_CANCEL_TEMP_ENCHANTMENT) {
        return &CMSG_CANCEL_TEMP_ENCHANTMENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CANCEL_TEMP_ENCHANTMENT& ClientOpcode::get<CMSG_CANCEL_TEMP_ENCHANTMENT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CANCEL_TEMP_ENCHANTMENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED* ClientOpcode::get_if<MSG_MOVE_SET_FLIGHT_BACK_SPEED>() {
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        return &MSG_MOVE_SET_FLIGHT_BACK_SPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED& ClientOpcode::get<MSG_MOVE_SET_FLIGHT_BACK_SPEED>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK* ClientOpcode::get_if<CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK>() {
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) {
        return &CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK& ClientOpcode::get<CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK* ClientOpcode::get_if<CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK>() {
    if (opcode == Opcode::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) {
        return &CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK& ClientOpcode::get<CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TAXI_BENCHMARK_MODE* ClientOpcode::get_if<CMSG_SET_TAXI_BENCHMARK_MODE>() {
    if (opcode == Opcode::CMSG_SET_TAXI_BENCHMARK_MODE) {
        return &CMSG_SET_TAXI_BENCHMARK_MODE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_TAXI_BENCHMARK_MODE& ClientOpcode::get<CMSG_SET_TAXI_BENCHMARK_MODE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_TAXI_BENCHMARK_MODE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REALM_SPLIT* ClientOpcode::get_if<CMSG_REALM_SPLIT>() {
    if (opcode == Opcode::CMSG_REALM_SPLIT) {
        return &CMSG_REALM_SPLIT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REALM_SPLIT& ClientOpcode::get<CMSG_REALM_SPLIT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REALM_SPLIT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_CHNG_TRANSPORT* ClientOpcode::get_if<CMSG_MOVE_CHNG_TRANSPORT>() {
    if (opcode == Opcode::CMSG_MOVE_CHNG_TRANSPORT) {
        return &CMSG_MOVE_CHNG_TRANSPORT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_CHNG_TRANSPORT& ClientOpcode::get<CMSG_MOVE_CHNG_TRANSPORT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_CHNG_TRANSPORT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PARTY_ASSIGNMENT_Client* ClientOpcode::get_if<MSG_PARTY_ASSIGNMENT_Client>() {
    if (opcode == Opcode::MSG_PARTY_ASSIGNMENT) {
        return &MSG_PARTY_ASSIGNMENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PARTY_ASSIGNMENT_Client& ClientOpcode::get<MSG_PARTY_ASSIGNMENT_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_PARTY_ASSIGNMENT_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TIME_SYNC_RESP* ClientOpcode::get_if<CMSG_TIME_SYNC_RESP>() {
    if (opcode == Opcode::CMSG_TIME_SYNC_RESP) {
        return &CMSG_TIME_SYNC_RESP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TIME_SYNC_RESP& ClientOpcode::get<CMSG_TIME_SYNC_RESP>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TIME_SYNC_RESP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_DESCEND* ClientOpcode::get_if<MSG_MOVE_START_DESCEND>() {
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        return &MSG_MOVE_START_DESCEND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_DESCEND& ClientOpcode::get<MSG_MOVE_START_DESCEND>() {
    auto p = ClientOpcode::get_if<wrath::MSG_MOVE_START_DESCEND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_CONFIRM_Client* ClientOpcode::get_if<MSG_RAID_READY_CHECK_CONFIRM_Client>() {
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        return &MSG_RAID_READY_CHECK_CONFIRM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_CONFIRM_Client& ClientOpcode::get<MSG_RAID_READY_CHECK_CONFIRM_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_RAID_READY_CHECK_CONFIRM_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_VOICE_SESSION_ENABLE* ClientOpcode::get_if<CMSG_VOICE_SESSION_ENABLE>() {
    if (opcode == Opcode::CMSG_VOICE_SESSION_ENABLE) {
        return &CMSG_VOICE_SESSION_ENABLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_VOICE_SESSION_ENABLE& ClientOpcode::get<CMSG_VOICE_SESSION_ENABLE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_VOICE_SESSION_ENABLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMMENTATOR_ENABLE* ClientOpcode::get_if<CMSG_COMMENTATOR_ENABLE>() {
    if (opcode == Opcode::CMSG_COMMENTATOR_ENABLE) {
        return &CMSG_COMMENTATOR_ENABLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMMENTATOR_ENABLE& ClientOpcode::get<CMSG_COMMENTATOR_ENABLE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_COMMENTATOR_ENABLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_FINISHED_Client* ClientOpcode::get_if<MSG_RAID_READY_CHECK_FINISHED_Client>() {
    if (opcode == Opcode::MSG_RAID_READY_CHECK_FINISHED) {
        return &MSG_RAID_READY_CHECK_FINISHED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_FINISHED_Client& ClientOpcode::get<MSG_RAID_READY_CHECK_FINISHED_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_RAID_READY_CHECK_FINISHED_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLAIN* ClientOpcode::get_if<CMSG_COMPLAIN>() {
    if (opcode == Opcode::CMSG_COMPLAIN) {
        return &CMSG_COMPLAIN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLAIN& ClientOpcode::get<CMSG_COMPLAIN>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_COMPLAIN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_DISPLAY_LIST* ClientOpcode::get_if<CMSG_CHANNEL_DISPLAY_LIST>() {
    if (opcode == Opcode::CMSG_CHANNEL_DISPLAY_LIST) {
        return &CMSG_CHANNEL_DISPLAY_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_DISPLAY_LIST& ClientOpcode::get<CMSG_CHANNEL_DISPLAY_LIST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_DISPLAY_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL* ClientOpcode::get_if<CMSG_SET_ACTIVE_VOICE_CHANNEL>() {
    if (opcode == Opcode::CMSG_SET_ACTIVE_VOICE_CHANNEL) {
        return &CMSG_SET_ACTIVE_VOICE_CHANNEL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL& ClientOpcode::get<CMSG_SET_ACTIVE_VOICE_CHANNEL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_ACTIVE_VOICE_CHANNEL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_CHANNEL_MEMBER_COUNT* ClientOpcode::get_if<CMSG_GET_CHANNEL_MEMBER_COUNT>() {
    if (opcode == Opcode::CMSG_GET_CHANNEL_MEMBER_COUNT) {
        return &CMSG_GET_CHANNEL_MEMBER_COUNT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_CHANNEL_MEMBER_COUNT& ClientOpcode::get<CMSG_GET_CHANNEL_MEMBER_COUNT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GET_CHANNEL_MEMBER_COUNT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_VOICE_ON* ClientOpcode::get_if<CMSG_CHANNEL_VOICE_ON>() {
    if (opcode == Opcode::CMSG_CHANNEL_VOICE_ON) {
        return &CMSG_CHANNEL_VOICE_ON;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANNEL_VOICE_ON& ClientOpcode::get<CMSG_CHANNEL_VOICE_ON>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANNEL_VOICE_ON>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPORT_PVP_AFK* ClientOpcode::get_if<CMSG_REPORT_PVP_AFK>() {
    if (opcode == Opcode::CMSG_REPORT_PVP_AFK) {
        return &CMSG_REPORT_PVP_AFK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REPORT_PVP_AFK& ClientOpcode::get<CMSG_REPORT_PVP_AFK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REPORT_PVP_AFK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANKER_ACTIVATE* ClientOpcode::get_if<CMSG_GUILD_BANKER_ACTIVATE>() {
    if (opcode == Opcode::CMSG_GUILD_BANKER_ACTIVATE) {
        return &CMSG_GUILD_BANKER_ACTIVATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANKER_ACTIVATE& ClientOpcode::get<CMSG_GUILD_BANKER_ACTIVATE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_BANKER_ACTIVATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_QUERY_TAB* ClientOpcode::get_if<CMSG_GUILD_BANK_QUERY_TAB>() {
    if (opcode == Opcode::CMSG_GUILD_BANK_QUERY_TAB) {
        return &CMSG_GUILD_BANK_QUERY_TAB;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_QUERY_TAB& ClientOpcode::get<CMSG_GUILD_BANK_QUERY_TAB>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_BANK_QUERY_TAB>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_SWAP_ITEMS* ClientOpcode::get_if<CMSG_GUILD_BANK_SWAP_ITEMS>() {
    if (opcode == Opcode::CMSG_GUILD_BANK_SWAP_ITEMS) {
        return &CMSG_GUILD_BANK_SWAP_ITEMS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_SWAP_ITEMS& ClientOpcode::get<CMSG_GUILD_BANK_SWAP_ITEMS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_BANK_SWAP_ITEMS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_BUY_TAB* ClientOpcode::get_if<CMSG_GUILD_BANK_BUY_TAB>() {
    if (opcode == Opcode::CMSG_GUILD_BANK_BUY_TAB) {
        return &CMSG_GUILD_BANK_BUY_TAB;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_BUY_TAB& ClientOpcode::get<CMSG_GUILD_BANK_BUY_TAB>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_BANK_BUY_TAB>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_UPDATE_TAB* ClientOpcode::get_if<CMSG_GUILD_BANK_UPDATE_TAB>() {
    if (opcode == Opcode::CMSG_GUILD_BANK_UPDATE_TAB) {
        return &CMSG_GUILD_BANK_UPDATE_TAB;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_UPDATE_TAB& ClientOpcode::get<CMSG_GUILD_BANK_UPDATE_TAB>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_BANK_UPDATE_TAB>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY* ClientOpcode::get_if<CMSG_GUILD_BANK_DEPOSIT_MONEY>() {
    if (opcode == Opcode::CMSG_GUILD_BANK_DEPOSIT_MONEY) {
        return &CMSG_GUILD_BANK_DEPOSIT_MONEY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY& ClientOpcode::get<CMSG_GUILD_BANK_DEPOSIT_MONEY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_BANK_DEPOSIT_MONEY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY* ClientOpcode::get_if<CMSG_GUILD_BANK_WITHDRAW_MONEY>() {
    if (opcode == Opcode::CMSG_GUILD_BANK_WITHDRAW_MONEY) {
        return &CMSG_GUILD_BANK_WITHDRAW_MONEY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY& ClientOpcode::get<CMSG_GUILD_BANK_WITHDRAW_MONEY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GUILD_BANK_WITHDRAW_MONEY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_LOG_QUERY_Client* ClientOpcode::get_if<MSG_GUILD_BANK_LOG_QUERY_Client>() {
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        return &MSG_GUILD_BANK_LOG_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_LOG_QUERY_Client& ClientOpcode::get<MSG_GUILD_BANK_LOG_QUERY_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_GUILD_BANK_LOG_QUERY_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_CHANNEL_WATCH* ClientOpcode::get_if<CMSG_SET_CHANNEL_WATCH>() {
    if (opcode == Opcode::CMSG_SET_CHANNEL_WATCH) {
        return &CMSG_SET_CHANNEL_WATCH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_CHANNEL_WATCH& ClientOpcode::get<CMSG_SET_CHANNEL_WATCH>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_CHANNEL_WATCH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CLEAR_CHANNEL_WATCH* ClientOpcode::get_if<CMSG_CLEAR_CHANNEL_WATCH>() {
    if (opcode == Opcode::CMSG_CLEAR_CHANNEL_WATCH) {
        return &CMSG_CLEAR_CHANNEL_WATCH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CLEAR_CHANNEL_WATCH& ClientOpcode::get<CMSG_CLEAR_CHANNEL_WATCH>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CLEAR_CHANNEL_WATCH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPELLCLICK* ClientOpcode::get_if<CMSG_SPELLCLICK>() {
    if (opcode == Opcode::CMSG_SPELLCLICK) {
        return &CMSG_SPELLCLICK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SPELLCLICK& ClientOpcode::get<CMSG_SPELLCLICK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SPELLCLICK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_PERMISSIONS_Client* ClientOpcode::get_if<MSG_GUILD_PERMISSIONS_Client>() {
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        return &MSG_GUILD_PERMISSIONS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_PERMISSIONS_Client& ClientOpcode::get<MSG_GUILD_PERMISSIONS_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_GUILD_PERMISSIONS_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client* ClientOpcode::get_if<MSG_GUILD_BANK_MONEY_WITHDRAWN_Client>() {
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        return &MSG_GUILD_BANK_MONEY_WITHDRAWN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client& ClientOpcode::get<MSG_GUILD_BANK_MONEY_WITHDRAWN_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_EVENT_LOG_QUERY_Client* ClientOpcode::get_if<MSG_GUILD_EVENT_LOG_QUERY_Client>() {
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        return &MSG_GUILD_EVENT_LOG_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_EVENT_LOG_QUERY_Client& ClientOpcode::get<MSG_GUILD_EVENT_LOG_QUERY_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_GUILD_EVENT_LOG_QUERY_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_MIRRORIMAGE_DATA* ClientOpcode::get_if<CMSG_GET_MIRRORIMAGE_DATA>() {
    if (opcode == Opcode::CMSG_GET_MIRRORIMAGE_DATA) {
        return &CMSG_GET_MIRRORIMAGE_DATA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GET_MIRRORIMAGE_DATA& ClientOpcode::get<CMSG_GET_MIRRORIMAGE_DATA>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GET_MIRRORIMAGE_DATA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_KEEP_ALIVE* ClientOpcode::get_if<CMSG_KEEP_ALIVE>() {
    if (opcode == Opcode::CMSG_KEEP_ALIVE) {
        return &CMSG_KEEP_ALIVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_KEEP_ALIVE& ClientOpcode::get<CMSG_KEEP_ALIVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_KEEP_ALIVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OPT_OUT_OF_LOOT* ClientOpcode::get_if<CMSG_OPT_OUT_OF_LOOT>() {
    if (opcode == Opcode::CMSG_OPT_OUT_OF_LOOT) {
        return &CMSG_OPT_OUT_OF_LOOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_OPT_OUT_OF_LOOT& ClientOpcode::get<CMSG_OPT_OUT_OF_LOOT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_OPT_OUT_OF_LOOT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_GUILD_BANK_TEXT_Client* ClientOpcode::get_if<MSG_QUERY_GUILD_BANK_TEXT_Client>() {
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        return &MSG_QUERY_GUILD_BANK_TEXT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_GUILD_BANK_TEXT_Client& ClientOpcode::get<MSG_QUERY_GUILD_BANK_TEXT_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_QUERY_GUILD_BANK_TEXT_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_GUILD_BANK_TEXT* ClientOpcode::get_if<CMSG_SET_GUILD_BANK_TEXT>() {
    if (opcode == Opcode::CMSG_SET_GUILD_BANK_TEXT) {
        return &CMSG_SET_GUILD_BANK_TEXT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_GUILD_BANK_TEXT& ClientOpcode::get<CMSG_SET_GUILD_BANK_TEXT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_GUILD_BANK_TEXT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GRANT_LEVEL* ClientOpcode::get_if<CMSG_GRANT_LEVEL>() {
    if (opcode == Opcode::CMSG_GRANT_LEVEL) {
        return &CMSG_GRANT_LEVEL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GRANT_LEVEL& ClientOpcode::get<CMSG_GRANT_LEVEL>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GRANT_LEVEL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOTEM_DESTROYED* ClientOpcode::get_if<CMSG_TOTEM_DESTROYED>() {
    if (opcode == Opcode::CMSG_TOTEM_DESTROYED) {
        return &CMSG_TOTEM_DESTROYED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_TOTEM_DESTROYED& ClientOpcode::get<CMSG_TOTEM_DESTROYED>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_TOTEM_DESTROYED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY* ClientOpcode::get_if<CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY>() {
    if (opcode == Opcode::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) {
        return &CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY& ClientOpcode::get<CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_PLAYER_DECLINED_NAMES* ClientOpcode::get_if<CMSG_SET_PLAYER_DECLINED_NAMES>() {
    if (opcode == Opcode::CMSG_SET_PLAYER_DECLINED_NAMES) {
        return &CMSG_SET_PLAYER_DECLINED_NAMES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_SET_PLAYER_DECLINED_NAMES& ClientOpcode::get<CMSG_SET_PLAYER_DECLINED_NAMES>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_SET_PLAYER_DECLINED_NAMES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACCEPT_LEVEL_GRANT* ClientOpcode::get_if<CMSG_ACCEPT_LEVEL_GRANT>() {
    if (opcode == Opcode::CMSG_ACCEPT_LEVEL_GRANT) {
        return &CMSG_ACCEPT_LEVEL_GRANT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ACCEPT_LEVEL_GRANT& ClientOpcode::get<CMSG_ACCEPT_LEVEL_GRANT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ACCEPT_LEVEL_GRANT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ALTER_APPEARANCE* ClientOpcode::get_if<CMSG_ALTER_APPEARANCE>() {
    if (opcode == Opcode::CMSG_ALTER_APPEARANCE) {
        return &CMSG_ALTER_APPEARANCE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ALTER_APPEARANCE& ClientOpcode::get<CMSG_ALTER_APPEARANCE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ALTER_APPEARANCE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_CALENDAR* ClientOpcode::get_if<CMSG_CALENDAR_GET_CALENDAR>() {
    if (opcode == Opcode::CMSG_CALENDAR_GET_CALENDAR) {
        return &CMSG_CALENDAR_GET_CALENDAR;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_CALENDAR& ClientOpcode::get<CMSG_CALENDAR_GET_CALENDAR>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_GET_CALENDAR>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_EVENT* ClientOpcode::get_if<CMSG_CALENDAR_GET_EVENT>() {
    if (opcode == Opcode::CMSG_CALENDAR_GET_EVENT) {
        return &CMSG_CALENDAR_GET_EVENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_EVENT& ClientOpcode::get<CMSG_CALENDAR_GET_EVENT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_GET_EVENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GUILD_FILTER* ClientOpcode::get_if<CMSG_CALENDAR_GUILD_FILTER>() {
    if (opcode == Opcode::CMSG_CALENDAR_GUILD_FILTER) {
        return &CMSG_CALENDAR_GUILD_FILTER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GUILD_FILTER& ClientOpcode::get<CMSG_CALENDAR_GUILD_FILTER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_GUILD_FILTER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_ARENA_TEAM* ClientOpcode::get_if<CMSG_CALENDAR_ARENA_TEAM>() {
    if (opcode == Opcode::CMSG_CALENDAR_ARENA_TEAM) {
        return &CMSG_CALENDAR_ARENA_TEAM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_ARENA_TEAM& ClientOpcode::get<CMSG_CALENDAR_ARENA_TEAM>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_ARENA_TEAM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_ADD_EVENT* ClientOpcode::get_if<CMSG_CALENDAR_ADD_EVENT>() {
    if (opcode == Opcode::CMSG_CALENDAR_ADD_EVENT) {
        return &CMSG_CALENDAR_ADD_EVENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_ADD_EVENT& ClientOpcode::get<CMSG_CALENDAR_ADD_EVENT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_ADD_EVENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_UPDATE_EVENT* ClientOpcode::get_if<CMSG_CALENDAR_UPDATE_EVENT>() {
    if (opcode == Opcode::CMSG_CALENDAR_UPDATE_EVENT) {
        return &CMSG_CALENDAR_UPDATE_EVENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_UPDATE_EVENT& ClientOpcode::get<CMSG_CALENDAR_UPDATE_EVENT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_UPDATE_EVENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_REMOVE_EVENT* ClientOpcode::get_if<CMSG_CALENDAR_REMOVE_EVENT>() {
    if (opcode == Opcode::CMSG_CALENDAR_REMOVE_EVENT) {
        return &CMSG_CALENDAR_REMOVE_EVENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_REMOVE_EVENT& ClientOpcode::get<CMSG_CALENDAR_REMOVE_EVENT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_REMOVE_EVENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_COPY_EVENT* ClientOpcode::get_if<CMSG_CALENDAR_COPY_EVENT>() {
    if (opcode == Opcode::CMSG_CALENDAR_COPY_EVENT) {
        return &CMSG_CALENDAR_COPY_EVENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_COPY_EVENT& ClientOpcode::get<CMSG_CALENDAR_COPY_EVENT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_COPY_EVENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_INVITE* ClientOpcode::get_if<CMSG_CALENDAR_EVENT_INVITE>() {
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_INVITE) {
        return &CMSG_CALENDAR_EVENT_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_INVITE& ClientOpcode::get<CMSG_CALENDAR_EVENT_INVITE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_EVENT_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_RSVP* ClientOpcode::get_if<CMSG_CALENDAR_EVENT_RSVP>() {
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_RSVP) {
        return &CMSG_CALENDAR_EVENT_RSVP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_RSVP& ClientOpcode::get<CMSG_CALENDAR_EVENT_RSVP>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_EVENT_RSVP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE* ClientOpcode::get_if<CMSG_CALENDAR_EVENT_REMOVE_INVITE>() {
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_REMOVE_INVITE) {
        return &CMSG_CALENDAR_EVENT_REMOVE_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE& ClientOpcode::get<CMSG_CALENDAR_EVENT_REMOVE_INVITE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_EVENT_REMOVE_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_STATUS* ClientOpcode::get_if<CMSG_CALENDAR_EVENT_STATUS>() {
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_STATUS) {
        return &CMSG_CALENDAR_EVENT_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_STATUS& ClientOpcode::get<CMSG_CALENDAR_EVENT_STATUS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_EVENT_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS* ClientOpcode::get_if<CMSG_CALENDAR_EVENT_MODERATOR_STATUS>() {
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_MODERATOR_STATUS) {
        return &CMSG_CALENDAR_EVENT_MODERATOR_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS& ClientOpcode::get<CMSG_CALENDAR_EVENT_MODERATOR_STATUS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_EVENT_MODERATOR_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_COMPLAIN* ClientOpcode::get_if<CMSG_CALENDAR_COMPLAIN>() {
    if (opcode == Opcode::CMSG_CALENDAR_COMPLAIN) {
        return &CMSG_CALENDAR_COMPLAIN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_COMPLAIN& ClientOpcode::get<CMSG_CALENDAR_COMPLAIN>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_COMPLAIN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_NUM_PENDING* ClientOpcode::get_if<CMSG_CALENDAR_GET_NUM_PENDING>() {
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        return &CMSG_CALENDAR_GET_NUM_PENDING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_NUM_PENDING& ClientOpcode::get<CMSG_CALENDAR_GET_NUM_PENDING>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_GET_NUM_PENDING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_MISSILE_TRAJECTORY* ClientOpcode::get_if<CMSG_UPDATE_MISSILE_TRAJECTORY>() {
    if (opcode == Opcode::CMSG_UPDATE_MISSILE_TRAJECTORY) {
        return &CMSG_UPDATE_MISSILE_TRAJECTORY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_MISSILE_TRAJECTORY& ClientOpcode::get<CMSG_UPDATE_MISSILE_TRAJECTORY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_UPDATE_MISSILE_TRAJECTORY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLETE_MOVIE* ClientOpcode::get_if<CMSG_COMPLETE_MOVIE>() {
    if (opcode == Opcode::CMSG_COMPLETE_MOVIE) {
        return &CMSG_COMPLETE_MOVIE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_COMPLETE_MOVIE& ClientOpcode::get<CMSG_COMPLETE_MOVIE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_COMPLETE_MOVIE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS* ClientOpcode::get_if<CMSG_QUERY_INSPECT_ACHIEVEMENTS>() {
    if (opcode == Opcode::CMSG_QUERY_INSPECT_ACHIEVEMENTS) {
        return &CMSG_QUERY_INSPECT_ACHIEVEMENTS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS& ClientOpcode::get<CMSG_QUERY_INSPECT_ACHIEVEMENTS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUERY_INSPECT_ACHIEVEMENTS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DISMISS_CONTROLLED_VEHICLE* ClientOpcode::get_if<CMSG_DISMISS_CONTROLLED_VEHICLE>() {
    if (opcode == Opcode::CMSG_DISMISS_CONTROLLED_VEHICLE) {
        return &CMSG_DISMISS_CONTROLLED_VEHICLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DISMISS_CONTROLLED_VEHICLE& ClientOpcode::get<CMSG_DISMISS_CONTROLLED_VEHICLE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_DISMISS_CONTROLLED_VEHICLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_CUSTOMIZE* ClientOpcode::get_if<CMSG_CHAR_CUSTOMIZE>() {
    if (opcode == Opcode::CMSG_CHAR_CUSTOMIZE) {
        return &CMSG_CHAR_CUSTOMIZE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_CUSTOMIZE& ClientOpcode::get<CMSG_CHAR_CUSTOMIZE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHAR_CUSTOMIZE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_EXIT* ClientOpcode::get_if<CMSG_REQUEST_VEHICLE_EXIT>() {
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_EXIT) {
        return &CMSG_REQUEST_VEHICLE_EXIT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_EXIT& ClientOpcode::get<CMSG_REQUEST_VEHICLE_EXIT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REQUEST_VEHICLE_EXIT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT* ClientOpcode::get_if<CMSG_REQUEST_VEHICLE_PREV_SEAT>() {
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_PREV_SEAT) {
        return &CMSG_REQUEST_VEHICLE_PREV_SEAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT& ClientOpcode::get<CMSG_REQUEST_VEHICLE_PREV_SEAT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REQUEST_VEHICLE_PREV_SEAT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT* ClientOpcode::get_if<CMSG_REQUEST_VEHICLE_NEXT_SEAT>() {
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_NEXT_SEAT) {
        return &CMSG_REQUEST_VEHICLE_NEXT_SEAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT& ClientOpcode::get<CMSG_REQUEST_VEHICLE_NEXT_SEAT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REQUEST_VEHICLE_NEXT_SEAT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT* ClientOpcode::get_if<CMSG_REQUEST_VEHICLE_SWITCH_SEAT>() {
    if (opcode == Opcode::CMSG_REQUEST_VEHICLE_SWITCH_SEAT) {
        return &CMSG_REQUEST_VEHICLE_SWITCH_SEAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT& ClientOpcode::get<CMSG_REQUEST_VEHICLE_SWITCH_SEAT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REQUEST_VEHICLE_SWITCH_SEAT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_LEARN_TALENT* ClientOpcode::get_if<CMSG_PET_LEARN_TALENT>() {
    if (opcode == Opcode::CMSG_PET_LEARN_TALENT) {
        return &CMSG_PET_LEARN_TALENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PET_LEARN_TALENT& ClientOpcode::get<CMSG_PET_LEARN_TALENT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PET_LEARN_TALENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJ_REPORT_USE* ClientOpcode::get_if<CMSG_GAMEOBJ_REPORT_USE>() {
    if (opcode == Opcode::CMSG_GAMEOBJ_REPORT_USE) {
        return &CMSG_GAMEOBJ_REPORT_USE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GAMEOBJ_REPORT_USE& ClientOpcode::get<CMSG_GAMEOBJ_REPORT_USE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GAMEOBJ_REPORT_USE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REMOVE_GLYPH* ClientOpcode::get_if<CMSG_REMOVE_GLYPH>() {
    if (opcode == Opcode::CMSG_REMOVE_GLYPH) {
        return &CMSG_REMOVE_GLYPH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_REMOVE_GLYPH& ClientOpcode::get<CMSG_REMOVE_GLYPH>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_REMOVE_GLYPH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DISMISS_CRITTER* ClientOpcode::get_if<CMSG_DISMISS_CRITTER>() {
    if (opcode == Opcode::CMSG_DISMISS_CRITTER) {
        return &CMSG_DISMISS_CRITTER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_DISMISS_CRITTER& ClientOpcode::get<CMSG_DISMISS_CRITTER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_DISMISS_CRITTER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_PENDING_SALES* ClientOpcode::get_if<CMSG_AUCTION_LIST_PENDING_SALES>() {
    if (opcode == Opcode::CMSG_AUCTION_LIST_PENDING_SALES) {
        return &CMSG_AUCTION_LIST_PENDING_SALES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_AUCTION_LIST_PENDING_SALES& ClientOpcode::get<CMSG_AUCTION_LIST_PENDING_SALES>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_AUCTION_LIST_PENDING_SALES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ENABLETAXI* ClientOpcode::get_if<CMSG_ENABLETAXI>() {
    if (opcode == Opcode::CMSG_ENABLETAXI) {
        return &CMSG_ENABLETAXI;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ENABLETAXI& ClientOpcode::get<CMSG_ENABLETAXI>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ENABLETAXI>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE* ClientOpcode::get_if<CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE>() {
    if (opcode == Opcode::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) {
        return &CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE& ClientOpcode::get<CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_HEARTH_AND_RESURRECT* ClientOpcode::get_if<CMSG_HEARTH_AND_RESURRECT>() {
    if (opcode == Opcode::CMSG_HEARTH_AND_RESURRECT) {
        return &CMSG_HEARTH_AND_RESURRECT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_HEARTH_AND_RESURRECT& ClientOpcode::get<CMSG_HEARTH_AND_RESURRECT>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_HEARTH_AND_RESURRECT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_VEHICLE_ENTER* ClientOpcode::get_if<CMSG_PLAYER_VEHICLE_ENTER>() {
    if (opcode == Opcode::CMSG_PLAYER_VEHICLE_ENTER) {
        return &CMSG_PLAYER_VEHICLE_ENTER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_PLAYER_VEHICLE_ENTER& ClientOpcode::get<CMSG_PLAYER_VEHICLE_ENTER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_PLAYER_VEHICLE_ENTER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CONTROLLER_EJECT_PASSENGER* ClientOpcode::get_if<CMSG_CONTROLLER_EJECT_PASSENGER>() {
    if (opcode == Opcode::CMSG_CONTROLLER_EJECT_PASSENGER) {
        return &CMSG_CONTROLLER_EJECT_PASSENGER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CONTROLLER_EJECT_PASSENGER& ClientOpcode::get<CMSG_CONTROLLER_EJECT_PASSENGER>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CONTROLLER_EJECT_PASSENGER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_REFUND_INFO* ClientOpcode::get_if<CMSG_ITEM_REFUND_INFO>() {
    if (opcode == Opcode::CMSG_ITEM_REFUND_INFO) {
        return &CMSG_ITEM_REFUND_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_REFUND_INFO& ClientOpcode::get<CMSG_ITEM_REFUND_INFO>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ITEM_REFUND_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_REFUND* ClientOpcode::get_if<CMSG_ITEM_REFUND>() {
    if (opcode == Opcode::CMSG_ITEM_REFUND) {
        return &CMSG_ITEM_REFUND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_ITEM_REFUND& ClientOpcode::get<CMSG_ITEM_REFUND>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_ITEM_REFUND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CORPSE_MAP_POSITION_QUERY* ClientOpcode::get_if<CMSG_CORPSE_MAP_POSITION_QUERY>() {
    if (opcode == Opcode::CMSG_CORPSE_MAP_POSITION_QUERY) {
        return &CMSG_CORPSE_MAP_POSITION_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CORPSE_MAP_POSITION_QUERY& ClientOpcode::get<CMSG_CORPSE_MAP_POSITION_QUERY>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CORPSE_MAP_POSITION_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_SIGNUP* ClientOpcode::get_if<CMSG_CALENDAR_EVENT_SIGNUP>() {
    if (opcode == Opcode::CMSG_CALENDAR_EVENT_SIGNUP) {
        return &CMSG_CALENDAR_EVENT_SIGNUP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_EVENT_SIGNUP& ClientOpcode::get<CMSG_CALENDAR_EVENT_SIGNUP>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CALENDAR_EVENT_SIGNUP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EQUIPMENT_SET_SAVE* ClientOpcode::get_if<CMSG_EQUIPMENT_SET_SAVE>() {
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_SAVE) {
        return &CMSG_EQUIPMENT_SET_SAVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EQUIPMENT_SET_SAVE& ClientOpcode::get<CMSG_EQUIPMENT_SET_SAVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_EQUIPMENT_SET_SAVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_PROJECTILE_POSITION* ClientOpcode::get_if<CMSG_UPDATE_PROJECTILE_POSITION>() {
    if (opcode == Opcode::CMSG_UPDATE_PROJECTILE_POSITION) {
        return &CMSG_UPDATE_PROJECTILE_POSITION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_UPDATE_PROJECTILE_POSITION& ClientOpcode::get<CMSG_UPDATE_PROJECTILE_POSITION>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_UPDATE_PROJECTILE_POSITION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_PREVIEW_TALENTS* ClientOpcode::get_if<CMSG_LEARN_PREVIEW_TALENTS>() {
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS) {
        return &CMSG_LEARN_PREVIEW_TALENTS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_PREVIEW_TALENTS& ClientOpcode::get<CMSG_LEARN_PREVIEW_TALENTS>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LEARN_PREVIEW_TALENTS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_PREVIEW_TALENTS_PET* ClientOpcode::get_if<CMSG_LEARN_PREVIEW_TALENTS_PET>() {
    if (opcode == Opcode::CMSG_LEARN_PREVIEW_TALENTS_PET) {
        return &CMSG_LEARN_PREVIEW_TALENTS_PET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_LEARN_PREVIEW_TALENTS_PET& ClientOpcode::get<CMSG_LEARN_PREVIEW_TALENTS_PET>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_LEARN_PREVIEW_TALENTS_PET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK* ClientOpcode::get_if<CMSG_MOVE_GRAVITY_DISABLE_ACK>() {
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_DISABLE_ACK) {
        return &CMSG_MOVE_GRAVITY_DISABLE_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK& ClientOpcode::get<CMSG_MOVE_GRAVITY_DISABLE_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_GRAVITY_DISABLE_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK* ClientOpcode::get_if<CMSG_MOVE_GRAVITY_ENABLE_ACK>() {
    if (opcode == Opcode::CMSG_MOVE_GRAVITY_ENABLE_ACK) {
        return &CMSG_MOVE_GRAVITY_ENABLE_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK& ClientOpcode::get<CMSG_MOVE_GRAVITY_ENABLE_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_GRAVITY_ENABLE_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EQUIPMENT_SET_USE* ClientOpcode::get_if<CMSG_EQUIPMENT_SET_USE>() {
    if (opcode == Opcode::CMSG_EQUIPMENT_SET_USE) {
        return &CMSG_EQUIPMENT_SET_USE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_EQUIPMENT_SET_USE& ClientOpcode::get<CMSG_EQUIPMENT_SET_USE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_EQUIPMENT_SET_USE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_FACTION_CHANGE* ClientOpcode::get_if<CMSG_CHAR_FACTION_CHANGE>() {
    if (opcode == Opcode::CMSG_CHAR_FACTION_CHANGE) {
        return &CMSG_CHAR_FACTION_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_FACTION_CHANGE& ClientOpcode::get<CMSG_CHAR_FACTION_CHANGE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHAR_FACTION_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE* ClientOpcode::get_if<CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE>() {
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) {
        return &CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE& ClientOpcode::get<CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE* ClientOpcode::get_if<CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE>() {
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) {
        return &CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE& ClientOpcode::get<CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST* ClientOpcode::get_if<CMSG_BATTLEFIELD_MGR_EXIT_REQUEST>() {
    if (opcode == Opcode::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) {
        return &CMSG_BATTLEFIELD_MGR_EXIT_REQUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST& ClientOpcode::get<CMSG_BATTLEFIELD_MGR_EXIT_REQUEST>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_RAID_DIFFICULTY_Client* ClientOpcode::get_if<MSG_SET_RAID_DIFFICULTY_Client>() {
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        return &MSG_SET_RAID_DIFFICULTY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_RAID_DIFFICULTY_Client& ClientOpcode::get<MSG_SET_RAID_DIFFICULTY_Client>() {
    auto p = ClientOpcode::get_if<wrath::MSG_SET_RAID_DIFFICULTY_Client>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMRESPONSE_RESOLVE* ClientOpcode::get_if<CMSG_GMRESPONSE_RESOLVE>() {
    if (opcode == Opcode::CMSG_GMRESPONSE_RESOLVE) {
        return &CMSG_GMRESPONSE_RESOLVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GMRESPONSE_RESOLVE& ClientOpcode::get<CMSG_GMRESPONSE_RESOLVE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GMRESPONSE_RESOLVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE* ClientOpcode::get_if<CMSG_WORLD_STATE_UI_TIMER_UPDATE>() {
    if (opcode == Opcode::CMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        return &CMSG_WORLD_STATE_UI_TIMER_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE& ClientOpcode::get<CMSG_WORLD_STATE_UI_TIMER_UPDATE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_WORLD_STATE_UI_TIMER_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_RACE_CHANGE* ClientOpcode::get_if<CMSG_CHAR_RACE_CHANGE>() {
    if (opcode == Opcode::CMSG_CHAR_RACE_CHANGE) {
        return &CMSG_CHAR_RACE_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CHAR_RACE_CHANGE& ClientOpcode::get<CMSG_CHAR_RACE_CHANGE>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_CHAR_RACE_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES* ClientOpcode::get_if<CMSG_READY_FOR_ACCOUNT_DATA_TIMES>() {
    if (opcode == Opcode::CMSG_READY_FOR_ACCOUNT_DATA_TIMES) {
        return &CMSG_READY_FOR_ACCOUNT_DATA_TIMES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES& ClientOpcode::get<CMSG_READY_FOR_ACCOUNT_DATA_TIMES>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_READY_FOR_ACCOUNT_DATA_TIMES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_QUESTS_COMPLETED* ClientOpcode::get_if<CMSG_QUERY_QUESTS_COMPLETED>() {
    if (opcode == Opcode::CMSG_QUERY_QUESTS_COMPLETED) {
        return &CMSG_QUERY_QUESTS_COMPLETED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_QUERY_QUESTS_COMPLETED& ClientOpcode::get<CMSG_QUERY_QUESTS_COMPLETED>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_QUERY_QUESTS_COMPLETED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GM_REPORT_LAG* ClientOpcode::get_if<CMSG_GM_REPORT_LAG>() {
    if (opcode == Opcode::CMSG_GM_REPORT_LAG) {
        return &CMSG_GM_REPORT_LAG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_GM_REPORT_LAG& ClientOpcode::get<CMSG_GM_REPORT_LAG>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_GM_REPORT_LAG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK* ClientOpcode::get_if<CMSG_MOVE_SET_COLLISION_HGT_ACK>() {
    if (opcode == Opcode::CMSG_MOVE_SET_COLLISION_HGT_ACK) {
        return &CMSG_MOVE_SET_COLLISION_HGT_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK& ClientOpcode::get<CMSG_MOVE_SET_COLLISION_HGT_ACK>() {
    auto p = ClientOpcode::get_if<wrath::CMSG_MOVE_SET_COLLISION_HGT_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}


WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode ServerOpcode::read(Reader& reader, const std::function<void(unsigned char*, size_t)>& decrypt) {
    constexpr size_t HEADER_SIZE = 5;
    unsigned char header[HEADER_SIZE];

    reader.read_bytes(header, HEADER_SIZE - 1);
    decrypt(header, HEADER_SIZE - 1);

    uint32_t _size;
    uint16_t opcode;

    if((header[0] &0x80) != 0) {
        reader.read_bytes(header + 4, 1);
        decrypt(header + 4, 1);

        _size = static_cast<uint32_t>(header[0]) << 16 | static_cast<uint32_t>(header[1]) << 8 | static_cast<uint32_t>(header[2]);
        opcode = static_cast<uint16_t>(header[3]) | static_cast<uint16_t>(header[4]) << 8;
    } else {
        _size = static_cast<uint32_t>(header[0]) << 8 | static_cast<uint32_t>(header[1]);
        opcode = static_cast<uint16_t>(header[2]) | static_cast<uint16_t>(header[3]) << 8;
    }


    ServerOpcode op;

    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHAR_CREATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHAR_CREATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHAR_ENUM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHAR_ENUM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHAR_DELETE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHAR_DELETE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_NEW_WORLD)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_NEW_WORLD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TRANSFER_PENDING)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TRANSFER_PENDING_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TRANSFER_ABORTED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TRANSFER_ABORTED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHARACTER_LOGIN_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHARACTER_LOGIN_FAILED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOGIN_SETTIMESPEED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOGIN_SETTIMESPEED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOGOUT_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOGOUT_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOGOUT_COMPLETE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOGOUT_COMPLETE{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOGOUT_CANCEL_ACK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOGOUT_CANCEL_ACK{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_NAME_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_NAME_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_NAME_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_NAME_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GUILD_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GUILD_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUEST_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUEST_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CREATURE_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CREATURE_QUERY_RESPONSE_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_WHO)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_WHO_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_WHOIS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_WHOIS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CONTACT_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CONTACT_LIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FRIEND_STATUS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FRIEND_STATUS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GROUP_INVITE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GROUP_INVITE_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GROUP_DECLINE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GROUP_DECLINE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GROUP_UNINVITE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GROUP_UNINVITE{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GROUP_SET_LEADER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GROUP_SET_LEADER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GROUP_DESTROYED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GROUP_DESTROYED{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GROUP_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GROUP_LIST_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PARTY_MEMBER_STATS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PARTY_MEMBER_STATS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PARTY_COMMAND_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PARTY_COMMAND_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GUILD_INVITE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GUILD_INVITE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GUILD_DECLINE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GUILD_DECLINE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GUILD_INFO)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GUILD_INFO_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GUILD_ROSTER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GUILD_ROSTER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GUILD_EVENT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GUILD_EVENT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GUILD_COMMAND_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GUILD_COMMAND_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MESSAGECHAT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MESSAGECHAT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHANNEL_NOTIFY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHANNEL_NOTIFY_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHANNEL_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHANNEL_LIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_UPDATE_OBJECT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_UPDATE_OBJECT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DESTROY_OBJECT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DESTROY_OBJECT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_READ_ITEM_OK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_READ_ITEM_OK_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_READ_ITEM_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_READ_ITEM_FAILED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ITEM_COOLDOWN)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ITEM_COOLDOWN_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_FORWARD)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_FORWARD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_BACKWARD)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_BACKWARD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_STOP)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_STRAFE_LEFT)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_STRAFE_LEFT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_STRAFE_RIGHT)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_STRAFE_RIGHT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_STOP_STRAFE)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_STRAFE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_JUMP)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_JUMP_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_TURN_LEFT)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_TURN_LEFT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_TURN_RIGHT)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_TURN_RIGHT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_STOP_TURN)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_TURN_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_PITCH_UP)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_PITCH_UP_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_PITCH_DOWN)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_PITCH_DOWN_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_STOP_PITCH)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_PITCH_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_SET_RUN_MODE)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_RUN_MODE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_SET_WALK_MODE)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_WALK_MODE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_TELEPORT_CHEAT)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_TELEPORT_CHEAT_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_TELEPORT_ACK)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_TELEPORT_ACK_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_FALL_LAND)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_FALL_LAND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_SWIM)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_SWIM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_STOP_SWIM)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_SWIM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_SET_FACING)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_FACING_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_SET_PITCH)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_PITCH_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_WORLDPORT_ACK)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_WORLDPORT_ACK{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MONSTER_MOVE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MONSTER_MOVE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_WATER_WALK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_WATER_WALK_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_LAND_WALK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_LAND_WALK_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_RUN_SPEED_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_RUN_SPEED_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_SWIM_SPEED_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_MOVE_ROOT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_MOVE_ROOT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_MOVE_UNROOT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_MOVE_UNROOT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_ROOT)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_ROOT_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_UNROOT)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_UNROOT_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_HEARTBEAT)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_HEARTBEAT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_KNOCK_BACK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_KNOCK_BACK_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_KNOCK_BACK)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_KNOCK_BACK_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_FEATHER_FALL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_FEATHER_FALL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_NORMAL_FALL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_NORMAL_FALL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_SET_HOVER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_SET_HOVER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_UNSET_HOVER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_UNSET_HOVER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_HOVER)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_HOVER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TRIGGER_CINEMATIC)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TRIGGER_CINEMATIC_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TUTORIAL_FLAGS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TUTORIAL_FLAGS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_EMOTE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_EMOTE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TEXT_EMOTE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TEXT_EMOTE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INVENTORY_CHANGE_FAILURE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INVENTORY_CHANGE_FAILURE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TRADE_STATUS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TRADE_STATUS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TRADE_STATUS_EXTENDED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TRADE_STATUS_EXTENDED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INITIALIZE_FACTIONS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INITIALIZE_FACTIONS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SET_FACTION_VISIBLE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SET_FACTION_VISIBLE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SET_FACTION_STANDING)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SET_FACTION_STANDING_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SET_PROFICIENCY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SET_PROFICIENCY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ACTION_BUTTONS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ACTION_BUTTONS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INITIAL_SPELLS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INITIAL_SPELLS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LEARNED_SPELL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LEARNED_SPELL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SUPERCEDED_SPELL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SUPERCEDED_SPELL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CAST_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CAST_FAILED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELL_START)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELL_START_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELL_GO)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELL_GO_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELL_FAILURE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELL_FAILURE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELL_COOLDOWN)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELL_COOLDOWN_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_COOLDOWN_EVENT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_COOLDOWN_EVENT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_CAST_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_CAST_FAILED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_CHANNEL_START)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_CHANNEL_START_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_CHANNEL_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_CHANNEL_UPDATE_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AI_REACTION)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AI_REACTION_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ATTACKSTART)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ATTACKSTART_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ATTACKSTOP)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ATTACKSTOP_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ATTACKSWING_NOTINRANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ATTACKSWING_NOTINRANGE{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ATTACKSWING_BADFACING)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ATTACKSWING_BADFACING{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ATTACKSWING_DEADTARGET)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ATTACKSWING_DEADTARGET{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ATTACKSWING_CANT_ATTACK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ATTACKSWING_CANT_ATTACK{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ATTACKERSTATEUPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ATTACKERSTATEUPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CANCEL_COMBAT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CANCEL_COMBAT{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELLHEALLOG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELLHEALLOG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELLENERGIZELOG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELLENERGIZELOG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BREAK_TARGET)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BREAK_TARGET_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BINDPOINTUPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BINDPOINTUPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PLAYERBOUND)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PLAYERBOUND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CLIENT_CONTROL_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CLIENT_CONTROL_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_RESURRECT_REQUEST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_RESURRECT_REQUEST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_RELEASE_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_RELEASE_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_REMOVED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_REMOVED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_MONEY_NOTIFY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_MONEY_NOTIFY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_CLEAR_MONEY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_CLEAR_MONEY{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ITEM_PUSH_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ITEM_PUSH_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DUEL_REQUESTED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DUEL_REQUESTED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DUEL_OUTOFBOUNDS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DUEL_OUTOFBOUNDS{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DUEL_INBOUNDS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DUEL_INBOUNDS{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DUEL_COMPLETE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DUEL_COMPLETE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DUEL_WINNER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DUEL_WINNER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOUNTRESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOUNTRESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOUNTSPECIAL_ANIM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOUNTSPECIAL_ANIM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_TAME_FAILURE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_TAME_FAILURE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_NAME_INVALID)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_NAME_INVALID_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_SPELLS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_SPELLS_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_MODE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_MODE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GOSSIP_MESSAGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GOSSIP_MESSAGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GOSSIP_COMPLETE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GOSSIP_COMPLETE{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_NPC_TEXT_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_NPC_TEXT_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTGIVER_STATUS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTGIVER_STATUS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTGIVER_QUEST_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTGIVER_QUEST_LIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTGIVER_QUEST_DETAILS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTGIVER_QUEST_DETAILS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTGIVER_REQUEST_ITEMS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTGIVER_OFFER_REWARD)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTGIVER_OFFER_REWARD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTGIVER_QUEST_INVALID)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTGIVER_QUEST_INVALID_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTGIVER_QUEST_COMPLETE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTGIVER_QUEST_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTGIVER_QUEST_FAILED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTLOG_FULL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTLOG_FULL{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTUPDATE_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTUPDATE_FAILED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTUPDATE_FAILEDTIMER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTUPDATE_FAILEDTIMER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTUPDATE_COMPLETE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTUPDATE_COMPLETE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTUPDATE_ADD_KILL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTUPDATE_ADD_KILL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTUPDATE_ADD_ITEM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTUPDATE_ADD_ITEM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUEST_CONFIRM_ACCEPT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUEST_CONFIRM_ACCEPT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LIST_INVENTORY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LIST_INVENTORY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SELL_ITEM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SELL_ITEM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BUY_ITEM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BUY_ITEM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BUY_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BUY_FAILED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SHOWTAXINODES)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SHOWTAXINODES_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TAXINODE_STATUS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TAXINODE_STATUS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ACTIVATETAXIREPLY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ACTIVATETAXIREPLY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_NEW_TAXI_PATH)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_NEW_TAXI_PATH{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TRAINER_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TRAINER_LIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TRAINER_BUY_SUCCEEDED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TRAINER_BUY_SUCCEEDED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TRAINER_BUY_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TRAINER_BUY_FAILED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SHOW_BANK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SHOW_BANK_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BUY_BANK_SLOT_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BUY_BANK_SLOT_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PETITION_SHOWLIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PETITION_SHOWLIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PETITION_SHOW_SIGNATURES)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PETITION_SHOW_SIGNATURES_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PETITION_SIGN_RESULTS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PETITION_SIGN_RESULTS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_PETITION_DECLINE)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_PETITION_DECLINE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TURN_IN_PETITION_RESULTS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TURN_IN_PETITION_RESULTS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PETITION_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PETITION_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FISH_NOT_HOOKED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FISH_NOT_HOOKED{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FISH_ESCAPED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FISH_ESCAPED{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_NOTIFICATION)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_NOTIFICATION_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PLAYED_TIME)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PLAYED_TIME_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUERY_TIME_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUERY_TIME_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOG_XPGAIN)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOG_XPGAIN_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LEVELUP_INFO)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LEVELUP_INFO_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MINIMAP_PING)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MINIMAP_PING_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ENCHANTMENTLOG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ENCHANTMENTLOG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_START_MIRROR_TIMER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_START_MIRROR_TIMER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PAUSE_MIRROR_TIMER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PAUSE_MIRROR_TIMER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_STOP_MIRROR_TIMER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_STOP_MIRROR_TIMER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PONG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PONG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CLEAR_COOLDOWN)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CLEAR_COOLDOWN_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GAMEOBJECT_PAGETEXT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GAMEOBJECT_PAGETEXT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELL_DELAYED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELL_DELAYED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUEST_POI_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUEST_POI_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ITEM_TIME_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ITEM_TIME_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AUTH_CHALLENGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AUTH_CHALLENGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AUTH_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AUTH_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_SAVE_GUILD_EMBLEM)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_SAVE_GUILD_EMBLEM_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_TABARDVENDOR_ACTIVATE)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_TABARDVENDOR_ACTIVATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PLAY_SPELL_VISUAL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PLAY_SPELL_VISUAL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PARTYKILLLOG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PARTYKILLLOG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_COMPRESSED_UPDATE_OBJECT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_COMPRESSED_UPDATE_OBJECT_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PLAY_SPELL_IMPACT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PLAY_SPELL_IMPACT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_EXPLORATION_EXPERIENCE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_EXPLORATION_EXPERIENCE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_RANDOM_ROLL)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_RANDOM_ROLL_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_PLAYER_REWARD)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_PLAYER_REWARD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_TELEPORT_DENIED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_TELEPORT_DENIED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_REMOVED_SPELL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_REMOVED_SPELL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GMTICKET_CREATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GMTICKET_CREATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GMTICKET_UPDATETEXT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GMTICKET_UPDATETEXT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ACCOUNT_DATA_TIMES)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ACCOUNT_DATA_TIMES_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_UPDATE_ACCOUNT_DATA)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_UPDATE_ACCOUNT_DATA_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GMTICKET_GETTICKET)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GMTICKET_GETTICKET_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_CORPSE_QUERY)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_CORPSE_QUERY_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GMTICKET_DELETETICKET)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GMTICKET_DELETETICKET_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHAT_WRONG_FACTION)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHAT_WRONG_FACTION{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GMTICKET_SYSTEMSTATUS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GMTICKET_SYSTEMSTATUS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUEST_FORCE_REMOVE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUEST_FORCE_REMOVE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPIRIT_HEALER_CONFIRM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPIRIT_HEALER_CONFIRM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GOSSIP_POI)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GOSSIP_POI_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOGIN_VERIFY_WORLD)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOGIN_VERIFY_WORLD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SEND_MAIL_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SEND_MAIL_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MAIL_LIST_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MAIL_LIST_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEFIELD_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEFIELD_LIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELLLOGMISS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELLLOGMISS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELLLOGEXECUTE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELLLOGEXECUTE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PERIODICAURALOG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PERIODICAURALOG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELLDAMAGESHIELD)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELLDAMAGESHIELD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELLNONMELEEDAMAGELOG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELLNONMELEEDAMAGELOG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_RESURRECT_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_RESURRECT_FAILED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ZONE_UNDER_ATTACK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ZONE_UNDER_ATTACK_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_AUCTION_HELLO)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_AUCTION_HELLO_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AUCTION_COMMAND_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AUCTION_COMMAND_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AUCTION_LIST_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AUCTION_LIST_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AUCTION_OWNER_LIST_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AUCTION_OWNER_LIST_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AUCTION_BIDDER_NOTIFICATION_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AUCTION_OWNER_NOTIFICATION)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AUCTION_OWNER_NOTIFICATION_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PROCRESIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PROCRESIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DISPEL_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DISPEL_FAILED_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELLORDAMAGE_IMMUNE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELLORDAMAGE_IMMUNE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AUCTION_BIDDER_LIST_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SET_FLAT_SPELL_MODIFIER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SET_FLAT_SPELL_MODIFIER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SET_PCT_SPELL_MODIFIER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SET_PCT_SPELL_MODIFIER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CORPSE_RECLAIM_DELAY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CORPSE_RECLAIM_DELAY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_LIST_STABLED_PETS)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_LIST_STABLED_PETS_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_STABLE_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_STABLE_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_QUEST_PUSH_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_QUEST_PUSH_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PLAY_MUSIC)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PLAY_MUSIC_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PLAY_OBJECT_SOUND)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PLAY_OBJECT_SOUND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELLDISPELLOG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELLDISPELLOG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_QUERY_NEXT_MAIL_TIME)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_QUERY_NEXT_MAIL_TIME_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_RECEIVED_MAIL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_RECEIVED_MAIL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_RAID_GROUP_ONLY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_RAID_GROUP_ONLY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PVP_CREDIT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PVP_CREDIT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AUCTION_REMOVED_NOTIFICATION_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SERVER_MESSAGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SERVER_MESSAGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_OFFER_CONTINUE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_OFFER_CONTINUE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SHOW_MAILBOX)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SHOW_MAILBOX_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CANCEL_AUTO_REPEAT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CANCEL_AUTO_REPEAT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_STANDSTATE_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_STANDSTATE_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_ALL_PASSED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_ALL_PASSED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_ROLL_WON)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_ROLL_WON_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_START_ROLL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_START_ROLL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_ROLL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_ROLL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_MASTER_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_MASTER_LIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SET_FORCED_REACTIONS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SET_FORCED_REACTIONS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELL_FAILED_OTHER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELL_FAILED_OTHER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHAT_PLAYER_NOT_FOUND)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHAT_PLAYER_NOT_FOUND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_TALENT_WIPE_CONFIRM)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_TALENT_WIPE_CONFIRM_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SUMMON_REQUEST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SUMMON_REQUEST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MONSTER_MOVE_TRANSPORT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MONSTER_MOVE_TRANSPORT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_BROKEN)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_BROKEN{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_FEATHER_FALL)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_FEATHER_FALL_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_WATER_WALK)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_WATER_WALK_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FEIGN_DEATH_RESISTED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FEIGN_DEATH_RESISTED{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DUEL_COUNTDOWN)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DUEL_COUNTDOWN_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AREA_TRIGGER_MESSAGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AREA_TRIGGER_MESSAGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_ROLE_CHOSEN)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_ROLE_CHOSEN_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PLAYER_SKINNED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PLAYER_SKINNED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DURABILITY_DAMAGE_DEATH)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DURABILITY_DAMAGE_DEATH{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_PETITION_RENAME)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_PETITION_RENAME_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INIT_WORLD_STATES)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INIT_WORLD_STATES_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_UPDATE_WORLD_STATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_UPDATE_WORLD_STATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ITEM_NAME_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_ACTION_FEEDBACK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_ACTION_FEEDBACK_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHAR_RENAME)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHAR_RENAME_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INSTANCE_SAVE_CREATED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INSTANCE_SAVE_CREATED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_RAID_INSTANCE_INFO)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_RAID_INSTANCE_INFO_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PLAY_SOUND)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PLAY_SOUND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEFIELD_STATUS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEFIELD_STATUS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_INSPECT_HONOR_STATS)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_INSPECT_HONOR_STATS_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_WALK_SPEED_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_WALK_SPEED_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_TURN_RATE_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_TURN_RATE_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AREA_SPIRIT_HEALER_TIME)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AREA_SPIRIT_HEALER_TIME_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_WARDEN_DATA)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_WARDEN_DATA_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GROUP_JOINED_BATTLEGROUND)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GROUP_JOINED_BATTLEGROUND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BINDER_CONFIRM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BINDER_CONFIRM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEGROUND_PLAYER_JOINED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEGROUND_PLAYER_LEFT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ADDON_INFO)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ADDON_INFO_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_UNLEARN_CONFIRM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_UNLEARN_CONFIRM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PARTY_MEMBER_STATS_FULL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PARTY_MEMBER_STATS_FULL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_WEATHER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_WEATHER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_RAID_INSTANCE_MESSAGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_RAID_INSTANCE_MESSAGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_COMPRESSED_MOVES)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_COMPRESSED_MOVES_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHAT_RESTRICTED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHAT_RESTRICTED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_SET_RUN_SPEED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_SET_RUN_SPEED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_SET_SWIM_SPEED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_SET_SWIM_SPEED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_SET_WALK_SPEED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_SET_WALK_SPEED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_SET_TURN_RATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_SET_TURN_RATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_UNROOT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_UNROOT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_FEATHER_FALL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_NORMAL_FALL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_SET_HOVER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_SET_HOVER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_UNSET_HOVER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_WATER_WALK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_WATER_WALK_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_LAND_WALK)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_LAND_WALK_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_START_SWIM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_START_SWIM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_STOP_SWIM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_STOP_SWIM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_TIME_SKIPPED)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_TIME_SKIPPED_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_ROOT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_ROOT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INVALIDATE_PLAYER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INVALIDATE_PLAYER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INSTANCE_RESET)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INSTANCE_RESET_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INSTANCE_RESET_FAILED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INSTANCE_RESET_FAILED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_UPDATE_LAST_INSTANCE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_UPDATE_LAST_INSTANCE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_RAID_TARGET_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_RAID_TARGET_UPDATE_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_RAID_READY_CHECK)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_RAID_READY_CHECK_Server_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_ACTION_SOUND)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_ACTION_SOUND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_DISMISS_SOUND)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_DISMISS_SOUND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GM_TICKET_STATUS_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GM_TICKET_STATUS_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_SET_DUNGEON_DIFFICULTY)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_SET_DUNGEON_DIFFICULTY_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHAT_PLAYER_AMBIGUOUS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELLINSTAKILLLOG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELLINSTAKILLLOG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPELLSTEALLOG)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPELLSTEALLOG_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DEFENSE_MESSAGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DEFENSE_MESSAGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INSTANCE_DIFFICULTY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INSTANCE_DIFFICULTY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOTD)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOTD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_SET_CAN_FLY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_SET_CAN_FLY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_UNSET_CAN_FLY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_UNSET_CAN_FLY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ARENA_TEAM_COMMAND_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ARENA_TEAM_ROSTER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ARENA_TEAM_ROSTER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ARENA_TEAM_INVITE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ARENA_TEAM_INVITE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ARENA_TEAM_EVENT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ARENA_TEAM_EVENT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_ASCEND)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_ASCEND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_STOP_ASCEND)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_STOP_ASCEND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ARENA_TEAM_STATS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ARENA_TEAM_STATS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_UPDATE_LFG_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_UPDATE_LFG_LIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_PROPOSAL_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_PROPOSAL_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_ROLE_CHECK_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_ROLE_CHECK_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_JOIN_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_JOIN_RESULT_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_QUEUE_STATUS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_QUEUE_STATUS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_UPDATE_PLAYER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_UPDATE_PLAYER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_UPDATE_PARTY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_UPDATE_PARTY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_UPDATE_SEARCH)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_UPDATE_SEARCH_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_PLAYER_INFO)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_PLAYER_INFO_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_PARTY_INFO)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_PARTY_INFO_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TITLE_EARNED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TITLE_EARNED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ARENA_ERROR)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ARENA_ERROR_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_INSPECT_ARENA_TEAMS)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_INSPECT_ARENA_TEAMS_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DEATH_RELEASE_LOC)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DEATH_RELEASE_LOC_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCED_DEATH_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCED_DEATH_UPDATE{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_SET_FLIGHT_SPEED)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_SET_FLIGHT_SPEED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FLIGHT_SPLINE_SYNC)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FLIGHT_SPLINE_SYNC_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_REALM_SPLIT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_REALM_SPLIT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TIME_SYNC_REQ)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TIME_SYNC_REQ_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_RESET_FAILED_NOTIFY)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_RESET_FAILED_NOTIFY_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LFG_DISABLED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LFG_DISABLED{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_UPDATE_COMBO_POINTS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_UPDATE_COMBO_POINTS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_START_DESCEND)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_START_DESCEND_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_DISMOUNT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_DISMOUNT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_UPDATE_CAN_FLY)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_UPDATE_CAN_FLY_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_RAID_READY_CHECK_CONFIRM)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_RAID_READY_CHECK_CONFIRM_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GM_MESSAGECHAT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GM_MESSAGECHAT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CLEAR_TARGET)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CLEAR_TARGET_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_KICK_REASON)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_KICK_REASON_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_COMPLAIN_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_COMPLAIN_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FEATURE_SYSTEM_STATUS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FEATURE_SYSTEM_STATUS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHANNEL_MEMBER_COUNT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHANNEL_MEMBER_COUNT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GUILD_BANK_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GUILD_BANK_LIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_GUILD_BANK_LOG_QUERY)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_GUILD_BANK_LOG_QUERY_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_USERLIST_ADD)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_USERLIST_ADD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_USERLIST_REMOVE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_USERLIST_REMOVE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_USERLIST_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_USERLIST_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_INSPECT_TALENT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_INSPECT_TALENT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_LOOT_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_LOOT_LIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_GUILD_PERMISSIONS)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_GUILD_PERMISSIONS_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_GUILD_EVENT_LOG_QUERY)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_GUILD_EVENT_LOG_QUERY_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MIRRORIMAGE_DATA)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MIRRORIMAGE_DATA_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_QUERY_GUILD_BANK_TEXT)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_QUERY_GUILD_BANK_TEXT_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_OVERRIDE_LIGHT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_OVERRIDE_LIGHT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TOTEM_CREATED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TOTEM_CREATED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SEND_UNLEARN_SPELLS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SEND_UNLEARN_SPELLS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PROPOSE_LEVEL_GRANT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PROPOSE_LEVEL_GRANT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_REFER_A_FRIEND_FAILURE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_REFER_A_FRIEND_FAILURE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_SET_FLYING)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_SET_FLYING_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_UNSET_FLYING_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ENABLE_BARBER_SHOP)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ENABLE_BARBER_SHOP{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BARBER_SHOP_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BARBER_SHOP_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_SEND_CALENDAR)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_SEND_CALENDAR_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_SEND_EVENT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_SEND_EVENT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_FILTER_GUILD)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_FILTER_GUILD_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_ARENA_TEAM)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_ARENA_TEAM_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_EVENT_INVITE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_STATUS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_EVENT_STATUS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_COMMAND_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_COMMAND_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::CMSG_CALENDAR_GET_NUM_PENDING)) {
        return ServerOpcode(::wow_world_messages::wrath::CMSG_CALENDAR_GET_NUM_PENDING{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_SEND_NUM_PENDING)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_SEND_NUM_PENDING_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_SET_PITCH_RATE)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_SET_PITCH_RATE_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_FORCE_PITCH_RATE_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_FORCE_PITCH_RATE_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TRIGGER_MOVIE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TRIGGER_MOVIE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ACHIEVEMENT_EARNED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ACHIEVEMENT_EARNED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CRITERIA_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CRITERIA_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHAR_CUSTOMIZE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHAR_CUSTOMIZE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SET_PHASE_SHIFT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SET_PHASE_SHIFT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ALL_ACHIEVEMENT_DATA)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ALL_ACHIEVEMENT_DATA_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_POWER_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_POWER_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_HIGHEST_THREAT_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_HIGHEST_THREAT_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_THREAT_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_THREAT_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_THREAT_REMOVE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_THREAT_REMOVE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_THREAT_CLEAR)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_THREAT_CLEAR_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CONVERT_RUNE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CONVERT_RUNE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_RESYNC_RUNES)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_RESYNC_RUNES_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ADD_RUNE_POWER)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ADD_RUNE_POWER_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AUCTION_LIST_PENDING_SALES)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AUCTION_LIST_PENDING_SALES_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MODIFY_COOLDOWN)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MODIFY_COOLDOWN_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_UPDATE_COMBO_POINTS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_UPDATE_COMBO_POINTS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PRE_RESURRECT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PRE_RESURRECT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AURA_UPDATE_ALL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AURA_UPDATE_ALL_read(reader, _size - 2));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_AURA_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_AURA_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SERVER_FIRST_ACHIEVEMENT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_LEARNED_SPELL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_LEARNED_SPELL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_UNLEARNED_SPELL)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_UNLEARNED_SPELL_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CRITERIA_DELETED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CRITERIA_DELETED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ACHIEVEMENT_DELETED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ACHIEVEMENT_DELETED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEGROUND_INFO_THROTTLED{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PLAYER_VEHICLE_DATA)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PLAYER_VEHICLE_DATA_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_PET_GUIDS)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_PET_GUIDS_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CLIENTCACHE_VERSION)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CLIENTCACHE_VERSION_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ITEM_REFUND_INFO_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ITEM_REFUND_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ITEM_REFUND_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_EQUIPMENT_SET_LIST)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_EQUIPMENT_SET_LIST_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SET_PROJECTILE_POSITION)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SET_PROJECTILE_POSITION_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TALENTS_INFO)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TALENTS_INFO_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ARENA_UNIT_DESTROYED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ARENA_UNIT_DESTROYED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_GRAVITY_DISABLE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_GRAVITY_DISABLE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_GRAVITY_ENABLE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_GRAVITY_ENABLE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_MOVE_GRAVITY_CHNG)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_MOVE_GRAVITY_CHNG_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_EQUIPMENT_SET_USE_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_EQUIPMENT_SET_USE_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CHAR_FACTION_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CHAR_FACTION_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_ENTERED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEFIELD_MGR_ENTERED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_EJECTED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEFIELD_MGR_EJECTED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::MSG_SET_RAID_DIFFICULTY)) {
        return ServerOpcode(::wow_world_messages::wrath::MSG_SET_RAID_DIFFICULTY_Server_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TOGGLE_XP_GAIN)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TOGGLE_XP_GAIN{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GMRESPONSE_DB_ERROR)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GMRESPONSE_DB_ERROR{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GMRESPONSE_RECEIVED)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GMRESPONSE_RECEIVED_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_GMRESPONSE_STATUS_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_GMRESPONSE_STATUS_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_TALENTS_INVOLUNTARILY_RESET_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CORPSE_NOT_IN_INSTANCE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CORPSE_NOT_IN_INSTANCE{});
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_CAMERA_SHAKE)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_CAMERA_SHAKE_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_SOCKET_GEMS_RESULT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_SOCKET_GEMS_RESULT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_REDIRECT_CLIENT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_REDIRECT_CLIENT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MOVE_SET_COLLISION_HGT)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MOVE_SET_COLLISION_HGT_read(reader));
    }
    if (opcode == static_cast<uint16_t>(ServerOpcode::Opcode::SMSG_MULTIPLE_MOVES)) {
        return ServerOpcode(::wow_world_messages::wrath::SMSG_MULTIPLE_MOVES_read(reader, _size - 2));
    }

    return op;
}
WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> ServerOpcode::write(const std::function<void(unsigned char*, size_t)>& encrypt) const {
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHAR_CREATE) {
        return this->SMSG_CHAR_CREATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHAR_ENUM) {
        return this->SMSG_CHAR_ENUM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHAR_DELETE) {
        return this->SMSG_CHAR_DELETE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_NEW_WORLD) {
        return this->SMSG_NEW_WORLD.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TRANSFER_PENDING) {
        return this->SMSG_TRANSFER_PENDING.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TRANSFER_ABORTED) {
        return this->SMSG_TRANSFER_ABORTED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHARACTER_LOGIN_FAILED) {
        return this->SMSG_CHARACTER_LOGIN_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOGIN_SETTIMESPEED) {
        return this->SMSG_LOGIN_SETTIMESPEED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOGOUT_RESPONSE) {
        return this->SMSG_LOGOUT_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOGOUT_COMPLETE) {
        return this->SMSG_LOGOUT_COMPLETE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOGOUT_CANCEL_ACK) {
        return this->SMSG_LOGOUT_CANCEL_ACK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_NAME_QUERY_RESPONSE) {
        return this->SMSG_NAME_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_NAME_QUERY_RESPONSE) {
        return this->SMSG_PET_NAME_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GUILD_QUERY_RESPONSE) {
        return this->SMSG_GUILD_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) {
        return this->SMSG_ITEM_QUERY_SINGLE_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) {
        return this->SMSG_PAGE_TEXT_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUEST_QUERY_RESPONSE) {
        return this->SMSG_QUEST_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) {
        return this->SMSG_GAMEOBJECT_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CREATURE_QUERY_RESPONSE) {
        return this->SMSG_CREATURE_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_WHO) {
        return this->SMSG_WHO.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_WHOIS) {
        return this->SMSG_WHOIS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CONTACT_LIST) {
        return this->SMSG_CONTACT_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FRIEND_STATUS) {
        return this->SMSG_FRIEND_STATUS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GROUP_INVITE) {
        return this->SMSG_GROUP_INVITE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GROUP_DECLINE) {
        return this->SMSG_GROUP_DECLINE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GROUP_UNINVITE) {
        return this->SMSG_GROUP_UNINVITE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GROUP_SET_LEADER) {
        return this->SMSG_GROUP_SET_LEADER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GROUP_DESTROYED) {
        return this->SMSG_GROUP_DESTROYED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GROUP_LIST) {
        return this->SMSG_GROUP_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PARTY_MEMBER_STATS) {
        return this->SMSG_PARTY_MEMBER_STATS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PARTY_COMMAND_RESULT) {
        return this->SMSG_PARTY_COMMAND_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GUILD_INVITE) {
        return this->SMSG_GUILD_INVITE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GUILD_DECLINE) {
        return this->SMSG_GUILD_DECLINE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GUILD_INFO) {
        return this->SMSG_GUILD_INFO.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GUILD_ROSTER) {
        return this->SMSG_GUILD_ROSTER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GUILD_EVENT) {
        return this->SMSG_GUILD_EVENT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GUILD_COMMAND_RESULT) {
        return this->SMSG_GUILD_COMMAND_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MESSAGECHAT) {
        return this->SMSG_MESSAGECHAT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHANNEL_NOTIFY) {
        return this->SMSG_CHANNEL_NOTIFY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHANNEL_LIST) {
        return this->SMSG_CHANNEL_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_UPDATE_OBJECT) {
        return this->SMSG_UPDATE_OBJECT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DESTROY_OBJECT) {
        return this->SMSG_DESTROY_OBJECT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_READ_ITEM_OK) {
        return this->SMSG_READ_ITEM_OK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_READ_ITEM_FAILED) {
        return this->SMSG_READ_ITEM_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ITEM_COOLDOWN) {
        return this->SMSG_ITEM_COOLDOWN.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) {
        return this->SMSG_GAMEOBJECT_CUSTOM_ANIM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_FORWARD) {
        return this->MSG_MOVE_START_FORWARD.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_BACKWARD) {
        return this->MSG_MOVE_START_BACKWARD.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_STOP) {
        return this->MSG_MOVE_STOP.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        return this->MSG_MOVE_START_STRAFE_LEFT.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        return this->MSG_MOVE_START_STRAFE_RIGHT.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_STOP_STRAFE) {
        return this->MSG_MOVE_STOP_STRAFE.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_JUMP) {
        return this->MSG_MOVE_JUMP.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_TURN_LEFT) {
        return this->MSG_MOVE_START_TURN_LEFT.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_TURN_RIGHT) {
        return this->MSG_MOVE_START_TURN_RIGHT.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_STOP_TURN) {
        return this->MSG_MOVE_STOP_TURN.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_PITCH_UP) {
        return this->MSG_MOVE_START_PITCH_UP.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_PITCH_DOWN) {
        return this->MSG_MOVE_START_PITCH_DOWN.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_STOP_PITCH) {
        return this->MSG_MOVE_STOP_PITCH.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_SET_RUN_MODE) {
        return this->MSG_MOVE_SET_RUN_MODE.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_SET_WALK_MODE) {
        return this->MSG_MOVE_SET_WALK_MODE.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_TELEPORT_CHEAT) {
        return this->MSG_MOVE_TELEPORT_CHEAT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_TELEPORT_ACK) {
        return this->MSG_MOVE_TELEPORT_ACK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_FALL_LAND) {
        return this->MSG_MOVE_FALL_LAND.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_SWIM) {
        return this->MSG_MOVE_START_SWIM.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_STOP_SWIM) {
        return this->MSG_MOVE_STOP_SWIM.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_SET_FACING) {
        return this->MSG_MOVE_SET_FACING.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_SET_PITCH) {
        return this->MSG_MOVE_SET_PITCH.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_WORLDPORT_ACK) {
        return this->MSG_MOVE_WORLDPORT_ACK.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MONSTER_MOVE) {
        return this->SMSG_MONSTER_MOVE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_WATER_WALK) {
        return this->SMSG_MOVE_WATER_WALK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_LAND_WALK) {
        return this->SMSG_MOVE_LAND_WALK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) {
        return this->SMSG_FORCE_RUN_SPEED_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) {
        return this->SMSG_FORCE_RUN_BACK_SPEED_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) {
        return this->SMSG_FORCE_SWIM_SPEED_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_MOVE_ROOT) {
        return this->SMSG_FORCE_MOVE_ROOT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_MOVE_UNROOT) {
        return this->SMSG_FORCE_MOVE_UNROOT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_ROOT) {
        return this->MSG_MOVE_ROOT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_UNROOT) {
        return this->MSG_MOVE_UNROOT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_HEARTBEAT) {
        return this->MSG_MOVE_HEARTBEAT.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_KNOCK_BACK) {
        return this->SMSG_MOVE_KNOCK_BACK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_KNOCK_BACK) {
        return this->MSG_MOVE_KNOCK_BACK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_FEATHER_FALL) {
        return this->SMSG_MOVE_FEATHER_FALL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_NORMAL_FALL) {
        return this->SMSG_MOVE_NORMAL_FALL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_SET_HOVER) {
        return this->SMSG_MOVE_SET_HOVER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_UNSET_HOVER) {
        return this->SMSG_MOVE_UNSET_HOVER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_HOVER) {
        return this->MSG_MOVE_HOVER.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TRIGGER_CINEMATIC) {
        return this->SMSG_TRIGGER_CINEMATIC.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TUTORIAL_FLAGS) {
        return this->SMSG_TUTORIAL_FLAGS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_EMOTE) {
        return this->SMSG_EMOTE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TEXT_EMOTE) {
        return this->SMSG_TEXT_EMOTE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INVENTORY_CHANGE_FAILURE) {
        return this->SMSG_INVENTORY_CHANGE_FAILURE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TRADE_STATUS) {
        return this->SMSG_TRADE_STATUS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TRADE_STATUS_EXTENDED) {
        return this->SMSG_TRADE_STATUS_EXTENDED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INITIALIZE_FACTIONS) {
        return this->SMSG_INITIALIZE_FACTIONS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SET_FACTION_VISIBLE) {
        return this->SMSG_SET_FACTION_VISIBLE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SET_FACTION_STANDING) {
        return this->SMSG_SET_FACTION_STANDING.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SET_PROFICIENCY) {
        return this->SMSG_SET_PROFICIENCY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ACTION_BUTTONS) {
        return this->SMSG_ACTION_BUTTONS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INITIAL_SPELLS) {
        return this->SMSG_INITIAL_SPELLS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LEARNED_SPELL) {
        return this->SMSG_LEARNED_SPELL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SUPERCEDED_SPELL) {
        return this->SMSG_SUPERCEDED_SPELL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CAST_FAILED) {
        return this->SMSG_CAST_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELL_START) {
        return this->SMSG_SPELL_START.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELL_GO) {
        return this->SMSG_SPELL_GO.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELL_FAILURE) {
        return this->SMSG_SPELL_FAILURE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELL_COOLDOWN) {
        return this->SMSG_SPELL_COOLDOWN.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_COOLDOWN_EVENT) {
        return this->SMSG_COOLDOWN_EVENT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_CAST_FAILED) {
        return this->SMSG_PET_CAST_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_CHANNEL_START) {
        return this->MSG_CHANNEL_START.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_CHANNEL_UPDATE) {
        return this->MSG_CHANNEL_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AI_REACTION) {
        return this->SMSG_AI_REACTION.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ATTACKSTART) {
        return this->SMSG_ATTACKSTART.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ATTACKSTOP) {
        return this->SMSG_ATTACKSTOP.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ATTACKSWING_NOTINRANGE) {
        return this->SMSG_ATTACKSWING_NOTINRANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ATTACKSWING_BADFACING) {
        return this->SMSG_ATTACKSWING_BADFACING.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) {
        return this->SMSG_INSTANCE_LOCK_WARNING_QUERY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ATTACKSWING_DEADTARGET) {
        return this->SMSG_ATTACKSWING_DEADTARGET.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ATTACKSWING_CANT_ATTACK) {
        return this->SMSG_ATTACKSWING_CANT_ATTACK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ATTACKERSTATEUPDATE) {
        return this->SMSG_ATTACKERSTATEUPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CANCEL_COMBAT) {
        return this->SMSG_CANCEL_COMBAT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELLHEALLOG) {
        return this->SMSG_SPELLHEALLOG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELLENERGIZELOG) {
        return this->SMSG_SPELLENERGIZELOG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BREAK_TARGET) {
        return this->SMSG_BREAK_TARGET.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BINDPOINTUPDATE) {
        return this->SMSG_BINDPOINTUPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PLAYERBOUND) {
        return this->SMSG_PLAYERBOUND.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CLIENT_CONTROL_UPDATE) {
        return this->SMSG_CLIENT_CONTROL_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_RESURRECT_REQUEST) {
        return this->SMSG_RESURRECT_REQUEST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_RESPONSE) {
        return this->SMSG_LOOT_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_RELEASE_RESPONSE) {
        return this->SMSG_LOOT_RELEASE_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_REMOVED) {
        return this->SMSG_LOOT_REMOVED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_MONEY_NOTIFY) {
        return this->SMSG_LOOT_MONEY_NOTIFY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_CLEAR_MONEY) {
        return this->SMSG_LOOT_CLEAR_MONEY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ITEM_PUSH_RESULT) {
        return this->SMSG_ITEM_PUSH_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DUEL_REQUESTED) {
        return this->SMSG_DUEL_REQUESTED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DUEL_OUTOFBOUNDS) {
        return this->SMSG_DUEL_OUTOFBOUNDS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DUEL_INBOUNDS) {
        return this->SMSG_DUEL_INBOUNDS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DUEL_COMPLETE) {
        return this->SMSG_DUEL_COMPLETE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DUEL_WINNER) {
        return this->SMSG_DUEL_WINNER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOUNTRESULT) {
        return this->SMSG_MOUNTRESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOUNTSPECIAL_ANIM) {
        return this->SMSG_MOUNTSPECIAL_ANIM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_TAME_FAILURE) {
        return this->SMSG_PET_TAME_FAILURE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_NAME_INVALID) {
        return this->SMSG_PET_NAME_INVALID.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_SPELLS) {
        return this->SMSG_PET_SPELLS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_MODE) {
        return this->SMSG_PET_MODE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GOSSIP_MESSAGE) {
        return this->SMSG_GOSSIP_MESSAGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GOSSIP_COMPLETE) {
        return this->SMSG_GOSSIP_COMPLETE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_NPC_TEXT_UPDATE) {
        return this->SMSG_NPC_TEXT_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTGIVER_STATUS) {
        return this->SMSG_QUESTGIVER_STATUS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTGIVER_QUEST_LIST) {
        return this->SMSG_QUESTGIVER_QUEST_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) {
        return this->SMSG_QUESTGIVER_QUEST_DETAILS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) {
        return this->SMSG_QUESTGIVER_REQUEST_ITEMS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTGIVER_OFFER_REWARD) {
        return this->SMSG_QUESTGIVER_OFFER_REWARD.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTGIVER_QUEST_INVALID) {
        return this->SMSG_QUESTGIVER_QUEST_INVALID.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) {
        return this->SMSG_QUESTGIVER_QUEST_COMPLETE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTGIVER_QUEST_FAILED) {
        return this->SMSG_QUESTGIVER_QUEST_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTLOG_FULL) {
        return this->SMSG_QUESTLOG_FULL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTUPDATE_FAILED) {
        return this->SMSG_QUESTUPDATE_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) {
        return this->SMSG_QUESTUPDATE_FAILEDTIMER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTUPDATE_COMPLETE) {
        return this->SMSG_QUESTUPDATE_COMPLETE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTUPDATE_ADD_KILL) {
        return this->SMSG_QUESTUPDATE_ADD_KILL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTUPDATE_ADD_ITEM) {
        return this->SMSG_QUESTUPDATE_ADD_ITEM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUEST_CONFIRM_ACCEPT) {
        return this->SMSG_QUEST_CONFIRM_ACCEPT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LIST_INVENTORY) {
        return this->SMSG_LIST_INVENTORY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SELL_ITEM) {
        return this->SMSG_SELL_ITEM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BUY_ITEM) {
        return this->SMSG_BUY_ITEM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BUY_FAILED) {
        return this->SMSG_BUY_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SHOWTAXINODES) {
        return this->SMSG_SHOWTAXINODES.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TAXINODE_STATUS) {
        return this->SMSG_TAXINODE_STATUS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ACTIVATETAXIREPLY) {
        return this->SMSG_ACTIVATETAXIREPLY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_NEW_TAXI_PATH) {
        return this->SMSG_NEW_TAXI_PATH.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TRAINER_LIST) {
        return this->SMSG_TRAINER_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TRAINER_BUY_SUCCEEDED) {
        return this->SMSG_TRAINER_BUY_SUCCEEDED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TRAINER_BUY_FAILED) {
        return this->SMSG_TRAINER_BUY_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SHOW_BANK) {
        return this->SMSG_SHOW_BANK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BUY_BANK_SLOT_RESULT) {
        return this->SMSG_BUY_BANK_SLOT_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PETITION_SHOWLIST) {
        return this->SMSG_PETITION_SHOWLIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PETITION_SHOW_SIGNATURES) {
        return this->SMSG_PETITION_SHOW_SIGNATURES.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PETITION_SIGN_RESULTS) {
        return this->SMSG_PETITION_SIGN_RESULTS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_PETITION_DECLINE) {
        return this->MSG_PETITION_DECLINE.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TURN_IN_PETITION_RESULTS) {
        return this->SMSG_TURN_IN_PETITION_RESULTS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PETITION_QUERY_RESPONSE) {
        return this->SMSG_PETITION_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FISH_NOT_HOOKED) {
        return this->SMSG_FISH_NOT_HOOKED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FISH_ESCAPED) {
        return this->SMSG_FISH_ESCAPED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_NOTIFICATION) {
        return this->SMSG_NOTIFICATION.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PLAYED_TIME) {
        return this->SMSG_PLAYED_TIME.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUERY_TIME_RESPONSE) {
        return this->SMSG_QUERY_TIME_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOG_XPGAIN) {
        return this->SMSG_LOG_XPGAIN.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LEVELUP_INFO) {
        return this->SMSG_LEVELUP_INFO.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MINIMAP_PING) {
        return this->MSG_MINIMAP_PING.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ENCHANTMENTLOG) {
        return this->SMSG_ENCHANTMENTLOG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_START_MIRROR_TIMER) {
        return this->SMSG_START_MIRROR_TIMER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PAUSE_MIRROR_TIMER) {
        return this->SMSG_PAUSE_MIRROR_TIMER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_STOP_MIRROR_TIMER) {
        return this->SMSG_STOP_MIRROR_TIMER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PONG) {
        return this->SMSG_PONG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CLEAR_COOLDOWN) {
        return this->SMSG_CLEAR_COOLDOWN.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GAMEOBJECT_PAGETEXT) {
        return this->SMSG_GAMEOBJECT_PAGETEXT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELL_DELAYED) {
        return this->SMSG_SPELL_DELAYED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) {
        return this->SMSG_QUEST_POI_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ITEM_TIME_UPDATE) {
        return this->SMSG_ITEM_TIME_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) {
        return this->SMSG_ITEM_ENCHANT_TIME_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AUTH_CHALLENGE) {
        return this->SMSG_AUTH_CHALLENGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AUTH_RESPONSE) {
        return this->SMSG_AUTH_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_SAVE_GUILD_EMBLEM) {
        return this->MSG_SAVE_GUILD_EMBLEM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        return this->MSG_TABARDVENDOR_ACTIVATE.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PLAY_SPELL_VISUAL) {
        return this->SMSG_PLAY_SPELL_VISUAL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PARTYKILLLOG) {
        return this->SMSG_PARTYKILLLOG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) {
        return this->SMSG_COMPRESSED_UPDATE_OBJECT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PLAY_SPELL_IMPACT) {
        return this->SMSG_PLAY_SPELL_IMPACT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_EXPLORATION_EXPERIENCE) {
        return this->SMSG_EXPLORATION_EXPERIENCE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_RANDOM_ROLL) {
        return this->MSG_RANDOM_ROLL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) {
        return this->SMSG_ENVIRONMENTAL_DAMAGE_LOG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_PLAYER_REWARD) {
        return this->SMSG_LFG_PLAYER_REWARD.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_TELEPORT_DENIED) {
        return this->SMSG_LFG_TELEPORT_DENIED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_REMOVED_SPELL) {
        return this->SMSG_REMOVED_SPELL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GMTICKET_CREATE) {
        return this->SMSG_GMTICKET_CREATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GMTICKET_UPDATETEXT) {
        return this->SMSG_GMTICKET_UPDATETEXT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ACCOUNT_DATA_TIMES) {
        return this->SMSG_ACCOUNT_DATA_TIMES.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_UPDATE_ACCOUNT_DATA) {
        return this->SMSG_UPDATE_ACCOUNT_DATA.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GMTICKET_GETTICKET) {
        return this->SMSG_GMTICKET_GETTICKET.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) {
        return this->SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) {
        return this->SMSG_GAMEOBJECT_DESPAWN_ANIM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_CORPSE_QUERY) {
        return this->MSG_CORPSE_QUERY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GMTICKET_DELETETICKET) {
        return this->SMSG_GMTICKET_DELETETICKET.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHAT_WRONG_FACTION) {
        return this->SMSG_CHAT_WRONG_FACTION.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GMTICKET_SYSTEMSTATUS) {
        return this->SMSG_GMTICKET_SYSTEMSTATUS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUEST_FORCE_REMOVE) {
        return this->SMSG_QUEST_FORCE_REMOVE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPIRIT_HEALER_CONFIRM) {
        return this->SMSG_SPIRIT_HEALER_CONFIRM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GOSSIP_POI) {
        return this->SMSG_GOSSIP_POI.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOGIN_VERIFY_WORLD) {
        return this->SMSG_LOGIN_VERIFY_WORLD.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SEND_MAIL_RESULT) {
        return this->SMSG_SEND_MAIL_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MAIL_LIST_RESULT) {
        return this->SMSG_MAIL_LIST_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEFIELD_LIST) {
        return this->SMSG_BATTLEFIELD_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) {
        return this->SMSG_ITEM_TEXT_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELLLOGMISS) {
        return this->SMSG_SPELLLOGMISS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELLLOGEXECUTE) {
        return this->SMSG_SPELLLOGEXECUTE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PERIODICAURALOG) {
        return this->SMSG_PERIODICAURALOG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELLDAMAGESHIELD) {
        return this->SMSG_SPELLDAMAGESHIELD.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELLNONMELEEDAMAGELOG) {
        return this->SMSG_SPELLNONMELEEDAMAGELOG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_RESURRECT_FAILED) {
        return this->SMSG_RESURRECT_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ZONE_UNDER_ATTACK) {
        return this->SMSG_ZONE_UNDER_ATTACK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_AUCTION_HELLO) {
        return this->MSG_AUCTION_HELLO.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AUCTION_COMMAND_RESULT) {
        return this->SMSG_AUCTION_COMMAND_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AUCTION_LIST_RESULT) {
        return this->SMSG_AUCTION_LIST_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) {
        return this->SMSG_AUCTION_OWNER_LIST_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) {
        return this->SMSG_AUCTION_BIDDER_NOTIFICATION.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) {
        return this->SMSG_AUCTION_OWNER_NOTIFICATION.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PROCRESIST) {
        return this->SMSG_PROCRESIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DISPEL_FAILED) {
        return this->SMSG_DISPEL_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELLORDAMAGE_IMMUNE) {
        return this->SMSG_SPELLORDAMAGE_IMMUNE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) {
        return this->SMSG_AUCTION_BIDDER_LIST_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) {
        return this->SMSG_SET_FLAT_SPELL_MODIFIER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SET_PCT_SPELL_MODIFIER) {
        return this->SMSG_SET_PCT_SPELL_MODIFIER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CORPSE_RECLAIM_DELAY) {
        return this->SMSG_CORPSE_RECLAIM_DELAY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_LIST_STABLED_PETS) {
        return this->MSG_LIST_STABLED_PETS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_STABLE_RESULT) {
        return this->SMSG_STABLE_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_QUEST_PUSH_RESULT) {
        return this->MSG_QUEST_PUSH_RESULT.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PLAY_MUSIC) {
        return this->SMSG_PLAY_MUSIC.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PLAY_OBJECT_SOUND) {
        return this->SMSG_PLAY_OBJECT_SOUND.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELLDISPELLOG) {
        return this->SMSG_SPELLDISPELLOG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        return this->MSG_QUERY_NEXT_MAIL_TIME.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_RECEIVED_MAIL) {
        return this->SMSG_RECEIVED_MAIL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_RAID_GROUP_ONLY) {
        return this->SMSG_RAID_GROUP_ONLY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PVP_CREDIT) {
        return this->SMSG_PVP_CREDIT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) {
        return this->SMSG_AUCTION_REMOVED_NOTIFICATION.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SERVER_MESSAGE) {
        return this->SMSG_SERVER_MESSAGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_OFFER_CONTINUE) {
        return this->SMSG_LFG_OFFER_CONTINUE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SHOW_MAILBOX) {
        return this->SMSG_SHOW_MAILBOX.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CANCEL_AUTO_REPEAT) {
        return this->SMSG_CANCEL_AUTO_REPEAT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_STANDSTATE_UPDATE) {
        return this->SMSG_STANDSTATE_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_ALL_PASSED) {
        return this->SMSG_LOOT_ALL_PASSED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_ROLL_WON) {
        return this->SMSG_LOOT_ROLL_WON.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_START_ROLL) {
        return this->SMSG_LOOT_START_ROLL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_ROLL) {
        return this->SMSG_LOOT_ROLL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_MASTER_LIST) {
        return this->SMSG_LOOT_MASTER_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SET_FORCED_REACTIONS) {
        return this->SMSG_SET_FORCED_REACTIONS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELL_FAILED_OTHER) {
        return this->SMSG_SPELL_FAILED_OTHER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) {
        return this->SMSG_CHAT_PLAYER_NOT_FOUND.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_TALENT_WIPE_CONFIRM) {
        return this->MSG_TALENT_WIPE_CONFIRM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SUMMON_REQUEST) {
        return this->SMSG_SUMMON_REQUEST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MONSTER_MOVE_TRANSPORT) {
        return this->SMSG_MONSTER_MOVE_TRANSPORT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_BROKEN) {
        return this->SMSG_PET_BROKEN.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_FEATHER_FALL) {
        return this->MSG_MOVE_FEATHER_FALL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_WATER_WALK) {
        return this->MSG_MOVE_WATER_WALK.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FEIGN_DEATH_RESISTED) {
        return this->SMSG_FEIGN_DEATH_RESISTED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DUEL_COUNTDOWN) {
        return this->SMSG_DUEL_COUNTDOWN.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AREA_TRIGGER_MESSAGE) {
        return this->SMSG_AREA_TRIGGER_MESSAGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_ROLE_CHOSEN) {
        return this->SMSG_LFG_ROLE_CHOSEN.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PLAYER_SKINNED) {
        return this->SMSG_PLAYER_SKINNED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DURABILITY_DAMAGE_DEATH) {
        return this->SMSG_DURABILITY_DAMAGE_DEATH.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_PETITION_RENAME) {
        return this->MSG_PETITION_RENAME.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INIT_WORLD_STATES) {
        return this->SMSG_INIT_WORLD_STATES.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_UPDATE_WORLD_STATE) {
        return this->SMSG_UPDATE_WORLD_STATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) {
        return this->SMSG_ITEM_NAME_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_ACTION_FEEDBACK) {
        return this->SMSG_PET_ACTION_FEEDBACK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHAR_RENAME) {
        return this->SMSG_CHAR_RENAME.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INSTANCE_SAVE_CREATED) {
        return this->SMSG_INSTANCE_SAVE_CREATED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_RAID_INSTANCE_INFO) {
        return this->SMSG_RAID_INSTANCE_INFO.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PLAY_SOUND) {
        return this->SMSG_PLAY_SOUND.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEFIELD_STATUS) {
        return this->SMSG_BATTLEFIELD_STATUS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_INSPECT_HONOR_STATS) {
        return this->MSG_INSPECT_HONOR_STATS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) {
        return this->SMSG_FORCE_WALK_SPEED_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) {
        return this->SMSG_FORCE_SWIM_BACK_SPEED_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_TURN_RATE_CHANGE) {
        return this->SMSG_FORCE_TURN_RATE_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) {
        return this->SMSG_AREA_SPIRIT_HEALER_TIME.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_WARDEN_DATA) {
        return this->SMSG_WARDEN_DATA.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) {
        return this->SMSG_GROUP_JOINED_BATTLEGROUND.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        return this->MSG_BATTLEGROUND_PLAYER_POSITIONS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BINDER_CONFIRM) {
        return this->SMSG_BINDER_CONFIRM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) {
        return this->SMSG_BATTLEGROUND_PLAYER_JOINED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) {
        return this->SMSG_BATTLEGROUND_PLAYER_LEFT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ADDON_INFO) {
        return this->SMSG_ADDON_INFO.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_UNLEARN_CONFIRM) {
        return this->SMSG_PET_UNLEARN_CONFIRM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PARTY_MEMBER_STATS_FULL) {
        return this->SMSG_PARTY_MEMBER_STATS_FULL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_WEATHER) {
        return this->SMSG_WEATHER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_RAID_INSTANCE_MESSAGE) {
        return this->SMSG_RAID_INSTANCE_MESSAGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_COMPRESSED_MOVES) {
        return this->SMSG_COMPRESSED_MOVES.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHAT_RESTRICTED) {
        return this->SMSG_CHAT_RESTRICTED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_SET_RUN_SPEED) {
        return this->SMSG_SPLINE_SET_RUN_SPEED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) {
        return this->SMSG_SPLINE_SET_RUN_BACK_SPEED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_SET_SWIM_SPEED) {
        return this->SMSG_SPLINE_SET_SWIM_SPEED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_SET_WALK_SPEED) {
        return this->SMSG_SPLINE_SET_WALK_SPEED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) {
        return this->SMSG_SPLINE_SET_SWIM_BACK_SPEED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_SET_TURN_RATE) {
        return this->SMSG_SPLINE_SET_TURN_RATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_UNROOT) {
        return this->SMSG_SPLINE_MOVE_UNROOT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) {
        return this->SMSG_SPLINE_MOVE_FEATHER_FALL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) {
        return this->SMSG_SPLINE_MOVE_NORMAL_FALL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_SET_HOVER) {
        return this->SMSG_SPLINE_MOVE_SET_HOVER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) {
        return this->SMSG_SPLINE_MOVE_UNSET_HOVER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_WATER_WALK) {
        return this->SMSG_SPLINE_MOVE_WATER_WALK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_LAND_WALK) {
        return this->SMSG_SPLINE_MOVE_LAND_WALK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_START_SWIM) {
        return this->SMSG_SPLINE_MOVE_START_SWIM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) {
        return this->SMSG_SPLINE_MOVE_STOP_SWIM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) {
        return this->SMSG_SPLINE_MOVE_SET_RUN_MODE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) {
        return this->SMSG_SPLINE_MOVE_SET_WALK_MODE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_TIME_SKIPPED) {
        return this->MSG_MOVE_TIME_SKIPPED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_ROOT) {
        return this->SMSG_SPLINE_MOVE_ROOT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INVALIDATE_PLAYER) {
        return this->SMSG_INVALIDATE_PLAYER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INSTANCE_RESET) {
        return this->SMSG_INSTANCE_RESET.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INSTANCE_RESET_FAILED) {
        return this->SMSG_INSTANCE_RESET_FAILED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_UPDATE_LAST_INSTANCE) {
        return this->SMSG_UPDATE_LAST_INSTANCE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_RAID_TARGET_UPDATE) {
        return this->MSG_RAID_TARGET_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_RAID_READY_CHECK) {
        return this->MSG_RAID_READY_CHECK.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_ACTION_SOUND) {
        return this->SMSG_PET_ACTION_SOUND.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_DISMISS_SOUND) {
        return this->SMSG_PET_DISMISS_SOUND.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GM_TICKET_STATUS_UPDATE) {
        return this->SMSG_GM_TICKET_STATUS_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        return this->MSG_SET_DUNGEON_DIFFICULTY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) {
        return this->SMSG_UPDATE_INSTANCE_OWNERSHIP.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) {
        return this->SMSG_CHAT_PLAYER_AMBIGUOUS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELLINSTAKILLLOG) {
        return this->SMSG_SPELLINSTAKILLLOG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) {
        return this->SMSG_SPELL_UPDATE_CHAIN_TARGETS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPELLSTEALLOG) {
        return this->SMSG_SPELLSTEALLOG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DEFENSE_MESSAGE) {
        return this->SMSG_DEFENSE_MESSAGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INSTANCE_DIFFICULTY) {
        return this->SMSG_INSTANCE_DIFFICULTY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOTD) {
        return this->SMSG_MOTD.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_SET_CAN_FLY) {
        return this->SMSG_MOVE_SET_CAN_FLY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_UNSET_CAN_FLY) {
        return this->SMSG_MOVE_UNSET_CAN_FLY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) {
        return this->SMSG_ARENA_TEAM_COMMAND_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) {
        return this->SMSG_ARENA_TEAM_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ARENA_TEAM_ROSTER) {
        return this->SMSG_ARENA_TEAM_ROSTER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ARENA_TEAM_INVITE) {
        return this->SMSG_ARENA_TEAM_INVITE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ARENA_TEAM_EVENT) {
        return this->SMSG_ARENA_TEAM_EVENT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_ASCEND) {
        return this->MSG_MOVE_START_ASCEND.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_STOP_ASCEND) {
        return this->MSG_MOVE_STOP_ASCEND.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ARENA_TEAM_STATS) {
        return this->SMSG_ARENA_TEAM_STATS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_UPDATE_LFG_LIST) {
        return this->SMSG_UPDATE_LFG_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_PROPOSAL_UPDATE) {
        return this->SMSG_LFG_PROPOSAL_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) {
        return this->SMSG_LFG_ROLE_CHECK_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_JOIN_RESULT) {
        return this->SMSG_LFG_JOIN_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_QUEUE_STATUS) {
        return this->SMSG_LFG_QUEUE_STATUS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_UPDATE_PLAYER) {
        return this->SMSG_LFG_UPDATE_PLAYER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_UPDATE_PARTY) {
        return this->SMSG_LFG_UPDATE_PARTY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_UPDATE_SEARCH) {
        return this->SMSG_LFG_UPDATE_SEARCH.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) {
        return this->SMSG_LFG_BOOT_PROPOSAL_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_PLAYER_INFO) {
        return this->SMSG_LFG_PLAYER_INFO.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_PARTY_INFO) {
        return this->SMSG_LFG_PARTY_INFO.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TITLE_EARNED) {
        return this->SMSG_TITLE_EARNED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ARENA_ERROR) {
        return this->SMSG_ARENA_ERROR.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_INSPECT_ARENA_TEAMS) {
        return this->MSG_INSPECT_ARENA_TEAMS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DEATH_RELEASE_LOC) {
        return this->SMSG_DEATH_RELEASE_LOC.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCED_DEATH_UPDATE) {
        return this->SMSG_FORCED_DEATH_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_SET_FLIGHT_SPEED) {
        return this->MSG_MOVE_SET_FLIGHT_SPEED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        return this->MSG_MOVE_SET_FLIGHT_BACK_SPEED.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) {
        return this->SMSG_FORCE_FLIGHT_SPEED_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) {
        return this->SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) {
        return this->SMSG_SPLINE_SET_FLIGHT_SPEED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) {
        return this->SMSG_SPLINE_SET_FLIGHT_BACK_SPEED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FLIGHT_SPLINE_SYNC) {
        return this->SMSG_FLIGHT_SPLINE_SYNC.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_REALM_SPLIT) {
        return this->SMSG_REALM_SPLIT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TIME_SYNC_REQ) {
        return this->SMSG_TIME_SYNC_REQ.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_RESET_FAILED_NOTIFY) {
        return this->SMSG_RESET_FAILED_NOTIFY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LFG_DISABLED) {
        return this->SMSG_LFG_DISABLED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_UPDATE_COMBO_POINTS) {
        return this->SMSG_UPDATE_COMBO_POINTS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_START_DESCEND) {
        return this->MSG_MOVE_START_DESCEND.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_DISMOUNT) {
        return this->SMSG_DISMOUNT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_UPDATE_CAN_FLY) {
        return this->MSG_MOVE_UPDATE_CAN_FLY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        return this->MSG_RAID_READY_CHECK_CONFIRM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GM_MESSAGECHAT) {
        return this->SMSG_GM_MESSAGECHAT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CLEAR_TARGET) {
        return this->SMSG_CLEAR_TARGET.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) {
        return this->SMSG_CROSSED_INEBRIATION_THRESHOLD.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_KICK_REASON) {
        return this->SMSG_KICK_REASON.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_COMPLAIN_RESULT) {
        return this->SMSG_COMPLAIN_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FEATURE_SYSTEM_STATUS) {
        return this->SMSG_FEATURE_SYSTEM_STATUS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHANNEL_MEMBER_COUNT) {
        return this->SMSG_CHANNEL_MEMBER_COUNT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GUILD_BANK_LIST) {
        return this->SMSG_GUILD_BANK_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        return this->MSG_GUILD_BANK_LOG_QUERY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_USERLIST_ADD) {
        return this->SMSG_USERLIST_ADD.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_USERLIST_REMOVE) {
        return this->SMSG_USERLIST_REMOVE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_USERLIST_UPDATE) {
        return this->SMSG_USERLIST_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_INSPECT_TALENT) {
        return this->SMSG_INSPECT_TALENT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_LOOT_LIST) {
        return this->SMSG_LOOT_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_GUILD_PERMISSIONS) {
        return this->MSG_GUILD_PERMISSIONS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        return this->MSG_GUILD_BANK_MONEY_WITHDRAWN.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        return this->MSG_GUILD_EVENT_LOG_QUERY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MIRRORIMAGE_DATA) {
        return this->SMSG_MIRRORIMAGE_DATA.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        return this->MSG_QUERY_GUILD_BANK_TEXT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_OVERRIDE_LIGHT) {
        return this->SMSG_OVERRIDE_LIGHT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TOTEM_CREATED) {
        return this->SMSG_TOTEM_CREATED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) {
        return this->SMSG_QUESTGIVER_STATUS_MULTIPLE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) {
        return this->SMSG_SET_PLAYER_DECLINED_NAMES_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SEND_UNLEARN_SPELLS) {
        return this->SMSG_SEND_UNLEARN_SPELLS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PROPOSE_LEVEL_GRANT) {
        return this->SMSG_PROPOSE_LEVEL_GRANT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_REFER_A_FRIEND_FAILURE) {
        return this->SMSG_REFER_A_FRIEND_FAILURE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_SET_FLYING) {
        return this->SMSG_SPLINE_MOVE_SET_FLYING.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) {
        return this->SMSG_SPLINE_MOVE_UNSET_FLYING.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ENABLE_BARBER_SHOP) {
        return this->SMSG_ENABLE_BARBER_SHOP.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BARBER_SHOP_RESULT) {
        return this->SMSG_BARBER_SHOP_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_SEND_CALENDAR) {
        return this->SMSG_CALENDAR_SEND_CALENDAR.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_SEND_EVENT) {
        return this->SMSG_CALENDAR_SEND_EVENT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_FILTER_GUILD) {
        return this->SMSG_CALENDAR_FILTER_GUILD.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_ARENA_TEAM) {
        return this->SMSG_CALENDAR_ARENA_TEAM.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE) {
        return this->SMSG_CALENDAR_EVENT_INVITE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) {
        return this->SMSG_CALENDAR_EVENT_INVITE_REMOVED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_STATUS) {
        return this->SMSG_CALENDAR_EVENT_STATUS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_COMMAND_RESULT) {
        return this->SMSG_CALENDAR_COMMAND_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) {
        return this->SMSG_CALENDAR_RAID_LOCKOUT_ADDED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) {
        return this->SMSG_CALENDAR_RAID_LOCKOUT_REMOVED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) {
        return this->SMSG_CALENDAR_EVENT_INVITE_ALERT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) {
        return this->SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) {
        return this->SMSG_CALENDAR_EVENT_REMOVED_ALERT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) {
        return this->SMSG_CALENDAR_EVENT_UPDATED_ALERT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) {
        return this->SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        return this->CMSG_CALENDAR_GET_NUM_PENDING.write_smsg(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) {
        return this->SMSG_CALENDAR_SEND_NUM_PENDING.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_SET_PITCH_RATE) {
        return this->MSG_MOVE_SET_PITCH_RATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) {
        return this->SMSG_FORCE_PITCH_RATE_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) {
        return this->SMSG_CALENDAR_EVENT_INVITE_NOTES.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) {
        return this->SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) {
        return this->SMSG_UPDATE_ACCOUNT_DATA_COMPLETE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TRIGGER_MOVIE) {
        return this->SMSG_TRIGGER_MOVIE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ACHIEVEMENT_EARNED) {
        return this->SMSG_ACHIEVEMENT_EARNED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CRITERIA_UPDATE) {
        return this->SMSG_CRITERIA_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) {
        return this->SMSG_RESPOND_INSPECT_ACHIEVEMENTS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) {
        return this->SMSG_QUESTUPDATE_ADD_PVP_KILL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) {
        return this->SMSG_CALENDAR_RAID_LOCKOUT_UPDATED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHAR_CUSTOMIZE) {
        return this->SMSG_CHAR_CUSTOMIZE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SET_PHASE_SHIFT) {
        return this->SMSG_SET_PHASE_SHIFT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ALL_ACHIEVEMENT_DATA) {
        return this->SMSG_ALL_ACHIEVEMENT_DATA.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_POWER_UPDATE) {
        return this->SMSG_POWER_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_HIGHEST_THREAT_UPDATE) {
        return this->SMSG_HIGHEST_THREAT_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_THREAT_UPDATE) {
        return this->SMSG_THREAT_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_THREAT_REMOVE) {
        return this->SMSG_THREAT_REMOVE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_THREAT_CLEAR) {
        return this->SMSG_THREAT_CLEAR.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CONVERT_RUNE) {
        return this->SMSG_CONVERT_RUNE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_RESYNC_RUNES) {
        return this->SMSG_RESYNC_RUNES.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ADD_RUNE_POWER) {
        return this->SMSG_ADD_RUNE_POWER.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AUCTION_LIST_PENDING_SALES) {
        return this->SMSG_AUCTION_LIST_PENDING_SALES.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MODIFY_COOLDOWN) {
        return this->SMSG_MODIFY_COOLDOWN.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_UPDATE_COMBO_POINTS) {
        return this->SMSG_PET_UPDATE_COMBO_POINTS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PRE_RESURRECT) {
        return this->SMSG_PRE_RESURRECT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AURA_UPDATE_ALL) {
        return this->SMSG_AURA_UPDATE_ALL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_AURA_UPDATE) {
        return this->SMSG_AURA_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) {
        return this->SMSG_SERVER_FIRST_ACHIEVEMENT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_LEARNED_SPELL) {
        return this->SMSG_PET_LEARNED_SPELL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_UNLEARNED_SPELL) {
        return this->SMSG_PET_UNLEARNED_SPELL.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) {
        return this->SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CRITERIA_DELETED) {
        return this->SMSG_CRITERIA_DELETED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ACHIEVEMENT_DELETED) {
        return this->SMSG_ACHIEVEMENT_DELETED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) {
        return this->SMSG_BATTLEGROUND_INFO_THROTTLED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PLAYER_VEHICLE_DATA) {
        return this->SMSG_PLAYER_VEHICLE_DATA.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_PET_GUIDS) {
        return this->SMSG_PET_GUIDS.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CLIENTCACHE_VERSION) {
        return this->SMSG_CLIENTCACHE_VERSION.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) {
        return this->SMSG_ITEM_REFUND_INFO_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ITEM_REFUND_RESULT) {
        return this->SMSG_ITEM_REFUND_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) {
        return this->SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) {
        return this->SMSG_CALENDAR_CLEAR_PENDING_ACTION.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_EQUIPMENT_SET_LIST) {
        return this->SMSG_EQUIPMENT_SET_LIST.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SET_PROJECTILE_POSITION) {
        return this->SMSG_SET_PROJECTILE_POSITION.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TALENTS_INFO) {
        return this->SMSG_TALENTS_INFO.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ARENA_UNIT_DESTROYED) {
        return this->SMSG_ARENA_UNIT_DESTROYED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) {
        return this->SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_GRAVITY_DISABLE) {
        return this->SMSG_MOVE_GRAVITY_DISABLE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_GRAVITY_ENABLE) {
        return this->SMSG_MOVE_GRAVITY_ENABLE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_MOVE_GRAVITY_CHNG) {
        return this->MSG_MOVE_GRAVITY_CHNG.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) {
        return this->SMSG_SPLINE_MOVE_GRAVITY_DISABLE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) {
        return this->SMSG_SPLINE_MOVE_GRAVITY_ENABLE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) {
        return this->SMSG_EQUIPMENT_SET_USE_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CHAR_FACTION_CHANGE) {
        return this->SMSG_CHAR_FACTION_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) {
        return this->SMSG_BATTLEFIELD_MGR_ENTRY_INVITE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) {
        return this->SMSG_BATTLEFIELD_MGR_ENTERED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) {
        return this->SMSG_BATTLEFIELD_MGR_QUEUE_INVITE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) {
        return this->SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) {
        return this->SMSG_BATTLEFIELD_MGR_EJECT_PENDING.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) {
        return this->SMSG_BATTLEFIELD_MGR_EJECTED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) {
        return this->SMSG_BATTLEFIELD_MGR_STATE_CHANGE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::MSG_SET_RAID_DIFFICULTY) {
        return this->MSG_SET_RAID_DIFFICULTY.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TOGGLE_XP_GAIN) {
        return this->SMSG_TOGGLE_XP_GAIN.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GMRESPONSE_DB_ERROR) {
        return this->SMSG_GMRESPONSE_DB_ERROR.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GMRESPONSE_RECEIVED) {
        return this->SMSG_GMRESPONSE_RECEIVED.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) {
        return this->SMSG_GMRESPONSE_STATUS_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        return this->SMSG_WORLD_STATE_UI_TIMER_UPDATE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) {
        return this->SMSG_TALENTS_INVOLUNTARILY_RESET.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) {
        return this->SMSG_QUERY_QUESTS_COMPLETED_RESPONSE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) {
        return this->SMSG_CORPSE_NOT_IN_INSTANCE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_CAMERA_SHAKE) {
        return this->SMSG_CAMERA_SHAKE.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_SOCKET_GEMS_RESULT) {
        return this->SMSG_SOCKET_GEMS_RESULT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_REDIRECT_CLIENT) {
        return this->SMSG_REDIRECT_CLIENT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MOVE_SET_COLLISION_HGT) {
        return this->SMSG_MOVE_SET_COLLISION_HGT.write(encrypt);;
    }
    if (this->opcode == ServerOpcode::Opcode::SMSG_MULTIPLE_MOVES) {
        return this->SMSG_MULTIPLE_MOVES.write(encrypt);;
    }

    return {}; /* unreachable */
}
/* 1 destructor */
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::~ServerOpcode() {
    if (opcode == Opcode::SMSG_CHAR_CREATE) {
        this->SMSG_CHAR_CREATE.~SMSG_CHAR_CREATE();
    }
    if (opcode == Opcode::SMSG_CHAR_ENUM) {
        this->SMSG_CHAR_ENUM.~SMSG_CHAR_ENUM();
    }
    if (opcode == Opcode::SMSG_CHAR_DELETE) {
        this->SMSG_CHAR_DELETE.~SMSG_CHAR_DELETE();
    }
    if (opcode == Opcode::SMSG_NEW_WORLD) {
        this->SMSG_NEW_WORLD.~SMSG_NEW_WORLD();
    }
    if (opcode == Opcode::SMSG_TRANSFER_PENDING) {
        this->SMSG_TRANSFER_PENDING.~SMSG_TRANSFER_PENDING();
    }
    if (opcode == Opcode::SMSG_TRANSFER_ABORTED) {
        this->SMSG_TRANSFER_ABORTED.~SMSG_TRANSFER_ABORTED();
    }
    if (opcode == Opcode::SMSG_CHARACTER_LOGIN_FAILED) {
        this->SMSG_CHARACTER_LOGIN_FAILED.~SMSG_CHARACTER_LOGIN_FAILED();
    }
    if (opcode == Opcode::SMSG_LOGIN_SETTIMESPEED) {
        this->SMSG_LOGIN_SETTIMESPEED.~SMSG_LOGIN_SETTIMESPEED();
    }
    if (opcode == Opcode::SMSG_LOGOUT_RESPONSE) {
        this->SMSG_LOGOUT_RESPONSE.~SMSG_LOGOUT_RESPONSE();
    }
    if (opcode == Opcode::SMSG_LOGOUT_COMPLETE) {
        this->SMSG_LOGOUT_COMPLETE.~SMSG_LOGOUT_COMPLETE();
    }
    if (opcode == Opcode::SMSG_LOGOUT_CANCEL_ACK) {
        this->SMSG_LOGOUT_CANCEL_ACK.~SMSG_LOGOUT_CANCEL_ACK();
    }
    if (opcode == Opcode::SMSG_NAME_QUERY_RESPONSE) {
        this->SMSG_NAME_QUERY_RESPONSE.~SMSG_NAME_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_PET_NAME_QUERY_RESPONSE) {
        this->SMSG_PET_NAME_QUERY_RESPONSE.~SMSG_PET_NAME_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_GUILD_QUERY_RESPONSE) {
        this->SMSG_GUILD_QUERY_RESPONSE.~SMSG_GUILD_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) {
        this->SMSG_ITEM_QUERY_SINGLE_RESPONSE.~SMSG_ITEM_QUERY_SINGLE_RESPONSE();
    }
    if (opcode == Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) {
        this->SMSG_PAGE_TEXT_QUERY_RESPONSE.~SMSG_PAGE_TEXT_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_QUEST_QUERY_RESPONSE) {
        this->SMSG_QUEST_QUERY_RESPONSE.~SMSG_QUEST_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) {
        this->SMSG_GAMEOBJECT_QUERY_RESPONSE.~SMSG_GAMEOBJECT_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_CREATURE_QUERY_RESPONSE) {
        this->SMSG_CREATURE_QUERY_RESPONSE.~SMSG_CREATURE_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_WHO) {
        this->SMSG_WHO.~SMSG_WHO();
    }
    if (opcode == Opcode::SMSG_WHOIS) {
        this->SMSG_WHOIS.~SMSG_WHOIS();
    }
    if (opcode == Opcode::SMSG_CONTACT_LIST) {
        this->SMSG_CONTACT_LIST.~SMSG_CONTACT_LIST();
    }
    if (opcode == Opcode::SMSG_FRIEND_STATUS) {
        this->SMSG_FRIEND_STATUS.~SMSG_FRIEND_STATUS();
    }
    if (opcode == Opcode::SMSG_GROUP_INVITE) {
        this->SMSG_GROUP_INVITE.~SMSG_GROUP_INVITE();
    }
    if (opcode == Opcode::SMSG_GROUP_DECLINE) {
        this->SMSG_GROUP_DECLINE.~SMSG_GROUP_DECLINE();
    }
    if (opcode == Opcode::SMSG_GROUP_UNINVITE) {
        this->SMSG_GROUP_UNINVITE.~SMSG_GROUP_UNINVITE();
    }
    if (opcode == Opcode::SMSG_GROUP_SET_LEADER) {
        this->SMSG_GROUP_SET_LEADER.~SMSG_GROUP_SET_LEADER();
    }
    if (opcode == Opcode::SMSG_GROUP_DESTROYED) {
        this->SMSG_GROUP_DESTROYED.~SMSG_GROUP_DESTROYED();
    }
    if (opcode == Opcode::SMSG_GROUP_LIST) {
        this->SMSG_GROUP_LIST.~SMSG_GROUP_LIST();
    }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS) {
        this->SMSG_PARTY_MEMBER_STATS.~SMSG_PARTY_MEMBER_STATS();
    }
    if (opcode == Opcode::SMSG_PARTY_COMMAND_RESULT) {
        this->SMSG_PARTY_COMMAND_RESULT.~SMSG_PARTY_COMMAND_RESULT();
    }
    if (opcode == Opcode::SMSG_GUILD_INVITE) {
        this->SMSG_GUILD_INVITE.~SMSG_GUILD_INVITE();
    }
    if (opcode == Opcode::SMSG_GUILD_DECLINE) {
        this->SMSG_GUILD_DECLINE.~SMSG_GUILD_DECLINE();
    }
    if (opcode == Opcode::SMSG_GUILD_INFO) {
        this->SMSG_GUILD_INFO.~SMSG_GUILD_INFO();
    }
    if (opcode == Opcode::SMSG_GUILD_ROSTER) {
        this->SMSG_GUILD_ROSTER.~SMSG_GUILD_ROSTER();
    }
    if (opcode == Opcode::SMSG_GUILD_EVENT) {
        this->SMSG_GUILD_EVENT.~SMSG_GUILD_EVENT();
    }
    if (opcode == Opcode::SMSG_GUILD_COMMAND_RESULT) {
        this->SMSG_GUILD_COMMAND_RESULT.~SMSG_GUILD_COMMAND_RESULT();
    }
    if (opcode == Opcode::SMSG_MESSAGECHAT) {
        this->SMSG_MESSAGECHAT.~SMSG_MESSAGECHAT();
    }
    if (opcode == Opcode::SMSG_CHANNEL_NOTIFY) {
        this->SMSG_CHANNEL_NOTIFY.~SMSG_CHANNEL_NOTIFY();
    }
    if (opcode == Opcode::SMSG_CHANNEL_LIST) {
        this->SMSG_CHANNEL_LIST.~SMSG_CHANNEL_LIST();
    }
    if (opcode == Opcode::SMSG_UPDATE_OBJECT) {
        this->SMSG_UPDATE_OBJECT.~SMSG_UPDATE_OBJECT();
    }
    if (opcode == Opcode::SMSG_DESTROY_OBJECT) {
        this->SMSG_DESTROY_OBJECT.~SMSG_DESTROY_OBJECT();
    }
    if (opcode == Opcode::SMSG_READ_ITEM_OK) {
        this->SMSG_READ_ITEM_OK.~SMSG_READ_ITEM_OK();
    }
    if (opcode == Opcode::SMSG_READ_ITEM_FAILED) {
        this->SMSG_READ_ITEM_FAILED.~SMSG_READ_ITEM_FAILED();
    }
    if (opcode == Opcode::SMSG_ITEM_COOLDOWN) {
        this->SMSG_ITEM_COOLDOWN.~SMSG_ITEM_COOLDOWN();
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) {
        this->SMSG_GAMEOBJECT_CUSTOM_ANIM.~SMSG_GAMEOBJECT_CUSTOM_ANIM();
    }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        this->MSG_MOVE_START_FORWARD.~MSG_MOVE_START_FORWARD();
    }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        this->MSG_MOVE_START_BACKWARD.~MSG_MOVE_START_BACKWARD();
    }
    if (opcode == Opcode::MSG_MOVE_STOP) {
        this->MSG_MOVE_STOP.~MSG_MOVE_STOP();
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        this->MSG_MOVE_START_STRAFE_LEFT.~MSG_MOVE_START_STRAFE_LEFT();
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        this->MSG_MOVE_START_STRAFE_RIGHT.~MSG_MOVE_START_STRAFE_RIGHT();
    }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        this->MSG_MOVE_STOP_STRAFE.~MSG_MOVE_STOP_STRAFE();
    }
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        this->MSG_MOVE_JUMP.~MSG_MOVE_JUMP();
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        this->MSG_MOVE_START_TURN_LEFT.~MSG_MOVE_START_TURN_LEFT();
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        this->MSG_MOVE_START_TURN_RIGHT.~MSG_MOVE_START_TURN_RIGHT();
    }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        this->MSG_MOVE_STOP_TURN.~MSG_MOVE_STOP_TURN();
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        this->MSG_MOVE_START_PITCH_UP.~MSG_MOVE_START_PITCH_UP();
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        this->MSG_MOVE_START_PITCH_DOWN.~MSG_MOVE_START_PITCH_DOWN();
    }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        this->MSG_MOVE_STOP_PITCH.~MSG_MOVE_STOP_PITCH();
    }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        this->MSG_MOVE_SET_RUN_MODE.~MSG_MOVE_SET_RUN_MODE();
    }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        this->MSG_MOVE_SET_WALK_MODE.~MSG_MOVE_SET_WALK_MODE();
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_CHEAT) {
        this->MSG_MOVE_TELEPORT_CHEAT.~MSG_MOVE_TELEPORT_CHEAT_Server();
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        this->MSG_MOVE_TELEPORT_ACK.~MSG_MOVE_TELEPORT_ACK_Server();
    }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        this->MSG_MOVE_FALL_LAND.~MSG_MOVE_FALL_LAND();
    }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        this->MSG_MOVE_START_SWIM.~MSG_MOVE_START_SWIM();
    }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        this->MSG_MOVE_STOP_SWIM.~MSG_MOVE_STOP_SWIM();
    }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        this->MSG_MOVE_SET_FACING.~MSG_MOVE_SET_FACING();
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        this->MSG_MOVE_SET_PITCH.~MSG_MOVE_SET_PITCH();
    }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        this->MSG_MOVE_WORLDPORT_ACK.~MSG_MOVE_WORLDPORT_ACK();
    }
    if (opcode == Opcode::SMSG_MONSTER_MOVE) {
        this->SMSG_MONSTER_MOVE.~SMSG_MONSTER_MOVE();
    }
    if (opcode == Opcode::SMSG_MOVE_WATER_WALK) {
        this->SMSG_MOVE_WATER_WALK.~SMSG_MOVE_WATER_WALK();
    }
    if (opcode == Opcode::SMSG_MOVE_LAND_WALK) {
        this->SMSG_MOVE_LAND_WALK.~SMSG_MOVE_LAND_WALK();
    }
    if (opcode == Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) {
        this->SMSG_FORCE_RUN_SPEED_CHANGE.~SMSG_FORCE_RUN_SPEED_CHANGE();
    }
    if (opcode == Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) {
        this->SMSG_FORCE_RUN_BACK_SPEED_CHANGE.~SMSG_FORCE_RUN_BACK_SPEED_CHANGE();
    }
    if (opcode == Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) {
        this->SMSG_FORCE_SWIM_SPEED_CHANGE.~SMSG_FORCE_SWIM_SPEED_CHANGE();
    }
    if (opcode == Opcode::SMSG_FORCE_MOVE_ROOT) {
        this->SMSG_FORCE_MOVE_ROOT.~SMSG_FORCE_MOVE_ROOT();
    }
    if (opcode == Opcode::SMSG_FORCE_MOVE_UNROOT) {
        this->SMSG_FORCE_MOVE_UNROOT.~SMSG_FORCE_MOVE_UNROOT();
    }
    if (opcode == Opcode::MSG_MOVE_ROOT) {
        this->MSG_MOVE_ROOT.~MSG_MOVE_ROOT_Server();
    }
    if (opcode == Opcode::MSG_MOVE_UNROOT) {
        this->MSG_MOVE_UNROOT.~MSG_MOVE_UNROOT_Server();
    }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        this->MSG_MOVE_HEARTBEAT.~MSG_MOVE_HEARTBEAT();
    }
    if (opcode == Opcode::SMSG_MOVE_KNOCK_BACK) {
        this->SMSG_MOVE_KNOCK_BACK.~SMSG_MOVE_KNOCK_BACK();
    }
    if (opcode == Opcode::MSG_MOVE_KNOCK_BACK) {
        this->MSG_MOVE_KNOCK_BACK.~MSG_MOVE_KNOCK_BACK_Server();
    }
    if (opcode == Opcode::SMSG_MOVE_FEATHER_FALL) {
        this->SMSG_MOVE_FEATHER_FALL.~SMSG_MOVE_FEATHER_FALL();
    }
    if (opcode == Opcode::SMSG_MOVE_NORMAL_FALL) {
        this->SMSG_MOVE_NORMAL_FALL.~SMSG_MOVE_NORMAL_FALL();
    }
    if (opcode == Opcode::SMSG_MOVE_SET_HOVER) {
        this->SMSG_MOVE_SET_HOVER.~SMSG_MOVE_SET_HOVER();
    }
    if (opcode == Opcode::SMSG_MOVE_UNSET_HOVER) {
        this->SMSG_MOVE_UNSET_HOVER.~SMSG_MOVE_UNSET_HOVER();
    }
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        this->MSG_MOVE_HOVER.~MSG_MOVE_HOVER();
    }
    if (opcode == Opcode::SMSG_TRIGGER_CINEMATIC) {
        this->SMSG_TRIGGER_CINEMATIC.~SMSG_TRIGGER_CINEMATIC();
    }
    if (opcode == Opcode::SMSG_TUTORIAL_FLAGS) {
        this->SMSG_TUTORIAL_FLAGS.~SMSG_TUTORIAL_FLAGS();
    }
    if (opcode == Opcode::SMSG_EMOTE) {
        this->SMSG_EMOTE.~SMSG_EMOTE();
    }
    if (opcode == Opcode::SMSG_TEXT_EMOTE) {
        this->SMSG_TEXT_EMOTE.~SMSG_TEXT_EMOTE();
    }
    if (opcode == Opcode::SMSG_INVENTORY_CHANGE_FAILURE) {
        this->SMSG_INVENTORY_CHANGE_FAILURE.~SMSG_INVENTORY_CHANGE_FAILURE();
    }
    if (opcode == Opcode::SMSG_TRADE_STATUS) {
        this->SMSG_TRADE_STATUS.~SMSG_TRADE_STATUS();
    }
    if (opcode == Opcode::SMSG_TRADE_STATUS_EXTENDED) {
        this->SMSG_TRADE_STATUS_EXTENDED.~SMSG_TRADE_STATUS_EXTENDED();
    }
    if (opcode == Opcode::SMSG_INITIALIZE_FACTIONS) {
        this->SMSG_INITIALIZE_FACTIONS.~SMSG_INITIALIZE_FACTIONS();
    }
    if (opcode == Opcode::SMSG_SET_FACTION_VISIBLE) {
        this->SMSG_SET_FACTION_VISIBLE.~SMSG_SET_FACTION_VISIBLE();
    }
    if (opcode == Opcode::SMSG_SET_FACTION_STANDING) {
        this->SMSG_SET_FACTION_STANDING.~SMSG_SET_FACTION_STANDING();
    }
    if (opcode == Opcode::SMSG_SET_PROFICIENCY) {
        this->SMSG_SET_PROFICIENCY.~SMSG_SET_PROFICIENCY();
    }
    if (opcode == Opcode::SMSG_ACTION_BUTTONS) {
        this->SMSG_ACTION_BUTTONS.~SMSG_ACTION_BUTTONS();
    }
    if (opcode == Opcode::SMSG_INITIAL_SPELLS) {
        this->SMSG_INITIAL_SPELLS.~SMSG_INITIAL_SPELLS();
    }
    if (opcode == Opcode::SMSG_LEARNED_SPELL) {
        this->SMSG_LEARNED_SPELL.~SMSG_LEARNED_SPELL();
    }
    if (opcode == Opcode::SMSG_SUPERCEDED_SPELL) {
        this->SMSG_SUPERCEDED_SPELL.~SMSG_SUPERCEDED_SPELL();
    }
    if (opcode == Opcode::SMSG_CAST_FAILED) {
        this->SMSG_CAST_FAILED.~SMSG_CAST_FAILED();
    }
    if (opcode == Opcode::SMSG_SPELL_START) {
        this->SMSG_SPELL_START.~SMSG_SPELL_START();
    }
    if (opcode == Opcode::SMSG_SPELL_GO) {
        this->SMSG_SPELL_GO.~SMSG_SPELL_GO();
    }
    if (opcode == Opcode::SMSG_SPELL_FAILURE) {
        this->SMSG_SPELL_FAILURE.~SMSG_SPELL_FAILURE();
    }
    if (opcode == Opcode::SMSG_SPELL_COOLDOWN) {
        this->SMSG_SPELL_COOLDOWN.~SMSG_SPELL_COOLDOWN();
    }
    if (opcode == Opcode::SMSG_COOLDOWN_EVENT) {
        this->SMSG_COOLDOWN_EVENT.~SMSG_COOLDOWN_EVENT();
    }
    if (opcode == Opcode::SMSG_PET_CAST_FAILED) {
        this->SMSG_PET_CAST_FAILED.~SMSG_PET_CAST_FAILED();
    }
    if (opcode == Opcode::MSG_CHANNEL_START) {
        this->MSG_CHANNEL_START.~MSG_CHANNEL_START_Server();
    }
    if (opcode == Opcode::MSG_CHANNEL_UPDATE) {
        this->MSG_CHANNEL_UPDATE.~MSG_CHANNEL_UPDATE_Server();
    }
    if (opcode == Opcode::SMSG_AI_REACTION) {
        this->SMSG_AI_REACTION.~SMSG_AI_REACTION();
    }
    if (opcode == Opcode::SMSG_ATTACKSTART) {
        this->SMSG_ATTACKSTART.~SMSG_ATTACKSTART();
    }
    if (opcode == Opcode::SMSG_ATTACKSTOP) {
        this->SMSG_ATTACKSTOP.~SMSG_ATTACKSTOP();
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_NOTINRANGE) {
        this->SMSG_ATTACKSWING_NOTINRANGE.~SMSG_ATTACKSWING_NOTINRANGE();
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_BADFACING) {
        this->SMSG_ATTACKSWING_BADFACING.~SMSG_ATTACKSWING_BADFACING();
    }
    if (opcode == Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) {
        this->SMSG_INSTANCE_LOCK_WARNING_QUERY.~SMSG_INSTANCE_LOCK_WARNING_QUERY();
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_DEADTARGET) {
        this->SMSG_ATTACKSWING_DEADTARGET.~SMSG_ATTACKSWING_DEADTARGET();
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_CANT_ATTACK) {
        this->SMSG_ATTACKSWING_CANT_ATTACK.~SMSG_ATTACKSWING_CANT_ATTACK();
    }
    if (opcode == Opcode::SMSG_ATTACKERSTATEUPDATE) {
        this->SMSG_ATTACKERSTATEUPDATE.~SMSG_ATTACKERSTATEUPDATE();
    }
    if (opcode == Opcode::SMSG_CANCEL_COMBAT) {
        this->SMSG_CANCEL_COMBAT.~SMSG_CANCEL_COMBAT();
    }
    if (opcode == Opcode::SMSG_SPELLHEALLOG) {
        this->SMSG_SPELLHEALLOG.~SMSG_SPELLHEALLOG();
    }
    if (opcode == Opcode::SMSG_SPELLENERGIZELOG) {
        this->SMSG_SPELLENERGIZELOG.~SMSG_SPELLENERGIZELOG();
    }
    if (opcode == Opcode::SMSG_BREAK_TARGET) {
        this->SMSG_BREAK_TARGET.~SMSG_BREAK_TARGET();
    }
    if (opcode == Opcode::SMSG_BINDPOINTUPDATE) {
        this->SMSG_BINDPOINTUPDATE.~SMSG_BINDPOINTUPDATE();
    }
    if (opcode == Opcode::SMSG_PLAYERBOUND) {
        this->SMSG_PLAYERBOUND.~SMSG_PLAYERBOUND();
    }
    if (opcode == Opcode::SMSG_CLIENT_CONTROL_UPDATE) {
        this->SMSG_CLIENT_CONTROL_UPDATE.~SMSG_CLIENT_CONTROL_UPDATE();
    }
    if (opcode == Opcode::SMSG_RESURRECT_REQUEST) {
        this->SMSG_RESURRECT_REQUEST.~SMSG_RESURRECT_REQUEST();
    }
    if (opcode == Opcode::SMSG_LOOT_RESPONSE) {
        this->SMSG_LOOT_RESPONSE.~SMSG_LOOT_RESPONSE();
    }
    if (opcode == Opcode::SMSG_LOOT_RELEASE_RESPONSE) {
        this->SMSG_LOOT_RELEASE_RESPONSE.~SMSG_LOOT_RELEASE_RESPONSE();
    }
    if (opcode == Opcode::SMSG_LOOT_REMOVED) {
        this->SMSG_LOOT_REMOVED.~SMSG_LOOT_REMOVED();
    }
    if (opcode == Opcode::SMSG_LOOT_MONEY_NOTIFY) {
        this->SMSG_LOOT_MONEY_NOTIFY.~SMSG_LOOT_MONEY_NOTIFY();
    }
    if (opcode == Opcode::SMSG_LOOT_CLEAR_MONEY) {
        this->SMSG_LOOT_CLEAR_MONEY.~SMSG_LOOT_CLEAR_MONEY();
    }
    if (opcode == Opcode::SMSG_ITEM_PUSH_RESULT) {
        this->SMSG_ITEM_PUSH_RESULT.~SMSG_ITEM_PUSH_RESULT();
    }
    if (opcode == Opcode::SMSG_DUEL_REQUESTED) {
        this->SMSG_DUEL_REQUESTED.~SMSG_DUEL_REQUESTED();
    }
    if (opcode == Opcode::SMSG_DUEL_OUTOFBOUNDS) {
        this->SMSG_DUEL_OUTOFBOUNDS.~SMSG_DUEL_OUTOFBOUNDS();
    }
    if (opcode == Opcode::SMSG_DUEL_INBOUNDS) {
        this->SMSG_DUEL_INBOUNDS.~SMSG_DUEL_INBOUNDS();
    }
    if (opcode == Opcode::SMSG_DUEL_COMPLETE) {
        this->SMSG_DUEL_COMPLETE.~SMSG_DUEL_COMPLETE();
    }
    if (opcode == Opcode::SMSG_DUEL_WINNER) {
        this->SMSG_DUEL_WINNER.~SMSG_DUEL_WINNER();
    }
    if (opcode == Opcode::SMSG_MOUNTRESULT) {
        this->SMSG_MOUNTRESULT.~SMSG_MOUNTRESULT();
    }
    if (opcode == Opcode::SMSG_MOUNTSPECIAL_ANIM) {
        this->SMSG_MOUNTSPECIAL_ANIM.~SMSG_MOUNTSPECIAL_ANIM();
    }
    if (opcode == Opcode::SMSG_PET_TAME_FAILURE) {
        this->SMSG_PET_TAME_FAILURE.~SMSG_PET_TAME_FAILURE();
    }
    if (opcode == Opcode::SMSG_PET_NAME_INVALID) {
        this->SMSG_PET_NAME_INVALID.~SMSG_PET_NAME_INVALID();
    }
    if (opcode == Opcode::SMSG_PET_SPELLS) {
        this->SMSG_PET_SPELLS.~SMSG_PET_SPELLS();
    }
    if (opcode == Opcode::SMSG_PET_MODE) {
        this->SMSG_PET_MODE.~SMSG_PET_MODE();
    }
    if (opcode == Opcode::SMSG_GOSSIP_MESSAGE) {
        this->SMSG_GOSSIP_MESSAGE.~SMSG_GOSSIP_MESSAGE();
    }
    if (opcode == Opcode::SMSG_GOSSIP_COMPLETE) {
        this->SMSG_GOSSIP_COMPLETE.~SMSG_GOSSIP_COMPLETE();
    }
    if (opcode == Opcode::SMSG_NPC_TEXT_UPDATE) {
        this->SMSG_NPC_TEXT_UPDATE.~SMSG_NPC_TEXT_UPDATE();
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS) {
        this->SMSG_QUESTGIVER_STATUS.~SMSG_QUESTGIVER_STATUS();
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_LIST) {
        this->SMSG_QUESTGIVER_QUEST_LIST.~SMSG_QUESTGIVER_QUEST_LIST();
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) {
        this->SMSG_QUESTGIVER_QUEST_DETAILS.~SMSG_QUESTGIVER_QUEST_DETAILS();
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) {
        this->SMSG_QUESTGIVER_REQUEST_ITEMS.~SMSG_QUESTGIVER_REQUEST_ITEMS();
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_OFFER_REWARD) {
        this->SMSG_QUESTGIVER_OFFER_REWARD.~SMSG_QUESTGIVER_OFFER_REWARD();
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_INVALID) {
        this->SMSG_QUESTGIVER_QUEST_INVALID.~SMSG_QUESTGIVER_QUEST_INVALID();
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) {
        this->SMSG_QUESTGIVER_QUEST_COMPLETE.~SMSG_QUESTGIVER_QUEST_COMPLETE();
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_FAILED) {
        this->SMSG_QUESTGIVER_QUEST_FAILED.~SMSG_QUESTGIVER_QUEST_FAILED();
    }
    if (opcode == Opcode::SMSG_QUESTLOG_FULL) {
        this->SMSG_QUESTLOG_FULL.~SMSG_QUESTLOG_FULL();
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILED) {
        this->SMSG_QUESTUPDATE_FAILED.~SMSG_QUESTUPDATE_FAILED();
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) {
        this->SMSG_QUESTUPDATE_FAILEDTIMER.~SMSG_QUESTUPDATE_FAILEDTIMER();
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_COMPLETE) {
        this->SMSG_QUESTUPDATE_COMPLETE.~SMSG_QUESTUPDATE_COMPLETE();
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_KILL) {
        this->SMSG_QUESTUPDATE_ADD_KILL.~SMSG_QUESTUPDATE_ADD_KILL();
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_ITEM) {
        this->SMSG_QUESTUPDATE_ADD_ITEM.~SMSG_QUESTUPDATE_ADD_ITEM();
    }
    if (opcode == Opcode::SMSG_QUEST_CONFIRM_ACCEPT) {
        this->SMSG_QUEST_CONFIRM_ACCEPT.~SMSG_QUEST_CONFIRM_ACCEPT();
    }
    if (opcode == Opcode::SMSG_LIST_INVENTORY) {
        this->SMSG_LIST_INVENTORY.~SMSG_LIST_INVENTORY();
    }
    if (opcode == Opcode::SMSG_SELL_ITEM) {
        this->SMSG_SELL_ITEM.~SMSG_SELL_ITEM();
    }
    if (opcode == Opcode::SMSG_BUY_ITEM) {
        this->SMSG_BUY_ITEM.~SMSG_BUY_ITEM();
    }
    if (opcode == Opcode::SMSG_BUY_FAILED) {
        this->SMSG_BUY_FAILED.~SMSG_BUY_FAILED();
    }
    if (opcode == Opcode::SMSG_SHOWTAXINODES) {
        this->SMSG_SHOWTAXINODES.~SMSG_SHOWTAXINODES();
    }
    if (opcode == Opcode::SMSG_TAXINODE_STATUS) {
        this->SMSG_TAXINODE_STATUS.~SMSG_TAXINODE_STATUS();
    }
    if (opcode == Opcode::SMSG_ACTIVATETAXIREPLY) {
        this->SMSG_ACTIVATETAXIREPLY.~SMSG_ACTIVATETAXIREPLY();
    }
    if (opcode == Opcode::SMSG_NEW_TAXI_PATH) {
        this->SMSG_NEW_TAXI_PATH.~SMSG_NEW_TAXI_PATH();
    }
    if (opcode == Opcode::SMSG_TRAINER_LIST) {
        this->SMSG_TRAINER_LIST.~SMSG_TRAINER_LIST();
    }
    if (opcode == Opcode::SMSG_TRAINER_BUY_SUCCEEDED) {
        this->SMSG_TRAINER_BUY_SUCCEEDED.~SMSG_TRAINER_BUY_SUCCEEDED();
    }
    if (opcode == Opcode::SMSG_TRAINER_BUY_FAILED) {
        this->SMSG_TRAINER_BUY_FAILED.~SMSG_TRAINER_BUY_FAILED();
    }
    if (opcode == Opcode::SMSG_SHOW_BANK) {
        this->SMSG_SHOW_BANK.~SMSG_SHOW_BANK();
    }
    if (opcode == Opcode::SMSG_BUY_BANK_SLOT_RESULT) {
        this->SMSG_BUY_BANK_SLOT_RESULT.~SMSG_BUY_BANK_SLOT_RESULT();
    }
    if (opcode == Opcode::SMSG_PETITION_SHOWLIST) {
        this->SMSG_PETITION_SHOWLIST.~SMSG_PETITION_SHOWLIST();
    }
    if (opcode == Opcode::SMSG_PETITION_SHOW_SIGNATURES) {
        this->SMSG_PETITION_SHOW_SIGNATURES.~SMSG_PETITION_SHOW_SIGNATURES();
    }
    if (opcode == Opcode::SMSG_PETITION_SIGN_RESULTS) {
        this->SMSG_PETITION_SIGN_RESULTS.~SMSG_PETITION_SIGN_RESULTS();
    }
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        this->MSG_PETITION_DECLINE.~MSG_PETITION_DECLINE();
    }
    if (opcode == Opcode::SMSG_TURN_IN_PETITION_RESULTS) {
        this->SMSG_TURN_IN_PETITION_RESULTS.~SMSG_TURN_IN_PETITION_RESULTS();
    }
    if (opcode == Opcode::SMSG_PETITION_QUERY_RESPONSE) {
        this->SMSG_PETITION_QUERY_RESPONSE.~SMSG_PETITION_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_FISH_NOT_HOOKED) {
        this->SMSG_FISH_NOT_HOOKED.~SMSG_FISH_NOT_HOOKED();
    }
    if (opcode == Opcode::SMSG_FISH_ESCAPED) {
        this->SMSG_FISH_ESCAPED.~SMSG_FISH_ESCAPED();
    }
    if (opcode == Opcode::SMSG_NOTIFICATION) {
        this->SMSG_NOTIFICATION.~SMSG_NOTIFICATION();
    }
    if (opcode == Opcode::SMSG_PLAYED_TIME) {
        this->SMSG_PLAYED_TIME.~SMSG_PLAYED_TIME();
    }
    if (opcode == Opcode::SMSG_QUERY_TIME_RESPONSE) {
        this->SMSG_QUERY_TIME_RESPONSE.~SMSG_QUERY_TIME_RESPONSE();
    }
    if (opcode == Opcode::SMSG_LOG_XPGAIN) {
        this->SMSG_LOG_XPGAIN.~SMSG_LOG_XPGAIN();
    }
    if (opcode == Opcode::SMSG_LEVELUP_INFO) {
        this->SMSG_LEVELUP_INFO.~SMSG_LEVELUP_INFO();
    }
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        this->MSG_MINIMAP_PING.~MSG_MINIMAP_PING_Server();
    }
    if (opcode == Opcode::SMSG_ENCHANTMENTLOG) {
        this->SMSG_ENCHANTMENTLOG.~SMSG_ENCHANTMENTLOG();
    }
    if (opcode == Opcode::SMSG_START_MIRROR_TIMER) {
        this->SMSG_START_MIRROR_TIMER.~SMSG_START_MIRROR_TIMER();
    }
    if (opcode == Opcode::SMSG_PAUSE_MIRROR_TIMER) {
        this->SMSG_PAUSE_MIRROR_TIMER.~SMSG_PAUSE_MIRROR_TIMER();
    }
    if (opcode == Opcode::SMSG_STOP_MIRROR_TIMER) {
        this->SMSG_STOP_MIRROR_TIMER.~SMSG_STOP_MIRROR_TIMER();
    }
    if (opcode == Opcode::SMSG_PONG) {
        this->SMSG_PONG.~SMSG_PONG();
    }
    if (opcode == Opcode::SMSG_CLEAR_COOLDOWN) {
        this->SMSG_CLEAR_COOLDOWN.~SMSG_CLEAR_COOLDOWN();
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_PAGETEXT) {
        this->SMSG_GAMEOBJECT_PAGETEXT.~SMSG_GAMEOBJECT_PAGETEXT();
    }
    if (opcode == Opcode::SMSG_SPELL_DELAYED) {
        this->SMSG_SPELL_DELAYED.~SMSG_SPELL_DELAYED();
    }
    if (opcode == Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) {
        this->SMSG_QUEST_POI_QUERY_RESPONSE.~SMSG_QUEST_POI_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_ITEM_TIME_UPDATE) {
        this->SMSG_ITEM_TIME_UPDATE.~SMSG_ITEM_TIME_UPDATE();
    }
    if (opcode == Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) {
        this->SMSG_ITEM_ENCHANT_TIME_UPDATE.~SMSG_ITEM_ENCHANT_TIME_UPDATE();
    }
    if (opcode == Opcode::SMSG_AUTH_CHALLENGE) {
        this->SMSG_AUTH_CHALLENGE.~SMSG_AUTH_CHALLENGE();
    }
    if (opcode == Opcode::SMSG_AUTH_RESPONSE) {
        this->SMSG_AUTH_RESPONSE.~SMSG_AUTH_RESPONSE();
    }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        this->MSG_SAVE_GUILD_EMBLEM.~MSG_SAVE_GUILD_EMBLEM_Server();
    }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        this->MSG_TABARDVENDOR_ACTIVATE.~MSG_TABARDVENDOR_ACTIVATE();
    }
    if (opcode == Opcode::SMSG_PLAY_SPELL_VISUAL) {
        this->SMSG_PLAY_SPELL_VISUAL.~SMSG_PLAY_SPELL_VISUAL();
    }
    if (opcode == Opcode::SMSG_PARTYKILLLOG) {
        this->SMSG_PARTYKILLLOG.~SMSG_PARTYKILLLOG();
    }
    if (opcode == Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) {
        this->SMSG_COMPRESSED_UPDATE_OBJECT.~SMSG_COMPRESSED_UPDATE_OBJECT();
    }
    if (opcode == Opcode::SMSG_PLAY_SPELL_IMPACT) {
        this->SMSG_PLAY_SPELL_IMPACT.~SMSG_PLAY_SPELL_IMPACT();
    }
    if (opcode == Opcode::SMSG_EXPLORATION_EXPERIENCE) {
        this->SMSG_EXPLORATION_EXPERIENCE.~SMSG_EXPLORATION_EXPERIENCE();
    }
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        this->MSG_RANDOM_ROLL.~MSG_RANDOM_ROLL_Server();
    }
    if (opcode == Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) {
        this->SMSG_ENVIRONMENTAL_DAMAGE_LOG.~SMSG_ENVIRONMENTAL_DAMAGE_LOG();
    }
    if (opcode == Opcode::SMSG_LFG_PLAYER_REWARD) {
        this->SMSG_LFG_PLAYER_REWARD.~SMSG_LFG_PLAYER_REWARD();
    }
    if (opcode == Opcode::SMSG_LFG_TELEPORT_DENIED) {
        this->SMSG_LFG_TELEPORT_DENIED.~SMSG_LFG_TELEPORT_DENIED();
    }
    if (opcode == Opcode::SMSG_REMOVED_SPELL) {
        this->SMSG_REMOVED_SPELL.~SMSG_REMOVED_SPELL();
    }
    if (opcode == Opcode::SMSG_GMTICKET_CREATE) {
        this->SMSG_GMTICKET_CREATE.~SMSG_GMTICKET_CREATE();
    }
    if (opcode == Opcode::SMSG_GMTICKET_UPDATETEXT) {
        this->SMSG_GMTICKET_UPDATETEXT.~SMSG_GMTICKET_UPDATETEXT();
    }
    if (opcode == Opcode::SMSG_ACCOUNT_DATA_TIMES) {
        this->SMSG_ACCOUNT_DATA_TIMES.~SMSG_ACCOUNT_DATA_TIMES();
    }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA) {
        this->SMSG_UPDATE_ACCOUNT_DATA.~SMSG_UPDATE_ACCOUNT_DATA();
    }
    if (opcode == Opcode::SMSG_GMTICKET_GETTICKET) {
        this->SMSG_GMTICKET_GETTICKET.~SMSG_GMTICKET_GETTICKET();
    }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) {
        this->SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT.~SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT();
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) {
        this->SMSG_GAMEOBJECT_DESPAWN_ANIM.~SMSG_GAMEOBJECT_DESPAWN_ANIM();
    }
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        this->MSG_CORPSE_QUERY.~MSG_CORPSE_QUERY_Server();
    }
    if (opcode == Opcode::SMSG_GMTICKET_DELETETICKET) {
        this->SMSG_GMTICKET_DELETETICKET.~SMSG_GMTICKET_DELETETICKET();
    }
    if (opcode == Opcode::SMSG_CHAT_WRONG_FACTION) {
        this->SMSG_CHAT_WRONG_FACTION.~SMSG_CHAT_WRONG_FACTION();
    }
    if (opcode == Opcode::SMSG_GMTICKET_SYSTEMSTATUS) {
        this->SMSG_GMTICKET_SYSTEMSTATUS.~SMSG_GMTICKET_SYSTEMSTATUS();
    }
    if (opcode == Opcode::SMSG_QUEST_FORCE_REMOVE) {
        this->SMSG_QUEST_FORCE_REMOVE.~SMSG_QUEST_FORCE_REMOVE();
    }
    if (opcode == Opcode::SMSG_SPIRIT_HEALER_CONFIRM) {
        this->SMSG_SPIRIT_HEALER_CONFIRM.~SMSG_SPIRIT_HEALER_CONFIRM();
    }
    if (opcode == Opcode::SMSG_GOSSIP_POI) {
        this->SMSG_GOSSIP_POI.~SMSG_GOSSIP_POI();
    }
    if (opcode == Opcode::SMSG_LOGIN_VERIFY_WORLD) {
        this->SMSG_LOGIN_VERIFY_WORLD.~SMSG_LOGIN_VERIFY_WORLD();
    }
    if (opcode == Opcode::SMSG_SEND_MAIL_RESULT) {
        this->SMSG_SEND_MAIL_RESULT.~SMSG_SEND_MAIL_RESULT();
    }
    if (opcode == Opcode::SMSG_MAIL_LIST_RESULT) {
        this->SMSG_MAIL_LIST_RESULT.~SMSG_MAIL_LIST_RESULT();
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_LIST) {
        this->SMSG_BATTLEFIELD_LIST.~SMSG_BATTLEFIELD_LIST();
    }
    if (opcode == Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) {
        this->SMSG_ITEM_TEXT_QUERY_RESPONSE.~SMSG_ITEM_TEXT_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_SPELLLOGMISS) {
        this->SMSG_SPELLLOGMISS.~SMSG_SPELLLOGMISS();
    }
    if (opcode == Opcode::SMSG_SPELLLOGEXECUTE) {
        this->SMSG_SPELLLOGEXECUTE.~SMSG_SPELLLOGEXECUTE();
    }
    if (opcode == Opcode::SMSG_PERIODICAURALOG) {
        this->SMSG_PERIODICAURALOG.~SMSG_PERIODICAURALOG();
    }
    if (opcode == Opcode::SMSG_SPELLDAMAGESHIELD) {
        this->SMSG_SPELLDAMAGESHIELD.~SMSG_SPELLDAMAGESHIELD();
    }
    if (opcode == Opcode::SMSG_SPELLNONMELEEDAMAGELOG) {
        this->SMSG_SPELLNONMELEEDAMAGELOG.~SMSG_SPELLNONMELEEDAMAGELOG();
    }
    if (opcode == Opcode::SMSG_RESURRECT_FAILED) {
        this->SMSG_RESURRECT_FAILED.~SMSG_RESURRECT_FAILED();
    }
    if (opcode == Opcode::SMSG_ZONE_UNDER_ATTACK) {
        this->SMSG_ZONE_UNDER_ATTACK.~SMSG_ZONE_UNDER_ATTACK();
    }
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        this->MSG_AUCTION_HELLO.~MSG_AUCTION_HELLO_Server();
    }
    if (opcode == Opcode::SMSG_AUCTION_COMMAND_RESULT) {
        this->SMSG_AUCTION_COMMAND_RESULT.~SMSG_AUCTION_COMMAND_RESULT();
    }
    if (opcode == Opcode::SMSG_AUCTION_LIST_RESULT) {
        this->SMSG_AUCTION_LIST_RESULT.~SMSG_AUCTION_LIST_RESULT();
    }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) {
        this->SMSG_AUCTION_OWNER_LIST_RESULT.~SMSG_AUCTION_OWNER_LIST_RESULT();
    }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) {
        this->SMSG_AUCTION_BIDDER_NOTIFICATION.~SMSG_AUCTION_BIDDER_NOTIFICATION();
    }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) {
        this->SMSG_AUCTION_OWNER_NOTIFICATION.~SMSG_AUCTION_OWNER_NOTIFICATION();
    }
    if (opcode == Opcode::SMSG_PROCRESIST) {
        this->SMSG_PROCRESIST.~SMSG_PROCRESIST();
    }
    if (opcode == Opcode::SMSG_DISPEL_FAILED) {
        this->SMSG_DISPEL_FAILED.~SMSG_DISPEL_FAILED();
    }
    if (opcode == Opcode::SMSG_SPELLORDAMAGE_IMMUNE) {
        this->SMSG_SPELLORDAMAGE_IMMUNE.~SMSG_SPELLORDAMAGE_IMMUNE();
    }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) {
        this->SMSG_AUCTION_BIDDER_LIST_RESULT.~SMSG_AUCTION_BIDDER_LIST_RESULT();
    }
    if (opcode == Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) {
        this->SMSG_SET_FLAT_SPELL_MODIFIER.~SMSG_SET_FLAT_SPELL_MODIFIER();
    }
    if (opcode == Opcode::SMSG_SET_PCT_SPELL_MODIFIER) {
        this->SMSG_SET_PCT_SPELL_MODIFIER.~SMSG_SET_PCT_SPELL_MODIFIER();
    }
    if (opcode == Opcode::SMSG_CORPSE_RECLAIM_DELAY) {
        this->SMSG_CORPSE_RECLAIM_DELAY.~SMSG_CORPSE_RECLAIM_DELAY();
    }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        this->MSG_LIST_STABLED_PETS.~MSG_LIST_STABLED_PETS_Server();
    }
    if (opcode == Opcode::SMSG_STABLE_RESULT) {
        this->SMSG_STABLE_RESULT.~SMSG_STABLE_RESULT();
    }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        this->MSG_QUEST_PUSH_RESULT.~MSG_QUEST_PUSH_RESULT();
    }
    if (opcode == Opcode::SMSG_PLAY_MUSIC) {
        this->SMSG_PLAY_MUSIC.~SMSG_PLAY_MUSIC();
    }
    if (opcode == Opcode::SMSG_PLAY_OBJECT_SOUND) {
        this->SMSG_PLAY_OBJECT_SOUND.~SMSG_PLAY_OBJECT_SOUND();
    }
    if (opcode == Opcode::SMSG_SPELLDISPELLOG) {
        this->SMSG_SPELLDISPELLOG.~SMSG_SPELLDISPELLOG();
    }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        this->MSG_QUERY_NEXT_MAIL_TIME.~MSG_QUERY_NEXT_MAIL_TIME_Server();
    }
    if (opcode == Opcode::SMSG_RECEIVED_MAIL) {
        this->SMSG_RECEIVED_MAIL.~SMSG_RECEIVED_MAIL();
    }
    if (opcode == Opcode::SMSG_RAID_GROUP_ONLY) {
        this->SMSG_RAID_GROUP_ONLY.~SMSG_RAID_GROUP_ONLY();
    }
    if (opcode == Opcode::SMSG_PVP_CREDIT) {
        this->SMSG_PVP_CREDIT.~SMSG_PVP_CREDIT();
    }
    if (opcode == Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) {
        this->SMSG_AUCTION_REMOVED_NOTIFICATION.~SMSG_AUCTION_REMOVED_NOTIFICATION();
    }
    if (opcode == Opcode::SMSG_SERVER_MESSAGE) {
        this->SMSG_SERVER_MESSAGE.~SMSG_SERVER_MESSAGE();
    }
    if (opcode == Opcode::SMSG_LFG_OFFER_CONTINUE) {
        this->SMSG_LFG_OFFER_CONTINUE.~SMSG_LFG_OFFER_CONTINUE();
    }
    if (opcode == Opcode::SMSG_SHOW_MAILBOX) {
        this->SMSG_SHOW_MAILBOX.~SMSG_SHOW_MAILBOX();
    }
    if (opcode == Opcode::SMSG_CANCEL_AUTO_REPEAT) {
        this->SMSG_CANCEL_AUTO_REPEAT.~SMSG_CANCEL_AUTO_REPEAT();
    }
    if (opcode == Opcode::SMSG_STANDSTATE_UPDATE) {
        this->SMSG_STANDSTATE_UPDATE.~SMSG_STANDSTATE_UPDATE();
    }
    if (opcode == Opcode::SMSG_LOOT_ALL_PASSED) {
        this->SMSG_LOOT_ALL_PASSED.~SMSG_LOOT_ALL_PASSED();
    }
    if (opcode == Opcode::SMSG_LOOT_ROLL_WON) {
        this->SMSG_LOOT_ROLL_WON.~SMSG_LOOT_ROLL_WON();
    }
    if (opcode == Opcode::SMSG_LOOT_START_ROLL) {
        this->SMSG_LOOT_START_ROLL.~SMSG_LOOT_START_ROLL();
    }
    if (opcode == Opcode::SMSG_LOOT_ROLL) {
        this->SMSG_LOOT_ROLL.~SMSG_LOOT_ROLL();
    }
    if (opcode == Opcode::SMSG_LOOT_MASTER_LIST) {
        this->SMSG_LOOT_MASTER_LIST.~SMSG_LOOT_MASTER_LIST();
    }
    if (opcode == Opcode::SMSG_SET_FORCED_REACTIONS) {
        this->SMSG_SET_FORCED_REACTIONS.~SMSG_SET_FORCED_REACTIONS();
    }
    if (opcode == Opcode::SMSG_SPELL_FAILED_OTHER) {
        this->SMSG_SPELL_FAILED_OTHER.~SMSG_SPELL_FAILED_OTHER();
    }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) {
        this->SMSG_CHAT_PLAYER_NOT_FOUND.~SMSG_CHAT_PLAYER_NOT_FOUND();
    }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        this->MSG_TALENT_WIPE_CONFIRM.~MSG_TALENT_WIPE_CONFIRM_Server();
    }
    if (opcode == Opcode::SMSG_SUMMON_REQUEST) {
        this->SMSG_SUMMON_REQUEST.~SMSG_SUMMON_REQUEST();
    }
    if (opcode == Opcode::SMSG_MONSTER_MOVE_TRANSPORT) {
        this->SMSG_MONSTER_MOVE_TRANSPORT.~SMSG_MONSTER_MOVE_TRANSPORT();
    }
    if (opcode == Opcode::SMSG_PET_BROKEN) {
        this->SMSG_PET_BROKEN.~SMSG_PET_BROKEN();
    }
    if (opcode == Opcode::MSG_MOVE_FEATHER_FALL) {
        this->MSG_MOVE_FEATHER_FALL.~MSG_MOVE_FEATHER_FALL_Server();
    }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        this->MSG_MOVE_WATER_WALK.~MSG_MOVE_WATER_WALK();
    }
    if (opcode == Opcode::SMSG_FEIGN_DEATH_RESISTED) {
        this->SMSG_FEIGN_DEATH_RESISTED.~SMSG_FEIGN_DEATH_RESISTED();
    }
    if (opcode == Opcode::SMSG_DUEL_COUNTDOWN) {
        this->SMSG_DUEL_COUNTDOWN.~SMSG_DUEL_COUNTDOWN();
    }
    if (opcode == Opcode::SMSG_AREA_TRIGGER_MESSAGE) {
        this->SMSG_AREA_TRIGGER_MESSAGE.~SMSG_AREA_TRIGGER_MESSAGE();
    }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHOSEN) {
        this->SMSG_LFG_ROLE_CHOSEN.~SMSG_LFG_ROLE_CHOSEN();
    }
    if (opcode == Opcode::SMSG_PLAYER_SKINNED) {
        this->SMSG_PLAYER_SKINNED.~SMSG_PLAYER_SKINNED();
    }
    if (opcode == Opcode::SMSG_DURABILITY_DAMAGE_DEATH) {
        this->SMSG_DURABILITY_DAMAGE_DEATH.~SMSG_DURABILITY_DAMAGE_DEATH();
    }
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        this->MSG_PETITION_RENAME.~MSG_PETITION_RENAME();
    }
    if (opcode == Opcode::SMSG_INIT_WORLD_STATES) {
        this->SMSG_INIT_WORLD_STATES.~SMSG_INIT_WORLD_STATES();
    }
    if (opcode == Opcode::SMSG_UPDATE_WORLD_STATE) {
        this->SMSG_UPDATE_WORLD_STATE.~SMSG_UPDATE_WORLD_STATE();
    }
    if (opcode == Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) {
        this->SMSG_ITEM_NAME_QUERY_RESPONSE.~SMSG_ITEM_NAME_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_PET_ACTION_FEEDBACK) {
        this->SMSG_PET_ACTION_FEEDBACK.~SMSG_PET_ACTION_FEEDBACK();
    }
    if (opcode == Opcode::SMSG_CHAR_RENAME) {
        this->SMSG_CHAR_RENAME.~SMSG_CHAR_RENAME();
    }
    if (opcode == Opcode::SMSG_INSTANCE_SAVE_CREATED) {
        this->SMSG_INSTANCE_SAVE_CREATED.~SMSG_INSTANCE_SAVE_CREATED();
    }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_INFO) {
        this->SMSG_RAID_INSTANCE_INFO.~SMSG_RAID_INSTANCE_INFO();
    }
    if (opcode == Opcode::SMSG_PLAY_SOUND) {
        this->SMSG_PLAY_SOUND.~SMSG_PLAY_SOUND();
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_STATUS) {
        this->SMSG_BATTLEFIELD_STATUS.~SMSG_BATTLEFIELD_STATUS();
    }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        this->MSG_INSPECT_HONOR_STATS.~MSG_INSPECT_HONOR_STATS_Server();
    }
    if (opcode == Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) {
        this->SMSG_FORCE_WALK_SPEED_CHANGE.~SMSG_FORCE_WALK_SPEED_CHANGE();
    }
    if (opcode == Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) {
        this->SMSG_FORCE_SWIM_BACK_SPEED_CHANGE.~SMSG_FORCE_SWIM_BACK_SPEED_CHANGE();
    }
    if (opcode == Opcode::SMSG_FORCE_TURN_RATE_CHANGE) {
        this->SMSG_FORCE_TURN_RATE_CHANGE.~SMSG_FORCE_TURN_RATE_CHANGE();
    }
    if (opcode == Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) {
        this->SMSG_AREA_SPIRIT_HEALER_TIME.~SMSG_AREA_SPIRIT_HEALER_TIME();
    }
    if (opcode == Opcode::SMSG_WARDEN_DATA) {
        this->SMSG_WARDEN_DATA.~SMSG_WARDEN_DATA();
    }
    if (opcode == Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) {
        this->SMSG_GROUP_JOINED_BATTLEGROUND.~SMSG_GROUP_JOINED_BATTLEGROUND();
    }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        this->MSG_BATTLEGROUND_PLAYER_POSITIONS.~MSG_BATTLEGROUND_PLAYER_POSITIONS_Server();
    }
    if (opcode == Opcode::SMSG_BINDER_CONFIRM) {
        this->SMSG_BINDER_CONFIRM.~SMSG_BINDER_CONFIRM();
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) {
        this->SMSG_BATTLEGROUND_PLAYER_JOINED.~SMSG_BATTLEGROUND_PLAYER_JOINED();
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) {
        this->SMSG_BATTLEGROUND_PLAYER_LEFT.~SMSG_BATTLEGROUND_PLAYER_LEFT();
    }
    if (opcode == Opcode::SMSG_ADDON_INFO) {
        this->SMSG_ADDON_INFO.~SMSG_ADDON_INFO();
    }
    if (opcode == Opcode::SMSG_PET_UNLEARN_CONFIRM) {
        this->SMSG_PET_UNLEARN_CONFIRM.~SMSG_PET_UNLEARN_CONFIRM();
    }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS_FULL) {
        this->SMSG_PARTY_MEMBER_STATS_FULL.~SMSG_PARTY_MEMBER_STATS_FULL();
    }
    if (opcode == Opcode::SMSG_WEATHER) {
        this->SMSG_WEATHER.~SMSG_WEATHER();
    }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_MESSAGE) {
        this->SMSG_RAID_INSTANCE_MESSAGE.~SMSG_RAID_INSTANCE_MESSAGE();
    }
    if (opcode == Opcode::SMSG_COMPRESSED_MOVES) {
        this->SMSG_COMPRESSED_MOVES.~SMSG_COMPRESSED_MOVES();
    }
    if (opcode == Opcode::SMSG_CHAT_RESTRICTED) {
        this->SMSG_CHAT_RESTRICTED.~SMSG_CHAT_RESTRICTED();
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_SPEED) {
        this->SMSG_SPLINE_SET_RUN_SPEED.~SMSG_SPLINE_SET_RUN_SPEED();
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) {
        this->SMSG_SPLINE_SET_RUN_BACK_SPEED.~SMSG_SPLINE_SET_RUN_BACK_SPEED();
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_SPEED) {
        this->SMSG_SPLINE_SET_SWIM_SPEED.~SMSG_SPLINE_SET_SWIM_SPEED();
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_WALK_SPEED) {
        this->SMSG_SPLINE_SET_WALK_SPEED.~SMSG_SPLINE_SET_WALK_SPEED();
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) {
        this->SMSG_SPLINE_SET_SWIM_BACK_SPEED.~SMSG_SPLINE_SET_SWIM_BACK_SPEED();
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_TURN_RATE) {
        this->SMSG_SPLINE_SET_TURN_RATE.~SMSG_SPLINE_SET_TURN_RATE();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNROOT) {
        this->SMSG_SPLINE_MOVE_UNROOT.~SMSG_SPLINE_MOVE_UNROOT();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) {
        this->SMSG_SPLINE_MOVE_FEATHER_FALL.~SMSG_SPLINE_MOVE_FEATHER_FALL();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) {
        this->SMSG_SPLINE_MOVE_NORMAL_FALL.~SMSG_SPLINE_MOVE_NORMAL_FALL();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_HOVER) {
        this->SMSG_SPLINE_MOVE_SET_HOVER.~SMSG_SPLINE_MOVE_SET_HOVER();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) {
        this->SMSG_SPLINE_MOVE_UNSET_HOVER.~SMSG_SPLINE_MOVE_UNSET_HOVER();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_WATER_WALK) {
        this->SMSG_SPLINE_MOVE_WATER_WALK.~SMSG_SPLINE_MOVE_WATER_WALK();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_LAND_WALK) {
        this->SMSG_SPLINE_MOVE_LAND_WALK.~SMSG_SPLINE_MOVE_LAND_WALK();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_START_SWIM) {
        this->SMSG_SPLINE_MOVE_START_SWIM.~SMSG_SPLINE_MOVE_START_SWIM();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) {
        this->SMSG_SPLINE_MOVE_STOP_SWIM.~SMSG_SPLINE_MOVE_STOP_SWIM();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) {
        this->SMSG_SPLINE_MOVE_SET_RUN_MODE.~SMSG_SPLINE_MOVE_SET_RUN_MODE();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) {
        this->SMSG_SPLINE_MOVE_SET_WALK_MODE.~SMSG_SPLINE_MOVE_SET_WALK_MODE();
    }
    if (opcode == Opcode::MSG_MOVE_TIME_SKIPPED) {
        this->MSG_MOVE_TIME_SKIPPED.~MSG_MOVE_TIME_SKIPPED_Server();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_ROOT) {
        this->SMSG_SPLINE_MOVE_ROOT.~SMSG_SPLINE_MOVE_ROOT();
    }
    if (opcode == Opcode::SMSG_INVALIDATE_PLAYER) {
        this->SMSG_INVALIDATE_PLAYER.~SMSG_INVALIDATE_PLAYER();
    }
    if (opcode == Opcode::SMSG_INSTANCE_RESET) {
        this->SMSG_INSTANCE_RESET.~SMSG_INSTANCE_RESET();
    }
    if (opcode == Opcode::SMSG_INSTANCE_RESET_FAILED) {
        this->SMSG_INSTANCE_RESET_FAILED.~SMSG_INSTANCE_RESET_FAILED();
    }
    if (opcode == Opcode::SMSG_UPDATE_LAST_INSTANCE) {
        this->SMSG_UPDATE_LAST_INSTANCE.~SMSG_UPDATE_LAST_INSTANCE();
    }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        this->MSG_RAID_TARGET_UPDATE.~MSG_RAID_TARGET_UPDATE_Server();
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        this->MSG_RAID_READY_CHECK.~MSG_RAID_READY_CHECK_Server();
    }
    if (opcode == Opcode::SMSG_PET_ACTION_SOUND) {
        this->SMSG_PET_ACTION_SOUND.~SMSG_PET_ACTION_SOUND();
    }
    if (opcode == Opcode::SMSG_PET_DISMISS_SOUND) {
        this->SMSG_PET_DISMISS_SOUND.~SMSG_PET_DISMISS_SOUND();
    }
    if (opcode == Opcode::SMSG_GM_TICKET_STATUS_UPDATE) {
        this->SMSG_GM_TICKET_STATUS_UPDATE.~SMSG_GM_TICKET_STATUS_UPDATE();
    }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        this->MSG_SET_DUNGEON_DIFFICULTY.~MSG_SET_DUNGEON_DIFFICULTY_Server();
    }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) {
        this->SMSG_UPDATE_INSTANCE_OWNERSHIP.~SMSG_UPDATE_INSTANCE_OWNERSHIP();
    }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) {
        this->SMSG_CHAT_PLAYER_AMBIGUOUS.~SMSG_CHAT_PLAYER_AMBIGUOUS();
    }
    if (opcode == Opcode::SMSG_SPELLINSTAKILLLOG) {
        this->SMSG_SPELLINSTAKILLLOG.~SMSG_SPELLINSTAKILLLOG();
    }
    if (opcode == Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) {
        this->SMSG_SPELL_UPDATE_CHAIN_TARGETS.~SMSG_SPELL_UPDATE_CHAIN_TARGETS();
    }
    if (opcode == Opcode::SMSG_SPELLSTEALLOG) {
        this->SMSG_SPELLSTEALLOG.~SMSG_SPELLSTEALLOG();
    }
    if (opcode == Opcode::SMSG_DEFENSE_MESSAGE) {
        this->SMSG_DEFENSE_MESSAGE.~SMSG_DEFENSE_MESSAGE();
    }
    if (opcode == Opcode::SMSG_INSTANCE_DIFFICULTY) {
        this->SMSG_INSTANCE_DIFFICULTY.~SMSG_INSTANCE_DIFFICULTY();
    }
    if (opcode == Opcode::SMSG_MOTD) {
        this->SMSG_MOTD.~SMSG_MOTD();
    }
    if (opcode == Opcode::SMSG_MOVE_SET_CAN_FLY) {
        this->SMSG_MOVE_SET_CAN_FLY.~SMSG_MOVE_SET_CAN_FLY();
    }
    if (opcode == Opcode::SMSG_MOVE_UNSET_CAN_FLY) {
        this->SMSG_MOVE_UNSET_CAN_FLY.~SMSG_MOVE_UNSET_CAN_FLY();
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) {
        this->SMSG_ARENA_TEAM_COMMAND_RESULT.~SMSG_ARENA_TEAM_COMMAND_RESULT();
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) {
        this->SMSG_ARENA_TEAM_QUERY_RESPONSE.~SMSG_ARENA_TEAM_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_ROSTER) {
        this->SMSG_ARENA_TEAM_ROSTER.~SMSG_ARENA_TEAM_ROSTER();
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_INVITE) {
        this->SMSG_ARENA_TEAM_INVITE.~SMSG_ARENA_TEAM_INVITE();
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_EVENT) {
        this->SMSG_ARENA_TEAM_EVENT.~SMSG_ARENA_TEAM_EVENT();
    }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        this->MSG_MOVE_START_ASCEND.~MSG_MOVE_START_ASCEND();
    }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        this->MSG_MOVE_STOP_ASCEND.~MSG_MOVE_STOP_ASCEND();
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_STATS) {
        this->SMSG_ARENA_TEAM_STATS.~SMSG_ARENA_TEAM_STATS();
    }
    if (opcode == Opcode::SMSG_UPDATE_LFG_LIST) {
        this->SMSG_UPDATE_LFG_LIST.~SMSG_UPDATE_LFG_LIST();
    }
    if (opcode == Opcode::SMSG_LFG_PROPOSAL_UPDATE) {
        this->SMSG_LFG_PROPOSAL_UPDATE.~SMSG_LFG_PROPOSAL_UPDATE();
    }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) {
        this->SMSG_LFG_ROLE_CHECK_UPDATE.~SMSG_LFG_ROLE_CHECK_UPDATE();
    }
    if (opcode == Opcode::SMSG_LFG_JOIN_RESULT) {
        this->SMSG_LFG_JOIN_RESULT.~SMSG_LFG_JOIN_RESULT();
    }
    if (opcode == Opcode::SMSG_LFG_QUEUE_STATUS) {
        this->SMSG_LFG_QUEUE_STATUS.~SMSG_LFG_QUEUE_STATUS();
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PLAYER) {
        this->SMSG_LFG_UPDATE_PLAYER.~SMSG_LFG_UPDATE_PLAYER();
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PARTY) {
        this->SMSG_LFG_UPDATE_PARTY.~SMSG_LFG_UPDATE_PARTY();
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_SEARCH) {
        this->SMSG_LFG_UPDATE_SEARCH.~SMSG_LFG_UPDATE_SEARCH();
    }
    if (opcode == Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) {
        this->SMSG_LFG_BOOT_PROPOSAL_UPDATE.~SMSG_LFG_BOOT_PROPOSAL_UPDATE();
    }
    if (opcode == Opcode::SMSG_LFG_PLAYER_INFO) {
        this->SMSG_LFG_PLAYER_INFO.~SMSG_LFG_PLAYER_INFO();
    }
    if (opcode == Opcode::SMSG_LFG_PARTY_INFO) {
        this->SMSG_LFG_PARTY_INFO.~SMSG_LFG_PARTY_INFO();
    }
    if (opcode == Opcode::SMSG_TITLE_EARNED) {
        this->SMSG_TITLE_EARNED.~SMSG_TITLE_EARNED();
    }
    if (opcode == Opcode::SMSG_ARENA_ERROR) {
        this->SMSG_ARENA_ERROR.~SMSG_ARENA_ERROR();
    }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        this->MSG_INSPECT_ARENA_TEAMS.~MSG_INSPECT_ARENA_TEAMS_Server();
    }
    if (opcode == Opcode::SMSG_DEATH_RELEASE_LOC) {
        this->SMSG_DEATH_RELEASE_LOC.~SMSG_DEATH_RELEASE_LOC();
    }
    if (opcode == Opcode::SMSG_FORCED_DEATH_UPDATE) {
        this->SMSG_FORCED_DEATH_UPDATE.~SMSG_FORCED_DEATH_UPDATE();
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_SPEED) {
        this->MSG_MOVE_SET_FLIGHT_SPEED.~MSG_MOVE_SET_FLIGHT_SPEED_Server();
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        this->MSG_MOVE_SET_FLIGHT_BACK_SPEED.~MSG_MOVE_SET_FLIGHT_BACK_SPEED();
    }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) {
        this->SMSG_FORCE_FLIGHT_SPEED_CHANGE.~SMSG_FORCE_FLIGHT_SPEED_CHANGE();
    }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) {
        this->SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE.~SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE();
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) {
        this->SMSG_SPLINE_SET_FLIGHT_SPEED.~SMSG_SPLINE_SET_FLIGHT_SPEED();
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) {
        this->SMSG_SPLINE_SET_FLIGHT_BACK_SPEED.~SMSG_SPLINE_SET_FLIGHT_BACK_SPEED();
    }
    if (opcode == Opcode::SMSG_FLIGHT_SPLINE_SYNC) {
        this->SMSG_FLIGHT_SPLINE_SYNC.~SMSG_FLIGHT_SPLINE_SYNC();
    }
    if (opcode == Opcode::SMSG_REALM_SPLIT) {
        this->SMSG_REALM_SPLIT.~SMSG_REALM_SPLIT();
    }
    if (opcode == Opcode::SMSG_TIME_SYNC_REQ) {
        this->SMSG_TIME_SYNC_REQ.~SMSG_TIME_SYNC_REQ();
    }
    if (opcode == Opcode::SMSG_RESET_FAILED_NOTIFY) {
        this->SMSG_RESET_FAILED_NOTIFY.~SMSG_RESET_FAILED_NOTIFY();
    }
    if (opcode == Opcode::SMSG_LFG_DISABLED) {
        this->SMSG_LFG_DISABLED.~SMSG_LFG_DISABLED();
    }
    if (opcode == Opcode::SMSG_UPDATE_COMBO_POINTS) {
        this->SMSG_UPDATE_COMBO_POINTS.~SMSG_UPDATE_COMBO_POINTS();
    }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        this->MSG_MOVE_START_DESCEND.~MSG_MOVE_START_DESCEND();
    }
    if (opcode == Opcode::SMSG_DISMOUNT) {
        this->SMSG_DISMOUNT.~SMSG_DISMOUNT();
    }
    if (opcode == Opcode::MSG_MOVE_UPDATE_CAN_FLY) {
        this->MSG_MOVE_UPDATE_CAN_FLY.~MSG_MOVE_UPDATE_CAN_FLY_Server();
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        this->MSG_RAID_READY_CHECK_CONFIRM.~MSG_RAID_READY_CHECK_CONFIRM_Server();
    }
    if (opcode == Opcode::SMSG_GM_MESSAGECHAT) {
        this->SMSG_GM_MESSAGECHAT.~SMSG_GM_MESSAGECHAT();
    }
    if (opcode == Opcode::SMSG_CLEAR_TARGET) {
        this->SMSG_CLEAR_TARGET.~SMSG_CLEAR_TARGET();
    }
    if (opcode == Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) {
        this->SMSG_CROSSED_INEBRIATION_THRESHOLD.~SMSG_CROSSED_INEBRIATION_THRESHOLD();
    }
    if (opcode == Opcode::SMSG_KICK_REASON) {
        this->SMSG_KICK_REASON.~SMSG_KICK_REASON();
    }
    if (opcode == Opcode::SMSG_COMPLAIN_RESULT) {
        this->SMSG_COMPLAIN_RESULT.~SMSG_COMPLAIN_RESULT();
    }
    if (opcode == Opcode::SMSG_FEATURE_SYSTEM_STATUS) {
        this->SMSG_FEATURE_SYSTEM_STATUS.~SMSG_FEATURE_SYSTEM_STATUS();
    }
    if (opcode == Opcode::SMSG_CHANNEL_MEMBER_COUNT) {
        this->SMSG_CHANNEL_MEMBER_COUNT.~SMSG_CHANNEL_MEMBER_COUNT();
    }
    if (opcode == Opcode::SMSG_GUILD_BANK_LIST) {
        this->SMSG_GUILD_BANK_LIST.~SMSG_GUILD_BANK_LIST();
    }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        this->MSG_GUILD_BANK_LOG_QUERY.~MSG_GUILD_BANK_LOG_QUERY_Server();
    }
    if (opcode == Opcode::SMSG_USERLIST_ADD) {
        this->SMSG_USERLIST_ADD.~SMSG_USERLIST_ADD();
    }
    if (opcode == Opcode::SMSG_USERLIST_REMOVE) {
        this->SMSG_USERLIST_REMOVE.~SMSG_USERLIST_REMOVE();
    }
    if (opcode == Opcode::SMSG_USERLIST_UPDATE) {
        this->SMSG_USERLIST_UPDATE.~SMSG_USERLIST_UPDATE();
    }
    if (opcode == Opcode::SMSG_INSPECT_TALENT) {
        this->SMSG_INSPECT_TALENT.~SMSG_INSPECT_TALENT();
    }
    if (opcode == Opcode::SMSG_LOOT_LIST) {
        this->SMSG_LOOT_LIST.~SMSG_LOOT_LIST();
    }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        this->MSG_GUILD_PERMISSIONS.~MSG_GUILD_PERMISSIONS_Server();
    }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        this->MSG_GUILD_BANK_MONEY_WITHDRAWN.~MSG_GUILD_BANK_MONEY_WITHDRAWN_Server();
    }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        this->MSG_GUILD_EVENT_LOG_QUERY.~MSG_GUILD_EVENT_LOG_QUERY_Server();
    }
    if (opcode == Opcode::SMSG_MIRRORIMAGE_DATA) {
        this->SMSG_MIRRORIMAGE_DATA.~SMSG_MIRRORIMAGE_DATA();
    }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        this->MSG_QUERY_GUILD_BANK_TEXT.~MSG_QUERY_GUILD_BANK_TEXT_Server();
    }
    if (opcode == Opcode::SMSG_OVERRIDE_LIGHT) {
        this->SMSG_OVERRIDE_LIGHT.~SMSG_OVERRIDE_LIGHT();
    }
    if (opcode == Opcode::SMSG_TOTEM_CREATED) {
        this->SMSG_TOTEM_CREATED.~SMSG_TOTEM_CREATED();
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) {
        this->SMSG_QUESTGIVER_STATUS_MULTIPLE.~SMSG_QUESTGIVER_STATUS_MULTIPLE();
    }
    if (opcode == Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) {
        this->SMSG_SET_PLAYER_DECLINED_NAMES_RESULT.~SMSG_SET_PLAYER_DECLINED_NAMES_RESULT();
    }
    if (opcode == Opcode::SMSG_SEND_UNLEARN_SPELLS) {
        this->SMSG_SEND_UNLEARN_SPELLS.~SMSG_SEND_UNLEARN_SPELLS();
    }
    if (opcode == Opcode::SMSG_PROPOSE_LEVEL_GRANT) {
        this->SMSG_PROPOSE_LEVEL_GRANT.~SMSG_PROPOSE_LEVEL_GRANT();
    }
    if (opcode == Opcode::SMSG_REFER_A_FRIEND_FAILURE) {
        this->SMSG_REFER_A_FRIEND_FAILURE.~SMSG_REFER_A_FRIEND_FAILURE();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_FLYING) {
        this->SMSG_SPLINE_MOVE_SET_FLYING.~SMSG_SPLINE_MOVE_SET_FLYING();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) {
        this->SMSG_SPLINE_MOVE_UNSET_FLYING.~SMSG_SPLINE_MOVE_UNSET_FLYING();
    }
    if (opcode == Opcode::SMSG_ENABLE_BARBER_SHOP) {
        this->SMSG_ENABLE_BARBER_SHOP.~SMSG_ENABLE_BARBER_SHOP();
    }
    if (opcode == Opcode::SMSG_BARBER_SHOP_RESULT) {
        this->SMSG_BARBER_SHOP_RESULT.~SMSG_BARBER_SHOP_RESULT();
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_CALENDAR) {
        this->SMSG_CALENDAR_SEND_CALENDAR.~SMSG_CALENDAR_SEND_CALENDAR();
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_EVENT) {
        this->SMSG_CALENDAR_SEND_EVENT.~SMSG_CALENDAR_SEND_EVENT();
    }
    if (opcode == Opcode::SMSG_CALENDAR_FILTER_GUILD) {
        this->SMSG_CALENDAR_FILTER_GUILD.~SMSG_CALENDAR_FILTER_GUILD();
    }
    if (opcode == Opcode::SMSG_CALENDAR_ARENA_TEAM) {
        this->SMSG_CALENDAR_ARENA_TEAM.~SMSG_CALENDAR_ARENA_TEAM();
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE) {
        this->SMSG_CALENDAR_EVENT_INVITE.~SMSG_CALENDAR_EVENT_INVITE();
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) {
        this->SMSG_CALENDAR_EVENT_INVITE_REMOVED.~SMSG_CALENDAR_EVENT_INVITE_REMOVED();
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_STATUS) {
        this->SMSG_CALENDAR_EVENT_STATUS.~SMSG_CALENDAR_EVENT_STATUS();
    }
    if (opcode == Opcode::SMSG_CALENDAR_COMMAND_RESULT) {
        this->SMSG_CALENDAR_COMMAND_RESULT.~SMSG_CALENDAR_COMMAND_RESULT();
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) {
        this->SMSG_CALENDAR_RAID_LOCKOUT_ADDED.~SMSG_CALENDAR_RAID_LOCKOUT_ADDED();
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) {
        this->SMSG_CALENDAR_RAID_LOCKOUT_REMOVED.~SMSG_CALENDAR_RAID_LOCKOUT_REMOVED();
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) {
        this->SMSG_CALENDAR_EVENT_INVITE_ALERT.~SMSG_CALENDAR_EVENT_INVITE_ALERT();
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) {
        this->SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT.~SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT();
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) {
        this->SMSG_CALENDAR_EVENT_REMOVED_ALERT.~SMSG_CALENDAR_EVENT_REMOVED_ALERT();
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) {
        this->SMSG_CALENDAR_EVENT_UPDATED_ALERT.~SMSG_CALENDAR_EVENT_UPDATED_ALERT();
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) {
        this->SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT.~SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT();
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        this->CMSG_CALENDAR_GET_NUM_PENDING.~CMSG_CALENDAR_GET_NUM_PENDING();
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) {
        this->SMSG_CALENDAR_SEND_NUM_PENDING.~SMSG_CALENDAR_SEND_NUM_PENDING();
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH_RATE) {
        this->MSG_MOVE_SET_PITCH_RATE.~MSG_MOVE_SET_PITCH_RATE_Server();
    }
    if (opcode == Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) {
        this->SMSG_FORCE_PITCH_RATE_CHANGE.~SMSG_FORCE_PITCH_RATE_CHANGE();
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) {
        this->SMSG_CALENDAR_EVENT_INVITE_NOTES.~SMSG_CALENDAR_EVENT_INVITE_NOTES();
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) {
        this->SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT.~SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT();
    }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) {
        this->SMSG_UPDATE_ACCOUNT_DATA_COMPLETE.~SMSG_UPDATE_ACCOUNT_DATA_COMPLETE();
    }
    if (opcode == Opcode::SMSG_TRIGGER_MOVIE) {
        this->SMSG_TRIGGER_MOVIE.~SMSG_TRIGGER_MOVIE();
    }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_EARNED) {
        this->SMSG_ACHIEVEMENT_EARNED.~SMSG_ACHIEVEMENT_EARNED();
    }
    if (opcode == Opcode::SMSG_CRITERIA_UPDATE) {
        this->SMSG_CRITERIA_UPDATE.~SMSG_CRITERIA_UPDATE();
    }
    if (opcode == Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) {
        this->SMSG_RESPOND_INSPECT_ACHIEVEMENTS.~SMSG_RESPOND_INSPECT_ACHIEVEMENTS();
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) {
        this->SMSG_QUESTUPDATE_ADD_PVP_KILL.~SMSG_QUESTUPDATE_ADD_PVP_KILL();
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) {
        this->SMSG_CALENDAR_RAID_LOCKOUT_UPDATED.~SMSG_CALENDAR_RAID_LOCKOUT_UPDATED();
    }
    if (opcode == Opcode::SMSG_CHAR_CUSTOMIZE) {
        this->SMSG_CHAR_CUSTOMIZE.~SMSG_CHAR_CUSTOMIZE();
    }
    if (opcode == Opcode::SMSG_SET_PHASE_SHIFT) {
        this->SMSG_SET_PHASE_SHIFT.~SMSG_SET_PHASE_SHIFT();
    }
    if (opcode == Opcode::SMSG_ALL_ACHIEVEMENT_DATA) {
        this->SMSG_ALL_ACHIEVEMENT_DATA.~SMSG_ALL_ACHIEVEMENT_DATA();
    }
    if (opcode == Opcode::SMSG_POWER_UPDATE) {
        this->SMSG_POWER_UPDATE.~SMSG_POWER_UPDATE();
    }
    if (opcode == Opcode::SMSG_HIGHEST_THREAT_UPDATE) {
        this->SMSG_HIGHEST_THREAT_UPDATE.~SMSG_HIGHEST_THREAT_UPDATE();
    }
    if (opcode == Opcode::SMSG_THREAT_UPDATE) {
        this->SMSG_THREAT_UPDATE.~SMSG_THREAT_UPDATE();
    }
    if (opcode == Opcode::SMSG_THREAT_REMOVE) {
        this->SMSG_THREAT_REMOVE.~SMSG_THREAT_REMOVE();
    }
    if (opcode == Opcode::SMSG_THREAT_CLEAR) {
        this->SMSG_THREAT_CLEAR.~SMSG_THREAT_CLEAR();
    }
    if (opcode == Opcode::SMSG_CONVERT_RUNE) {
        this->SMSG_CONVERT_RUNE.~SMSG_CONVERT_RUNE();
    }
    if (opcode == Opcode::SMSG_RESYNC_RUNES) {
        this->SMSG_RESYNC_RUNES.~SMSG_RESYNC_RUNES();
    }
    if (opcode == Opcode::SMSG_ADD_RUNE_POWER) {
        this->SMSG_ADD_RUNE_POWER.~SMSG_ADD_RUNE_POWER();
    }
    if (opcode == Opcode::SMSG_AUCTION_LIST_PENDING_SALES) {
        this->SMSG_AUCTION_LIST_PENDING_SALES.~SMSG_AUCTION_LIST_PENDING_SALES();
    }
    if (opcode == Opcode::SMSG_MODIFY_COOLDOWN) {
        this->SMSG_MODIFY_COOLDOWN.~SMSG_MODIFY_COOLDOWN();
    }
    if (opcode == Opcode::SMSG_PET_UPDATE_COMBO_POINTS) {
        this->SMSG_PET_UPDATE_COMBO_POINTS.~SMSG_PET_UPDATE_COMBO_POINTS();
    }
    if (opcode == Opcode::SMSG_PRE_RESURRECT) {
        this->SMSG_PRE_RESURRECT.~SMSG_PRE_RESURRECT();
    }
    if (opcode == Opcode::SMSG_AURA_UPDATE_ALL) {
        this->SMSG_AURA_UPDATE_ALL.~SMSG_AURA_UPDATE_ALL();
    }
    if (opcode == Opcode::SMSG_AURA_UPDATE) {
        this->SMSG_AURA_UPDATE.~SMSG_AURA_UPDATE();
    }
    if (opcode == Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) {
        this->SMSG_SERVER_FIRST_ACHIEVEMENT.~SMSG_SERVER_FIRST_ACHIEVEMENT();
    }
    if (opcode == Opcode::SMSG_PET_LEARNED_SPELL) {
        this->SMSG_PET_LEARNED_SPELL.~SMSG_PET_LEARNED_SPELL();
    }
    if (opcode == Opcode::SMSG_PET_UNLEARNED_SPELL) {
        this->SMSG_PET_UNLEARNED_SPELL.~SMSG_PET_UNLEARNED_SPELL();
    }
    if (opcode == Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) {
        this->SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA.~SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA();
    }
    if (opcode == Opcode::SMSG_CRITERIA_DELETED) {
        this->SMSG_CRITERIA_DELETED.~SMSG_CRITERIA_DELETED();
    }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_DELETED) {
        this->SMSG_ACHIEVEMENT_DELETED.~SMSG_ACHIEVEMENT_DELETED();
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) {
        this->SMSG_BATTLEGROUND_INFO_THROTTLED.~SMSG_BATTLEGROUND_INFO_THROTTLED();
    }
    if (opcode == Opcode::SMSG_PLAYER_VEHICLE_DATA) {
        this->SMSG_PLAYER_VEHICLE_DATA.~SMSG_PLAYER_VEHICLE_DATA();
    }
    if (opcode == Opcode::SMSG_PET_GUIDS) {
        this->SMSG_PET_GUIDS.~SMSG_PET_GUIDS();
    }
    if (opcode == Opcode::SMSG_CLIENTCACHE_VERSION) {
        this->SMSG_CLIENTCACHE_VERSION.~SMSG_CLIENTCACHE_VERSION();
    }
    if (opcode == Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) {
        this->SMSG_ITEM_REFUND_INFO_RESPONSE.~SMSG_ITEM_REFUND_INFO_RESPONSE();
    }
    if (opcode == Opcode::SMSG_ITEM_REFUND_RESULT) {
        this->SMSG_ITEM_REFUND_RESULT.~SMSG_ITEM_REFUND_RESULT();
    }
    if (opcode == Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) {
        this->SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE.~SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE();
    }
    if (opcode == Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) {
        this->SMSG_CALENDAR_CLEAR_PENDING_ACTION.~SMSG_CALENDAR_CLEAR_PENDING_ACTION();
    }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_LIST) {
        this->SMSG_EQUIPMENT_SET_LIST.~SMSG_EQUIPMENT_SET_LIST();
    }
    if (opcode == Opcode::SMSG_SET_PROJECTILE_POSITION) {
        this->SMSG_SET_PROJECTILE_POSITION.~SMSG_SET_PROJECTILE_POSITION();
    }
    if (opcode == Opcode::SMSG_TALENTS_INFO) {
        this->SMSG_TALENTS_INFO.~SMSG_TALENTS_INFO();
    }
    if (opcode == Opcode::SMSG_ARENA_UNIT_DESTROYED) {
        this->SMSG_ARENA_UNIT_DESTROYED.~SMSG_ARENA_UNIT_DESTROYED();
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) {
        this->SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED.~SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED();
    }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_DISABLE) {
        this->SMSG_MOVE_GRAVITY_DISABLE.~SMSG_MOVE_GRAVITY_DISABLE();
    }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_ENABLE) {
        this->SMSG_MOVE_GRAVITY_ENABLE.~SMSG_MOVE_GRAVITY_ENABLE();
    }
    if (opcode == Opcode::MSG_MOVE_GRAVITY_CHNG) {
        this->MSG_MOVE_GRAVITY_CHNG.~MSG_MOVE_GRAVITY_CHNG_Server();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) {
        this->SMSG_SPLINE_MOVE_GRAVITY_DISABLE.~SMSG_SPLINE_MOVE_GRAVITY_DISABLE();
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) {
        this->SMSG_SPLINE_MOVE_GRAVITY_ENABLE.~SMSG_SPLINE_MOVE_GRAVITY_ENABLE();
    }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) {
        this->SMSG_EQUIPMENT_SET_USE_RESULT.~SMSG_EQUIPMENT_SET_USE_RESULT();
    }
    if (opcode == Opcode::SMSG_CHAR_FACTION_CHANGE) {
        this->SMSG_CHAR_FACTION_CHANGE.~SMSG_CHAR_FACTION_CHANGE();
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) {
        this->SMSG_BATTLEFIELD_MGR_ENTRY_INVITE.~SMSG_BATTLEFIELD_MGR_ENTRY_INVITE();
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) {
        this->SMSG_BATTLEFIELD_MGR_ENTERED.~SMSG_BATTLEFIELD_MGR_ENTERED();
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) {
        this->SMSG_BATTLEFIELD_MGR_QUEUE_INVITE.~SMSG_BATTLEFIELD_MGR_QUEUE_INVITE();
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) {
        this->SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE.~SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE();
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) {
        this->SMSG_BATTLEFIELD_MGR_EJECT_PENDING.~SMSG_BATTLEFIELD_MGR_EJECT_PENDING();
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) {
        this->SMSG_BATTLEFIELD_MGR_EJECTED.~SMSG_BATTLEFIELD_MGR_EJECTED();
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) {
        this->SMSG_BATTLEFIELD_MGR_STATE_CHANGE.~SMSG_BATTLEFIELD_MGR_STATE_CHANGE();
    }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        this->MSG_SET_RAID_DIFFICULTY.~MSG_SET_RAID_DIFFICULTY_Server();
    }
    if (opcode == Opcode::SMSG_TOGGLE_XP_GAIN) {
        this->SMSG_TOGGLE_XP_GAIN.~SMSG_TOGGLE_XP_GAIN();
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_DB_ERROR) {
        this->SMSG_GMRESPONSE_DB_ERROR.~SMSG_GMRESPONSE_DB_ERROR();
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_RECEIVED) {
        this->SMSG_GMRESPONSE_RECEIVED.~SMSG_GMRESPONSE_RECEIVED();
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) {
        this->SMSG_GMRESPONSE_STATUS_UPDATE.~SMSG_GMRESPONSE_STATUS_UPDATE();
    }
    if (opcode == Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        this->SMSG_WORLD_STATE_UI_TIMER_UPDATE.~SMSG_WORLD_STATE_UI_TIMER_UPDATE();
    }
    if (opcode == Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) {
        this->SMSG_TALENTS_INVOLUNTARILY_RESET.~SMSG_TALENTS_INVOLUNTARILY_RESET();
    }
    if (opcode == Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) {
        this->SMSG_QUERY_QUESTS_COMPLETED_RESPONSE.~SMSG_QUERY_QUESTS_COMPLETED_RESPONSE();
    }
    if (opcode == Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) {
        this->SMSG_CORPSE_NOT_IN_INSTANCE.~SMSG_CORPSE_NOT_IN_INSTANCE();
    }
    if (opcode == Opcode::SMSG_CAMERA_SHAKE) {
        this->SMSG_CAMERA_SHAKE.~SMSG_CAMERA_SHAKE();
    }
    if (opcode == Opcode::SMSG_SOCKET_GEMS_RESULT) {
        this->SMSG_SOCKET_GEMS_RESULT.~SMSG_SOCKET_GEMS_RESULT();
    }
    if (opcode == Opcode::SMSG_REDIRECT_CLIENT) {
        this->SMSG_REDIRECT_CLIENT.~SMSG_REDIRECT_CLIENT();
    }
    if (opcode == Opcode::SMSG_MOVE_SET_COLLISION_HGT) {
        this->SMSG_MOVE_SET_COLLISION_HGT.~SMSG_MOVE_SET_COLLISION_HGT();
    }
    if (opcode == Opcode::SMSG_MULTIPLE_MOVES) {
        this->SMSG_MULTIPLE_MOVES.~SMSG_MULTIPLE_MOVES();
    }
}

/* 2 copy constructor */
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(const ServerOpcode& other) {
    this->opcode = other.opcode;
    if (opcode == Opcode::SMSG_CHAR_CREATE) {
        new (&SMSG_CHAR_CREATE) auto(other.SMSG_CHAR_CREATE);
    }
    if (opcode == Opcode::SMSG_CHAR_ENUM) {
        new (&SMSG_CHAR_ENUM) auto(other.SMSG_CHAR_ENUM);
    }
    if (opcode == Opcode::SMSG_CHAR_DELETE) {
        new (&SMSG_CHAR_DELETE) auto(other.SMSG_CHAR_DELETE);
    }
    if (opcode == Opcode::SMSG_NEW_WORLD) {
        new (&SMSG_NEW_WORLD) auto(other.SMSG_NEW_WORLD);
    }
    if (opcode == Opcode::SMSG_TRANSFER_PENDING) {
        new (&SMSG_TRANSFER_PENDING) auto(other.SMSG_TRANSFER_PENDING);
    }
    if (opcode == Opcode::SMSG_TRANSFER_ABORTED) {
        new (&SMSG_TRANSFER_ABORTED) auto(other.SMSG_TRANSFER_ABORTED);
    }
    if (opcode == Opcode::SMSG_CHARACTER_LOGIN_FAILED) {
        new (&SMSG_CHARACTER_LOGIN_FAILED) auto(other.SMSG_CHARACTER_LOGIN_FAILED);
    }
    if (opcode == Opcode::SMSG_LOGIN_SETTIMESPEED) {
        new (&SMSG_LOGIN_SETTIMESPEED) auto(other.SMSG_LOGIN_SETTIMESPEED);
    }
    if (opcode == Opcode::SMSG_LOGOUT_RESPONSE) {
        new (&SMSG_LOGOUT_RESPONSE) auto(other.SMSG_LOGOUT_RESPONSE);
    }
    if (opcode == Opcode::SMSG_LOGOUT_COMPLETE) {
        new (&SMSG_LOGOUT_COMPLETE) auto(other.SMSG_LOGOUT_COMPLETE);
    }
    if (opcode == Opcode::SMSG_LOGOUT_CANCEL_ACK) {
        new (&SMSG_LOGOUT_CANCEL_ACK) auto(other.SMSG_LOGOUT_CANCEL_ACK);
    }
    if (opcode == Opcode::SMSG_NAME_QUERY_RESPONSE) {
        new (&SMSG_NAME_QUERY_RESPONSE) auto(other.SMSG_NAME_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_PET_NAME_QUERY_RESPONSE) {
        new (&SMSG_PET_NAME_QUERY_RESPONSE) auto(other.SMSG_PET_NAME_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_GUILD_QUERY_RESPONSE) {
        new (&SMSG_GUILD_QUERY_RESPONSE) auto(other.SMSG_GUILD_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) {
        new (&SMSG_ITEM_QUERY_SINGLE_RESPONSE) auto(other.SMSG_ITEM_QUERY_SINGLE_RESPONSE);
    }
    if (opcode == Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) {
        new (&SMSG_PAGE_TEXT_QUERY_RESPONSE) auto(other.SMSG_PAGE_TEXT_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_QUEST_QUERY_RESPONSE) {
        new (&SMSG_QUEST_QUERY_RESPONSE) auto(other.SMSG_QUEST_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) {
        new (&SMSG_GAMEOBJECT_QUERY_RESPONSE) auto(other.SMSG_GAMEOBJECT_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_CREATURE_QUERY_RESPONSE) {
        new (&SMSG_CREATURE_QUERY_RESPONSE) auto(other.SMSG_CREATURE_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_WHO) {
        new (&SMSG_WHO) auto(other.SMSG_WHO);
    }
    if (opcode == Opcode::SMSG_WHOIS) {
        new (&SMSG_WHOIS) auto(other.SMSG_WHOIS);
    }
    if (opcode == Opcode::SMSG_CONTACT_LIST) {
        new (&SMSG_CONTACT_LIST) auto(other.SMSG_CONTACT_LIST);
    }
    if (opcode == Opcode::SMSG_FRIEND_STATUS) {
        new (&SMSG_FRIEND_STATUS) auto(other.SMSG_FRIEND_STATUS);
    }
    if (opcode == Opcode::SMSG_GROUP_INVITE) {
        new (&SMSG_GROUP_INVITE) auto(other.SMSG_GROUP_INVITE);
    }
    if (opcode == Opcode::SMSG_GROUP_DECLINE) {
        new (&SMSG_GROUP_DECLINE) auto(other.SMSG_GROUP_DECLINE);
    }
    if (opcode == Opcode::SMSG_GROUP_UNINVITE) {
        new (&SMSG_GROUP_UNINVITE) auto(other.SMSG_GROUP_UNINVITE);
    }
    if (opcode == Opcode::SMSG_GROUP_SET_LEADER) {
        new (&SMSG_GROUP_SET_LEADER) auto(other.SMSG_GROUP_SET_LEADER);
    }
    if (opcode == Opcode::SMSG_GROUP_DESTROYED) {
        new (&SMSG_GROUP_DESTROYED) auto(other.SMSG_GROUP_DESTROYED);
    }
    if (opcode == Opcode::SMSG_GROUP_LIST) {
        new (&SMSG_GROUP_LIST) auto(other.SMSG_GROUP_LIST);
    }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS) {
        new (&SMSG_PARTY_MEMBER_STATS) auto(other.SMSG_PARTY_MEMBER_STATS);
    }
    if (opcode == Opcode::SMSG_PARTY_COMMAND_RESULT) {
        new (&SMSG_PARTY_COMMAND_RESULT) auto(other.SMSG_PARTY_COMMAND_RESULT);
    }
    if (opcode == Opcode::SMSG_GUILD_INVITE) {
        new (&SMSG_GUILD_INVITE) auto(other.SMSG_GUILD_INVITE);
    }
    if (opcode == Opcode::SMSG_GUILD_DECLINE) {
        new (&SMSG_GUILD_DECLINE) auto(other.SMSG_GUILD_DECLINE);
    }
    if (opcode == Opcode::SMSG_GUILD_INFO) {
        new (&SMSG_GUILD_INFO) auto(other.SMSG_GUILD_INFO);
    }
    if (opcode == Opcode::SMSG_GUILD_ROSTER) {
        new (&SMSG_GUILD_ROSTER) auto(other.SMSG_GUILD_ROSTER);
    }
    if (opcode == Opcode::SMSG_GUILD_EVENT) {
        new (&SMSG_GUILD_EVENT) auto(other.SMSG_GUILD_EVENT);
    }
    if (opcode == Opcode::SMSG_GUILD_COMMAND_RESULT) {
        new (&SMSG_GUILD_COMMAND_RESULT) auto(other.SMSG_GUILD_COMMAND_RESULT);
    }
    if (opcode == Opcode::SMSG_MESSAGECHAT) {
        new (&SMSG_MESSAGECHAT) auto(other.SMSG_MESSAGECHAT);
    }
    if (opcode == Opcode::SMSG_CHANNEL_NOTIFY) {
        new (&SMSG_CHANNEL_NOTIFY) auto(other.SMSG_CHANNEL_NOTIFY);
    }
    if (opcode == Opcode::SMSG_CHANNEL_LIST) {
        new (&SMSG_CHANNEL_LIST) auto(other.SMSG_CHANNEL_LIST);
    }
    if (opcode == Opcode::SMSG_UPDATE_OBJECT) {
        new (&SMSG_UPDATE_OBJECT) auto(other.SMSG_UPDATE_OBJECT);
    }
    if (opcode == Opcode::SMSG_DESTROY_OBJECT) {
        new (&SMSG_DESTROY_OBJECT) auto(other.SMSG_DESTROY_OBJECT);
    }
    if (opcode == Opcode::SMSG_READ_ITEM_OK) {
        new (&SMSG_READ_ITEM_OK) auto(other.SMSG_READ_ITEM_OK);
    }
    if (opcode == Opcode::SMSG_READ_ITEM_FAILED) {
        new (&SMSG_READ_ITEM_FAILED) auto(other.SMSG_READ_ITEM_FAILED);
    }
    if (opcode == Opcode::SMSG_ITEM_COOLDOWN) {
        new (&SMSG_ITEM_COOLDOWN) auto(other.SMSG_ITEM_COOLDOWN);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) {
        new (&SMSG_GAMEOBJECT_CUSTOM_ANIM) auto(other.SMSG_GAMEOBJECT_CUSTOM_ANIM);
    }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        new (&MSG_MOVE_START_FORWARD) auto(other.MSG_MOVE_START_FORWARD);
    }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        new (&MSG_MOVE_START_BACKWARD) auto(other.MSG_MOVE_START_BACKWARD);
    }
    if (opcode == Opcode::MSG_MOVE_STOP) {
        new (&MSG_MOVE_STOP) auto(other.MSG_MOVE_STOP);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        new (&MSG_MOVE_START_STRAFE_LEFT) auto(other.MSG_MOVE_START_STRAFE_LEFT);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        new (&MSG_MOVE_START_STRAFE_RIGHT) auto(other.MSG_MOVE_START_STRAFE_RIGHT);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        new (&MSG_MOVE_STOP_STRAFE) auto(other.MSG_MOVE_STOP_STRAFE);
    }
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        new (&MSG_MOVE_JUMP) auto(other.MSG_MOVE_JUMP);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        new (&MSG_MOVE_START_TURN_LEFT) auto(other.MSG_MOVE_START_TURN_LEFT);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        new (&MSG_MOVE_START_TURN_RIGHT) auto(other.MSG_MOVE_START_TURN_RIGHT);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        new (&MSG_MOVE_STOP_TURN) auto(other.MSG_MOVE_STOP_TURN);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        new (&MSG_MOVE_START_PITCH_UP) auto(other.MSG_MOVE_START_PITCH_UP);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        new (&MSG_MOVE_START_PITCH_DOWN) auto(other.MSG_MOVE_START_PITCH_DOWN);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        new (&MSG_MOVE_STOP_PITCH) auto(other.MSG_MOVE_STOP_PITCH);
    }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        new (&MSG_MOVE_SET_RUN_MODE) auto(other.MSG_MOVE_SET_RUN_MODE);
    }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        new (&MSG_MOVE_SET_WALK_MODE) auto(other.MSG_MOVE_SET_WALK_MODE);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_CHEAT) {
        new (&MSG_MOVE_TELEPORT_CHEAT) auto(other.MSG_MOVE_TELEPORT_CHEAT);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        new (&MSG_MOVE_TELEPORT_ACK) auto(other.MSG_MOVE_TELEPORT_ACK);
    }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        new (&MSG_MOVE_FALL_LAND) auto(other.MSG_MOVE_FALL_LAND);
    }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        new (&MSG_MOVE_START_SWIM) auto(other.MSG_MOVE_START_SWIM);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        new (&MSG_MOVE_STOP_SWIM) auto(other.MSG_MOVE_STOP_SWIM);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        new (&MSG_MOVE_SET_FACING) auto(other.MSG_MOVE_SET_FACING);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        new (&MSG_MOVE_SET_PITCH) auto(other.MSG_MOVE_SET_PITCH);
    }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        new (&MSG_MOVE_WORLDPORT_ACK) auto(other.MSG_MOVE_WORLDPORT_ACK);
    }
    if (opcode == Opcode::SMSG_MONSTER_MOVE) {
        new (&SMSG_MONSTER_MOVE) auto(other.SMSG_MONSTER_MOVE);
    }
    if (opcode == Opcode::SMSG_MOVE_WATER_WALK) {
        new (&SMSG_MOVE_WATER_WALK) auto(other.SMSG_MOVE_WATER_WALK);
    }
    if (opcode == Opcode::SMSG_MOVE_LAND_WALK) {
        new (&SMSG_MOVE_LAND_WALK) auto(other.SMSG_MOVE_LAND_WALK);
    }
    if (opcode == Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) {
        new (&SMSG_FORCE_RUN_SPEED_CHANGE) auto(other.SMSG_FORCE_RUN_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) {
        new (&SMSG_FORCE_RUN_BACK_SPEED_CHANGE) auto(other.SMSG_FORCE_RUN_BACK_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) {
        new (&SMSG_FORCE_SWIM_SPEED_CHANGE) auto(other.SMSG_FORCE_SWIM_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_MOVE_ROOT) {
        new (&SMSG_FORCE_MOVE_ROOT) auto(other.SMSG_FORCE_MOVE_ROOT);
    }
    if (opcode == Opcode::SMSG_FORCE_MOVE_UNROOT) {
        new (&SMSG_FORCE_MOVE_UNROOT) auto(other.SMSG_FORCE_MOVE_UNROOT);
    }
    if (opcode == Opcode::MSG_MOVE_ROOT) {
        new (&MSG_MOVE_ROOT) auto(other.MSG_MOVE_ROOT);
    }
    if (opcode == Opcode::MSG_MOVE_UNROOT) {
        new (&MSG_MOVE_UNROOT) auto(other.MSG_MOVE_UNROOT);
    }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        new (&MSG_MOVE_HEARTBEAT) auto(other.MSG_MOVE_HEARTBEAT);
    }
    if (opcode == Opcode::SMSG_MOVE_KNOCK_BACK) {
        new (&SMSG_MOVE_KNOCK_BACK) auto(other.SMSG_MOVE_KNOCK_BACK);
    }
    if (opcode == Opcode::MSG_MOVE_KNOCK_BACK) {
        new (&MSG_MOVE_KNOCK_BACK) auto(other.MSG_MOVE_KNOCK_BACK);
    }
    if (opcode == Opcode::SMSG_MOVE_FEATHER_FALL) {
        new (&SMSG_MOVE_FEATHER_FALL) auto(other.SMSG_MOVE_FEATHER_FALL);
    }
    if (opcode == Opcode::SMSG_MOVE_NORMAL_FALL) {
        new (&SMSG_MOVE_NORMAL_FALL) auto(other.SMSG_MOVE_NORMAL_FALL);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_HOVER) {
        new (&SMSG_MOVE_SET_HOVER) auto(other.SMSG_MOVE_SET_HOVER);
    }
    if (opcode == Opcode::SMSG_MOVE_UNSET_HOVER) {
        new (&SMSG_MOVE_UNSET_HOVER) auto(other.SMSG_MOVE_UNSET_HOVER);
    }
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        new (&MSG_MOVE_HOVER) auto(other.MSG_MOVE_HOVER);
    }
    if (opcode == Opcode::SMSG_TRIGGER_CINEMATIC) {
        new (&SMSG_TRIGGER_CINEMATIC) auto(other.SMSG_TRIGGER_CINEMATIC);
    }
    if (opcode == Opcode::SMSG_TUTORIAL_FLAGS) {
        new (&SMSG_TUTORIAL_FLAGS) auto(other.SMSG_TUTORIAL_FLAGS);
    }
    if (opcode == Opcode::SMSG_EMOTE) {
        new (&SMSG_EMOTE) auto(other.SMSG_EMOTE);
    }
    if (opcode == Opcode::SMSG_TEXT_EMOTE) {
        new (&SMSG_TEXT_EMOTE) auto(other.SMSG_TEXT_EMOTE);
    }
    if (opcode == Opcode::SMSG_INVENTORY_CHANGE_FAILURE) {
        new (&SMSG_INVENTORY_CHANGE_FAILURE) auto(other.SMSG_INVENTORY_CHANGE_FAILURE);
    }
    if (opcode == Opcode::SMSG_TRADE_STATUS) {
        new (&SMSG_TRADE_STATUS) auto(other.SMSG_TRADE_STATUS);
    }
    if (opcode == Opcode::SMSG_TRADE_STATUS_EXTENDED) {
        new (&SMSG_TRADE_STATUS_EXTENDED) auto(other.SMSG_TRADE_STATUS_EXTENDED);
    }
    if (opcode == Opcode::SMSG_INITIALIZE_FACTIONS) {
        new (&SMSG_INITIALIZE_FACTIONS) auto(other.SMSG_INITIALIZE_FACTIONS);
    }
    if (opcode == Opcode::SMSG_SET_FACTION_VISIBLE) {
        new (&SMSG_SET_FACTION_VISIBLE) auto(other.SMSG_SET_FACTION_VISIBLE);
    }
    if (opcode == Opcode::SMSG_SET_FACTION_STANDING) {
        new (&SMSG_SET_FACTION_STANDING) auto(other.SMSG_SET_FACTION_STANDING);
    }
    if (opcode == Opcode::SMSG_SET_PROFICIENCY) {
        new (&SMSG_SET_PROFICIENCY) auto(other.SMSG_SET_PROFICIENCY);
    }
    if (opcode == Opcode::SMSG_ACTION_BUTTONS) {
        new (&SMSG_ACTION_BUTTONS) auto(other.SMSG_ACTION_BUTTONS);
    }
    if (opcode == Opcode::SMSG_INITIAL_SPELLS) {
        new (&SMSG_INITIAL_SPELLS) auto(other.SMSG_INITIAL_SPELLS);
    }
    if (opcode == Opcode::SMSG_LEARNED_SPELL) {
        new (&SMSG_LEARNED_SPELL) auto(other.SMSG_LEARNED_SPELL);
    }
    if (opcode == Opcode::SMSG_SUPERCEDED_SPELL) {
        new (&SMSG_SUPERCEDED_SPELL) auto(other.SMSG_SUPERCEDED_SPELL);
    }
    if (opcode == Opcode::SMSG_CAST_FAILED) {
        new (&SMSG_CAST_FAILED) auto(other.SMSG_CAST_FAILED);
    }
    if (opcode == Opcode::SMSG_SPELL_START) {
        new (&SMSG_SPELL_START) auto(other.SMSG_SPELL_START);
    }
    if (opcode == Opcode::SMSG_SPELL_GO) {
        new (&SMSG_SPELL_GO) auto(other.SMSG_SPELL_GO);
    }
    if (opcode == Opcode::SMSG_SPELL_FAILURE) {
        new (&SMSG_SPELL_FAILURE) auto(other.SMSG_SPELL_FAILURE);
    }
    if (opcode == Opcode::SMSG_SPELL_COOLDOWN) {
        new (&SMSG_SPELL_COOLDOWN) auto(other.SMSG_SPELL_COOLDOWN);
    }
    if (opcode == Opcode::SMSG_COOLDOWN_EVENT) {
        new (&SMSG_COOLDOWN_EVENT) auto(other.SMSG_COOLDOWN_EVENT);
    }
    if (opcode == Opcode::SMSG_PET_CAST_FAILED) {
        new (&SMSG_PET_CAST_FAILED) auto(other.SMSG_PET_CAST_FAILED);
    }
    if (opcode == Opcode::MSG_CHANNEL_START) {
        new (&MSG_CHANNEL_START) auto(other.MSG_CHANNEL_START);
    }
    if (opcode == Opcode::MSG_CHANNEL_UPDATE) {
        new (&MSG_CHANNEL_UPDATE) auto(other.MSG_CHANNEL_UPDATE);
    }
    if (opcode == Opcode::SMSG_AI_REACTION) {
        new (&SMSG_AI_REACTION) auto(other.SMSG_AI_REACTION);
    }
    if (opcode == Opcode::SMSG_ATTACKSTART) {
        new (&SMSG_ATTACKSTART) auto(other.SMSG_ATTACKSTART);
    }
    if (opcode == Opcode::SMSG_ATTACKSTOP) {
        new (&SMSG_ATTACKSTOP) auto(other.SMSG_ATTACKSTOP);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_NOTINRANGE) {
        new (&SMSG_ATTACKSWING_NOTINRANGE) auto(other.SMSG_ATTACKSWING_NOTINRANGE);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_BADFACING) {
        new (&SMSG_ATTACKSWING_BADFACING) auto(other.SMSG_ATTACKSWING_BADFACING);
    }
    if (opcode == Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) {
        new (&SMSG_INSTANCE_LOCK_WARNING_QUERY) auto(other.SMSG_INSTANCE_LOCK_WARNING_QUERY);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_DEADTARGET) {
        new (&SMSG_ATTACKSWING_DEADTARGET) auto(other.SMSG_ATTACKSWING_DEADTARGET);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_CANT_ATTACK) {
        new (&SMSG_ATTACKSWING_CANT_ATTACK) auto(other.SMSG_ATTACKSWING_CANT_ATTACK);
    }
    if (opcode == Opcode::SMSG_ATTACKERSTATEUPDATE) {
        new (&SMSG_ATTACKERSTATEUPDATE) auto(other.SMSG_ATTACKERSTATEUPDATE);
    }
    if (opcode == Opcode::SMSG_CANCEL_COMBAT) {
        new (&SMSG_CANCEL_COMBAT) auto(other.SMSG_CANCEL_COMBAT);
    }
    if (opcode == Opcode::SMSG_SPELLHEALLOG) {
        new (&SMSG_SPELLHEALLOG) auto(other.SMSG_SPELLHEALLOG);
    }
    if (opcode == Opcode::SMSG_SPELLENERGIZELOG) {
        new (&SMSG_SPELLENERGIZELOG) auto(other.SMSG_SPELLENERGIZELOG);
    }
    if (opcode == Opcode::SMSG_BREAK_TARGET) {
        new (&SMSG_BREAK_TARGET) auto(other.SMSG_BREAK_TARGET);
    }
    if (opcode == Opcode::SMSG_BINDPOINTUPDATE) {
        new (&SMSG_BINDPOINTUPDATE) auto(other.SMSG_BINDPOINTUPDATE);
    }
    if (opcode == Opcode::SMSG_PLAYERBOUND) {
        new (&SMSG_PLAYERBOUND) auto(other.SMSG_PLAYERBOUND);
    }
    if (opcode == Opcode::SMSG_CLIENT_CONTROL_UPDATE) {
        new (&SMSG_CLIENT_CONTROL_UPDATE) auto(other.SMSG_CLIENT_CONTROL_UPDATE);
    }
    if (opcode == Opcode::SMSG_RESURRECT_REQUEST) {
        new (&SMSG_RESURRECT_REQUEST) auto(other.SMSG_RESURRECT_REQUEST);
    }
    if (opcode == Opcode::SMSG_LOOT_RESPONSE) {
        new (&SMSG_LOOT_RESPONSE) auto(other.SMSG_LOOT_RESPONSE);
    }
    if (opcode == Opcode::SMSG_LOOT_RELEASE_RESPONSE) {
        new (&SMSG_LOOT_RELEASE_RESPONSE) auto(other.SMSG_LOOT_RELEASE_RESPONSE);
    }
    if (opcode == Opcode::SMSG_LOOT_REMOVED) {
        new (&SMSG_LOOT_REMOVED) auto(other.SMSG_LOOT_REMOVED);
    }
    if (opcode == Opcode::SMSG_LOOT_MONEY_NOTIFY) {
        new (&SMSG_LOOT_MONEY_NOTIFY) auto(other.SMSG_LOOT_MONEY_NOTIFY);
    }
    if (opcode == Opcode::SMSG_LOOT_CLEAR_MONEY) {
        new (&SMSG_LOOT_CLEAR_MONEY) auto(other.SMSG_LOOT_CLEAR_MONEY);
    }
    if (opcode == Opcode::SMSG_ITEM_PUSH_RESULT) {
        new (&SMSG_ITEM_PUSH_RESULT) auto(other.SMSG_ITEM_PUSH_RESULT);
    }
    if (opcode == Opcode::SMSG_DUEL_REQUESTED) {
        new (&SMSG_DUEL_REQUESTED) auto(other.SMSG_DUEL_REQUESTED);
    }
    if (opcode == Opcode::SMSG_DUEL_OUTOFBOUNDS) {
        new (&SMSG_DUEL_OUTOFBOUNDS) auto(other.SMSG_DUEL_OUTOFBOUNDS);
    }
    if (opcode == Opcode::SMSG_DUEL_INBOUNDS) {
        new (&SMSG_DUEL_INBOUNDS) auto(other.SMSG_DUEL_INBOUNDS);
    }
    if (opcode == Opcode::SMSG_DUEL_COMPLETE) {
        new (&SMSG_DUEL_COMPLETE) auto(other.SMSG_DUEL_COMPLETE);
    }
    if (opcode == Opcode::SMSG_DUEL_WINNER) {
        new (&SMSG_DUEL_WINNER) auto(other.SMSG_DUEL_WINNER);
    }
    if (opcode == Opcode::SMSG_MOUNTRESULT) {
        new (&SMSG_MOUNTRESULT) auto(other.SMSG_MOUNTRESULT);
    }
    if (opcode == Opcode::SMSG_MOUNTSPECIAL_ANIM) {
        new (&SMSG_MOUNTSPECIAL_ANIM) auto(other.SMSG_MOUNTSPECIAL_ANIM);
    }
    if (opcode == Opcode::SMSG_PET_TAME_FAILURE) {
        new (&SMSG_PET_TAME_FAILURE) auto(other.SMSG_PET_TAME_FAILURE);
    }
    if (opcode == Opcode::SMSG_PET_NAME_INVALID) {
        new (&SMSG_PET_NAME_INVALID) auto(other.SMSG_PET_NAME_INVALID);
    }
    if (opcode == Opcode::SMSG_PET_SPELLS) {
        new (&SMSG_PET_SPELLS) auto(other.SMSG_PET_SPELLS);
    }
    if (opcode == Opcode::SMSG_PET_MODE) {
        new (&SMSG_PET_MODE) auto(other.SMSG_PET_MODE);
    }
    if (opcode == Opcode::SMSG_GOSSIP_MESSAGE) {
        new (&SMSG_GOSSIP_MESSAGE) auto(other.SMSG_GOSSIP_MESSAGE);
    }
    if (opcode == Opcode::SMSG_GOSSIP_COMPLETE) {
        new (&SMSG_GOSSIP_COMPLETE) auto(other.SMSG_GOSSIP_COMPLETE);
    }
    if (opcode == Opcode::SMSG_NPC_TEXT_UPDATE) {
        new (&SMSG_NPC_TEXT_UPDATE) auto(other.SMSG_NPC_TEXT_UPDATE);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS) {
        new (&SMSG_QUESTGIVER_STATUS) auto(other.SMSG_QUESTGIVER_STATUS);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_LIST) {
        new (&SMSG_QUESTGIVER_QUEST_LIST) auto(other.SMSG_QUESTGIVER_QUEST_LIST);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) {
        new (&SMSG_QUESTGIVER_QUEST_DETAILS) auto(other.SMSG_QUESTGIVER_QUEST_DETAILS);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) {
        new (&SMSG_QUESTGIVER_REQUEST_ITEMS) auto(other.SMSG_QUESTGIVER_REQUEST_ITEMS);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_OFFER_REWARD) {
        new (&SMSG_QUESTGIVER_OFFER_REWARD) auto(other.SMSG_QUESTGIVER_OFFER_REWARD);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_INVALID) {
        new (&SMSG_QUESTGIVER_QUEST_INVALID) auto(other.SMSG_QUESTGIVER_QUEST_INVALID);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) {
        new (&SMSG_QUESTGIVER_QUEST_COMPLETE) auto(other.SMSG_QUESTGIVER_QUEST_COMPLETE);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_FAILED) {
        new (&SMSG_QUESTGIVER_QUEST_FAILED) auto(other.SMSG_QUESTGIVER_QUEST_FAILED);
    }
    if (opcode == Opcode::SMSG_QUESTLOG_FULL) {
        new (&SMSG_QUESTLOG_FULL) auto(other.SMSG_QUESTLOG_FULL);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILED) {
        new (&SMSG_QUESTUPDATE_FAILED) auto(other.SMSG_QUESTUPDATE_FAILED);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) {
        new (&SMSG_QUESTUPDATE_FAILEDTIMER) auto(other.SMSG_QUESTUPDATE_FAILEDTIMER);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_COMPLETE) {
        new (&SMSG_QUESTUPDATE_COMPLETE) auto(other.SMSG_QUESTUPDATE_COMPLETE);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_KILL) {
        new (&SMSG_QUESTUPDATE_ADD_KILL) auto(other.SMSG_QUESTUPDATE_ADD_KILL);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_ITEM) {
        new (&SMSG_QUESTUPDATE_ADD_ITEM) auto(other.SMSG_QUESTUPDATE_ADD_ITEM);
    }
    if (opcode == Opcode::SMSG_QUEST_CONFIRM_ACCEPT) {
        new (&SMSG_QUEST_CONFIRM_ACCEPT) auto(other.SMSG_QUEST_CONFIRM_ACCEPT);
    }
    if (opcode == Opcode::SMSG_LIST_INVENTORY) {
        new (&SMSG_LIST_INVENTORY) auto(other.SMSG_LIST_INVENTORY);
    }
    if (opcode == Opcode::SMSG_SELL_ITEM) {
        new (&SMSG_SELL_ITEM) auto(other.SMSG_SELL_ITEM);
    }
    if (opcode == Opcode::SMSG_BUY_ITEM) {
        new (&SMSG_BUY_ITEM) auto(other.SMSG_BUY_ITEM);
    }
    if (opcode == Opcode::SMSG_BUY_FAILED) {
        new (&SMSG_BUY_FAILED) auto(other.SMSG_BUY_FAILED);
    }
    if (opcode == Opcode::SMSG_SHOWTAXINODES) {
        new (&SMSG_SHOWTAXINODES) auto(other.SMSG_SHOWTAXINODES);
    }
    if (opcode == Opcode::SMSG_TAXINODE_STATUS) {
        new (&SMSG_TAXINODE_STATUS) auto(other.SMSG_TAXINODE_STATUS);
    }
    if (opcode == Opcode::SMSG_ACTIVATETAXIREPLY) {
        new (&SMSG_ACTIVATETAXIREPLY) auto(other.SMSG_ACTIVATETAXIREPLY);
    }
    if (opcode == Opcode::SMSG_NEW_TAXI_PATH) {
        new (&SMSG_NEW_TAXI_PATH) auto(other.SMSG_NEW_TAXI_PATH);
    }
    if (opcode == Opcode::SMSG_TRAINER_LIST) {
        new (&SMSG_TRAINER_LIST) auto(other.SMSG_TRAINER_LIST);
    }
    if (opcode == Opcode::SMSG_TRAINER_BUY_SUCCEEDED) {
        new (&SMSG_TRAINER_BUY_SUCCEEDED) auto(other.SMSG_TRAINER_BUY_SUCCEEDED);
    }
    if (opcode == Opcode::SMSG_TRAINER_BUY_FAILED) {
        new (&SMSG_TRAINER_BUY_FAILED) auto(other.SMSG_TRAINER_BUY_FAILED);
    }
    if (opcode == Opcode::SMSG_SHOW_BANK) {
        new (&SMSG_SHOW_BANK) auto(other.SMSG_SHOW_BANK);
    }
    if (opcode == Opcode::SMSG_BUY_BANK_SLOT_RESULT) {
        new (&SMSG_BUY_BANK_SLOT_RESULT) auto(other.SMSG_BUY_BANK_SLOT_RESULT);
    }
    if (opcode == Opcode::SMSG_PETITION_SHOWLIST) {
        new (&SMSG_PETITION_SHOWLIST) auto(other.SMSG_PETITION_SHOWLIST);
    }
    if (opcode == Opcode::SMSG_PETITION_SHOW_SIGNATURES) {
        new (&SMSG_PETITION_SHOW_SIGNATURES) auto(other.SMSG_PETITION_SHOW_SIGNATURES);
    }
    if (opcode == Opcode::SMSG_PETITION_SIGN_RESULTS) {
        new (&SMSG_PETITION_SIGN_RESULTS) auto(other.SMSG_PETITION_SIGN_RESULTS);
    }
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        new (&MSG_PETITION_DECLINE) auto(other.MSG_PETITION_DECLINE);
    }
    if (opcode == Opcode::SMSG_TURN_IN_PETITION_RESULTS) {
        new (&SMSG_TURN_IN_PETITION_RESULTS) auto(other.SMSG_TURN_IN_PETITION_RESULTS);
    }
    if (opcode == Opcode::SMSG_PETITION_QUERY_RESPONSE) {
        new (&SMSG_PETITION_QUERY_RESPONSE) auto(other.SMSG_PETITION_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_FISH_NOT_HOOKED) {
        new (&SMSG_FISH_NOT_HOOKED) auto(other.SMSG_FISH_NOT_HOOKED);
    }
    if (opcode == Opcode::SMSG_FISH_ESCAPED) {
        new (&SMSG_FISH_ESCAPED) auto(other.SMSG_FISH_ESCAPED);
    }
    if (opcode == Opcode::SMSG_NOTIFICATION) {
        new (&SMSG_NOTIFICATION) auto(other.SMSG_NOTIFICATION);
    }
    if (opcode == Opcode::SMSG_PLAYED_TIME) {
        new (&SMSG_PLAYED_TIME) auto(other.SMSG_PLAYED_TIME);
    }
    if (opcode == Opcode::SMSG_QUERY_TIME_RESPONSE) {
        new (&SMSG_QUERY_TIME_RESPONSE) auto(other.SMSG_QUERY_TIME_RESPONSE);
    }
    if (opcode == Opcode::SMSG_LOG_XPGAIN) {
        new (&SMSG_LOG_XPGAIN) auto(other.SMSG_LOG_XPGAIN);
    }
    if (opcode == Opcode::SMSG_LEVELUP_INFO) {
        new (&SMSG_LEVELUP_INFO) auto(other.SMSG_LEVELUP_INFO);
    }
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        new (&MSG_MINIMAP_PING) auto(other.MSG_MINIMAP_PING);
    }
    if (opcode == Opcode::SMSG_ENCHANTMENTLOG) {
        new (&SMSG_ENCHANTMENTLOG) auto(other.SMSG_ENCHANTMENTLOG);
    }
    if (opcode == Opcode::SMSG_START_MIRROR_TIMER) {
        new (&SMSG_START_MIRROR_TIMER) auto(other.SMSG_START_MIRROR_TIMER);
    }
    if (opcode == Opcode::SMSG_PAUSE_MIRROR_TIMER) {
        new (&SMSG_PAUSE_MIRROR_TIMER) auto(other.SMSG_PAUSE_MIRROR_TIMER);
    }
    if (opcode == Opcode::SMSG_STOP_MIRROR_TIMER) {
        new (&SMSG_STOP_MIRROR_TIMER) auto(other.SMSG_STOP_MIRROR_TIMER);
    }
    if (opcode == Opcode::SMSG_PONG) {
        new (&SMSG_PONG) auto(other.SMSG_PONG);
    }
    if (opcode == Opcode::SMSG_CLEAR_COOLDOWN) {
        new (&SMSG_CLEAR_COOLDOWN) auto(other.SMSG_CLEAR_COOLDOWN);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_PAGETEXT) {
        new (&SMSG_GAMEOBJECT_PAGETEXT) auto(other.SMSG_GAMEOBJECT_PAGETEXT);
    }
    if (opcode == Opcode::SMSG_SPELL_DELAYED) {
        new (&SMSG_SPELL_DELAYED) auto(other.SMSG_SPELL_DELAYED);
    }
    if (opcode == Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) {
        new (&SMSG_QUEST_POI_QUERY_RESPONSE) auto(other.SMSG_QUEST_POI_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_ITEM_TIME_UPDATE) {
        new (&SMSG_ITEM_TIME_UPDATE) auto(other.SMSG_ITEM_TIME_UPDATE);
    }
    if (opcode == Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) {
        new (&SMSG_ITEM_ENCHANT_TIME_UPDATE) auto(other.SMSG_ITEM_ENCHANT_TIME_UPDATE);
    }
    if (opcode == Opcode::SMSG_AUTH_CHALLENGE) {
        new (&SMSG_AUTH_CHALLENGE) auto(other.SMSG_AUTH_CHALLENGE);
    }
    if (opcode == Opcode::SMSG_AUTH_RESPONSE) {
        new (&SMSG_AUTH_RESPONSE) auto(other.SMSG_AUTH_RESPONSE);
    }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        new (&MSG_SAVE_GUILD_EMBLEM) auto(other.MSG_SAVE_GUILD_EMBLEM);
    }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        new (&MSG_TABARDVENDOR_ACTIVATE) auto(other.MSG_TABARDVENDOR_ACTIVATE);
    }
    if (opcode == Opcode::SMSG_PLAY_SPELL_VISUAL) {
        new (&SMSG_PLAY_SPELL_VISUAL) auto(other.SMSG_PLAY_SPELL_VISUAL);
    }
    if (opcode == Opcode::SMSG_PARTYKILLLOG) {
        new (&SMSG_PARTYKILLLOG) auto(other.SMSG_PARTYKILLLOG);
    }
    if (opcode == Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) {
        new (&SMSG_COMPRESSED_UPDATE_OBJECT) auto(other.SMSG_COMPRESSED_UPDATE_OBJECT);
    }
    if (opcode == Opcode::SMSG_PLAY_SPELL_IMPACT) {
        new (&SMSG_PLAY_SPELL_IMPACT) auto(other.SMSG_PLAY_SPELL_IMPACT);
    }
    if (opcode == Opcode::SMSG_EXPLORATION_EXPERIENCE) {
        new (&SMSG_EXPLORATION_EXPERIENCE) auto(other.SMSG_EXPLORATION_EXPERIENCE);
    }
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        new (&MSG_RANDOM_ROLL) auto(other.MSG_RANDOM_ROLL);
    }
    if (opcode == Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) {
        new (&SMSG_ENVIRONMENTAL_DAMAGE_LOG) auto(other.SMSG_ENVIRONMENTAL_DAMAGE_LOG);
    }
    if (opcode == Opcode::SMSG_LFG_PLAYER_REWARD) {
        new (&SMSG_LFG_PLAYER_REWARD) auto(other.SMSG_LFG_PLAYER_REWARD);
    }
    if (opcode == Opcode::SMSG_LFG_TELEPORT_DENIED) {
        new (&SMSG_LFG_TELEPORT_DENIED) auto(other.SMSG_LFG_TELEPORT_DENIED);
    }
    if (opcode == Opcode::SMSG_REMOVED_SPELL) {
        new (&SMSG_REMOVED_SPELL) auto(other.SMSG_REMOVED_SPELL);
    }
    if (opcode == Opcode::SMSG_GMTICKET_CREATE) {
        new (&SMSG_GMTICKET_CREATE) auto(other.SMSG_GMTICKET_CREATE);
    }
    if (opcode == Opcode::SMSG_GMTICKET_UPDATETEXT) {
        new (&SMSG_GMTICKET_UPDATETEXT) auto(other.SMSG_GMTICKET_UPDATETEXT);
    }
    if (opcode == Opcode::SMSG_ACCOUNT_DATA_TIMES) {
        new (&SMSG_ACCOUNT_DATA_TIMES) auto(other.SMSG_ACCOUNT_DATA_TIMES);
    }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA) {
        new (&SMSG_UPDATE_ACCOUNT_DATA) auto(other.SMSG_UPDATE_ACCOUNT_DATA);
    }
    if (opcode == Opcode::SMSG_GMTICKET_GETTICKET) {
        new (&SMSG_GMTICKET_GETTICKET) auto(other.SMSG_GMTICKET_GETTICKET);
    }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) {
        new (&SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) auto(other.SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) {
        new (&SMSG_GAMEOBJECT_DESPAWN_ANIM) auto(other.SMSG_GAMEOBJECT_DESPAWN_ANIM);
    }
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        new (&MSG_CORPSE_QUERY) auto(other.MSG_CORPSE_QUERY);
    }
    if (opcode == Opcode::SMSG_GMTICKET_DELETETICKET) {
        new (&SMSG_GMTICKET_DELETETICKET) auto(other.SMSG_GMTICKET_DELETETICKET);
    }
    if (opcode == Opcode::SMSG_CHAT_WRONG_FACTION) {
        new (&SMSG_CHAT_WRONG_FACTION) auto(other.SMSG_CHAT_WRONG_FACTION);
    }
    if (opcode == Opcode::SMSG_GMTICKET_SYSTEMSTATUS) {
        new (&SMSG_GMTICKET_SYSTEMSTATUS) auto(other.SMSG_GMTICKET_SYSTEMSTATUS);
    }
    if (opcode == Opcode::SMSG_QUEST_FORCE_REMOVE) {
        new (&SMSG_QUEST_FORCE_REMOVE) auto(other.SMSG_QUEST_FORCE_REMOVE);
    }
    if (opcode == Opcode::SMSG_SPIRIT_HEALER_CONFIRM) {
        new (&SMSG_SPIRIT_HEALER_CONFIRM) auto(other.SMSG_SPIRIT_HEALER_CONFIRM);
    }
    if (opcode == Opcode::SMSG_GOSSIP_POI) {
        new (&SMSG_GOSSIP_POI) auto(other.SMSG_GOSSIP_POI);
    }
    if (opcode == Opcode::SMSG_LOGIN_VERIFY_WORLD) {
        new (&SMSG_LOGIN_VERIFY_WORLD) auto(other.SMSG_LOGIN_VERIFY_WORLD);
    }
    if (opcode == Opcode::SMSG_SEND_MAIL_RESULT) {
        new (&SMSG_SEND_MAIL_RESULT) auto(other.SMSG_SEND_MAIL_RESULT);
    }
    if (opcode == Opcode::SMSG_MAIL_LIST_RESULT) {
        new (&SMSG_MAIL_LIST_RESULT) auto(other.SMSG_MAIL_LIST_RESULT);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_LIST) {
        new (&SMSG_BATTLEFIELD_LIST) auto(other.SMSG_BATTLEFIELD_LIST);
    }
    if (opcode == Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) {
        new (&SMSG_ITEM_TEXT_QUERY_RESPONSE) auto(other.SMSG_ITEM_TEXT_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_SPELLLOGMISS) {
        new (&SMSG_SPELLLOGMISS) auto(other.SMSG_SPELLLOGMISS);
    }
    if (opcode == Opcode::SMSG_SPELLLOGEXECUTE) {
        new (&SMSG_SPELLLOGEXECUTE) auto(other.SMSG_SPELLLOGEXECUTE);
    }
    if (opcode == Opcode::SMSG_PERIODICAURALOG) {
        new (&SMSG_PERIODICAURALOG) auto(other.SMSG_PERIODICAURALOG);
    }
    if (opcode == Opcode::SMSG_SPELLDAMAGESHIELD) {
        new (&SMSG_SPELLDAMAGESHIELD) auto(other.SMSG_SPELLDAMAGESHIELD);
    }
    if (opcode == Opcode::SMSG_SPELLNONMELEEDAMAGELOG) {
        new (&SMSG_SPELLNONMELEEDAMAGELOG) auto(other.SMSG_SPELLNONMELEEDAMAGELOG);
    }
    if (opcode == Opcode::SMSG_RESURRECT_FAILED) {
        new (&SMSG_RESURRECT_FAILED) auto(other.SMSG_RESURRECT_FAILED);
    }
    if (opcode == Opcode::SMSG_ZONE_UNDER_ATTACK) {
        new (&SMSG_ZONE_UNDER_ATTACK) auto(other.SMSG_ZONE_UNDER_ATTACK);
    }
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        new (&MSG_AUCTION_HELLO) auto(other.MSG_AUCTION_HELLO);
    }
    if (opcode == Opcode::SMSG_AUCTION_COMMAND_RESULT) {
        new (&SMSG_AUCTION_COMMAND_RESULT) auto(other.SMSG_AUCTION_COMMAND_RESULT);
    }
    if (opcode == Opcode::SMSG_AUCTION_LIST_RESULT) {
        new (&SMSG_AUCTION_LIST_RESULT) auto(other.SMSG_AUCTION_LIST_RESULT);
    }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) {
        new (&SMSG_AUCTION_OWNER_LIST_RESULT) auto(other.SMSG_AUCTION_OWNER_LIST_RESULT);
    }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) {
        new (&SMSG_AUCTION_BIDDER_NOTIFICATION) auto(other.SMSG_AUCTION_BIDDER_NOTIFICATION);
    }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) {
        new (&SMSG_AUCTION_OWNER_NOTIFICATION) auto(other.SMSG_AUCTION_OWNER_NOTIFICATION);
    }
    if (opcode == Opcode::SMSG_PROCRESIST) {
        new (&SMSG_PROCRESIST) auto(other.SMSG_PROCRESIST);
    }
    if (opcode == Opcode::SMSG_DISPEL_FAILED) {
        new (&SMSG_DISPEL_FAILED) auto(other.SMSG_DISPEL_FAILED);
    }
    if (opcode == Opcode::SMSG_SPELLORDAMAGE_IMMUNE) {
        new (&SMSG_SPELLORDAMAGE_IMMUNE) auto(other.SMSG_SPELLORDAMAGE_IMMUNE);
    }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) {
        new (&SMSG_AUCTION_BIDDER_LIST_RESULT) auto(other.SMSG_AUCTION_BIDDER_LIST_RESULT);
    }
    if (opcode == Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) {
        new (&SMSG_SET_FLAT_SPELL_MODIFIER) auto(other.SMSG_SET_FLAT_SPELL_MODIFIER);
    }
    if (opcode == Opcode::SMSG_SET_PCT_SPELL_MODIFIER) {
        new (&SMSG_SET_PCT_SPELL_MODIFIER) auto(other.SMSG_SET_PCT_SPELL_MODIFIER);
    }
    if (opcode == Opcode::SMSG_CORPSE_RECLAIM_DELAY) {
        new (&SMSG_CORPSE_RECLAIM_DELAY) auto(other.SMSG_CORPSE_RECLAIM_DELAY);
    }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        new (&MSG_LIST_STABLED_PETS) auto(other.MSG_LIST_STABLED_PETS);
    }
    if (opcode == Opcode::SMSG_STABLE_RESULT) {
        new (&SMSG_STABLE_RESULT) auto(other.SMSG_STABLE_RESULT);
    }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        new (&MSG_QUEST_PUSH_RESULT) auto(other.MSG_QUEST_PUSH_RESULT);
    }
    if (opcode == Opcode::SMSG_PLAY_MUSIC) {
        new (&SMSG_PLAY_MUSIC) auto(other.SMSG_PLAY_MUSIC);
    }
    if (opcode == Opcode::SMSG_PLAY_OBJECT_SOUND) {
        new (&SMSG_PLAY_OBJECT_SOUND) auto(other.SMSG_PLAY_OBJECT_SOUND);
    }
    if (opcode == Opcode::SMSG_SPELLDISPELLOG) {
        new (&SMSG_SPELLDISPELLOG) auto(other.SMSG_SPELLDISPELLOG);
    }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        new (&MSG_QUERY_NEXT_MAIL_TIME) auto(other.MSG_QUERY_NEXT_MAIL_TIME);
    }
    if (opcode == Opcode::SMSG_RECEIVED_MAIL) {
        new (&SMSG_RECEIVED_MAIL) auto(other.SMSG_RECEIVED_MAIL);
    }
    if (opcode == Opcode::SMSG_RAID_GROUP_ONLY) {
        new (&SMSG_RAID_GROUP_ONLY) auto(other.SMSG_RAID_GROUP_ONLY);
    }
    if (opcode == Opcode::SMSG_PVP_CREDIT) {
        new (&SMSG_PVP_CREDIT) auto(other.SMSG_PVP_CREDIT);
    }
    if (opcode == Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) {
        new (&SMSG_AUCTION_REMOVED_NOTIFICATION) auto(other.SMSG_AUCTION_REMOVED_NOTIFICATION);
    }
    if (opcode == Opcode::SMSG_SERVER_MESSAGE) {
        new (&SMSG_SERVER_MESSAGE) auto(other.SMSG_SERVER_MESSAGE);
    }
    if (opcode == Opcode::SMSG_LFG_OFFER_CONTINUE) {
        new (&SMSG_LFG_OFFER_CONTINUE) auto(other.SMSG_LFG_OFFER_CONTINUE);
    }
    if (opcode == Opcode::SMSG_SHOW_MAILBOX) {
        new (&SMSG_SHOW_MAILBOX) auto(other.SMSG_SHOW_MAILBOX);
    }
    if (opcode == Opcode::SMSG_CANCEL_AUTO_REPEAT) {
        new (&SMSG_CANCEL_AUTO_REPEAT) auto(other.SMSG_CANCEL_AUTO_REPEAT);
    }
    if (opcode == Opcode::SMSG_STANDSTATE_UPDATE) {
        new (&SMSG_STANDSTATE_UPDATE) auto(other.SMSG_STANDSTATE_UPDATE);
    }
    if (opcode == Opcode::SMSG_LOOT_ALL_PASSED) {
        new (&SMSG_LOOT_ALL_PASSED) auto(other.SMSG_LOOT_ALL_PASSED);
    }
    if (opcode == Opcode::SMSG_LOOT_ROLL_WON) {
        new (&SMSG_LOOT_ROLL_WON) auto(other.SMSG_LOOT_ROLL_WON);
    }
    if (opcode == Opcode::SMSG_LOOT_START_ROLL) {
        new (&SMSG_LOOT_START_ROLL) auto(other.SMSG_LOOT_START_ROLL);
    }
    if (opcode == Opcode::SMSG_LOOT_ROLL) {
        new (&SMSG_LOOT_ROLL) auto(other.SMSG_LOOT_ROLL);
    }
    if (opcode == Opcode::SMSG_LOOT_MASTER_LIST) {
        new (&SMSG_LOOT_MASTER_LIST) auto(other.SMSG_LOOT_MASTER_LIST);
    }
    if (opcode == Opcode::SMSG_SET_FORCED_REACTIONS) {
        new (&SMSG_SET_FORCED_REACTIONS) auto(other.SMSG_SET_FORCED_REACTIONS);
    }
    if (opcode == Opcode::SMSG_SPELL_FAILED_OTHER) {
        new (&SMSG_SPELL_FAILED_OTHER) auto(other.SMSG_SPELL_FAILED_OTHER);
    }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) {
        new (&SMSG_CHAT_PLAYER_NOT_FOUND) auto(other.SMSG_CHAT_PLAYER_NOT_FOUND);
    }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        new (&MSG_TALENT_WIPE_CONFIRM) auto(other.MSG_TALENT_WIPE_CONFIRM);
    }
    if (opcode == Opcode::SMSG_SUMMON_REQUEST) {
        new (&SMSG_SUMMON_REQUEST) auto(other.SMSG_SUMMON_REQUEST);
    }
    if (opcode == Opcode::SMSG_MONSTER_MOVE_TRANSPORT) {
        new (&SMSG_MONSTER_MOVE_TRANSPORT) auto(other.SMSG_MONSTER_MOVE_TRANSPORT);
    }
    if (opcode == Opcode::SMSG_PET_BROKEN) {
        new (&SMSG_PET_BROKEN) auto(other.SMSG_PET_BROKEN);
    }
    if (opcode == Opcode::MSG_MOVE_FEATHER_FALL) {
        new (&MSG_MOVE_FEATHER_FALL) auto(other.MSG_MOVE_FEATHER_FALL);
    }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        new (&MSG_MOVE_WATER_WALK) auto(other.MSG_MOVE_WATER_WALK);
    }
    if (opcode == Opcode::SMSG_FEIGN_DEATH_RESISTED) {
        new (&SMSG_FEIGN_DEATH_RESISTED) auto(other.SMSG_FEIGN_DEATH_RESISTED);
    }
    if (opcode == Opcode::SMSG_DUEL_COUNTDOWN) {
        new (&SMSG_DUEL_COUNTDOWN) auto(other.SMSG_DUEL_COUNTDOWN);
    }
    if (opcode == Opcode::SMSG_AREA_TRIGGER_MESSAGE) {
        new (&SMSG_AREA_TRIGGER_MESSAGE) auto(other.SMSG_AREA_TRIGGER_MESSAGE);
    }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHOSEN) {
        new (&SMSG_LFG_ROLE_CHOSEN) auto(other.SMSG_LFG_ROLE_CHOSEN);
    }
    if (opcode == Opcode::SMSG_PLAYER_SKINNED) {
        new (&SMSG_PLAYER_SKINNED) auto(other.SMSG_PLAYER_SKINNED);
    }
    if (opcode == Opcode::SMSG_DURABILITY_DAMAGE_DEATH) {
        new (&SMSG_DURABILITY_DAMAGE_DEATH) auto(other.SMSG_DURABILITY_DAMAGE_DEATH);
    }
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        new (&MSG_PETITION_RENAME) auto(other.MSG_PETITION_RENAME);
    }
    if (opcode == Opcode::SMSG_INIT_WORLD_STATES) {
        new (&SMSG_INIT_WORLD_STATES) auto(other.SMSG_INIT_WORLD_STATES);
    }
    if (opcode == Opcode::SMSG_UPDATE_WORLD_STATE) {
        new (&SMSG_UPDATE_WORLD_STATE) auto(other.SMSG_UPDATE_WORLD_STATE);
    }
    if (opcode == Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) {
        new (&SMSG_ITEM_NAME_QUERY_RESPONSE) auto(other.SMSG_ITEM_NAME_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_PET_ACTION_FEEDBACK) {
        new (&SMSG_PET_ACTION_FEEDBACK) auto(other.SMSG_PET_ACTION_FEEDBACK);
    }
    if (opcode == Opcode::SMSG_CHAR_RENAME) {
        new (&SMSG_CHAR_RENAME) auto(other.SMSG_CHAR_RENAME);
    }
    if (opcode == Opcode::SMSG_INSTANCE_SAVE_CREATED) {
        new (&SMSG_INSTANCE_SAVE_CREATED) auto(other.SMSG_INSTANCE_SAVE_CREATED);
    }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_INFO) {
        new (&SMSG_RAID_INSTANCE_INFO) auto(other.SMSG_RAID_INSTANCE_INFO);
    }
    if (opcode == Opcode::SMSG_PLAY_SOUND) {
        new (&SMSG_PLAY_SOUND) auto(other.SMSG_PLAY_SOUND);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_STATUS) {
        new (&SMSG_BATTLEFIELD_STATUS) auto(other.SMSG_BATTLEFIELD_STATUS);
    }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        new (&MSG_INSPECT_HONOR_STATS) auto(other.MSG_INSPECT_HONOR_STATS);
    }
    if (opcode == Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) {
        new (&SMSG_FORCE_WALK_SPEED_CHANGE) auto(other.SMSG_FORCE_WALK_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) {
        new (&SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) auto(other.SMSG_FORCE_SWIM_BACK_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_TURN_RATE_CHANGE) {
        new (&SMSG_FORCE_TURN_RATE_CHANGE) auto(other.SMSG_FORCE_TURN_RATE_CHANGE);
    }
    if (opcode == Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) {
        new (&SMSG_AREA_SPIRIT_HEALER_TIME) auto(other.SMSG_AREA_SPIRIT_HEALER_TIME);
    }
    if (opcode == Opcode::SMSG_WARDEN_DATA) {
        new (&SMSG_WARDEN_DATA) auto(other.SMSG_WARDEN_DATA);
    }
    if (opcode == Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) {
        new (&SMSG_GROUP_JOINED_BATTLEGROUND) auto(other.SMSG_GROUP_JOINED_BATTLEGROUND);
    }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        new (&MSG_BATTLEGROUND_PLAYER_POSITIONS) auto(other.MSG_BATTLEGROUND_PLAYER_POSITIONS);
    }
    if (opcode == Opcode::SMSG_BINDER_CONFIRM) {
        new (&SMSG_BINDER_CONFIRM) auto(other.SMSG_BINDER_CONFIRM);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) {
        new (&SMSG_BATTLEGROUND_PLAYER_JOINED) auto(other.SMSG_BATTLEGROUND_PLAYER_JOINED);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) {
        new (&SMSG_BATTLEGROUND_PLAYER_LEFT) auto(other.SMSG_BATTLEGROUND_PLAYER_LEFT);
    }
    if (opcode == Opcode::SMSG_ADDON_INFO) {
        new (&SMSG_ADDON_INFO) auto(other.SMSG_ADDON_INFO);
    }
    if (opcode == Opcode::SMSG_PET_UNLEARN_CONFIRM) {
        new (&SMSG_PET_UNLEARN_CONFIRM) auto(other.SMSG_PET_UNLEARN_CONFIRM);
    }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS_FULL) {
        new (&SMSG_PARTY_MEMBER_STATS_FULL) auto(other.SMSG_PARTY_MEMBER_STATS_FULL);
    }
    if (opcode == Opcode::SMSG_WEATHER) {
        new (&SMSG_WEATHER) auto(other.SMSG_WEATHER);
    }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_MESSAGE) {
        new (&SMSG_RAID_INSTANCE_MESSAGE) auto(other.SMSG_RAID_INSTANCE_MESSAGE);
    }
    if (opcode == Opcode::SMSG_COMPRESSED_MOVES) {
        new (&SMSG_COMPRESSED_MOVES) auto(other.SMSG_COMPRESSED_MOVES);
    }
    if (opcode == Opcode::SMSG_CHAT_RESTRICTED) {
        new (&SMSG_CHAT_RESTRICTED) auto(other.SMSG_CHAT_RESTRICTED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_SPEED) {
        new (&SMSG_SPLINE_SET_RUN_SPEED) auto(other.SMSG_SPLINE_SET_RUN_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) {
        new (&SMSG_SPLINE_SET_RUN_BACK_SPEED) auto(other.SMSG_SPLINE_SET_RUN_BACK_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_SPEED) {
        new (&SMSG_SPLINE_SET_SWIM_SPEED) auto(other.SMSG_SPLINE_SET_SWIM_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_WALK_SPEED) {
        new (&SMSG_SPLINE_SET_WALK_SPEED) auto(other.SMSG_SPLINE_SET_WALK_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) {
        new (&SMSG_SPLINE_SET_SWIM_BACK_SPEED) auto(other.SMSG_SPLINE_SET_SWIM_BACK_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_TURN_RATE) {
        new (&SMSG_SPLINE_SET_TURN_RATE) auto(other.SMSG_SPLINE_SET_TURN_RATE);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNROOT) {
        new (&SMSG_SPLINE_MOVE_UNROOT) auto(other.SMSG_SPLINE_MOVE_UNROOT);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) {
        new (&SMSG_SPLINE_MOVE_FEATHER_FALL) auto(other.SMSG_SPLINE_MOVE_FEATHER_FALL);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) {
        new (&SMSG_SPLINE_MOVE_NORMAL_FALL) auto(other.SMSG_SPLINE_MOVE_NORMAL_FALL);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_HOVER) {
        new (&SMSG_SPLINE_MOVE_SET_HOVER) auto(other.SMSG_SPLINE_MOVE_SET_HOVER);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) {
        new (&SMSG_SPLINE_MOVE_UNSET_HOVER) auto(other.SMSG_SPLINE_MOVE_UNSET_HOVER);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_WATER_WALK) {
        new (&SMSG_SPLINE_MOVE_WATER_WALK) auto(other.SMSG_SPLINE_MOVE_WATER_WALK);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_LAND_WALK) {
        new (&SMSG_SPLINE_MOVE_LAND_WALK) auto(other.SMSG_SPLINE_MOVE_LAND_WALK);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_START_SWIM) {
        new (&SMSG_SPLINE_MOVE_START_SWIM) auto(other.SMSG_SPLINE_MOVE_START_SWIM);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) {
        new (&SMSG_SPLINE_MOVE_STOP_SWIM) auto(other.SMSG_SPLINE_MOVE_STOP_SWIM);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) {
        new (&SMSG_SPLINE_MOVE_SET_RUN_MODE) auto(other.SMSG_SPLINE_MOVE_SET_RUN_MODE);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) {
        new (&SMSG_SPLINE_MOVE_SET_WALK_MODE) auto(other.SMSG_SPLINE_MOVE_SET_WALK_MODE);
    }
    if (opcode == Opcode::MSG_MOVE_TIME_SKIPPED) {
        new (&MSG_MOVE_TIME_SKIPPED) auto(other.MSG_MOVE_TIME_SKIPPED);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_ROOT) {
        new (&SMSG_SPLINE_MOVE_ROOT) auto(other.SMSG_SPLINE_MOVE_ROOT);
    }
    if (opcode == Opcode::SMSG_INVALIDATE_PLAYER) {
        new (&SMSG_INVALIDATE_PLAYER) auto(other.SMSG_INVALIDATE_PLAYER);
    }
    if (opcode == Opcode::SMSG_INSTANCE_RESET) {
        new (&SMSG_INSTANCE_RESET) auto(other.SMSG_INSTANCE_RESET);
    }
    if (opcode == Opcode::SMSG_INSTANCE_RESET_FAILED) {
        new (&SMSG_INSTANCE_RESET_FAILED) auto(other.SMSG_INSTANCE_RESET_FAILED);
    }
    if (opcode == Opcode::SMSG_UPDATE_LAST_INSTANCE) {
        new (&SMSG_UPDATE_LAST_INSTANCE) auto(other.SMSG_UPDATE_LAST_INSTANCE);
    }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        new (&MSG_RAID_TARGET_UPDATE) auto(other.MSG_RAID_TARGET_UPDATE);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        new (&MSG_RAID_READY_CHECK) auto(other.MSG_RAID_READY_CHECK);
    }
    if (opcode == Opcode::SMSG_PET_ACTION_SOUND) {
        new (&SMSG_PET_ACTION_SOUND) auto(other.SMSG_PET_ACTION_SOUND);
    }
    if (opcode == Opcode::SMSG_PET_DISMISS_SOUND) {
        new (&SMSG_PET_DISMISS_SOUND) auto(other.SMSG_PET_DISMISS_SOUND);
    }
    if (opcode == Opcode::SMSG_GM_TICKET_STATUS_UPDATE) {
        new (&SMSG_GM_TICKET_STATUS_UPDATE) auto(other.SMSG_GM_TICKET_STATUS_UPDATE);
    }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        new (&MSG_SET_DUNGEON_DIFFICULTY) auto(other.MSG_SET_DUNGEON_DIFFICULTY);
    }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) {
        new (&SMSG_UPDATE_INSTANCE_OWNERSHIP) auto(other.SMSG_UPDATE_INSTANCE_OWNERSHIP);
    }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) {
        new (&SMSG_CHAT_PLAYER_AMBIGUOUS) auto(other.SMSG_CHAT_PLAYER_AMBIGUOUS);
    }
    if (opcode == Opcode::SMSG_SPELLINSTAKILLLOG) {
        new (&SMSG_SPELLINSTAKILLLOG) auto(other.SMSG_SPELLINSTAKILLLOG);
    }
    if (opcode == Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) {
        new (&SMSG_SPELL_UPDATE_CHAIN_TARGETS) auto(other.SMSG_SPELL_UPDATE_CHAIN_TARGETS);
    }
    if (opcode == Opcode::SMSG_SPELLSTEALLOG) {
        new (&SMSG_SPELLSTEALLOG) auto(other.SMSG_SPELLSTEALLOG);
    }
    if (opcode == Opcode::SMSG_DEFENSE_MESSAGE) {
        new (&SMSG_DEFENSE_MESSAGE) auto(other.SMSG_DEFENSE_MESSAGE);
    }
    if (opcode == Opcode::SMSG_INSTANCE_DIFFICULTY) {
        new (&SMSG_INSTANCE_DIFFICULTY) auto(other.SMSG_INSTANCE_DIFFICULTY);
    }
    if (opcode == Opcode::SMSG_MOTD) {
        new (&SMSG_MOTD) auto(other.SMSG_MOTD);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_CAN_FLY) {
        new (&SMSG_MOVE_SET_CAN_FLY) auto(other.SMSG_MOVE_SET_CAN_FLY);
    }
    if (opcode == Opcode::SMSG_MOVE_UNSET_CAN_FLY) {
        new (&SMSG_MOVE_UNSET_CAN_FLY) auto(other.SMSG_MOVE_UNSET_CAN_FLY);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) {
        new (&SMSG_ARENA_TEAM_COMMAND_RESULT) auto(other.SMSG_ARENA_TEAM_COMMAND_RESULT);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) {
        new (&SMSG_ARENA_TEAM_QUERY_RESPONSE) auto(other.SMSG_ARENA_TEAM_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_ROSTER) {
        new (&SMSG_ARENA_TEAM_ROSTER) auto(other.SMSG_ARENA_TEAM_ROSTER);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_INVITE) {
        new (&SMSG_ARENA_TEAM_INVITE) auto(other.SMSG_ARENA_TEAM_INVITE);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_EVENT) {
        new (&SMSG_ARENA_TEAM_EVENT) auto(other.SMSG_ARENA_TEAM_EVENT);
    }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        new (&MSG_MOVE_START_ASCEND) auto(other.MSG_MOVE_START_ASCEND);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        new (&MSG_MOVE_STOP_ASCEND) auto(other.MSG_MOVE_STOP_ASCEND);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_STATS) {
        new (&SMSG_ARENA_TEAM_STATS) auto(other.SMSG_ARENA_TEAM_STATS);
    }
    if (opcode == Opcode::SMSG_UPDATE_LFG_LIST) {
        new (&SMSG_UPDATE_LFG_LIST) auto(other.SMSG_UPDATE_LFG_LIST);
    }
    if (opcode == Opcode::SMSG_LFG_PROPOSAL_UPDATE) {
        new (&SMSG_LFG_PROPOSAL_UPDATE) auto(other.SMSG_LFG_PROPOSAL_UPDATE);
    }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) {
        new (&SMSG_LFG_ROLE_CHECK_UPDATE) auto(other.SMSG_LFG_ROLE_CHECK_UPDATE);
    }
    if (opcode == Opcode::SMSG_LFG_JOIN_RESULT) {
        new (&SMSG_LFG_JOIN_RESULT) auto(other.SMSG_LFG_JOIN_RESULT);
    }
    if (opcode == Opcode::SMSG_LFG_QUEUE_STATUS) {
        new (&SMSG_LFG_QUEUE_STATUS) auto(other.SMSG_LFG_QUEUE_STATUS);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PLAYER) {
        new (&SMSG_LFG_UPDATE_PLAYER) auto(other.SMSG_LFG_UPDATE_PLAYER);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PARTY) {
        new (&SMSG_LFG_UPDATE_PARTY) auto(other.SMSG_LFG_UPDATE_PARTY);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_SEARCH) {
        new (&SMSG_LFG_UPDATE_SEARCH) auto(other.SMSG_LFG_UPDATE_SEARCH);
    }
    if (opcode == Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) {
        new (&SMSG_LFG_BOOT_PROPOSAL_UPDATE) auto(other.SMSG_LFG_BOOT_PROPOSAL_UPDATE);
    }
    if (opcode == Opcode::SMSG_LFG_PLAYER_INFO) {
        new (&SMSG_LFG_PLAYER_INFO) auto(other.SMSG_LFG_PLAYER_INFO);
    }
    if (opcode == Opcode::SMSG_LFG_PARTY_INFO) {
        new (&SMSG_LFG_PARTY_INFO) auto(other.SMSG_LFG_PARTY_INFO);
    }
    if (opcode == Opcode::SMSG_TITLE_EARNED) {
        new (&SMSG_TITLE_EARNED) auto(other.SMSG_TITLE_EARNED);
    }
    if (opcode == Opcode::SMSG_ARENA_ERROR) {
        new (&SMSG_ARENA_ERROR) auto(other.SMSG_ARENA_ERROR);
    }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        new (&MSG_INSPECT_ARENA_TEAMS) auto(other.MSG_INSPECT_ARENA_TEAMS);
    }
    if (opcode == Opcode::SMSG_DEATH_RELEASE_LOC) {
        new (&SMSG_DEATH_RELEASE_LOC) auto(other.SMSG_DEATH_RELEASE_LOC);
    }
    if (opcode == Opcode::SMSG_FORCED_DEATH_UPDATE) {
        new (&SMSG_FORCED_DEATH_UPDATE) auto(other.SMSG_FORCED_DEATH_UPDATE);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_SPEED) {
        new (&MSG_MOVE_SET_FLIGHT_SPEED) auto(other.MSG_MOVE_SET_FLIGHT_SPEED);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        new (&MSG_MOVE_SET_FLIGHT_BACK_SPEED) auto(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED);
    }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) {
        new (&SMSG_FORCE_FLIGHT_SPEED_CHANGE) auto(other.SMSG_FORCE_FLIGHT_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) {
        new (&SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) auto(other.SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) {
        new (&SMSG_SPLINE_SET_FLIGHT_SPEED) auto(other.SMSG_SPLINE_SET_FLIGHT_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) {
        new (&SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) auto(other.SMSG_SPLINE_SET_FLIGHT_BACK_SPEED);
    }
    if (opcode == Opcode::SMSG_FLIGHT_SPLINE_SYNC) {
        new (&SMSG_FLIGHT_SPLINE_SYNC) auto(other.SMSG_FLIGHT_SPLINE_SYNC);
    }
    if (opcode == Opcode::SMSG_REALM_SPLIT) {
        new (&SMSG_REALM_SPLIT) auto(other.SMSG_REALM_SPLIT);
    }
    if (opcode == Opcode::SMSG_TIME_SYNC_REQ) {
        new (&SMSG_TIME_SYNC_REQ) auto(other.SMSG_TIME_SYNC_REQ);
    }
    if (opcode == Opcode::SMSG_RESET_FAILED_NOTIFY) {
        new (&SMSG_RESET_FAILED_NOTIFY) auto(other.SMSG_RESET_FAILED_NOTIFY);
    }
    if (opcode == Opcode::SMSG_LFG_DISABLED) {
        new (&SMSG_LFG_DISABLED) auto(other.SMSG_LFG_DISABLED);
    }
    if (opcode == Opcode::SMSG_UPDATE_COMBO_POINTS) {
        new (&SMSG_UPDATE_COMBO_POINTS) auto(other.SMSG_UPDATE_COMBO_POINTS);
    }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        new (&MSG_MOVE_START_DESCEND) auto(other.MSG_MOVE_START_DESCEND);
    }
    if (opcode == Opcode::SMSG_DISMOUNT) {
        new (&SMSG_DISMOUNT) auto(other.SMSG_DISMOUNT);
    }
    if (opcode == Opcode::MSG_MOVE_UPDATE_CAN_FLY) {
        new (&MSG_MOVE_UPDATE_CAN_FLY) auto(other.MSG_MOVE_UPDATE_CAN_FLY);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        new (&MSG_RAID_READY_CHECK_CONFIRM) auto(other.MSG_RAID_READY_CHECK_CONFIRM);
    }
    if (opcode == Opcode::SMSG_GM_MESSAGECHAT) {
        new (&SMSG_GM_MESSAGECHAT) auto(other.SMSG_GM_MESSAGECHAT);
    }
    if (opcode == Opcode::SMSG_CLEAR_TARGET) {
        new (&SMSG_CLEAR_TARGET) auto(other.SMSG_CLEAR_TARGET);
    }
    if (opcode == Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) {
        new (&SMSG_CROSSED_INEBRIATION_THRESHOLD) auto(other.SMSG_CROSSED_INEBRIATION_THRESHOLD);
    }
    if (opcode == Opcode::SMSG_KICK_REASON) {
        new (&SMSG_KICK_REASON) auto(other.SMSG_KICK_REASON);
    }
    if (opcode == Opcode::SMSG_COMPLAIN_RESULT) {
        new (&SMSG_COMPLAIN_RESULT) auto(other.SMSG_COMPLAIN_RESULT);
    }
    if (opcode == Opcode::SMSG_FEATURE_SYSTEM_STATUS) {
        new (&SMSG_FEATURE_SYSTEM_STATUS) auto(other.SMSG_FEATURE_SYSTEM_STATUS);
    }
    if (opcode == Opcode::SMSG_CHANNEL_MEMBER_COUNT) {
        new (&SMSG_CHANNEL_MEMBER_COUNT) auto(other.SMSG_CHANNEL_MEMBER_COUNT);
    }
    if (opcode == Opcode::SMSG_GUILD_BANK_LIST) {
        new (&SMSG_GUILD_BANK_LIST) auto(other.SMSG_GUILD_BANK_LIST);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        new (&MSG_GUILD_BANK_LOG_QUERY) auto(other.MSG_GUILD_BANK_LOG_QUERY);
    }
    if (opcode == Opcode::SMSG_USERLIST_ADD) {
        new (&SMSG_USERLIST_ADD) auto(other.SMSG_USERLIST_ADD);
    }
    if (opcode == Opcode::SMSG_USERLIST_REMOVE) {
        new (&SMSG_USERLIST_REMOVE) auto(other.SMSG_USERLIST_REMOVE);
    }
    if (opcode == Opcode::SMSG_USERLIST_UPDATE) {
        new (&SMSG_USERLIST_UPDATE) auto(other.SMSG_USERLIST_UPDATE);
    }
    if (opcode == Opcode::SMSG_INSPECT_TALENT) {
        new (&SMSG_INSPECT_TALENT) auto(other.SMSG_INSPECT_TALENT);
    }
    if (opcode == Opcode::SMSG_LOOT_LIST) {
        new (&SMSG_LOOT_LIST) auto(other.SMSG_LOOT_LIST);
    }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        new (&MSG_GUILD_PERMISSIONS) auto(other.MSG_GUILD_PERMISSIONS);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        new (&MSG_GUILD_BANK_MONEY_WITHDRAWN) auto(other.MSG_GUILD_BANK_MONEY_WITHDRAWN);
    }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        new (&MSG_GUILD_EVENT_LOG_QUERY) auto(other.MSG_GUILD_EVENT_LOG_QUERY);
    }
    if (opcode == Opcode::SMSG_MIRRORIMAGE_DATA) {
        new (&SMSG_MIRRORIMAGE_DATA) auto(other.SMSG_MIRRORIMAGE_DATA);
    }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        new (&MSG_QUERY_GUILD_BANK_TEXT) auto(other.MSG_QUERY_GUILD_BANK_TEXT);
    }
    if (opcode == Opcode::SMSG_OVERRIDE_LIGHT) {
        new (&SMSG_OVERRIDE_LIGHT) auto(other.SMSG_OVERRIDE_LIGHT);
    }
    if (opcode == Opcode::SMSG_TOTEM_CREATED) {
        new (&SMSG_TOTEM_CREATED) auto(other.SMSG_TOTEM_CREATED);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) {
        new (&SMSG_QUESTGIVER_STATUS_MULTIPLE) auto(other.SMSG_QUESTGIVER_STATUS_MULTIPLE);
    }
    if (opcode == Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) {
        new (&SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) auto(other.SMSG_SET_PLAYER_DECLINED_NAMES_RESULT);
    }
    if (opcode == Opcode::SMSG_SEND_UNLEARN_SPELLS) {
        new (&SMSG_SEND_UNLEARN_SPELLS) auto(other.SMSG_SEND_UNLEARN_SPELLS);
    }
    if (opcode == Opcode::SMSG_PROPOSE_LEVEL_GRANT) {
        new (&SMSG_PROPOSE_LEVEL_GRANT) auto(other.SMSG_PROPOSE_LEVEL_GRANT);
    }
    if (opcode == Opcode::SMSG_REFER_A_FRIEND_FAILURE) {
        new (&SMSG_REFER_A_FRIEND_FAILURE) auto(other.SMSG_REFER_A_FRIEND_FAILURE);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_FLYING) {
        new (&SMSG_SPLINE_MOVE_SET_FLYING) auto(other.SMSG_SPLINE_MOVE_SET_FLYING);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) {
        new (&SMSG_SPLINE_MOVE_UNSET_FLYING) auto(other.SMSG_SPLINE_MOVE_UNSET_FLYING);
    }
    if (opcode == Opcode::SMSG_ENABLE_BARBER_SHOP) {
        new (&SMSG_ENABLE_BARBER_SHOP) auto(other.SMSG_ENABLE_BARBER_SHOP);
    }
    if (opcode == Opcode::SMSG_BARBER_SHOP_RESULT) {
        new (&SMSG_BARBER_SHOP_RESULT) auto(other.SMSG_BARBER_SHOP_RESULT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_CALENDAR) {
        new (&SMSG_CALENDAR_SEND_CALENDAR) auto(other.SMSG_CALENDAR_SEND_CALENDAR);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_EVENT) {
        new (&SMSG_CALENDAR_SEND_EVENT) auto(other.SMSG_CALENDAR_SEND_EVENT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_FILTER_GUILD) {
        new (&SMSG_CALENDAR_FILTER_GUILD) auto(other.SMSG_CALENDAR_FILTER_GUILD);
    }
    if (opcode == Opcode::SMSG_CALENDAR_ARENA_TEAM) {
        new (&SMSG_CALENDAR_ARENA_TEAM) auto(other.SMSG_CALENDAR_ARENA_TEAM);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE) {
        new (&SMSG_CALENDAR_EVENT_INVITE) auto(other.SMSG_CALENDAR_EVENT_INVITE);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) {
        new (&SMSG_CALENDAR_EVENT_INVITE_REMOVED) auto(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_STATUS) {
        new (&SMSG_CALENDAR_EVENT_STATUS) auto(other.SMSG_CALENDAR_EVENT_STATUS);
    }
    if (opcode == Opcode::SMSG_CALENDAR_COMMAND_RESULT) {
        new (&SMSG_CALENDAR_COMMAND_RESULT) auto(other.SMSG_CALENDAR_COMMAND_RESULT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) {
        new (&SMSG_CALENDAR_RAID_LOCKOUT_ADDED) auto(other.SMSG_CALENDAR_RAID_LOCKOUT_ADDED);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) {
        new (&SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) auto(other.SMSG_CALENDAR_RAID_LOCKOUT_REMOVED);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) {
        new (&SMSG_CALENDAR_EVENT_INVITE_ALERT) auto(other.SMSG_CALENDAR_EVENT_INVITE_ALERT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) {
        new (&SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) auto(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) {
        new (&SMSG_CALENDAR_EVENT_REMOVED_ALERT) auto(other.SMSG_CALENDAR_EVENT_REMOVED_ALERT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) {
        new (&SMSG_CALENDAR_EVENT_UPDATED_ALERT) auto(other.SMSG_CALENDAR_EVENT_UPDATED_ALERT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) {
        new (&SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) auto(other.SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        new (&CMSG_CALENDAR_GET_NUM_PENDING) auto(other.CMSG_CALENDAR_GET_NUM_PENDING);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) {
        new (&SMSG_CALENDAR_SEND_NUM_PENDING) auto(other.SMSG_CALENDAR_SEND_NUM_PENDING);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH_RATE) {
        new (&MSG_MOVE_SET_PITCH_RATE) auto(other.MSG_MOVE_SET_PITCH_RATE);
    }
    if (opcode == Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) {
        new (&SMSG_FORCE_PITCH_RATE_CHANGE) auto(other.SMSG_FORCE_PITCH_RATE_CHANGE);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) {
        new (&SMSG_CALENDAR_EVENT_INVITE_NOTES) auto(other.SMSG_CALENDAR_EVENT_INVITE_NOTES);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) {
        new (&SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) auto(other.SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT);
    }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) {
        new (&SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) auto(other.SMSG_UPDATE_ACCOUNT_DATA_COMPLETE);
    }
    if (opcode == Opcode::SMSG_TRIGGER_MOVIE) {
        new (&SMSG_TRIGGER_MOVIE) auto(other.SMSG_TRIGGER_MOVIE);
    }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_EARNED) {
        new (&SMSG_ACHIEVEMENT_EARNED) auto(other.SMSG_ACHIEVEMENT_EARNED);
    }
    if (opcode == Opcode::SMSG_CRITERIA_UPDATE) {
        new (&SMSG_CRITERIA_UPDATE) auto(other.SMSG_CRITERIA_UPDATE);
    }
    if (opcode == Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) {
        new (&SMSG_RESPOND_INSPECT_ACHIEVEMENTS) auto(other.SMSG_RESPOND_INSPECT_ACHIEVEMENTS);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) {
        new (&SMSG_QUESTUPDATE_ADD_PVP_KILL) auto(other.SMSG_QUESTUPDATE_ADD_PVP_KILL);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) {
        new (&SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) auto(other.SMSG_CALENDAR_RAID_LOCKOUT_UPDATED);
    }
    if (opcode == Opcode::SMSG_CHAR_CUSTOMIZE) {
        new (&SMSG_CHAR_CUSTOMIZE) auto(other.SMSG_CHAR_CUSTOMIZE);
    }
    if (opcode == Opcode::SMSG_SET_PHASE_SHIFT) {
        new (&SMSG_SET_PHASE_SHIFT) auto(other.SMSG_SET_PHASE_SHIFT);
    }
    if (opcode == Opcode::SMSG_ALL_ACHIEVEMENT_DATA) {
        new (&SMSG_ALL_ACHIEVEMENT_DATA) auto(other.SMSG_ALL_ACHIEVEMENT_DATA);
    }
    if (opcode == Opcode::SMSG_POWER_UPDATE) {
        new (&SMSG_POWER_UPDATE) auto(other.SMSG_POWER_UPDATE);
    }
    if (opcode == Opcode::SMSG_HIGHEST_THREAT_UPDATE) {
        new (&SMSG_HIGHEST_THREAT_UPDATE) auto(other.SMSG_HIGHEST_THREAT_UPDATE);
    }
    if (opcode == Opcode::SMSG_THREAT_UPDATE) {
        new (&SMSG_THREAT_UPDATE) auto(other.SMSG_THREAT_UPDATE);
    }
    if (opcode == Opcode::SMSG_THREAT_REMOVE) {
        new (&SMSG_THREAT_REMOVE) auto(other.SMSG_THREAT_REMOVE);
    }
    if (opcode == Opcode::SMSG_THREAT_CLEAR) {
        new (&SMSG_THREAT_CLEAR) auto(other.SMSG_THREAT_CLEAR);
    }
    if (opcode == Opcode::SMSG_CONVERT_RUNE) {
        new (&SMSG_CONVERT_RUNE) auto(other.SMSG_CONVERT_RUNE);
    }
    if (opcode == Opcode::SMSG_RESYNC_RUNES) {
        new (&SMSG_RESYNC_RUNES) auto(other.SMSG_RESYNC_RUNES);
    }
    if (opcode == Opcode::SMSG_ADD_RUNE_POWER) {
        new (&SMSG_ADD_RUNE_POWER) auto(other.SMSG_ADD_RUNE_POWER);
    }
    if (opcode == Opcode::SMSG_AUCTION_LIST_PENDING_SALES) {
        new (&SMSG_AUCTION_LIST_PENDING_SALES) auto(other.SMSG_AUCTION_LIST_PENDING_SALES);
    }
    if (opcode == Opcode::SMSG_MODIFY_COOLDOWN) {
        new (&SMSG_MODIFY_COOLDOWN) auto(other.SMSG_MODIFY_COOLDOWN);
    }
    if (opcode == Opcode::SMSG_PET_UPDATE_COMBO_POINTS) {
        new (&SMSG_PET_UPDATE_COMBO_POINTS) auto(other.SMSG_PET_UPDATE_COMBO_POINTS);
    }
    if (opcode == Opcode::SMSG_PRE_RESURRECT) {
        new (&SMSG_PRE_RESURRECT) auto(other.SMSG_PRE_RESURRECT);
    }
    if (opcode == Opcode::SMSG_AURA_UPDATE_ALL) {
        new (&SMSG_AURA_UPDATE_ALL) auto(other.SMSG_AURA_UPDATE_ALL);
    }
    if (opcode == Opcode::SMSG_AURA_UPDATE) {
        new (&SMSG_AURA_UPDATE) auto(other.SMSG_AURA_UPDATE);
    }
    if (opcode == Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) {
        new (&SMSG_SERVER_FIRST_ACHIEVEMENT) auto(other.SMSG_SERVER_FIRST_ACHIEVEMENT);
    }
    if (opcode == Opcode::SMSG_PET_LEARNED_SPELL) {
        new (&SMSG_PET_LEARNED_SPELL) auto(other.SMSG_PET_LEARNED_SPELL);
    }
    if (opcode == Opcode::SMSG_PET_UNLEARNED_SPELL) {
        new (&SMSG_PET_UNLEARNED_SPELL) auto(other.SMSG_PET_UNLEARNED_SPELL);
    }
    if (opcode == Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) {
        new (&SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) auto(other.SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA);
    }
    if (opcode == Opcode::SMSG_CRITERIA_DELETED) {
        new (&SMSG_CRITERIA_DELETED) auto(other.SMSG_CRITERIA_DELETED);
    }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_DELETED) {
        new (&SMSG_ACHIEVEMENT_DELETED) auto(other.SMSG_ACHIEVEMENT_DELETED);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) {
        new (&SMSG_BATTLEGROUND_INFO_THROTTLED) auto(other.SMSG_BATTLEGROUND_INFO_THROTTLED);
    }
    if (opcode == Opcode::SMSG_PLAYER_VEHICLE_DATA) {
        new (&SMSG_PLAYER_VEHICLE_DATA) auto(other.SMSG_PLAYER_VEHICLE_DATA);
    }
    if (opcode == Opcode::SMSG_PET_GUIDS) {
        new (&SMSG_PET_GUIDS) auto(other.SMSG_PET_GUIDS);
    }
    if (opcode == Opcode::SMSG_CLIENTCACHE_VERSION) {
        new (&SMSG_CLIENTCACHE_VERSION) auto(other.SMSG_CLIENTCACHE_VERSION);
    }
    if (opcode == Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) {
        new (&SMSG_ITEM_REFUND_INFO_RESPONSE) auto(other.SMSG_ITEM_REFUND_INFO_RESPONSE);
    }
    if (opcode == Opcode::SMSG_ITEM_REFUND_RESULT) {
        new (&SMSG_ITEM_REFUND_RESULT) auto(other.SMSG_ITEM_REFUND_RESULT);
    }
    if (opcode == Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) {
        new (&SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) auto(other.SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) {
        new (&SMSG_CALENDAR_CLEAR_PENDING_ACTION) auto(other.SMSG_CALENDAR_CLEAR_PENDING_ACTION);
    }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_LIST) {
        new (&SMSG_EQUIPMENT_SET_LIST) auto(other.SMSG_EQUIPMENT_SET_LIST);
    }
    if (opcode == Opcode::SMSG_SET_PROJECTILE_POSITION) {
        new (&SMSG_SET_PROJECTILE_POSITION) auto(other.SMSG_SET_PROJECTILE_POSITION);
    }
    if (opcode == Opcode::SMSG_TALENTS_INFO) {
        new (&SMSG_TALENTS_INFO) auto(other.SMSG_TALENTS_INFO);
    }
    if (opcode == Opcode::SMSG_ARENA_UNIT_DESTROYED) {
        new (&SMSG_ARENA_UNIT_DESTROYED) auto(other.SMSG_ARENA_UNIT_DESTROYED);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) {
        new (&SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) auto(other.SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED);
    }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_DISABLE) {
        new (&SMSG_MOVE_GRAVITY_DISABLE) auto(other.SMSG_MOVE_GRAVITY_DISABLE);
    }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_ENABLE) {
        new (&SMSG_MOVE_GRAVITY_ENABLE) auto(other.SMSG_MOVE_GRAVITY_ENABLE);
    }
    if (opcode == Opcode::MSG_MOVE_GRAVITY_CHNG) {
        new (&MSG_MOVE_GRAVITY_CHNG) auto(other.MSG_MOVE_GRAVITY_CHNG);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) {
        new (&SMSG_SPLINE_MOVE_GRAVITY_DISABLE) auto(other.SMSG_SPLINE_MOVE_GRAVITY_DISABLE);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) {
        new (&SMSG_SPLINE_MOVE_GRAVITY_ENABLE) auto(other.SMSG_SPLINE_MOVE_GRAVITY_ENABLE);
    }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) {
        new (&SMSG_EQUIPMENT_SET_USE_RESULT) auto(other.SMSG_EQUIPMENT_SET_USE_RESULT);
    }
    if (opcode == Opcode::SMSG_CHAR_FACTION_CHANGE) {
        new (&SMSG_CHAR_FACTION_CHANGE) auto(other.SMSG_CHAR_FACTION_CHANGE);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) {
        new (&SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) auto(other.SMSG_BATTLEFIELD_MGR_ENTRY_INVITE);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) {
        new (&SMSG_BATTLEFIELD_MGR_ENTERED) auto(other.SMSG_BATTLEFIELD_MGR_ENTERED);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) {
        new (&SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) auto(other.SMSG_BATTLEFIELD_MGR_QUEUE_INVITE);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) {
        new (&SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) auto(other.SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) {
        new (&SMSG_BATTLEFIELD_MGR_EJECT_PENDING) auto(other.SMSG_BATTLEFIELD_MGR_EJECT_PENDING);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) {
        new (&SMSG_BATTLEFIELD_MGR_EJECTED) auto(other.SMSG_BATTLEFIELD_MGR_EJECTED);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) {
        new (&SMSG_BATTLEFIELD_MGR_STATE_CHANGE) auto(other.SMSG_BATTLEFIELD_MGR_STATE_CHANGE);
    }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        new (&MSG_SET_RAID_DIFFICULTY) auto(other.MSG_SET_RAID_DIFFICULTY);
    }
    if (opcode == Opcode::SMSG_TOGGLE_XP_GAIN) {
        new (&SMSG_TOGGLE_XP_GAIN) auto(other.SMSG_TOGGLE_XP_GAIN);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_DB_ERROR) {
        new (&SMSG_GMRESPONSE_DB_ERROR) auto(other.SMSG_GMRESPONSE_DB_ERROR);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_RECEIVED) {
        new (&SMSG_GMRESPONSE_RECEIVED) auto(other.SMSG_GMRESPONSE_RECEIVED);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) {
        new (&SMSG_GMRESPONSE_STATUS_UPDATE) auto(other.SMSG_GMRESPONSE_STATUS_UPDATE);
    }
    if (opcode == Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        new (&SMSG_WORLD_STATE_UI_TIMER_UPDATE) auto(other.SMSG_WORLD_STATE_UI_TIMER_UPDATE);
    }
    if (opcode == Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) {
        new (&SMSG_TALENTS_INVOLUNTARILY_RESET) auto(other.SMSG_TALENTS_INVOLUNTARILY_RESET);
    }
    if (opcode == Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) {
        new (&SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) auto(other.SMSG_QUERY_QUESTS_COMPLETED_RESPONSE);
    }
    if (opcode == Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) {
        new (&SMSG_CORPSE_NOT_IN_INSTANCE) auto(other.SMSG_CORPSE_NOT_IN_INSTANCE);
    }
    if (opcode == Opcode::SMSG_CAMERA_SHAKE) {
        new (&SMSG_CAMERA_SHAKE) auto(other.SMSG_CAMERA_SHAKE);
    }
    if (opcode == Opcode::SMSG_SOCKET_GEMS_RESULT) {
        new (&SMSG_SOCKET_GEMS_RESULT) auto(other.SMSG_SOCKET_GEMS_RESULT);
    }
    if (opcode == Opcode::SMSG_REDIRECT_CLIENT) {
        new (&SMSG_REDIRECT_CLIENT) auto(other.SMSG_REDIRECT_CLIENT);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_COLLISION_HGT) {
        new (&SMSG_MOVE_SET_COLLISION_HGT) auto(other.SMSG_MOVE_SET_COLLISION_HGT);
    }
    if (opcode == Opcode::SMSG_MULTIPLE_MOVES) {
        new (&SMSG_MULTIPLE_MOVES) auto(other.SMSG_MULTIPLE_MOVES);
    }
}

/* 3 copy assignment */
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode& ServerOpcode::operator=(const ServerOpcode& other) {
    if (this == &other) {
        return *this;
    }

    this->opcode = other.opcode;
    if (opcode == Opcode::SMSG_CHAR_CREATE) {
        wrath::SMSG_CHAR_CREATE SMSG_CHAR_CREATEswap(other.SMSG_CHAR_CREATE);
        std::swap(this->SMSG_CHAR_CREATE, SMSG_CHAR_CREATEswap);
    }
    if (opcode == Opcode::SMSG_CHAR_ENUM) {
        wrath::SMSG_CHAR_ENUM SMSG_CHAR_ENUMswap(other.SMSG_CHAR_ENUM);
        std::swap(this->SMSG_CHAR_ENUM, SMSG_CHAR_ENUMswap);
    }
    if (opcode == Opcode::SMSG_CHAR_DELETE) {
        wrath::SMSG_CHAR_DELETE SMSG_CHAR_DELETEswap(other.SMSG_CHAR_DELETE);
        std::swap(this->SMSG_CHAR_DELETE, SMSG_CHAR_DELETEswap);
    }
    if (opcode == Opcode::SMSG_NEW_WORLD) {
        wrath::SMSG_NEW_WORLD SMSG_NEW_WORLDswap(other.SMSG_NEW_WORLD);
        std::swap(this->SMSG_NEW_WORLD, SMSG_NEW_WORLDswap);
    }
    if (opcode == Opcode::SMSG_TRANSFER_PENDING) {
        wrath::SMSG_TRANSFER_PENDING SMSG_TRANSFER_PENDINGswap(other.SMSG_TRANSFER_PENDING);
        std::swap(this->SMSG_TRANSFER_PENDING, SMSG_TRANSFER_PENDINGswap);
    }
    if (opcode == Opcode::SMSG_TRANSFER_ABORTED) {
        wrath::SMSG_TRANSFER_ABORTED SMSG_TRANSFER_ABORTEDswap(other.SMSG_TRANSFER_ABORTED);
        std::swap(this->SMSG_TRANSFER_ABORTED, SMSG_TRANSFER_ABORTEDswap);
    }
    if (opcode == Opcode::SMSG_CHARACTER_LOGIN_FAILED) {
        wrath::SMSG_CHARACTER_LOGIN_FAILED SMSG_CHARACTER_LOGIN_FAILEDswap(other.SMSG_CHARACTER_LOGIN_FAILED);
        std::swap(this->SMSG_CHARACTER_LOGIN_FAILED, SMSG_CHARACTER_LOGIN_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_LOGIN_SETTIMESPEED) {
        wrath::SMSG_LOGIN_SETTIMESPEED SMSG_LOGIN_SETTIMESPEEDswap(other.SMSG_LOGIN_SETTIMESPEED);
        std::swap(this->SMSG_LOGIN_SETTIMESPEED, SMSG_LOGIN_SETTIMESPEEDswap);
    }
    if (opcode == Opcode::SMSG_LOGOUT_RESPONSE) {
        wrath::SMSG_LOGOUT_RESPONSE SMSG_LOGOUT_RESPONSEswap(other.SMSG_LOGOUT_RESPONSE);
        std::swap(this->SMSG_LOGOUT_RESPONSE, SMSG_LOGOUT_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_LOGOUT_COMPLETE) {
        wrath::SMSG_LOGOUT_COMPLETE SMSG_LOGOUT_COMPLETEswap(other.SMSG_LOGOUT_COMPLETE);
        std::swap(this->SMSG_LOGOUT_COMPLETE, SMSG_LOGOUT_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_LOGOUT_CANCEL_ACK) {
        wrath::SMSG_LOGOUT_CANCEL_ACK SMSG_LOGOUT_CANCEL_ACKswap(other.SMSG_LOGOUT_CANCEL_ACK);
        std::swap(this->SMSG_LOGOUT_CANCEL_ACK, SMSG_LOGOUT_CANCEL_ACKswap);
    }
    if (opcode == Opcode::SMSG_NAME_QUERY_RESPONSE) {
        wrath::SMSG_NAME_QUERY_RESPONSE SMSG_NAME_QUERY_RESPONSEswap(other.SMSG_NAME_QUERY_RESPONSE);
        std::swap(this->SMSG_NAME_QUERY_RESPONSE, SMSG_NAME_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_PET_NAME_QUERY_RESPONSE) {
        wrath::SMSG_PET_NAME_QUERY_RESPONSE SMSG_PET_NAME_QUERY_RESPONSEswap(other.SMSG_PET_NAME_QUERY_RESPONSE);
        std::swap(this->SMSG_PET_NAME_QUERY_RESPONSE, SMSG_PET_NAME_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_GUILD_QUERY_RESPONSE) {
        wrath::SMSG_GUILD_QUERY_RESPONSE SMSG_GUILD_QUERY_RESPONSEswap(other.SMSG_GUILD_QUERY_RESPONSE);
        std::swap(this->SMSG_GUILD_QUERY_RESPONSE, SMSG_GUILD_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) {
        wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE SMSG_ITEM_QUERY_SINGLE_RESPONSEswap(other.SMSG_ITEM_QUERY_SINGLE_RESPONSE);
        std::swap(this->SMSG_ITEM_QUERY_SINGLE_RESPONSE, SMSG_ITEM_QUERY_SINGLE_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) {
        wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE SMSG_PAGE_TEXT_QUERY_RESPONSEswap(other.SMSG_PAGE_TEXT_QUERY_RESPONSE);
        std::swap(this->SMSG_PAGE_TEXT_QUERY_RESPONSE, SMSG_PAGE_TEXT_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_QUEST_QUERY_RESPONSE) {
        wrath::SMSG_QUEST_QUERY_RESPONSE SMSG_QUEST_QUERY_RESPONSEswap(other.SMSG_QUEST_QUERY_RESPONSE);
        std::swap(this->SMSG_QUEST_QUERY_RESPONSE, SMSG_QUEST_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) {
        wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE SMSG_GAMEOBJECT_QUERY_RESPONSEswap(other.SMSG_GAMEOBJECT_QUERY_RESPONSE);
        std::swap(this->SMSG_GAMEOBJECT_QUERY_RESPONSE, SMSG_GAMEOBJECT_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_CREATURE_QUERY_RESPONSE) {
        wrath::SMSG_CREATURE_QUERY_RESPONSE SMSG_CREATURE_QUERY_RESPONSEswap(other.SMSG_CREATURE_QUERY_RESPONSE);
        std::swap(this->SMSG_CREATURE_QUERY_RESPONSE, SMSG_CREATURE_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_WHO) {
        wrath::SMSG_WHO SMSG_WHOswap(other.SMSG_WHO);
        std::swap(this->SMSG_WHO, SMSG_WHOswap);
    }
    if (opcode == Opcode::SMSG_WHOIS) {
        wrath::SMSG_WHOIS SMSG_WHOISswap(other.SMSG_WHOIS);
        std::swap(this->SMSG_WHOIS, SMSG_WHOISswap);
    }
    if (opcode == Opcode::SMSG_CONTACT_LIST) {
        wrath::SMSG_CONTACT_LIST SMSG_CONTACT_LISTswap(other.SMSG_CONTACT_LIST);
        std::swap(this->SMSG_CONTACT_LIST, SMSG_CONTACT_LISTswap);
    }
    if (opcode == Opcode::SMSG_FRIEND_STATUS) {
        wrath::SMSG_FRIEND_STATUS SMSG_FRIEND_STATUSswap(other.SMSG_FRIEND_STATUS);
        std::swap(this->SMSG_FRIEND_STATUS, SMSG_FRIEND_STATUSswap);
    }
    if (opcode == Opcode::SMSG_GROUP_INVITE) {
        wrath::SMSG_GROUP_INVITE SMSG_GROUP_INVITEswap(other.SMSG_GROUP_INVITE);
        std::swap(this->SMSG_GROUP_INVITE, SMSG_GROUP_INVITEswap);
    }
    if (opcode == Opcode::SMSG_GROUP_DECLINE) {
        wrath::SMSG_GROUP_DECLINE SMSG_GROUP_DECLINEswap(other.SMSG_GROUP_DECLINE);
        std::swap(this->SMSG_GROUP_DECLINE, SMSG_GROUP_DECLINEswap);
    }
    if (opcode == Opcode::SMSG_GROUP_UNINVITE) {
        wrath::SMSG_GROUP_UNINVITE SMSG_GROUP_UNINVITEswap(other.SMSG_GROUP_UNINVITE);
        std::swap(this->SMSG_GROUP_UNINVITE, SMSG_GROUP_UNINVITEswap);
    }
    if (opcode == Opcode::SMSG_GROUP_SET_LEADER) {
        wrath::SMSG_GROUP_SET_LEADER SMSG_GROUP_SET_LEADERswap(other.SMSG_GROUP_SET_LEADER);
        std::swap(this->SMSG_GROUP_SET_LEADER, SMSG_GROUP_SET_LEADERswap);
    }
    if (opcode == Opcode::SMSG_GROUP_DESTROYED) {
        wrath::SMSG_GROUP_DESTROYED SMSG_GROUP_DESTROYEDswap(other.SMSG_GROUP_DESTROYED);
        std::swap(this->SMSG_GROUP_DESTROYED, SMSG_GROUP_DESTROYEDswap);
    }
    if (opcode == Opcode::SMSG_GROUP_LIST) {
        wrath::SMSG_GROUP_LIST SMSG_GROUP_LISTswap(other.SMSG_GROUP_LIST);
        std::swap(this->SMSG_GROUP_LIST, SMSG_GROUP_LISTswap);
    }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS) {
        wrath::SMSG_PARTY_MEMBER_STATS SMSG_PARTY_MEMBER_STATSswap(other.SMSG_PARTY_MEMBER_STATS);
        std::swap(this->SMSG_PARTY_MEMBER_STATS, SMSG_PARTY_MEMBER_STATSswap);
    }
    if (opcode == Opcode::SMSG_PARTY_COMMAND_RESULT) {
        wrath::SMSG_PARTY_COMMAND_RESULT SMSG_PARTY_COMMAND_RESULTswap(other.SMSG_PARTY_COMMAND_RESULT);
        std::swap(this->SMSG_PARTY_COMMAND_RESULT, SMSG_PARTY_COMMAND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_GUILD_INVITE) {
        wrath::SMSG_GUILD_INVITE SMSG_GUILD_INVITEswap(other.SMSG_GUILD_INVITE);
        std::swap(this->SMSG_GUILD_INVITE, SMSG_GUILD_INVITEswap);
    }
    if (opcode == Opcode::SMSG_GUILD_DECLINE) {
        wrath::SMSG_GUILD_DECLINE SMSG_GUILD_DECLINEswap(other.SMSG_GUILD_DECLINE);
        std::swap(this->SMSG_GUILD_DECLINE, SMSG_GUILD_DECLINEswap);
    }
    if (opcode == Opcode::SMSG_GUILD_INFO) {
        wrath::SMSG_GUILD_INFO SMSG_GUILD_INFOswap(other.SMSG_GUILD_INFO);
        std::swap(this->SMSG_GUILD_INFO, SMSG_GUILD_INFOswap);
    }
    if (opcode == Opcode::SMSG_GUILD_ROSTER) {
        wrath::SMSG_GUILD_ROSTER SMSG_GUILD_ROSTERswap(other.SMSG_GUILD_ROSTER);
        std::swap(this->SMSG_GUILD_ROSTER, SMSG_GUILD_ROSTERswap);
    }
    if (opcode == Opcode::SMSG_GUILD_EVENT) {
        wrath::SMSG_GUILD_EVENT SMSG_GUILD_EVENTswap(other.SMSG_GUILD_EVENT);
        std::swap(this->SMSG_GUILD_EVENT, SMSG_GUILD_EVENTswap);
    }
    if (opcode == Opcode::SMSG_GUILD_COMMAND_RESULT) {
        wrath::SMSG_GUILD_COMMAND_RESULT SMSG_GUILD_COMMAND_RESULTswap(other.SMSG_GUILD_COMMAND_RESULT);
        std::swap(this->SMSG_GUILD_COMMAND_RESULT, SMSG_GUILD_COMMAND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_MESSAGECHAT) {
        wrath::SMSG_MESSAGECHAT SMSG_MESSAGECHATswap(other.SMSG_MESSAGECHAT);
        std::swap(this->SMSG_MESSAGECHAT, SMSG_MESSAGECHATswap);
    }
    if (opcode == Opcode::SMSG_CHANNEL_NOTIFY) {
        wrath::SMSG_CHANNEL_NOTIFY SMSG_CHANNEL_NOTIFYswap(other.SMSG_CHANNEL_NOTIFY);
        std::swap(this->SMSG_CHANNEL_NOTIFY, SMSG_CHANNEL_NOTIFYswap);
    }
    if (opcode == Opcode::SMSG_CHANNEL_LIST) {
        wrath::SMSG_CHANNEL_LIST SMSG_CHANNEL_LISTswap(other.SMSG_CHANNEL_LIST);
        std::swap(this->SMSG_CHANNEL_LIST, SMSG_CHANNEL_LISTswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_OBJECT) {
        wrath::SMSG_UPDATE_OBJECT SMSG_UPDATE_OBJECTswap(other.SMSG_UPDATE_OBJECT);
        std::swap(this->SMSG_UPDATE_OBJECT, SMSG_UPDATE_OBJECTswap);
    }
    if (opcode == Opcode::SMSG_DESTROY_OBJECT) {
        wrath::SMSG_DESTROY_OBJECT SMSG_DESTROY_OBJECTswap(other.SMSG_DESTROY_OBJECT);
        std::swap(this->SMSG_DESTROY_OBJECT, SMSG_DESTROY_OBJECTswap);
    }
    if (opcode == Opcode::SMSG_READ_ITEM_OK) {
        wrath::SMSG_READ_ITEM_OK SMSG_READ_ITEM_OKswap(other.SMSG_READ_ITEM_OK);
        std::swap(this->SMSG_READ_ITEM_OK, SMSG_READ_ITEM_OKswap);
    }
    if (opcode == Opcode::SMSG_READ_ITEM_FAILED) {
        wrath::SMSG_READ_ITEM_FAILED SMSG_READ_ITEM_FAILEDswap(other.SMSG_READ_ITEM_FAILED);
        std::swap(this->SMSG_READ_ITEM_FAILED, SMSG_READ_ITEM_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_ITEM_COOLDOWN) {
        wrath::SMSG_ITEM_COOLDOWN SMSG_ITEM_COOLDOWNswap(other.SMSG_ITEM_COOLDOWN);
        std::swap(this->SMSG_ITEM_COOLDOWN, SMSG_ITEM_COOLDOWNswap);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) {
        wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM SMSG_GAMEOBJECT_CUSTOM_ANIMswap(other.SMSG_GAMEOBJECT_CUSTOM_ANIM);
        std::swap(this->SMSG_GAMEOBJECT_CUSTOM_ANIM, SMSG_GAMEOBJECT_CUSTOM_ANIMswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        wrath::MSG_MOVE_START_FORWARD MSG_MOVE_START_FORWARDswap(other.MSG_MOVE_START_FORWARD);
        std::swap(this->MSG_MOVE_START_FORWARD, MSG_MOVE_START_FORWARDswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        wrath::MSG_MOVE_START_BACKWARD MSG_MOVE_START_BACKWARDswap(other.MSG_MOVE_START_BACKWARD);
        std::swap(this->MSG_MOVE_START_BACKWARD, MSG_MOVE_START_BACKWARDswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP) {
        wrath::MSG_MOVE_STOP MSG_MOVE_STOPswap(other.MSG_MOVE_STOP);
        std::swap(this->MSG_MOVE_STOP, MSG_MOVE_STOPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        wrath::MSG_MOVE_START_STRAFE_LEFT MSG_MOVE_START_STRAFE_LEFTswap(other.MSG_MOVE_START_STRAFE_LEFT);
        std::swap(this->MSG_MOVE_START_STRAFE_LEFT, MSG_MOVE_START_STRAFE_LEFTswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        wrath::MSG_MOVE_START_STRAFE_RIGHT MSG_MOVE_START_STRAFE_RIGHTswap(other.MSG_MOVE_START_STRAFE_RIGHT);
        std::swap(this->MSG_MOVE_START_STRAFE_RIGHT, MSG_MOVE_START_STRAFE_RIGHTswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        wrath::MSG_MOVE_STOP_STRAFE MSG_MOVE_STOP_STRAFEswap(other.MSG_MOVE_STOP_STRAFE);
        std::swap(this->MSG_MOVE_STOP_STRAFE, MSG_MOVE_STOP_STRAFEswap);
    }
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        wrath::MSG_MOVE_JUMP MSG_MOVE_JUMPswap(other.MSG_MOVE_JUMP);
        std::swap(this->MSG_MOVE_JUMP, MSG_MOVE_JUMPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        wrath::MSG_MOVE_START_TURN_LEFT MSG_MOVE_START_TURN_LEFTswap(other.MSG_MOVE_START_TURN_LEFT);
        std::swap(this->MSG_MOVE_START_TURN_LEFT, MSG_MOVE_START_TURN_LEFTswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        wrath::MSG_MOVE_START_TURN_RIGHT MSG_MOVE_START_TURN_RIGHTswap(other.MSG_MOVE_START_TURN_RIGHT);
        std::swap(this->MSG_MOVE_START_TURN_RIGHT, MSG_MOVE_START_TURN_RIGHTswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        wrath::MSG_MOVE_STOP_TURN MSG_MOVE_STOP_TURNswap(other.MSG_MOVE_STOP_TURN);
        std::swap(this->MSG_MOVE_STOP_TURN, MSG_MOVE_STOP_TURNswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        wrath::MSG_MOVE_START_PITCH_UP MSG_MOVE_START_PITCH_UPswap(other.MSG_MOVE_START_PITCH_UP);
        std::swap(this->MSG_MOVE_START_PITCH_UP, MSG_MOVE_START_PITCH_UPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        wrath::MSG_MOVE_START_PITCH_DOWN MSG_MOVE_START_PITCH_DOWNswap(other.MSG_MOVE_START_PITCH_DOWN);
        std::swap(this->MSG_MOVE_START_PITCH_DOWN, MSG_MOVE_START_PITCH_DOWNswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        wrath::MSG_MOVE_STOP_PITCH MSG_MOVE_STOP_PITCHswap(other.MSG_MOVE_STOP_PITCH);
        std::swap(this->MSG_MOVE_STOP_PITCH, MSG_MOVE_STOP_PITCHswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        wrath::MSG_MOVE_SET_RUN_MODE MSG_MOVE_SET_RUN_MODEswap(other.MSG_MOVE_SET_RUN_MODE);
        std::swap(this->MSG_MOVE_SET_RUN_MODE, MSG_MOVE_SET_RUN_MODEswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        wrath::MSG_MOVE_SET_WALK_MODE MSG_MOVE_SET_WALK_MODEswap(other.MSG_MOVE_SET_WALK_MODE);
        std::swap(this->MSG_MOVE_SET_WALK_MODE, MSG_MOVE_SET_WALK_MODEswap);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_CHEAT) {
        wrath::MSG_MOVE_TELEPORT_CHEAT_Server MSG_MOVE_TELEPORT_CHEATswap(other.MSG_MOVE_TELEPORT_CHEAT);
        std::swap(this->MSG_MOVE_TELEPORT_CHEAT, MSG_MOVE_TELEPORT_CHEATswap);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        wrath::MSG_MOVE_TELEPORT_ACK_Server MSG_MOVE_TELEPORT_ACKswap(other.MSG_MOVE_TELEPORT_ACK);
        std::swap(this->MSG_MOVE_TELEPORT_ACK, MSG_MOVE_TELEPORT_ACKswap);
    }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        wrath::MSG_MOVE_FALL_LAND MSG_MOVE_FALL_LANDswap(other.MSG_MOVE_FALL_LAND);
        std::swap(this->MSG_MOVE_FALL_LAND, MSG_MOVE_FALL_LANDswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        wrath::MSG_MOVE_START_SWIM MSG_MOVE_START_SWIMswap(other.MSG_MOVE_START_SWIM);
        std::swap(this->MSG_MOVE_START_SWIM, MSG_MOVE_START_SWIMswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        wrath::MSG_MOVE_STOP_SWIM MSG_MOVE_STOP_SWIMswap(other.MSG_MOVE_STOP_SWIM);
        std::swap(this->MSG_MOVE_STOP_SWIM, MSG_MOVE_STOP_SWIMswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        wrath::MSG_MOVE_SET_FACING MSG_MOVE_SET_FACINGswap(other.MSG_MOVE_SET_FACING);
        std::swap(this->MSG_MOVE_SET_FACING, MSG_MOVE_SET_FACINGswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        wrath::MSG_MOVE_SET_PITCH MSG_MOVE_SET_PITCHswap(other.MSG_MOVE_SET_PITCH);
        std::swap(this->MSG_MOVE_SET_PITCH, MSG_MOVE_SET_PITCHswap);
    }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        wrath::MSG_MOVE_WORLDPORT_ACK MSG_MOVE_WORLDPORT_ACKswap(other.MSG_MOVE_WORLDPORT_ACK);
        std::swap(this->MSG_MOVE_WORLDPORT_ACK, MSG_MOVE_WORLDPORT_ACKswap);
    }
    if (opcode == Opcode::SMSG_MONSTER_MOVE) {
        wrath::SMSG_MONSTER_MOVE SMSG_MONSTER_MOVEswap(other.SMSG_MONSTER_MOVE);
        std::swap(this->SMSG_MONSTER_MOVE, SMSG_MONSTER_MOVEswap);
    }
    if (opcode == Opcode::SMSG_MOVE_WATER_WALK) {
        wrath::SMSG_MOVE_WATER_WALK SMSG_MOVE_WATER_WALKswap(other.SMSG_MOVE_WATER_WALK);
        std::swap(this->SMSG_MOVE_WATER_WALK, SMSG_MOVE_WATER_WALKswap);
    }
    if (opcode == Opcode::SMSG_MOVE_LAND_WALK) {
        wrath::SMSG_MOVE_LAND_WALK SMSG_MOVE_LAND_WALKswap(other.SMSG_MOVE_LAND_WALK);
        std::swap(this->SMSG_MOVE_LAND_WALK, SMSG_MOVE_LAND_WALKswap);
    }
    if (opcode == Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) {
        wrath::SMSG_FORCE_RUN_SPEED_CHANGE SMSG_FORCE_RUN_SPEED_CHANGEswap(other.SMSG_FORCE_RUN_SPEED_CHANGE);
        std::swap(this->SMSG_FORCE_RUN_SPEED_CHANGE, SMSG_FORCE_RUN_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) {
        wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE SMSG_FORCE_RUN_BACK_SPEED_CHANGEswap(other.SMSG_FORCE_RUN_BACK_SPEED_CHANGE);
        std::swap(this->SMSG_FORCE_RUN_BACK_SPEED_CHANGE, SMSG_FORCE_RUN_BACK_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) {
        wrath::SMSG_FORCE_SWIM_SPEED_CHANGE SMSG_FORCE_SWIM_SPEED_CHANGEswap(other.SMSG_FORCE_SWIM_SPEED_CHANGE);
        std::swap(this->SMSG_FORCE_SWIM_SPEED_CHANGE, SMSG_FORCE_SWIM_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_MOVE_ROOT) {
        wrath::SMSG_FORCE_MOVE_ROOT SMSG_FORCE_MOVE_ROOTswap(other.SMSG_FORCE_MOVE_ROOT);
        std::swap(this->SMSG_FORCE_MOVE_ROOT, SMSG_FORCE_MOVE_ROOTswap);
    }
    if (opcode == Opcode::SMSG_FORCE_MOVE_UNROOT) {
        wrath::SMSG_FORCE_MOVE_UNROOT SMSG_FORCE_MOVE_UNROOTswap(other.SMSG_FORCE_MOVE_UNROOT);
        std::swap(this->SMSG_FORCE_MOVE_UNROOT, SMSG_FORCE_MOVE_UNROOTswap);
    }
    if (opcode == Opcode::MSG_MOVE_ROOT) {
        wrath::MSG_MOVE_ROOT_Server MSG_MOVE_ROOTswap(other.MSG_MOVE_ROOT);
        std::swap(this->MSG_MOVE_ROOT, MSG_MOVE_ROOTswap);
    }
    if (opcode == Opcode::MSG_MOVE_UNROOT) {
        wrath::MSG_MOVE_UNROOT_Server MSG_MOVE_UNROOTswap(other.MSG_MOVE_UNROOT);
        std::swap(this->MSG_MOVE_UNROOT, MSG_MOVE_UNROOTswap);
    }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        wrath::MSG_MOVE_HEARTBEAT MSG_MOVE_HEARTBEATswap(other.MSG_MOVE_HEARTBEAT);
        std::swap(this->MSG_MOVE_HEARTBEAT, MSG_MOVE_HEARTBEATswap);
    }
    if (opcode == Opcode::SMSG_MOVE_KNOCK_BACK) {
        wrath::SMSG_MOVE_KNOCK_BACK SMSG_MOVE_KNOCK_BACKswap(other.SMSG_MOVE_KNOCK_BACK);
        std::swap(this->SMSG_MOVE_KNOCK_BACK, SMSG_MOVE_KNOCK_BACKswap);
    }
    if (opcode == Opcode::MSG_MOVE_KNOCK_BACK) {
        wrath::MSG_MOVE_KNOCK_BACK_Server MSG_MOVE_KNOCK_BACKswap(other.MSG_MOVE_KNOCK_BACK);
        std::swap(this->MSG_MOVE_KNOCK_BACK, MSG_MOVE_KNOCK_BACKswap);
    }
    if (opcode == Opcode::SMSG_MOVE_FEATHER_FALL) {
        wrath::SMSG_MOVE_FEATHER_FALL SMSG_MOVE_FEATHER_FALLswap(other.SMSG_MOVE_FEATHER_FALL);
        std::swap(this->SMSG_MOVE_FEATHER_FALL, SMSG_MOVE_FEATHER_FALLswap);
    }
    if (opcode == Opcode::SMSG_MOVE_NORMAL_FALL) {
        wrath::SMSG_MOVE_NORMAL_FALL SMSG_MOVE_NORMAL_FALLswap(other.SMSG_MOVE_NORMAL_FALL);
        std::swap(this->SMSG_MOVE_NORMAL_FALL, SMSG_MOVE_NORMAL_FALLswap);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_HOVER) {
        wrath::SMSG_MOVE_SET_HOVER SMSG_MOVE_SET_HOVERswap(other.SMSG_MOVE_SET_HOVER);
        std::swap(this->SMSG_MOVE_SET_HOVER, SMSG_MOVE_SET_HOVERswap);
    }
    if (opcode == Opcode::SMSG_MOVE_UNSET_HOVER) {
        wrath::SMSG_MOVE_UNSET_HOVER SMSG_MOVE_UNSET_HOVERswap(other.SMSG_MOVE_UNSET_HOVER);
        std::swap(this->SMSG_MOVE_UNSET_HOVER, SMSG_MOVE_UNSET_HOVERswap);
    }
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        wrath::MSG_MOVE_HOVER MSG_MOVE_HOVERswap(other.MSG_MOVE_HOVER);
        std::swap(this->MSG_MOVE_HOVER, MSG_MOVE_HOVERswap);
    }
    if (opcode == Opcode::SMSG_TRIGGER_CINEMATIC) {
        wrath::SMSG_TRIGGER_CINEMATIC SMSG_TRIGGER_CINEMATICswap(other.SMSG_TRIGGER_CINEMATIC);
        std::swap(this->SMSG_TRIGGER_CINEMATIC, SMSG_TRIGGER_CINEMATICswap);
    }
    if (opcode == Opcode::SMSG_TUTORIAL_FLAGS) {
        wrath::SMSG_TUTORIAL_FLAGS SMSG_TUTORIAL_FLAGSswap(other.SMSG_TUTORIAL_FLAGS);
        std::swap(this->SMSG_TUTORIAL_FLAGS, SMSG_TUTORIAL_FLAGSswap);
    }
    if (opcode == Opcode::SMSG_EMOTE) {
        wrath::SMSG_EMOTE SMSG_EMOTEswap(other.SMSG_EMOTE);
        std::swap(this->SMSG_EMOTE, SMSG_EMOTEswap);
    }
    if (opcode == Opcode::SMSG_TEXT_EMOTE) {
        wrath::SMSG_TEXT_EMOTE SMSG_TEXT_EMOTEswap(other.SMSG_TEXT_EMOTE);
        std::swap(this->SMSG_TEXT_EMOTE, SMSG_TEXT_EMOTEswap);
    }
    if (opcode == Opcode::SMSG_INVENTORY_CHANGE_FAILURE) {
        wrath::SMSG_INVENTORY_CHANGE_FAILURE SMSG_INVENTORY_CHANGE_FAILUREswap(other.SMSG_INVENTORY_CHANGE_FAILURE);
        std::swap(this->SMSG_INVENTORY_CHANGE_FAILURE, SMSG_INVENTORY_CHANGE_FAILUREswap);
    }
    if (opcode == Opcode::SMSG_TRADE_STATUS) {
        wrath::SMSG_TRADE_STATUS SMSG_TRADE_STATUSswap(other.SMSG_TRADE_STATUS);
        std::swap(this->SMSG_TRADE_STATUS, SMSG_TRADE_STATUSswap);
    }
    if (opcode == Opcode::SMSG_TRADE_STATUS_EXTENDED) {
        wrath::SMSG_TRADE_STATUS_EXTENDED SMSG_TRADE_STATUS_EXTENDEDswap(other.SMSG_TRADE_STATUS_EXTENDED);
        std::swap(this->SMSG_TRADE_STATUS_EXTENDED, SMSG_TRADE_STATUS_EXTENDEDswap);
    }
    if (opcode == Opcode::SMSG_INITIALIZE_FACTIONS) {
        wrath::SMSG_INITIALIZE_FACTIONS SMSG_INITIALIZE_FACTIONSswap(other.SMSG_INITIALIZE_FACTIONS);
        std::swap(this->SMSG_INITIALIZE_FACTIONS, SMSG_INITIALIZE_FACTIONSswap);
    }
    if (opcode == Opcode::SMSG_SET_FACTION_VISIBLE) {
        wrath::SMSG_SET_FACTION_VISIBLE SMSG_SET_FACTION_VISIBLEswap(other.SMSG_SET_FACTION_VISIBLE);
        std::swap(this->SMSG_SET_FACTION_VISIBLE, SMSG_SET_FACTION_VISIBLEswap);
    }
    if (opcode == Opcode::SMSG_SET_FACTION_STANDING) {
        wrath::SMSG_SET_FACTION_STANDING SMSG_SET_FACTION_STANDINGswap(other.SMSG_SET_FACTION_STANDING);
        std::swap(this->SMSG_SET_FACTION_STANDING, SMSG_SET_FACTION_STANDINGswap);
    }
    if (opcode == Opcode::SMSG_SET_PROFICIENCY) {
        wrath::SMSG_SET_PROFICIENCY SMSG_SET_PROFICIENCYswap(other.SMSG_SET_PROFICIENCY);
        std::swap(this->SMSG_SET_PROFICIENCY, SMSG_SET_PROFICIENCYswap);
    }
    if (opcode == Opcode::SMSG_ACTION_BUTTONS) {
        wrath::SMSG_ACTION_BUTTONS SMSG_ACTION_BUTTONSswap(other.SMSG_ACTION_BUTTONS);
        std::swap(this->SMSG_ACTION_BUTTONS, SMSG_ACTION_BUTTONSswap);
    }
    if (opcode == Opcode::SMSG_INITIAL_SPELLS) {
        wrath::SMSG_INITIAL_SPELLS SMSG_INITIAL_SPELLSswap(other.SMSG_INITIAL_SPELLS);
        std::swap(this->SMSG_INITIAL_SPELLS, SMSG_INITIAL_SPELLSswap);
    }
    if (opcode == Opcode::SMSG_LEARNED_SPELL) {
        wrath::SMSG_LEARNED_SPELL SMSG_LEARNED_SPELLswap(other.SMSG_LEARNED_SPELL);
        std::swap(this->SMSG_LEARNED_SPELL, SMSG_LEARNED_SPELLswap);
    }
    if (opcode == Opcode::SMSG_SUPERCEDED_SPELL) {
        wrath::SMSG_SUPERCEDED_SPELL SMSG_SUPERCEDED_SPELLswap(other.SMSG_SUPERCEDED_SPELL);
        std::swap(this->SMSG_SUPERCEDED_SPELL, SMSG_SUPERCEDED_SPELLswap);
    }
    if (opcode == Opcode::SMSG_CAST_FAILED) {
        wrath::SMSG_CAST_FAILED SMSG_CAST_FAILEDswap(other.SMSG_CAST_FAILED);
        std::swap(this->SMSG_CAST_FAILED, SMSG_CAST_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_SPELL_START) {
        wrath::SMSG_SPELL_START SMSG_SPELL_STARTswap(other.SMSG_SPELL_START);
        std::swap(this->SMSG_SPELL_START, SMSG_SPELL_STARTswap);
    }
    if (opcode == Opcode::SMSG_SPELL_GO) {
        wrath::SMSG_SPELL_GO SMSG_SPELL_GOswap(other.SMSG_SPELL_GO);
        std::swap(this->SMSG_SPELL_GO, SMSG_SPELL_GOswap);
    }
    if (opcode == Opcode::SMSG_SPELL_FAILURE) {
        wrath::SMSG_SPELL_FAILURE SMSG_SPELL_FAILUREswap(other.SMSG_SPELL_FAILURE);
        std::swap(this->SMSG_SPELL_FAILURE, SMSG_SPELL_FAILUREswap);
    }
    if (opcode == Opcode::SMSG_SPELL_COOLDOWN) {
        wrath::SMSG_SPELL_COOLDOWN SMSG_SPELL_COOLDOWNswap(other.SMSG_SPELL_COOLDOWN);
        std::swap(this->SMSG_SPELL_COOLDOWN, SMSG_SPELL_COOLDOWNswap);
    }
    if (opcode == Opcode::SMSG_COOLDOWN_EVENT) {
        wrath::SMSG_COOLDOWN_EVENT SMSG_COOLDOWN_EVENTswap(other.SMSG_COOLDOWN_EVENT);
        std::swap(this->SMSG_COOLDOWN_EVENT, SMSG_COOLDOWN_EVENTswap);
    }
    if (opcode == Opcode::SMSG_PET_CAST_FAILED) {
        wrath::SMSG_PET_CAST_FAILED SMSG_PET_CAST_FAILEDswap(other.SMSG_PET_CAST_FAILED);
        std::swap(this->SMSG_PET_CAST_FAILED, SMSG_PET_CAST_FAILEDswap);
    }
    if (opcode == Opcode::MSG_CHANNEL_START) {
        wrath::MSG_CHANNEL_START_Server MSG_CHANNEL_STARTswap(other.MSG_CHANNEL_START);
        std::swap(this->MSG_CHANNEL_START, MSG_CHANNEL_STARTswap);
    }
    if (opcode == Opcode::MSG_CHANNEL_UPDATE) {
        wrath::MSG_CHANNEL_UPDATE_Server MSG_CHANNEL_UPDATEswap(other.MSG_CHANNEL_UPDATE);
        std::swap(this->MSG_CHANNEL_UPDATE, MSG_CHANNEL_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_AI_REACTION) {
        wrath::SMSG_AI_REACTION SMSG_AI_REACTIONswap(other.SMSG_AI_REACTION);
        std::swap(this->SMSG_AI_REACTION, SMSG_AI_REACTIONswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSTART) {
        wrath::SMSG_ATTACKSTART SMSG_ATTACKSTARTswap(other.SMSG_ATTACKSTART);
        std::swap(this->SMSG_ATTACKSTART, SMSG_ATTACKSTARTswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSTOP) {
        wrath::SMSG_ATTACKSTOP SMSG_ATTACKSTOPswap(other.SMSG_ATTACKSTOP);
        std::swap(this->SMSG_ATTACKSTOP, SMSG_ATTACKSTOPswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_NOTINRANGE) {
        wrath::SMSG_ATTACKSWING_NOTINRANGE SMSG_ATTACKSWING_NOTINRANGEswap(other.SMSG_ATTACKSWING_NOTINRANGE);
        std::swap(this->SMSG_ATTACKSWING_NOTINRANGE, SMSG_ATTACKSWING_NOTINRANGEswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_BADFACING) {
        wrath::SMSG_ATTACKSWING_BADFACING SMSG_ATTACKSWING_BADFACINGswap(other.SMSG_ATTACKSWING_BADFACING);
        std::swap(this->SMSG_ATTACKSWING_BADFACING, SMSG_ATTACKSWING_BADFACINGswap);
    }
    if (opcode == Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) {
        wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY SMSG_INSTANCE_LOCK_WARNING_QUERYswap(other.SMSG_INSTANCE_LOCK_WARNING_QUERY);
        std::swap(this->SMSG_INSTANCE_LOCK_WARNING_QUERY, SMSG_INSTANCE_LOCK_WARNING_QUERYswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_DEADTARGET) {
        wrath::SMSG_ATTACKSWING_DEADTARGET SMSG_ATTACKSWING_DEADTARGETswap(other.SMSG_ATTACKSWING_DEADTARGET);
        std::swap(this->SMSG_ATTACKSWING_DEADTARGET, SMSG_ATTACKSWING_DEADTARGETswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_CANT_ATTACK) {
        wrath::SMSG_ATTACKSWING_CANT_ATTACK SMSG_ATTACKSWING_CANT_ATTACKswap(other.SMSG_ATTACKSWING_CANT_ATTACK);
        std::swap(this->SMSG_ATTACKSWING_CANT_ATTACK, SMSG_ATTACKSWING_CANT_ATTACKswap);
    }
    if (opcode == Opcode::SMSG_ATTACKERSTATEUPDATE) {
        wrath::SMSG_ATTACKERSTATEUPDATE SMSG_ATTACKERSTATEUPDATEswap(other.SMSG_ATTACKERSTATEUPDATE);
        std::swap(this->SMSG_ATTACKERSTATEUPDATE, SMSG_ATTACKERSTATEUPDATEswap);
    }
    if (opcode == Opcode::SMSG_CANCEL_COMBAT) {
        wrath::SMSG_CANCEL_COMBAT SMSG_CANCEL_COMBATswap(other.SMSG_CANCEL_COMBAT);
        std::swap(this->SMSG_CANCEL_COMBAT, SMSG_CANCEL_COMBATswap);
    }
    if (opcode == Opcode::SMSG_SPELLHEALLOG) {
        wrath::SMSG_SPELLHEALLOG SMSG_SPELLHEALLOGswap(other.SMSG_SPELLHEALLOG);
        std::swap(this->SMSG_SPELLHEALLOG, SMSG_SPELLHEALLOGswap);
    }
    if (opcode == Opcode::SMSG_SPELLENERGIZELOG) {
        wrath::SMSG_SPELLENERGIZELOG SMSG_SPELLENERGIZELOGswap(other.SMSG_SPELLENERGIZELOG);
        std::swap(this->SMSG_SPELLENERGIZELOG, SMSG_SPELLENERGIZELOGswap);
    }
    if (opcode == Opcode::SMSG_BREAK_TARGET) {
        wrath::SMSG_BREAK_TARGET SMSG_BREAK_TARGETswap(other.SMSG_BREAK_TARGET);
        std::swap(this->SMSG_BREAK_TARGET, SMSG_BREAK_TARGETswap);
    }
    if (opcode == Opcode::SMSG_BINDPOINTUPDATE) {
        wrath::SMSG_BINDPOINTUPDATE SMSG_BINDPOINTUPDATEswap(other.SMSG_BINDPOINTUPDATE);
        std::swap(this->SMSG_BINDPOINTUPDATE, SMSG_BINDPOINTUPDATEswap);
    }
    if (opcode == Opcode::SMSG_PLAYERBOUND) {
        wrath::SMSG_PLAYERBOUND SMSG_PLAYERBOUNDswap(other.SMSG_PLAYERBOUND);
        std::swap(this->SMSG_PLAYERBOUND, SMSG_PLAYERBOUNDswap);
    }
    if (opcode == Opcode::SMSG_CLIENT_CONTROL_UPDATE) {
        wrath::SMSG_CLIENT_CONTROL_UPDATE SMSG_CLIENT_CONTROL_UPDATEswap(other.SMSG_CLIENT_CONTROL_UPDATE);
        std::swap(this->SMSG_CLIENT_CONTROL_UPDATE, SMSG_CLIENT_CONTROL_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_RESURRECT_REQUEST) {
        wrath::SMSG_RESURRECT_REQUEST SMSG_RESURRECT_REQUESTswap(other.SMSG_RESURRECT_REQUEST);
        std::swap(this->SMSG_RESURRECT_REQUEST, SMSG_RESURRECT_REQUESTswap);
    }
    if (opcode == Opcode::SMSG_LOOT_RESPONSE) {
        wrath::SMSG_LOOT_RESPONSE SMSG_LOOT_RESPONSEswap(other.SMSG_LOOT_RESPONSE);
        std::swap(this->SMSG_LOOT_RESPONSE, SMSG_LOOT_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_LOOT_RELEASE_RESPONSE) {
        wrath::SMSG_LOOT_RELEASE_RESPONSE SMSG_LOOT_RELEASE_RESPONSEswap(other.SMSG_LOOT_RELEASE_RESPONSE);
        std::swap(this->SMSG_LOOT_RELEASE_RESPONSE, SMSG_LOOT_RELEASE_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_LOOT_REMOVED) {
        wrath::SMSG_LOOT_REMOVED SMSG_LOOT_REMOVEDswap(other.SMSG_LOOT_REMOVED);
        std::swap(this->SMSG_LOOT_REMOVED, SMSG_LOOT_REMOVEDswap);
    }
    if (opcode == Opcode::SMSG_LOOT_MONEY_NOTIFY) {
        wrath::SMSG_LOOT_MONEY_NOTIFY SMSG_LOOT_MONEY_NOTIFYswap(other.SMSG_LOOT_MONEY_NOTIFY);
        std::swap(this->SMSG_LOOT_MONEY_NOTIFY, SMSG_LOOT_MONEY_NOTIFYswap);
    }
    if (opcode == Opcode::SMSG_LOOT_CLEAR_MONEY) {
        wrath::SMSG_LOOT_CLEAR_MONEY SMSG_LOOT_CLEAR_MONEYswap(other.SMSG_LOOT_CLEAR_MONEY);
        std::swap(this->SMSG_LOOT_CLEAR_MONEY, SMSG_LOOT_CLEAR_MONEYswap);
    }
    if (opcode == Opcode::SMSG_ITEM_PUSH_RESULT) {
        wrath::SMSG_ITEM_PUSH_RESULT SMSG_ITEM_PUSH_RESULTswap(other.SMSG_ITEM_PUSH_RESULT);
        std::swap(this->SMSG_ITEM_PUSH_RESULT, SMSG_ITEM_PUSH_RESULTswap);
    }
    if (opcode == Opcode::SMSG_DUEL_REQUESTED) {
        wrath::SMSG_DUEL_REQUESTED SMSG_DUEL_REQUESTEDswap(other.SMSG_DUEL_REQUESTED);
        std::swap(this->SMSG_DUEL_REQUESTED, SMSG_DUEL_REQUESTEDswap);
    }
    if (opcode == Opcode::SMSG_DUEL_OUTOFBOUNDS) {
        wrath::SMSG_DUEL_OUTOFBOUNDS SMSG_DUEL_OUTOFBOUNDSswap(other.SMSG_DUEL_OUTOFBOUNDS);
        std::swap(this->SMSG_DUEL_OUTOFBOUNDS, SMSG_DUEL_OUTOFBOUNDSswap);
    }
    if (opcode == Opcode::SMSG_DUEL_INBOUNDS) {
        wrath::SMSG_DUEL_INBOUNDS SMSG_DUEL_INBOUNDSswap(other.SMSG_DUEL_INBOUNDS);
        std::swap(this->SMSG_DUEL_INBOUNDS, SMSG_DUEL_INBOUNDSswap);
    }
    if (opcode == Opcode::SMSG_DUEL_COMPLETE) {
        wrath::SMSG_DUEL_COMPLETE SMSG_DUEL_COMPLETEswap(other.SMSG_DUEL_COMPLETE);
        std::swap(this->SMSG_DUEL_COMPLETE, SMSG_DUEL_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_DUEL_WINNER) {
        wrath::SMSG_DUEL_WINNER SMSG_DUEL_WINNERswap(other.SMSG_DUEL_WINNER);
        std::swap(this->SMSG_DUEL_WINNER, SMSG_DUEL_WINNERswap);
    }
    if (opcode == Opcode::SMSG_MOUNTRESULT) {
        wrath::SMSG_MOUNTRESULT SMSG_MOUNTRESULTswap(other.SMSG_MOUNTRESULT);
        std::swap(this->SMSG_MOUNTRESULT, SMSG_MOUNTRESULTswap);
    }
    if (opcode == Opcode::SMSG_MOUNTSPECIAL_ANIM) {
        wrath::SMSG_MOUNTSPECIAL_ANIM SMSG_MOUNTSPECIAL_ANIMswap(other.SMSG_MOUNTSPECIAL_ANIM);
        std::swap(this->SMSG_MOUNTSPECIAL_ANIM, SMSG_MOUNTSPECIAL_ANIMswap);
    }
    if (opcode == Opcode::SMSG_PET_TAME_FAILURE) {
        wrath::SMSG_PET_TAME_FAILURE SMSG_PET_TAME_FAILUREswap(other.SMSG_PET_TAME_FAILURE);
        std::swap(this->SMSG_PET_TAME_FAILURE, SMSG_PET_TAME_FAILUREswap);
    }
    if (opcode == Opcode::SMSG_PET_NAME_INVALID) {
        wrath::SMSG_PET_NAME_INVALID SMSG_PET_NAME_INVALIDswap(other.SMSG_PET_NAME_INVALID);
        std::swap(this->SMSG_PET_NAME_INVALID, SMSG_PET_NAME_INVALIDswap);
    }
    if (opcode == Opcode::SMSG_PET_SPELLS) {
        wrath::SMSG_PET_SPELLS SMSG_PET_SPELLSswap(other.SMSG_PET_SPELLS);
        std::swap(this->SMSG_PET_SPELLS, SMSG_PET_SPELLSswap);
    }
    if (opcode == Opcode::SMSG_PET_MODE) {
        wrath::SMSG_PET_MODE SMSG_PET_MODEswap(other.SMSG_PET_MODE);
        std::swap(this->SMSG_PET_MODE, SMSG_PET_MODEswap);
    }
    if (opcode == Opcode::SMSG_GOSSIP_MESSAGE) {
        wrath::SMSG_GOSSIP_MESSAGE SMSG_GOSSIP_MESSAGEswap(other.SMSG_GOSSIP_MESSAGE);
        std::swap(this->SMSG_GOSSIP_MESSAGE, SMSG_GOSSIP_MESSAGEswap);
    }
    if (opcode == Opcode::SMSG_GOSSIP_COMPLETE) {
        wrath::SMSG_GOSSIP_COMPLETE SMSG_GOSSIP_COMPLETEswap(other.SMSG_GOSSIP_COMPLETE);
        std::swap(this->SMSG_GOSSIP_COMPLETE, SMSG_GOSSIP_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_NPC_TEXT_UPDATE) {
        wrath::SMSG_NPC_TEXT_UPDATE SMSG_NPC_TEXT_UPDATEswap(other.SMSG_NPC_TEXT_UPDATE);
        std::swap(this->SMSG_NPC_TEXT_UPDATE, SMSG_NPC_TEXT_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS) {
        wrath::SMSG_QUESTGIVER_STATUS SMSG_QUESTGIVER_STATUSswap(other.SMSG_QUESTGIVER_STATUS);
        std::swap(this->SMSG_QUESTGIVER_STATUS, SMSG_QUESTGIVER_STATUSswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_LIST) {
        wrath::SMSG_QUESTGIVER_QUEST_LIST SMSG_QUESTGIVER_QUEST_LISTswap(other.SMSG_QUESTGIVER_QUEST_LIST);
        std::swap(this->SMSG_QUESTGIVER_QUEST_LIST, SMSG_QUESTGIVER_QUEST_LISTswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) {
        wrath::SMSG_QUESTGIVER_QUEST_DETAILS SMSG_QUESTGIVER_QUEST_DETAILSswap(other.SMSG_QUESTGIVER_QUEST_DETAILS);
        std::swap(this->SMSG_QUESTGIVER_QUEST_DETAILS, SMSG_QUESTGIVER_QUEST_DETAILSswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) {
        wrath::SMSG_QUESTGIVER_REQUEST_ITEMS SMSG_QUESTGIVER_REQUEST_ITEMSswap(other.SMSG_QUESTGIVER_REQUEST_ITEMS);
        std::swap(this->SMSG_QUESTGIVER_REQUEST_ITEMS, SMSG_QUESTGIVER_REQUEST_ITEMSswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_OFFER_REWARD) {
        wrath::SMSG_QUESTGIVER_OFFER_REWARD SMSG_QUESTGIVER_OFFER_REWARDswap(other.SMSG_QUESTGIVER_OFFER_REWARD);
        std::swap(this->SMSG_QUESTGIVER_OFFER_REWARD, SMSG_QUESTGIVER_OFFER_REWARDswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_INVALID) {
        wrath::SMSG_QUESTGIVER_QUEST_INVALID SMSG_QUESTGIVER_QUEST_INVALIDswap(other.SMSG_QUESTGIVER_QUEST_INVALID);
        std::swap(this->SMSG_QUESTGIVER_QUEST_INVALID, SMSG_QUESTGIVER_QUEST_INVALIDswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) {
        wrath::SMSG_QUESTGIVER_QUEST_COMPLETE SMSG_QUESTGIVER_QUEST_COMPLETEswap(other.SMSG_QUESTGIVER_QUEST_COMPLETE);
        std::swap(this->SMSG_QUESTGIVER_QUEST_COMPLETE, SMSG_QUESTGIVER_QUEST_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_FAILED) {
        wrath::SMSG_QUESTGIVER_QUEST_FAILED SMSG_QUESTGIVER_QUEST_FAILEDswap(other.SMSG_QUESTGIVER_QUEST_FAILED);
        std::swap(this->SMSG_QUESTGIVER_QUEST_FAILED, SMSG_QUESTGIVER_QUEST_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_QUESTLOG_FULL) {
        wrath::SMSG_QUESTLOG_FULL SMSG_QUESTLOG_FULLswap(other.SMSG_QUESTLOG_FULL);
        std::swap(this->SMSG_QUESTLOG_FULL, SMSG_QUESTLOG_FULLswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILED) {
        wrath::SMSG_QUESTUPDATE_FAILED SMSG_QUESTUPDATE_FAILEDswap(other.SMSG_QUESTUPDATE_FAILED);
        std::swap(this->SMSG_QUESTUPDATE_FAILED, SMSG_QUESTUPDATE_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) {
        wrath::SMSG_QUESTUPDATE_FAILEDTIMER SMSG_QUESTUPDATE_FAILEDTIMERswap(other.SMSG_QUESTUPDATE_FAILEDTIMER);
        std::swap(this->SMSG_QUESTUPDATE_FAILEDTIMER, SMSG_QUESTUPDATE_FAILEDTIMERswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_COMPLETE) {
        wrath::SMSG_QUESTUPDATE_COMPLETE SMSG_QUESTUPDATE_COMPLETEswap(other.SMSG_QUESTUPDATE_COMPLETE);
        std::swap(this->SMSG_QUESTUPDATE_COMPLETE, SMSG_QUESTUPDATE_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_KILL) {
        wrath::SMSG_QUESTUPDATE_ADD_KILL SMSG_QUESTUPDATE_ADD_KILLswap(other.SMSG_QUESTUPDATE_ADD_KILL);
        std::swap(this->SMSG_QUESTUPDATE_ADD_KILL, SMSG_QUESTUPDATE_ADD_KILLswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_ITEM) {
        wrath::SMSG_QUESTUPDATE_ADD_ITEM SMSG_QUESTUPDATE_ADD_ITEMswap(other.SMSG_QUESTUPDATE_ADD_ITEM);
        std::swap(this->SMSG_QUESTUPDATE_ADD_ITEM, SMSG_QUESTUPDATE_ADD_ITEMswap);
    }
    if (opcode == Opcode::SMSG_QUEST_CONFIRM_ACCEPT) {
        wrath::SMSG_QUEST_CONFIRM_ACCEPT SMSG_QUEST_CONFIRM_ACCEPTswap(other.SMSG_QUEST_CONFIRM_ACCEPT);
        std::swap(this->SMSG_QUEST_CONFIRM_ACCEPT, SMSG_QUEST_CONFIRM_ACCEPTswap);
    }
    if (opcode == Opcode::SMSG_LIST_INVENTORY) {
        wrath::SMSG_LIST_INVENTORY SMSG_LIST_INVENTORYswap(other.SMSG_LIST_INVENTORY);
        std::swap(this->SMSG_LIST_INVENTORY, SMSG_LIST_INVENTORYswap);
    }
    if (opcode == Opcode::SMSG_SELL_ITEM) {
        wrath::SMSG_SELL_ITEM SMSG_SELL_ITEMswap(other.SMSG_SELL_ITEM);
        std::swap(this->SMSG_SELL_ITEM, SMSG_SELL_ITEMswap);
    }
    if (opcode == Opcode::SMSG_BUY_ITEM) {
        wrath::SMSG_BUY_ITEM SMSG_BUY_ITEMswap(other.SMSG_BUY_ITEM);
        std::swap(this->SMSG_BUY_ITEM, SMSG_BUY_ITEMswap);
    }
    if (opcode == Opcode::SMSG_BUY_FAILED) {
        wrath::SMSG_BUY_FAILED SMSG_BUY_FAILEDswap(other.SMSG_BUY_FAILED);
        std::swap(this->SMSG_BUY_FAILED, SMSG_BUY_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_SHOWTAXINODES) {
        wrath::SMSG_SHOWTAXINODES SMSG_SHOWTAXINODESswap(other.SMSG_SHOWTAXINODES);
        std::swap(this->SMSG_SHOWTAXINODES, SMSG_SHOWTAXINODESswap);
    }
    if (opcode == Opcode::SMSG_TAXINODE_STATUS) {
        wrath::SMSG_TAXINODE_STATUS SMSG_TAXINODE_STATUSswap(other.SMSG_TAXINODE_STATUS);
        std::swap(this->SMSG_TAXINODE_STATUS, SMSG_TAXINODE_STATUSswap);
    }
    if (opcode == Opcode::SMSG_ACTIVATETAXIREPLY) {
        wrath::SMSG_ACTIVATETAXIREPLY SMSG_ACTIVATETAXIREPLYswap(other.SMSG_ACTIVATETAXIREPLY);
        std::swap(this->SMSG_ACTIVATETAXIREPLY, SMSG_ACTIVATETAXIREPLYswap);
    }
    if (opcode == Opcode::SMSG_NEW_TAXI_PATH) {
        wrath::SMSG_NEW_TAXI_PATH SMSG_NEW_TAXI_PATHswap(other.SMSG_NEW_TAXI_PATH);
        std::swap(this->SMSG_NEW_TAXI_PATH, SMSG_NEW_TAXI_PATHswap);
    }
    if (opcode == Opcode::SMSG_TRAINER_LIST) {
        wrath::SMSG_TRAINER_LIST SMSG_TRAINER_LISTswap(other.SMSG_TRAINER_LIST);
        std::swap(this->SMSG_TRAINER_LIST, SMSG_TRAINER_LISTswap);
    }
    if (opcode == Opcode::SMSG_TRAINER_BUY_SUCCEEDED) {
        wrath::SMSG_TRAINER_BUY_SUCCEEDED SMSG_TRAINER_BUY_SUCCEEDEDswap(other.SMSG_TRAINER_BUY_SUCCEEDED);
        std::swap(this->SMSG_TRAINER_BUY_SUCCEEDED, SMSG_TRAINER_BUY_SUCCEEDEDswap);
    }
    if (opcode == Opcode::SMSG_TRAINER_BUY_FAILED) {
        wrath::SMSG_TRAINER_BUY_FAILED SMSG_TRAINER_BUY_FAILEDswap(other.SMSG_TRAINER_BUY_FAILED);
        std::swap(this->SMSG_TRAINER_BUY_FAILED, SMSG_TRAINER_BUY_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_SHOW_BANK) {
        wrath::SMSG_SHOW_BANK SMSG_SHOW_BANKswap(other.SMSG_SHOW_BANK);
        std::swap(this->SMSG_SHOW_BANK, SMSG_SHOW_BANKswap);
    }
    if (opcode == Opcode::SMSG_BUY_BANK_SLOT_RESULT) {
        wrath::SMSG_BUY_BANK_SLOT_RESULT SMSG_BUY_BANK_SLOT_RESULTswap(other.SMSG_BUY_BANK_SLOT_RESULT);
        std::swap(this->SMSG_BUY_BANK_SLOT_RESULT, SMSG_BUY_BANK_SLOT_RESULTswap);
    }
    if (opcode == Opcode::SMSG_PETITION_SHOWLIST) {
        wrath::SMSG_PETITION_SHOWLIST SMSG_PETITION_SHOWLISTswap(other.SMSG_PETITION_SHOWLIST);
        std::swap(this->SMSG_PETITION_SHOWLIST, SMSG_PETITION_SHOWLISTswap);
    }
    if (opcode == Opcode::SMSG_PETITION_SHOW_SIGNATURES) {
        wrath::SMSG_PETITION_SHOW_SIGNATURES SMSG_PETITION_SHOW_SIGNATURESswap(other.SMSG_PETITION_SHOW_SIGNATURES);
        std::swap(this->SMSG_PETITION_SHOW_SIGNATURES, SMSG_PETITION_SHOW_SIGNATURESswap);
    }
    if (opcode == Opcode::SMSG_PETITION_SIGN_RESULTS) {
        wrath::SMSG_PETITION_SIGN_RESULTS SMSG_PETITION_SIGN_RESULTSswap(other.SMSG_PETITION_SIGN_RESULTS);
        std::swap(this->SMSG_PETITION_SIGN_RESULTS, SMSG_PETITION_SIGN_RESULTSswap);
    }
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        wrath::MSG_PETITION_DECLINE MSG_PETITION_DECLINEswap(other.MSG_PETITION_DECLINE);
        std::swap(this->MSG_PETITION_DECLINE, MSG_PETITION_DECLINEswap);
    }
    if (opcode == Opcode::SMSG_TURN_IN_PETITION_RESULTS) {
        wrath::SMSG_TURN_IN_PETITION_RESULTS SMSG_TURN_IN_PETITION_RESULTSswap(other.SMSG_TURN_IN_PETITION_RESULTS);
        std::swap(this->SMSG_TURN_IN_PETITION_RESULTS, SMSG_TURN_IN_PETITION_RESULTSswap);
    }
    if (opcode == Opcode::SMSG_PETITION_QUERY_RESPONSE) {
        wrath::SMSG_PETITION_QUERY_RESPONSE SMSG_PETITION_QUERY_RESPONSEswap(other.SMSG_PETITION_QUERY_RESPONSE);
        std::swap(this->SMSG_PETITION_QUERY_RESPONSE, SMSG_PETITION_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_FISH_NOT_HOOKED) {
        wrath::SMSG_FISH_NOT_HOOKED SMSG_FISH_NOT_HOOKEDswap(other.SMSG_FISH_NOT_HOOKED);
        std::swap(this->SMSG_FISH_NOT_HOOKED, SMSG_FISH_NOT_HOOKEDswap);
    }
    if (opcode == Opcode::SMSG_FISH_ESCAPED) {
        wrath::SMSG_FISH_ESCAPED SMSG_FISH_ESCAPEDswap(other.SMSG_FISH_ESCAPED);
        std::swap(this->SMSG_FISH_ESCAPED, SMSG_FISH_ESCAPEDswap);
    }
    if (opcode == Opcode::SMSG_NOTIFICATION) {
        wrath::SMSG_NOTIFICATION SMSG_NOTIFICATIONswap(other.SMSG_NOTIFICATION);
        std::swap(this->SMSG_NOTIFICATION, SMSG_NOTIFICATIONswap);
    }
    if (opcode == Opcode::SMSG_PLAYED_TIME) {
        wrath::SMSG_PLAYED_TIME SMSG_PLAYED_TIMEswap(other.SMSG_PLAYED_TIME);
        std::swap(this->SMSG_PLAYED_TIME, SMSG_PLAYED_TIMEswap);
    }
    if (opcode == Opcode::SMSG_QUERY_TIME_RESPONSE) {
        wrath::SMSG_QUERY_TIME_RESPONSE SMSG_QUERY_TIME_RESPONSEswap(other.SMSG_QUERY_TIME_RESPONSE);
        std::swap(this->SMSG_QUERY_TIME_RESPONSE, SMSG_QUERY_TIME_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_LOG_XPGAIN) {
        wrath::SMSG_LOG_XPGAIN SMSG_LOG_XPGAINswap(other.SMSG_LOG_XPGAIN);
        std::swap(this->SMSG_LOG_XPGAIN, SMSG_LOG_XPGAINswap);
    }
    if (opcode == Opcode::SMSG_LEVELUP_INFO) {
        wrath::SMSG_LEVELUP_INFO SMSG_LEVELUP_INFOswap(other.SMSG_LEVELUP_INFO);
        std::swap(this->SMSG_LEVELUP_INFO, SMSG_LEVELUP_INFOswap);
    }
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        wrath::MSG_MINIMAP_PING_Server MSG_MINIMAP_PINGswap(other.MSG_MINIMAP_PING);
        std::swap(this->MSG_MINIMAP_PING, MSG_MINIMAP_PINGswap);
    }
    if (opcode == Opcode::SMSG_ENCHANTMENTLOG) {
        wrath::SMSG_ENCHANTMENTLOG SMSG_ENCHANTMENTLOGswap(other.SMSG_ENCHANTMENTLOG);
        std::swap(this->SMSG_ENCHANTMENTLOG, SMSG_ENCHANTMENTLOGswap);
    }
    if (opcode == Opcode::SMSG_START_MIRROR_TIMER) {
        wrath::SMSG_START_MIRROR_TIMER SMSG_START_MIRROR_TIMERswap(other.SMSG_START_MIRROR_TIMER);
        std::swap(this->SMSG_START_MIRROR_TIMER, SMSG_START_MIRROR_TIMERswap);
    }
    if (opcode == Opcode::SMSG_PAUSE_MIRROR_TIMER) {
        wrath::SMSG_PAUSE_MIRROR_TIMER SMSG_PAUSE_MIRROR_TIMERswap(other.SMSG_PAUSE_MIRROR_TIMER);
        std::swap(this->SMSG_PAUSE_MIRROR_TIMER, SMSG_PAUSE_MIRROR_TIMERswap);
    }
    if (opcode == Opcode::SMSG_STOP_MIRROR_TIMER) {
        wrath::SMSG_STOP_MIRROR_TIMER SMSG_STOP_MIRROR_TIMERswap(other.SMSG_STOP_MIRROR_TIMER);
        std::swap(this->SMSG_STOP_MIRROR_TIMER, SMSG_STOP_MIRROR_TIMERswap);
    }
    if (opcode == Opcode::SMSG_PONG) {
        wrath::SMSG_PONG SMSG_PONGswap(other.SMSG_PONG);
        std::swap(this->SMSG_PONG, SMSG_PONGswap);
    }
    if (opcode == Opcode::SMSG_CLEAR_COOLDOWN) {
        wrath::SMSG_CLEAR_COOLDOWN SMSG_CLEAR_COOLDOWNswap(other.SMSG_CLEAR_COOLDOWN);
        std::swap(this->SMSG_CLEAR_COOLDOWN, SMSG_CLEAR_COOLDOWNswap);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_PAGETEXT) {
        wrath::SMSG_GAMEOBJECT_PAGETEXT SMSG_GAMEOBJECT_PAGETEXTswap(other.SMSG_GAMEOBJECT_PAGETEXT);
        std::swap(this->SMSG_GAMEOBJECT_PAGETEXT, SMSG_GAMEOBJECT_PAGETEXTswap);
    }
    if (opcode == Opcode::SMSG_SPELL_DELAYED) {
        wrath::SMSG_SPELL_DELAYED SMSG_SPELL_DELAYEDswap(other.SMSG_SPELL_DELAYED);
        std::swap(this->SMSG_SPELL_DELAYED, SMSG_SPELL_DELAYEDswap);
    }
    if (opcode == Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) {
        wrath::SMSG_QUEST_POI_QUERY_RESPONSE SMSG_QUEST_POI_QUERY_RESPONSEswap(other.SMSG_QUEST_POI_QUERY_RESPONSE);
        std::swap(this->SMSG_QUEST_POI_QUERY_RESPONSE, SMSG_QUEST_POI_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_ITEM_TIME_UPDATE) {
        wrath::SMSG_ITEM_TIME_UPDATE SMSG_ITEM_TIME_UPDATEswap(other.SMSG_ITEM_TIME_UPDATE);
        std::swap(this->SMSG_ITEM_TIME_UPDATE, SMSG_ITEM_TIME_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) {
        wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE SMSG_ITEM_ENCHANT_TIME_UPDATEswap(other.SMSG_ITEM_ENCHANT_TIME_UPDATE);
        std::swap(this->SMSG_ITEM_ENCHANT_TIME_UPDATE, SMSG_ITEM_ENCHANT_TIME_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_AUTH_CHALLENGE) {
        wrath::SMSG_AUTH_CHALLENGE SMSG_AUTH_CHALLENGEswap(other.SMSG_AUTH_CHALLENGE);
        std::swap(this->SMSG_AUTH_CHALLENGE, SMSG_AUTH_CHALLENGEswap);
    }
    if (opcode == Opcode::SMSG_AUTH_RESPONSE) {
        wrath::SMSG_AUTH_RESPONSE SMSG_AUTH_RESPONSEswap(other.SMSG_AUTH_RESPONSE);
        std::swap(this->SMSG_AUTH_RESPONSE, SMSG_AUTH_RESPONSEswap);
    }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        wrath::MSG_SAVE_GUILD_EMBLEM_Server MSG_SAVE_GUILD_EMBLEMswap(other.MSG_SAVE_GUILD_EMBLEM);
        std::swap(this->MSG_SAVE_GUILD_EMBLEM, MSG_SAVE_GUILD_EMBLEMswap);
    }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        wrath::MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATEswap(other.MSG_TABARDVENDOR_ACTIVATE);
        std::swap(this->MSG_TABARDVENDOR_ACTIVATE, MSG_TABARDVENDOR_ACTIVATEswap);
    }
    if (opcode == Opcode::SMSG_PLAY_SPELL_VISUAL) {
        wrath::SMSG_PLAY_SPELL_VISUAL SMSG_PLAY_SPELL_VISUALswap(other.SMSG_PLAY_SPELL_VISUAL);
        std::swap(this->SMSG_PLAY_SPELL_VISUAL, SMSG_PLAY_SPELL_VISUALswap);
    }
    if (opcode == Opcode::SMSG_PARTYKILLLOG) {
        wrath::SMSG_PARTYKILLLOG SMSG_PARTYKILLLOGswap(other.SMSG_PARTYKILLLOG);
        std::swap(this->SMSG_PARTYKILLLOG, SMSG_PARTYKILLLOGswap);
    }
    if (opcode == Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) {
        wrath::SMSG_COMPRESSED_UPDATE_OBJECT SMSG_COMPRESSED_UPDATE_OBJECTswap(other.SMSG_COMPRESSED_UPDATE_OBJECT);
        std::swap(this->SMSG_COMPRESSED_UPDATE_OBJECT, SMSG_COMPRESSED_UPDATE_OBJECTswap);
    }
    if (opcode == Opcode::SMSG_PLAY_SPELL_IMPACT) {
        wrath::SMSG_PLAY_SPELL_IMPACT SMSG_PLAY_SPELL_IMPACTswap(other.SMSG_PLAY_SPELL_IMPACT);
        std::swap(this->SMSG_PLAY_SPELL_IMPACT, SMSG_PLAY_SPELL_IMPACTswap);
    }
    if (opcode == Opcode::SMSG_EXPLORATION_EXPERIENCE) {
        wrath::SMSG_EXPLORATION_EXPERIENCE SMSG_EXPLORATION_EXPERIENCEswap(other.SMSG_EXPLORATION_EXPERIENCE);
        std::swap(this->SMSG_EXPLORATION_EXPERIENCE, SMSG_EXPLORATION_EXPERIENCEswap);
    }
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        wrath::MSG_RANDOM_ROLL_Server MSG_RANDOM_ROLLswap(other.MSG_RANDOM_ROLL);
        std::swap(this->MSG_RANDOM_ROLL, MSG_RANDOM_ROLLswap);
    }
    if (opcode == Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) {
        wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG SMSG_ENVIRONMENTAL_DAMAGE_LOGswap(other.SMSG_ENVIRONMENTAL_DAMAGE_LOG);
        std::swap(this->SMSG_ENVIRONMENTAL_DAMAGE_LOG, SMSG_ENVIRONMENTAL_DAMAGE_LOGswap);
    }
    if (opcode == Opcode::SMSG_LFG_PLAYER_REWARD) {
        wrath::SMSG_LFG_PLAYER_REWARD SMSG_LFG_PLAYER_REWARDswap(other.SMSG_LFG_PLAYER_REWARD);
        std::swap(this->SMSG_LFG_PLAYER_REWARD, SMSG_LFG_PLAYER_REWARDswap);
    }
    if (opcode == Opcode::SMSG_LFG_TELEPORT_DENIED) {
        wrath::SMSG_LFG_TELEPORT_DENIED SMSG_LFG_TELEPORT_DENIEDswap(other.SMSG_LFG_TELEPORT_DENIED);
        std::swap(this->SMSG_LFG_TELEPORT_DENIED, SMSG_LFG_TELEPORT_DENIEDswap);
    }
    if (opcode == Opcode::SMSG_REMOVED_SPELL) {
        wrath::SMSG_REMOVED_SPELL SMSG_REMOVED_SPELLswap(other.SMSG_REMOVED_SPELL);
        std::swap(this->SMSG_REMOVED_SPELL, SMSG_REMOVED_SPELLswap);
    }
    if (opcode == Opcode::SMSG_GMTICKET_CREATE) {
        wrath::SMSG_GMTICKET_CREATE SMSG_GMTICKET_CREATEswap(other.SMSG_GMTICKET_CREATE);
        std::swap(this->SMSG_GMTICKET_CREATE, SMSG_GMTICKET_CREATEswap);
    }
    if (opcode == Opcode::SMSG_GMTICKET_UPDATETEXT) {
        wrath::SMSG_GMTICKET_UPDATETEXT SMSG_GMTICKET_UPDATETEXTswap(other.SMSG_GMTICKET_UPDATETEXT);
        std::swap(this->SMSG_GMTICKET_UPDATETEXT, SMSG_GMTICKET_UPDATETEXTswap);
    }
    if (opcode == Opcode::SMSG_ACCOUNT_DATA_TIMES) {
        wrath::SMSG_ACCOUNT_DATA_TIMES SMSG_ACCOUNT_DATA_TIMESswap(other.SMSG_ACCOUNT_DATA_TIMES);
        std::swap(this->SMSG_ACCOUNT_DATA_TIMES, SMSG_ACCOUNT_DATA_TIMESswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA) {
        wrath::SMSG_UPDATE_ACCOUNT_DATA SMSG_UPDATE_ACCOUNT_DATAswap(other.SMSG_UPDATE_ACCOUNT_DATA);
        std::swap(this->SMSG_UPDATE_ACCOUNT_DATA, SMSG_UPDATE_ACCOUNT_DATAswap);
    }
    if (opcode == Opcode::SMSG_GMTICKET_GETTICKET) {
        wrath::SMSG_GMTICKET_GETTICKET SMSG_GMTICKET_GETTICKETswap(other.SMSG_GMTICKET_GETTICKET);
        std::swap(this->SMSG_GMTICKET_GETTICKET, SMSG_GMTICKET_GETTICKETswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) {
        wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT SMSG_UPDATE_INSTANCE_ENCOUNTER_UNITswap(other.SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT);
        std::swap(this->SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT, SMSG_UPDATE_INSTANCE_ENCOUNTER_UNITswap);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) {
        wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM SMSG_GAMEOBJECT_DESPAWN_ANIMswap(other.SMSG_GAMEOBJECT_DESPAWN_ANIM);
        std::swap(this->SMSG_GAMEOBJECT_DESPAWN_ANIM, SMSG_GAMEOBJECT_DESPAWN_ANIMswap);
    }
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        wrath::MSG_CORPSE_QUERY_Server MSG_CORPSE_QUERYswap(other.MSG_CORPSE_QUERY);
        std::swap(this->MSG_CORPSE_QUERY, MSG_CORPSE_QUERYswap);
    }
    if (opcode == Opcode::SMSG_GMTICKET_DELETETICKET) {
        wrath::SMSG_GMTICKET_DELETETICKET SMSG_GMTICKET_DELETETICKETswap(other.SMSG_GMTICKET_DELETETICKET);
        std::swap(this->SMSG_GMTICKET_DELETETICKET, SMSG_GMTICKET_DELETETICKETswap);
    }
    if (opcode == Opcode::SMSG_CHAT_WRONG_FACTION) {
        wrath::SMSG_CHAT_WRONG_FACTION SMSG_CHAT_WRONG_FACTIONswap(other.SMSG_CHAT_WRONG_FACTION);
        std::swap(this->SMSG_CHAT_WRONG_FACTION, SMSG_CHAT_WRONG_FACTIONswap);
    }
    if (opcode == Opcode::SMSG_GMTICKET_SYSTEMSTATUS) {
        wrath::SMSG_GMTICKET_SYSTEMSTATUS SMSG_GMTICKET_SYSTEMSTATUSswap(other.SMSG_GMTICKET_SYSTEMSTATUS);
        std::swap(this->SMSG_GMTICKET_SYSTEMSTATUS, SMSG_GMTICKET_SYSTEMSTATUSswap);
    }
    if (opcode == Opcode::SMSG_QUEST_FORCE_REMOVE) {
        wrath::SMSG_QUEST_FORCE_REMOVE SMSG_QUEST_FORCE_REMOVEswap(other.SMSG_QUEST_FORCE_REMOVE);
        std::swap(this->SMSG_QUEST_FORCE_REMOVE, SMSG_QUEST_FORCE_REMOVEswap);
    }
    if (opcode == Opcode::SMSG_SPIRIT_HEALER_CONFIRM) {
        wrath::SMSG_SPIRIT_HEALER_CONFIRM SMSG_SPIRIT_HEALER_CONFIRMswap(other.SMSG_SPIRIT_HEALER_CONFIRM);
        std::swap(this->SMSG_SPIRIT_HEALER_CONFIRM, SMSG_SPIRIT_HEALER_CONFIRMswap);
    }
    if (opcode == Opcode::SMSG_GOSSIP_POI) {
        wrath::SMSG_GOSSIP_POI SMSG_GOSSIP_POIswap(other.SMSG_GOSSIP_POI);
        std::swap(this->SMSG_GOSSIP_POI, SMSG_GOSSIP_POIswap);
    }
    if (opcode == Opcode::SMSG_LOGIN_VERIFY_WORLD) {
        wrath::SMSG_LOGIN_VERIFY_WORLD SMSG_LOGIN_VERIFY_WORLDswap(other.SMSG_LOGIN_VERIFY_WORLD);
        std::swap(this->SMSG_LOGIN_VERIFY_WORLD, SMSG_LOGIN_VERIFY_WORLDswap);
    }
    if (opcode == Opcode::SMSG_SEND_MAIL_RESULT) {
        wrath::SMSG_SEND_MAIL_RESULT SMSG_SEND_MAIL_RESULTswap(other.SMSG_SEND_MAIL_RESULT);
        std::swap(this->SMSG_SEND_MAIL_RESULT, SMSG_SEND_MAIL_RESULTswap);
    }
    if (opcode == Opcode::SMSG_MAIL_LIST_RESULT) {
        wrath::SMSG_MAIL_LIST_RESULT SMSG_MAIL_LIST_RESULTswap(other.SMSG_MAIL_LIST_RESULT);
        std::swap(this->SMSG_MAIL_LIST_RESULT, SMSG_MAIL_LIST_RESULTswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_LIST) {
        wrath::SMSG_BATTLEFIELD_LIST SMSG_BATTLEFIELD_LISTswap(other.SMSG_BATTLEFIELD_LIST);
        std::swap(this->SMSG_BATTLEFIELD_LIST, SMSG_BATTLEFIELD_LISTswap);
    }
    if (opcode == Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) {
        wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE SMSG_ITEM_TEXT_QUERY_RESPONSEswap(other.SMSG_ITEM_TEXT_QUERY_RESPONSE);
        std::swap(this->SMSG_ITEM_TEXT_QUERY_RESPONSE, SMSG_ITEM_TEXT_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_SPELLLOGMISS) {
        wrath::SMSG_SPELLLOGMISS SMSG_SPELLLOGMISSswap(other.SMSG_SPELLLOGMISS);
        std::swap(this->SMSG_SPELLLOGMISS, SMSG_SPELLLOGMISSswap);
    }
    if (opcode == Opcode::SMSG_SPELLLOGEXECUTE) {
        wrath::SMSG_SPELLLOGEXECUTE SMSG_SPELLLOGEXECUTEswap(other.SMSG_SPELLLOGEXECUTE);
        std::swap(this->SMSG_SPELLLOGEXECUTE, SMSG_SPELLLOGEXECUTEswap);
    }
    if (opcode == Opcode::SMSG_PERIODICAURALOG) {
        wrath::SMSG_PERIODICAURALOG SMSG_PERIODICAURALOGswap(other.SMSG_PERIODICAURALOG);
        std::swap(this->SMSG_PERIODICAURALOG, SMSG_PERIODICAURALOGswap);
    }
    if (opcode == Opcode::SMSG_SPELLDAMAGESHIELD) {
        wrath::SMSG_SPELLDAMAGESHIELD SMSG_SPELLDAMAGESHIELDswap(other.SMSG_SPELLDAMAGESHIELD);
        std::swap(this->SMSG_SPELLDAMAGESHIELD, SMSG_SPELLDAMAGESHIELDswap);
    }
    if (opcode == Opcode::SMSG_SPELLNONMELEEDAMAGELOG) {
        wrath::SMSG_SPELLNONMELEEDAMAGELOG SMSG_SPELLNONMELEEDAMAGELOGswap(other.SMSG_SPELLNONMELEEDAMAGELOG);
        std::swap(this->SMSG_SPELLNONMELEEDAMAGELOG, SMSG_SPELLNONMELEEDAMAGELOGswap);
    }
    if (opcode == Opcode::SMSG_RESURRECT_FAILED) {
        wrath::SMSG_RESURRECT_FAILED SMSG_RESURRECT_FAILEDswap(other.SMSG_RESURRECT_FAILED);
        std::swap(this->SMSG_RESURRECT_FAILED, SMSG_RESURRECT_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_ZONE_UNDER_ATTACK) {
        wrath::SMSG_ZONE_UNDER_ATTACK SMSG_ZONE_UNDER_ATTACKswap(other.SMSG_ZONE_UNDER_ATTACK);
        std::swap(this->SMSG_ZONE_UNDER_ATTACK, SMSG_ZONE_UNDER_ATTACKswap);
    }
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        wrath::MSG_AUCTION_HELLO_Server MSG_AUCTION_HELLOswap(other.MSG_AUCTION_HELLO);
        std::swap(this->MSG_AUCTION_HELLO, MSG_AUCTION_HELLOswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_COMMAND_RESULT) {
        wrath::SMSG_AUCTION_COMMAND_RESULT SMSG_AUCTION_COMMAND_RESULTswap(other.SMSG_AUCTION_COMMAND_RESULT);
        std::swap(this->SMSG_AUCTION_COMMAND_RESULT, SMSG_AUCTION_COMMAND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_LIST_RESULT) {
        wrath::SMSG_AUCTION_LIST_RESULT SMSG_AUCTION_LIST_RESULTswap(other.SMSG_AUCTION_LIST_RESULT);
        std::swap(this->SMSG_AUCTION_LIST_RESULT, SMSG_AUCTION_LIST_RESULTswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) {
        wrath::SMSG_AUCTION_OWNER_LIST_RESULT SMSG_AUCTION_OWNER_LIST_RESULTswap(other.SMSG_AUCTION_OWNER_LIST_RESULT);
        std::swap(this->SMSG_AUCTION_OWNER_LIST_RESULT, SMSG_AUCTION_OWNER_LIST_RESULTswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) {
        wrath::SMSG_AUCTION_BIDDER_NOTIFICATION SMSG_AUCTION_BIDDER_NOTIFICATIONswap(other.SMSG_AUCTION_BIDDER_NOTIFICATION);
        std::swap(this->SMSG_AUCTION_BIDDER_NOTIFICATION, SMSG_AUCTION_BIDDER_NOTIFICATIONswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) {
        wrath::SMSG_AUCTION_OWNER_NOTIFICATION SMSG_AUCTION_OWNER_NOTIFICATIONswap(other.SMSG_AUCTION_OWNER_NOTIFICATION);
        std::swap(this->SMSG_AUCTION_OWNER_NOTIFICATION, SMSG_AUCTION_OWNER_NOTIFICATIONswap);
    }
    if (opcode == Opcode::SMSG_PROCRESIST) {
        wrath::SMSG_PROCRESIST SMSG_PROCRESISTswap(other.SMSG_PROCRESIST);
        std::swap(this->SMSG_PROCRESIST, SMSG_PROCRESISTswap);
    }
    if (opcode == Opcode::SMSG_DISPEL_FAILED) {
        wrath::SMSG_DISPEL_FAILED SMSG_DISPEL_FAILEDswap(other.SMSG_DISPEL_FAILED);
        std::swap(this->SMSG_DISPEL_FAILED, SMSG_DISPEL_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_SPELLORDAMAGE_IMMUNE) {
        wrath::SMSG_SPELLORDAMAGE_IMMUNE SMSG_SPELLORDAMAGE_IMMUNEswap(other.SMSG_SPELLORDAMAGE_IMMUNE);
        std::swap(this->SMSG_SPELLORDAMAGE_IMMUNE, SMSG_SPELLORDAMAGE_IMMUNEswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) {
        wrath::SMSG_AUCTION_BIDDER_LIST_RESULT SMSG_AUCTION_BIDDER_LIST_RESULTswap(other.SMSG_AUCTION_BIDDER_LIST_RESULT);
        std::swap(this->SMSG_AUCTION_BIDDER_LIST_RESULT, SMSG_AUCTION_BIDDER_LIST_RESULTswap);
    }
    if (opcode == Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) {
        wrath::SMSG_SET_FLAT_SPELL_MODIFIER SMSG_SET_FLAT_SPELL_MODIFIERswap(other.SMSG_SET_FLAT_SPELL_MODIFIER);
        std::swap(this->SMSG_SET_FLAT_SPELL_MODIFIER, SMSG_SET_FLAT_SPELL_MODIFIERswap);
    }
    if (opcode == Opcode::SMSG_SET_PCT_SPELL_MODIFIER) {
        wrath::SMSG_SET_PCT_SPELL_MODIFIER SMSG_SET_PCT_SPELL_MODIFIERswap(other.SMSG_SET_PCT_SPELL_MODIFIER);
        std::swap(this->SMSG_SET_PCT_SPELL_MODIFIER, SMSG_SET_PCT_SPELL_MODIFIERswap);
    }
    if (opcode == Opcode::SMSG_CORPSE_RECLAIM_DELAY) {
        wrath::SMSG_CORPSE_RECLAIM_DELAY SMSG_CORPSE_RECLAIM_DELAYswap(other.SMSG_CORPSE_RECLAIM_DELAY);
        std::swap(this->SMSG_CORPSE_RECLAIM_DELAY, SMSG_CORPSE_RECLAIM_DELAYswap);
    }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        wrath::MSG_LIST_STABLED_PETS_Server MSG_LIST_STABLED_PETSswap(other.MSG_LIST_STABLED_PETS);
        std::swap(this->MSG_LIST_STABLED_PETS, MSG_LIST_STABLED_PETSswap);
    }
    if (opcode == Opcode::SMSG_STABLE_RESULT) {
        wrath::SMSG_STABLE_RESULT SMSG_STABLE_RESULTswap(other.SMSG_STABLE_RESULT);
        std::swap(this->SMSG_STABLE_RESULT, SMSG_STABLE_RESULTswap);
    }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        wrath::MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULTswap(other.MSG_QUEST_PUSH_RESULT);
        std::swap(this->MSG_QUEST_PUSH_RESULT, MSG_QUEST_PUSH_RESULTswap);
    }
    if (opcode == Opcode::SMSG_PLAY_MUSIC) {
        wrath::SMSG_PLAY_MUSIC SMSG_PLAY_MUSICswap(other.SMSG_PLAY_MUSIC);
        std::swap(this->SMSG_PLAY_MUSIC, SMSG_PLAY_MUSICswap);
    }
    if (opcode == Opcode::SMSG_PLAY_OBJECT_SOUND) {
        wrath::SMSG_PLAY_OBJECT_SOUND SMSG_PLAY_OBJECT_SOUNDswap(other.SMSG_PLAY_OBJECT_SOUND);
        std::swap(this->SMSG_PLAY_OBJECT_SOUND, SMSG_PLAY_OBJECT_SOUNDswap);
    }
    if (opcode == Opcode::SMSG_SPELLDISPELLOG) {
        wrath::SMSG_SPELLDISPELLOG SMSG_SPELLDISPELLOGswap(other.SMSG_SPELLDISPELLOG);
        std::swap(this->SMSG_SPELLDISPELLOG, SMSG_SPELLDISPELLOGswap);
    }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        wrath::MSG_QUERY_NEXT_MAIL_TIME_Server MSG_QUERY_NEXT_MAIL_TIMEswap(other.MSG_QUERY_NEXT_MAIL_TIME);
        std::swap(this->MSG_QUERY_NEXT_MAIL_TIME, MSG_QUERY_NEXT_MAIL_TIMEswap);
    }
    if (opcode == Opcode::SMSG_RECEIVED_MAIL) {
        wrath::SMSG_RECEIVED_MAIL SMSG_RECEIVED_MAILswap(other.SMSG_RECEIVED_MAIL);
        std::swap(this->SMSG_RECEIVED_MAIL, SMSG_RECEIVED_MAILswap);
    }
    if (opcode == Opcode::SMSG_RAID_GROUP_ONLY) {
        wrath::SMSG_RAID_GROUP_ONLY SMSG_RAID_GROUP_ONLYswap(other.SMSG_RAID_GROUP_ONLY);
        std::swap(this->SMSG_RAID_GROUP_ONLY, SMSG_RAID_GROUP_ONLYswap);
    }
    if (opcode == Opcode::SMSG_PVP_CREDIT) {
        wrath::SMSG_PVP_CREDIT SMSG_PVP_CREDITswap(other.SMSG_PVP_CREDIT);
        std::swap(this->SMSG_PVP_CREDIT, SMSG_PVP_CREDITswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) {
        wrath::SMSG_AUCTION_REMOVED_NOTIFICATION SMSG_AUCTION_REMOVED_NOTIFICATIONswap(other.SMSG_AUCTION_REMOVED_NOTIFICATION);
        std::swap(this->SMSG_AUCTION_REMOVED_NOTIFICATION, SMSG_AUCTION_REMOVED_NOTIFICATIONswap);
    }
    if (opcode == Opcode::SMSG_SERVER_MESSAGE) {
        wrath::SMSG_SERVER_MESSAGE SMSG_SERVER_MESSAGEswap(other.SMSG_SERVER_MESSAGE);
        std::swap(this->SMSG_SERVER_MESSAGE, SMSG_SERVER_MESSAGEswap);
    }
    if (opcode == Opcode::SMSG_LFG_OFFER_CONTINUE) {
        wrath::SMSG_LFG_OFFER_CONTINUE SMSG_LFG_OFFER_CONTINUEswap(other.SMSG_LFG_OFFER_CONTINUE);
        std::swap(this->SMSG_LFG_OFFER_CONTINUE, SMSG_LFG_OFFER_CONTINUEswap);
    }
    if (opcode == Opcode::SMSG_SHOW_MAILBOX) {
        wrath::SMSG_SHOW_MAILBOX SMSG_SHOW_MAILBOXswap(other.SMSG_SHOW_MAILBOX);
        std::swap(this->SMSG_SHOW_MAILBOX, SMSG_SHOW_MAILBOXswap);
    }
    if (opcode == Opcode::SMSG_CANCEL_AUTO_REPEAT) {
        wrath::SMSG_CANCEL_AUTO_REPEAT SMSG_CANCEL_AUTO_REPEATswap(other.SMSG_CANCEL_AUTO_REPEAT);
        std::swap(this->SMSG_CANCEL_AUTO_REPEAT, SMSG_CANCEL_AUTO_REPEATswap);
    }
    if (opcode == Opcode::SMSG_STANDSTATE_UPDATE) {
        wrath::SMSG_STANDSTATE_UPDATE SMSG_STANDSTATE_UPDATEswap(other.SMSG_STANDSTATE_UPDATE);
        std::swap(this->SMSG_STANDSTATE_UPDATE, SMSG_STANDSTATE_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_LOOT_ALL_PASSED) {
        wrath::SMSG_LOOT_ALL_PASSED SMSG_LOOT_ALL_PASSEDswap(other.SMSG_LOOT_ALL_PASSED);
        std::swap(this->SMSG_LOOT_ALL_PASSED, SMSG_LOOT_ALL_PASSEDswap);
    }
    if (opcode == Opcode::SMSG_LOOT_ROLL_WON) {
        wrath::SMSG_LOOT_ROLL_WON SMSG_LOOT_ROLL_WONswap(other.SMSG_LOOT_ROLL_WON);
        std::swap(this->SMSG_LOOT_ROLL_WON, SMSG_LOOT_ROLL_WONswap);
    }
    if (opcode == Opcode::SMSG_LOOT_START_ROLL) {
        wrath::SMSG_LOOT_START_ROLL SMSG_LOOT_START_ROLLswap(other.SMSG_LOOT_START_ROLL);
        std::swap(this->SMSG_LOOT_START_ROLL, SMSG_LOOT_START_ROLLswap);
    }
    if (opcode == Opcode::SMSG_LOOT_ROLL) {
        wrath::SMSG_LOOT_ROLL SMSG_LOOT_ROLLswap(other.SMSG_LOOT_ROLL);
        std::swap(this->SMSG_LOOT_ROLL, SMSG_LOOT_ROLLswap);
    }
    if (opcode == Opcode::SMSG_LOOT_MASTER_LIST) {
        wrath::SMSG_LOOT_MASTER_LIST SMSG_LOOT_MASTER_LISTswap(other.SMSG_LOOT_MASTER_LIST);
        std::swap(this->SMSG_LOOT_MASTER_LIST, SMSG_LOOT_MASTER_LISTswap);
    }
    if (opcode == Opcode::SMSG_SET_FORCED_REACTIONS) {
        wrath::SMSG_SET_FORCED_REACTIONS SMSG_SET_FORCED_REACTIONSswap(other.SMSG_SET_FORCED_REACTIONS);
        std::swap(this->SMSG_SET_FORCED_REACTIONS, SMSG_SET_FORCED_REACTIONSswap);
    }
    if (opcode == Opcode::SMSG_SPELL_FAILED_OTHER) {
        wrath::SMSG_SPELL_FAILED_OTHER SMSG_SPELL_FAILED_OTHERswap(other.SMSG_SPELL_FAILED_OTHER);
        std::swap(this->SMSG_SPELL_FAILED_OTHER, SMSG_SPELL_FAILED_OTHERswap);
    }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) {
        wrath::SMSG_CHAT_PLAYER_NOT_FOUND SMSG_CHAT_PLAYER_NOT_FOUNDswap(other.SMSG_CHAT_PLAYER_NOT_FOUND);
        std::swap(this->SMSG_CHAT_PLAYER_NOT_FOUND, SMSG_CHAT_PLAYER_NOT_FOUNDswap);
    }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        wrath::MSG_TALENT_WIPE_CONFIRM_Server MSG_TALENT_WIPE_CONFIRMswap(other.MSG_TALENT_WIPE_CONFIRM);
        std::swap(this->MSG_TALENT_WIPE_CONFIRM, MSG_TALENT_WIPE_CONFIRMswap);
    }
    if (opcode == Opcode::SMSG_SUMMON_REQUEST) {
        wrath::SMSG_SUMMON_REQUEST SMSG_SUMMON_REQUESTswap(other.SMSG_SUMMON_REQUEST);
        std::swap(this->SMSG_SUMMON_REQUEST, SMSG_SUMMON_REQUESTswap);
    }
    if (opcode == Opcode::SMSG_MONSTER_MOVE_TRANSPORT) {
        wrath::SMSG_MONSTER_MOVE_TRANSPORT SMSG_MONSTER_MOVE_TRANSPORTswap(other.SMSG_MONSTER_MOVE_TRANSPORT);
        std::swap(this->SMSG_MONSTER_MOVE_TRANSPORT, SMSG_MONSTER_MOVE_TRANSPORTswap);
    }
    if (opcode == Opcode::SMSG_PET_BROKEN) {
        wrath::SMSG_PET_BROKEN SMSG_PET_BROKENswap(other.SMSG_PET_BROKEN);
        std::swap(this->SMSG_PET_BROKEN, SMSG_PET_BROKENswap);
    }
    if (opcode == Opcode::MSG_MOVE_FEATHER_FALL) {
        wrath::MSG_MOVE_FEATHER_FALL_Server MSG_MOVE_FEATHER_FALLswap(other.MSG_MOVE_FEATHER_FALL);
        std::swap(this->MSG_MOVE_FEATHER_FALL, MSG_MOVE_FEATHER_FALLswap);
    }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        wrath::MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALKswap(other.MSG_MOVE_WATER_WALK);
        std::swap(this->MSG_MOVE_WATER_WALK, MSG_MOVE_WATER_WALKswap);
    }
    if (opcode == Opcode::SMSG_FEIGN_DEATH_RESISTED) {
        wrath::SMSG_FEIGN_DEATH_RESISTED SMSG_FEIGN_DEATH_RESISTEDswap(other.SMSG_FEIGN_DEATH_RESISTED);
        std::swap(this->SMSG_FEIGN_DEATH_RESISTED, SMSG_FEIGN_DEATH_RESISTEDswap);
    }
    if (opcode == Opcode::SMSG_DUEL_COUNTDOWN) {
        wrath::SMSG_DUEL_COUNTDOWN SMSG_DUEL_COUNTDOWNswap(other.SMSG_DUEL_COUNTDOWN);
        std::swap(this->SMSG_DUEL_COUNTDOWN, SMSG_DUEL_COUNTDOWNswap);
    }
    if (opcode == Opcode::SMSG_AREA_TRIGGER_MESSAGE) {
        wrath::SMSG_AREA_TRIGGER_MESSAGE SMSG_AREA_TRIGGER_MESSAGEswap(other.SMSG_AREA_TRIGGER_MESSAGE);
        std::swap(this->SMSG_AREA_TRIGGER_MESSAGE, SMSG_AREA_TRIGGER_MESSAGEswap);
    }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHOSEN) {
        wrath::SMSG_LFG_ROLE_CHOSEN SMSG_LFG_ROLE_CHOSENswap(other.SMSG_LFG_ROLE_CHOSEN);
        std::swap(this->SMSG_LFG_ROLE_CHOSEN, SMSG_LFG_ROLE_CHOSENswap);
    }
    if (opcode == Opcode::SMSG_PLAYER_SKINNED) {
        wrath::SMSG_PLAYER_SKINNED SMSG_PLAYER_SKINNEDswap(other.SMSG_PLAYER_SKINNED);
        std::swap(this->SMSG_PLAYER_SKINNED, SMSG_PLAYER_SKINNEDswap);
    }
    if (opcode == Opcode::SMSG_DURABILITY_DAMAGE_DEATH) {
        wrath::SMSG_DURABILITY_DAMAGE_DEATH SMSG_DURABILITY_DAMAGE_DEATHswap(other.SMSG_DURABILITY_DAMAGE_DEATH);
        std::swap(this->SMSG_DURABILITY_DAMAGE_DEATH, SMSG_DURABILITY_DAMAGE_DEATHswap);
    }
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        wrath::MSG_PETITION_RENAME MSG_PETITION_RENAMEswap(other.MSG_PETITION_RENAME);
        std::swap(this->MSG_PETITION_RENAME, MSG_PETITION_RENAMEswap);
    }
    if (opcode == Opcode::SMSG_INIT_WORLD_STATES) {
        wrath::SMSG_INIT_WORLD_STATES SMSG_INIT_WORLD_STATESswap(other.SMSG_INIT_WORLD_STATES);
        std::swap(this->SMSG_INIT_WORLD_STATES, SMSG_INIT_WORLD_STATESswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_WORLD_STATE) {
        wrath::SMSG_UPDATE_WORLD_STATE SMSG_UPDATE_WORLD_STATEswap(other.SMSG_UPDATE_WORLD_STATE);
        std::swap(this->SMSG_UPDATE_WORLD_STATE, SMSG_UPDATE_WORLD_STATEswap);
    }
    if (opcode == Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) {
        wrath::SMSG_ITEM_NAME_QUERY_RESPONSE SMSG_ITEM_NAME_QUERY_RESPONSEswap(other.SMSG_ITEM_NAME_QUERY_RESPONSE);
        std::swap(this->SMSG_ITEM_NAME_QUERY_RESPONSE, SMSG_ITEM_NAME_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_PET_ACTION_FEEDBACK) {
        wrath::SMSG_PET_ACTION_FEEDBACK SMSG_PET_ACTION_FEEDBACKswap(other.SMSG_PET_ACTION_FEEDBACK);
        std::swap(this->SMSG_PET_ACTION_FEEDBACK, SMSG_PET_ACTION_FEEDBACKswap);
    }
    if (opcode == Opcode::SMSG_CHAR_RENAME) {
        wrath::SMSG_CHAR_RENAME SMSG_CHAR_RENAMEswap(other.SMSG_CHAR_RENAME);
        std::swap(this->SMSG_CHAR_RENAME, SMSG_CHAR_RENAMEswap);
    }
    if (opcode == Opcode::SMSG_INSTANCE_SAVE_CREATED) {
        wrath::SMSG_INSTANCE_SAVE_CREATED SMSG_INSTANCE_SAVE_CREATEDswap(other.SMSG_INSTANCE_SAVE_CREATED);
        std::swap(this->SMSG_INSTANCE_SAVE_CREATED, SMSG_INSTANCE_SAVE_CREATEDswap);
    }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_INFO) {
        wrath::SMSG_RAID_INSTANCE_INFO SMSG_RAID_INSTANCE_INFOswap(other.SMSG_RAID_INSTANCE_INFO);
        std::swap(this->SMSG_RAID_INSTANCE_INFO, SMSG_RAID_INSTANCE_INFOswap);
    }
    if (opcode == Opcode::SMSG_PLAY_SOUND) {
        wrath::SMSG_PLAY_SOUND SMSG_PLAY_SOUNDswap(other.SMSG_PLAY_SOUND);
        std::swap(this->SMSG_PLAY_SOUND, SMSG_PLAY_SOUNDswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_STATUS) {
        wrath::SMSG_BATTLEFIELD_STATUS SMSG_BATTLEFIELD_STATUSswap(other.SMSG_BATTLEFIELD_STATUS);
        std::swap(this->SMSG_BATTLEFIELD_STATUS, SMSG_BATTLEFIELD_STATUSswap);
    }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        wrath::MSG_INSPECT_HONOR_STATS_Server MSG_INSPECT_HONOR_STATSswap(other.MSG_INSPECT_HONOR_STATS);
        std::swap(this->MSG_INSPECT_HONOR_STATS, MSG_INSPECT_HONOR_STATSswap);
    }
    if (opcode == Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) {
        wrath::SMSG_FORCE_WALK_SPEED_CHANGE SMSG_FORCE_WALK_SPEED_CHANGEswap(other.SMSG_FORCE_WALK_SPEED_CHANGE);
        std::swap(this->SMSG_FORCE_WALK_SPEED_CHANGE, SMSG_FORCE_WALK_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) {
        wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE SMSG_FORCE_SWIM_BACK_SPEED_CHANGEswap(other.SMSG_FORCE_SWIM_BACK_SPEED_CHANGE);
        std::swap(this->SMSG_FORCE_SWIM_BACK_SPEED_CHANGE, SMSG_FORCE_SWIM_BACK_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_TURN_RATE_CHANGE) {
        wrath::SMSG_FORCE_TURN_RATE_CHANGE SMSG_FORCE_TURN_RATE_CHANGEswap(other.SMSG_FORCE_TURN_RATE_CHANGE);
        std::swap(this->SMSG_FORCE_TURN_RATE_CHANGE, SMSG_FORCE_TURN_RATE_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) {
        wrath::SMSG_AREA_SPIRIT_HEALER_TIME SMSG_AREA_SPIRIT_HEALER_TIMEswap(other.SMSG_AREA_SPIRIT_HEALER_TIME);
        std::swap(this->SMSG_AREA_SPIRIT_HEALER_TIME, SMSG_AREA_SPIRIT_HEALER_TIMEswap);
    }
    if (opcode == Opcode::SMSG_WARDEN_DATA) {
        wrath::SMSG_WARDEN_DATA SMSG_WARDEN_DATAswap(other.SMSG_WARDEN_DATA);
        std::swap(this->SMSG_WARDEN_DATA, SMSG_WARDEN_DATAswap);
    }
    if (opcode == Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) {
        wrath::SMSG_GROUP_JOINED_BATTLEGROUND SMSG_GROUP_JOINED_BATTLEGROUNDswap(other.SMSG_GROUP_JOINED_BATTLEGROUND);
        std::swap(this->SMSG_GROUP_JOINED_BATTLEGROUND, SMSG_GROUP_JOINED_BATTLEGROUNDswap);
    }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server MSG_BATTLEGROUND_PLAYER_POSITIONSswap(other.MSG_BATTLEGROUND_PLAYER_POSITIONS);
        std::swap(this->MSG_BATTLEGROUND_PLAYER_POSITIONS, MSG_BATTLEGROUND_PLAYER_POSITIONSswap);
    }
    if (opcode == Opcode::SMSG_BINDER_CONFIRM) {
        wrath::SMSG_BINDER_CONFIRM SMSG_BINDER_CONFIRMswap(other.SMSG_BINDER_CONFIRM);
        std::swap(this->SMSG_BINDER_CONFIRM, SMSG_BINDER_CONFIRMswap);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) {
        wrath::SMSG_BATTLEGROUND_PLAYER_JOINED SMSG_BATTLEGROUND_PLAYER_JOINEDswap(other.SMSG_BATTLEGROUND_PLAYER_JOINED);
        std::swap(this->SMSG_BATTLEGROUND_PLAYER_JOINED, SMSG_BATTLEGROUND_PLAYER_JOINEDswap);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) {
        wrath::SMSG_BATTLEGROUND_PLAYER_LEFT SMSG_BATTLEGROUND_PLAYER_LEFTswap(other.SMSG_BATTLEGROUND_PLAYER_LEFT);
        std::swap(this->SMSG_BATTLEGROUND_PLAYER_LEFT, SMSG_BATTLEGROUND_PLAYER_LEFTswap);
    }
    if (opcode == Opcode::SMSG_ADDON_INFO) {
        wrath::SMSG_ADDON_INFO SMSG_ADDON_INFOswap(other.SMSG_ADDON_INFO);
        std::swap(this->SMSG_ADDON_INFO, SMSG_ADDON_INFOswap);
    }
    if (opcode == Opcode::SMSG_PET_UNLEARN_CONFIRM) {
        wrath::SMSG_PET_UNLEARN_CONFIRM SMSG_PET_UNLEARN_CONFIRMswap(other.SMSG_PET_UNLEARN_CONFIRM);
        std::swap(this->SMSG_PET_UNLEARN_CONFIRM, SMSG_PET_UNLEARN_CONFIRMswap);
    }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS_FULL) {
        wrath::SMSG_PARTY_MEMBER_STATS_FULL SMSG_PARTY_MEMBER_STATS_FULLswap(other.SMSG_PARTY_MEMBER_STATS_FULL);
        std::swap(this->SMSG_PARTY_MEMBER_STATS_FULL, SMSG_PARTY_MEMBER_STATS_FULLswap);
    }
    if (opcode == Opcode::SMSG_WEATHER) {
        wrath::SMSG_WEATHER SMSG_WEATHERswap(other.SMSG_WEATHER);
        std::swap(this->SMSG_WEATHER, SMSG_WEATHERswap);
    }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_MESSAGE) {
        wrath::SMSG_RAID_INSTANCE_MESSAGE SMSG_RAID_INSTANCE_MESSAGEswap(other.SMSG_RAID_INSTANCE_MESSAGE);
        std::swap(this->SMSG_RAID_INSTANCE_MESSAGE, SMSG_RAID_INSTANCE_MESSAGEswap);
    }
    if (opcode == Opcode::SMSG_COMPRESSED_MOVES) {
        wrath::SMSG_COMPRESSED_MOVES SMSG_COMPRESSED_MOVESswap(other.SMSG_COMPRESSED_MOVES);
        std::swap(this->SMSG_COMPRESSED_MOVES, SMSG_COMPRESSED_MOVESswap);
    }
    if (opcode == Opcode::SMSG_CHAT_RESTRICTED) {
        wrath::SMSG_CHAT_RESTRICTED SMSG_CHAT_RESTRICTEDswap(other.SMSG_CHAT_RESTRICTED);
        std::swap(this->SMSG_CHAT_RESTRICTED, SMSG_CHAT_RESTRICTEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_SPEED) {
        wrath::SMSG_SPLINE_SET_RUN_SPEED SMSG_SPLINE_SET_RUN_SPEEDswap(other.SMSG_SPLINE_SET_RUN_SPEED);
        std::swap(this->SMSG_SPLINE_SET_RUN_SPEED, SMSG_SPLINE_SET_RUN_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) {
        wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED SMSG_SPLINE_SET_RUN_BACK_SPEEDswap(other.SMSG_SPLINE_SET_RUN_BACK_SPEED);
        std::swap(this->SMSG_SPLINE_SET_RUN_BACK_SPEED, SMSG_SPLINE_SET_RUN_BACK_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_SPEED) {
        wrath::SMSG_SPLINE_SET_SWIM_SPEED SMSG_SPLINE_SET_SWIM_SPEEDswap(other.SMSG_SPLINE_SET_SWIM_SPEED);
        std::swap(this->SMSG_SPLINE_SET_SWIM_SPEED, SMSG_SPLINE_SET_SWIM_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_WALK_SPEED) {
        wrath::SMSG_SPLINE_SET_WALK_SPEED SMSG_SPLINE_SET_WALK_SPEEDswap(other.SMSG_SPLINE_SET_WALK_SPEED);
        std::swap(this->SMSG_SPLINE_SET_WALK_SPEED, SMSG_SPLINE_SET_WALK_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) {
        wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED SMSG_SPLINE_SET_SWIM_BACK_SPEEDswap(other.SMSG_SPLINE_SET_SWIM_BACK_SPEED);
        std::swap(this->SMSG_SPLINE_SET_SWIM_BACK_SPEED, SMSG_SPLINE_SET_SWIM_BACK_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_TURN_RATE) {
        wrath::SMSG_SPLINE_SET_TURN_RATE SMSG_SPLINE_SET_TURN_RATEswap(other.SMSG_SPLINE_SET_TURN_RATE);
        std::swap(this->SMSG_SPLINE_SET_TURN_RATE, SMSG_SPLINE_SET_TURN_RATEswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNROOT) {
        wrath::SMSG_SPLINE_MOVE_UNROOT SMSG_SPLINE_MOVE_UNROOTswap(other.SMSG_SPLINE_MOVE_UNROOT);
        std::swap(this->SMSG_SPLINE_MOVE_UNROOT, SMSG_SPLINE_MOVE_UNROOTswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) {
        wrath::SMSG_SPLINE_MOVE_FEATHER_FALL SMSG_SPLINE_MOVE_FEATHER_FALLswap(other.SMSG_SPLINE_MOVE_FEATHER_FALL);
        std::swap(this->SMSG_SPLINE_MOVE_FEATHER_FALL, SMSG_SPLINE_MOVE_FEATHER_FALLswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) {
        wrath::SMSG_SPLINE_MOVE_NORMAL_FALL SMSG_SPLINE_MOVE_NORMAL_FALLswap(other.SMSG_SPLINE_MOVE_NORMAL_FALL);
        std::swap(this->SMSG_SPLINE_MOVE_NORMAL_FALL, SMSG_SPLINE_MOVE_NORMAL_FALLswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_HOVER) {
        wrath::SMSG_SPLINE_MOVE_SET_HOVER SMSG_SPLINE_MOVE_SET_HOVERswap(other.SMSG_SPLINE_MOVE_SET_HOVER);
        std::swap(this->SMSG_SPLINE_MOVE_SET_HOVER, SMSG_SPLINE_MOVE_SET_HOVERswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) {
        wrath::SMSG_SPLINE_MOVE_UNSET_HOVER SMSG_SPLINE_MOVE_UNSET_HOVERswap(other.SMSG_SPLINE_MOVE_UNSET_HOVER);
        std::swap(this->SMSG_SPLINE_MOVE_UNSET_HOVER, SMSG_SPLINE_MOVE_UNSET_HOVERswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_WATER_WALK) {
        wrath::SMSG_SPLINE_MOVE_WATER_WALK SMSG_SPLINE_MOVE_WATER_WALKswap(other.SMSG_SPLINE_MOVE_WATER_WALK);
        std::swap(this->SMSG_SPLINE_MOVE_WATER_WALK, SMSG_SPLINE_MOVE_WATER_WALKswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_LAND_WALK) {
        wrath::SMSG_SPLINE_MOVE_LAND_WALK SMSG_SPLINE_MOVE_LAND_WALKswap(other.SMSG_SPLINE_MOVE_LAND_WALK);
        std::swap(this->SMSG_SPLINE_MOVE_LAND_WALK, SMSG_SPLINE_MOVE_LAND_WALKswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_START_SWIM) {
        wrath::SMSG_SPLINE_MOVE_START_SWIM SMSG_SPLINE_MOVE_START_SWIMswap(other.SMSG_SPLINE_MOVE_START_SWIM);
        std::swap(this->SMSG_SPLINE_MOVE_START_SWIM, SMSG_SPLINE_MOVE_START_SWIMswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) {
        wrath::SMSG_SPLINE_MOVE_STOP_SWIM SMSG_SPLINE_MOVE_STOP_SWIMswap(other.SMSG_SPLINE_MOVE_STOP_SWIM);
        std::swap(this->SMSG_SPLINE_MOVE_STOP_SWIM, SMSG_SPLINE_MOVE_STOP_SWIMswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) {
        wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE SMSG_SPLINE_MOVE_SET_RUN_MODEswap(other.SMSG_SPLINE_MOVE_SET_RUN_MODE);
        std::swap(this->SMSG_SPLINE_MOVE_SET_RUN_MODE, SMSG_SPLINE_MOVE_SET_RUN_MODEswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) {
        wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE SMSG_SPLINE_MOVE_SET_WALK_MODEswap(other.SMSG_SPLINE_MOVE_SET_WALK_MODE);
        std::swap(this->SMSG_SPLINE_MOVE_SET_WALK_MODE, SMSG_SPLINE_MOVE_SET_WALK_MODEswap);
    }
    if (opcode == Opcode::MSG_MOVE_TIME_SKIPPED) {
        wrath::MSG_MOVE_TIME_SKIPPED_Server MSG_MOVE_TIME_SKIPPEDswap(other.MSG_MOVE_TIME_SKIPPED);
        std::swap(this->MSG_MOVE_TIME_SKIPPED, MSG_MOVE_TIME_SKIPPEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_ROOT) {
        wrath::SMSG_SPLINE_MOVE_ROOT SMSG_SPLINE_MOVE_ROOTswap(other.SMSG_SPLINE_MOVE_ROOT);
        std::swap(this->SMSG_SPLINE_MOVE_ROOT, SMSG_SPLINE_MOVE_ROOTswap);
    }
    if (opcode == Opcode::SMSG_INVALIDATE_PLAYER) {
        wrath::SMSG_INVALIDATE_PLAYER SMSG_INVALIDATE_PLAYERswap(other.SMSG_INVALIDATE_PLAYER);
        std::swap(this->SMSG_INVALIDATE_PLAYER, SMSG_INVALIDATE_PLAYERswap);
    }
    if (opcode == Opcode::SMSG_INSTANCE_RESET) {
        wrath::SMSG_INSTANCE_RESET SMSG_INSTANCE_RESETswap(other.SMSG_INSTANCE_RESET);
        std::swap(this->SMSG_INSTANCE_RESET, SMSG_INSTANCE_RESETswap);
    }
    if (opcode == Opcode::SMSG_INSTANCE_RESET_FAILED) {
        wrath::SMSG_INSTANCE_RESET_FAILED SMSG_INSTANCE_RESET_FAILEDswap(other.SMSG_INSTANCE_RESET_FAILED);
        std::swap(this->SMSG_INSTANCE_RESET_FAILED, SMSG_INSTANCE_RESET_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_LAST_INSTANCE) {
        wrath::SMSG_UPDATE_LAST_INSTANCE SMSG_UPDATE_LAST_INSTANCEswap(other.SMSG_UPDATE_LAST_INSTANCE);
        std::swap(this->SMSG_UPDATE_LAST_INSTANCE, SMSG_UPDATE_LAST_INSTANCEswap);
    }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        wrath::MSG_RAID_TARGET_UPDATE_Server MSG_RAID_TARGET_UPDATEswap(other.MSG_RAID_TARGET_UPDATE);
        std::swap(this->MSG_RAID_TARGET_UPDATE, MSG_RAID_TARGET_UPDATEswap);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        wrath::MSG_RAID_READY_CHECK_Server MSG_RAID_READY_CHECKswap(other.MSG_RAID_READY_CHECK);
        std::swap(this->MSG_RAID_READY_CHECK, MSG_RAID_READY_CHECKswap);
    }
    if (opcode == Opcode::SMSG_PET_ACTION_SOUND) {
        wrath::SMSG_PET_ACTION_SOUND SMSG_PET_ACTION_SOUNDswap(other.SMSG_PET_ACTION_SOUND);
        std::swap(this->SMSG_PET_ACTION_SOUND, SMSG_PET_ACTION_SOUNDswap);
    }
    if (opcode == Opcode::SMSG_PET_DISMISS_SOUND) {
        wrath::SMSG_PET_DISMISS_SOUND SMSG_PET_DISMISS_SOUNDswap(other.SMSG_PET_DISMISS_SOUND);
        std::swap(this->SMSG_PET_DISMISS_SOUND, SMSG_PET_DISMISS_SOUNDswap);
    }
    if (opcode == Opcode::SMSG_GM_TICKET_STATUS_UPDATE) {
        wrath::SMSG_GM_TICKET_STATUS_UPDATE SMSG_GM_TICKET_STATUS_UPDATEswap(other.SMSG_GM_TICKET_STATUS_UPDATE);
        std::swap(this->SMSG_GM_TICKET_STATUS_UPDATE, SMSG_GM_TICKET_STATUS_UPDATEswap);
    }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        wrath::MSG_SET_DUNGEON_DIFFICULTY_Server MSG_SET_DUNGEON_DIFFICULTYswap(other.MSG_SET_DUNGEON_DIFFICULTY);
        std::swap(this->MSG_SET_DUNGEON_DIFFICULTY, MSG_SET_DUNGEON_DIFFICULTYswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) {
        wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP SMSG_UPDATE_INSTANCE_OWNERSHIPswap(other.SMSG_UPDATE_INSTANCE_OWNERSHIP);
        std::swap(this->SMSG_UPDATE_INSTANCE_OWNERSHIP, SMSG_UPDATE_INSTANCE_OWNERSHIPswap);
    }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) {
        wrath::SMSG_CHAT_PLAYER_AMBIGUOUS SMSG_CHAT_PLAYER_AMBIGUOUSswap(other.SMSG_CHAT_PLAYER_AMBIGUOUS);
        std::swap(this->SMSG_CHAT_PLAYER_AMBIGUOUS, SMSG_CHAT_PLAYER_AMBIGUOUSswap);
    }
    if (opcode == Opcode::SMSG_SPELLINSTAKILLLOG) {
        wrath::SMSG_SPELLINSTAKILLLOG SMSG_SPELLINSTAKILLLOGswap(other.SMSG_SPELLINSTAKILLLOG);
        std::swap(this->SMSG_SPELLINSTAKILLLOG, SMSG_SPELLINSTAKILLLOGswap);
    }
    if (opcode == Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) {
        wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS SMSG_SPELL_UPDATE_CHAIN_TARGETSswap(other.SMSG_SPELL_UPDATE_CHAIN_TARGETS);
        std::swap(this->SMSG_SPELL_UPDATE_CHAIN_TARGETS, SMSG_SPELL_UPDATE_CHAIN_TARGETSswap);
    }
    if (opcode == Opcode::SMSG_SPELLSTEALLOG) {
        wrath::SMSG_SPELLSTEALLOG SMSG_SPELLSTEALLOGswap(other.SMSG_SPELLSTEALLOG);
        std::swap(this->SMSG_SPELLSTEALLOG, SMSG_SPELLSTEALLOGswap);
    }
    if (opcode == Opcode::SMSG_DEFENSE_MESSAGE) {
        wrath::SMSG_DEFENSE_MESSAGE SMSG_DEFENSE_MESSAGEswap(other.SMSG_DEFENSE_MESSAGE);
        std::swap(this->SMSG_DEFENSE_MESSAGE, SMSG_DEFENSE_MESSAGEswap);
    }
    if (opcode == Opcode::SMSG_INSTANCE_DIFFICULTY) {
        wrath::SMSG_INSTANCE_DIFFICULTY SMSG_INSTANCE_DIFFICULTYswap(other.SMSG_INSTANCE_DIFFICULTY);
        std::swap(this->SMSG_INSTANCE_DIFFICULTY, SMSG_INSTANCE_DIFFICULTYswap);
    }
    if (opcode == Opcode::SMSG_MOTD) {
        wrath::SMSG_MOTD SMSG_MOTDswap(other.SMSG_MOTD);
        std::swap(this->SMSG_MOTD, SMSG_MOTDswap);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_CAN_FLY) {
        wrath::SMSG_MOVE_SET_CAN_FLY SMSG_MOVE_SET_CAN_FLYswap(other.SMSG_MOVE_SET_CAN_FLY);
        std::swap(this->SMSG_MOVE_SET_CAN_FLY, SMSG_MOVE_SET_CAN_FLYswap);
    }
    if (opcode == Opcode::SMSG_MOVE_UNSET_CAN_FLY) {
        wrath::SMSG_MOVE_UNSET_CAN_FLY SMSG_MOVE_UNSET_CAN_FLYswap(other.SMSG_MOVE_UNSET_CAN_FLY);
        std::swap(this->SMSG_MOVE_UNSET_CAN_FLY, SMSG_MOVE_UNSET_CAN_FLYswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) {
        wrath::SMSG_ARENA_TEAM_COMMAND_RESULT SMSG_ARENA_TEAM_COMMAND_RESULTswap(other.SMSG_ARENA_TEAM_COMMAND_RESULT);
        std::swap(this->SMSG_ARENA_TEAM_COMMAND_RESULT, SMSG_ARENA_TEAM_COMMAND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) {
        wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE SMSG_ARENA_TEAM_QUERY_RESPONSEswap(other.SMSG_ARENA_TEAM_QUERY_RESPONSE);
        std::swap(this->SMSG_ARENA_TEAM_QUERY_RESPONSE, SMSG_ARENA_TEAM_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_ROSTER) {
        wrath::SMSG_ARENA_TEAM_ROSTER SMSG_ARENA_TEAM_ROSTERswap(other.SMSG_ARENA_TEAM_ROSTER);
        std::swap(this->SMSG_ARENA_TEAM_ROSTER, SMSG_ARENA_TEAM_ROSTERswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_INVITE) {
        wrath::SMSG_ARENA_TEAM_INVITE SMSG_ARENA_TEAM_INVITEswap(other.SMSG_ARENA_TEAM_INVITE);
        std::swap(this->SMSG_ARENA_TEAM_INVITE, SMSG_ARENA_TEAM_INVITEswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_EVENT) {
        wrath::SMSG_ARENA_TEAM_EVENT SMSG_ARENA_TEAM_EVENTswap(other.SMSG_ARENA_TEAM_EVENT);
        std::swap(this->SMSG_ARENA_TEAM_EVENT, SMSG_ARENA_TEAM_EVENTswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        wrath::MSG_MOVE_START_ASCEND MSG_MOVE_START_ASCENDswap(other.MSG_MOVE_START_ASCEND);
        std::swap(this->MSG_MOVE_START_ASCEND, MSG_MOVE_START_ASCENDswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        wrath::MSG_MOVE_STOP_ASCEND MSG_MOVE_STOP_ASCENDswap(other.MSG_MOVE_STOP_ASCEND);
        std::swap(this->MSG_MOVE_STOP_ASCEND, MSG_MOVE_STOP_ASCENDswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_STATS) {
        wrath::SMSG_ARENA_TEAM_STATS SMSG_ARENA_TEAM_STATSswap(other.SMSG_ARENA_TEAM_STATS);
        std::swap(this->SMSG_ARENA_TEAM_STATS, SMSG_ARENA_TEAM_STATSswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_LFG_LIST) {
        wrath::SMSG_UPDATE_LFG_LIST SMSG_UPDATE_LFG_LISTswap(other.SMSG_UPDATE_LFG_LIST);
        std::swap(this->SMSG_UPDATE_LFG_LIST, SMSG_UPDATE_LFG_LISTswap);
    }
    if (opcode == Opcode::SMSG_LFG_PROPOSAL_UPDATE) {
        wrath::SMSG_LFG_PROPOSAL_UPDATE SMSG_LFG_PROPOSAL_UPDATEswap(other.SMSG_LFG_PROPOSAL_UPDATE);
        std::swap(this->SMSG_LFG_PROPOSAL_UPDATE, SMSG_LFG_PROPOSAL_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) {
        wrath::SMSG_LFG_ROLE_CHECK_UPDATE SMSG_LFG_ROLE_CHECK_UPDATEswap(other.SMSG_LFG_ROLE_CHECK_UPDATE);
        std::swap(this->SMSG_LFG_ROLE_CHECK_UPDATE, SMSG_LFG_ROLE_CHECK_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_LFG_JOIN_RESULT) {
        wrath::SMSG_LFG_JOIN_RESULT SMSG_LFG_JOIN_RESULTswap(other.SMSG_LFG_JOIN_RESULT);
        std::swap(this->SMSG_LFG_JOIN_RESULT, SMSG_LFG_JOIN_RESULTswap);
    }
    if (opcode == Opcode::SMSG_LFG_QUEUE_STATUS) {
        wrath::SMSG_LFG_QUEUE_STATUS SMSG_LFG_QUEUE_STATUSswap(other.SMSG_LFG_QUEUE_STATUS);
        std::swap(this->SMSG_LFG_QUEUE_STATUS, SMSG_LFG_QUEUE_STATUSswap);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PLAYER) {
        wrath::SMSG_LFG_UPDATE_PLAYER SMSG_LFG_UPDATE_PLAYERswap(other.SMSG_LFG_UPDATE_PLAYER);
        std::swap(this->SMSG_LFG_UPDATE_PLAYER, SMSG_LFG_UPDATE_PLAYERswap);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PARTY) {
        wrath::SMSG_LFG_UPDATE_PARTY SMSG_LFG_UPDATE_PARTYswap(other.SMSG_LFG_UPDATE_PARTY);
        std::swap(this->SMSG_LFG_UPDATE_PARTY, SMSG_LFG_UPDATE_PARTYswap);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_SEARCH) {
        wrath::SMSG_LFG_UPDATE_SEARCH SMSG_LFG_UPDATE_SEARCHswap(other.SMSG_LFG_UPDATE_SEARCH);
        std::swap(this->SMSG_LFG_UPDATE_SEARCH, SMSG_LFG_UPDATE_SEARCHswap);
    }
    if (opcode == Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) {
        wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE SMSG_LFG_BOOT_PROPOSAL_UPDATEswap(other.SMSG_LFG_BOOT_PROPOSAL_UPDATE);
        std::swap(this->SMSG_LFG_BOOT_PROPOSAL_UPDATE, SMSG_LFG_BOOT_PROPOSAL_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_LFG_PLAYER_INFO) {
        wrath::SMSG_LFG_PLAYER_INFO SMSG_LFG_PLAYER_INFOswap(other.SMSG_LFG_PLAYER_INFO);
        std::swap(this->SMSG_LFG_PLAYER_INFO, SMSG_LFG_PLAYER_INFOswap);
    }
    if (opcode == Opcode::SMSG_LFG_PARTY_INFO) {
        wrath::SMSG_LFG_PARTY_INFO SMSG_LFG_PARTY_INFOswap(other.SMSG_LFG_PARTY_INFO);
        std::swap(this->SMSG_LFG_PARTY_INFO, SMSG_LFG_PARTY_INFOswap);
    }
    if (opcode == Opcode::SMSG_TITLE_EARNED) {
        wrath::SMSG_TITLE_EARNED SMSG_TITLE_EARNEDswap(other.SMSG_TITLE_EARNED);
        std::swap(this->SMSG_TITLE_EARNED, SMSG_TITLE_EARNEDswap);
    }
    if (opcode == Opcode::SMSG_ARENA_ERROR) {
        wrath::SMSG_ARENA_ERROR SMSG_ARENA_ERRORswap(other.SMSG_ARENA_ERROR);
        std::swap(this->SMSG_ARENA_ERROR, SMSG_ARENA_ERRORswap);
    }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        wrath::MSG_INSPECT_ARENA_TEAMS_Server MSG_INSPECT_ARENA_TEAMSswap(other.MSG_INSPECT_ARENA_TEAMS);
        std::swap(this->MSG_INSPECT_ARENA_TEAMS, MSG_INSPECT_ARENA_TEAMSswap);
    }
    if (opcode == Opcode::SMSG_DEATH_RELEASE_LOC) {
        wrath::SMSG_DEATH_RELEASE_LOC SMSG_DEATH_RELEASE_LOCswap(other.SMSG_DEATH_RELEASE_LOC);
        std::swap(this->SMSG_DEATH_RELEASE_LOC, SMSG_DEATH_RELEASE_LOCswap);
    }
    if (opcode == Opcode::SMSG_FORCED_DEATH_UPDATE) {
        wrath::SMSG_FORCED_DEATH_UPDATE SMSG_FORCED_DEATH_UPDATEswap(other.SMSG_FORCED_DEATH_UPDATE);
        std::swap(this->SMSG_FORCED_DEATH_UPDATE, SMSG_FORCED_DEATH_UPDATEswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_SPEED) {
        wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server MSG_MOVE_SET_FLIGHT_SPEEDswap(other.MSG_MOVE_SET_FLIGHT_SPEED);
        std::swap(this->MSG_MOVE_SET_FLIGHT_SPEED, MSG_MOVE_SET_FLIGHT_SPEEDswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEEDswap(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED);
        std::swap(this->MSG_MOVE_SET_FLIGHT_BACK_SPEED, MSG_MOVE_SET_FLIGHT_BACK_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) {
        wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE SMSG_FORCE_FLIGHT_SPEED_CHANGEswap(other.SMSG_FORCE_FLIGHT_SPEED_CHANGE);
        std::swap(this->SMSG_FORCE_FLIGHT_SPEED_CHANGE, SMSG_FORCE_FLIGHT_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) {
        wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGEswap(other.SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE);
        std::swap(this->SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE, SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) {
        wrath::SMSG_SPLINE_SET_FLIGHT_SPEED SMSG_SPLINE_SET_FLIGHT_SPEEDswap(other.SMSG_SPLINE_SET_FLIGHT_SPEED);
        std::swap(this->SMSG_SPLINE_SET_FLIGHT_SPEED, SMSG_SPLINE_SET_FLIGHT_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) {
        wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED SMSG_SPLINE_SET_FLIGHT_BACK_SPEEDswap(other.SMSG_SPLINE_SET_FLIGHT_BACK_SPEED);
        std::swap(this->SMSG_SPLINE_SET_FLIGHT_BACK_SPEED, SMSG_SPLINE_SET_FLIGHT_BACK_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_FLIGHT_SPLINE_SYNC) {
        wrath::SMSG_FLIGHT_SPLINE_SYNC SMSG_FLIGHT_SPLINE_SYNCswap(other.SMSG_FLIGHT_SPLINE_SYNC);
        std::swap(this->SMSG_FLIGHT_SPLINE_SYNC, SMSG_FLIGHT_SPLINE_SYNCswap);
    }
    if (opcode == Opcode::SMSG_REALM_SPLIT) {
        wrath::SMSG_REALM_SPLIT SMSG_REALM_SPLITswap(other.SMSG_REALM_SPLIT);
        std::swap(this->SMSG_REALM_SPLIT, SMSG_REALM_SPLITswap);
    }
    if (opcode == Opcode::SMSG_TIME_SYNC_REQ) {
        wrath::SMSG_TIME_SYNC_REQ SMSG_TIME_SYNC_REQswap(other.SMSG_TIME_SYNC_REQ);
        std::swap(this->SMSG_TIME_SYNC_REQ, SMSG_TIME_SYNC_REQswap);
    }
    if (opcode == Opcode::SMSG_RESET_FAILED_NOTIFY) {
        wrath::SMSG_RESET_FAILED_NOTIFY SMSG_RESET_FAILED_NOTIFYswap(other.SMSG_RESET_FAILED_NOTIFY);
        std::swap(this->SMSG_RESET_FAILED_NOTIFY, SMSG_RESET_FAILED_NOTIFYswap);
    }
    if (opcode == Opcode::SMSG_LFG_DISABLED) {
        wrath::SMSG_LFG_DISABLED SMSG_LFG_DISABLEDswap(other.SMSG_LFG_DISABLED);
        std::swap(this->SMSG_LFG_DISABLED, SMSG_LFG_DISABLEDswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_COMBO_POINTS) {
        wrath::SMSG_UPDATE_COMBO_POINTS SMSG_UPDATE_COMBO_POINTSswap(other.SMSG_UPDATE_COMBO_POINTS);
        std::swap(this->SMSG_UPDATE_COMBO_POINTS, SMSG_UPDATE_COMBO_POINTSswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        wrath::MSG_MOVE_START_DESCEND MSG_MOVE_START_DESCENDswap(other.MSG_MOVE_START_DESCEND);
        std::swap(this->MSG_MOVE_START_DESCEND, MSG_MOVE_START_DESCENDswap);
    }
    if (opcode == Opcode::SMSG_DISMOUNT) {
        wrath::SMSG_DISMOUNT SMSG_DISMOUNTswap(other.SMSG_DISMOUNT);
        std::swap(this->SMSG_DISMOUNT, SMSG_DISMOUNTswap);
    }
    if (opcode == Opcode::MSG_MOVE_UPDATE_CAN_FLY) {
        wrath::MSG_MOVE_UPDATE_CAN_FLY_Server MSG_MOVE_UPDATE_CAN_FLYswap(other.MSG_MOVE_UPDATE_CAN_FLY);
        std::swap(this->MSG_MOVE_UPDATE_CAN_FLY, MSG_MOVE_UPDATE_CAN_FLYswap);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        wrath::MSG_RAID_READY_CHECK_CONFIRM_Server MSG_RAID_READY_CHECK_CONFIRMswap(other.MSG_RAID_READY_CHECK_CONFIRM);
        std::swap(this->MSG_RAID_READY_CHECK_CONFIRM, MSG_RAID_READY_CHECK_CONFIRMswap);
    }
    if (opcode == Opcode::SMSG_GM_MESSAGECHAT) {
        wrath::SMSG_GM_MESSAGECHAT SMSG_GM_MESSAGECHATswap(other.SMSG_GM_MESSAGECHAT);
        std::swap(this->SMSG_GM_MESSAGECHAT, SMSG_GM_MESSAGECHATswap);
    }
    if (opcode == Opcode::SMSG_CLEAR_TARGET) {
        wrath::SMSG_CLEAR_TARGET SMSG_CLEAR_TARGETswap(other.SMSG_CLEAR_TARGET);
        std::swap(this->SMSG_CLEAR_TARGET, SMSG_CLEAR_TARGETswap);
    }
    if (opcode == Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) {
        wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD SMSG_CROSSED_INEBRIATION_THRESHOLDswap(other.SMSG_CROSSED_INEBRIATION_THRESHOLD);
        std::swap(this->SMSG_CROSSED_INEBRIATION_THRESHOLD, SMSG_CROSSED_INEBRIATION_THRESHOLDswap);
    }
    if (opcode == Opcode::SMSG_KICK_REASON) {
        wrath::SMSG_KICK_REASON SMSG_KICK_REASONswap(other.SMSG_KICK_REASON);
        std::swap(this->SMSG_KICK_REASON, SMSG_KICK_REASONswap);
    }
    if (opcode == Opcode::SMSG_COMPLAIN_RESULT) {
        wrath::SMSG_COMPLAIN_RESULT SMSG_COMPLAIN_RESULTswap(other.SMSG_COMPLAIN_RESULT);
        std::swap(this->SMSG_COMPLAIN_RESULT, SMSG_COMPLAIN_RESULTswap);
    }
    if (opcode == Opcode::SMSG_FEATURE_SYSTEM_STATUS) {
        wrath::SMSG_FEATURE_SYSTEM_STATUS SMSG_FEATURE_SYSTEM_STATUSswap(other.SMSG_FEATURE_SYSTEM_STATUS);
        std::swap(this->SMSG_FEATURE_SYSTEM_STATUS, SMSG_FEATURE_SYSTEM_STATUSswap);
    }
    if (opcode == Opcode::SMSG_CHANNEL_MEMBER_COUNT) {
        wrath::SMSG_CHANNEL_MEMBER_COUNT SMSG_CHANNEL_MEMBER_COUNTswap(other.SMSG_CHANNEL_MEMBER_COUNT);
        std::swap(this->SMSG_CHANNEL_MEMBER_COUNT, SMSG_CHANNEL_MEMBER_COUNTswap);
    }
    if (opcode == Opcode::SMSG_GUILD_BANK_LIST) {
        wrath::SMSG_GUILD_BANK_LIST SMSG_GUILD_BANK_LISTswap(other.SMSG_GUILD_BANK_LIST);
        std::swap(this->SMSG_GUILD_BANK_LIST, SMSG_GUILD_BANK_LISTswap);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        wrath::MSG_GUILD_BANK_LOG_QUERY_Server MSG_GUILD_BANK_LOG_QUERYswap(other.MSG_GUILD_BANK_LOG_QUERY);
        std::swap(this->MSG_GUILD_BANK_LOG_QUERY, MSG_GUILD_BANK_LOG_QUERYswap);
    }
    if (opcode == Opcode::SMSG_USERLIST_ADD) {
        wrath::SMSG_USERLIST_ADD SMSG_USERLIST_ADDswap(other.SMSG_USERLIST_ADD);
        std::swap(this->SMSG_USERLIST_ADD, SMSG_USERLIST_ADDswap);
    }
    if (opcode == Opcode::SMSG_USERLIST_REMOVE) {
        wrath::SMSG_USERLIST_REMOVE SMSG_USERLIST_REMOVEswap(other.SMSG_USERLIST_REMOVE);
        std::swap(this->SMSG_USERLIST_REMOVE, SMSG_USERLIST_REMOVEswap);
    }
    if (opcode == Opcode::SMSG_USERLIST_UPDATE) {
        wrath::SMSG_USERLIST_UPDATE SMSG_USERLIST_UPDATEswap(other.SMSG_USERLIST_UPDATE);
        std::swap(this->SMSG_USERLIST_UPDATE, SMSG_USERLIST_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_INSPECT_TALENT) {
        wrath::SMSG_INSPECT_TALENT SMSG_INSPECT_TALENTswap(other.SMSG_INSPECT_TALENT);
        std::swap(this->SMSG_INSPECT_TALENT, SMSG_INSPECT_TALENTswap);
    }
    if (opcode == Opcode::SMSG_LOOT_LIST) {
        wrath::SMSG_LOOT_LIST SMSG_LOOT_LISTswap(other.SMSG_LOOT_LIST);
        std::swap(this->SMSG_LOOT_LIST, SMSG_LOOT_LISTswap);
    }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        wrath::MSG_GUILD_PERMISSIONS_Server MSG_GUILD_PERMISSIONSswap(other.MSG_GUILD_PERMISSIONS);
        std::swap(this->MSG_GUILD_PERMISSIONS, MSG_GUILD_PERMISSIONSswap);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server MSG_GUILD_BANK_MONEY_WITHDRAWNswap(other.MSG_GUILD_BANK_MONEY_WITHDRAWN);
        std::swap(this->MSG_GUILD_BANK_MONEY_WITHDRAWN, MSG_GUILD_BANK_MONEY_WITHDRAWNswap);
    }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        wrath::MSG_GUILD_EVENT_LOG_QUERY_Server MSG_GUILD_EVENT_LOG_QUERYswap(other.MSG_GUILD_EVENT_LOG_QUERY);
        std::swap(this->MSG_GUILD_EVENT_LOG_QUERY, MSG_GUILD_EVENT_LOG_QUERYswap);
    }
    if (opcode == Opcode::SMSG_MIRRORIMAGE_DATA) {
        wrath::SMSG_MIRRORIMAGE_DATA SMSG_MIRRORIMAGE_DATAswap(other.SMSG_MIRRORIMAGE_DATA);
        std::swap(this->SMSG_MIRRORIMAGE_DATA, SMSG_MIRRORIMAGE_DATAswap);
    }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        wrath::MSG_QUERY_GUILD_BANK_TEXT_Server MSG_QUERY_GUILD_BANK_TEXTswap(other.MSG_QUERY_GUILD_BANK_TEXT);
        std::swap(this->MSG_QUERY_GUILD_BANK_TEXT, MSG_QUERY_GUILD_BANK_TEXTswap);
    }
    if (opcode == Opcode::SMSG_OVERRIDE_LIGHT) {
        wrath::SMSG_OVERRIDE_LIGHT SMSG_OVERRIDE_LIGHTswap(other.SMSG_OVERRIDE_LIGHT);
        std::swap(this->SMSG_OVERRIDE_LIGHT, SMSG_OVERRIDE_LIGHTswap);
    }
    if (opcode == Opcode::SMSG_TOTEM_CREATED) {
        wrath::SMSG_TOTEM_CREATED SMSG_TOTEM_CREATEDswap(other.SMSG_TOTEM_CREATED);
        std::swap(this->SMSG_TOTEM_CREATED, SMSG_TOTEM_CREATEDswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) {
        wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE SMSG_QUESTGIVER_STATUS_MULTIPLEswap(other.SMSG_QUESTGIVER_STATUS_MULTIPLE);
        std::swap(this->SMSG_QUESTGIVER_STATUS_MULTIPLE, SMSG_QUESTGIVER_STATUS_MULTIPLEswap);
    }
    if (opcode == Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) {
        wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT SMSG_SET_PLAYER_DECLINED_NAMES_RESULTswap(other.SMSG_SET_PLAYER_DECLINED_NAMES_RESULT);
        std::swap(this->SMSG_SET_PLAYER_DECLINED_NAMES_RESULT, SMSG_SET_PLAYER_DECLINED_NAMES_RESULTswap);
    }
    if (opcode == Opcode::SMSG_SEND_UNLEARN_SPELLS) {
        wrath::SMSG_SEND_UNLEARN_SPELLS SMSG_SEND_UNLEARN_SPELLSswap(other.SMSG_SEND_UNLEARN_SPELLS);
        std::swap(this->SMSG_SEND_UNLEARN_SPELLS, SMSG_SEND_UNLEARN_SPELLSswap);
    }
    if (opcode == Opcode::SMSG_PROPOSE_LEVEL_GRANT) {
        wrath::SMSG_PROPOSE_LEVEL_GRANT SMSG_PROPOSE_LEVEL_GRANTswap(other.SMSG_PROPOSE_LEVEL_GRANT);
        std::swap(this->SMSG_PROPOSE_LEVEL_GRANT, SMSG_PROPOSE_LEVEL_GRANTswap);
    }
    if (opcode == Opcode::SMSG_REFER_A_FRIEND_FAILURE) {
        wrath::SMSG_REFER_A_FRIEND_FAILURE SMSG_REFER_A_FRIEND_FAILUREswap(other.SMSG_REFER_A_FRIEND_FAILURE);
        std::swap(this->SMSG_REFER_A_FRIEND_FAILURE, SMSG_REFER_A_FRIEND_FAILUREswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_FLYING) {
        wrath::SMSG_SPLINE_MOVE_SET_FLYING SMSG_SPLINE_MOVE_SET_FLYINGswap(other.SMSG_SPLINE_MOVE_SET_FLYING);
        std::swap(this->SMSG_SPLINE_MOVE_SET_FLYING, SMSG_SPLINE_MOVE_SET_FLYINGswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) {
        wrath::SMSG_SPLINE_MOVE_UNSET_FLYING SMSG_SPLINE_MOVE_UNSET_FLYINGswap(other.SMSG_SPLINE_MOVE_UNSET_FLYING);
        std::swap(this->SMSG_SPLINE_MOVE_UNSET_FLYING, SMSG_SPLINE_MOVE_UNSET_FLYINGswap);
    }
    if (opcode == Opcode::SMSG_ENABLE_BARBER_SHOP) {
        wrath::SMSG_ENABLE_BARBER_SHOP SMSG_ENABLE_BARBER_SHOPswap(other.SMSG_ENABLE_BARBER_SHOP);
        std::swap(this->SMSG_ENABLE_BARBER_SHOP, SMSG_ENABLE_BARBER_SHOPswap);
    }
    if (opcode == Opcode::SMSG_BARBER_SHOP_RESULT) {
        wrath::SMSG_BARBER_SHOP_RESULT SMSG_BARBER_SHOP_RESULTswap(other.SMSG_BARBER_SHOP_RESULT);
        std::swap(this->SMSG_BARBER_SHOP_RESULT, SMSG_BARBER_SHOP_RESULTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_CALENDAR) {
        wrath::SMSG_CALENDAR_SEND_CALENDAR SMSG_CALENDAR_SEND_CALENDARswap(other.SMSG_CALENDAR_SEND_CALENDAR);
        std::swap(this->SMSG_CALENDAR_SEND_CALENDAR, SMSG_CALENDAR_SEND_CALENDARswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_EVENT) {
        wrath::SMSG_CALENDAR_SEND_EVENT SMSG_CALENDAR_SEND_EVENTswap(other.SMSG_CALENDAR_SEND_EVENT);
        std::swap(this->SMSG_CALENDAR_SEND_EVENT, SMSG_CALENDAR_SEND_EVENTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_FILTER_GUILD) {
        wrath::SMSG_CALENDAR_FILTER_GUILD SMSG_CALENDAR_FILTER_GUILDswap(other.SMSG_CALENDAR_FILTER_GUILD);
        std::swap(this->SMSG_CALENDAR_FILTER_GUILD, SMSG_CALENDAR_FILTER_GUILDswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_ARENA_TEAM) {
        wrath::SMSG_CALENDAR_ARENA_TEAM SMSG_CALENDAR_ARENA_TEAMswap(other.SMSG_CALENDAR_ARENA_TEAM);
        std::swap(this->SMSG_CALENDAR_ARENA_TEAM, SMSG_CALENDAR_ARENA_TEAMswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE) {
        wrath::SMSG_CALENDAR_EVENT_INVITE SMSG_CALENDAR_EVENT_INVITEswap(other.SMSG_CALENDAR_EVENT_INVITE);
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE, SMSG_CALENDAR_EVENT_INVITEswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) {
        wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED SMSG_CALENDAR_EVENT_INVITE_REMOVEDswap(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED);
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE_REMOVED, SMSG_CALENDAR_EVENT_INVITE_REMOVEDswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_STATUS) {
        wrath::SMSG_CALENDAR_EVENT_STATUS SMSG_CALENDAR_EVENT_STATUSswap(other.SMSG_CALENDAR_EVENT_STATUS);
        std::swap(this->SMSG_CALENDAR_EVENT_STATUS, SMSG_CALENDAR_EVENT_STATUSswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_COMMAND_RESULT) {
        wrath::SMSG_CALENDAR_COMMAND_RESULT SMSG_CALENDAR_COMMAND_RESULTswap(other.SMSG_CALENDAR_COMMAND_RESULT);
        std::swap(this->SMSG_CALENDAR_COMMAND_RESULT, SMSG_CALENDAR_COMMAND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) {
        wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED SMSG_CALENDAR_RAID_LOCKOUT_ADDEDswap(other.SMSG_CALENDAR_RAID_LOCKOUT_ADDED);
        std::swap(this->SMSG_CALENDAR_RAID_LOCKOUT_ADDED, SMSG_CALENDAR_RAID_LOCKOUT_ADDEDswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) {
        wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED SMSG_CALENDAR_RAID_LOCKOUT_REMOVEDswap(other.SMSG_CALENDAR_RAID_LOCKOUT_REMOVED);
        std::swap(this->SMSG_CALENDAR_RAID_LOCKOUT_REMOVED, SMSG_CALENDAR_RAID_LOCKOUT_REMOVEDswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT SMSG_CALENDAR_EVENT_INVITE_ALERTswap(other.SMSG_CALENDAR_EVENT_INVITE_ALERT);
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE_ALERT, SMSG_CALENDAR_EVENT_INVITE_ALERTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERTswap(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT);
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT, SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT SMSG_CALENDAR_EVENT_REMOVED_ALERTswap(other.SMSG_CALENDAR_EVENT_REMOVED_ALERT);
        std::swap(this->SMSG_CALENDAR_EVENT_REMOVED_ALERT, SMSG_CALENDAR_EVENT_REMOVED_ALERTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT SMSG_CALENDAR_EVENT_UPDATED_ALERTswap(other.SMSG_CALENDAR_EVENT_UPDATED_ALERT);
        std::swap(this->SMSG_CALENDAR_EVENT_UPDATED_ALERT, SMSG_CALENDAR_EVENT_UPDATED_ALERTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERTswap(other.SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT);
        std::swap(this->SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT, SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        wrath::CMSG_CALENDAR_GET_NUM_PENDING CMSG_CALENDAR_GET_NUM_PENDINGswap(other.CMSG_CALENDAR_GET_NUM_PENDING);
        std::swap(this->CMSG_CALENDAR_GET_NUM_PENDING, CMSG_CALENDAR_GET_NUM_PENDINGswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) {
        wrath::SMSG_CALENDAR_SEND_NUM_PENDING SMSG_CALENDAR_SEND_NUM_PENDINGswap(other.SMSG_CALENDAR_SEND_NUM_PENDING);
        std::swap(this->SMSG_CALENDAR_SEND_NUM_PENDING, SMSG_CALENDAR_SEND_NUM_PENDINGswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH_RATE) {
        wrath::MSG_MOVE_SET_PITCH_RATE_Server MSG_MOVE_SET_PITCH_RATEswap(other.MSG_MOVE_SET_PITCH_RATE);
        std::swap(this->MSG_MOVE_SET_PITCH_RATE, MSG_MOVE_SET_PITCH_RATEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) {
        wrath::SMSG_FORCE_PITCH_RATE_CHANGE SMSG_FORCE_PITCH_RATE_CHANGEswap(other.SMSG_FORCE_PITCH_RATE_CHANGE);
        std::swap(this->SMSG_FORCE_PITCH_RATE_CHANGE, SMSG_FORCE_PITCH_RATE_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) {
        wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES SMSG_CALENDAR_EVENT_INVITE_NOTESswap(other.SMSG_CALENDAR_EVENT_INVITE_NOTES);
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE_NOTES, SMSG_CALENDAR_EVENT_INVITE_NOTESswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERTswap(other.SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT);
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT, SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERTswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) {
        wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE SMSG_UPDATE_ACCOUNT_DATA_COMPLETEswap(other.SMSG_UPDATE_ACCOUNT_DATA_COMPLETE);
        std::swap(this->SMSG_UPDATE_ACCOUNT_DATA_COMPLETE, SMSG_UPDATE_ACCOUNT_DATA_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_TRIGGER_MOVIE) {
        wrath::SMSG_TRIGGER_MOVIE SMSG_TRIGGER_MOVIEswap(other.SMSG_TRIGGER_MOVIE);
        std::swap(this->SMSG_TRIGGER_MOVIE, SMSG_TRIGGER_MOVIEswap);
    }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_EARNED) {
        wrath::SMSG_ACHIEVEMENT_EARNED SMSG_ACHIEVEMENT_EARNEDswap(other.SMSG_ACHIEVEMENT_EARNED);
        std::swap(this->SMSG_ACHIEVEMENT_EARNED, SMSG_ACHIEVEMENT_EARNEDswap);
    }
    if (opcode == Opcode::SMSG_CRITERIA_UPDATE) {
        wrath::SMSG_CRITERIA_UPDATE SMSG_CRITERIA_UPDATEswap(other.SMSG_CRITERIA_UPDATE);
        std::swap(this->SMSG_CRITERIA_UPDATE, SMSG_CRITERIA_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) {
        wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS SMSG_RESPOND_INSPECT_ACHIEVEMENTSswap(other.SMSG_RESPOND_INSPECT_ACHIEVEMENTS);
        std::swap(this->SMSG_RESPOND_INSPECT_ACHIEVEMENTS, SMSG_RESPOND_INSPECT_ACHIEVEMENTSswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) {
        wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL SMSG_QUESTUPDATE_ADD_PVP_KILLswap(other.SMSG_QUESTUPDATE_ADD_PVP_KILL);
        std::swap(this->SMSG_QUESTUPDATE_ADD_PVP_KILL, SMSG_QUESTUPDATE_ADD_PVP_KILLswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) {
        wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED SMSG_CALENDAR_RAID_LOCKOUT_UPDATEDswap(other.SMSG_CALENDAR_RAID_LOCKOUT_UPDATED);
        std::swap(this->SMSG_CALENDAR_RAID_LOCKOUT_UPDATED, SMSG_CALENDAR_RAID_LOCKOUT_UPDATEDswap);
    }
    if (opcode == Opcode::SMSG_CHAR_CUSTOMIZE) {
        wrath::SMSG_CHAR_CUSTOMIZE SMSG_CHAR_CUSTOMIZEswap(other.SMSG_CHAR_CUSTOMIZE);
        std::swap(this->SMSG_CHAR_CUSTOMIZE, SMSG_CHAR_CUSTOMIZEswap);
    }
    if (opcode == Opcode::SMSG_SET_PHASE_SHIFT) {
        wrath::SMSG_SET_PHASE_SHIFT SMSG_SET_PHASE_SHIFTswap(other.SMSG_SET_PHASE_SHIFT);
        std::swap(this->SMSG_SET_PHASE_SHIFT, SMSG_SET_PHASE_SHIFTswap);
    }
    if (opcode == Opcode::SMSG_ALL_ACHIEVEMENT_DATA) {
        wrath::SMSG_ALL_ACHIEVEMENT_DATA SMSG_ALL_ACHIEVEMENT_DATAswap(other.SMSG_ALL_ACHIEVEMENT_DATA);
        std::swap(this->SMSG_ALL_ACHIEVEMENT_DATA, SMSG_ALL_ACHIEVEMENT_DATAswap);
    }
    if (opcode == Opcode::SMSG_POWER_UPDATE) {
        wrath::SMSG_POWER_UPDATE SMSG_POWER_UPDATEswap(other.SMSG_POWER_UPDATE);
        std::swap(this->SMSG_POWER_UPDATE, SMSG_POWER_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_HIGHEST_THREAT_UPDATE) {
        wrath::SMSG_HIGHEST_THREAT_UPDATE SMSG_HIGHEST_THREAT_UPDATEswap(other.SMSG_HIGHEST_THREAT_UPDATE);
        std::swap(this->SMSG_HIGHEST_THREAT_UPDATE, SMSG_HIGHEST_THREAT_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_THREAT_UPDATE) {
        wrath::SMSG_THREAT_UPDATE SMSG_THREAT_UPDATEswap(other.SMSG_THREAT_UPDATE);
        std::swap(this->SMSG_THREAT_UPDATE, SMSG_THREAT_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_THREAT_REMOVE) {
        wrath::SMSG_THREAT_REMOVE SMSG_THREAT_REMOVEswap(other.SMSG_THREAT_REMOVE);
        std::swap(this->SMSG_THREAT_REMOVE, SMSG_THREAT_REMOVEswap);
    }
    if (opcode == Opcode::SMSG_THREAT_CLEAR) {
        wrath::SMSG_THREAT_CLEAR SMSG_THREAT_CLEARswap(other.SMSG_THREAT_CLEAR);
        std::swap(this->SMSG_THREAT_CLEAR, SMSG_THREAT_CLEARswap);
    }
    if (opcode == Opcode::SMSG_CONVERT_RUNE) {
        wrath::SMSG_CONVERT_RUNE SMSG_CONVERT_RUNEswap(other.SMSG_CONVERT_RUNE);
        std::swap(this->SMSG_CONVERT_RUNE, SMSG_CONVERT_RUNEswap);
    }
    if (opcode == Opcode::SMSG_RESYNC_RUNES) {
        wrath::SMSG_RESYNC_RUNES SMSG_RESYNC_RUNESswap(other.SMSG_RESYNC_RUNES);
        std::swap(this->SMSG_RESYNC_RUNES, SMSG_RESYNC_RUNESswap);
    }
    if (opcode == Opcode::SMSG_ADD_RUNE_POWER) {
        wrath::SMSG_ADD_RUNE_POWER SMSG_ADD_RUNE_POWERswap(other.SMSG_ADD_RUNE_POWER);
        std::swap(this->SMSG_ADD_RUNE_POWER, SMSG_ADD_RUNE_POWERswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_LIST_PENDING_SALES) {
        wrath::SMSG_AUCTION_LIST_PENDING_SALES SMSG_AUCTION_LIST_PENDING_SALESswap(other.SMSG_AUCTION_LIST_PENDING_SALES);
        std::swap(this->SMSG_AUCTION_LIST_PENDING_SALES, SMSG_AUCTION_LIST_PENDING_SALESswap);
    }
    if (opcode == Opcode::SMSG_MODIFY_COOLDOWN) {
        wrath::SMSG_MODIFY_COOLDOWN SMSG_MODIFY_COOLDOWNswap(other.SMSG_MODIFY_COOLDOWN);
        std::swap(this->SMSG_MODIFY_COOLDOWN, SMSG_MODIFY_COOLDOWNswap);
    }
    if (opcode == Opcode::SMSG_PET_UPDATE_COMBO_POINTS) {
        wrath::SMSG_PET_UPDATE_COMBO_POINTS SMSG_PET_UPDATE_COMBO_POINTSswap(other.SMSG_PET_UPDATE_COMBO_POINTS);
        std::swap(this->SMSG_PET_UPDATE_COMBO_POINTS, SMSG_PET_UPDATE_COMBO_POINTSswap);
    }
    if (opcode == Opcode::SMSG_PRE_RESURRECT) {
        wrath::SMSG_PRE_RESURRECT SMSG_PRE_RESURRECTswap(other.SMSG_PRE_RESURRECT);
        std::swap(this->SMSG_PRE_RESURRECT, SMSG_PRE_RESURRECTswap);
    }
    if (opcode == Opcode::SMSG_AURA_UPDATE_ALL) {
        wrath::SMSG_AURA_UPDATE_ALL SMSG_AURA_UPDATE_ALLswap(other.SMSG_AURA_UPDATE_ALL);
        std::swap(this->SMSG_AURA_UPDATE_ALL, SMSG_AURA_UPDATE_ALLswap);
    }
    if (opcode == Opcode::SMSG_AURA_UPDATE) {
        wrath::SMSG_AURA_UPDATE SMSG_AURA_UPDATEswap(other.SMSG_AURA_UPDATE);
        std::swap(this->SMSG_AURA_UPDATE, SMSG_AURA_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) {
        wrath::SMSG_SERVER_FIRST_ACHIEVEMENT SMSG_SERVER_FIRST_ACHIEVEMENTswap(other.SMSG_SERVER_FIRST_ACHIEVEMENT);
        std::swap(this->SMSG_SERVER_FIRST_ACHIEVEMENT, SMSG_SERVER_FIRST_ACHIEVEMENTswap);
    }
    if (opcode == Opcode::SMSG_PET_LEARNED_SPELL) {
        wrath::SMSG_PET_LEARNED_SPELL SMSG_PET_LEARNED_SPELLswap(other.SMSG_PET_LEARNED_SPELL);
        std::swap(this->SMSG_PET_LEARNED_SPELL, SMSG_PET_LEARNED_SPELLswap);
    }
    if (opcode == Opcode::SMSG_PET_UNLEARNED_SPELL) {
        wrath::SMSG_PET_UNLEARNED_SPELL SMSG_PET_UNLEARNED_SPELLswap(other.SMSG_PET_UNLEARNED_SPELL);
        std::swap(this->SMSG_PET_UNLEARNED_SPELL, SMSG_PET_UNLEARNED_SPELLswap);
    }
    if (opcode == Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) {
        wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURAswap(other.SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA);
        std::swap(this->SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA, SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURAswap);
    }
    if (opcode == Opcode::SMSG_CRITERIA_DELETED) {
        wrath::SMSG_CRITERIA_DELETED SMSG_CRITERIA_DELETEDswap(other.SMSG_CRITERIA_DELETED);
        std::swap(this->SMSG_CRITERIA_DELETED, SMSG_CRITERIA_DELETEDswap);
    }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_DELETED) {
        wrath::SMSG_ACHIEVEMENT_DELETED SMSG_ACHIEVEMENT_DELETEDswap(other.SMSG_ACHIEVEMENT_DELETED);
        std::swap(this->SMSG_ACHIEVEMENT_DELETED, SMSG_ACHIEVEMENT_DELETEDswap);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) {
        wrath::SMSG_BATTLEGROUND_INFO_THROTTLED SMSG_BATTLEGROUND_INFO_THROTTLEDswap(other.SMSG_BATTLEGROUND_INFO_THROTTLED);
        std::swap(this->SMSG_BATTLEGROUND_INFO_THROTTLED, SMSG_BATTLEGROUND_INFO_THROTTLEDswap);
    }
    if (opcode == Opcode::SMSG_PLAYER_VEHICLE_DATA) {
        wrath::SMSG_PLAYER_VEHICLE_DATA SMSG_PLAYER_VEHICLE_DATAswap(other.SMSG_PLAYER_VEHICLE_DATA);
        std::swap(this->SMSG_PLAYER_VEHICLE_DATA, SMSG_PLAYER_VEHICLE_DATAswap);
    }
    if (opcode == Opcode::SMSG_PET_GUIDS) {
        wrath::SMSG_PET_GUIDS SMSG_PET_GUIDSswap(other.SMSG_PET_GUIDS);
        std::swap(this->SMSG_PET_GUIDS, SMSG_PET_GUIDSswap);
    }
    if (opcode == Opcode::SMSG_CLIENTCACHE_VERSION) {
        wrath::SMSG_CLIENTCACHE_VERSION SMSG_CLIENTCACHE_VERSIONswap(other.SMSG_CLIENTCACHE_VERSION);
        std::swap(this->SMSG_CLIENTCACHE_VERSION, SMSG_CLIENTCACHE_VERSIONswap);
    }
    if (opcode == Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) {
        wrath::SMSG_ITEM_REFUND_INFO_RESPONSE SMSG_ITEM_REFUND_INFO_RESPONSEswap(other.SMSG_ITEM_REFUND_INFO_RESPONSE);
        std::swap(this->SMSG_ITEM_REFUND_INFO_RESPONSE, SMSG_ITEM_REFUND_INFO_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_ITEM_REFUND_RESULT) {
        wrath::SMSG_ITEM_REFUND_RESULT SMSG_ITEM_REFUND_RESULTswap(other.SMSG_ITEM_REFUND_RESULT);
        std::swap(this->SMSG_ITEM_REFUND_RESULT, SMSG_ITEM_REFUND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) {
        wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSEswap(other.SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE);
        std::swap(this->SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE, SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) {
        wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION SMSG_CALENDAR_CLEAR_PENDING_ACTIONswap(other.SMSG_CALENDAR_CLEAR_PENDING_ACTION);
        std::swap(this->SMSG_CALENDAR_CLEAR_PENDING_ACTION, SMSG_CALENDAR_CLEAR_PENDING_ACTIONswap);
    }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_LIST) {
        wrath::SMSG_EQUIPMENT_SET_LIST SMSG_EQUIPMENT_SET_LISTswap(other.SMSG_EQUIPMENT_SET_LIST);
        std::swap(this->SMSG_EQUIPMENT_SET_LIST, SMSG_EQUIPMENT_SET_LISTswap);
    }
    if (opcode == Opcode::SMSG_SET_PROJECTILE_POSITION) {
        wrath::SMSG_SET_PROJECTILE_POSITION SMSG_SET_PROJECTILE_POSITIONswap(other.SMSG_SET_PROJECTILE_POSITION);
        std::swap(this->SMSG_SET_PROJECTILE_POSITION, SMSG_SET_PROJECTILE_POSITIONswap);
    }
    if (opcode == Opcode::SMSG_TALENTS_INFO) {
        wrath::SMSG_TALENTS_INFO SMSG_TALENTS_INFOswap(other.SMSG_TALENTS_INFO);
        std::swap(this->SMSG_TALENTS_INFO, SMSG_TALENTS_INFOswap);
    }
    if (opcode == Opcode::SMSG_ARENA_UNIT_DESTROYED) {
        wrath::SMSG_ARENA_UNIT_DESTROYED SMSG_ARENA_UNIT_DESTROYEDswap(other.SMSG_ARENA_UNIT_DESTROYED);
        std::swap(this->SMSG_ARENA_UNIT_DESTROYED, SMSG_ARENA_UNIT_DESTROYEDswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) {
        wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUEDswap(other.SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED);
        std::swap(this->SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED, SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUEDswap);
    }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_DISABLE) {
        wrath::SMSG_MOVE_GRAVITY_DISABLE SMSG_MOVE_GRAVITY_DISABLEswap(other.SMSG_MOVE_GRAVITY_DISABLE);
        std::swap(this->SMSG_MOVE_GRAVITY_DISABLE, SMSG_MOVE_GRAVITY_DISABLEswap);
    }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_ENABLE) {
        wrath::SMSG_MOVE_GRAVITY_ENABLE SMSG_MOVE_GRAVITY_ENABLEswap(other.SMSG_MOVE_GRAVITY_ENABLE);
        std::swap(this->SMSG_MOVE_GRAVITY_ENABLE, SMSG_MOVE_GRAVITY_ENABLEswap);
    }
    if (opcode == Opcode::MSG_MOVE_GRAVITY_CHNG) {
        wrath::MSG_MOVE_GRAVITY_CHNG_Server MSG_MOVE_GRAVITY_CHNGswap(other.MSG_MOVE_GRAVITY_CHNG);
        std::swap(this->MSG_MOVE_GRAVITY_CHNG, MSG_MOVE_GRAVITY_CHNGswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) {
        wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE SMSG_SPLINE_MOVE_GRAVITY_DISABLEswap(other.SMSG_SPLINE_MOVE_GRAVITY_DISABLE);
        std::swap(this->SMSG_SPLINE_MOVE_GRAVITY_DISABLE, SMSG_SPLINE_MOVE_GRAVITY_DISABLEswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) {
        wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE SMSG_SPLINE_MOVE_GRAVITY_ENABLEswap(other.SMSG_SPLINE_MOVE_GRAVITY_ENABLE);
        std::swap(this->SMSG_SPLINE_MOVE_GRAVITY_ENABLE, SMSG_SPLINE_MOVE_GRAVITY_ENABLEswap);
    }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) {
        wrath::SMSG_EQUIPMENT_SET_USE_RESULT SMSG_EQUIPMENT_SET_USE_RESULTswap(other.SMSG_EQUIPMENT_SET_USE_RESULT);
        std::swap(this->SMSG_EQUIPMENT_SET_USE_RESULT, SMSG_EQUIPMENT_SET_USE_RESULTswap);
    }
    if (opcode == Opcode::SMSG_CHAR_FACTION_CHANGE) {
        wrath::SMSG_CHAR_FACTION_CHANGE SMSG_CHAR_FACTION_CHANGEswap(other.SMSG_CHAR_FACTION_CHANGE);
        std::swap(this->SMSG_CHAR_FACTION_CHANGE, SMSG_CHAR_FACTION_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) {
        wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE SMSG_BATTLEFIELD_MGR_ENTRY_INVITEswap(other.SMSG_BATTLEFIELD_MGR_ENTRY_INVITE);
        std::swap(this->SMSG_BATTLEFIELD_MGR_ENTRY_INVITE, SMSG_BATTLEFIELD_MGR_ENTRY_INVITEswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) {
        wrath::SMSG_BATTLEFIELD_MGR_ENTERED SMSG_BATTLEFIELD_MGR_ENTEREDswap(other.SMSG_BATTLEFIELD_MGR_ENTERED);
        std::swap(this->SMSG_BATTLEFIELD_MGR_ENTERED, SMSG_BATTLEFIELD_MGR_ENTEREDswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) {
        wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE SMSG_BATTLEFIELD_MGR_QUEUE_INVITEswap(other.SMSG_BATTLEFIELD_MGR_QUEUE_INVITE);
        std::swap(this->SMSG_BATTLEFIELD_MGR_QUEUE_INVITE, SMSG_BATTLEFIELD_MGR_QUEUE_INVITEswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) {
        wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSEswap(other.SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE);
        std::swap(this->SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE, SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) {
        wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING SMSG_BATTLEFIELD_MGR_EJECT_PENDINGswap(other.SMSG_BATTLEFIELD_MGR_EJECT_PENDING);
        std::swap(this->SMSG_BATTLEFIELD_MGR_EJECT_PENDING, SMSG_BATTLEFIELD_MGR_EJECT_PENDINGswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) {
        wrath::SMSG_BATTLEFIELD_MGR_EJECTED SMSG_BATTLEFIELD_MGR_EJECTEDswap(other.SMSG_BATTLEFIELD_MGR_EJECTED);
        std::swap(this->SMSG_BATTLEFIELD_MGR_EJECTED, SMSG_BATTLEFIELD_MGR_EJECTEDswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) {
        wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE SMSG_BATTLEFIELD_MGR_STATE_CHANGEswap(other.SMSG_BATTLEFIELD_MGR_STATE_CHANGE);
        std::swap(this->SMSG_BATTLEFIELD_MGR_STATE_CHANGE, SMSG_BATTLEFIELD_MGR_STATE_CHANGEswap);
    }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        wrath::MSG_SET_RAID_DIFFICULTY_Server MSG_SET_RAID_DIFFICULTYswap(other.MSG_SET_RAID_DIFFICULTY);
        std::swap(this->MSG_SET_RAID_DIFFICULTY, MSG_SET_RAID_DIFFICULTYswap);
    }
    if (opcode == Opcode::SMSG_TOGGLE_XP_GAIN) {
        wrath::SMSG_TOGGLE_XP_GAIN SMSG_TOGGLE_XP_GAINswap(other.SMSG_TOGGLE_XP_GAIN);
        std::swap(this->SMSG_TOGGLE_XP_GAIN, SMSG_TOGGLE_XP_GAINswap);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_DB_ERROR) {
        wrath::SMSG_GMRESPONSE_DB_ERROR SMSG_GMRESPONSE_DB_ERRORswap(other.SMSG_GMRESPONSE_DB_ERROR);
        std::swap(this->SMSG_GMRESPONSE_DB_ERROR, SMSG_GMRESPONSE_DB_ERRORswap);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_RECEIVED) {
        wrath::SMSG_GMRESPONSE_RECEIVED SMSG_GMRESPONSE_RECEIVEDswap(other.SMSG_GMRESPONSE_RECEIVED);
        std::swap(this->SMSG_GMRESPONSE_RECEIVED, SMSG_GMRESPONSE_RECEIVEDswap);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) {
        wrath::SMSG_GMRESPONSE_STATUS_UPDATE SMSG_GMRESPONSE_STATUS_UPDATEswap(other.SMSG_GMRESPONSE_STATUS_UPDATE);
        std::swap(this->SMSG_GMRESPONSE_STATUS_UPDATE, SMSG_GMRESPONSE_STATUS_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE SMSG_WORLD_STATE_UI_TIMER_UPDATEswap(other.SMSG_WORLD_STATE_UI_TIMER_UPDATE);
        std::swap(this->SMSG_WORLD_STATE_UI_TIMER_UPDATE, SMSG_WORLD_STATE_UI_TIMER_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) {
        wrath::SMSG_TALENTS_INVOLUNTARILY_RESET SMSG_TALENTS_INVOLUNTARILY_RESETswap(other.SMSG_TALENTS_INVOLUNTARILY_RESET);
        std::swap(this->SMSG_TALENTS_INVOLUNTARILY_RESET, SMSG_TALENTS_INVOLUNTARILY_RESETswap);
    }
    if (opcode == Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) {
        wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE SMSG_QUERY_QUESTS_COMPLETED_RESPONSEswap(other.SMSG_QUERY_QUESTS_COMPLETED_RESPONSE);
        std::swap(this->SMSG_QUERY_QUESTS_COMPLETED_RESPONSE, SMSG_QUERY_QUESTS_COMPLETED_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) {
        wrath::SMSG_CORPSE_NOT_IN_INSTANCE SMSG_CORPSE_NOT_IN_INSTANCEswap(other.SMSG_CORPSE_NOT_IN_INSTANCE);
        std::swap(this->SMSG_CORPSE_NOT_IN_INSTANCE, SMSG_CORPSE_NOT_IN_INSTANCEswap);
    }
    if (opcode == Opcode::SMSG_CAMERA_SHAKE) {
        wrath::SMSG_CAMERA_SHAKE SMSG_CAMERA_SHAKEswap(other.SMSG_CAMERA_SHAKE);
        std::swap(this->SMSG_CAMERA_SHAKE, SMSG_CAMERA_SHAKEswap);
    }
    if (opcode == Opcode::SMSG_SOCKET_GEMS_RESULT) {
        wrath::SMSG_SOCKET_GEMS_RESULT SMSG_SOCKET_GEMS_RESULTswap(other.SMSG_SOCKET_GEMS_RESULT);
        std::swap(this->SMSG_SOCKET_GEMS_RESULT, SMSG_SOCKET_GEMS_RESULTswap);
    }
    if (opcode == Opcode::SMSG_REDIRECT_CLIENT) {
        wrath::SMSG_REDIRECT_CLIENT SMSG_REDIRECT_CLIENTswap(other.SMSG_REDIRECT_CLIENT);
        std::swap(this->SMSG_REDIRECT_CLIENT, SMSG_REDIRECT_CLIENTswap);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_COLLISION_HGT) {
        wrath::SMSG_MOVE_SET_COLLISION_HGT SMSG_MOVE_SET_COLLISION_HGTswap(other.SMSG_MOVE_SET_COLLISION_HGT);
        std::swap(this->SMSG_MOVE_SET_COLLISION_HGT, SMSG_MOVE_SET_COLLISION_HGTswap);
    }
    if (opcode == Opcode::SMSG_MULTIPLE_MOVES) {
        wrath::SMSG_MULTIPLE_MOVES SMSG_MULTIPLE_MOVESswap(other.SMSG_MULTIPLE_MOVES);
        std::swap(this->SMSG_MULTIPLE_MOVES, SMSG_MULTIPLE_MOVESswap);
    }
    return *this;
}

/* 4 move constructor */
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(ServerOpcode&& other) noexcept {
    this->opcode = other.opcode;
    other.opcode = Opcode::NONE;
    if (opcode == Opcode::SMSG_CHAR_CREATE) {
        this->SMSG_CHAR_CREATE = std::move(other.SMSG_CHAR_CREATE);
    }
    if (opcode == Opcode::SMSG_CHAR_ENUM) {
        this->SMSG_CHAR_ENUM = std::move(other.SMSG_CHAR_ENUM);
    }
    if (opcode == Opcode::SMSG_CHAR_DELETE) {
        this->SMSG_CHAR_DELETE = std::move(other.SMSG_CHAR_DELETE);
    }
    if (opcode == Opcode::SMSG_NEW_WORLD) {
        this->SMSG_NEW_WORLD = std::move(other.SMSG_NEW_WORLD);
    }
    if (opcode == Opcode::SMSG_TRANSFER_PENDING) {
        this->SMSG_TRANSFER_PENDING = std::move(other.SMSG_TRANSFER_PENDING);
    }
    if (opcode == Opcode::SMSG_TRANSFER_ABORTED) {
        this->SMSG_TRANSFER_ABORTED = std::move(other.SMSG_TRANSFER_ABORTED);
    }
    if (opcode == Opcode::SMSG_CHARACTER_LOGIN_FAILED) {
        this->SMSG_CHARACTER_LOGIN_FAILED = std::move(other.SMSG_CHARACTER_LOGIN_FAILED);
    }
    if (opcode == Opcode::SMSG_LOGIN_SETTIMESPEED) {
        this->SMSG_LOGIN_SETTIMESPEED = std::move(other.SMSG_LOGIN_SETTIMESPEED);
    }
    if (opcode == Opcode::SMSG_LOGOUT_RESPONSE) {
        this->SMSG_LOGOUT_RESPONSE = std::move(other.SMSG_LOGOUT_RESPONSE);
    }
    if (opcode == Opcode::SMSG_LOGOUT_COMPLETE) {
        this->SMSG_LOGOUT_COMPLETE = std::move(other.SMSG_LOGOUT_COMPLETE);
    }
    if (opcode == Opcode::SMSG_LOGOUT_CANCEL_ACK) {
        this->SMSG_LOGOUT_CANCEL_ACK = std::move(other.SMSG_LOGOUT_CANCEL_ACK);
    }
    if (opcode == Opcode::SMSG_NAME_QUERY_RESPONSE) {
        this->SMSG_NAME_QUERY_RESPONSE = std::move(other.SMSG_NAME_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_PET_NAME_QUERY_RESPONSE) {
        this->SMSG_PET_NAME_QUERY_RESPONSE = std::move(other.SMSG_PET_NAME_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_GUILD_QUERY_RESPONSE) {
        this->SMSG_GUILD_QUERY_RESPONSE = std::move(other.SMSG_GUILD_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) {
        this->SMSG_ITEM_QUERY_SINGLE_RESPONSE = std::move(other.SMSG_ITEM_QUERY_SINGLE_RESPONSE);
    }
    if (opcode == Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) {
        this->SMSG_PAGE_TEXT_QUERY_RESPONSE = std::move(other.SMSG_PAGE_TEXT_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_QUEST_QUERY_RESPONSE) {
        this->SMSG_QUEST_QUERY_RESPONSE = std::move(other.SMSG_QUEST_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) {
        this->SMSG_GAMEOBJECT_QUERY_RESPONSE = std::move(other.SMSG_GAMEOBJECT_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_CREATURE_QUERY_RESPONSE) {
        this->SMSG_CREATURE_QUERY_RESPONSE = std::move(other.SMSG_CREATURE_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_WHO) {
        this->SMSG_WHO = std::move(other.SMSG_WHO);
    }
    if (opcode == Opcode::SMSG_WHOIS) {
        this->SMSG_WHOIS = std::move(other.SMSG_WHOIS);
    }
    if (opcode == Opcode::SMSG_CONTACT_LIST) {
        this->SMSG_CONTACT_LIST = std::move(other.SMSG_CONTACT_LIST);
    }
    if (opcode == Opcode::SMSG_FRIEND_STATUS) {
        this->SMSG_FRIEND_STATUS = std::move(other.SMSG_FRIEND_STATUS);
    }
    if (opcode == Opcode::SMSG_GROUP_INVITE) {
        this->SMSG_GROUP_INVITE = std::move(other.SMSG_GROUP_INVITE);
    }
    if (opcode == Opcode::SMSG_GROUP_DECLINE) {
        this->SMSG_GROUP_DECLINE = std::move(other.SMSG_GROUP_DECLINE);
    }
    if (opcode == Opcode::SMSG_GROUP_UNINVITE) {
        this->SMSG_GROUP_UNINVITE = std::move(other.SMSG_GROUP_UNINVITE);
    }
    if (opcode == Opcode::SMSG_GROUP_SET_LEADER) {
        this->SMSG_GROUP_SET_LEADER = std::move(other.SMSG_GROUP_SET_LEADER);
    }
    if (opcode == Opcode::SMSG_GROUP_DESTROYED) {
        this->SMSG_GROUP_DESTROYED = std::move(other.SMSG_GROUP_DESTROYED);
    }
    if (opcode == Opcode::SMSG_GROUP_LIST) {
        this->SMSG_GROUP_LIST = std::move(other.SMSG_GROUP_LIST);
    }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS) {
        this->SMSG_PARTY_MEMBER_STATS = std::move(other.SMSG_PARTY_MEMBER_STATS);
    }
    if (opcode == Opcode::SMSG_PARTY_COMMAND_RESULT) {
        this->SMSG_PARTY_COMMAND_RESULT = std::move(other.SMSG_PARTY_COMMAND_RESULT);
    }
    if (opcode == Opcode::SMSG_GUILD_INVITE) {
        this->SMSG_GUILD_INVITE = std::move(other.SMSG_GUILD_INVITE);
    }
    if (opcode == Opcode::SMSG_GUILD_DECLINE) {
        this->SMSG_GUILD_DECLINE = std::move(other.SMSG_GUILD_DECLINE);
    }
    if (opcode == Opcode::SMSG_GUILD_INFO) {
        this->SMSG_GUILD_INFO = std::move(other.SMSG_GUILD_INFO);
    }
    if (opcode == Opcode::SMSG_GUILD_ROSTER) {
        this->SMSG_GUILD_ROSTER = std::move(other.SMSG_GUILD_ROSTER);
    }
    if (opcode == Opcode::SMSG_GUILD_EVENT) {
        this->SMSG_GUILD_EVENT = std::move(other.SMSG_GUILD_EVENT);
    }
    if (opcode == Opcode::SMSG_GUILD_COMMAND_RESULT) {
        this->SMSG_GUILD_COMMAND_RESULT = std::move(other.SMSG_GUILD_COMMAND_RESULT);
    }
    if (opcode == Opcode::SMSG_MESSAGECHAT) {
        this->SMSG_MESSAGECHAT = std::move(other.SMSG_MESSAGECHAT);
    }
    if (opcode == Opcode::SMSG_CHANNEL_NOTIFY) {
        this->SMSG_CHANNEL_NOTIFY = std::move(other.SMSG_CHANNEL_NOTIFY);
    }
    if (opcode == Opcode::SMSG_CHANNEL_LIST) {
        this->SMSG_CHANNEL_LIST = std::move(other.SMSG_CHANNEL_LIST);
    }
    if (opcode == Opcode::SMSG_UPDATE_OBJECT) {
        this->SMSG_UPDATE_OBJECT = std::move(other.SMSG_UPDATE_OBJECT);
    }
    if (opcode == Opcode::SMSG_DESTROY_OBJECT) {
        this->SMSG_DESTROY_OBJECT = std::move(other.SMSG_DESTROY_OBJECT);
    }
    if (opcode == Opcode::SMSG_READ_ITEM_OK) {
        this->SMSG_READ_ITEM_OK = std::move(other.SMSG_READ_ITEM_OK);
    }
    if (opcode == Opcode::SMSG_READ_ITEM_FAILED) {
        this->SMSG_READ_ITEM_FAILED = std::move(other.SMSG_READ_ITEM_FAILED);
    }
    if (opcode == Opcode::SMSG_ITEM_COOLDOWN) {
        this->SMSG_ITEM_COOLDOWN = std::move(other.SMSG_ITEM_COOLDOWN);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) {
        this->SMSG_GAMEOBJECT_CUSTOM_ANIM = std::move(other.SMSG_GAMEOBJECT_CUSTOM_ANIM);
    }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        this->MSG_MOVE_START_FORWARD = std::move(other.MSG_MOVE_START_FORWARD);
    }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        this->MSG_MOVE_START_BACKWARD = std::move(other.MSG_MOVE_START_BACKWARD);
    }
    if (opcode == Opcode::MSG_MOVE_STOP) {
        this->MSG_MOVE_STOP = std::move(other.MSG_MOVE_STOP);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        this->MSG_MOVE_START_STRAFE_LEFT = std::move(other.MSG_MOVE_START_STRAFE_LEFT);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        this->MSG_MOVE_START_STRAFE_RIGHT = std::move(other.MSG_MOVE_START_STRAFE_RIGHT);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        this->MSG_MOVE_STOP_STRAFE = std::move(other.MSG_MOVE_STOP_STRAFE);
    }
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        this->MSG_MOVE_JUMP = std::move(other.MSG_MOVE_JUMP);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        this->MSG_MOVE_START_TURN_LEFT = std::move(other.MSG_MOVE_START_TURN_LEFT);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        this->MSG_MOVE_START_TURN_RIGHT = std::move(other.MSG_MOVE_START_TURN_RIGHT);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        this->MSG_MOVE_STOP_TURN = std::move(other.MSG_MOVE_STOP_TURN);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        this->MSG_MOVE_START_PITCH_UP = std::move(other.MSG_MOVE_START_PITCH_UP);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        this->MSG_MOVE_START_PITCH_DOWN = std::move(other.MSG_MOVE_START_PITCH_DOWN);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        this->MSG_MOVE_STOP_PITCH = std::move(other.MSG_MOVE_STOP_PITCH);
    }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        this->MSG_MOVE_SET_RUN_MODE = std::move(other.MSG_MOVE_SET_RUN_MODE);
    }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        this->MSG_MOVE_SET_WALK_MODE = std::move(other.MSG_MOVE_SET_WALK_MODE);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_CHEAT) {
        this->MSG_MOVE_TELEPORT_CHEAT = std::move(other.MSG_MOVE_TELEPORT_CHEAT);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        this->MSG_MOVE_TELEPORT_ACK = std::move(other.MSG_MOVE_TELEPORT_ACK);
    }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        this->MSG_MOVE_FALL_LAND = std::move(other.MSG_MOVE_FALL_LAND);
    }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        this->MSG_MOVE_START_SWIM = std::move(other.MSG_MOVE_START_SWIM);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        this->MSG_MOVE_STOP_SWIM = std::move(other.MSG_MOVE_STOP_SWIM);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        this->MSG_MOVE_SET_FACING = std::move(other.MSG_MOVE_SET_FACING);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        this->MSG_MOVE_SET_PITCH = std::move(other.MSG_MOVE_SET_PITCH);
    }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        this->MSG_MOVE_WORLDPORT_ACK = std::move(other.MSG_MOVE_WORLDPORT_ACK);
    }
    if (opcode == Opcode::SMSG_MONSTER_MOVE) {
        this->SMSG_MONSTER_MOVE = std::move(other.SMSG_MONSTER_MOVE);
    }
    if (opcode == Opcode::SMSG_MOVE_WATER_WALK) {
        this->SMSG_MOVE_WATER_WALK = std::move(other.SMSG_MOVE_WATER_WALK);
    }
    if (opcode == Opcode::SMSG_MOVE_LAND_WALK) {
        this->SMSG_MOVE_LAND_WALK = std::move(other.SMSG_MOVE_LAND_WALK);
    }
    if (opcode == Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) {
        this->SMSG_FORCE_RUN_SPEED_CHANGE = std::move(other.SMSG_FORCE_RUN_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) {
        this->SMSG_FORCE_RUN_BACK_SPEED_CHANGE = std::move(other.SMSG_FORCE_RUN_BACK_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) {
        this->SMSG_FORCE_SWIM_SPEED_CHANGE = std::move(other.SMSG_FORCE_SWIM_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_MOVE_ROOT) {
        this->SMSG_FORCE_MOVE_ROOT = std::move(other.SMSG_FORCE_MOVE_ROOT);
    }
    if (opcode == Opcode::SMSG_FORCE_MOVE_UNROOT) {
        this->SMSG_FORCE_MOVE_UNROOT = std::move(other.SMSG_FORCE_MOVE_UNROOT);
    }
    if (opcode == Opcode::MSG_MOVE_ROOT) {
        this->MSG_MOVE_ROOT = std::move(other.MSG_MOVE_ROOT);
    }
    if (opcode == Opcode::MSG_MOVE_UNROOT) {
        this->MSG_MOVE_UNROOT = std::move(other.MSG_MOVE_UNROOT);
    }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        this->MSG_MOVE_HEARTBEAT = std::move(other.MSG_MOVE_HEARTBEAT);
    }
    if (opcode == Opcode::SMSG_MOVE_KNOCK_BACK) {
        this->SMSG_MOVE_KNOCK_BACK = std::move(other.SMSG_MOVE_KNOCK_BACK);
    }
    if (opcode == Opcode::MSG_MOVE_KNOCK_BACK) {
        this->MSG_MOVE_KNOCK_BACK = std::move(other.MSG_MOVE_KNOCK_BACK);
    }
    if (opcode == Opcode::SMSG_MOVE_FEATHER_FALL) {
        this->SMSG_MOVE_FEATHER_FALL = std::move(other.SMSG_MOVE_FEATHER_FALL);
    }
    if (opcode == Opcode::SMSG_MOVE_NORMAL_FALL) {
        this->SMSG_MOVE_NORMAL_FALL = std::move(other.SMSG_MOVE_NORMAL_FALL);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_HOVER) {
        this->SMSG_MOVE_SET_HOVER = std::move(other.SMSG_MOVE_SET_HOVER);
    }
    if (opcode == Opcode::SMSG_MOVE_UNSET_HOVER) {
        this->SMSG_MOVE_UNSET_HOVER = std::move(other.SMSG_MOVE_UNSET_HOVER);
    }
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        this->MSG_MOVE_HOVER = std::move(other.MSG_MOVE_HOVER);
    }
    if (opcode == Opcode::SMSG_TRIGGER_CINEMATIC) {
        this->SMSG_TRIGGER_CINEMATIC = std::move(other.SMSG_TRIGGER_CINEMATIC);
    }
    if (opcode == Opcode::SMSG_TUTORIAL_FLAGS) {
        this->SMSG_TUTORIAL_FLAGS = std::move(other.SMSG_TUTORIAL_FLAGS);
    }
    if (opcode == Opcode::SMSG_EMOTE) {
        this->SMSG_EMOTE = std::move(other.SMSG_EMOTE);
    }
    if (opcode == Opcode::SMSG_TEXT_EMOTE) {
        this->SMSG_TEXT_EMOTE = std::move(other.SMSG_TEXT_EMOTE);
    }
    if (opcode == Opcode::SMSG_INVENTORY_CHANGE_FAILURE) {
        this->SMSG_INVENTORY_CHANGE_FAILURE = std::move(other.SMSG_INVENTORY_CHANGE_FAILURE);
    }
    if (opcode == Opcode::SMSG_TRADE_STATUS) {
        this->SMSG_TRADE_STATUS = std::move(other.SMSG_TRADE_STATUS);
    }
    if (opcode == Opcode::SMSG_TRADE_STATUS_EXTENDED) {
        this->SMSG_TRADE_STATUS_EXTENDED = std::move(other.SMSG_TRADE_STATUS_EXTENDED);
    }
    if (opcode == Opcode::SMSG_INITIALIZE_FACTIONS) {
        this->SMSG_INITIALIZE_FACTIONS = std::move(other.SMSG_INITIALIZE_FACTIONS);
    }
    if (opcode == Opcode::SMSG_SET_FACTION_VISIBLE) {
        this->SMSG_SET_FACTION_VISIBLE = std::move(other.SMSG_SET_FACTION_VISIBLE);
    }
    if (opcode == Opcode::SMSG_SET_FACTION_STANDING) {
        this->SMSG_SET_FACTION_STANDING = std::move(other.SMSG_SET_FACTION_STANDING);
    }
    if (opcode == Opcode::SMSG_SET_PROFICIENCY) {
        this->SMSG_SET_PROFICIENCY = std::move(other.SMSG_SET_PROFICIENCY);
    }
    if (opcode == Opcode::SMSG_ACTION_BUTTONS) {
        this->SMSG_ACTION_BUTTONS = std::move(other.SMSG_ACTION_BUTTONS);
    }
    if (opcode == Opcode::SMSG_INITIAL_SPELLS) {
        this->SMSG_INITIAL_SPELLS = std::move(other.SMSG_INITIAL_SPELLS);
    }
    if (opcode == Opcode::SMSG_LEARNED_SPELL) {
        this->SMSG_LEARNED_SPELL = std::move(other.SMSG_LEARNED_SPELL);
    }
    if (opcode == Opcode::SMSG_SUPERCEDED_SPELL) {
        this->SMSG_SUPERCEDED_SPELL = std::move(other.SMSG_SUPERCEDED_SPELL);
    }
    if (opcode == Opcode::SMSG_CAST_FAILED) {
        this->SMSG_CAST_FAILED = std::move(other.SMSG_CAST_FAILED);
    }
    if (opcode == Opcode::SMSG_SPELL_START) {
        this->SMSG_SPELL_START = std::move(other.SMSG_SPELL_START);
    }
    if (opcode == Opcode::SMSG_SPELL_GO) {
        this->SMSG_SPELL_GO = std::move(other.SMSG_SPELL_GO);
    }
    if (opcode == Opcode::SMSG_SPELL_FAILURE) {
        this->SMSG_SPELL_FAILURE = std::move(other.SMSG_SPELL_FAILURE);
    }
    if (opcode == Opcode::SMSG_SPELL_COOLDOWN) {
        this->SMSG_SPELL_COOLDOWN = std::move(other.SMSG_SPELL_COOLDOWN);
    }
    if (opcode == Opcode::SMSG_COOLDOWN_EVENT) {
        this->SMSG_COOLDOWN_EVENT = std::move(other.SMSG_COOLDOWN_EVENT);
    }
    if (opcode == Opcode::SMSG_PET_CAST_FAILED) {
        this->SMSG_PET_CAST_FAILED = std::move(other.SMSG_PET_CAST_FAILED);
    }
    if (opcode == Opcode::MSG_CHANNEL_START) {
        this->MSG_CHANNEL_START = std::move(other.MSG_CHANNEL_START);
    }
    if (opcode == Opcode::MSG_CHANNEL_UPDATE) {
        this->MSG_CHANNEL_UPDATE = std::move(other.MSG_CHANNEL_UPDATE);
    }
    if (opcode == Opcode::SMSG_AI_REACTION) {
        this->SMSG_AI_REACTION = std::move(other.SMSG_AI_REACTION);
    }
    if (opcode == Opcode::SMSG_ATTACKSTART) {
        this->SMSG_ATTACKSTART = std::move(other.SMSG_ATTACKSTART);
    }
    if (opcode == Opcode::SMSG_ATTACKSTOP) {
        this->SMSG_ATTACKSTOP = std::move(other.SMSG_ATTACKSTOP);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_NOTINRANGE) {
        this->SMSG_ATTACKSWING_NOTINRANGE = std::move(other.SMSG_ATTACKSWING_NOTINRANGE);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_BADFACING) {
        this->SMSG_ATTACKSWING_BADFACING = std::move(other.SMSG_ATTACKSWING_BADFACING);
    }
    if (opcode == Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) {
        this->SMSG_INSTANCE_LOCK_WARNING_QUERY = std::move(other.SMSG_INSTANCE_LOCK_WARNING_QUERY);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_DEADTARGET) {
        this->SMSG_ATTACKSWING_DEADTARGET = std::move(other.SMSG_ATTACKSWING_DEADTARGET);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_CANT_ATTACK) {
        this->SMSG_ATTACKSWING_CANT_ATTACK = std::move(other.SMSG_ATTACKSWING_CANT_ATTACK);
    }
    if (opcode == Opcode::SMSG_ATTACKERSTATEUPDATE) {
        this->SMSG_ATTACKERSTATEUPDATE = std::move(other.SMSG_ATTACKERSTATEUPDATE);
    }
    if (opcode == Opcode::SMSG_CANCEL_COMBAT) {
        this->SMSG_CANCEL_COMBAT = std::move(other.SMSG_CANCEL_COMBAT);
    }
    if (opcode == Opcode::SMSG_SPELLHEALLOG) {
        this->SMSG_SPELLHEALLOG = std::move(other.SMSG_SPELLHEALLOG);
    }
    if (opcode == Opcode::SMSG_SPELLENERGIZELOG) {
        this->SMSG_SPELLENERGIZELOG = std::move(other.SMSG_SPELLENERGIZELOG);
    }
    if (opcode == Opcode::SMSG_BREAK_TARGET) {
        this->SMSG_BREAK_TARGET = std::move(other.SMSG_BREAK_TARGET);
    }
    if (opcode == Opcode::SMSG_BINDPOINTUPDATE) {
        this->SMSG_BINDPOINTUPDATE = std::move(other.SMSG_BINDPOINTUPDATE);
    }
    if (opcode == Opcode::SMSG_PLAYERBOUND) {
        this->SMSG_PLAYERBOUND = std::move(other.SMSG_PLAYERBOUND);
    }
    if (opcode == Opcode::SMSG_CLIENT_CONTROL_UPDATE) {
        this->SMSG_CLIENT_CONTROL_UPDATE = std::move(other.SMSG_CLIENT_CONTROL_UPDATE);
    }
    if (opcode == Opcode::SMSG_RESURRECT_REQUEST) {
        this->SMSG_RESURRECT_REQUEST = std::move(other.SMSG_RESURRECT_REQUEST);
    }
    if (opcode == Opcode::SMSG_LOOT_RESPONSE) {
        this->SMSG_LOOT_RESPONSE = std::move(other.SMSG_LOOT_RESPONSE);
    }
    if (opcode == Opcode::SMSG_LOOT_RELEASE_RESPONSE) {
        this->SMSG_LOOT_RELEASE_RESPONSE = std::move(other.SMSG_LOOT_RELEASE_RESPONSE);
    }
    if (opcode == Opcode::SMSG_LOOT_REMOVED) {
        this->SMSG_LOOT_REMOVED = std::move(other.SMSG_LOOT_REMOVED);
    }
    if (opcode == Opcode::SMSG_LOOT_MONEY_NOTIFY) {
        this->SMSG_LOOT_MONEY_NOTIFY = std::move(other.SMSG_LOOT_MONEY_NOTIFY);
    }
    if (opcode == Opcode::SMSG_LOOT_CLEAR_MONEY) {
        this->SMSG_LOOT_CLEAR_MONEY = std::move(other.SMSG_LOOT_CLEAR_MONEY);
    }
    if (opcode == Opcode::SMSG_ITEM_PUSH_RESULT) {
        this->SMSG_ITEM_PUSH_RESULT = std::move(other.SMSG_ITEM_PUSH_RESULT);
    }
    if (opcode == Opcode::SMSG_DUEL_REQUESTED) {
        this->SMSG_DUEL_REQUESTED = std::move(other.SMSG_DUEL_REQUESTED);
    }
    if (opcode == Opcode::SMSG_DUEL_OUTOFBOUNDS) {
        this->SMSG_DUEL_OUTOFBOUNDS = std::move(other.SMSG_DUEL_OUTOFBOUNDS);
    }
    if (opcode == Opcode::SMSG_DUEL_INBOUNDS) {
        this->SMSG_DUEL_INBOUNDS = std::move(other.SMSG_DUEL_INBOUNDS);
    }
    if (opcode == Opcode::SMSG_DUEL_COMPLETE) {
        this->SMSG_DUEL_COMPLETE = std::move(other.SMSG_DUEL_COMPLETE);
    }
    if (opcode == Opcode::SMSG_DUEL_WINNER) {
        this->SMSG_DUEL_WINNER = std::move(other.SMSG_DUEL_WINNER);
    }
    if (opcode == Opcode::SMSG_MOUNTRESULT) {
        this->SMSG_MOUNTRESULT = std::move(other.SMSG_MOUNTRESULT);
    }
    if (opcode == Opcode::SMSG_MOUNTSPECIAL_ANIM) {
        this->SMSG_MOUNTSPECIAL_ANIM = std::move(other.SMSG_MOUNTSPECIAL_ANIM);
    }
    if (opcode == Opcode::SMSG_PET_TAME_FAILURE) {
        this->SMSG_PET_TAME_FAILURE = std::move(other.SMSG_PET_TAME_FAILURE);
    }
    if (opcode == Opcode::SMSG_PET_NAME_INVALID) {
        this->SMSG_PET_NAME_INVALID = std::move(other.SMSG_PET_NAME_INVALID);
    }
    if (opcode == Opcode::SMSG_PET_SPELLS) {
        this->SMSG_PET_SPELLS = std::move(other.SMSG_PET_SPELLS);
    }
    if (opcode == Opcode::SMSG_PET_MODE) {
        this->SMSG_PET_MODE = std::move(other.SMSG_PET_MODE);
    }
    if (opcode == Opcode::SMSG_GOSSIP_MESSAGE) {
        this->SMSG_GOSSIP_MESSAGE = std::move(other.SMSG_GOSSIP_MESSAGE);
    }
    if (opcode == Opcode::SMSG_GOSSIP_COMPLETE) {
        this->SMSG_GOSSIP_COMPLETE = std::move(other.SMSG_GOSSIP_COMPLETE);
    }
    if (opcode == Opcode::SMSG_NPC_TEXT_UPDATE) {
        this->SMSG_NPC_TEXT_UPDATE = std::move(other.SMSG_NPC_TEXT_UPDATE);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS) {
        this->SMSG_QUESTGIVER_STATUS = std::move(other.SMSG_QUESTGIVER_STATUS);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_LIST) {
        this->SMSG_QUESTGIVER_QUEST_LIST = std::move(other.SMSG_QUESTGIVER_QUEST_LIST);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) {
        this->SMSG_QUESTGIVER_QUEST_DETAILS = std::move(other.SMSG_QUESTGIVER_QUEST_DETAILS);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) {
        this->SMSG_QUESTGIVER_REQUEST_ITEMS = std::move(other.SMSG_QUESTGIVER_REQUEST_ITEMS);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_OFFER_REWARD) {
        this->SMSG_QUESTGIVER_OFFER_REWARD = std::move(other.SMSG_QUESTGIVER_OFFER_REWARD);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_INVALID) {
        this->SMSG_QUESTGIVER_QUEST_INVALID = std::move(other.SMSG_QUESTGIVER_QUEST_INVALID);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) {
        this->SMSG_QUESTGIVER_QUEST_COMPLETE = std::move(other.SMSG_QUESTGIVER_QUEST_COMPLETE);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_FAILED) {
        this->SMSG_QUESTGIVER_QUEST_FAILED = std::move(other.SMSG_QUESTGIVER_QUEST_FAILED);
    }
    if (opcode == Opcode::SMSG_QUESTLOG_FULL) {
        this->SMSG_QUESTLOG_FULL = std::move(other.SMSG_QUESTLOG_FULL);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILED) {
        this->SMSG_QUESTUPDATE_FAILED = std::move(other.SMSG_QUESTUPDATE_FAILED);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) {
        this->SMSG_QUESTUPDATE_FAILEDTIMER = std::move(other.SMSG_QUESTUPDATE_FAILEDTIMER);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_COMPLETE) {
        this->SMSG_QUESTUPDATE_COMPLETE = std::move(other.SMSG_QUESTUPDATE_COMPLETE);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_KILL) {
        this->SMSG_QUESTUPDATE_ADD_KILL = std::move(other.SMSG_QUESTUPDATE_ADD_KILL);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_ITEM) {
        this->SMSG_QUESTUPDATE_ADD_ITEM = std::move(other.SMSG_QUESTUPDATE_ADD_ITEM);
    }
    if (opcode == Opcode::SMSG_QUEST_CONFIRM_ACCEPT) {
        this->SMSG_QUEST_CONFIRM_ACCEPT = std::move(other.SMSG_QUEST_CONFIRM_ACCEPT);
    }
    if (opcode == Opcode::SMSG_LIST_INVENTORY) {
        this->SMSG_LIST_INVENTORY = std::move(other.SMSG_LIST_INVENTORY);
    }
    if (opcode == Opcode::SMSG_SELL_ITEM) {
        this->SMSG_SELL_ITEM = std::move(other.SMSG_SELL_ITEM);
    }
    if (opcode == Opcode::SMSG_BUY_ITEM) {
        this->SMSG_BUY_ITEM = std::move(other.SMSG_BUY_ITEM);
    }
    if (opcode == Opcode::SMSG_BUY_FAILED) {
        this->SMSG_BUY_FAILED = std::move(other.SMSG_BUY_FAILED);
    }
    if (opcode == Opcode::SMSG_SHOWTAXINODES) {
        this->SMSG_SHOWTAXINODES = std::move(other.SMSG_SHOWTAXINODES);
    }
    if (opcode == Opcode::SMSG_TAXINODE_STATUS) {
        this->SMSG_TAXINODE_STATUS = std::move(other.SMSG_TAXINODE_STATUS);
    }
    if (opcode == Opcode::SMSG_ACTIVATETAXIREPLY) {
        this->SMSG_ACTIVATETAXIREPLY = std::move(other.SMSG_ACTIVATETAXIREPLY);
    }
    if (opcode == Opcode::SMSG_NEW_TAXI_PATH) {
        this->SMSG_NEW_TAXI_PATH = std::move(other.SMSG_NEW_TAXI_PATH);
    }
    if (opcode == Opcode::SMSG_TRAINER_LIST) {
        this->SMSG_TRAINER_LIST = std::move(other.SMSG_TRAINER_LIST);
    }
    if (opcode == Opcode::SMSG_TRAINER_BUY_SUCCEEDED) {
        this->SMSG_TRAINER_BUY_SUCCEEDED = std::move(other.SMSG_TRAINER_BUY_SUCCEEDED);
    }
    if (opcode == Opcode::SMSG_TRAINER_BUY_FAILED) {
        this->SMSG_TRAINER_BUY_FAILED = std::move(other.SMSG_TRAINER_BUY_FAILED);
    }
    if (opcode == Opcode::SMSG_SHOW_BANK) {
        this->SMSG_SHOW_BANK = std::move(other.SMSG_SHOW_BANK);
    }
    if (opcode == Opcode::SMSG_BUY_BANK_SLOT_RESULT) {
        this->SMSG_BUY_BANK_SLOT_RESULT = std::move(other.SMSG_BUY_BANK_SLOT_RESULT);
    }
    if (opcode == Opcode::SMSG_PETITION_SHOWLIST) {
        this->SMSG_PETITION_SHOWLIST = std::move(other.SMSG_PETITION_SHOWLIST);
    }
    if (opcode == Opcode::SMSG_PETITION_SHOW_SIGNATURES) {
        this->SMSG_PETITION_SHOW_SIGNATURES = std::move(other.SMSG_PETITION_SHOW_SIGNATURES);
    }
    if (opcode == Opcode::SMSG_PETITION_SIGN_RESULTS) {
        this->SMSG_PETITION_SIGN_RESULTS = std::move(other.SMSG_PETITION_SIGN_RESULTS);
    }
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        this->MSG_PETITION_DECLINE = std::move(other.MSG_PETITION_DECLINE);
    }
    if (opcode == Opcode::SMSG_TURN_IN_PETITION_RESULTS) {
        this->SMSG_TURN_IN_PETITION_RESULTS = std::move(other.SMSG_TURN_IN_PETITION_RESULTS);
    }
    if (opcode == Opcode::SMSG_PETITION_QUERY_RESPONSE) {
        this->SMSG_PETITION_QUERY_RESPONSE = std::move(other.SMSG_PETITION_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_FISH_NOT_HOOKED) {
        this->SMSG_FISH_NOT_HOOKED = std::move(other.SMSG_FISH_NOT_HOOKED);
    }
    if (opcode == Opcode::SMSG_FISH_ESCAPED) {
        this->SMSG_FISH_ESCAPED = std::move(other.SMSG_FISH_ESCAPED);
    }
    if (opcode == Opcode::SMSG_NOTIFICATION) {
        this->SMSG_NOTIFICATION = std::move(other.SMSG_NOTIFICATION);
    }
    if (opcode == Opcode::SMSG_PLAYED_TIME) {
        this->SMSG_PLAYED_TIME = std::move(other.SMSG_PLAYED_TIME);
    }
    if (opcode == Opcode::SMSG_QUERY_TIME_RESPONSE) {
        this->SMSG_QUERY_TIME_RESPONSE = std::move(other.SMSG_QUERY_TIME_RESPONSE);
    }
    if (opcode == Opcode::SMSG_LOG_XPGAIN) {
        this->SMSG_LOG_XPGAIN = std::move(other.SMSG_LOG_XPGAIN);
    }
    if (opcode == Opcode::SMSG_LEVELUP_INFO) {
        this->SMSG_LEVELUP_INFO = std::move(other.SMSG_LEVELUP_INFO);
    }
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        this->MSG_MINIMAP_PING = std::move(other.MSG_MINIMAP_PING);
    }
    if (opcode == Opcode::SMSG_ENCHANTMENTLOG) {
        this->SMSG_ENCHANTMENTLOG = std::move(other.SMSG_ENCHANTMENTLOG);
    }
    if (opcode == Opcode::SMSG_START_MIRROR_TIMER) {
        this->SMSG_START_MIRROR_TIMER = std::move(other.SMSG_START_MIRROR_TIMER);
    }
    if (opcode == Opcode::SMSG_PAUSE_MIRROR_TIMER) {
        this->SMSG_PAUSE_MIRROR_TIMER = std::move(other.SMSG_PAUSE_MIRROR_TIMER);
    }
    if (opcode == Opcode::SMSG_STOP_MIRROR_TIMER) {
        this->SMSG_STOP_MIRROR_TIMER = std::move(other.SMSG_STOP_MIRROR_TIMER);
    }
    if (opcode == Opcode::SMSG_PONG) {
        this->SMSG_PONG = std::move(other.SMSG_PONG);
    }
    if (opcode == Opcode::SMSG_CLEAR_COOLDOWN) {
        this->SMSG_CLEAR_COOLDOWN = std::move(other.SMSG_CLEAR_COOLDOWN);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_PAGETEXT) {
        this->SMSG_GAMEOBJECT_PAGETEXT = std::move(other.SMSG_GAMEOBJECT_PAGETEXT);
    }
    if (opcode == Opcode::SMSG_SPELL_DELAYED) {
        this->SMSG_SPELL_DELAYED = std::move(other.SMSG_SPELL_DELAYED);
    }
    if (opcode == Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) {
        this->SMSG_QUEST_POI_QUERY_RESPONSE = std::move(other.SMSG_QUEST_POI_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_ITEM_TIME_UPDATE) {
        this->SMSG_ITEM_TIME_UPDATE = std::move(other.SMSG_ITEM_TIME_UPDATE);
    }
    if (opcode == Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) {
        this->SMSG_ITEM_ENCHANT_TIME_UPDATE = std::move(other.SMSG_ITEM_ENCHANT_TIME_UPDATE);
    }
    if (opcode == Opcode::SMSG_AUTH_CHALLENGE) {
        this->SMSG_AUTH_CHALLENGE = std::move(other.SMSG_AUTH_CHALLENGE);
    }
    if (opcode == Opcode::SMSG_AUTH_RESPONSE) {
        this->SMSG_AUTH_RESPONSE = std::move(other.SMSG_AUTH_RESPONSE);
    }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        this->MSG_SAVE_GUILD_EMBLEM = std::move(other.MSG_SAVE_GUILD_EMBLEM);
    }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        this->MSG_TABARDVENDOR_ACTIVATE = std::move(other.MSG_TABARDVENDOR_ACTIVATE);
    }
    if (opcode == Opcode::SMSG_PLAY_SPELL_VISUAL) {
        this->SMSG_PLAY_SPELL_VISUAL = std::move(other.SMSG_PLAY_SPELL_VISUAL);
    }
    if (opcode == Opcode::SMSG_PARTYKILLLOG) {
        this->SMSG_PARTYKILLLOG = std::move(other.SMSG_PARTYKILLLOG);
    }
    if (opcode == Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) {
        this->SMSG_COMPRESSED_UPDATE_OBJECT = std::move(other.SMSG_COMPRESSED_UPDATE_OBJECT);
    }
    if (opcode == Opcode::SMSG_PLAY_SPELL_IMPACT) {
        this->SMSG_PLAY_SPELL_IMPACT = std::move(other.SMSG_PLAY_SPELL_IMPACT);
    }
    if (opcode == Opcode::SMSG_EXPLORATION_EXPERIENCE) {
        this->SMSG_EXPLORATION_EXPERIENCE = std::move(other.SMSG_EXPLORATION_EXPERIENCE);
    }
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        this->MSG_RANDOM_ROLL = std::move(other.MSG_RANDOM_ROLL);
    }
    if (opcode == Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) {
        this->SMSG_ENVIRONMENTAL_DAMAGE_LOG = std::move(other.SMSG_ENVIRONMENTAL_DAMAGE_LOG);
    }
    if (opcode == Opcode::SMSG_LFG_PLAYER_REWARD) {
        this->SMSG_LFG_PLAYER_REWARD = std::move(other.SMSG_LFG_PLAYER_REWARD);
    }
    if (opcode == Opcode::SMSG_LFG_TELEPORT_DENIED) {
        this->SMSG_LFG_TELEPORT_DENIED = std::move(other.SMSG_LFG_TELEPORT_DENIED);
    }
    if (opcode == Opcode::SMSG_REMOVED_SPELL) {
        this->SMSG_REMOVED_SPELL = std::move(other.SMSG_REMOVED_SPELL);
    }
    if (opcode == Opcode::SMSG_GMTICKET_CREATE) {
        this->SMSG_GMTICKET_CREATE = std::move(other.SMSG_GMTICKET_CREATE);
    }
    if (opcode == Opcode::SMSG_GMTICKET_UPDATETEXT) {
        this->SMSG_GMTICKET_UPDATETEXT = std::move(other.SMSG_GMTICKET_UPDATETEXT);
    }
    if (opcode == Opcode::SMSG_ACCOUNT_DATA_TIMES) {
        this->SMSG_ACCOUNT_DATA_TIMES = std::move(other.SMSG_ACCOUNT_DATA_TIMES);
    }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA) {
        this->SMSG_UPDATE_ACCOUNT_DATA = std::move(other.SMSG_UPDATE_ACCOUNT_DATA);
    }
    if (opcode == Opcode::SMSG_GMTICKET_GETTICKET) {
        this->SMSG_GMTICKET_GETTICKET = std::move(other.SMSG_GMTICKET_GETTICKET);
    }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) {
        this->SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT = std::move(other.SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) {
        this->SMSG_GAMEOBJECT_DESPAWN_ANIM = std::move(other.SMSG_GAMEOBJECT_DESPAWN_ANIM);
    }
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        this->MSG_CORPSE_QUERY = std::move(other.MSG_CORPSE_QUERY);
    }
    if (opcode == Opcode::SMSG_GMTICKET_DELETETICKET) {
        this->SMSG_GMTICKET_DELETETICKET = std::move(other.SMSG_GMTICKET_DELETETICKET);
    }
    if (opcode == Opcode::SMSG_CHAT_WRONG_FACTION) {
        this->SMSG_CHAT_WRONG_FACTION = std::move(other.SMSG_CHAT_WRONG_FACTION);
    }
    if (opcode == Opcode::SMSG_GMTICKET_SYSTEMSTATUS) {
        this->SMSG_GMTICKET_SYSTEMSTATUS = std::move(other.SMSG_GMTICKET_SYSTEMSTATUS);
    }
    if (opcode == Opcode::SMSG_QUEST_FORCE_REMOVE) {
        this->SMSG_QUEST_FORCE_REMOVE = std::move(other.SMSG_QUEST_FORCE_REMOVE);
    }
    if (opcode == Opcode::SMSG_SPIRIT_HEALER_CONFIRM) {
        this->SMSG_SPIRIT_HEALER_CONFIRM = std::move(other.SMSG_SPIRIT_HEALER_CONFIRM);
    }
    if (opcode == Opcode::SMSG_GOSSIP_POI) {
        this->SMSG_GOSSIP_POI = std::move(other.SMSG_GOSSIP_POI);
    }
    if (opcode == Opcode::SMSG_LOGIN_VERIFY_WORLD) {
        this->SMSG_LOGIN_VERIFY_WORLD = std::move(other.SMSG_LOGIN_VERIFY_WORLD);
    }
    if (opcode == Opcode::SMSG_SEND_MAIL_RESULT) {
        this->SMSG_SEND_MAIL_RESULT = std::move(other.SMSG_SEND_MAIL_RESULT);
    }
    if (opcode == Opcode::SMSG_MAIL_LIST_RESULT) {
        this->SMSG_MAIL_LIST_RESULT = std::move(other.SMSG_MAIL_LIST_RESULT);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_LIST) {
        this->SMSG_BATTLEFIELD_LIST = std::move(other.SMSG_BATTLEFIELD_LIST);
    }
    if (opcode == Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) {
        this->SMSG_ITEM_TEXT_QUERY_RESPONSE = std::move(other.SMSG_ITEM_TEXT_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_SPELLLOGMISS) {
        this->SMSG_SPELLLOGMISS = std::move(other.SMSG_SPELLLOGMISS);
    }
    if (opcode == Opcode::SMSG_SPELLLOGEXECUTE) {
        this->SMSG_SPELLLOGEXECUTE = std::move(other.SMSG_SPELLLOGEXECUTE);
    }
    if (opcode == Opcode::SMSG_PERIODICAURALOG) {
        this->SMSG_PERIODICAURALOG = std::move(other.SMSG_PERIODICAURALOG);
    }
    if (opcode == Opcode::SMSG_SPELLDAMAGESHIELD) {
        this->SMSG_SPELLDAMAGESHIELD = std::move(other.SMSG_SPELLDAMAGESHIELD);
    }
    if (opcode == Opcode::SMSG_SPELLNONMELEEDAMAGELOG) {
        this->SMSG_SPELLNONMELEEDAMAGELOG = std::move(other.SMSG_SPELLNONMELEEDAMAGELOG);
    }
    if (opcode == Opcode::SMSG_RESURRECT_FAILED) {
        this->SMSG_RESURRECT_FAILED = std::move(other.SMSG_RESURRECT_FAILED);
    }
    if (opcode == Opcode::SMSG_ZONE_UNDER_ATTACK) {
        this->SMSG_ZONE_UNDER_ATTACK = std::move(other.SMSG_ZONE_UNDER_ATTACK);
    }
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        this->MSG_AUCTION_HELLO = std::move(other.MSG_AUCTION_HELLO);
    }
    if (opcode == Opcode::SMSG_AUCTION_COMMAND_RESULT) {
        this->SMSG_AUCTION_COMMAND_RESULT = std::move(other.SMSG_AUCTION_COMMAND_RESULT);
    }
    if (opcode == Opcode::SMSG_AUCTION_LIST_RESULT) {
        this->SMSG_AUCTION_LIST_RESULT = std::move(other.SMSG_AUCTION_LIST_RESULT);
    }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) {
        this->SMSG_AUCTION_OWNER_LIST_RESULT = std::move(other.SMSG_AUCTION_OWNER_LIST_RESULT);
    }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) {
        this->SMSG_AUCTION_BIDDER_NOTIFICATION = std::move(other.SMSG_AUCTION_BIDDER_NOTIFICATION);
    }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) {
        this->SMSG_AUCTION_OWNER_NOTIFICATION = std::move(other.SMSG_AUCTION_OWNER_NOTIFICATION);
    }
    if (opcode == Opcode::SMSG_PROCRESIST) {
        this->SMSG_PROCRESIST = std::move(other.SMSG_PROCRESIST);
    }
    if (opcode == Opcode::SMSG_DISPEL_FAILED) {
        this->SMSG_DISPEL_FAILED = std::move(other.SMSG_DISPEL_FAILED);
    }
    if (opcode == Opcode::SMSG_SPELLORDAMAGE_IMMUNE) {
        this->SMSG_SPELLORDAMAGE_IMMUNE = std::move(other.SMSG_SPELLORDAMAGE_IMMUNE);
    }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) {
        this->SMSG_AUCTION_BIDDER_LIST_RESULT = std::move(other.SMSG_AUCTION_BIDDER_LIST_RESULT);
    }
    if (opcode == Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) {
        this->SMSG_SET_FLAT_SPELL_MODIFIER = std::move(other.SMSG_SET_FLAT_SPELL_MODIFIER);
    }
    if (opcode == Opcode::SMSG_SET_PCT_SPELL_MODIFIER) {
        this->SMSG_SET_PCT_SPELL_MODIFIER = std::move(other.SMSG_SET_PCT_SPELL_MODIFIER);
    }
    if (opcode == Opcode::SMSG_CORPSE_RECLAIM_DELAY) {
        this->SMSG_CORPSE_RECLAIM_DELAY = std::move(other.SMSG_CORPSE_RECLAIM_DELAY);
    }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        this->MSG_LIST_STABLED_PETS = std::move(other.MSG_LIST_STABLED_PETS);
    }
    if (opcode == Opcode::SMSG_STABLE_RESULT) {
        this->SMSG_STABLE_RESULT = std::move(other.SMSG_STABLE_RESULT);
    }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        this->MSG_QUEST_PUSH_RESULT = std::move(other.MSG_QUEST_PUSH_RESULT);
    }
    if (opcode == Opcode::SMSG_PLAY_MUSIC) {
        this->SMSG_PLAY_MUSIC = std::move(other.SMSG_PLAY_MUSIC);
    }
    if (opcode == Opcode::SMSG_PLAY_OBJECT_SOUND) {
        this->SMSG_PLAY_OBJECT_SOUND = std::move(other.SMSG_PLAY_OBJECT_SOUND);
    }
    if (opcode == Opcode::SMSG_SPELLDISPELLOG) {
        this->SMSG_SPELLDISPELLOG = std::move(other.SMSG_SPELLDISPELLOG);
    }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        this->MSG_QUERY_NEXT_MAIL_TIME = std::move(other.MSG_QUERY_NEXT_MAIL_TIME);
    }
    if (opcode == Opcode::SMSG_RECEIVED_MAIL) {
        this->SMSG_RECEIVED_MAIL = std::move(other.SMSG_RECEIVED_MAIL);
    }
    if (opcode == Opcode::SMSG_RAID_GROUP_ONLY) {
        this->SMSG_RAID_GROUP_ONLY = std::move(other.SMSG_RAID_GROUP_ONLY);
    }
    if (opcode == Opcode::SMSG_PVP_CREDIT) {
        this->SMSG_PVP_CREDIT = std::move(other.SMSG_PVP_CREDIT);
    }
    if (opcode == Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) {
        this->SMSG_AUCTION_REMOVED_NOTIFICATION = std::move(other.SMSG_AUCTION_REMOVED_NOTIFICATION);
    }
    if (opcode == Opcode::SMSG_SERVER_MESSAGE) {
        this->SMSG_SERVER_MESSAGE = std::move(other.SMSG_SERVER_MESSAGE);
    }
    if (opcode == Opcode::SMSG_LFG_OFFER_CONTINUE) {
        this->SMSG_LFG_OFFER_CONTINUE = std::move(other.SMSG_LFG_OFFER_CONTINUE);
    }
    if (opcode == Opcode::SMSG_SHOW_MAILBOX) {
        this->SMSG_SHOW_MAILBOX = std::move(other.SMSG_SHOW_MAILBOX);
    }
    if (opcode == Opcode::SMSG_CANCEL_AUTO_REPEAT) {
        this->SMSG_CANCEL_AUTO_REPEAT = std::move(other.SMSG_CANCEL_AUTO_REPEAT);
    }
    if (opcode == Opcode::SMSG_STANDSTATE_UPDATE) {
        this->SMSG_STANDSTATE_UPDATE = std::move(other.SMSG_STANDSTATE_UPDATE);
    }
    if (opcode == Opcode::SMSG_LOOT_ALL_PASSED) {
        this->SMSG_LOOT_ALL_PASSED = std::move(other.SMSG_LOOT_ALL_PASSED);
    }
    if (opcode == Opcode::SMSG_LOOT_ROLL_WON) {
        this->SMSG_LOOT_ROLL_WON = std::move(other.SMSG_LOOT_ROLL_WON);
    }
    if (opcode == Opcode::SMSG_LOOT_START_ROLL) {
        this->SMSG_LOOT_START_ROLL = std::move(other.SMSG_LOOT_START_ROLL);
    }
    if (opcode == Opcode::SMSG_LOOT_ROLL) {
        this->SMSG_LOOT_ROLL = std::move(other.SMSG_LOOT_ROLL);
    }
    if (opcode == Opcode::SMSG_LOOT_MASTER_LIST) {
        this->SMSG_LOOT_MASTER_LIST = std::move(other.SMSG_LOOT_MASTER_LIST);
    }
    if (opcode == Opcode::SMSG_SET_FORCED_REACTIONS) {
        this->SMSG_SET_FORCED_REACTIONS = std::move(other.SMSG_SET_FORCED_REACTIONS);
    }
    if (opcode == Opcode::SMSG_SPELL_FAILED_OTHER) {
        this->SMSG_SPELL_FAILED_OTHER = std::move(other.SMSG_SPELL_FAILED_OTHER);
    }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) {
        this->SMSG_CHAT_PLAYER_NOT_FOUND = std::move(other.SMSG_CHAT_PLAYER_NOT_FOUND);
    }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        this->MSG_TALENT_WIPE_CONFIRM = std::move(other.MSG_TALENT_WIPE_CONFIRM);
    }
    if (opcode == Opcode::SMSG_SUMMON_REQUEST) {
        this->SMSG_SUMMON_REQUEST = std::move(other.SMSG_SUMMON_REQUEST);
    }
    if (opcode == Opcode::SMSG_MONSTER_MOVE_TRANSPORT) {
        this->SMSG_MONSTER_MOVE_TRANSPORT = std::move(other.SMSG_MONSTER_MOVE_TRANSPORT);
    }
    if (opcode == Opcode::SMSG_PET_BROKEN) {
        this->SMSG_PET_BROKEN = std::move(other.SMSG_PET_BROKEN);
    }
    if (opcode == Opcode::MSG_MOVE_FEATHER_FALL) {
        this->MSG_MOVE_FEATHER_FALL = std::move(other.MSG_MOVE_FEATHER_FALL);
    }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        this->MSG_MOVE_WATER_WALK = std::move(other.MSG_MOVE_WATER_WALK);
    }
    if (opcode == Opcode::SMSG_FEIGN_DEATH_RESISTED) {
        this->SMSG_FEIGN_DEATH_RESISTED = std::move(other.SMSG_FEIGN_DEATH_RESISTED);
    }
    if (opcode == Opcode::SMSG_DUEL_COUNTDOWN) {
        this->SMSG_DUEL_COUNTDOWN = std::move(other.SMSG_DUEL_COUNTDOWN);
    }
    if (opcode == Opcode::SMSG_AREA_TRIGGER_MESSAGE) {
        this->SMSG_AREA_TRIGGER_MESSAGE = std::move(other.SMSG_AREA_TRIGGER_MESSAGE);
    }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHOSEN) {
        this->SMSG_LFG_ROLE_CHOSEN = std::move(other.SMSG_LFG_ROLE_CHOSEN);
    }
    if (opcode == Opcode::SMSG_PLAYER_SKINNED) {
        this->SMSG_PLAYER_SKINNED = std::move(other.SMSG_PLAYER_SKINNED);
    }
    if (opcode == Opcode::SMSG_DURABILITY_DAMAGE_DEATH) {
        this->SMSG_DURABILITY_DAMAGE_DEATH = std::move(other.SMSG_DURABILITY_DAMAGE_DEATH);
    }
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        this->MSG_PETITION_RENAME = std::move(other.MSG_PETITION_RENAME);
    }
    if (opcode == Opcode::SMSG_INIT_WORLD_STATES) {
        this->SMSG_INIT_WORLD_STATES = std::move(other.SMSG_INIT_WORLD_STATES);
    }
    if (opcode == Opcode::SMSG_UPDATE_WORLD_STATE) {
        this->SMSG_UPDATE_WORLD_STATE = std::move(other.SMSG_UPDATE_WORLD_STATE);
    }
    if (opcode == Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) {
        this->SMSG_ITEM_NAME_QUERY_RESPONSE = std::move(other.SMSG_ITEM_NAME_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_PET_ACTION_FEEDBACK) {
        this->SMSG_PET_ACTION_FEEDBACK = std::move(other.SMSG_PET_ACTION_FEEDBACK);
    }
    if (opcode == Opcode::SMSG_CHAR_RENAME) {
        this->SMSG_CHAR_RENAME = std::move(other.SMSG_CHAR_RENAME);
    }
    if (opcode == Opcode::SMSG_INSTANCE_SAVE_CREATED) {
        this->SMSG_INSTANCE_SAVE_CREATED = std::move(other.SMSG_INSTANCE_SAVE_CREATED);
    }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_INFO) {
        this->SMSG_RAID_INSTANCE_INFO = std::move(other.SMSG_RAID_INSTANCE_INFO);
    }
    if (opcode == Opcode::SMSG_PLAY_SOUND) {
        this->SMSG_PLAY_SOUND = std::move(other.SMSG_PLAY_SOUND);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_STATUS) {
        this->SMSG_BATTLEFIELD_STATUS = std::move(other.SMSG_BATTLEFIELD_STATUS);
    }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        this->MSG_INSPECT_HONOR_STATS = std::move(other.MSG_INSPECT_HONOR_STATS);
    }
    if (opcode == Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) {
        this->SMSG_FORCE_WALK_SPEED_CHANGE = std::move(other.SMSG_FORCE_WALK_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) {
        this->SMSG_FORCE_SWIM_BACK_SPEED_CHANGE = std::move(other.SMSG_FORCE_SWIM_BACK_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_TURN_RATE_CHANGE) {
        this->SMSG_FORCE_TURN_RATE_CHANGE = std::move(other.SMSG_FORCE_TURN_RATE_CHANGE);
    }
    if (opcode == Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) {
        this->SMSG_AREA_SPIRIT_HEALER_TIME = std::move(other.SMSG_AREA_SPIRIT_HEALER_TIME);
    }
    if (opcode == Opcode::SMSG_WARDEN_DATA) {
        this->SMSG_WARDEN_DATA = std::move(other.SMSG_WARDEN_DATA);
    }
    if (opcode == Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) {
        this->SMSG_GROUP_JOINED_BATTLEGROUND = std::move(other.SMSG_GROUP_JOINED_BATTLEGROUND);
    }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        this->MSG_BATTLEGROUND_PLAYER_POSITIONS = std::move(other.MSG_BATTLEGROUND_PLAYER_POSITIONS);
    }
    if (opcode == Opcode::SMSG_BINDER_CONFIRM) {
        this->SMSG_BINDER_CONFIRM = std::move(other.SMSG_BINDER_CONFIRM);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) {
        this->SMSG_BATTLEGROUND_PLAYER_JOINED = std::move(other.SMSG_BATTLEGROUND_PLAYER_JOINED);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) {
        this->SMSG_BATTLEGROUND_PLAYER_LEFT = std::move(other.SMSG_BATTLEGROUND_PLAYER_LEFT);
    }
    if (opcode == Opcode::SMSG_ADDON_INFO) {
        this->SMSG_ADDON_INFO = std::move(other.SMSG_ADDON_INFO);
    }
    if (opcode == Opcode::SMSG_PET_UNLEARN_CONFIRM) {
        this->SMSG_PET_UNLEARN_CONFIRM = std::move(other.SMSG_PET_UNLEARN_CONFIRM);
    }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS_FULL) {
        this->SMSG_PARTY_MEMBER_STATS_FULL = std::move(other.SMSG_PARTY_MEMBER_STATS_FULL);
    }
    if (opcode == Opcode::SMSG_WEATHER) {
        this->SMSG_WEATHER = std::move(other.SMSG_WEATHER);
    }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_MESSAGE) {
        this->SMSG_RAID_INSTANCE_MESSAGE = std::move(other.SMSG_RAID_INSTANCE_MESSAGE);
    }
    if (opcode == Opcode::SMSG_COMPRESSED_MOVES) {
        this->SMSG_COMPRESSED_MOVES = std::move(other.SMSG_COMPRESSED_MOVES);
    }
    if (opcode == Opcode::SMSG_CHAT_RESTRICTED) {
        this->SMSG_CHAT_RESTRICTED = std::move(other.SMSG_CHAT_RESTRICTED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_SPEED) {
        this->SMSG_SPLINE_SET_RUN_SPEED = std::move(other.SMSG_SPLINE_SET_RUN_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) {
        this->SMSG_SPLINE_SET_RUN_BACK_SPEED = std::move(other.SMSG_SPLINE_SET_RUN_BACK_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_SPEED) {
        this->SMSG_SPLINE_SET_SWIM_SPEED = std::move(other.SMSG_SPLINE_SET_SWIM_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_WALK_SPEED) {
        this->SMSG_SPLINE_SET_WALK_SPEED = std::move(other.SMSG_SPLINE_SET_WALK_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) {
        this->SMSG_SPLINE_SET_SWIM_BACK_SPEED = std::move(other.SMSG_SPLINE_SET_SWIM_BACK_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_TURN_RATE) {
        this->SMSG_SPLINE_SET_TURN_RATE = std::move(other.SMSG_SPLINE_SET_TURN_RATE);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNROOT) {
        this->SMSG_SPLINE_MOVE_UNROOT = std::move(other.SMSG_SPLINE_MOVE_UNROOT);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) {
        this->SMSG_SPLINE_MOVE_FEATHER_FALL = std::move(other.SMSG_SPLINE_MOVE_FEATHER_FALL);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) {
        this->SMSG_SPLINE_MOVE_NORMAL_FALL = std::move(other.SMSG_SPLINE_MOVE_NORMAL_FALL);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_HOVER) {
        this->SMSG_SPLINE_MOVE_SET_HOVER = std::move(other.SMSG_SPLINE_MOVE_SET_HOVER);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) {
        this->SMSG_SPLINE_MOVE_UNSET_HOVER = std::move(other.SMSG_SPLINE_MOVE_UNSET_HOVER);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_WATER_WALK) {
        this->SMSG_SPLINE_MOVE_WATER_WALK = std::move(other.SMSG_SPLINE_MOVE_WATER_WALK);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_LAND_WALK) {
        this->SMSG_SPLINE_MOVE_LAND_WALK = std::move(other.SMSG_SPLINE_MOVE_LAND_WALK);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_START_SWIM) {
        this->SMSG_SPLINE_MOVE_START_SWIM = std::move(other.SMSG_SPLINE_MOVE_START_SWIM);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) {
        this->SMSG_SPLINE_MOVE_STOP_SWIM = std::move(other.SMSG_SPLINE_MOVE_STOP_SWIM);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) {
        this->SMSG_SPLINE_MOVE_SET_RUN_MODE = std::move(other.SMSG_SPLINE_MOVE_SET_RUN_MODE);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) {
        this->SMSG_SPLINE_MOVE_SET_WALK_MODE = std::move(other.SMSG_SPLINE_MOVE_SET_WALK_MODE);
    }
    if (opcode == Opcode::MSG_MOVE_TIME_SKIPPED) {
        this->MSG_MOVE_TIME_SKIPPED = std::move(other.MSG_MOVE_TIME_SKIPPED);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_ROOT) {
        this->SMSG_SPLINE_MOVE_ROOT = std::move(other.SMSG_SPLINE_MOVE_ROOT);
    }
    if (opcode == Opcode::SMSG_INVALIDATE_PLAYER) {
        this->SMSG_INVALIDATE_PLAYER = std::move(other.SMSG_INVALIDATE_PLAYER);
    }
    if (opcode == Opcode::SMSG_INSTANCE_RESET) {
        this->SMSG_INSTANCE_RESET = std::move(other.SMSG_INSTANCE_RESET);
    }
    if (opcode == Opcode::SMSG_INSTANCE_RESET_FAILED) {
        this->SMSG_INSTANCE_RESET_FAILED = std::move(other.SMSG_INSTANCE_RESET_FAILED);
    }
    if (opcode == Opcode::SMSG_UPDATE_LAST_INSTANCE) {
        this->SMSG_UPDATE_LAST_INSTANCE = std::move(other.SMSG_UPDATE_LAST_INSTANCE);
    }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        this->MSG_RAID_TARGET_UPDATE = std::move(other.MSG_RAID_TARGET_UPDATE);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        this->MSG_RAID_READY_CHECK = std::move(other.MSG_RAID_READY_CHECK);
    }
    if (opcode == Opcode::SMSG_PET_ACTION_SOUND) {
        this->SMSG_PET_ACTION_SOUND = std::move(other.SMSG_PET_ACTION_SOUND);
    }
    if (opcode == Opcode::SMSG_PET_DISMISS_SOUND) {
        this->SMSG_PET_DISMISS_SOUND = std::move(other.SMSG_PET_DISMISS_SOUND);
    }
    if (opcode == Opcode::SMSG_GM_TICKET_STATUS_UPDATE) {
        this->SMSG_GM_TICKET_STATUS_UPDATE = std::move(other.SMSG_GM_TICKET_STATUS_UPDATE);
    }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        this->MSG_SET_DUNGEON_DIFFICULTY = std::move(other.MSG_SET_DUNGEON_DIFFICULTY);
    }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) {
        this->SMSG_UPDATE_INSTANCE_OWNERSHIP = std::move(other.SMSG_UPDATE_INSTANCE_OWNERSHIP);
    }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) {
        this->SMSG_CHAT_PLAYER_AMBIGUOUS = std::move(other.SMSG_CHAT_PLAYER_AMBIGUOUS);
    }
    if (opcode == Opcode::SMSG_SPELLINSTAKILLLOG) {
        this->SMSG_SPELLINSTAKILLLOG = std::move(other.SMSG_SPELLINSTAKILLLOG);
    }
    if (opcode == Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) {
        this->SMSG_SPELL_UPDATE_CHAIN_TARGETS = std::move(other.SMSG_SPELL_UPDATE_CHAIN_TARGETS);
    }
    if (opcode == Opcode::SMSG_SPELLSTEALLOG) {
        this->SMSG_SPELLSTEALLOG = std::move(other.SMSG_SPELLSTEALLOG);
    }
    if (opcode == Opcode::SMSG_DEFENSE_MESSAGE) {
        this->SMSG_DEFENSE_MESSAGE = std::move(other.SMSG_DEFENSE_MESSAGE);
    }
    if (opcode == Opcode::SMSG_INSTANCE_DIFFICULTY) {
        this->SMSG_INSTANCE_DIFFICULTY = std::move(other.SMSG_INSTANCE_DIFFICULTY);
    }
    if (opcode == Opcode::SMSG_MOTD) {
        this->SMSG_MOTD = std::move(other.SMSG_MOTD);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_CAN_FLY) {
        this->SMSG_MOVE_SET_CAN_FLY = std::move(other.SMSG_MOVE_SET_CAN_FLY);
    }
    if (opcode == Opcode::SMSG_MOVE_UNSET_CAN_FLY) {
        this->SMSG_MOVE_UNSET_CAN_FLY = std::move(other.SMSG_MOVE_UNSET_CAN_FLY);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) {
        this->SMSG_ARENA_TEAM_COMMAND_RESULT = std::move(other.SMSG_ARENA_TEAM_COMMAND_RESULT);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) {
        this->SMSG_ARENA_TEAM_QUERY_RESPONSE = std::move(other.SMSG_ARENA_TEAM_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_ROSTER) {
        this->SMSG_ARENA_TEAM_ROSTER = std::move(other.SMSG_ARENA_TEAM_ROSTER);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_INVITE) {
        this->SMSG_ARENA_TEAM_INVITE = std::move(other.SMSG_ARENA_TEAM_INVITE);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_EVENT) {
        this->SMSG_ARENA_TEAM_EVENT = std::move(other.SMSG_ARENA_TEAM_EVENT);
    }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        this->MSG_MOVE_START_ASCEND = std::move(other.MSG_MOVE_START_ASCEND);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        this->MSG_MOVE_STOP_ASCEND = std::move(other.MSG_MOVE_STOP_ASCEND);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_STATS) {
        this->SMSG_ARENA_TEAM_STATS = std::move(other.SMSG_ARENA_TEAM_STATS);
    }
    if (opcode == Opcode::SMSG_UPDATE_LFG_LIST) {
        this->SMSG_UPDATE_LFG_LIST = std::move(other.SMSG_UPDATE_LFG_LIST);
    }
    if (opcode == Opcode::SMSG_LFG_PROPOSAL_UPDATE) {
        this->SMSG_LFG_PROPOSAL_UPDATE = std::move(other.SMSG_LFG_PROPOSAL_UPDATE);
    }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) {
        this->SMSG_LFG_ROLE_CHECK_UPDATE = std::move(other.SMSG_LFG_ROLE_CHECK_UPDATE);
    }
    if (opcode == Opcode::SMSG_LFG_JOIN_RESULT) {
        this->SMSG_LFG_JOIN_RESULT = std::move(other.SMSG_LFG_JOIN_RESULT);
    }
    if (opcode == Opcode::SMSG_LFG_QUEUE_STATUS) {
        this->SMSG_LFG_QUEUE_STATUS = std::move(other.SMSG_LFG_QUEUE_STATUS);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PLAYER) {
        this->SMSG_LFG_UPDATE_PLAYER = std::move(other.SMSG_LFG_UPDATE_PLAYER);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PARTY) {
        this->SMSG_LFG_UPDATE_PARTY = std::move(other.SMSG_LFG_UPDATE_PARTY);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_SEARCH) {
        this->SMSG_LFG_UPDATE_SEARCH = std::move(other.SMSG_LFG_UPDATE_SEARCH);
    }
    if (opcode == Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) {
        this->SMSG_LFG_BOOT_PROPOSAL_UPDATE = std::move(other.SMSG_LFG_BOOT_PROPOSAL_UPDATE);
    }
    if (opcode == Opcode::SMSG_LFG_PLAYER_INFO) {
        this->SMSG_LFG_PLAYER_INFO = std::move(other.SMSG_LFG_PLAYER_INFO);
    }
    if (opcode == Opcode::SMSG_LFG_PARTY_INFO) {
        this->SMSG_LFG_PARTY_INFO = std::move(other.SMSG_LFG_PARTY_INFO);
    }
    if (opcode == Opcode::SMSG_TITLE_EARNED) {
        this->SMSG_TITLE_EARNED = std::move(other.SMSG_TITLE_EARNED);
    }
    if (opcode == Opcode::SMSG_ARENA_ERROR) {
        this->SMSG_ARENA_ERROR = std::move(other.SMSG_ARENA_ERROR);
    }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        this->MSG_INSPECT_ARENA_TEAMS = std::move(other.MSG_INSPECT_ARENA_TEAMS);
    }
    if (opcode == Opcode::SMSG_DEATH_RELEASE_LOC) {
        this->SMSG_DEATH_RELEASE_LOC = std::move(other.SMSG_DEATH_RELEASE_LOC);
    }
    if (opcode == Opcode::SMSG_FORCED_DEATH_UPDATE) {
        this->SMSG_FORCED_DEATH_UPDATE = std::move(other.SMSG_FORCED_DEATH_UPDATE);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_SPEED) {
        this->MSG_MOVE_SET_FLIGHT_SPEED = std::move(other.MSG_MOVE_SET_FLIGHT_SPEED);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        this->MSG_MOVE_SET_FLIGHT_BACK_SPEED = std::move(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED);
    }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) {
        this->SMSG_FORCE_FLIGHT_SPEED_CHANGE = std::move(other.SMSG_FORCE_FLIGHT_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) {
        this->SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE = std::move(other.SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) {
        this->SMSG_SPLINE_SET_FLIGHT_SPEED = std::move(other.SMSG_SPLINE_SET_FLIGHT_SPEED);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) {
        this->SMSG_SPLINE_SET_FLIGHT_BACK_SPEED = std::move(other.SMSG_SPLINE_SET_FLIGHT_BACK_SPEED);
    }
    if (opcode == Opcode::SMSG_FLIGHT_SPLINE_SYNC) {
        this->SMSG_FLIGHT_SPLINE_SYNC = std::move(other.SMSG_FLIGHT_SPLINE_SYNC);
    }
    if (opcode == Opcode::SMSG_REALM_SPLIT) {
        this->SMSG_REALM_SPLIT = std::move(other.SMSG_REALM_SPLIT);
    }
    if (opcode == Opcode::SMSG_TIME_SYNC_REQ) {
        this->SMSG_TIME_SYNC_REQ = std::move(other.SMSG_TIME_SYNC_REQ);
    }
    if (opcode == Opcode::SMSG_RESET_FAILED_NOTIFY) {
        this->SMSG_RESET_FAILED_NOTIFY = std::move(other.SMSG_RESET_FAILED_NOTIFY);
    }
    if (opcode == Opcode::SMSG_LFG_DISABLED) {
        this->SMSG_LFG_DISABLED = std::move(other.SMSG_LFG_DISABLED);
    }
    if (opcode == Opcode::SMSG_UPDATE_COMBO_POINTS) {
        this->SMSG_UPDATE_COMBO_POINTS = std::move(other.SMSG_UPDATE_COMBO_POINTS);
    }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        this->MSG_MOVE_START_DESCEND = std::move(other.MSG_MOVE_START_DESCEND);
    }
    if (opcode == Opcode::SMSG_DISMOUNT) {
        this->SMSG_DISMOUNT = std::move(other.SMSG_DISMOUNT);
    }
    if (opcode == Opcode::MSG_MOVE_UPDATE_CAN_FLY) {
        this->MSG_MOVE_UPDATE_CAN_FLY = std::move(other.MSG_MOVE_UPDATE_CAN_FLY);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        this->MSG_RAID_READY_CHECK_CONFIRM = std::move(other.MSG_RAID_READY_CHECK_CONFIRM);
    }
    if (opcode == Opcode::SMSG_GM_MESSAGECHAT) {
        this->SMSG_GM_MESSAGECHAT = std::move(other.SMSG_GM_MESSAGECHAT);
    }
    if (opcode == Opcode::SMSG_CLEAR_TARGET) {
        this->SMSG_CLEAR_TARGET = std::move(other.SMSG_CLEAR_TARGET);
    }
    if (opcode == Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) {
        this->SMSG_CROSSED_INEBRIATION_THRESHOLD = std::move(other.SMSG_CROSSED_INEBRIATION_THRESHOLD);
    }
    if (opcode == Opcode::SMSG_KICK_REASON) {
        this->SMSG_KICK_REASON = std::move(other.SMSG_KICK_REASON);
    }
    if (opcode == Opcode::SMSG_COMPLAIN_RESULT) {
        this->SMSG_COMPLAIN_RESULT = std::move(other.SMSG_COMPLAIN_RESULT);
    }
    if (opcode == Opcode::SMSG_FEATURE_SYSTEM_STATUS) {
        this->SMSG_FEATURE_SYSTEM_STATUS = std::move(other.SMSG_FEATURE_SYSTEM_STATUS);
    }
    if (opcode == Opcode::SMSG_CHANNEL_MEMBER_COUNT) {
        this->SMSG_CHANNEL_MEMBER_COUNT = std::move(other.SMSG_CHANNEL_MEMBER_COUNT);
    }
    if (opcode == Opcode::SMSG_GUILD_BANK_LIST) {
        this->SMSG_GUILD_BANK_LIST = std::move(other.SMSG_GUILD_BANK_LIST);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        this->MSG_GUILD_BANK_LOG_QUERY = std::move(other.MSG_GUILD_BANK_LOG_QUERY);
    }
    if (opcode == Opcode::SMSG_USERLIST_ADD) {
        this->SMSG_USERLIST_ADD = std::move(other.SMSG_USERLIST_ADD);
    }
    if (opcode == Opcode::SMSG_USERLIST_REMOVE) {
        this->SMSG_USERLIST_REMOVE = std::move(other.SMSG_USERLIST_REMOVE);
    }
    if (opcode == Opcode::SMSG_USERLIST_UPDATE) {
        this->SMSG_USERLIST_UPDATE = std::move(other.SMSG_USERLIST_UPDATE);
    }
    if (opcode == Opcode::SMSG_INSPECT_TALENT) {
        this->SMSG_INSPECT_TALENT = std::move(other.SMSG_INSPECT_TALENT);
    }
    if (opcode == Opcode::SMSG_LOOT_LIST) {
        this->SMSG_LOOT_LIST = std::move(other.SMSG_LOOT_LIST);
    }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        this->MSG_GUILD_PERMISSIONS = std::move(other.MSG_GUILD_PERMISSIONS);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        this->MSG_GUILD_BANK_MONEY_WITHDRAWN = std::move(other.MSG_GUILD_BANK_MONEY_WITHDRAWN);
    }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        this->MSG_GUILD_EVENT_LOG_QUERY = std::move(other.MSG_GUILD_EVENT_LOG_QUERY);
    }
    if (opcode == Opcode::SMSG_MIRRORIMAGE_DATA) {
        this->SMSG_MIRRORIMAGE_DATA = std::move(other.SMSG_MIRRORIMAGE_DATA);
    }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        this->MSG_QUERY_GUILD_BANK_TEXT = std::move(other.MSG_QUERY_GUILD_BANK_TEXT);
    }
    if (opcode == Opcode::SMSG_OVERRIDE_LIGHT) {
        this->SMSG_OVERRIDE_LIGHT = std::move(other.SMSG_OVERRIDE_LIGHT);
    }
    if (opcode == Opcode::SMSG_TOTEM_CREATED) {
        this->SMSG_TOTEM_CREATED = std::move(other.SMSG_TOTEM_CREATED);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) {
        this->SMSG_QUESTGIVER_STATUS_MULTIPLE = std::move(other.SMSG_QUESTGIVER_STATUS_MULTIPLE);
    }
    if (opcode == Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) {
        this->SMSG_SET_PLAYER_DECLINED_NAMES_RESULT = std::move(other.SMSG_SET_PLAYER_DECLINED_NAMES_RESULT);
    }
    if (opcode == Opcode::SMSG_SEND_UNLEARN_SPELLS) {
        this->SMSG_SEND_UNLEARN_SPELLS = std::move(other.SMSG_SEND_UNLEARN_SPELLS);
    }
    if (opcode == Opcode::SMSG_PROPOSE_LEVEL_GRANT) {
        this->SMSG_PROPOSE_LEVEL_GRANT = std::move(other.SMSG_PROPOSE_LEVEL_GRANT);
    }
    if (opcode == Opcode::SMSG_REFER_A_FRIEND_FAILURE) {
        this->SMSG_REFER_A_FRIEND_FAILURE = std::move(other.SMSG_REFER_A_FRIEND_FAILURE);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_FLYING) {
        this->SMSG_SPLINE_MOVE_SET_FLYING = std::move(other.SMSG_SPLINE_MOVE_SET_FLYING);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) {
        this->SMSG_SPLINE_MOVE_UNSET_FLYING = std::move(other.SMSG_SPLINE_MOVE_UNSET_FLYING);
    }
    if (opcode == Opcode::SMSG_ENABLE_BARBER_SHOP) {
        this->SMSG_ENABLE_BARBER_SHOP = std::move(other.SMSG_ENABLE_BARBER_SHOP);
    }
    if (opcode == Opcode::SMSG_BARBER_SHOP_RESULT) {
        this->SMSG_BARBER_SHOP_RESULT = std::move(other.SMSG_BARBER_SHOP_RESULT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_CALENDAR) {
        this->SMSG_CALENDAR_SEND_CALENDAR = std::move(other.SMSG_CALENDAR_SEND_CALENDAR);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_EVENT) {
        this->SMSG_CALENDAR_SEND_EVENT = std::move(other.SMSG_CALENDAR_SEND_EVENT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_FILTER_GUILD) {
        this->SMSG_CALENDAR_FILTER_GUILD = std::move(other.SMSG_CALENDAR_FILTER_GUILD);
    }
    if (opcode == Opcode::SMSG_CALENDAR_ARENA_TEAM) {
        this->SMSG_CALENDAR_ARENA_TEAM = std::move(other.SMSG_CALENDAR_ARENA_TEAM);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE) {
        this->SMSG_CALENDAR_EVENT_INVITE = std::move(other.SMSG_CALENDAR_EVENT_INVITE);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) {
        this->SMSG_CALENDAR_EVENT_INVITE_REMOVED = std::move(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_STATUS) {
        this->SMSG_CALENDAR_EVENT_STATUS = std::move(other.SMSG_CALENDAR_EVENT_STATUS);
    }
    if (opcode == Opcode::SMSG_CALENDAR_COMMAND_RESULT) {
        this->SMSG_CALENDAR_COMMAND_RESULT = std::move(other.SMSG_CALENDAR_COMMAND_RESULT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) {
        this->SMSG_CALENDAR_RAID_LOCKOUT_ADDED = std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_ADDED);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) {
        this->SMSG_CALENDAR_RAID_LOCKOUT_REMOVED = std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_REMOVED);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) {
        this->SMSG_CALENDAR_EVENT_INVITE_ALERT = std::move(other.SMSG_CALENDAR_EVENT_INVITE_ALERT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) {
        this->SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT = std::move(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) {
        this->SMSG_CALENDAR_EVENT_REMOVED_ALERT = std::move(other.SMSG_CALENDAR_EVENT_REMOVED_ALERT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) {
        this->SMSG_CALENDAR_EVENT_UPDATED_ALERT = std::move(other.SMSG_CALENDAR_EVENT_UPDATED_ALERT);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) {
        this->SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT = std::move(other.SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        this->CMSG_CALENDAR_GET_NUM_PENDING = std::move(other.CMSG_CALENDAR_GET_NUM_PENDING);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) {
        this->SMSG_CALENDAR_SEND_NUM_PENDING = std::move(other.SMSG_CALENDAR_SEND_NUM_PENDING);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH_RATE) {
        this->MSG_MOVE_SET_PITCH_RATE = std::move(other.MSG_MOVE_SET_PITCH_RATE);
    }
    if (opcode == Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) {
        this->SMSG_FORCE_PITCH_RATE_CHANGE = std::move(other.SMSG_FORCE_PITCH_RATE_CHANGE);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) {
        this->SMSG_CALENDAR_EVENT_INVITE_NOTES = std::move(other.SMSG_CALENDAR_EVENT_INVITE_NOTES);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) {
        this->SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT = std::move(other.SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT);
    }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) {
        this->SMSG_UPDATE_ACCOUNT_DATA_COMPLETE = std::move(other.SMSG_UPDATE_ACCOUNT_DATA_COMPLETE);
    }
    if (opcode == Opcode::SMSG_TRIGGER_MOVIE) {
        this->SMSG_TRIGGER_MOVIE = std::move(other.SMSG_TRIGGER_MOVIE);
    }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_EARNED) {
        this->SMSG_ACHIEVEMENT_EARNED = std::move(other.SMSG_ACHIEVEMENT_EARNED);
    }
    if (opcode == Opcode::SMSG_CRITERIA_UPDATE) {
        this->SMSG_CRITERIA_UPDATE = std::move(other.SMSG_CRITERIA_UPDATE);
    }
    if (opcode == Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) {
        this->SMSG_RESPOND_INSPECT_ACHIEVEMENTS = std::move(other.SMSG_RESPOND_INSPECT_ACHIEVEMENTS);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) {
        this->SMSG_QUESTUPDATE_ADD_PVP_KILL = std::move(other.SMSG_QUESTUPDATE_ADD_PVP_KILL);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) {
        this->SMSG_CALENDAR_RAID_LOCKOUT_UPDATED = std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_UPDATED);
    }
    if (opcode == Opcode::SMSG_CHAR_CUSTOMIZE) {
        this->SMSG_CHAR_CUSTOMIZE = std::move(other.SMSG_CHAR_CUSTOMIZE);
    }
    if (opcode == Opcode::SMSG_SET_PHASE_SHIFT) {
        this->SMSG_SET_PHASE_SHIFT = std::move(other.SMSG_SET_PHASE_SHIFT);
    }
    if (opcode == Opcode::SMSG_ALL_ACHIEVEMENT_DATA) {
        this->SMSG_ALL_ACHIEVEMENT_DATA = std::move(other.SMSG_ALL_ACHIEVEMENT_DATA);
    }
    if (opcode == Opcode::SMSG_POWER_UPDATE) {
        this->SMSG_POWER_UPDATE = std::move(other.SMSG_POWER_UPDATE);
    }
    if (opcode == Opcode::SMSG_HIGHEST_THREAT_UPDATE) {
        this->SMSG_HIGHEST_THREAT_UPDATE = std::move(other.SMSG_HIGHEST_THREAT_UPDATE);
    }
    if (opcode == Opcode::SMSG_THREAT_UPDATE) {
        this->SMSG_THREAT_UPDATE = std::move(other.SMSG_THREAT_UPDATE);
    }
    if (opcode == Opcode::SMSG_THREAT_REMOVE) {
        this->SMSG_THREAT_REMOVE = std::move(other.SMSG_THREAT_REMOVE);
    }
    if (opcode == Opcode::SMSG_THREAT_CLEAR) {
        this->SMSG_THREAT_CLEAR = std::move(other.SMSG_THREAT_CLEAR);
    }
    if (opcode == Opcode::SMSG_CONVERT_RUNE) {
        this->SMSG_CONVERT_RUNE = std::move(other.SMSG_CONVERT_RUNE);
    }
    if (opcode == Opcode::SMSG_RESYNC_RUNES) {
        this->SMSG_RESYNC_RUNES = std::move(other.SMSG_RESYNC_RUNES);
    }
    if (opcode == Opcode::SMSG_ADD_RUNE_POWER) {
        this->SMSG_ADD_RUNE_POWER = std::move(other.SMSG_ADD_RUNE_POWER);
    }
    if (opcode == Opcode::SMSG_AUCTION_LIST_PENDING_SALES) {
        this->SMSG_AUCTION_LIST_PENDING_SALES = std::move(other.SMSG_AUCTION_LIST_PENDING_SALES);
    }
    if (opcode == Opcode::SMSG_MODIFY_COOLDOWN) {
        this->SMSG_MODIFY_COOLDOWN = std::move(other.SMSG_MODIFY_COOLDOWN);
    }
    if (opcode == Opcode::SMSG_PET_UPDATE_COMBO_POINTS) {
        this->SMSG_PET_UPDATE_COMBO_POINTS = std::move(other.SMSG_PET_UPDATE_COMBO_POINTS);
    }
    if (opcode == Opcode::SMSG_PRE_RESURRECT) {
        this->SMSG_PRE_RESURRECT = std::move(other.SMSG_PRE_RESURRECT);
    }
    if (opcode == Opcode::SMSG_AURA_UPDATE_ALL) {
        this->SMSG_AURA_UPDATE_ALL = std::move(other.SMSG_AURA_UPDATE_ALL);
    }
    if (opcode == Opcode::SMSG_AURA_UPDATE) {
        this->SMSG_AURA_UPDATE = std::move(other.SMSG_AURA_UPDATE);
    }
    if (opcode == Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) {
        this->SMSG_SERVER_FIRST_ACHIEVEMENT = std::move(other.SMSG_SERVER_FIRST_ACHIEVEMENT);
    }
    if (opcode == Opcode::SMSG_PET_LEARNED_SPELL) {
        this->SMSG_PET_LEARNED_SPELL = std::move(other.SMSG_PET_LEARNED_SPELL);
    }
    if (opcode == Opcode::SMSG_PET_UNLEARNED_SPELL) {
        this->SMSG_PET_UNLEARNED_SPELL = std::move(other.SMSG_PET_UNLEARNED_SPELL);
    }
    if (opcode == Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) {
        this->SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA = std::move(other.SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA);
    }
    if (opcode == Opcode::SMSG_CRITERIA_DELETED) {
        this->SMSG_CRITERIA_DELETED = std::move(other.SMSG_CRITERIA_DELETED);
    }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_DELETED) {
        this->SMSG_ACHIEVEMENT_DELETED = std::move(other.SMSG_ACHIEVEMENT_DELETED);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) {
        this->SMSG_BATTLEGROUND_INFO_THROTTLED = std::move(other.SMSG_BATTLEGROUND_INFO_THROTTLED);
    }
    if (opcode == Opcode::SMSG_PLAYER_VEHICLE_DATA) {
        this->SMSG_PLAYER_VEHICLE_DATA = std::move(other.SMSG_PLAYER_VEHICLE_DATA);
    }
    if (opcode == Opcode::SMSG_PET_GUIDS) {
        this->SMSG_PET_GUIDS = std::move(other.SMSG_PET_GUIDS);
    }
    if (opcode == Opcode::SMSG_CLIENTCACHE_VERSION) {
        this->SMSG_CLIENTCACHE_VERSION = std::move(other.SMSG_CLIENTCACHE_VERSION);
    }
    if (opcode == Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) {
        this->SMSG_ITEM_REFUND_INFO_RESPONSE = std::move(other.SMSG_ITEM_REFUND_INFO_RESPONSE);
    }
    if (opcode == Opcode::SMSG_ITEM_REFUND_RESULT) {
        this->SMSG_ITEM_REFUND_RESULT = std::move(other.SMSG_ITEM_REFUND_RESULT);
    }
    if (opcode == Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) {
        this->SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE = std::move(other.SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE);
    }
    if (opcode == Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) {
        this->SMSG_CALENDAR_CLEAR_PENDING_ACTION = std::move(other.SMSG_CALENDAR_CLEAR_PENDING_ACTION);
    }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_LIST) {
        this->SMSG_EQUIPMENT_SET_LIST = std::move(other.SMSG_EQUIPMENT_SET_LIST);
    }
    if (opcode == Opcode::SMSG_SET_PROJECTILE_POSITION) {
        this->SMSG_SET_PROJECTILE_POSITION = std::move(other.SMSG_SET_PROJECTILE_POSITION);
    }
    if (opcode == Opcode::SMSG_TALENTS_INFO) {
        this->SMSG_TALENTS_INFO = std::move(other.SMSG_TALENTS_INFO);
    }
    if (opcode == Opcode::SMSG_ARENA_UNIT_DESTROYED) {
        this->SMSG_ARENA_UNIT_DESTROYED = std::move(other.SMSG_ARENA_UNIT_DESTROYED);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) {
        this->SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED = std::move(other.SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED);
    }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_DISABLE) {
        this->SMSG_MOVE_GRAVITY_DISABLE = std::move(other.SMSG_MOVE_GRAVITY_DISABLE);
    }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_ENABLE) {
        this->SMSG_MOVE_GRAVITY_ENABLE = std::move(other.SMSG_MOVE_GRAVITY_ENABLE);
    }
    if (opcode == Opcode::MSG_MOVE_GRAVITY_CHNG) {
        this->MSG_MOVE_GRAVITY_CHNG = std::move(other.MSG_MOVE_GRAVITY_CHNG);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) {
        this->SMSG_SPLINE_MOVE_GRAVITY_DISABLE = std::move(other.SMSG_SPLINE_MOVE_GRAVITY_DISABLE);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) {
        this->SMSG_SPLINE_MOVE_GRAVITY_ENABLE = std::move(other.SMSG_SPLINE_MOVE_GRAVITY_ENABLE);
    }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) {
        this->SMSG_EQUIPMENT_SET_USE_RESULT = std::move(other.SMSG_EQUIPMENT_SET_USE_RESULT);
    }
    if (opcode == Opcode::SMSG_CHAR_FACTION_CHANGE) {
        this->SMSG_CHAR_FACTION_CHANGE = std::move(other.SMSG_CHAR_FACTION_CHANGE);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) {
        this->SMSG_BATTLEFIELD_MGR_ENTRY_INVITE = std::move(other.SMSG_BATTLEFIELD_MGR_ENTRY_INVITE);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) {
        this->SMSG_BATTLEFIELD_MGR_ENTERED = std::move(other.SMSG_BATTLEFIELD_MGR_ENTERED);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) {
        this->SMSG_BATTLEFIELD_MGR_QUEUE_INVITE = std::move(other.SMSG_BATTLEFIELD_MGR_QUEUE_INVITE);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) {
        this->SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE = std::move(other.SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) {
        this->SMSG_BATTLEFIELD_MGR_EJECT_PENDING = std::move(other.SMSG_BATTLEFIELD_MGR_EJECT_PENDING);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) {
        this->SMSG_BATTLEFIELD_MGR_EJECTED = std::move(other.SMSG_BATTLEFIELD_MGR_EJECTED);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) {
        this->SMSG_BATTLEFIELD_MGR_STATE_CHANGE = std::move(other.SMSG_BATTLEFIELD_MGR_STATE_CHANGE);
    }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        this->MSG_SET_RAID_DIFFICULTY = std::move(other.MSG_SET_RAID_DIFFICULTY);
    }
    if (opcode == Opcode::SMSG_TOGGLE_XP_GAIN) {
        this->SMSG_TOGGLE_XP_GAIN = std::move(other.SMSG_TOGGLE_XP_GAIN);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_DB_ERROR) {
        this->SMSG_GMRESPONSE_DB_ERROR = std::move(other.SMSG_GMRESPONSE_DB_ERROR);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_RECEIVED) {
        this->SMSG_GMRESPONSE_RECEIVED = std::move(other.SMSG_GMRESPONSE_RECEIVED);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) {
        this->SMSG_GMRESPONSE_STATUS_UPDATE = std::move(other.SMSG_GMRESPONSE_STATUS_UPDATE);
    }
    if (opcode == Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        this->SMSG_WORLD_STATE_UI_TIMER_UPDATE = std::move(other.SMSG_WORLD_STATE_UI_TIMER_UPDATE);
    }
    if (opcode == Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) {
        this->SMSG_TALENTS_INVOLUNTARILY_RESET = std::move(other.SMSG_TALENTS_INVOLUNTARILY_RESET);
    }
    if (opcode == Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) {
        this->SMSG_QUERY_QUESTS_COMPLETED_RESPONSE = std::move(other.SMSG_QUERY_QUESTS_COMPLETED_RESPONSE);
    }
    if (opcode == Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) {
        this->SMSG_CORPSE_NOT_IN_INSTANCE = std::move(other.SMSG_CORPSE_NOT_IN_INSTANCE);
    }
    if (opcode == Opcode::SMSG_CAMERA_SHAKE) {
        this->SMSG_CAMERA_SHAKE = std::move(other.SMSG_CAMERA_SHAKE);
    }
    if (opcode == Opcode::SMSG_SOCKET_GEMS_RESULT) {
        this->SMSG_SOCKET_GEMS_RESULT = std::move(other.SMSG_SOCKET_GEMS_RESULT);
    }
    if (opcode == Opcode::SMSG_REDIRECT_CLIENT) {
        this->SMSG_REDIRECT_CLIENT = std::move(other.SMSG_REDIRECT_CLIENT);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_COLLISION_HGT) {
        this->SMSG_MOVE_SET_COLLISION_HGT = std::move(other.SMSG_MOVE_SET_COLLISION_HGT);
    }
    if (opcode == Opcode::SMSG_MULTIPLE_MOVES) {
        this->SMSG_MULTIPLE_MOVES = std::move(other.SMSG_MULTIPLE_MOVES);
    }
}

/* 5 move assignment */
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode& ServerOpcode::operator=(ServerOpcode&& other) noexcept {
    this->opcode = other.opcode;
    other.opcode = Opcode::NONE;
    if (opcode == Opcode::SMSG_CHAR_CREATE) {
        wrath::SMSG_CHAR_CREATE SMSG_CHAR_CREATEswap(std::move(other.SMSG_CHAR_CREATE));
        std::swap(this->SMSG_CHAR_CREATE, SMSG_CHAR_CREATEswap);
    }
    if (opcode == Opcode::SMSG_CHAR_ENUM) {
        wrath::SMSG_CHAR_ENUM SMSG_CHAR_ENUMswap(std::move(other.SMSG_CHAR_ENUM));
        std::swap(this->SMSG_CHAR_ENUM, SMSG_CHAR_ENUMswap);
    }
    if (opcode == Opcode::SMSG_CHAR_DELETE) {
        wrath::SMSG_CHAR_DELETE SMSG_CHAR_DELETEswap(std::move(other.SMSG_CHAR_DELETE));
        std::swap(this->SMSG_CHAR_DELETE, SMSG_CHAR_DELETEswap);
    }
    if (opcode == Opcode::SMSG_NEW_WORLD) {
        wrath::SMSG_NEW_WORLD SMSG_NEW_WORLDswap(std::move(other.SMSG_NEW_WORLD));
        std::swap(this->SMSG_NEW_WORLD, SMSG_NEW_WORLDswap);
    }
    if (opcode == Opcode::SMSG_TRANSFER_PENDING) {
        wrath::SMSG_TRANSFER_PENDING SMSG_TRANSFER_PENDINGswap(std::move(other.SMSG_TRANSFER_PENDING));
        std::swap(this->SMSG_TRANSFER_PENDING, SMSG_TRANSFER_PENDINGswap);
    }
    if (opcode == Opcode::SMSG_TRANSFER_ABORTED) {
        wrath::SMSG_TRANSFER_ABORTED SMSG_TRANSFER_ABORTEDswap(std::move(other.SMSG_TRANSFER_ABORTED));
        std::swap(this->SMSG_TRANSFER_ABORTED, SMSG_TRANSFER_ABORTEDswap);
    }
    if (opcode == Opcode::SMSG_CHARACTER_LOGIN_FAILED) {
        wrath::SMSG_CHARACTER_LOGIN_FAILED SMSG_CHARACTER_LOGIN_FAILEDswap(std::move(other.SMSG_CHARACTER_LOGIN_FAILED));
        std::swap(this->SMSG_CHARACTER_LOGIN_FAILED, SMSG_CHARACTER_LOGIN_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_LOGIN_SETTIMESPEED) {
        wrath::SMSG_LOGIN_SETTIMESPEED SMSG_LOGIN_SETTIMESPEEDswap(std::move(other.SMSG_LOGIN_SETTIMESPEED));
        std::swap(this->SMSG_LOGIN_SETTIMESPEED, SMSG_LOGIN_SETTIMESPEEDswap);
    }
    if (opcode == Opcode::SMSG_LOGOUT_RESPONSE) {
        wrath::SMSG_LOGOUT_RESPONSE SMSG_LOGOUT_RESPONSEswap(std::move(other.SMSG_LOGOUT_RESPONSE));
        std::swap(this->SMSG_LOGOUT_RESPONSE, SMSG_LOGOUT_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_LOGOUT_COMPLETE) {
        wrath::SMSG_LOGOUT_COMPLETE SMSG_LOGOUT_COMPLETEswap(std::move(other.SMSG_LOGOUT_COMPLETE));
        std::swap(this->SMSG_LOGOUT_COMPLETE, SMSG_LOGOUT_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_LOGOUT_CANCEL_ACK) {
        wrath::SMSG_LOGOUT_CANCEL_ACK SMSG_LOGOUT_CANCEL_ACKswap(std::move(other.SMSG_LOGOUT_CANCEL_ACK));
        std::swap(this->SMSG_LOGOUT_CANCEL_ACK, SMSG_LOGOUT_CANCEL_ACKswap);
    }
    if (opcode == Opcode::SMSG_NAME_QUERY_RESPONSE) {
        wrath::SMSG_NAME_QUERY_RESPONSE SMSG_NAME_QUERY_RESPONSEswap(std::move(other.SMSG_NAME_QUERY_RESPONSE));
        std::swap(this->SMSG_NAME_QUERY_RESPONSE, SMSG_NAME_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_PET_NAME_QUERY_RESPONSE) {
        wrath::SMSG_PET_NAME_QUERY_RESPONSE SMSG_PET_NAME_QUERY_RESPONSEswap(std::move(other.SMSG_PET_NAME_QUERY_RESPONSE));
        std::swap(this->SMSG_PET_NAME_QUERY_RESPONSE, SMSG_PET_NAME_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_GUILD_QUERY_RESPONSE) {
        wrath::SMSG_GUILD_QUERY_RESPONSE SMSG_GUILD_QUERY_RESPONSEswap(std::move(other.SMSG_GUILD_QUERY_RESPONSE));
        std::swap(this->SMSG_GUILD_QUERY_RESPONSE, SMSG_GUILD_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) {
        wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE SMSG_ITEM_QUERY_SINGLE_RESPONSEswap(std::move(other.SMSG_ITEM_QUERY_SINGLE_RESPONSE));
        std::swap(this->SMSG_ITEM_QUERY_SINGLE_RESPONSE, SMSG_ITEM_QUERY_SINGLE_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) {
        wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE SMSG_PAGE_TEXT_QUERY_RESPONSEswap(std::move(other.SMSG_PAGE_TEXT_QUERY_RESPONSE));
        std::swap(this->SMSG_PAGE_TEXT_QUERY_RESPONSE, SMSG_PAGE_TEXT_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_QUEST_QUERY_RESPONSE) {
        wrath::SMSG_QUEST_QUERY_RESPONSE SMSG_QUEST_QUERY_RESPONSEswap(std::move(other.SMSG_QUEST_QUERY_RESPONSE));
        std::swap(this->SMSG_QUEST_QUERY_RESPONSE, SMSG_QUEST_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) {
        wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE SMSG_GAMEOBJECT_QUERY_RESPONSEswap(std::move(other.SMSG_GAMEOBJECT_QUERY_RESPONSE));
        std::swap(this->SMSG_GAMEOBJECT_QUERY_RESPONSE, SMSG_GAMEOBJECT_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_CREATURE_QUERY_RESPONSE) {
        wrath::SMSG_CREATURE_QUERY_RESPONSE SMSG_CREATURE_QUERY_RESPONSEswap(std::move(other.SMSG_CREATURE_QUERY_RESPONSE));
        std::swap(this->SMSG_CREATURE_QUERY_RESPONSE, SMSG_CREATURE_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_WHO) {
        wrath::SMSG_WHO SMSG_WHOswap(std::move(other.SMSG_WHO));
        std::swap(this->SMSG_WHO, SMSG_WHOswap);
    }
    if (opcode == Opcode::SMSG_WHOIS) {
        wrath::SMSG_WHOIS SMSG_WHOISswap(std::move(other.SMSG_WHOIS));
        std::swap(this->SMSG_WHOIS, SMSG_WHOISswap);
    }
    if (opcode == Opcode::SMSG_CONTACT_LIST) {
        wrath::SMSG_CONTACT_LIST SMSG_CONTACT_LISTswap(std::move(other.SMSG_CONTACT_LIST));
        std::swap(this->SMSG_CONTACT_LIST, SMSG_CONTACT_LISTswap);
    }
    if (opcode == Opcode::SMSG_FRIEND_STATUS) {
        wrath::SMSG_FRIEND_STATUS SMSG_FRIEND_STATUSswap(std::move(other.SMSG_FRIEND_STATUS));
        std::swap(this->SMSG_FRIEND_STATUS, SMSG_FRIEND_STATUSswap);
    }
    if (opcode == Opcode::SMSG_GROUP_INVITE) {
        wrath::SMSG_GROUP_INVITE SMSG_GROUP_INVITEswap(std::move(other.SMSG_GROUP_INVITE));
        std::swap(this->SMSG_GROUP_INVITE, SMSG_GROUP_INVITEswap);
    }
    if (opcode == Opcode::SMSG_GROUP_DECLINE) {
        wrath::SMSG_GROUP_DECLINE SMSG_GROUP_DECLINEswap(std::move(other.SMSG_GROUP_DECLINE));
        std::swap(this->SMSG_GROUP_DECLINE, SMSG_GROUP_DECLINEswap);
    }
    if (opcode == Opcode::SMSG_GROUP_UNINVITE) {
        wrath::SMSG_GROUP_UNINVITE SMSG_GROUP_UNINVITEswap(std::move(other.SMSG_GROUP_UNINVITE));
        std::swap(this->SMSG_GROUP_UNINVITE, SMSG_GROUP_UNINVITEswap);
    }
    if (opcode == Opcode::SMSG_GROUP_SET_LEADER) {
        wrath::SMSG_GROUP_SET_LEADER SMSG_GROUP_SET_LEADERswap(std::move(other.SMSG_GROUP_SET_LEADER));
        std::swap(this->SMSG_GROUP_SET_LEADER, SMSG_GROUP_SET_LEADERswap);
    }
    if (opcode == Opcode::SMSG_GROUP_DESTROYED) {
        wrath::SMSG_GROUP_DESTROYED SMSG_GROUP_DESTROYEDswap(std::move(other.SMSG_GROUP_DESTROYED));
        std::swap(this->SMSG_GROUP_DESTROYED, SMSG_GROUP_DESTROYEDswap);
    }
    if (opcode == Opcode::SMSG_GROUP_LIST) {
        wrath::SMSG_GROUP_LIST SMSG_GROUP_LISTswap(std::move(other.SMSG_GROUP_LIST));
        std::swap(this->SMSG_GROUP_LIST, SMSG_GROUP_LISTswap);
    }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS) {
        wrath::SMSG_PARTY_MEMBER_STATS SMSG_PARTY_MEMBER_STATSswap(std::move(other.SMSG_PARTY_MEMBER_STATS));
        std::swap(this->SMSG_PARTY_MEMBER_STATS, SMSG_PARTY_MEMBER_STATSswap);
    }
    if (opcode == Opcode::SMSG_PARTY_COMMAND_RESULT) {
        wrath::SMSG_PARTY_COMMAND_RESULT SMSG_PARTY_COMMAND_RESULTswap(std::move(other.SMSG_PARTY_COMMAND_RESULT));
        std::swap(this->SMSG_PARTY_COMMAND_RESULT, SMSG_PARTY_COMMAND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_GUILD_INVITE) {
        wrath::SMSG_GUILD_INVITE SMSG_GUILD_INVITEswap(std::move(other.SMSG_GUILD_INVITE));
        std::swap(this->SMSG_GUILD_INVITE, SMSG_GUILD_INVITEswap);
    }
    if (opcode == Opcode::SMSG_GUILD_DECLINE) {
        wrath::SMSG_GUILD_DECLINE SMSG_GUILD_DECLINEswap(std::move(other.SMSG_GUILD_DECLINE));
        std::swap(this->SMSG_GUILD_DECLINE, SMSG_GUILD_DECLINEswap);
    }
    if (opcode == Opcode::SMSG_GUILD_INFO) {
        wrath::SMSG_GUILD_INFO SMSG_GUILD_INFOswap(std::move(other.SMSG_GUILD_INFO));
        std::swap(this->SMSG_GUILD_INFO, SMSG_GUILD_INFOswap);
    }
    if (opcode == Opcode::SMSG_GUILD_ROSTER) {
        wrath::SMSG_GUILD_ROSTER SMSG_GUILD_ROSTERswap(std::move(other.SMSG_GUILD_ROSTER));
        std::swap(this->SMSG_GUILD_ROSTER, SMSG_GUILD_ROSTERswap);
    }
    if (opcode == Opcode::SMSG_GUILD_EVENT) {
        wrath::SMSG_GUILD_EVENT SMSG_GUILD_EVENTswap(std::move(other.SMSG_GUILD_EVENT));
        std::swap(this->SMSG_GUILD_EVENT, SMSG_GUILD_EVENTswap);
    }
    if (opcode == Opcode::SMSG_GUILD_COMMAND_RESULT) {
        wrath::SMSG_GUILD_COMMAND_RESULT SMSG_GUILD_COMMAND_RESULTswap(std::move(other.SMSG_GUILD_COMMAND_RESULT));
        std::swap(this->SMSG_GUILD_COMMAND_RESULT, SMSG_GUILD_COMMAND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_MESSAGECHAT) {
        wrath::SMSG_MESSAGECHAT SMSG_MESSAGECHATswap(std::move(other.SMSG_MESSAGECHAT));
        std::swap(this->SMSG_MESSAGECHAT, SMSG_MESSAGECHATswap);
    }
    if (opcode == Opcode::SMSG_CHANNEL_NOTIFY) {
        wrath::SMSG_CHANNEL_NOTIFY SMSG_CHANNEL_NOTIFYswap(std::move(other.SMSG_CHANNEL_NOTIFY));
        std::swap(this->SMSG_CHANNEL_NOTIFY, SMSG_CHANNEL_NOTIFYswap);
    }
    if (opcode == Opcode::SMSG_CHANNEL_LIST) {
        wrath::SMSG_CHANNEL_LIST SMSG_CHANNEL_LISTswap(std::move(other.SMSG_CHANNEL_LIST));
        std::swap(this->SMSG_CHANNEL_LIST, SMSG_CHANNEL_LISTswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_OBJECT) {
        wrath::SMSG_UPDATE_OBJECT SMSG_UPDATE_OBJECTswap(std::move(other.SMSG_UPDATE_OBJECT));
        std::swap(this->SMSG_UPDATE_OBJECT, SMSG_UPDATE_OBJECTswap);
    }
    if (opcode == Opcode::SMSG_DESTROY_OBJECT) {
        wrath::SMSG_DESTROY_OBJECT SMSG_DESTROY_OBJECTswap(std::move(other.SMSG_DESTROY_OBJECT));
        std::swap(this->SMSG_DESTROY_OBJECT, SMSG_DESTROY_OBJECTswap);
    }
    if (opcode == Opcode::SMSG_READ_ITEM_OK) {
        wrath::SMSG_READ_ITEM_OK SMSG_READ_ITEM_OKswap(std::move(other.SMSG_READ_ITEM_OK));
        std::swap(this->SMSG_READ_ITEM_OK, SMSG_READ_ITEM_OKswap);
    }
    if (opcode == Opcode::SMSG_READ_ITEM_FAILED) {
        wrath::SMSG_READ_ITEM_FAILED SMSG_READ_ITEM_FAILEDswap(std::move(other.SMSG_READ_ITEM_FAILED));
        std::swap(this->SMSG_READ_ITEM_FAILED, SMSG_READ_ITEM_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_ITEM_COOLDOWN) {
        wrath::SMSG_ITEM_COOLDOWN SMSG_ITEM_COOLDOWNswap(std::move(other.SMSG_ITEM_COOLDOWN));
        std::swap(this->SMSG_ITEM_COOLDOWN, SMSG_ITEM_COOLDOWNswap);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) {
        wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM SMSG_GAMEOBJECT_CUSTOM_ANIMswap(std::move(other.SMSG_GAMEOBJECT_CUSTOM_ANIM));
        std::swap(this->SMSG_GAMEOBJECT_CUSTOM_ANIM, SMSG_GAMEOBJECT_CUSTOM_ANIMswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        wrath::MSG_MOVE_START_FORWARD MSG_MOVE_START_FORWARDswap(std::move(other.MSG_MOVE_START_FORWARD));
        std::swap(this->MSG_MOVE_START_FORWARD, MSG_MOVE_START_FORWARDswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        wrath::MSG_MOVE_START_BACKWARD MSG_MOVE_START_BACKWARDswap(std::move(other.MSG_MOVE_START_BACKWARD));
        std::swap(this->MSG_MOVE_START_BACKWARD, MSG_MOVE_START_BACKWARDswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP) {
        wrath::MSG_MOVE_STOP MSG_MOVE_STOPswap(std::move(other.MSG_MOVE_STOP));
        std::swap(this->MSG_MOVE_STOP, MSG_MOVE_STOPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        wrath::MSG_MOVE_START_STRAFE_LEFT MSG_MOVE_START_STRAFE_LEFTswap(std::move(other.MSG_MOVE_START_STRAFE_LEFT));
        std::swap(this->MSG_MOVE_START_STRAFE_LEFT, MSG_MOVE_START_STRAFE_LEFTswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        wrath::MSG_MOVE_START_STRAFE_RIGHT MSG_MOVE_START_STRAFE_RIGHTswap(std::move(other.MSG_MOVE_START_STRAFE_RIGHT));
        std::swap(this->MSG_MOVE_START_STRAFE_RIGHT, MSG_MOVE_START_STRAFE_RIGHTswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        wrath::MSG_MOVE_STOP_STRAFE MSG_MOVE_STOP_STRAFEswap(std::move(other.MSG_MOVE_STOP_STRAFE));
        std::swap(this->MSG_MOVE_STOP_STRAFE, MSG_MOVE_STOP_STRAFEswap);
    }
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        wrath::MSG_MOVE_JUMP MSG_MOVE_JUMPswap(std::move(other.MSG_MOVE_JUMP));
        std::swap(this->MSG_MOVE_JUMP, MSG_MOVE_JUMPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        wrath::MSG_MOVE_START_TURN_LEFT MSG_MOVE_START_TURN_LEFTswap(std::move(other.MSG_MOVE_START_TURN_LEFT));
        std::swap(this->MSG_MOVE_START_TURN_LEFT, MSG_MOVE_START_TURN_LEFTswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        wrath::MSG_MOVE_START_TURN_RIGHT MSG_MOVE_START_TURN_RIGHTswap(std::move(other.MSG_MOVE_START_TURN_RIGHT));
        std::swap(this->MSG_MOVE_START_TURN_RIGHT, MSG_MOVE_START_TURN_RIGHTswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        wrath::MSG_MOVE_STOP_TURN MSG_MOVE_STOP_TURNswap(std::move(other.MSG_MOVE_STOP_TURN));
        std::swap(this->MSG_MOVE_STOP_TURN, MSG_MOVE_STOP_TURNswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        wrath::MSG_MOVE_START_PITCH_UP MSG_MOVE_START_PITCH_UPswap(std::move(other.MSG_MOVE_START_PITCH_UP));
        std::swap(this->MSG_MOVE_START_PITCH_UP, MSG_MOVE_START_PITCH_UPswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        wrath::MSG_MOVE_START_PITCH_DOWN MSG_MOVE_START_PITCH_DOWNswap(std::move(other.MSG_MOVE_START_PITCH_DOWN));
        std::swap(this->MSG_MOVE_START_PITCH_DOWN, MSG_MOVE_START_PITCH_DOWNswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        wrath::MSG_MOVE_STOP_PITCH MSG_MOVE_STOP_PITCHswap(std::move(other.MSG_MOVE_STOP_PITCH));
        std::swap(this->MSG_MOVE_STOP_PITCH, MSG_MOVE_STOP_PITCHswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        wrath::MSG_MOVE_SET_RUN_MODE MSG_MOVE_SET_RUN_MODEswap(std::move(other.MSG_MOVE_SET_RUN_MODE));
        std::swap(this->MSG_MOVE_SET_RUN_MODE, MSG_MOVE_SET_RUN_MODEswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        wrath::MSG_MOVE_SET_WALK_MODE MSG_MOVE_SET_WALK_MODEswap(std::move(other.MSG_MOVE_SET_WALK_MODE));
        std::swap(this->MSG_MOVE_SET_WALK_MODE, MSG_MOVE_SET_WALK_MODEswap);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_CHEAT) {
        wrath::MSG_MOVE_TELEPORT_CHEAT_Server MSG_MOVE_TELEPORT_CHEATswap(std::move(other.MSG_MOVE_TELEPORT_CHEAT));
        std::swap(this->MSG_MOVE_TELEPORT_CHEAT, MSG_MOVE_TELEPORT_CHEATswap);
    }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        wrath::MSG_MOVE_TELEPORT_ACK_Server MSG_MOVE_TELEPORT_ACKswap(std::move(other.MSG_MOVE_TELEPORT_ACK));
        std::swap(this->MSG_MOVE_TELEPORT_ACK, MSG_MOVE_TELEPORT_ACKswap);
    }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        wrath::MSG_MOVE_FALL_LAND MSG_MOVE_FALL_LANDswap(std::move(other.MSG_MOVE_FALL_LAND));
        std::swap(this->MSG_MOVE_FALL_LAND, MSG_MOVE_FALL_LANDswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        wrath::MSG_MOVE_START_SWIM MSG_MOVE_START_SWIMswap(std::move(other.MSG_MOVE_START_SWIM));
        std::swap(this->MSG_MOVE_START_SWIM, MSG_MOVE_START_SWIMswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        wrath::MSG_MOVE_STOP_SWIM MSG_MOVE_STOP_SWIMswap(std::move(other.MSG_MOVE_STOP_SWIM));
        std::swap(this->MSG_MOVE_STOP_SWIM, MSG_MOVE_STOP_SWIMswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        wrath::MSG_MOVE_SET_FACING MSG_MOVE_SET_FACINGswap(std::move(other.MSG_MOVE_SET_FACING));
        std::swap(this->MSG_MOVE_SET_FACING, MSG_MOVE_SET_FACINGswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        wrath::MSG_MOVE_SET_PITCH MSG_MOVE_SET_PITCHswap(std::move(other.MSG_MOVE_SET_PITCH));
        std::swap(this->MSG_MOVE_SET_PITCH, MSG_MOVE_SET_PITCHswap);
    }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        wrath::MSG_MOVE_WORLDPORT_ACK MSG_MOVE_WORLDPORT_ACKswap(std::move(other.MSG_MOVE_WORLDPORT_ACK));
        std::swap(this->MSG_MOVE_WORLDPORT_ACK, MSG_MOVE_WORLDPORT_ACKswap);
    }
    if (opcode == Opcode::SMSG_MONSTER_MOVE) {
        wrath::SMSG_MONSTER_MOVE SMSG_MONSTER_MOVEswap(std::move(other.SMSG_MONSTER_MOVE));
        std::swap(this->SMSG_MONSTER_MOVE, SMSG_MONSTER_MOVEswap);
    }
    if (opcode == Opcode::SMSG_MOVE_WATER_WALK) {
        wrath::SMSG_MOVE_WATER_WALK SMSG_MOVE_WATER_WALKswap(std::move(other.SMSG_MOVE_WATER_WALK));
        std::swap(this->SMSG_MOVE_WATER_WALK, SMSG_MOVE_WATER_WALKswap);
    }
    if (opcode == Opcode::SMSG_MOVE_LAND_WALK) {
        wrath::SMSG_MOVE_LAND_WALK SMSG_MOVE_LAND_WALKswap(std::move(other.SMSG_MOVE_LAND_WALK));
        std::swap(this->SMSG_MOVE_LAND_WALK, SMSG_MOVE_LAND_WALKswap);
    }
    if (opcode == Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) {
        wrath::SMSG_FORCE_RUN_SPEED_CHANGE SMSG_FORCE_RUN_SPEED_CHANGEswap(std::move(other.SMSG_FORCE_RUN_SPEED_CHANGE));
        std::swap(this->SMSG_FORCE_RUN_SPEED_CHANGE, SMSG_FORCE_RUN_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) {
        wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE SMSG_FORCE_RUN_BACK_SPEED_CHANGEswap(std::move(other.SMSG_FORCE_RUN_BACK_SPEED_CHANGE));
        std::swap(this->SMSG_FORCE_RUN_BACK_SPEED_CHANGE, SMSG_FORCE_RUN_BACK_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) {
        wrath::SMSG_FORCE_SWIM_SPEED_CHANGE SMSG_FORCE_SWIM_SPEED_CHANGEswap(std::move(other.SMSG_FORCE_SWIM_SPEED_CHANGE));
        std::swap(this->SMSG_FORCE_SWIM_SPEED_CHANGE, SMSG_FORCE_SWIM_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_MOVE_ROOT) {
        wrath::SMSG_FORCE_MOVE_ROOT SMSG_FORCE_MOVE_ROOTswap(std::move(other.SMSG_FORCE_MOVE_ROOT));
        std::swap(this->SMSG_FORCE_MOVE_ROOT, SMSG_FORCE_MOVE_ROOTswap);
    }
    if (opcode == Opcode::SMSG_FORCE_MOVE_UNROOT) {
        wrath::SMSG_FORCE_MOVE_UNROOT SMSG_FORCE_MOVE_UNROOTswap(std::move(other.SMSG_FORCE_MOVE_UNROOT));
        std::swap(this->SMSG_FORCE_MOVE_UNROOT, SMSG_FORCE_MOVE_UNROOTswap);
    }
    if (opcode == Opcode::MSG_MOVE_ROOT) {
        wrath::MSG_MOVE_ROOT_Server MSG_MOVE_ROOTswap(std::move(other.MSG_MOVE_ROOT));
        std::swap(this->MSG_MOVE_ROOT, MSG_MOVE_ROOTswap);
    }
    if (opcode == Opcode::MSG_MOVE_UNROOT) {
        wrath::MSG_MOVE_UNROOT_Server MSG_MOVE_UNROOTswap(std::move(other.MSG_MOVE_UNROOT));
        std::swap(this->MSG_MOVE_UNROOT, MSG_MOVE_UNROOTswap);
    }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        wrath::MSG_MOVE_HEARTBEAT MSG_MOVE_HEARTBEATswap(std::move(other.MSG_MOVE_HEARTBEAT));
        std::swap(this->MSG_MOVE_HEARTBEAT, MSG_MOVE_HEARTBEATswap);
    }
    if (opcode == Opcode::SMSG_MOVE_KNOCK_BACK) {
        wrath::SMSG_MOVE_KNOCK_BACK SMSG_MOVE_KNOCK_BACKswap(std::move(other.SMSG_MOVE_KNOCK_BACK));
        std::swap(this->SMSG_MOVE_KNOCK_BACK, SMSG_MOVE_KNOCK_BACKswap);
    }
    if (opcode == Opcode::MSG_MOVE_KNOCK_BACK) {
        wrath::MSG_MOVE_KNOCK_BACK_Server MSG_MOVE_KNOCK_BACKswap(std::move(other.MSG_MOVE_KNOCK_BACK));
        std::swap(this->MSG_MOVE_KNOCK_BACK, MSG_MOVE_KNOCK_BACKswap);
    }
    if (opcode == Opcode::SMSG_MOVE_FEATHER_FALL) {
        wrath::SMSG_MOVE_FEATHER_FALL SMSG_MOVE_FEATHER_FALLswap(std::move(other.SMSG_MOVE_FEATHER_FALL));
        std::swap(this->SMSG_MOVE_FEATHER_FALL, SMSG_MOVE_FEATHER_FALLswap);
    }
    if (opcode == Opcode::SMSG_MOVE_NORMAL_FALL) {
        wrath::SMSG_MOVE_NORMAL_FALL SMSG_MOVE_NORMAL_FALLswap(std::move(other.SMSG_MOVE_NORMAL_FALL));
        std::swap(this->SMSG_MOVE_NORMAL_FALL, SMSG_MOVE_NORMAL_FALLswap);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_HOVER) {
        wrath::SMSG_MOVE_SET_HOVER SMSG_MOVE_SET_HOVERswap(std::move(other.SMSG_MOVE_SET_HOVER));
        std::swap(this->SMSG_MOVE_SET_HOVER, SMSG_MOVE_SET_HOVERswap);
    }
    if (opcode == Opcode::SMSG_MOVE_UNSET_HOVER) {
        wrath::SMSG_MOVE_UNSET_HOVER SMSG_MOVE_UNSET_HOVERswap(std::move(other.SMSG_MOVE_UNSET_HOVER));
        std::swap(this->SMSG_MOVE_UNSET_HOVER, SMSG_MOVE_UNSET_HOVERswap);
    }
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        wrath::MSG_MOVE_HOVER MSG_MOVE_HOVERswap(std::move(other.MSG_MOVE_HOVER));
        std::swap(this->MSG_MOVE_HOVER, MSG_MOVE_HOVERswap);
    }
    if (opcode == Opcode::SMSG_TRIGGER_CINEMATIC) {
        wrath::SMSG_TRIGGER_CINEMATIC SMSG_TRIGGER_CINEMATICswap(std::move(other.SMSG_TRIGGER_CINEMATIC));
        std::swap(this->SMSG_TRIGGER_CINEMATIC, SMSG_TRIGGER_CINEMATICswap);
    }
    if (opcode == Opcode::SMSG_TUTORIAL_FLAGS) {
        wrath::SMSG_TUTORIAL_FLAGS SMSG_TUTORIAL_FLAGSswap(std::move(other.SMSG_TUTORIAL_FLAGS));
        std::swap(this->SMSG_TUTORIAL_FLAGS, SMSG_TUTORIAL_FLAGSswap);
    }
    if (opcode == Opcode::SMSG_EMOTE) {
        wrath::SMSG_EMOTE SMSG_EMOTEswap(std::move(other.SMSG_EMOTE));
        std::swap(this->SMSG_EMOTE, SMSG_EMOTEswap);
    }
    if (opcode == Opcode::SMSG_TEXT_EMOTE) {
        wrath::SMSG_TEXT_EMOTE SMSG_TEXT_EMOTEswap(std::move(other.SMSG_TEXT_EMOTE));
        std::swap(this->SMSG_TEXT_EMOTE, SMSG_TEXT_EMOTEswap);
    }
    if (opcode == Opcode::SMSG_INVENTORY_CHANGE_FAILURE) {
        wrath::SMSG_INVENTORY_CHANGE_FAILURE SMSG_INVENTORY_CHANGE_FAILUREswap(std::move(other.SMSG_INVENTORY_CHANGE_FAILURE));
        std::swap(this->SMSG_INVENTORY_CHANGE_FAILURE, SMSG_INVENTORY_CHANGE_FAILUREswap);
    }
    if (opcode == Opcode::SMSG_TRADE_STATUS) {
        wrath::SMSG_TRADE_STATUS SMSG_TRADE_STATUSswap(std::move(other.SMSG_TRADE_STATUS));
        std::swap(this->SMSG_TRADE_STATUS, SMSG_TRADE_STATUSswap);
    }
    if (opcode == Opcode::SMSG_TRADE_STATUS_EXTENDED) {
        wrath::SMSG_TRADE_STATUS_EXTENDED SMSG_TRADE_STATUS_EXTENDEDswap(std::move(other.SMSG_TRADE_STATUS_EXTENDED));
        std::swap(this->SMSG_TRADE_STATUS_EXTENDED, SMSG_TRADE_STATUS_EXTENDEDswap);
    }
    if (opcode == Opcode::SMSG_INITIALIZE_FACTIONS) {
        wrath::SMSG_INITIALIZE_FACTIONS SMSG_INITIALIZE_FACTIONSswap(std::move(other.SMSG_INITIALIZE_FACTIONS));
        std::swap(this->SMSG_INITIALIZE_FACTIONS, SMSG_INITIALIZE_FACTIONSswap);
    }
    if (opcode == Opcode::SMSG_SET_FACTION_VISIBLE) {
        wrath::SMSG_SET_FACTION_VISIBLE SMSG_SET_FACTION_VISIBLEswap(std::move(other.SMSG_SET_FACTION_VISIBLE));
        std::swap(this->SMSG_SET_FACTION_VISIBLE, SMSG_SET_FACTION_VISIBLEswap);
    }
    if (opcode == Opcode::SMSG_SET_FACTION_STANDING) {
        wrath::SMSG_SET_FACTION_STANDING SMSG_SET_FACTION_STANDINGswap(std::move(other.SMSG_SET_FACTION_STANDING));
        std::swap(this->SMSG_SET_FACTION_STANDING, SMSG_SET_FACTION_STANDINGswap);
    }
    if (opcode == Opcode::SMSG_SET_PROFICIENCY) {
        wrath::SMSG_SET_PROFICIENCY SMSG_SET_PROFICIENCYswap(std::move(other.SMSG_SET_PROFICIENCY));
        std::swap(this->SMSG_SET_PROFICIENCY, SMSG_SET_PROFICIENCYswap);
    }
    if (opcode == Opcode::SMSG_ACTION_BUTTONS) {
        wrath::SMSG_ACTION_BUTTONS SMSG_ACTION_BUTTONSswap(std::move(other.SMSG_ACTION_BUTTONS));
        std::swap(this->SMSG_ACTION_BUTTONS, SMSG_ACTION_BUTTONSswap);
    }
    if (opcode == Opcode::SMSG_INITIAL_SPELLS) {
        wrath::SMSG_INITIAL_SPELLS SMSG_INITIAL_SPELLSswap(std::move(other.SMSG_INITIAL_SPELLS));
        std::swap(this->SMSG_INITIAL_SPELLS, SMSG_INITIAL_SPELLSswap);
    }
    if (opcode == Opcode::SMSG_LEARNED_SPELL) {
        wrath::SMSG_LEARNED_SPELL SMSG_LEARNED_SPELLswap(std::move(other.SMSG_LEARNED_SPELL));
        std::swap(this->SMSG_LEARNED_SPELL, SMSG_LEARNED_SPELLswap);
    }
    if (opcode == Opcode::SMSG_SUPERCEDED_SPELL) {
        wrath::SMSG_SUPERCEDED_SPELL SMSG_SUPERCEDED_SPELLswap(std::move(other.SMSG_SUPERCEDED_SPELL));
        std::swap(this->SMSG_SUPERCEDED_SPELL, SMSG_SUPERCEDED_SPELLswap);
    }
    if (opcode == Opcode::SMSG_CAST_FAILED) {
        wrath::SMSG_CAST_FAILED SMSG_CAST_FAILEDswap(std::move(other.SMSG_CAST_FAILED));
        std::swap(this->SMSG_CAST_FAILED, SMSG_CAST_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_SPELL_START) {
        wrath::SMSG_SPELL_START SMSG_SPELL_STARTswap(std::move(other.SMSG_SPELL_START));
        std::swap(this->SMSG_SPELL_START, SMSG_SPELL_STARTswap);
    }
    if (opcode == Opcode::SMSG_SPELL_GO) {
        wrath::SMSG_SPELL_GO SMSG_SPELL_GOswap(std::move(other.SMSG_SPELL_GO));
        std::swap(this->SMSG_SPELL_GO, SMSG_SPELL_GOswap);
    }
    if (opcode == Opcode::SMSG_SPELL_FAILURE) {
        wrath::SMSG_SPELL_FAILURE SMSG_SPELL_FAILUREswap(std::move(other.SMSG_SPELL_FAILURE));
        std::swap(this->SMSG_SPELL_FAILURE, SMSG_SPELL_FAILUREswap);
    }
    if (opcode == Opcode::SMSG_SPELL_COOLDOWN) {
        wrath::SMSG_SPELL_COOLDOWN SMSG_SPELL_COOLDOWNswap(std::move(other.SMSG_SPELL_COOLDOWN));
        std::swap(this->SMSG_SPELL_COOLDOWN, SMSG_SPELL_COOLDOWNswap);
    }
    if (opcode == Opcode::SMSG_COOLDOWN_EVENT) {
        wrath::SMSG_COOLDOWN_EVENT SMSG_COOLDOWN_EVENTswap(std::move(other.SMSG_COOLDOWN_EVENT));
        std::swap(this->SMSG_COOLDOWN_EVENT, SMSG_COOLDOWN_EVENTswap);
    }
    if (opcode == Opcode::SMSG_PET_CAST_FAILED) {
        wrath::SMSG_PET_CAST_FAILED SMSG_PET_CAST_FAILEDswap(std::move(other.SMSG_PET_CAST_FAILED));
        std::swap(this->SMSG_PET_CAST_FAILED, SMSG_PET_CAST_FAILEDswap);
    }
    if (opcode == Opcode::MSG_CHANNEL_START) {
        wrath::MSG_CHANNEL_START_Server MSG_CHANNEL_STARTswap(std::move(other.MSG_CHANNEL_START));
        std::swap(this->MSG_CHANNEL_START, MSG_CHANNEL_STARTswap);
    }
    if (opcode == Opcode::MSG_CHANNEL_UPDATE) {
        wrath::MSG_CHANNEL_UPDATE_Server MSG_CHANNEL_UPDATEswap(std::move(other.MSG_CHANNEL_UPDATE));
        std::swap(this->MSG_CHANNEL_UPDATE, MSG_CHANNEL_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_AI_REACTION) {
        wrath::SMSG_AI_REACTION SMSG_AI_REACTIONswap(std::move(other.SMSG_AI_REACTION));
        std::swap(this->SMSG_AI_REACTION, SMSG_AI_REACTIONswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSTART) {
        wrath::SMSG_ATTACKSTART SMSG_ATTACKSTARTswap(std::move(other.SMSG_ATTACKSTART));
        std::swap(this->SMSG_ATTACKSTART, SMSG_ATTACKSTARTswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSTOP) {
        wrath::SMSG_ATTACKSTOP SMSG_ATTACKSTOPswap(std::move(other.SMSG_ATTACKSTOP));
        std::swap(this->SMSG_ATTACKSTOP, SMSG_ATTACKSTOPswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_NOTINRANGE) {
        wrath::SMSG_ATTACKSWING_NOTINRANGE SMSG_ATTACKSWING_NOTINRANGEswap(std::move(other.SMSG_ATTACKSWING_NOTINRANGE));
        std::swap(this->SMSG_ATTACKSWING_NOTINRANGE, SMSG_ATTACKSWING_NOTINRANGEswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_BADFACING) {
        wrath::SMSG_ATTACKSWING_BADFACING SMSG_ATTACKSWING_BADFACINGswap(std::move(other.SMSG_ATTACKSWING_BADFACING));
        std::swap(this->SMSG_ATTACKSWING_BADFACING, SMSG_ATTACKSWING_BADFACINGswap);
    }
    if (opcode == Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) {
        wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY SMSG_INSTANCE_LOCK_WARNING_QUERYswap(std::move(other.SMSG_INSTANCE_LOCK_WARNING_QUERY));
        std::swap(this->SMSG_INSTANCE_LOCK_WARNING_QUERY, SMSG_INSTANCE_LOCK_WARNING_QUERYswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_DEADTARGET) {
        wrath::SMSG_ATTACKSWING_DEADTARGET SMSG_ATTACKSWING_DEADTARGETswap(std::move(other.SMSG_ATTACKSWING_DEADTARGET));
        std::swap(this->SMSG_ATTACKSWING_DEADTARGET, SMSG_ATTACKSWING_DEADTARGETswap);
    }
    if (opcode == Opcode::SMSG_ATTACKSWING_CANT_ATTACK) {
        wrath::SMSG_ATTACKSWING_CANT_ATTACK SMSG_ATTACKSWING_CANT_ATTACKswap(std::move(other.SMSG_ATTACKSWING_CANT_ATTACK));
        std::swap(this->SMSG_ATTACKSWING_CANT_ATTACK, SMSG_ATTACKSWING_CANT_ATTACKswap);
    }
    if (opcode == Opcode::SMSG_ATTACKERSTATEUPDATE) {
        wrath::SMSG_ATTACKERSTATEUPDATE SMSG_ATTACKERSTATEUPDATEswap(std::move(other.SMSG_ATTACKERSTATEUPDATE));
        std::swap(this->SMSG_ATTACKERSTATEUPDATE, SMSG_ATTACKERSTATEUPDATEswap);
    }
    if (opcode == Opcode::SMSG_CANCEL_COMBAT) {
        wrath::SMSG_CANCEL_COMBAT SMSG_CANCEL_COMBATswap(std::move(other.SMSG_CANCEL_COMBAT));
        std::swap(this->SMSG_CANCEL_COMBAT, SMSG_CANCEL_COMBATswap);
    }
    if (opcode == Opcode::SMSG_SPELLHEALLOG) {
        wrath::SMSG_SPELLHEALLOG SMSG_SPELLHEALLOGswap(std::move(other.SMSG_SPELLHEALLOG));
        std::swap(this->SMSG_SPELLHEALLOG, SMSG_SPELLHEALLOGswap);
    }
    if (opcode == Opcode::SMSG_SPELLENERGIZELOG) {
        wrath::SMSG_SPELLENERGIZELOG SMSG_SPELLENERGIZELOGswap(std::move(other.SMSG_SPELLENERGIZELOG));
        std::swap(this->SMSG_SPELLENERGIZELOG, SMSG_SPELLENERGIZELOGswap);
    }
    if (opcode == Opcode::SMSG_BREAK_TARGET) {
        wrath::SMSG_BREAK_TARGET SMSG_BREAK_TARGETswap(std::move(other.SMSG_BREAK_TARGET));
        std::swap(this->SMSG_BREAK_TARGET, SMSG_BREAK_TARGETswap);
    }
    if (opcode == Opcode::SMSG_BINDPOINTUPDATE) {
        wrath::SMSG_BINDPOINTUPDATE SMSG_BINDPOINTUPDATEswap(std::move(other.SMSG_BINDPOINTUPDATE));
        std::swap(this->SMSG_BINDPOINTUPDATE, SMSG_BINDPOINTUPDATEswap);
    }
    if (opcode == Opcode::SMSG_PLAYERBOUND) {
        wrath::SMSG_PLAYERBOUND SMSG_PLAYERBOUNDswap(std::move(other.SMSG_PLAYERBOUND));
        std::swap(this->SMSG_PLAYERBOUND, SMSG_PLAYERBOUNDswap);
    }
    if (opcode == Opcode::SMSG_CLIENT_CONTROL_UPDATE) {
        wrath::SMSG_CLIENT_CONTROL_UPDATE SMSG_CLIENT_CONTROL_UPDATEswap(std::move(other.SMSG_CLIENT_CONTROL_UPDATE));
        std::swap(this->SMSG_CLIENT_CONTROL_UPDATE, SMSG_CLIENT_CONTROL_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_RESURRECT_REQUEST) {
        wrath::SMSG_RESURRECT_REQUEST SMSG_RESURRECT_REQUESTswap(std::move(other.SMSG_RESURRECT_REQUEST));
        std::swap(this->SMSG_RESURRECT_REQUEST, SMSG_RESURRECT_REQUESTswap);
    }
    if (opcode == Opcode::SMSG_LOOT_RESPONSE) {
        wrath::SMSG_LOOT_RESPONSE SMSG_LOOT_RESPONSEswap(std::move(other.SMSG_LOOT_RESPONSE));
        std::swap(this->SMSG_LOOT_RESPONSE, SMSG_LOOT_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_LOOT_RELEASE_RESPONSE) {
        wrath::SMSG_LOOT_RELEASE_RESPONSE SMSG_LOOT_RELEASE_RESPONSEswap(std::move(other.SMSG_LOOT_RELEASE_RESPONSE));
        std::swap(this->SMSG_LOOT_RELEASE_RESPONSE, SMSG_LOOT_RELEASE_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_LOOT_REMOVED) {
        wrath::SMSG_LOOT_REMOVED SMSG_LOOT_REMOVEDswap(std::move(other.SMSG_LOOT_REMOVED));
        std::swap(this->SMSG_LOOT_REMOVED, SMSG_LOOT_REMOVEDswap);
    }
    if (opcode == Opcode::SMSG_LOOT_MONEY_NOTIFY) {
        wrath::SMSG_LOOT_MONEY_NOTIFY SMSG_LOOT_MONEY_NOTIFYswap(std::move(other.SMSG_LOOT_MONEY_NOTIFY));
        std::swap(this->SMSG_LOOT_MONEY_NOTIFY, SMSG_LOOT_MONEY_NOTIFYswap);
    }
    if (opcode == Opcode::SMSG_LOOT_CLEAR_MONEY) {
        wrath::SMSG_LOOT_CLEAR_MONEY SMSG_LOOT_CLEAR_MONEYswap(std::move(other.SMSG_LOOT_CLEAR_MONEY));
        std::swap(this->SMSG_LOOT_CLEAR_MONEY, SMSG_LOOT_CLEAR_MONEYswap);
    }
    if (opcode == Opcode::SMSG_ITEM_PUSH_RESULT) {
        wrath::SMSG_ITEM_PUSH_RESULT SMSG_ITEM_PUSH_RESULTswap(std::move(other.SMSG_ITEM_PUSH_RESULT));
        std::swap(this->SMSG_ITEM_PUSH_RESULT, SMSG_ITEM_PUSH_RESULTswap);
    }
    if (opcode == Opcode::SMSG_DUEL_REQUESTED) {
        wrath::SMSG_DUEL_REQUESTED SMSG_DUEL_REQUESTEDswap(std::move(other.SMSG_DUEL_REQUESTED));
        std::swap(this->SMSG_DUEL_REQUESTED, SMSG_DUEL_REQUESTEDswap);
    }
    if (opcode == Opcode::SMSG_DUEL_OUTOFBOUNDS) {
        wrath::SMSG_DUEL_OUTOFBOUNDS SMSG_DUEL_OUTOFBOUNDSswap(std::move(other.SMSG_DUEL_OUTOFBOUNDS));
        std::swap(this->SMSG_DUEL_OUTOFBOUNDS, SMSG_DUEL_OUTOFBOUNDSswap);
    }
    if (opcode == Opcode::SMSG_DUEL_INBOUNDS) {
        wrath::SMSG_DUEL_INBOUNDS SMSG_DUEL_INBOUNDSswap(std::move(other.SMSG_DUEL_INBOUNDS));
        std::swap(this->SMSG_DUEL_INBOUNDS, SMSG_DUEL_INBOUNDSswap);
    }
    if (opcode == Opcode::SMSG_DUEL_COMPLETE) {
        wrath::SMSG_DUEL_COMPLETE SMSG_DUEL_COMPLETEswap(std::move(other.SMSG_DUEL_COMPLETE));
        std::swap(this->SMSG_DUEL_COMPLETE, SMSG_DUEL_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_DUEL_WINNER) {
        wrath::SMSG_DUEL_WINNER SMSG_DUEL_WINNERswap(std::move(other.SMSG_DUEL_WINNER));
        std::swap(this->SMSG_DUEL_WINNER, SMSG_DUEL_WINNERswap);
    }
    if (opcode == Opcode::SMSG_MOUNTRESULT) {
        wrath::SMSG_MOUNTRESULT SMSG_MOUNTRESULTswap(std::move(other.SMSG_MOUNTRESULT));
        std::swap(this->SMSG_MOUNTRESULT, SMSG_MOUNTRESULTswap);
    }
    if (opcode == Opcode::SMSG_MOUNTSPECIAL_ANIM) {
        wrath::SMSG_MOUNTSPECIAL_ANIM SMSG_MOUNTSPECIAL_ANIMswap(std::move(other.SMSG_MOUNTSPECIAL_ANIM));
        std::swap(this->SMSG_MOUNTSPECIAL_ANIM, SMSG_MOUNTSPECIAL_ANIMswap);
    }
    if (opcode == Opcode::SMSG_PET_TAME_FAILURE) {
        wrath::SMSG_PET_TAME_FAILURE SMSG_PET_TAME_FAILUREswap(std::move(other.SMSG_PET_TAME_FAILURE));
        std::swap(this->SMSG_PET_TAME_FAILURE, SMSG_PET_TAME_FAILUREswap);
    }
    if (opcode == Opcode::SMSG_PET_NAME_INVALID) {
        wrath::SMSG_PET_NAME_INVALID SMSG_PET_NAME_INVALIDswap(std::move(other.SMSG_PET_NAME_INVALID));
        std::swap(this->SMSG_PET_NAME_INVALID, SMSG_PET_NAME_INVALIDswap);
    }
    if (opcode == Opcode::SMSG_PET_SPELLS) {
        wrath::SMSG_PET_SPELLS SMSG_PET_SPELLSswap(std::move(other.SMSG_PET_SPELLS));
        std::swap(this->SMSG_PET_SPELLS, SMSG_PET_SPELLSswap);
    }
    if (opcode == Opcode::SMSG_PET_MODE) {
        wrath::SMSG_PET_MODE SMSG_PET_MODEswap(std::move(other.SMSG_PET_MODE));
        std::swap(this->SMSG_PET_MODE, SMSG_PET_MODEswap);
    }
    if (opcode == Opcode::SMSG_GOSSIP_MESSAGE) {
        wrath::SMSG_GOSSIP_MESSAGE SMSG_GOSSIP_MESSAGEswap(std::move(other.SMSG_GOSSIP_MESSAGE));
        std::swap(this->SMSG_GOSSIP_MESSAGE, SMSG_GOSSIP_MESSAGEswap);
    }
    if (opcode == Opcode::SMSG_GOSSIP_COMPLETE) {
        wrath::SMSG_GOSSIP_COMPLETE SMSG_GOSSIP_COMPLETEswap(std::move(other.SMSG_GOSSIP_COMPLETE));
        std::swap(this->SMSG_GOSSIP_COMPLETE, SMSG_GOSSIP_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_NPC_TEXT_UPDATE) {
        wrath::SMSG_NPC_TEXT_UPDATE SMSG_NPC_TEXT_UPDATEswap(std::move(other.SMSG_NPC_TEXT_UPDATE));
        std::swap(this->SMSG_NPC_TEXT_UPDATE, SMSG_NPC_TEXT_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS) {
        wrath::SMSG_QUESTGIVER_STATUS SMSG_QUESTGIVER_STATUSswap(std::move(other.SMSG_QUESTGIVER_STATUS));
        std::swap(this->SMSG_QUESTGIVER_STATUS, SMSG_QUESTGIVER_STATUSswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_LIST) {
        wrath::SMSG_QUESTGIVER_QUEST_LIST SMSG_QUESTGIVER_QUEST_LISTswap(std::move(other.SMSG_QUESTGIVER_QUEST_LIST));
        std::swap(this->SMSG_QUESTGIVER_QUEST_LIST, SMSG_QUESTGIVER_QUEST_LISTswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) {
        wrath::SMSG_QUESTGIVER_QUEST_DETAILS SMSG_QUESTGIVER_QUEST_DETAILSswap(std::move(other.SMSG_QUESTGIVER_QUEST_DETAILS));
        std::swap(this->SMSG_QUESTGIVER_QUEST_DETAILS, SMSG_QUESTGIVER_QUEST_DETAILSswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) {
        wrath::SMSG_QUESTGIVER_REQUEST_ITEMS SMSG_QUESTGIVER_REQUEST_ITEMSswap(std::move(other.SMSG_QUESTGIVER_REQUEST_ITEMS));
        std::swap(this->SMSG_QUESTGIVER_REQUEST_ITEMS, SMSG_QUESTGIVER_REQUEST_ITEMSswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_OFFER_REWARD) {
        wrath::SMSG_QUESTGIVER_OFFER_REWARD SMSG_QUESTGIVER_OFFER_REWARDswap(std::move(other.SMSG_QUESTGIVER_OFFER_REWARD));
        std::swap(this->SMSG_QUESTGIVER_OFFER_REWARD, SMSG_QUESTGIVER_OFFER_REWARDswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_INVALID) {
        wrath::SMSG_QUESTGIVER_QUEST_INVALID SMSG_QUESTGIVER_QUEST_INVALIDswap(std::move(other.SMSG_QUESTGIVER_QUEST_INVALID));
        std::swap(this->SMSG_QUESTGIVER_QUEST_INVALID, SMSG_QUESTGIVER_QUEST_INVALIDswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) {
        wrath::SMSG_QUESTGIVER_QUEST_COMPLETE SMSG_QUESTGIVER_QUEST_COMPLETEswap(std::move(other.SMSG_QUESTGIVER_QUEST_COMPLETE));
        std::swap(this->SMSG_QUESTGIVER_QUEST_COMPLETE, SMSG_QUESTGIVER_QUEST_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_FAILED) {
        wrath::SMSG_QUESTGIVER_QUEST_FAILED SMSG_QUESTGIVER_QUEST_FAILEDswap(std::move(other.SMSG_QUESTGIVER_QUEST_FAILED));
        std::swap(this->SMSG_QUESTGIVER_QUEST_FAILED, SMSG_QUESTGIVER_QUEST_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_QUESTLOG_FULL) {
        wrath::SMSG_QUESTLOG_FULL SMSG_QUESTLOG_FULLswap(std::move(other.SMSG_QUESTLOG_FULL));
        std::swap(this->SMSG_QUESTLOG_FULL, SMSG_QUESTLOG_FULLswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILED) {
        wrath::SMSG_QUESTUPDATE_FAILED SMSG_QUESTUPDATE_FAILEDswap(std::move(other.SMSG_QUESTUPDATE_FAILED));
        std::swap(this->SMSG_QUESTUPDATE_FAILED, SMSG_QUESTUPDATE_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) {
        wrath::SMSG_QUESTUPDATE_FAILEDTIMER SMSG_QUESTUPDATE_FAILEDTIMERswap(std::move(other.SMSG_QUESTUPDATE_FAILEDTIMER));
        std::swap(this->SMSG_QUESTUPDATE_FAILEDTIMER, SMSG_QUESTUPDATE_FAILEDTIMERswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_COMPLETE) {
        wrath::SMSG_QUESTUPDATE_COMPLETE SMSG_QUESTUPDATE_COMPLETEswap(std::move(other.SMSG_QUESTUPDATE_COMPLETE));
        std::swap(this->SMSG_QUESTUPDATE_COMPLETE, SMSG_QUESTUPDATE_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_KILL) {
        wrath::SMSG_QUESTUPDATE_ADD_KILL SMSG_QUESTUPDATE_ADD_KILLswap(std::move(other.SMSG_QUESTUPDATE_ADD_KILL));
        std::swap(this->SMSG_QUESTUPDATE_ADD_KILL, SMSG_QUESTUPDATE_ADD_KILLswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_ITEM) {
        wrath::SMSG_QUESTUPDATE_ADD_ITEM SMSG_QUESTUPDATE_ADD_ITEMswap(std::move(other.SMSG_QUESTUPDATE_ADD_ITEM));
        std::swap(this->SMSG_QUESTUPDATE_ADD_ITEM, SMSG_QUESTUPDATE_ADD_ITEMswap);
    }
    if (opcode == Opcode::SMSG_QUEST_CONFIRM_ACCEPT) {
        wrath::SMSG_QUEST_CONFIRM_ACCEPT SMSG_QUEST_CONFIRM_ACCEPTswap(std::move(other.SMSG_QUEST_CONFIRM_ACCEPT));
        std::swap(this->SMSG_QUEST_CONFIRM_ACCEPT, SMSG_QUEST_CONFIRM_ACCEPTswap);
    }
    if (opcode == Opcode::SMSG_LIST_INVENTORY) {
        wrath::SMSG_LIST_INVENTORY SMSG_LIST_INVENTORYswap(std::move(other.SMSG_LIST_INVENTORY));
        std::swap(this->SMSG_LIST_INVENTORY, SMSG_LIST_INVENTORYswap);
    }
    if (opcode == Opcode::SMSG_SELL_ITEM) {
        wrath::SMSG_SELL_ITEM SMSG_SELL_ITEMswap(std::move(other.SMSG_SELL_ITEM));
        std::swap(this->SMSG_SELL_ITEM, SMSG_SELL_ITEMswap);
    }
    if (opcode == Opcode::SMSG_BUY_ITEM) {
        wrath::SMSG_BUY_ITEM SMSG_BUY_ITEMswap(std::move(other.SMSG_BUY_ITEM));
        std::swap(this->SMSG_BUY_ITEM, SMSG_BUY_ITEMswap);
    }
    if (opcode == Opcode::SMSG_BUY_FAILED) {
        wrath::SMSG_BUY_FAILED SMSG_BUY_FAILEDswap(std::move(other.SMSG_BUY_FAILED));
        std::swap(this->SMSG_BUY_FAILED, SMSG_BUY_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_SHOWTAXINODES) {
        wrath::SMSG_SHOWTAXINODES SMSG_SHOWTAXINODESswap(std::move(other.SMSG_SHOWTAXINODES));
        std::swap(this->SMSG_SHOWTAXINODES, SMSG_SHOWTAXINODESswap);
    }
    if (opcode == Opcode::SMSG_TAXINODE_STATUS) {
        wrath::SMSG_TAXINODE_STATUS SMSG_TAXINODE_STATUSswap(std::move(other.SMSG_TAXINODE_STATUS));
        std::swap(this->SMSG_TAXINODE_STATUS, SMSG_TAXINODE_STATUSswap);
    }
    if (opcode == Opcode::SMSG_ACTIVATETAXIREPLY) {
        wrath::SMSG_ACTIVATETAXIREPLY SMSG_ACTIVATETAXIREPLYswap(std::move(other.SMSG_ACTIVATETAXIREPLY));
        std::swap(this->SMSG_ACTIVATETAXIREPLY, SMSG_ACTIVATETAXIREPLYswap);
    }
    if (opcode == Opcode::SMSG_NEW_TAXI_PATH) {
        wrath::SMSG_NEW_TAXI_PATH SMSG_NEW_TAXI_PATHswap(std::move(other.SMSG_NEW_TAXI_PATH));
        std::swap(this->SMSG_NEW_TAXI_PATH, SMSG_NEW_TAXI_PATHswap);
    }
    if (opcode == Opcode::SMSG_TRAINER_LIST) {
        wrath::SMSG_TRAINER_LIST SMSG_TRAINER_LISTswap(std::move(other.SMSG_TRAINER_LIST));
        std::swap(this->SMSG_TRAINER_LIST, SMSG_TRAINER_LISTswap);
    }
    if (opcode == Opcode::SMSG_TRAINER_BUY_SUCCEEDED) {
        wrath::SMSG_TRAINER_BUY_SUCCEEDED SMSG_TRAINER_BUY_SUCCEEDEDswap(std::move(other.SMSG_TRAINER_BUY_SUCCEEDED));
        std::swap(this->SMSG_TRAINER_BUY_SUCCEEDED, SMSG_TRAINER_BUY_SUCCEEDEDswap);
    }
    if (opcode == Opcode::SMSG_TRAINER_BUY_FAILED) {
        wrath::SMSG_TRAINER_BUY_FAILED SMSG_TRAINER_BUY_FAILEDswap(std::move(other.SMSG_TRAINER_BUY_FAILED));
        std::swap(this->SMSG_TRAINER_BUY_FAILED, SMSG_TRAINER_BUY_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_SHOW_BANK) {
        wrath::SMSG_SHOW_BANK SMSG_SHOW_BANKswap(std::move(other.SMSG_SHOW_BANK));
        std::swap(this->SMSG_SHOW_BANK, SMSG_SHOW_BANKswap);
    }
    if (opcode == Opcode::SMSG_BUY_BANK_SLOT_RESULT) {
        wrath::SMSG_BUY_BANK_SLOT_RESULT SMSG_BUY_BANK_SLOT_RESULTswap(std::move(other.SMSG_BUY_BANK_SLOT_RESULT));
        std::swap(this->SMSG_BUY_BANK_SLOT_RESULT, SMSG_BUY_BANK_SLOT_RESULTswap);
    }
    if (opcode == Opcode::SMSG_PETITION_SHOWLIST) {
        wrath::SMSG_PETITION_SHOWLIST SMSG_PETITION_SHOWLISTswap(std::move(other.SMSG_PETITION_SHOWLIST));
        std::swap(this->SMSG_PETITION_SHOWLIST, SMSG_PETITION_SHOWLISTswap);
    }
    if (opcode == Opcode::SMSG_PETITION_SHOW_SIGNATURES) {
        wrath::SMSG_PETITION_SHOW_SIGNATURES SMSG_PETITION_SHOW_SIGNATURESswap(std::move(other.SMSG_PETITION_SHOW_SIGNATURES));
        std::swap(this->SMSG_PETITION_SHOW_SIGNATURES, SMSG_PETITION_SHOW_SIGNATURESswap);
    }
    if (opcode == Opcode::SMSG_PETITION_SIGN_RESULTS) {
        wrath::SMSG_PETITION_SIGN_RESULTS SMSG_PETITION_SIGN_RESULTSswap(std::move(other.SMSG_PETITION_SIGN_RESULTS));
        std::swap(this->SMSG_PETITION_SIGN_RESULTS, SMSG_PETITION_SIGN_RESULTSswap);
    }
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        wrath::MSG_PETITION_DECLINE MSG_PETITION_DECLINEswap(std::move(other.MSG_PETITION_DECLINE));
        std::swap(this->MSG_PETITION_DECLINE, MSG_PETITION_DECLINEswap);
    }
    if (opcode == Opcode::SMSG_TURN_IN_PETITION_RESULTS) {
        wrath::SMSG_TURN_IN_PETITION_RESULTS SMSG_TURN_IN_PETITION_RESULTSswap(std::move(other.SMSG_TURN_IN_PETITION_RESULTS));
        std::swap(this->SMSG_TURN_IN_PETITION_RESULTS, SMSG_TURN_IN_PETITION_RESULTSswap);
    }
    if (opcode == Opcode::SMSG_PETITION_QUERY_RESPONSE) {
        wrath::SMSG_PETITION_QUERY_RESPONSE SMSG_PETITION_QUERY_RESPONSEswap(std::move(other.SMSG_PETITION_QUERY_RESPONSE));
        std::swap(this->SMSG_PETITION_QUERY_RESPONSE, SMSG_PETITION_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_FISH_NOT_HOOKED) {
        wrath::SMSG_FISH_NOT_HOOKED SMSG_FISH_NOT_HOOKEDswap(std::move(other.SMSG_FISH_NOT_HOOKED));
        std::swap(this->SMSG_FISH_NOT_HOOKED, SMSG_FISH_NOT_HOOKEDswap);
    }
    if (opcode == Opcode::SMSG_FISH_ESCAPED) {
        wrath::SMSG_FISH_ESCAPED SMSG_FISH_ESCAPEDswap(std::move(other.SMSG_FISH_ESCAPED));
        std::swap(this->SMSG_FISH_ESCAPED, SMSG_FISH_ESCAPEDswap);
    }
    if (opcode == Opcode::SMSG_NOTIFICATION) {
        wrath::SMSG_NOTIFICATION SMSG_NOTIFICATIONswap(std::move(other.SMSG_NOTIFICATION));
        std::swap(this->SMSG_NOTIFICATION, SMSG_NOTIFICATIONswap);
    }
    if (opcode == Opcode::SMSG_PLAYED_TIME) {
        wrath::SMSG_PLAYED_TIME SMSG_PLAYED_TIMEswap(std::move(other.SMSG_PLAYED_TIME));
        std::swap(this->SMSG_PLAYED_TIME, SMSG_PLAYED_TIMEswap);
    }
    if (opcode == Opcode::SMSG_QUERY_TIME_RESPONSE) {
        wrath::SMSG_QUERY_TIME_RESPONSE SMSG_QUERY_TIME_RESPONSEswap(std::move(other.SMSG_QUERY_TIME_RESPONSE));
        std::swap(this->SMSG_QUERY_TIME_RESPONSE, SMSG_QUERY_TIME_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_LOG_XPGAIN) {
        wrath::SMSG_LOG_XPGAIN SMSG_LOG_XPGAINswap(std::move(other.SMSG_LOG_XPGAIN));
        std::swap(this->SMSG_LOG_XPGAIN, SMSG_LOG_XPGAINswap);
    }
    if (opcode == Opcode::SMSG_LEVELUP_INFO) {
        wrath::SMSG_LEVELUP_INFO SMSG_LEVELUP_INFOswap(std::move(other.SMSG_LEVELUP_INFO));
        std::swap(this->SMSG_LEVELUP_INFO, SMSG_LEVELUP_INFOswap);
    }
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        wrath::MSG_MINIMAP_PING_Server MSG_MINIMAP_PINGswap(std::move(other.MSG_MINIMAP_PING));
        std::swap(this->MSG_MINIMAP_PING, MSG_MINIMAP_PINGswap);
    }
    if (opcode == Opcode::SMSG_ENCHANTMENTLOG) {
        wrath::SMSG_ENCHANTMENTLOG SMSG_ENCHANTMENTLOGswap(std::move(other.SMSG_ENCHANTMENTLOG));
        std::swap(this->SMSG_ENCHANTMENTLOG, SMSG_ENCHANTMENTLOGswap);
    }
    if (opcode == Opcode::SMSG_START_MIRROR_TIMER) {
        wrath::SMSG_START_MIRROR_TIMER SMSG_START_MIRROR_TIMERswap(std::move(other.SMSG_START_MIRROR_TIMER));
        std::swap(this->SMSG_START_MIRROR_TIMER, SMSG_START_MIRROR_TIMERswap);
    }
    if (opcode == Opcode::SMSG_PAUSE_MIRROR_TIMER) {
        wrath::SMSG_PAUSE_MIRROR_TIMER SMSG_PAUSE_MIRROR_TIMERswap(std::move(other.SMSG_PAUSE_MIRROR_TIMER));
        std::swap(this->SMSG_PAUSE_MIRROR_TIMER, SMSG_PAUSE_MIRROR_TIMERswap);
    }
    if (opcode == Opcode::SMSG_STOP_MIRROR_TIMER) {
        wrath::SMSG_STOP_MIRROR_TIMER SMSG_STOP_MIRROR_TIMERswap(std::move(other.SMSG_STOP_MIRROR_TIMER));
        std::swap(this->SMSG_STOP_MIRROR_TIMER, SMSG_STOP_MIRROR_TIMERswap);
    }
    if (opcode == Opcode::SMSG_PONG) {
        wrath::SMSG_PONG SMSG_PONGswap(std::move(other.SMSG_PONG));
        std::swap(this->SMSG_PONG, SMSG_PONGswap);
    }
    if (opcode == Opcode::SMSG_CLEAR_COOLDOWN) {
        wrath::SMSG_CLEAR_COOLDOWN SMSG_CLEAR_COOLDOWNswap(std::move(other.SMSG_CLEAR_COOLDOWN));
        std::swap(this->SMSG_CLEAR_COOLDOWN, SMSG_CLEAR_COOLDOWNswap);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_PAGETEXT) {
        wrath::SMSG_GAMEOBJECT_PAGETEXT SMSG_GAMEOBJECT_PAGETEXTswap(std::move(other.SMSG_GAMEOBJECT_PAGETEXT));
        std::swap(this->SMSG_GAMEOBJECT_PAGETEXT, SMSG_GAMEOBJECT_PAGETEXTswap);
    }
    if (opcode == Opcode::SMSG_SPELL_DELAYED) {
        wrath::SMSG_SPELL_DELAYED SMSG_SPELL_DELAYEDswap(std::move(other.SMSG_SPELL_DELAYED));
        std::swap(this->SMSG_SPELL_DELAYED, SMSG_SPELL_DELAYEDswap);
    }
    if (opcode == Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) {
        wrath::SMSG_QUEST_POI_QUERY_RESPONSE SMSG_QUEST_POI_QUERY_RESPONSEswap(std::move(other.SMSG_QUEST_POI_QUERY_RESPONSE));
        std::swap(this->SMSG_QUEST_POI_QUERY_RESPONSE, SMSG_QUEST_POI_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_ITEM_TIME_UPDATE) {
        wrath::SMSG_ITEM_TIME_UPDATE SMSG_ITEM_TIME_UPDATEswap(std::move(other.SMSG_ITEM_TIME_UPDATE));
        std::swap(this->SMSG_ITEM_TIME_UPDATE, SMSG_ITEM_TIME_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) {
        wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE SMSG_ITEM_ENCHANT_TIME_UPDATEswap(std::move(other.SMSG_ITEM_ENCHANT_TIME_UPDATE));
        std::swap(this->SMSG_ITEM_ENCHANT_TIME_UPDATE, SMSG_ITEM_ENCHANT_TIME_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_AUTH_CHALLENGE) {
        wrath::SMSG_AUTH_CHALLENGE SMSG_AUTH_CHALLENGEswap(std::move(other.SMSG_AUTH_CHALLENGE));
        std::swap(this->SMSG_AUTH_CHALLENGE, SMSG_AUTH_CHALLENGEswap);
    }
    if (opcode == Opcode::SMSG_AUTH_RESPONSE) {
        wrath::SMSG_AUTH_RESPONSE SMSG_AUTH_RESPONSEswap(std::move(other.SMSG_AUTH_RESPONSE));
        std::swap(this->SMSG_AUTH_RESPONSE, SMSG_AUTH_RESPONSEswap);
    }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        wrath::MSG_SAVE_GUILD_EMBLEM_Server MSG_SAVE_GUILD_EMBLEMswap(std::move(other.MSG_SAVE_GUILD_EMBLEM));
        std::swap(this->MSG_SAVE_GUILD_EMBLEM, MSG_SAVE_GUILD_EMBLEMswap);
    }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        wrath::MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATEswap(std::move(other.MSG_TABARDVENDOR_ACTIVATE));
        std::swap(this->MSG_TABARDVENDOR_ACTIVATE, MSG_TABARDVENDOR_ACTIVATEswap);
    }
    if (opcode == Opcode::SMSG_PLAY_SPELL_VISUAL) {
        wrath::SMSG_PLAY_SPELL_VISUAL SMSG_PLAY_SPELL_VISUALswap(std::move(other.SMSG_PLAY_SPELL_VISUAL));
        std::swap(this->SMSG_PLAY_SPELL_VISUAL, SMSG_PLAY_SPELL_VISUALswap);
    }
    if (opcode == Opcode::SMSG_PARTYKILLLOG) {
        wrath::SMSG_PARTYKILLLOG SMSG_PARTYKILLLOGswap(std::move(other.SMSG_PARTYKILLLOG));
        std::swap(this->SMSG_PARTYKILLLOG, SMSG_PARTYKILLLOGswap);
    }
    if (opcode == Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) {
        wrath::SMSG_COMPRESSED_UPDATE_OBJECT SMSG_COMPRESSED_UPDATE_OBJECTswap(std::move(other.SMSG_COMPRESSED_UPDATE_OBJECT));
        std::swap(this->SMSG_COMPRESSED_UPDATE_OBJECT, SMSG_COMPRESSED_UPDATE_OBJECTswap);
    }
    if (opcode == Opcode::SMSG_PLAY_SPELL_IMPACT) {
        wrath::SMSG_PLAY_SPELL_IMPACT SMSG_PLAY_SPELL_IMPACTswap(std::move(other.SMSG_PLAY_SPELL_IMPACT));
        std::swap(this->SMSG_PLAY_SPELL_IMPACT, SMSG_PLAY_SPELL_IMPACTswap);
    }
    if (opcode == Opcode::SMSG_EXPLORATION_EXPERIENCE) {
        wrath::SMSG_EXPLORATION_EXPERIENCE SMSG_EXPLORATION_EXPERIENCEswap(std::move(other.SMSG_EXPLORATION_EXPERIENCE));
        std::swap(this->SMSG_EXPLORATION_EXPERIENCE, SMSG_EXPLORATION_EXPERIENCEswap);
    }
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        wrath::MSG_RANDOM_ROLL_Server MSG_RANDOM_ROLLswap(std::move(other.MSG_RANDOM_ROLL));
        std::swap(this->MSG_RANDOM_ROLL, MSG_RANDOM_ROLLswap);
    }
    if (opcode == Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) {
        wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG SMSG_ENVIRONMENTAL_DAMAGE_LOGswap(std::move(other.SMSG_ENVIRONMENTAL_DAMAGE_LOG));
        std::swap(this->SMSG_ENVIRONMENTAL_DAMAGE_LOG, SMSG_ENVIRONMENTAL_DAMAGE_LOGswap);
    }
    if (opcode == Opcode::SMSG_LFG_PLAYER_REWARD) {
        wrath::SMSG_LFG_PLAYER_REWARD SMSG_LFG_PLAYER_REWARDswap(std::move(other.SMSG_LFG_PLAYER_REWARD));
        std::swap(this->SMSG_LFG_PLAYER_REWARD, SMSG_LFG_PLAYER_REWARDswap);
    }
    if (opcode == Opcode::SMSG_LFG_TELEPORT_DENIED) {
        wrath::SMSG_LFG_TELEPORT_DENIED SMSG_LFG_TELEPORT_DENIEDswap(std::move(other.SMSG_LFG_TELEPORT_DENIED));
        std::swap(this->SMSG_LFG_TELEPORT_DENIED, SMSG_LFG_TELEPORT_DENIEDswap);
    }
    if (opcode == Opcode::SMSG_REMOVED_SPELL) {
        wrath::SMSG_REMOVED_SPELL SMSG_REMOVED_SPELLswap(std::move(other.SMSG_REMOVED_SPELL));
        std::swap(this->SMSG_REMOVED_SPELL, SMSG_REMOVED_SPELLswap);
    }
    if (opcode == Opcode::SMSG_GMTICKET_CREATE) {
        wrath::SMSG_GMTICKET_CREATE SMSG_GMTICKET_CREATEswap(std::move(other.SMSG_GMTICKET_CREATE));
        std::swap(this->SMSG_GMTICKET_CREATE, SMSG_GMTICKET_CREATEswap);
    }
    if (opcode == Opcode::SMSG_GMTICKET_UPDATETEXT) {
        wrath::SMSG_GMTICKET_UPDATETEXT SMSG_GMTICKET_UPDATETEXTswap(std::move(other.SMSG_GMTICKET_UPDATETEXT));
        std::swap(this->SMSG_GMTICKET_UPDATETEXT, SMSG_GMTICKET_UPDATETEXTswap);
    }
    if (opcode == Opcode::SMSG_ACCOUNT_DATA_TIMES) {
        wrath::SMSG_ACCOUNT_DATA_TIMES SMSG_ACCOUNT_DATA_TIMESswap(std::move(other.SMSG_ACCOUNT_DATA_TIMES));
        std::swap(this->SMSG_ACCOUNT_DATA_TIMES, SMSG_ACCOUNT_DATA_TIMESswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA) {
        wrath::SMSG_UPDATE_ACCOUNT_DATA SMSG_UPDATE_ACCOUNT_DATAswap(std::move(other.SMSG_UPDATE_ACCOUNT_DATA));
        std::swap(this->SMSG_UPDATE_ACCOUNT_DATA, SMSG_UPDATE_ACCOUNT_DATAswap);
    }
    if (opcode == Opcode::SMSG_GMTICKET_GETTICKET) {
        wrath::SMSG_GMTICKET_GETTICKET SMSG_GMTICKET_GETTICKETswap(std::move(other.SMSG_GMTICKET_GETTICKET));
        std::swap(this->SMSG_GMTICKET_GETTICKET, SMSG_GMTICKET_GETTICKETswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) {
        wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT SMSG_UPDATE_INSTANCE_ENCOUNTER_UNITswap(std::move(other.SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT));
        std::swap(this->SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT, SMSG_UPDATE_INSTANCE_ENCOUNTER_UNITswap);
    }
    if (opcode == Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) {
        wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM SMSG_GAMEOBJECT_DESPAWN_ANIMswap(std::move(other.SMSG_GAMEOBJECT_DESPAWN_ANIM));
        std::swap(this->SMSG_GAMEOBJECT_DESPAWN_ANIM, SMSG_GAMEOBJECT_DESPAWN_ANIMswap);
    }
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        wrath::MSG_CORPSE_QUERY_Server MSG_CORPSE_QUERYswap(std::move(other.MSG_CORPSE_QUERY));
        std::swap(this->MSG_CORPSE_QUERY, MSG_CORPSE_QUERYswap);
    }
    if (opcode == Opcode::SMSG_GMTICKET_DELETETICKET) {
        wrath::SMSG_GMTICKET_DELETETICKET SMSG_GMTICKET_DELETETICKETswap(std::move(other.SMSG_GMTICKET_DELETETICKET));
        std::swap(this->SMSG_GMTICKET_DELETETICKET, SMSG_GMTICKET_DELETETICKETswap);
    }
    if (opcode == Opcode::SMSG_CHAT_WRONG_FACTION) {
        wrath::SMSG_CHAT_WRONG_FACTION SMSG_CHAT_WRONG_FACTIONswap(std::move(other.SMSG_CHAT_WRONG_FACTION));
        std::swap(this->SMSG_CHAT_WRONG_FACTION, SMSG_CHAT_WRONG_FACTIONswap);
    }
    if (opcode == Opcode::SMSG_GMTICKET_SYSTEMSTATUS) {
        wrath::SMSG_GMTICKET_SYSTEMSTATUS SMSG_GMTICKET_SYSTEMSTATUSswap(std::move(other.SMSG_GMTICKET_SYSTEMSTATUS));
        std::swap(this->SMSG_GMTICKET_SYSTEMSTATUS, SMSG_GMTICKET_SYSTEMSTATUSswap);
    }
    if (opcode == Opcode::SMSG_QUEST_FORCE_REMOVE) {
        wrath::SMSG_QUEST_FORCE_REMOVE SMSG_QUEST_FORCE_REMOVEswap(std::move(other.SMSG_QUEST_FORCE_REMOVE));
        std::swap(this->SMSG_QUEST_FORCE_REMOVE, SMSG_QUEST_FORCE_REMOVEswap);
    }
    if (opcode == Opcode::SMSG_SPIRIT_HEALER_CONFIRM) {
        wrath::SMSG_SPIRIT_HEALER_CONFIRM SMSG_SPIRIT_HEALER_CONFIRMswap(std::move(other.SMSG_SPIRIT_HEALER_CONFIRM));
        std::swap(this->SMSG_SPIRIT_HEALER_CONFIRM, SMSG_SPIRIT_HEALER_CONFIRMswap);
    }
    if (opcode == Opcode::SMSG_GOSSIP_POI) {
        wrath::SMSG_GOSSIP_POI SMSG_GOSSIP_POIswap(std::move(other.SMSG_GOSSIP_POI));
        std::swap(this->SMSG_GOSSIP_POI, SMSG_GOSSIP_POIswap);
    }
    if (opcode == Opcode::SMSG_LOGIN_VERIFY_WORLD) {
        wrath::SMSG_LOGIN_VERIFY_WORLD SMSG_LOGIN_VERIFY_WORLDswap(std::move(other.SMSG_LOGIN_VERIFY_WORLD));
        std::swap(this->SMSG_LOGIN_VERIFY_WORLD, SMSG_LOGIN_VERIFY_WORLDswap);
    }
    if (opcode == Opcode::SMSG_SEND_MAIL_RESULT) {
        wrath::SMSG_SEND_MAIL_RESULT SMSG_SEND_MAIL_RESULTswap(std::move(other.SMSG_SEND_MAIL_RESULT));
        std::swap(this->SMSG_SEND_MAIL_RESULT, SMSG_SEND_MAIL_RESULTswap);
    }
    if (opcode == Opcode::SMSG_MAIL_LIST_RESULT) {
        wrath::SMSG_MAIL_LIST_RESULT SMSG_MAIL_LIST_RESULTswap(std::move(other.SMSG_MAIL_LIST_RESULT));
        std::swap(this->SMSG_MAIL_LIST_RESULT, SMSG_MAIL_LIST_RESULTswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_LIST) {
        wrath::SMSG_BATTLEFIELD_LIST SMSG_BATTLEFIELD_LISTswap(std::move(other.SMSG_BATTLEFIELD_LIST));
        std::swap(this->SMSG_BATTLEFIELD_LIST, SMSG_BATTLEFIELD_LISTswap);
    }
    if (opcode == Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) {
        wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE SMSG_ITEM_TEXT_QUERY_RESPONSEswap(std::move(other.SMSG_ITEM_TEXT_QUERY_RESPONSE));
        std::swap(this->SMSG_ITEM_TEXT_QUERY_RESPONSE, SMSG_ITEM_TEXT_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_SPELLLOGMISS) {
        wrath::SMSG_SPELLLOGMISS SMSG_SPELLLOGMISSswap(std::move(other.SMSG_SPELLLOGMISS));
        std::swap(this->SMSG_SPELLLOGMISS, SMSG_SPELLLOGMISSswap);
    }
    if (opcode == Opcode::SMSG_SPELLLOGEXECUTE) {
        wrath::SMSG_SPELLLOGEXECUTE SMSG_SPELLLOGEXECUTEswap(std::move(other.SMSG_SPELLLOGEXECUTE));
        std::swap(this->SMSG_SPELLLOGEXECUTE, SMSG_SPELLLOGEXECUTEswap);
    }
    if (opcode == Opcode::SMSG_PERIODICAURALOG) {
        wrath::SMSG_PERIODICAURALOG SMSG_PERIODICAURALOGswap(std::move(other.SMSG_PERIODICAURALOG));
        std::swap(this->SMSG_PERIODICAURALOG, SMSG_PERIODICAURALOGswap);
    }
    if (opcode == Opcode::SMSG_SPELLDAMAGESHIELD) {
        wrath::SMSG_SPELLDAMAGESHIELD SMSG_SPELLDAMAGESHIELDswap(std::move(other.SMSG_SPELLDAMAGESHIELD));
        std::swap(this->SMSG_SPELLDAMAGESHIELD, SMSG_SPELLDAMAGESHIELDswap);
    }
    if (opcode == Opcode::SMSG_SPELLNONMELEEDAMAGELOG) {
        wrath::SMSG_SPELLNONMELEEDAMAGELOG SMSG_SPELLNONMELEEDAMAGELOGswap(std::move(other.SMSG_SPELLNONMELEEDAMAGELOG));
        std::swap(this->SMSG_SPELLNONMELEEDAMAGELOG, SMSG_SPELLNONMELEEDAMAGELOGswap);
    }
    if (opcode == Opcode::SMSG_RESURRECT_FAILED) {
        wrath::SMSG_RESURRECT_FAILED SMSG_RESURRECT_FAILEDswap(std::move(other.SMSG_RESURRECT_FAILED));
        std::swap(this->SMSG_RESURRECT_FAILED, SMSG_RESURRECT_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_ZONE_UNDER_ATTACK) {
        wrath::SMSG_ZONE_UNDER_ATTACK SMSG_ZONE_UNDER_ATTACKswap(std::move(other.SMSG_ZONE_UNDER_ATTACK));
        std::swap(this->SMSG_ZONE_UNDER_ATTACK, SMSG_ZONE_UNDER_ATTACKswap);
    }
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        wrath::MSG_AUCTION_HELLO_Server MSG_AUCTION_HELLOswap(std::move(other.MSG_AUCTION_HELLO));
        std::swap(this->MSG_AUCTION_HELLO, MSG_AUCTION_HELLOswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_COMMAND_RESULT) {
        wrath::SMSG_AUCTION_COMMAND_RESULT SMSG_AUCTION_COMMAND_RESULTswap(std::move(other.SMSG_AUCTION_COMMAND_RESULT));
        std::swap(this->SMSG_AUCTION_COMMAND_RESULT, SMSG_AUCTION_COMMAND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_LIST_RESULT) {
        wrath::SMSG_AUCTION_LIST_RESULT SMSG_AUCTION_LIST_RESULTswap(std::move(other.SMSG_AUCTION_LIST_RESULT));
        std::swap(this->SMSG_AUCTION_LIST_RESULT, SMSG_AUCTION_LIST_RESULTswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) {
        wrath::SMSG_AUCTION_OWNER_LIST_RESULT SMSG_AUCTION_OWNER_LIST_RESULTswap(std::move(other.SMSG_AUCTION_OWNER_LIST_RESULT));
        std::swap(this->SMSG_AUCTION_OWNER_LIST_RESULT, SMSG_AUCTION_OWNER_LIST_RESULTswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) {
        wrath::SMSG_AUCTION_BIDDER_NOTIFICATION SMSG_AUCTION_BIDDER_NOTIFICATIONswap(std::move(other.SMSG_AUCTION_BIDDER_NOTIFICATION));
        std::swap(this->SMSG_AUCTION_BIDDER_NOTIFICATION, SMSG_AUCTION_BIDDER_NOTIFICATIONswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) {
        wrath::SMSG_AUCTION_OWNER_NOTIFICATION SMSG_AUCTION_OWNER_NOTIFICATIONswap(std::move(other.SMSG_AUCTION_OWNER_NOTIFICATION));
        std::swap(this->SMSG_AUCTION_OWNER_NOTIFICATION, SMSG_AUCTION_OWNER_NOTIFICATIONswap);
    }
    if (opcode == Opcode::SMSG_PROCRESIST) {
        wrath::SMSG_PROCRESIST SMSG_PROCRESISTswap(std::move(other.SMSG_PROCRESIST));
        std::swap(this->SMSG_PROCRESIST, SMSG_PROCRESISTswap);
    }
    if (opcode == Opcode::SMSG_DISPEL_FAILED) {
        wrath::SMSG_DISPEL_FAILED SMSG_DISPEL_FAILEDswap(std::move(other.SMSG_DISPEL_FAILED));
        std::swap(this->SMSG_DISPEL_FAILED, SMSG_DISPEL_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_SPELLORDAMAGE_IMMUNE) {
        wrath::SMSG_SPELLORDAMAGE_IMMUNE SMSG_SPELLORDAMAGE_IMMUNEswap(std::move(other.SMSG_SPELLORDAMAGE_IMMUNE));
        std::swap(this->SMSG_SPELLORDAMAGE_IMMUNE, SMSG_SPELLORDAMAGE_IMMUNEswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) {
        wrath::SMSG_AUCTION_BIDDER_LIST_RESULT SMSG_AUCTION_BIDDER_LIST_RESULTswap(std::move(other.SMSG_AUCTION_BIDDER_LIST_RESULT));
        std::swap(this->SMSG_AUCTION_BIDDER_LIST_RESULT, SMSG_AUCTION_BIDDER_LIST_RESULTswap);
    }
    if (opcode == Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) {
        wrath::SMSG_SET_FLAT_SPELL_MODIFIER SMSG_SET_FLAT_SPELL_MODIFIERswap(std::move(other.SMSG_SET_FLAT_SPELL_MODIFIER));
        std::swap(this->SMSG_SET_FLAT_SPELL_MODIFIER, SMSG_SET_FLAT_SPELL_MODIFIERswap);
    }
    if (opcode == Opcode::SMSG_SET_PCT_SPELL_MODIFIER) {
        wrath::SMSG_SET_PCT_SPELL_MODIFIER SMSG_SET_PCT_SPELL_MODIFIERswap(std::move(other.SMSG_SET_PCT_SPELL_MODIFIER));
        std::swap(this->SMSG_SET_PCT_SPELL_MODIFIER, SMSG_SET_PCT_SPELL_MODIFIERswap);
    }
    if (opcode == Opcode::SMSG_CORPSE_RECLAIM_DELAY) {
        wrath::SMSG_CORPSE_RECLAIM_DELAY SMSG_CORPSE_RECLAIM_DELAYswap(std::move(other.SMSG_CORPSE_RECLAIM_DELAY));
        std::swap(this->SMSG_CORPSE_RECLAIM_DELAY, SMSG_CORPSE_RECLAIM_DELAYswap);
    }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        wrath::MSG_LIST_STABLED_PETS_Server MSG_LIST_STABLED_PETSswap(std::move(other.MSG_LIST_STABLED_PETS));
        std::swap(this->MSG_LIST_STABLED_PETS, MSG_LIST_STABLED_PETSswap);
    }
    if (opcode == Opcode::SMSG_STABLE_RESULT) {
        wrath::SMSG_STABLE_RESULT SMSG_STABLE_RESULTswap(std::move(other.SMSG_STABLE_RESULT));
        std::swap(this->SMSG_STABLE_RESULT, SMSG_STABLE_RESULTswap);
    }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        wrath::MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULTswap(std::move(other.MSG_QUEST_PUSH_RESULT));
        std::swap(this->MSG_QUEST_PUSH_RESULT, MSG_QUEST_PUSH_RESULTswap);
    }
    if (opcode == Opcode::SMSG_PLAY_MUSIC) {
        wrath::SMSG_PLAY_MUSIC SMSG_PLAY_MUSICswap(std::move(other.SMSG_PLAY_MUSIC));
        std::swap(this->SMSG_PLAY_MUSIC, SMSG_PLAY_MUSICswap);
    }
    if (opcode == Opcode::SMSG_PLAY_OBJECT_SOUND) {
        wrath::SMSG_PLAY_OBJECT_SOUND SMSG_PLAY_OBJECT_SOUNDswap(std::move(other.SMSG_PLAY_OBJECT_SOUND));
        std::swap(this->SMSG_PLAY_OBJECT_SOUND, SMSG_PLAY_OBJECT_SOUNDswap);
    }
    if (opcode == Opcode::SMSG_SPELLDISPELLOG) {
        wrath::SMSG_SPELLDISPELLOG SMSG_SPELLDISPELLOGswap(std::move(other.SMSG_SPELLDISPELLOG));
        std::swap(this->SMSG_SPELLDISPELLOG, SMSG_SPELLDISPELLOGswap);
    }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        wrath::MSG_QUERY_NEXT_MAIL_TIME_Server MSG_QUERY_NEXT_MAIL_TIMEswap(std::move(other.MSG_QUERY_NEXT_MAIL_TIME));
        std::swap(this->MSG_QUERY_NEXT_MAIL_TIME, MSG_QUERY_NEXT_MAIL_TIMEswap);
    }
    if (opcode == Opcode::SMSG_RECEIVED_MAIL) {
        wrath::SMSG_RECEIVED_MAIL SMSG_RECEIVED_MAILswap(std::move(other.SMSG_RECEIVED_MAIL));
        std::swap(this->SMSG_RECEIVED_MAIL, SMSG_RECEIVED_MAILswap);
    }
    if (opcode == Opcode::SMSG_RAID_GROUP_ONLY) {
        wrath::SMSG_RAID_GROUP_ONLY SMSG_RAID_GROUP_ONLYswap(std::move(other.SMSG_RAID_GROUP_ONLY));
        std::swap(this->SMSG_RAID_GROUP_ONLY, SMSG_RAID_GROUP_ONLYswap);
    }
    if (opcode == Opcode::SMSG_PVP_CREDIT) {
        wrath::SMSG_PVP_CREDIT SMSG_PVP_CREDITswap(std::move(other.SMSG_PVP_CREDIT));
        std::swap(this->SMSG_PVP_CREDIT, SMSG_PVP_CREDITswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) {
        wrath::SMSG_AUCTION_REMOVED_NOTIFICATION SMSG_AUCTION_REMOVED_NOTIFICATIONswap(std::move(other.SMSG_AUCTION_REMOVED_NOTIFICATION));
        std::swap(this->SMSG_AUCTION_REMOVED_NOTIFICATION, SMSG_AUCTION_REMOVED_NOTIFICATIONswap);
    }
    if (opcode == Opcode::SMSG_SERVER_MESSAGE) {
        wrath::SMSG_SERVER_MESSAGE SMSG_SERVER_MESSAGEswap(std::move(other.SMSG_SERVER_MESSAGE));
        std::swap(this->SMSG_SERVER_MESSAGE, SMSG_SERVER_MESSAGEswap);
    }
    if (opcode == Opcode::SMSG_LFG_OFFER_CONTINUE) {
        wrath::SMSG_LFG_OFFER_CONTINUE SMSG_LFG_OFFER_CONTINUEswap(std::move(other.SMSG_LFG_OFFER_CONTINUE));
        std::swap(this->SMSG_LFG_OFFER_CONTINUE, SMSG_LFG_OFFER_CONTINUEswap);
    }
    if (opcode == Opcode::SMSG_SHOW_MAILBOX) {
        wrath::SMSG_SHOW_MAILBOX SMSG_SHOW_MAILBOXswap(std::move(other.SMSG_SHOW_MAILBOX));
        std::swap(this->SMSG_SHOW_MAILBOX, SMSG_SHOW_MAILBOXswap);
    }
    if (opcode == Opcode::SMSG_CANCEL_AUTO_REPEAT) {
        wrath::SMSG_CANCEL_AUTO_REPEAT SMSG_CANCEL_AUTO_REPEATswap(std::move(other.SMSG_CANCEL_AUTO_REPEAT));
        std::swap(this->SMSG_CANCEL_AUTO_REPEAT, SMSG_CANCEL_AUTO_REPEATswap);
    }
    if (opcode == Opcode::SMSG_STANDSTATE_UPDATE) {
        wrath::SMSG_STANDSTATE_UPDATE SMSG_STANDSTATE_UPDATEswap(std::move(other.SMSG_STANDSTATE_UPDATE));
        std::swap(this->SMSG_STANDSTATE_UPDATE, SMSG_STANDSTATE_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_LOOT_ALL_PASSED) {
        wrath::SMSG_LOOT_ALL_PASSED SMSG_LOOT_ALL_PASSEDswap(std::move(other.SMSG_LOOT_ALL_PASSED));
        std::swap(this->SMSG_LOOT_ALL_PASSED, SMSG_LOOT_ALL_PASSEDswap);
    }
    if (opcode == Opcode::SMSG_LOOT_ROLL_WON) {
        wrath::SMSG_LOOT_ROLL_WON SMSG_LOOT_ROLL_WONswap(std::move(other.SMSG_LOOT_ROLL_WON));
        std::swap(this->SMSG_LOOT_ROLL_WON, SMSG_LOOT_ROLL_WONswap);
    }
    if (opcode == Opcode::SMSG_LOOT_START_ROLL) {
        wrath::SMSG_LOOT_START_ROLL SMSG_LOOT_START_ROLLswap(std::move(other.SMSG_LOOT_START_ROLL));
        std::swap(this->SMSG_LOOT_START_ROLL, SMSG_LOOT_START_ROLLswap);
    }
    if (opcode == Opcode::SMSG_LOOT_ROLL) {
        wrath::SMSG_LOOT_ROLL SMSG_LOOT_ROLLswap(std::move(other.SMSG_LOOT_ROLL));
        std::swap(this->SMSG_LOOT_ROLL, SMSG_LOOT_ROLLswap);
    }
    if (opcode == Opcode::SMSG_LOOT_MASTER_LIST) {
        wrath::SMSG_LOOT_MASTER_LIST SMSG_LOOT_MASTER_LISTswap(std::move(other.SMSG_LOOT_MASTER_LIST));
        std::swap(this->SMSG_LOOT_MASTER_LIST, SMSG_LOOT_MASTER_LISTswap);
    }
    if (opcode == Opcode::SMSG_SET_FORCED_REACTIONS) {
        wrath::SMSG_SET_FORCED_REACTIONS SMSG_SET_FORCED_REACTIONSswap(std::move(other.SMSG_SET_FORCED_REACTIONS));
        std::swap(this->SMSG_SET_FORCED_REACTIONS, SMSG_SET_FORCED_REACTIONSswap);
    }
    if (opcode == Opcode::SMSG_SPELL_FAILED_OTHER) {
        wrath::SMSG_SPELL_FAILED_OTHER SMSG_SPELL_FAILED_OTHERswap(std::move(other.SMSG_SPELL_FAILED_OTHER));
        std::swap(this->SMSG_SPELL_FAILED_OTHER, SMSG_SPELL_FAILED_OTHERswap);
    }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) {
        wrath::SMSG_CHAT_PLAYER_NOT_FOUND SMSG_CHAT_PLAYER_NOT_FOUNDswap(std::move(other.SMSG_CHAT_PLAYER_NOT_FOUND));
        std::swap(this->SMSG_CHAT_PLAYER_NOT_FOUND, SMSG_CHAT_PLAYER_NOT_FOUNDswap);
    }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        wrath::MSG_TALENT_WIPE_CONFIRM_Server MSG_TALENT_WIPE_CONFIRMswap(std::move(other.MSG_TALENT_WIPE_CONFIRM));
        std::swap(this->MSG_TALENT_WIPE_CONFIRM, MSG_TALENT_WIPE_CONFIRMswap);
    }
    if (opcode == Opcode::SMSG_SUMMON_REQUEST) {
        wrath::SMSG_SUMMON_REQUEST SMSG_SUMMON_REQUESTswap(std::move(other.SMSG_SUMMON_REQUEST));
        std::swap(this->SMSG_SUMMON_REQUEST, SMSG_SUMMON_REQUESTswap);
    }
    if (opcode == Opcode::SMSG_MONSTER_MOVE_TRANSPORT) {
        wrath::SMSG_MONSTER_MOVE_TRANSPORT SMSG_MONSTER_MOVE_TRANSPORTswap(std::move(other.SMSG_MONSTER_MOVE_TRANSPORT));
        std::swap(this->SMSG_MONSTER_MOVE_TRANSPORT, SMSG_MONSTER_MOVE_TRANSPORTswap);
    }
    if (opcode == Opcode::SMSG_PET_BROKEN) {
        wrath::SMSG_PET_BROKEN SMSG_PET_BROKENswap(std::move(other.SMSG_PET_BROKEN));
        std::swap(this->SMSG_PET_BROKEN, SMSG_PET_BROKENswap);
    }
    if (opcode == Opcode::MSG_MOVE_FEATHER_FALL) {
        wrath::MSG_MOVE_FEATHER_FALL_Server MSG_MOVE_FEATHER_FALLswap(std::move(other.MSG_MOVE_FEATHER_FALL));
        std::swap(this->MSG_MOVE_FEATHER_FALL, MSG_MOVE_FEATHER_FALLswap);
    }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        wrath::MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALKswap(std::move(other.MSG_MOVE_WATER_WALK));
        std::swap(this->MSG_MOVE_WATER_WALK, MSG_MOVE_WATER_WALKswap);
    }
    if (opcode == Opcode::SMSG_FEIGN_DEATH_RESISTED) {
        wrath::SMSG_FEIGN_DEATH_RESISTED SMSG_FEIGN_DEATH_RESISTEDswap(std::move(other.SMSG_FEIGN_DEATH_RESISTED));
        std::swap(this->SMSG_FEIGN_DEATH_RESISTED, SMSG_FEIGN_DEATH_RESISTEDswap);
    }
    if (opcode == Opcode::SMSG_DUEL_COUNTDOWN) {
        wrath::SMSG_DUEL_COUNTDOWN SMSG_DUEL_COUNTDOWNswap(std::move(other.SMSG_DUEL_COUNTDOWN));
        std::swap(this->SMSG_DUEL_COUNTDOWN, SMSG_DUEL_COUNTDOWNswap);
    }
    if (opcode == Opcode::SMSG_AREA_TRIGGER_MESSAGE) {
        wrath::SMSG_AREA_TRIGGER_MESSAGE SMSG_AREA_TRIGGER_MESSAGEswap(std::move(other.SMSG_AREA_TRIGGER_MESSAGE));
        std::swap(this->SMSG_AREA_TRIGGER_MESSAGE, SMSG_AREA_TRIGGER_MESSAGEswap);
    }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHOSEN) {
        wrath::SMSG_LFG_ROLE_CHOSEN SMSG_LFG_ROLE_CHOSENswap(std::move(other.SMSG_LFG_ROLE_CHOSEN));
        std::swap(this->SMSG_LFG_ROLE_CHOSEN, SMSG_LFG_ROLE_CHOSENswap);
    }
    if (opcode == Opcode::SMSG_PLAYER_SKINNED) {
        wrath::SMSG_PLAYER_SKINNED SMSG_PLAYER_SKINNEDswap(std::move(other.SMSG_PLAYER_SKINNED));
        std::swap(this->SMSG_PLAYER_SKINNED, SMSG_PLAYER_SKINNEDswap);
    }
    if (opcode == Opcode::SMSG_DURABILITY_DAMAGE_DEATH) {
        wrath::SMSG_DURABILITY_DAMAGE_DEATH SMSG_DURABILITY_DAMAGE_DEATHswap(std::move(other.SMSG_DURABILITY_DAMAGE_DEATH));
        std::swap(this->SMSG_DURABILITY_DAMAGE_DEATH, SMSG_DURABILITY_DAMAGE_DEATHswap);
    }
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        wrath::MSG_PETITION_RENAME MSG_PETITION_RENAMEswap(std::move(other.MSG_PETITION_RENAME));
        std::swap(this->MSG_PETITION_RENAME, MSG_PETITION_RENAMEswap);
    }
    if (opcode == Opcode::SMSG_INIT_WORLD_STATES) {
        wrath::SMSG_INIT_WORLD_STATES SMSG_INIT_WORLD_STATESswap(std::move(other.SMSG_INIT_WORLD_STATES));
        std::swap(this->SMSG_INIT_WORLD_STATES, SMSG_INIT_WORLD_STATESswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_WORLD_STATE) {
        wrath::SMSG_UPDATE_WORLD_STATE SMSG_UPDATE_WORLD_STATEswap(std::move(other.SMSG_UPDATE_WORLD_STATE));
        std::swap(this->SMSG_UPDATE_WORLD_STATE, SMSG_UPDATE_WORLD_STATEswap);
    }
    if (opcode == Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) {
        wrath::SMSG_ITEM_NAME_QUERY_RESPONSE SMSG_ITEM_NAME_QUERY_RESPONSEswap(std::move(other.SMSG_ITEM_NAME_QUERY_RESPONSE));
        std::swap(this->SMSG_ITEM_NAME_QUERY_RESPONSE, SMSG_ITEM_NAME_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_PET_ACTION_FEEDBACK) {
        wrath::SMSG_PET_ACTION_FEEDBACK SMSG_PET_ACTION_FEEDBACKswap(std::move(other.SMSG_PET_ACTION_FEEDBACK));
        std::swap(this->SMSG_PET_ACTION_FEEDBACK, SMSG_PET_ACTION_FEEDBACKswap);
    }
    if (opcode == Opcode::SMSG_CHAR_RENAME) {
        wrath::SMSG_CHAR_RENAME SMSG_CHAR_RENAMEswap(std::move(other.SMSG_CHAR_RENAME));
        std::swap(this->SMSG_CHAR_RENAME, SMSG_CHAR_RENAMEswap);
    }
    if (opcode == Opcode::SMSG_INSTANCE_SAVE_CREATED) {
        wrath::SMSG_INSTANCE_SAVE_CREATED SMSG_INSTANCE_SAVE_CREATEDswap(std::move(other.SMSG_INSTANCE_SAVE_CREATED));
        std::swap(this->SMSG_INSTANCE_SAVE_CREATED, SMSG_INSTANCE_SAVE_CREATEDswap);
    }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_INFO) {
        wrath::SMSG_RAID_INSTANCE_INFO SMSG_RAID_INSTANCE_INFOswap(std::move(other.SMSG_RAID_INSTANCE_INFO));
        std::swap(this->SMSG_RAID_INSTANCE_INFO, SMSG_RAID_INSTANCE_INFOswap);
    }
    if (opcode == Opcode::SMSG_PLAY_SOUND) {
        wrath::SMSG_PLAY_SOUND SMSG_PLAY_SOUNDswap(std::move(other.SMSG_PLAY_SOUND));
        std::swap(this->SMSG_PLAY_SOUND, SMSG_PLAY_SOUNDswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_STATUS) {
        wrath::SMSG_BATTLEFIELD_STATUS SMSG_BATTLEFIELD_STATUSswap(std::move(other.SMSG_BATTLEFIELD_STATUS));
        std::swap(this->SMSG_BATTLEFIELD_STATUS, SMSG_BATTLEFIELD_STATUSswap);
    }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        wrath::MSG_INSPECT_HONOR_STATS_Server MSG_INSPECT_HONOR_STATSswap(std::move(other.MSG_INSPECT_HONOR_STATS));
        std::swap(this->MSG_INSPECT_HONOR_STATS, MSG_INSPECT_HONOR_STATSswap);
    }
    if (opcode == Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) {
        wrath::SMSG_FORCE_WALK_SPEED_CHANGE SMSG_FORCE_WALK_SPEED_CHANGEswap(std::move(other.SMSG_FORCE_WALK_SPEED_CHANGE));
        std::swap(this->SMSG_FORCE_WALK_SPEED_CHANGE, SMSG_FORCE_WALK_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) {
        wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE SMSG_FORCE_SWIM_BACK_SPEED_CHANGEswap(std::move(other.SMSG_FORCE_SWIM_BACK_SPEED_CHANGE));
        std::swap(this->SMSG_FORCE_SWIM_BACK_SPEED_CHANGE, SMSG_FORCE_SWIM_BACK_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_TURN_RATE_CHANGE) {
        wrath::SMSG_FORCE_TURN_RATE_CHANGE SMSG_FORCE_TURN_RATE_CHANGEswap(std::move(other.SMSG_FORCE_TURN_RATE_CHANGE));
        std::swap(this->SMSG_FORCE_TURN_RATE_CHANGE, SMSG_FORCE_TURN_RATE_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) {
        wrath::SMSG_AREA_SPIRIT_HEALER_TIME SMSG_AREA_SPIRIT_HEALER_TIMEswap(std::move(other.SMSG_AREA_SPIRIT_HEALER_TIME));
        std::swap(this->SMSG_AREA_SPIRIT_HEALER_TIME, SMSG_AREA_SPIRIT_HEALER_TIMEswap);
    }
    if (opcode == Opcode::SMSG_WARDEN_DATA) {
        wrath::SMSG_WARDEN_DATA SMSG_WARDEN_DATAswap(std::move(other.SMSG_WARDEN_DATA));
        std::swap(this->SMSG_WARDEN_DATA, SMSG_WARDEN_DATAswap);
    }
    if (opcode == Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) {
        wrath::SMSG_GROUP_JOINED_BATTLEGROUND SMSG_GROUP_JOINED_BATTLEGROUNDswap(std::move(other.SMSG_GROUP_JOINED_BATTLEGROUND));
        std::swap(this->SMSG_GROUP_JOINED_BATTLEGROUND, SMSG_GROUP_JOINED_BATTLEGROUNDswap);
    }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server MSG_BATTLEGROUND_PLAYER_POSITIONSswap(std::move(other.MSG_BATTLEGROUND_PLAYER_POSITIONS));
        std::swap(this->MSG_BATTLEGROUND_PLAYER_POSITIONS, MSG_BATTLEGROUND_PLAYER_POSITIONSswap);
    }
    if (opcode == Opcode::SMSG_BINDER_CONFIRM) {
        wrath::SMSG_BINDER_CONFIRM SMSG_BINDER_CONFIRMswap(std::move(other.SMSG_BINDER_CONFIRM));
        std::swap(this->SMSG_BINDER_CONFIRM, SMSG_BINDER_CONFIRMswap);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) {
        wrath::SMSG_BATTLEGROUND_PLAYER_JOINED SMSG_BATTLEGROUND_PLAYER_JOINEDswap(std::move(other.SMSG_BATTLEGROUND_PLAYER_JOINED));
        std::swap(this->SMSG_BATTLEGROUND_PLAYER_JOINED, SMSG_BATTLEGROUND_PLAYER_JOINEDswap);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) {
        wrath::SMSG_BATTLEGROUND_PLAYER_LEFT SMSG_BATTLEGROUND_PLAYER_LEFTswap(std::move(other.SMSG_BATTLEGROUND_PLAYER_LEFT));
        std::swap(this->SMSG_BATTLEGROUND_PLAYER_LEFT, SMSG_BATTLEGROUND_PLAYER_LEFTswap);
    }
    if (opcode == Opcode::SMSG_ADDON_INFO) {
        wrath::SMSG_ADDON_INFO SMSG_ADDON_INFOswap(std::move(other.SMSG_ADDON_INFO));
        std::swap(this->SMSG_ADDON_INFO, SMSG_ADDON_INFOswap);
    }
    if (opcode == Opcode::SMSG_PET_UNLEARN_CONFIRM) {
        wrath::SMSG_PET_UNLEARN_CONFIRM SMSG_PET_UNLEARN_CONFIRMswap(std::move(other.SMSG_PET_UNLEARN_CONFIRM));
        std::swap(this->SMSG_PET_UNLEARN_CONFIRM, SMSG_PET_UNLEARN_CONFIRMswap);
    }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS_FULL) {
        wrath::SMSG_PARTY_MEMBER_STATS_FULL SMSG_PARTY_MEMBER_STATS_FULLswap(std::move(other.SMSG_PARTY_MEMBER_STATS_FULL));
        std::swap(this->SMSG_PARTY_MEMBER_STATS_FULL, SMSG_PARTY_MEMBER_STATS_FULLswap);
    }
    if (opcode == Opcode::SMSG_WEATHER) {
        wrath::SMSG_WEATHER SMSG_WEATHERswap(std::move(other.SMSG_WEATHER));
        std::swap(this->SMSG_WEATHER, SMSG_WEATHERswap);
    }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_MESSAGE) {
        wrath::SMSG_RAID_INSTANCE_MESSAGE SMSG_RAID_INSTANCE_MESSAGEswap(std::move(other.SMSG_RAID_INSTANCE_MESSAGE));
        std::swap(this->SMSG_RAID_INSTANCE_MESSAGE, SMSG_RAID_INSTANCE_MESSAGEswap);
    }
    if (opcode == Opcode::SMSG_COMPRESSED_MOVES) {
        wrath::SMSG_COMPRESSED_MOVES SMSG_COMPRESSED_MOVESswap(std::move(other.SMSG_COMPRESSED_MOVES));
        std::swap(this->SMSG_COMPRESSED_MOVES, SMSG_COMPRESSED_MOVESswap);
    }
    if (opcode == Opcode::SMSG_CHAT_RESTRICTED) {
        wrath::SMSG_CHAT_RESTRICTED SMSG_CHAT_RESTRICTEDswap(std::move(other.SMSG_CHAT_RESTRICTED));
        std::swap(this->SMSG_CHAT_RESTRICTED, SMSG_CHAT_RESTRICTEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_SPEED) {
        wrath::SMSG_SPLINE_SET_RUN_SPEED SMSG_SPLINE_SET_RUN_SPEEDswap(std::move(other.SMSG_SPLINE_SET_RUN_SPEED));
        std::swap(this->SMSG_SPLINE_SET_RUN_SPEED, SMSG_SPLINE_SET_RUN_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) {
        wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED SMSG_SPLINE_SET_RUN_BACK_SPEEDswap(std::move(other.SMSG_SPLINE_SET_RUN_BACK_SPEED));
        std::swap(this->SMSG_SPLINE_SET_RUN_BACK_SPEED, SMSG_SPLINE_SET_RUN_BACK_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_SPEED) {
        wrath::SMSG_SPLINE_SET_SWIM_SPEED SMSG_SPLINE_SET_SWIM_SPEEDswap(std::move(other.SMSG_SPLINE_SET_SWIM_SPEED));
        std::swap(this->SMSG_SPLINE_SET_SWIM_SPEED, SMSG_SPLINE_SET_SWIM_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_WALK_SPEED) {
        wrath::SMSG_SPLINE_SET_WALK_SPEED SMSG_SPLINE_SET_WALK_SPEEDswap(std::move(other.SMSG_SPLINE_SET_WALK_SPEED));
        std::swap(this->SMSG_SPLINE_SET_WALK_SPEED, SMSG_SPLINE_SET_WALK_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) {
        wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED SMSG_SPLINE_SET_SWIM_BACK_SPEEDswap(std::move(other.SMSG_SPLINE_SET_SWIM_BACK_SPEED));
        std::swap(this->SMSG_SPLINE_SET_SWIM_BACK_SPEED, SMSG_SPLINE_SET_SWIM_BACK_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_TURN_RATE) {
        wrath::SMSG_SPLINE_SET_TURN_RATE SMSG_SPLINE_SET_TURN_RATEswap(std::move(other.SMSG_SPLINE_SET_TURN_RATE));
        std::swap(this->SMSG_SPLINE_SET_TURN_RATE, SMSG_SPLINE_SET_TURN_RATEswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNROOT) {
        wrath::SMSG_SPLINE_MOVE_UNROOT SMSG_SPLINE_MOVE_UNROOTswap(std::move(other.SMSG_SPLINE_MOVE_UNROOT));
        std::swap(this->SMSG_SPLINE_MOVE_UNROOT, SMSG_SPLINE_MOVE_UNROOTswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) {
        wrath::SMSG_SPLINE_MOVE_FEATHER_FALL SMSG_SPLINE_MOVE_FEATHER_FALLswap(std::move(other.SMSG_SPLINE_MOVE_FEATHER_FALL));
        std::swap(this->SMSG_SPLINE_MOVE_FEATHER_FALL, SMSG_SPLINE_MOVE_FEATHER_FALLswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) {
        wrath::SMSG_SPLINE_MOVE_NORMAL_FALL SMSG_SPLINE_MOVE_NORMAL_FALLswap(std::move(other.SMSG_SPLINE_MOVE_NORMAL_FALL));
        std::swap(this->SMSG_SPLINE_MOVE_NORMAL_FALL, SMSG_SPLINE_MOVE_NORMAL_FALLswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_HOVER) {
        wrath::SMSG_SPLINE_MOVE_SET_HOVER SMSG_SPLINE_MOVE_SET_HOVERswap(std::move(other.SMSG_SPLINE_MOVE_SET_HOVER));
        std::swap(this->SMSG_SPLINE_MOVE_SET_HOVER, SMSG_SPLINE_MOVE_SET_HOVERswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) {
        wrath::SMSG_SPLINE_MOVE_UNSET_HOVER SMSG_SPLINE_MOVE_UNSET_HOVERswap(std::move(other.SMSG_SPLINE_MOVE_UNSET_HOVER));
        std::swap(this->SMSG_SPLINE_MOVE_UNSET_HOVER, SMSG_SPLINE_MOVE_UNSET_HOVERswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_WATER_WALK) {
        wrath::SMSG_SPLINE_MOVE_WATER_WALK SMSG_SPLINE_MOVE_WATER_WALKswap(std::move(other.SMSG_SPLINE_MOVE_WATER_WALK));
        std::swap(this->SMSG_SPLINE_MOVE_WATER_WALK, SMSG_SPLINE_MOVE_WATER_WALKswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_LAND_WALK) {
        wrath::SMSG_SPLINE_MOVE_LAND_WALK SMSG_SPLINE_MOVE_LAND_WALKswap(std::move(other.SMSG_SPLINE_MOVE_LAND_WALK));
        std::swap(this->SMSG_SPLINE_MOVE_LAND_WALK, SMSG_SPLINE_MOVE_LAND_WALKswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_START_SWIM) {
        wrath::SMSG_SPLINE_MOVE_START_SWIM SMSG_SPLINE_MOVE_START_SWIMswap(std::move(other.SMSG_SPLINE_MOVE_START_SWIM));
        std::swap(this->SMSG_SPLINE_MOVE_START_SWIM, SMSG_SPLINE_MOVE_START_SWIMswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) {
        wrath::SMSG_SPLINE_MOVE_STOP_SWIM SMSG_SPLINE_MOVE_STOP_SWIMswap(std::move(other.SMSG_SPLINE_MOVE_STOP_SWIM));
        std::swap(this->SMSG_SPLINE_MOVE_STOP_SWIM, SMSG_SPLINE_MOVE_STOP_SWIMswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) {
        wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE SMSG_SPLINE_MOVE_SET_RUN_MODEswap(std::move(other.SMSG_SPLINE_MOVE_SET_RUN_MODE));
        std::swap(this->SMSG_SPLINE_MOVE_SET_RUN_MODE, SMSG_SPLINE_MOVE_SET_RUN_MODEswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) {
        wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE SMSG_SPLINE_MOVE_SET_WALK_MODEswap(std::move(other.SMSG_SPLINE_MOVE_SET_WALK_MODE));
        std::swap(this->SMSG_SPLINE_MOVE_SET_WALK_MODE, SMSG_SPLINE_MOVE_SET_WALK_MODEswap);
    }
    if (opcode == Opcode::MSG_MOVE_TIME_SKIPPED) {
        wrath::MSG_MOVE_TIME_SKIPPED_Server MSG_MOVE_TIME_SKIPPEDswap(std::move(other.MSG_MOVE_TIME_SKIPPED));
        std::swap(this->MSG_MOVE_TIME_SKIPPED, MSG_MOVE_TIME_SKIPPEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_ROOT) {
        wrath::SMSG_SPLINE_MOVE_ROOT SMSG_SPLINE_MOVE_ROOTswap(std::move(other.SMSG_SPLINE_MOVE_ROOT));
        std::swap(this->SMSG_SPLINE_MOVE_ROOT, SMSG_SPLINE_MOVE_ROOTswap);
    }
    if (opcode == Opcode::SMSG_INVALIDATE_PLAYER) {
        wrath::SMSG_INVALIDATE_PLAYER SMSG_INVALIDATE_PLAYERswap(std::move(other.SMSG_INVALIDATE_PLAYER));
        std::swap(this->SMSG_INVALIDATE_PLAYER, SMSG_INVALIDATE_PLAYERswap);
    }
    if (opcode == Opcode::SMSG_INSTANCE_RESET) {
        wrath::SMSG_INSTANCE_RESET SMSG_INSTANCE_RESETswap(std::move(other.SMSG_INSTANCE_RESET));
        std::swap(this->SMSG_INSTANCE_RESET, SMSG_INSTANCE_RESETswap);
    }
    if (opcode == Opcode::SMSG_INSTANCE_RESET_FAILED) {
        wrath::SMSG_INSTANCE_RESET_FAILED SMSG_INSTANCE_RESET_FAILEDswap(std::move(other.SMSG_INSTANCE_RESET_FAILED));
        std::swap(this->SMSG_INSTANCE_RESET_FAILED, SMSG_INSTANCE_RESET_FAILEDswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_LAST_INSTANCE) {
        wrath::SMSG_UPDATE_LAST_INSTANCE SMSG_UPDATE_LAST_INSTANCEswap(std::move(other.SMSG_UPDATE_LAST_INSTANCE));
        std::swap(this->SMSG_UPDATE_LAST_INSTANCE, SMSG_UPDATE_LAST_INSTANCEswap);
    }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        wrath::MSG_RAID_TARGET_UPDATE_Server MSG_RAID_TARGET_UPDATEswap(std::move(other.MSG_RAID_TARGET_UPDATE));
        std::swap(this->MSG_RAID_TARGET_UPDATE, MSG_RAID_TARGET_UPDATEswap);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        wrath::MSG_RAID_READY_CHECK_Server MSG_RAID_READY_CHECKswap(std::move(other.MSG_RAID_READY_CHECK));
        std::swap(this->MSG_RAID_READY_CHECK, MSG_RAID_READY_CHECKswap);
    }
    if (opcode == Opcode::SMSG_PET_ACTION_SOUND) {
        wrath::SMSG_PET_ACTION_SOUND SMSG_PET_ACTION_SOUNDswap(std::move(other.SMSG_PET_ACTION_SOUND));
        std::swap(this->SMSG_PET_ACTION_SOUND, SMSG_PET_ACTION_SOUNDswap);
    }
    if (opcode == Opcode::SMSG_PET_DISMISS_SOUND) {
        wrath::SMSG_PET_DISMISS_SOUND SMSG_PET_DISMISS_SOUNDswap(std::move(other.SMSG_PET_DISMISS_SOUND));
        std::swap(this->SMSG_PET_DISMISS_SOUND, SMSG_PET_DISMISS_SOUNDswap);
    }
    if (opcode == Opcode::SMSG_GM_TICKET_STATUS_UPDATE) {
        wrath::SMSG_GM_TICKET_STATUS_UPDATE SMSG_GM_TICKET_STATUS_UPDATEswap(std::move(other.SMSG_GM_TICKET_STATUS_UPDATE));
        std::swap(this->SMSG_GM_TICKET_STATUS_UPDATE, SMSG_GM_TICKET_STATUS_UPDATEswap);
    }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        wrath::MSG_SET_DUNGEON_DIFFICULTY_Server MSG_SET_DUNGEON_DIFFICULTYswap(std::move(other.MSG_SET_DUNGEON_DIFFICULTY));
        std::swap(this->MSG_SET_DUNGEON_DIFFICULTY, MSG_SET_DUNGEON_DIFFICULTYswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) {
        wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP SMSG_UPDATE_INSTANCE_OWNERSHIPswap(std::move(other.SMSG_UPDATE_INSTANCE_OWNERSHIP));
        std::swap(this->SMSG_UPDATE_INSTANCE_OWNERSHIP, SMSG_UPDATE_INSTANCE_OWNERSHIPswap);
    }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) {
        wrath::SMSG_CHAT_PLAYER_AMBIGUOUS SMSG_CHAT_PLAYER_AMBIGUOUSswap(std::move(other.SMSG_CHAT_PLAYER_AMBIGUOUS));
        std::swap(this->SMSG_CHAT_PLAYER_AMBIGUOUS, SMSG_CHAT_PLAYER_AMBIGUOUSswap);
    }
    if (opcode == Opcode::SMSG_SPELLINSTAKILLLOG) {
        wrath::SMSG_SPELLINSTAKILLLOG SMSG_SPELLINSTAKILLLOGswap(std::move(other.SMSG_SPELLINSTAKILLLOG));
        std::swap(this->SMSG_SPELLINSTAKILLLOG, SMSG_SPELLINSTAKILLLOGswap);
    }
    if (opcode == Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) {
        wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS SMSG_SPELL_UPDATE_CHAIN_TARGETSswap(std::move(other.SMSG_SPELL_UPDATE_CHAIN_TARGETS));
        std::swap(this->SMSG_SPELL_UPDATE_CHAIN_TARGETS, SMSG_SPELL_UPDATE_CHAIN_TARGETSswap);
    }
    if (opcode == Opcode::SMSG_SPELLSTEALLOG) {
        wrath::SMSG_SPELLSTEALLOG SMSG_SPELLSTEALLOGswap(std::move(other.SMSG_SPELLSTEALLOG));
        std::swap(this->SMSG_SPELLSTEALLOG, SMSG_SPELLSTEALLOGswap);
    }
    if (opcode == Opcode::SMSG_DEFENSE_MESSAGE) {
        wrath::SMSG_DEFENSE_MESSAGE SMSG_DEFENSE_MESSAGEswap(std::move(other.SMSG_DEFENSE_MESSAGE));
        std::swap(this->SMSG_DEFENSE_MESSAGE, SMSG_DEFENSE_MESSAGEswap);
    }
    if (opcode == Opcode::SMSG_INSTANCE_DIFFICULTY) {
        wrath::SMSG_INSTANCE_DIFFICULTY SMSG_INSTANCE_DIFFICULTYswap(std::move(other.SMSG_INSTANCE_DIFFICULTY));
        std::swap(this->SMSG_INSTANCE_DIFFICULTY, SMSG_INSTANCE_DIFFICULTYswap);
    }
    if (opcode == Opcode::SMSG_MOTD) {
        wrath::SMSG_MOTD SMSG_MOTDswap(std::move(other.SMSG_MOTD));
        std::swap(this->SMSG_MOTD, SMSG_MOTDswap);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_CAN_FLY) {
        wrath::SMSG_MOVE_SET_CAN_FLY SMSG_MOVE_SET_CAN_FLYswap(std::move(other.SMSG_MOVE_SET_CAN_FLY));
        std::swap(this->SMSG_MOVE_SET_CAN_FLY, SMSG_MOVE_SET_CAN_FLYswap);
    }
    if (opcode == Opcode::SMSG_MOVE_UNSET_CAN_FLY) {
        wrath::SMSG_MOVE_UNSET_CAN_FLY SMSG_MOVE_UNSET_CAN_FLYswap(std::move(other.SMSG_MOVE_UNSET_CAN_FLY));
        std::swap(this->SMSG_MOVE_UNSET_CAN_FLY, SMSG_MOVE_UNSET_CAN_FLYswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) {
        wrath::SMSG_ARENA_TEAM_COMMAND_RESULT SMSG_ARENA_TEAM_COMMAND_RESULTswap(std::move(other.SMSG_ARENA_TEAM_COMMAND_RESULT));
        std::swap(this->SMSG_ARENA_TEAM_COMMAND_RESULT, SMSG_ARENA_TEAM_COMMAND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) {
        wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE SMSG_ARENA_TEAM_QUERY_RESPONSEswap(std::move(other.SMSG_ARENA_TEAM_QUERY_RESPONSE));
        std::swap(this->SMSG_ARENA_TEAM_QUERY_RESPONSE, SMSG_ARENA_TEAM_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_ROSTER) {
        wrath::SMSG_ARENA_TEAM_ROSTER SMSG_ARENA_TEAM_ROSTERswap(std::move(other.SMSG_ARENA_TEAM_ROSTER));
        std::swap(this->SMSG_ARENA_TEAM_ROSTER, SMSG_ARENA_TEAM_ROSTERswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_INVITE) {
        wrath::SMSG_ARENA_TEAM_INVITE SMSG_ARENA_TEAM_INVITEswap(std::move(other.SMSG_ARENA_TEAM_INVITE));
        std::swap(this->SMSG_ARENA_TEAM_INVITE, SMSG_ARENA_TEAM_INVITEswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_EVENT) {
        wrath::SMSG_ARENA_TEAM_EVENT SMSG_ARENA_TEAM_EVENTswap(std::move(other.SMSG_ARENA_TEAM_EVENT));
        std::swap(this->SMSG_ARENA_TEAM_EVENT, SMSG_ARENA_TEAM_EVENTswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        wrath::MSG_MOVE_START_ASCEND MSG_MOVE_START_ASCENDswap(std::move(other.MSG_MOVE_START_ASCEND));
        std::swap(this->MSG_MOVE_START_ASCEND, MSG_MOVE_START_ASCENDswap);
    }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        wrath::MSG_MOVE_STOP_ASCEND MSG_MOVE_STOP_ASCENDswap(std::move(other.MSG_MOVE_STOP_ASCEND));
        std::swap(this->MSG_MOVE_STOP_ASCEND, MSG_MOVE_STOP_ASCENDswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_STATS) {
        wrath::SMSG_ARENA_TEAM_STATS SMSG_ARENA_TEAM_STATSswap(std::move(other.SMSG_ARENA_TEAM_STATS));
        std::swap(this->SMSG_ARENA_TEAM_STATS, SMSG_ARENA_TEAM_STATSswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_LFG_LIST) {
        wrath::SMSG_UPDATE_LFG_LIST SMSG_UPDATE_LFG_LISTswap(std::move(other.SMSG_UPDATE_LFG_LIST));
        std::swap(this->SMSG_UPDATE_LFG_LIST, SMSG_UPDATE_LFG_LISTswap);
    }
    if (opcode == Opcode::SMSG_LFG_PROPOSAL_UPDATE) {
        wrath::SMSG_LFG_PROPOSAL_UPDATE SMSG_LFG_PROPOSAL_UPDATEswap(std::move(other.SMSG_LFG_PROPOSAL_UPDATE));
        std::swap(this->SMSG_LFG_PROPOSAL_UPDATE, SMSG_LFG_PROPOSAL_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) {
        wrath::SMSG_LFG_ROLE_CHECK_UPDATE SMSG_LFG_ROLE_CHECK_UPDATEswap(std::move(other.SMSG_LFG_ROLE_CHECK_UPDATE));
        std::swap(this->SMSG_LFG_ROLE_CHECK_UPDATE, SMSG_LFG_ROLE_CHECK_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_LFG_JOIN_RESULT) {
        wrath::SMSG_LFG_JOIN_RESULT SMSG_LFG_JOIN_RESULTswap(std::move(other.SMSG_LFG_JOIN_RESULT));
        std::swap(this->SMSG_LFG_JOIN_RESULT, SMSG_LFG_JOIN_RESULTswap);
    }
    if (opcode == Opcode::SMSG_LFG_QUEUE_STATUS) {
        wrath::SMSG_LFG_QUEUE_STATUS SMSG_LFG_QUEUE_STATUSswap(std::move(other.SMSG_LFG_QUEUE_STATUS));
        std::swap(this->SMSG_LFG_QUEUE_STATUS, SMSG_LFG_QUEUE_STATUSswap);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PLAYER) {
        wrath::SMSG_LFG_UPDATE_PLAYER SMSG_LFG_UPDATE_PLAYERswap(std::move(other.SMSG_LFG_UPDATE_PLAYER));
        std::swap(this->SMSG_LFG_UPDATE_PLAYER, SMSG_LFG_UPDATE_PLAYERswap);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PARTY) {
        wrath::SMSG_LFG_UPDATE_PARTY SMSG_LFG_UPDATE_PARTYswap(std::move(other.SMSG_LFG_UPDATE_PARTY));
        std::swap(this->SMSG_LFG_UPDATE_PARTY, SMSG_LFG_UPDATE_PARTYswap);
    }
    if (opcode == Opcode::SMSG_LFG_UPDATE_SEARCH) {
        wrath::SMSG_LFG_UPDATE_SEARCH SMSG_LFG_UPDATE_SEARCHswap(std::move(other.SMSG_LFG_UPDATE_SEARCH));
        std::swap(this->SMSG_LFG_UPDATE_SEARCH, SMSG_LFG_UPDATE_SEARCHswap);
    }
    if (opcode == Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) {
        wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE SMSG_LFG_BOOT_PROPOSAL_UPDATEswap(std::move(other.SMSG_LFG_BOOT_PROPOSAL_UPDATE));
        std::swap(this->SMSG_LFG_BOOT_PROPOSAL_UPDATE, SMSG_LFG_BOOT_PROPOSAL_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_LFG_PLAYER_INFO) {
        wrath::SMSG_LFG_PLAYER_INFO SMSG_LFG_PLAYER_INFOswap(std::move(other.SMSG_LFG_PLAYER_INFO));
        std::swap(this->SMSG_LFG_PLAYER_INFO, SMSG_LFG_PLAYER_INFOswap);
    }
    if (opcode == Opcode::SMSG_LFG_PARTY_INFO) {
        wrath::SMSG_LFG_PARTY_INFO SMSG_LFG_PARTY_INFOswap(std::move(other.SMSG_LFG_PARTY_INFO));
        std::swap(this->SMSG_LFG_PARTY_INFO, SMSG_LFG_PARTY_INFOswap);
    }
    if (opcode == Opcode::SMSG_TITLE_EARNED) {
        wrath::SMSG_TITLE_EARNED SMSG_TITLE_EARNEDswap(std::move(other.SMSG_TITLE_EARNED));
        std::swap(this->SMSG_TITLE_EARNED, SMSG_TITLE_EARNEDswap);
    }
    if (opcode == Opcode::SMSG_ARENA_ERROR) {
        wrath::SMSG_ARENA_ERROR SMSG_ARENA_ERRORswap(std::move(other.SMSG_ARENA_ERROR));
        std::swap(this->SMSG_ARENA_ERROR, SMSG_ARENA_ERRORswap);
    }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        wrath::MSG_INSPECT_ARENA_TEAMS_Server MSG_INSPECT_ARENA_TEAMSswap(std::move(other.MSG_INSPECT_ARENA_TEAMS));
        std::swap(this->MSG_INSPECT_ARENA_TEAMS, MSG_INSPECT_ARENA_TEAMSswap);
    }
    if (opcode == Opcode::SMSG_DEATH_RELEASE_LOC) {
        wrath::SMSG_DEATH_RELEASE_LOC SMSG_DEATH_RELEASE_LOCswap(std::move(other.SMSG_DEATH_RELEASE_LOC));
        std::swap(this->SMSG_DEATH_RELEASE_LOC, SMSG_DEATH_RELEASE_LOCswap);
    }
    if (opcode == Opcode::SMSG_FORCED_DEATH_UPDATE) {
        wrath::SMSG_FORCED_DEATH_UPDATE SMSG_FORCED_DEATH_UPDATEswap(std::move(other.SMSG_FORCED_DEATH_UPDATE));
        std::swap(this->SMSG_FORCED_DEATH_UPDATE, SMSG_FORCED_DEATH_UPDATEswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_SPEED) {
        wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server MSG_MOVE_SET_FLIGHT_SPEEDswap(std::move(other.MSG_MOVE_SET_FLIGHT_SPEED));
        std::swap(this->MSG_MOVE_SET_FLIGHT_SPEED, MSG_MOVE_SET_FLIGHT_SPEEDswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEEDswap(std::move(other.MSG_MOVE_SET_FLIGHT_BACK_SPEED));
        std::swap(this->MSG_MOVE_SET_FLIGHT_BACK_SPEED, MSG_MOVE_SET_FLIGHT_BACK_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) {
        wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE SMSG_FORCE_FLIGHT_SPEED_CHANGEswap(std::move(other.SMSG_FORCE_FLIGHT_SPEED_CHANGE));
        std::swap(this->SMSG_FORCE_FLIGHT_SPEED_CHANGE, SMSG_FORCE_FLIGHT_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) {
        wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGEswap(std::move(other.SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE));
        std::swap(this->SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE, SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) {
        wrath::SMSG_SPLINE_SET_FLIGHT_SPEED SMSG_SPLINE_SET_FLIGHT_SPEEDswap(std::move(other.SMSG_SPLINE_SET_FLIGHT_SPEED));
        std::swap(this->SMSG_SPLINE_SET_FLIGHT_SPEED, SMSG_SPLINE_SET_FLIGHT_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) {
        wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED SMSG_SPLINE_SET_FLIGHT_BACK_SPEEDswap(std::move(other.SMSG_SPLINE_SET_FLIGHT_BACK_SPEED));
        std::swap(this->SMSG_SPLINE_SET_FLIGHT_BACK_SPEED, SMSG_SPLINE_SET_FLIGHT_BACK_SPEEDswap);
    }
    if (opcode == Opcode::SMSG_FLIGHT_SPLINE_SYNC) {
        wrath::SMSG_FLIGHT_SPLINE_SYNC SMSG_FLIGHT_SPLINE_SYNCswap(std::move(other.SMSG_FLIGHT_SPLINE_SYNC));
        std::swap(this->SMSG_FLIGHT_SPLINE_SYNC, SMSG_FLIGHT_SPLINE_SYNCswap);
    }
    if (opcode == Opcode::SMSG_REALM_SPLIT) {
        wrath::SMSG_REALM_SPLIT SMSG_REALM_SPLITswap(std::move(other.SMSG_REALM_SPLIT));
        std::swap(this->SMSG_REALM_SPLIT, SMSG_REALM_SPLITswap);
    }
    if (opcode == Opcode::SMSG_TIME_SYNC_REQ) {
        wrath::SMSG_TIME_SYNC_REQ SMSG_TIME_SYNC_REQswap(std::move(other.SMSG_TIME_SYNC_REQ));
        std::swap(this->SMSG_TIME_SYNC_REQ, SMSG_TIME_SYNC_REQswap);
    }
    if (opcode == Opcode::SMSG_RESET_FAILED_NOTIFY) {
        wrath::SMSG_RESET_FAILED_NOTIFY SMSG_RESET_FAILED_NOTIFYswap(std::move(other.SMSG_RESET_FAILED_NOTIFY));
        std::swap(this->SMSG_RESET_FAILED_NOTIFY, SMSG_RESET_FAILED_NOTIFYswap);
    }
    if (opcode == Opcode::SMSG_LFG_DISABLED) {
        wrath::SMSG_LFG_DISABLED SMSG_LFG_DISABLEDswap(std::move(other.SMSG_LFG_DISABLED));
        std::swap(this->SMSG_LFG_DISABLED, SMSG_LFG_DISABLEDswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_COMBO_POINTS) {
        wrath::SMSG_UPDATE_COMBO_POINTS SMSG_UPDATE_COMBO_POINTSswap(std::move(other.SMSG_UPDATE_COMBO_POINTS));
        std::swap(this->SMSG_UPDATE_COMBO_POINTS, SMSG_UPDATE_COMBO_POINTSswap);
    }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        wrath::MSG_MOVE_START_DESCEND MSG_MOVE_START_DESCENDswap(std::move(other.MSG_MOVE_START_DESCEND));
        std::swap(this->MSG_MOVE_START_DESCEND, MSG_MOVE_START_DESCENDswap);
    }
    if (opcode == Opcode::SMSG_DISMOUNT) {
        wrath::SMSG_DISMOUNT SMSG_DISMOUNTswap(std::move(other.SMSG_DISMOUNT));
        std::swap(this->SMSG_DISMOUNT, SMSG_DISMOUNTswap);
    }
    if (opcode == Opcode::MSG_MOVE_UPDATE_CAN_FLY) {
        wrath::MSG_MOVE_UPDATE_CAN_FLY_Server MSG_MOVE_UPDATE_CAN_FLYswap(std::move(other.MSG_MOVE_UPDATE_CAN_FLY));
        std::swap(this->MSG_MOVE_UPDATE_CAN_FLY, MSG_MOVE_UPDATE_CAN_FLYswap);
    }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        wrath::MSG_RAID_READY_CHECK_CONFIRM_Server MSG_RAID_READY_CHECK_CONFIRMswap(std::move(other.MSG_RAID_READY_CHECK_CONFIRM));
        std::swap(this->MSG_RAID_READY_CHECK_CONFIRM, MSG_RAID_READY_CHECK_CONFIRMswap);
    }
    if (opcode == Opcode::SMSG_GM_MESSAGECHAT) {
        wrath::SMSG_GM_MESSAGECHAT SMSG_GM_MESSAGECHATswap(std::move(other.SMSG_GM_MESSAGECHAT));
        std::swap(this->SMSG_GM_MESSAGECHAT, SMSG_GM_MESSAGECHATswap);
    }
    if (opcode == Opcode::SMSG_CLEAR_TARGET) {
        wrath::SMSG_CLEAR_TARGET SMSG_CLEAR_TARGETswap(std::move(other.SMSG_CLEAR_TARGET));
        std::swap(this->SMSG_CLEAR_TARGET, SMSG_CLEAR_TARGETswap);
    }
    if (opcode == Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) {
        wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD SMSG_CROSSED_INEBRIATION_THRESHOLDswap(std::move(other.SMSG_CROSSED_INEBRIATION_THRESHOLD));
        std::swap(this->SMSG_CROSSED_INEBRIATION_THRESHOLD, SMSG_CROSSED_INEBRIATION_THRESHOLDswap);
    }
    if (opcode == Opcode::SMSG_KICK_REASON) {
        wrath::SMSG_KICK_REASON SMSG_KICK_REASONswap(std::move(other.SMSG_KICK_REASON));
        std::swap(this->SMSG_KICK_REASON, SMSG_KICK_REASONswap);
    }
    if (opcode == Opcode::SMSG_COMPLAIN_RESULT) {
        wrath::SMSG_COMPLAIN_RESULT SMSG_COMPLAIN_RESULTswap(std::move(other.SMSG_COMPLAIN_RESULT));
        std::swap(this->SMSG_COMPLAIN_RESULT, SMSG_COMPLAIN_RESULTswap);
    }
    if (opcode == Opcode::SMSG_FEATURE_SYSTEM_STATUS) {
        wrath::SMSG_FEATURE_SYSTEM_STATUS SMSG_FEATURE_SYSTEM_STATUSswap(std::move(other.SMSG_FEATURE_SYSTEM_STATUS));
        std::swap(this->SMSG_FEATURE_SYSTEM_STATUS, SMSG_FEATURE_SYSTEM_STATUSswap);
    }
    if (opcode == Opcode::SMSG_CHANNEL_MEMBER_COUNT) {
        wrath::SMSG_CHANNEL_MEMBER_COUNT SMSG_CHANNEL_MEMBER_COUNTswap(std::move(other.SMSG_CHANNEL_MEMBER_COUNT));
        std::swap(this->SMSG_CHANNEL_MEMBER_COUNT, SMSG_CHANNEL_MEMBER_COUNTswap);
    }
    if (opcode == Opcode::SMSG_GUILD_BANK_LIST) {
        wrath::SMSG_GUILD_BANK_LIST SMSG_GUILD_BANK_LISTswap(std::move(other.SMSG_GUILD_BANK_LIST));
        std::swap(this->SMSG_GUILD_BANK_LIST, SMSG_GUILD_BANK_LISTswap);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        wrath::MSG_GUILD_BANK_LOG_QUERY_Server MSG_GUILD_BANK_LOG_QUERYswap(std::move(other.MSG_GUILD_BANK_LOG_QUERY));
        std::swap(this->MSG_GUILD_BANK_LOG_QUERY, MSG_GUILD_BANK_LOG_QUERYswap);
    }
    if (opcode == Opcode::SMSG_USERLIST_ADD) {
        wrath::SMSG_USERLIST_ADD SMSG_USERLIST_ADDswap(std::move(other.SMSG_USERLIST_ADD));
        std::swap(this->SMSG_USERLIST_ADD, SMSG_USERLIST_ADDswap);
    }
    if (opcode == Opcode::SMSG_USERLIST_REMOVE) {
        wrath::SMSG_USERLIST_REMOVE SMSG_USERLIST_REMOVEswap(std::move(other.SMSG_USERLIST_REMOVE));
        std::swap(this->SMSG_USERLIST_REMOVE, SMSG_USERLIST_REMOVEswap);
    }
    if (opcode == Opcode::SMSG_USERLIST_UPDATE) {
        wrath::SMSG_USERLIST_UPDATE SMSG_USERLIST_UPDATEswap(std::move(other.SMSG_USERLIST_UPDATE));
        std::swap(this->SMSG_USERLIST_UPDATE, SMSG_USERLIST_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_INSPECT_TALENT) {
        wrath::SMSG_INSPECT_TALENT SMSG_INSPECT_TALENTswap(std::move(other.SMSG_INSPECT_TALENT));
        std::swap(this->SMSG_INSPECT_TALENT, SMSG_INSPECT_TALENTswap);
    }
    if (opcode == Opcode::SMSG_LOOT_LIST) {
        wrath::SMSG_LOOT_LIST SMSG_LOOT_LISTswap(std::move(other.SMSG_LOOT_LIST));
        std::swap(this->SMSG_LOOT_LIST, SMSG_LOOT_LISTswap);
    }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        wrath::MSG_GUILD_PERMISSIONS_Server MSG_GUILD_PERMISSIONSswap(std::move(other.MSG_GUILD_PERMISSIONS));
        std::swap(this->MSG_GUILD_PERMISSIONS, MSG_GUILD_PERMISSIONSswap);
    }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server MSG_GUILD_BANK_MONEY_WITHDRAWNswap(std::move(other.MSG_GUILD_BANK_MONEY_WITHDRAWN));
        std::swap(this->MSG_GUILD_BANK_MONEY_WITHDRAWN, MSG_GUILD_BANK_MONEY_WITHDRAWNswap);
    }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        wrath::MSG_GUILD_EVENT_LOG_QUERY_Server MSG_GUILD_EVENT_LOG_QUERYswap(std::move(other.MSG_GUILD_EVENT_LOG_QUERY));
        std::swap(this->MSG_GUILD_EVENT_LOG_QUERY, MSG_GUILD_EVENT_LOG_QUERYswap);
    }
    if (opcode == Opcode::SMSG_MIRRORIMAGE_DATA) {
        wrath::SMSG_MIRRORIMAGE_DATA SMSG_MIRRORIMAGE_DATAswap(std::move(other.SMSG_MIRRORIMAGE_DATA));
        std::swap(this->SMSG_MIRRORIMAGE_DATA, SMSG_MIRRORIMAGE_DATAswap);
    }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        wrath::MSG_QUERY_GUILD_BANK_TEXT_Server MSG_QUERY_GUILD_BANK_TEXTswap(std::move(other.MSG_QUERY_GUILD_BANK_TEXT));
        std::swap(this->MSG_QUERY_GUILD_BANK_TEXT, MSG_QUERY_GUILD_BANK_TEXTswap);
    }
    if (opcode == Opcode::SMSG_OVERRIDE_LIGHT) {
        wrath::SMSG_OVERRIDE_LIGHT SMSG_OVERRIDE_LIGHTswap(std::move(other.SMSG_OVERRIDE_LIGHT));
        std::swap(this->SMSG_OVERRIDE_LIGHT, SMSG_OVERRIDE_LIGHTswap);
    }
    if (opcode == Opcode::SMSG_TOTEM_CREATED) {
        wrath::SMSG_TOTEM_CREATED SMSG_TOTEM_CREATEDswap(std::move(other.SMSG_TOTEM_CREATED));
        std::swap(this->SMSG_TOTEM_CREATED, SMSG_TOTEM_CREATEDswap);
    }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) {
        wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE SMSG_QUESTGIVER_STATUS_MULTIPLEswap(std::move(other.SMSG_QUESTGIVER_STATUS_MULTIPLE));
        std::swap(this->SMSG_QUESTGIVER_STATUS_MULTIPLE, SMSG_QUESTGIVER_STATUS_MULTIPLEswap);
    }
    if (opcode == Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) {
        wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT SMSG_SET_PLAYER_DECLINED_NAMES_RESULTswap(std::move(other.SMSG_SET_PLAYER_DECLINED_NAMES_RESULT));
        std::swap(this->SMSG_SET_PLAYER_DECLINED_NAMES_RESULT, SMSG_SET_PLAYER_DECLINED_NAMES_RESULTswap);
    }
    if (opcode == Opcode::SMSG_SEND_UNLEARN_SPELLS) {
        wrath::SMSG_SEND_UNLEARN_SPELLS SMSG_SEND_UNLEARN_SPELLSswap(std::move(other.SMSG_SEND_UNLEARN_SPELLS));
        std::swap(this->SMSG_SEND_UNLEARN_SPELLS, SMSG_SEND_UNLEARN_SPELLSswap);
    }
    if (opcode == Opcode::SMSG_PROPOSE_LEVEL_GRANT) {
        wrath::SMSG_PROPOSE_LEVEL_GRANT SMSG_PROPOSE_LEVEL_GRANTswap(std::move(other.SMSG_PROPOSE_LEVEL_GRANT));
        std::swap(this->SMSG_PROPOSE_LEVEL_GRANT, SMSG_PROPOSE_LEVEL_GRANTswap);
    }
    if (opcode == Opcode::SMSG_REFER_A_FRIEND_FAILURE) {
        wrath::SMSG_REFER_A_FRIEND_FAILURE SMSG_REFER_A_FRIEND_FAILUREswap(std::move(other.SMSG_REFER_A_FRIEND_FAILURE));
        std::swap(this->SMSG_REFER_A_FRIEND_FAILURE, SMSG_REFER_A_FRIEND_FAILUREswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_FLYING) {
        wrath::SMSG_SPLINE_MOVE_SET_FLYING SMSG_SPLINE_MOVE_SET_FLYINGswap(std::move(other.SMSG_SPLINE_MOVE_SET_FLYING));
        std::swap(this->SMSG_SPLINE_MOVE_SET_FLYING, SMSG_SPLINE_MOVE_SET_FLYINGswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) {
        wrath::SMSG_SPLINE_MOVE_UNSET_FLYING SMSG_SPLINE_MOVE_UNSET_FLYINGswap(std::move(other.SMSG_SPLINE_MOVE_UNSET_FLYING));
        std::swap(this->SMSG_SPLINE_MOVE_UNSET_FLYING, SMSG_SPLINE_MOVE_UNSET_FLYINGswap);
    }
    if (opcode == Opcode::SMSG_ENABLE_BARBER_SHOP) {
        wrath::SMSG_ENABLE_BARBER_SHOP SMSG_ENABLE_BARBER_SHOPswap(std::move(other.SMSG_ENABLE_BARBER_SHOP));
        std::swap(this->SMSG_ENABLE_BARBER_SHOP, SMSG_ENABLE_BARBER_SHOPswap);
    }
    if (opcode == Opcode::SMSG_BARBER_SHOP_RESULT) {
        wrath::SMSG_BARBER_SHOP_RESULT SMSG_BARBER_SHOP_RESULTswap(std::move(other.SMSG_BARBER_SHOP_RESULT));
        std::swap(this->SMSG_BARBER_SHOP_RESULT, SMSG_BARBER_SHOP_RESULTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_CALENDAR) {
        wrath::SMSG_CALENDAR_SEND_CALENDAR SMSG_CALENDAR_SEND_CALENDARswap(std::move(other.SMSG_CALENDAR_SEND_CALENDAR));
        std::swap(this->SMSG_CALENDAR_SEND_CALENDAR, SMSG_CALENDAR_SEND_CALENDARswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_EVENT) {
        wrath::SMSG_CALENDAR_SEND_EVENT SMSG_CALENDAR_SEND_EVENTswap(std::move(other.SMSG_CALENDAR_SEND_EVENT));
        std::swap(this->SMSG_CALENDAR_SEND_EVENT, SMSG_CALENDAR_SEND_EVENTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_FILTER_GUILD) {
        wrath::SMSG_CALENDAR_FILTER_GUILD SMSG_CALENDAR_FILTER_GUILDswap(std::move(other.SMSG_CALENDAR_FILTER_GUILD));
        std::swap(this->SMSG_CALENDAR_FILTER_GUILD, SMSG_CALENDAR_FILTER_GUILDswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_ARENA_TEAM) {
        wrath::SMSG_CALENDAR_ARENA_TEAM SMSG_CALENDAR_ARENA_TEAMswap(std::move(other.SMSG_CALENDAR_ARENA_TEAM));
        std::swap(this->SMSG_CALENDAR_ARENA_TEAM, SMSG_CALENDAR_ARENA_TEAMswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE) {
        wrath::SMSG_CALENDAR_EVENT_INVITE SMSG_CALENDAR_EVENT_INVITEswap(std::move(other.SMSG_CALENDAR_EVENT_INVITE));
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE, SMSG_CALENDAR_EVENT_INVITEswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) {
        wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED SMSG_CALENDAR_EVENT_INVITE_REMOVEDswap(std::move(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED));
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE_REMOVED, SMSG_CALENDAR_EVENT_INVITE_REMOVEDswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_STATUS) {
        wrath::SMSG_CALENDAR_EVENT_STATUS SMSG_CALENDAR_EVENT_STATUSswap(std::move(other.SMSG_CALENDAR_EVENT_STATUS));
        std::swap(this->SMSG_CALENDAR_EVENT_STATUS, SMSG_CALENDAR_EVENT_STATUSswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_COMMAND_RESULT) {
        wrath::SMSG_CALENDAR_COMMAND_RESULT SMSG_CALENDAR_COMMAND_RESULTswap(std::move(other.SMSG_CALENDAR_COMMAND_RESULT));
        std::swap(this->SMSG_CALENDAR_COMMAND_RESULT, SMSG_CALENDAR_COMMAND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) {
        wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED SMSG_CALENDAR_RAID_LOCKOUT_ADDEDswap(std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_ADDED));
        std::swap(this->SMSG_CALENDAR_RAID_LOCKOUT_ADDED, SMSG_CALENDAR_RAID_LOCKOUT_ADDEDswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) {
        wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED SMSG_CALENDAR_RAID_LOCKOUT_REMOVEDswap(std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_REMOVED));
        std::swap(this->SMSG_CALENDAR_RAID_LOCKOUT_REMOVED, SMSG_CALENDAR_RAID_LOCKOUT_REMOVEDswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT SMSG_CALENDAR_EVENT_INVITE_ALERTswap(std::move(other.SMSG_CALENDAR_EVENT_INVITE_ALERT));
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE_ALERT, SMSG_CALENDAR_EVENT_INVITE_ALERTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERTswap(std::move(other.SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT));
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT, SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT SMSG_CALENDAR_EVENT_REMOVED_ALERTswap(std::move(other.SMSG_CALENDAR_EVENT_REMOVED_ALERT));
        std::swap(this->SMSG_CALENDAR_EVENT_REMOVED_ALERT, SMSG_CALENDAR_EVENT_REMOVED_ALERTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT SMSG_CALENDAR_EVENT_UPDATED_ALERTswap(std::move(other.SMSG_CALENDAR_EVENT_UPDATED_ALERT));
        std::swap(this->SMSG_CALENDAR_EVENT_UPDATED_ALERT, SMSG_CALENDAR_EVENT_UPDATED_ALERTswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERTswap(std::move(other.SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT));
        std::swap(this->SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT, SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERTswap);
    }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        wrath::CMSG_CALENDAR_GET_NUM_PENDING CMSG_CALENDAR_GET_NUM_PENDINGswap(std::move(other.CMSG_CALENDAR_GET_NUM_PENDING));
        std::swap(this->CMSG_CALENDAR_GET_NUM_PENDING, CMSG_CALENDAR_GET_NUM_PENDINGswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) {
        wrath::SMSG_CALENDAR_SEND_NUM_PENDING SMSG_CALENDAR_SEND_NUM_PENDINGswap(std::move(other.SMSG_CALENDAR_SEND_NUM_PENDING));
        std::swap(this->SMSG_CALENDAR_SEND_NUM_PENDING, SMSG_CALENDAR_SEND_NUM_PENDINGswap);
    }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH_RATE) {
        wrath::MSG_MOVE_SET_PITCH_RATE_Server MSG_MOVE_SET_PITCH_RATEswap(std::move(other.MSG_MOVE_SET_PITCH_RATE));
        std::swap(this->MSG_MOVE_SET_PITCH_RATE, MSG_MOVE_SET_PITCH_RATEswap);
    }
    if (opcode == Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) {
        wrath::SMSG_FORCE_PITCH_RATE_CHANGE SMSG_FORCE_PITCH_RATE_CHANGEswap(std::move(other.SMSG_FORCE_PITCH_RATE_CHANGE));
        std::swap(this->SMSG_FORCE_PITCH_RATE_CHANGE, SMSG_FORCE_PITCH_RATE_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) {
        wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES SMSG_CALENDAR_EVENT_INVITE_NOTESswap(std::move(other.SMSG_CALENDAR_EVENT_INVITE_NOTES));
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE_NOTES, SMSG_CALENDAR_EVENT_INVITE_NOTESswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) {
        wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERTswap(std::move(other.SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT));
        std::swap(this->SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT, SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERTswap);
    }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) {
        wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE SMSG_UPDATE_ACCOUNT_DATA_COMPLETEswap(std::move(other.SMSG_UPDATE_ACCOUNT_DATA_COMPLETE));
        std::swap(this->SMSG_UPDATE_ACCOUNT_DATA_COMPLETE, SMSG_UPDATE_ACCOUNT_DATA_COMPLETEswap);
    }
    if (opcode == Opcode::SMSG_TRIGGER_MOVIE) {
        wrath::SMSG_TRIGGER_MOVIE SMSG_TRIGGER_MOVIEswap(std::move(other.SMSG_TRIGGER_MOVIE));
        std::swap(this->SMSG_TRIGGER_MOVIE, SMSG_TRIGGER_MOVIEswap);
    }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_EARNED) {
        wrath::SMSG_ACHIEVEMENT_EARNED SMSG_ACHIEVEMENT_EARNEDswap(std::move(other.SMSG_ACHIEVEMENT_EARNED));
        std::swap(this->SMSG_ACHIEVEMENT_EARNED, SMSG_ACHIEVEMENT_EARNEDswap);
    }
    if (opcode == Opcode::SMSG_CRITERIA_UPDATE) {
        wrath::SMSG_CRITERIA_UPDATE SMSG_CRITERIA_UPDATEswap(std::move(other.SMSG_CRITERIA_UPDATE));
        std::swap(this->SMSG_CRITERIA_UPDATE, SMSG_CRITERIA_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) {
        wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS SMSG_RESPOND_INSPECT_ACHIEVEMENTSswap(std::move(other.SMSG_RESPOND_INSPECT_ACHIEVEMENTS));
        std::swap(this->SMSG_RESPOND_INSPECT_ACHIEVEMENTS, SMSG_RESPOND_INSPECT_ACHIEVEMENTSswap);
    }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) {
        wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL SMSG_QUESTUPDATE_ADD_PVP_KILLswap(std::move(other.SMSG_QUESTUPDATE_ADD_PVP_KILL));
        std::swap(this->SMSG_QUESTUPDATE_ADD_PVP_KILL, SMSG_QUESTUPDATE_ADD_PVP_KILLswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) {
        wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED SMSG_CALENDAR_RAID_LOCKOUT_UPDATEDswap(std::move(other.SMSG_CALENDAR_RAID_LOCKOUT_UPDATED));
        std::swap(this->SMSG_CALENDAR_RAID_LOCKOUT_UPDATED, SMSG_CALENDAR_RAID_LOCKOUT_UPDATEDswap);
    }
    if (opcode == Opcode::SMSG_CHAR_CUSTOMIZE) {
        wrath::SMSG_CHAR_CUSTOMIZE SMSG_CHAR_CUSTOMIZEswap(std::move(other.SMSG_CHAR_CUSTOMIZE));
        std::swap(this->SMSG_CHAR_CUSTOMIZE, SMSG_CHAR_CUSTOMIZEswap);
    }
    if (opcode == Opcode::SMSG_SET_PHASE_SHIFT) {
        wrath::SMSG_SET_PHASE_SHIFT SMSG_SET_PHASE_SHIFTswap(std::move(other.SMSG_SET_PHASE_SHIFT));
        std::swap(this->SMSG_SET_PHASE_SHIFT, SMSG_SET_PHASE_SHIFTswap);
    }
    if (opcode == Opcode::SMSG_ALL_ACHIEVEMENT_DATA) {
        wrath::SMSG_ALL_ACHIEVEMENT_DATA SMSG_ALL_ACHIEVEMENT_DATAswap(std::move(other.SMSG_ALL_ACHIEVEMENT_DATA));
        std::swap(this->SMSG_ALL_ACHIEVEMENT_DATA, SMSG_ALL_ACHIEVEMENT_DATAswap);
    }
    if (opcode == Opcode::SMSG_POWER_UPDATE) {
        wrath::SMSG_POWER_UPDATE SMSG_POWER_UPDATEswap(std::move(other.SMSG_POWER_UPDATE));
        std::swap(this->SMSG_POWER_UPDATE, SMSG_POWER_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_HIGHEST_THREAT_UPDATE) {
        wrath::SMSG_HIGHEST_THREAT_UPDATE SMSG_HIGHEST_THREAT_UPDATEswap(std::move(other.SMSG_HIGHEST_THREAT_UPDATE));
        std::swap(this->SMSG_HIGHEST_THREAT_UPDATE, SMSG_HIGHEST_THREAT_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_THREAT_UPDATE) {
        wrath::SMSG_THREAT_UPDATE SMSG_THREAT_UPDATEswap(std::move(other.SMSG_THREAT_UPDATE));
        std::swap(this->SMSG_THREAT_UPDATE, SMSG_THREAT_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_THREAT_REMOVE) {
        wrath::SMSG_THREAT_REMOVE SMSG_THREAT_REMOVEswap(std::move(other.SMSG_THREAT_REMOVE));
        std::swap(this->SMSG_THREAT_REMOVE, SMSG_THREAT_REMOVEswap);
    }
    if (opcode == Opcode::SMSG_THREAT_CLEAR) {
        wrath::SMSG_THREAT_CLEAR SMSG_THREAT_CLEARswap(std::move(other.SMSG_THREAT_CLEAR));
        std::swap(this->SMSG_THREAT_CLEAR, SMSG_THREAT_CLEARswap);
    }
    if (opcode == Opcode::SMSG_CONVERT_RUNE) {
        wrath::SMSG_CONVERT_RUNE SMSG_CONVERT_RUNEswap(std::move(other.SMSG_CONVERT_RUNE));
        std::swap(this->SMSG_CONVERT_RUNE, SMSG_CONVERT_RUNEswap);
    }
    if (opcode == Opcode::SMSG_RESYNC_RUNES) {
        wrath::SMSG_RESYNC_RUNES SMSG_RESYNC_RUNESswap(std::move(other.SMSG_RESYNC_RUNES));
        std::swap(this->SMSG_RESYNC_RUNES, SMSG_RESYNC_RUNESswap);
    }
    if (opcode == Opcode::SMSG_ADD_RUNE_POWER) {
        wrath::SMSG_ADD_RUNE_POWER SMSG_ADD_RUNE_POWERswap(std::move(other.SMSG_ADD_RUNE_POWER));
        std::swap(this->SMSG_ADD_RUNE_POWER, SMSG_ADD_RUNE_POWERswap);
    }
    if (opcode == Opcode::SMSG_AUCTION_LIST_PENDING_SALES) {
        wrath::SMSG_AUCTION_LIST_PENDING_SALES SMSG_AUCTION_LIST_PENDING_SALESswap(std::move(other.SMSG_AUCTION_LIST_PENDING_SALES));
        std::swap(this->SMSG_AUCTION_LIST_PENDING_SALES, SMSG_AUCTION_LIST_PENDING_SALESswap);
    }
    if (opcode == Opcode::SMSG_MODIFY_COOLDOWN) {
        wrath::SMSG_MODIFY_COOLDOWN SMSG_MODIFY_COOLDOWNswap(std::move(other.SMSG_MODIFY_COOLDOWN));
        std::swap(this->SMSG_MODIFY_COOLDOWN, SMSG_MODIFY_COOLDOWNswap);
    }
    if (opcode == Opcode::SMSG_PET_UPDATE_COMBO_POINTS) {
        wrath::SMSG_PET_UPDATE_COMBO_POINTS SMSG_PET_UPDATE_COMBO_POINTSswap(std::move(other.SMSG_PET_UPDATE_COMBO_POINTS));
        std::swap(this->SMSG_PET_UPDATE_COMBO_POINTS, SMSG_PET_UPDATE_COMBO_POINTSswap);
    }
    if (opcode == Opcode::SMSG_PRE_RESURRECT) {
        wrath::SMSG_PRE_RESURRECT SMSG_PRE_RESURRECTswap(std::move(other.SMSG_PRE_RESURRECT));
        std::swap(this->SMSG_PRE_RESURRECT, SMSG_PRE_RESURRECTswap);
    }
    if (opcode == Opcode::SMSG_AURA_UPDATE_ALL) {
        wrath::SMSG_AURA_UPDATE_ALL SMSG_AURA_UPDATE_ALLswap(std::move(other.SMSG_AURA_UPDATE_ALL));
        std::swap(this->SMSG_AURA_UPDATE_ALL, SMSG_AURA_UPDATE_ALLswap);
    }
    if (opcode == Opcode::SMSG_AURA_UPDATE) {
        wrath::SMSG_AURA_UPDATE SMSG_AURA_UPDATEswap(std::move(other.SMSG_AURA_UPDATE));
        std::swap(this->SMSG_AURA_UPDATE, SMSG_AURA_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) {
        wrath::SMSG_SERVER_FIRST_ACHIEVEMENT SMSG_SERVER_FIRST_ACHIEVEMENTswap(std::move(other.SMSG_SERVER_FIRST_ACHIEVEMENT));
        std::swap(this->SMSG_SERVER_FIRST_ACHIEVEMENT, SMSG_SERVER_FIRST_ACHIEVEMENTswap);
    }
    if (opcode == Opcode::SMSG_PET_LEARNED_SPELL) {
        wrath::SMSG_PET_LEARNED_SPELL SMSG_PET_LEARNED_SPELLswap(std::move(other.SMSG_PET_LEARNED_SPELL));
        std::swap(this->SMSG_PET_LEARNED_SPELL, SMSG_PET_LEARNED_SPELLswap);
    }
    if (opcode == Opcode::SMSG_PET_UNLEARNED_SPELL) {
        wrath::SMSG_PET_UNLEARNED_SPELL SMSG_PET_UNLEARNED_SPELLswap(std::move(other.SMSG_PET_UNLEARNED_SPELL));
        std::swap(this->SMSG_PET_UNLEARNED_SPELL, SMSG_PET_UNLEARNED_SPELLswap);
    }
    if (opcode == Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) {
        wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURAswap(std::move(other.SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA));
        std::swap(this->SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA, SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURAswap);
    }
    if (opcode == Opcode::SMSG_CRITERIA_DELETED) {
        wrath::SMSG_CRITERIA_DELETED SMSG_CRITERIA_DELETEDswap(std::move(other.SMSG_CRITERIA_DELETED));
        std::swap(this->SMSG_CRITERIA_DELETED, SMSG_CRITERIA_DELETEDswap);
    }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_DELETED) {
        wrath::SMSG_ACHIEVEMENT_DELETED SMSG_ACHIEVEMENT_DELETEDswap(std::move(other.SMSG_ACHIEVEMENT_DELETED));
        std::swap(this->SMSG_ACHIEVEMENT_DELETED, SMSG_ACHIEVEMENT_DELETEDswap);
    }
    if (opcode == Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) {
        wrath::SMSG_BATTLEGROUND_INFO_THROTTLED SMSG_BATTLEGROUND_INFO_THROTTLEDswap(std::move(other.SMSG_BATTLEGROUND_INFO_THROTTLED));
        std::swap(this->SMSG_BATTLEGROUND_INFO_THROTTLED, SMSG_BATTLEGROUND_INFO_THROTTLEDswap);
    }
    if (opcode == Opcode::SMSG_PLAYER_VEHICLE_DATA) {
        wrath::SMSG_PLAYER_VEHICLE_DATA SMSG_PLAYER_VEHICLE_DATAswap(std::move(other.SMSG_PLAYER_VEHICLE_DATA));
        std::swap(this->SMSG_PLAYER_VEHICLE_DATA, SMSG_PLAYER_VEHICLE_DATAswap);
    }
    if (opcode == Opcode::SMSG_PET_GUIDS) {
        wrath::SMSG_PET_GUIDS SMSG_PET_GUIDSswap(std::move(other.SMSG_PET_GUIDS));
        std::swap(this->SMSG_PET_GUIDS, SMSG_PET_GUIDSswap);
    }
    if (opcode == Opcode::SMSG_CLIENTCACHE_VERSION) {
        wrath::SMSG_CLIENTCACHE_VERSION SMSG_CLIENTCACHE_VERSIONswap(std::move(other.SMSG_CLIENTCACHE_VERSION));
        std::swap(this->SMSG_CLIENTCACHE_VERSION, SMSG_CLIENTCACHE_VERSIONswap);
    }
    if (opcode == Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) {
        wrath::SMSG_ITEM_REFUND_INFO_RESPONSE SMSG_ITEM_REFUND_INFO_RESPONSEswap(std::move(other.SMSG_ITEM_REFUND_INFO_RESPONSE));
        std::swap(this->SMSG_ITEM_REFUND_INFO_RESPONSE, SMSG_ITEM_REFUND_INFO_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_ITEM_REFUND_RESULT) {
        wrath::SMSG_ITEM_REFUND_RESULT SMSG_ITEM_REFUND_RESULTswap(std::move(other.SMSG_ITEM_REFUND_RESULT));
        std::swap(this->SMSG_ITEM_REFUND_RESULT, SMSG_ITEM_REFUND_RESULTswap);
    }
    if (opcode == Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) {
        wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSEswap(std::move(other.SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE));
        std::swap(this->SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE, SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) {
        wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION SMSG_CALENDAR_CLEAR_PENDING_ACTIONswap(std::move(other.SMSG_CALENDAR_CLEAR_PENDING_ACTION));
        std::swap(this->SMSG_CALENDAR_CLEAR_PENDING_ACTION, SMSG_CALENDAR_CLEAR_PENDING_ACTIONswap);
    }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_LIST) {
        wrath::SMSG_EQUIPMENT_SET_LIST SMSG_EQUIPMENT_SET_LISTswap(std::move(other.SMSG_EQUIPMENT_SET_LIST));
        std::swap(this->SMSG_EQUIPMENT_SET_LIST, SMSG_EQUIPMENT_SET_LISTswap);
    }
    if (opcode == Opcode::SMSG_SET_PROJECTILE_POSITION) {
        wrath::SMSG_SET_PROJECTILE_POSITION SMSG_SET_PROJECTILE_POSITIONswap(std::move(other.SMSG_SET_PROJECTILE_POSITION));
        std::swap(this->SMSG_SET_PROJECTILE_POSITION, SMSG_SET_PROJECTILE_POSITIONswap);
    }
    if (opcode == Opcode::SMSG_TALENTS_INFO) {
        wrath::SMSG_TALENTS_INFO SMSG_TALENTS_INFOswap(std::move(other.SMSG_TALENTS_INFO));
        std::swap(this->SMSG_TALENTS_INFO, SMSG_TALENTS_INFOswap);
    }
    if (opcode == Opcode::SMSG_ARENA_UNIT_DESTROYED) {
        wrath::SMSG_ARENA_UNIT_DESTROYED SMSG_ARENA_UNIT_DESTROYEDswap(std::move(other.SMSG_ARENA_UNIT_DESTROYED));
        std::swap(this->SMSG_ARENA_UNIT_DESTROYED, SMSG_ARENA_UNIT_DESTROYEDswap);
    }
    if (opcode == Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) {
        wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUEDswap(std::move(other.SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED));
        std::swap(this->SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED, SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUEDswap);
    }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_DISABLE) {
        wrath::SMSG_MOVE_GRAVITY_DISABLE SMSG_MOVE_GRAVITY_DISABLEswap(std::move(other.SMSG_MOVE_GRAVITY_DISABLE));
        std::swap(this->SMSG_MOVE_GRAVITY_DISABLE, SMSG_MOVE_GRAVITY_DISABLEswap);
    }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_ENABLE) {
        wrath::SMSG_MOVE_GRAVITY_ENABLE SMSG_MOVE_GRAVITY_ENABLEswap(std::move(other.SMSG_MOVE_GRAVITY_ENABLE));
        std::swap(this->SMSG_MOVE_GRAVITY_ENABLE, SMSG_MOVE_GRAVITY_ENABLEswap);
    }
    if (opcode == Opcode::MSG_MOVE_GRAVITY_CHNG) {
        wrath::MSG_MOVE_GRAVITY_CHNG_Server MSG_MOVE_GRAVITY_CHNGswap(std::move(other.MSG_MOVE_GRAVITY_CHNG));
        std::swap(this->MSG_MOVE_GRAVITY_CHNG, MSG_MOVE_GRAVITY_CHNGswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) {
        wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE SMSG_SPLINE_MOVE_GRAVITY_DISABLEswap(std::move(other.SMSG_SPLINE_MOVE_GRAVITY_DISABLE));
        std::swap(this->SMSG_SPLINE_MOVE_GRAVITY_DISABLE, SMSG_SPLINE_MOVE_GRAVITY_DISABLEswap);
    }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) {
        wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE SMSG_SPLINE_MOVE_GRAVITY_ENABLEswap(std::move(other.SMSG_SPLINE_MOVE_GRAVITY_ENABLE));
        std::swap(this->SMSG_SPLINE_MOVE_GRAVITY_ENABLE, SMSG_SPLINE_MOVE_GRAVITY_ENABLEswap);
    }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) {
        wrath::SMSG_EQUIPMENT_SET_USE_RESULT SMSG_EQUIPMENT_SET_USE_RESULTswap(std::move(other.SMSG_EQUIPMENT_SET_USE_RESULT));
        std::swap(this->SMSG_EQUIPMENT_SET_USE_RESULT, SMSG_EQUIPMENT_SET_USE_RESULTswap);
    }
    if (opcode == Opcode::SMSG_CHAR_FACTION_CHANGE) {
        wrath::SMSG_CHAR_FACTION_CHANGE SMSG_CHAR_FACTION_CHANGEswap(std::move(other.SMSG_CHAR_FACTION_CHANGE));
        std::swap(this->SMSG_CHAR_FACTION_CHANGE, SMSG_CHAR_FACTION_CHANGEswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) {
        wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE SMSG_BATTLEFIELD_MGR_ENTRY_INVITEswap(std::move(other.SMSG_BATTLEFIELD_MGR_ENTRY_INVITE));
        std::swap(this->SMSG_BATTLEFIELD_MGR_ENTRY_INVITE, SMSG_BATTLEFIELD_MGR_ENTRY_INVITEswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) {
        wrath::SMSG_BATTLEFIELD_MGR_ENTERED SMSG_BATTLEFIELD_MGR_ENTEREDswap(std::move(other.SMSG_BATTLEFIELD_MGR_ENTERED));
        std::swap(this->SMSG_BATTLEFIELD_MGR_ENTERED, SMSG_BATTLEFIELD_MGR_ENTEREDswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) {
        wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE SMSG_BATTLEFIELD_MGR_QUEUE_INVITEswap(std::move(other.SMSG_BATTLEFIELD_MGR_QUEUE_INVITE));
        std::swap(this->SMSG_BATTLEFIELD_MGR_QUEUE_INVITE, SMSG_BATTLEFIELD_MGR_QUEUE_INVITEswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) {
        wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSEswap(std::move(other.SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE));
        std::swap(this->SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE, SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) {
        wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING SMSG_BATTLEFIELD_MGR_EJECT_PENDINGswap(std::move(other.SMSG_BATTLEFIELD_MGR_EJECT_PENDING));
        std::swap(this->SMSG_BATTLEFIELD_MGR_EJECT_PENDING, SMSG_BATTLEFIELD_MGR_EJECT_PENDINGswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) {
        wrath::SMSG_BATTLEFIELD_MGR_EJECTED SMSG_BATTLEFIELD_MGR_EJECTEDswap(std::move(other.SMSG_BATTLEFIELD_MGR_EJECTED));
        std::swap(this->SMSG_BATTLEFIELD_MGR_EJECTED, SMSG_BATTLEFIELD_MGR_EJECTEDswap);
    }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) {
        wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE SMSG_BATTLEFIELD_MGR_STATE_CHANGEswap(std::move(other.SMSG_BATTLEFIELD_MGR_STATE_CHANGE));
        std::swap(this->SMSG_BATTLEFIELD_MGR_STATE_CHANGE, SMSG_BATTLEFIELD_MGR_STATE_CHANGEswap);
    }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        wrath::MSG_SET_RAID_DIFFICULTY_Server MSG_SET_RAID_DIFFICULTYswap(std::move(other.MSG_SET_RAID_DIFFICULTY));
        std::swap(this->MSG_SET_RAID_DIFFICULTY, MSG_SET_RAID_DIFFICULTYswap);
    }
    if (opcode == Opcode::SMSG_TOGGLE_XP_GAIN) {
        wrath::SMSG_TOGGLE_XP_GAIN SMSG_TOGGLE_XP_GAINswap(std::move(other.SMSG_TOGGLE_XP_GAIN));
        std::swap(this->SMSG_TOGGLE_XP_GAIN, SMSG_TOGGLE_XP_GAINswap);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_DB_ERROR) {
        wrath::SMSG_GMRESPONSE_DB_ERROR SMSG_GMRESPONSE_DB_ERRORswap(std::move(other.SMSG_GMRESPONSE_DB_ERROR));
        std::swap(this->SMSG_GMRESPONSE_DB_ERROR, SMSG_GMRESPONSE_DB_ERRORswap);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_RECEIVED) {
        wrath::SMSG_GMRESPONSE_RECEIVED SMSG_GMRESPONSE_RECEIVEDswap(std::move(other.SMSG_GMRESPONSE_RECEIVED));
        std::swap(this->SMSG_GMRESPONSE_RECEIVED, SMSG_GMRESPONSE_RECEIVEDswap);
    }
    if (opcode == Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) {
        wrath::SMSG_GMRESPONSE_STATUS_UPDATE SMSG_GMRESPONSE_STATUS_UPDATEswap(std::move(other.SMSG_GMRESPONSE_STATUS_UPDATE));
        std::swap(this->SMSG_GMRESPONSE_STATUS_UPDATE, SMSG_GMRESPONSE_STATUS_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE SMSG_WORLD_STATE_UI_TIMER_UPDATEswap(std::move(other.SMSG_WORLD_STATE_UI_TIMER_UPDATE));
        std::swap(this->SMSG_WORLD_STATE_UI_TIMER_UPDATE, SMSG_WORLD_STATE_UI_TIMER_UPDATEswap);
    }
    if (opcode == Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) {
        wrath::SMSG_TALENTS_INVOLUNTARILY_RESET SMSG_TALENTS_INVOLUNTARILY_RESETswap(std::move(other.SMSG_TALENTS_INVOLUNTARILY_RESET));
        std::swap(this->SMSG_TALENTS_INVOLUNTARILY_RESET, SMSG_TALENTS_INVOLUNTARILY_RESETswap);
    }
    if (opcode == Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) {
        wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE SMSG_QUERY_QUESTS_COMPLETED_RESPONSEswap(std::move(other.SMSG_QUERY_QUESTS_COMPLETED_RESPONSE));
        std::swap(this->SMSG_QUERY_QUESTS_COMPLETED_RESPONSE, SMSG_QUERY_QUESTS_COMPLETED_RESPONSEswap);
    }
    if (opcode == Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) {
        wrath::SMSG_CORPSE_NOT_IN_INSTANCE SMSG_CORPSE_NOT_IN_INSTANCEswap(std::move(other.SMSG_CORPSE_NOT_IN_INSTANCE));
        std::swap(this->SMSG_CORPSE_NOT_IN_INSTANCE, SMSG_CORPSE_NOT_IN_INSTANCEswap);
    }
    if (opcode == Opcode::SMSG_CAMERA_SHAKE) {
        wrath::SMSG_CAMERA_SHAKE SMSG_CAMERA_SHAKEswap(std::move(other.SMSG_CAMERA_SHAKE));
        std::swap(this->SMSG_CAMERA_SHAKE, SMSG_CAMERA_SHAKEswap);
    }
    if (opcode == Opcode::SMSG_SOCKET_GEMS_RESULT) {
        wrath::SMSG_SOCKET_GEMS_RESULT SMSG_SOCKET_GEMS_RESULTswap(std::move(other.SMSG_SOCKET_GEMS_RESULT));
        std::swap(this->SMSG_SOCKET_GEMS_RESULT, SMSG_SOCKET_GEMS_RESULTswap);
    }
    if (opcode == Opcode::SMSG_REDIRECT_CLIENT) {
        wrath::SMSG_REDIRECT_CLIENT SMSG_REDIRECT_CLIENTswap(std::move(other.SMSG_REDIRECT_CLIENT));
        std::swap(this->SMSG_REDIRECT_CLIENT, SMSG_REDIRECT_CLIENTswap);
    }
    if (opcode == Opcode::SMSG_MOVE_SET_COLLISION_HGT) {
        wrath::SMSG_MOVE_SET_COLLISION_HGT SMSG_MOVE_SET_COLLISION_HGTswap(std::move(other.SMSG_MOVE_SET_COLLISION_HGT));
        std::swap(this->SMSG_MOVE_SET_COLLISION_HGT, SMSG_MOVE_SET_COLLISION_HGTswap);
    }
    if (opcode == Opcode::SMSG_MULTIPLE_MOVES) {
        wrath::SMSG_MULTIPLE_MOVES SMSG_MULTIPLE_MOVESswap(std::move(other.SMSG_MULTIPLE_MOVES));
        std::swap(this->SMSG_MULTIPLE_MOVES, SMSG_MULTIPLE_MOVESswap);
    }
    return *this;
}

WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHAR_CREATE&& obj) {
    opcode = Opcode::SMSG_CHAR_CREATE;
    new (&this->SMSG_CHAR_CREATE) wrath::SMSG_CHAR_CREATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHAR_ENUM&& obj) {
    opcode = Opcode::SMSG_CHAR_ENUM;
    new (&this->SMSG_CHAR_ENUM) wrath::SMSG_CHAR_ENUM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHAR_DELETE&& obj) {
    opcode = Opcode::SMSG_CHAR_DELETE;
    new (&this->SMSG_CHAR_DELETE) wrath::SMSG_CHAR_DELETE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_NEW_WORLD&& obj) {
    opcode = Opcode::SMSG_NEW_WORLD;
    new (&this->SMSG_NEW_WORLD) wrath::SMSG_NEW_WORLD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TRANSFER_PENDING&& obj) {
    opcode = Opcode::SMSG_TRANSFER_PENDING;
    new (&this->SMSG_TRANSFER_PENDING) wrath::SMSG_TRANSFER_PENDING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TRANSFER_ABORTED&& obj) {
    opcode = Opcode::SMSG_TRANSFER_ABORTED;
    new (&this->SMSG_TRANSFER_ABORTED) wrath::SMSG_TRANSFER_ABORTED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHARACTER_LOGIN_FAILED&& obj) {
    opcode = Opcode::SMSG_CHARACTER_LOGIN_FAILED;
    new (&this->SMSG_CHARACTER_LOGIN_FAILED) wrath::SMSG_CHARACTER_LOGIN_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOGIN_SETTIMESPEED&& obj) {
    opcode = Opcode::SMSG_LOGIN_SETTIMESPEED;
    new (&this->SMSG_LOGIN_SETTIMESPEED) wrath::SMSG_LOGIN_SETTIMESPEED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOGOUT_RESPONSE&& obj) {
    opcode = Opcode::SMSG_LOGOUT_RESPONSE;
    new (&this->SMSG_LOGOUT_RESPONSE) wrath::SMSG_LOGOUT_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOGOUT_COMPLETE&& obj) {
    opcode = Opcode::SMSG_LOGOUT_COMPLETE;
    new (&this->SMSG_LOGOUT_COMPLETE) wrath::SMSG_LOGOUT_COMPLETE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOGOUT_CANCEL_ACK&& obj) {
    opcode = Opcode::SMSG_LOGOUT_CANCEL_ACK;
    new (&this->SMSG_LOGOUT_CANCEL_ACK) wrath::SMSG_LOGOUT_CANCEL_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_NAME_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_NAME_QUERY_RESPONSE;
    new (&this->SMSG_NAME_QUERY_RESPONSE) wrath::SMSG_NAME_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_NAME_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_PET_NAME_QUERY_RESPONSE;
    new (&this->SMSG_PET_NAME_QUERY_RESPONSE) wrath::SMSG_PET_NAME_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GUILD_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_GUILD_QUERY_RESPONSE;
    new (&this->SMSG_GUILD_QUERY_RESPONSE) wrath::SMSG_GUILD_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE&& obj) {
    opcode = Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE;
    new (&this->SMSG_ITEM_QUERY_SINGLE_RESPONSE) wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE;
    new (&this->SMSG_PAGE_TEXT_QUERY_RESPONSE) wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUEST_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_QUEST_QUERY_RESPONSE;
    new (&this->SMSG_QUEST_QUERY_RESPONSE) wrath::SMSG_QUEST_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE;
    new (&this->SMSG_GAMEOBJECT_QUERY_RESPONSE) wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CREATURE_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_CREATURE_QUERY_RESPONSE;
    new (&this->SMSG_CREATURE_QUERY_RESPONSE) wrath::SMSG_CREATURE_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_WHO&& obj) {
    opcode = Opcode::SMSG_WHO;
    new (&this->SMSG_WHO) wrath::SMSG_WHO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_WHOIS&& obj) {
    opcode = Opcode::SMSG_WHOIS;
    new (&this->SMSG_WHOIS) wrath::SMSG_WHOIS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CONTACT_LIST&& obj) {
    opcode = Opcode::SMSG_CONTACT_LIST;
    new (&this->SMSG_CONTACT_LIST) wrath::SMSG_CONTACT_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FRIEND_STATUS&& obj) {
    opcode = Opcode::SMSG_FRIEND_STATUS;
    new (&this->SMSG_FRIEND_STATUS) wrath::SMSG_FRIEND_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GROUP_INVITE&& obj) {
    opcode = Opcode::SMSG_GROUP_INVITE;
    new (&this->SMSG_GROUP_INVITE) wrath::SMSG_GROUP_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GROUP_DECLINE&& obj) {
    opcode = Opcode::SMSG_GROUP_DECLINE;
    new (&this->SMSG_GROUP_DECLINE) wrath::SMSG_GROUP_DECLINE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GROUP_UNINVITE&& obj) {
    opcode = Opcode::SMSG_GROUP_UNINVITE;
    new (&this->SMSG_GROUP_UNINVITE) wrath::SMSG_GROUP_UNINVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GROUP_SET_LEADER&& obj) {
    opcode = Opcode::SMSG_GROUP_SET_LEADER;
    new (&this->SMSG_GROUP_SET_LEADER) wrath::SMSG_GROUP_SET_LEADER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GROUP_DESTROYED&& obj) {
    opcode = Opcode::SMSG_GROUP_DESTROYED;
    new (&this->SMSG_GROUP_DESTROYED) wrath::SMSG_GROUP_DESTROYED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GROUP_LIST&& obj) {
    opcode = Opcode::SMSG_GROUP_LIST;
    new (&this->SMSG_GROUP_LIST) wrath::SMSG_GROUP_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PARTY_MEMBER_STATS&& obj) {
    opcode = Opcode::SMSG_PARTY_MEMBER_STATS;
    new (&this->SMSG_PARTY_MEMBER_STATS) wrath::SMSG_PARTY_MEMBER_STATS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PARTY_COMMAND_RESULT&& obj) {
    opcode = Opcode::SMSG_PARTY_COMMAND_RESULT;
    new (&this->SMSG_PARTY_COMMAND_RESULT) wrath::SMSG_PARTY_COMMAND_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GUILD_INVITE&& obj) {
    opcode = Opcode::SMSG_GUILD_INVITE;
    new (&this->SMSG_GUILD_INVITE) wrath::SMSG_GUILD_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GUILD_DECLINE&& obj) {
    opcode = Opcode::SMSG_GUILD_DECLINE;
    new (&this->SMSG_GUILD_DECLINE) wrath::SMSG_GUILD_DECLINE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GUILD_INFO&& obj) {
    opcode = Opcode::SMSG_GUILD_INFO;
    new (&this->SMSG_GUILD_INFO) wrath::SMSG_GUILD_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GUILD_ROSTER&& obj) {
    opcode = Opcode::SMSG_GUILD_ROSTER;
    new (&this->SMSG_GUILD_ROSTER) wrath::SMSG_GUILD_ROSTER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GUILD_EVENT&& obj) {
    opcode = Opcode::SMSG_GUILD_EVENT;
    new (&this->SMSG_GUILD_EVENT) wrath::SMSG_GUILD_EVENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GUILD_COMMAND_RESULT&& obj) {
    opcode = Opcode::SMSG_GUILD_COMMAND_RESULT;
    new (&this->SMSG_GUILD_COMMAND_RESULT) wrath::SMSG_GUILD_COMMAND_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MESSAGECHAT&& obj) {
    opcode = Opcode::SMSG_MESSAGECHAT;
    new (&this->SMSG_MESSAGECHAT) wrath::SMSG_MESSAGECHAT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHANNEL_NOTIFY&& obj) {
    opcode = Opcode::SMSG_CHANNEL_NOTIFY;
    new (&this->SMSG_CHANNEL_NOTIFY) wrath::SMSG_CHANNEL_NOTIFY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHANNEL_LIST&& obj) {
    opcode = Opcode::SMSG_CHANNEL_LIST;
    new (&this->SMSG_CHANNEL_LIST) wrath::SMSG_CHANNEL_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_UPDATE_OBJECT&& obj) {
    opcode = Opcode::SMSG_UPDATE_OBJECT;
    new (&this->SMSG_UPDATE_OBJECT) wrath::SMSG_UPDATE_OBJECT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DESTROY_OBJECT&& obj) {
    opcode = Opcode::SMSG_DESTROY_OBJECT;
    new (&this->SMSG_DESTROY_OBJECT) wrath::SMSG_DESTROY_OBJECT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_READ_ITEM_OK&& obj) {
    opcode = Opcode::SMSG_READ_ITEM_OK;
    new (&this->SMSG_READ_ITEM_OK) wrath::SMSG_READ_ITEM_OK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_READ_ITEM_FAILED&& obj) {
    opcode = Opcode::SMSG_READ_ITEM_FAILED;
    new (&this->SMSG_READ_ITEM_FAILED) wrath::SMSG_READ_ITEM_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ITEM_COOLDOWN&& obj) {
    opcode = Opcode::SMSG_ITEM_COOLDOWN;
    new (&this->SMSG_ITEM_COOLDOWN) wrath::SMSG_ITEM_COOLDOWN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM&& obj) {
    opcode = Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM;
    new (&this->SMSG_GAMEOBJECT_CUSTOM_ANIM) wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_FORWARD&& obj) {
    opcode = Opcode::MSG_MOVE_START_FORWARD;
    new (&this->MSG_MOVE_START_FORWARD) wrath::MSG_MOVE_START_FORWARD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_BACKWARD&& obj) {
    opcode = Opcode::MSG_MOVE_START_BACKWARD;
    new (&this->MSG_MOVE_START_BACKWARD) wrath::MSG_MOVE_START_BACKWARD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_STOP&& obj) {
    opcode = Opcode::MSG_MOVE_STOP;
    new (&this->MSG_MOVE_STOP) wrath::MSG_MOVE_STOP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_STRAFE_LEFT&& obj) {
    opcode = Opcode::MSG_MOVE_START_STRAFE_LEFT;
    new (&this->MSG_MOVE_START_STRAFE_LEFT) wrath::MSG_MOVE_START_STRAFE_LEFT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_STRAFE_RIGHT&& obj) {
    opcode = Opcode::MSG_MOVE_START_STRAFE_RIGHT;
    new (&this->MSG_MOVE_START_STRAFE_RIGHT) wrath::MSG_MOVE_START_STRAFE_RIGHT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_STOP_STRAFE&& obj) {
    opcode = Opcode::MSG_MOVE_STOP_STRAFE;
    new (&this->MSG_MOVE_STOP_STRAFE) wrath::MSG_MOVE_STOP_STRAFE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_JUMP&& obj) {
    opcode = Opcode::MSG_MOVE_JUMP;
    new (&this->MSG_MOVE_JUMP) wrath::MSG_MOVE_JUMP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_TURN_LEFT&& obj) {
    opcode = Opcode::MSG_MOVE_START_TURN_LEFT;
    new (&this->MSG_MOVE_START_TURN_LEFT) wrath::MSG_MOVE_START_TURN_LEFT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_TURN_RIGHT&& obj) {
    opcode = Opcode::MSG_MOVE_START_TURN_RIGHT;
    new (&this->MSG_MOVE_START_TURN_RIGHT) wrath::MSG_MOVE_START_TURN_RIGHT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_STOP_TURN&& obj) {
    opcode = Opcode::MSG_MOVE_STOP_TURN;
    new (&this->MSG_MOVE_STOP_TURN) wrath::MSG_MOVE_STOP_TURN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_PITCH_UP&& obj) {
    opcode = Opcode::MSG_MOVE_START_PITCH_UP;
    new (&this->MSG_MOVE_START_PITCH_UP) wrath::MSG_MOVE_START_PITCH_UP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_PITCH_DOWN&& obj) {
    opcode = Opcode::MSG_MOVE_START_PITCH_DOWN;
    new (&this->MSG_MOVE_START_PITCH_DOWN) wrath::MSG_MOVE_START_PITCH_DOWN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_STOP_PITCH&& obj) {
    opcode = Opcode::MSG_MOVE_STOP_PITCH;
    new (&this->MSG_MOVE_STOP_PITCH) wrath::MSG_MOVE_STOP_PITCH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_SET_RUN_MODE&& obj) {
    opcode = Opcode::MSG_MOVE_SET_RUN_MODE;
    new (&this->MSG_MOVE_SET_RUN_MODE) wrath::MSG_MOVE_SET_RUN_MODE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_SET_WALK_MODE&& obj) {
    opcode = Opcode::MSG_MOVE_SET_WALK_MODE;
    new (&this->MSG_MOVE_SET_WALK_MODE) wrath::MSG_MOVE_SET_WALK_MODE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_TELEPORT_CHEAT_Server&& obj) {
    opcode = Opcode::MSG_MOVE_TELEPORT_CHEAT;
    new (&this->MSG_MOVE_TELEPORT_CHEAT) wrath::MSG_MOVE_TELEPORT_CHEAT_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_TELEPORT_ACK_Server&& obj) {
    opcode = Opcode::MSG_MOVE_TELEPORT_ACK;
    new (&this->MSG_MOVE_TELEPORT_ACK) wrath::MSG_MOVE_TELEPORT_ACK_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_FALL_LAND&& obj) {
    opcode = Opcode::MSG_MOVE_FALL_LAND;
    new (&this->MSG_MOVE_FALL_LAND) wrath::MSG_MOVE_FALL_LAND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_SWIM&& obj) {
    opcode = Opcode::MSG_MOVE_START_SWIM;
    new (&this->MSG_MOVE_START_SWIM) wrath::MSG_MOVE_START_SWIM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_STOP_SWIM&& obj) {
    opcode = Opcode::MSG_MOVE_STOP_SWIM;
    new (&this->MSG_MOVE_STOP_SWIM) wrath::MSG_MOVE_STOP_SWIM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_SET_FACING&& obj) {
    opcode = Opcode::MSG_MOVE_SET_FACING;
    new (&this->MSG_MOVE_SET_FACING) wrath::MSG_MOVE_SET_FACING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_SET_PITCH&& obj) {
    opcode = Opcode::MSG_MOVE_SET_PITCH;
    new (&this->MSG_MOVE_SET_PITCH) wrath::MSG_MOVE_SET_PITCH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_WORLDPORT_ACK&& obj) {
    opcode = Opcode::MSG_MOVE_WORLDPORT_ACK;
    new (&this->MSG_MOVE_WORLDPORT_ACK) wrath::MSG_MOVE_WORLDPORT_ACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MONSTER_MOVE&& obj) {
    opcode = Opcode::SMSG_MONSTER_MOVE;
    new (&this->SMSG_MONSTER_MOVE) wrath::SMSG_MONSTER_MOVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_WATER_WALK&& obj) {
    opcode = Opcode::SMSG_MOVE_WATER_WALK;
    new (&this->SMSG_MOVE_WATER_WALK) wrath::SMSG_MOVE_WATER_WALK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_LAND_WALK&& obj) {
    opcode = Opcode::SMSG_MOVE_LAND_WALK;
    new (&this->SMSG_MOVE_LAND_WALK) wrath::SMSG_MOVE_LAND_WALK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_RUN_SPEED_CHANGE&& obj) {
    opcode = Opcode::SMSG_FORCE_RUN_SPEED_CHANGE;
    new (&this->SMSG_FORCE_RUN_SPEED_CHANGE) wrath::SMSG_FORCE_RUN_SPEED_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE&& obj) {
    opcode = Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
    new (&this->SMSG_FORCE_RUN_BACK_SPEED_CHANGE) wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_SWIM_SPEED_CHANGE&& obj) {
    opcode = Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE;
    new (&this->SMSG_FORCE_SWIM_SPEED_CHANGE) wrath::SMSG_FORCE_SWIM_SPEED_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_MOVE_ROOT&& obj) {
    opcode = Opcode::SMSG_FORCE_MOVE_ROOT;
    new (&this->SMSG_FORCE_MOVE_ROOT) wrath::SMSG_FORCE_MOVE_ROOT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_MOVE_UNROOT&& obj) {
    opcode = Opcode::SMSG_FORCE_MOVE_UNROOT;
    new (&this->SMSG_FORCE_MOVE_UNROOT) wrath::SMSG_FORCE_MOVE_UNROOT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_ROOT_Server&& obj) {
    opcode = Opcode::MSG_MOVE_ROOT;
    new (&this->MSG_MOVE_ROOT) wrath::MSG_MOVE_ROOT_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_UNROOT_Server&& obj) {
    opcode = Opcode::MSG_MOVE_UNROOT;
    new (&this->MSG_MOVE_UNROOT) wrath::MSG_MOVE_UNROOT_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_HEARTBEAT&& obj) {
    opcode = Opcode::MSG_MOVE_HEARTBEAT;
    new (&this->MSG_MOVE_HEARTBEAT) wrath::MSG_MOVE_HEARTBEAT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_KNOCK_BACK&& obj) {
    opcode = Opcode::SMSG_MOVE_KNOCK_BACK;
    new (&this->SMSG_MOVE_KNOCK_BACK) wrath::SMSG_MOVE_KNOCK_BACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_KNOCK_BACK_Server&& obj) {
    opcode = Opcode::MSG_MOVE_KNOCK_BACK;
    new (&this->MSG_MOVE_KNOCK_BACK) wrath::MSG_MOVE_KNOCK_BACK_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_FEATHER_FALL&& obj) {
    opcode = Opcode::SMSG_MOVE_FEATHER_FALL;
    new (&this->SMSG_MOVE_FEATHER_FALL) wrath::SMSG_MOVE_FEATHER_FALL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_NORMAL_FALL&& obj) {
    opcode = Opcode::SMSG_MOVE_NORMAL_FALL;
    new (&this->SMSG_MOVE_NORMAL_FALL) wrath::SMSG_MOVE_NORMAL_FALL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_SET_HOVER&& obj) {
    opcode = Opcode::SMSG_MOVE_SET_HOVER;
    new (&this->SMSG_MOVE_SET_HOVER) wrath::SMSG_MOVE_SET_HOVER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_UNSET_HOVER&& obj) {
    opcode = Opcode::SMSG_MOVE_UNSET_HOVER;
    new (&this->SMSG_MOVE_UNSET_HOVER) wrath::SMSG_MOVE_UNSET_HOVER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_HOVER&& obj) {
    opcode = Opcode::MSG_MOVE_HOVER;
    new (&this->MSG_MOVE_HOVER) wrath::MSG_MOVE_HOVER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TRIGGER_CINEMATIC&& obj) {
    opcode = Opcode::SMSG_TRIGGER_CINEMATIC;
    new (&this->SMSG_TRIGGER_CINEMATIC) wrath::SMSG_TRIGGER_CINEMATIC (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TUTORIAL_FLAGS&& obj) {
    opcode = Opcode::SMSG_TUTORIAL_FLAGS;
    new (&this->SMSG_TUTORIAL_FLAGS) wrath::SMSG_TUTORIAL_FLAGS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_EMOTE&& obj) {
    opcode = Opcode::SMSG_EMOTE;
    new (&this->SMSG_EMOTE) wrath::SMSG_EMOTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TEXT_EMOTE&& obj) {
    opcode = Opcode::SMSG_TEXT_EMOTE;
    new (&this->SMSG_TEXT_EMOTE) wrath::SMSG_TEXT_EMOTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INVENTORY_CHANGE_FAILURE&& obj) {
    opcode = Opcode::SMSG_INVENTORY_CHANGE_FAILURE;
    new (&this->SMSG_INVENTORY_CHANGE_FAILURE) wrath::SMSG_INVENTORY_CHANGE_FAILURE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TRADE_STATUS&& obj) {
    opcode = Opcode::SMSG_TRADE_STATUS;
    new (&this->SMSG_TRADE_STATUS) wrath::SMSG_TRADE_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TRADE_STATUS_EXTENDED&& obj) {
    opcode = Opcode::SMSG_TRADE_STATUS_EXTENDED;
    new (&this->SMSG_TRADE_STATUS_EXTENDED) wrath::SMSG_TRADE_STATUS_EXTENDED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INITIALIZE_FACTIONS&& obj) {
    opcode = Opcode::SMSG_INITIALIZE_FACTIONS;
    new (&this->SMSG_INITIALIZE_FACTIONS) wrath::SMSG_INITIALIZE_FACTIONS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SET_FACTION_VISIBLE&& obj) {
    opcode = Opcode::SMSG_SET_FACTION_VISIBLE;
    new (&this->SMSG_SET_FACTION_VISIBLE) wrath::SMSG_SET_FACTION_VISIBLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SET_FACTION_STANDING&& obj) {
    opcode = Opcode::SMSG_SET_FACTION_STANDING;
    new (&this->SMSG_SET_FACTION_STANDING) wrath::SMSG_SET_FACTION_STANDING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SET_PROFICIENCY&& obj) {
    opcode = Opcode::SMSG_SET_PROFICIENCY;
    new (&this->SMSG_SET_PROFICIENCY) wrath::SMSG_SET_PROFICIENCY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ACTION_BUTTONS&& obj) {
    opcode = Opcode::SMSG_ACTION_BUTTONS;
    new (&this->SMSG_ACTION_BUTTONS) wrath::SMSG_ACTION_BUTTONS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INITIAL_SPELLS&& obj) {
    opcode = Opcode::SMSG_INITIAL_SPELLS;
    new (&this->SMSG_INITIAL_SPELLS) wrath::SMSG_INITIAL_SPELLS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LEARNED_SPELL&& obj) {
    opcode = Opcode::SMSG_LEARNED_SPELL;
    new (&this->SMSG_LEARNED_SPELL) wrath::SMSG_LEARNED_SPELL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SUPERCEDED_SPELL&& obj) {
    opcode = Opcode::SMSG_SUPERCEDED_SPELL;
    new (&this->SMSG_SUPERCEDED_SPELL) wrath::SMSG_SUPERCEDED_SPELL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CAST_FAILED&& obj) {
    opcode = Opcode::SMSG_CAST_FAILED;
    new (&this->SMSG_CAST_FAILED) wrath::SMSG_CAST_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELL_START&& obj) {
    opcode = Opcode::SMSG_SPELL_START;
    new (&this->SMSG_SPELL_START) wrath::SMSG_SPELL_START (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELL_GO&& obj) {
    opcode = Opcode::SMSG_SPELL_GO;
    new (&this->SMSG_SPELL_GO) wrath::SMSG_SPELL_GO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELL_FAILURE&& obj) {
    opcode = Opcode::SMSG_SPELL_FAILURE;
    new (&this->SMSG_SPELL_FAILURE) wrath::SMSG_SPELL_FAILURE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELL_COOLDOWN&& obj) {
    opcode = Opcode::SMSG_SPELL_COOLDOWN;
    new (&this->SMSG_SPELL_COOLDOWN) wrath::SMSG_SPELL_COOLDOWN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_COOLDOWN_EVENT&& obj) {
    opcode = Opcode::SMSG_COOLDOWN_EVENT;
    new (&this->SMSG_COOLDOWN_EVENT) wrath::SMSG_COOLDOWN_EVENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_CAST_FAILED&& obj) {
    opcode = Opcode::SMSG_PET_CAST_FAILED;
    new (&this->SMSG_PET_CAST_FAILED) wrath::SMSG_PET_CAST_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_CHANNEL_START_Server&& obj) {
    opcode = Opcode::MSG_CHANNEL_START;
    new (&this->MSG_CHANNEL_START) wrath::MSG_CHANNEL_START_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_CHANNEL_UPDATE_Server&& obj) {
    opcode = Opcode::MSG_CHANNEL_UPDATE;
    new (&this->MSG_CHANNEL_UPDATE) wrath::MSG_CHANNEL_UPDATE_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AI_REACTION&& obj) {
    opcode = Opcode::SMSG_AI_REACTION;
    new (&this->SMSG_AI_REACTION) wrath::SMSG_AI_REACTION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ATTACKSTART&& obj) {
    opcode = Opcode::SMSG_ATTACKSTART;
    new (&this->SMSG_ATTACKSTART) wrath::SMSG_ATTACKSTART (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ATTACKSTOP&& obj) {
    opcode = Opcode::SMSG_ATTACKSTOP;
    new (&this->SMSG_ATTACKSTOP) wrath::SMSG_ATTACKSTOP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ATTACKSWING_NOTINRANGE&& obj) {
    opcode = Opcode::SMSG_ATTACKSWING_NOTINRANGE;
    new (&this->SMSG_ATTACKSWING_NOTINRANGE) wrath::SMSG_ATTACKSWING_NOTINRANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ATTACKSWING_BADFACING&& obj) {
    opcode = Opcode::SMSG_ATTACKSWING_BADFACING;
    new (&this->SMSG_ATTACKSWING_BADFACING) wrath::SMSG_ATTACKSWING_BADFACING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY&& obj) {
    opcode = Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY;
    new (&this->SMSG_INSTANCE_LOCK_WARNING_QUERY) wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ATTACKSWING_DEADTARGET&& obj) {
    opcode = Opcode::SMSG_ATTACKSWING_DEADTARGET;
    new (&this->SMSG_ATTACKSWING_DEADTARGET) wrath::SMSG_ATTACKSWING_DEADTARGET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ATTACKSWING_CANT_ATTACK&& obj) {
    opcode = Opcode::SMSG_ATTACKSWING_CANT_ATTACK;
    new (&this->SMSG_ATTACKSWING_CANT_ATTACK) wrath::SMSG_ATTACKSWING_CANT_ATTACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ATTACKERSTATEUPDATE&& obj) {
    opcode = Opcode::SMSG_ATTACKERSTATEUPDATE;
    new (&this->SMSG_ATTACKERSTATEUPDATE) wrath::SMSG_ATTACKERSTATEUPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CANCEL_COMBAT&& obj) {
    opcode = Opcode::SMSG_CANCEL_COMBAT;
    new (&this->SMSG_CANCEL_COMBAT) wrath::SMSG_CANCEL_COMBAT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELLHEALLOG&& obj) {
    opcode = Opcode::SMSG_SPELLHEALLOG;
    new (&this->SMSG_SPELLHEALLOG) wrath::SMSG_SPELLHEALLOG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELLENERGIZELOG&& obj) {
    opcode = Opcode::SMSG_SPELLENERGIZELOG;
    new (&this->SMSG_SPELLENERGIZELOG) wrath::SMSG_SPELLENERGIZELOG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BREAK_TARGET&& obj) {
    opcode = Opcode::SMSG_BREAK_TARGET;
    new (&this->SMSG_BREAK_TARGET) wrath::SMSG_BREAK_TARGET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BINDPOINTUPDATE&& obj) {
    opcode = Opcode::SMSG_BINDPOINTUPDATE;
    new (&this->SMSG_BINDPOINTUPDATE) wrath::SMSG_BINDPOINTUPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PLAYERBOUND&& obj) {
    opcode = Opcode::SMSG_PLAYERBOUND;
    new (&this->SMSG_PLAYERBOUND) wrath::SMSG_PLAYERBOUND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CLIENT_CONTROL_UPDATE&& obj) {
    opcode = Opcode::SMSG_CLIENT_CONTROL_UPDATE;
    new (&this->SMSG_CLIENT_CONTROL_UPDATE) wrath::SMSG_CLIENT_CONTROL_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_RESURRECT_REQUEST&& obj) {
    opcode = Opcode::SMSG_RESURRECT_REQUEST;
    new (&this->SMSG_RESURRECT_REQUEST) wrath::SMSG_RESURRECT_REQUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_RESPONSE&& obj) {
    opcode = Opcode::SMSG_LOOT_RESPONSE;
    new (&this->SMSG_LOOT_RESPONSE) wrath::SMSG_LOOT_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_RELEASE_RESPONSE&& obj) {
    opcode = Opcode::SMSG_LOOT_RELEASE_RESPONSE;
    new (&this->SMSG_LOOT_RELEASE_RESPONSE) wrath::SMSG_LOOT_RELEASE_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_REMOVED&& obj) {
    opcode = Opcode::SMSG_LOOT_REMOVED;
    new (&this->SMSG_LOOT_REMOVED) wrath::SMSG_LOOT_REMOVED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_MONEY_NOTIFY&& obj) {
    opcode = Opcode::SMSG_LOOT_MONEY_NOTIFY;
    new (&this->SMSG_LOOT_MONEY_NOTIFY) wrath::SMSG_LOOT_MONEY_NOTIFY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_CLEAR_MONEY&& obj) {
    opcode = Opcode::SMSG_LOOT_CLEAR_MONEY;
    new (&this->SMSG_LOOT_CLEAR_MONEY) wrath::SMSG_LOOT_CLEAR_MONEY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ITEM_PUSH_RESULT&& obj) {
    opcode = Opcode::SMSG_ITEM_PUSH_RESULT;
    new (&this->SMSG_ITEM_PUSH_RESULT) wrath::SMSG_ITEM_PUSH_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DUEL_REQUESTED&& obj) {
    opcode = Opcode::SMSG_DUEL_REQUESTED;
    new (&this->SMSG_DUEL_REQUESTED) wrath::SMSG_DUEL_REQUESTED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DUEL_OUTOFBOUNDS&& obj) {
    opcode = Opcode::SMSG_DUEL_OUTOFBOUNDS;
    new (&this->SMSG_DUEL_OUTOFBOUNDS) wrath::SMSG_DUEL_OUTOFBOUNDS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DUEL_INBOUNDS&& obj) {
    opcode = Opcode::SMSG_DUEL_INBOUNDS;
    new (&this->SMSG_DUEL_INBOUNDS) wrath::SMSG_DUEL_INBOUNDS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DUEL_COMPLETE&& obj) {
    opcode = Opcode::SMSG_DUEL_COMPLETE;
    new (&this->SMSG_DUEL_COMPLETE) wrath::SMSG_DUEL_COMPLETE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DUEL_WINNER&& obj) {
    opcode = Opcode::SMSG_DUEL_WINNER;
    new (&this->SMSG_DUEL_WINNER) wrath::SMSG_DUEL_WINNER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOUNTRESULT&& obj) {
    opcode = Opcode::SMSG_MOUNTRESULT;
    new (&this->SMSG_MOUNTRESULT) wrath::SMSG_MOUNTRESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOUNTSPECIAL_ANIM&& obj) {
    opcode = Opcode::SMSG_MOUNTSPECIAL_ANIM;
    new (&this->SMSG_MOUNTSPECIAL_ANIM) wrath::SMSG_MOUNTSPECIAL_ANIM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_TAME_FAILURE&& obj) {
    opcode = Opcode::SMSG_PET_TAME_FAILURE;
    new (&this->SMSG_PET_TAME_FAILURE) wrath::SMSG_PET_TAME_FAILURE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_NAME_INVALID&& obj) {
    opcode = Opcode::SMSG_PET_NAME_INVALID;
    new (&this->SMSG_PET_NAME_INVALID) wrath::SMSG_PET_NAME_INVALID (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_SPELLS&& obj) {
    opcode = Opcode::SMSG_PET_SPELLS;
    new (&this->SMSG_PET_SPELLS) wrath::SMSG_PET_SPELLS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_MODE&& obj) {
    opcode = Opcode::SMSG_PET_MODE;
    new (&this->SMSG_PET_MODE) wrath::SMSG_PET_MODE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GOSSIP_MESSAGE&& obj) {
    opcode = Opcode::SMSG_GOSSIP_MESSAGE;
    new (&this->SMSG_GOSSIP_MESSAGE) wrath::SMSG_GOSSIP_MESSAGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GOSSIP_COMPLETE&& obj) {
    opcode = Opcode::SMSG_GOSSIP_COMPLETE;
    new (&this->SMSG_GOSSIP_COMPLETE) wrath::SMSG_GOSSIP_COMPLETE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_NPC_TEXT_UPDATE&& obj) {
    opcode = Opcode::SMSG_NPC_TEXT_UPDATE;
    new (&this->SMSG_NPC_TEXT_UPDATE) wrath::SMSG_NPC_TEXT_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTGIVER_STATUS&& obj) {
    opcode = Opcode::SMSG_QUESTGIVER_STATUS;
    new (&this->SMSG_QUESTGIVER_STATUS) wrath::SMSG_QUESTGIVER_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTGIVER_QUEST_LIST&& obj) {
    opcode = Opcode::SMSG_QUESTGIVER_QUEST_LIST;
    new (&this->SMSG_QUESTGIVER_QUEST_LIST) wrath::SMSG_QUESTGIVER_QUEST_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTGIVER_QUEST_DETAILS&& obj) {
    opcode = Opcode::SMSG_QUESTGIVER_QUEST_DETAILS;
    new (&this->SMSG_QUESTGIVER_QUEST_DETAILS) wrath::SMSG_QUESTGIVER_QUEST_DETAILS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTGIVER_REQUEST_ITEMS&& obj) {
    opcode = Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS;
    new (&this->SMSG_QUESTGIVER_REQUEST_ITEMS) wrath::SMSG_QUESTGIVER_REQUEST_ITEMS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTGIVER_OFFER_REWARD&& obj) {
    opcode = Opcode::SMSG_QUESTGIVER_OFFER_REWARD;
    new (&this->SMSG_QUESTGIVER_OFFER_REWARD) wrath::SMSG_QUESTGIVER_OFFER_REWARD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTGIVER_QUEST_INVALID&& obj) {
    opcode = Opcode::SMSG_QUESTGIVER_QUEST_INVALID;
    new (&this->SMSG_QUESTGIVER_QUEST_INVALID) wrath::SMSG_QUESTGIVER_QUEST_INVALID (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTGIVER_QUEST_COMPLETE&& obj) {
    opcode = Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE;
    new (&this->SMSG_QUESTGIVER_QUEST_COMPLETE) wrath::SMSG_QUESTGIVER_QUEST_COMPLETE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTGIVER_QUEST_FAILED&& obj) {
    opcode = Opcode::SMSG_QUESTGIVER_QUEST_FAILED;
    new (&this->SMSG_QUESTGIVER_QUEST_FAILED) wrath::SMSG_QUESTGIVER_QUEST_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTLOG_FULL&& obj) {
    opcode = Opcode::SMSG_QUESTLOG_FULL;
    new (&this->SMSG_QUESTLOG_FULL) wrath::SMSG_QUESTLOG_FULL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTUPDATE_FAILED&& obj) {
    opcode = Opcode::SMSG_QUESTUPDATE_FAILED;
    new (&this->SMSG_QUESTUPDATE_FAILED) wrath::SMSG_QUESTUPDATE_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTUPDATE_FAILEDTIMER&& obj) {
    opcode = Opcode::SMSG_QUESTUPDATE_FAILEDTIMER;
    new (&this->SMSG_QUESTUPDATE_FAILEDTIMER) wrath::SMSG_QUESTUPDATE_FAILEDTIMER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTUPDATE_COMPLETE&& obj) {
    opcode = Opcode::SMSG_QUESTUPDATE_COMPLETE;
    new (&this->SMSG_QUESTUPDATE_COMPLETE) wrath::SMSG_QUESTUPDATE_COMPLETE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTUPDATE_ADD_KILL&& obj) {
    opcode = Opcode::SMSG_QUESTUPDATE_ADD_KILL;
    new (&this->SMSG_QUESTUPDATE_ADD_KILL) wrath::SMSG_QUESTUPDATE_ADD_KILL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTUPDATE_ADD_ITEM&& obj) {
    opcode = Opcode::SMSG_QUESTUPDATE_ADD_ITEM;
    new (&this->SMSG_QUESTUPDATE_ADD_ITEM) wrath::SMSG_QUESTUPDATE_ADD_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUEST_CONFIRM_ACCEPT&& obj) {
    opcode = Opcode::SMSG_QUEST_CONFIRM_ACCEPT;
    new (&this->SMSG_QUEST_CONFIRM_ACCEPT) wrath::SMSG_QUEST_CONFIRM_ACCEPT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LIST_INVENTORY&& obj) {
    opcode = Opcode::SMSG_LIST_INVENTORY;
    new (&this->SMSG_LIST_INVENTORY) wrath::SMSG_LIST_INVENTORY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SELL_ITEM&& obj) {
    opcode = Opcode::SMSG_SELL_ITEM;
    new (&this->SMSG_SELL_ITEM) wrath::SMSG_SELL_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BUY_ITEM&& obj) {
    opcode = Opcode::SMSG_BUY_ITEM;
    new (&this->SMSG_BUY_ITEM) wrath::SMSG_BUY_ITEM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BUY_FAILED&& obj) {
    opcode = Opcode::SMSG_BUY_FAILED;
    new (&this->SMSG_BUY_FAILED) wrath::SMSG_BUY_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SHOWTAXINODES&& obj) {
    opcode = Opcode::SMSG_SHOWTAXINODES;
    new (&this->SMSG_SHOWTAXINODES) wrath::SMSG_SHOWTAXINODES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TAXINODE_STATUS&& obj) {
    opcode = Opcode::SMSG_TAXINODE_STATUS;
    new (&this->SMSG_TAXINODE_STATUS) wrath::SMSG_TAXINODE_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ACTIVATETAXIREPLY&& obj) {
    opcode = Opcode::SMSG_ACTIVATETAXIREPLY;
    new (&this->SMSG_ACTIVATETAXIREPLY) wrath::SMSG_ACTIVATETAXIREPLY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_NEW_TAXI_PATH&& obj) {
    opcode = Opcode::SMSG_NEW_TAXI_PATH;
    new (&this->SMSG_NEW_TAXI_PATH) wrath::SMSG_NEW_TAXI_PATH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TRAINER_LIST&& obj) {
    opcode = Opcode::SMSG_TRAINER_LIST;
    new (&this->SMSG_TRAINER_LIST) wrath::SMSG_TRAINER_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TRAINER_BUY_SUCCEEDED&& obj) {
    opcode = Opcode::SMSG_TRAINER_BUY_SUCCEEDED;
    new (&this->SMSG_TRAINER_BUY_SUCCEEDED) wrath::SMSG_TRAINER_BUY_SUCCEEDED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TRAINER_BUY_FAILED&& obj) {
    opcode = Opcode::SMSG_TRAINER_BUY_FAILED;
    new (&this->SMSG_TRAINER_BUY_FAILED) wrath::SMSG_TRAINER_BUY_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SHOW_BANK&& obj) {
    opcode = Opcode::SMSG_SHOW_BANK;
    new (&this->SMSG_SHOW_BANK) wrath::SMSG_SHOW_BANK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BUY_BANK_SLOT_RESULT&& obj) {
    opcode = Opcode::SMSG_BUY_BANK_SLOT_RESULT;
    new (&this->SMSG_BUY_BANK_SLOT_RESULT) wrath::SMSG_BUY_BANK_SLOT_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PETITION_SHOWLIST&& obj) {
    opcode = Opcode::SMSG_PETITION_SHOWLIST;
    new (&this->SMSG_PETITION_SHOWLIST) wrath::SMSG_PETITION_SHOWLIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PETITION_SHOW_SIGNATURES&& obj) {
    opcode = Opcode::SMSG_PETITION_SHOW_SIGNATURES;
    new (&this->SMSG_PETITION_SHOW_SIGNATURES) wrath::SMSG_PETITION_SHOW_SIGNATURES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PETITION_SIGN_RESULTS&& obj) {
    opcode = Opcode::SMSG_PETITION_SIGN_RESULTS;
    new (&this->SMSG_PETITION_SIGN_RESULTS) wrath::SMSG_PETITION_SIGN_RESULTS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_PETITION_DECLINE&& obj) {
    opcode = Opcode::MSG_PETITION_DECLINE;
    new (&this->MSG_PETITION_DECLINE) wrath::MSG_PETITION_DECLINE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TURN_IN_PETITION_RESULTS&& obj) {
    opcode = Opcode::SMSG_TURN_IN_PETITION_RESULTS;
    new (&this->SMSG_TURN_IN_PETITION_RESULTS) wrath::SMSG_TURN_IN_PETITION_RESULTS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PETITION_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_PETITION_QUERY_RESPONSE;
    new (&this->SMSG_PETITION_QUERY_RESPONSE) wrath::SMSG_PETITION_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FISH_NOT_HOOKED&& obj) {
    opcode = Opcode::SMSG_FISH_NOT_HOOKED;
    new (&this->SMSG_FISH_NOT_HOOKED) wrath::SMSG_FISH_NOT_HOOKED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FISH_ESCAPED&& obj) {
    opcode = Opcode::SMSG_FISH_ESCAPED;
    new (&this->SMSG_FISH_ESCAPED) wrath::SMSG_FISH_ESCAPED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_NOTIFICATION&& obj) {
    opcode = Opcode::SMSG_NOTIFICATION;
    new (&this->SMSG_NOTIFICATION) wrath::SMSG_NOTIFICATION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PLAYED_TIME&& obj) {
    opcode = Opcode::SMSG_PLAYED_TIME;
    new (&this->SMSG_PLAYED_TIME) wrath::SMSG_PLAYED_TIME (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUERY_TIME_RESPONSE&& obj) {
    opcode = Opcode::SMSG_QUERY_TIME_RESPONSE;
    new (&this->SMSG_QUERY_TIME_RESPONSE) wrath::SMSG_QUERY_TIME_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOG_XPGAIN&& obj) {
    opcode = Opcode::SMSG_LOG_XPGAIN;
    new (&this->SMSG_LOG_XPGAIN) wrath::SMSG_LOG_XPGAIN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LEVELUP_INFO&& obj) {
    opcode = Opcode::SMSG_LEVELUP_INFO;
    new (&this->SMSG_LEVELUP_INFO) wrath::SMSG_LEVELUP_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MINIMAP_PING_Server&& obj) {
    opcode = Opcode::MSG_MINIMAP_PING;
    new (&this->MSG_MINIMAP_PING) wrath::MSG_MINIMAP_PING_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ENCHANTMENTLOG&& obj) {
    opcode = Opcode::SMSG_ENCHANTMENTLOG;
    new (&this->SMSG_ENCHANTMENTLOG) wrath::SMSG_ENCHANTMENTLOG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_START_MIRROR_TIMER&& obj) {
    opcode = Opcode::SMSG_START_MIRROR_TIMER;
    new (&this->SMSG_START_MIRROR_TIMER) wrath::SMSG_START_MIRROR_TIMER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PAUSE_MIRROR_TIMER&& obj) {
    opcode = Opcode::SMSG_PAUSE_MIRROR_TIMER;
    new (&this->SMSG_PAUSE_MIRROR_TIMER) wrath::SMSG_PAUSE_MIRROR_TIMER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_STOP_MIRROR_TIMER&& obj) {
    opcode = Opcode::SMSG_STOP_MIRROR_TIMER;
    new (&this->SMSG_STOP_MIRROR_TIMER) wrath::SMSG_STOP_MIRROR_TIMER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PONG&& obj) {
    opcode = Opcode::SMSG_PONG;
    new (&this->SMSG_PONG) wrath::SMSG_PONG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CLEAR_COOLDOWN&& obj) {
    opcode = Opcode::SMSG_CLEAR_COOLDOWN;
    new (&this->SMSG_CLEAR_COOLDOWN) wrath::SMSG_CLEAR_COOLDOWN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GAMEOBJECT_PAGETEXT&& obj) {
    opcode = Opcode::SMSG_GAMEOBJECT_PAGETEXT;
    new (&this->SMSG_GAMEOBJECT_PAGETEXT) wrath::SMSG_GAMEOBJECT_PAGETEXT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELL_DELAYED&& obj) {
    opcode = Opcode::SMSG_SPELL_DELAYED;
    new (&this->SMSG_SPELL_DELAYED) wrath::SMSG_SPELL_DELAYED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUEST_POI_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_QUEST_POI_QUERY_RESPONSE;
    new (&this->SMSG_QUEST_POI_QUERY_RESPONSE) wrath::SMSG_QUEST_POI_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ITEM_TIME_UPDATE&& obj) {
    opcode = Opcode::SMSG_ITEM_TIME_UPDATE;
    new (&this->SMSG_ITEM_TIME_UPDATE) wrath::SMSG_ITEM_TIME_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE&& obj) {
    opcode = Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE;
    new (&this->SMSG_ITEM_ENCHANT_TIME_UPDATE) wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AUTH_CHALLENGE&& obj) {
    opcode = Opcode::SMSG_AUTH_CHALLENGE;
    new (&this->SMSG_AUTH_CHALLENGE) wrath::SMSG_AUTH_CHALLENGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AUTH_RESPONSE&& obj) {
    opcode = Opcode::SMSG_AUTH_RESPONSE;
    new (&this->SMSG_AUTH_RESPONSE) wrath::SMSG_AUTH_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_SAVE_GUILD_EMBLEM_Server&& obj) {
    opcode = Opcode::MSG_SAVE_GUILD_EMBLEM;
    new (&this->MSG_SAVE_GUILD_EMBLEM) wrath::MSG_SAVE_GUILD_EMBLEM_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_TABARDVENDOR_ACTIVATE&& obj) {
    opcode = Opcode::MSG_TABARDVENDOR_ACTIVATE;
    new (&this->MSG_TABARDVENDOR_ACTIVATE) wrath::MSG_TABARDVENDOR_ACTIVATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PLAY_SPELL_VISUAL&& obj) {
    opcode = Opcode::SMSG_PLAY_SPELL_VISUAL;
    new (&this->SMSG_PLAY_SPELL_VISUAL) wrath::SMSG_PLAY_SPELL_VISUAL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PARTYKILLLOG&& obj) {
    opcode = Opcode::SMSG_PARTYKILLLOG;
    new (&this->SMSG_PARTYKILLLOG) wrath::SMSG_PARTYKILLLOG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_COMPRESSED_UPDATE_OBJECT&& obj) {
    opcode = Opcode::SMSG_COMPRESSED_UPDATE_OBJECT;
    new (&this->SMSG_COMPRESSED_UPDATE_OBJECT) wrath::SMSG_COMPRESSED_UPDATE_OBJECT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PLAY_SPELL_IMPACT&& obj) {
    opcode = Opcode::SMSG_PLAY_SPELL_IMPACT;
    new (&this->SMSG_PLAY_SPELL_IMPACT) wrath::SMSG_PLAY_SPELL_IMPACT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_EXPLORATION_EXPERIENCE&& obj) {
    opcode = Opcode::SMSG_EXPLORATION_EXPERIENCE;
    new (&this->SMSG_EXPLORATION_EXPERIENCE) wrath::SMSG_EXPLORATION_EXPERIENCE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_RANDOM_ROLL_Server&& obj) {
    opcode = Opcode::MSG_RANDOM_ROLL;
    new (&this->MSG_RANDOM_ROLL) wrath::MSG_RANDOM_ROLL_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG&& obj) {
    opcode = Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG;
    new (&this->SMSG_ENVIRONMENTAL_DAMAGE_LOG) wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_PLAYER_REWARD&& obj) {
    opcode = Opcode::SMSG_LFG_PLAYER_REWARD;
    new (&this->SMSG_LFG_PLAYER_REWARD) wrath::SMSG_LFG_PLAYER_REWARD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_TELEPORT_DENIED&& obj) {
    opcode = Opcode::SMSG_LFG_TELEPORT_DENIED;
    new (&this->SMSG_LFG_TELEPORT_DENIED) wrath::SMSG_LFG_TELEPORT_DENIED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_REMOVED_SPELL&& obj) {
    opcode = Opcode::SMSG_REMOVED_SPELL;
    new (&this->SMSG_REMOVED_SPELL) wrath::SMSG_REMOVED_SPELL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GMTICKET_CREATE&& obj) {
    opcode = Opcode::SMSG_GMTICKET_CREATE;
    new (&this->SMSG_GMTICKET_CREATE) wrath::SMSG_GMTICKET_CREATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GMTICKET_UPDATETEXT&& obj) {
    opcode = Opcode::SMSG_GMTICKET_UPDATETEXT;
    new (&this->SMSG_GMTICKET_UPDATETEXT) wrath::SMSG_GMTICKET_UPDATETEXT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ACCOUNT_DATA_TIMES&& obj) {
    opcode = Opcode::SMSG_ACCOUNT_DATA_TIMES;
    new (&this->SMSG_ACCOUNT_DATA_TIMES) wrath::SMSG_ACCOUNT_DATA_TIMES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_UPDATE_ACCOUNT_DATA&& obj) {
    opcode = Opcode::SMSG_UPDATE_ACCOUNT_DATA;
    new (&this->SMSG_UPDATE_ACCOUNT_DATA) wrath::SMSG_UPDATE_ACCOUNT_DATA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GMTICKET_GETTICKET&& obj) {
    opcode = Opcode::SMSG_GMTICKET_GETTICKET;
    new (&this->SMSG_GMTICKET_GETTICKET) wrath::SMSG_GMTICKET_GETTICKET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT&& obj) {
    opcode = Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT;
    new (&this->SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM&& obj) {
    opcode = Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM;
    new (&this->SMSG_GAMEOBJECT_DESPAWN_ANIM) wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_CORPSE_QUERY_Server&& obj) {
    opcode = Opcode::MSG_CORPSE_QUERY;
    new (&this->MSG_CORPSE_QUERY) wrath::MSG_CORPSE_QUERY_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GMTICKET_DELETETICKET&& obj) {
    opcode = Opcode::SMSG_GMTICKET_DELETETICKET;
    new (&this->SMSG_GMTICKET_DELETETICKET) wrath::SMSG_GMTICKET_DELETETICKET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHAT_WRONG_FACTION&& obj) {
    opcode = Opcode::SMSG_CHAT_WRONG_FACTION;
    new (&this->SMSG_CHAT_WRONG_FACTION) wrath::SMSG_CHAT_WRONG_FACTION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GMTICKET_SYSTEMSTATUS&& obj) {
    opcode = Opcode::SMSG_GMTICKET_SYSTEMSTATUS;
    new (&this->SMSG_GMTICKET_SYSTEMSTATUS) wrath::SMSG_GMTICKET_SYSTEMSTATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUEST_FORCE_REMOVE&& obj) {
    opcode = Opcode::SMSG_QUEST_FORCE_REMOVE;
    new (&this->SMSG_QUEST_FORCE_REMOVE) wrath::SMSG_QUEST_FORCE_REMOVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPIRIT_HEALER_CONFIRM&& obj) {
    opcode = Opcode::SMSG_SPIRIT_HEALER_CONFIRM;
    new (&this->SMSG_SPIRIT_HEALER_CONFIRM) wrath::SMSG_SPIRIT_HEALER_CONFIRM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GOSSIP_POI&& obj) {
    opcode = Opcode::SMSG_GOSSIP_POI;
    new (&this->SMSG_GOSSIP_POI) wrath::SMSG_GOSSIP_POI (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOGIN_VERIFY_WORLD&& obj) {
    opcode = Opcode::SMSG_LOGIN_VERIFY_WORLD;
    new (&this->SMSG_LOGIN_VERIFY_WORLD) wrath::SMSG_LOGIN_VERIFY_WORLD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SEND_MAIL_RESULT&& obj) {
    opcode = Opcode::SMSG_SEND_MAIL_RESULT;
    new (&this->SMSG_SEND_MAIL_RESULT) wrath::SMSG_SEND_MAIL_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MAIL_LIST_RESULT&& obj) {
    opcode = Opcode::SMSG_MAIL_LIST_RESULT;
    new (&this->SMSG_MAIL_LIST_RESULT) wrath::SMSG_MAIL_LIST_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEFIELD_LIST&& obj) {
    opcode = Opcode::SMSG_BATTLEFIELD_LIST;
    new (&this->SMSG_BATTLEFIELD_LIST) wrath::SMSG_BATTLEFIELD_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE;
    new (&this->SMSG_ITEM_TEXT_QUERY_RESPONSE) wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELLLOGMISS&& obj) {
    opcode = Opcode::SMSG_SPELLLOGMISS;
    new (&this->SMSG_SPELLLOGMISS) wrath::SMSG_SPELLLOGMISS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELLLOGEXECUTE&& obj) {
    opcode = Opcode::SMSG_SPELLLOGEXECUTE;
    new (&this->SMSG_SPELLLOGEXECUTE) wrath::SMSG_SPELLLOGEXECUTE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PERIODICAURALOG&& obj) {
    opcode = Opcode::SMSG_PERIODICAURALOG;
    new (&this->SMSG_PERIODICAURALOG) wrath::SMSG_PERIODICAURALOG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELLDAMAGESHIELD&& obj) {
    opcode = Opcode::SMSG_SPELLDAMAGESHIELD;
    new (&this->SMSG_SPELLDAMAGESHIELD) wrath::SMSG_SPELLDAMAGESHIELD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELLNONMELEEDAMAGELOG&& obj) {
    opcode = Opcode::SMSG_SPELLNONMELEEDAMAGELOG;
    new (&this->SMSG_SPELLNONMELEEDAMAGELOG) wrath::SMSG_SPELLNONMELEEDAMAGELOG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_RESURRECT_FAILED&& obj) {
    opcode = Opcode::SMSG_RESURRECT_FAILED;
    new (&this->SMSG_RESURRECT_FAILED) wrath::SMSG_RESURRECT_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ZONE_UNDER_ATTACK&& obj) {
    opcode = Opcode::SMSG_ZONE_UNDER_ATTACK;
    new (&this->SMSG_ZONE_UNDER_ATTACK) wrath::SMSG_ZONE_UNDER_ATTACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_AUCTION_HELLO_Server&& obj) {
    opcode = Opcode::MSG_AUCTION_HELLO;
    new (&this->MSG_AUCTION_HELLO) wrath::MSG_AUCTION_HELLO_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AUCTION_COMMAND_RESULT&& obj) {
    opcode = Opcode::SMSG_AUCTION_COMMAND_RESULT;
    new (&this->SMSG_AUCTION_COMMAND_RESULT) wrath::SMSG_AUCTION_COMMAND_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AUCTION_LIST_RESULT&& obj) {
    opcode = Opcode::SMSG_AUCTION_LIST_RESULT;
    new (&this->SMSG_AUCTION_LIST_RESULT) wrath::SMSG_AUCTION_LIST_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AUCTION_OWNER_LIST_RESULT&& obj) {
    opcode = Opcode::SMSG_AUCTION_OWNER_LIST_RESULT;
    new (&this->SMSG_AUCTION_OWNER_LIST_RESULT) wrath::SMSG_AUCTION_OWNER_LIST_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AUCTION_BIDDER_NOTIFICATION&& obj) {
    opcode = Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION;
    new (&this->SMSG_AUCTION_BIDDER_NOTIFICATION) wrath::SMSG_AUCTION_BIDDER_NOTIFICATION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AUCTION_OWNER_NOTIFICATION&& obj) {
    opcode = Opcode::SMSG_AUCTION_OWNER_NOTIFICATION;
    new (&this->SMSG_AUCTION_OWNER_NOTIFICATION) wrath::SMSG_AUCTION_OWNER_NOTIFICATION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PROCRESIST&& obj) {
    opcode = Opcode::SMSG_PROCRESIST;
    new (&this->SMSG_PROCRESIST) wrath::SMSG_PROCRESIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DISPEL_FAILED&& obj) {
    opcode = Opcode::SMSG_DISPEL_FAILED;
    new (&this->SMSG_DISPEL_FAILED) wrath::SMSG_DISPEL_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELLORDAMAGE_IMMUNE&& obj) {
    opcode = Opcode::SMSG_SPELLORDAMAGE_IMMUNE;
    new (&this->SMSG_SPELLORDAMAGE_IMMUNE) wrath::SMSG_SPELLORDAMAGE_IMMUNE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AUCTION_BIDDER_LIST_RESULT&& obj) {
    opcode = Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT;
    new (&this->SMSG_AUCTION_BIDDER_LIST_RESULT) wrath::SMSG_AUCTION_BIDDER_LIST_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SET_FLAT_SPELL_MODIFIER&& obj) {
    opcode = Opcode::SMSG_SET_FLAT_SPELL_MODIFIER;
    new (&this->SMSG_SET_FLAT_SPELL_MODIFIER) wrath::SMSG_SET_FLAT_SPELL_MODIFIER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SET_PCT_SPELL_MODIFIER&& obj) {
    opcode = Opcode::SMSG_SET_PCT_SPELL_MODIFIER;
    new (&this->SMSG_SET_PCT_SPELL_MODIFIER) wrath::SMSG_SET_PCT_SPELL_MODIFIER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CORPSE_RECLAIM_DELAY&& obj) {
    opcode = Opcode::SMSG_CORPSE_RECLAIM_DELAY;
    new (&this->SMSG_CORPSE_RECLAIM_DELAY) wrath::SMSG_CORPSE_RECLAIM_DELAY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_LIST_STABLED_PETS_Server&& obj) {
    opcode = Opcode::MSG_LIST_STABLED_PETS;
    new (&this->MSG_LIST_STABLED_PETS) wrath::MSG_LIST_STABLED_PETS_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_STABLE_RESULT&& obj) {
    opcode = Opcode::SMSG_STABLE_RESULT;
    new (&this->SMSG_STABLE_RESULT) wrath::SMSG_STABLE_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_QUEST_PUSH_RESULT&& obj) {
    opcode = Opcode::MSG_QUEST_PUSH_RESULT;
    new (&this->MSG_QUEST_PUSH_RESULT) wrath::MSG_QUEST_PUSH_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PLAY_MUSIC&& obj) {
    opcode = Opcode::SMSG_PLAY_MUSIC;
    new (&this->SMSG_PLAY_MUSIC) wrath::SMSG_PLAY_MUSIC (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PLAY_OBJECT_SOUND&& obj) {
    opcode = Opcode::SMSG_PLAY_OBJECT_SOUND;
    new (&this->SMSG_PLAY_OBJECT_SOUND) wrath::SMSG_PLAY_OBJECT_SOUND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELLDISPELLOG&& obj) {
    opcode = Opcode::SMSG_SPELLDISPELLOG;
    new (&this->SMSG_SPELLDISPELLOG) wrath::SMSG_SPELLDISPELLOG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_QUERY_NEXT_MAIL_TIME_Server&& obj) {
    opcode = Opcode::MSG_QUERY_NEXT_MAIL_TIME;
    new (&this->MSG_QUERY_NEXT_MAIL_TIME) wrath::MSG_QUERY_NEXT_MAIL_TIME_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_RECEIVED_MAIL&& obj) {
    opcode = Opcode::SMSG_RECEIVED_MAIL;
    new (&this->SMSG_RECEIVED_MAIL) wrath::SMSG_RECEIVED_MAIL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_RAID_GROUP_ONLY&& obj) {
    opcode = Opcode::SMSG_RAID_GROUP_ONLY;
    new (&this->SMSG_RAID_GROUP_ONLY) wrath::SMSG_RAID_GROUP_ONLY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PVP_CREDIT&& obj) {
    opcode = Opcode::SMSG_PVP_CREDIT;
    new (&this->SMSG_PVP_CREDIT) wrath::SMSG_PVP_CREDIT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AUCTION_REMOVED_NOTIFICATION&& obj) {
    opcode = Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION;
    new (&this->SMSG_AUCTION_REMOVED_NOTIFICATION) wrath::SMSG_AUCTION_REMOVED_NOTIFICATION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SERVER_MESSAGE&& obj) {
    opcode = Opcode::SMSG_SERVER_MESSAGE;
    new (&this->SMSG_SERVER_MESSAGE) wrath::SMSG_SERVER_MESSAGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_OFFER_CONTINUE&& obj) {
    opcode = Opcode::SMSG_LFG_OFFER_CONTINUE;
    new (&this->SMSG_LFG_OFFER_CONTINUE) wrath::SMSG_LFG_OFFER_CONTINUE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SHOW_MAILBOX&& obj) {
    opcode = Opcode::SMSG_SHOW_MAILBOX;
    new (&this->SMSG_SHOW_MAILBOX) wrath::SMSG_SHOW_MAILBOX (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CANCEL_AUTO_REPEAT&& obj) {
    opcode = Opcode::SMSG_CANCEL_AUTO_REPEAT;
    new (&this->SMSG_CANCEL_AUTO_REPEAT) wrath::SMSG_CANCEL_AUTO_REPEAT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_STANDSTATE_UPDATE&& obj) {
    opcode = Opcode::SMSG_STANDSTATE_UPDATE;
    new (&this->SMSG_STANDSTATE_UPDATE) wrath::SMSG_STANDSTATE_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_ALL_PASSED&& obj) {
    opcode = Opcode::SMSG_LOOT_ALL_PASSED;
    new (&this->SMSG_LOOT_ALL_PASSED) wrath::SMSG_LOOT_ALL_PASSED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_ROLL_WON&& obj) {
    opcode = Opcode::SMSG_LOOT_ROLL_WON;
    new (&this->SMSG_LOOT_ROLL_WON) wrath::SMSG_LOOT_ROLL_WON (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_START_ROLL&& obj) {
    opcode = Opcode::SMSG_LOOT_START_ROLL;
    new (&this->SMSG_LOOT_START_ROLL) wrath::SMSG_LOOT_START_ROLL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_ROLL&& obj) {
    opcode = Opcode::SMSG_LOOT_ROLL;
    new (&this->SMSG_LOOT_ROLL) wrath::SMSG_LOOT_ROLL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_MASTER_LIST&& obj) {
    opcode = Opcode::SMSG_LOOT_MASTER_LIST;
    new (&this->SMSG_LOOT_MASTER_LIST) wrath::SMSG_LOOT_MASTER_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SET_FORCED_REACTIONS&& obj) {
    opcode = Opcode::SMSG_SET_FORCED_REACTIONS;
    new (&this->SMSG_SET_FORCED_REACTIONS) wrath::SMSG_SET_FORCED_REACTIONS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELL_FAILED_OTHER&& obj) {
    opcode = Opcode::SMSG_SPELL_FAILED_OTHER;
    new (&this->SMSG_SPELL_FAILED_OTHER) wrath::SMSG_SPELL_FAILED_OTHER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHAT_PLAYER_NOT_FOUND&& obj) {
    opcode = Opcode::SMSG_CHAT_PLAYER_NOT_FOUND;
    new (&this->SMSG_CHAT_PLAYER_NOT_FOUND) wrath::SMSG_CHAT_PLAYER_NOT_FOUND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_TALENT_WIPE_CONFIRM_Server&& obj) {
    opcode = Opcode::MSG_TALENT_WIPE_CONFIRM;
    new (&this->MSG_TALENT_WIPE_CONFIRM) wrath::MSG_TALENT_WIPE_CONFIRM_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SUMMON_REQUEST&& obj) {
    opcode = Opcode::SMSG_SUMMON_REQUEST;
    new (&this->SMSG_SUMMON_REQUEST) wrath::SMSG_SUMMON_REQUEST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MONSTER_MOVE_TRANSPORT&& obj) {
    opcode = Opcode::SMSG_MONSTER_MOVE_TRANSPORT;
    new (&this->SMSG_MONSTER_MOVE_TRANSPORT) wrath::SMSG_MONSTER_MOVE_TRANSPORT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_BROKEN&& obj) {
    opcode = Opcode::SMSG_PET_BROKEN;
    new (&this->SMSG_PET_BROKEN) wrath::SMSG_PET_BROKEN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_FEATHER_FALL_Server&& obj) {
    opcode = Opcode::MSG_MOVE_FEATHER_FALL;
    new (&this->MSG_MOVE_FEATHER_FALL) wrath::MSG_MOVE_FEATHER_FALL_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_WATER_WALK&& obj) {
    opcode = Opcode::MSG_MOVE_WATER_WALK;
    new (&this->MSG_MOVE_WATER_WALK) wrath::MSG_MOVE_WATER_WALK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FEIGN_DEATH_RESISTED&& obj) {
    opcode = Opcode::SMSG_FEIGN_DEATH_RESISTED;
    new (&this->SMSG_FEIGN_DEATH_RESISTED) wrath::SMSG_FEIGN_DEATH_RESISTED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DUEL_COUNTDOWN&& obj) {
    opcode = Opcode::SMSG_DUEL_COUNTDOWN;
    new (&this->SMSG_DUEL_COUNTDOWN) wrath::SMSG_DUEL_COUNTDOWN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AREA_TRIGGER_MESSAGE&& obj) {
    opcode = Opcode::SMSG_AREA_TRIGGER_MESSAGE;
    new (&this->SMSG_AREA_TRIGGER_MESSAGE) wrath::SMSG_AREA_TRIGGER_MESSAGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_ROLE_CHOSEN&& obj) {
    opcode = Opcode::SMSG_LFG_ROLE_CHOSEN;
    new (&this->SMSG_LFG_ROLE_CHOSEN) wrath::SMSG_LFG_ROLE_CHOSEN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PLAYER_SKINNED&& obj) {
    opcode = Opcode::SMSG_PLAYER_SKINNED;
    new (&this->SMSG_PLAYER_SKINNED) wrath::SMSG_PLAYER_SKINNED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DURABILITY_DAMAGE_DEATH&& obj) {
    opcode = Opcode::SMSG_DURABILITY_DAMAGE_DEATH;
    new (&this->SMSG_DURABILITY_DAMAGE_DEATH) wrath::SMSG_DURABILITY_DAMAGE_DEATH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_PETITION_RENAME&& obj) {
    opcode = Opcode::MSG_PETITION_RENAME;
    new (&this->MSG_PETITION_RENAME) wrath::MSG_PETITION_RENAME (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INIT_WORLD_STATES&& obj) {
    opcode = Opcode::SMSG_INIT_WORLD_STATES;
    new (&this->SMSG_INIT_WORLD_STATES) wrath::SMSG_INIT_WORLD_STATES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_UPDATE_WORLD_STATE&& obj) {
    opcode = Opcode::SMSG_UPDATE_WORLD_STATE;
    new (&this->SMSG_UPDATE_WORLD_STATE) wrath::SMSG_UPDATE_WORLD_STATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ITEM_NAME_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE;
    new (&this->SMSG_ITEM_NAME_QUERY_RESPONSE) wrath::SMSG_ITEM_NAME_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_ACTION_FEEDBACK&& obj) {
    opcode = Opcode::SMSG_PET_ACTION_FEEDBACK;
    new (&this->SMSG_PET_ACTION_FEEDBACK) wrath::SMSG_PET_ACTION_FEEDBACK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHAR_RENAME&& obj) {
    opcode = Opcode::SMSG_CHAR_RENAME;
    new (&this->SMSG_CHAR_RENAME) wrath::SMSG_CHAR_RENAME (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INSTANCE_SAVE_CREATED&& obj) {
    opcode = Opcode::SMSG_INSTANCE_SAVE_CREATED;
    new (&this->SMSG_INSTANCE_SAVE_CREATED) wrath::SMSG_INSTANCE_SAVE_CREATED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_RAID_INSTANCE_INFO&& obj) {
    opcode = Opcode::SMSG_RAID_INSTANCE_INFO;
    new (&this->SMSG_RAID_INSTANCE_INFO) wrath::SMSG_RAID_INSTANCE_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PLAY_SOUND&& obj) {
    opcode = Opcode::SMSG_PLAY_SOUND;
    new (&this->SMSG_PLAY_SOUND) wrath::SMSG_PLAY_SOUND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEFIELD_STATUS&& obj) {
    opcode = Opcode::SMSG_BATTLEFIELD_STATUS;
    new (&this->SMSG_BATTLEFIELD_STATUS) wrath::SMSG_BATTLEFIELD_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_INSPECT_HONOR_STATS_Server&& obj) {
    opcode = Opcode::MSG_INSPECT_HONOR_STATS;
    new (&this->MSG_INSPECT_HONOR_STATS) wrath::MSG_INSPECT_HONOR_STATS_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_WALK_SPEED_CHANGE&& obj) {
    opcode = Opcode::SMSG_FORCE_WALK_SPEED_CHANGE;
    new (&this->SMSG_FORCE_WALK_SPEED_CHANGE) wrath::SMSG_FORCE_WALK_SPEED_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE&& obj) {
    opcode = Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
    new (&this->SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_TURN_RATE_CHANGE&& obj) {
    opcode = Opcode::SMSG_FORCE_TURN_RATE_CHANGE;
    new (&this->SMSG_FORCE_TURN_RATE_CHANGE) wrath::SMSG_FORCE_TURN_RATE_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AREA_SPIRIT_HEALER_TIME&& obj) {
    opcode = Opcode::SMSG_AREA_SPIRIT_HEALER_TIME;
    new (&this->SMSG_AREA_SPIRIT_HEALER_TIME) wrath::SMSG_AREA_SPIRIT_HEALER_TIME (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_WARDEN_DATA&& obj) {
    opcode = Opcode::SMSG_WARDEN_DATA;
    new (&this->SMSG_WARDEN_DATA) wrath::SMSG_WARDEN_DATA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GROUP_JOINED_BATTLEGROUND&& obj) {
    opcode = Opcode::SMSG_GROUP_JOINED_BATTLEGROUND;
    new (&this->SMSG_GROUP_JOINED_BATTLEGROUND) wrath::SMSG_GROUP_JOINED_BATTLEGROUND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server&& obj) {
    opcode = Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS;
    new (&this->MSG_BATTLEGROUND_PLAYER_POSITIONS) wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BINDER_CONFIRM&& obj) {
    opcode = Opcode::SMSG_BINDER_CONFIRM;
    new (&this->SMSG_BINDER_CONFIRM) wrath::SMSG_BINDER_CONFIRM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEGROUND_PLAYER_JOINED&& obj) {
    opcode = Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED;
    new (&this->SMSG_BATTLEGROUND_PLAYER_JOINED) wrath::SMSG_BATTLEGROUND_PLAYER_JOINED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEGROUND_PLAYER_LEFT&& obj) {
    opcode = Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT;
    new (&this->SMSG_BATTLEGROUND_PLAYER_LEFT) wrath::SMSG_BATTLEGROUND_PLAYER_LEFT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ADDON_INFO&& obj) {
    opcode = Opcode::SMSG_ADDON_INFO;
    new (&this->SMSG_ADDON_INFO) wrath::SMSG_ADDON_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_UNLEARN_CONFIRM&& obj) {
    opcode = Opcode::SMSG_PET_UNLEARN_CONFIRM;
    new (&this->SMSG_PET_UNLEARN_CONFIRM) wrath::SMSG_PET_UNLEARN_CONFIRM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PARTY_MEMBER_STATS_FULL&& obj) {
    opcode = Opcode::SMSG_PARTY_MEMBER_STATS_FULL;
    new (&this->SMSG_PARTY_MEMBER_STATS_FULL) wrath::SMSG_PARTY_MEMBER_STATS_FULL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_WEATHER&& obj) {
    opcode = Opcode::SMSG_WEATHER;
    new (&this->SMSG_WEATHER) wrath::SMSG_WEATHER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_RAID_INSTANCE_MESSAGE&& obj) {
    opcode = Opcode::SMSG_RAID_INSTANCE_MESSAGE;
    new (&this->SMSG_RAID_INSTANCE_MESSAGE) wrath::SMSG_RAID_INSTANCE_MESSAGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_COMPRESSED_MOVES&& obj) {
    opcode = Opcode::SMSG_COMPRESSED_MOVES;
    new (&this->SMSG_COMPRESSED_MOVES) wrath::SMSG_COMPRESSED_MOVES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHAT_RESTRICTED&& obj) {
    opcode = Opcode::SMSG_CHAT_RESTRICTED;
    new (&this->SMSG_CHAT_RESTRICTED) wrath::SMSG_CHAT_RESTRICTED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_SET_RUN_SPEED&& obj) {
    opcode = Opcode::SMSG_SPLINE_SET_RUN_SPEED;
    new (&this->SMSG_SPLINE_SET_RUN_SPEED) wrath::SMSG_SPLINE_SET_RUN_SPEED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED&& obj) {
    opcode = Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED;
    new (&this->SMSG_SPLINE_SET_RUN_BACK_SPEED) wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_SET_SWIM_SPEED&& obj) {
    opcode = Opcode::SMSG_SPLINE_SET_SWIM_SPEED;
    new (&this->SMSG_SPLINE_SET_SWIM_SPEED) wrath::SMSG_SPLINE_SET_SWIM_SPEED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_SET_WALK_SPEED&& obj) {
    opcode = Opcode::SMSG_SPLINE_SET_WALK_SPEED;
    new (&this->SMSG_SPLINE_SET_WALK_SPEED) wrath::SMSG_SPLINE_SET_WALK_SPEED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED&& obj) {
    opcode = Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED;
    new (&this->SMSG_SPLINE_SET_SWIM_BACK_SPEED) wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_SET_TURN_RATE&& obj) {
    opcode = Opcode::SMSG_SPLINE_SET_TURN_RATE;
    new (&this->SMSG_SPLINE_SET_TURN_RATE) wrath::SMSG_SPLINE_SET_TURN_RATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_UNROOT&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_UNROOT;
    new (&this->SMSG_SPLINE_MOVE_UNROOT) wrath::SMSG_SPLINE_MOVE_UNROOT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_FEATHER_FALL&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL;
    new (&this->SMSG_SPLINE_MOVE_FEATHER_FALL) wrath::SMSG_SPLINE_MOVE_FEATHER_FALL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_NORMAL_FALL&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL;
    new (&this->SMSG_SPLINE_MOVE_NORMAL_FALL) wrath::SMSG_SPLINE_MOVE_NORMAL_FALL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_SET_HOVER&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_SET_HOVER;
    new (&this->SMSG_SPLINE_MOVE_SET_HOVER) wrath::SMSG_SPLINE_MOVE_SET_HOVER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_UNSET_HOVER&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER;
    new (&this->SMSG_SPLINE_MOVE_UNSET_HOVER) wrath::SMSG_SPLINE_MOVE_UNSET_HOVER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_WATER_WALK&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_WATER_WALK;
    new (&this->SMSG_SPLINE_MOVE_WATER_WALK) wrath::SMSG_SPLINE_MOVE_WATER_WALK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_LAND_WALK&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_LAND_WALK;
    new (&this->SMSG_SPLINE_MOVE_LAND_WALK) wrath::SMSG_SPLINE_MOVE_LAND_WALK (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_START_SWIM&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_START_SWIM;
    new (&this->SMSG_SPLINE_MOVE_START_SWIM) wrath::SMSG_SPLINE_MOVE_START_SWIM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_STOP_SWIM&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_STOP_SWIM;
    new (&this->SMSG_SPLINE_MOVE_STOP_SWIM) wrath::SMSG_SPLINE_MOVE_STOP_SWIM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE;
    new (&this->SMSG_SPLINE_MOVE_SET_RUN_MODE) wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE;
    new (&this->SMSG_SPLINE_MOVE_SET_WALK_MODE) wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_TIME_SKIPPED_Server&& obj) {
    opcode = Opcode::MSG_MOVE_TIME_SKIPPED;
    new (&this->MSG_MOVE_TIME_SKIPPED) wrath::MSG_MOVE_TIME_SKIPPED_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_ROOT&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_ROOT;
    new (&this->SMSG_SPLINE_MOVE_ROOT) wrath::SMSG_SPLINE_MOVE_ROOT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INVALIDATE_PLAYER&& obj) {
    opcode = Opcode::SMSG_INVALIDATE_PLAYER;
    new (&this->SMSG_INVALIDATE_PLAYER) wrath::SMSG_INVALIDATE_PLAYER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INSTANCE_RESET&& obj) {
    opcode = Opcode::SMSG_INSTANCE_RESET;
    new (&this->SMSG_INSTANCE_RESET) wrath::SMSG_INSTANCE_RESET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INSTANCE_RESET_FAILED&& obj) {
    opcode = Opcode::SMSG_INSTANCE_RESET_FAILED;
    new (&this->SMSG_INSTANCE_RESET_FAILED) wrath::SMSG_INSTANCE_RESET_FAILED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_UPDATE_LAST_INSTANCE&& obj) {
    opcode = Opcode::SMSG_UPDATE_LAST_INSTANCE;
    new (&this->SMSG_UPDATE_LAST_INSTANCE) wrath::SMSG_UPDATE_LAST_INSTANCE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_RAID_TARGET_UPDATE_Server&& obj) {
    opcode = Opcode::MSG_RAID_TARGET_UPDATE;
    new (&this->MSG_RAID_TARGET_UPDATE) wrath::MSG_RAID_TARGET_UPDATE_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_RAID_READY_CHECK_Server&& obj) {
    opcode = Opcode::MSG_RAID_READY_CHECK;
    new (&this->MSG_RAID_READY_CHECK) wrath::MSG_RAID_READY_CHECK_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_ACTION_SOUND&& obj) {
    opcode = Opcode::SMSG_PET_ACTION_SOUND;
    new (&this->SMSG_PET_ACTION_SOUND) wrath::SMSG_PET_ACTION_SOUND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_DISMISS_SOUND&& obj) {
    opcode = Opcode::SMSG_PET_DISMISS_SOUND;
    new (&this->SMSG_PET_DISMISS_SOUND) wrath::SMSG_PET_DISMISS_SOUND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GM_TICKET_STATUS_UPDATE&& obj) {
    opcode = Opcode::SMSG_GM_TICKET_STATUS_UPDATE;
    new (&this->SMSG_GM_TICKET_STATUS_UPDATE) wrath::SMSG_GM_TICKET_STATUS_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_SET_DUNGEON_DIFFICULTY_Server&& obj) {
    opcode = Opcode::MSG_SET_DUNGEON_DIFFICULTY;
    new (&this->MSG_SET_DUNGEON_DIFFICULTY) wrath::MSG_SET_DUNGEON_DIFFICULTY_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP&& obj) {
    opcode = Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP;
    new (&this->SMSG_UPDATE_INSTANCE_OWNERSHIP) wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHAT_PLAYER_AMBIGUOUS&& obj) {
    opcode = Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS;
    new (&this->SMSG_CHAT_PLAYER_AMBIGUOUS) wrath::SMSG_CHAT_PLAYER_AMBIGUOUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELLINSTAKILLLOG&& obj) {
    opcode = Opcode::SMSG_SPELLINSTAKILLLOG;
    new (&this->SMSG_SPELLINSTAKILLLOG) wrath::SMSG_SPELLINSTAKILLLOG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS&& obj) {
    opcode = Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS;
    new (&this->SMSG_SPELL_UPDATE_CHAIN_TARGETS) wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPELLSTEALLOG&& obj) {
    opcode = Opcode::SMSG_SPELLSTEALLOG;
    new (&this->SMSG_SPELLSTEALLOG) wrath::SMSG_SPELLSTEALLOG (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DEFENSE_MESSAGE&& obj) {
    opcode = Opcode::SMSG_DEFENSE_MESSAGE;
    new (&this->SMSG_DEFENSE_MESSAGE) wrath::SMSG_DEFENSE_MESSAGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INSTANCE_DIFFICULTY&& obj) {
    opcode = Opcode::SMSG_INSTANCE_DIFFICULTY;
    new (&this->SMSG_INSTANCE_DIFFICULTY) wrath::SMSG_INSTANCE_DIFFICULTY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOTD&& obj) {
    opcode = Opcode::SMSG_MOTD;
    new (&this->SMSG_MOTD) wrath::SMSG_MOTD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_SET_CAN_FLY&& obj) {
    opcode = Opcode::SMSG_MOVE_SET_CAN_FLY;
    new (&this->SMSG_MOVE_SET_CAN_FLY) wrath::SMSG_MOVE_SET_CAN_FLY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_UNSET_CAN_FLY&& obj) {
    opcode = Opcode::SMSG_MOVE_UNSET_CAN_FLY;
    new (&this->SMSG_MOVE_UNSET_CAN_FLY) wrath::SMSG_MOVE_UNSET_CAN_FLY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ARENA_TEAM_COMMAND_RESULT&& obj) {
    opcode = Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT;
    new (&this->SMSG_ARENA_TEAM_COMMAND_RESULT) wrath::SMSG_ARENA_TEAM_COMMAND_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE;
    new (&this->SMSG_ARENA_TEAM_QUERY_RESPONSE) wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ARENA_TEAM_ROSTER&& obj) {
    opcode = Opcode::SMSG_ARENA_TEAM_ROSTER;
    new (&this->SMSG_ARENA_TEAM_ROSTER) wrath::SMSG_ARENA_TEAM_ROSTER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ARENA_TEAM_INVITE&& obj) {
    opcode = Opcode::SMSG_ARENA_TEAM_INVITE;
    new (&this->SMSG_ARENA_TEAM_INVITE) wrath::SMSG_ARENA_TEAM_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ARENA_TEAM_EVENT&& obj) {
    opcode = Opcode::SMSG_ARENA_TEAM_EVENT;
    new (&this->SMSG_ARENA_TEAM_EVENT) wrath::SMSG_ARENA_TEAM_EVENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_ASCEND&& obj) {
    opcode = Opcode::MSG_MOVE_START_ASCEND;
    new (&this->MSG_MOVE_START_ASCEND) wrath::MSG_MOVE_START_ASCEND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_STOP_ASCEND&& obj) {
    opcode = Opcode::MSG_MOVE_STOP_ASCEND;
    new (&this->MSG_MOVE_STOP_ASCEND) wrath::MSG_MOVE_STOP_ASCEND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ARENA_TEAM_STATS&& obj) {
    opcode = Opcode::SMSG_ARENA_TEAM_STATS;
    new (&this->SMSG_ARENA_TEAM_STATS) wrath::SMSG_ARENA_TEAM_STATS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_UPDATE_LFG_LIST&& obj) {
    opcode = Opcode::SMSG_UPDATE_LFG_LIST;
    new (&this->SMSG_UPDATE_LFG_LIST) wrath::SMSG_UPDATE_LFG_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_PROPOSAL_UPDATE&& obj) {
    opcode = Opcode::SMSG_LFG_PROPOSAL_UPDATE;
    new (&this->SMSG_LFG_PROPOSAL_UPDATE) wrath::SMSG_LFG_PROPOSAL_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_ROLE_CHECK_UPDATE&& obj) {
    opcode = Opcode::SMSG_LFG_ROLE_CHECK_UPDATE;
    new (&this->SMSG_LFG_ROLE_CHECK_UPDATE) wrath::SMSG_LFG_ROLE_CHECK_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_JOIN_RESULT&& obj) {
    opcode = Opcode::SMSG_LFG_JOIN_RESULT;
    new (&this->SMSG_LFG_JOIN_RESULT) wrath::SMSG_LFG_JOIN_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_QUEUE_STATUS&& obj) {
    opcode = Opcode::SMSG_LFG_QUEUE_STATUS;
    new (&this->SMSG_LFG_QUEUE_STATUS) wrath::SMSG_LFG_QUEUE_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_UPDATE_PLAYER&& obj) {
    opcode = Opcode::SMSG_LFG_UPDATE_PLAYER;
    new (&this->SMSG_LFG_UPDATE_PLAYER) wrath::SMSG_LFG_UPDATE_PLAYER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_UPDATE_PARTY&& obj) {
    opcode = Opcode::SMSG_LFG_UPDATE_PARTY;
    new (&this->SMSG_LFG_UPDATE_PARTY) wrath::SMSG_LFG_UPDATE_PARTY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_UPDATE_SEARCH&& obj) {
    opcode = Opcode::SMSG_LFG_UPDATE_SEARCH;
    new (&this->SMSG_LFG_UPDATE_SEARCH) wrath::SMSG_LFG_UPDATE_SEARCH (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE&& obj) {
    opcode = Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE;
    new (&this->SMSG_LFG_BOOT_PROPOSAL_UPDATE) wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_PLAYER_INFO&& obj) {
    opcode = Opcode::SMSG_LFG_PLAYER_INFO;
    new (&this->SMSG_LFG_PLAYER_INFO) wrath::SMSG_LFG_PLAYER_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_PARTY_INFO&& obj) {
    opcode = Opcode::SMSG_LFG_PARTY_INFO;
    new (&this->SMSG_LFG_PARTY_INFO) wrath::SMSG_LFG_PARTY_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TITLE_EARNED&& obj) {
    opcode = Opcode::SMSG_TITLE_EARNED;
    new (&this->SMSG_TITLE_EARNED) wrath::SMSG_TITLE_EARNED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ARENA_ERROR&& obj) {
    opcode = Opcode::SMSG_ARENA_ERROR;
    new (&this->SMSG_ARENA_ERROR) wrath::SMSG_ARENA_ERROR (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_INSPECT_ARENA_TEAMS_Server&& obj) {
    opcode = Opcode::MSG_INSPECT_ARENA_TEAMS;
    new (&this->MSG_INSPECT_ARENA_TEAMS) wrath::MSG_INSPECT_ARENA_TEAMS_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DEATH_RELEASE_LOC&& obj) {
    opcode = Opcode::SMSG_DEATH_RELEASE_LOC;
    new (&this->SMSG_DEATH_RELEASE_LOC) wrath::SMSG_DEATH_RELEASE_LOC (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCED_DEATH_UPDATE&& obj) {
    opcode = Opcode::SMSG_FORCED_DEATH_UPDATE;
    new (&this->SMSG_FORCED_DEATH_UPDATE) wrath::SMSG_FORCED_DEATH_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server&& obj) {
    opcode = Opcode::MSG_MOVE_SET_FLIGHT_SPEED;
    new (&this->MSG_MOVE_SET_FLIGHT_SPEED) wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED&& obj) {
    opcode = Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED;
    new (&this->MSG_MOVE_SET_FLIGHT_BACK_SPEED) wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE&& obj) {
    opcode = Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE;
    new (&this->SMSG_FORCE_FLIGHT_SPEED_CHANGE) wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE&& obj) {
    opcode = Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE;
    new (&this->SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_SET_FLIGHT_SPEED&& obj) {
    opcode = Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED;
    new (&this->SMSG_SPLINE_SET_FLIGHT_SPEED) wrath::SMSG_SPLINE_SET_FLIGHT_SPEED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED&& obj) {
    opcode = Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED;
    new (&this->SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FLIGHT_SPLINE_SYNC&& obj) {
    opcode = Opcode::SMSG_FLIGHT_SPLINE_SYNC;
    new (&this->SMSG_FLIGHT_SPLINE_SYNC) wrath::SMSG_FLIGHT_SPLINE_SYNC (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_REALM_SPLIT&& obj) {
    opcode = Opcode::SMSG_REALM_SPLIT;
    new (&this->SMSG_REALM_SPLIT) wrath::SMSG_REALM_SPLIT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TIME_SYNC_REQ&& obj) {
    opcode = Opcode::SMSG_TIME_SYNC_REQ;
    new (&this->SMSG_TIME_SYNC_REQ) wrath::SMSG_TIME_SYNC_REQ (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_RESET_FAILED_NOTIFY&& obj) {
    opcode = Opcode::SMSG_RESET_FAILED_NOTIFY;
    new (&this->SMSG_RESET_FAILED_NOTIFY) wrath::SMSG_RESET_FAILED_NOTIFY (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LFG_DISABLED&& obj) {
    opcode = Opcode::SMSG_LFG_DISABLED;
    new (&this->SMSG_LFG_DISABLED) wrath::SMSG_LFG_DISABLED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_UPDATE_COMBO_POINTS&& obj) {
    opcode = Opcode::SMSG_UPDATE_COMBO_POINTS;
    new (&this->SMSG_UPDATE_COMBO_POINTS) wrath::SMSG_UPDATE_COMBO_POINTS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_START_DESCEND&& obj) {
    opcode = Opcode::MSG_MOVE_START_DESCEND;
    new (&this->MSG_MOVE_START_DESCEND) wrath::MSG_MOVE_START_DESCEND (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_DISMOUNT&& obj) {
    opcode = Opcode::SMSG_DISMOUNT;
    new (&this->SMSG_DISMOUNT) wrath::SMSG_DISMOUNT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_UPDATE_CAN_FLY_Server&& obj) {
    opcode = Opcode::MSG_MOVE_UPDATE_CAN_FLY;
    new (&this->MSG_MOVE_UPDATE_CAN_FLY) wrath::MSG_MOVE_UPDATE_CAN_FLY_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_RAID_READY_CHECK_CONFIRM_Server&& obj) {
    opcode = Opcode::MSG_RAID_READY_CHECK_CONFIRM;
    new (&this->MSG_RAID_READY_CHECK_CONFIRM) wrath::MSG_RAID_READY_CHECK_CONFIRM_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GM_MESSAGECHAT&& obj) {
    opcode = Opcode::SMSG_GM_MESSAGECHAT;
    new (&this->SMSG_GM_MESSAGECHAT) wrath::SMSG_GM_MESSAGECHAT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CLEAR_TARGET&& obj) {
    opcode = Opcode::SMSG_CLEAR_TARGET;
    new (&this->SMSG_CLEAR_TARGET) wrath::SMSG_CLEAR_TARGET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD&& obj) {
    opcode = Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD;
    new (&this->SMSG_CROSSED_INEBRIATION_THRESHOLD) wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_KICK_REASON&& obj) {
    opcode = Opcode::SMSG_KICK_REASON;
    new (&this->SMSG_KICK_REASON) wrath::SMSG_KICK_REASON (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_COMPLAIN_RESULT&& obj) {
    opcode = Opcode::SMSG_COMPLAIN_RESULT;
    new (&this->SMSG_COMPLAIN_RESULT) wrath::SMSG_COMPLAIN_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FEATURE_SYSTEM_STATUS&& obj) {
    opcode = Opcode::SMSG_FEATURE_SYSTEM_STATUS;
    new (&this->SMSG_FEATURE_SYSTEM_STATUS) wrath::SMSG_FEATURE_SYSTEM_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHANNEL_MEMBER_COUNT&& obj) {
    opcode = Opcode::SMSG_CHANNEL_MEMBER_COUNT;
    new (&this->SMSG_CHANNEL_MEMBER_COUNT) wrath::SMSG_CHANNEL_MEMBER_COUNT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GUILD_BANK_LIST&& obj) {
    opcode = Opcode::SMSG_GUILD_BANK_LIST;
    new (&this->SMSG_GUILD_BANK_LIST) wrath::SMSG_GUILD_BANK_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_GUILD_BANK_LOG_QUERY_Server&& obj) {
    opcode = Opcode::MSG_GUILD_BANK_LOG_QUERY;
    new (&this->MSG_GUILD_BANK_LOG_QUERY) wrath::MSG_GUILD_BANK_LOG_QUERY_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_USERLIST_ADD&& obj) {
    opcode = Opcode::SMSG_USERLIST_ADD;
    new (&this->SMSG_USERLIST_ADD) wrath::SMSG_USERLIST_ADD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_USERLIST_REMOVE&& obj) {
    opcode = Opcode::SMSG_USERLIST_REMOVE;
    new (&this->SMSG_USERLIST_REMOVE) wrath::SMSG_USERLIST_REMOVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_USERLIST_UPDATE&& obj) {
    opcode = Opcode::SMSG_USERLIST_UPDATE;
    new (&this->SMSG_USERLIST_UPDATE) wrath::SMSG_USERLIST_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_INSPECT_TALENT&& obj) {
    opcode = Opcode::SMSG_INSPECT_TALENT;
    new (&this->SMSG_INSPECT_TALENT) wrath::SMSG_INSPECT_TALENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_LOOT_LIST&& obj) {
    opcode = Opcode::SMSG_LOOT_LIST;
    new (&this->SMSG_LOOT_LIST) wrath::SMSG_LOOT_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_GUILD_PERMISSIONS_Server&& obj) {
    opcode = Opcode::MSG_GUILD_PERMISSIONS;
    new (&this->MSG_GUILD_PERMISSIONS) wrath::MSG_GUILD_PERMISSIONS_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server&& obj) {
    opcode = Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN;
    new (&this->MSG_GUILD_BANK_MONEY_WITHDRAWN) wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_GUILD_EVENT_LOG_QUERY_Server&& obj) {
    opcode = Opcode::MSG_GUILD_EVENT_LOG_QUERY;
    new (&this->MSG_GUILD_EVENT_LOG_QUERY) wrath::MSG_GUILD_EVENT_LOG_QUERY_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MIRRORIMAGE_DATA&& obj) {
    opcode = Opcode::SMSG_MIRRORIMAGE_DATA;
    new (&this->SMSG_MIRRORIMAGE_DATA) wrath::SMSG_MIRRORIMAGE_DATA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_QUERY_GUILD_BANK_TEXT_Server&& obj) {
    opcode = Opcode::MSG_QUERY_GUILD_BANK_TEXT;
    new (&this->MSG_QUERY_GUILD_BANK_TEXT) wrath::MSG_QUERY_GUILD_BANK_TEXT_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_OVERRIDE_LIGHT&& obj) {
    opcode = Opcode::SMSG_OVERRIDE_LIGHT;
    new (&this->SMSG_OVERRIDE_LIGHT) wrath::SMSG_OVERRIDE_LIGHT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TOTEM_CREATED&& obj) {
    opcode = Opcode::SMSG_TOTEM_CREATED;
    new (&this->SMSG_TOTEM_CREATED) wrath::SMSG_TOTEM_CREATED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE&& obj) {
    opcode = Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE;
    new (&this->SMSG_QUESTGIVER_STATUS_MULTIPLE) wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT&& obj) {
    opcode = Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT;
    new (&this->SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SEND_UNLEARN_SPELLS&& obj) {
    opcode = Opcode::SMSG_SEND_UNLEARN_SPELLS;
    new (&this->SMSG_SEND_UNLEARN_SPELLS) wrath::SMSG_SEND_UNLEARN_SPELLS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PROPOSE_LEVEL_GRANT&& obj) {
    opcode = Opcode::SMSG_PROPOSE_LEVEL_GRANT;
    new (&this->SMSG_PROPOSE_LEVEL_GRANT) wrath::SMSG_PROPOSE_LEVEL_GRANT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_REFER_A_FRIEND_FAILURE&& obj) {
    opcode = Opcode::SMSG_REFER_A_FRIEND_FAILURE;
    new (&this->SMSG_REFER_A_FRIEND_FAILURE) wrath::SMSG_REFER_A_FRIEND_FAILURE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_SET_FLYING&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_SET_FLYING;
    new (&this->SMSG_SPLINE_MOVE_SET_FLYING) wrath::SMSG_SPLINE_MOVE_SET_FLYING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_UNSET_FLYING&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING;
    new (&this->SMSG_SPLINE_MOVE_UNSET_FLYING) wrath::SMSG_SPLINE_MOVE_UNSET_FLYING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ENABLE_BARBER_SHOP&& obj) {
    opcode = Opcode::SMSG_ENABLE_BARBER_SHOP;
    new (&this->SMSG_ENABLE_BARBER_SHOP) wrath::SMSG_ENABLE_BARBER_SHOP (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BARBER_SHOP_RESULT&& obj) {
    opcode = Opcode::SMSG_BARBER_SHOP_RESULT;
    new (&this->SMSG_BARBER_SHOP_RESULT) wrath::SMSG_BARBER_SHOP_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_SEND_CALENDAR&& obj) {
    opcode = Opcode::SMSG_CALENDAR_SEND_CALENDAR;
    new (&this->SMSG_CALENDAR_SEND_CALENDAR) wrath::SMSG_CALENDAR_SEND_CALENDAR (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_SEND_EVENT&& obj) {
    opcode = Opcode::SMSG_CALENDAR_SEND_EVENT;
    new (&this->SMSG_CALENDAR_SEND_EVENT) wrath::SMSG_CALENDAR_SEND_EVENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_FILTER_GUILD&& obj) {
    opcode = Opcode::SMSG_CALENDAR_FILTER_GUILD;
    new (&this->SMSG_CALENDAR_FILTER_GUILD) wrath::SMSG_CALENDAR_FILTER_GUILD (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_ARENA_TEAM&& obj) {
    opcode = Opcode::SMSG_CALENDAR_ARENA_TEAM;
    new (&this->SMSG_CALENDAR_ARENA_TEAM) wrath::SMSG_CALENDAR_ARENA_TEAM (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE&& obj) {
    opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE;
    new (&this->SMSG_CALENDAR_EVENT_INVITE) wrath::SMSG_CALENDAR_EVENT_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED&& obj) {
    opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED;
    new (&this->SMSG_CALENDAR_EVENT_INVITE_REMOVED) wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_EVENT_STATUS&& obj) {
    opcode = Opcode::SMSG_CALENDAR_EVENT_STATUS;
    new (&this->SMSG_CALENDAR_EVENT_STATUS) wrath::SMSG_CALENDAR_EVENT_STATUS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_COMMAND_RESULT&& obj) {
    opcode = Opcode::SMSG_CALENDAR_COMMAND_RESULT;
    new (&this->SMSG_CALENDAR_COMMAND_RESULT) wrath::SMSG_CALENDAR_COMMAND_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED&& obj) {
    opcode = Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED;
    new (&this->SMSG_CALENDAR_RAID_LOCKOUT_ADDED) wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED&& obj) {
    opcode = Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED;
    new (&this->SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT&& obj) {
    opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT;
    new (&this->SMSG_CALENDAR_EVENT_INVITE_ALERT) wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT&& obj) {
    opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT;
    new (&this->SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT&& obj) {
    opcode = Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT;
    new (&this->SMSG_CALENDAR_EVENT_REMOVED_ALERT) wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT&& obj) {
    opcode = Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT;
    new (&this->SMSG_CALENDAR_EVENT_UPDATED_ALERT) wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT&& obj) {
    opcode = Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT;
    new (&this->SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::CMSG_CALENDAR_GET_NUM_PENDING&& obj) {
    opcode = Opcode::CMSG_CALENDAR_GET_NUM_PENDING;
    new (&this->CMSG_CALENDAR_GET_NUM_PENDING) wrath::CMSG_CALENDAR_GET_NUM_PENDING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_SEND_NUM_PENDING&& obj) {
    opcode = Opcode::SMSG_CALENDAR_SEND_NUM_PENDING;
    new (&this->SMSG_CALENDAR_SEND_NUM_PENDING) wrath::SMSG_CALENDAR_SEND_NUM_PENDING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_SET_PITCH_RATE_Server&& obj) {
    opcode = Opcode::MSG_MOVE_SET_PITCH_RATE;
    new (&this->MSG_MOVE_SET_PITCH_RATE) wrath::MSG_MOVE_SET_PITCH_RATE_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_FORCE_PITCH_RATE_CHANGE&& obj) {
    opcode = Opcode::SMSG_FORCE_PITCH_RATE_CHANGE;
    new (&this->SMSG_FORCE_PITCH_RATE_CHANGE) wrath::SMSG_FORCE_PITCH_RATE_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES&& obj) {
    opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES;
    new (&this->SMSG_CALENDAR_EVENT_INVITE_NOTES) wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT&& obj) {
    opcode = Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT;
    new (&this->SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE&& obj) {
    opcode = Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE;
    new (&this->SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TRIGGER_MOVIE&& obj) {
    opcode = Opcode::SMSG_TRIGGER_MOVIE;
    new (&this->SMSG_TRIGGER_MOVIE) wrath::SMSG_TRIGGER_MOVIE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ACHIEVEMENT_EARNED&& obj) {
    opcode = Opcode::SMSG_ACHIEVEMENT_EARNED;
    new (&this->SMSG_ACHIEVEMENT_EARNED) wrath::SMSG_ACHIEVEMENT_EARNED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CRITERIA_UPDATE&& obj) {
    opcode = Opcode::SMSG_CRITERIA_UPDATE;
    new (&this->SMSG_CRITERIA_UPDATE) wrath::SMSG_CRITERIA_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS&& obj) {
    opcode = Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS;
    new (&this->SMSG_RESPOND_INSPECT_ACHIEVEMENTS) wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL&& obj) {
    opcode = Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL;
    new (&this->SMSG_QUESTUPDATE_ADD_PVP_KILL) wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED&& obj) {
    opcode = Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED;
    new (&this->SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHAR_CUSTOMIZE&& obj) {
    opcode = Opcode::SMSG_CHAR_CUSTOMIZE;
    new (&this->SMSG_CHAR_CUSTOMIZE) wrath::SMSG_CHAR_CUSTOMIZE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SET_PHASE_SHIFT&& obj) {
    opcode = Opcode::SMSG_SET_PHASE_SHIFT;
    new (&this->SMSG_SET_PHASE_SHIFT) wrath::SMSG_SET_PHASE_SHIFT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ALL_ACHIEVEMENT_DATA&& obj) {
    opcode = Opcode::SMSG_ALL_ACHIEVEMENT_DATA;
    new (&this->SMSG_ALL_ACHIEVEMENT_DATA) wrath::SMSG_ALL_ACHIEVEMENT_DATA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_POWER_UPDATE&& obj) {
    opcode = Opcode::SMSG_POWER_UPDATE;
    new (&this->SMSG_POWER_UPDATE) wrath::SMSG_POWER_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_HIGHEST_THREAT_UPDATE&& obj) {
    opcode = Opcode::SMSG_HIGHEST_THREAT_UPDATE;
    new (&this->SMSG_HIGHEST_THREAT_UPDATE) wrath::SMSG_HIGHEST_THREAT_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_THREAT_UPDATE&& obj) {
    opcode = Opcode::SMSG_THREAT_UPDATE;
    new (&this->SMSG_THREAT_UPDATE) wrath::SMSG_THREAT_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_THREAT_REMOVE&& obj) {
    opcode = Opcode::SMSG_THREAT_REMOVE;
    new (&this->SMSG_THREAT_REMOVE) wrath::SMSG_THREAT_REMOVE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_THREAT_CLEAR&& obj) {
    opcode = Opcode::SMSG_THREAT_CLEAR;
    new (&this->SMSG_THREAT_CLEAR) wrath::SMSG_THREAT_CLEAR (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CONVERT_RUNE&& obj) {
    opcode = Opcode::SMSG_CONVERT_RUNE;
    new (&this->SMSG_CONVERT_RUNE) wrath::SMSG_CONVERT_RUNE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_RESYNC_RUNES&& obj) {
    opcode = Opcode::SMSG_RESYNC_RUNES;
    new (&this->SMSG_RESYNC_RUNES) wrath::SMSG_RESYNC_RUNES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ADD_RUNE_POWER&& obj) {
    opcode = Opcode::SMSG_ADD_RUNE_POWER;
    new (&this->SMSG_ADD_RUNE_POWER) wrath::SMSG_ADD_RUNE_POWER (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AUCTION_LIST_PENDING_SALES&& obj) {
    opcode = Opcode::SMSG_AUCTION_LIST_PENDING_SALES;
    new (&this->SMSG_AUCTION_LIST_PENDING_SALES) wrath::SMSG_AUCTION_LIST_PENDING_SALES (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MODIFY_COOLDOWN&& obj) {
    opcode = Opcode::SMSG_MODIFY_COOLDOWN;
    new (&this->SMSG_MODIFY_COOLDOWN) wrath::SMSG_MODIFY_COOLDOWN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_UPDATE_COMBO_POINTS&& obj) {
    opcode = Opcode::SMSG_PET_UPDATE_COMBO_POINTS;
    new (&this->SMSG_PET_UPDATE_COMBO_POINTS) wrath::SMSG_PET_UPDATE_COMBO_POINTS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PRE_RESURRECT&& obj) {
    opcode = Opcode::SMSG_PRE_RESURRECT;
    new (&this->SMSG_PRE_RESURRECT) wrath::SMSG_PRE_RESURRECT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AURA_UPDATE_ALL&& obj) {
    opcode = Opcode::SMSG_AURA_UPDATE_ALL;
    new (&this->SMSG_AURA_UPDATE_ALL) wrath::SMSG_AURA_UPDATE_ALL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_AURA_UPDATE&& obj) {
    opcode = Opcode::SMSG_AURA_UPDATE;
    new (&this->SMSG_AURA_UPDATE) wrath::SMSG_AURA_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SERVER_FIRST_ACHIEVEMENT&& obj) {
    opcode = Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT;
    new (&this->SMSG_SERVER_FIRST_ACHIEVEMENT) wrath::SMSG_SERVER_FIRST_ACHIEVEMENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_LEARNED_SPELL&& obj) {
    opcode = Opcode::SMSG_PET_LEARNED_SPELL;
    new (&this->SMSG_PET_LEARNED_SPELL) wrath::SMSG_PET_LEARNED_SPELL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_UNLEARNED_SPELL&& obj) {
    opcode = Opcode::SMSG_PET_UNLEARNED_SPELL;
    new (&this->SMSG_PET_UNLEARNED_SPELL) wrath::SMSG_PET_UNLEARNED_SPELL (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA&& obj) {
    opcode = Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA;
    new (&this->SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CRITERIA_DELETED&& obj) {
    opcode = Opcode::SMSG_CRITERIA_DELETED;
    new (&this->SMSG_CRITERIA_DELETED) wrath::SMSG_CRITERIA_DELETED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ACHIEVEMENT_DELETED&& obj) {
    opcode = Opcode::SMSG_ACHIEVEMENT_DELETED;
    new (&this->SMSG_ACHIEVEMENT_DELETED) wrath::SMSG_ACHIEVEMENT_DELETED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEGROUND_INFO_THROTTLED&& obj) {
    opcode = Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED;
    new (&this->SMSG_BATTLEGROUND_INFO_THROTTLED) wrath::SMSG_BATTLEGROUND_INFO_THROTTLED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PLAYER_VEHICLE_DATA&& obj) {
    opcode = Opcode::SMSG_PLAYER_VEHICLE_DATA;
    new (&this->SMSG_PLAYER_VEHICLE_DATA) wrath::SMSG_PLAYER_VEHICLE_DATA (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_PET_GUIDS&& obj) {
    opcode = Opcode::SMSG_PET_GUIDS;
    new (&this->SMSG_PET_GUIDS) wrath::SMSG_PET_GUIDS (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CLIENTCACHE_VERSION&& obj) {
    opcode = Opcode::SMSG_CLIENTCACHE_VERSION;
    new (&this->SMSG_CLIENTCACHE_VERSION) wrath::SMSG_CLIENTCACHE_VERSION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ITEM_REFUND_INFO_RESPONSE&& obj) {
    opcode = Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE;
    new (&this->SMSG_ITEM_REFUND_INFO_RESPONSE) wrath::SMSG_ITEM_REFUND_INFO_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ITEM_REFUND_RESULT&& obj) {
    opcode = Opcode::SMSG_ITEM_REFUND_RESULT;
    new (&this->SMSG_ITEM_REFUND_RESULT) wrath::SMSG_ITEM_REFUND_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE&& obj) {
    opcode = Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE;
    new (&this->SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION&& obj) {
    opcode = Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION;
    new (&this->SMSG_CALENDAR_CLEAR_PENDING_ACTION) wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_EQUIPMENT_SET_LIST&& obj) {
    opcode = Opcode::SMSG_EQUIPMENT_SET_LIST;
    new (&this->SMSG_EQUIPMENT_SET_LIST) wrath::SMSG_EQUIPMENT_SET_LIST (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SET_PROJECTILE_POSITION&& obj) {
    opcode = Opcode::SMSG_SET_PROJECTILE_POSITION;
    new (&this->SMSG_SET_PROJECTILE_POSITION) wrath::SMSG_SET_PROJECTILE_POSITION (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TALENTS_INFO&& obj) {
    opcode = Opcode::SMSG_TALENTS_INFO;
    new (&this->SMSG_TALENTS_INFO) wrath::SMSG_TALENTS_INFO (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ARENA_UNIT_DESTROYED&& obj) {
    opcode = Opcode::SMSG_ARENA_UNIT_DESTROYED;
    new (&this->SMSG_ARENA_UNIT_DESTROYED) wrath::SMSG_ARENA_UNIT_DESTROYED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED&& obj) {
    opcode = Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED;
    new (&this->SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_GRAVITY_DISABLE&& obj) {
    opcode = Opcode::SMSG_MOVE_GRAVITY_DISABLE;
    new (&this->SMSG_MOVE_GRAVITY_DISABLE) wrath::SMSG_MOVE_GRAVITY_DISABLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_GRAVITY_ENABLE&& obj) {
    opcode = Opcode::SMSG_MOVE_GRAVITY_ENABLE;
    new (&this->SMSG_MOVE_GRAVITY_ENABLE) wrath::SMSG_MOVE_GRAVITY_ENABLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_MOVE_GRAVITY_CHNG_Server&& obj) {
    opcode = Opcode::MSG_MOVE_GRAVITY_CHNG;
    new (&this->MSG_MOVE_GRAVITY_CHNG) wrath::MSG_MOVE_GRAVITY_CHNG_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE;
    new (&this->SMSG_SPLINE_MOVE_GRAVITY_DISABLE) wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE&& obj) {
    opcode = Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE;
    new (&this->SMSG_SPLINE_MOVE_GRAVITY_ENABLE) wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_EQUIPMENT_SET_USE_RESULT&& obj) {
    opcode = Opcode::SMSG_EQUIPMENT_SET_USE_RESULT;
    new (&this->SMSG_EQUIPMENT_SET_USE_RESULT) wrath::SMSG_EQUIPMENT_SET_USE_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CHAR_FACTION_CHANGE&& obj) {
    opcode = Opcode::SMSG_CHAR_FACTION_CHANGE;
    new (&this->SMSG_CHAR_FACTION_CHANGE) wrath::SMSG_CHAR_FACTION_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE&& obj) {
    opcode = Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE;
    new (&this->SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_ENTERED&& obj) {
    opcode = Opcode::SMSG_BATTLEFIELD_MGR_ENTERED;
    new (&this->SMSG_BATTLEFIELD_MGR_ENTERED) wrath::SMSG_BATTLEFIELD_MGR_ENTERED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE&& obj) {
    opcode = Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE;
    new (&this->SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE&& obj) {
    opcode = Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE;
    new (&this->SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING&& obj) {
    opcode = Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING;
    new (&this->SMSG_BATTLEFIELD_MGR_EJECT_PENDING) wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_EJECTED&& obj) {
    opcode = Opcode::SMSG_BATTLEFIELD_MGR_EJECTED;
    new (&this->SMSG_BATTLEFIELD_MGR_EJECTED) wrath::SMSG_BATTLEFIELD_MGR_EJECTED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE&& obj) {
    opcode = Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE;
    new (&this->SMSG_BATTLEFIELD_MGR_STATE_CHANGE) wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::MSG_SET_RAID_DIFFICULTY_Server&& obj) {
    opcode = Opcode::MSG_SET_RAID_DIFFICULTY;
    new (&this->MSG_SET_RAID_DIFFICULTY) wrath::MSG_SET_RAID_DIFFICULTY_Server (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TOGGLE_XP_GAIN&& obj) {
    opcode = Opcode::SMSG_TOGGLE_XP_GAIN;
    new (&this->SMSG_TOGGLE_XP_GAIN) wrath::SMSG_TOGGLE_XP_GAIN (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GMRESPONSE_DB_ERROR&& obj) {
    opcode = Opcode::SMSG_GMRESPONSE_DB_ERROR;
    new (&this->SMSG_GMRESPONSE_DB_ERROR) wrath::SMSG_GMRESPONSE_DB_ERROR (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GMRESPONSE_RECEIVED&& obj) {
    opcode = Opcode::SMSG_GMRESPONSE_RECEIVED;
    new (&this->SMSG_GMRESPONSE_RECEIVED) wrath::SMSG_GMRESPONSE_RECEIVED (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_GMRESPONSE_STATUS_UPDATE&& obj) {
    opcode = Opcode::SMSG_GMRESPONSE_STATUS_UPDATE;
    new (&this->SMSG_GMRESPONSE_STATUS_UPDATE) wrath::SMSG_GMRESPONSE_STATUS_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE&& obj) {
    opcode = Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE;
    new (&this->SMSG_WORLD_STATE_UI_TIMER_UPDATE) wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_TALENTS_INVOLUNTARILY_RESET&& obj) {
    opcode = Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET;
    new (&this->SMSG_TALENTS_INVOLUNTARILY_RESET) wrath::SMSG_TALENTS_INVOLUNTARILY_RESET (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE&& obj) {
    opcode = Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE;
    new (&this->SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CORPSE_NOT_IN_INSTANCE&& obj) {
    opcode = Opcode::SMSG_CORPSE_NOT_IN_INSTANCE;
    new (&this->SMSG_CORPSE_NOT_IN_INSTANCE) wrath::SMSG_CORPSE_NOT_IN_INSTANCE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_CAMERA_SHAKE&& obj) {
    opcode = Opcode::SMSG_CAMERA_SHAKE;
    new (&this->SMSG_CAMERA_SHAKE) wrath::SMSG_CAMERA_SHAKE (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_SOCKET_GEMS_RESULT&& obj) {
    opcode = Opcode::SMSG_SOCKET_GEMS_RESULT;
    new (&this->SMSG_SOCKET_GEMS_RESULT) wrath::SMSG_SOCKET_GEMS_RESULT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_REDIRECT_CLIENT&& obj) {
    opcode = Opcode::SMSG_REDIRECT_CLIENT;
    new (&this->SMSG_REDIRECT_CLIENT) wrath::SMSG_REDIRECT_CLIENT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MOVE_SET_COLLISION_HGT&& obj) {
    opcode = Opcode::SMSG_MOVE_SET_COLLISION_HGT;
    new (&this->SMSG_MOVE_SET_COLLISION_HGT) wrath::SMSG_MOVE_SET_COLLISION_HGT (std::move(obj));
}
WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode::ServerOpcode(wrath::SMSG_MULTIPLE_MOVES&& obj) {
    opcode = Opcode::SMSG_MULTIPLE_MOVES;
    new (&this->SMSG_MULTIPLE_MOVES) wrath::SMSG_MULTIPLE_MOVES (std::move(obj));
}

WOW_WORLD_MESSAGES_CPP_EXPORT const char* ServerOpcode::to_string() const {
    if (opcode == Opcode::NONE) {{ return "NONE"; }}
    if (opcode == Opcode::SMSG_CHAR_CREATE) { return "SMSG_CHAR_CREATE"; }
    if (opcode == Opcode::SMSG_CHAR_ENUM) { return "SMSG_CHAR_ENUM"; }
    if (opcode == Opcode::SMSG_CHAR_DELETE) { return "SMSG_CHAR_DELETE"; }
    if (opcode == Opcode::SMSG_NEW_WORLD) { return "SMSG_NEW_WORLD"; }
    if (opcode == Opcode::SMSG_TRANSFER_PENDING) { return "SMSG_TRANSFER_PENDING"; }
    if (opcode == Opcode::SMSG_TRANSFER_ABORTED) { return "SMSG_TRANSFER_ABORTED"; }
    if (opcode == Opcode::SMSG_CHARACTER_LOGIN_FAILED) { return "SMSG_CHARACTER_LOGIN_FAILED"; }
    if (opcode == Opcode::SMSG_LOGIN_SETTIMESPEED) { return "SMSG_LOGIN_SETTIMESPEED"; }
    if (opcode == Opcode::SMSG_LOGOUT_RESPONSE) { return "SMSG_LOGOUT_RESPONSE"; }
    if (opcode == Opcode::SMSG_LOGOUT_COMPLETE) { return "SMSG_LOGOUT_COMPLETE"; }
    if (opcode == Opcode::SMSG_LOGOUT_CANCEL_ACK) { return "SMSG_LOGOUT_CANCEL_ACK"; }
    if (opcode == Opcode::SMSG_NAME_QUERY_RESPONSE) { return "SMSG_NAME_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_PET_NAME_QUERY_RESPONSE) { return "SMSG_PET_NAME_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_GUILD_QUERY_RESPONSE) { return "SMSG_GUILD_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) { return "SMSG_ITEM_QUERY_SINGLE_RESPONSE"; }
    if (opcode == Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) { return "SMSG_PAGE_TEXT_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_QUEST_QUERY_RESPONSE) { return "SMSG_QUEST_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) { return "SMSG_GAMEOBJECT_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_CREATURE_QUERY_RESPONSE) { return "SMSG_CREATURE_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_WHO) { return "SMSG_WHO"; }
    if (opcode == Opcode::SMSG_WHOIS) { return "SMSG_WHOIS"; }
    if (opcode == Opcode::SMSG_CONTACT_LIST) { return "SMSG_CONTACT_LIST"; }
    if (opcode == Opcode::SMSG_FRIEND_STATUS) { return "SMSG_FRIEND_STATUS"; }
    if (opcode == Opcode::SMSG_GROUP_INVITE) { return "SMSG_GROUP_INVITE"; }
    if (opcode == Opcode::SMSG_GROUP_DECLINE) { return "SMSG_GROUP_DECLINE"; }
    if (opcode == Opcode::SMSG_GROUP_UNINVITE) { return "SMSG_GROUP_UNINVITE"; }
    if (opcode == Opcode::SMSG_GROUP_SET_LEADER) { return "SMSG_GROUP_SET_LEADER"; }
    if (opcode == Opcode::SMSG_GROUP_DESTROYED) { return "SMSG_GROUP_DESTROYED"; }
    if (opcode == Opcode::SMSG_GROUP_LIST) { return "SMSG_GROUP_LIST"; }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS) { return "SMSG_PARTY_MEMBER_STATS"; }
    if (opcode == Opcode::SMSG_PARTY_COMMAND_RESULT) { return "SMSG_PARTY_COMMAND_RESULT"; }
    if (opcode == Opcode::SMSG_GUILD_INVITE) { return "SMSG_GUILD_INVITE"; }
    if (opcode == Opcode::SMSG_GUILD_DECLINE) { return "SMSG_GUILD_DECLINE"; }
    if (opcode == Opcode::SMSG_GUILD_INFO) { return "SMSG_GUILD_INFO"; }
    if (opcode == Opcode::SMSG_GUILD_ROSTER) { return "SMSG_GUILD_ROSTER"; }
    if (opcode == Opcode::SMSG_GUILD_EVENT) { return "SMSG_GUILD_EVENT"; }
    if (opcode == Opcode::SMSG_GUILD_COMMAND_RESULT) { return "SMSG_GUILD_COMMAND_RESULT"; }
    if (opcode == Opcode::SMSG_MESSAGECHAT) { return "SMSG_MESSAGECHAT"; }
    if (opcode == Opcode::SMSG_CHANNEL_NOTIFY) { return "SMSG_CHANNEL_NOTIFY"; }
    if (opcode == Opcode::SMSG_CHANNEL_LIST) { return "SMSG_CHANNEL_LIST"; }
    if (opcode == Opcode::SMSG_UPDATE_OBJECT) { return "SMSG_UPDATE_OBJECT"; }
    if (opcode == Opcode::SMSG_DESTROY_OBJECT) { return "SMSG_DESTROY_OBJECT"; }
    if (opcode == Opcode::SMSG_READ_ITEM_OK) { return "SMSG_READ_ITEM_OK"; }
    if (opcode == Opcode::SMSG_READ_ITEM_FAILED) { return "SMSG_READ_ITEM_FAILED"; }
    if (opcode == Opcode::SMSG_ITEM_COOLDOWN) { return "SMSG_ITEM_COOLDOWN"; }
    if (opcode == Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) { return "SMSG_GAMEOBJECT_CUSTOM_ANIM"; }
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) { return "MSG_MOVE_START_FORWARD"; }
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) { return "MSG_MOVE_START_BACKWARD"; }
    if (opcode == Opcode::MSG_MOVE_STOP) { return "MSG_MOVE_STOP"; }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) { return "MSG_MOVE_START_STRAFE_LEFT"; }
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) { return "MSG_MOVE_START_STRAFE_RIGHT"; }
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) { return "MSG_MOVE_STOP_STRAFE"; }
    if (opcode == Opcode::MSG_MOVE_JUMP) { return "MSG_MOVE_JUMP"; }
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) { return "MSG_MOVE_START_TURN_LEFT"; }
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) { return "MSG_MOVE_START_TURN_RIGHT"; }
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) { return "MSG_MOVE_STOP_TURN"; }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) { return "MSG_MOVE_START_PITCH_UP"; }
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) { return "MSG_MOVE_START_PITCH_DOWN"; }
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) { return "MSG_MOVE_STOP_PITCH"; }
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) { return "MSG_MOVE_SET_RUN_MODE"; }
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) { return "MSG_MOVE_SET_WALK_MODE"; }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_CHEAT) { return "MSG_MOVE_TELEPORT_CHEAT_Server"; }
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) { return "MSG_MOVE_TELEPORT_ACK_Server"; }
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) { return "MSG_MOVE_FALL_LAND"; }
    if (opcode == Opcode::MSG_MOVE_START_SWIM) { return "MSG_MOVE_START_SWIM"; }
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) { return "MSG_MOVE_STOP_SWIM"; }
    if (opcode == Opcode::MSG_MOVE_SET_FACING) { return "MSG_MOVE_SET_FACING"; }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) { return "MSG_MOVE_SET_PITCH"; }
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) { return "MSG_MOVE_WORLDPORT_ACK"; }
    if (opcode == Opcode::SMSG_MONSTER_MOVE) { return "SMSG_MONSTER_MOVE"; }
    if (opcode == Opcode::SMSG_MOVE_WATER_WALK) { return "SMSG_MOVE_WATER_WALK"; }
    if (opcode == Opcode::SMSG_MOVE_LAND_WALK) { return "SMSG_MOVE_LAND_WALK"; }
    if (opcode == Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) { return "SMSG_FORCE_RUN_SPEED_CHANGE"; }
    if (opcode == Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) { return "SMSG_FORCE_RUN_BACK_SPEED_CHANGE"; }
    if (opcode == Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) { return "SMSG_FORCE_SWIM_SPEED_CHANGE"; }
    if (opcode == Opcode::SMSG_FORCE_MOVE_ROOT) { return "SMSG_FORCE_MOVE_ROOT"; }
    if (opcode == Opcode::SMSG_FORCE_MOVE_UNROOT) { return "SMSG_FORCE_MOVE_UNROOT"; }
    if (opcode == Opcode::MSG_MOVE_ROOT) { return "MSG_MOVE_ROOT_Server"; }
    if (opcode == Opcode::MSG_MOVE_UNROOT) { return "MSG_MOVE_UNROOT_Server"; }
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) { return "MSG_MOVE_HEARTBEAT"; }
    if (opcode == Opcode::SMSG_MOVE_KNOCK_BACK) { return "SMSG_MOVE_KNOCK_BACK"; }
    if (opcode == Opcode::MSG_MOVE_KNOCK_BACK) { return "MSG_MOVE_KNOCK_BACK_Server"; }
    if (opcode == Opcode::SMSG_MOVE_FEATHER_FALL) { return "SMSG_MOVE_FEATHER_FALL"; }
    if (opcode == Opcode::SMSG_MOVE_NORMAL_FALL) { return "SMSG_MOVE_NORMAL_FALL"; }
    if (opcode == Opcode::SMSG_MOVE_SET_HOVER) { return "SMSG_MOVE_SET_HOVER"; }
    if (opcode == Opcode::SMSG_MOVE_UNSET_HOVER) { return "SMSG_MOVE_UNSET_HOVER"; }
    if (opcode == Opcode::MSG_MOVE_HOVER) { return "MSG_MOVE_HOVER"; }
    if (opcode == Opcode::SMSG_TRIGGER_CINEMATIC) { return "SMSG_TRIGGER_CINEMATIC"; }
    if (opcode == Opcode::SMSG_TUTORIAL_FLAGS) { return "SMSG_TUTORIAL_FLAGS"; }
    if (opcode == Opcode::SMSG_EMOTE) { return "SMSG_EMOTE"; }
    if (opcode == Opcode::SMSG_TEXT_EMOTE) { return "SMSG_TEXT_EMOTE"; }
    if (opcode == Opcode::SMSG_INVENTORY_CHANGE_FAILURE) { return "SMSG_INVENTORY_CHANGE_FAILURE"; }
    if (opcode == Opcode::SMSG_TRADE_STATUS) { return "SMSG_TRADE_STATUS"; }
    if (opcode == Opcode::SMSG_TRADE_STATUS_EXTENDED) { return "SMSG_TRADE_STATUS_EXTENDED"; }
    if (opcode == Opcode::SMSG_INITIALIZE_FACTIONS) { return "SMSG_INITIALIZE_FACTIONS"; }
    if (opcode == Opcode::SMSG_SET_FACTION_VISIBLE) { return "SMSG_SET_FACTION_VISIBLE"; }
    if (opcode == Opcode::SMSG_SET_FACTION_STANDING) { return "SMSG_SET_FACTION_STANDING"; }
    if (opcode == Opcode::SMSG_SET_PROFICIENCY) { return "SMSG_SET_PROFICIENCY"; }
    if (opcode == Opcode::SMSG_ACTION_BUTTONS) { return "SMSG_ACTION_BUTTONS"; }
    if (opcode == Opcode::SMSG_INITIAL_SPELLS) { return "SMSG_INITIAL_SPELLS"; }
    if (opcode == Opcode::SMSG_LEARNED_SPELL) { return "SMSG_LEARNED_SPELL"; }
    if (opcode == Opcode::SMSG_SUPERCEDED_SPELL) { return "SMSG_SUPERCEDED_SPELL"; }
    if (opcode == Opcode::SMSG_CAST_FAILED) { return "SMSG_CAST_FAILED"; }
    if (opcode == Opcode::SMSG_SPELL_START) { return "SMSG_SPELL_START"; }
    if (opcode == Opcode::SMSG_SPELL_GO) { return "SMSG_SPELL_GO"; }
    if (opcode == Opcode::SMSG_SPELL_FAILURE) { return "SMSG_SPELL_FAILURE"; }
    if (opcode == Opcode::SMSG_SPELL_COOLDOWN) { return "SMSG_SPELL_COOLDOWN"; }
    if (opcode == Opcode::SMSG_COOLDOWN_EVENT) { return "SMSG_COOLDOWN_EVENT"; }
    if (opcode == Opcode::SMSG_PET_CAST_FAILED) { return "SMSG_PET_CAST_FAILED"; }
    if (opcode == Opcode::MSG_CHANNEL_START) { return "MSG_CHANNEL_START_Server"; }
    if (opcode == Opcode::MSG_CHANNEL_UPDATE) { return "MSG_CHANNEL_UPDATE_Server"; }
    if (opcode == Opcode::SMSG_AI_REACTION) { return "SMSG_AI_REACTION"; }
    if (opcode == Opcode::SMSG_ATTACKSTART) { return "SMSG_ATTACKSTART"; }
    if (opcode == Opcode::SMSG_ATTACKSTOP) { return "SMSG_ATTACKSTOP"; }
    if (opcode == Opcode::SMSG_ATTACKSWING_NOTINRANGE) { return "SMSG_ATTACKSWING_NOTINRANGE"; }
    if (opcode == Opcode::SMSG_ATTACKSWING_BADFACING) { return "SMSG_ATTACKSWING_BADFACING"; }
    if (opcode == Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) { return "SMSG_INSTANCE_LOCK_WARNING_QUERY"; }
    if (opcode == Opcode::SMSG_ATTACKSWING_DEADTARGET) { return "SMSG_ATTACKSWING_DEADTARGET"; }
    if (opcode == Opcode::SMSG_ATTACKSWING_CANT_ATTACK) { return "SMSG_ATTACKSWING_CANT_ATTACK"; }
    if (opcode == Opcode::SMSG_ATTACKERSTATEUPDATE) { return "SMSG_ATTACKERSTATEUPDATE"; }
    if (opcode == Opcode::SMSG_CANCEL_COMBAT) { return "SMSG_CANCEL_COMBAT"; }
    if (opcode == Opcode::SMSG_SPELLHEALLOG) { return "SMSG_SPELLHEALLOG"; }
    if (opcode == Opcode::SMSG_SPELLENERGIZELOG) { return "SMSG_SPELLENERGIZELOG"; }
    if (opcode == Opcode::SMSG_BREAK_TARGET) { return "SMSG_BREAK_TARGET"; }
    if (opcode == Opcode::SMSG_BINDPOINTUPDATE) { return "SMSG_BINDPOINTUPDATE"; }
    if (opcode == Opcode::SMSG_PLAYERBOUND) { return "SMSG_PLAYERBOUND"; }
    if (opcode == Opcode::SMSG_CLIENT_CONTROL_UPDATE) { return "SMSG_CLIENT_CONTROL_UPDATE"; }
    if (opcode == Opcode::SMSG_RESURRECT_REQUEST) { return "SMSG_RESURRECT_REQUEST"; }
    if (opcode == Opcode::SMSG_LOOT_RESPONSE) { return "SMSG_LOOT_RESPONSE"; }
    if (opcode == Opcode::SMSG_LOOT_RELEASE_RESPONSE) { return "SMSG_LOOT_RELEASE_RESPONSE"; }
    if (opcode == Opcode::SMSG_LOOT_REMOVED) { return "SMSG_LOOT_REMOVED"; }
    if (opcode == Opcode::SMSG_LOOT_MONEY_NOTIFY) { return "SMSG_LOOT_MONEY_NOTIFY"; }
    if (opcode == Opcode::SMSG_LOOT_CLEAR_MONEY) { return "SMSG_LOOT_CLEAR_MONEY"; }
    if (opcode == Opcode::SMSG_ITEM_PUSH_RESULT) { return "SMSG_ITEM_PUSH_RESULT"; }
    if (opcode == Opcode::SMSG_DUEL_REQUESTED) { return "SMSG_DUEL_REQUESTED"; }
    if (opcode == Opcode::SMSG_DUEL_OUTOFBOUNDS) { return "SMSG_DUEL_OUTOFBOUNDS"; }
    if (opcode == Opcode::SMSG_DUEL_INBOUNDS) { return "SMSG_DUEL_INBOUNDS"; }
    if (opcode == Opcode::SMSG_DUEL_COMPLETE) { return "SMSG_DUEL_COMPLETE"; }
    if (opcode == Opcode::SMSG_DUEL_WINNER) { return "SMSG_DUEL_WINNER"; }
    if (opcode == Opcode::SMSG_MOUNTRESULT) { return "SMSG_MOUNTRESULT"; }
    if (opcode == Opcode::SMSG_MOUNTSPECIAL_ANIM) { return "SMSG_MOUNTSPECIAL_ANIM"; }
    if (opcode == Opcode::SMSG_PET_TAME_FAILURE) { return "SMSG_PET_TAME_FAILURE"; }
    if (opcode == Opcode::SMSG_PET_NAME_INVALID) { return "SMSG_PET_NAME_INVALID"; }
    if (opcode == Opcode::SMSG_PET_SPELLS) { return "SMSG_PET_SPELLS"; }
    if (opcode == Opcode::SMSG_PET_MODE) { return "SMSG_PET_MODE"; }
    if (opcode == Opcode::SMSG_GOSSIP_MESSAGE) { return "SMSG_GOSSIP_MESSAGE"; }
    if (opcode == Opcode::SMSG_GOSSIP_COMPLETE) { return "SMSG_GOSSIP_COMPLETE"; }
    if (opcode == Opcode::SMSG_NPC_TEXT_UPDATE) { return "SMSG_NPC_TEXT_UPDATE"; }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS) { return "SMSG_QUESTGIVER_STATUS"; }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_LIST) { return "SMSG_QUESTGIVER_QUEST_LIST"; }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) { return "SMSG_QUESTGIVER_QUEST_DETAILS"; }
    if (opcode == Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) { return "SMSG_QUESTGIVER_REQUEST_ITEMS"; }
    if (opcode == Opcode::SMSG_QUESTGIVER_OFFER_REWARD) { return "SMSG_QUESTGIVER_OFFER_REWARD"; }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_INVALID) { return "SMSG_QUESTGIVER_QUEST_INVALID"; }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) { return "SMSG_QUESTGIVER_QUEST_COMPLETE"; }
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_FAILED) { return "SMSG_QUESTGIVER_QUEST_FAILED"; }
    if (opcode == Opcode::SMSG_QUESTLOG_FULL) { return "SMSG_QUESTLOG_FULL"; }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILED) { return "SMSG_QUESTUPDATE_FAILED"; }
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) { return "SMSG_QUESTUPDATE_FAILEDTIMER"; }
    if (opcode == Opcode::SMSG_QUESTUPDATE_COMPLETE) { return "SMSG_QUESTUPDATE_COMPLETE"; }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_KILL) { return "SMSG_QUESTUPDATE_ADD_KILL"; }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_ITEM) { return "SMSG_QUESTUPDATE_ADD_ITEM"; }
    if (opcode == Opcode::SMSG_QUEST_CONFIRM_ACCEPT) { return "SMSG_QUEST_CONFIRM_ACCEPT"; }
    if (opcode == Opcode::SMSG_LIST_INVENTORY) { return "SMSG_LIST_INVENTORY"; }
    if (opcode == Opcode::SMSG_SELL_ITEM) { return "SMSG_SELL_ITEM"; }
    if (opcode == Opcode::SMSG_BUY_ITEM) { return "SMSG_BUY_ITEM"; }
    if (opcode == Opcode::SMSG_BUY_FAILED) { return "SMSG_BUY_FAILED"; }
    if (opcode == Opcode::SMSG_SHOWTAXINODES) { return "SMSG_SHOWTAXINODES"; }
    if (opcode == Opcode::SMSG_TAXINODE_STATUS) { return "SMSG_TAXINODE_STATUS"; }
    if (opcode == Opcode::SMSG_ACTIVATETAXIREPLY) { return "SMSG_ACTIVATETAXIREPLY"; }
    if (opcode == Opcode::SMSG_NEW_TAXI_PATH) { return "SMSG_NEW_TAXI_PATH"; }
    if (opcode == Opcode::SMSG_TRAINER_LIST) { return "SMSG_TRAINER_LIST"; }
    if (opcode == Opcode::SMSG_TRAINER_BUY_SUCCEEDED) { return "SMSG_TRAINER_BUY_SUCCEEDED"; }
    if (opcode == Opcode::SMSG_TRAINER_BUY_FAILED) { return "SMSG_TRAINER_BUY_FAILED"; }
    if (opcode == Opcode::SMSG_SHOW_BANK) { return "SMSG_SHOW_BANK"; }
    if (opcode == Opcode::SMSG_BUY_BANK_SLOT_RESULT) { return "SMSG_BUY_BANK_SLOT_RESULT"; }
    if (opcode == Opcode::SMSG_PETITION_SHOWLIST) { return "SMSG_PETITION_SHOWLIST"; }
    if (opcode == Opcode::SMSG_PETITION_SHOW_SIGNATURES) { return "SMSG_PETITION_SHOW_SIGNATURES"; }
    if (opcode == Opcode::SMSG_PETITION_SIGN_RESULTS) { return "SMSG_PETITION_SIGN_RESULTS"; }
    if (opcode == Opcode::MSG_PETITION_DECLINE) { return "MSG_PETITION_DECLINE"; }
    if (opcode == Opcode::SMSG_TURN_IN_PETITION_RESULTS) { return "SMSG_TURN_IN_PETITION_RESULTS"; }
    if (opcode == Opcode::SMSG_PETITION_QUERY_RESPONSE) { return "SMSG_PETITION_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_FISH_NOT_HOOKED) { return "SMSG_FISH_NOT_HOOKED"; }
    if (opcode == Opcode::SMSG_FISH_ESCAPED) { return "SMSG_FISH_ESCAPED"; }
    if (opcode == Opcode::SMSG_NOTIFICATION) { return "SMSG_NOTIFICATION"; }
    if (opcode == Opcode::SMSG_PLAYED_TIME) { return "SMSG_PLAYED_TIME"; }
    if (opcode == Opcode::SMSG_QUERY_TIME_RESPONSE) { return "SMSG_QUERY_TIME_RESPONSE"; }
    if (opcode == Opcode::SMSG_LOG_XPGAIN) { return "SMSG_LOG_XPGAIN"; }
    if (opcode == Opcode::SMSG_LEVELUP_INFO) { return "SMSG_LEVELUP_INFO"; }
    if (opcode == Opcode::MSG_MINIMAP_PING) { return "MSG_MINIMAP_PING_Server"; }
    if (opcode == Opcode::SMSG_ENCHANTMENTLOG) { return "SMSG_ENCHANTMENTLOG"; }
    if (opcode == Opcode::SMSG_START_MIRROR_TIMER) { return "SMSG_START_MIRROR_TIMER"; }
    if (opcode == Opcode::SMSG_PAUSE_MIRROR_TIMER) { return "SMSG_PAUSE_MIRROR_TIMER"; }
    if (opcode == Opcode::SMSG_STOP_MIRROR_TIMER) { return "SMSG_STOP_MIRROR_TIMER"; }
    if (opcode == Opcode::SMSG_PONG) { return "SMSG_PONG"; }
    if (opcode == Opcode::SMSG_CLEAR_COOLDOWN) { return "SMSG_CLEAR_COOLDOWN"; }
    if (opcode == Opcode::SMSG_GAMEOBJECT_PAGETEXT) { return "SMSG_GAMEOBJECT_PAGETEXT"; }
    if (opcode == Opcode::SMSG_SPELL_DELAYED) { return "SMSG_SPELL_DELAYED"; }
    if (opcode == Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) { return "SMSG_QUEST_POI_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_ITEM_TIME_UPDATE) { return "SMSG_ITEM_TIME_UPDATE"; }
    if (opcode == Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) { return "SMSG_ITEM_ENCHANT_TIME_UPDATE"; }
    if (opcode == Opcode::SMSG_AUTH_CHALLENGE) { return "SMSG_AUTH_CHALLENGE"; }
    if (opcode == Opcode::SMSG_AUTH_RESPONSE) { return "SMSG_AUTH_RESPONSE"; }
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) { return "MSG_SAVE_GUILD_EMBLEM_Server"; }
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) { return "MSG_TABARDVENDOR_ACTIVATE"; }
    if (opcode == Opcode::SMSG_PLAY_SPELL_VISUAL) { return "SMSG_PLAY_SPELL_VISUAL"; }
    if (opcode == Opcode::SMSG_PARTYKILLLOG) { return "SMSG_PARTYKILLLOG"; }
    if (opcode == Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) { return "SMSG_COMPRESSED_UPDATE_OBJECT"; }
    if (opcode == Opcode::SMSG_PLAY_SPELL_IMPACT) { return "SMSG_PLAY_SPELL_IMPACT"; }
    if (opcode == Opcode::SMSG_EXPLORATION_EXPERIENCE) { return "SMSG_EXPLORATION_EXPERIENCE"; }
    if (opcode == Opcode::MSG_RANDOM_ROLL) { return "MSG_RANDOM_ROLL_Server"; }
    if (opcode == Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) { return "SMSG_ENVIRONMENTAL_DAMAGE_LOG"; }
    if (opcode == Opcode::SMSG_LFG_PLAYER_REWARD) { return "SMSG_LFG_PLAYER_REWARD"; }
    if (opcode == Opcode::SMSG_LFG_TELEPORT_DENIED) { return "SMSG_LFG_TELEPORT_DENIED"; }
    if (opcode == Opcode::SMSG_REMOVED_SPELL) { return "SMSG_REMOVED_SPELL"; }
    if (opcode == Opcode::SMSG_GMTICKET_CREATE) { return "SMSG_GMTICKET_CREATE"; }
    if (opcode == Opcode::SMSG_GMTICKET_UPDATETEXT) { return "SMSG_GMTICKET_UPDATETEXT"; }
    if (opcode == Opcode::SMSG_ACCOUNT_DATA_TIMES) { return "SMSG_ACCOUNT_DATA_TIMES"; }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA) { return "SMSG_UPDATE_ACCOUNT_DATA"; }
    if (opcode == Opcode::SMSG_GMTICKET_GETTICKET) { return "SMSG_GMTICKET_GETTICKET"; }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) { return "SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT"; }
    if (opcode == Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) { return "SMSG_GAMEOBJECT_DESPAWN_ANIM"; }
    if (opcode == Opcode::MSG_CORPSE_QUERY) { return "MSG_CORPSE_QUERY_Server"; }
    if (opcode == Opcode::SMSG_GMTICKET_DELETETICKET) { return "SMSG_GMTICKET_DELETETICKET"; }
    if (opcode == Opcode::SMSG_CHAT_WRONG_FACTION) { return "SMSG_CHAT_WRONG_FACTION"; }
    if (opcode == Opcode::SMSG_GMTICKET_SYSTEMSTATUS) { return "SMSG_GMTICKET_SYSTEMSTATUS"; }
    if (opcode == Opcode::SMSG_QUEST_FORCE_REMOVE) { return "SMSG_QUEST_FORCE_REMOVE"; }
    if (opcode == Opcode::SMSG_SPIRIT_HEALER_CONFIRM) { return "SMSG_SPIRIT_HEALER_CONFIRM"; }
    if (opcode == Opcode::SMSG_GOSSIP_POI) { return "SMSG_GOSSIP_POI"; }
    if (opcode == Opcode::SMSG_LOGIN_VERIFY_WORLD) { return "SMSG_LOGIN_VERIFY_WORLD"; }
    if (opcode == Opcode::SMSG_SEND_MAIL_RESULT) { return "SMSG_SEND_MAIL_RESULT"; }
    if (opcode == Opcode::SMSG_MAIL_LIST_RESULT) { return "SMSG_MAIL_LIST_RESULT"; }
    if (opcode == Opcode::SMSG_BATTLEFIELD_LIST) { return "SMSG_BATTLEFIELD_LIST"; }
    if (opcode == Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) { return "SMSG_ITEM_TEXT_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_SPELLLOGMISS) { return "SMSG_SPELLLOGMISS"; }
    if (opcode == Opcode::SMSG_SPELLLOGEXECUTE) { return "SMSG_SPELLLOGEXECUTE"; }
    if (opcode == Opcode::SMSG_PERIODICAURALOG) { return "SMSG_PERIODICAURALOG"; }
    if (opcode == Opcode::SMSG_SPELLDAMAGESHIELD) { return "SMSG_SPELLDAMAGESHIELD"; }
    if (opcode == Opcode::SMSG_SPELLNONMELEEDAMAGELOG) { return "SMSG_SPELLNONMELEEDAMAGELOG"; }
    if (opcode == Opcode::SMSG_RESURRECT_FAILED) { return "SMSG_RESURRECT_FAILED"; }
    if (opcode == Opcode::SMSG_ZONE_UNDER_ATTACK) { return "SMSG_ZONE_UNDER_ATTACK"; }
    if (opcode == Opcode::MSG_AUCTION_HELLO) { return "MSG_AUCTION_HELLO_Server"; }
    if (opcode == Opcode::SMSG_AUCTION_COMMAND_RESULT) { return "SMSG_AUCTION_COMMAND_RESULT"; }
    if (opcode == Opcode::SMSG_AUCTION_LIST_RESULT) { return "SMSG_AUCTION_LIST_RESULT"; }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) { return "SMSG_AUCTION_OWNER_LIST_RESULT"; }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) { return "SMSG_AUCTION_BIDDER_NOTIFICATION"; }
    if (opcode == Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) { return "SMSG_AUCTION_OWNER_NOTIFICATION"; }
    if (opcode == Opcode::SMSG_PROCRESIST) { return "SMSG_PROCRESIST"; }
    if (opcode == Opcode::SMSG_DISPEL_FAILED) { return "SMSG_DISPEL_FAILED"; }
    if (opcode == Opcode::SMSG_SPELLORDAMAGE_IMMUNE) { return "SMSG_SPELLORDAMAGE_IMMUNE"; }
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) { return "SMSG_AUCTION_BIDDER_LIST_RESULT"; }
    if (opcode == Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) { return "SMSG_SET_FLAT_SPELL_MODIFIER"; }
    if (opcode == Opcode::SMSG_SET_PCT_SPELL_MODIFIER) { return "SMSG_SET_PCT_SPELL_MODIFIER"; }
    if (opcode == Opcode::SMSG_CORPSE_RECLAIM_DELAY) { return "SMSG_CORPSE_RECLAIM_DELAY"; }
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) { return "MSG_LIST_STABLED_PETS_Server"; }
    if (opcode == Opcode::SMSG_STABLE_RESULT) { return "SMSG_STABLE_RESULT"; }
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) { return "MSG_QUEST_PUSH_RESULT"; }
    if (opcode == Opcode::SMSG_PLAY_MUSIC) { return "SMSG_PLAY_MUSIC"; }
    if (opcode == Opcode::SMSG_PLAY_OBJECT_SOUND) { return "SMSG_PLAY_OBJECT_SOUND"; }
    if (opcode == Opcode::SMSG_SPELLDISPELLOG) { return "SMSG_SPELLDISPELLOG"; }
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) { return "MSG_QUERY_NEXT_MAIL_TIME_Server"; }
    if (opcode == Opcode::SMSG_RECEIVED_MAIL) { return "SMSG_RECEIVED_MAIL"; }
    if (opcode == Opcode::SMSG_RAID_GROUP_ONLY) { return "SMSG_RAID_GROUP_ONLY"; }
    if (opcode == Opcode::SMSG_PVP_CREDIT) { return "SMSG_PVP_CREDIT"; }
    if (opcode == Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) { return "SMSG_AUCTION_REMOVED_NOTIFICATION"; }
    if (opcode == Opcode::SMSG_SERVER_MESSAGE) { return "SMSG_SERVER_MESSAGE"; }
    if (opcode == Opcode::SMSG_LFG_OFFER_CONTINUE) { return "SMSG_LFG_OFFER_CONTINUE"; }
    if (opcode == Opcode::SMSG_SHOW_MAILBOX) { return "SMSG_SHOW_MAILBOX"; }
    if (opcode == Opcode::SMSG_CANCEL_AUTO_REPEAT) { return "SMSG_CANCEL_AUTO_REPEAT"; }
    if (opcode == Opcode::SMSG_STANDSTATE_UPDATE) { return "SMSG_STANDSTATE_UPDATE"; }
    if (opcode == Opcode::SMSG_LOOT_ALL_PASSED) { return "SMSG_LOOT_ALL_PASSED"; }
    if (opcode == Opcode::SMSG_LOOT_ROLL_WON) { return "SMSG_LOOT_ROLL_WON"; }
    if (opcode == Opcode::SMSG_LOOT_START_ROLL) { return "SMSG_LOOT_START_ROLL"; }
    if (opcode == Opcode::SMSG_LOOT_ROLL) { return "SMSG_LOOT_ROLL"; }
    if (opcode == Opcode::SMSG_LOOT_MASTER_LIST) { return "SMSG_LOOT_MASTER_LIST"; }
    if (opcode == Opcode::SMSG_SET_FORCED_REACTIONS) { return "SMSG_SET_FORCED_REACTIONS"; }
    if (opcode == Opcode::SMSG_SPELL_FAILED_OTHER) { return "SMSG_SPELL_FAILED_OTHER"; }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) { return "SMSG_CHAT_PLAYER_NOT_FOUND"; }
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) { return "MSG_TALENT_WIPE_CONFIRM_Server"; }
    if (opcode == Opcode::SMSG_SUMMON_REQUEST) { return "SMSG_SUMMON_REQUEST"; }
    if (opcode == Opcode::SMSG_MONSTER_MOVE_TRANSPORT) { return "SMSG_MONSTER_MOVE_TRANSPORT"; }
    if (opcode == Opcode::SMSG_PET_BROKEN) { return "SMSG_PET_BROKEN"; }
    if (opcode == Opcode::MSG_MOVE_FEATHER_FALL) { return "MSG_MOVE_FEATHER_FALL_Server"; }
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) { return "MSG_MOVE_WATER_WALK"; }
    if (opcode == Opcode::SMSG_FEIGN_DEATH_RESISTED) { return "SMSG_FEIGN_DEATH_RESISTED"; }
    if (opcode == Opcode::SMSG_DUEL_COUNTDOWN) { return "SMSG_DUEL_COUNTDOWN"; }
    if (opcode == Opcode::SMSG_AREA_TRIGGER_MESSAGE) { return "SMSG_AREA_TRIGGER_MESSAGE"; }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHOSEN) { return "SMSG_LFG_ROLE_CHOSEN"; }
    if (opcode == Opcode::SMSG_PLAYER_SKINNED) { return "SMSG_PLAYER_SKINNED"; }
    if (opcode == Opcode::SMSG_DURABILITY_DAMAGE_DEATH) { return "SMSG_DURABILITY_DAMAGE_DEATH"; }
    if (opcode == Opcode::MSG_PETITION_RENAME) { return "MSG_PETITION_RENAME"; }
    if (opcode == Opcode::SMSG_INIT_WORLD_STATES) { return "SMSG_INIT_WORLD_STATES"; }
    if (opcode == Opcode::SMSG_UPDATE_WORLD_STATE) { return "SMSG_UPDATE_WORLD_STATE"; }
    if (opcode == Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) { return "SMSG_ITEM_NAME_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_PET_ACTION_FEEDBACK) { return "SMSG_PET_ACTION_FEEDBACK"; }
    if (opcode == Opcode::SMSG_CHAR_RENAME) { return "SMSG_CHAR_RENAME"; }
    if (opcode == Opcode::SMSG_INSTANCE_SAVE_CREATED) { return "SMSG_INSTANCE_SAVE_CREATED"; }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_INFO) { return "SMSG_RAID_INSTANCE_INFO"; }
    if (opcode == Opcode::SMSG_PLAY_SOUND) { return "SMSG_PLAY_SOUND"; }
    if (opcode == Opcode::SMSG_BATTLEFIELD_STATUS) { return "SMSG_BATTLEFIELD_STATUS"; }
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) { return "MSG_INSPECT_HONOR_STATS_Server"; }
    if (opcode == Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) { return "SMSG_FORCE_WALK_SPEED_CHANGE"; }
    if (opcode == Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) { return "SMSG_FORCE_SWIM_BACK_SPEED_CHANGE"; }
    if (opcode == Opcode::SMSG_FORCE_TURN_RATE_CHANGE) { return "SMSG_FORCE_TURN_RATE_CHANGE"; }
    if (opcode == Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) { return "SMSG_AREA_SPIRIT_HEALER_TIME"; }
    if (opcode == Opcode::SMSG_WARDEN_DATA) { return "SMSG_WARDEN_DATA"; }
    if (opcode == Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) { return "SMSG_GROUP_JOINED_BATTLEGROUND"; }
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) { return "MSG_BATTLEGROUND_PLAYER_POSITIONS_Server"; }
    if (opcode == Opcode::SMSG_BINDER_CONFIRM) { return "SMSG_BINDER_CONFIRM"; }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) { return "SMSG_BATTLEGROUND_PLAYER_JOINED"; }
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) { return "SMSG_BATTLEGROUND_PLAYER_LEFT"; }
    if (opcode == Opcode::SMSG_ADDON_INFO) { return "SMSG_ADDON_INFO"; }
    if (opcode == Opcode::SMSG_PET_UNLEARN_CONFIRM) { return "SMSG_PET_UNLEARN_CONFIRM"; }
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS_FULL) { return "SMSG_PARTY_MEMBER_STATS_FULL"; }
    if (opcode == Opcode::SMSG_WEATHER) { return "SMSG_WEATHER"; }
    if (opcode == Opcode::SMSG_RAID_INSTANCE_MESSAGE) { return "SMSG_RAID_INSTANCE_MESSAGE"; }
    if (opcode == Opcode::SMSG_COMPRESSED_MOVES) { return "SMSG_COMPRESSED_MOVES"; }
    if (opcode == Opcode::SMSG_CHAT_RESTRICTED) { return "SMSG_CHAT_RESTRICTED"; }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_SPEED) { return "SMSG_SPLINE_SET_RUN_SPEED"; }
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) { return "SMSG_SPLINE_SET_RUN_BACK_SPEED"; }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_SPEED) { return "SMSG_SPLINE_SET_SWIM_SPEED"; }
    if (opcode == Opcode::SMSG_SPLINE_SET_WALK_SPEED) { return "SMSG_SPLINE_SET_WALK_SPEED"; }
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) { return "SMSG_SPLINE_SET_SWIM_BACK_SPEED"; }
    if (opcode == Opcode::SMSG_SPLINE_SET_TURN_RATE) { return "SMSG_SPLINE_SET_TURN_RATE"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNROOT) { return "SMSG_SPLINE_MOVE_UNROOT"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) { return "SMSG_SPLINE_MOVE_FEATHER_FALL"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) { return "SMSG_SPLINE_MOVE_NORMAL_FALL"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_HOVER) { return "SMSG_SPLINE_MOVE_SET_HOVER"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) { return "SMSG_SPLINE_MOVE_UNSET_HOVER"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_WATER_WALK) { return "SMSG_SPLINE_MOVE_WATER_WALK"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_LAND_WALK) { return "SMSG_SPLINE_MOVE_LAND_WALK"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_START_SWIM) { return "SMSG_SPLINE_MOVE_START_SWIM"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) { return "SMSG_SPLINE_MOVE_STOP_SWIM"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) { return "SMSG_SPLINE_MOVE_SET_RUN_MODE"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) { return "SMSG_SPLINE_MOVE_SET_WALK_MODE"; }
    if (opcode == Opcode::MSG_MOVE_TIME_SKIPPED) { return "MSG_MOVE_TIME_SKIPPED_Server"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_ROOT) { return "SMSG_SPLINE_MOVE_ROOT"; }
    if (opcode == Opcode::SMSG_INVALIDATE_PLAYER) { return "SMSG_INVALIDATE_PLAYER"; }
    if (opcode == Opcode::SMSG_INSTANCE_RESET) { return "SMSG_INSTANCE_RESET"; }
    if (opcode == Opcode::SMSG_INSTANCE_RESET_FAILED) { return "SMSG_INSTANCE_RESET_FAILED"; }
    if (opcode == Opcode::SMSG_UPDATE_LAST_INSTANCE) { return "SMSG_UPDATE_LAST_INSTANCE"; }
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) { return "MSG_RAID_TARGET_UPDATE_Server"; }
    if (opcode == Opcode::MSG_RAID_READY_CHECK) { return "MSG_RAID_READY_CHECK_Server"; }
    if (opcode == Opcode::SMSG_PET_ACTION_SOUND) { return "SMSG_PET_ACTION_SOUND"; }
    if (opcode == Opcode::SMSG_PET_DISMISS_SOUND) { return "SMSG_PET_DISMISS_SOUND"; }
    if (opcode == Opcode::SMSG_GM_TICKET_STATUS_UPDATE) { return "SMSG_GM_TICKET_STATUS_UPDATE"; }
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) { return "MSG_SET_DUNGEON_DIFFICULTY_Server"; }
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) { return "SMSG_UPDATE_INSTANCE_OWNERSHIP"; }
    if (opcode == Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) { return "SMSG_CHAT_PLAYER_AMBIGUOUS"; }
    if (opcode == Opcode::SMSG_SPELLINSTAKILLLOG) { return "SMSG_SPELLINSTAKILLLOG"; }
    if (opcode == Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) { return "SMSG_SPELL_UPDATE_CHAIN_TARGETS"; }
    if (opcode == Opcode::SMSG_SPELLSTEALLOG) { return "SMSG_SPELLSTEALLOG"; }
    if (opcode == Opcode::SMSG_DEFENSE_MESSAGE) { return "SMSG_DEFENSE_MESSAGE"; }
    if (opcode == Opcode::SMSG_INSTANCE_DIFFICULTY) { return "SMSG_INSTANCE_DIFFICULTY"; }
    if (opcode == Opcode::SMSG_MOTD) { return "SMSG_MOTD"; }
    if (opcode == Opcode::SMSG_MOVE_SET_CAN_FLY) { return "SMSG_MOVE_SET_CAN_FLY"; }
    if (opcode == Opcode::SMSG_MOVE_UNSET_CAN_FLY) { return "SMSG_MOVE_UNSET_CAN_FLY"; }
    if (opcode == Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) { return "SMSG_ARENA_TEAM_COMMAND_RESULT"; }
    if (opcode == Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) { return "SMSG_ARENA_TEAM_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_ARENA_TEAM_ROSTER) { return "SMSG_ARENA_TEAM_ROSTER"; }
    if (opcode == Opcode::SMSG_ARENA_TEAM_INVITE) { return "SMSG_ARENA_TEAM_INVITE"; }
    if (opcode == Opcode::SMSG_ARENA_TEAM_EVENT) { return "SMSG_ARENA_TEAM_EVENT"; }
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) { return "MSG_MOVE_START_ASCEND"; }
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) { return "MSG_MOVE_STOP_ASCEND"; }
    if (opcode == Opcode::SMSG_ARENA_TEAM_STATS) { return "SMSG_ARENA_TEAM_STATS"; }
    if (opcode == Opcode::SMSG_UPDATE_LFG_LIST) { return "SMSG_UPDATE_LFG_LIST"; }
    if (opcode == Opcode::SMSG_LFG_PROPOSAL_UPDATE) { return "SMSG_LFG_PROPOSAL_UPDATE"; }
    if (opcode == Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) { return "SMSG_LFG_ROLE_CHECK_UPDATE"; }
    if (opcode == Opcode::SMSG_LFG_JOIN_RESULT) { return "SMSG_LFG_JOIN_RESULT"; }
    if (opcode == Opcode::SMSG_LFG_QUEUE_STATUS) { return "SMSG_LFG_QUEUE_STATUS"; }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PLAYER) { return "SMSG_LFG_UPDATE_PLAYER"; }
    if (opcode == Opcode::SMSG_LFG_UPDATE_PARTY) { return "SMSG_LFG_UPDATE_PARTY"; }
    if (opcode == Opcode::SMSG_LFG_UPDATE_SEARCH) { return "SMSG_LFG_UPDATE_SEARCH"; }
    if (opcode == Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) { return "SMSG_LFG_BOOT_PROPOSAL_UPDATE"; }
    if (opcode == Opcode::SMSG_LFG_PLAYER_INFO) { return "SMSG_LFG_PLAYER_INFO"; }
    if (opcode == Opcode::SMSG_LFG_PARTY_INFO) { return "SMSG_LFG_PARTY_INFO"; }
    if (opcode == Opcode::SMSG_TITLE_EARNED) { return "SMSG_TITLE_EARNED"; }
    if (opcode == Opcode::SMSG_ARENA_ERROR) { return "SMSG_ARENA_ERROR"; }
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) { return "MSG_INSPECT_ARENA_TEAMS_Server"; }
    if (opcode == Opcode::SMSG_DEATH_RELEASE_LOC) { return "SMSG_DEATH_RELEASE_LOC"; }
    if (opcode == Opcode::SMSG_FORCED_DEATH_UPDATE) { return "SMSG_FORCED_DEATH_UPDATE"; }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_SPEED) { return "MSG_MOVE_SET_FLIGHT_SPEED_Server"; }
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) { return "MSG_MOVE_SET_FLIGHT_BACK_SPEED"; }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) { return "SMSG_FORCE_FLIGHT_SPEED_CHANGE"; }
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) { return "SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE"; }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) { return "SMSG_SPLINE_SET_FLIGHT_SPEED"; }
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) { return "SMSG_SPLINE_SET_FLIGHT_BACK_SPEED"; }
    if (opcode == Opcode::SMSG_FLIGHT_SPLINE_SYNC) { return "SMSG_FLIGHT_SPLINE_SYNC"; }
    if (opcode == Opcode::SMSG_REALM_SPLIT) { return "SMSG_REALM_SPLIT"; }
    if (opcode == Opcode::SMSG_TIME_SYNC_REQ) { return "SMSG_TIME_SYNC_REQ"; }
    if (opcode == Opcode::SMSG_RESET_FAILED_NOTIFY) { return "SMSG_RESET_FAILED_NOTIFY"; }
    if (opcode == Opcode::SMSG_LFG_DISABLED) { return "SMSG_LFG_DISABLED"; }
    if (opcode == Opcode::SMSG_UPDATE_COMBO_POINTS) { return "SMSG_UPDATE_COMBO_POINTS"; }
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) { return "MSG_MOVE_START_DESCEND"; }
    if (opcode == Opcode::SMSG_DISMOUNT) { return "SMSG_DISMOUNT"; }
    if (opcode == Opcode::MSG_MOVE_UPDATE_CAN_FLY) { return "MSG_MOVE_UPDATE_CAN_FLY_Server"; }
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) { return "MSG_RAID_READY_CHECK_CONFIRM_Server"; }
    if (opcode == Opcode::SMSG_GM_MESSAGECHAT) { return "SMSG_GM_MESSAGECHAT"; }
    if (opcode == Opcode::SMSG_CLEAR_TARGET) { return "SMSG_CLEAR_TARGET"; }
    if (opcode == Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) { return "SMSG_CROSSED_INEBRIATION_THRESHOLD"; }
    if (opcode == Opcode::SMSG_KICK_REASON) { return "SMSG_KICK_REASON"; }
    if (opcode == Opcode::SMSG_COMPLAIN_RESULT) { return "SMSG_COMPLAIN_RESULT"; }
    if (opcode == Opcode::SMSG_FEATURE_SYSTEM_STATUS) { return "SMSG_FEATURE_SYSTEM_STATUS"; }
    if (opcode == Opcode::SMSG_CHANNEL_MEMBER_COUNT) { return "SMSG_CHANNEL_MEMBER_COUNT"; }
    if (opcode == Opcode::SMSG_GUILD_BANK_LIST) { return "SMSG_GUILD_BANK_LIST"; }
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) { return "MSG_GUILD_BANK_LOG_QUERY_Server"; }
    if (opcode == Opcode::SMSG_USERLIST_ADD) { return "SMSG_USERLIST_ADD"; }
    if (opcode == Opcode::SMSG_USERLIST_REMOVE) { return "SMSG_USERLIST_REMOVE"; }
    if (opcode == Opcode::SMSG_USERLIST_UPDATE) { return "SMSG_USERLIST_UPDATE"; }
    if (opcode == Opcode::SMSG_INSPECT_TALENT) { return "SMSG_INSPECT_TALENT"; }
    if (opcode == Opcode::SMSG_LOOT_LIST) { return "SMSG_LOOT_LIST"; }
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) { return "MSG_GUILD_PERMISSIONS_Server"; }
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) { return "MSG_GUILD_BANK_MONEY_WITHDRAWN_Server"; }
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) { return "MSG_GUILD_EVENT_LOG_QUERY_Server"; }
    if (opcode == Opcode::SMSG_MIRRORIMAGE_DATA) { return "SMSG_MIRRORIMAGE_DATA"; }
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) { return "MSG_QUERY_GUILD_BANK_TEXT_Server"; }
    if (opcode == Opcode::SMSG_OVERRIDE_LIGHT) { return "SMSG_OVERRIDE_LIGHT"; }
    if (opcode == Opcode::SMSG_TOTEM_CREATED) { return "SMSG_TOTEM_CREATED"; }
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) { return "SMSG_QUESTGIVER_STATUS_MULTIPLE"; }
    if (opcode == Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) { return "SMSG_SET_PLAYER_DECLINED_NAMES_RESULT"; }
    if (opcode == Opcode::SMSG_SEND_UNLEARN_SPELLS) { return "SMSG_SEND_UNLEARN_SPELLS"; }
    if (opcode == Opcode::SMSG_PROPOSE_LEVEL_GRANT) { return "SMSG_PROPOSE_LEVEL_GRANT"; }
    if (opcode == Opcode::SMSG_REFER_A_FRIEND_FAILURE) { return "SMSG_REFER_A_FRIEND_FAILURE"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_FLYING) { return "SMSG_SPLINE_MOVE_SET_FLYING"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) { return "SMSG_SPLINE_MOVE_UNSET_FLYING"; }
    if (opcode == Opcode::SMSG_ENABLE_BARBER_SHOP) { return "SMSG_ENABLE_BARBER_SHOP"; }
    if (opcode == Opcode::SMSG_BARBER_SHOP_RESULT) { return "SMSG_BARBER_SHOP_RESULT"; }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_CALENDAR) { return "SMSG_CALENDAR_SEND_CALENDAR"; }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_EVENT) { return "SMSG_CALENDAR_SEND_EVENT"; }
    if (opcode == Opcode::SMSG_CALENDAR_FILTER_GUILD) { return "SMSG_CALENDAR_FILTER_GUILD"; }
    if (opcode == Opcode::SMSG_CALENDAR_ARENA_TEAM) { return "SMSG_CALENDAR_ARENA_TEAM"; }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE) { return "SMSG_CALENDAR_EVENT_INVITE"; }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) { return "SMSG_CALENDAR_EVENT_INVITE_REMOVED"; }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_STATUS) { return "SMSG_CALENDAR_EVENT_STATUS"; }
    if (opcode == Opcode::SMSG_CALENDAR_COMMAND_RESULT) { return "SMSG_CALENDAR_COMMAND_RESULT"; }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) { return "SMSG_CALENDAR_RAID_LOCKOUT_ADDED"; }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) { return "SMSG_CALENDAR_RAID_LOCKOUT_REMOVED"; }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) { return "SMSG_CALENDAR_EVENT_INVITE_ALERT"; }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) { return "SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT"; }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) { return "SMSG_CALENDAR_EVENT_REMOVED_ALERT"; }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) { return "SMSG_CALENDAR_EVENT_UPDATED_ALERT"; }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) { return "SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT"; }
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) { return "CMSG_CALENDAR_GET_NUM_PENDING"; }
    if (opcode == Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) { return "SMSG_CALENDAR_SEND_NUM_PENDING"; }
    if (opcode == Opcode::MSG_MOVE_SET_PITCH_RATE) { return "MSG_MOVE_SET_PITCH_RATE_Server"; }
    if (opcode == Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) { return "SMSG_FORCE_PITCH_RATE_CHANGE"; }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) { return "SMSG_CALENDAR_EVENT_INVITE_NOTES"; }
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) { return "SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT"; }
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) { return "SMSG_UPDATE_ACCOUNT_DATA_COMPLETE"; }
    if (opcode == Opcode::SMSG_TRIGGER_MOVIE) { return "SMSG_TRIGGER_MOVIE"; }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_EARNED) { return "SMSG_ACHIEVEMENT_EARNED"; }
    if (opcode == Opcode::SMSG_CRITERIA_UPDATE) { return "SMSG_CRITERIA_UPDATE"; }
    if (opcode == Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) { return "SMSG_RESPOND_INSPECT_ACHIEVEMENTS"; }
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) { return "SMSG_QUESTUPDATE_ADD_PVP_KILL"; }
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) { return "SMSG_CALENDAR_RAID_LOCKOUT_UPDATED"; }
    if (opcode == Opcode::SMSG_CHAR_CUSTOMIZE) { return "SMSG_CHAR_CUSTOMIZE"; }
    if (opcode == Opcode::SMSG_SET_PHASE_SHIFT) { return "SMSG_SET_PHASE_SHIFT"; }
    if (opcode == Opcode::SMSG_ALL_ACHIEVEMENT_DATA) { return "SMSG_ALL_ACHIEVEMENT_DATA"; }
    if (opcode == Opcode::SMSG_POWER_UPDATE) { return "SMSG_POWER_UPDATE"; }
    if (opcode == Opcode::SMSG_HIGHEST_THREAT_UPDATE) { return "SMSG_HIGHEST_THREAT_UPDATE"; }
    if (opcode == Opcode::SMSG_THREAT_UPDATE) { return "SMSG_THREAT_UPDATE"; }
    if (opcode == Opcode::SMSG_THREAT_REMOVE) { return "SMSG_THREAT_REMOVE"; }
    if (opcode == Opcode::SMSG_THREAT_CLEAR) { return "SMSG_THREAT_CLEAR"; }
    if (opcode == Opcode::SMSG_CONVERT_RUNE) { return "SMSG_CONVERT_RUNE"; }
    if (opcode == Opcode::SMSG_RESYNC_RUNES) { return "SMSG_RESYNC_RUNES"; }
    if (opcode == Opcode::SMSG_ADD_RUNE_POWER) { return "SMSG_ADD_RUNE_POWER"; }
    if (opcode == Opcode::SMSG_AUCTION_LIST_PENDING_SALES) { return "SMSG_AUCTION_LIST_PENDING_SALES"; }
    if (opcode == Opcode::SMSG_MODIFY_COOLDOWN) { return "SMSG_MODIFY_COOLDOWN"; }
    if (opcode == Opcode::SMSG_PET_UPDATE_COMBO_POINTS) { return "SMSG_PET_UPDATE_COMBO_POINTS"; }
    if (opcode == Opcode::SMSG_PRE_RESURRECT) { return "SMSG_PRE_RESURRECT"; }
    if (opcode == Opcode::SMSG_AURA_UPDATE_ALL) { return "SMSG_AURA_UPDATE_ALL"; }
    if (opcode == Opcode::SMSG_AURA_UPDATE) { return "SMSG_AURA_UPDATE"; }
    if (opcode == Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) { return "SMSG_SERVER_FIRST_ACHIEVEMENT"; }
    if (opcode == Opcode::SMSG_PET_LEARNED_SPELL) { return "SMSG_PET_LEARNED_SPELL"; }
    if (opcode == Opcode::SMSG_PET_UNLEARNED_SPELL) { return "SMSG_PET_UNLEARNED_SPELL"; }
    if (opcode == Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) { return "SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA"; }
    if (opcode == Opcode::SMSG_CRITERIA_DELETED) { return "SMSG_CRITERIA_DELETED"; }
    if (opcode == Opcode::SMSG_ACHIEVEMENT_DELETED) { return "SMSG_ACHIEVEMENT_DELETED"; }
    if (opcode == Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) { return "SMSG_BATTLEGROUND_INFO_THROTTLED"; }
    if (opcode == Opcode::SMSG_PLAYER_VEHICLE_DATA) { return "SMSG_PLAYER_VEHICLE_DATA"; }
    if (opcode == Opcode::SMSG_PET_GUIDS) { return "SMSG_PET_GUIDS"; }
    if (opcode == Opcode::SMSG_CLIENTCACHE_VERSION) { return "SMSG_CLIENTCACHE_VERSION"; }
    if (opcode == Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) { return "SMSG_ITEM_REFUND_INFO_RESPONSE"; }
    if (opcode == Opcode::SMSG_ITEM_REFUND_RESULT) { return "SMSG_ITEM_REFUND_RESULT"; }
    if (opcode == Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) { return "SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE"; }
    if (opcode == Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) { return "SMSG_CALENDAR_CLEAR_PENDING_ACTION"; }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_LIST) { return "SMSG_EQUIPMENT_SET_LIST"; }
    if (opcode == Opcode::SMSG_SET_PROJECTILE_POSITION) { return "SMSG_SET_PROJECTILE_POSITION"; }
    if (opcode == Opcode::SMSG_TALENTS_INFO) { return "SMSG_TALENTS_INFO"; }
    if (opcode == Opcode::SMSG_ARENA_UNIT_DESTROYED) { return "SMSG_ARENA_UNIT_DESTROYED"; }
    if (opcode == Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) { return "SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED"; }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_DISABLE) { return "SMSG_MOVE_GRAVITY_DISABLE"; }
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_ENABLE) { return "SMSG_MOVE_GRAVITY_ENABLE"; }
    if (opcode == Opcode::MSG_MOVE_GRAVITY_CHNG) { return "MSG_MOVE_GRAVITY_CHNG_Server"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) { return "SMSG_SPLINE_MOVE_GRAVITY_DISABLE"; }
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) { return "SMSG_SPLINE_MOVE_GRAVITY_ENABLE"; }
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) { return "SMSG_EQUIPMENT_SET_USE_RESULT"; }
    if (opcode == Opcode::SMSG_CHAR_FACTION_CHANGE) { return "SMSG_CHAR_FACTION_CHANGE"; }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) { return "SMSG_BATTLEFIELD_MGR_ENTRY_INVITE"; }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) { return "SMSG_BATTLEFIELD_MGR_ENTERED"; }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) { return "SMSG_BATTLEFIELD_MGR_QUEUE_INVITE"; }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) { return "SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE"; }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) { return "SMSG_BATTLEFIELD_MGR_EJECT_PENDING"; }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) { return "SMSG_BATTLEFIELD_MGR_EJECTED"; }
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) { return "SMSG_BATTLEFIELD_MGR_STATE_CHANGE"; }
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) { return "MSG_SET_RAID_DIFFICULTY_Server"; }
    if (opcode == Opcode::SMSG_TOGGLE_XP_GAIN) { return "SMSG_TOGGLE_XP_GAIN"; }
    if (opcode == Opcode::SMSG_GMRESPONSE_DB_ERROR) { return "SMSG_GMRESPONSE_DB_ERROR"; }
    if (opcode == Opcode::SMSG_GMRESPONSE_RECEIVED) { return "SMSG_GMRESPONSE_RECEIVED"; }
    if (opcode == Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) { return "SMSG_GMRESPONSE_STATUS_UPDATE"; }
    if (opcode == Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) { return "SMSG_WORLD_STATE_UI_TIMER_UPDATE"; }
    if (opcode == Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) { return "SMSG_TALENTS_INVOLUNTARILY_RESET"; }
    if (opcode == Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) { return "SMSG_QUERY_QUESTS_COMPLETED_RESPONSE"; }
    if (opcode == Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) { return "SMSG_CORPSE_NOT_IN_INSTANCE"; }
    if (opcode == Opcode::SMSG_CAMERA_SHAKE) { return "SMSG_CAMERA_SHAKE"; }
    if (opcode == Opcode::SMSG_SOCKET_GEMS_RESULT) { return "SMSG_SOCKET_GEMS_RESULT"; }
    if (opcode == Opcode::SMSG_REDIRECT_CLIENT) { return "SMSG_REDIRECT_CLIENT"; }
    if (opcode == Opcode::SMSG_MOVE_SET_COLLISION_HGT) { return "SMSG_MOVE_SET_COLLISION_HGT"; }
    if (opcode == Opcode::SMSG_MULTIPLE_MOVES) { return "SMSG_MULTIPLE_MOVES"; }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_CREATE* ServerOpcode::get_if<SMSG_CHAR_CREATE>() {
    if (opcode == Opcode::SMSG_CHAR_CREATE) {
        return &SMSG_CHAR_CREATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_CREATE& ServerOpcode::get<SMSG_CHAR_CREATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHAR_CREATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_ENUM* ServerOpcode::get_if<SMSG_CHAR_ENUM>() {
    if (opcode == Opcode::SMSG_CHAR_ENUM) {
        return &SMSG_CHAR_ENUM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_ENUM& ServerOpcode::get<SMSG_CHAR_ENUM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHAR_ENUM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_DELETE* ServerOpcode::get_if<SMSG_CHAR_DELETE>() {
    if (opcode == Opcode::SMSG_CHAR_DELETE) {
        return &SMSG_CHAR_DELETE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_DELETE& ServerOpcode::get<SMSG_CHAR_DELETE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHAR_DELETE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NEW_WORLD* ServerOpcode::get_if<SMSG_NEW_WORLD>() {
    if (opcode == Opcode::SMSG_NEW_WORLD) {
        return &SMSG_NEW_WORLD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NEW_WORLD& ServerOpcode::get<SMSG_NEW_WORLD>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_NEW_WORLD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRANSFER_PENDING* ServerOpcode::get_if<SMSG_TRANSFER_PENDING>() {
    if (opcode == Opcode::SMSG_TRANSFER_PENDING) {
        return &SMSG_TRANSFER_PENDING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRANSFER_PENDING& ServerOpcode::get<SMSG_TRANSFER_PENDING>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TRANSFER_PENDING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRANSFER_ABORTED* ServerOpcode::get_if<SMSG_TRANSFER_ABORTED>() {
    if (opcode == Opcode::SMSG_TRANSFER_ABORTED) {
        return &SMSG_TRANSFER_ABORTED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRANSFER_ABORTED& ServerOpcode::get<SMSG_TRANSFER_ABORTED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TRANSFER_ABORTED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHARACTER_LOGIN_FAILED* ServerOpcode::get_if<SMSG_CHARACTER_LOGIN_FAILED>() {
    if (opcode == Opcode::SMSG_CHARACTER_LOGIN_FAILED) {
        return &SMSG_CHARACTER_LOGIN_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHARACTER_LOGIN_FAILED& ServerOpcode::get<SMSG_CHARACTER_LOGIN_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHARACTER_LOGIN_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGIN_SETTIMESPEED* ServerOpcode::get_if<SMSG_LOGIN_SETTIMESPEED>() {
    if (opcode == Opcode::SMSG_LOGIN_SETTIMESPEED) {
        return &SMSG_LOGIN_SETTIMESPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGIN_SETTIMESPEED& ServerOpcode::get<SMSG_LOGIN_SETTIMESPEED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOGIN_SETTIMESPEED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_RESPONSE* ServerOpcode::get_if<SMSG_LOGOUT_RESPONSE>() {
    if (opcode == Opcode::SMSG_LOGOUT_RESPONSE) {
        return &SMSG_LOGOUT_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_RESPONSE& ServerOpcode::get<SMSG_LOGOUT_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOGOUT_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_COMPLETE* ServerOpcode::get_if<SMSG_LOGOUT_COMPLETE>() {
    if (opcode == Opcode::SMSG_LOGOUT_COMPLETE) {
        return &SMSG_LOGOUT_COMPLETE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_COMPLETE& ServerOpcode::get<SMSG_LOGOUT_COMPLETE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOGOUT_COMPLETE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_CANCEL_ACK* ServerOpcode::get_if<SMSG_LOGOUT_CANCEL_ACK>() {
    if (opcode == Opcode::SMSG_LOGOUT_CANCEL_ACK) {
        return &SMSG_LOGOUT_CANCEL_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGOUT_CANCEL_ACK& ServerOpcode::get<SMSG_LOGOUT_CANCEL_ACK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOGOUT_CANCEL_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NAME_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_NAME_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_NAME_QUERY_RESPONSE) {
        return &SMSG_NAME_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NAME_QUERY_RESPONSE& ServerOpcode::get<SMSG_NAME_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_NAME_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_NAME_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_PET_NAME_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_PET_NAME_QUERY_RESPONSE) {
        return &SMSG_PET_NAME_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_NAME_QUERY_RESPONSE& ServerOpcode::get<SMSG_PET_NAME_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_NAME_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_GUILD_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_GUILD_QUERY_RESPONSE) {
        return &SMSG_GUILD_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_QUERY_RESPONSE& ServerOpcode::get<SMSG_GUILD_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GUILD_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE* ServerOpcode::get_if<SMSG_ITEM_QUERY_SINGLE_RESPONSE>() {
    if (opcode == Opcode::SMSG_ITEM_QUERY_SINGLE_RESPONSE) {
        return &SMSG_ITEM_QUERY_SINGLE_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE& ServerOpcode::get<SMSG_ITEM_QUERY_SINGLE_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ITEM_QUERY_SINGLE_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_PAGE_TEXT_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_PAGE_TEXT_QUERY_RESPONSE) {
        return &SMSG_PAGE_TEXT_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE& ServerOpcode::get<SMSG_PAGE_TEXT_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PAGE_TEXT_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_QUEST_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_QUEST_QUERY_RESPONSE) {
        return &SMSG_QUEST_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_QUERY_RESPONSE& ServerOpcode::get<SMSG_QUEST_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUEST_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_GAMEOBJECT_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_GAMEOBJECT_QUERY_RESPONSE) {
        return &SMSG_GAMEOBJECT_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE& ServerOpcode::get<SMSG_GAMEOBJECT_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GAMEOBJECT_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CREATURE_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_CREATURE_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_CREATURE_QUERY_RESPONSE) {
        return &SMSG_CREATURE_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CREATURE_QUERY_RESPONSE& ServerOpcode::get<SMSG_CREATURE_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CREATURE_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WHO* ServerOpcode::get_if<SMSG_WHO>() {
    if (opcode == Opcode::SMSG_WHO) {
        return &SMSG_WHO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WHO& ServerOpcode::get<SMSG_WHO>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_WHO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WHOIS* ServerOpcode::get_if<SMSG_WHOIS>() {
    if (opcode == Opcode::SMSG_WHOIS) {
        return &SMSG_WHOIS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WHOIS& ServerOpcode::get<SMSG_WHOIS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_WHOIS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CONTACT_LIST* ServerOpcode::get_if<SMSG_CONTACT_LIST>() {
    if (opcode == Opcode::SMSG_CONTACT_LIST) {
        return &SMSG_CONTACT_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CONTACT_LIST& ServerOpcode::get<SMSG_CONTACT_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CONTACT_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FRIEND_STATUS* ServerOpcode::get_if<SMSG_FRIEND_STATUS>() {
    if (opcode == Opcode::SMSG_FRIEND_STATUS) {
        return &SMSG_FRIEND_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FRIEND_STATUS& ServerOpcode::get<SMSG_FRIEND_STATUS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FRIEND_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_INVITE* ServerOpcode::get_if<SMSG_GROUP_INVITE>() {
    if (opcode == Opcode::SMSG_GROUP_INVITE) {
        return &SMSG_GROUP_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_INVITE& ServerOpcode::get<SMSG_GROUP_INVITE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GROUP_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_DECLINE* ServerOpcode::get_if<SMSG_GROUP_DECLINE>() {
    if (opcode == Opcode::SMSG_GROUP_DECLINE) {
        return &SMSG_GROUP_DECLINE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_DECLINE& ServerOpcode::get<SMSG_GROUP_DECLINE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GROUP_DECLINE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_UNINVITE* ServerOpcode::get_if<SMSG_GROUP_UNINVITE>() {
    if (opcode == Opcode::SMSG_GROUP_UNINVITE) {
        return &SMSG_GROUP_UNINVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_UNINVITE& ServerOpcode::get<SMSG_GROUP_UNINVITE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GROUP_UNINVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_SET_LEADER* ServerOpcode::get_if<SMSG_GROUP_SET_LEADER>() {
    if (opcode == Opcode::SMSG_GROUP_SET_LEADER) {
        return &SMSG_GROUP_SET_LEADER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_SET_LEADER& ServerOpcode::get<SMSG_GROUP_SET_LEADER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GROUP_SET_LEADER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_DESTROYED* ServerOpcode::get_if<SMSG_GROUP_DESTROYED>() {
    if (opcode == Opcode::SMSG_GROUP_DESTROYED) {
        return &SMSG_GROUP_DESTROYED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_DESTROYED& ServerOpcode::get<SMSG_GROUP_DESTROYED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GROUP_DESTROYED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_LIST* ServerOpcode::get_if<SMSG_GROUP_LIST>() {
    if (opcode == Opcode::SMSG_GROUP_LIST) {
        return &SMSG_GROUP_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_LIST& ServerOpcode::get<SMSG_GROUP_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GROUP_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_MEMBER_STATS* ServerOpcode::get_if<SMSG_PARTY_MEMBER_STATS>() {
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS) {
        return &SMSG_PARTY_MEMBER_STATS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_MEMBER_STATS& ServerOpcode::get<SMSG_PARTY_MEMBER_STATS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PARTY_MEMBER_STATS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_COMMAND_RESULT* ServerOpcode::get_if<SMSG_PARTY_COMMAND_RESULT>() {
    if (opcode == Opcode::SMSG_PARTY_COMMAND_RESULT) {
        return &SMSG_PARTY_COMMAND_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_COMMAND_RESULT& ServerOpcode::get<SMSG_PARTY_COMMAND_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PARTY_COMMAND_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_INVITE* ServerOpcode::get_if<SMSG_GUILD_INVITE>() {
    if (opcode == Opcode::SMSG_GUILD_INVITE) {
        return &SMSG_GUILD_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_INVITE& ServerOpcode::get<SMSG_GUILD_INVITE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GUILD_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_DECLINE* ServerOpcode::get_if<SMSG_GUILD_DECLINE>() {
    if (opcode == Opcode::SMSG_GUILD_DECLINE) {
        return &SMSG_GUILD_DECLINE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_DECLINE& ServerOpcode::get<SMSG_GUILD_DECLINE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GUILD_DECLINE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_INFO* ServerOpcode::get_if<SMSG_GUILD_INFO>() {
    if (opcode == Opcode::SMSG_GUILD_INFO) {
        return &SMSG_GUILD_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_INFO& ServerOpcode::get<SMSG_GUILD_INFO>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GUILD_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_ROSTER* ServerOpcode::get_if<SMSG_GUILD_ROSTER>() {
    if (opcode == Opcode::SMSG_GUILD_ROSTER) {
        return &SMSG_GUILD_ROSTER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_ROSTER& ServerOpcode::get<SMSG_GUILD_ROSTER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GUILD_ROSTER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_EVENT* ServerOpcode::get_if<SMSG_GUILD_EVENT>() {
    if (opcode == Opcode::SMSG_GUILD_EVENT) {
        return &SMSG_GUILD_EVENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_EVENT& ServerOpcode::get<SMSG_GUILD_EVENT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GUILD_EVENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_COMMAND_RESULT* ServerOpcode::get_if<SMSG_GUILD_COMMAND_RESULT>() {
    if (opcode == Opcode::SMSG_GUILD_COMMAND_RESULT) {
        return &SMSG_GUILD_COMMAND_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_COMMAND_RESULT& ServerOpcode::get<SMSG_GUILD_COMMAND_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GUILD_COMMAND_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MESSAGECHAT* ServerOpcode::get_if<SMSG_MESSAGECHAT>() {
    if (opcode == Opcode::SMSG_MESSAGECHAT) {
        return &SMSG_MESSAGECHAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MESSAGECHAT& ServerOpcode::get<SMSG_MESSAGECHAT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MESSAGECHAT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_NOTIFY* ServerOpcode::get_if<SMSG_CHANNEL_NOTIFY>() {
    if (opcode == Opcode::SMSG_CHANNEL_NOTIFY) {
        return &SMSG_CHANNEL_NOTIFY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_NOTIFY& ServerOpcode::get<SMSG_CHANNEL_NOTIFY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHANNEL_NOTIFY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_LIST* ServerOpcode::get_if<SMSG_CHANNEL_LIST>() {
    if (opcode == Opcode::SMSG_CHANNEL_LIST) {
        return &SMSG_CHANNEL_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_LIST& ServerOpcode::get<SMSG_CHANNEL_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHANNEL_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_OBJECT* ServerOpcode::get_if<SMSG_UPDATE_OBJECT>() {
    if (opcode == Opcode::SMSG_UPDATE_OBJECT) {
        return &SMSG_UPDATE_OBJECT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_OBJECT& ServerOpcode::get<SMSG_UPDATE_OBJECT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_UPDATE_OBJECT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DESTROY_OBJECT* ServerOpcode::get_if<SMSG_DESTROY_OBJECT>() {
    if (opcode == Opcode::SMSG_DESTROY_OBJECT) {
        return &SMSG_DESTROY_OBJECT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DESTROY_OBJECT& ServerOpcode::get<SMSG_DESTROY_OBJECT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DESTROY_OBJECT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_READ_ITEM_OK* ServerOpcode::get_if<SMSG_READ_ITEM_OK>() {
    if (opcode == Opcode::SMSG_READ_ITEM_OK) {
        return &SMSG_READ_ITEM_OK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_READ_ITEM_OK& ServerOpcode::get<SMSG_READ_ITEM_OK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_READ_ITEM_OK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_READ_ITEM_FAILED* ServerOpcode::get_if<SMSG_READ_ITEM_FAILED>() {
    if (opcode == Opcode::SMSG_READ_ITEM_FAILED) {
        return &SMSG_READ_ITEM_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_READ_ITEM_FAILED& ServerOpcode::get<SMSG_READ_ITEM_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_READ_ITEM_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_COOLDOWN* ServerOpcode::get_if<SMSG_ITEM_COOLDOWN>() {
    if (opcode == Opcode::SMSG_ITEM_COOLDOWN) {
        return &SMSG_ITEM_COOLDOWN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_COOLDOWN& ServerOpcode::get<SMSG_ITEM_COOLDOWN>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ITEM_COOLDOWN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM* ServerOpcode::get_if<SMSG_GAMEOBJECT_CUSTOM_ANIM>() {
    if (opcode == Opcode::SMSG_GAMEOBJECT_CUSTOM_ANIM) {
        return &SMSG_GAMEOBJECT_CUSTOM_ANIM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM& ServerOpcode::get<SMSG_GAMEOBJECT_CUSTOM_ANIM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GAMEOBJECT_CUSTOM_ANIM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_FORWARD* ServerOpcode::get_if<MSG_MOVE_START_FORWARD>() {
    if (opcode == Opcode::MSG_MOVE_START_FORWARD) {
        return &MSG_MOVE_START_FORWARD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_FORWARD& ServerOpcode::get<MSG_MOVE_START_FORWARD>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_FORWARD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_BACKWARD* ServerOpcode::get_if<MSG_MOVE_START_BACKWARD>() {
    if (opcode == Opcode::MSG_MOVE_START_BACKWARD) {
        return &MSG_MOVE_START_BACKWARD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_BACKWARD& ServerOpcode::get<MSG_MOVE_START_BACKWARD>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_BACKWARD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP* ServerOpcode::get_if<MSG_MOVE_STOP>() {
    if (opcode == Opcode::MSG_MOVE_STOP) {
        return &MSG_MOVE_STOP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP& ServerOpcode::get<MSG_MOVE_STOP>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_STOP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_LEFT* ServerOpcode::get_if<MSG_MOVE_START_STRAFE_LEFT>() {
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_LEFT) {
        return &MSG_MOVE_START_STRAFE_LEFT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_LEFT& ServerOpcode::get<MSG_MOVE_START_STRAFE_LEFT>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_STRAFE_LEFT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_RIGHT* ServerOpcode::get_if<MSG_MOVE_START_STRAFE_RIGHT>() {
    if (opcode == Opcode::MSG_MOVE_START_STRAFE_RIGHT) {
        return &MSG_MOVE_START_STRAFE_RIGHT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_STRAFE_RIGHT& ServerOpcode::get<MSG_MOVE_START_STRAFE_RIGHT>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_STRAFE_RIGHT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_STRAFE* ServerOpcode::get_if<MSG_MOVE_STOP_STRAFE>() {
    if (opcode == Opcode::MSG_MOVE_STOP_STRAFE) {
        return &MSG_MOVE_STOP_STRAFE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_STRAFE& ServerOpcode::get<MSG_MOVE_STOP_STRAFE>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_STOP_STRAFE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_JUMP* ServerOpcode::get_if<MSG_MOVE_JUMP>() {
    if (opcode == Opcode::MSG_MOVE_JUMP) {
        return &MSG_MOVE_JUMP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_JUMP& ServerOpcode::get<MSG_MOVE_JUMP>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_JUMP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_LEFT* ServerOpcode::get_if<MSG_MOVE_START_TURN_LEFT>() {
    if (opcode == Opcode::MSG_MOVE_START_TURN_LEFT) {
        return &MSG_MOVE_START_TURN_LEFT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_LEFT& ServerOpcode::get<MSG_MOVE_START_TURN_LEFT>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_TURN_LEFT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_RIGHT* ServerOpcode::get_if<MSG_MOVE_START_TURN_RIGHT>() {
    if (opcode == Opcode::MSG_MOVE_START_TURN_RIGHT) {
        return &MSG_MOVE_START_TURN_RIGHT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_TURN_RIGHT& ServerOpcode::get<MSG_MOVE_START_TURN_RIGHT>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_TURN_RIGHT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_TURN* ServerOpcode::get_if<MSG_MOVE_STOP_TURN>() {
    if (opcode == Opcode::MSG_MOVE_STOP_TURN) {
        return &MSG_MOVE_STOP_TURN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_TURN& ServerOpcode::get<MSG_MOVE_STOP_TURN>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_STOP_TURN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_UP* ServerOpcode::get_if<MSG_MOVE_START_PITCH_UP>() {
    if (opcode == Opcode::MSG_MOVE_START_PITCH_UP) {
        return &MSG_MOVE_START_PITCH_UP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_UP& ServerOpcode::get<MSG_MOVE_START_PITCH_UP>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_PITCH_UP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_DOWN* ServerOpcode::get_if<MSG_MOVE_START_PITCH_DOWN>() {
    if (opcode == Opcode::MSG_MOVE_START_PITCH_DOWN) {
        return &MSG_MOVE_START_PITCH_DOWN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_PITCH_DOWN& ServerOpcode::get<MSG_MOVE_START_PITCH_DOWN>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_PITCH_DOWN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_PITCH* ServerOpcode::get_if<MSG_MOVE_STOP_PITCH>() {
    if (opcode == Opcode::MSG_MOVE_STOP_PITCH) {
        return &MSG_MOVE_STOP_PITCH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_PITCH& ServerOpcode::get<MSG_MOVE_STOP_PITCH>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_STOP_PITCH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_RUN_MODE* ServerOpcode::get_if<MSG_MOVE_SET_RUN_MODE>() {
    if (opcode == Opcode::MSG_MOVE_SET_RUN_MODE) {
        return &MSG_MOVE_SET_RUN_MODE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_RUN_MODE& ServerOpcode::get<MSG_MOVE_SET_RUN_MODE>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_SET_RUN_MODE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_WALK_MODE* ServerOpcode::get_if<MSG_MOVE_SET_WALK_MODE>() {
    if (opcode == Opcode::MSG_MOVE_SET_WALK_MODE) {
        return &MSG_MOVE_SET_WALK_MODE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_WALK_MODE& ServerOpcode::get<MSG_MOVE_SET_WALK_MODE>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_SET_WALK_MODE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_CHEAT_Server* ServerOpcode::get_if<MSG_MOVE_TELEPORT_CHEAT_Server>() {
    if (opcode == Opcode::MSG_MOVE_TELEPORT_CHEAT) {
        return &MSG_MOVE_TELEPORT_CHEAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_CHEAT_Server& ServerOpcode::get<MSG_MOVE_TELEPORT_CHEAT_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_TELEPORT_CHEAT_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_ACK_Server* ServerOpcode::get_if<MSG_MOVE_TELEPORT_ACK_Server>() {
    if (opcode == Opcode::MSG_MOVE_TELEPORT_ACK) {
        return &MSG_MOVE_TELEPORT_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TELEPORT_ACK_Server& ServerOpcode::get<MSG_MOVE_TELEPORT_ACK_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_TELEPORT_ACK_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FALL_LAND* ServerOpcode::get_if<MSG_MOVE_FALL_LAND>() {
    if (opcode == Opcode::MSG_MOVE_FALL_LAND) {
        return &MSG_MOVE_FALL_LAND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FALL_LAND& ServerOpcode::get<MSG_MOVE_FALL_LAND>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_FALL_LAND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_SWIM* ServerOpcode::get_if<MSG_MOVE_START_SWIM>() {
    if (opcode == Opcode::MSG_MOVE_START_SWIM) {
        return &MSG_MOVE_START_SWIM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_SWIM& ServerOpcode::get<MSG_MOVE_START_SWIM>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_SWIM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_SWIM* ServerOpcode::get_if<MSG_MOVE_STOP_SWIM>() {
    if (opcode == Opcode::MSG_MOVE_STOP_SWIM) {
        return &MSG_MOVE_STOP_SWIM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_SWIM& ServerOpcode::get<MSG_MOVE_STOP_SWIM>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_STOP_SWIM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FACING* ServerOpcode::get_if<MSG_MOVE_SET_FACING>() {
    if (opcode == Opcode::MSG_MOVE_SET_FACING) {
        return &MSG_MOVE_SET_FACING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FACING& ServerOpcode::get<MSG_MOVE_SET_FACING>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_SET_FACING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH* ServerOpcode::get_if<MSG_MOVE_SET_PITCH>() {
    if (opcode == Opcode::MSG_MOVE_SET_PITCH) {
        return &MSG_MOVE_SET_PITCH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH& ServerOpcode::get<MSG_MOVE_SET_PITCH>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_SET_PITCH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WORLDPORT_ACK* ServerOpcode::get_if<MSG_MOVE_WORLDPORT_ACK>() {
    if (opcode == Opcode::MSG_MOVE_WORLDPORT_ACK) {
        return &MSG_MOVE_WORLDPORT_ACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WORLDPORT_ACK& ServerOpcode::get<MSG_MOVE_WORLDPORT_ACK>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_WORLDPORT_ACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MONSTER_MOVE* ServerOpcode::get_if<SMSG_MONSTER_MOVE>() {
    if (opcode == Opcode::SMSG_MONSTER_MOVE) {
        return &SMSG_MONSTER_MOVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MONSTER_MOVE& ServerOpcode::get<SMSG_MONSTER_MOVE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MONSTER_MOVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_WATER_WALK* ServerOpcode::get_if<SMSG_MOVE_WATER_WALK>() {
    if (opcode == Opcode::SMSG_MOVE_WATER_WALK) {
        return &SMSG_MOVE_WATER_WALK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_WATER_WALK& ServerOpcode::get<SMSG_MOVE_WATER_WALK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_WATER_WALK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_LAND_WALK* ServerOpcode::get_if<SMSG_MOVE_LAND_WALK>() {
    if (opcode == Opcode::SMSG_MOVE_LAND_WALK) {
        return &SMSG_MOVE_LAND_WALK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_LAND_WALK& ServerOpcode::get<SMSG_MOVE_LAND_WALK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_LAND_WALK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_RUN_SPEED_CHANGE* ServerOpcode::get_if<SMSG_FORCE_RUN_SPEED_CHANGE>() {
    if (opcode == Opcode::SMSG_FORCE_RUN_SPEED_CHANGE) {
        return &SMSG_FORCE_RUN_SPEED_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_RUN_SPEED_CHANGE& ServerOpcode::get<SMSG_FORCE_RUN_SPEED_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_RUN_SPEED_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE* ServerOpcode::get_if<SMSG_FORCE_RUN_BACK_SPEED_CHANGE>() {
    if (opcode == Opcode::SMSG_FORCE_RUN_BACK_SPEED_CHANGE) {
        return &SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE& ServerOpcode::get<SMSG_FORCE_RUN_BACK_SPEED_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_RUN_BACK_SPEED_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_SWIM_SPEED_CHANGE* ServerOpcode::get_if<SMSG_FORCE_SWIM_SPEED_CHANGE>() {
    if (opcode == Opcode::SMSG_FORCE_SWIM_SPEED_CHANGE) {
        return &SMSG_FORCE_SWIM_SPEED_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_SWIM_SPEED_CHANGE& ServerOpcode::get<SMSG_FORCE_SWIM_SPEED_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_SWIM_SPEED_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_MOVE_ROOT* ServerOpcode::get_if<SMSG_FORCE_MOVE_ROOT>() {
    if (opcode == Opcode::SMSG_FORCE_MOVE_ROOT) {
        return &SMSG_FORCE_MOVE_ROOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_MOVE_ROOT& ServerOpcode::get<SMSG_FORCE_MOVE_ROOT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_MOVE_ROOT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_MOVE_UNROOT* ServerOpcode::get_if<SMSG_FORCE_MOVE_UNROOT>() {
    if (opcode == Opcode::SMSG_FORCE_MOVE_UNROOT) {
        return &SMSG_FORCE_MOVE_UNROOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_MOVE_UNROOT& ServerOpcode::get<SMSG_FORCE_MOVE_UNROOT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_MOVE_UNROOT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_ROOT_Server* ServerOpcode::get_if<MSG_MOVE_ROOT_Server>() {
    if (opcode == Opcode::MSG_MOVE_ROOT) {
        return &MSG_MOVE_ROOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_ROOT_Server& ServerOpcode::get<MSG_MOVE_ROOT_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_ROOT_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_UNROOT_Server* ServerOpcode::get_if<MSG_MOVE_UNROOT_Server>() {
    if (opcode == Opcode::MSG_MOVE_UNROOT) {
        return &MSG_MOVE_UNROOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_UNROOT_Server& ServerOpcode::get<MSG_MOVE_UNROOT_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_UNROOT_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HEARTBEAT* ServerOpcode::get_if<MSG_MOVE_HEARTBEAT>() {
    if (opcode == Opcode::MSG_MOVE_HEARTBEAT) {
        return &MSG_MOVE_HEARTBEAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HEARTBEAT& ServerOpcode::get<MSG_MOVE_HEARTBEAT>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_HEARTBEAT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_KNOCK_BACK* ServerOpcode::get_if<SMSG_MOVE_KNOCK_BACK>() {
    if (opcode == Opcode::SMSG_MOVE_KNOCK_BACK) {
        return &SMSG_MOVE_KNOCK_BACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_KNOCK_BACK& ServerOpcode::get<SMSG_MOVE_KNOCK_BACK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_KNOCK_BACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_KNOCK_BACK_Server* ServerOpcode::get_if<MSG_MOVE_KNOCK_BACK_Server>() {
    if (opcode == Opcode::MSG_MOVE_KNOCK_BACK) {
        return &MSG_MOVE_KNOCK_BACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_KNOCK_BACK_Server& ServerOpcode::get<MSG_MOVE_KNOCK_BACK_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_KNOCK_BACK_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_FEATHER_FALL* ServerOpcode::get_if<SMSG_MOVE_FEATHER_FALL>() {
    if (opcode == Opcode::SMSG_MOVE_FEATHER_FALL) {
        return &SMSG_MOVE_FEATHER_FALL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_FEATHER_FALL& ServerOpcode::get<SMSG_MOVE_FEATHER_FALL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_FEATHER_FALL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_NORMAL_FALL* ServerOpcode::get_if<SMSG_MOVE_NORMAL_FALL>() {
    if (opcode == Opcode::SMSG_MOVE_NORMAL_FALL) {
        return &SMSG_MOVE_NORMAL_FALL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_NORMAL_FALL& ServerOpcode::get<SMSG_MOVE_NORMAL_FALL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_NORMAL_FALL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_HOVER* ServerOpcode::get_if<SMSG_MOVE_SET_HOVER>() {
    if (opcode == Opcode::SMSG_MOVE_SET_HOVER) {
        return &SMSG_MOVE_SET_HOVER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_HOVER& ServerOpcode::get<SMSG_MOVE_SET_HOVER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_SET_HOVER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_UNSET_HOVER* ServerOpcode::get_if<SMSG_MOVE_UNSET_HOVER>() {
    if (opcode == Opcode::SMSG_MOVE_UNSET_HOVER) {
        return &SMSG_MOVE_UNSET_HOVER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_UNSET_HOVER& ServerOpcode::get<SMSG_MOVE_UNSET_HOVER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_UNSET_HOVER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HOVER* ServerOpcode::get_if<MSG_MOVE_HOVER>() {
    if (opcode == Opcode::MSG_MOVE_HOVER) {
        return &MSG_MOVE_HOVER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_HOVER& ServerOpcode::get<MSG_MOVE_HOVER>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_HOVER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRIGGER_CINEMATIC* ServerOpcode::get_if<SMSG_TRIGGER_CINEMATIC>() {
    if (opcode == Opcode::SMSG_TRIGGER_CINEMATIC) {
        return &SMSG_TRIGGER_CINEMATIC;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRIGGER_CINEMATIC& ServerOpcode::get<SMSG_TRIGGER_CINEMATIC>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TRIGGER_CINEMATIC>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TUTORIAL_FLAGS* ServerOpcode::get_if<SMSG_TUTORIAL_FLAGS>() {
    if (opcode == Opcode::SMSG_TUTORIAL_FLAGS) {
        return &SMSG_TUTORIAL_FLAGS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TUTORIAL_FLAGS& ServerOpcode::get<SMSG_TUTORIAL_FLAGS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TUTORIAL_FLAGS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EMOTE* ServerOpcode::get_if<SMSG_EMOTE>() {
    if (opcode == Opcode::SMSG_EMOTE) {
        return &SMSG_EMOTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EMOTE& ServerOpcode::get<SMSG_EMOTE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_EMOTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TEXT_EMOTE* ServerOpcode::get_if<SMSG_TEXT_EMOTE>() {
    if (opcode == Opcode::SMSG_TEXT_EMOTE) {
        return &SMSG_TEXT_EMOTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TEXT_EMOTE& ServerOpcode::get<SMSG_TEXT_EMOTE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TEXT_EMOTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INVENTORY_CHANGE_FAILURE* ServerOpcode::get_if<SMSG_INVENTORY_CHANGE_FAILURE>() {
    if (opcode == Opcode::SMSG_INVENTORY_CHANGE_FAILURE) {
        return &SMSG_INVENTORY_CHANGE_FAILURE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INVENTORY_CHANGE_FAILURE& ServerOpcode::get<SMSG_INVENTORY_CHANGE_FAILURE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INVENTORY_CHANGE_FAILURE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRADE_STATUS* ServerOpcode::get_if<SMSG_TRADE_STATUS>() {
    if (opcode == Opcode::SMSG_TRADE_STATUS) {
        return &SMSG_TRADE_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRADE_STATUS& ServerOpcode::get<SMSG_TRADE_STATUS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TRADE_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRADE_STATUS_EXTENDED* ServerOpcode::get_if<SMSG_TRADE_STATUS_EXTENDED>() {
    if (opcode == Opcode::SMSG_TRADE_STATUS_EXTENDED) {
        return &SMSG_TRADE_STATUS_EXTENDED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRADE_STATUS_EXTENDED& ServerOpcode::get<SMSG_TRADE_STATUS_EXTENDED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TRADE_STATUS_EXTENDED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INITIALIZE_FACTIONS* ServerOpcode::get_if<SMSG_INITIALIZE_FACTIONS>() {
    if (opcode == Opcode::SMSG_INITIALIZE_FACTIONS) {
        return &SMSG_INITIALIZE_FACTIONS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INITIALIZE_FACTIONS& ServerOpcode::get<SMSG_INITIALIZE_FACTIONS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INITIALIZE_FACTIONS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FACTION_VISIBLE* ServerOpcode::get_if<SMSG_SET_FACTION_VISIBLE>() {
    if (opcode == Opcode::SMSG_SET_FACTION_VISIBLE) {
        return &SMSG_SET_FACTION_VISIBLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FACTION_VISIBLE& ServerOpcode::get<SMSG_SET_FACTION_VISIBLE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SET_FACTION_VISIBLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FACTION_STANDING* ServerOpcode::get_if<SMSG_SET_FACTION_STANDING>() {
    if (opcode == Opcode::SMSG_SET_FACTION_STANDING) {
        return &SMSG_SET_FACTION_STANDING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FACTION_STANDING& ServerOpcode::get<SMSG_SET_FACTION_STANDING>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SET_FACTION_STANDING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PROFICIENCY* ServerOpcode::get_if<SMSG_SET_PROFICIENCY>() {
    if (opcode == Opcode::SMSG_SET_PROFICIENCY) {
        return &SMSG_SET_PROFICIENCY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PROFICIENCY& ServerOpcode::get<SMSG_SET_PROFICIENCY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SET_PROFICIENCY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACTION_BUTTONS* ServerOpcode::get_if<SMSG_ACTION_BUTTONS>() {
    if (opcode == Opcode::SMSG_ACTION_BUTTONS) {
        return &SMSG_ACTION_BUTTONS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACTION_BUTTONS& ServerOpcode::get<SMSG_ACTION_BUTTONS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ACTION_BUTTONS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INITIAL_SPELLS* ServerOpcode::get_if<SMSG_INITIAL_SPELLS>() {
    if (opcode == Opcode::SMSG_INITIAL_SPELLS) {
        return &SMSG_INITIAL_SPELLS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INITIAL_SPELLS& ServerOpcode::get<SMSG_INITIAL_SPELLS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INITIAL_SPELLS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LEARNED_SPELL* ServerOpcode::get_if<SMSG_LEARNED_SPELL>() {
    if (opcode == Opcode::SMSG_LEARNED_SPELL) {
        return &SMSG_LEARNED_SPELL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LEARNED_SPELL& ServerOpcode::get<SMSG_LEARNED_SPELL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LEARNED_SPELL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SUPERCEDED_SPELL* ServerOpcode::get_if<SMSG_SUPERCEDED_SPELL>() {
    if (opcode == Opcode::SMSG_SUPERCEDED_SPELL) {
        return &SMSG_SUPERCEDED_SPELL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SUPERCEDED_SPELL& ServerOpcode::get<SMSG_SUPERCEDED_SPELL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SUPERCEDED_SPELL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CAST_FAILED* ServerOpcode::get_if<SMSG_CAST_FAILED>() {
    if (opcode == Opcode::SMSG_CAST_FAILED) {
        return &SMSG_CAST_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CAST_FAILED& ServerOpcode::get<SMSG_CAST_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CAST_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_START* ServerOpcode::get_if<SMSG_SPELL_START>() {
    if (opcode == Opcode::SMSG_SPELL_START) {
        return &SMSG_SPELL_START;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_START& ServerOpcode::get<SMSG_SPELL_START>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELL_START>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_GO* ServerOpcode::get_if<SMSG_SPELL_GO>() {
    if (opcode == Opcode::SMSG_SPELL_GO) {
        return &SMSG_SPELL_GO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_GO& ServerOpcode::get<SMSG_SPELL_GO>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELL_GO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_FAILURE* ServerOpcode::get_if<SMSG_SPELL_FAILURE>() {
    if (opcode == Opcode::SMSG_SPELL_FAILURE) {
        return &SMSG_SPELL_FAILURE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_FAILURE& ServerOpcode::get<SMSG_SPELL_FAILURE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELL_FAILURE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_COOLDOWN* ServerOpcode::get_if<SMSG_SPELL_COOLDOWN>() {
    if (opcode == Opcode::SMSG_SPELL_COOLDOWN) {
        return &SMSG_SPELL_COOLDOWN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_COOLDOWN& ServerOpcode::get<SMSG_SPELL_COOLDOWN>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELL_COOLDOWN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COOLDOWN_EVENT* ServerOpcode::get_if<SMSG_COOLDOWN_EVENT>() {
    if (opcode == Opcode::SMSG_COOLDOWN_EVENT) {
        return &SMSG_COOLDOWN_EVENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COOLDOWN_EVENT& ServerOpcode::get<SMSG_COOLDOWN_EVENT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_COOLDOWN_EVENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_CAST_FAILED* ServerOpcode::get_if<SMSG_PET_CAST_FAILED>() {
    if (opcode == Opcode::SMSG_PET_CAST_FAILED) {
        return &SMSG_PET_CAST_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_CAST_FAILED& ServerOpcode::get<SMSG_PET_CAST_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_CAST_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CHANNEL_START_Server* ServerOpcode::get_if<MSG_CHANNEL_START_Server>() {
    if (opcode == Opcode::MSG_CHANNEL_START) {
        return &MSG_CHANNEL_START;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CHANNEL_START_Server& ServerOpcode::get<MSG_CHANNEL_START_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_CHANNEL_START_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CHANNEL_UPDATE_Server* ServerOpcode::get_if<MSG_CHANNEL_UPDATE_Server>() {
    if (opcode == Opcode::MSG_CHANNEL_UPDATE) {
        return &MSG_CHANNEL_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CHANNEL_UPDATE_Server& ServerOpcode::get<MSG_CHANNEL_UPDATE_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_CHANNEL_UPDATE_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AI_REACTION* ServerOpcode::get_if<SMSG_AI_REACTION>() {
    if (opcode == Opcode::SMSG_AI_REACTION) {
        return &SMSG_AI_REACTION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AI_REACTION& ServerOpcode::get<SMSG_AI_REACTION>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AI_REACTION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSTART* ServerOpcode::get_if<SMSG_ATTACKSTART>() {
    if (opcode == Opcode::SMSG_ATTACKSTART) {
        return &SMSG_ATTACKSTART;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSTART& ServerOpcode::get<SMSG_ATTACKSTART>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ATTACKSTART>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSTOP* ServerOpcode::get_if<SMSG_ATTACKSTOP>() {
    if (opcode == Opcode::SMSG_ATTACKSTOP) {
        return &SMSG_ATTACKSTOP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSTOP& ServerOpcode::get<SMSG_ATTACKSTOP>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ATTACKSTOP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_NOTINRANGE* ServerOpcode::get_if<SMSG_ATTACKSWING_NOTINRANGE>() {
    if (opcode == Opcode::SMSG_ATTACKSWING_NOTINRANGE) {
        return &SMSG_ATTACKSWING_NOTINRANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_NOTINRANGE& ServerOpcode::get<SMSG_ATTACKSWING_NOTINRANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ATTACKSWING_NOTINRANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_BADFACING* ServerOpcode::get_if<SMSG_ATTACKSWING_BADFACING>() {
    if (opcode == Opcode::SMSG_ATTACKSWING_BADFACING) {
        return &SMSG_ATTACKSWING_BADFACING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_BADFACING& ServerOpcode::get<SMSG_ATTACKSWING_BADFACING>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ATTACKSWING_BADFACING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY* ServerOpcode::get_if<SMSG_INSTANCE_LOCK_WARNING_QUERY>() {
    if (opcode == Opcode::SMSG_INSTANCE_LOCK_WARNING_QUERY) {
        return &SMSG_INSTANCE_LOCK_WARNING_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY& ServerOpcode::get<SMSG_INSTANCE_LOCK_WARNING_QUERY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INSTANCE_LOCK_WARNING_QUERY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_DEADTARGET* ServerOpcode::get_if<SMSG_ATTACKSWING_DEADTARGET>() {
    if (opcode == Opcode::SMSG_ATTACKSWING_DEADTARGET) {
        return &SMSG_ATTACKSWING_DEADTARGET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_DEADTARGET& ServerOpcode::get<SMSG_ATTACKSWING_DEADTARGET>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ATTACKSWING_DEADTARGET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_CANT_ATTACK* ServerOpcode::get_if<SMSG_ATTACKSWING_CANT_ATTACK>() {
    if (opcode == Opcode::SMSG_ATTACKSWING_CANT_ATTACK) {
        return &SMSG_ATTACKSWING_CANT_ATTACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKSWING_CANT_ATTACK& ServerOpcode::get<SMSG_ATTACKSWING_CANT_ATTACK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ATTACKSWING_CANT_ATTACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKERSTATEUPDATE* ServerOpcode::get_if<SMSG_ATTACKERSTATEUPDATE>() {
    if (opcode == Opcode::SMSG_ATTACKERSTATEUPDATE) {
        return &SMSG_ATTACKERSTATEUPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ATTACKERSTATEUPDATE& ServerOpcode::get<SMSG_ATTACKERSTATEUPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ATTACKERSTATEUPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CANCEL_COMBAT* ServerOpcode::get_if<SMSG_CANCEL_COMBAT>() {
    if (opcode == Opcode::SMSG_CANCEL_COMBAT) {
        return &SMSG_CANCEL_COMBAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CANCEL_COMBAT& ServerOpcode::get<SMSG_CANCEL_COMBAT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CANCEL_COMBAT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLHEALLOG* ServerOpcode::get_if<SMSG_SPELLHEALLOG>() {
    if (opcode == Opcode::SMSG_SPELLHEALLOG) {
        return &SMSG_SPELLHEALLOG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLHEALLOG& ServerOpcode::get<SMSG_SPELLHEALLOG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELLHEALLOG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLENERGIZELOG* ServerOpcode::get_if<SMSG_SPELLENERGIZELOG>() {
    if (opcode == Opcode::SMSG_SPELLENERGIZELOG) {
        return &SMSG_SPELLENERGIZELOG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLENERGIZELOG& ServerOpcode::get<SMSG_SPELLENERGIZELOG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELLENERGIZELOG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BREAK_TARGET* ServerOpcode::get_if<SMSG_BREAK_TARGET>() {
    if (opcode == Opcode::SMSG_BREAK_TARGET) {
        return &SMSG_BREAK_TARGET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BREAK_TARGET& ServerOpcode::get<SMSG_BREAK_TARGET>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BREAK_TARGET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BINDPOINTUPDATE* ServerOpcode::get_if<SMSG_BINDPOINTUPDATE>() {
    if (opcode == Opcode::SMSG_BINDPOINTUPDATE) {
        return &SMSG_BINDPOINTUPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BINDPOINTUPDATE& ServerOpcode::get<SMSG_BINDPOINTUPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BINDPOINTUPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYERBOUND* ServerOpcode::get_if<SMSG_PLAYERBOUND>() {
    if (opcode == Opcode::SMSG_PLAYERBOUND) {
        return &SMSG_PLAYERBOUND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYERBOUND& ServerOpcode::get<SMSG_PLAYERBOUND>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PLAYERBOUND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLIENT_CONTROL_UPDATE* ServerOpcode::get_if<SMSG_CLIENT_CONTROL_UPDATE>() {
    if (opcode == Opcode::SMSG_CLIENT_CONTROL_UPDATE) {
        return &SMSG_CLIENT_CONTROL_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLIENT_CONTROL_UPDATE& ServerOpcode::get<SMSG_CLIENT_CONTROL_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CLIENT_CONTROL_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESURRECT_REQUEST* ServerOpcode::get_if<SMSG_RESURRECT_REQUEST>() {
    if (opcode == Opcode::SMSG_RESURRECT_REQUEST) {
        return &SMSG_RESURRECT_REQUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESURRECT_REQUEST& ServerOpcode::get<SMSG_RESURRECT_REQUEST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_RESURRECT_REQUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_RESPONSE* ServerOpcode::get_if<SMSG_LOOT_RESPONSE>() {
    if (opcode == Opcode::SMSG_LOOT_RESPONSE) {
        return &SMSG_LOOT_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_RESPONSE& ServerOpcode::get<SMSG_LOOT_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_RELEASE_RESPONSE* ServerOpcode::get_if<SMSG_LOOT_RELEASE_RESPONSE>() {
    if (opcode == Opcode::SMSG_LOOT_RELEASE_RESPONSE) {
        return &SMSG_LOOT_RELEASE_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_RELEASE_RESPONSE& ServerOpcode::get<SMSG_LOOT_RELEASE_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_RELEASE_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_REMOVED* ServerOpcode::get_if<SMSG_LOOT_REMOVED>() {
    if (opcode == Opcode::SMSG_LOOT_REMOVED) {
        return &SMSG_LOOT_REMOVED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_REMOVED& ServerOpcode::get<SMSG_LOOT_REMOVED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_REMOVED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_MONEY_NOTIFY* ServerOpcode::get_if<SMSG_LOOT_MONEY_NOTIFY>() {
    if (opcode == Opcode::SMSG_LOOT_MONEY_NOTIFY) {
        return &SMSG_LOOT_MONEY_NOTIFY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_MONEY_NOTIFY& ServerOpcode::get<SMSG_LOOT_MONEY_NOTIFY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_MONEY_NOTIFY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_CLEAR_MONEY* ServerOpcode::get_if<SMSG_LOOT_CLEAR_MONEY>() {
    if (opcode == Opcode::SMSG_LOOT_CLEAR_MONEY) {
        return &SMSG_LOOT_CLEAR_MONEY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_CLEAR_MONEY& ServerOpcode::get<SMSG_LOOT_CLEAR_MONEY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_CLEAR_MONEY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_PUSH_RESULT* ServerOpcode::get_if<SMSG_ITEM_PUSH_RESULT>() {
    if (opcode == Opcode::SMSG_ITEM_PUSH_RESULT) {
        return &SMSG_ITEM_PUSH_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_PUSH_RESULT& ServerOpcode::get<SMSG_ITEM_PUSH_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ITEM_PUSH_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_REQUESTED* ServerOpcode::get_if<SMSG_DUEL_REQUESTED>() {
    if (opcode == Opcode::SMSG_DUEL_REQUESTED) {
        return &SMSG_DUEL_REQUESTED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_REQUESTED& ServerOpcode::get<SMSG_DUEL_REQUESTED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DUEL_REQUESTED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_OUTOFBOUNDS* ServerOpcode::get_if<SMSG_DUEL_OUTOFBOUNDS>() {
    if (opcode == Opcode::SMSG_DUEL_OUTOFBOUNDS) {
        return &SMSG_DUEL_OUTOFBOUNDS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_OUTOFBOUNDS& ServerOpcode::get<SMSG_DUEL_OUTOFBOUNDS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DUEL_OUTOFBOUNDS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_INBOUNDS* ServerOpcode::get_if<SMSG_DUEL_INBOUNDS>() {
    if (opcode == Opcode::SMSG_DUEL_INBOUNDS) {
        return &SMSG_DUEL_INBOUNDS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_INBOUNDS& ServerOpcode::get<SMSG_DUEL_INBOUNDS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DUEL_INBOUNDS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_COMPLETE* ServerOpcode::get_if<SMSG_DUEL_COMPLETE>() {
    if (opcode == Opcode::SMSG_DUEL_COMPLETE) {
        return &SMSG_DUEL_COMPLETE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_COMPLETE& ServerOpcode::get<SMSG_DUEL_COMPLETE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DUEL_COMPLETE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_WINNER* ServerOpcode::get_if<SMSG_DUEL_WINNER>() {
    if (opcode == Opcode::SMSG_DUEL_WINNER) {
        return &SMSG_DUEL_WINNER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_WINNER& ServerOpcode::get<SMSG_DUEL_WINNER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DUEL_WINNER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOUNTRESULT* ServerOpcode::get_if<SMSG_MOUNTRESULT>() {
    if (opcode == Opcode::SMSG_MOUNTRESULT) {
        return &SMSG_MOUNTRESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOUNTRESULT& ServerOpcode::get<SMSG_MOUNTRESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOUNTRESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOUNTSPECIAL_ANIM* ServerOpcode::get_if<SMSG_MOUNTSPECIAL_ANIM>() {
    if (opcode == Opcode::SMSG_MOUNTSPECIAL_ANIM) {
        return &SMSG_MOUNTSPECIAL_ANIM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOUNTSPECIAL_ANIM& ServerOpcode::get<SMSG_MOUNTSPECIAL_ANIM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOUNTSPECIAL_ANIM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_TAME_FAILURE* ServerOpcode::get_if<SMSG_PET_TAME_FAILURE>() {
    if (opcode == Opcode::SMSG_PET_TAME_FAILURE) {
        return &SMSG_PET_TAME_FAILURE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_TAME_FAILURE& ServerOpcode::get<SMSG_PET_TAME_FAILURE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_TAME_FAILURE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_NAME_INVALID* ServerOpcode::get_if<SMSG_PET_NAME_INVALID>() {
    if (opcode == Opcode::SMSG_PET_NAME_INVALID) {
        return &SMSG_PET_NAME_INVALID;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_NAME_INVALID& ServerOpcode::get<SMSG_PET_NAME_INVALID>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_NAME_INVALID>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_SPELLS* ServerOpcode::get_if<SMSG_PET_SPELLS>() {
    if (opcode == Opcode::SMSG_PET_SPELLS) {
        return &SMSG_PET_SPELLS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_SPELLS& ServerOpcode::get<SMSG_PET_SPELLS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_SPELLS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_MODE* ServerOpcode::get_if<SMSG_PET_MODE>() {
    if (opcode == Opcode::SMSG_PET_MODE) {
        return &SMSG_PET_MODE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_MODE& ServerOpcode::get<SMSG_PET_MODE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_MODE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_MESSAGE* ServerOpcode::get_if<SMSG_GOSSIP_MESSAGE>() {
    if (opcode == Opcode::SMSG_GOSSIP_MESSAGE) {
        return &SMSG_GOSSIP_MESSAGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_MESSAGE& ServerOpcode::get<SMSG_GOSSIP_MESSAGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GOSSIP_MESSAGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_COMPLETE* ServerOpcode::get_if<SMSG_GOSSIP_COMPLETE>() {
    if (opcode == Opcode::SMSG_GOSSIP_COMPLETE) {
        return &SMSG_GOSSIP_COMPLETE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_COMPLETE& ServerOpcode::get<SMSG_GOSSIP_COMPLETE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GOSSIP_COMPLETE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NPC_TEXT_UPDATE* ServerOpcode::get_if<SMSG_NPC_TEXT_UPDATE>() {
    if (opcode == Opcode::SMSG_NPC_TEXT_UPDATE) {
        return &SMSG_NPC_TEXT_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NPC_TEXT_UPDATE& ServerOpcode::get<SMSG_NPC_TEXT_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_NPC_TEXT_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_STATUS* ServerOpcode::get_if<SMSG_QUESTGIVER_STATUS>() {
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS) {
        return &SMSG_QUESTGIVER_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_STATUS& ServerOpcode::get<SMSG_QUESTGIVER_STATUS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTGIVER_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_LIST* ServerOpcode::get_if<SMSG_QUESTGIVER_QUEST_LIST>() {
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_LIST) {
        return &SMSG_QUESTGIVER_QUEST_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_LIST& ServerOpcode::get<SMSG_QUESTGIVER_QUEST_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTGIVER_QUEST_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_DETAILS* ServerOpcode::get_if<SMSG_QUESTGIVER_QUEST_DETAILS>() {
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_DETAILS) {
        return &SMSG_QUESTGIVER_QUEST_DETAILS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_DETAILS& ServerOpcode::get<SMSG_QUESTGIVER_QUEST_DETAILS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTGIVER_QUEST_DETAILS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_REQUEST_ITEMS* ServerOpcode::get_if<SMSG_QUESTGIVER_REQUEST_ITEMS>() {
    if (opcode == Opcode::SMSG_QUESTGIVER_REQUEST_ITEMS) {
        return &SMSG_QUESTGIVER_REQUEST_ITEMS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_REQUEST_ITEMS& ServerOpcode::get<SMSG_QUESTGIVER_REQUEST_ITEMS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTGIVER_REQUEST_ITEMS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_OFFER_REWARD* ServerOpcode::get_if<SMSG_QUESTGIVER_OFFER_REWARD>() {
    if (opcode == Opcode::SMSG_QUESTGIVER_OFFER_REWARD) {
        return &SMSG_QUESTGIVER_OFFER_REWARD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_OFFER_REWARD& ServerOpcode::get<SMSG_QUESTGIVER_OFFER_REWARD>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTGIVER_OFFER_REWARD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_INVALID* ServerOpcode::get_if<SMSG_QUESTGIVER_QUEST_INVALID>() {
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_INVALID) {
        return &SMSG_QUESTGIVER_QUEST_INVALID;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_INVALID& ServerOpcode::get<SMSG_QUESTGIVER_QUEST_INVALID>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTGIVER_QUEST_INVALID>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_COMPLETE* ServerOpcode::get_if<SMSG_QUESTGIVER_QUEST_COMPLETE>() {
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_COMPLETE) {
        return &SMSG_QUESTGIVER_QUEST_COMPLETE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_COMPLETE& ServerOpcode::get<SMSG_QUESTGIVER_QUEST_COMPLETE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTGIVER_QUEST_COMPLETE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_FAILED* ServerOpcode::get_if<SMSG_QUESTGIVER_QUEST_FAILED>() {
    if (opcode == Opcode::SMSG_QUESTGIVER_QUEST_FAILED) {
        return &SMSG_QUESTGIVER_QUEST_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_QUEST_FAILED& ServerOpcode::get<SMSG_QUESTGIVER_QUEST_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTGIVER_QUEST_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTLOG_FULL* ServerOpcode::get_if<SMSG_QUESTLOG_FULL>() {
    if (opcode == Opcode::SMSG_QUESTLOG_FULL) {
        return &SMSG_QUESTLOG_FULL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTLOG_FULL& ServerOpcode::get<SMSG_QUESTLOG_FULL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTLOG_FULL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_FAILED* ServerOpcode::get_if<SMSG_QUESTUPDATE_FAILED>() {
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILED) {
        return &SMSG_QUESTUPDATE_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_FAILED& ServerOpcode::get<SMSG_QUESTUPDATE_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTUPDATE_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_FAILEDTIMER* ServerOpcode::get_if<SMSG_QUESTUPDATE_FAILEDTIMER>() {
    if (opcode == Opcode::SMSG_QUESTUPDATE_FAILEDTIMER) {
        return &SMSG_QUESTUPDATE_FAILEDTIMER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_FAILEDTIMER& ServerOpcode::get<SMSG_QUESTUPDATE_FAILEDTIMER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTUPDATE_FAILEDTIMER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_COMPLETE* ServerOpcode::get_if<SMSG_QUESTUPDATE_COMPLETE>() {
    if (opcode == Opcode::SMSG_QUESTUPDATE_COMPLETE) {
        return &SMSG_QUESTUPDATE_COMPLETE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_COMPLETE& ServerOpcode::get<SMSG_QUESTUPDATE_COMPLETE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTUPDATE_COMPLETE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_KILL* ServerOpcode::get_if<SMSG_QUESTUPDATE_ADD_KILL>() {
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_KILL) {
        return &SMSG_QUESTUPDATE_ADD_KILL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_KILL& ServerOpcode::get<SMSG_QUESTUPDATE_ADD_KILL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTUPDATE_ADD_KILL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_ITEM* ServerOpcode::get_if<SMSG_QUESTUPDATE_ADD_ITEM>() {
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_ITEM) {
        return &SMSG_QUESTUPDATE_ADD_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_ITEM& ServerOpcode::get<SMSG_QUESTUPDATE_ADD_ITEM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTUPDATE_ADD_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_CONFIRM_ACCEPT* ServerOpcode::get_if<SMSG_QUEST_CONFIRM_ACCEPT>() {
    if (opcode == Opcode::SMSG_QUEST_CONFIRM_ACCEPT) {
        return &SMSG_QUEST_CONFIRM_ACCEPT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_CONFIRM_ACCEPT& ServerOpcode::get<SMSG_QUEST_CONFIRM_ACCEPT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUEST_CONFIRM_ACCEPT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LIST_INVENTORY* ServerOpcode::get_if<SMSG_LIST_INVENTORY>() {
    if (opcode == Opcode::SMSG_LIST_INVENTORY) {
        return &SMSG_LIST_INVENTORY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LIST_INVENTORY& ServerOpcode::get<SMSG_LIST_INVENTORY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LIST_INVENTORY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SELL_ITEM* ServerOpcode::get_if<SMSG_SELL_ITEM>() {
    if (opcode == Opcode::SMSG_SELL_ITEM) {
        return &SMSG_SELL_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SELL_ITEM& ServerOpcode::get<SMSG_SELL_ITEM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SELL_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_ITEM* ServerOpcode::get_if<SMSG_BUY_ITEM>() {
    if (opcode == Opcode::SMSG_BUY_ITEM) {
        return &SMSG_BUY_ITEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_ITEM& ServerOpcode::get<SMSG_BUY_ITEM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BUY_ITEM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_FAILED* ServerOpcode::get_if<SMSG_BUY_FAILED>() {
    if (opcode == Opcode::SMSG_BUY_FAILED) {
        return &SMSG_BUY_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_FAILED& ServerOpcode::get<SMSG_BUY_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BUY_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOWTAXINODES* ServerOpcode::get_if<SMSG_SHOWTAXINODES>() {
    if (opcode == Opcode::SMSG_SHOWTAXINODES) {
        return &SMSG_SHOWTAXINODES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOWTAXINODES& ServerOpcode::get<SMSG_SHOWTAXINODES>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SHOWTAXINODES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TAXINODE_STATUS* ServerOpcode::get_if<SMSG_TAXINODE_STATUS>() {
    if (opcode == Opcode::SMSG_TAXINODE_STATUS) {
        return &SMSG_TAXINODE_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TAXINODE_STATUS& ServerOpcode::get<SMSG_TAXINODE_STATUS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TAXINODE_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACTIVATETAXIREPLY* ServerOpcode::get_if<SMSG_ACTIVATETAXIREPLY>() {
    if (opcode == Opcode::SMSG_ACTIVATETAXIREPLY) {
        return &SMSG_ACTIVATETAXIREPLY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACTIVATETAXIREPLY& ServerOpcode::get<SMSG_ACTIVATETAXIREPLY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ACTIVATETAXIREPLY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NEW_TAXI_PATH* ServerOpcode::get_if<SMSG_NEW_TAXI_PATH>() {
    if (opcode == Opcode::SMSG_NEW_TAXI_PATH) {
        return &SMSG_NEW_TAXI_PATH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NEW_TAXI_PATH& ServerOpcode::get<SMSG_NEW_TAXI_PATH>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_NEW_TAXI_PATH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_LIST* ServerOpcode::get_if<SMSG_TRAINER_LIST>() {
    if (opcode == Opcode::SMSG_TRAINER_LIST) {
        return &SMSG_TRAINER_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_LIST& ServerOpcode::get<SMSG_TRAINER_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TRAINER_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_BUY_SUCCEEDED* ServerOpcode::get_if<SMSG_TRAINER_BUY_SUCCEEDED>() {
    if (opcode == Opcode::SMSG_TRAINER_BUY_SUCCEEDED) {
        return &SMSG_TRAINER_BUY_SUCCEEDED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_BUY_SUCCEEDED& ServerOpcode::get<SMSG_TRAINER_BUY_SUCCEEDED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TRAINER_BUY_SUCCEEDED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_BUY_FAILED* ServerOpcode::get_if<SMSG_TRAINER_BUY_FAILED>() {
    if (opcode == Opcode::SMSG_TRAINER_BUY_FAILED) {
        return &SMSG_TRAINER_BUY_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRAINER_BUY_FAILED& ServerOpcode::get<SMSG_TRAINER_BUY_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TRAINER_BUY_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOW_BANK* ServerOpcode::get_if<SMSG_SHOW_BANK>() {
    if (opcode == Opcode::SMSG_SHOW_BANK) {
        return &SMSG_SHOW_BANK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOW_BANK& ServerOpcode::get<SMSG_SHOW_BANK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SHOW_BANK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_BANK_SLOT_RESULT* ServerOpcode::get_if<SMSG_BUY_BANK_SLOT_RESULT>() {
    if (opcode == Opcode::SMSG_BUY_BANK_SLOT_RESULT) {
        return &SMSG_BUY_BANK_SLOT_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BUY_BANK_SLOT_RESULT& ServerOpcode::get<SMSG_BUY_BANK_SLOT_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BUY_BANK_SLOT_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SHOWLIST* ServerOpcode::get_if<SMSG_PETITION_SHOWLIST>() {
    if (opcode == Opcode::SMSG_PETITION_SHOWLIST) {
        return &SMSG_PETITION_SHOWLIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SHOWLIST& ServerOpcode::get<SMSG_PETITION_SHOWLIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PETITION_SHOWLIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SHOW_SIGNATURES* ServerOpcode::get_if<SMSG_PETITION_SHOW_SIGNATURES>() {
    if (opcode == Opcode::SMSG_PETITION_SHOW_SIGNATURES) {
        return &SMSG_PETITION_SHOW_SIGNATURES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SHOW_SIGNATURES& ServerOpcode::get<SMSG_PETITION_SHOW_SIGNATURES>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PETITION_SHOW_SIGNATURES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SIGN_RESULTS* ServerOpcode::get_if<SMSG_PETITION_SIGN_RESULTS>() {
    if (opcode == Opcode::SMSG_PETITION_SIGN_RESULTS) {
        return &SMSG_PETITION_SIGN_RESULTS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_SIGN_RESULTS& ServerOpcode::get<SMSG_PETITION_SIGN_RESULTS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PETITION_SIGN_RESULTS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_DECLINE* ServerOpcode::get_if<MSG_PETITION_DECLINE>() {
    if (opcode == Opcode::MSG_PETITION_DECLINE) {
        return &MSG_PETITION_DECLINE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_DECLINE& ServerOpcode::get<MSG_PETITION_DECLINE>() {
    auto p = ServerOpcode::get_if<wrath::MSG_PETITION_DECLINE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TURN_IN_PETITION_RESULTS* ServerOpcode::get_if<SMSG_TURN_IN_PETITION_RESULTS>() {
    if (opcode == Opcode::SMSG_TURN_IN_PETITION_RESULTS) {
        return &SMSG_TURN_IN_PETITION_RESULTS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TURN_IN_PETITION_RESULTS& ServerOpcode::get<SMSG_TURN_IN_PETITION_RESULTS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TURN_IN_PETITION_RESULTS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_PETITION_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_PETITION_QUERY_RESPONSE) {
        return &SMSG_PETITION_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PETITION_QUERY_RESPONSE& ServerOpcode::get<SMSG_PETITION_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PETITION_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FISH_NOT_HOOKED* ServerOpcode::get_if<SMSG_FISH_NOT_HOOKED>() {
    if (opcode == Opcode::SMSG_FISH_NOT_HOOKED) {
        return &SMSG_FISH_NOT_HOOKED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FISH_NOT_HOOKED& ServerOpcode::get<SMSG_FISH_NOT_HOOKED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FISH_NOT_HOOKED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FISH_ESCAPED* ServerOpcode::get_if<SMSG_FISH_ESCAPED>() {
    if (opcode == Opcode::SMSG_FISH_ESCAPED) {
        return &SMSG_FISH_ESCAPED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FISH_ESCAPED& ServerOpcode::get<SMSG_FISH_ESCAPED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FISH_ESCAPED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NOTIFICATION* ServerOpcode::get_if<SMSG_NOTIFICATION>() {
    if (opcode == Opcode::SMSG_NOTIFICATION) {
        return &SMSG_NOTIFICATION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_NOTIFICATION& ServerOpcode::get<SMSG_NOTIFICATION>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_NOTIFICATION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYED_TIME* ServerOpcode::get_if<SMSG_PLAYED_TIME>() {
    if (opcode == Opcode::SMSG_PLAYED_TIME) {
        return &SMSG_PLAYED_TIME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYED_TIME& ServerOpcode::get<SMSG_PLAYED_TIME>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PLAYED_TIME>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUERY_TIME_RESPONSE* ServerOpcode::get_if<SMSG_QUERY_TIME_RESPONSE>() {
    if (opcode == Opcode::SMSG_QUERY_TIME_RESPONSE) {
        return &SMSG_QUERY_TIME_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUERY_TIME_RESPONSE& ServerOpcode::get<SMSG_QUERY_TIME_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUERY_TIME_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOG_XPGAIN* ServerOpcode::get_if<SMSG_LOG_XPGAIN>() {
    if (opcode == Opcode::SMSG_LOG_XPGAIN) {
        return &SMSG_LOG_XPGAIN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOG_XPGAIN& ServerOpcode::get<SMSG_LOG_XPGAIN>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOG_XPGAIN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LEVELUP_INFO* ServerOpcode::get_if<SMSG_LEVELUP_INFO>() {
    if (opcode == Opcode::SMSG_LEVELUP_INFO) {
        return &SMSG_LEVELUP_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LEVELUP_INFO& ServerOpcode::get<SMSG_LEVELUP_INFO>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LEVELUP_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MINIMAP_PING_Server* ServerOpcode::get_if<MSG_MINIMAP_PING_Server>() {
    if (opcode == Opcode::MSG_MINIMAP_PING) {
        return &MSG_MINIMAP_PING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MINIMAP_PING_Server& ServerOpcode::get<MSG_MINIMAP_PING_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MINIMAP_PING_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENCHANTMENTLOG* ServerOpcode::get_if<SMSG_ENCHANTMENTLOG>() {
    if (opcode == Opcode::SMSG_ENCHANTMENTLOG) {
        return &SMSG_ENCHANTMENTLOG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENCHANTMENTLOG& ServerOpcode::get<SMSG_ENCHANTMENTLOG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ENCHANTMENTLOG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_START_MIRROR_TIMER* ServerOpcode::get_if<SMSG_START_MIRROR_TIMER>() {
    if (opcode == Opcode::SMSG_START_MIRROR_TIMER) {
        return &SMSG_START_MIRROR_TIMER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_START_MIRROR_TIMER& ServerOpcode::get<SMSG_START_MIRROR_TIMER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_START_MIRROR_TIMER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PAUSE_MIRROR_TIMER* ServerOpcode::get_if<SMSG_PAUSE_MIRROR_TIMER>() {
    if (opcode == Opcode::SMSG_PAUSE_MIRROR_TIMER) {
        return &SMSG_PAUSE_MIRROR_TIMER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PAUSE_MIRROR_TIMER& ServerOpcode::get<SMSG_PAUSE_MIRROR_TIMER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PAUSE_MIRROR_TIMER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STOP_MIRROR_TIMER* ServerOpcode::get_if<SMSG_STOP_MIRROR_TIMER>() {
    if (opcode == Opcode::SMSG_STOP_MIRROR_TIMER) {
        return &SMSG_STOP_MIRROR_TIMER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STOP_MIRROR_TIMER& ServerOpcode::get<SMSG_STOP_MIRROR_TIMER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_STOP_MIRROR_TIMER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PONG* ServerOpcode::get_if<SMSG_PONG>() {
    if (opcode == Opcode::SMSG_PONG) {
        return &SMSG_PONG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PONG& ServerOpcode::get<SMSG_PONG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PONG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLEAR_COOLDOWN* ServerOpcode::get_if<SMSG_CLEAR_COOLDOWN>() {
    if (opcode == Opcode::SMSG_CLEAR_COOLDOWN) {
        return &SMSG_CLEAR_COOLDOWN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLEAR_COOLDOWN& ServerOpcode::get<SMSG_CLEAR_COOLDOWN>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CLEAR_COOLDOWN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_PAGETEXT* ServerOpcode::get_if<SMSG_GAMEOBJECT_PAGETEXT>() {
    if (opcode == Opcode::SMSG_GAMEOBJECT_PAGETEXT) {
        return &SMSG_GAMEOBJECT_PAGETEXT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_PAGETEXT& ServerOpcode::get<SMSG_GAMEOBJECT_PAGETEXT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GAMEOBJECT_PAGETEXT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_DELAYED* ServerOpcode::get_if<SMSG_SPELL_DELAYED>() {
    if (opcode == Opcode::SMSG_SPELL_DELAYED) {
        return &SMSG_SPELL_DELAYED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_DELAYED& ServerOpcode::get<SMSG_SPELL_DELAYED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELL_DELAYED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_POI_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_QUEST_POI_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_QUEST_POI_QUERY_RESPONSE) {
        return &SMSG_QUEST_POI_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_POI_QUERY_RESPONSE& ServerOpcode::get<SMSG_QUEST_POI_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUEST_POI_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_TIME_UPDATE* ServerOpcode::get_if<SMSG_ITEM_TIME_UPDATE>() {
    if (opcode == Opcode::SMSG_ITEM_TIME_UPDATE) {
        return &SMSG_ITEM_TIME_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_TIME_UPDATE& ServerOpcode::get<SMSG_ITEM_TIME_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ITEM_TIME_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE* ServerOpcode::get_if<SMSG_ITEM_ENCHANT_TIME_UPDATE>() {
    if (opcode == Opcode::SMSG_ITEM_ENCHANT_TIME_UPDATE) {
        return &SMSG_ITEM_ENCHANT_TIME_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE& ServerOpcode::get<SMSG_ITEM_ENCHANT_TIME_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ITEM_ENCHANT_TIME_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUTH_CHALLENGE* ServerOpcode::get_if<SMSG_AUTH_CHALLENGE>() {
    if (opcode == Opcode::SMSG_AUTH_CHALLENGE) {
        return &SMSG_AUTH_CHALLENGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUTH_CHALLENGE& ServerOpcode::get<SMSG_AUTH_CHALLENGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AUTH_CHALLENGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUTH_RESPONSE* ServerOpcode::get_if<SMSG_AUTH_RESPONSE>() {
    if (opcode == Opcode::SMSG_AUTH_RESPONSE) {
        return &SMSG_AUTH_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUTH_RESPONSE& ServerOpcode::get<SMSG_AUTH_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AUTH_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SAVE_GUILD_EMBLEM_Server* ServerOpcode::get_if<MSG_SAVE_GUILD_EMBLEM_Server>() {
    if (opcode == Opcode::MSG_SAVE_GUILD_EMBLEM) {
        return &MSG_SAVE_GUILD_EMBLEM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SAVE_GUILD_EMBLEM_Server& ServerOpcode::get<MSG_SAVE_GUILD_EMBLEM_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_SAVE_GUILD_EMBLEM_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TABARDVENDOR_ACTIVATE* ServerOpcode::get_if<MSG_TABARDVENDOR_ACTIVATE>() {
    if (opcode == Opcode::MSG_TABARDVENDOR_ACTIVATE) {
        return &MSG_TABARDVENDOR_ACTIVATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TABARDVENDOR_ACTIVATE& ServerOpcode::get<MSG_TABARDVENDOR_ACTIVATE>() {
    auto p = ServerOpcode::get_if<wrath::MSG_TABARDVENDOR_ACTIVATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SPELL_VISUAL* ServerOpcode::get_if<SMSG_PLAY_SPELL_VISUAL>() {
    if (opcode == Opcode::SMSG_PLAY_SPELL_VISUAL) {
        return &SMSG_PLAY_SPELL_VISUAL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SPELL_VISUAL& ServerOpcode::get<SMSG_PLAY_SPELL_VISUAL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PLAY_SPELL_VISUAL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTYKILLLOG* ServerOpcode::get_if<SMSG_PARTYKILLLOG>() {
    if (opcode == Opcode::SMSG_PARTYKILLLOG) {
        return &SMSG_PARTYKILLLOG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTYKILLLOG& ServerOpcode::get<SMSG_PARTYKILLLOG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PARTYKILLLOG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPRESSED_UPDATE_OBJECT* ServerOpcode::get_if<SMSG_COMPRESSED_UPDATE_OBJECT>() {
    if (opcode == Opcode::SMSG_COMPRESSED_UPDATE_OBJECT) {
        return &SMSG_COMPRESSED_UPDATE_OBJECT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPRESSED_UPDATE_OBJECT& ServerOpcode::get<SMSG_COMPRESSED_UPDATE_OBJECT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_COMPRESSED_UPDATE_OBJECT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SPELL_IMPACT* ServerOpcode::get_if<SMSG_PLAY_SPELL_IMPACT>() {
    if (opcode == Opcode::SMSG_PLAY_SPELL_IMPACT) {
        return &SMSG_PLAY_SPELL_IMPACT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SPELL_IMPACT& ServerOpcode::get<SMSG_PLAY_SPELL_IMPACT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PLAY_SPELL_IMPACT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EXPLORATION_EXPERIENCE* ServerOpcode::get_if<SMSG_EXPLORATION_EXPERIENCE>() {
    if (opcode == Opcode::SMSG_EXPLORATION_EXPERIENCE) {
        return &SMSG_EXPLORATION_EXPERIENCE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EXPLORATION_EXPERIENCE& ServerOpcode::get<SMSG_EXPLORATION_EXPERIENCE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_EXPLORATION_EXPERIENCE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RANDOM_ROLL_Server* ServerOpcode::get_if<MSG_RANDOM_ROLL_Server>() {
    if (opcode == Opcode::MSG_RANDOM_ROLL) {
        return &MSG_RANDOM_ROLL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RANDOM_ROLL_Server& ServerOpcode::get<MSG_RANDOM_ROLL_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_RANDOM_ROLL_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG* ServerOpcode::get_if<SMSG_ENVIRONMENTAL_DAMAGE_LOG>() {
    if (opcode == Opcode::SMSG_ENVIRONMENTAL_DAMAGE_LOG) {
        return &SMSG_ENVIRONMENTAL_DAMAGE_LOG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG& ServerOpcode::get<SMSG_ENVIRONMENTAL_DAMAGE_LOG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ENVIRONMENTAL_DAMAGE_LOG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PLAYER_REWARD* ServerOpcode::get_if<SMSG_LFG_PLAYER_REWARD>() {
    if (opcode == Opcode::SMSG_LFG_PLAYER_REWARD) {
        return &SMSG_LFG_PLAYER_REWARD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PLAYER_REWARD& ServerOpcode::get<SMSG_LFG_PLAYER_REWARD>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_PLAYER_REWARD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_TELEPORT_DENIED* ServerOpcode::get_if<SMSG_LFG_TELEPORT_DENIED>() {
    if (opcode == Opcode::SMSG_LFG_TELEPORT_DENIED) {
        return &SMSG_LFG_TELEPORT_DENIED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_TELEPORT_DENIED& ServerOpcode::get<SMSG_LFG_TELEPORT_DENIED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_TELEPORT_DENIED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REMOVED_SPELL* ServerOpcode::get_if<SMSG_REMOVED_SPELL>() {
    if (opcode == Opcode::SMSG_REMOVED_SPELL) {
        return &SMSG_REMOVED_SPELL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REMOVED_SPELL& ServerOpcode::get<SMSG_REMOVED_SPELL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_REMOVED_SPELL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_CREATE* ServerOpcode::get_if<SMSG_GMTICKET_CREATE>() {
    if (opcode == Opcode::SMSG_GMTICKET_CREATE) {
        return &SMSG_GMTICKET_CREATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_CREATE& ServerOpcode::get<SMSG_GMTICKET_CREATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GMTICKET_CREATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_UPDATETEXT* ServerOpcode::get_if<SMSG_GMTICKET_UPDATETEXT>() {
    if (opcode == Opcode::SMSG_GMTICKET_UPDATETEXT) {
        return &SMSG_GMTICKET_UPDATETEXT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_UPDATETEXT& ServerOpcode::get<SMSG_GMTICKET_UPDATETEXT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GMTICKET_UPDATETEXT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACCOUNT_DATA_TIMES* ServerOpcode::get_if<SMSG_ACCOUNT_DATA_TIMES>() {
    if (opcode == Opcode::SMSG_ACCOUNT_DATA_TIMES) {
        return &SMSG_ACCOUNT_DATA_TIMES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACCOUNT_DATA_TIMES& ServerOpcode::get<SMSG_ACCOUNT_DATA_TIMES>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ACCOUNT_DATA_TIMES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_ACCOUNT_DATA* ServerOpcode::get_if<SMSG_UPDATE_ACCOUNT_DATA>() {
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA) {
        return &SMSG_UPDATE_ACCOUNT_DATA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_ACCOUNT_DATA& ServerOpcode::get<SMSG_UPDATE_ACCOUNT_DATA>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_UPDATE_ACCOUNT_DATA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_GETTICKET* ServerOpcode::get_if<SMSG_GMTICKET_GETTICKET>() {
    if (opcode == Opcode::SMSG_GMTICKET_GETTICKET) {
        return &SMSG_GMTICKET_GETTICKET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_GETTICKET& ServerOpcode::get<SMSG_GMTICKET_GETTICKET>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GMTICKET_GETTICKET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT* ServerOpcode::get_if<SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT>() {
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) {
        return &SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT& ServerOpcode::get<SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM* ServerOpcode::get_if<SMSG_GAMEOBJECT_DESPAWN_ANIM>() {
    if (opcode == Opcode::SMSG_GAMEOBJECT_DESPAWN_ANIM) {
        return &SMSG_GAMEOBJECT_DESPAWN_ANIM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM& ServerOpcode::get<SMSG_GAMEOBJECT_DESPAWN_ANIM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GAMEOBJECT_DESPAWN_ANIM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CORPSE_QUERY_Server* ServerOpcode::get_if<MSG_CORPSE_QUERY_Server>() {
    if (opcode == Opcode::MSG_CORPSE_QUERY) {
        return &MSG_CORPSE_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_CORPSE_QUERY_Server& ServerOpcode::get<MSG_CORPSE_QUERY_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_CORPSE_QUERY_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_DELETETICKET* ServerOpcode::get_if<SMSG_GMTICKET_DELETETICKET>() {
    if (opcode == Opcode::SMSG_GMTICKET_DELETETICKET) {
        return &SMSG_GMTICKET_DELETETICKET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_DELETETICKET& ServerOpcode::get<SMSG_GMTICKET_DELETETICKET>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GMTICKET_DELETETICKET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_WRONG_FACTION* ServerOpcode::get_if<SMSG_CHAT_WRONG_FACTION>() {
    if (opcode == Opcode::SMSG_CHAT_WRONG_FACTION) {
        return &SMSG_CHAT_WRONG_FACTION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_WRONG_FACTION& ServerOpcode::get<SMSG_CHAT_WRONG_FACTION>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHAT_WRONG_FACTION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_SYSTEMSTATUS* ServerOpcode::get_if<SMSG_GMTICKET_SYSTEMSTATUS>() {
    if (opcode == Opcode::SMSG_GMTICKET_SYSTEMSTATUS) {
        return &SMSG_GMTICKET_SYSTEMSTATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMTICKET_SYSTEMSTATUS& ServerOpcode::get<SMSG_GMTICKET_SYSTEMSTATUS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GMTICKET_SYSTEMSTATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_FORCE_REMOVE* ServerOpcode::get_if<SMSG_QUEST_FORCE_REMOVE>() {
    if (opcode == Opcode::SMSG_QUEST_FORCE_REMOVE) {
        return &SMSG_QUEST_FORCE_REMOVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUEST_FORCE_REMOVE& ServerOpcode::get<SMSG_QUEST_FORCE_REMOVE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUEST_FORCE_REMOVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPIRIT_HEALER_CONFIRM* ServerOpcode::get_if<SMSG_SPIRIT_HEALER_CONFIRM>() {
    if (opcode == Opcode::SMSG_SPIRIT_HEALER_CONFIRM) {
        return &SMSG_SPIRIT_HEALER_CONFIRM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPIRIT_HEALER_CONFIRM& ServerOpcode::get<SMSG_SPIRIT_HEALER_CONFIRM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPIRIT_HEALER_CONFIRM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_POI* ServerOpcode::get_if<SMSG_GOSSIP_POI>() {
    if (opcode == Opcode::SMSG_GOSSIP_POI) {
        return &SMSG_GOSSIP_POI;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GOSSIP_POI& ServerOpcode::get<SMSG_GOSSIP_POI>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GOSSIP_POI>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGIN_VERIFY_WORLD* ServerOpcode::get_if<SMSG_LOGIN_VERIFY_WORLD>() {
    if (opcode == Opcode::SMSG_LOGIN_VERIFY_WORLD) {
        return &SMSG_LOGIN_VERIFY_WORLD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOGIN_VERIFY_WORLD& ServerOpcode::get<SMSG_LOGIN_VERIFY_WORLD>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOGIN_VERIFY_WORLD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SEND_MAIL_RESULT* ServerOpcode::get_if<SMSG_SEND_MAIL_RESULT>() {
    if (opcode == Opcode::SMSG_SEND_MAIL_RESULT) {
        return &SMSG_SEND_MAIL_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SEND_MAIL_RESULT& ServerOpcode::get<SMSG_SEND_MAIL_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SEND_MAIL_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MAIL_LIST_RESULT* ServerOpcode::get_if<SMSG_MAIL_LIST_RESULT>() {
    if (opcode == Opcode::SMSG_MAIL_LIST_RESULT) {
        return &SMSG_MAIL_LIST_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MAIL_LIST_RESULT& ServerOpcode::get<SMSG_MAIL_LIST_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MAIL_LIST_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_LIST* ServerOpcode::get_if<SMSG_BATTLEFIELD_LIST>() {
    if (opcode == Opcode::SMSG_BATTLEFIELD_LIST) {
        return &SMSG_BATTLEFIELD_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_LIST& ServerOpcode::get<SMSG_BATTLEFIELD_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEFIELD_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_ITEM_TEXT_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_ITEM_TEXT_QUERY_RESPONSE) {
        return &SMSG_ITEM_TEXT_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE& ServerOpcode::get<SMSG_ITEM_TEXT_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ITEM_TEXT_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLLOGMISS* ServerOpcode::get_if<SMSG_SPELLLOGMISS>() {
    if (opcode == Opcode::SMSG_SPELLLOGMISS) {
        return &SMSG_SPELLLOGMISS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLLOGMISS& ServerOpcode::get<SMSG_SPELLLOGMISS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELLLOGMISS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLLOGEXECUTE* ServerOpcode::get_if<SMSG_SPELLLOGEXECUTE>() {
    if (opcode == Opcode::SMSG_SPELLLOGEXECUTE) {
        return &SMSG_SPELLLOGEXECUTE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLLOGEXECUTE& ServerOpcode::get<SMSG_SPELLLOGEXECUTE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELLLOGEXECUTE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PERIODICAURALOG* ServerOpcode::get_if<SMSG_PERIODICAURALOG>() {
    if (opcode == Opcode::SMSG_PERIODICAURALOG) {
        return &SMSG_PERIODICAURALOG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PERIODICAURALOG& ServerOpcode::get<SMSG_PERIODICAURALOG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PERIODICAURALOG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLDAMAGESHIELD* ServerOpcode::get_if<SMSG_SPELLDAMAGESHIELD>() {
    if (opcode == Opcode::SMSG_SPELLDAMAGESHIELD) {
        return &SMSG_SPELLDAMAGESHIELD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLDAMAGESHIELD& ServerOpcode::get<SMSG_SPELLDAMAGESHIELD>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELLDAMAGESHIELD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLNONMELEEDAMAGELOG* ServerOpcode::get_if<SMSG_SPELLNONMELEEDAMAGELOG>() {
    if (opcode == Opcode::SMSG_SPELLNONMELEEDAMAGELOG) {
        return &SMSG_SPELLNONMELEEDAMAGELOG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLNONMELEEDAMAGELOG& ServerOpcode::get<SMSG_SPELLNONMELEEDAMAGELOG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELLNONMELEEDAMAGELOG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESURRECT_FAILED* ServerOpcode::get_if<SMSG_RESURRECT_FAILED>() {
    if (opcode == Opcode::SMSG_RESURRECT_FAILED) {
        return &SMSG_RESURRECT_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESURRECT_FAILED& ServerOpcode::get<SMSG_RESURRECT_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_RESURRECT_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ZONE_UNDER_ATTACK* ServerOpcode::get_if<SMSG_ZONE_UNDER_ATTACK>() {
    if (opcode == Opcode::SMSG_ZONE_UNDER_ATTACK) {
        return &SMSG_ZONE_UNDER_ATTACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ZONE_UNDER_ATTACK& ServerOpcode::get<SMSG_ZONE_UNDER_ATTACK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ZONE_UNDER_ATTACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_AUCTION_HELLO_Server* ServerOpcode::get_if<MSG_AUCTION_HELLO_Server>() {
    if (opcode == Opcode::MSG_AUCTION_HELLO) {
        return &MSG_AUCTION_HELLO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_AUCTION_HELLO_Server& ServerOpcode::get<MSG_AUCTION_HELLO_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_AUCTION_HELLO_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_COMMAND_RESULT* ServerOpcode::get_if<SMSG_AUCTION_COMMAND_RESULT>() {
    if (opcode == Opcode::SMSG_AUCTION_COMMAND_RESULT) {
        return &SMSG_AUCTION_COMMAND_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_COMMAND_RESULT& ServerOpcode::get<SMSG_AUCTION_COMMAND_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AUCTION_COMMAND_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_LIST_RESULT* ServerOpcode::get_if<SMSG_AUCTION_LIST_RESULT>() {
    if (opcode == Opcode::SMSG_AUCTION_LIST_RESULT) {
        return &SMSG_AUCTION_LIST_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_LIST_RESULT& ServerOpcode::get<SMSG_AUCTION_LIST_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AUCTION_LIST_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_OWNER_LIST_RESULT* ServerOpcode::get_if<SMSG_AUCTION_OWNER_LIST_RESULT>() {
    if (opcode == Opcode::SMSG_AUCTION_OWNER_LIST_RESULT) {
        return &SMSG_AUCTION_OWNER_LIST_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_OWNER_LIST_RESULT& ServerOpcode::get<SMSG_AUCTION_OWNER_LIST_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AUCTION_OWNER_LIST_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_BIDDER_NOTIFICATION* ServerOpcode::get_if<SMSG_AUCTION_BIDDER_NOTIFICATION>() {
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_NOTIFICATION) {
        return &SMSG_AUCTION_BIDDER_NOTIFICATION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_BIDDER_NOTIFICATION& ServerOpcode::get<SMSG_AUCTION_BIDDER_NOTIFICATION>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AUCTION_BIDDER_NOTIFICATION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_OWNER_NOTIFICATION* ServerOpcode::get_if<SMSG_AUCTION_OWNER_NOTIFICATION>() {
    if (opcode == Opcode::SMSG_AUCTION_OWNER_NOTIFICATION) {
        return &SMSG_AUCTION_OWNER_NOTIFICATION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_OWNER_NOTIFICATION& ServerOpcode::get<SMSG_AUCTION_OWNER_NOTIFICATION>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AUCTION_OWNER_NOTIFICATION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PROCRESIST* ServerOpcode::get_if<SMSG_PROCRESIST>() {
    if (opcode == Opcode::SMSG_PROCRESIST) {
        return &SMSG_PROCRESIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PROCRESIST& ServerOpcode::get<SMSG_PROCRESIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PROCRESIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DISPEL_FAILED* ServerOpcode::get_if<SMSG_DISPEL_FAILED>() {
    if (opcode == Opcode::SMSG_DISPEL_FAILED) {
        return &SMSG_DISPEL_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DISPEL_FAILED& ServerOpcode::get<SMSG_DISPEL_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DISPEL_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLORDAMAGE_IMMUNE* ServerOpcode::get_if<SMSG_SPELLORDAMAGE_IMMUNE>() {
    if (opcode == Opcode::SMSG_SPELLORDAMAGE_IMMUNE) {
        return &SMSG_SPELLORDAMAGE_IMMUNE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLORDAMAGE_IMMUNE& ServerOpcode::get<SMSG_SPELLORDAMAGE_IMMUNE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELLORDAMAGE_IMMUNE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_BIDDER_LIST_RESULT* ServerOpcode::get_if<SMSG_AUCTION_BIDDER_LIST_RESULT>() {
    if (opcode == Opcode::SMSG_AUCTION_BIDDER_LIST_RESULT) {
        return &SMSG_AUCTION_BIDDER_LIST_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_BIDDER_LIST_RESULT& ServerOpcode::get<SMSG_AUCTION_BIDDER_LIST_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AUCTION_BIDDER_LIST_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FLAT_SPELL_MODIFIER* ServerOpcode::get_if<SMSG_SET_FLAT_SPELL_MODIFIER>() {
    if (opcode == Opcode::SMSG_SET_FLAT_SPELL_MODIFIER) {
        return &SMSG_SET_FLAT_SPELL_MODIFIER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FLAT_SPELL_MODIFIER& ServerOpcode::get<SMSG_SET_FLAT_SPELL_MODIFIER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SET_FLAT_SPELL_MODIFIER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PCT_SPELL_MODIFIER* ServerOpcode::get_if<SMSG_SET_PCT_SPELL_MODIFIER>() {
    if (opcode == Opcode::SMSG_SET_PCT_SPELL_MODIFIER) {
        return &SMSG_SET_PCT_SPELL_MODIFIER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PCT_SPELL_MODIFIER& ServerOpcode::get<SMSG_SET_PCT_SPELL_MODIFIER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SET_PCT_SPELL_MODIFIER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_RECLAIM_DELAY* ServerOpcode::get_if<SMSG_CORPSE_RECLAIM_DELAY>() {
    if (opcode == Opcode::SMSG_CORPSE_RECLAIM_DELAY) {
        return &SMSG_CORPSE_RECLAIM_DELAY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_RECLAIM_DELAY& ServerOpcode::get<SMSG_CORPSE_RECLAIM_DELAY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CORPSE_RECLAIM_DELAY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_LIST_STABLED_PETS_Server* ServerOpcode::get_if<MSG_LIST_STABLED_PETS_Server>() {
    if (opcode == Opcode::MSG_LIST_STABLED_PETS) {
        return &MSG_LIST_STABLED_PETS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_LIST_STABLED_PETS_Server& ServerOpcode::get<MSG_LIST_STABLED_PETS_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_LIST_STABLED_PETS_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STABLE_RESULT* ServerOpcode::get_if<SMSG_STABLE_RESULT>() {
    if (opcode == Opcode::SMSG_STABLE_RESULT) {
        return &SMSG_STABLE_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STABLE_RESULT& ServerOpcode::get<SMSG_STABLE_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_STABLE_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUEST_PUSH_RESULT* ServerOpcode::get_if<MSG_QUEST_PUSH_RESULT>() {
    if (opcode == Opcode::MSG_QUEST_PUSH_RESULT) {
        return &MSG_QUEST_PUSH_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUEST_PUSH_RESULT& ServerOpcode::get<MSG_QUEST_PUSH_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::MSG_QUEST_PUSH_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_MUSIC* ServerOpcode::get_if<SMSG_PLAY_MUSIC>() {
    if (opcode == Opcode::SMSG_PLAY_MUSIC) {
        return &SMSG_PLAY_MUSIC;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_MUSIC& ServerOpcode::get<SMSG_PLAY_MUSIC>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PLAY_MUSIC>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_OBJECT_SOUND* ServerOpcode::get_if<SMSG_PLAY_OBJECT_SOUND>() {
    if (opcode == Opcode::SMSG_PLAY_OBJECT_SOUND) {
        return &SMSG_PLAY_OBJECT_SOUND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_OBJECT_SOUND& ServerOpcode::get<SMSG_PLAY_OBJECT_SOUND>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PLAY_OBJECT_SOUND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLDISPELLOG* ServerOpcode::get_if<SMSG_SPELLDISPELLOG>() {
    if (opcode == Opcode::SMSG_SPELLDISPELLOG) {
        return &SMSG_SPELLDISPELLOG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLDISPELLOG& ServerOpcode::get<SMSG_SPELLDISPELLOG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELLDISPELLOG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_NEXT_MAIL_TIME_Server* ServerOpcode::get_if<MSG_QUERY_NEXT_MAIL_TIME_Server>() {
    if (opcode == Opcode::MSG_QUERY_NEXT_MAIL_TIME) {
        return &MSG_QUERY_NEXT_MAIL_TIME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_NEXT_MAIL_TIME_Server& ServerOpcode::get<MSG_QUERY_NEXT_MAIL_TIME_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_QUERY_NEXT_MAIL_TIME_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RECEIVED_MAIL* ServerOpcode::get_if<SMSG_RECEIVED_MAIL>() {
    if (opcode == Opcode::SMSG_RECEIVED_MAIL) {
        return &SMSG_RECEIVED_MAIL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RECEIVED_MAIL& ServerOpcode::get<SMSG_RECEIVED_MAIL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_RECEIVED_MAIL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_GROUP_ONLY* ServerOpcode::get_if<SMSG_RAID_GROUP_ONLY>() {
    if (opcode == Opcode::SMSG_RAID_GROUP_ONLY) {
        return &SMSG_RAID_GROUP_ONLY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_GROUP_ONLY& ServerOpcode::get<SMSG_RAID_GROUP_ONLY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_RAID_GROUP_ONLY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PVP_CREDIT* ServerOpcode::get_if<SMSG_PVP_CREDIT>() {
    if (opcode == Opcode::SMSG_PVP_CREDIT) {
        return &SMSG_PVP_CREDIT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PVP_CREDIT& ServerOpcode::get<SMSG_PVP_CREDIT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PVP_CREDIT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_REMOVED_NOTIFICATION* ServerOpcode::get_if<SMSG_AUCTION_REMOVED_NOTIFICATION>() {
    if (opcode == Opcode::SMSG_AUCTION_REMOVED_NOTIFICATION) {
        return &SMSG_AUCTION_REMOVED_NOTIFICATION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_REMOVED_NOTIFICATION& ServerOpcode::get<SMSG_AUCTION_REMOVED_NOTIFICATION>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AUCTION_REMOVED_NOTIFICATION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SERVER_MESSAGE* ServerOpcode::get_if<SMSG_SERVER_MESSAGE>() {
    if (opcode == Opcode::SMSG_SERVER_MESSAGE) {
        return &SMSG_SERVER_MESSAGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SERVER_MESSAGE& ServerOpcode::get<SMSG_SERVER_MESSAGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SERVER_MESSAGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_OFFER_CONTINUE* ServerOpcode::get_if<SMSG_LFG_OFFER_CONTINUE>() {
    if (opcode == Opcode::SMSG_LFG_OFFER_CONTINUE) {
        return &SMSG_LFG_OFFER_CONTINUE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_OFFER_CONTINUE& ServerOpcode::get<SMSG_LFG_OFFER_CONTINUE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_OFFER_CONTINUE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOW_MAILBOX* ServerOpcode::get_if<SMSG_SHOW_MAILBOX>() {
    if (opcode == Opcode::SMSG_SHOW_MAILBOX) {
        return &SMSG_SHOW_MAILBOX;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SHOW_MAILBOX& ServerOpcode::get<SMSG_SHOW_MAILBOX>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SHOW_MAILBOX>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CANCEL_AUTO_REPEAT* ServerOpcode::get_if<SMSG_CANCEL_AUTO_REPEAT>() {
    if (opcode == Opcode::SMSG_CANCEL_AUTO_REPEAT) {
        return &SMSG_CANCEL_AUTO_REPEAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CANCEL_AUTO_REPEAT& ServerOpcode::get<SMSG_CANCEL_AUTO_REPEAT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CANCEL_AUTO_REPEAT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STANDSTATE_UPDATE* ServerOpcode::get_if<SMSG_STANDSTATE_UPDATE>() {
    if (opcode == Opcode::SMSG_STANDSTATE_UPDATE) {
        return &SMSG_STANDSTATE_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_STANDSTATE_UPDATE& ServerOpcode::get<SMSG_STANDSTATE_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_STANDSTATE_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ALL_PASSED* ServerOpcode::get_if<SMSG_LOOT_ALL_PASSED>() {
    if (opcode == Opcode::SMSG_LOOT_ALL_PASSED) {
        return &SMSG_LOOT_ALL_PASSED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ALL_PASSED& ServerOpcode::get<SMSG_LOOT_ALL_PASSED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_ALL_PASSED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ROLL_WON* ServerOpcode::get_if<SMSG_LOOT_ROLL_WON>() {
    if (opcode == Opcode::SMSG_LOOT_ROLL_WON) {
        return &SMSG_LOOT_ROLL_WON;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ROLL_WON& ServerOpcode::get<SMSG_LOOT_ROLL_WON>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_ROLL_WON>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_START_ROLL* ServerOpcode::get_if<SMSG_LOOT_START_ROLL>() {
    if (opcode == Opcode::SMSG_LOOT_START_ROLL) {
        return &SMSG_LOOT_START_ROLL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_START_ROLL& ServerOpcode::get<SMSG_LOOT_START_ROLL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_START_ROLL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ROLL* ServerOpcode::get_if<SMSG_LOOT_ROLL>() {
    if (opcode == Opcode::SMSG_LOOT_ROLL) {
        return &SMSG_LOOT_ROLL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_ROLL& ServerOpcode::get<SMSG_LOOT_ROLL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_ROLL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_MASTER_LIST* ServerOpcode::get_if<SMSG_LOOT_MASTER_LIST>() {
    if (opcode == Opcode::SMSG_LOOT_MASTER_LIST) {
        return &SMSG_LOOT_MASTER_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_MASTER_LIST& ServerOpcode::get<SMSG_LOOT_MASTER_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_MASTER_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FORCED_REACTIONS* ServerOpcode::get_if<SMSG_SET_FORCED_REACTIONS>() {
    if (opcode == Opcode::SMSG_SET_FORCED_REACTIONS) {
        return &SMSG_SET_FORCED_REACTIONS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_FORCED_REACTIONS& ServerOpcode::get<SMSG_SET_FORCED_REACTIONS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SET_FORCED_REACTIONS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_FAILED_OTHER* ServerOpcode::get_if<SMSG_SPELL_FAILED_OTHER>() {
    if (opcode == Opcode::SMSG_SPELL_FAILED_OTHER) {
        return &SMSG_SPELL_FAILED_OTHER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_FAILED_OTHER& ServerOpcode::get<SMSG_SPELL_FAILED_OTHER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELL_FAILED_OTHER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_PLAYER_NOT_FOUND* ServerOpcode::get_if<SMSG_CHAT_PLAYER_NOT_FOUND>() {
    if (opcode == Opcode::SMSG_CHAT_PLAYER_NOT_FOUND) {
        return &SMSG_CHAT_PLAYER_NOT_FOUND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_PLAYER_NOT_FOUND& ServerOpcode::get<SMSG_CHAT_PLAYER_NOT_FOUND>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHAT_PLAYER_NOT_FOUND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TALENT_WIPE_CONFIRM_Server* ServerOpcode::get_if<MSG_TALENT_WIPE_CONFIRM_Server>() {
    if (opcode == Opcode::MSG_TALENT_WIPE_CONFIRM) {
        return &MSG_TALENT_WIPE_CONFIRM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_TALENT_WIPE_CONFIRM_Server& ServerOpcode::get<MSG_TALENT_WIPE_CONFIRM_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_TALENT_WIPE_CONFIRM_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SUMMON_REQUEST* ServerOpcode::get_if<SMSG_SUMMON_REQUEST>() {
    if (opcode == Opcode::SMSG_SUMMON_REQUEST) {
        return &SMSG_SUMMON_REQUEST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SUMMON_REQUEST& ServerOpcode::get<SMSG_SUMMON_REQUEST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SUMMON_REQUEST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MONSTER_MOVE_TRANSPORT* ServerOpcode::get_if<SMSG_MONSTER_MOVE_TRANSPORT>() {
    if (opcode == Opcode::SMSG_MONSTER_MOVE_TRANSPORT) {
        return &SMSG_MONSTER_MOVE_TRANSPORT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MONSTER_MOVE_TRANSPORT& ServerOpcode::get<SMSG_MONSTER_MOVE_TRANSPORT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MONSTER_MOVE_TRANSPORT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_BROKEN* ServerOpcode::get_if<SMSG_PET_BROKEN>() {
    if (opcode == Opcode::SMSG_PET_BROKEN) {
        return &SMSG_PET_BROKEN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_BROKEN& ServerOpcode::get<SMSG_PET_BROKEN>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_BROKEN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FEATHER_FALL_Server* ServerOpcode::get_if<MSG_MOVE_FEATHER_FALL_Server>() {
    if (opcode == Opcode::MSG_MOVE_FEATHER_FALL) {
        return &MSG_MOVE_FEATHER_FALL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_FEATHER_FALL_Server& ServerOpcode::get<MSG_MOVE_FEATHER_FALL_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_FEATHER_FALL_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WATER_WALK* ServerOpcode::get_if<MSG_MOVE_WATER_WALK>() {
    if (opcode == Opcode::MSG_MOVE_WATER_WALK) {
        return &MSG_MOVE_WATER_WALK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_WATER_WALK& ServerOpcode::get<MSG_MOVE_WATER_WALK>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_WATER_WALK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FEIGN_DEATH_RESISTED* ServerOpcode::get_if<SMSG_FEIGN_DEATH_RESISTED>() {
    if (opcode == Opcode::SMSG_FEIGN_DEATH_RESISTED) {
        return &SMSG_FEIGN_DEATH_RESISTED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FEIGN_DEATH_RESISTED& ServerOpcode::get<SMSG_FEIGN_DEATH_RESISTED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FEIGN_DEATH_RESISTED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_COUNTDOWN* ServerOpcode::get_if<SMSG_DUEL_COUNTDOWN>() {
    if (opcode == Opcode::SMSG_DUEL_COUNTDOWN) {
        return &SMSG_DUEL_COUNTDOWN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DUEL_COUNTDOWN& ServerOpcode::get<SMSG_DUEL_COUNTDOWN>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DUEL_COUNTDOWN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AREA_TRIGGER_MESSAGE* ServerOpcode::get_if<SMSG_AREA_TRIGGER_MESSAGE>() {
    if (opcode == Opcode::SMSG_AREA_TRIGGER_MESSAGE) {
        return &SMSG_AREA_TRIGGER_MESSAGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AREA_TRIGGER_MESSAGE& ServerOpcode::get<SMSG_AREA_TRIGGER_MESSAGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AREA_TRIGGER_MESSAGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_ROLE_CHOSEN* ServerOpcode::get_if<SMSG_LFG_ROLE_CHOSEN>() {
    if (opcode == Opcode::SMSG_LFG_ROLE_CHOSEN) {
        return &SMSG_LFG_ROLE_CHOSEN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_ROLE_CHOSEN& ServerOpcode::get<SMSG_LFG_ROLE_CHOSEN>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_ROLE_CHOSEN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYER_SKINNED* ServerOpcode::get_if<SMSG_PLAYER_SKINNED>() {
    if (opcode == Opcode::SMSG_PLAYER_SKINNED) {
        return &SMSG_PLAYER_SKINNED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYER_SKINNED& ServerOpcode::get<SMSG_PLAYER_SKINNED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PLAYER_SKINNED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DURABILITY_DAMAGE_DEATH* ServerOpcode::get_if<SMSG_DURABILITY_DAMAGE_DEATH>() {
    if (opcode == Opcode::SMSG_DURABILITY_DAMAGE_DEATH) {
        return &SMSG_DURABILITY_DAMAGE_DEATH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DURABILITY_DAMAGE_DEATH& ServerOpcode::get<SMSG_DURABILITY_DAMAGE_DEATH>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DURABILITY_DAMAGE_DEATH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_RENAME* ServerOpcode::get_if<MSG_PETITION_RENAME>() {
    if (opcode == Opcode::MSG_PETITION_RENAME) {
        return &MSG_PETITION_RENAME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_PETITION_RENAME& ServerOpcode::get<MSG_PETITION_RENAME>() {
    auto p = ServerOpcode::get_if<wrath::MSG_PETITION_RENAME>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INIT_WORLD_STATES* ServerOpcode::get_if<SMSG_INIT_WORLD_STATES>() {
    if (opcode == Opcode::SMSG_INIT_WORLD_STATES) {
        return &SMSG_INIT_WORLD_STATES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INIT_WORLD_STATES& ServerOpcode::get<SMSG_INIT_WORLD_STATES>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INIT_WORLD_STATES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_WORLD_STATE* ServerOpcode::get_if<SMSG_UPDATE_WORLD_STATE>() {
    if (opcode == Opcode::SMSG_UPDATE_WORLD_STATE) {
        return &SMSG_UPDATE_WORLD_STATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_WORLD_STATE& ServerOpcode::get<SMSG_UPDATE_WORLD_STATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_UPDATE_WORLD_STATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_NAME_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_ITEM_NAME_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_ITEM_NAME_QUERY_RESPONSE) {
        return &SMSG_ITEM_NAME_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_NAME_QUERY_RESPONSE& ServerOpcode::get<SMSG_ITEM_NAME_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ITEM_NAME_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_ACTION_FEEDBACK* ServerOpcode::get_if<SMSG_PET_ACTION_FEEDBACK>() {
    if (opcode == Opcode::SMSG_PET_ACTION_FEEDBACK) {
        return &SMSG_PET_ACTION_FEEDBACK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_ACTION_FEEDBACK& ServerOpcode::get<SMSG_PET_ACTION_FEEDBACK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_ACTION_FEEDBACK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_RENAME* ServerOpcode::get_if<SMSG_CHAR_RENAME>() {
    if (opcode == Opcode::SMSG_CHAR_RENAME) {
        return &SMSG_CHAR_RENAME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_RENAME& ServerOpcode::get<SMSG_CHAR_RENAME>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHAR_RENAME>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_SAVE_CREATED* ServerOpcode::get_if<SMSG_INSTANCE_SAVE_CREATED>() {
    if (opcode == Opcode::SMSG_INSTANCE_SAVE_CREATED) {
        return &SMSG_INSTANCE_SAVE_CREATED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_SAVE_CREATED& ServerOpcode::get<SMSG_INSTANCE_SAVE_CREATED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INSTANCE_SAVE_CREATED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_INSTANCE_INFO* ServerOpcode::get_if<SMSG_RAID_INSTANCE_INFO>() {
    if (opcode == Opcode::SMSG_RAID_INSTANCE_INFO) {
        return &SMSG_RAID_INSTANCE_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_INSTANCE_INFO& ServerOpcode::get<SMSG_RAID_INSTANCE_INFO>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_RAID_INSTANCE_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SOUND* ServerOpcode::get_if<SMSG_PLAY_SOUND>() {
    if (opcode == Opcode::SMSG_PLAY_SOUND) {
        return &SMSG_PLAY_SOUND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAY_SOUND& ServerOpcode::get<SMSG_PLAY_SOUND>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PLAY_SOUND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_STATUS* ServerOpcode::get_if<SMSG_BATTLEFIELD_STATUS>() {
    if (opcode == Opcode::SMSG_BATTLEFIELD_STATUS) {
        return &SMSG_BATTLEFIELD_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_STATUS& ServerOpcode::get<SMSG_BATTLEFIELD_STATUS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEFIELD_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_HONOR_STATS_Server* ServerOpcode::get_if<MSG_INSPECT_HONOR_STATS_Server>() {
    if (opcode == Opcode::MSG_INSPECT_HONOR_STATS) {
        return &MSG_INSPECT_HONOR_STATS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_HONOR_STATS_Server& ServerOpcode::get<MSG_INSPECT_HONOR_STATS_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_INSPECT_HONOR_STATS_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_WALK_SPEED_CHANGE* ServerOpcode::get_if<SMSG_FORCE_WALK_SPEED_CHANGE>() {
    if (opcode == Opcode::SMSG_FORCE_WALK_SPEED_CHANGE) {
        return &SMSG_FORCE_WALK_SPEED_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_WALK_SPEED_CHANGE& ServerOpcode::get<SMSG_FORCE_WALK_SPEED_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_WALK_SPEED_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE* ServerOpcode::get_if<SMSG_FORCE_SWIM_BACK_SPEED_CHANGE>() {
    if (opcode == Opcode::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) {
        return &SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE& ServerOpcode::get<SMSG_FORCE_SWIM_BACK_SPEED_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_TURN_RATE_CHANGE* ServerOpcode::get_if<SMSG_FORCE_TURN_RATE_CHANGE>() {
    if (opcode == Opcode::SMSG_FORCE_TURN_RATE_CHANGE) {
        return &SMSG_FORCE_TURN_RATE_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_TURN_RATE_CHANGE& ServerOpcode::get<SMSG_FORCE_TURN_RATE_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_TURN_RATE_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AREA_SPIRIT_HEALER_TIME* ServerOpcode::get_if<SMSG_AREA_SPIRIT_HEALER_TIME>() {
    if (opcode == Opcode::SMSG_AREA_SPIRIT_HEALER_TIME) {
        return &SMSG_AREA_SPIRIT_HEALER_TIME;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AREA_SPIRIT_HEALER_TIME& ServerOpcode::get<SMSG_AREA_SPIRIT_HEALER_TIME>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AREA_SPIRIT_HEALER_TIME>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WARDEN_DATA* ServerOpcode::get_if<SMSG_WARDEN_DATA>() {
    if (opcode == Opcode::SMSG_WARDEN_DATA) {
        return &SMSG_WARDEN_DATA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WARDEN_DATA& ServerOpcode::get<SMSG_WARDEN_DATA>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_WARDEN_DATA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_JOINED_BATTLEGROUND* ServerOpcode::get_if<SMSG_GROUP_JOINED_BATTLEGROUND>() {
    if (opcode == Opcode::SMSG_GROUP_JOINED_BATTLEGROUND) {
        return &SMSG_GROUP_JOINED_BATTLEGROUND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GROUP_JOINED_BATTLEGROUND& ServerOpcode::get<SMSG_GROUP_JOINED_BATTLEGROUND>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GROUP_JOINED_BATTLEGROUND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server* ServerOpcode::get_if<MSG_BATTLEGROUND_PLAYER_POSITIONS_Server>() {
    if (opcode == Opcode::MSG_BATTLEGROUND_PLAYER_POSITIONS) {
        return &MSG_BATTLEGROUND_PLAYER_POSITIONS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server& ServerOpcode::get<MSG_BATTLEGROUND_PLAYER_POSITIONS_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BINDER_CONFIRM* ServerOpcode::get_if<SMSG_BINDER_CONFIRM>() {
    if (opcode == Opcode::SMSG_BINDER_CONFIRM) {
        return &SMSG_BINDER_CONFIRM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BINDER_CONFIRM& ServerOpcode::get<SMSG_BINDER_CONFIRM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BINDER_CONFIRM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_PLAYER_JOINED* ServerOpcode::get_if<SMSG_BATTLEGROUND_PLAYER_JOINED>() {
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_JOINED) {
        return &SMSG_BATTLEGROUND_PLAYER_JOINED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_PLAYER_JOINED& ServerOpcode::get<SMSG_BATTLEGROUND_PLAYER_JOINED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEGROUND_PLAYER_JOINED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_PLAYER_LEFT* ServerOpcode::get_if<SMSG_BATTLEGROUND_PLAYER_LEFT>() {
    if (opcode == Opcode::SMSG_BATTLEGROUND_PLAYER_LEFT) {
        return &SMSG_BATTLEGROUND_PLAYER_LEFT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_PLAYER_LEFT& ServerOpcode::get<SMSG_BATTLEGROUND_PLAYER_LEFT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEGROUND_PLAYER_LEFT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ADDON_INFO* ServerOpcode::get_if<SMSG_ADDON_INFO>() {
    if (opcode == Opcode::SMSG_ADDON_INFO) {
        return &SMSG_ADDON_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ADDON_INFO& ServerOpcode::get<SMSG_ADDON_INFO>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ADDON_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UNLEARN_CONFIRM* ServerOpcode::get_if<SMSG_PET_UNLEARN_CONFIRM>() {
    if (opcode == Opcode::SMSG_PET_UNLEARN_CONFIRM) {
        return &SMSG_PET_UNLEARN_CONFIRM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UNLEARN_CONFIRM& ServerOpcode::get<SMSG_PET_UNLEARN_CONFIRM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_UNLEARN_CONFIRM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_MEMBER_STATS_FULL* ServerOpcode::get_if<SMSG_PARTY_MEMBER_STATS_FULL>() {
    if (opcode == Opcode::SMSG_PARTY_MEMBER_STATS_FULL) {
        return &SMSG_PARTY_MEMBER_STATS_FULL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PARTY_MEMBER_STATS_FULL& ServerOpcode::get<SMSG_PARTY_MEMBER_STATS_FULL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PARTY_MEMBER_STATS_FULL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WEATHER* ServerOpcode::get_if<SMSG_WEATHER>() {
    if (opcode == Opcode::SMSG_WEATHER) {
        return &SMSG_WEATHER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WEATHER& ServerOpcode::get<SMSG_WEATHER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_WEATHER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_INSTANCE_MESSAGE* ServerOpcode::get_if<SMSG_RAID_INSTANCE_MESSAGE>() {
    if (opcode == Opcode::SMSG_RAID_INSTANCE_MESSAGE) {
        return &SMSG_RAID_INSTANCE_MESSAGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RAID_INSTANCE_MESSAGE& ServerOpcode::get<SMSG_RAID_INSTANCE_MESSAGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_RAID_INSTANCE_MESSAGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPRESSED_MOVES* ServerOpcode::get_if<SMSG_COMPRESSED_MOVES>() {
    if (opcode == Opcode::SMSG_COMPRESSED_MOVES) {
        return &SMSG_COMPRESSED_MOVES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPRESSED_MOVES& ServerOpcode::get<SMSG_COMPRESSED_MOVES>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_COMPRESSED_MOVES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_RESTRICTED* ServerOpcode::get_if<SMSG_CHAT_RESTRICTED>() {
    if (opcode == Opcode::SMSG_CHAT_RESTRICTED) {
        return &SMSG_CHAT_RESTRICTED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_RESTRICTED& ServerOpcode::get<SMSG_CHAT_RESTRICTED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHAT_RESTRICTED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_RUN_SPEED* ServerOpcode::get_if<SMSG_SPLINE_SET_RUN_SPEED>() {
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_SPEED) {
        return &SMSG_SPLINE_SET_RUN_SPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_RUN_SPEED& ServerOpcode::get<SMSG_SPLINE_SET_RUN_SPEED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_SET_RUN_SPEED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED* ServerOpcode::get_if<SMSG_SPLINE_SET_RUN_BACK_SPEED>() {
    if (opcode == Opcode::SMSG_SPLINE_SET_RUN_BACK_SPEED) {
        return &SMSG_SPLINE_SET_RUN_BACK_SPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED& ServerOpcode::get<SMSG_SPLINE_SET_RUN_BACK_SPEED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_SET_RUN_BACK_SPEED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_SWIM_SPEED* ServerOpcode::get_if<SMSG_SPLINE_SET_SWIM_SPEED>() {
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_SPEED) {
        return &SMSG_SPLINE_SET_SWIM_SPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_SWIM_SPEED& ServerOpcode::get<SMSG_SPLINE_SET_SWIM_SPEED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_SET_SWIM_SPEED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_WALK_SPEED* ServerOpcode::get_if<SMSG_SPLINE_SET_WALK_SPEED>() {
    if (opcode == Opcode::SMSG_SPLINE_SET_WALK_SPEED) {
        return &SMSG_SPLINE_SET_WALK_SPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_WALK_SPEED& ServerOpcode::get<SMSG_SPLINE_SET_WALK_SPEED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_SET_WALK_SPEED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED* ServerOpcode::get_if<SMSG_SPLINE_SET_SWIM_BACK_SPEED>() {
    if (opcode == Opcode::SMSG_SPLINE_SET_SWIM_BACK_SPEED) {
        return &SMSG_SPLINE_SET_SWIM_BACK_SPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED& ServerOpcode::get<SMSG_SPLINE_SET_SWIM_BACK_SPEED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_SET_SWIM_BACK_SPEED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_TURN_RATE* ServerOpcode::get_if<SMSG_SPLINE_SET_TURN_RATE>() {
    if (opcode == Opcode::SMSG_SPLINE_SET_TURN_RATE) {
        return &SMSG_SPLINE_SET_TURN_RATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_TURN_RATE& ServerOpcode::get<SMSG_SPLINE_SET_TURN_RATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_SET_TURN_RATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNROOT* ServerOpcode::get_if<SMSG_SPLINE_MOVE_UNROOT>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNROOT) {
        return &SMSG_SPLINE_MOVE_UNROOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNROOT& ServerOpcode::get<SMSG_SPLINE_MOVE_UNROOT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_UNROOT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_FEATHER_FALL* ServerOpcode::get_if<SMSG_SPLINE_MOVE_FEATHER_FALL>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_FEATHER_FALL) {
        return &SMSG_SPLINE_MOVE_FEATHER_FALL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_FEATHER_FALL& ServerOpcode::get<SMSG_SPLINE_MOVE_FEATHER_FALL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_FEATHER_FALL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_NORMAL_FALL* ServerOpcode::get_if<SMSG_SPLINE_MOVE_NORMAL_FALL>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_NORMAL_FALL) {
        return &SMSG_SPLINE_MOVE_NORMAL_FALL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_NORMAL_FALL& ServerOpcode::get<SMSG_SPLINE_MOVE_NORMAL_FALL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_NORMAL_FALL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_HOVER* ServerOpcode::get_if<SMSG_SPLINE_MOVE_SET_HOVER>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_HOVER) {
        return &SMSG_SPLINE_MOVE_SET_HOVER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_HOVER& ServerOpcode::get<SMSG_SPLINE_MOVE_SET_HOVER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_SET_HOVER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNSET_HOVER* ServerOpcode::get_if<SMSG_SPLINE_MOVE_UNSET_HOVER>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_HOVER) {
        return &SMSG_SPLINE_MOVE_UNSET_HOVER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNSET_HOVER& ServerOpcode::get<SMSG_SPLINE_MOVE_UNSET_HOVER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_UNSET_HOVER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_WATER_WALK* ServerOpcode::get_if<SMSG_SPLINE_MOVE_WATER_WALK>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_WATER_WALK) {
        return &SMSG_SPLINE_MOVE_WATER_WALK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_WATER_WALK& ServerOpcode::get<SMSG_SPLINE_MOVE_WATER_WALK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_WATER_WALK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_LAND_WALK* ServerOpcode::get_if<SMSG_SPLINE_MOVE_LAND_WALK>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_LAND_WALK) {
        return &SMSG_SPLINE_MOVE_LAND_WALK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_LAND_WALK& ServerOpcode::get<SMSG_SPLINE_MOVE_LAND_WALK>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_LAND_WALK>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_START_SWIM* ServerOpcode::get_if<SMSG_SPLINE_MOVE_START_SWIM>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_START_SWIM) {
        return &SMSG_SPLINE_MOVE_START_SWIM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_START_SWIM& ServerOpcode::get<SMSG_SPLINE_MOVE_START_SWIM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_START_SWIM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_STOP_SWIM* ServerOpcode::get_if<SMSG_SPLINE_MOVE_STOP_SWIM>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_STOP_SWIM) {
        return &SMSG_SPLINE_MOVE_STOP_SWIM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_STOP_SWIM& ServerOpcode::get<SMSG_SPLINE_MOVE_STOP_SWIM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_STOP_SWIM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE* ServerOpcode::get_if<SMSG_SPLINE_MOVE_SET_RUN_MODE>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_RUN_MODE) {
        return &SMSG_SPLINE_MOVE_SET_RUN_MODE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE& ServerOpcode::get<SMSG_SPLINE_MOVE_SET_RUN_MODE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_SET_RUN_MODE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE* ServerOpcode::get_if<SMSG_SPLINE_MOVE_SET_WALK_MODE>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_WALK_MODE) {
        return &SMSG_SPLINE_MOVE_SET_WALK_MODE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE& ServerOpcode::get<SMSG_SPLINE_MOVE_SET_WALK_MODE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_SET_WALK_MODE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TIME_SKIPPED_Server* ServerOpcode::get_if<MSG_MOVE_TIME_SKIPPED_Server>() {
    if (opcode == Opcode::MSG_MOVE_TIME_SKIPPED) {
        return &MSG_MOVE_TIME_SKIPPED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_TIME_SKIPPED_Server& ServerOpcode::get<MSG_MOVE_TIME_SKIPPED_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_TIME_SKIPPED_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_ROOT* ServerOpcode::get_if<SMSG_SPLINE_MOVE_ROOT>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_ROOT) {
        return &SMSG_SPLINE_MOVE_ROOT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_ROOT& ServerOpcode::get<SMSG_SPLINE_MOVE_ROOT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_ROOT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INVALIDATE_PLAYER* ServerOpcode::get_if<SMSG_INVALIDATE_PLAYER>() {
    if (opcode == Opcode::SMSG_INVALIDATE_PLAYER) {
        return &SMSG_INVALIDATE_PLAYER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INVALIDATE_PLAYER& ServerOpcode::get<SMSG_INVALIDATE_PLAYER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INVALIDATE_PLAYER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_RESET* ServerOpcode::get_if<SMSG_INSTANCE_RESET>() {
    if (opcode == Opcode::SMSG_INSTANCE_RESET) {
        return &SMSG_INSTANCE_RESET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_RESET& ServerOpcode::get<SMSG_INSTANCE_RESET>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INSTANCE_RESET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_RESET_FAILED* ServerOpcode::get_if<SMSG_INSTANCE_RESET_FAILED>() {
    if (opcode == Opcode::SMSG_INSTANCE_RESET_FAILED) {
        return &SMSG_INSTANCE_RESET_FAILED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_RESET_FAILED& ServerOpcode::get<SMSG_INSTANCE_RESET_FAILED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INSTANCE_RESET_FAILED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_LAST_INSTANCE* ServerOpcode::get_if<SMSG_UPDATE_LAST_INSTANCE>() {
    if (opcode == Opcode::SMSG_UPDATE_LAST_INSTANCE) {
        return &SMSG_UPDATE_LAST_INSTANCE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_LAST_INSTANCE& ServerOpcode::get<SMSG_UPDATE_LAST_INSTANCE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_UPDATE_LAST_INSTANCE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_TARGET_UPDATE_Server* ServerOpcode::get_if<MSG_RAID_TARGET_UPDATE_Server>() {
    if (opcode == Opcode::MSG_RAID_TARGET_UPDATE) {
        return &MSG_RAID_TARGET_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_TARGET_UPDATE_Server& ServerOpcode::get<MSG_RAID_TARGET_UPDATE_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_RAID_TARGET_UPDATE_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_Server* ServerOpcode::get_if<MSG_RAID_READY_CHECK_Server>() {
    if (opcode == Opcode::MSG_RAID_READY_CHECK) {
        return &MSG_RAID_READY_CHECK;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_Server& ServerOpcode::get<MSG_RAID_READY_CHECK_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_RAID_READY_CHECK_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_ACTION_SOUND* ServerOpcode::get_if<SMSG_PET_ACTION_SOUND>() {
    if (opcode == Opcode::SMSG_PET_ACTION_SOUND) {
        return &SMSG_PET_ACTION_SOUND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_ACTION_SOUND& ServerOpcode::get<SMSG_PET_ACTION_SOUND>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_ACTION_SOUND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_DISMISS_SOUND* ServerOpcode::get_if<SMSG_PET_DISMISS_SOUND>() {
    if (opcode == Opcode::SMSG_PET_DISMISS_SOUND) {
        return &SMSG_PET_DISMISS_SOUND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_DISMISS_SOUND& ServerOpcode::get<SMSG_PET_DISMISS_SOUND>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_DISMISS_SOUND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GM_TICKET_STATUS_UPDATE* ServerOpcode::get_if<SMSG_GM_TICKET_STATUS_UPDATE>() {
    if (opcode == Opcode::SMSG_GM_TICKET_STATUS_UPDATE) {
        return &SMSG_GM_TICKET_STATUS_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GM_TICKET_STATUS_UPDATE& ServerOpcode::get<SMSG_GM_TICKET_STATUS_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GM_TICKET_STATUS_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_DUNGEON_DIFFICULTY_Server* ServerOpcode::get_if<MSG_SET_DUNGEON_DIFFICULTY_Server>() {
    if (opcode == Opcode::MSG_SET_DUNGEON_DIFFICULTY) {
        return &MSG_SET_DUNGEON_DIFFICULTY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_DUNGEON_DIFFICULTY_Server& ServerOpcode::get<MSG_SET_DUNGEON_DIFFICULTY_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_SET_DUNGEON_DIFFICULTY_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP* ServerOpcode::get_if<SMSG_UPDATE_INSTANCE_OWNERSHIP>() {
    if (opcode == Opcode::SMSG_UPDATE_INSTANCE_OWNERSHIP) {
        return &SMSG_UPDATE_INSTANCE_OWNERSHIP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP& ServerOpcode::get<SMSG_UPDATE_INSTANCE_OWNERSHIP>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_UPDATE_INSTANCE_OWNERSHIP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_PLAYER_AMBIGUOUS* ServerOpcode::get_if<SMSG_CHAT_PLAYER_AMBIGUOUS>() {
    if (opcode == Opcode::SMSG_CHAT_PLAYER_AMBIGUOUS) {
        return &SMSG_CHAT_PLAYER_AMBIGUOUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAT_PLAYER_AMBIGUOUS& ServerOpcode::get<SMSG_CHAT_PLAYER_AMBIGUOUS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHAT_PLAYER_AMBIGUOUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLINSTAKILLLOG* ServerOpcode::get_if<SMSG_SPELLINSTAKILLLOG>() {
    if (opcode == Opcode::SMSG_SPELLINSTAKILLLOG) {
        return &SMSG_SPELLINSTAKILLLOG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLINSTAKILLLOG& ServerOpcode::get<SMSG_SPELLINSTAKILLLOG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELLINSTAKILLLOG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS* ServerOpcode::get_if<SMSG_SPELL_UPDATE_CHAIN_TARGETS>() {
    if (opcode == Opcode::SMSG_SPELL_UPDATE_CHAIN_TARGETS) {
        return &SMSG_SPELL_UPDATE_CHAIN_TARGETS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS& ServerOpcode::get<SMSG_SPELL_UPDATE_CHAIN_TARGETS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELL_UPDATE_CHAIN_TARGETS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLSTEALLOG* ServerOpcode::get_if<SMSG_SPELLSTEALLOG>() {
    if (opcode == Opcode::SMSG_SPELLSTEALLOG) {
        return &SMSG_SPELLSTEALLOG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPELLSTEALLOG& ServerOpcode::get<SMSG_SPELLSTEALLOG>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPELLSTEALLOG>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DEFENSE_MESSAGE* ServerOpcode::get_if<SMSG_DEFENSE_MESSAGE>() {
    if (opcode == Opcode::SMSG_DEFENSE_MESSAGE) {
        return &SMSG_DEFENSE_MESSAGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DEFENSE_MESSAGE& ServerOpcode::get<SMSG_DEFENSE_MESSAGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DEFENSE_MESSAGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_DIFFICULTY* ServerOpcode::get_if<SMSG_INSTANCE_DIFFICULTY>() {
    if (opcode == Opcode::SMSG_INSTANCE_DIFFICULTY) {
        return &SMSG_INSTANCE_DIFFICULTY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSTANCE_DIFFICULTY& ServerOpcode::get<SMSG_INSTANCE_DIFFICULTY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INSTANCE_DIFFICULTY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOTD* ServerOpcode::get_if<SMSG_MOTD>() {
    if (opcode == Opcode::SMSG_MOTD) {
        return &SMSG_MOTD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOTD& ServerOpcode::get<SMSG_MOTD>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOTD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_CAN_FLY* ServerOpcode::get_if<SMSG_MOVE_SET_CAN_FLY>() {
    if (opcode == Opcode::SMSG_MOVE_SET_CAN_FLY) {
        return &SMSG_MOVE_SET_CAN_FLY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_CAN_FLY& ServerOpcode::get<SMSG_MOVE_SET_CAN_FLY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_SET_CAN_FLY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_UNSET_CAN_FLY* ServerOpcode::get_if<SMSG_MOVE_UNSET_CAN_FLY>() {
    if (opcode == Opcode::SMSG_MOVE_UNSET_CAN_FLY) {
        return &SMSG_MOVE_UNSET_CAN_FLY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_UNSET_CAN_FLY& ServerOpcode::get<SMSG_MOVE_UNSET_CAN_FLY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_UNSET_CAN_FLY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_COMMAND_RESULT* ServerOpcode::get_if<SMSG_ARENA_TEAM_COMMAND_RESULT>() {
    if (opcode == Opcode::SMSG_ARENA_TEAM_COMMAND_RESULT) {
        return &SMSG_ARENA_TEAM_COMMAND_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_COMMAND_RESULT& ServerOpcode::get<SMSG_ARENA_TEAM_COMMAND_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ARENA_TEAM_COMMAND_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_ARENA_TEAM_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_ARENA_TEAM_QUERY_RESPONSE) {
        return &SMSG_ARENA_TEAM_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE& ServerOpcode::get<SMSG_ARENA_TEAM_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ARENA_TEAM_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_ROSTER* ServerOpcode::get_if<SMSG_ARENA_TEAM_ROSTER>() {
    if (opcode == Opcode::SMSG_ARENA_TEAM_ROSTER) {
        return &SMSG_ARENA_TEAM_ROSTER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_ROSTER& ServerOpcode::get<SMSG_ARENA_TEAM_ROSTER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ARENA_TEAM_ROSTER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_INVITE* ServerOpcode::get_if<SMSG_ARENA_TEAM_INVITE>() {
    if (opcode == Opcode::SMSG_ARENA_TEAM_INVITE) {
        return &SMSG_ARENA_TEAM_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_INVITE& ServerOpcode::get<SMSG_ARENA_TEAM_INVITE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ARENA_TEAM_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_EVENT* ServerOpcode::get_if<SMSG_ARENA_TEAM_EVENT>() {
    if (opcode == Opcode::SMSG_ARENA_TEAM_EVENT) {
        return &SMSG_ARENA_TEAM_EVENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_EVENT& ServerOpcode::get<SMSG_ARENA_TEAM_EVENT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ARENA_TEAM_EVENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_ASCEND* ServerOpcode::get_if<MSG_MOVE_START_ASCEND>() {
    if (opcode == Opcode::MSG_MOVE_START_ASCEND) {
        return &MSG_MOVE_START_ASCEND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_ASCEND& ServerOpcode::get<MSG_MOVE_START_ASCEND>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_ASCEND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_ASCEND* ServerOpcode::get_if<MSG_MOVE_STOP_ASCEND>() {
    if (opcode == Opcode::MSG_MOVE_STOP_ASCEND) {
        return &MSG_MOVE_STOP_ASCEND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_STOP_ASCEND& ServerOpcode::get<MSG_MOVE_STOP_ASCEND>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_STOP_ASCEND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_STATS* ServerOpcode::get_if<SMSG_ARENA_TEAM_STATS>() {
    if (opcode == Opcode::SMSG_ARENA_TEAM_STATS) {
        return &SMSG_ARENA_TEAM_STATS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_STATS& ServerOpcode::get<SMSG_ARENA_TEAM_STATS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ARENA_TEAM_STATS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_LFG_LIST* ServerOpcode::get_if<SMSG_UPDATE_LFG_LIST>() {
    if (opcode == Opcode::SMSG_UPDATE_LFG_LIST) {
        return &SMSG_UPDATE_LFG_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_LFG_LIST& ServerOpcode::get<SMSG_UPDATE_LFG_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_UPDATE_LFG_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PROPOSAL_UPDATE* ServerOpcode::get_if<SMSG_LFG_PROPOSAL_UPDATE>() {
    if (opcode == Opcode::SMSG_LFG_PROPOSAL_UPDATE) {
        return &SMSG_LFG_PROPOSAL_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PROPOSAL_UPDATE& ServerOpcode::get<SMSG_LFG_PROPOSAL_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_PROPOSAL_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_ROLE_CHECK_UPDATE* ServerOpcode::get_if<SMSG_LFG_ROLE_CHECK_UPDATE>() {
    if (opcode == Opcode::SMSG_LFG_ROLE_CHECK_UPDATE) {
        return &SMSG_LFG_ROLE_CHECK_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_ROLE_CHECK_UPDATE& ServerOpcode::get<SMSG_LFG_ROLE_CHECK_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_ROLE_CHECK_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_JOIN_RESULT* ServerOpcode::get_if<SMSG_LFG_JOIN_RESULT>() {
    if (opcode == Opcode::SMSG_LFG_JOIN_RESULT) {
        return &SMSG_LFG_JOIN_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_JOIN_RESULT& ServerOpcode::get<SMSG_LFG_JOIN_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_JOIN_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_QUEUE_STATUS* ServerOpcode::get_if<SMSG_LFG_QUEUE_STATUS>() {
    if (opcode == Opcode::SMSG_LFG_QUEUE_STATUS) {
        return &SMSG_LFG_QUEUE_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_QUEUE_STATUS& ServerOpcode::get<SMSG_LFG_QUEUE_STATUS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_QUEUE_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_PLAYER* ServerOpcode::get_if<SMSG_LFG_UPDATE_PLAYER>() {
    if (opcode == Opcode::SMSG_LFG_UPDATE_PLAYER) {
        return &SMSG_LFG_UPDATE_PLAYER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_PLAYER& ServerOpcode::get<SMSG_LFG_UPDATE_PLAYER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_UPDATE_PLAYER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_PARTY* ServerOpcode::get_if<SMSG_LFG_UPDATE_PARTY>() {
    if (opcode == Opcode::SMSG_LFG_UPDATE_PARTY) {
        return &SMSG_LFG_UPDATE_PARTY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_PARTY& ServerOpcode::get<SMSG_LFG_UPDATE_PARTY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_UPDATE_PARTY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_SEARCH* ServerOpcode::get_if<SMSG_LFG_UPDATE_SEARCH>() {
    if (opcode == Opcode::SMSG_LFG_UPDATE_SEARCH) {
        return &SMSG_LFG_UPDATE_SEARCH;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_UPDATE_SEARCH& ServerOpcode::get<SMSG_LFG_UPDATE_SEARCH>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_UPDATE_SEARCH>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE* ServerOpcode::get_if<SMSG_LFG_BOOT_PROPOSAL_UPDATE>() {
    if (opcode == Opcode::SMSG_LFG_BOOT_PROPOSAL_UPDATE) {
        return &SMSG_LFG_BOOT_PROPOSAL_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE& ServerOpcode::get<SMSG_LFG_BOOT_PROPOSAL_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_BOOT_PROPOSAL_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PLAYER_INFO* ServerOpcode::get_if<SMSG_LFG_PLAYER_INFO>() {
    if (opcode == Opcode::SMSG_LFG_PLAYER_INFO) {
        return &SMSG_LFG_PLAYER_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PLAYER_INFO& ServerOpcode::get<SMSG_LFG_PLAYER_INFO>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_PLAYER_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PARTY_INFO* ServerOpcode::get_if<SMSG_LFG_PARTY_INFO>() {
    if (opcode == Opcode::SMSG_LFG_PARTY_INFO) {
        return &SMSG_LFG_PARTY_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_PARTY_INFO& ServerOpcode::get<SMSG_LFG_PARTY_INFO>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_PARTY_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TITLE_EARNED* ServerOpcode::get_if<SMSG_TITLE_EARNED>() {
    if (opcode == Opcode::SMSG_TITLE_EARNED) {
        return &SMSG_TITLE_EARNED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TITLE_EARNED& ServerOpcode::get<SMSG_TITLE_EARNED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TITLE_EARNED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_ERROR* ServerOpcode::get_if<SMSG_ARENA_ERROR>() {
    if (opcode == Opcode::SMSG_ARENA_ERROR) {
        return &SMSG_ARENA_ERROR;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_ERROR& ServerOpcode::get<SMSG_ARENA_ERROR>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ARENA_ERROR>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_ARENA_TEAMS_Server* ServerOpcode::get_if<MSG_INSPECT_ARENA_TEAMS_Server>() {
    if (opcode == Opcode::MSG_INSPECT_ARENA_TEAMS) {
        return &MSG_INSPECT_ARENA_TEAMS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_INSPECT_ARENA_TEAMS_Server& ServerOpcode::get<MSG_INSPECT_ARENA_TEAMS_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_INSPECT_ARENA_TEAMS_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DEATH_RELEASE_LOC* ServerOpcode::get_if<SMSG_DEATH_RELEASE_LOC>() {
    if (opcode == Opcode::SMSG_DEATH_RELEASE_LOC) {
        return &SMSG_DEATH_RELEASE_LOC;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DEATH_RELEASE_LOC& ServerOpcode::get<SMSG_DEATH_RELEASE_LOC>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DEATH_RELEASE_LOC>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCED_DEATH_UPDATE* ServerOpcode::get_if<SMSG_FORCED_DEATH_UPDATE>() {
    if (opcode == Opcode::SMSG_FORCED_DEATH_UPDATE) {
        return &SMSG_FORCED_DEATH_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCED_DEATH_UPDATE& ServerOpcode::get<SMSG_FORCED_DEATH_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCED_DEATH_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server* ServerOpcode::get_if<MSG_MOVE_SET_FLIGHT_SPEED_Server>() {
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_SPEED) {
        return &MSG_MOVE_SET_FLIGHT_SPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server& ServerOpcode::get<MSG_MOVE_SET_FLIGHT_SPEED_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_SET_FLIGHT_SPEED_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED* ServerOpcode::get_if<MSG_MOVE_SET_FLIGHT_BACK_SPEED>() {
    if (opcode == Opcode::MSG_MOVE_SET_FLIGHT_BACK_SPEED) {
        return &MSG_MOVE_SET_FLIGHT_BACK_SPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED& ServerOpcode::get<MSG_MOVE_SET_FLIGHT_BACK_SPEED>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_SET_FLIGHT_BACK_SPEED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE* ServerOpcode::get_if<SMSG_FORCE_FLIGHT_SPEED_CHANGE>() {
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_SPEED_CHANGE) {
        return &SMSG_FORCE_FLIGHT_SPEED_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE& ServerOpcode::get<SMSG_FORCE_FLIGHT_SPEED_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_FLIGHT_SPEED_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE* ServerOpcode::get_if<SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE>() {
    if (opcode == Opcode::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) {
        return &SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE& ServerOpcode::get<SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_FLIGHT_SPEED* ServerOpcode::get_if<SMSG_SPLINE_SET_FLIGHT_SPEED>() {
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_SPEED) {
        return &SMSG_SPLINE_SET_FLIGHT_SPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_FLIGHT_SPEED& ServerOpcode::get<SMSG_SPLINE_SET_FLIGHT_SPEED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_SET_FLIGHT_SPEED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED* ServerOpcode::get_if<SMSG_SPLINE_SET_FLIGHT_BACK_SPEED>() {
    if (opcode == Opcode::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) {
        return &SMSG_SPLINE_SET_FLIGHT_BACK_SPEED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED& ServerOpcode::get<SMSG_SPLINE_SET_FLIGHT_BACK_SPEED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FLIGHT_SPLINE_SYNC* ServerOpcode::get_if<SMSG_FLIGHT_SPLINE_SYNC>() {
    if (opcode == Opcode::SMSG_FLIGHT_SPLINE_SYNC) {
        return &SMSG_FLIGHT_SPLINE_SYNC;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FLIGHT_SPLINE_SYNC& ServerOpcode::get<SMSG_FLIGHT_SPLINE_SYNC>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FLIGHT_SPLINE_SYNC>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REALM_SPLIT* ServerOpcode::get_if<SMSG_REALM_SPLIT>() {
    if (opcode == Opcode::SMSG_REALM_SPLIT) {
        return &SMSG_REALM_SPLIT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REALM_SPLIT& ServerOpcode::get<SMSG_REALM_SPLIT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_REALM_SPLIT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TIME_SYNC_REQ* ServerOpcode::get_if<SMSG_TIME_SYNC_REQ>() {
    if (opcode == Opcode::SMSG_TIME_SYNC_REQ) {
        return &SMSG_TIME_SYNC_REQ;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TIME_SYNC_REQ& ServerOpcode::get<SMSG_TIME_SYNC_REQ>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TIME_SYNC_REQ>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESET_FAILED_NOTIFY* ServerOpcode::get_if<SMSG_RESET_FAILED_NOTIFY>() {
    if (opcode == Opcode::SMSG_RESET_FAILED_NOTIFY) {
        return &SMSG_RESET_FAILED_NOTIFY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESET_FAILED_NOTIFY& ServerOpcode::get<SMSG_RESET_FAILED_NOTIFY>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_RESET_FAILED_NOTIFY>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_DISABLED* ServerOpcode::get_if<SMSG_LFG_DISABLED>() {
    if (opcode == Opcode::SMSG_LFG_DISABLED) {
        return &SMSG_LFG_DISABLED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LFG_DISABLED& ServerOpcode::get<SMSG_LFG_DISABLED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LFG_DISABLED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_COMBO_POINTS* ServerOpcode::get_if<SMSG_UPDATE_COMBO_POINTS>() {
    if (opcode == Opcode::SMSG_UPDATE_COMBO_POINTS) {
        return &SMSG_UPDATE_COMBO_POINTS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_COMBO_POINTS& ServerOpcode::get<SMSG_UPDATE_COMBO_POINTS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_UPDATE_COMBO_POINTS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_DESCEND* ServerOpcode::get_if<MSG_MOVE_START_DESCEND>() {
    if (opcode == Opcode::MSG_MOVE_START_DESCEND) {
        return &MSG_MOVE_START_DESCEND;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_START_DESCEND& ServerOpcode::get<MSG_MOVE_START_DESCEND>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_START_DESCEND>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DISMOUNT* ServerOpcode::get_if<SMSG_DISMOUNT>() {
    if (opcode == Opcode::SMSG_DISMOUNT) {
        return &SMSG_DISMOUNT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_DISMOUNT& ServerOpcode::get<SMSG_DISMOUNT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_DISMOUNT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_UPDATE_CAN_FLY_Server* ServerOpcode::get_if<MSG_MOVE_UPDATE_CAN_FLY_Server>() {
    if (opcode == Opcode::MSG_MOVE_UPDATE_CAN_FLY) {
        return &MSG_MOVE_UPDATE_CAN_FLY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_UPDATE_CAN_FLY_Server& ServerOpcode::get<MSG_MOVE_UPDATE_CAN_FLY_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_UPDATE_CAN_FLY_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_CONFIRM_Server* ServerOpcode::get_if<MSG_RAID_READY_CHECK_CONFIRM_Server>() {
    if (opcode == Opcode::MSG_RAID_READY_CHECK_CONFIRM) {
        return &MSG_RAID_READY_CHECK_CONFIRM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_RAID_READY_CHECK_CONFIRM_Server& ServerOpcode::get<MSG_RAID_READY_CHECK_CONFIRM_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_RAID_READY_CHECK_CONFIRM_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GM_MESSAGECHAT* ServerOpcode::get_if<SMSG_GM_MESSAGECHAT>() {
    if (opcode == Opcode::SMSG_GM_MESSAGECHAT) {
        return &SMSG_GM_MESSAGECHAT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GM_MESSAGECHAT& ServerOpcode::get<SMSG_GM_MESSAGECHAT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GM_MESSAGECHAT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLEAR_TARGET* ServerOpcode::get_if<SMSG_CLEAR_TARGET>() {
    if (opcode == Opcode::SMSG_CLEAR_TARGET) {
        return &SMSG_CLEAR_TARGET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLEAR_TARGET& ServerOpcode::get<SMSG_CLEAR_TARGET>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CLEAR_TARGET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD* ServerOpcode::get_if<SMSG_CROSSED_INEBRIATION_THRESHOLD>() {
    if (opcode == Opcode::SMSG_CROSSED_INEBRIATION_THRESHOLD) {
        return &SMSG_CROSSED_INEBRIATION_THRESHOLD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD& ServerOpcode::get<SMSG_CROSSED_INEBRIATION_THRESHOLD>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CROSSED_INEBRIATION_THRESHOLD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_KICK_REASON* ServerOpcode::get_if<SMSG_KICK_REASON>() {
    if (opcode == Opcode::SMSG_KICK_REASON) {
        return &SMSG_KICK_REASON;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_KICK_REASON& ServerOpcode::get<SMSG_KICK_REASON>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_KICK_REASON>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPLAIN_RESULT* ServerOpcode::get_if<SMSG_COMPLAIN_RESULT>() {
    if (opcode == Opcode::SMSG_COMPLAIN_RESULT) {
        return &SMSG_COMPLAIN_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_COMPLAIN_RESULT& ServerOpcode::get<SMSG_COMPLAIN_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_COMPLAIN_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FEATURE_SYSTEM_STATUS* ServerOpcode::get_if<SMSG_FEATURE_SYSTEM_STATUS>() {
    if (opcode == Opcode::SMSG_FEATURE_SYSTEM_STATUS) {
        return &SMSG_FEATURE_SYSTEM_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FEATURE_SYSTEM_STATUS& ServerOpcode::get<SMSG_FEATURE_SYSTEM_STATUS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FEATURE_SYSTEM_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_MEMBER_COUNT* ServerOpcode::get_if<SMSG_CHANNEL_MEMBER_COUNT>() {
    if (opcode == Opcode::SMSG_CHANNEL_MEMBER_COUNT) {
        return &SMSG_CHANNEL_MEMBER_COUNT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHANNEL_MEMBER_COUNT& ServerOpcode::get<SMSG_CHANNEL_MEMBER_COUNT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHANNEL_MEMBER_COUNT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_BANK_LIST* ServerOpcode::get_if<SMSG_GUILD_BANK_LIST>() {
    if (opcode == Opcode::SMSG_GUILD_BANK_LIST) {
        return &SMSG_GUILD_BANK_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GUILD_BANK_LIST& ServerOpcode::get<SMSG_GUILD_BANK_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GUILD_BANK_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_LOG_QUERY_Server* ServerOpcode::get_if<MSG_GUILD_BANK_LOG_QUERY_Server>() {
    if (opcode == Opcode::MSG_GUILD_BANK_LOG_QUERY) {
        return &MSG_GUILD_BANK_LOG_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_LOG_QUERY_Server& ServerOpcode::get<MSG_GUILD_BANK_LOG_QUERY_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_GUILD_BANK_LOG_QUERY_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_ADD* ServerOpcode::get_if<SMSG_USERLIST_ADD>() {
    if (opcode == Opcode::SMSG_USERLIST_ADD) {
        return &SMSG_USERLIST_ADD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_ADD& ServerOpcode::get<SMSG_USERLIST_ADD>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_USERLIST_ADD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_REMOVE* ServerOpcode::get_if<SMSG_USERLIST_REMOVE>() {
    if (opcode == Opcode::SMSG_USERLIST_REMOVE) {
        return &SMSG_USERLIST_REMOVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_REMOVE& ServerOpcode::get<SMSG_USERLIST_REMOVE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_USERLIST_REMOVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_UPDATE* ServerOpcode::get_if<SMSG_USERLIST_UPDATE>() {
    if (opcode == Opcode::SMSG_USERLIST_UPDATE) {
        return &SMSG_USERLIST_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_USERLIST_UPDATE& ServerOpcode::get<SMSG_USERLIST_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_USERLIST_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSPECT_TALENT* ServerOpcode::get_if<SMSG_INSPECT_TALENT>() {
    if (opcode == Opcode::SMSG_INSPECT_TALENT) {
        return &SMSG_INSPECT_TALENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_INSPECT_TALENT& ServerOpcode::get<SMSG_INSPECT_TALENT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_INSPECT_TALENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_LIST* ServerOpcode::get_if<SMSG_LOOT_LIST>() {
    if (opcode == Opcode::SMSG_LOOT_LIST) {
        return &SMSG_LOOT_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_LOOT_LIST& ServerOpcode::get<SMSG_LOOT_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_LOOT_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_PERMISSIONS_Server* ServerOpcode::get_if<MSG_GUILD_PERMISSIONS_Server>() {
    if (opcode == Opcode::MSG_GUILD_PERMISSIONS) {
        return &MSG_GUILD_PERMISSIONS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_PERMISSIONS_Server& ServerOpcode::get<MSG_GUILD_PERMISSIONS_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_GUILD_PERMISSIONS_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server* ServerOpcode::get_if<MSG_GUILD_BANK_MONEY_WITHDRAWN_Server>() {
    if (opcode == Opcode::MSG_GUILD_BANK_MONEY_WITHDRAWN) {
        return &MSG_GUILD_BANK_MONEY_WITHDRAWN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server& ServerOpcode::get<MSG_GUILD_BANK_MONEY_WITHDRAWN_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_GUILD_BANK_MONEY_WITHDRAWN_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_EVENT_LOG_QUERY_Server* ServerOpcode::get_if<MSG_GUILD_EVENT_LOG_QUERY_Server>() {
    if (opcode == Opcode::MSG_GUILD_EVENT_LOG_QUERY) {
        return &MSG_GUILD_EVENT_LOG_QUERY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_GUILD_EVENT_LOG_QUERY_Server& ServerOpcode::get<MSG_GUILD_EVENT_LOG_QUERY_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_GUILD_EVENT_LOG_QUERY_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MIRRORIMAGE_DATA* ServerOpcode::get_if<SMSG_MIRRORIMAGE_DATA>() {
    if (opcode == Opcode::SMSG_MIRRORIMAGE_DATA) {
        return &SMSG_MIRRORIMAGE_DATA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MIRRORIMAGE_DATA& ServerOpcode::get<SMSG_MIRRORIMAGE_DATA>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MIRRORIMAGE_DATA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_GUILD_BANK_TEXT_Server* ServerOpcode::get_if<MSG_QUERY_GUILD_BANK_TEXT_Server>() {
    if (opcode == Opcode::MSG_QUERY_GUILD_BANK_TEXT) {
        return &MSG_QUERY_GUILD_BANK_TEXT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_QUERY_GUILD_BANK_TEXT_Server& ServerOpcode::get<MSG_QUERY_GUILD_BANK_TEXT_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_QUERY_GUILD_BANK_TEXT_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_OVERRIDE_LIGHT* ServerOpcode::get_if<SMSG_OVERRIDE_LIGHT>() {
    if (opcode == Opcode::SMSG_OVERRIDE_LIGHT) {
        return &SMSG_OVERRIDE_LIGHT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_OVERRIDE_LIGHT& ServerOpcode::get<SMSG_OVERRIDE_LIGHT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_OVERRIDE_LIGHT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TOTEM_CREATED* ServerOpcode::get_if<SMSG_TOTEM_CREATED>() {
    if (opcode == Opcode::SMSG_TOTEM_CREATED) {
        return &SMSG_TOTEM_CREATED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TOTEM_CREATED& ServerOpcode::get<SMSG_TOTEM_CREATED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TOTEM_CREATED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE* ServerOpcode::get_if<SMSG_QUESTGIVER_STATUS_MULTIPLE>() {
    if (opcode == Opcode::SMSG_QUESTGIVER_STATUS_MULTIPLE) {
        return &SMSG_QUESTGIVER_STATUS_MULTIPLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE& ServerOpcode::get<SMSG_QUESTGIVER_STATUS_MULTIPLE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTGIVER_STATUS_MULTIPLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT* ServerOpcode::get_if<SMSG_SET_PLAYER_DECLINED_NAMES_RESULT>() {
    if (opcode == Opcode::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) {
        return &SMSG_SET_PLAYER_DECLINED_NAMES_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT& ServerOpcode::get<SMSG_SET_PLAYER_DECLINED_NAMES_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SEND_UNLEARN_SPELLS* ServerOpcode::get_if<SMSG_SEND_UNLEARN_SPELLS>() {
    if (opcode == Opcode::SMSG_SEND_UNLEARN_SPELLS) {
        return &SMSG_SEND_UNLEARN_SPELLS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SEND_UNLEARN_SPELLS& ServerOpcode::get<SMSG_SEND_UNLEARN_SPELLS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SEND_UNLEARN_SPELLS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PROPOSE_LEVEL_GRANT* ServerOpcode::get_if<SMSG_PROPOSE_LEVEL_GRANT>() {
    if (opcode == Opcode::SMSG_PROPOSE_LEVEL_GRANT) {
        return &SMSG_PROPOSE_LEVEL_GRANT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PROPOSE_LEVEL_GRANT& ServerOpcode::get<SMSG_PROPOSE_LEVEL_GRANT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PROPOSE_LEVEL_GRANT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REFER_A_FRIEND_FAILURE* ServerOpcode::get_if<SMSG_REFER_A_FRIEND_FAILURE>() {
    if (opcode == Opcode::SMSG_REFER_A_FRIEND_FAILURE) {
        return &SMSG_REFER_A_FRIEND_FAILURE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REFER_A_FRIEND_FAILURE& ServerOpcode::get<SMSG_REFER_A_FRIEND_FAILURE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_REFER_A_FRIEND_FAILURE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_FLYING* ServerOpcode::get_if<SMSG_SPLINE_MOVE_SET_FLYING>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_SET_FLYING) {
        return &SMSG_SPLINE_MOVE_SET_FLYING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_SET_FLYING& ServerOpcode::get<SMSG_SPLINE_MOVE_SET_FLYING>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_SET_FLYING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNSET_FLYING* ServerOpcode::get_if<SMSG_SPLINE_MOVE_UNSET_FLYING>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_UNSET_FLYING) {
        return &SMSG_SPLINE_MOVE_UNSET_FLYING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_UNSET_FLYING& ServerOpcode::get<SMSG_SPLINE_MOVE_UNSET_FLYING>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_UNSET_FLYING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENABLE_BARBER_SHOP* ServerOpcode::get_if<SMSG_ENABLE_BARBER_SHOP>() {
    if (opcode == Opcode::SMSG_ENABLE_BARBER_SHOP) {
        return &SMSG_ENABLE_BARBER_SHOP;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ENABLE_BARBER_SHOP& ServerOpcode::get<SMSG_ENABLE_BARBER_SHOP>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ENABLE_BARBER_SHOP>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BARBER_SHOP_RESULT* ServerOpcode::get_if<SMSG_BARBER_SHOP_RESULT>() {
    if (opcode == Opcode::SMSG_BARBER_SHOP_RESULT) {
        return &SMSG_BARBER_SHOP_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BARBER_SHOP_RESULT& ServerOpcode::get<SMSG_BARBER_SHOP_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BARBER_SHOP_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_CALENDAR* ServerOpcode::get_if<SMSG_CALENDAR_SEND_CALENDAR>() {
    if (opcode == Opcode::SMSG_CALENDAR_SEND_CALENDAR) {
        return &SMSG_CALENDAR_SEND_CALENDAR;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_CALENDAR& ServerOpcode::get<SMSG_CALENDAR_SEND_CALENDAR>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_SEND_CALENDAR>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_EVENT* ServerOpcode::get_if<SMSG_CALENDAR_SEND_EVENT>() {
    if (opcode == Opcode::SMSG_CALENDAR_SEND_EVENT) {
        return &SMSG_CALENDAR_SEND_EVENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_EVENT& ServerOpcode::get<SMSG_CALENDAR_SEND_EVENT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_SEND_EVENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_FILTER_GUILD* ServerOpcode::get_if<SMSG_CALENDAR_FILTER_GUILD>() {
    if (opcode == Opcode::SMSG_CALENDAR_FILTER_GUILD) {
        return &SMSG_CALENDAR_FILTER_GUILD;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_FILTER_GUILD& ServerOpcode::get<SMSG_CALENDAR_FILTER_GUILD>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_FILTER_GUILD>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_ARENA_TEAM* ServerOpcode::get_if<SMSG_CALENDAR_ARENA_TEAM>() {
    if (opcode == Opcode::SMSG_CALENDAR_ARENA_TEAM) {
        return &SMSG_CALENDAR_ARENA_TEAM;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_ARENA_TEAM& ServerOpcode::get<SMSG_CALENDAR_ARENA_TEAM>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_ARENA_TEAM>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE* ServerOpcode::get_if<SMSG_CALENDAR_EVENT_INVITE>() {
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE) {
        return &SMSG_CALENDAR_EVENT_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE& ServerOpcode::get<SMSG_CALENDAR_EVENT_INVITE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_EVENT_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED* ServerOpcode::get_if<SMSG_CALENDAR_EVENT_INVITE_REMOVED>() {
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED) {
        return &SMSG_CALENDAR_EVENT_INVITE_REMOVED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED& ServerOpcode::get<SMSG_CALENDAR_EVENT_INVITE_REMOVED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_STATUS* ServerOpcode::get_if<SMSG_CALENDAR_EVENT_STATUS>() {
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_STATUS) {
        return &SMSG_CALENDAR_EVENT_STATUS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_STATUS& ServerOpcode::get<SMSG_CALENDAR_EVENT_STATUS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_EVENT_STATUS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_COMMAND_RESULT* ServerOpcode::get_if<SMSG_CALENDAR_COMMAND_RESULT>() {
    if (opcode == Opcode::SMSG_CALENDAR_COMMAND_RESULT) {
        return &SMSG_CALENDAR_COMMAND_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_COMMAND_RESULT& ServerOpcode::get<SMSG_CALENDAR_COMMAND_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_COMMAND_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED* ServerOpcode::get_if<SMSG_CALENDAR_RAID_LOCKOUT_ADDED>() {
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_ADDED) {
        return &SMSG_CALENDAR_RAID_LOCKOUT_ADDED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED& ServerOpcode::get<SMSG_CALENDAR_RAID_LOCKOUT_ADDED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_RAID_LOCKOUT_ADDED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED* ServerOpcode::get_if<SMSG_CALENDAR_RAID_LOCKOUT_REMOVED>() {
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) {
        return &SMSG_CALENDAR_RAID_LOCKOUT_REMOVED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED& ServerOpcode::get<SMSG_CALENDAR_RAID_LOCKOUT_REMOVED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT* ServerOpcode::get_if<SMSG_CALENDAR_EVENT_INVITE_ALERT>() {
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_ALERT) {
        return &SMSG_CALENDAR_EVENT_INVITE_ALERT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT& ServerOpcode::get<SMSG_CALENDAR_EVENT_INVITE_ALERT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_EVENT_INVITE_ALERT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT* ServerOpcode::get_if<SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT>() {
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) {
        return &SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT& ServerOpcode::get<SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT* ServerOpcode::get_if<SMSG_CALENDAR_EVENT_REMOVED_ALERT>() {
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_REMOVED_ALERT) {
        return &SMSG_CALENDAR_EVENT_REMOVED_ALERT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT& ServerOpcode::get<SMSG_CALENDAR_EVENT_REMOVED_ALERT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_EVENT_REMOVED_ALERT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT* ServerOpcode::get_if<SMSG_CALENDAR_EVENT_UPDATED_ALERT>() {
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_UPDATED_ALERT) {
        return &SMSG_CALENDAR_EVENT_UPDATED_ALERT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT& ServerOpcode::get<SMSG_CALENDAR_EVENT_UPDATED_ALERT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_EVENT_UPDATED_ALERT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT* ServerOpcode::get_if<SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT>() {
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) {
        return &SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT& ServerOpcode::get<SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_NUM_PENDING* ServerOpcode::get_if<CMSG_CALENDAR_GET_NUM_PENDING>() {
    if (opcode == Opcode::CMSG_CALENDAR_GET_NUM_PENDING) {
        return &CMSG_CALENDAR_GET_NUM_PENDING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::CMSG_CALENDAR_GET_NUM_PENDING& ServerOpcode::get<CMSG_CALENDAR_GET_NUM_PENDING>() {
    auto p = ServerOpcode::get_if<wrath::CMSG_CALENDAR_GET_NUM_PENDING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_NUM_PENDING* ServerOpcode::get_if<SMSG_CALENDAR_SEND_NUM_PENDING>() {
    if (opcode == Opcode::SMSG_CALENDAR_SEND_NUM_PENDING) {
        return &SMSG_CALENDAR_SEND_NUM_PENDING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_SEND_NUM_PENDING& ServerOpcode::get<SMSG_CALENDAR_SEND_NUM_PENDING>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_SEND_NUM_PENDING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH_RATE_Server* ServerOpcode::get_if<MSG_MOVE_SET_PITCH_RATE_Server>() {
    if (opcode == Opcode::MSG_MOVE_SET_PITCH_RATE) {
        return &MSG_MOVE_SET_PITCH_RATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_SET_PITCH_RATE_Server& ServerOpcode::get<MSG_MOVE_SET_PITCH_RATE_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_SET_PITCH_RATE_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_PITCH_RATE_CHANGE* ServerOpcode::get_if<SMSG_FORCE_PITCH_RATE_CHANGE>() {
    if (opcode == Opcode::SMSG_FORCE_PITCH_RATE_CHANGE) {
        return &SMSG_FORCE_PITCH_RATE_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_FORCE_PITCH_RATE_CHANGE& ServerOpcode::get<SMSG_FORCE_PITCH_RATE_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_FORCE_PITCH_RATE_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES* ServerOpcode::get_if<SMSG_CALENDAR_EVENT_INVITE_NOTES>() {
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES) {
        return &SMSG_CALENDAR_EVENT_INVITE_NOTES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES& ServerOpcode::get<SMSG_CALENDAR_EVENT_INVITE_NOTES>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT* ServerOpcode::get_if<SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT>() {
    if (opcode == Opcode::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) {
        return &SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT& ServerOpcode::get<SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE* ServerOpcode::get_if<SMSG_UPDATE_ACCOUNT_DATA_COMPLETE>() {
    if (opcode == Opcode::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) {
        return &SMSG_UPDATE_ACCOUNT_DATA_COMPLETE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE& ServerOpcode::get<SMSG_UPDATE_ACCOUNT_DATA_COMPLETE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRIGGER_MOVIE* ServerOpcode::get_if<SMSG_TRIGGER_MOVIE>() {
    if (opcode == Opcode::SMSG_TRIGGER_MOVIE) {
        return &SMSG_TRIGGER_MOVIE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TRIGGER_MOVIE& ServerOpcode::get<SMSG_TRIGGER_MOVIE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TRIGGER_MOVIE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACHIEVEMENT_EARNED* ServerOpcode::get_if<SMSG_ACHIEVEMENT_EARNED>() {
    if (opcode == Opcode::SMSG_ACHIEVEMENT_EARNED) {
        return &SMSG_ACHIEVEMENT_EARNED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACHIEVEMENT_EARNED& ServerOpcode::get<SMSG_ACHIEVEMENT_EARNED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ACHIEVEMENT_EARNED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CRITERIA_UPDATE* ServerOpcode::get_if<SMSG_CRITERIA_UPDATE>() {
    if (opcode == Opcode::SMSG_CRITERIA_UPDATE) {
        return &SMSG_CRITERIA_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CRITERIA_UPDATE& ServerOpcode::get<SMSG_CRITERIA_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CRITERIA_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS* ServerOpcode::get_if<SMSG_RESPOND_INSPECT_ACHIEVEMENTS>() {
    if (opcode == Opcode::SMSG_RESPOND_INSPECT_ACHIEVEMENTS) {
        return &SMSG_RESPOND_INSPECT_ACHIEVEMENTS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS& ServerOpcode::get<SMSG_RESPOND_INSPECT_ACHIEVEMENTS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_RESPOND_INSPECT_ACHIEVEMENTS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL* ServerOpcode::get_if<SMSG_QUESTUPDATE_ADD_PVP_KILL>() {
    if (opcode == Opcode::SMSG_QUESTUPDATE_ADD_PVP_KILL) {
        return &SMSG_QUESTUPDATE_ADD_PVP_KILL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL& ServerOpcode::get<SMSG_QUESTUPDATE_ADD_PVP_KILL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUESTUPDATE_ADD_PVP_KILL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED* ServerOpcode::get_if<SMSG_CALENDAR_RAID_LOCKOUT_UPDATED>() {
    if (opcode == Opcode::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) {
        return &SMSG_CALENDAR_RAID_LOCKOUT_UPDATED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED& ServerOpcode::get<SMSG_CALENDAR_RAID_LOCKOUT_UPDATED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_CUSTOMIZE* ServerOpcode::get_if<SMSG_CHAR_CUSTOMIZE>() {
    if (opcode == Opcode::SMSG_CHAR_CUSTOMIZE) {
        return &SMSG_CHAR_CUSTOMIZE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_CUSTOMIZE& ServerOpcode::get<SMSG_CHAR_CUSTOMIZE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHAR_CUSTOMIZE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PHASE_SHIFT* ServerOpcode::get_if<SMSG_SET_PHASE_SHIFT>() {
    if (opcode == Opcode::SMSG_SET_PHASE_SHIFT) {
        return &SMSG_SET_PHASE_SHIFT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PHASE_SHIFT& ServerOpcode::get<SMSG_SET_PHASE_SHIFT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SET_PHASE_SHIFT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ALL_ACHIEVEMENT_DATA* ServerOpcode::get_if<SMSG_ALL_ACHIEVEMENT_DATA>() {
    if (opcode == Opcode::SMSG_ALL_ACHIEVEMENT_DATA) {
        return &SMSG_ALL_ACHIEVEMENT_DATA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ALL_ACHIEVEMENT_DATA& ServerOpcode::get<SMSG_ALL_ACHIEVEMENT_DATA>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ALL_ACHIEVEMENT_DATA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_POWER_UPDATE* ServerOpcode::get_if<SMSG_POWER_UPDATE>() {
    if (opcode == Opcode::SMSG_POWER_UPDATE) {
        return &SMSG_POWER_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_POWER_UPDATE& ServerOpcode::get<SMSG_POWER_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_POWER_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_HIGHEST_THREAT_UPDATE* ServerOpcode::get_if<SMSG_HIGHEST_THREAT_UPDATE>() {
    if (opcode == Opcode::SMSG_HIGHEST_THREAT_UPDATE) {
        return &SMSG_HIGHEST_THREAT_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_HIGHEST_THREAT_UPDATE& ServerOpcode::get<SMSG_HIGHEST_THREAT_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_HIGHEST_THREAT_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_UPDATE* ServerOpcode::get_if<SMSG_THREAT_UPDATE>() {
    if (opcode == Opcode::SMSG_THREAT_UPDATE) {
        return &SMSG_THREAT_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_UPDATE& ServerOpcode::get<SMSG_THREAT_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_THREAT_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_REMOVE* ServerOpcode::get_if<SMSG_THREAT_REMOVE>() {
    if (opcode == Opcode::SMSG_THREAT_REMOVE) {
        return &SMSG_THREAT_REMOVE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_REMOVE& ServerOpcode::get<SMSG_THREAT_REMOVE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_THREAT_REMOVE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_CLEAR* ServerOpcode::get_if<SMSG_THREAT_CLEAR>() {
    if (opcode == Opcode::SMSG_THREAT_CLEAR) {
        return &SMSG_THREAT_CLEAR;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_THREAT_CLEAR& ServerOpcode::get<SMSG_THREAT_CLEAR>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_THREAT_CLEAR>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CONVERT_RUNE* ServerOpcode::get_if<SMSG_CONVERT_RUNE>() {
    if (opcode == Opcode::SMSG_CONVERT_RUNE) {
        return &SMSG_CONVERT_RUNE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CONVERT_RUNE& ServerOpcode::get<SMSG_CONVERT_RUNE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CONVERT_RUNE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESYNC_RUNES* ServerOpcode::get_if<SMSG_RESYNC_RUNES>() {
    if (opcode == Opcode::SMSG_RESYNC_RUNES) {
        return &SMSG_RESYNC_RUNES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_RESYNC_RUNES& ServerOpcode::get<SMSG_RESYNC_RUNES>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_RESYNC_RUNES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ADD_RUNE_POWER* ServerOpcode::get_if<SMSG_ADD_RUNE_POWER>() {
    if (opcode == Opcode::SMSG_ADD_RUNE_POWER) {
        return &SMSG_ADD_RUNE_POWER;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ADD_RUNE_POWER& ServerOpcode::get<SMSG_ADD_RUNE_POWER>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ADD_RUNE_POWER>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_LIST_PENDING_SALES* ServerOpcode::get_if<SMSG_AUCTION_LIST_PENDING_SALES>() {
    if (opcode == Opcode::SMSG_AUCTION_LIST_PENDING_SALES) {
        return &SMSG_AUCTION_LIST_PENDING_SALES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AUCTION_LIST_PENDING_SALES& ServerOpcode::get<SMSG_AUCTION_LIST_PENDING_SALES>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AUCTION_LIST_PENDING_SALES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MODIFY_COOLDOWN* ServerOpcode::get_if<SMSG_MODIFY_COOLDOWN>() {
    if (opcode == Opcode::SMSG_MODIFY_COOLDOWN) {
        return &SMSG_MODIFY_COOLDOWN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MODIFY_COOLDOWN& ServerOpcode::get<SMSG_MODIFY_COOLDOWN>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MODIFY_COOLDOWN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UPDATE_COMBO_POINTS* ServerOpcode::get_if<SMSG_PET_UPDATE_COMBO_POINTS>() {
    if (opcode == Opcode::SMSG_PET_UPDATE_COMBO_POINTS) {
        return &SMSG_PET_UPDATE_COMBO_POINTS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UPDATE_COMBO_POINTS& ServerOpcode::get<SMSG_PET_UPDATE_COMBO_POINTS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_UPDATE_COMBO_POINTS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PRE_RESURRECT* ServerOpcode::get_if<SMSG_PRE_RESURRECT>() {
    if (opcode == Opcode::SMSG_PRE_RESURRECT) {
        return &SMSG_PRE_RESURRECT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PRE_RESURRECT& ServerOpcode::get<SMSG_PRE_RESURRECT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PRE_RESURRECT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AURA_UPDATE_ALL* ServerOpcode::get_if<SMSG_AURA_UPDATE_ALL>() {
    if (opcode == Opcode::SMSG_AURA_UPDATE_ALL) {
        return &SMSG_AURA_UPDATE_ALL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AURA_UPDATE_ALL& ServerOpcode::get<SMSG_AURA_UPDATE_ALL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AURA_UPDATE_ALL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AURA_UPDATE* ServerOpcode::get_if<SMSG_AURA_UPDATE>() {
    if (opcode == Opcode::SMSG_AURA_UPDATE) {
        return &SMSG_AURA_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_AURA_UPDATE& ServerOpcode::get<SMSG_AURA_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_AURA_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SERVER_FIRST_ACHIEVEMENT* ServerOpcode::get_if<SMSG_SERVER_FIRST_ACHIEVEMENT>() {
    if (opcode == Opcode::SMSG_SERVER_FIRST_ACHIEVEMENT) {
        return &SMSG_SERVER_FIRST_ACHIEVEMENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SERVER_FIRST_ACHIEVEMENT& ServerOpcode::get<SMSG_SERVER_FIRST_ACHIEVEMENT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SERVER_FIRST_ACHIEVEMENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_LEARNED_SPELL* ServerOpcode::get_if<SMSG_PET_LEARNED_SPELL>() {
    if (opcode == Opcode::SMSG_PET_LEARNED_SPELL) {
        return &SMSG_PET_LEARNED_SPELL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_LEARNED_SPELL& ServerOpcode::get<SMSG_PET_LEARNED_SPELL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_LEARNED_SPELL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UNLEARNED_SPELL* ServerOpcode::get_if<SMSG_PET_UNLEARNED_SPELL>() {
    if (opcode == Opcode::SMSG_PET_UNLEARNED_SPELL) {
        return &SMSG_PET_UNLEARNED_SPELL;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_UNLEARNED_SPELL& ServerOpcode::get<SMSG_PET_UNLEARNED_SPELL>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_UNLEARNED_SPELL>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA* ServerOpcode::get_if<SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA>() {
    if (opcode == Opcode::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) {
        return &SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA& ServerOpcode::get<SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CRITERIA_DELETED* ServerOpcode::get_if<SMSG_CRITERIA_DELETED>() {
    if (opcode == Opcode::SMSG_CRITERIA_DELETED) {
        return &SMSG_CRITERIA_DELETED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CRITERIA_DELETED& ServerOpcode::get<SMSG_CRITERIA_DELETED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CRITERIA_DELETED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACHIEVEMENT_DELETED* ServerOpcode::get_if<SMSG_ACHIEVEMENT_DELETED>() {
    if (opcode == Opcode::SMSG_ACHIEVEMENT_DELETED) {
        return &SMSG_ACHIEVEMENT_DELETED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ACHIEVEMENT_DELETED& ServerOpcode::get<SMSG_ACHIEVEMENT_DELETED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ACHIEVEMENT_DELETED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_INFO_THROTTLED* ServerOpcode::get_if<SMSG_BATTLEGROUND_INFO_THROTTLED>() {
    if (opcode == Opcode::SMSG_BATTLEGROUND_INFO_THROTTLED) {
        return &SMSG_BATTLEGROUND_INFO_THROTTLED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEGROUND_INFO_THROTTLED& ServerOpcode::get<SMSG_BATTLEGROUND_INFO_THROTTLED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEGROUND_INFO_THROTTLED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYER_VEHICLE_DATA* ServerOpcode::get_if<SMSG_PLAYER_VEHICLE_DATA>() {
    if (opcode == Opcode::SMSG_PLAYER_VEHICLE_DATA) {
        return &SMSG_PLAYER_VEHICLE_DATA;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PLAYER_VEHICLE_DATA& ServerOpcode::get<SMSG_PLAYER_VEHICLE_DATA>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PLAYER_VEHICLE_DATA>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_GUIDS* ServerOpcode::get_if<SMSG_PET_GUIDS>() {
    if (opcode == Opcode::SMSG_PET_GUIDS) {
        return &SMSG_PET_GUIDS;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_PET_GUIDS& ServerOpcode::get<SMSG_PET_GUIDS>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_PET_GUIDS>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLIENTCACHE_VERSION* ServerOpcode::get_if<SMSG_CLIENTCACHE_VERSION>() {
    if (opcode == Opcode::SMSG_CLIENTCACHE_VERSION) {
        return &SMSG_CLIENTCACHE_VERSION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CLIENTCACHE_VERSION& ServerOpcode::get<SMSG_CLIENTCACHE_VERSION>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CLIENTCACHE_VERSION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_REFUND_INFO_RESPONSE* ServerOpcode::get_if<SMSG_ITEM_REFUND_INFO_RESPONSE>() {
    if (opcode == Opcode::SMSG_ITEM_REFUND_INFO_RESPONSE) {
        return &SMSG_ITEM_REFUND_INFO_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_REFUND_INFO_RESPONSE& ServerOpcode::get<SMSG_ITEM_REFUND_INFO_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ITEM_REFUND_INFO_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_REFUND_RESULT* ServerOpcode::get_if<SMSG_ITEM_REFUND_RESULT>() {
    if (opcode == Opcode::SMSG_ITEM_REFUND_RESULT) {
        return &SMSG_ITEM_REFUND_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ITEM_REFUND_RESULT& ServerOpcode::get<SMSG_ITEM_REFUND_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ITEM_REFUND_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE* ServerOpcode::get_if<SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE>() {
    if (opcode == Opcode::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) {
        return &SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE& ServerOpcode::get<SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION* ServerOpcode::get_if<SMSG_CALENDAR_CLEAR_PENDING_ACTION>() {
    if (opcode == Opcode::SMSG_CALENDAR_CLEAR_PENDING_ACTION) {
        return &SMSG_CALENDAR_CLEAR_PENDING_ACTION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION& ServerOpcode::get<SMSG_CALENDAR_CLEAR_PENDING_ACTION>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CALENDAR_CLEAR_PENDING_ACTION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EQUIPMENT_SET_LIST* ServerOpcode::get_if<SMSG_EQUIPMENT_SET_LIST>() {
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_LIST) {
        return &SMSG_EQUIPMENT_SET_LIST;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EQUIPMENT_SET_LIST& ServerOpcode::get<SMSG_EQUIPMENT_SET_LIST>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_EQUIPMENT_SET_LIST>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PROJECTILE_POSITION* ServerOpcode::get_if<SMSG_SET_PROJECTILE_POSITION>() {
    if (opcode == Opcode::SMSG_SET_PROJECTILE_POSITION) {
        return &SMSG_SET_PROJECTILE_POSITION;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SET_PROJECTILE_POSITION& ServerOpcode::get<SMSG_SET_PROJECTILE_POSITION>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SET_PROJECTILE_POSITION>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TALENTS_INFO* ServerOpcode::get_if<SMSG_TALENTS_INFO>() {
    if (opcode == Opcode::SMSG_TALENTS_INFO) {
        return &SMSG_TALENTS_INFO;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TALENTS_INFO& ServerOpcode::get<SMSG_TALENTS_INFO>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TALENTS_INFO>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_UNIT_DESTROYED* ServerOpcode::get_if<SMSG_ARENA_UNIT_DESTROYED>() {
    if (opcode == Opcode::SMSG_ARENA_UNIT_DESTROYED) {
        return &SMSG_ARENA_UNIT_DESTROYED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_UNIT_DESTROYED& ServerOpcode::get<SMSG_ARENA_UNIT_DESTROYED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ARENA_UNIT_DESTROYED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED* ServerOpcode::get_if<SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED>() {
    if (opcode == Opcode::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) {
        return &SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED& ServerOpcode::get<SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_GRAVITY_DISABLE* ServerOpcode::get_if<SMSG_MOVE_GRAVITY_DISABLE>() {
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_DISABLE) {
        return &SMSG_MOVE_GRAVITY_DISABLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_GRAVITY_DISABLE& ServerOpcode::get<SMSG_MOVE_GRAVITY_DISABLE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_GRAVITY_DISABLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_GRAVITY_ENABLE* ServerOpcode::get_if<SMSG_MOVE_GRAVITY_ENABLE>() {
    if (opcode == Opcode::SMSG_MOVE_GRAVITY_ENABLE) {
        return &SMSG_MOVE_GRAVITY_ENABLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_GRAVITY_ENABLE& ServerOpcode::get<SMSG_MOVE_GRAVITY_ENABLE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_GRAVITY_ENABLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_GRAVITY_CHNG_Server* ServerOpcode::get_if<MSG_MOVE_GRAVITY_CHNG_Server>() {
    if (opcode == Opcode::MSG_MOVE_GRAVITY_CHNG) {
        return &MSG_MOVE_GRAVITY_CHNG;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_MOVE_GRAVITY_CHNG_Server& ServerOpcode::get<MSG_MOVE_GRAVITY_CHNG_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_MOVE_GRAVITY_CHNG_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE* ServerOpcode::get_if<SMSG_SPLINE_MOVE_GRAVITY_DISABLE>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_DISABLE) {
        return &SMSG_SPLINE_MOVE_GRAVITY_DISABLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE& ServerOpcode::get<SMSG_SPLINE_MOVE_GRAVITY_DISABLE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_GRAVITY_DISABLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE* ServerOpcode::get_if<SMSG_SPLINE_MOVE_GRAVITY_ENABLE>() {
    if (opcode == Opcode::SMSG_SPLINE_MOVE_GRAVITY_ENABLE) {
        return &SMSG_SPLINE_MOVE_GRAVITY_ENABLE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE& ServerOpcode::get<SMSG_SPLINE_MOVE_GRAVITY_ENABLE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SPLINE_MOVE_GRAVITY_ENABLE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EQUIPMENT_SET_USE_RESULT* ServerOpcode::get_if<SMSG_EQUIPMENT_SET_USE_RESULT>() {
    if (opcode == Opcode::SMSG_EQUIPMENT_SET_USE_RESULT) {
        return &SMSG_EQUIPMENT_SET_USE_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_EQUIPMENT_SET_USE_RESULT& ServerOpcode::get<SMSG_EQUIPMENT_SET_USE_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_EQUIPMENT_SET_USE_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_FACTION_CHANGE* ServerOpcode::get_if<SMSG_CHAR_FACTION_CHANGE>() {
    if (opcode == Opcode::SMSG_CHAR_FACTION_CHANGE) {
        return &SMSG_CHAR_FACTION_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CHAR_FACTION_CHANGE& ServerOpcode::get<SMSG_CHAR_FACTION_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CHAR_FACTION_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE* ServerOpcode::get_if<SMSG_BATTLEFIELD_MGR_ENTRY_INVITE>() {
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) {
        return &SMSG_BATTLEFIELD_MGR_ENTRY_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE& ServerOpcode::get<SMSG_BATTLEFIELD_MGR_ENTRY_INVITE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_ENTERED* ServerOpcode::get_if<SMSG_BATTLEFIELD_MGR_ENTERED>() {
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_ENTERED) {
        return &SMSG_BATTLEFIELD_MGR_ENTERED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_ENTERED& ServerOpcode::get<SMSG_BATTLEFIELD_MGR_ENTERED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEFIELD_MGR_ENTERED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE* ServerOpcode::get_if<SMSG_BATTLEFIELD_MGR_QUEUE_INVITE>() {
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) {
        return &SMSG_BATTLEFIELD_MGR_QUEUE_INVITE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE& ServerOpcode::get<SMSG_BATTLEFIELD_MGR_QUEUE_INVITE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE* ServerOpcode::get_if<SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE>() {
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) {
        return &SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE& ServerOpcode::get<SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING* ServerOpcode::get_if<SMSG_BATTLEFIELD_MGR_EJECT_PENDING>() {
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECT_PENDING) {
        return &SMSG_BATTLEFIELD_MGR_EJECT_PENDING;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING& ServerOpcode::get<SMSG_BATTLEFIELD_MGR_EJECT_PENDING>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEFIELD_MGR_EJECT_PENDING>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_EJECTED* ServerOpcode::get_if<SMSG_BATTLEFIELD_MGR_EJECTED>() {
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_EJECTED) {
        return &SMSG_BATTLEFIELD_MGR_EJECTED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_EJECTED& ServerOpcode::get<SMSG_BATTLEFIELD_MGR_EJECTED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEFIELD_MGR_EJECTED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE* ServerOpcode::get_if<SMSG_BATTLEFIELD_MGR_STATE_CHANGE>() {
    if (opcode == Opcode::SMSG_BATTLEFIELD_MGR_STATE_CHANGE) {
        return &SMSG_BATTLEFIELD_MGR_STATE_CHANGE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE& ServerOpcode::get<SMSG_BATTLEFIELD_MGR_STATE_CHANGE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_BATTLEFIELD_MGR_STATE_CHANGE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_RAID_DIFFICULTY_Server* ServerOpcode::get_if<MSG_SET_RAID_DIFFICULTY_Server>() {
    if (opcode == Opcode::MSG_SET_RAID_DIFFICULTY) {
        return &MSG_SET_RAID_DIFFICULTY;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::MSG_SET_RAID_DIFFICULTY_Server& ServerOpcode::get<MSG_SET_RAID_DIFFICULTY_Server>() {
    auto p = ServerOpcode::get_if<wrath::MSG_SET_RAID_DIFFICULTY_Server>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TOGGLE_XP_GAIN* ServerOpcode::get_if<SMSG_TOGGLE_XP_GAIN>() {
    if (opcode == Opcode::SMSG_TOGGLE_XP_GAIN) {
        return &SMSG_TOGGLE_XP_GAIN;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TOGGLE_XP_GAIN& ServerOpcode::get<SMSG_TOGGLE_XP_GAIN>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TOGGLE_XP_GAIN>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_DB_ERROR* ServerOpcode::get_if<SMSG_GMRESPONSE_DB_ERROR>() {
    if (opcode == Opcode::SMSG_GMRESPONSE_DB_ERROR) {
        return &SMSG_GMRESPONSE_DB_ERROR;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_DB_ERROR& ServerOpcode::get<SMSG_GMRESPONSE_DB_ERROR>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GMRESPONSE_DB_ERROR>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_RECEIVED* ServerOpcode::get_if<SMSG_GMRESPONSE_RECEIVED>() {
    if (opcode == Opcode::SMSG_GMRESPONSE_RECEIVED) {
        return &SMSG_GMRESPONSE_RECEIVED;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_RECEIVED& ServerOpcode::get<SMSG_GMRESPONSE_RECEIVED>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GMRESPONSE_RECEIVED>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_STATUS_UPDATE* ServerOpcode::get_if<SMSG_GMRESPONSE_STATUS_UPDATE>() {
    if (opcode == Opcode::SMSG_GMRESPONSE_STATUS_UPDATE) {
        return &SMSG_GMRESPONSE_STATUS_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_GMRESPONSE_STATUS_UPDATE& ServerOpcode::get<SMSG_GMRESPONSE_STATUS_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_GMRESPONSE_STATUS_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE* ServerOpcode::get_if<SMSG_WORLD_STATE_UI_TIMER_UPDATE>() {
    if (opcode == Opcode::SMSG_WORLD_STATE_UI_TIMER_UPDATE) {
        return &SMSG_WORLD_STATE_UI_TIMER_UPDATE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE& ServerOpcode::get<SMSG_WORLD_STATE_UI_TIMER_UPDATE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_WORLD_STATE_UI_TIMER_UPDATE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TALENTS_INVOLUNTARILY_RESET* ServerOpcode::get_if<SMSG_TALENTS_INVOLUNTARILY_RESET>() {
    if (opcode == Opcode::SMSG_TALENTS_INVOLUNTARILY_RESET) {
        return &SMSG_TALENTS_INVOLUNTARILY_RESET;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_TALENTS_INVOLUNTARILY_RESET& ServerOpcode::get<SMSG_TALENTS_INVOLUNTARILY_RESET>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_TALENTS_INVOLUNTARILY_RESET>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE* ServerOpcode::get_if<SMSG_QUERY_QUESTS_COMPLETED_RESPONSE>() {
    if (opcode == Opcode::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) {
        return &SMSG_QUERY_QUESTS_COMPLETED_RESPONSE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE& ServerOpcode::get<SMSG_QUERY_QUESTS_COMPLETED_RESPONSE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_NOT_IN_INSTANCE* ServerOpcode::get_if<SMSG_CORPSE_NOT_IN_INSTANCE>() {
    if (opcode == Opcode::SMSG_CORPSE_NOT_IN_INSTANCE) {
        return &SMSG_CORPSE_NOT_IN_INSTANCE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CORPSE_NOT_IN_INSTANCE& ServerOpcode::get<SMSG_CORPSE_NOT_IN_INSTANCE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CORPSE_NOT_IN_INSTANCE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CAMERA_SHAKE* ServerOpcode::get_if<SMSG_CAMERA_SHAKE>() {
    if (opcode == Opcode::SMSG_CAMERA_SHAKE) {
        return &SMSG_CAMERA_SHAKE;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_CAMERA_SHAKE& ServerOpcode::get<SMSG_CAMERA_SHAKE>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_CAMERA_SHAKE>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SOCKET_GEMS_RESULT* ServerOpcode::get_if<SMSG_SOCKET_GEMS_RESULT>() {
    if (opcode == Opcode::SMSG_SOCKET_GEMS_RESULT) {
        return &SMSG_SOCKET_GEMS_RESULT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_SOCKET_GEMS_RESULT& ServerOpcode::get<SMSG_SOCKET_GEMS_RESULT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_SOCKET_GEMS_RESULT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REDIRECT_CLIENT* ServerOpcode::get_if<SMSG_REDIRECT_CLIENT>() {
    if (opcode == Opcode::SMSG_REDIRECT_CLIENT) {
        return &SMSG_REDIRECT_CLIENT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_REDIRECT_CLIENT& ServerOpcode::get<SMSG_REDIRECT_CLIENT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_REDIRECT_CLIENT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_COLLISION_HGT* ServerOpcode::get_if<SMSG_MOVE_SET_COLLISION_HGT>() {
    if (opcode == Opcode::SMSG_MOVE_SET_COLLISION_HGT) {
        return &SMSG_MOVE_SET_COLLISION_HGT;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MOVE_SET_COLLISION_HGT& ServerOpcode::get<SMSG_MOVE_SET_COLLISION_HGT>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MOVE_SET_COLLISION_HGT>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}

template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MULTIPLE_MOVES* ServerOpcode::get_if<SMSG_MULTIPLE_MOVES>() {
    if (opcode == Opcode::SMSG_MULTIPLE_MOVES) {
        return &SMSG_MULTIPLE_MOVES;
    }
    return nullptr;
}
template <>
WOW_WORLD_MESSAGES_CPP_EXPORT wrath::SMSG_MULTIPLE_MOVES& ServerOpcode::get<SMSG_MULTIPLE_MOVES>() {
    auto p = ServerOpcode::get_if<wrath::SMSG_MULTIPLE_MOVES>();
    if (p) {
        return *p;
    }
    throw bad_opcode_access{};
}


} // namespace wrath
} // namespace wow_world_messages
