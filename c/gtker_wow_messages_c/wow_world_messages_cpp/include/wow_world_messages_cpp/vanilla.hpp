#ifndef WOW_WORLD_MESSAGES_CPP_VANILLA_HPP
#define WOW_WORLD_MESSAGES_CPP_VANILLA_HPP

/* clang-format off */

#include "wow_world_messages_cpp/wow_world_messages.hpp"
#include "wow_world_messages_cpp/all.hpp"

#include <functional> /* std::function */

namespace wow_world_messages {
namespace vanilla {
enum class AccountDataType : uint8_t {
    GLOBAL_CONFIG_CACHE = 0,
    PER_CHARACTER_CONFIG_CACHE = 1,
    GLOBAL_BINDINGS_CACHE = 2,
    PER_CHARACTER_BINDINGS_CACHE = 3,
    GLOBAL_MACROS_CACHE = 4,
    PER_CHARACTER_MACROS_CACHE = 5,
    PER_CHARACTER_LAYOUT_CACHE = 6,
    PER_CHARACTER_CHAT_CACHE = 7,
    NUM_ACCOUNT_DATA_TYPES = 8,
};

enum class ActivateTaxiReply : uint32_t {
    OK = 0,
    UNSPECIFIED_SERVER_ERROR = 1,
    NO_SUCH_PATH = 2,
    NOT_ENOUGH_MONEY = 3,
    TOO_FAR_AWAY = 4,
    NO_VENDOR_NEARBY = 5,
    NOT_VISITED = 6,
    PLAYER_BUSY = 7,
    PLAYER_ALREADY_MOUNTED = 8,
    PLAYER_SHAPE_SHIFTED = 9,
    PLAYER_MOVING = 10,
    SAME_NODE = 11,
    NOT_STANDING = 12,
};

enum class AddonType : uint8_t {
    BANNED = 0,
    ENABLED = 1,
    BLIZZARD = 2,
};

enum class AiReaction : uint32_t {
    ALERT = 0,
    FRIENDLY = 1,
    HOSTILE = 2,
    AFRAID = 3,
    DESTROY = 4,
};

enum class Area : uint32_t {
    NONE = 0,
    DUN_MOROGH = 1,
    LONGSHORE = 2,
    BADLANDS = 3,
    BLASTED_LANDS = 4,
    BLACKWATER_COVE = 7,
    SWAMP_OF_SORROWS = 8,
    NORTHSHIRE_VALLEY = 9,
    DUSKWOOD = 10,
    WETLANDS = 11,
    ELWYNN_FOREST = 12,
    THE_WORLD_TREE = 13,
    DUROTAR = 14,
    DUSTWALLOW_MARSH = 15,
    AZSHARA = 16,
    THE_BARRENS = 17,
    CRYSTAL_LAKE = 18,
    ZUL_GURUB0 = 19,
    MOONBROOK = 20,
    KUL_TIRAS = 21,
    PROGRAMMER_ISLE = 22,
    NORTHSHIRE_RIVER = 23,
    NORTHSHIRE_ABBEY = 24,
    BLACKROCK_MOUNTAIN0 = 25,
    LIGHTHOUSE = 26,
    WESTERN_PLAGUELANDS = 28,
    NINE = 30,
    THE_CEMETARY = 32,
    STRANGLETHORN_VALE = 33,
    ECHO_RIDGE_MINE = 34,
    BOOTY_BAY = 35,
    ALTERAC_MOUNTAINS = 36,
    LAKE_NAZFERITI = 37,
    LOCH_MODAN = 38,
    WESTFALL0 = 40,
    DEADWIND_PASS = 41,
    DARKSHIRE = 42,
    WILD_SHORE = 43,
    REDRIDGE_MOUNTAINS = 44,
    ARATHI_HIGHLANDS = 45,
    BURNING_STEPPES = 46,
    THE_HINTERLANDS = 47,
    DEAD_MANS_HOLE = 49,
    SEARING_GORGE = 51,
    THIEVES_CAMP = 53,
    JASPERLODE_MINE = 54,
    VALLEY_OF_HEROES_UNUSED = 55,
    HEROES_VIGIL = 56,
    FARGODEEP_MINE = 57,
    NORTHSHIRE_VINEYARDS = 59,
    FORESTS_EDGE = 60,
    THUNDER_FALLS = 61,
    BRACKWELL_PUMPKIN_PATCH = 62,
    THE_STONEFIELD_FARM = 63,
    THE_MACLURE_VINEYARDS = 64,
    ON_MAP_DUNGEON0 = 65,
    ON_MAP_DUNGEON1 = 66,
    ON_MAP_DUNGEON2 = 67,
    LAKE_EVERSTILL = 68,
    LAKESHIRE = 69,
    STONEWATCH = 70,
    STONEWATCH_FALLS = 71,
    THE_DARK_PORTAL = 72,
    THE_TAINTED_SCAR = 73,
    POOL_OF_TEARS = 74,
    STONARD = 75,
    FALLOW_SANCTUARY = 76,
    ANVILMAR = 77,
    STORMWIND_MOUNTAINS = 80,
    JEFF_NE_QUADRANT_CHANGED = 81,
    JEFF_NW_QUADRANT = 82,
    JEFF_SE_QUADRANT = 83,
    JEFF_SW_QUADRANT = 84,
    TIRISFAL_GLADES = 85,
    STONE_CAIRN_LAKE = 86,
    GOLDSHIRE = 87,
    EASTVALE_LOGGING_CAMP = 88,
    MIRROR_LAKE_ORCHARD = 89,
    TOWER_OF_AZORA = 91,
    MIRROR_LAKE = 92,
    VUL_GOL_OGRE_MOUND = 93,
    RAVEN_HILL = 94,
    REDRIDGE_CANYONS = 95,
    TOWER_OF_ILGALAR = 96,
    ALTHERS_MILL = 97,
    RETHBAN_CAVERNS = 98,
    REBEL_CAMP = 99,
    NESINGWARYS_EXPEDITION = 100,
    KURZENS_COMPOUND = 101,
    RUINS_OF_ZUL_KUNDA = 102,
    RUINS_OF_ZUL_MAMWE = 103,
    THE_VILE_REEF = 104,
    MOSH_OGG_OGRE_MOUND = 105,
    THE_STOCKPILE = 106,
    SALDEANS_FARM = 107,
    SENTINEL_HILL = 108,
    FURLBROWS_PUMPKIN_FARM = 109,
    JANGOLODE_MINE = 111,
    GOLD_COAST_QUARRY = 113,
    WESTFALL_LIGHTHOUSE = 115,
    MISTY_VALLEY = 116,
    GROM_GOL_BASE_CAMP = 117,
    WHELGARS_EXCAVATION_SITE = 118,
    WESTBROOK_GARRISON = 120,
    TRANQUIL_GARDENS_CEMETERY = 121,
    ZUULDAIA_RUINS = 122,
    BAL_LAL_RUINS = 123,
    KAL_AI_RUINS = 125,
    TKASHI_RUINS = 126,
    BALIA_MAH_RUINS = 127,
    ZIATAJAI_RUINS = 128,
    MIZJAH_RUINS = 129,
    SILVERPINE_FOREST = 130,
    KHARANOS = 131,
    COLDRIDGE_VALLEY = 132,
    GNOMEREGAN0 = 133,
    GOL_BOLAR_QUARRY = 134,
    FROSTMANE_HOLD = 135,
    THE_GRIZZLED_DEN = 136,
    BREWNALL_VILLAGE = 137,
    MISTY_PINE_REFUGE = 138,
    EASTERN_PLAGUELANDS = 139,
    TELDRASSIL = 141,
    IRONBANDS_EXCAVATION_SITE = 142,
    MO_GROSH_STRONGHOLD = 143,
    THELSAMAR = 144,
    ALGAZ_GATE = 145,
    STONEWROUGHT_DAM = 146,
    THE_FARSTRIDER_LODGE = 147,
    DARKSHORE = 148,
    SILVER_STREAM_MINE = 149,
    MENETHIL_HARBOR = 150,
    DESIGNER_ISLAND = 151,
    THE_BULWARK0 = 152,
    RUINS_OF_LORDAERON = 153,
    DEATHKNELL = 154,
    NIGHT_WEBS_HOLLOW = 155,
    SOLLIDEN_FARMSTEAD = 156,
    AGAMAND_MILLS = 157,
    AGAMAND_FAMILY_CRYPT = 158,
    BRILL = 159,
    WHISPERING_GARDENS = 160,
    TERRACE_OF_REPOSE = 161,
    BRIGHTWATER_LAKE = 162,
    GUNTHERS_RETREAT = 163,
    GARRENS_HAUNT = 164,
    BALNIR_FARMSTEAD = 165,
    COLD_HEARTH_MANOR = 166,
    CRUSADER_OUTPOST = 167,
    THE_NORTH_COAST = 168,
    WHISPERING_SHORE = 169,
    LORDAMERE_LAKE0 = 170,
    FENRIS_ISLE = 172,
    FAOLS_REST = 173,
    DOLANAAR = 186,
    DARNASSUS_UNUSED = 187,
    SHADOWGLEN = 188,
    STEELGRILLS_DEPOT = 189,
    HEARTHGLEN = 190,
    NORTHRIDGE_LUMBER_CAMP = 192,
    RUINS_OF_ANDORHAL = 193,
    SCHOOL_OF_NECROMANCY = 195,
    UTHERS_TOMB = 196,
    SORROW_HILL = 197,
    THE_WEEPING_CAVE = 198,
    FELSTONE_FIELD = 199,
    DALSONS_TEARS = 200,
    GAHRRONS_WITHERING = 201,
    THE_WRITHING_HAUNT = 202,
    MARDENHOLDE_KEEP = 203,
    PYREWOOD_VILLAGE = 204,
    DUN_MODR = 205,
    WESTFALL1 = 206,
    THE_GREAT_SEA0 = 207,
    UNUSED_IRONCLADCOVE = 208,
    SHADOWFANG_KEEP0 = 209,
    ON_MAP_DUNGEON3 = 210,
    ICEFLOW_LAKE = 211,
    HELMS_BED_LAKE = 212,
    DEEP_ELEM_MINE = 213,
    THE_GREAT_SEA1 = 214,
    MULGORE = 215,
    ALEXSTON_FARMSTEAD = 219,
    RED_CLOUD_MESA = 220,
    CAMP_NARACHE = 221,
    BLOODHOOF_VILLAGE = 222,
    STONEBULL_LAKE = 223,
    RAVAGED_CARAVAN = 224,
    RED_ROCKS = 225,
    THE_SKITTERING_DARK = 226,
    VALGANS_FIELD = 227,
    THE_SEPULCHER = 228,
    OLSENS_FARTHING = 229,
    THE_GREYMANE_WALL = 230,
    BERENS_PERIL = 231,
    THE_DAWNING_ISLES = 232,
    AMBERMILL = 233,
    FENRIS_KEEP = 235,
    SHADOWFANG_KEEP1 = 236,
    THE_DECREPIT_FERRY = 237,
    MALDENS_ORCHARD = 238,
    THE_IVAR_PATCH = 239,
    THE_DEAD_FIELD = 240,
    THE_ROTTING_ORCHARD = 241,
    BRIGHTWOOD_GROVE = 242,
    FORLORN_ROWE = 243,
    THE_WHIPPLE_ESTATE = 244,
    THE_YORGEN_FARMSTEAD = 245,
    THE_CAULDRON = 246,
    GRIMESILT_DIG_SITE = 247,
    DREADMAUL_ROCK = 249,
    RUINS_OF_THAURISSAN = 250,
    FLAME_CREST = 251,
    BLACKROCK_STRONGHOLD = 252,
    THE_PILLAR_OF_ASH = 253,
    BLACKROCK_MOUNTAIN1 = 254,
    ALTAR_OF_STORMS0 = 255,
    ALDRASSIL = 256,
    SHADOWTHREAD_CAVE = 257,
    FEL_ROCK = 258,
    LAKE_AL_AMETH = 259,
    STARBREEZE_VILLAGE = 260,
    GNARLPINE_HOLD = 261,
    BAN_ETHIL_BARROW_DEN = 262,
    THE_CLEFT = 263,
    THE_ORACLE_GLADE = 264,
    WELLSPRING_RIVER = 265,
    WELLSPRING_LAKE = 266,
    HILLSBRAD_FOOTHILLS = 267,
    AZSHARA_CRATER = 268,
    DUN_ALGAZ0 = 269,
    SOUTHSHORE0 = 271,
    TARREN_MILL0 = 272,
    DURNHOLDE_KEEP0 = 275,
    UNUSED_STONEWROUGHT_PASS = 276,
    THE_FOOTHILL_CAVERNS = 277,
    LORDAMERE_INTERNMENT_CAMP = 278,
    DALARAN = 279,
    STRAHNBRAD = 280,
    RUINS_OF_ALTERAC = 281,
    CRUSHRIDGE_HOLD = 282,
    SLAUGHTER_HOLLOW = 283,
    THE_UPLANDS = 284,
    SOUTHPOINT_TOWER0 = 285,
    HILLSBRAD_FIELDS0 = 286,
    HILLSBRAD = 287,
    AZURELODE_MINE0 = 288,
    NETHANDER_STEAD0 = 289,
    DUN_GAROK0 = 290,
    THORADINS_WALL0 = 293,
    EASTERN_STRAND0 = 294,
    WESTERN_STRAND0 = 295,
    SOUTH_SEAS_UNUSED = 296,
    JAGUERO_ISLE = 297,
    BARADIN_BAY = 298,
    MENETHIL_BAY = 299,
    MISTY_REED_STRAND = 300,
    THE_SAVAGE_COAST = 301,
    THE_CRYSTAL_SHORE = 302,
    SHELL_BEACH = 303,
    NORTH_TIDES_RUN = 305,
    SOUTH_TIDES_RUN = 306,
    THE_OVERLOOK_CLIFFS = 307,
    THE_FORBIDDING_SEA0 = 308,
    IRONBEARDS_TOMB = 309,
    CRYSTALVEIN_MINE = 310,
    RUINS_OF_ABORAZ = 311,
    JANEIROS_POINT = 312,
    NORTHFOLD_MANOR = 313,
    GO_SHEK_FARM = 314,
    DABYRIES_FARMSTEAD = 315,
    BOULDERFIST_HALL = 316,
    WITHERBARK_VILLAGE = 317,
    DRYWHISKER_GORGE = 318,
    REFUGE_POINTE = 320,
    HAMMERFALL = 321,
    BLACKWATER_SHIPWRECKS = 322,
    O_BREENS_CAMP = 323,
    STROMGARDE_KEEP = 324,
    THE_TOWER_OF_ARATHOR = 325,
    THE_SANCTUM = 326,
    FALDIRS_COVE = 327,
    THE_DROWNED_REEF = 328,
    THANDOL_SPAN0 = 330,
    ASHENVALE = 331,
    THE_GREAT_SEA2 = 332,
    CIRCLE_OF_EAST_BINDING = 333,
    CIRCLE_OF_WEST_BINDING = 334,
    CIRCLE_OF_INNER_BINDING = 335,
    CIRCLE_OF_OUTER_BINDING = 336,
    APOCRYPHANS_REST = 337,
    ANGOR_FORTRESS = 338,
    LETHLOR_RAVINE = 339,
    KARGATH = 340,
    CAMP_KOSH = 341,
    CAMP_BOFF = 342,
    CAMP_WURG = 343,
    CAMP_CAGG = 344,
    AGMONDS_END = 345,
    HAMMERTOES_DIGSITE = 346,
    DUSTBELCH_GROTTO = 347,
    AERIE_PEAK = 348,
    WILDHAMMER_KEEP = 349,
    QUEL_DANIL_LODGE = 350,
    SKULK_ROCK = 351,
    ZUN_WATHA = 352,
    SHADRA_ALOR = 353,
    JINTHA_ALOR = 354,
    THE_ALTAR_OF_ZUL = 355,
    SERADANE = 356,
    FERALAS = 357,
    BRAMBLEBLADE_RAVINE = 358,
    BAEL_MODAN = 359,
    THE_VENTURE_CO_MINE = 360,
    FELWOOD = 361,
    RAZOR_HILL = 362,
    VALLEY_OF_TRIALS = 363,
    THE_DEN = 364,
    BURNING_BLADE_COVEN = 365,
    KOLKAR_CRAG = 366,
    SEN_JIN_VILLAGE = 367,
    ECHO_ISLES = 368,
    THUNDER_RIDGE = 369,
    DRYGULCH_RAVINE = 370,
    DUSTWIND_CAVE = 371,
    TIRAGARDE_KEEP = 372,
    SCUTTLE_COAST = 373,
    BLADEFIST_BAY = 374,
    DEADEYE_SHORE = 375,
    SOUTHFURY_RIVER0 = 377,
    CAMP_TAURAJO = 378,
    FAR_WATCH_POST = 379,
    THE_CROSSROADS = 380,
    BOULDER_LODE_MINE = 381,
    THE_SLUDGE_FEN = 382,
    THE_DRY_HILLS = 383,
    DREADMIST_PEAK = 384,
    NORTHWATCH_HOLD = 385,
    THE_FORGOTTEN_POOLS = 386,
    LUSHWATER_OASIS = 387,
    THE_STAGNANT_OASIS = 388,
    FIELD_OF_GIANTS = 390,
    THE_MERCHANT_COAST = 391,
    RATCHET = 392,
    DARKSPEAR_STRAND = 393,
    DARROWMERE_LAKE_UNUSED = 394,
    CAER_DARROW_UNUSED = 395,
    WINTERHOOF_WATER_WELL = 396,
    THUNDERHORN_WATER_WELL = 397,
    WILDMANE_WATER_WELL = 398,
    SKYLINE_RIDGE = 399,
    THOUSAND_NEEDLES = 400,
    THE_TIDUS_STAIR = 401,
    SHADY_REST_INN = 403,
    BAEL_DUN_DIGSITE = 404,
    DESOLACE = 405,
    STONETALON_MOUNTAINS = 406,
    ORGRIMMAR_UNUSED = 407,
    GILLIJIMS_ISLE = 408,
    ISLAND_OF_DOCTOR_LAPIDIS = 409,
    RAZORWIND_CANYON = 410,
    BATHRANS_HAUNT = 411,
    THE_RUINS_OF_ORDIL_ARAN = 412,
    MAESTRAS_POST = 413,
    THE_ZORAM_STRAND = 414,
    ASTRANAAR = 415,
    THE_SHRINE_OF_AESSINA = 416,
    FIRE_SCAR_SHRINE = 417,
    THE_RUINS_OF_STARDUST = 418,
    THE_HOWLING_VALE = 419,
    SILVERWIND_REFUGE = 420,
    MYSTRAL_LAKE = 421,
    FALLEN_SKY_LAKE = 422,
    IRIS_LAKE = 424,
    MOONWELL = 425,
    RAYNEWOOD_RETREAT = 426,
    THE_SHADY_NOOK = 427,
    NIGHT_RUN = 428,
    XAVIAN = 429,
    SATYRNAAR = 430,
    SPLINTERTREE_POST = 431,
    THE_DOR_DANIL_BARROW_DEN = 432,
    FALFARREN_RIVER = 433,
    FELFIRE_HILL = 434,
    DEMON_FALL_CANYON = 435,
    DEMON_FALL_RIDGE = 436,
    WARSONG_LUMBER_CAMP = 437,
    BOUGH_SHADOW = 438,
    THE_SHIMMERING_FLATS = 439,
    TANARIS = 440,
    LAKE_FALATHIM = 441,
    AUBERDINE = 442,
    RUINS_OF_MATHYSTRA = 443,
    TOWER_OF_ALTHALAXX = 444,
    CLIFFSPRING_FALLS = 445,
    BASHAL_ARAN = 446,
    AMETH_ARAN = 447,
    GROVE_OF_THE_ANCIENTS = 448,
    THE_MASTERS_GLAIVE = 449,
    REMTRAVELS_EXCAVATION = 450,
    MISTS_EDGE = 452,
    THE_LONG_WASH = 453,
    WILDBEND_RIVER = 454,
    BLACKWOOD_DEN = 455,
    CLIFFSPRING_RIVER = 456,
    THE_VEILED_SEA0 = 457,
    GOLD_ROAD = 458,
    SCARLET_WATCH_POST = 459,
    SUN_ROCK_RETREAT = 460,
    WINDSHEAR_CRAG = 461,
    CRAGPOOL_LAKE = 463,
    MIRKFALLON_LAKE = 464,
    THE_CHARRED_VALE = 465,
    VALLEY_OF_THE_BLOODFURIES = 466,
    STONETALON_PEAK = 467,
    THE_TALON_DEN = 468,
    GREATWOOD_VALE = 469,
    THUNDER_BLUFF_UNUSED = 470,
    BRAVE_WIND_MESA = 471,
    FIRE_STONE_MESA = 472,
    MANTLE_ROCK = 473,
    HUNTER_RISE_UNUSED = 474,
    SPIRIT_RISE_UNUSED = 475,
    ELDER_RISE_UNUSED = 476,
    RUINS_OF_JUBUWAL = 477,
    POOLS_OF_ARLITHRIEN = 478,
    THE_RUSTMAUL_DIG_SITE = 479,
    CAMP_E_THOK = 480,
    SPLITHOOF_CRAG = 481,
    HIGHPERCH = 482,
    THE_SCREECHING_CANYON = 483,
    FREEWIND_POST = 484,
    THE_GREAT_LIFT0 = 485,
    GALAK_HOLD = 486,
    ROGUEFEATHER_DEN = 487,
    THE_WEATHERED_NOOK = 488,
    THALANAAR = 489,
    UN_GORO_CRATER = 490,
    RAZORFEN_KRAUL0 = 491,
    RAVEN_HILL_CEMETERY = 492,
    MOONGLADE = 493,
    DELETE_ME0 = 495,
    BRACKENWALL_VILLAGE = 496,
    SWAMPLIGHT_MANOR = 497,
    BLOODFEN_BURROW = 498,
    DARKMIST_CAVERN = 499,
    MOGGLE_POINT = 500,
    BEEZILS_WRECK = 501,
    WITCH_HILL = 502,
    SENTRY_POINT = 503,
    NORTH_POINT_TOWER = 504,
    WEST_POINT_TOWER = 505,
    LOST_POINT = 506,
    BLUEFEN = 507,
    STONEMAUL_RUINS = 508,
    THE_DEN_OF_FLAME = 509,
    THE_DRAGONMURK = 510,
    WYRMBOG = 511,
    ONYXIAS_LAIR_UNUSED = 512,
    THERAMORE_ISLE = 513,
    FOOTHOLD_CITADEL = 514,
    IRONCLAD_PRISON = 515,
    DUSTWALLOW_BAY = 516,
    TIDEFURY_COVE = 517,
    DREADMURK_SHORE = 518,
    ADDLES_STEAD = 536,
    FIRE_PLUME_RIDGE = 537,
    LAKKARI_TAR_PITS = 538,
    TERROR_RUN = 539,
    THE_SLITHERING_SCAR = 540,
    MARSHALS_REFUGE = 541,
    FUNGAL_ROCK = 542,
    GOLAKKA_HOT_SPRINGS = 543,
    THE_LOCH = 556,
    BEGGARS_HAUNT = 576,
    KODO_GRAVEYARD = 596,
    GHOST_WALKER_POST = 597,
    SAR_THERIS_STRAND = 598,
    THUNDER_AXE_FORTRESS = 599,
    BOLGANS_HOLE = 600,
    MANNOROC_COVEN = 602,
    SARGERON = 603,
    MAGRAM_VILLAGE = 604,
    GELKIS_VILLAGE = 606,
    VALLEY_OF_SPEARS = 607,
    NIJELS_POINT = 608,
    KOLKAR_VILLAGE = 609,
    HYJAL = 616,
    WINTERSPRING = 618,
    BLACKWOLF_RIVER = 636,
    KODO_ROCK = 637,
    HIDDEN_PATH = 638,
    SPIRIT_ROCK = 639,
    SHRINE_OF_THE_DORMANT_FLAME = 640,
    LAKE_ELUNE_ARA = 656,
    THE_HARBORAGE = 657,
    OUTLAND = 676,
    CRAFTSMENS_TERRACE_UNUSED = 696,
    TRADESMENS_TERRACE_UNUSED = 697,
    THE_TEMPLE_GARDENS_UNUSED = 698,
    TEMPLE_OF_ELUNE_UNUSED = 699,
    CENARION_ENCLAVE_UNUSED = 700,
    WARRIORS_TERRACE_UNUSED = 701,
    RUT_THERAN_VILLAGE = 702,
    IRONBANDS_COMPOUND = 716,
    THE_STOCKADE = 717,
    WAILING_CAVERNS = 718,
    BLACKFATHOM_DEEPS0 = 719,
    FRAY_ISLAND = 720,
    GNOMEREGAN1 = 721,
    RAZORFEN_DOWNS0 = 722,
    BAN_ETHIL_HOLLOW = 736,
    SCARLET_MONASTERY = 796,
    JERODS_LANDING = 797,
    RIDGEPOINT_TOWER = 798,
    THE_DARKENED_BANK = 799,
    COLDRIDGE_PASS = 800,
    CHILL_BREEZE_VALLEY = 801,
    SHIMMER_RIDGE = 802,
    AMBERSTILL_RANCH = 803,
    THE_TUNDRID_HILLS = 804,
    SOUTH_GATE_PASS0 = 805,
    SOUTH_GATE_OUTPOST = 806,
    NORTH_GATE_PASS0 = 807,
    NORTH_GATE_OUTPOST = 808,
    GATES_OF_IRONFORGE = 809,
    STILLWATER_POND = 810,
    NIGHTMARE_VALE = 811,
    VENOMWEB_VALE = 812,
    THE_BULWARK1 = 813,
    SOUTHFURY_RIVER1 = 814,
    SOUTHFURY_RIVER2 = 815,
    RAZORMANE_GROUNDS = 816,
    SKULL_ROCK = 817,
    PALEMANE_ROCK = 818,
    WINDFURY_RIDGE = 819,
    THE_GOLDEN_PLAINS = 820,
    THE_ROLLING_PLAINS = 821,
    DUN_ALGAZ1 = 836,
    DUN_ALGAZ2 = 837,
    NORTH_GATE_PASS1 = 838,
    SOUTH_GATE_PASS1 = 839,
    TWILIGHT_GROVE = 856,
    GM_ISLAND = 876,
    DELETE_ME1 = 877,
    SOUTHFURY_RIVER3 = 878,
    SOUTHFURY_RIVER4 = 879,
    THANDOL_SPAN1 = 880,
    THANDOL_SPAN2 = 881,
    PURGATION_ISLE = 896,
    THE_JANSEN_STEAD = 916,
    THE_DEAD_ACRE = 917,
    THE_MOLSEN_FARM = 918,
    STENDELS_POND = 919,
    THE_DAGGER_HILLS = 920,
    DEMONTS_PLACE = 921,
    THE_DUST_PLAINS = 922,
    STONESPLINTER_VALLEY = 923,
    VALLEY_OF_KINGS = 924,
    ALGAZ_STATION = 925,
    BUCKLEBREE_FARM = 926,
    THE_SHINING_STRAND = 927,
    NORTH_TIDES_HOLLOW = 928,
    GRIZZLEPAW_RIDGE = 936,
    THE_VERDANT_FIELDS = 956,
    GADGETZAN = 976,
    STEAMWHEEDLE_PORT = 977,
    ZUL_FARRAK0 = 978,
    SANDSORROW_WATCH = 979,
    THISTLESHRUB_VALLEY = 980,
    THE_GAPING_CHASM = 981,
    THE_NOXIOUS_LAIR = 982,
    DUNEMAUL_COMPOUND = 983,
    EASTMOON_RUINS = 984,
    WATERSPRING_FIELD = 985,
    ZALASHJIS_DEN = 986,
    LANDS_END_BEACH = 987,
    WAVESTRIDER_BEACH = 988,
    ULDUM = 989,
    VALLEY_OF_THE_WATCHERS = 990,
    GUNSTANS_POST = 991,
    SOUTHMOON_RUINS = 992,
    RENDERS_CAMP = 996,
    RENDERS_VALLEY = 997,
    RENDERS_ROCK = 998,
    STONEWATCH_TOWER = 999,
    GALARDELL_VALLEY = 1000,
    LAKERIDGE_HIGHWAY = 1001,
    THREE_CORNERS = 1002,
    DIREFORGE_HILL = 1016,
    RAPTOR_RIDGE = 1017,
    BLACK_CHANNEL_MARSH = 1018,
    THE_GREEN_BELT0 = 1019,
    MOSSHIDE_FEN = 1020,
    THELGEN_ROCK = 1021,
    BLUEGILL_MARSH = 1022,
    SALTSPRAY_GLEN = 1023,
    SUNDOWN_MARSH = 1024,
    THE_GREEN_BELT1 = 1025,
    ANGERFANG_ENCAMPMENT = 1036,
    GRIM_BATOL = 1037,
    DRAGONMAW_GATES = 1038,
    THE_LOST_FLEET = 1039,
    DARROW_HILL0 = 1056,
    THORADINS_WALL1 = 1057,
    WEBWINDER_PATH = 1076,
    THE_HUSHED_BANK = 1097,
    MANOR_MISTMANTLE = 1098,
    CAMP_MOJACHE = 1099,
    GRIMTOTEM_COMPOUND = 1100,
    THE_WRITHING_DEEP = 1101,
    WILDWIND_LAKE = 1102,
    GORDUNNI_OUTPOST = 1103,
    MOK_GORDUN = 1104,
    FERAL_SCAR_VALE = 1105,
    FRAYFEATHER_HIGHLANDS = 1106,
    IDLEWIND_LAKE = 1107,
    THE_FORGOTTEN_COAST = 1108,
    EAST_PILLAR = 1109,
    WEST_PILLAR = 1110,
    DREAM_BOUGH = 1111,
    JADEMIR_LAKE = 1112,
    ONEIROS = 1113,
    RUINS_OF_RAVENWIND = 1114,
    RAGE_SCAR_HOLD = 1115,
    FEATHERMOON_STRONGHOLD = 1116,
    RUINS_OF_SOLARSAL = 1117,
    LOWER_WILDS_UNUSED = 1118,
    THE_TWIN_COLOSSALS = 1119,
    SARDOR_ISLE = 1120,
    ISLE_OF_DREAD = 1121,
    HIGH_WILDERNESS = 1136,
    LOWER_WILDS = 1137,
    SOUTHERN_BARRENS = 1156,
    SOUTHERN_GOLD_ROAD = 1157,
    ZUL_FARRAK1 = 1176,
    UNUSED_ALCAZ_ISLAND = 1196,
    TIMBERMAW_HOLD0 = 1216,
    VANNDIR_ENCAMPMENT = 1217,
    TEST_AZSHARA = 1218,
    LEGASH_ENCAMPMENT = 1219,
    THALASSIAN_BASE_CAMP = 1220,
    RUINS_OF_ELDARATH = 1221,
    HETAERAS_CLUTCH = 1222,
    TEMPLE_OF_ZIN_MALOR = 1223,
    BEARS_HEAD = 1224,
    URSOLAN = 1225,
    TEMPLE_OF_ARKKORAN = 1226,
    BAY_OF_STORMS = 1227,
    THE_SHATTERED_STRAND = 1228,
    TOWER_OF_ELDARA = 1229,
    JAGGED_REEF = 1230,
    SOUTHRIDGE_BEACH = 1231,
    RAVENCREST_MONUMENT = 1232,
    FORLORN_RIDGE = 1233,
    LAKE_MENNAR = 1234,
    SHADOWSONG_SHRINE = 1235,
    HALDARR_ENCAMPMENT = 1236,
    VALORMOK = 1237,
    THE_RUINED_REACHES = 1256,
    THE_TALONDEEP_PATH0 = 1276,
    THE_TALONDEEP_PATH1 = 1277,
    ROCKTUSK_FARM = 1296,
    JAGGEDSWINE_FARM = 1297,
    RAZORFEN_DOWNS1 = 1316,
    LOST_RIGGER_COVE = 1336,
    ULDAMAN0 = 1337,
    LORDAMERE_LAKE1 = 1338,
    LORDAMERE_LAKE2 = 1339,
    GALLOWS_CORNER = 1357,
    SILITHUS = 1377,
    EMERALD_FOREST = 1397,
    SUNKEN_TEMPLE = 1417,
    DREADMAUL_HOLD = 1437,
    NETHERGARDE_KEEP = 1438,
    DREADMAUL_POST = 1439,
    SERPENTS_COIL = 1440,
    ALTAR_OF_STORMS1 = 1441,
    FIREWATCH_RIDGE = 1442,
    THE_SLAG_PIT = 1443,
    THE_SEA_OF_CINDERS = 1444,
    BLACKROCK_MOUNTAIN2 = 1445,
    THORIUM_POINT = 1446,
    GARRISON_ARMORY = 1457,
    THE_TEMPLE_OF_ATAL_HAKKAR = 1477,
    UNDERCITY = 1497,
    ULDAMAN1 = 1517,
    NOT_USED_DEADMINES = 1518,
    STORMWIND_CITY = 1519,
    IRONFORGE = 1537,
    SPLITHOOF_HOLD = 1557,
    THE_CAPE_OF_STRANGLETHORN = 1577,
    SOUTHERN_SAVAGE_COAST = 1578,
    UNUSED_THE_DEADMINES_002 = 1579,
    UNUSED_IRONCLAD_COVE_003 = 1580,
    THE_DEADMINES = 1581,
    IRONCLAD_COVE = 1582,
    BLACKROCK_SPIRE = 1583,
    BLACKROCK_DEPTHS = 1584,
    RAPTOR_GROUNDS_UNUSED = 1597,
    GROL_DOM_FARM_UNUSED = 1598,
    MORSHAN_BASE_CAMP = 1599,
    HONORS_STAND_UNUSED = 1600,
    BLACKTHORN_RIDGE_UNUSED = 1601,
    BRAMBLESCAR_UNUSED = 1602,
    AGAMA_GOR_UNUSED = 1603,
    VALLEY_OF_HEROES = 1617,
    ORGRIMMAR = 1637,
    THUNDER_BLUFF = 1638,
    ELDER_RISE = 1639,
    SPIRIT_RISE = 1640,
    HUNTER_RISE = 1641,
    DARNASSUS = 1657,
    CENARION_ENCLAVE = 1658,
    CRAFTSMENS_TERRACE = 1659,
    WARRIORS_TERRACE = 1660,
    THE_TEMPLE_GARDENS = 1661,
    TRADESMENS_TERRACE = 1662,
    GAVINS_NAZE = 1677,
    SOFERAS_NAZE = 1678,
    CORRAHNS_DAGGER = 1679,
    THE_HEADLAND = 1680,
    MISTY_SHORE = 1681,
    DANDREDS_FOLD = 1682,
    GROWLESS_CAVE = 1683,
    CHILLWIND_POINT = 1684,
    RAPTOR_GROUNDS = 1697,
    BRAMBLESCAR = 1698,
    THORN_HILL = 1699,
    AGAMA_GOR = 1700,
    BLACKTHORN_RIDGE = 1701,
    HONORS_STAND = 1702,
    THE_MORSHAN_RAMPART = 1703,
    GROL_DOM_FARM = 1704,
    RAZORFEN_KRAUL1 = 1717,
    THE_GREAT_LIFT1 = 1718,
    MISTVALE_VALLEY = 1737,
    NEK_MANI_WELLSPRING = 1738,
    BLOODSAIL_COMPOUND = 1739,
    VENTURE_CO_BASE_CAMP = 1740,
    GURUBASHI_ARENA = 1741,
    SPIRIT_DEN = 1742,
    THE_CRIMSON_VEIL = 1757,
    THE_RIPTIDE = 1758,
    THE_DAMSELS_LUCK = 1759,
    VENTURE_CO_OPERATIONS_CENTER = 1760,
    DEADWOOD_VILLAGE = 1761,
    FELPAW_VILLAGE = 1762,
    JAEDENAR = 1763,
    BLOODVENOM_RIVER = 1764,
    BLOODVENOM_FALLS = 1765,
    SHATTER_SCAR_VALE = 1766,
    IRONTREE_WOODS = 1767,
    IRONTREE_CAVERN = 1768,
    TIMBERMAW_HOLD1 = 1769,
    SHADOW_HOLD = 1770,
    SHRINE_OF_THE_DECEIVER = 1771,
    ITHARIUSS_CAVE = 1777,
    SORROWMURK = 1778,
    DRAENIL_DUR_VILLAGE = 1779,
    SPLINTERSPEAR_JUNCTION = 1780,
    STAGALBOG = 1797,
    THE_SHIFTING_MIRE = 1798,
    STAGALBOG_CAVE = 1817,
    WITHERBARK_CAVERNS = 1837,
    THORADINS_WALL2 = 1857,
    BOULDER_GOR = 1858,
    VALLEY_OF_FANGS = 1877,
    THE_DUSTBOWL = 1878,
    MIRAGE_FLATS = 1879,
    FEATHERBEARDS_HOVEL = 1880,
    SHINDIGGERS_CAMP = 1881,
    PLAGUEMIST_RAVINE = 1882,
    VALORWIND_LAKE = 1883,
    AGOL_WATHA = 1884,
    HIRI_WATHA = 1885,
    THE_CREEPING_RUIN = 1886,
    BOGENS_LEDGE = 1887,
    THE_MAKERS_TERRACE = 1897,
    DUSTWIND_GULCH = 1898,
    SHAOL_WATHA = 1917,
    NOONSHADE_RUINS = 1937,
    BROKEN_PILLAR = 1938,
    ABYSSAL_SANDS = 1939,
    SOUTHBREAK_SHORE = 1940,
    CAVERNS_OF_TIME0 = 1941,
    THE_MARSHLANDS = 1942,
    IRONSTONE_PLATEAU = 1943,
    BLACKCHAR_CAVE = 1957,
    TANNER_CAMP = 1958,
    DUSTFIRE_VALLEY = 1959,
    ZUL_GURUB1 = 1977,
    MISTY_REED_POST = 1978,
    BLOODVENOM_POST = 1997,
    TALONBRANCH_GLADE = 1998,
    STRATHOLME0 = 2017,
    UNUSED_SHADOWFANG_KEEP_003 = 2037,
    SCHOLOMANCE = 2057,
    TWILIGHT_VALE = 2077,
    TWILIGHT_SHORE = 2078,
    ALCAZ_ISLAND = 2079,
    DARKCLOUD_PINNACLE = 2097,
    DAWNING_WOOD_CATACOMBS = 2098,
    STONEWATCH_KEEP = 2099,
    MARAUDON = 2100,
    STOUTLAGER_INN = 2101,
    THUNDERBREW_DISTILLERY = 2102,
    MENETHIL_KEEP = 2103,
    DEEPWATER_TAVERN = 2104,
    SHADOW_GRAVE = 2117,
    BRILL_TOWN_HALL = 2118,
    GALLOWS_END_TAVERN = 2119,
    THE_POOLS_OF_VISION_UNUSED = 2137,
    DREADMIST_DEN = 2138,
    BAEL_DUN_KEEP = 2157,
    EMBERSTRIFES_DEN = 2158,
    ONYXIAS_LAIR = 2159,
    WINDSHEAR_MINE = 2160,
    ROLANDS_DOOM = 2161,
    BATTLE_RING = 2177,
    THE_POOLS_OF_VISION = 2197,
    SHADOWBREAK_RAVINE = 2198,
    BROKEN_SPEAR_VILLAGE = 2217,
    WHITEREACH_POST = 2237,
    GORNIA = 2238,
    ZANES_EYE_CRATER = 2239,
    MIRAGE_RACEWAY = 2240,
    FROSTSABER_ROCK = 2241,
    THE_HIDDEN_GROVE = 2242,
    TIMBERMAW_POST = 2243,
    WINTERFALL_VILLAGE = 2244,
    MAZTHORIL = 2245,
    FROSTFIRE_HOT_SPRINGS = 2246,
    ICE_THISTLE_HILLS = 2247,
    DUN_MANDARR = 2248,
    FROSTWHISPER_GORGE = 2249,
    OWL_WING_THICKET = 2250,
    LAKE_KEL_THERIL = 2251,
    THE_RUINS_OF_KEL_THERIL = 2252,
    STARFALL_VILLAGE = 2253,
    BAN_THALLOW_BARROW_DEN = 2254,
    EVERLOOK = 2255,
    DARKWHISPER_GORGE = 2256,
    DEEPRUN_TRAM = 2257,
    THE_FUNGAL_VALE = 2258,
    UNUSED_THE_MARRIS_STEAD = 2259,
    THE_MARRIS_STEAD = 2260,
    THE_UNDERCROFT = 2261,
    DARROWSHIRE = 2262,
    CROWN_GUARD_TOWER = 2263,
    CORINS_CROSSING = 2264,
    SCARLET_BASE_CAMP = 2265,
    TYRS_HAND = 2266,
    THE_SCARLET_BASILICA = 2267,
    LIGHTS_HOPE_CHAPEL = 2268,
    BROWMAN_MILL = 2269,
    THE_NOXIOUS_GLADE = 2270,
    EASTWALL_TOWER = 2271,
    NORTHDALE = 2272,
    ZUL_MASHAR = 2273,
    MAZRA_ALOR = 2274,
    NORTHPASS_TOWER = 2275,
    QUEL_LITHIEN_LODGE = 2276,
    PLAGUEWOOD = 2277,
    SCOURGEHOLD = 2278,
    STRATHOLME1 = 2279,
    UNUSED_STRATHOLME = 2280,
    DARROWMERE_LAKE0 = 2297,
    CAER_DARROW = 2298,
    DARROWMERE_LAKE1 = 2299,
    CAVERNS_OF_TIME1 = 2300,
    THISTLEFUR_VILLAGE = 2301,
    THE_QUAGMIRE = 2302,
    WINDBREAK_CANYON = 2303,
    SOUTH_SEAS0 = 2317,
    THE_GREAT_SEA3 = 2318,
    THE_GREAT_SEA4 = 2319,
    THE_GREAT_SEA5 = 2320,
    THE_GREAT_SEA6 = 2321,
    THE_VEILED_SEA1 = 2322,
    THE_VEILED_SEA2 = 2323,
    THE_VEILED_SEA3 = 2324,
    THE_VEILED_SEA4 = 2325,
    THE_VEILED_SEA5 = 2326,
    RAZOR_HILL_BARRACKS = 2337,
    SOUTH_SEAS1 = 2338,
    THE_GREAT_SEA7 = 2339,
    BLOODTOOTH_CAMP = 2357,
    FOREST_SONG = 2358,
    GREENPAW_VILLAGE = 2359,
    SILVERWING_OUTPOST = 2360,
    NIGHTHAVEN = 2361,
    SHRINE_OF_REMULOS = 2362,
    STORMRAGE_BARROW_DENS = 2363,
    THE_GREAT_SEA8 = 2364,
    THE_GREAT_SEA9 = 2365,
    THE_BLACK_MORASS = 2366,
    OLD_HILLSBRAD_FOOTHILLS = 2367,
    TARREN_MILL1 = 2368,
    SOUTHSHORE1 = 2369,
    DURNHOLDE_KEEP1 = 2370,
    DUN_GAROK1 = 2371,
    HILLSBRAD_FIELDS1 = 2372,
    EASTERN_STRAND1 = 2373,
    NETHANDER_STEAD1 = 2374,
    DARROW_HILL1 = 2375,
    SOUTHPOINT_TOWER1 = 2376,
    THORADINS_WALL3 = 2377,
    WESTERN_STRAND1 = 2378,
    AZURELODE_MINE1 = 2379,
    THE_GREAT_SEA10 = 2397,
    THE_GREAT_SEA11 = 2398,
    THE_GREAT_SEA12 = 2399,
    THE_FORBIDDING_SEA1 = 2400,
    THE_FORBIDDING_SEA2 = 2401,
    THE_FORBIDDING_SEA3 = 2402,
    THE_FORBIDDING_SEA4 = 2403,
    TETHRIS_ARAN = 2404,
    ETHEL_RETHOR = 2405,
    RANAZJAR_ISLE = 2406,
    KORMEKS_HUT = 2407,
    SHADOWPREY_VILLAGE = 2408,
    BLACKROCK_PASS = 2417,
    MORGANS_VIGIL = 2418,
    SLITHER_ROCK = 2419,
    TERROR_WING_PATH = 2420,
    DRACO_DAR = 2421,
    RAGEFIRE_CHASM = 2437,
    NIGHTSONG_WOODS = 2457,
    THE_VEILED_SEA6 = 2477,
    MORLOS_ARAN = 2478,
    EMERALD_SANCTUARY = 2479,
    JADEFIRE_GLEN = 2480,
    RUINS_OF_CONSTELLAS = 2481,
    BITTER_REACHES = 2497,
    RISE_OF_THE_DEFILER = 2517,
    LARISS_PAVILION = 2518,
    WOODPAW_HILLS = 2519,
    WOODPAW_DEN = 2520,
    VERDANTIS_RIVER = 2521,
    RUINS_OF_ISILDIEN = 2522,
    GRIMTOTEM_POST = 2537,
    CAMP_APARAJE = 2538,
    MALAKA_JIN = 2539,
    BOULDERSLIDE_RAVINE = 2540,
    SISHIR_CANYON = 2541,
    DIRE_MAUL0 = 2557,
    DEADWIND_RAVINE = 2558,
    DIAMONDHEAD_RIVER = 2559,
    ARIDENS_CAMP = 2560,
    THE_VICE = 2561,
    KARAZHAN = 2562,
    MORGANS_PLOT = 2563,
    DIRE_MAUL1 = 2577,
    ALTERAC_VALLEY0 = 2597,
    SCRABBLESCREWS_CAMP = 2617,
    JADEFIRE_RUN = 2618,
    THONDRORIL_RIVER0 = 2619,
    THONDRORIL_RIVER1 = 2620,
    LAKE_MERELDAR = 2621,
    PESTILENT_SCAR = 2622,
    THE_INFECTIS_SCAR = 2623,
    BLACKWOOD_LAKE = 2624,
    EASTWALL_GATE = 2625,
    TERRORWEB_TUNNEL = 2626,
    TERRORDALE = 2627,
    KARGATHIA_KEEP = 2637,
    VALLEY_OF_BONES = 2657,
    BLACKWING_LAIR = 2677,
    DEADMANS_CROSSING = 2697,
    MOLTEN_CORE = 2717,
    THE_SCARAB_WALL = 2737,
    SOUTHWIND_VILLAGE = 2738,
    TWILIGHT_BASE_CAMP = 2739,
    THE_CRYSTAL_VALE = 2740,
    THE_SCARAB_DAIS = 2741,
    HIVE_ASHI = 2742,
    HIVE_ZORA = 2743,
    HIVE_REGAL = 2744,
    SHRINE_OF_THE_FALLEN_WARRIOR = 2757,
    UNUSED_ALTERAC_VALLEY = 2777,
    BLACKFATHOM_DEEPS1 = 2797,
    ON_MAP_DUNGEON4 = 2817,
    THE_MASTERS_CELLAR = 2837,
    STONEWROUGHT_PASS = 2838,
    ALTERAC_VALLEY1 = 2839,
    THE_RUMBLE_CAGE = 2857,
    CHUNK_TEST = 2877,
    ZORAMGAR_OUTPOST = 2897,
    HALL_OF_LEGENDS = 2917,
    CHAMPIONS_HALL = 2918,
    GROSH_GOK_COMPOUND = 2937,
    SLEEPING_GORGE = 2938,
    IRONDEEP_MINE = 2957,
    STONEHEARTH_OUTPOST = 2958,
    DUN_BALDAR = 2959,
    ICEWING_PASS = 2960,
    FROSTWOLF_VILLAGE = 2961,
    TOWER_POINT = 2962,
    COLDTOOTH_MINE = 2963,
    WINTERAX_HOLD = 2964,
    ICEBLOOD_GARRISON = 2977,
    FROSTWOLF_KEEP = 2978,
    TOR_KREN_FARM = 2979,
    FROST_DAGGER_PASS = 3017,
    IRONSTONE_CAMP = 3037,
    WEAZELS_CRATER = 3038,
    TAHONDA_RUINS = 3039,
    FIELD_OF_STRIFE = 3057,
    ICEWING_CAVERN = 3058,
    VALORS_REST = 3077,
    THE_SWARMING_PILLAR = 3097,
    TWILIGHT_POST = 3098,
    TWILIGHT_OUTPOST = 3099,
    RAVAGED_TWILIGHT_CAMP = 3100,
    SHALZARUS_LAIR = 3117,
    TALRENDIS_POINT = 3137,
    RETHRESS_SANCTUM = 3138,
    MOON_HORROR_DEN = 3139,
    SCALEBEARDS_CAVE = 3140,
    BOULDERSLIDE_CAVERN = 3157,
    WARSONG_LABOR_CAMP = 3177,
    CHILLWIND_CAMP = 3197,
    THE_MAUL = 3217,
    THE_MAUL_UNUSED = 3237,
    BONES_OF_GRAKKAROND = 3257,
    WARSONG_GULCH = 3277,
    FROSTWOLF_GRAVEYARD = 3297,
    FROSTWOLF_PASS = 3298,
    DUN_BALDAR_PASS = 3299,
    ICEBLOOD_GRAVEYARD = 3300,
    SNOWFALL_GRAVEYARD = 3301,
    STONEHEARTH_GRAVEYARD = 3302,
    STORMPIKE_GRAVEYARD = 3303,
    ICEWING_BUNKER = 3304,
    STONEHEARTH_BUNKER = 3305,
    WILDPAW_RIDGE = 3306,
    REVANTUSK_VILLAGE = 3317,
    ROCK_OF_DUROTAN = 3318,
    SILVERWING_GROVE = 3319,
    WARSONG_LUMBER_MILL = 3320,
    SILVERWING_HOLD = 3321,
    WILDPAW_CAVERN = 3337,
    THE_VEILED_CLEFT = 3338,
    YOJAMBA_ISLE = 3357,
    ARATHI_BASIN = 3358,
    THE_COIL = 3377,
    ALTAR_OF_HIR_EEK = 3378,
    SHADRA_ZAAR = 3379,
    HAKKARI_GROUNDS = 3380,
    NAZE_OF_SHIRVALLAH = 3381,
    TEMPLE_OF_BETHEKK = 3382,
    THE_BLOODFIRE_PIT = 3383,
    ALTAR_OF_THE_BLOOD_GOD = 3384,
    ZANZAS_RISE = 3397,
    EDGE_OF_MADNESS = 3398,
    TROLLBANE_HALL = 3417,
    DEFILERS_DEN = 3418,
    PAGLES_POINTE = 3419,
    FARM = 3420,
    BLACKSMITH = 3421,
    LUMBER_MILL = 3422,
    GOLD_MINE = 3423,
    STABLES = 3424,
    CENARION_HOLD = 3425,
    STAGHELM_POINT = 3426,
    BRONZEBEARD_ENCAMPMENT = 3427,
    AHN_QIRAJ = 3428,
    RUINS_OF_AHN_QIRAJ0 = 3429,
    TWILIGHTS_RUN = 3446,
    ORTELLS_HIDEOUT = 3447,
    SCARAB_TERRACE = 3448,
    GENERALS_TERRACE = 3449,
    THE_RESERVOIR = 3450,
    THE_HATCHERY = 3451,
    THE_COMB = 3452,
    WATCHERS_TERRACE = 3453,
    RUINS_OF_AHN_QIRAJ1 = 3454,
    NAXXRAMAS = 3456,
    CITY = 3459,
    GATES_OF_AHN_QIRAJ = 3478,
    RAVENHOLDT_MANOR = 3486,
};

enum class AttackHand : uint8_t {
    MAIN_HAND = 0,
    OFF_HAND = 1,
};

enum class AuctionCommandAction : uint32_t {
    STARTED = 0,
    REMOVED = 1,
    BID_PLACED = 2,
};

enum class AuctionCommandResult : uint32_t {
    OK = 0,
    ERR_INVENTORY = 1,
    ERR_DATABASE = 2,
    ERR_NOT_ENOUGH_MONEY = 3,
    ERR_ITEM_NOT_FOUND = 4,
    ERR_HIGHER_BID = 5,
    ERR_BID_INCREMENT = 7,
    ERR_BID_OWN = 10,
    ERR_RESTRICTED_ACCOUNT = 13,
};

enum class AuctionCommandResultTwo : uint32_t {
    OK = 0,
    ERR_INVENTORY = 1,
    ERR_DATABASE = 2,
    ERR_NOT_ENOUGH_MONEY = 3,
    ERR_ITEM_NOT_FOUND = 4,
    ERR_HIGHER_BID = 5,
    ERR_BID_INCREMENT = 7,
    ERR_BID_OWN = 10,
    ERR_RESTRICTED_ACCOUNT = 13,
};

enum class AuctionHouse : uint32_t {
    STORMWIND = 1,
    ALLIANCE = 2,
    DARNASSUS = 3,
    UNDERCITY = 4,
    THUNDER_BLUFF = 5,
    HORDE = 6,
    GOBLIN = 7,
};

enum class AuraMod : uint32_t {
    NONE = 0,
    BIND_SIGHT = 1,
    MOD_POSSESS = 2,
    PERIODIC_DAMAGE = 3,
    DUMMY = 4,
    MOD_CONFUSE = 5,
    MOD_CHARM = 6,
    MOD_FEAR = 7,
    PERIODIC_HEAL = 8,
    MOD_ATTACKSPEED = 9,
    MOD_THREAT = 10,
    MOD_TAUNT = 11,
    MOD_STUN = 12,
    MOD_DAMAGE_DONE = 13,
    MOD_DAMAGE_TAKEN = 14,
    DAMAGE_SHIELD = 15,
    MOD_STEALTH = 16,
    MOD_STEALTH_DETECT = 17,
    MOD_INVISIBILITY = 18,
    MOD_INVISIBILITY_DETECTION = 19,
    OBS_MOD_HEALTH = 20,
    OBS_MOD_MANA = 21,
    MOD_RESISTANCE = 22,
    PERIODIC_TRIGGER_SPELL = 23,
    PERIODIC_ENERGIZE = 24,
    MOD_PACIFY = 25,
    MOD_ROOT = 26,
    MOD_SILENCE = 27,
    REFLECT_SPELLS = 28,
    MOD_STAT = 29,
    MOD_SKILL = 30,
    MOD_INCREASE_SPEED = 31,
    MOD_INCREASE_MOUNTED_SPEED = 32,
    MOD_DECREASE_SPEED = 33,
    MOD_INCREASE_HEALTH = 34,
    MOD_INCREASE_ENERGY = 35,
    MOD_SHAPESHIFT = 36,
    EFFECT_IMMUNITY = 37,
    STATE_IMMUNITY = 38,
    SCHOOL_IMMUNITY = 39,
    DAMAGE_IMMUNITY = 40,
    DISPEL_IMMUNITY = 41,
    PROC_TRIGGER_SPELL = 42,
    PROC_TRIGGER_DAMAGE = 43,
    TRACK_CREATURES = 44,
    TRACK_RESOURCES = 45,
    MOD_PARRY_SKILL = 46,
    MOD_PARRY_PERCENT = 47,
    MOD_DODGE_SKILL = 48,
    MOD_DODGE_PERCENT = 49,
    MOD_BLOCK_SKILL = 50,
    MOD_BLOCK_PERCENT = 51,
    MOD_CRIT_PERCENT = 52,
    PERIODIC_LEECH = 53,
    MOD_HIT_CHANCE = 54,
    MOD_SPELL_HIT_CHANCE = 55,
    TRANSFORM = 56,
    MOD_SPELL_CRIT_CHANCE = 57,
    MOD_INCREASE_SWIM_SPEED = 58,
    MOD_DAMAGE_DONE_CREATURE = 59,
    MOD_PACIFY_SILENCE = 60,
    MOD_SCALE = 61,
    PERIODIC_HEALTH_FUNNEL = 62,
    PERIODIC_MANA_FUNNEL = 63,
    PERIODIC_MANA_LEECH = 64,
    MOD_CASTING_SPEED_NOT_STACK = 65,
    FEIGN_DEATH = 66,
    MOD_DISARM = 67,
    MOD_STALKED = 68,
    SCHOOL_ABSORB = 69,
    EXTRA_ATTACKS = 70,
    MOD_SPELL_CRIT_CHANCE_SCHOOL = 71,
    MOD_POWER_COST_SCHOOL_PCT = 72,
    MOD_POWER_COST_SCHOOL = 73,
    REFLECT_SPELLS_SCHOOL = 74,
    MOD_LANGUAGE = 75,
    FAR_SIGHT = 76,
    MECHANIC_IMMUNITY = 77,
    MOUNTED = 78,
    MOD_DAMAGE_PERCENT_DONE = 79,
    MOD_PERCENT_STAT = 80,
    SPLIT_DAMAGE_PCT = 81,
    WATER_BREATHING = 82,
    MOD_BASE_RESISTANCE = 83,
    MOD_REGEN = 84,
    MOD_POWER_REGEN = 85,
    CHANNEL_DEATH_ITEM = 86,
    MOD_DAMAGE_PERCENT_TAKEN = 87,
    MOD_HEALTH_REGEN_PERCENT = 88,
    PERIODIC_DAMAGE_PERCENT = 89,
    MOD_RESIST_CHANCE = 90,
    MOD_DETECT_RANGE = 91,
    PREVENTS_FLEEING = 92,
    MOD_UNATTACKABLE = 93,
    INTERRUPT_REGEN = 94,
    GHOST = 95,
    SPELL_MAGNET = 96,
    MANA_SHIELD = 97,
    MOD_SKILL_TALENT = 98,
    MOD_ATTACK_POWER = 99,
    AURAS_VISIBLE = 100,
    MOD_RESISTANCE_PCT = 101,
    MOD_MELEE_ATTACK_POWER_VERSUS = 102,
    MOD_TOTAL_THREAT = 103,
    WATER_WALK = 104,
    FEATHER_FALL = 105,
    HOVER = 106,
    ADD_FLAT_MODIFIER = 107,
    ADD_PCT_MODIFIER = 108,
    ADD_TARGET_TRIGGER = 109,
    MOD_POWER_REGEN_PERCENT = 110,
    ADD_CASTER_HIT_TRIGGER = 111,
    OVERRIDE_CLASS_SCRIPTS = 112,
    MOD_RANGED_DAMAGE_TAKEN = 113,
    MOD_RANGED_DAMAGE_TAKEN_PCT = 114,
    MOD_HEALING = 115,
    MOD_REGEN_DURING_COMBAT = 116,
    MOD_MECHANIC_RESISTANCE = 117,
    MOD_HEALING_PCT = 118,
    SHARE_PET_TRACKING = 119,
    UNTRACKABLE = 120,
    EMPATHY = 121,
    MOD_OFFHAND_DAMAGE_PCT = 122,
    MOD_TARGET_RESISTANCE = 123,
    MOD_RANGED_ATTACK_POWER = 124,
    MOD_MELEE_DAMAGE_TAKEN = 125,
    MOD_MELEE_DAMAGE_TAKEN_PCT = 126,
    RANGED_ATTACK_POWER_ATTACKER_BONUS = 127,
    MOD_POSSESS_PET = 128,
    MOD_SPEED_ALWAYS = 129,
    MOD_MOUNTED_SPEED_ALWAYS = 130,
    MOD_RANGED_ATTACK_POWER_VERSUS = 131,
    MOD_INCREASE_ENERGY_PERCENT = 132,
    MOD_INCREASE_HEALTH_PERCENT = 133,
    MOD_MANA_REGEN_INTERRUPT = 134,
    MOD_HEALING_DONE = 135,
    MOD_HEALING_DONE_PERCENT = 136,
    MOD_TOTAL_STAT_PERCENTAGE = 137,
    MOD_MELEE_HASTE = 138,
    FORCE_REACTION = 139,
    MOD_RANGED_HASTE = 140,
    MOD_RANGED_AMMO_HASTE = 141,
    MOD_BASE_RESISTANCE_PCT = 142,
    MOD_RESISTANCE_EXCLUSIVE = 143,
    SAFE_FALL = 144,
    CHARISMA = 145,
    PERSUADED = 146,
    MECHANIC_IMMUNITY_MASK = 147,
    RETAIN_COMBO_POINTS = 148,
    RESIST_PUSHBACK = 149,
    MOD_SHIELD_BLOCKVALUE_PCT = 150,
    TRACK_STEALTHED = 151,
    MOD_DETECTED_RANGE = 152,
    SPLIT_DAMAGE_FLAT = 153,
    MOD_STEALTH_LEVEL = 154,
    MOD_WATER_BREATHING = 155,
    MOD_REPUTATION_GAIN = 156,
    PET_DAMAGE_MULTI = 157,
    MOD_SHIELD_BLOCKVALUE = 158,
    NO_PVP_CREDIT = 159,
    MOD_AOE_AVOIDANCE = 160,
    MOD_HEALTH_REGEN_IN_COMBAT = 161,
    POWER_BURN_MANA = 162,
    MOD_CRIT_DAMAGE_BONUS = 163,
    UNKNOWN164 = 164,
    MELEE_ATTACK_POWER_ATTACKER_BONUS = 165,
    MOD_ATTACK_POWER_PCT = 166,
    MOD_RANGED_ATTACK_POWER_PCT = 167,
    MOD_DAMAGE_DONE_VERSUS = 168,
    MOD_CRIT_PERCENT_VERSUS = 169,
    DETECT_AMORE = 170,
    MOD_SPEED_NOT_STACK = 171,
    MOD_MOUNTED_SPEED_NOT_STACK = 172,
    ALLOW_CHAMPION_SPELLS = 173,
    MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174,
    MOD_SPELL_HEALING_OF_STAT_PERCENT = 175,
    SPIRIT_OF_REDEMPTION = 176,
    AOE_CHARM = 177,
    MOD_DEBUFF_RESISTANCE = 178,
    MOD_ATTACKER_SPELL_CRIT_CHANCE = 179,
    MOD_FLAT_SPELL_DAMAGE_VERSUS = 180,
    MOD_FLAT_SPELL_CRIT_DAMAGE_VERSUS = 181,
    MOD_RESISTANCE_OF_STAT_PERCENT = 182,
    MOD_CRITICAL_THREAT = 183,
    MOD_ATTACKER_MELEE_HIT_CHANCE = 184,
    MOD_ATTACKER_RANGED_HIT_CHANCE = 185,
    MOD_ATTACKER_SPELL_HIT_CHANCE = 186,
    MOD_ATTACKER_MELEE_CRIT_CHANCE = 187,
    MOD_ATTACKER_RANGED_CRIT_CHANCE = 188,
    MOD_RATING = 189,
    MOD_FACTION_REPUTATION_GAIN = 190,
    USE_NORMAL_MOVEMENT_SPEED = 191,
};

enum class AuraType : uint32_t {
    NONE = 0,
    BIND_SIGHT = 1,
    MOD_POSSESS = 2,
    PERIODIC_DAMAGE = 3,
    DUMMY = 4,
    MOD_CONFUSE = 5,
    MOD_CHARM = 6,
    MOD_FEAR = 7,
    PERIODIC_HEAL = 8,
    MOD_ATTACKSPEED = 9,
    MOD_THREAT = 10,
    MOD_TAUNT = 11,
    MOD_STUN = 12,
    MOD_DAMAGE_DONE = 13,
    MOD_DAMAGE_TAKEN = 14,
    DAMAGE_SHIELD = 15,
    MOD_STEALTH = 16,
    MOD_STEALTH_DETECT = 17,
    MOD_INVISIBILITY = 18,
    MOD_INVISIBILITY_DETECTION = 19,
    OBS_MOD_HEALTH = 20,
    OBS_MOD_MANA = 21,
    MOD_RESISTANCE = 22,
    PERIODIC_TRIGGER_SPELL = 23,
    PERIODIC_ENERGIZE = 24,
    MOD_PACIFY = 25,
    MOD_ROOT = 26,
    MOD_SILENCE = 27,
    REFLECT_SPELLS = 28,
    MOD_STAT = 29,
    MOD_SKILL = 30,
    MOD_INCREASE_SPEED = 31,
    MOD_INCREASE_MOUNTED_SPEED = 32,
    MOD_DECREASE_SPEED = 33,
    MOD_INCREASE_HEALTH = 34,
    MOD_INCREASE_ENERGY = 35,
    MOD_SHAPESHIFT = 36,
    EFFECT_IMMUNITY = 37,
    STATE_IMMUNITY = 38,
    SCHOOL_IMMUNITY = 39,
    DAMAGE_IMMUNITY = 40,
    DISPEL_IMMUNITY = 41,
    PROC_TRIGGER_SPELL = 42,
    PROC_TRIGGER_DAMAGE = 43,
    TRACK_CREATURES = 44,
    TRACK_RESOURCES = 45,
    UNKNOWN46 = 46,
    MOD_PARRY_PERCENT = 47,
    UNKNOWN48 = 48,
    MOD_DODGE_PERCENT = 49,
    MOD_BLOCK_SKILL = 50,
    MOD_BLOCK_PERCENT = 51,
    MOD_CRIT_PERCENT = 52,
    PERIODIC_LEECH = 53,
    MOD_HIT_CHANCE = 54,
    MOD_SPELL_HIT_CHANCE = 55,
    TRANSFORM = 56,
    MOD_SPELL_CRIT_CHANCE = 57,
    MOD_INCREASE_SWIM_SPEED = 58,
    MOD_DAMAGE_DONE_CREATURE = 59,
    MOD_PACIFY_SILENCE = 60,
    MOD_SCALE = 61,
    PERIODIC_HEALTH_FUNNEL = 62,
    PERIODIC_MANA_FUNNEL = 63,
    PERIODIC_MANA_LEECH = 64,
    MOD_CASTING_SPEED_NOT_STACK = 65,
    FEIGN_DEATH = 66,
    MOD_DISARM = 67,
    MOD_STALKED = 68,
    SCHOOL_ABSORB = 69,
    EXTRA_ATTACKS = 70,
    MOD_SPELL_CRIT_CHANCE_SCHOOL = 71,
    MOD_POWER_COST_SCHOOL_PCT = 72,
    MOD_POWER_COST_SCHOOL = 73,
    REFLECT_SPELLS_SCHOOL = 74,
    MOD_LANGUAGE = 75,
    FAR_SIGHT = 76,
    MECHANIC_IMMUNITY = 77,
    MOUNTED = 78,
    MOD_DAMAGE_PERCENT_DONE = 79,
    MOD_PERCENT_STAT = 80,
    SPLIT_DAMAGE_PCT = 81,
    WATER_BREATHING = 82,
    MOD_BASE_RESISTANCE = 83,
    MOD_REGEN = 84,
    MOD_POWER_REGEN = 85,
    CHANNEL_DEATH_ITEM = 86,
    MOD_DAMAGE_PERCENT_TAKEN = 87,
    MOD_HEALTH_REGEN_PERCENT = 88,
    PERIODIC_DAMAGE_PERCENT = 89,
    MOD_RESIST_CHANCE = 90,
    MOD_DETECT_RANGE = 91,
    PREVENTS_FLEEING = 92,
    MOD_UNATTACKABLE = 93,
    INTERRUPT_REGEN = 94,
    GHOST = 95,
    SPELL_MAGNET = 96,
    MANA_SHIELD = 97,
    MOD_SKILL_TALENT = 98,
    MOD_ATTACK_POWER = 99,
    AURAS_VISIBLE = 100,
    MOD_RESISTANCE_PCT = 101,
    MOD_MELEE_ATTACK_POWER_VERSUS = 102,
    MOD_TOTAL_THREAT = 103,
    WATER_WALK = 104,
    FEATHER_FALL = 105,
    HOVER = 106,
    ADD_FLAT_MODIFIER = 107,
    ADD_PCT_MODIFIER = 108,
    ADD_TARGET_TRIGGER = 109,
    MOD_POWER_REGEN_PERCENT = 110,
    ADD_CASTER_HIT_TRIGGER = 111,
    OVERRIDE_CLASS_SCRIPTS = 112,
    MOD_RANGED_DAMAGE_TAKEN = 113,
    MOD_RANGED_DAMAGE_TAKEN_PCT = 114,
    MOD_HEALING = 115,
    MOD_REGEN_DURING_COMBAT = 116,
    MOD_MECHANIC_RESISTANCE = 117,
    MOD_HEALING_PCT = 118,
    SHARE_PET_TRACKING = 119,
    UNTRACKABLE = 120,
    EMPATHY = 121,
    MOD_OFFHAND_DAMAGE_PCT = 122,
    MOD_TARGET_RESISTANCE = 123,
    MOD_RANGED_ATTACK_POWER = 124,
    MOD_MELEE_DAMAGE_TAKEN = 125,
    MOD_MELEE_DAMAGE_TAKEN_PCT = 126,
    RANGED_ATTACK_POWER_ATTACKER_BONUS = 127,
    MOD_POSSESS_PET = 128,
    MOD_SPEED_ALWAYS = 129,
    MOD_MOUNTED_SPEED_ALWAYS = 130,
    MOD_RANGED_ATTACK_POWER_VERSUS = 131,
    MOD_INCREASE_ENERGY_PERCENT = 132,
    MOD_INCREASE_HEALTH_PERCENT = 133,
    MOD_MANA_REGEN_INTERRUPT = 134,
    MOD_HEALING_DONE = 135,
    MOD_HEALING_DONE_PERCENT = 136,
    MOD_TOTAL_STAT_PERCENTAGE = 137,
    MOD_MELEE_HASTE = 138,
    FORCE_REACTION = 139,
    MOD_RANGED_HASTE = 140,
    MOD_RANGED_AMMO_HASTE = 141,
    MOD_BASE_RESISTANCE_PCT = 142,
    MOD_RESISTANCE_EXCLUSIVE = 143,
    SAFE_FALL = 144,
    CHARISMA = 145,
    PERSUADED = 146,
    MECHANIC_IMMUNITY_MASK = 147,
    RETAIN_COMBO_POINTS = 148,
    RESIST_PUSHBACK = 149,
    MOD_SHIELD_BLOCKVALUE_PCT = 150,
    TRACK_STEALTHED = 151,
    MOD_DETECTED_RANGE = 152,
    SPLIT_DAMAGE_FLAT = 153,
    MOD_STEALTH_LEVEL = 154,
    MOD_WATER_BREATHING = 155,
    MOD_REPUTATION_GAIN = 156,
    PET_DAMAGE_MULTI = 157,
    MOD_SHIELD_BLOCKVALUE = 158,
    NO_PVP_CREDIT = 159,
    MOD_AOE_AVOIDANCE = 160,
    MOD_HEALTH_REGEN_IN_COMBAT = 161,
    POWER_BURN_MANA = 162,
    MOD_CRIT_DAMAGE_BONUS = 163,
    UNKNOWN164 = 164,
    MELEE_ATTACK_POWER_ATTACKER_BONUS = 165,
    MOD_ATTACK_POWER_PCT = 166,
    MOD_RANGED_ATTACK_POWER_PCT = 167,
    MOD_DAMAGE_DONE_VERSUS = 168,
    MOD_CRIT_PERCENT_VERSUS = 169,
    DETECT_AMORE = 170,
    MOD_SPEED_NOT_STACK = 171,
    MOD_MOUNTED_SPEED_NOT_STACK = 172,
    ALLOW_CHAMPION_SPELLS = 173,
    MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174,
    MOD_SPELL_HEALING_OF_STAT_PERCENT = 175,
    SPIRIT_OF_REDEMPTION = 176,
    AOE_CHARM = 177,
    MOD_DEBUFF_RESISTANCE = 178,
    MOD_ATTACKER_SPELL_CRIT_CHANCE = 179,
    MOD_FLAT_SPELL_DAMAGE_VERSUS = 180,
    MOD_FLAT_SPELL_CRIT_DAMAGE_VERSUS = 181,
    MOD_RESISTANCE_OF_STAT_PERCENT = 182,
    MOD_CRITICAL_THREAT = 183,
    MOD_ATTACKER_MELEE_HIT_CHANCE = 184,
    MOD_ATTACKER_RANGED_HIT_CHANCE = 185,
    MOD_ATTACKER_SPELL_HIT_CHANCE = 186,
    MOD_ATTACKER_MELEE_CRIT_CHANCE = 187,
    MOD_ATTACKER_RANGED_CRIT_CHANCE = 188,
    MOD_RATING = 189,
    MOD_FACTION_REPUTATION_GAIN = 190,
    USE_NORMAL_MOVEMENT_SPEED = 191,
};

enum class BagFamily : uint8_t {
    NONE = 0,
    ARROWS = 1,
    BULLETS = 2,
    SOUL_SHARDS = 3,
    UNKNOWN4 = 4,
    UNKNOWN5 = 5,
    HERBS = 6,
    ENCHANTING_SUPPLIES = 7,
    ENGINEERING_SUPPLIES = 8,
    KEYS = 9,
};

enum class BattlefieldPortAction : uint8_t {
    LEAVE_QUEUE = 0,
    ENTER_BATTLE = 1,
};

enum class BattlegroundBracket : uint8_t {
    TENS = 0,
    TWENTIES = 1,
    THIRTIES = 2,
    FORTIES = 3,
    FIFTIES = 4,
    SIXTY = 5,
};

enum class BattlegroundEndStatus : uint8_t {
    NOT_ENDED = 0,
    ENDED = 1,
};

enum class BattlegroundWinner : uint8_t {
    HORDE = 0,
    ALLIANCE = 1,
    NONE = 2,
};

enum class BgTypeId : uint32_t {
    NOT_ELIGIBLE = 0,
    QUEUED_FOR_AV = 1,
    QUEUED_FOR_WSG = 2,
    QUEUED_FOR_AB = 3,
    REMOVE_FROM_QUEUE = 4294967294,
};

enum class Bonding : uint8_t {
    NO_BIND = 0,
    PICK_UP = 1,
    EQUIP = 2,
    USE = 3,
    QUEST_ITEM = 4,
    QUEST_ITEM1 = 5,
};

enum class BuyBankSlotResult : uint32_t {
    FAILED_TOO_MANY = 0,
    INSUFFICIENT_FUNDS = 1,
    NOT_BANKER = 2,
    OK = 3,
};

enum class BuyResult : uint8_t {
    CANT_FIND_ITEM = 0,
    ITEM_ALREADY_SOLD = 1,
    NOT_ENOUGH_MONEY = 2,
    SELLER_DONT_LIKE_YOU = 4,
    DISTANCE_TOO_FAR = 5,
    ITEM_SOLD_OUT = 7,
    CANT_CARRY_MORE = 8,
    RANK_REQUIRE = 11,
    REPUTATION_REQUIRE = 12,
};

enum class BuybackSlot : uint32_t {
    SLOT1 = 69,
    SLOT2 = 70,
    SLOT3 = 71,
    SLOT4 = 72,
    SLOT5 = 73,
    SLOT6 = 74,
    SLOT7 = 75,
    SLOT8 = 76,
    SLOT9 = 77,
    SLOT10 = 78,
    SLOT11 = 79,
    SLOT12 = 80,
    SLOT13 = 81,
};

enum class CastFailureReason : uint8_t {
    AFFECTING_COMBAT = 0,
    ALREADY_AT_FULL_HEALTH = 1,
    ALREADY_AT_FULL_POWER = 2,
    ALREADY_BEING_TAMED = 3,
    ALREADY_HAVE_CHARM = 4,
    ALREADY_HAVE_SUMMON = 5,
    ALREADY_OPEN = 6,
    AURA_BOUNCED = 7,
    AUTOTRACK_INTERRUPTED = 8,
    BAD_IMPLICIT_TARGETS = 9,
    BAD_TARGETS = 10,
    CANT_BE_CHARMED = 11,
    CANT_BE_DISENCHANTED = 12,
    CANT_BE_PROSPECTED = 13,
    CANT_CAST_ON_TAPPED = 14,
    CANT_DUEL_WHILE_INVISIBLE = 15,
    CANT_DUEL_WHILE_STEALTHED = 16,
    CANT_STEALTH = 17,
    CASTER_AURASTATE = 18,
    CASTER_DEAD = 19,
    CHARMED = 20,
    CHEST_IN_USE = 21,
    CONFUSED = 22,
    DONT_REPORT = 23,
    EQUIPPED_ITEM = 24,
    EQUIPPED_ITEM_CLASS = 25,
    EQUIPPED_ITEM_CLASS_MAINHAND = 26,
    EQUIPPED_ITEM_CLASS_OFFHAND = 27,
    ERROR = 28,
    FIZZLE = 29,
    FLEEING = 30,
    FOOD_LOWLEVEL = 31,
    HIGHLEVEL = 32,
    HUNGER_SATIATED = 33,
    IMMUNE = 34,
    INTERRUPTED = 35,
    INTERRUPTED_COMBAT = 36,
    ITEM_ALREADY_ENCHANTED = 37,
    ITEM_GONE = 38,
    ITEM_NOT_FOUND = 39,
    ITEM_NOT_READY = 40,
    LEVEL_REQUIREMENT = 41,
    LINE_OF_SIGHT = 42,
    LOWLEVEL = 43,
    LOW_CASTLEVEL = 44,
    MAINHAND_EMPTY = 45,
    MOVING = 46,
    NEED_AMMO = 47,
    NEED_AMMO_POUCH = 48,
    NEED_EXOTIC_AMMO = 49,
    NOPATH = 50,
    NOT_BEHIND = 51,
    NOT_FISHABLE = 52,
    NOT_HERE = 53,
    NOT_INFRONT = 54,
    NOT_IN_CONTROL = 55,
    NOT_KNOWN = 56,
    NOT_MOUNTED = 57,
    NOT_ON_TAXI = 58,
    NOT_ON_TRANSPORT = 59,
    NOT_READY = 60,
    NOT_SHAPESHIFT = 61,
    NOT_STANDING = 62,
    NOT_TRADEABLE = 63,
    NOT_TRADING = 64,
    NOT_UNSHEATHED = 65,
    NOT_WHILE_GHOST = 66,
    NO_AMMO = 67,
    NO_CHARGES_REMAIN = 68,
    NO_CHAMPION = 69,
    NO_COMBO_POINTS = 70,
    NO_DUELING = 71,
    NO_ENDURANCE = 72,
    NO_FISH = 73,
    NO_ITEMS_WHILE_SHAPESHIFTED = 74,
    NO_MOUNTS_ALLOWED = 75,
    NO_PET = 76,
    NO_POWER = 77,
    NOTHING_TO_DISPEL = 78,
    NOTHING_TO_STEAL = 79,
    ONLY_ABOVEWATER = 80,
    ONLY_DAYTIME = 81,
    ONLY_INDOORS = 82,
    ONLY_MOUNTED = 83,
    ONLY_NIGHTTIME = 84,
    ONLY_OUTDOORS = 85,
    ONLY_SHAPESHIFT = 86,
    ONLY_STEALTHED = 87,
    ONLY_UNDERWATER = 88,
    OUT_OF_RANGE = 89,
    PACIFIED = 90,
    POSSESSED = 91,
    REAGENTS = 92,
    REQUIRES_AREA = 93,
    REQUIRES_SPELL_FOCUS = 94,
    ROOTED = 95,
    SILENCED = 96,
    SPELL_IN_PROGRESS = 97,
    SPELL_LEARNED = 98,
    SPELL_UNAVAILABLE = 99,
    STUNNED = 100,
    TARGETS_DEAD = 101,
    TARGET_AFFECTING_COMBAT = 102,
    TARGET_AURASTATE = 103,
    TARGET_DUELING = 104,
    TARGET_ENEMY = 105,
    TARGET_ENRAGED = 106,
    TARGET_FRIENDLY = 107,
    TARGET_IN_COMBAT = 108,
    TARGET_IS_PLAYER = 109,
    TARGET_NOT_DEAD = 110,
    TARGET_NOT_IN_PARTY = 111,
    TARGET_NOT_LOOTED = 112,
    TARGET_NOT_PLAYER = 113,
    TARGET_NO_POCKETS = 114,
    TARGET_NO_WEAPONS = 115,
    TARGET_UNSKINNABLE = 116,
    THIRST_SATIATED = 117,
    TOO_CLOSE = 118,
    TOO_MANY_OF_ITEM = 119,
    TOTEMS = 120,
    TRAINING_POINTS = 121,
    TRY_CAST_AGAIN = 122,
    UNIT_NOT_BEHIND = 123,
    UNIT_NOT_INFRONT = 124,
    WRONG_PET_FOOD = 125,
    NOT_WHILE_FATIGUED = 126,
    TARGET_NOT_IN_INSTANCE = 127,
    NOT_WHILE_TRADING = 128,
    TARGET_NOT_IN_RAID = 129,
    DISENCHANT_WHILE_LOOTING = 130,
    PROSPECT_WHILE_LOOTING = 131,
    PROSPECT_NEED_MORE = 132,
    TARGET_FREEFORALL = 133,
    NO_EDIBLE_CORPSES = 134,
    ONLY_BATTLEGROUNDS = 135,
    TARGET_NOT_GHOST = 136,
    TOO_MANY_SKILLS = 137,
    TRANSFORM_UNUSABLE = 138,
    WRONG_WEATHER = 139,
    DAMAGE_IMMUNE = 140,
    PREVENTED_BY_MECHANIC = 141,
    PLAY_TIME = 142,
    REPUTATION = 143,
    MIN_SKILL = 144,
    UNKNOWN = 145,
};

enum class ChatNotify : uint8_t {
    JOINED_NOTICE = 0,
    LEFT_NOTICE = 1,
    YOU_JOINED_NOTICE = 2,
    YOU_LEFT_NOTICE = 3,
    WRONG_PASSWORD_NOTICE = 4,
    NOT_MEMBER_NOTICE = 5,
    NOT_MODERATOR_NOTICE = 6,
    PASSWORD_CHANGED_NOTICE = 7,
    OWNER_CHANGED_NOTICE = 8,
    PLAYER_NOT_FOUND_NOTICE = 9,
    NOT_OWNER_NOTICE = 10,
    CHANNEL_OWNER_NOTICE = 11,
    MODE_CHANGE_NOTICE = 12,
    ANNOUNCEMENTS_ON_NOTICE = 13,
    ANNOUNCEMENTS_OFF_NOTICE = 14,
    MODERATION_ON_NOTICE = 15,
    MODERATION_OFF_NOTICE = 16,
    MUTED_NOTICE = 17,
    PLAYER_KICKED_NOTICE = 18,
    BANNED_NOTICE = 19,
    PLAYER_BANNED_NOTICE = 20,
    PLAYER_UNBANNED_NOTICE = 21,
    PLAYER_NOT_BANNED_NOTICE = 22,
    PLAYER_ALREADY_MEMBER_NOTICE = 23,
    INVITE_NOTICE = 24,
    INVITE_WRONG_FACTION_NOTICE = 25,
    WRONG_FACTION_NOTICE = 26,
    INVALID_NAME_NOTICE = 27,
    NOT_MODERATED_NOTICE = 28,
    PLAYER_INVITED_NOTICE = 29,
    PLAYER_INVITE_BANNED_NOTICE = 30,
    THROTTLED_NOTICE = 31,
};

enum class ChatType : uint8_t {
    SAY = 0,
    PARTY = 1,
    RAID = 2,
    GUILD = 3,
    OFFICER = 4,
    YELL = 5,
    WHISPER = 6,
    WHISPER_INFORM = 7,
    EMOTE = 8,
    TEXT_EMOTE = 9,
    SYSTEM = 10,
    MONSTER_SAY = 11,
    MONSTER_YELL = 12,
    MONSTER_EMOTE = 13,
    CHANNEL = 14,
    CHANNEL_JOIN = 15,
    CHANNEL_LEAVE = 16,
    CHANNEL_LIST = 17,
    CHANNEL_NOTICE = 18,
    CHANNEL_NOTICE_USER = 19,
    AFK = 20,
    DND = 21,
    IGNORED = 22,
    SKILL = 23,
    LOOT = 24,
    MONSTER_WHISPER = 26,
    BG_SYSTEM_NEUTRAL = 82,
    BG_SYSTEM_ALLIANCE = 83,
    BG_SYSTEM_HORDE = 84,
    RAID_LEADER = 87,
    RAID_WARNING = 88,
    RAID_BOSS_WHISPER = 89,
    RAID_BOSS_EMOTE = 90,
    BATTLEGROUND = 92,
    BATTLEGROUND_LEADER = 93,
};

enum class CinematicSequenceId : uint32_t {
    GOBLIN = 0,
    UNDEAD = 2,
    ORC = 21,
    DWARF = 41,
    NIGHT_ELF = 61,
    HUMAN = 81,
    GNOME = 101,
    TROLL = 121,
    TAUREN = 141,
};

enum class Class : uint8_t {
    WARRIOR = 1,
    PALADIN = 2,
    HUNTER = 3,
    ROGUE = 4,
    PRIEST = 5,
    SHAMAN = 7,
    MAGE = 8,
    WARLOCK = 9,
    DRUID = 11,
};

enum class ClientLanguage : uint8_t {
    ENGLISH = 0,
    KOREAN = 1,
    FRENCH = 2,
    GERMAN = 3,
    CHINESE = 4,
    TAIWANESE = 5,
    SPANISH_SPAIN = 6,
    SPANISH_LATIN_AMERICA = 7,
};

enum class CompressedMoveOpcode : uint16_t {
    SMSG_MONSTER_MOVE = 221,
    SMSG_MONSTER_MOVE_TRANSPORT = 686,
    SMSG_SPLINE_SET_RUN_SPEED = 766,
    SMSG_SPLINE_MOVE_UNROOT = 772,
    SMSG_SPLINE_MOVE_SET_RUN_MODE = 781,
    SMSG_SPLINE_MOVE_SET_WALK_MODE = 782,
};

enum class CorpseQueryResult : uint8_t {
    NOT_FOUND = 0,
    FOUND = 1,
};

enum class CreatureFamily : uint8_t {
    NONE = 0,
    WOLF = 1,
    CAT = 2,
    SPIDER = 3,
    BEAR = 4,
    BOAR = 5,
    CROCOLISK = 6,
    CARRION_BIRD = 7,
    CRAB = 8,
    GORILLA = 9,
    RAPTOR = 11,
    TALLSTRIDER = 12,
    FELHUNTER = 15,
    VOIDWALKER = 16,
    SUCCUBUS = 17,
    DOOMGUARD = 19,
    SCORPID = 20,
    TURTLE = 21,
    IMP = 23,
    BAT = 24,
    HYENA = 25,
    OWL = 26,
    WIND_SERPENT = 27,
    REMOTE_CONTROL = 28,
};

enum class DismountResult : uint32_t {
    NOT_MOUNTED = 1,
    OK = 3,
};

enum class DuelWinnerReason : uint8_t {
    WON = 0,
    FLED = 1,
};

enum class Emote : uint32_t {
    ONESHOT_NONE = 0,
    ONESHOT_TALK = 1,
    ONESHOT_BOW = 2,
    ONESHOT_WAVE = 3,
    ONESHOT_CHEER = 4,
    ONESHOT_EXCLAMATION = 5,
    ONESHOT_QUESTION = 6,
    ONESHOT_EAT = 7,
    STATE_DANCE = 10,
    ONESHOT_LAUGH = 11,
    STATE_SLEEP = 12,
    STATE_SIT = 13,
    ONESHOT_RUDE = 14,
    ONESHOT_ROAR = 15,
    ONESHOT_KNEEL = 16,
    ONESHOT_KISS = 17,
    ONESHOT_CRY = 18,
    ONESHOT_CHICKEN = 19,
    ONESHOT_BEG = 20,
    ONESHOT_APPLAUD = 21,
    ONESHOT_SHOUT = 22,
    ONESHOT_FLEX = 23,
    ONESHOT_SHY = 24,
    ONESHOT_POINT = 25,
    STATE_STAND = 26,
    STATE_READYUNARMED = 27,
    STATE_WORK_SHEATHED = 28,
    STATE_POINT = 29,
    STATE_NONE = 30,
    ONESHOT_WOUND = 33,
    ONESHOT_WOUNDCRITICAL = 34,
    ONESHOT_ATTACKUNARMED = 35,
    ONESHOT_ATTACK1H = 36,
    ONESHOT_ATTACK2HTIGHT = 37,
    ONESHOT_ATTACK2HLOOSE = 38,
    ONESHOT_PARRYUNARMED = 39,
    ONESHOT_PARRYSHIELD = 43,
    ONESHOT_READYUNARMED = 44,
    ONESHOT_READY1H = 45,
    ONESHOT_READYBOW = 48,
    ONESHOT_SPELLPRECAST = 50,
    ONESHOT_SPELLCAST = 51,
    ONESHOT_BATTLEROAR = 53,
    ONESHOT_SPECIALATTACK1H = 54,
    ONESHOT_KICK = 60,
    ONESHOT_ATTACKTHROWN = 61,
    STATE_STUN = 64,
    STATE_DEAD = 65,
    ONESHOT_SALUTE = 66,
    STATE_KNEEL = 68,
    STATE_USESTANDING = 69,
    ONESHOT_WAVE_NOSHEATHE = 70,
    ONESHOT_CHEER_NOSHEATHE = 71,
    ONESHOT_EAT_NOSHEATHE = 92,
    STATE_STUN_NOSHEATHE = 93,
    ONESHOT_DANCE = 94,
    ONESHOT_SALUTE_NOSHEATH = 113,
    STATE_USESTANDING_NOSHEATHE = 133,
    ONESHOT_LAUGH_NOSHEATHE = 153,
    STATE_WORK = 173,
    STATE_SPELLPRECAST = 193,
    ONESHOT_READYRIFLE = 213,
    STATE_READYRIFLE = 214,
    STATE_WORK_MINING = 233,
    STATE_WORK_CHOPWOOD = 234,
    STATE_APPLAUD = 253,
    ONESHOT_LIFTOFF = 254,
    ONESHOT_YES = 273,
    ONESHOT_NO = 274,
    ONESHOT_TRAIN = 275,
    ONESHOT_LAND = 293,
    STATE_AT_EASE = 313,
    STATE_READY1H = 333,
    STATE_SPELLKNEELSTART = 353,
    STATE_SUBMERGED = 373,
    ONESHOT_SUBMERGE = 374,
    STATE_READY2H = 375,
    STATE_READYBOW = 376,
    ONESHOT_MOUNTSPECIAL = 377,
    STATE_TALK = 378,
    STATE_FISHING = 379,
    ONESHOT_FISHING = 380,
    ONESHOT_LOOT = 381,
    STATE_WHIRLWIND = 382,
    STATE_DROWNED = 383,
    STATE_HOLD_BOW = 384,
    STATE_HOLD_RIFLE = 385,
    STATE_HOLD_THROWN = 386,
    ONESHOT_DROWN = 387,
    ONESHOT_STOMP = 388,
    ONESHOT_ATTACKOFF = 389,
    ONESHOT_ATTACKOFFPIERCE = 390,
    STATE_ROAR = 391,
    STATE_LAUGH = 392,
    ONESHOT_CREATURE_SPECIAL = 393,
    ONESHOT_JUMPLANDRUN = 394,
    ONESHOT_JUMPEND = 395,
    ONESHOT_TALK_NOSHEATHE = 396,
    ONESHOT_POINT_NOSHEATHE = 397,
    STATE_CANNIBALIZE = 398,
    ONESHOT_JUMPSTART = 399,
    STATE_DANCESPECIAL = 400,
    ONESHOT_DANCESPECIAL = 401,
    ONESHOT_CUSTOMSPELL01 = 402,
    ONESHOT_CUSTOMSPELL02 = 403,
    ONESHOT_CUSTOMSPELL03 = 404,
    ONESHOT_CUSTOMSPELL04 = 405,
    ONESHOT_CUSTOMSPELL05 = 406,
    ONESHOT_CUSTOMSPELL06 = 407,
    ONESHOT_CUSTOMSPELL07 = 408,
    ONESHOT_CUSTOMSPELL08 = 409,
    ONESHOT_CUSTOMSPELL09 = 410,
    ONESHOT_CUSTOMSPELL10 = 411,
    STATE_EXCLAIM = 412,
    STATE_SIT_CHAIR_MED = 415,
    STATE_SPELLEFFECT_HOLD = 422,
    STATE_EAT_NO_SHEATHE = 423,
};

enum class EmoteSpecProc : uint8_t {
    NO_LOOP = 0,
    LOOP = 1,
    LOOP_WITH_SOUND = 2,
};

enum class EnvironmentalDamageType : uint8_t {
    EXHAUSTED = 0,
    DROWNING = 1,
    FALL = 2,
    LAVA = 3,
    SLIME = 4,
    FIRE = 5,
};

enum class ExperienceAwardType : uint8_t {
    KILL = 0,
    NON_KILL = 1,
};

enum class Faction : uint16_t {
    NONE = 0,
    PLAYER_HUMAN = 1,
    PLAYER_ORC = 2,
    PLAYER_DWARF = 3,
    PLAYER_NIGHT_ELF = 4,
    PLAYER_UNDEAD = 5,
    PLAYER_TAUREN = 6,
    CREATURE = 7,
    PLAYER_GNOME = 8,
    PLAYER_TROLL = 9,
    MONSTER = 14,
    DEFIAS_BROTHERHOOD = 15,
    GNOLL_RIVERPAW = 16,
    GNOLL_REDRIDGE = 17,
    GNOLL_SHADOWHIDE = 18,
    MURLOC = 19,
    UNDEAD_SCOURGE = 20,
    BOOTY_BAY = 21,
    BEAST_SPIDER = 22,
    BEAST_BOAR = 23,
    WORGEN = 24,
    KOBOLD = 25,
    TROLL_BLOODSCALP = 26,
    TROLL_SKULLSPLITTER = 27,
    PREY = 28,
    BEAST_WOLF = 29,
    DEFIAS_BROTHERHOOD_TRAITOR = 30,
    FRIENDLY = 31,
    TROGG = 32,
    TROLL_FROSTMANE = 33,
    ORC_BLACKROCK = 34,
    VILLIAN = 35,
    VICTIM = 36,
    BEAST_BEAR = 37,
    OGRE = 38,
    KURZENS_MERCENARIES = 39,
    ESCORTEE = 40,
    VENTURE_COMPANY = 41,
    BEAST_RAPTOR = 42,
    BASILISK = 43,
    DRAGONFLIGHT_GREEN = 44,
    LOST_ONES = 45,
    BLACKSMITHING_ARMORSMITHING = 46,
    IRONFORGE = 47,
    DARK_IRON_DWARVES = 48,
    HUMAN_NIGHT_WATCH = 49,
    DRAGONFLIGHT_RED = 50,
    GNOLL_MOSSHIDE = 51,
    ORC_DRAGONMAW = 52,
    GNOME_LEPER = 53,
    GNOMEREGAN_EXILES = 54,
    LEOPARD = 55,
    SCARLET_CRUSADE = 56,
    GNOLL_ROTHIDE = 57,
    BEAST_GORILLA = 58,
    THORIUM_BROTHERHOOD = 59,
    NAGA = 60,
    DALARAN = 61,
    FORLORN_SPIRIT = 62,
    DARKHOWL = 63,
    GRELL = 64,
    FURBOLG = 65,
    HORDE_GENERIC = 66,
    HORDE = 67,
    UNDERCITY = 68,
    DARNASSUS = 69,
    SYNDICATE = 70,
    HILLSBRAD_MILITIA = 71,
    STORMWIND = 72,
    DEMON = 73,
    ELEMENTAL = 74,
    SPIRIT = 75,
    ORGRIMMAR = 76,
    TREASURE = 77,
    GNOLL_MUDSNOUT = 78,
    HILLSBRAD_SOUTHSHORE_MAYOR = 79,
    DRAGONFLIGHT_BLACK = 80,
    THUNDER_BLUFF = 81,
    TROLL_WITHERBARK = 82,
    LEATHERWORKING_ELEMENTAL = 83,
    QUILBOAR_RAZORMANE = 84,
    QUILBOAR_BRISTLEBACK = 85,
    LEATHERWORKING_DRAGONSCALE = 86,
    BLOODSAIL_BUCCANEERS = 87,
    BLACKFATHOM = 88,
    MAKRURA = 89,
    CENTAUR_KOLKAR = 90,
    CENTAUR_GALAK = 91,
    GELKIS_CLAN_CENTAUR = 92,
    MAGRAM_CLAN_CENTAUR = 93,
    MARAUDINE = 94,
    THERAMORE = 108,
    QUILBOAR_RAZORFEN = 109,
    QUILBOAR_RAZORMANE_2 = 110,
    QUILBOAR_DEATHSHEAD = 111,
    ENEMY = 128,
    AMBIENT = 148,
    NETHERGARDE_CARAVAN = 168,
    STEAMWHEEDLE_CARTEL = 169,
    ALLIANCE_GENERIC = 189,
    NETHERGARDE = 209,
    WAILING_CAVERNS = 229,
    SILITHID = 249,
    SILVERMOON_REMNANT = 269,
    ZANDALAR_TRIBE = 270,
    BLACKSMITHING_WEAPONSMITHING = 289,
    SCORPID = 309,
    BEAST_BAT = 310,
    TITAN = 311,
    TASKMASTER_FIZZULE = 329,
    RAVENHOLDT = 349,
    GADGETZAN = 369,
    GNOMEREGAN_BUG = 389,
    HARPY = 409,
    BURNING_BLADE = 429,
    SHADOWSILK_POACHER = 449,
    SEARING_SPIDER = 450,
    ALLIANCE = 469,
    RATCHET = 470,
    WILDHAMMER_CLAN = 471,
    GOBLIN_DARK_IRON_BAR_PATRON = 489,
    THE_LEAGUE_OF_ARATHOR = 509,
    THE_DEFILERS = 510,
    GIANT = 511,
    ARGENT_DAWN = 529,
    DARKSPEAR_TROLLS = 530,
    DRAGONFLIGHT_BRONZE = 531,
    DRAGONFLIGHT_BLUE = 532,
    LEATHERWORKING_TRIBAL = 549,
    ENGINEERING_GOBLIN = 550,
    ENGINEERING_GNOME = 551,
    BLACKSMITHING_HAMMERSMITHING = 569,
    BLACKSMITHING_AXESMITHING = 570,
    BLACKSMITHING_SWORDSMITHING = 571,
    TROLL_VILEBRANCH = 572,
    SOUTHSEA_FREEBOOTERS = 573,
    CAER_DARROW = 574,
    FURBOLG_UNCORRUPTED = 575,
    TIMBERMAW_HOLD = 576,
    EVERLOOK = 577,
    WINTERSABER_TRAINERS = 589,
    CENARION_CIRCLE = 609,
    SHATTERSPEAR_TROLLS = 629,
    RAVASAUR_TRAINERS = 630,
    MAJORDOMO_EXECUTUS = 649,
    BEAST_CARRION_BIRD = 669,
    BEAST_CAT = 670,
    BEAST_CRAB = 671,
    BEAST_CROCILISK = 672,
    BEAST_HYENA = 673,
    BEAST_OWL = 674,
    BEAST_SCORPID = 675,
    BEAST_TALLSTRIDER = 676,
    BEAST_TURTLE = 677,
    BEAST_WIND_SERPENT = 678,
    TRAINING_DUMMY = 679,
    DRAGONFLIGHT_BLACK_BAIT = 689,
    BATTLEGROUND_NEUTRAL = 709,
    FROSTWOLF_CLAN = 729,
    STORMPIKE_GUARD = 730,
    HYDRAXIAN_WATERLORDS = 749,
    SULFURON_FIRELORDS = 750,
    GIZLOCKS_DUMMY = 769,
    GIZLOCKS_CHARM = 770,
    GIZLOCK = 771,
    MORO_GAI = 789,
    SPIRIT_GUIDE_ALLIANCE = 790,
    SHEN_DRALAR = 809,
    OGRE_CAPTAIN_KROMCRUSH = 829,
    SPIRIT_GUIDE_HORDE = 849,
    JAEDENAR = 869,
    WARSONG_OUTRIDERS = 889,
    SILVERWING_SENTINELS = 890,
    ALLIANCE_FORCES = 891,
    HORDE_FORCES = 892,
    REVANTUSK_TROLLS = 893,
    DARKMOON_FAIRE = 909,
    BROOD_OF_NOZDORMU = 910,
    MIGHT_OF_KALIMDOR = 912,
    ARMIES_OF_C_THUN = 915,
    SILITHID_ATTACKERS = 916,
    THE_IRONFORGE_BRIGADE = 917,
    RC_ENEMIES = 918,
    RC_OBJECTS = 919,
    RED = 920,
    BLUE = 921,
    SCOURGE_INVADERS = 928,
    TEST_FACTION_NOT_A_REAL_FACTION = 931,
    TOWOW_FLAG = 950,
    TOWOW_FLAG_TRIGGER_ALLIANCE_DND = 951,
    TOWOW_FLAG_TRIGGER_HORDE_DND = 954,
};

enum class FarSightOperation : uint8_t {
    REMOVE = 0,
    ADD = 1,
};

enum class FluidSpeed : uint8_t {
    STILL = 0,
    SLOW = 4,
    RAPID = 8,
};

enum class FriendResult : uint8_t {
    DB_ERROR = 0,
    LIST_FULL = 1,
    ONLINE = 2,
    OFFLINE = 3,
    NOT_FOUND = 4,
    REMOVED = 5,
    ADDED_ONLINE = 6,
    ADDED_OFFLINE = 7,
    ALREADY = 8,
    SELF = 9,
    ENEMY = 10,
    IGNORE_FULL = 11,
    IGNORE_SELF = 12,
    IGNORE_NOT_FOUND = 13,
    IGNORE_ALREADY = 14,
    IGNORE_ADDED = 15,
    IGNORE_REMOVED = 16,
    IGNORE_AMBIGUOUS = 17,
    MUTE_FULL = 18,
    MUTE_SELF = 19,
    MUTE_NOT_FOUND = 20,
    MUTE_ALREADY = 21,
    MUTE_ADDED = 22,
    MUTE_REMOVED = 23,
    MUTE_AMBIGUOUS = 24,
    UNKNOWN19 = 25,
    UNKNOWN20 = 26,
};

enum class FriendStatus : uint8_t {
    OFFLINE = 0,
    ONLINE = 1,
    AFK = 2,
    UNKNOWN3 = 3,
    DND = 4,
};

enum class Gender : uint8_t {
    MALE = 0,
    FEMALE = 1,
    NONE = 2,
};

enum class GmTicketEscalationStatus : uint8_t {
    GMTICKET_ASSIGNEDTOGM_STATUS_NOT_ASSIGNED = 0,
    GMTICKET_ASSIGNEDTOGM_STATUS_ASSIGNED = 1,
    GMTICKET_ASSIGNEDTOGM_STATUS_ESCALATED = 2,
};

enum class GmTicketQueueStatus : uint32_t {
    ENABLED = 1,
    DISABLED = 0,
};

enum class GmTicketResponse : uint32_t {
    NOT_EXIST = 0,
    ALREADY_EXIST = 1,
    CREATE_SUCCESS = 2,
    CREATE_ERROR = 3,
    UPDATE_SUCCESS = 4,
    UPDATE_ERROR = 5,
    TICKET_DELETED = 9,
};

enum class GmTicketStatus : uint32_t {
    DB_ERROR = 0,
    HAS_TEXT = 6,
    DEFAULT = 10,
};

enum class GmTicketStatusResponse : uint32_t {
    UPDATED = 1,
    CLOSED = 2,
    SURVEY = 3,
};

enum class GmTicketType : uint8_t {
    STUCK = 1,
    BEHAVIOR_HARASSMENT = 2,
    GUILD = 3,
    ITEM = 4,
    ENVIRONMENTAL = 5,
    NONQUEST_CREEP = 6,
    QUEST_QUESTNPC = 7,
    TECHNICAL = 8,
    ACCOUNT_BILLING = 9,
    CHARACTER = 10,
};

enum class GroupLootSetting : uint8_t {
    FREE_FOR_ALL = 0,
    ROUND_ROBIN = 1,
    MASTER_LOOT = 2,
    GROUP_LOOT = 3,
    NEED_BEFORE_GREED = 4,
};

enum class GroupType : uint8_t {
    NORMAL = 0,
    RAID = 1,
};

enum class GuildCommand : uint8_t {
    CREATE = 0,
    INVITE = 1,
    QUIT = 3,
    FOUNDER = 14,
    UNKNOWN19 = 19,
    UNKNOWN20 = 20,
};

enum class GuildCommandResult : uint8_t {
    PLAYER_NO_MORE_IN_GUILD = 0,
    GUILD_INTERNAL = 1,
    ALREADY_IN_GUILD = 2,
    ALREADY_IN_GUILD_S = 3,
    INVITED_TO_GUILD = 4,
    ALREADY_INVITED_TO_GUILD_S = 5,
    GUILD_NAME_INVALID = 6,
    GUILD_NAME_EXISTS_S = 7,
    GUILD_PERMISSIONS_OR_LEADER = 8,
    GUILD_PLAYER_NOT_IN_GUILD = 9,
    GUILD_PLAYER_NOT_IN_GUILD_S = 10,
    GUILD_PLAYER_NOT_FOUND_S = 11,
    GUILD_NOT_ALLIED = 12,
    GUILD_RANK_TOO_HIGH_S = 13,
    GUILD_RANK_TOO_LOW_S = 14,
};

enum class GuildEmblemResult : uint32_t {
    SUCCESS = 0,
    INVALID_TABARD_COLORS = 1,
    NO_GUILD = 2,
    NOT_GUILD_MASTER = 3,
    NOT_ENOUGH_MONEY = 4,
    NO_MESSAGE = 5,
};

enum class GuildEvent : uint8_t {
    PROMOTION = 0,
    DEMOTION = 1,
    MOTD = 2,
    JOINED = 3,
    LEFT = 4,
    REMOVED = 5,
    LEADER_IS = 6,
    LEADER_CHANGED = 7,
    DISBANDED = 8,
    TABARD_CHANGED = 9,
    UNKNOWN10 = 10,
    ROSTER_UPDATE = 11,
    SIGNED_ON = 12,
    SIGNED_OFF = 13,
};

enum class GuildMemberStatus : uint8_t {
    OFFLINE = 0,
    ONLINE = 1,
};

enum class HitInfo : uint32_t {
    NORMAL_SWING = 0,
    UNK1 = 1,
    AFFECTS_VICTIM = 2,
    LEFT_SWING = 4,
    EARLY_CRITICAL_HIT = 8,
    MISS = 16,
    ABSORB = 32,
    RESIST = 64,
    CRITICAL_HIT = 128,
    UNK9 = 256,
    UNK10 = 8192,
    GLANCING = 16384,
    CRUSHING = 32768,
    NO_ACTION = 65536,
    SWING_NO_HIT_SOUND = 524288,
};

enum class InfoBlock : uint8_t {
    UNAVAILABLE = 0,
    AVAILABLE = 1,
};

enum class InstanceResetFailedReason : uint8_t {
    GENERAL = 0,
    OFFLINE = 1,
    ZONING = 2,
    SILENTLY = 3,
};

enum class InstanceType : uint8_t {
    NORMAL = 0,
    GROUP_INSTANCE = 1,
    RAID_INSTANCE = 2,
    BATTLEGROUND = 3,
    WORLD_ZONE = 4,
    BATTLEGROUND2 = 5,
};

enum class InventoryResult : uint8_t {
    OK = 0,
    CANT_EQUIP_LEVEL_I = 1,
    CANT_EQUIP_SKILL = 2,
    ITEM_DOESNT_GO_TO_SLOT = 3,
    BAG_FULL = 4,
    NONEMPTY_BAG_OVER_OTHER_BAG = 5,
    CANT_TRADE_EQUIP_BAGS = 6,
    ONLY_AMMO_CAN_GO_HERE = 7,
    NO_REQUIRED_PROFICIENCY = 8,
    NO_EQUIPMENT_SLOT_AVAILABLE = 9,
    YOU_CAN_NEVER_USE_THAT_ITEM = 10,
    YOU_CAN_NEVER_USE_THAT_ITEM2 = 11,
    NO_EQUIPMENT_SLOT_AVAILABLE2 = 12,
    CANT_EQUIP_WITH_TWOHANDED = 13,
    CANT_DUAL_WIELD = 14,
    ITEM_DOESNT_GO_INTO_BAG = 15,
    ITEM_DOESNT_GO_INTO_BAG2 = 16,
    CANT_CARRY_MORE_OF_THIS = 17,
    NO_EQUIPMENT_SLOT_AVAILABLE3 = 18,
    ITEM_CANT_STACK = 19,
    ITEM_CANT_BE_EQUIPPED = 20,
    ITEMS_CANT_BE_SWAPPED = 21,
    SLOT_IS_EMPTY = 22,
    ITEM_NOT_FOUND = 23,
    CANT_DROP_SOULBOUND = 24,
    OUT_OF_RANGE = 25,
    TRIED_TO_SPLIT_MORE_THAN_COUNT = 26,
    COULDNT_SPLIT_ITEMS = 27,
    MISSING_REAGENT = 28,
    NOT_ENOUGH_MONEY = 29,
    NOT_A_BAG = 30,
    CAN_ONLY_DO_WITH_EMPTY_BAGS = 31,
    DONT_OWN_THAT_ITEM = 32,
    CAN_EQUIP_ONLY1_QUIVER = 33,
    MUST_PURCHASE_THAT_BAG_SLOT = 34,
    TOO_FAR_AWAY_FROM_BANK = 35,
    ITEM_LOCKED = 36,
    YOU_ARE_STUNNED = 37,
    YOU_ARE_DEAD = 38,
    CANT_DO_RIGHT_NOW = 39,
    INT_BAG_ERROR = 40,
    CAN_EQUIP_ONLY1_BOLT = 41,
    CAN_EQUIP_ONLY1_AMMOPOUCH = 42,
    STACKABLE_CANT_BE_WRAPPED = 43,
    EQUIPPED_CANT_BE_WRAPPED = 44,
    WRAPPED_CANT_BE_WRAPPED = 45,
    BOUND_CANT_BE_WRAPPED = 46,
    UNIQUE_CANT_BE_WRAPPED = 47,
    BAGS_CANT_BE_WRAPPED = 48,
    ALREADY_LOOTED = 49,
    INVENTORY_FULL = 50,
    BANK_FULL = 51,
    ITEM_IS_CURRENTLY_SOLD_OUT = 52,
    BAG_FULL3 = 53,
    ITEM_NOT_FOUND2 = 54,
    ITEM_CANT_STACK2 = 55,
    BAG_FULL4 = 56,
    ITEM_SOLD_OUT = 57,
    OBJECT_IS_BUSY = 58,
    NONE = 59,
    NOT_IN_COMBAT = 60,
    NOT_WHILE_DISARMED = 61,
    BAG_FULL6 = 62,
    CANT_EQUIP_RANK = 63,
    CANT_EQUIP_REPUTATION = 64,
    TOO_MANY_SPECIAL_BAGS = 65,
    LOOT_CANT_LOOT_THAT_NOW = 66,
};

enum class InventoryType : uint8_t {
    NON_EQUIP = 0,
    HEAD = 1,
    NECK = 2,
    SHOULDERS = 3,
    BODY = 4,
    CHEST = 5,
    WAIST = 6,
    LEGS = 7,
    FEET = 8,
    WRISTS = 9,
    HANDS = 10,
    FINGER = 11,
    TRINKET = 12,
    WEAPON = 13,
    SHIELD = 14,
    RANGED = 15,
    CLOAK = 16,
    TWO_HANDED_WEAPON = 17,
    BAG = 18,
    TABARD = 19,
    ROBE = 20,
    WEAPON_MAIN_HAND = 21,
    WEAPON_OFF_HAND = 22,
    HOLDABLE = 23,
    AMMO = 24,
    THROWN = 25,
    RANGED_RIGHT = 26,
    QUIVER = 27,
    RELIC = 28,
};

enum class ItemClass : uint8_t {
    CONSUMABLE = 0,
    CONTAINER = 1,
    WEAPON = 2,
    GEM = 3,
    ARMOR = 4,
    REAGENT = 5,
    PROJECTILE = 6,
    TRADE_GOODS = 7,
    GENERIC = 8,
    RECIPE = 9,
    MONEY = 10,
    QUIVER = 11,
    QUEST = 12,
    KEY = 13,
    PERMANENT = 14,
    MISC = 15,
};

enum class ItemClassAndSubClass : uint64_t {
    CONSUMABLE = 0,
    CHEESE_OR_BREAD_OBSOLETE = 4294967296,
    LIQUID_OBSOLETE = 8589934592,
    BAG = 1,
    SOUL_BAG = 4294967297,
    HERB_BAG = 8589934593,
    ENCHANTING_BAG = 12884901889,
    ENGINEERING_BAG = 17179869185,
    ONE_HANDED_AXE = 2,
    TWO_HANDED_AXE = 4294967298,
    BOW = 8589934594,
    GUN = 12884901890,
    ONE_HANDED_MACE = 17179869186,
    TWO_HANDED_MACE = 21474836482,
    POLEARM = 25769803778,
    ONE_HANDED_SWORD = 30064771074,
    TWO_HANDED_SWORD = 34359738370,
    OBSOLETE_WEAPON = 38654705666,
    STAFF = 42949672962,
    ONE_HANDED_EXOTIC = 47244640258,
    TWO_HANDED_EXOTIC = 51539607554,
    FIST_WEAPON = 55834574850,
    MISCELLANEOUS_WEAPON = 60129542146,
    DAGGER = 64424509442,
    THROWN = 68719476738,
    SPEAR = 73014444034,
    CROSSBOW = 77309411330,
    WAND = 81604378626,
    FISHING_POLE = 85899345922,
    JEWELRY_OBSOLETE = 3,
    MISCELLANEOUS_ARMOR = 4,
    CLOTH_ARMOR = 4294967300,
    LEATHER_ARMOR = 8589934596,
    MAIL_ARMOR = 12884901892,
    PLATE_ARMOR = 17179869188,
    BUCKLER_OBSOLETE = 21474836484,
    SHIELD = 25769803780,
    LIBRAM = 30064771076,
    IDOL = 34359738372,
    TOTEM = 38654705668,
    REAGENT = 5,
    WAND_OBSOLETE = 6,
    BOLT_OBSOLETE = 4294967302,
    ARROW = 8589934598,
    BULLET = 12884901894,
    THROWN_OBSOLETE = 17179869190,
    TRADE_GOOD = 7,
    PART_TRADE_GOOD = 4294967303,
    EXPLOSIVE_TRADE_GOOD = 8589934599,
    DEVICE_TRADE_GOOD = 12884901895,
    GENERIC_OBSOLETE = 8,
    BOOK = 9,
    LEATHERWORKING_RECIPE = 4294967305,
    TAILORING_RECIPE = 8589934601,
    ENGINEERING_RECIPE = 12884901897,
    BLACKSMITHING_RECIPE = 17179869193,
    COOKING_RECIPE = 21474836489,
    ALCHEMY_RECIPE = 25769803785,
    FIRST_AID_RECIPE = 30064771081,
    ENCHANTING_RECIPE = 34359738377,
    FISHING_RECIPE = 38654705673,
    MONEY_OBSOLETE = 10,
    QUIVER_OBSOLETE = 11,
    QUIVER_OBSOLETE1 = 4294967307,
    QUIVER = 8589934603,
    AMMO_POUCH = 12884901899,
    QUEST = 12,
    KEY = 13,
    LOCKPICK = 4294967309,
    PERMANENT = 14,
    JUNK = 15,
};

enum class ItemEnvTypes : uint8_t {
    SHIELD = 0,
    METAL_WEAPON = 1,
    WOOD_WEAPON = 2,
};

enum class ItemQuality : uint8_t {
    POOR = 0,
    NORMAL = 1,
    UNCOMMON = 2,
    RARE = 3,
    EPIC = 4,
    LEGENDARY = 5,
    ARTIFACT = 6,
};

enum class ItemSet : uint16_t {
    NONE = 0,
    THE_GLADIATOR = 1,
    DAL_RENDS_ARMS = 41,
    SPIDERS_KISS = 65,
    THE_POSTMASTER = 81,
    CADAVEROUS_GARB = 121,
    NECROPILE_RAIMENT = 122,
    BLOODMAIL_REGALIA = 123,
    DEATHBONE_GUARDIAN = 124,
    VOLCANIC_ARMOR = 141,
    STORMSHROUD_ARMOR = 142,
    DEVILSAUR_ARMOR = 143,
    IRONFEATHER_ARMOR = 144,
    DEFIAS_LEATHER = 161,
    EMBRACE_OF_THE_VIPER = 162,
    CHAIN_OF_THE_SCARLET_CRUSADE = 163,
    MAGISTERS_REGALIA = 181,
    VESTMENTS_OF_THE_DEVOUT = 182,
    DREADMIST_RAIMENT = 183,
    SHADOWCRAFT_ARMOR = 184,
    WILDHEART_RAIMENT = 185,
    BEASTSTALKER_ARMOR = 186,
    THE_ELEMENTS = 187,
    LIGHTFORGE_ARMOR = 188,
    BATTLEGEAR_OF_VALOR = 189,
    ARCANIST_REGALIA = 201,
    VESTMENTS_OF_PROPHECY = 202,
    FELHEART_RAIMENT = 203,
    NIGHTSLAYER_ARMOR = 204,
    CENARION_RAIMENT = 205,
    GIANTSTALKER_ARMOR = 206,
    THE_EARTHFURY = 207,
    LAWBRINGER_ARMOR = 208,
    BATTLEGEAR_OF_MIGHT = 209,
    NETHERWIND_REGALIA = 210,
    VESTMENTS_OF_TRANSCENDENCE = 211,
    NEMESIS_RAIMENT = 212,
    BLOODFANG_ARMOR = 213,
    STORMRAGE_RAIMENT = 214,
    DRAGONSTALKER_ARMOR = 215,
    THE_TEN_STORMS = 216,
    JUDGEMENT_ARMOR = 217,
    BATTLEGEAR_OF_WRATH = 218,
    GARB_OF_THERO_SHAN = 221,
    SHARD_OF_THE_GODS = 241,
    SPIRIT_OF_ESKHANDAR = 261,
    CHAMPIONS_BATTLEGEAR = 281,
    LIEUTENANT_COMMANDERS_BATTLEGEAR = 282,
    CHAMPIONS_EARTHSHAKER = 301,
    IMPERIAL_PLATE = 321,
    CHAMPIONS_REGALIA = 341,
    CHAMPIONS_RAIMENT = 342,
    LIEUTENANT_COMMANDERS_REGALIA = 343,
    LIEUTENANT_COMMANDERS_RAIMENT = 344,
    CHAMPIONS_THREADS = 345,
    LIEUTENANT_COMMANDERS_THREADS = 346,
    CHAMPIONS_VESTMENTS = 347,
    LIEUTENANT_COMMANDERS_VESTMENTS = 348,
    CHAMPIONS_PURSUIT = 361,
    LIEUTENANT_COMMANDERS_PURSUIT = 362,
    LIEUTENANT_COMMANDERS_SANCTUARY = 381,
    CHAMPIONS_SANCTUARY = 382,
    WARLORDS_BATTLEGEAR = 383,
    FIELD_MARSHALS_BATTLEGEAR = 384,
    WARLORDS_EARTHSHAKER = 386,
    WARLORDS_REGALIA = 387,
    FIELD_MARSHALS_REGALIA = 388,
    FIELD_MARSHALS_RAIMENT = 389,
    WARLORDS_RAIMENT = 390,
    WARLORDS_THREADS = 391,
    FIELD_MARSHALS_THREADS = 392,
    WARLORDS_VESTMENTS = 393,
    FIELD_MARSHALS_VESTMENTS = 394,
    FIELD_MARSHALS_PURSUIT = 395,
    WARLORDS_PURSUIT = 396,
    FIELD_MARSHALS_SANCTUARY = 397,
    WARLORDS_SANCTUARY = 398,
    LIEUTENANT_COMMANDERS_AEGIS = 401,
    FIELD_MARSHALS_AEGIS = 402,
    BLOODVINE_GARB = 421,
    PRIMAL_BATSKIN = 441,
    BLOOD_TIGER_HARNESS = 442,
    BLOODSOUL_EMBRACE = 443,
    THE_DARKSOUL = 444,
    THE_TWIN_BLADES_OF_HAKKARI = 461,
    ZANZILS_CONCENTRATION = 462,
    PRIMAL_BLESSING = 463,
    OVERLORDS_RESOLUTION = 464,
    PRAYER_OF_THE_PRIMAL = 465,
    MAJOR_MOJO_INFUSION = 466,
    THE_HIGHLANDERS_RESOLUTION = 467,
    THE_HIGHLANDERS_RESOLVE = 468,
    THE_HIGHLANDERS_DETERMINATION = 469,
    THE_HIGHLANDERS_FORTITUDE = 470,
    THE_HIGHLANDERS_PURPOSE = 471,
    THE_HIGHLANDERS_WILL = 472,
    THE_HIGHLANDERS_INTENT = 473,
    VINDICATORS_BATTLEGEAR = 474,
    FREETHINKERS_ARMOR = 475,
    AUGURS_REGALIA = 476,
    PREDATORS_ARMOR = 477,
    MADCAPS_OUTFIT = 478,
    HARUSPEXS_GARB = 479,
    CONFESSORS_RAIMENT = 480,
    DEMONIACS_THREADS = 481,
    ILLUSIONISTS_ATTIRE = 482,
    THE_DEFILERS_DETERMINATION = 483,
    THE_DEFILERS_FORTITUDE = 484,
    THE_DEFILERS_INTENT = 485,
    THE_DEFILERS_PURPOSE = 486,
    THE_DEFILERS_RESOLUTION = 487,
    THE_DEFILERS_WILL = 488,
    BLACK_DRAGON_MAIL = 489,
    GREEN_DRAGON_MAIL = 490,
    BLUE_DRAGON_MAIL = 491,
    TWILIGHT_TRAPPINGS = 492,
    GENESIS_RAIMENT = 493,
    SYMBOLS_OF_UNENDING_LIFE = 494,
    BATTLEGEAR_OF_UNYIELDING_STRENGTH = 495,
    CONQUERORS_BATTLEGEAR = 496,
    DEATHDEALERS_EMBRACE = 497,
    EMBLEMS_OF_VEILED_SHADOWS = 498,
    DOOMCALLERS_ATTIRE = 499,
    IMPLEMENTS_OF_UNSPOKEN_NAMES = 500,
    STORMCALLERS_GARB = 501,
    GIFT_OF_THE_GATHERING_STORM = 502,
    ENIGMA_VESTMENTS = 503,
    TRAPPINGS_OF_VAULTED_SECRETS = 504,
    AVENGERS_BATTLEGEAR = 505,
    BATTLEGEAR_OF_ETERNAL_JUSTICE = 506,
    GARMENTS_OF_THE_ORACLE = 507,
    FINERY_OF_INFINITE_WISDOM = 508,
    STRIKERS_GARB = 509,
    TRAPPINGS_OF_THE_UNSEEN_PATH = 510,
    BATTLEGEAR_OF_HEROISM = 511,
    DARKMANTLE_ARMOR = 512,
    FERALHEART_RAIMENT = 513,
    VESTMENTS_OF_THE_VIRTUOUS = 514,
    BEASTMASTER_ARMOR = 515,
    SOULFORGE_ARMOR = 516,
    SORCERERS_REGALIA = 517,
    DEATHMIST_RAIMENT = 518,
    THE_FIVE_THUNDERS = 519,
    IRONWEAVE_BATTLESUIT = 520,
    DREAMWALKER_RAIMENT = 521,
    CHAMPIONS_GUARD = 522,
    DREADNAUGHTS_BATTLEGEAR = 523,
    BONESCYTHE_ARMOR = 524,
    VESTMENTS_OF_FAITH = 525,
    FROSTFIRE_REGALIA = 526,
    THE_EARTHSHATTERER = 527,
    REDEMPTION_ARMOR = 528,
    PLAGUEHEART_RAIMENT = 529,
    CRYPTSTALKER_ARMOR = 530,
    BATTLEGEAR_OF_UNDEAD_SLAYING = 533,
    UNDEAD_SLAYERS_ARMOR = 534,
    GARB_OF_THE_UNDEAD_SLAYER = 535,
    REGALIA_OF_UNDEAD_CLEANSING = 536,
    CHAMPIONS_BATTLEARMOR = 537,
    CHAMPIONS_STORMCALLER = 538,
    CHAMPIONS_REFUGE = 539,
    CHAMPIONS_INVESTITURE = 540,
    CHAMPIONS_DREADGEAR = 541,
    CHAMPIONS_ARCANUM = 542,
    CHAMPIONS_PURSUANCE = 543,
    LIEUTENANT_COMMANDERS_REDOUBT = 544,
    LIEUTENANT_COMMANDERS_BATTLEARMOR = 545,
    LIEUTENANT_COMMANDERS_ARCANUM = 546,
    LIEUTENANT_COMMANDERS_DREADGEAR = 547,
    LIEUTENANT_COMMANDERS_GUARD = 548,
    LIEUTENANT_COMMANDERS_INVESTITURE = 549,
    LIEUTENANT_COMMANDERS_PURSUANCE = 550,
    LIEUTENANT_COMMANDERS_REFUGE = 551,
};

enum class ItemSlot : uint8_t {
    HEAD = 0,
    NECK = 1,
    SHOULDERS = 2,
    SHIRT = 3,
    CHEST = 4,
    WAIST = 5,
    LEGS = 6,
    BOOTS = 7,
    WRIST = 8,
    HANDS = 9,
    RING1 = 10,
    RING2 = 11,
    TRINKET1 = 12,
    TRINKET2 = 13,
    BACK = 14,
    MAIN_HAND = 15,
    OFF_HAND = 16,
    RANGED_OR_RELIC = 17,
    TABARD = 18,
    BAG1 = 19,
    BAG2 = 20,
    BAG3 = 21,
    BAG4 = 22,
    INVENTORY_0 = 23,
    INVENTORY_1 = 24,
    INVENTORY_2 = 25,
    INVENTORY_3 = 26,
    INVENTORY_4 = 27,
    INVENTORY_5 = 28,
    INVENTORY_6 = 29,
    INVENTORY_7 = 30,
    INVENTORY_8 = 31,
    INVENTORY_9 = 32,
    INVENTORY_10 = 33,
    INVENTORY_11 = 34,
    INVENTORY_12 = 35,
    INVENTORY_13 = 36,
    INVENTORY_14 = 37,
    INVENTORY_15 = 38,
    BANK_1 = 39,
    BANK_2 = 40,
    BANK_3 = 41,
    BANK_4 = 42,
    BANK_5 = 43,
    BANK_6 = 44,
    BANK_7 = 45,
    BANK_8 = 46,
    BANK_9 = 47,
    BANK_10 = 48,
    BANK_11 = 49,
    BANK_12 = 50,
    BANK_13 = 51,
    BANK_14 = 52,
    BANK_15 = 53,
    BANK_16 = 54,
    BANK_17 = 55,
    BANK_18 = 56,
    BANK_19 = 57,
    BANK_20 = 58,
    BANK_21 = 59,
    BANK_22 = 60,
    BANK_23 = 61,
    BANK_24 = 62,
    BANK_BAG_SLOT_1 = 63,
    BANK_BAG_SLOT_2 = 64,
    BANK_BAG_SLOT_3 = 65,
    BANK_BAG_SLOT_4 = 66,
    BANK_BAG_SLOT_5 = 67,
    BANK_BAG_SLOT_6 = 68,
    VENDOR_BUYBACK_1 = 69,
    VENDOR_BUYBACK_2 = 70,
    VENDOR_BUYBACK_3 = 71,
    VENDOR_BUYBACK_4 = 72,
    VENDOR_BUYBACK_5 = 73,
    VENDOR_BUYBACK_6 = 74,
    VENDOR_BUYBACK_7 = 75,
    VENDOR_BUYBACK_8 = 76,
    VENDOR_BUYBACK_9 = 77,
    VENDOR_BUYBACK_10 = 78,
    VENDOR_BUYBACK_11 = 79,
    VENDOR_BUYBACK_12 = 80,
    KEYRING_1 = 81,
    KEYRING_2 = 82,
    KEYRING_3 = 83,
    KEYRING_4 = 84,
    KEYRING_5 = 85,
    KEYRING_6 = 86,
    KEYRING_7 = 87,
    KEYRING_8 = 88,
    KEYRING_9 = 89,
    KEYRING_10 = 90,
    KEYRING_11 = 91,
    KEYRING_12 = 92,
    KEYRING_13 = 93,
    KEYRING_14 = 94,
    KEYRING_15 = 95,
    KEYRING_16 = 96,
    KEYRING_17 = 97,
    KEYRING_18 = 98,
    KEYRING_19 = 99,
    KEYRING_20 = 100,
    KEYRING_21 = 101,
    KEYRING_22 = 102,
    KEYRING_23 = 103,
    KEYRING_24 = 104,
    KEYRING_25 = 105,
    KEYRING_26 = 106,
    KEYRING_27 = 107,
    KEYRING_28 = 108,
    KEYRING_29 = 109,
    KEYRING_30 = 110,
    KEYRING_31 = 111,
    KEYRING_32 = 112,
};

enum class ItemStatType : uint8_t {
    MANA = 0,
    HEALTH = 1,
    AGILITY = 3,
    STRENGTH = 4,
    INTELLECT = 5,
    SPIRIT = 6,
    STAMINA = 7,
};

enum class ItemWeaponClass : uint8_t {
    ITEM = 0,
    WEAPON = 1,
};

enum class KeyVersion : uint8_t {
    ZERO = 0,
    ONE = 1,
    TWO = 2,
    THREE = 3,
    FOUR = 4,
    FIVE = 5,
    SIX = 6,
    SEVEN = 7,
    EIGHT = 8,
    NINE = 9,
};

enum class Language : uint32_t {
    UNIVERSAL = 0,
    ORCISH = 1,
    DARNASSIAN = 2,
    TAURAHE = 3,
    DWARVISH = 6,
    COMMON = 7,
    DEMONIC = 8,
    TITAN = 9,
    THALASSIAN = 10,
    DRACONIC = 11,
    KALIMAG = 12,
    GNOMISH = 13,
    TROLL = 14,
    GUTTERSPEAK = 33,
    ADDON = 4294967295,
};

enum class LfgFaction : int8_t {
    NEUTRAL = -1,
    HORDE = 0,
    ALLIANCE = 1,
};

enum class LockType : uint8_t {
    NONE = 0,
    ITEM_REQUIRED = 1,
    LOCKTYPE_REFERENCE = 2,
};

enum class LogFormat : uint8_t {
    DEFAULT = 0,
    DEBUG = 1,
};

enum class LogoutResult : uint32_t {
    SUCCESS = 0,
    FAILURE_IN_COMBAT = 1,
    FAILURE_FROZEN_BY_GM = 2,
    FAILURE_JUMPING_OR_FALLING = 3,
};

enum class LogoutSpeed : uint8_t {
    DELAYED = 0,
    INSTANT = 1,
};

enum class LootMethod : uint8_t {
    ERROR = 0,
    CORPSE = 1,
    PICKPOCKETING = 2,
    FISHING = 3,
    DISENCHANTING = 4,
    SKINNING = 6,
    FISHINGHOLE = 20,
    FISHING_FAIL = 21,
    INSIGNIA = 22,
};

enum class LootMethodError : uint8_t {
    DIDNT_KILL = 0,
    TOO_FAR = 4,
    BAD_FACING = 5,
    LOCKED = 6,
    NOTSTANDING = 8,
    STUNNED = 9,
    PLAYER_NOT_FOUND = 10,
    PLAY_TIME_EXCEEDED = 11,
    MASTER_INV_FULL = 12,
    MASTER_UNIQUE_ITEM = 13,
    MASTER_OTHER = 14,
    ALREADY_PICKPOCKETED = 15,
    NOT_WHILE_SHAPESHIFTED = 16,
};

enum class LootSlotType : uint8_t {
    TYPE_ALLOW_LOOT = 0,
    TYPE_ROLL_ONGOING = 1,
    TYPE_MASTER = 2,
    TYPE_LOCKED = 3,
    TYPE_OWNER = 4,
};

enum class MailAction : uint32_t {
    SEND = 0,
    MONEY_TAKEN = 1,
    ITEM_TAKEN = 2,
    RETURNED_TO_SENDER = 3,
    DELETED = 4,
    MADE_PERMANENT = 5,
};

enum class MailMessageType : uint32_t {
    NORMAL = 0,
    AUCTION = 2,
    CREATURE = 3,
    GAMEOBJECT = 4,
    ITEM = 5,
};

enum class MailResult : uint32_t {
    OK = 0,
    ERR_EQUIP_ERROR = 1,
    ERR_CANNOT_SEND_TO_SELF = 2,
    ERR_NOT_ENOUGH_MONEY = 3,
    ERR_RECIPIENT_NOT_FOUND = 4,
    ERR_NOT_YOUR_TEAM = 5,
    ERR_INTERNAL_ERROR = 6,
    ERR_DISABLED_FOR_TRIAL_ACC = 14,
    ERR_RECIPIENT_CAP_REACHED = 15,
    ERR_CANT_SEND_WRAPPED_COD = 16,
    ERR_MAIL_AND_CHAT_SUSPENDED = 17,
    ERR_TOO_MANY_ATTACHMENTS = 18,
    ERR_MAIL_ATTACHMENT_INVALID = 19,
};

enum class MailResultTwo : uint32_t {
    OK = 0,
    ERR_EQUIP_ERROR = 1,
    ERR_CANNOT_SEND_TO_SELF = 2,
    ERR_NOT_ENOUGH_MONEY = 3,
    ERR_RECIPIENT_NOT_FOUND = 4,
    ERR_NOT_YOUR_TEAM = 5,
    ERR_INTERNAL_ERROR = 6,
    ERR_DISABLED_FOR_TRIAL_ACC = 14,
    ERR_RECIPIENT_CAP_REACHED = 15,
    ERR_CANT_SEND_WRAPPED_COD = 16,
    ERR_MAIL_AND_CHAT_SUSPENDED = 17,
    ERR_TOO_MANY_ATTACHMENTS = 18,
    ERR_MAIL_ATTACHMENT_INVALID = 19,
};

enum class MailType : uint8_t {
    NORMAL = 0,
    AUCTION = 2,
    CREATURE = 3,
    GAMEOBJECT = 4,
    ITEM = 5,
};

enum class Map : uint32_t {
    EASTERN_KINGDOMS = 0,
    KALIMDOR = 1,
    TESTING = 13,
    SCOTT_TEST = 25,
    CASH_TEST = 29,
    ALTERAC_VALLEY = 30,
    SHADOWFANG_KEEP = 33,
    STORMWIND_STOCKADE = 34,
    STORMWIND_PRISON = 35,
    DEADMINES = 36,
    AZSHARA_CRATER = 37,
    COLLINS_TEST = 42,
    WAILING_CAVERNS = 43,
    MONASTERY_UNUSED = 44,
    RAZORFEN_KRAUL = 47,
    BLACKFATHOM_DEEPS = 48,
    ULDAMAN = 70,
    GNOMEREGAN = 90,
    SUNKEN_TEMPLE = 109,
    RAZORFEN_DOWNS = 129,
    EMERALD_DREAM = 169,
    SCARLET_MONASTERY = 189,
    ZUL_FARRAK = 209,
    BLACKROCK_SPIRE = 229,
    BLACKROCK_DEPTHS = 230,
    ONYXIAS_LAIR = 249,
    OPENING_OF_THE_DARK_PORTAL = 269,
    SCHOLOMANCE = 289,
    ZUL_GURUB = 309,
    STRATHOLME = 329,
    MARAUDON = 349,
    DEEPRUN_TRAM = 369,
    RAGEFIRE_CHASM = 389,
    MOLTEN_CORE = 409,
    DIRE_MAUL = 429,
    ALLIANCE_PVP_BARRACKS = 449,
    HORDE_PVP_BARRACKS = 450,
    DEVELOPMENT_LAND = 451,
    BLACKWING_LAIR = 469,
    WARSONG_GULCH = 489,
    RUINS_OF_AHN_QIRAJ = 509,
    ARATHI_BASIN = 529,
    AHN_QIRAJ_TEMPLE = 531,
    NAXXRAMAS = 533,
};

enum class MeetingStoneFailure : uint8_t {
    MEETINGSTONE_FAIL_PARTYLEADER = 1,
    MEETINGSTONE_FAIL_FULL_GROUP = 2,
    MEETINGSTONE_FAIL_RAID_GROUP = 3,
};

enum class MeetingStoneStatus : uint8_t {
    LEAVE_QUEUE = 0,
    JOINED_QUEUE = 1,
    PARTY_MEMBER_LEFT_LFG = 2,
    PARTY_MEMBER_REMOVED_PARTY_REMOVED = 3,
    LOOKING_FOR_NEW_PARTY_IN_QUEUE = 4,
    NONE = 5,
};

enum class MonsterMoveType : uint8_t {
    NORMAL = 0,
    STOP = 1,
    FACING_SPOT = 2,
    FACING_TARGET = 3,
    FACING_ANGLE = 4,
};

enum class MountResult : uint32_t {
    INVALID_MOUNTEE = 0,
    TOO_FAR_AWAY = 1,
    ALREADY_MOUNTED = 2,
    NOT_MOUNTABLE = 3,
    NOT_YOUR_PET = 4,
    OTHER = 5,
    LOOTING = 6,
    RACE_CANT_MOUNT = 7,
    SHAPESHIFTED = 8,
    FORCED_DISMOUNT = 9,
    OK = 10,
};

enum class NewItemChatAlert : uint32_t {
    DO_NOT_SHOW = 0,
    SHOW = 1,
};

enum class NewItemCreationType : uint32_t {
    RECEIVED = 0,
    CREATED = 1,
};

enum class NewItemSource : uint32_t {
    LOOTED = 0,
    FROM_NPC = 1,
};

enum class ObjectType : uint8_t {
    OBJECT = 0,
    ITEM = 1,
    CONTAINER = 2,
    UNIT = 3,
    PLAYER = 4,
    GAME_OBJECT = 5,
    DYNAMIC_OBJECT = 6,
    CORPSE = 7,
};

enum class OceanType : uint8_t {
    FIRE = 0,
    SLIME = 2,
    WATER = 3,
};

enum class PageTextMaterial : uint8_t {
    NONE = 0,
    PARCHMENT = 1,
    STONE = 2,
    MARBLE = 3,
    SILVER = 4,
    BRONZE = 5,
    VALENTINE = 6,
};

enum class PartyOperation : uint8_t {
    INVITE = 0,
    LEAVE = 2,
};

enum class PartyResult : uint8_t {
    SUCCESS = 0,
    BAD_PLAYER_NAME = 1,
    TARGET_NOT_IN_GROUP = 2,
    GROUP_FULL = 3,
    ALREADY_IN_GROUP = 4,
    NOT_IN_GROUP = 5,
    NOT_LEADER = 6,
    PLAYER_WRONG_FACTION = 7,
    IGNORING_YOU = 8,
};

enum class PetCommandState : uint8_t {
    STAY = 0,
    FOLLOW = 1,
    ATTACK = 2,
    DISMISS = 3,
};

enum class PetEnabled : uint8_t {
    ENABLED = 8,
    DISABLED = 0,
};

enum class PetFeedback : uint8_t {
    PET_DEAD = 1,
    NOTHING_TO_ATTACK = 2,
    CANT_ATTACK_TARGET = 3,
    NO_PATH_TO = 4,
};

enum class PetReactState : uint8_t {
    PASSIVE = 0,
    DEFENSIVE = 1,
    AGGRESSIVE = 2,
};

enum class PetTalkReason : uint32_t {
    SPECIAL_SPELL = 0,
    ATTACK = 1,
};

enum class PetTameFailureReason : uint8_t {
    INVALID_CREATURE = 1,
    TOO_MANY = 2,
    CREATURE_ALREADY_OWNED = 3,
    NOT_TAMEABLE = 4,
    ANOTHER_SUMMON_ACTIVE = 5,
    UNITS_CANT_TAME = 6,
    NO_PET_AVAILABLE = 7,
    INTERNAL_ERROR = 8,
    TOO_HIGH_LEVEL = 9,
    DEAD = 10,
    NOT_DEAD = 11,
    UNKNOWN_ERROR = 12,
};

enum class PetitionResult : uint32_t {
    OK = 0,
    ALREADY_SIGNED = 1,
    ALREADY_IN_GUILD = 2,
    CANT_SIGN_OWN = 3,
    NEED_MORE = 4,
    NOT_SERVER = 5,
};

enum class PlayerChatTag : uint8_t {
    NONE = 0,
    AFK = 1,
    DND = 2,
    GM = 3,
};

enum class Power : uint8_t {
    MANA = 0,
    RAGE = 1,
    FOCUS = 2,
    ENERGY = 3,
    HAPPINESS = 4,
    HEALTH = 254,
};

enum class PvpRank : uint8_t {
    NO_RANK = 0,
    PARIAH = 1,
    OUTLAW = 2,
    EXILED = 3,
    DISHONORED = 4,
    RANK1 = 5,
    RANK2 = 6,
    RANK3 = 7,
    RANK4 = 8,
    RANK5 = 9,
    RANK6 = 10,
    RANK7 = 11,
    RANK8 = 12,
    RANK9 = 13,
    RANK10 = 14,
    RANK11 = 15,
    RANK12 = 16,
    RANK13 = 17,
    RANK14 = 18,
    FACTION_LEADER = 19,
};

enum class QuestCompletable : uint32_t {
    NOT_COMPLETABLE = 0,
    COMPLETEABLE = 3,
};

enum class QuestFailedReason : uint32_t {
    DONT_HAVE_REQ = 0,
    QUEST_FAILED_LOW_LEVEL = 1,
    QUEST_FAILED_REQS = 2,
    QUEST_FAILED_INVENTORY_FULL = 4,
    QUEST_FAILED_WRONG_RACE = 6,
    QUEST_ONLY_ONE_TIMED = 12,
    QUEST_ALREADY_ON = 13,
    QUEST_FAILED_DUPLICATE_ITEM = 17,
    QUEST_FAILED_MISSING_ITEMS = 20,
    QUEST_FAILED_NOT_ENOUGH_MONEY = 22,
};

enum class QuestGiverStatus : uint8_t {
    NONE = 0,
    UNAVAILABLE = 1,
    CHAT = 2,
    INCOMPLETE = 3,
    REWARD_REP = 4,
    AVAILABLE = 5,
    REWARD_OLD = 6,
    REWARD2 = 7,
};

enum class QuestPartyMessage : uint8_t {
    SHARING_QUEST = 0,
    CANT_TAKE_QUEST = 1,
    ACCEPT_QUEST = 2,
    DECLINE_QUEST = 3,
    TOO_FAR = 4,
    BUSY = 5,
    LOG_FULL = 6,
    HAVE_QUEST = 7,
    FINISH_QUEST = 8,
};

enum class Race : uint8_t {
    HUMAN = 1,
    ORC = 2,
    DWARF = 3,
    NIGHT_ELF = 4,
    UNDEAD = 5,
    TAUREN = 6,
    GNOME = 7,
    TROLL = 8,
    GOBLIN = 9,
};

enum class RaidGroupError : uint32_t {
    REQUIRED = 1,
    FULL = 2,
};

enum class RaidInstanceMessage : uint32_t {
    WARNING_HOURS = 1,
    WARNING_MIN = 2,
    WARNING_MIN_SOON = 3,
    WELCOME = 4,
};

enum class RaidTargetIndex : uint8_t {
    UNKNOWN0 = 0,
    UNKNOWN1 = 1,
    UNKNOWN2 = 2,
    UNKNOWN3 = 3,
    UNKNOWN4 = 4,
    UNKNOWN5 = 5,
    UNKNOWN6 = 6,
    UNKNOWN7 = 7,
    UNKNOWN8 = 8,
    REQUEST_ICONS = 255,
};

enum class RaidTargetUpdateType : uint8_t {
    PARTIAL = 0,
    FULL = 1,
};

enum class RollVote : uint8_t {
    PASS = 0,
    NEED = 1,
    GREED = 2,
};

enum class Scalp : uint8_t {
    HAIR = 0,
    BALD = 1,
};

enum class SelectionType : uint8_t {
    BASE_SKIN = 0,
    FACE = 1,
    FACIAL_HAIR = 2,
    HAIR = 3,
    UNDERWEAR = 4,
};

enum class SellItemResult : uint8_t {
    CANT_FIND_ITEM = 1,
    CANT_SELL_ITEM = 2,
    CANT_FIND_VENDOR = 3,
    YOU_DONT_OWN_THAT_ITEM = 4,
    UNK = 5,
    ONLY_EMPTY_BAG = 6,
};

enum class ServerCategory : uint8_t {
    ONE = 1,
    TWO = 2,
    THREE = 3,
    FIVE = 5,
};

enum class ServerMessageType : uint32_t {
    SHUTDOWN_TIME = 1,
    RESTART_TIME = 2,
    CUSTOM = 3,
    SHUTDOWN_CANCELLED = 4,
    RESTART_CANCELLED = 5,
};

enum class ServerRegion : uint8_t {
    UNITED_STATES = 1,
    KOREA = 2,
    EUROPE = 3,
    TAIWAN = 4,
    CHINA = 5,
    TEST_SERVER = 99,
    QA_SERVER = 101,
};

enum class SheathState : uint8_t {
    UNARMED = 0,
    MELEE = 1,
    RANGED = 2,
};

enum class SheatheType : uint8_t {
    NONE = 0,
    MAIN_HAND = 1,
    OFF_HAND = 2,
    LARGE_WEAPON_LEFT = 3,
    LARGE_WEAPON_RIGHT = 4,
    HIP_WEAPON_LEFT = 5,
    HIP_WEAPON_RIGHT = 6,
    SHIELD = 7,
};

enum class SimpleSpellCastResult : uint8_t {
    SUCCESS = 0,
    FAILURE = 2,
};

enum class SizeClass : int8_t {
    NONE = -1,
    SMALL = 0,
    MEDIUM = 1,
    LARGE = 2,
    GIANT = 3,
    COLOSSAL = 4,
};

enum class Skill : uint16_t {
    NONE = 0,
    FROST = 6,
    FIRE = 8,
    ARMS = 26,
    COMBAT = 38,
    SUBTLETY = 39,
    POISONS = 40,
    SWORDS = 43,
    AXES = 44,
    BOWS = 45,
    GUNS = 46,
    BEAST_MASTERY = 50,
    SURVIVAL = 51,
    MACES = 54,
    TWO_HANDED_SWORDS = 55,
    HOLY = 56,
    SHADOW = 78,
    DEFENSE = 95,
    LANGUAGE_COMMON = 98,
    RACIAL_DWARVEN = 101,
    LANGUAGE_ORCISH = 109,
    LANGUAGE_DWARVEN = 111,
    LANGUAGE_DARNASSIAN = 113,
    LANGUAGE_TAURAHE = 115,
    DUAL_WIELD = 118,
    RACIAL_TAUREN = 124,
    ORC_RACIAL = 125,
    RACIAL_NIGHT_ELF = 126,
    FIRST_AID = 129,
    FERAL_COMBAT = 134,
    STAVES = 136,
    LANGUAGE_THALASSIAN = 137,
    LANGUAGE_DRACONIC = 138,
    LANGUAGE_DEMON_TONGUE = 139,
    LANGUAGE_TITAN = 140,
    LANGUAGE_OLD_TONGUE = 141,
    SURVIVAL2 = 142,
    RIDING_HORSE = 148,
    RIDING_WOLF = 149,
    RIDING_TIGER = 150,
    RIDING_RAM = 152,
    SWIMMING = 155,
    TWO_HANDED_MACES = 160,
    UNARMED = 162,
    MARKSMANSHIP = 163,
    BLACKSMITHING = 164,
    LEATHERWORKING = 165,
    ALCHEMY = 171,
    TWO_HANDED_AXES = 172,
    DAGGERS = 173,
    THROWN = 176,
    HERBALISM = 182,
    GENERIC_DND = 183,
    RETRIBUTION = 184,
    COOKING = 185,
    MINING = 186,
    PET_IMP = 188,
    PET_FELHUNTER = 189,
    TAILORING = 197,
    ENGINEERING = 202,
    PET_SPIDER = 203,
    PET_VOIDWALKER = 204,
    PET_SUCCUBUS = 205,
    PET_INFERNAL = 206,
    PET_DOOMGUARD = 207,
    PET_WOLF = 208,
    PET_CAT = 209,
    PET_BEAR = 210,
    PET_BOAR = 211,
    PET_CROCILISK = 212,
    PET_CARRION_BIRD = 213,
    PET_CRAB = 214,
    PET_GORILLA = 215,
    PET_RAPTOR = 217,
    PET_TALLSTRIDER = 218,
    RACIAL_UNDED = 220,
    CROSSBOWS = 226,
    WANDS = 228,
    POLEARMS = 229,
    PET_SCORPID = 236,
    ARCANE = 237,
    PET_TURTLE = 251,
    ASSASSINATION = 253,
    FURY = 256,
    PROTECTION = 257,
    BEAST_TRAINING = 261,
    PROTECTION2 = 267,
    PET_TALENTS = 270,
    PLATE_MAIL = 293,
    LANGUAGE_GNOMISH = 313,
    LANGUAGE_TROLL = 315,
    ENCHANTING = 333,
    DEMONOLOGY = 354,
    AFFLICTION = 355,
    FISHING = 356,
    ENHANCEMENT = 373,
    RESTORATION = 374,
    ELEMENTAL_COMBAT = 375,
    SKINNING = 393,
    MAIL = 413,
    LEATHER = 414,
    CLOTH = 415,
    SHIELD = 433,
    FIST_WEAPONS = 473,
    RIDING_RAPTOR = 533,
    RIDING_MECHANOSTRIDER = 553,
    RIDING_UNDEAD_HORSE = 554,
    RESTORATION2 = 573,
    BALANCE = 574,
    DESTRUCTION = 593,
    HOLY2 = 594,
    DISCIPLINE = 613,
    LOCKPICKING = 633,
    PET_BAT = 653,
    PET_HYENA = 654,
    PET_OWL = 655,
    PET_WIND_SERPENT = 656,
    LANGUAGE_GUTTERSPEAK = 673,
    RIDING_KODO = 713,
    RACIAL_TROLL = 733,
    RACIAL_GNOME = 753,
    RACIAL_HUMAN = 754,
    PET_EVENT_RC = 758,
    RIDING = 762,
};

enum class SkillCategory : uint8_t {
    ATTRIBUTE = 5,
    WEAPON = 6,
    CLASS = 7,
    ARMOR = 8,
    SECONDARY_PROFESSION = 9,
    LANGUAGE = 10,
    PRIMARY_PROFESSION = 11,
    GENERIC = 12,
};

enum class SoundType : uint8_t {
    UNUSED = 0,
    SPELLS = 1,
    UI = 2,
    FOOTSTEPS = 3,
    WEAPON_IMPACT = 4,
    WEAPON_MISS = 6,
    PICK_UP_PUT_DOWN = 9,
    NPC_COMBAT = 10,
    ERRORS = 12,
    OBJECTS = 14,
    DEATH = 16,
    NPC_GREETINGS = 17,
    TEST = 18,
    ARMOUR_FOLEY = 19,
    FOOTSTEPS_2 = 20,
    WATER_CHARACTER = 21,
    WATER_LIQUID = 22,
    TRADESKILLS = 23,
    DOODADS = 25,
    SPELL_FIZZLE = 26,
    NPC_LOOPS = 27,
    ZONE_MUSIC = 28,
    EMOTES = 29,
    NARRATION_MUSIC = 30,
    NARRATION = 31,
    ZONE_AMBIENCE = 50,
};

enum class SpellCastResult : uint8_t {
    AFFECTING_COMBAT = 0,
    ALREADY_AT_FULL_HEALTH = 1,
    ALREADY_AT_FULL_MANA = 2,
    ALREADY_BEING_TAMED = 3,
    ALREADY_HAVE_CHARM = 4,
    ALREADY_HAVE_SUMMON = 5,
    ALREADY_OPEN = 6,
    MORE_POWERFUL_SPELL_ACTIVE = 7,
    BAD_IMPLICIT_TARGETS = 9,
    BAD_TARGETS = 10,
    CANT_BE_CHARMED = 11,
    CANT_BE_DISENCHANTED = 12,
    CANT_BE_PROSPECTED = 13,
    CANT_CAST_ON_TAPPED = 14,
    CANT_DUEL_WHILE_INVISIBLE = 15,
    CANT_DUEL_WHILE_STEALTHED = 16,
    CANT_TOO_CLOSE_TO_ENEMY = 17,
    CANT_DO_THAT_YET = 18,
    CASTER_DEAD = 19,
    CHARMED = 20,
    CHEST_IN_USE = 21,
    CONFUSED = 22,
    DONT_REPORT = 23,
    EQUIPPED_ITEM = 24,
    EQUIPPED_ITEM_CLASS = 25,
    EQUIPPED_ITEM_CLASS_MAINHAND = 26,
    EQUIPPED_ITEM_CLASS_OFFHAND = 27,
    ERROR = 28,
    FIZZLE = 29,
    FLEEING = 30,
    FOOD_LOWLEVEL = 31,
    HIGHLEVEL = 32,
    IMMUNE = 34,
    INTERRUPTED = 35,
    INTERRUPTED_COMBAT = 36,
    ITEM_ALREADY_ENCHANTED = 37,
    ITEM_GONE = 38,
    ENCHANT_NOT_EXISTING_ITEM = 39,
    ITEM_NOT_READY = 40,
    LEVEL_REQUIREMENT = 41,
    LINE_OF_SIGHT = 42,
    LOWLEVEL = 43,
    SKILL_NOT_HIGH_ENOUGH = 44,
    MAINHAND_EMPTY = 45,
    MOVING = 46,
    NEED_AMMO = 47,
    NEED_REQUIRES_SOMETHING = 48,
    NEED_EXOTIC_AMMO = 49,
    NOPATH = 50,
    NOT_BEHIND = 51,
    NOT_FISHABLE = 52,
    NOT_HERE = 53,
    NOT_INFRONT = 54,
    NOT_IN_CONTROL = 55,
    NOT_KNOWN = 56,
    NOT_MOUNTED = 57,
    NOT_ON_TAXI = 58,
    NOT_ON_TRANSPORT = 59,
    NOT_READY = 60,
    NOT_SHAPESHIFT = 61,
    NOT_STANDING = 62,
    NOT_TRADEABLE = 63,
    NOT_TRADING = 64,
    NOT_UNSHEATHED = 65,
    NOT_WHILE_GHOST = 66,
    NO_AMMO = 67,
    NO_CHARGES_REMAIN = 68,
    NO_CHAMPION = 69,
    NO_COMBO_POINTS = 70,
    NO_DUELING = 71,
    NO_ENDURANCE = 72,
    NO_FISH = 73,
    NO_ITEMS_WHILE_SHAPESHIFTED = 74,
    NO_MOUNTS_ALLOWED = 75,
    NO_PET = 76,
    NO_POWER = 77,
    NOTHING_TO_DISPEL = 78,
    NOTHING_TO_STEAL = 79,
    ONLY_ABOVEWATER = 80,
    ONLY_DAYTIME = 81,
    ONLY_INDOORS = 82,
    ONLY_MOUNTED = 83,
    ONLY_NIGHTTIME = 84,
    ONLY_OUTDOORS = 85,
    ONLY_SHAPESHIFT = 86,
    ONLY_STEALTHED = 87,
    ONLY_UNDERWATER = 88,
    OUT_OF_RANGE = 89,
    PACIFIED = 90,
    POSSESSED = 91,
    REQUIRES_AREA = 93,
    REQUIRES_SPELL_FOCUS = 94,
    ROOTED = 95,
    SILENCED = 96,
    SPELL_IN_PROGRESS = 97,
    SPELL_LEARNED = 98,
    SPELL_UNAVAILABLE = 99,
    STUNNED = 100,
    TARGETS_DEAD = 101,
    TARGET_AFFECTING_COMBAT = 102,
    TARGET_AURASTATE = 103,
    TARGET_DUELING = 104,
    TARGET_ENEMY = 105,
    TARGET_ENRAGED = 106,
    TARGET_FRIENDLY = 107,
    TARGET_IN_COMBAT = 108,
    TARGET_IS_PLAYER = 109,
    TARGET_NOT_DEAD = 110,
    TARGET_NOT_IN_PARTY = 111,
    TARGET_NOT_LOOTED = 112,
    TARGET_NOT_PLAYER = 113,
    TARGET_NO_POCKETS = 114,
    TARGET_NO_WEAPONS = 115,
    TARGET_UNSKINNABLE = 116,
    THIRST_SATIATED = 117,
    TOO_CLOSE = 118,
    TOO_MANY_OF_ITEM = 119,
    TRAINING_POINTS = 121,
    TRY_CAST_AGAIN = 122,
    UNIT_NOT_BEHIND = 123,
    UNIT_NOT_INFRONT = 124,
    WRONG_PET_FOOD = 125,
    NOT_WHILE_FATIGUED = 126,
    TARGET_NOT_IN_INSTANCE = 127,
    NOT_WHILE_TRADING = 128,
    TARGET_NOT_IN_RAID = 129,
    DISENCHANT_WHILE_LOOTING = 130,
    PROSPECT_WHILE_LOOTING = 131,
    TARGET_FREEFORALL = 133,
    NO_EDIBLE_CORPSES = 134,
    ONLY_BATTLEGROUNDS = 135,
    TARGET_NOT_GHOST = 136,
    TOO_MANY_SKILLS = 137,
    CANT_USE_NEW_ITEM = 138,
    WRONG_WEATHER = 139,
    DAMAGE_IMMUNE = 140,
    PREVENTED_BY_MECHANIC = 141,
    PLAY_TIME = 142,
    REPUTATION = 143,
    MIN_SKILL = 144,
    UNKNOWN = 145,
};

enum class SpellEffect : uint32_t {
    NONE = 0,
    INSTAKILL = 1,
    SCHOOL_DAMAGE = 2,
    DUMMY = 3,
    PORTAL_TELEPORT = 4,
    TELEPORT_UNITS = 5,
    APPLY_AURA = 6,
    ENVIRONMENTAL_DAMAGE = 7,
    POWER_DRAIN = 8,
    HEALTH_LEECH = 9,
    HEAL = 10,
    BIND = 11,
    PORTAL = 12,
    RITUAL_BASE = 13,
    RITUAL_SPECIALIZE = 14,
    RITUAL_ACTIVATE_PORTAL = 15,
    QUEST_COMPLETE = 16,
    WEAPON_DAMAGE_NOSCHOOL = 17,
    RESURRECT = 18,
    ADD_EXTRA_ATTACKS = 19,
    DODGE = 20,
    EVADE = 21,
    PARRY = 22,
    BLOCK = 23,
    CREATE_ITEM = 24,
    WEAPON = 25,
    DEFENSE = 26,
    PERSISTENT_AREA_AURA = 27,
    SUMMON = 28,
    LEAP = 29,
    ENERGIZE = 30,
    WEAPON_PERCENT_DAMAGE = 31,
    TRIGGER_MISSILE = 32,
    OPEN_LOCK = 33,
    SUMMON_CHANGE_ITEM = 34,
    APPLY_AREA_AURA_PARTY = 35,
    LEARN_SPELL = 36,
    SPELL_DEFENSE = 37,
    DISPEL = 38,
    LANGUAGE = 39,
    DUAL_WIELD = 40,
    SUMMON_WILD = 41,
    SUMMON_GUARDIAN = 42,
    TELEPORT_UNITS_FACE_CASTER = 43,
    SKILL_STEP = 44,
    ADD_HONOR = 45,
    SPAWN = 46,
    TRADE_SKILL = 47,
    STEALTH = 48,
    DETECT = 49,
    TRANS_DOOR = 50,
    FORCE_CRITICAL_HIT = 51,
    GUARANTEE_HIT = 52,
    ENCHANT_ITEM = 53,
    ENCHANT_ITEM_TEMPORARY = 54,
    TAMECREATURE = 55,
    SUMMON_PET = 56,
    LEARN_PET_SPELL = 57,
    WEAPON_DAMAGE = 58,
    OPEN_LOCK_ITEM = 59,
    PROFICIENCY = 60,
    SEND_EVENT = 61,
    POWER_BURN = 62,
    THREAT = 63,
    TRIGGER_SPELL = 64,
    HEALTH_FUNNEL = 65,
    POWER_FUNNEL = 66,
    HEAL_MAX_HEALTH = 67,
    INTERRUPT_CAST = 68,
    DISTRACT = 69,
    PULL = 70,
    PICKPOCKET = 71,
    ADD_FARSIGHT = 72,
    SUMMON_POSSESSED = 73,
    SUMMON_TOTEM = 74,
    HEAL_MECHANICAL = 75,
    SUMMON_OBJECT_WILD = 76,
    SCRIPT_EFFECT = 77,
    ATTACK = 78,
    SANCTUARY = 79,
    ADD_COMBO_POINTS = 80,
    CREATE_HOUSE = 81,
    BIND_SIGHT = 82,
    DUEL = 83,
    STUCK = 84,
    SUMMON_PLAYER = 85,
    ACTIVATE_OBJECT = 86,
    SUMMON_TOTEM_SLOT1 = 87,
    SUMMON_TOTEM_SLOT2 = 88,
    SUMMON_TOTEM_SLOT3 = 89,
    SUMMON_TOTEM_SLOT4 = 90,
    THREAT_ALL = 91,
    ENCHANT_HELD_ITEM = 92,
    SUMMON_PHANTASM = 93,
    SELF_RESURRECT = 94,
    SKINNING = 95,
    CHARGE = 96,
    SUMMON_CRITTER = 97,
    KNOCK_BACK = 98,
    DISENCHANT = 99,
    INEBRIATE = 100,
    FEED_PET = 101,
    DISMISS_PET = 102,
    REPUTATION = 103,
    SUMMON_OBJECT_SLOT1 = 104,
    SUMMON_OBJECT_SLOT2 = 105,
    SUMMON_OBJECT_SLOT3 = 106,
    SUMMON_OBJECT_SLOT4 = 107,
    DISPEL_MECHANIC = 108,
    SUMMON_DEAD_PET = 109,
    DESTROY_ALL_TOTEMS = 110,
    DURABILITY_DAMAGE = 111,
    SUMMON_DEMON = 112,
    RESURRECT_NEW = 113,
    ATTACK_ME = 114,
    DURABILITY_DAMAGE_PCT = 115,
    SKIN_PLAYER_CORPSE = 116,
    SPIRIT_HEAL = 117,
    SKILL = 118,
    APPLY_AREA_AURA_PET = 119,
    TELEPORT_GRAVEYARD = 120,
    NORMALIZED_WEAPON_DMG = 121,
    UNKNOWN122 = 122,
    SEND_TAXI = 123,
    PLAYER_PULL = 124,
    MODIFY_THREAT_PERCENT = 125,
    UNKNOWN126 = 126,
    UNKNOWN127 = 127,
};

enum class SpellMissInfo : uint8_t {
    NONE = 0,
    MISS = 1,
    RESIST = 2,
    DODGE = 3,
    PARRY = 4,
    BLOCK = 5,
    EVADE = 6,
    IMMUNE = 7,
    IMMUNE2 = 8,
    DEFLECT = 9,
    ABSORB = 10,
    REFLECT = 11,
};

enum class SpellSchool : uint8_t {
    NORMAL = 0,
    HOLY = 1,
    FIRE = 2,
    NATURE = 3,
    FROST = 4,
    SHADOW = 5,
    ARCANE = 6,
};

enum class SpellTriggerType : uint8_t {
    ON_USE = 0,
    ON_EQUIP = 1,
    CHANCE_ON_HIT = 2,
};

enum class StableResult : uint8_t {
    ERR_MONEY = 1,
    ERR_STABLE = 6,
    SUCCESS_STABLE = 8,
    SUCCESS_UNSTABLE = 9,
    SUCCESS_BUY_SLOT = 10,
};

enum class StatusId : uint8_t {
    NONE = 0,
    WAIT_QUEUE = 1,
    WAIT_JOIN = 2,
    IN_PROGRESS = 3,
    WAIT_LEAVE = 4,
};

enum class SwingType : uint8_t {
    LIGHT = 0,
    MEDIUM = 1,
    HEAVY = 2,
};

enum class Talent : uint32_t {
    BURNING_SOUL = 23,
    IMPROVED_FIRE_WARD = 24,
    IMPROVED_SCORCH = 25,
    IMPROVED_FIREBALL = 26,
    IMPROVED_FIRE_BLAST = 27,
    FLAME_THROWING = 28,
    PYROBLAST = 29,
    IMPACT = 30,
    IMPROVED_FLAMESTRIKE = 31,
    BLAST_WAVE = 32,
    CRITICAL_MASS = 33,
    IGNITE = 34,
    FIRE_POWER = 35,
    COMBUSTION = 36,
    IMPROVED_FROSTBOLT = 37,
    FROSTBITE = 38,
    PIERCING_ICE = 61,
    IMPROVED_FROST_NOVA = 62,
    IMPROVED_BLIZZARD = 63,
    IMPROVED_CONE_OF_COLD = 64,
    PERMAFROST = 65,
    FROST_CHANNELING = 66,
    SHATTER = 67,
    WINTERS_CHILL = 68,
    COLD_SNAP = 69,
    FROST_WARDING = 70,
    ICE_BARRIER = 71,
    ICE_BLOCK = 72,
    ICE_SHARDS = 73,
    ARCANE_SUBTLETY = 74,
    ARCANE_CONCENTRATION = 75,
    ARCANE_FOCUS = 76,
    ARCANE_MIND = 77,
    MAGE_WAND_SPECIALIZATION = 78,
    IMPROVED_ARCANE_MISSILES = 80,
    IMPROVED_ARCANE_EXPLOSION = 81,
    MAGIC_ATTUNEMENT = 82,
    IMPROVED_MANA_SHIELD = 83,
    ARCANE_RESILIENCE = 85,
    PRESENCE_OF_MIND = 86,
    ARCANE_POWER = 87,
    IMPROVED_COUNTERSPELL = 88,
    DEEP_WOUNDS = 121,
    WARRIOR_SWORD_SPECIALIZATION = 123,
    IMPROVED_HEROIC_STRIKE = 124,
    WARRIOR_MACE_SPECIALIZATION = 125,
    IMPROVED_CHARGE = 126,
    IMPROVED_REND = 127,
    IMPROVED_THUNDER_CLAP = 128,
    IMPROVED_HAMSTRING = 129,
    WARRIOR_DEFLECTION = 130,
    IMPROVED_OVERPOWER = 131,
    AXE_SPECIALIZATION = 132,
    SWEEPING_STRIKES = 133,
    POLEARM_SPECIALIZATION = 134,
    MORTAL_STRIKE = 135,
    WARRIOR_TWO_HANDED_WEAPON_SPECIALIZATION = 136,
    ANGER_MANAGEMENT = 137,
    WARRIOR_ANTICIPATION = 138,
    WARRIOR_TOUGHNESS = 140,
    IRON_WILL = 141,
    IMPROVED_BLOODRAGE = 142,
    IMPROVED_TAUNT = 143,
    DEFIANCE = 144,
    IMPROVED_SHIELD_BLOCK = 145,
    IMPROVED_SUNDER_ARMOR = 146,
    IMPROVED_REVENGE = 147,
    SHIELD_SLAM = 148,
    IMPROVED_SHIELD_BASH = 149,
    IMPROVED_SHIELD_WALL = 150,
    IMPROVED_DISARM = 151,
    CONCUSSION_BLOW = 152,
    LAST_STAND = 153,
    IMPROVED_BATTLE_SHOUT = 154,
    ENRAGE = 155,
    WARRIOR_FLURRY = 156,
    CRUELTY = 157,
    BOOMING_VOICE = 158,
    UNBRIDLED_WRATH = 159,
    PIERCING_HOWL = 160,
    IMPROVED_DEMORALIZING_SHOUT = 161,
    DEATH_WISH = 165,
    IMPROVED_CLEAVE = 166,
    BLOODTHIRST = 167,
    IMPROVED_SLAM = 168,
    ROGUE_PRECISION = 181,
    DAGGER_SPECIALIZATION = 182,
    FIST_WEAPON_SPECIALIZATION = 183,
    ROGUE_MACE_SPECIALIZATION = 184,
    ROGUE_LIGHTNING_REFLEXES = 186,
    ROGUE_DEFLECTION = 187,
    IMPROVED_SINISTER_STRIKE = 201,
    IMPROVED_BACKSTAB = 202,
    IMPROVED_GOUGE = 203,
    ENDURANCE = 204,
    ADRENALINE_RUSH = 205,
    IMPROVED_KICK = 206,
    ROGUE_DUAL_WIELD_SPECIALIZATION = 221,
    IMPROVED_SPRINT = 222,
    BLADE_FLURRY = 223,
    MASTER_OF_DECEPTION = 241,
    ROGUE_SWORD_SPECIALIZATION = 242,
    CAMOUFLAGE = 244,
    INITIATIVE = 245,
    SETUP = 246,
    ELUSIVENESS = 247,
    OPPORTUNITY = 261,
    IMPROVED_SAP = 262,
    IMPROVED_AMBUSH = 263,
    DIRTY_DEEDS = 265,
    IMPROVED_POISONS = 268,
    LETHALITY = 269,
    MALICE = 270,
    REMORSELESS_ATTACKS = 272,
    RUTHLESSNESS = 273,
    MURDER = 274,
    IMPROVED_EVISCERATE = 276,
    IMPROVED_SLICE_AND_DICE = 277,
    IMPROVED_EXPOSE_ARMOR = 278,
    IMPROVED_KIDNEY_SHOT = 279,
    COLD_BLOOD = 280,
    RELENTLESS_STRIKES = 281,
    SEAL_FATE = 283,
    PREPARATION = 284,
    RIPOSTE = 301,
    GHOSTLY_STRIKE = 303,
    MARTYRDOM = 321,
    POWER_INFUSION = 322,
    MENTAL_AGILITY = 341,
    UNBREAKABLE_WILL = 342,
    IMPROVED_POWER_WORD_SHIELD = 343,
    IMPROVED_POWER_WORD_FORTITUDE = 344,
    PRIEST_WAND_SPECIALIZATION = 345,
    IMPROVED_INNER_FIRE = 346,
    MEDITATION = 347,
    INNER_FOCUS = 348,
    IMPROVED_MANA_BURN = 350,
    DIVINE_SPIRIT = 351,
    SILENT_RESOLVE = 352,
    INSPIRATION = 361,
    PREMEDITATION = 381,
    VIGOR = 382,
    HOLY_SPECIALIZATION = 401,
    SPIRITUAL_GUIDANCE = 402,
    SEARING_LIGHT = 403,
    SPIRITUAL_HEALING = 404,
    IMPROVED_RENEW = 406,
    IMPROVED_HEALING = 408,
    PRIEST_HEALING_FOCUS = 410,
    SPELL_WARDING = 411,
    IMPROVED_PRAYER_OF_HEALING = 413,
    ARCANE_INSTABILITY = 421,
    HOLY_NOVA = 442,
    SHADOW_WEAVING = 461,
    DARKNESS = 462,
    SHADOW_FOCUS = 463,
    BLACKOUT = 464,
    SPIRIT_TAP = 465,
    SHADOW_AFFINITY = 466,
    IMPROVED_MIND_BLAST = 481,
    IMPROVED_SHADOW_WORD_PAIN = 482,
    IMPROVED_FADE = 483,
    VAMPIRIC_EMBRACE = 484,
    MIND_FLAY = 501,
    SHADOWFORM = 521,
    SILENCE = 541,
    IMPROVED_PSYCHIC_SCREAM = 542,
    CALL_OF_FLAME = 561,
    CALL_OF_THUNDER = 562,
    CONCUSSION = 563,
    CONVECTION = 564,
    ELEMENTAL_FURY = 565,
    IMPROVED_FIRE_TOTEMS = 567,
    EARTHS_GRASP = 572,
    ELEMENTAL_MASTERY = 573,
    ELEMENTAL_FOCUS = 574,
    REVERBERATION = 575,
    ANCESTRAL_HEALING = 581,
    TOTEMIC_MASTERY = 582,
    NATURES_GUIDANCE = 583,
    IMPROVED_HEALING_WAVE = 586,
    SHAMAN_HEALING_FOCUS = 587,
    RESTORATIVE_TOTEMS = 588,
    IMPROVED_REINCARNATION = 589,
    MANA_TIDE_TOTEM = 590,
    SHAMAN_NATURES_SWIFTNESS = 591,
    PURIFICATION = 592,
    TIDAL_FOCUS = 593,
    TIDAL_MASTERY = 594,
    TOTEMIC_FOCUS = 595,
    SHAMAN_ANTICIPATION = 601,
    SHAMAN_FLURRY = 602,
    IMPROVED_GHOST_WOLF = 605,
    IMPROVED_LIGHTNING_SHIELD = 607,
    GUARDIAN_TOTEMS = 609,
    ENHANCING_TOTEMS = 610,
    ELEMENTAL_WEAPONS = 611,
    SHAMAN_SHIELD_SPECIALIZATION = 612,
    THUNDERING_STRIKES = 613,
    ANCESTRAL_KNOWLEDGE = 614,
    SHAMAN_TOUGHNESS = 615,
    PARRY = 616,
    TWO_HANDED_AXES_AND_MACES = 617,
    TACTICAL_MASTERY = 641,
    BLOOD_CRAZE = 661,
    IMPALE = 662,
    HEMORRHAGE = 681,
    VILE_POISONS = 682,
    WARRIOR_ONE_HANDED_WEAPON_SPECIALIZATION = 702,
    LIGHTNING_MASTERY = 721,
    ARCTIC_REACH = 741,
    NATURES_GRASP = 761,
    IMPROVED_WRATH = 762,
    IMPROVED_MOONFIRE = 763,
    NATURES_REACH = 764,
    NATURAL_SHAPESHIFTER = 781,
    IMPROVED_THORNS = 782,
    MOONGLOW = 783,
    IMPROVED_STARFIRE = 784,
    IMPROVED_ENTANGLING_ROOTS = 787,
    OMEN_OF_CLARITY = 788,
    NATURES_GRACE = 789,
    MOONFURY = 790,
    NATURAL_WEAPONS = 791,
    DRUID_VENGEANCE = 792,
    MOONKIN_FORM = 793,
    DRUID_THICK_HIDE = 794,
    FERAL_AGGRESSION = 795,
    DRUID_FEROCITY = 796,
    BRUTAL_IMPACT = 797,
    SHARPENED_CLAWS = 798,
    FERAL_INSTINCT = 799,
    BLOOD_FRENZY = 800,
    PRIMAL_FURY = 801,
    IMPROVED_SHRED = 802,
    PREDATORY_STRIKES = 803,
    FERAL_CHARGE = 804,
    SAVAGE_FURY = 805,
    FELINE_SWIFTNESS = 807,
    HEART_OF_THE_WILD = 808,
    LEADER_OF_THE_PACK = 809,
    IMPROVED_MARK_OF_THE_WILD = 821,
    FUROR = 822,
    NATURES_FOCUS = 823,
    IMPROVED_HEALING_TOUCH = 824,
    IMPROVED_REGROWTH = 825,
    IMPROVED_ENRAGE = 826,
    INSECT_SWARM = 827,
    GIFT_OF_NATURE = 828,
    REFLECTION = 829,
    IMPROVED_REJUVENATION = 830,
    DRUID_NATURES_SWIFTNESS = 831,
    SUBTLETY = 841,
    IMPROVED_TRANQUILITY = 842,
    TRANQUIL_SPIRIT = 843,
    SWIFTMEND = 844,
    SHADOW_REACH = 881,
    STORMSTRIKE = 901,
    IMPROVED_NATURES_GRASP = 921,
    CATACLYSM = 941,
    BANE = 943,
    IMPROVED_SHADOW_BOLT = 944,
    IMPROVED_IMMOLATE = 961,
    SHADOWBURN = 963,
    DESTRUCTIVE_REACH = 964,
    IMPROVED_SEARING_PAIN = 965,
    EMBERSTORM = 966,
    RUIN = 967,
    CONFLAGRATE = 968,
    DEVASTATION = 981,
    AFTERMATH = 982,
    IMPROVED_FIREBOLT = 983,
    IMPROVED_LASH_OF_PAIN = 984,
    INTENSITY = 985,
    PYROCLASM = 986,
    FEL_CONCENTRATION = 1001,
    NIGHTFALL = 1002,
    IMPROVED_CORRUPTION = 1003,
    IMPROVED_DRAIN_LIFE = 1004,
    SUPPRESSION = 1005,
    IMPROVED_CURSE_OF_WEAKNESS = 1006,
    IMPROVED_LIFE_TAP = 1007,
    GRIM_REACH = 1021,
    DARK_PACT = 1022,
    SIPHON_LIFE = 1041,
    SHADOW_MASTERY = 1042,
    AMPLIFY_CURSE = 1061,
    CURSE_OF_EXHAUSTION = 1081,
    IMPROVED_CURSE_OF_EXHAUSTION = 1082,
    IMPROVED_DRAIN_SOUL = 1101,
    IMPROVED_DRAIN_MANA = 1121,
    AGGRESSION = 1122,
    SERRATED_BLADES = 1123,
    INCINERATE = 1141,
    ARCANE_MEDITATION = 1142,
    FAERIE_FIRE_FERAL = 1162,
    DIVINE_FURY = 1181,
    MENTAL_STRENGTH = 1201,
    FORCE_OF_WILL = 1202,
    IMPROVED_HEALTHSTONE = 1221,
    IMPROVED_IMP = 1222,
    DEMONIC_EMBRACE = 1223,
    IMPROVED_HEALTH_FUNNEL = 1224,
    IMPROVED_VOIDWALKER = 1225,
    FEL_DOMINATION = 1226,
    MASTER_SUMMONER = 1227,
    FEL_STAMINA = 1241,
    FEL_INTELLECT = 1242,
    IMPROVED_SUCCUBUS = 1243,
    MASTER_DEMONOLOGIST = 1244,
    IMPROVED_FIRESTONE = 1261,
    UNHOLY_POWER = 1262,
    IMPROVED_SPELLSTONE = 1263,
    DEMONIC_SACRIFICE = 1281,
    SOUL_LINK = 1282,
    IMPROVED_ENSLAVE_DEMON = 1283,
    IMPROVED_CURSE_OF_AGONY = 1284,
    HUMANOID_SLAYING = 1301,
    HUNTER_LIGHTNING_REFLEXES = 1303,
    ENTRAPMENT = 1304,
    IMPROVED_WING_CLIP = 1305,
    CLEVER_TRAPS = 1306,
    DETERRENCE = 1308,
    IMPROVED_FEIGN_DEATH = 1309,
    SUREFOOTED = 1310,
    HUNTER_DEFLECTION = 1311,
    COUNTERATTACK = 1312,
    KILLER_INSTINCT = 1321,
    TRAP_MASTERY = 1322,
    WYVERN_STING = 1325,
    IMPROVED_CONCUSSIVE_SHOT = 1341,
    EFFICIENCY = 1342,
    IMPROVED_HUNTERS_MARK = 1343,
    LETHAL_SHOTS = 1344,
    AIMED_SHOT = 1345,
    IMPROVED_ARCANE_SHOT = 1346,
    BARRAGE = 1347,
    IMPROVED_SERPENT_STING = 1348,
    MORTAL_SHOTS = 1349,
    IMPROVED_SCORPID_STING = 1351,
    HAWK_EYE = 1352,
    SCATTER_SHOT = 1353,
    TRUESHOT_AURA = 1361,
    RANGED_WEAPON_SPECIALIZATION = 1362,
    IMPROVED_ASPECT_OF_THE_MONKEY = 1381,
    IMPROVED_ASPECT_OF_THE_HAWK = 1382,
    PATHFINDING = 1384,
    IMPROVED_MEND_PET = 1385,
    BESTIAL_WRATH = 1386,
    INTIMIDATION = 1387,
    SPIRIT_BOND = 1388,
    ENDURANCE_TRAINING = 1389,
    BESTIAL_DISCIPLINE = 1390,
    BESTIAL_SWIFTNESS = 1391,
    HUNTER_FEROCITY = 1393,
    HUNTER_THICK_HIDE = 1395,
    UNLEASHED_FURY = 1396,
    FRENZY = 1397,
    IMPROVED_BLESSING_OF_MIGHT = 1401,
    PALADIN_VENGEANCE = 1402,
    PALADIN_DEFLECTION = 1403,
    IMPROVED_RETRIBUTION_AURA = 1405,
    BENEDICTION = 1407,
    SANCTITY_AURA = 1409,
    PALADIN_TWO_HANDED_WEAPON_SPECIALIZATION = 1410,
    CONVICTION = 1411,
    REDOUBT = 1421,
    IMPROVED_DEVOTION_AURA = 1422,
    PALADIN_TOUGHNESS = 1423,
    PALADIN_SHIELD_SPECIALIZATION = 1424,
    GUARDIANS_FAVOR = 1425,
    RECKONING = 1426,
    PALADIN_ONE_HANDED_WEAPON_SPECIALIZATION = 1429,
    HOLY_SHIELD = 1430,
    BLESSING_OF_SANCTUARY = 1431,
    SPIRITUAL_FOCUS = 1432,
    DIVINE_FAVOR = 1433,
    CONSECRATION = 1435,
    REPENTANCE = 1441,
    BLESSING_OF_KINGS = 1442,
    IMPROVED_LAY_ON_HANDS = 1443,
    HEALING_LIGHT = 1444,
    IMPROVED_BLESSING_OF_WISDOM = 1446,
    DIVINE_INTELLECT = 1449,
    DIVINE_STRENGTH = 1450,
    ILLUMINATION = 1461,
    IMPROVED_SEAL_OF_RIGHTEOUSNESS = 1463,
    IMPROVED_SEAL_OF_THE_CRUSADER = 1464,
    LASTING_JUDGEMENT = 1465,
    SEAL_OF_COMMAND = 1481,
    IMPROVED_RIGHTEOUS_FURY = 1501,
    HOLY_SHOCK = 1502,
    IMPROVED_HAMMER_OF_JUSTICE = 1521,
    IMPROVED_BERSERKER_RAGE = 1541,
    IMPROVED_EXECUTE = 1542,
    IMPROVED_INTERCEPT = 1543,
    SPIRIT_OF_REDEMPTION = 1561,
    WARRIOR_DUAL_WIELD_SPECIALIZATION = 1581,
    WARRIOR_SHIELD_SPECIALIZATION = 1601,
    SAVAGE_STRIKES = 1621,
    SURVIVALIST = 1622,
    MONSTER_SLAYING = 1623,
    IMPROVED_EYES_OF_THE_BEAST = 1624,
    IMPROVED_REVIVE_PET = 1625,
    IMPROVED_CONCENTRATION_AURA = 1626,
    HOLY_POWER = 1627,
    UNYIELDING_FAITH = 1628,
    PALADIN_ANTICIPATION = 1629,
    PALADIN_PRECISION = 1630,
    IMPROVED_JUDGEMENT = 1631,
    EYE_FOR_AN_EYE = 1632,
    VINDICATION = 1633,
    PURSUIT_OF_JUSTICE = 1634,
    HOLY_REACH = 1635,
    BLESSED_RECOVERY = 1636,
    LIGHTWELL = 1637,
    IMPROVED_VAMPIRIC_EMBRACE = 1638,
    MASTER_OF_ELEMENTS = 1639,
    ELEMENTAL_WARDING = 1640,
    STORM_REACH = 1641,
    EYE_OF_THE_STORM = 1642,
    WEAPON_MASTERY = 1643,
    ELEMENTAL_DEVASTATION = 1645,
    HEALING_GRACE = 1646,
    IMPROVED_WEAPON_TOTEMS = 1647,
    HEALING_WAY = 1648,
    ELEMENTAL_PRECISION = 1649,
    MAGIC_ABSORPTION = 1650,
    SLEIGHT_OF_HAND = 1700,
    HEIGHTENED_SENSES = 1701,
    DEADLINESS = 1702,
    WEAPON_EXPERTISE = 1703,
};

enum class TextEmote : uint32_t {
    AGREE = 1,
    AMAZE = 2,
    ANGRY = 3,
    APOLOGIZE = 4,
    APPLAUD = 5,
    BASHFUL = 6,
    BECKON = 7,
    BEG = 8,
    BITE = 9,
    BLEED = 10,
    BLINK = 11,
    BLUSH = 12,
    BONK = 13,
    BORED = 14,
    BOUNCE = 15,
    BRB = 16,
    BOW = 17,
    BURP = 18,
    BYE = 19,
    CACKLE = 20,
    CHEER = 21,
    CHICKEN = 22,
    CHUCKLE = 23,
    CLAP = 24,
    CONFUSED = 25,
    CONGRATULATE = 26,
    COUGH = 27,
    COWER = 28,
    CRACK = 29,
    CRINGE = 30,
    CRY = 31,
    CURIOUS = 32,
    CURTSEY = 33,
    DANCE = 34,
    DRINK = 35,
    DROOL = 36,
    EAT = 37,
    EYE = 38,
    FART = 39,
    FIDGET = 40,
    FLEX = 41,
    FROWN = 42,
    GASP = 43,
    GAZE = 44,
    GIGGLE = 45,
    GLARE = 46,
    GLOAT = 47,
    GREET = 48,
    GRIN = 49,
    GROAN = 50,
    GROVEL = 51,
    GUFFAW = 52,
    HAIL = 53,
    HAPPY = 54,
    HELLO = 55,
    HUG = 56,
    HUNGRY = 57,
    KISS = 58,
    KNEEL = 59,
    LAUGH = 60,
    LAYDOWN = 61,
    MASSAGE = 62,
    MOAN = 63,
    MOON = 64,
    MOURN = 65,
    NO = 66,
    NOD = 67,
    NOSE_PICK = 68,
    PANIC = 69,
    PEER = 70,
    PLEAD = 71,
    POINT = 72,
    POKE = 73,
    PRAY = 74,
    ROAR = 75,
    ROFL = 76,
    RUDE = 77,
    SALUTE = 78,
    SCRATCH = 79,
    SEXY = 80,
    SHAKE = 81,
    SHOUT = 82,
    SHRUG = 83,
    SHY = 84,
    SIGH = 85,
    SIT = 86,
    SLEEP = 87,
    SNARL = 88,
    SPIT = 89,
    STARE = 90,
    SURPRISED = 91,
    SURRENDER = 92,
    TALK = 93,
    TALK_EX = 94,
    TALK_Q = 95,
    TAP = 96,
    THANK = 97,
    THREATEN = 98,
    TIRED = 99,
    VICTORY = 100,
    WAVE = 101,
    WELCOME = 102,
    WHINE = 103,
    WHISTLE = 104,
    WORK = 105,
    YAWN = 106,
    BOGGLE = 107,
    CALM = 108,
    COLD = 109,
    COMFORT = 110,
    CUDDLE = 111,
    DUCK = 112,
    INSULT = 113,
    INTRODUCE = 114,
    JK = 115,
    LICK = 116,
    LISTEN = 117,
    LOST = 118,
    MOCK = 119,
    PONDER = 120,
    POUNCE = 121,
    PRAISE = 122,
    PURR = 123,
    PUZZLE = 124,
    RAISE = 125,
    READY = 126,
    SHIMMY = 127,
    SHIVER = 128,
    SHOO = 129,
    SLAP = 130,
    SMIRK = 131,
    SNIFF = 132,
    SNUB = 133,
    SOOTHE = 134,
    STINK = 135,
    TAUNT = 136,
    TEASE = 137,
    THIRSTY = 138,
    VETO = 139,
    SNICKER = 140,
    STAND = 141,
    TICKLE = 142,
    VIOLIN = 143,
    SMILE = 163,
    RASP = 183,
    PITY = 203,
    GROWL = 204,
    BARK = 205,
    SCARED = 223,
    FLOP = 224,
    LOVE = 225,
    MOO = 226,
    COMMEND = 243,
    TRAIN = 264,
    HELPME = 303,
    INCOMING = 304,
    CHARGE = 305,
    FLEE = 306,
    ATTACK_MY_TARGET = 307,
    OOM = 323,
    FOLLOW = 324,
    WAIT = 325,
    HEAL_ME = 326,
    OPEN_FIRE = 327,
    FLIRT = 328,
    JOKE = 329,
    GOLF_CLAP = 343,
    WINK = 363,
    PAT = 364,
};

enum class TimerType : uint32_t {
    FATIGUE = 0,
    BREATH = 1,
    FEIGN_DEATH = 2,
    ENVIRONMENTAL = 3,
};

enum class TradeStatus : uint32_t {
    BUSY = 0,
    BEGIN_TRADE = 1,
    OPEN_WINDOW = 2,
    TRADE_CANCELED = 3,
    TRADE_ACCEPT = 4,
    BUSY_2 = 5,
    NO_TARGET = 6,
    BACK_TO_TRADE = 7,
    TRADE_COMPLETE = 8,
    TRADE_REJECTED = 9,
    TARGET_TO_FAR = 10,
    WRONG_FACTION = 11,
    CLOSE_WINDOW = 12,
    UNKNOWN_13 = 13,
    IGNORE_YOU = 14,
    YOU_STUNNED = 15,
    TARGET_STUNNED = 16,
    YOU_DEAD = 17,
    TARGET_DEAD = 18,
    YOU_LOGOUT = 19,
    TARGET_LOGOUT = 20,
    TRIAL_ACCOUNT = 21,
    ONLY_CONJURED = 22,
    NOT_ON_TAPLIST = 23,
};

enum class TrainerSpellState : uint8_t {
    GREEN = 0,
    RED = 1,
    GRAY = 2,
};

enum class TrainingFailureReason : uint32_t {
    UNAVAILABLE = 0,
    NOT_ENOUGH_MONEY = 1,
    NOT_ENOUGH_SKILL = 2,
};

enum class TransferAbortReason : uint8_t {
    NONE = 0,
    IS_FULL = 1,
    NOT_FOUND = 2,
    TOO_MANY_INSTANCES = 3,
    ZONE_IS_IN_COMBAT = 5,
};

enum class UnitStandState : uint8_t {
    STAND = 0,
    SIT = 1,
    SIT_CHAIR = 2,
    SLEEP = 3,
    SIT_LOW_CHAIR = 4,
    SIT_MEDIUM_CHAIR = 5,
    SIT_HIGH_CHAIR = 6,
    DEAD = 7,
    KNEEL = 8,
    CUSTOM = 9,
};

enum class UpdateType : uint8_t {
    VALUES = 0,
    MOVEMENT = 1,
    CREATE_OBJECT = 2,
    CREATE_OBJECT2 = 3,
    OUT_OF_RANGE_OBJECTS = 4,
    NEAR_OBJECTS = 5,
};

enum class UrlInfo : uint8_t {
    UNAVAILABLE = 0,
    AVAILABLE = 1,
};

enum class WeatherChangeType : uint8_t {
    SMOOTH = 0,
    INSTANT = 1,
};

enum class WeatherType : uint32_t {
    FINE = 0,
    RAIN = 1,
    SNOW = 2,
    STORM = 3,
};

enum class WorldResult : uint8_t {
    RESPONSE_SUCCESS = 0,
    RESPONSE_FAILURE = 1,
    RESPONSE_CANCELLED = 2,
    RESPONSE_DISCONNECTED = 3,
    RESPONSE_FAILED_TO_CONNECT = 4,
    RESPONSE_CONNECTED = 5,
    RESPONSE_VERSION_MISMATCH = 6,
    CSTATUS_CONNECTING = 7,
    CSTATUS_NEGOTIATING_SECURITY = 8,
    CSTATUS_NEGOTIATION_COMPLETE = 9,
    CSTATUS_NEGOTIATION_FAILED = 10,
    CSTATUS_AUTHENTICATING = 11,
    AUTH_OK = 12,
    AUTH_FAILED = 13,
    AUTH_REJECT = 14,
    AUTH_BAD_SERVER_PROOF = 15,
    AUTH_UNAVAILABLE = 16,
    AUTH_SYSTEM_ERROR = 17,
    AUTH_BILLING_ERROR = 18,
    AUTH_BILLING_EXPIRED = 19,
    AUTH_VERSION_MISMATCH = 20,
    AUTH_UNKNOWN_ACCOUNT = 21,
    AUTH_INCORRECT_PASSWORD = 22,
    AUTH_SESSION_EXPIRED = 23,
    AUTH_SERVER_SHUTTING_DOWN = 24,
    AUTH_ALREADY_LOGGING_IN = 25,
    AUTH_LOGIN_SERVER_NOT_FOUND = 26,
    AUTH_WAIT_QUEUE = 27,
    AUTH_BANNED = 28,
    AUTH_ALREADY_ONLINE = 29,
    AUTH_NO_TIME = 30,
    AUTH_DB_BUSY = 31,
    AUTH_SUSPENDED = 32,
    AUTH_PARENTAL_CONTROL = 33,
    REALM_LIST_IN_PROGRESS = 34,
    REALM_LIST_SUCCESS = 35,
    REALM_LIST_FAILED = 36,
    REALM_LIST_INVALID = 37,
    REALM_LIST_REALM_NOT_FOUND = 38,
    ACCOUNT_CREATE_IN_PROGRESS = 39,
    ACCOUNT_CREATE_SUCCESS = 40,
    ACCOUNT_CREATE_FAILED = 41,
    CHAR_LIST_RETRIEVING = 42,
    CHAR_LIST_RETRIEVED = 43,
    CHAR_LIST_FAILED = 44,
    CHAR_CREATE_IN_PROGRESS = 45,
    CHAR_CREATE_SUCCESS = 46,
    CHAR_CREATE_ERROR = 47,
    CHAR_CREATE_FAILED = 48,
    CHAR_CREATE_NAME_IN_USE = 49,
    CHAR_CREATE_DISABLED = 50,
    CHAR_CREATE_PVP_TEAMS_VIOLATION = 51,
    CHAR_CREATE_SERVER_LIMIT = 52,
    CHAR_CREATE_ACCOUNT_LIMIT = 53,
    CHAR_CREATE_SERVER_QUEUE = 54,
    CHAR_CREATE_ONLY_EXISTING = 55,
    CHAR_DELETE_IN_PROGRESS = 56,
    CHAR_DELETE_SUCCESS = 57,
    CHAR_DELETE_FAILED = 58,
    CHAR_DELETE_FAILED_LOCKED_FOR_TRANSFER = 59,
    CHAR_LOGIN_IN_PROGRESS = 60,
    CHAR_LOGIN_SUCCESS = 61,
    CHAR_LOGIN_NO_WORLD = 62,
    CHAR_LOGIN_DUPLICATE_CHARACTER = 63,
    CHAR_LOGIN_NO_INSTANCES = 64,
    CHAR_LOGIN_FAILED = 65,
    CHAR_LOGIN_DISABLED = 66,
    CHAR_LOGIN_NO_CHARACTER = 67,
    CHAR_LOGIN_LOCKED_FOR_TRANSFER = 68,
    CHAR_NAME_NO_NAME = 69,
    CHAR_NAME_TOO_SHORT = 70,
    CHAR_NAME_TOO_LONG = 71,
    CHAR_NAME_ONLY_LETTERS = 72,
    CHAR_NAME_MIXED_LANGUAGES = 73,
    CHAR_NAME_PROFANE = 74,
    CHAR_NAME_RESERVED = 75,
    CHAR_NAME_INVALID_APOSTROPHE = 76,
    CHAR_NAME_MULTIPLE_APOSTROPHES = 77,
    CHAR_NAME_THREE_CONSECUTIVE = 78,
    CHAR_NAME_INVALID_SPACE = 79,
    CHAR_NAME_SUCCESS = 80,
    CHAR_NAME_FAILURE = 81,
};

enum AllowedClass : uint32_t {
    ALLOWED_CLASS_ALL = 0,
    ALLOWED_CLASS_WARRIOR = 1,
    ALLOWED_CLASS_PALADIN = 2,
    ALLOWED_CLASS_HUNTER = 4,
    ALLOWED_CLASS_ROGUE = 8,
    ALLOWED_CLASS_PRIEST = 16,
    ALLOWED_CLASS_SHAMAN = 64,
    ALLOWED_CLASS_MAGE = 128,
    ALLOWED_CLASS_WARLOCK = 256,
    ALLOWED_CLASS_DRUID = 1024,
};

enum AllowedRace : uint32_t {
    ALLOWED_RACE_ALL = 0,
    ALLOWED_RACE_HUMAN = 1,
    ALLOWED_RACE_ORC = 2,
    ALLOWED_RACE_DWARF = 4,
    ALLOWED_RACE_NIGHT_ELF = 8,
    ALLOWED_RACE_UNDEAD = 16,
    ALLOWED_RACE_TAUREN = 32,
    ALLOWED_RACE_GNOME = 64,
    ALLOWED_RACE_TROLL = 128,
    ALLOWED_RACE_GOBLIN = 256,
};

enum AreaFlags : uint16_t {
    AREA_FLAGS_SNOW = 1,
    AREA_FLAGS_UNK = 2,
    AREA_FLAGS_DEVELOPMENT = 4,
    AREA_FLAGS_UNK2 = 8,
    AREA_FLAGS_UNK3 = 16,
    AREA_FLAGS_CITY_SLAVE = 32,
    AREA_FLAGS_CITY_ALLOW_DUELS = 64,
    AREA_FLAGS_UNK4 = 128,
    AREA_FLAGS_CITY = 256,
    AREA_FLAGS_TEST = 512,
};

enum Attributes : uint32_t {
    ATTRIBUTES_NONE = 0,
    ATTRIBUTES_PROC_FAILURE_BURNS_CHARGE = 1,
    ATTRIBUTES_USES_RANGED_SLOT = 2,
    ATTRIBUTES_ON_NEXT_SWING_NO_DAMAGE = 4,
    ATTRIBUTES_NEED_EXOTIC_AMMO = 8,
    ATTRIBUTES_IS_ABILITY = 16,
    ATTRIBUTES_IS_TRADESKILL = 32,
    ATTRIBUTES_PASSIVE = 64,
    ATTRIBUTES_DO_NOT_DISPLAY = 128,
    ATTRIBUTES_DO_NOT_LOG = 256,
    ATTRIBUTES_HELD_ITEM_ONLY = 512,
    ATTRIBUTES_ON_NEXT_SWING = 1024,
    ATTRIBUTES_WEARER_CASTS_PROC_TRIGGER = 2048,
    ATTRIBUTES_DAYTIME_ONLY = 4096,
    ATTRIBUTES_NIGHT_ONLY = 8192,
    ATTRIBUTES_ONLY_INDOORS = 16384,
    ATTRIBUTES_ONLY_OUTDOORS = 32768,
    ATTRIBUTES_NOT_SHAPESHIFT = 65536,
    ATTRIBUTES_ONLY_STEALTHED = 131072,
    ATTRIBUTES_DO_NOT_SHEATH = 262144,
    ATTRIBUTES_SCALES_WITH_CREATURE_LEVEL = 524288,
    ATTRIBUTES_CANCELS_AUTO_ATTACK_COMBAT = 1048576,
    ATTRIBUTES_NO_ACTIVE_DEFENSE = 2097152,
    ATTRIBUTES_TRACK_TARGET_IN_CAST_PLAYER_ONLY = 4194304,
    ATTRIBUTES_ALLOW_CAST_WHILE_DEAD = 8388608,
    ATTRIBUTES_ALLOW_WHILE_MOUNTED = 16777216,
    ATTRIBUTES_COOLDOWN_ON_EVENT = 33554432,
    ATTRIBUTES_AURA_IS_DEBUFF = 67108864,
    ATTRIBUTES_ALLOW_WHILE_SITTING = 134217728,
    ATTRIBUTES_NOT_IN_COMBAT_ONLY_PEACEFUL = 268435456,
    ATTRIBUTES_NO_IMMUNITIES = 536870912,
    ATTRIBUTES_HEARTBEAT_RESIST = 1073741824,
    ATTRIBUTES_NO_AURA_CANCEL = 2147483648,
};

enum AttributesEx1 : uint32_t {
    ATTRIBUTES_EX1_NONE = 0,
    ATTRIBUTES_EX1_DISMISS_PET_FIRST = 1,
    ATTRIBUTES_EX1_USE_ALL_MANA = 2,
    ATTRIBUTES_EX1_IS_CHANNELED = 4,
    ATTRIBUTES_EX1_NO_REDIRECTION = 8,
    ATTRIBUTES_EX1_NO_SKILL_INCREASE = 16,
    ATTRIBUTES_EX1_ALLOW_WHILE_STEALTHED = 32,
    ATTRIBUTES_EX1_IS_SELF_CHANNELED = 64,
    ATTRIBUTES_EX1_NO_REFLECTION = 128,
    ATTRIBUTES_EX1_ONLY_PEACEFUL_TARGETS = 256,
    ATTRIBUTES_EX1_INITIATES_COMBAT_ENABLES_AUTO_ATTACK = 512,
    ATTRIBUTES_EX1_NO_THREAT = 1024,
    ATTRIBUTES_EX1_AURA_UNIQUE = 2048,
    ATTRIBUTES_EX1_FAILURE_BREAKS_STEALTH = 4096,
    ATTRIBUTES_EX1_TOGGLE_FARSIGHT = 8192,
    ATTRIBUTES_EX1_TRACK_TARGET_IN_CHANNEL = 16384,
    ATTRIBUTES_EX1_IMMUNITY_PURGES_EFFECT = 32768,
    ATTRIBUTES_EX1_IMMUNITY_TO_HOSTILE_AND_FRIENDLY_EFFECTS = 65536,
    ATTRIBUTES_EX1_NO_AUTOCAST_AI = 131072,
    ATTRIBUTES_EX1_PREVENTS_ANIM = 262144,
    ATTRIBUTES_EX1_EXCLUDE_CASTER = 524288,
    ATTRIBUTES_EX1_FINISHING_MOVE_DAMAGE = 1048576,
    ATTRIBUTES_EX1_THREAT_ONLY_ON_MISS = 2097152,
    ATTRIBUTES_EX1_FINISHING_MOVE_DURATION = 4194304,
    ATTRIBUTES_EX1_UNK23 = 8388608,
    ATTRIBUTES_EX1_SPECIAL_SKILLUP = 16777216,
    ATTRIBUTES_EX1_AURA_STAYS_AFTER_COMBAT = 33554432,
    ATTRIBUTES_EX1_REQUIRE_ALL_TARGETS = 67108864,
    ATTRIBUTES_EX1_DISCOUNT_POWER_ON_MISS = 134217728,
    ATTRIBUTES_EX1_NO_AURA_ICON = 268435456,
    ATTRIBUTES_EX1_NAME_IN_CHANNEL_BAR = 536870912,
    ATTRIBUTES_EX1_COMBO_ON_BLOCK = 1073741824,
    ATTRIBUTES_EX1_CAST_WHEN_LEARNED = 2147483648,
};

enum AttributesEx2 : uint32_t {
    ATTRIBUTES_EX2_NONE = 0,
    ATTRIBUTES_EX2_ALLOW_DEAD_TARGET = 1,
    ATTRIBUTES_EX2_NO_SHAPESHIFT_UI = 2,
    ATTRIBUTES_EX2_IGNORE_LINE_OF_SIGHT = 4,
    ATTRIBUTES_EX2_ALLOW_LOW_LEVEL_BUFF = 8,
    ATTRIBUTES_EX2_USE_SHAPESHIFT_BAR = 16,
    ATTRIBUTES_EX2_AUTO_REPEAT = 32,
    ATTRIBUTES_EX2_CANNOT_CAST_ON_TAPPED = 64,
    ATTRIBUTES_EX2_DO_NOT_REPORT_SPELL_FAILURE = 128,
    ATTRIBUTES_EX2_INCLUDE_IN_ADVANCED_COMBAT_LOG = 256,
    ATTRIBUTES_EX2_ALWAYS_CAST_AS_UNIT = 512,
    ATTRIBUTES_EX2_SPECIAL_TAMING_FLAG = 1024,
    ATTRIBUTES_EX2_NO_TARGET_PER_SECOND_COSTS = 2048,
    ATTRIBUTES_EX2_CHAIN_FROM_CASTER = 4096,
    ATTRIBUTES_EX2_ENCHANT_OWN_ITEM_ONLY = 8192,
    ATTRIBUTES_EX2_ALLOW_WHILE_INVISIBLE = 16384,
    ATTRIBUTES_EX2_UNK15 = 32768,
    ATTRIBUTES_EX2_NO_ACTIVE_PETS = 65536,
    ATTRIBUTES_EX2_DO_NOT_RESET_COMBAT_TIMERS = 131072,
    ATTRIBUTES_EX2_REQ_DEAD_PET = 262144,
    ATTRIBUTES_EX2_ALLOW_WHILE_NOT_SHAPESHIFTED = 524288,
    ATTRIBUTES_EX2_INITIATE_COMBAT_POST_CAST = 1048576,
    ATTRIBUTES_EX2_FAIL_ON_ALL_TARGETS_IMMUNE = 2097152,
    ATTRIBUTES_EX2_NO_INITIAL_THREAT = 4194304,
    ATTRIBUTES_EX2_PROC_COOLDOWN_ON_FAILURE = 8388608,
    ATTRIBUTES_EX2_ITEM_CAST_WITH_OWNER_SKILL = 16777216,
    ATTRIBUTES_EX2_DONT_BLOCK_MANA_REGEN = 33554432,
    ATTRIBUTES_EX2_NO_SCHOOL_IMMUNITIES = 67108864,
    ATTRIBUTES_EX2_IGNORE_WEAPONSKILL = 134217728,
    ATTRIBUTES_EX2_NOT_AN_ACTION = 268435456,
    ATTRIBUTES_EX2_CANT_CRIT = 536870912,
    ATTRIBUTES_EX2_ACTIVE_THREAT = 1073741824,
    ATTRIBUTES_EX2_RETAIN_ITEM_CAST = 2147483648,
};

enum AttributesEx3 : uint32_t {
    ATTRIBUTES_EX3_NONE = 0,
    ATTRIBUTES_EX3_PVP_ENABLING = 1,
    ATTRIBUTES_EX3_NO_PROC_EQUIP_REQUIREMENT = 2,
    ATTRIBUTES_EX3_NO_CASTING_BAR_TEXT = 4,
    ATTRIBUTES_EX3_COMPLETELY_BLOCKED = 8,
    ATTRIBUTES_EX3_NO_RES_TIMER = 16,
    ATTRIBUTES_EX3_NO_DURABILITY_LOSS = 32,
    ATTRIBUTES_EX3_NO_AVOIDANCE = 64,
    ATTRIBUTES_EX3_DOT_STACKING_RULE = 128,
    ATTRIBUTES_EX3_ONLY_ON_PLAYER = 256,
    ATTRIBUTES_EX3_NOT_A_PROC = 512,
    ATTRIBUTES_EX3_REQUIRES_MAIN_HAND_WEAPON = 1024,
    ATTRIBUTES_EX3_ONLY_BATTLEGROUNDS = 2048,
    ATTRIBUTES_EX3_ONLY_ON_GHOSTS = 4096,
    ATTRIBUTES_EX3_HIDE_CHANNEL_BAR = 8192,
    ATTRIBUTES_EX3_HIDE_IN_RAID_FILTER = 16384,
    ATTRIBUTES_EX3_NORMAL_RANGED_ATTACK = 32768,
    ATTRIBUTES_EX3_SUPPRESS_CASTER_PROCS = 65536,
    ATTRIBUTES_EX3_SUPPRESS_TARGET_PROCS = 131072,
    ATTRIBUTES_EX3_ALWAYS_HIT = 262144,
    ATTRIBUTES_EX3_INSTANT_TARGET_PROCS = 524288,
    ATTRIBUTES_EX3_ALLOW_AURA_WHILE_DEAD = 1048576,
    ATTRIBUTES_EX3_ONLY_PROC_OUTDOORS = 2097152,
    ATTRIBUTES_EX3_CASTING_CANCELS_AUTOREPEAT = 4194304,
    ATTRIBUTES_EX3_NO_DAMAGE_HISTORY = 8388608,
    ATTRIBUTES_EX3_REQUIRES_OFFHAND_WEAPON = 16777216,
    ATTRIBUTES_EX3_TREAT_AS_PERIODIC = 33554432,
    ATTRIBUTES_EX3_CAN_PROC_FROM_PROCS = 67108864,
    ATTRIBUTES_EX3_ONLY_PROC_ON_CASTER = 134217728,
    ATTRIBUTES_EX3_IGNORE_CASTER_AND_TARGET_RESTRICTIONS = 268435456,
    ATTRIBUTES_EX3_IGNORE_CASTER_MODIFIERS = 536870912,
    ATTRIBUTES_EX3_DO_NOT_DISPLAY_RANGE = 1073741824,
    ATTRIBUTES_EX3_NOT_ON_AOE_IMMUNE = 2147483648,
};

enum AttributesEx4 : uint32_t {
    ATTRIBUTES_EX4_NONE = 0,
    ATTRIBUTES_EX4_NO_CAST_LOG = 1,
    ATTRIBUTES_EX4_CLASS_TRIGGER_ONLY_ON_TARGET = 2,
    ATTRIBUTES_EX4_AURA_EXPIRES_OFFLINE = 4,
    ATTRIBUTES_EX4_NO_HELPFUL_THREAT = 8,
    ATTRIBUTES_EX4_NO_HARMFUL_THREAT = 16,
    ATTRIBUTES_EX4_ALLOW_CLIENT_TARGETING = 32,
    ATTRIBUTES_EX4_CANNOT_BE_STOLEN = 64,
    ATTRIBUTES_EX4_ALLOW_CAST_WHILE_CASTING = 128,
    ATTRIBUTES_EX4_IGNORE_DAMAGE_TAKEN_MODIFIERS = 256,
    ATTRIBUTES_EX4_COMBAT_FEEDBACK_WHEN_USABLE = 512,
    ATTRIBUTES_EX4_WEAPON_SPEED_COST_SCALING = 1024,
    ATTRIBUTES_EX4_NO_PARTIAL_IMMUNITY = 2048,
};

enum CastFlags : uint16_t {
    CAST_FLAGS_NONE = 0,
    CAST_FLAGS_HIDDEN_COMBATLOG = 1,
    CAST_FLAGS_UNKNOWN2 = 2,
    CAST_FLAGS_UNKNOWN3 = 4,
    CAST_FLAGS_UNKNOWN4 = 8,
    CAST_FLAGS_UNKNOWN5 = 16,
    CAST_FLAGS_AMMO = 32,
    CAST_FLAGS_UNKNOWN7 = 64,
    CAST_FLAGS_UNKNOWN8 = 128,
    CAST_FLAGS_UNKNOWN9 = 256,
};

enum ChannelFlags : uint8_t {
    CHANNEL_FLAGS_NONE = 0,
    CHANNEL_FLAGS_CUSTOM = 1,
    CHANNEL_FLAGS_TRADE = 4,
    CHANNEL_FLAGS_NOT_LFG = 8,
    CHANNEL_FLAGS_GENERAL = 16,
    CHANNEL_FLAGS_CITY = 32,
    CHANNEL_FLAGS_LFG = 64,
    CHANNEL_FLAGS_VOICE = 128,
};

enum ChannelMemberFlags : uint8_t {
    CHANNEL_MEMBER_FLAGS_NONE = 0,
    CHANNEL_MEMBER_FLAGS_OWNER = 1,
    CHANNEL_MEMBER_FLAGS_MODERATOR = 4,
    CHANNEL_MEMBER_FLAGS_VOICED = 8,
    CHANNEL_MEMBER_FLAGS_MUTED = 16,
    CHANNEL_MEMBER_FLAGS_CUSTOM = 32,
    CHANNEL_MEMBER_FLAGS_MICROPHONE_MUTE = 64,
};

enum CharacterFlags : uint32_t {
    CHARACTER_FLAGS_NONE = 0,
    CHARACTER_FLAGS_LOCKED_FOR_TRANSFER = 4,
    CHARACTER_FLAGS_HIDE_HELM = 1024,
    CHARACTER_FLAGS_HIDE_CLOAK = 2048,
    CHARACTER_FLAGS_GHOST = 8192,
    CHARACTER_FLAGS_RENAME = 16384,
};

enum CharacterRaceFlags : uint8_t {
    CHARACTER_RACE_FLAGS_NONE = 0,
    CHARACTER_RACE_FLAGS_NOT_PLAYABLE = 1,
    CHARACTER_RACE_FLAGS_BARE_FEET = 2,
    CHARACTER_RACE_FLAGS_CAN_CURRENT_FORM_MOUNT = 4,
    CHARACTER_RACE_FLAGS_UNKNOWN2 = 8,
};

enum DefaultChannelFlags : uint32_t {
    DEFAULT_CHANNEL_FLAGS_NONE = 0,
    DEFAULT_CHANNEL_FLAGS_INITIAL = 1,
    DEFAULT_CHANNEL_FLAGS_ZONE_DEPENDENCY = 2,
    DEFAULT_CHANNEL_FLAGS_GLOBAL = 4,
    DEFAULT_CHANNEL_FLAGS_TRADE = 8,
    DEFAULT_CHANNEL_FLAGS_CITY_ONLY = 16,
    DEFAULT_CHANNEL_FLAGS_CITY_ONLY_2 = 32,
    DEFAULT_CHANNEL_FLAGS_DEFENCE = 65536,
    DEFAULT_CHANNEL_FLAGS_UNSELECTED = 262144,
};

enum EmoteFlags : uint8_t {
    EMOTE_FLAGS_TALK = 8,
    EMOTE_FLAGS_QUESTION = 16,
    EMOTE_FLAGS_EXCLAMATION = 32,
    EMOTE_FLAGS_SHOUT = 64,
    EMOTE_FLAGS_LAUGH = 128,
};

enum FactionFlag : uint8_t {
    FACTION_FLAG_VISIBLE = 1,
    FACTION_FLAG_AT_WAR = 2,
    FACTION_FLAG_HIDDEN = 4,
    FACTION_FLAG_INVISIBLE_FORCED = 8,
    FACTION_FLAG_PEACE_FORCED = 16,
    FACTION_FLAG_INACTIVE = 32,
    FACTION_FLAG_RIVAL = 64,
};

enum GroupMemberOnlineStatus : uint8_t {
    GROUP_MEMBER_ONLINE_STATUS_OFFLINE = 0,
    GROUP_MEMBER_ONLINE_STATUS_ONLINE = 1,
    GROUP_MEMBER_ONLINE_STATUS_PVP = 2,
    GROUP_MEMBER_ONLINE_STATUS_DEAD = 4,
    GROUP_MEMBER_ONLINE_STATUS_GHOST = 8,
    GROUP_MEMBER_ONLINE_STATUS_PVP_FFA = 16,
    GROUP_MEMBER_ONLINE_STATUS_ZONE_OUT = 32,
    GROUP_MEMBER_ONLINE_STATUS_AFK = 64,
    GROUP_MEMBER_ONLINE_STATUS_DND = 128,
};

enum GroupUpdateFlags : uint32_t {
    GROUP_UPDATE_FLAGS_NONE = 0,
    GROUP_UPDATE_FLAGS_STATUS = 1,
    GROUP_UPDATE_FLAGS_CUR_HP = 2,
    GROUP_UPDATE_FLAGS_MAX_HP = 4,
    GROUP_UPDATE_FLAGS_POWER_TYPE = 8,
    GROUP_UPDATE_FLAGS_CUR_POWER = 16,
    GROUP_UPDATE_FLAGS_MAX_POWER = 32,
    GROUP_UPDATE_FLAGS_LEVEL = 64,
    GROUP_UPDATE_FLAGS_ZONE = 128,
    GROUP_UPDATE_FLAGS_POSITION = 256,
    GROUP_UPDATE_FLAGS_AURAS = 512,
    GROUP_UPDATE_FLAGS_AURAS_2 = 1024,
    GROUP_UPDATE_FLAGS_PET_GUID = 2048,
    GROUP_UPDATE_FLAGS_PET_NAME = 4096,
    GROUP_UPDATE_FLAGS_PET_MODEL_ID = 8192,
    GROUP_UPDATE_FLAGS_PET_CUR_HP = 16384,
    GROUP_UPDATE_FLAGS_PET_MAX_HP = 32768,
    GROUP_UPDATE_FLAGS_PET_POWER_TYPE = 65536,
    GROUP_UPDATE_FLAGS_PET_CUR_POWER = 131072,
    GROUP_UPDATE_FLAGS_PET_MAX_POWER = 262144,
    GROUP_UPDATE_FLAGS_PET_AURAS = 524288,
    GROUP_UPDATE_FLAGS_PET_AURAS_2 = 1048576,
    GROUP_UPDATE_FLAGS_MODE_OFFLINE = 268435456,
};

enum ItemFlag : uint32_t {
    ITEM_FLAG_NONE = 0,
    ITEM_FLAG_NO_PICKUP = 1,
    ITEM_FLAG_CONJURED = 2,
    ITEM_FLAG_LOOTABLE = 4,
    ITEM_FLAG_DEPRECATED = 16,
    ITEM_FLAG_INDESTRUCTIBLE = 32,
    ITEM_FLAG_PLAYER_CAST = 64,
    ITEM_FLAG_NO_EQUIP_COOLDOWN = 128,
    ITEM_FLAG_INT_BONUS_INSTEAD = 256,
    ITEM_FLAG_WRAPPER = 512,
    ITEM_FLAG_IGNORE_BAG_SPACE = 1024,
    ITEM_FLAG_PARTY_LOOT = 2048,
    ITEM_FLAG_CHARTER = 8192,
    ITEM_FLAG_HAS_TEXT = 16384,
    ITEM_FLAG_NO_DISENCHANT = 32768,
    ITEM_FLAG_REAL_DURATION = 65536,
    ITEM_FLAG_NO_CREATOR = 131072,
};

enum MovementFlags : uint32_t {
    MOVEMENT_FLAGS_NONE = 0,
    MOVEMENT_FLAGS_FORWARD = 1,
    MOVEMENT_FLAGS_BACKWARD = 2,
    MOVEMENT_FLAGS_STRAFE_LEFT = 4,
    MOVEMENT_FLAGS_STRAFE_RIGHT = 8,
    MOVEMENT_FLAGS_TURN_LEFT = 16,
    MOVEMENT_FLAGS_TURN_RIGHT = 32,
    MOVEMENT_FLAGS_PITCH_UP = 64,
    MOVEMENT_FLAGS_PITCH_DOWN = 128,
    MOVEMENT_FLAGS_WALK_MODE = 256,
    MOVEMENT_FLAGS_ON_TRANSPORT = 512,
    MOVEMENT_FLAGS_LEVITATING = 1024,
    MOVEMENT_FLAGS_FIXED_Z = 2048,
    MOVEMENT_FLAGS_ROOT = 4096,
    MOVEMENT_FLAGS_JUMPING = 8192,
    MOVEMENT_FLAGS_FALLINGFAR = 16384,
    MOVEMENT_FLAGS_SWIMMING = 2097152,
    MOVEMENT_FLAGS_SPLINE_ENABLED = 4194304,
    MOVEMENT_FLAGS_CAN_FLY = 8388608,
    MOVEMENT_FLAGS_FLYING = 16777216,
    MOVEMENT_FLAGS_ONTRANSPORT = 33554432,
    MOVEMENT_FLAGS_SPLINE_ELEVATION = 67108864,
    MOVEMENT_FLAGS_WATERWALKING = 268435456,
    MOVEMENT_FLAGS_SAFE_FALL = 536870912,
    MOVEMENT_FLAGS_HOVER = 1073741824,
};

enum PvpFlags : uint16_t {
    PVP_FLAGS_PVP_FLAGGED = 2048,
    PVP_FLAGS_ATTACK_PVPING_PLAYERS = 4096,
};

enum ReputationFlags : uint8_t {
    REPUTATION_FLAGS_VISIBLE_TO_CLIENT = 1,
    REPUTATION_FLAGS_ENABLE_AT_WAR = 2,
    REPUTATION_FLAGS_HIDE_IN_CLIENT = 4,
    REPUTATION_FLAGS_FORCE_HIDE_IN_CLIENT = 8,
    REPUTATION_FLAGS_FORCE_AT_PEACE = 16,
    REPUTATION_FLAGS_FACTION_INACTIVE = 32,
};

enum SpellCastTargetFlags : uint16_t {
    SPELL_CAST_TARGET_FLAGS_SELF = 0,
    SPELL_CAST_TARGET_FLAGS_UNUSED1 = 1,
    SPELL_CAST_TARGET_FLAGS_UNIT = 2,
    SPELL_CAST_TARGET_FLAGS_UNUSED2 = 4,
    SPELL_CAST_TARGET_FLAGS_UNUSED3 = 8,
    SPELL_CAST_TARGET_FLAGS_ITEM = 16,
    SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION = 32,
    SPELL_CAST_TARGET_FLAGS_DEST_LOCATION = 64,
    SPELL_CAST_TARGET_FLAGS_OBJECT_UNK = 128,
    SPELL_CAST_TARGET_FLAGS_UNIT_UNK = 256,
    SPELL_CAST_TARGET_FLAGS_PVP_CORPSE = 512,
    SPELL_CAST_TARGET_FLAGS_UNIT_CORPSE = 1024,
    SPELL_CAST_TARGET_FLAGS_GAMEOBJECT = 2048,
    SPELL_CAST_TARGET_FLAGS_TRADE_ITEM = 4096,
    SPELL_CAST_TARGET_FLAGS_STRING = 8192,
    SPELL_CAST_TARGET_FLAGS_UNK1 = 16384,
    SPELL_CAST_TARGET_FLAGS_CORPSE = 32768,
};

enum SplineFlag : uint32_t {
    SPLINE_FLAG_NONE = 0,
    SPLINE_FLAG_DONE = 1,
    SPLINE_FLAG_FALLING = 2,
    SPLINE_FLAG_UNKNOWN3 = 4,
    SPLINE_FLAG_UNKNOWN4 = 8,
    SPLINE_FLAG_UNKNOWN5 = 16,
    SPLINE_FLAG_UNKNOWN6 = 32,
    SPLINE_FLAG_UNKNOWN7 = 64,
    SPLINE_FLAG_UNKNOWN8 = 128,
    SPLINE_FLAG_RUN_MODE = 256,
    SPLINE_FLAG_FLYING = 512,
    SPLINE_FLAG_NO_SPLINE = 1024,
    SPLINE_FLAG_UNKNOWN12 = 2048,
    SPLINE_FLAG_UNKNOWN13 = 4096,
    SPLINE_FLAG_UNKNOWN14 = 8192,
    SPLINE_FLAG_UNKNOWN15 = 16384,
    SPLINE_FLAG_UNKNOWN16 = 32768,
    SPLINE_FLAG_FINAL_POINT = 65536,
    SPLINE_FLAG_FINAL_TARGET = 131072,
    SPLINE_FLAG_FINAL_ANGLE = 262144,
    SPLINE_FLAG_UNKNOWN19 = 524288,
    SPLINE_FLAG_CYCLIC = 1048576,
    SPLINE_FLAG_ENTER_CYCLE = 2097152,
    SPLINE_FLAG_FROZEN = 4194304,
    SPLINE_FLAG_UNKNOWN23 = 8388608,
    SPLINE_FLAG_UNKNOWN24 = 16777216,
    SPLINE_FLAG_UNKNOWN25 = 33554432,
    SPLINE_FLAG_UNKNOWN26 = 67108864,
    SPLINE_FLAG_UNKNOWN27 = 134217728,
    SPLINE_FLAG_UNKNOWN28 = 268435456,
    SPLINE_FLAG_UNKNOWN29 = 536870912,
    SPLINE_FLAG_UNKNOWN30 = 1073741824,
    SPLINE_FLAG_UNKNOWN31 = 2147483648,
};

enum UpdateFlag : uint8_t {
    UPDATE_FLAG_NONE = 0,
    UPDATE_FLAG_SELF = 1,
    UPDATE_FLAG_TRANSPORT = 2,
    UPDATE_FLAG_MELEE_ATTACKING = 4,
    UPDATE_FLAG_HIGH_GUID = 8,
    UPDATE_FLAG_ALL = 16,
    UPDATE_FLAG_LIVING = 32,
    UPDATE_FLAG_HAS_POSITION = 64,
};

enum WeaponFlags : uint8_t {
    WEAPON_FLAGS_WEAPON_NOT_AFFECTED_BY_ANIMATION = 0,
    WEAPON_FLAGS_SHEATHE_WEAPONS_AUTOMATICALLY = 4,
    WEAPON_FLAGS_SHEATHE_WEAPONS_AUTOMATICALLY_2 = 16,
    WEAPON_FLAGS_UNSHEATHE_WEAPONS = 32,
};

class UpdateMask {
public:
    WOW_WORLD_MESSAGES_CPP_EXPORT void object_guid(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t object_guid() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void object_type(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t object_type() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void object_entry(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t object_entry() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void object_scale_x(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float object_scale_x() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_owner(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t item_owner() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_contained(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t item_contained() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_creator(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t item_creator() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_giftcreator(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t item_giftcreator() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_stack_count(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_stack_count() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_duration(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_duration() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_spell_charges(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_spell_charges() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_flags(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_flags() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_enchantment(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_enchantment() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_property_seed(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_property_seed() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_random_properties_id(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_random_properties_id() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_item_text_id(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_item_text_id() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_durability(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_durability() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void item_maxdurability(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t item_maxdurability() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void container_num_slots(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t container_num_slots() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void container_slot_1(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t container_slot_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_charm(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_charm() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_summon(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_summon() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_charmedby(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_charmedby() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_summonedby(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_summonedby() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_createdby(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_createdby() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_target(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_target() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_persuaded(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_persuaded() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_channel_object(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t unit_channel_object() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_health(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_health() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power3(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power3() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power4(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power4() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power5(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power5() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxhealth(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxhealth() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower3(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower3() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower4(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower4() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxpower5(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_maxpower5() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_level(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_level() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_factiontemplate(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_factiontemplate() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_bytes_0(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> unit_bytes_0() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_virtual_item_slot_display(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_virtual_item_slot_display() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_virtual_item_info(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> unit_virtual_item_info() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_flags(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_flags() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_aura(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_aura() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_auraflags(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> unit_auraflags() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_auralevels(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> unit_auralevels() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_auraapplications(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> unit_auraapplications() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_aurastate(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_aurastate() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_baseattacktime(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_baseattacktime() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_rangedattacktime(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_rangedattacktime() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_boundingradius(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_boundingradius() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_combatreach(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_combatreach() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_displayid(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_displayid() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_nativedisplayid(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_nativedisplayid() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_mountdisplayid(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_mountdisplayid() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_mindamage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_mindamage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxdamage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_maxdamage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_minoffhanddamage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_minoffhanddamage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxoffhanddamage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_maxoffhanddamage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_bytes_1(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> unit_bytes_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_petnumber(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_petnumber() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_pet_name_timestamp(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_pet_name_timestamp() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_petexperience(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_petexperience() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_petnextlevelexp(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_petnextlevelexp() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_dynamic_flags(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_dynamic_flags() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_channel_spell(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_channel_spell() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_mod_cast_speed(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_mod_cast_speed() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_created_by_spell(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_created_by_spell() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_npc_flags(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_npc_flags() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_npc_emotestate(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_npc_emotestate() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_training_points(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> unit_training_points() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_strength(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_strength() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_agility(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_agility() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_stamina(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_stamina() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_intellect(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_intellect() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_spirit(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_spirit() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_normal_resistance(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_normal_resistance() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_holy_resistance(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_holy_resistance() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_fire_resistance(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_fire_resistance() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_nature_resistance(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_nature_resistance() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_frost_resistance(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_frost_resistance() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_shadow_resistance(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_shadow_resistance() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_arcane_resistance(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_arcane_resistance() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_base_mana(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_base_mana() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_base_health(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_base_health() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_bytes_2(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> unit_bytes_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_attack_power(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_attack_power() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_attack_power_mods(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> unit_attack_power_mods() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_attack_power_multiplier(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_attack_power_multiplier() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_ranged_attack_power(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_ranged_attack_power() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_ranged_attack_power_mods(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> unit_ranged_attack_power_mods() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_ranged_attack_power_multiplier(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_ranged_attack_power_multiplier() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_minrangeddamage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_minrangeddamage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_maxrangeddamage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_maxrangeddamage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power_cost_modifier(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t unit_power_cost_modifier() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void unit_power_cost_multiplier(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float unit_power_cost_multiplier() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_duel_arbiter(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_duel_arbiter() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_flags(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_flags() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_guildid(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_guildid() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_guildrank(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_guildrank() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_features(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_features() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_bytes_2(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_bytes_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_bytes_3(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_bytes_3() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_duel_team(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_duel_team() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_guild_timestamp(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_guild_timestamp() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_1_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_1_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_1_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_1_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_2_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_2_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_2_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_2_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_3_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_3_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_3_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_3_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_4_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_4_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_4_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_4_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_5_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_5_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_5_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_5_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_6_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_6_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_6_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_6_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_7_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_7_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_7_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_7_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_8_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_8_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_8_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_8_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_9_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_9_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_9_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_9_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_10_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_10_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_10_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_10_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_11_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_11_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_11_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_11_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_12_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_12_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_12_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_12_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_13_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_13_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_13_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_13_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_14_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_14_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_14_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_14_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_15_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_15_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_15_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_15_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_16_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_16_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_16_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_16_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_17_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_17_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_17_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_17_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_18_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_18_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_18_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_18_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_19_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_19_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_19_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_19_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_20_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_20_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_quest_log_20_2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_quest_log_20_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_visible_item_creator(uint32_t index, uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_visible_item_creator(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_visible_item_item(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_visible_item_item(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_visible_item_enchants(uint32_t index, uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_visible_item_enchants(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_visible_item_random_property_id(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_visible_item_random_property_id(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_visible_item_item_suffix_factor(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_visible_item_item_suffix_factor(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_inv(ItemSlot def, uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_field_inv(ItemSlot def) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_farsight(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_farsight() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_combo_target(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t player_field_combo_target() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_xp(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_xp() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_next_level_xp(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_next_level_xp() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_skill(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_skill(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_skill_step(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_skill_step(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_minimum(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_minimum(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_maximum(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_maximum(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_permanent_bonus(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_permanent_bonus(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_skill_info_temporary_bonus(uint32_t index, uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_skill_info_temporary_bonus(uint32_t index) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_character_points1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_character_points1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_character_points2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_character_points2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_track_creatures(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_track_creatures() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_track_resources(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_track_resources() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_block_percentage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_block_percentage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_dodge_percentage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_dodge_percentage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_parry_percentage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_parry_percentage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_crit_percentage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_crit_percentage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_ranged_crit_percentage(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float player_ranged_crit_percentage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_explored_zones_1(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_explored_zones_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_rest_state_experience(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_rest_state_experience() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_coinage(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_coinage() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_posstat0(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_posstat0() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_posstat1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_posstat1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_posstat2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_posstat2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_posstat3(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_posstat3() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_posstat4(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_posstat4() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_negstat0(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_negstat0() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_negstat1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_negstat1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_negstat2(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_negstat2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_negstat3(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_negstat3() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_negstat4(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_negstat4() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_resistancebuffmodspositive(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_resistancebuffmodspositive() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_resistancebuffmodsnegative(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_resistancebuffmodsnegative() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_mod_damage_done_pos(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_mod_damage_done_pos() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_mod_damage_done_neg(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_mod_damage_done_neg() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_mod_damage_done_pct(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_mod_damage_done_pct() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_bytes(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_field_bytes() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_ammo_id(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_ammo_id() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_self_res_spell(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_self_res_spell() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_pvp_medals(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_pvp_medals() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_buyback_price_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_buyback_price_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_buyback_timestamp_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_buyback_timestamp_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_session_kills(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_field_session_kills() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_yesterday_kills(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_field_yesterday_kills() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_last_week_kills(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_field_last_week_kills() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_this_week_kills(std::pair<uint16_t, uint16_t> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::pair<uint16_t, uint16_t> player_field_this_week_kills() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_this_week_contribution(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_this_week_contribution() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_lifetime_honorbale_kills(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_lifetime_honorbale_kills() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_lifetime_dishonorbale_kills(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_lifetime_dishonorbale_kills() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_yesterday_contribution(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_yesterday_contribution() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_last_week_contribution(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_last_week_contribution() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_last_week_rank(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_last_week_rank() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_bytes2(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> player_field_bytes2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_watched_faction_index(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_watched_faction_index() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void player_field_combat_rating_1(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t player_field_combat_rating_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_created_by(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t game_object_created_by() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_displayid(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_displayid() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_flags(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_flags() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_rotation(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float game_object_rotation() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_state(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_state() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_pos_x(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float game_object_pos_x() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_pos_y(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float game_object_pos_y() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_pos_z(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float game_object_pos_z() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_facing(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float game_object_facing() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_dyn_flags(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_dyn_flags() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_faction(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_faction() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_type_id(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_type_id() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_level(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_level() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_artkit(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_artkit() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void game_object_animprogress(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t game_object_animprogress() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_caster(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t dynamic_object_caster() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_bytes(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> dynamic_object_bytes() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_spellid(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t dynamic_object_spellid() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_radius(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float dynamic_object_radius() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_pos_x(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float dynamic_object_pos_x() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_pos_y(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float dynamic_object_pos_y() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_pos_z(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float dynamic_object_pos_z() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void dynamic_object_facing(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float dynamic_object_facing() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_owner(uint64_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint64_t corpse_owner() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_facing(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float corpse_facing() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_pos_x(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float corpse_pos_x() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_pos_y(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float corpse_pos_y() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_pos_z(float value);
    WOW_WORLD_MESSAGES_CPP_EXPORT float corpse_pos_z() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_display_id(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t corpse_display_id() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_item(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t corpse_item() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_bytes_1(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> corpse_bytes_1() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_bytes_2(std::array<uint8_t, 4> value);
    WOW_WORLD_MESSAGES_CPP_EXPORT std::array<uint8_t, 4> corpse_bytes_2() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_guild(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t corpse_guild() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_flags(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t corpse_flags() const;
    WOW_WORLD_MESSAGES_CPP_EXPORT void corpse_dynamic_flags(uint32_t value);
    WOW_WORLD_MESSAGES_CPP_EXPORT uint32_t corpse_dynamic_flags() const;
    uint32_t headers[40];
    uint32_t values[1262];
};

struct Addon {
    AddonType addon_type;
    InfoBlock info_block;
    KeyVersion key_version;
    std::array<uint8_t, 256> public_key;
    uint32_t update_available_flag;
    UrlInfo url_info;
    std::string url;
};

struct AddonInfo {
    std::string addon_name;
    uint8_t addon_has_signature;
    uint32_t addon_crc;
    uint32_t addon_extra_crc;
};

struct AuctionListItem {
    uint32_t id;
    uint32_t item;
    uint32_t item_enchantment;
    uint32_t item_random_property_id;
    uint32_t item_suffix_factor;
    uint32_t item_count;
    uint32_t item_charges;
    uint64_t item_owner;
    uint32_t start_bid;
    uint32_t minimum_bid;
    uint32_t buyout_amount;
    uint32_t time_left;
    uint64_t highest_bidder;
    uint32_t highest_bid;
};

struct AuraLog {
    AuraType aura_type;
    uint32_t damage1;
    SpellSchool school;
    uint32_t absorbed;
    /* vmangos: Sent as int32 */
    uint32_t resisted;
    uint32_t damage2;
    /* vmangos: A miscvalue that is dependent on what the aura will do, this is usually decided by the AuraType, ie: with AuraType::SPELL_AURA_MOD_BASE_RESISTANCE_PCT this value could be SpellSchoolMask::SPELL_SCHOOL_MASK_NORMAL which would tell the aura that it should change armor.  If Modifier::m_auraname would have been AuraType::SPELL_AURA_MOUNTED then m_miscvalue would have decided which model the mount should have */
    uint32_t misc_value1;
    uint32_t damage3;
    /* vmangos: A miscvalue that is dependent on what the aura will do, this is usually decided by the AuraType, ie: with AuraType::SPELL_AURA_MOD_BASE_RESISTANCE_PCT this value could be SpellSchoolMask::SPELL_SCHOOL_MASK_NORMAL which would tell the aura that it should change armor.  If Modifier::m_auraname would have been AuraType::SPELL_AURA_MOUNTED then m_miscvalue would have decided which model the mount should have */
    uint32_t misc_value2;
    uint32_t damage;
    float gain_multiplier;
};

struct BattlegroundPlayer {
    uint64_t player;
    PvpRank rank;
    uint32_t killing_blows;
    uint32_t honorable_kills;
    uint32_t deaths;
    uint32_t bonus_honor;
    /* This depends on the BG in question. AV expects 7: Graveyards Assaulted, Graveyards Defended, Towers Assaulted, Towers Defended, Secondary Objectives, LieutenantCount, SecondaryNpc
WSG expects 2: Flag captures and flag returns
AB expects 2: Bases assaulted and bases defended */
    std::vector<uint32_t> fields;
};

struct BattlegroundPlayerPosition {
    uint64_t player;
    float position_x;
    float position_y;
};

struct ChannelMember {
    uint64_t guid;
    ChannelMemberFlags member_flags;
};

struct CharacterGear {
    uint32_t equipment_display_id;
    InventoryType inventory_type;
};

struct Character {
    uint64_t guid;
    std::string name;
    Race race;
    Class class_type;
    Gender gender;
    uint8_t skin;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;
    uint8_t level;
    Area area;
    Map map;
    all::Vector3d position;
    uint32_t guild_id;
    CharacterFlags flags;
    bool first_login;
    uint32_t pet_display_id;
    uint32_t pet_level;
    CreatureFamily pet_family;
    std::array<vanilla::CharacterGear, 19> equipment;
};

struct MonsterMove {
    all::Vector3d spline_point;
    uint32_t spline_id;
    MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all::Vector3d position;
    SplineFlag spline_flags;
    uint32_t duration;
    std::vector<::wow_world_messages::all::Vector3d> splines;
};

struct CompressedMove {
    CompressedMoveOpcode opcode;
    uint64_t guid;
    float speed;
    vanilla::MonsterMove monster_move;
    uint64_t transport;
    vanilla::MonsterMove monster_move_transport;
};

struct CooldownSpell {
    uint16_t spell_id;
    /* cmangos/mangoszero: cast item id */
    uint16_t item_id;
    uint16_t spell_category;
    uint32_t cooldown;
    uint32_t category_cooldown;
};

struct DamageInfo {
    uint32_t spell_school_mask;
    /* vmangos sends the same data in `damage_uint`. */
    float damage_float;
    /* vmangos sends the same data in `damage_float`. */
    uint32_t damage_uint;
    uint32_t absorb;
    uint32_t resist;
};

struct FactionInitializer {
    FactionFlag flag;
    uint32_t standing;
};

struct FactionStanding {
    Faction faction;
    uint32_t standing;
};

struct ForcedReaction {
    Faction faction;
    uint32_t reputation_rank;
};

struct Friend {
    uint64_t guid;
    FriendStatus status;
    Area area;
    uint32_t level;
    Class class_type;
};

struct GmSurveyQuestion {
    /* cmangos: questions found in GMSurveyQuestions.dbc
ref to i'th GMSurveySurveys.dbc field (all fields in that dbc point to fields in GMSurveyQuestions.dbc) */
    uint32_t question_id;
    /* Rating: hardcoded limit of 0-5 in pre-Wrath, ranges defined in GMSurveyAnswers.dbc Wrath+ */
    uint8_t answer;
    /* Usage: `GMSurveyAnswerSubmit(question, rank, comment)`
cmangos: Unused in stock UI, can be only set by calling Lua function */
    std::string comment;
};

struct GossipItem {
    /* vmangos: sets to loop index */
    uint32_t id;
    uint8_t item_icon;
    /* vmangos: makes pop up box password */
    bool coded;
    std::string message;
};

struct GroupListMember {
    std::string name;
    uint64_t guid;
    bool is_online;
    /* mangoszero/cmangos/vmangos: own flags (groupid | (assistant?0x80:0)) */
    uint8_t flags;
};

struct GuildMember {
    uint64_t guid;
    GuildMemberStatus status;
    std::string name;
    uint32_t rank;
    uint8_t level;
    Class class_type;
    Area area;
    float time_offline;
    std::string public_note;
    std::string officer_note;
};

struct InitialSpell {
    /* cmangos/mangoszero: only send 'first' part of spell */
    uint16_t spell_id;
    /* cmangos/mangoszero: sets to 0
cmangos/mangoszero: it's not slot id */
    uint16_t unknown1;
};

struct ItemDamageType {
    float damage_minimum;
    float damage_maximum;
    SpellSchool school;
};

struct ItemSpells {
    uint32_t spell;
    SpellTriggerType spell_trigger;
    /* let the database control the sign here. negative means that the item should be consumed once the charges are consumed. */
    int32_t spell_charges;
    int32_t spell_cooldown;
    uint32_t spell_category;
    int32_t spell_category_cooldown;
};

struct ItemStat {
    ItemStatType stat_type;
    int32_t value;
};

struct ListInventoryItem {
    uint32_t item_stack_count;
    uint32_t item;
    uint32_t item_display_id;
    /* cmangos: 0 for infinity item amount, although they send 0xFFFFFFFF in that case */
    uint32_t max_items;
    uint32_t price;
    uint32_t max_durability;
    uint32_t durability;
};

struct LootItem {
    uint8_t index;
    uint32_t item;
    LootSlotType ty;
};

struct Mail {
    uint32_t message_id;
    MailType message_type;
    uint64_t sender;
    uint32_t sender_id;
    uint32_t auction_id;
    std::string subject;
    uint32_t item_text_id;
    /* cmangos/vmangos/mangoszero: set to 0 */
    uint32_t unknown1;
    /* cmangos/vmangos/mangoszero: stationery (Stationery.dbc) */
    uint32_t stationery;
    uint32_t item;
    uint32_t item_enchant_id;
    uint32_t item_random_property_id;
    uint32_t item_suffix_factor;
    uint8_t item_stack_size;
    uint32_t item_spell_charges;
    uint32_t max_durability;
    uint32_t durability;
    uint32_t money;
    uint32_t cash_on_delivery_amount;
    /* cmangos/vmangos/mangoszero: All have a comment with 'flags' but send the timestamp from the item. */
    uint32_t checked_timestamp;
    float expiration_time;
    /* cmangos/vmangos/mangoszero: mail template (MailTemplate.dbc) */
    uint32_t mail_template_id;
};

struct MovementBlock {
    UpdateFlag update_flag;
    MovementFlags flags;
    uint32_t timestamp;
    all::Vector3d living_position;
    float living_orientation;
    uint64_t transport_guid;
    all::Vector3d transport_position;
    float transport_orientation;
    float pitch;
    float fall_time;
    float z_speed;
    float cos_angle;
    float sin_angle;
    float xy_speed;
    float spline_elevation;
    float walking_speed;
    float running_speed;
    float backwards_running_speed;
    float swimming_speed;
    float backwards_swimming_speed;
    float turn_rate;
    SplineFlag spline_flags;
    float angle;
    uint64_t target;
    all::Vector3d spline_final_point;
    uint32_t time_passed;
    uint32_t duration;
    uint32_t id;
    std::vector<all::Vector3d> nodes;
    all::Vector3d final_node;
    all::Vector3d position;
    float orientation;
    /* vmangos statically sets to 0 */
    uint32_t unknown0;
    /* vmangos sets statically to 1 */
    uint32_t unknown1;
    uint64_t guid;
    uint32_t transport_progress_in_ms;
};

struct TransportInfo {
    uint64_t guid;
    all::Vector3d position;
    float orientation;
    uint32_t timestamp;
};

struct MovementInfo {
    MovementFlags flags;
    uint32_t timestamp;
    all::Vector3d position;
    float orientation;
    vanilla::TransportInfo transport;
    float pitch;
    float fall_time;
    float z_speed;
    float cos_angle;
    float sin_angle;
    float xy_speed;
    float spline_elevation;
};

struct NpcTextUpdateEmote {
    uint32_t delay;
    uint32_t emote;
};

struct NpcTextUpdate {
    float probability;
    std::array<std::string, 2> texts;
    Language language;
    std::array<vanilla::NpcTextUpdateEmote, 3> emotes;
};

struct Object {
    UpdateType update_type;
    uint64_t guid1;
    UpdateMask mask1;
    uint64_t guid2;
    vanilla::MovementBlock movement1;
    uint64_t guid3;
    ObjectType object_type;
    vanilla::MovementBlock movement2;
    UpdateMask mask2;
    std::vector<uint64_t> guids;
};

struct PetSpellCooldown {
    uint16_t spell;
    /* mangoszero: sets to 0 */
    uint16_t spell_category;
    uint32_t cooldown;
    uint32_t category_cooldown;
};

struct PetitionShowlist {
    uint32_t index;
    /* cmangos/vmangos/mangoszero: statically sets to guild charter item id (5863) and arena charter ids. */
    uint32_t charter_entry;
    /* cmangos/vmangos/mangoszero: statically sets to guild charter display id (16161) and arena charter ids. */
    uint32_t charter_display_id;
    /* cmangos/vmangos/mangoszero: statically set to 1000 (10 silver) for guild charters and the cost of arena charters for that. */
    uint32_t guild_charter_cost;
    /* cmangos/vmangos/mangoszero: statically set to 1 */
    uint32_t unknown1;
};

struct PetitionSignature {
    uint64_t signer;
    uint32_t unknown1;
};

struct QuestDetailsEmote {
    uint32_t emote;
    uint32_t emote_delay;
};

struct QuestItem {
    uint32_t quest_id;
    uint32_t quest_icon;
    uint32_t level;
    /* vmangos/cmangos/mangoszero: max 0x200 */
    std::string title;
};

struct QuestItemRequirement {
    uint32_t item;
    uint32_t item_count;
    uint32_t item_display_id;
};

struct QuestItemReward {
    uint32_t item;
    uint32_t item_count;
};

struct QuestObjective {
    /* cmangos: client expected gameobject template id in form (id|0x80000000) */
    uint32_t creature_id;
    uint32_t kill_count;
    uint32_t required_item_id;
    uint32_t required_item_count;
};

struct RaidInfo {
    Map map;
    uint32_t reset_time;
    uint32_t instance_id;
};

struct RaidTargetUpdate {
    RaidTargetIndex index;
    uint64_t guid;
};

struct SpellCastTargets {
    SpellCastTargetFlags target_flags;
    uint64_t unit_target;
    uint64_t gameobject;
    uint64_t object_unk;
    uint64_t item;
    uint64_t trade_item;
    all::Vector3d source;
    all::Vector3d destination;
    std::string target_string;
    uint64_t corpse;
    uint64_t pvp_corpse;
};

struct SpellCooldownStatus {
    uint32_t id;
    uint32_t cooldown_time;
};

struct SpellLog {
    SpellEffect effect;
    uint64_t target1;
    uint32_t amount;
    Power power;
    float multiplier;
    uint64_t target2;
    uint32_t heal_amount;
    uint32_t heal_critical;
    uint64_t target3;
    uint32_t energize_amount;
    uint32_t energize_power;
    uint64_t target4;
    uint32_t extra_attacks;
    uint32_t item;
    uint64_t target5;
    uint32_t interrupted_spell;
    uint64_t target6;
    uint32_t item_to_damage;
    uint32_t unknown5;
    uint32_t feed_pet_item;
    uint64_t target7;
};

struct SpellLogMiss {
    uint64_t target;
    SpellMissInfo miss_info;
};

struct SpellMiss {
    uint64_t target;
    SpellMissInfo miss_info;
};

struct StabledPet {
    uint32_t pet_number;
    uint32_t entry;
    uint32_t level;
    std::string name;
    uint32_t loyalty;
    /* vmangos/mangoszero/cmangos: client slot 1 == current pet (0) */
    uint8_t slot;
};

struct TradeSlot {
    /* cmangos/vmangos/mangoszero: sets to index of array */
    uint8_t trade_slot_number;
    uint32_t item;
    uint32_t display_id;
    uint32_t stack_count;
    bool wrapped;
    uint64_t gift_wrapper;
    uint32_t enchantment;
    uint64_t item_creator;
    uint32_t spell_charges;
    uint32_t item_suffix_factor;
    uint32_t item_random_properties_id;
    uint32_t lock_id;
    uint32_t max_durability;
    uint32_t durability;
};

struct TrainerSpell {
    /* cmangos: learned spell (or cast-spell in profession case) */
    uint32_t spell;
    TrainerSpellState state;
    uint32_t spell_cost;
    /* cmangos: spells don't cost talent points
cmangos: set to 0 */
    uint32_t talent_point_cost;
    /* cmangos: must be equal prev. field to have learn button in enabled state
cmangos: 1 for true 0 for false */
    uint32_t first_rank;
    uint8_t required_level;
    Skill required_skill;
    uint32_t required_skill_value;
    std::array<uint32_t, 3> required_spells;
};

struct WhoPlayer {
    std::string name;
    std::string guild;
    uint32_t level;
    Class class_type;
    Race race;
    Area area;
    uint32_t party_status;
};

struct WorldState {
    uint32_t state;
    uint32_t value;
};

constexpr int AURA_MASK_SIZE = 32;
struct AuraMask {
    uint16_t auras[AURA_MASK_SIZE];
};


/* Sent in 3.3.5 by using the `bootme` console command. Command not available in 1.12. Available in 0.5.3. */
struct CMSG_BOOTME {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Executes a query directly on the world server.
Not implemented on any major emulator. */
struct CMSG_DBLOOKUP {
    std::string query;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent when using the `worldport` console command. */
struct CMSG_WORLD_TELEPORT {
    uint32_t time;
    Map map;
    all::Vector3d position;
    float orientation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent when using the `port` console command. */
struct CMSG_TELEPORT_TO_UNIT {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent after the client presses 'Create Character'. The client will then wait for [SMSG_CHAR_CREATE]. */
struct CMSG_CHAR_CREATE {
    std::string name;
    Race race;
    Class class_type;
    Gender gender;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent after a successful [CMSG_AUTH_SESSION] and [SMSG_AUTH_RESPONSE], or after failing to login with [SMSG_CHARACTER_LOGIN_FAILED]. */
struct CMSG_CHAR_ENUM {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Command to delete a character from the clients account. Can be sent after the client has received [SMSG_CHAR_ENUM].
Sent after the client has confirmed the character deletion. */
struct CMSG_CHAR_DELETE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Response to [CMSG_CHAR_CREATE].
Every [WorldResult] except `CHAR_CREATE_SUCCESS` will lead to a popup showing. `CHAR_CREATE_SUCCESS` will cause the client to send a [CMSG_CHAR_ENUM]. */
struct SMSG_CHAR_CREATE {
    WorldResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Response to [CMSG_CHAR_ENUM]. */
struct SMSG_CHAR_ENUM {
    std::vector<vanilla::Character> characters;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Response to [CMSG_CHAR_DELETE].
The result of this message will update the client character screen without them sending another [CMSG_CHAR_ENUM]. */
struct SMSG_CHAR_DELETE {
    WorldResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Command to log into the specified character.
This is sent after the client has been authenticated and served the character list with [SMSG_CHAR_ENUM].
If the player receives a [SMSG_CHARACTER_LOGIN_FAILED] it will return to the character screen and send a [CMSG_CHAR_ENUM]. */
struct CMSG_PLAYER_LOGIN {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_NEW_WORLD {
    Map map;
    all::Vector3d position;
    float orientation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_TRANSFER_PENDING {
    struct HasTransport {
        uint32_t transport;
        Map transport_map;
    };

    Map map;
    std::shared_ptr<HasTransport> has_transport;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_TRANSFER_ABORTED {
    Map map;
    TransferAbortReason reason;
    /* Possibly not needed. */
    uint8_t argument;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Response if [CMSG_PLAYER_LOGIN] fails. If successful it should instead be [SMSG_LOGIN_VERIFY_WORLD].
Client seems to always send a [CMSG_CANCEL_TRADE] after receiving this message, for unknown reasons. */
struct SMSG_CHARACTER_LOGIN_FAILED {
    WorldResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Tells the client what the datetime is and how fast time passes.
The client also asks for the datetime with [CMSG_QUERY_TIME] and gets a reply from [SMSG_QUERY_TIME_RESPONSE], but this does not appear to change anything in the client.
Despite sending this as the very first message after the client logs in it will still send a [CMSG_QUERY_TIME]. */
struct SMSG_LOGIN_SETTIMESPEED {
    /* Current server datetime.
Running the client with `-console` verifies that this message in this format sets the correct datetime. [SMSG_QUERY_TIME_RESPONSE] will not set this. */
    uint32_t datetime;
    /* How many minutes should pass by every second.
vmangos/cmangos/mangoszero set this to 0.01666667. This means that 1/60 minutes pass every second (one second passes every second). Setting this to 1.0 will make the client advance one minute every second. */
    float timescale;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PLAYER_LOGOUT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent by client after pressing 'Logout' or 'Exit Game'.
Server should reply with [SMSG_LOGOUT_RESPONSE].
Spamming the 'Logout' and 'Exit Game' buttons does not send multiple messages. */
struct CMSG_LOGOUT_REQUEST {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Reply to [CMSG_LOGOUT_REQUEST].
The client expects to get an [SMSG_LOGOUT_COMPLETE] when logout is complete. */
struct SMSG_LOGOUT_RESPONSE {
    LogoutResult result;
    LogoutSpeed speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Immediately logs out the client of the world and makes it send [CMSG_CHAR_ENUM].
Normally the client will send [CMSG_LOGOUT_REQUEST] and the server will reply with an [SMSG_LOGOUT_RESPONSE] before this message, but sending it unprompted will also immediately send the client to the character screen.
The client always seems to send 2 [CMSG_CANCEL_TRADE] immediately after receiving this mesage, but before sending [CMSG_CHAR_ENUM].
Even if 'Exit Game' is selected the client will still send a [CMSG_CHAR_ENUM] immediately before closing the connection, despite it not needing to see the character list. */
struct SMSG_LOGOUT_COMPLETE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LOGOUT_CANCEL {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOGOUT_CANCEL_ACK {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_NAME_QUERY {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Response to [CMSG_NAME_QUERY]. */
struct SMSG_NAME_QUERY_RESPONSE {
    uint64_t guid;
    std::string character_name;
    /* Used for showing cross realm realm names. If this is an empty string it is shown like a regular player on the same realm. */
    std::string realm_name;
    Race race;
    Gender gender;
    Class class_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PET_NAME_QUERY {
    uint32_t pet_number;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PET_NAME_QUERY_RESPONSE {
    uint32_t pet_number;
    std::string name;
    uint32_t pet_name_timestamp;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_QUERY {
    uint32_t guild_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GUILD_QUERY_RESPONSE {
    uint32_t id;
    std::string name;
    std::array<std::string, 10> rank_names;
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;
    uint32_t background_color;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_ITEM_QUERY_SINGLE {
    uint32_t item;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ITEM_QUERY_SINGLE_RESPONSE {
    struct Found {
        ItemClassAndSubClass class_and_sub_class;
        std::string name1;
        std::string name2;
        std::string name3;
        std::string name4;
        /* id from ItemDisplayInfo.dbc */
        uint32_t display_id;
        ItemQuality quality;
        ItemFlag flags;
        uint32_t buy_price;
        uint32_t sell_price;
        InventoryType inventory_type;
        AllowedClass allowed_class;
        AllowedRace allowed_race;
        uint32_t item_level;
        uint32_t required_level;
        Skill required_skill;
        uint32_t required_skill_rank;
        uint32_t required_spell;
        uint32_t required_honor_rank;
        uint32_t required_city_rank;
        Faction required_faction;
        /* cmangos/vmangos/mangoszero: send value only if reputation faction id setted ( needed for some items) */
        uint32_t required_faction_rank;
        uint32_t max_count;
        uint32_t stackable;
        uint32_t container_slots;
        std::array<vanilla::ItemStat, 10> stats;
        std::array<vanilla::ItemDamageType, 5> damages;
        int32_t armor;
        int32_t holy_resistance;
        int32_t fire_resistance;
        int32_t nature_resistance;
        int32_t frost_resistance;
        int32_t shadow_resistance;
        int32_t arcane_resistance;
        uint32_t delay;
        uint32_t ammo_type;
        float ranged_range_modification;
        std::array<vanilla::ItemSpells, 5> spells;
        Bonding bonding;
        std::string description;
        uint32_t page_text;
        Language language;
        PageTextMaterial page_text_material;
        /* cmangos/vmangos/mangoszero: id from QuestCache.wdb */
        uint32_t start_quest;
        uint32_t lock_id;
        /* cmangos/vmangos/mangoszero: id from Material.dbc */
        uint32_t material;
        SheatheType sheathe_type;
        /* cmangos/vmangos/mangoszero: id from ItemRandomProperties.dbc */
        uint32_t random_property;
        uint32_t block;
        ItemSet item_set;
        uint32_t max_durability;
        Area area;
        Map map;
        BagFamily bag_family;
    };

    uint32_t item;
    std::shared_ptr<Found> found;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PAGE_TEXT_QUERY {
    uint32_t page_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PAGE_TEXT_QUERY_RESPONSE {
    uint32_t page_id;
    std::string text;
    uint32_t next_page_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUEST_QUERY {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUEST_QUERY_RESPONSE {
    uint32_t quest_id;
    /* Accepted values: 0, 1 or 2. 0==IsAutoComplete() (skip objectives/details) */
    uint32_t quest_method;
    uint32_t quest_level;
    uint32_t zone_or_sort;
    uint32_t quest_type;
    /* cmangos: shown in quest log as part of quest objective */
    Faction reputation_objective_faction;
    /* cmangos: shown in quest log as part of quest objective */
    uint32_t reputation_objective_value;
    /* cmangos: RequiredOpositeRepFaction, required faction value with another (oposite) faction (objective). cmangos sets to 0 */
    Faction required_opposite_faction;
    /* cmangos: RequiredOpositeRepValue, required faction value with another (oposite) faction (objective). cmangos sets to 0 */
    uint32_t required_opposite_reputation_value;
    uint32_t next_quest_in_chain;
    uint32_t money_reward;
    /* cmangos: used in XP calculation at client */
    uint32_t max_level_money_reward;
    /* cmangos: reward spell, this spell will display (icon) (casted if RewSpellCast==0) */
    uint32_t reward_spell;
    uint32_t source_item_id;
    uint32_t quest_flags;
    std::array<vanilla::QuestItemReward, 4> rewards;
    std::array<vanilla::QuestItemReward, 6> choice_rewards;
    uint32_t point_map_id;
    all::Vector2d position;
    uint32_t point_opt;
    std::string title;
    std::string objective_text;
    std::string details;
    std::string end_text;
    std::array<vanilla::QuestObjective, 4> objectives;
    std::array<std::string, 4> objective_texts;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GAMEOBJECT_QUERY {
    uint32_t entry_id;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GAMEOBJECT_QUERY_RESPONSE {
    struct Found {
        uint32_t info_type;
        uint32_t display_id;
        std::string name1;
        std::string name2;
        std::string name3;
        std::string name4;
        std::string name5;
        std::array<uint32_t, 6> raw_data;
    };

    /* When the `found` optional is not present all emulators bitwise OR the entry with `0x80000000`.`` */
    uint32_t entry_id;
    std::shared_ptr<Found> found;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CREATURE_QUERY {
    uint32_t creature;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CREATURE_QUERY_RESPONSE {
    struct Found {
        std::string name1;
        std::string name2;
        std::string name3;
        std::string name4;
        std::string sub_name;
        uint32_t type_flags;
        /* cmangos: CreatureType.dbc   wdbFeild8 */
        uint32_t creature_type;
        CreatureFamily creature_family;
        /* cmangos: Creature Rank (elite, boss, etc) */
        uint32_t creature_rank;
        /* cmangos: wdbFeild11 */
        uint32_t unknown0;
        /* cmangos: Id from CreatureSpellData.dbc wdbField12 */
        uint32_t spell_data_id;
        /* cmangos: DisplayID      wdbFeild13 and workaround, way to manage models must be fixed */
        uint32_t display_id;
        /* cmangos: wdbFeild14 */
        uint8_t civilian;
        uint8_t racial_leader;
    };

    /* When the `found` optional is not present all emulators bitwise OR the entry with `0x80000000`.`` */
    uint32_t creature_entry;
    std::shared_ptr<Found> found;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_WHO {
    uint32_t minimum_level;
    uint32_t maximum_level;
    std::string player_name;
    std::string guild_name;
    uint32_t race_mask;
    uint32_t class_mask;
    std::vector<uint32_t> zones;
    std::vector<std::string> search_strings;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_WHO {
    uint32_t online_players;
    std::vector<vanilla::WhoPlayer> players;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_WHOIS {
    std::string character;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_WHOIS {
    /* vmangos: max CString length allowed: 256 */
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_FRIEND_LIST {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FRIEND_LIST {
    std::vector<vanilla::Friend> friends;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FRIEND_STATUS {
    FriendResult result;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_ADD_FRIEND {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_DEL_FRIEND {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_IGNORE_LIST {
    std::vector<uint64_t> ignored;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_ADD_IGNORE {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_DEL_IGNORE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_INVITE {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GROUP_INVITE {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_ACCEPT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_DECLINE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GROUP_DECLINE {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_UNINVITE {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_UNINVITE_GUID {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GROUP_UNINVITE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_SET_LEADER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GROUP_SET_LEADER {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LOOT_METHOD {
    GroupLootSetting loot_setting;
    uint64_t loot_master;
    ItemQuality loot_threshold;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_DISBAND {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GROUP_DESTROYED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GROUP_LIST {
    struct GroupNotEmpty {
        GroupLootSetting loot_setting;
        /* Zero if loot_setting is not MASTER_LOOT */
        uint64_t master_loot;
        ItemQuality loot_threshold;
    };

    GroupType group_type;
    /* mangoszero/cmangos/vmangos: own flags (groupid | (assistant?0x80:0)) */
    uint8_t flags;
    std::vector<vanilla::GroupListMember> members;
    uint64_t leader;
    std::shared_ptr<GroupNotEmpty> group_not_empty;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PARTY_MEMBER_STATS {
    uint64_t guid;
    GroupUpdateFlags mask;
    GroupMemberOnlineStatus status;
    uint16_t current_health;
    uint16_t max_health;
    Power power;
    uint16_t current_power;
    uint16_t max_power;
    uint16_t level;
    Area area;
    /* cmangos: float cast to u16 */
    uint16_t position_x;
    /* cmangos: float cast to u16 */
    uint16_t position_y;
    /* cmangos: In all checked pre-2.x data of packets included only positive auras */
    AuraMask auras;
    AuraMask negative_auras;
    uint64_t pet;
    std::string pet_name;
    uint16_t pet_display_id;
    uint16_t pet_current_health;
    uint16_t pet_max_health;
    Power pet_power_type;
    uint16_t pet_current_power;
    uint16_t pet_max_power;
    AuraMask pet_auras;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PARTY_COMMAND_RESULT {
    PartyOperation operation;
    std::string member;
    PartyResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_CREATE {
    std::string guild_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_INVITE {
    std::string invited_player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GUILD_INVITE {
    std::string player_name;
    std::string guild_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_ACCEPT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_DECLINE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_INFO {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GUILD_INFO {
    std::string guild_name;
    uint32_t created_day;
    uint32_t created_month;
    uint32_t created_year;
    uint32_t amount_of_characters_in_guild;
    uint32_t amount_of_accounts_in_guild;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_ROSTER {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GUILD_ROSTER {
    std::string motd;
    std::string guild_info;
    std::vector<uint32_t> rights;
    std::vector<vanilla::GuildMember> members;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_PROMOTE {
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_DEMOTE {
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_LEAVE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_REMOVE {
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_DISBAND {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_LEADER {
    std::string new_guild_leader_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_MOTD {
    std::string message_of_the_day;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GUILD_EVENT {
    GuildEvent event;
    std::vector<std::string> event_descriptions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GUILD_COMMAND_RESULT {
    GuildCommand command;
    std::string string;
    GuildCommandResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MESSAGECHAT {
    ChatType chat_type;
    Language language;
    std::string target_player;
    std::string channel;
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MESSAGECHAT {
    ChatType chat_type;
    Language language;
    std::string monster_name;
    uint64_t monster;
    /* This character will have the speech bubble above their head.
0 value credits same as `chat_credit`. Invalid value credits no one.
cmangos/vmangos/mangoszero: `chat_credit` and `speech_bubble_credit` are the same */
    uint64_t speech_bubble_credit;
    /* This character will be appear to say this in the chat box.
0 value credits no name.
cmangos/vmangos/mangoszero: `chat_credit` and `speech_bubble_credit` are the same */
    uint64_t chat_credit;
    uint64_t sender1;
    std::string sender_name;
    uint64_t target;
    std::string channel_name;
    uint32_t player_rank;
    uint64_t player;
    uint64_t sender2;
    std::string message;
    PlayerChatTag tag;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_JOIN_CHANNEL {
    std::string channel_name;
    std::string channel_password;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LEAVE_CHANNEL {
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CHANNEL_NOTIFY {
    ChatNotify notify_type;
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_LIST {
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CHANNEL_LIST {
    std::string channel_name;
    ChannelFlags channel_flags;
    std::vector<vanilla::ChannelMember> members;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_PASSWORD {
    std::string channel_name;
    std::string channel_password;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_SET_OWNER {
    std::string channel_name;
    std::string new_owner;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_OWNER {
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_MODERATOR {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_UNMODERATOR {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_MUTE {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_UNMUTE {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_INVITE {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_KICK {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_BAN {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_UNBAN {
    std::string channel_name;
    std::string player_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_ANNOUNCEMENTS {
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHANNEL_MODERATE {
    std::string channel_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_UPDATE_OBJECT {
    uint8_t has_transport;
    std::vector<vanilla::Object> objects;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Immediately removes an object from the presence of the player.
Used by vmangos for logout. */
struct SMSG_DESTROY_OBJECT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_USE_ITEM {
    uint8_t bag_index;
    uint8_t bag_slot;
    uint8_t spell_index;
    vanilla::SpellCastTargets targets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_OPEN_ITEM {
    uint8_t bag_index;
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_READ_ITEM {
    uint8_t bag_index;
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_READ_ITEM_OK {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* vmangos has extra u8 with comment `0..2, read failure reason? if == 1, use next command`. */
struct SMSG_READ_ITEM_FAILED {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ITEM_COOLDOWN {
    uint64_t guid;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GAMEOBJ_USE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GAMEOBJECT_CUSTOM_ANIM {
    uint64_t guid;
    uint32_t animation_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AREATRIGGER {
    uint32_t trigger_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_FORWARD_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_FORWARD_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_BACKWARD_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_BACKWARD_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_STOP_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_STOP_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_STRAFE_LEFT_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_STRAFE_LEFT_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_STRAFE_RIGHT_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_STRAFE_RIGHT_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_STOP_STRAFE_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_STOP_STRAFE_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_JUMP_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_JUMP_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_TURN_LEFT_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_TURN_LEFT_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_TURN_RIGHT_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_TURN_RIGHT_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_STOP_TURN_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_STOP_TURN_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_PITCH_UP_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_PITCH_UP_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_PITCH_DOWN_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_PITCH_DOWN_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_STOP_PITCH_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_STOP_PITCH_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_SET_RUN_MODE_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_SET_RUN_MODE_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_SET_WALK_MODE_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_SET_WALK_MODE_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Response to [MSG_MOVE_TELEPORT_ACK_Server], at which point [MSG_MOVE_TELEPORT_ACK_Server] should be sent to observing players. */
struct MSG_MOVE_TELEPORT_ACK_Client {
    uint64_t guid;
    uint32_t movement_counter;
    uint32_t time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Can be response to [CMSG_TELEPORT_TO_UNIT].
Can also be a response to [MSG_MOVE_TELEPORT_ACK_Client] after being sent. */
struct MSG_MOVE_TELEPORT_ACK_Server {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_FALL_LAND_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_FALL_LAND_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_SWIM_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_START_SWIM_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_STOP_SWIM_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_STOP_SWIM_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_SET_FACING_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_SET_FACING_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_SET_PITCH_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_SET_PITCH_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Acknowledge from the client that it has received an [SMSG_NEW_WORLD] and has loaded the new map.
Despite the name this seems to only be sent by the client.
The server should reply with what it normally does to log players into the world. */
struct MSG_MOVE_WORLDPORT_ACK {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MONSTER_MOVE {
    uint64_t guid;
    all::Vector3d spline_point;
    uint32_t spline_id;
    MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all::Vector3d position;
    SplineFlag spline_flags;
    uint32_t duration;
    std::vector<::wow_world_messages::all::Vector3d> splines;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MOVE_WATER_WALK {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MOVE_LAND_WALK {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* vmangos/mangoszero: write in client console: setrawpos x y z o. For now, it is implemented like worldport but on the same map. Consider using [MSG_MOVE_SET_RAW_POSITION_ACK]. */
struct CMSG_MOVE_SET_RAW_POSITION {
    all::Vector3d position;
    float orientation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Tells the client that the running speed has changed.
Client replies with [CMSG_FORCE_RUN_SPEED_CHANGE_ACK].
vmangos sends this message to the client being changed and [SMSG_SPLINE_SET_RUN_SPEED] to others. */
struct SMSG_FORCE_RUN_SPEED_CHANGE {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent to acknowledge the new speed. Reply to [SMSG_FORCE_RUN_SPEED_CHANGE]. */
struct CMSG_FORCE_RUN_SPEED_CHANGE_ACK {
    uint64_t guid;
    uint32_t counter;
    vanilla::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FORCE_RUN_BACK_SPEED_CHANGE {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FORCE_SWIM_SPEED_CHANGE {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_FORCE_SWIM_SPEED_CHANGE_ACK {
    uint64_t guid;
    uint32_t counter;
    vanilla::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FORCE_MOVE_ROOT {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_FORCE_MOVE_ROOT_ACK {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FORCE_MOVE_UNROOT {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_FORCE_MOVE_UNROOT_ACK {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_HEARTBEAT_Client {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_HEARTBEAT_Server {
    uint64_t guid;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MOVE_KNOCK_BACK {
    uint64_t guid;
    /* mangoszero: Sequence
mangoszero sets to 0 */
    uint32_t movement_counter;
    /* cmangos/mangoszero/vmangos: x direction */
    float v_cos;
    /* cmangos/mangoszero/vmangos: y direction */
    float v_sin;
    /* cmangos/mangoszero/vmangos: Horizontal speed */
    float horizontal_speed;
    /* cmangos/mangoszero/vmangos: Z Movement speed (vertical) */
    float vertical_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MOVE_KNOCK_BACK_ACK {
    uint64_t guid;
    uint32_t counter;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MOVE_FEATHER_FALL {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MOVE_NORMAL_FALL {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MOVE_SET_HOVER {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MOVE_UNSET_HOVER {
    uint64_t guid;
    uint32_t counter;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MOVE_HOVER_ACK {
    uint64_t guid;
    uint32_t counter;
    vanilla::MovementInfo info;
    uint32_t is_applied;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_TRIGGER_CINEMATIC {
    CinematicSequenceId cinematic_sequence_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent by client when cinematic beings. */
struct CMSG_NEXT_CINEMATIC_CAMERA {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_COMPLETE_CINEMATIC {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Data for which tutorials the client has passed.
All bits set means that all tutorials have been passed.
Must be sent after [SMSG_LOGIN_VERIFY_WORLD] otherwise the client will SEGFAULT. */
struct SMSG_TUTORIAL_FLAGS {
    std::array<uint32_t, 8> tutorial_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_TUTORIAL_FLAG {
    /* arcemu indexes into the tutorials by dividing by 32 and modulo 32. */
    uint32_t tutorial_flag;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_TUTORIAL_CLEAR {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_TUTORIAL_RESET {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Automatically sent by the client when it goes AFK. */
struct CMSG_STANDSTATECHANGE {
    UnitStandState animation_state;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_EMOTE {
    Emote emote;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_EMOTE {
    Emote emote;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent to notify the server that the client wants to perform an emote like /dance or /cry.
Server responds with [SMSG_TEXT_EMOTE] and [SMSG_EMOTE]. */
struct CMSG_TEXT_EMOTE {
    TextEmote text_emote;
    uint32_t emote;
    /* Guid targeted by the client. */
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_TEXT_EMOTE {
    uint64_t guid;
    TextEmote text_emote;
    uint32_t emote;
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUTOSTORE_LOOT_ITEM {
    uint8_t item_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUTOEQUIP_ITEM {
    uint8_t source_bag;
    uint8_t source_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUTOSTORE_BAG_ITEM {
    uint8_t source_bag;
    uint8_t source_slot;
    uint8_t destination_bag;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SWAP_ITEM {
    uint8_t destination_bag;
    uint8_t destionation_slot;
    uint8_t source_bag;
    uint8_t source_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SWAP_INV_ITEM {
    ItemSlot source_slot;
    ItemSlot destination_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SPLIT_ITEM {
    uint8_t source_bag;
    uint8_t source_slot;
    uint8_t destination_bag;
    uint8_t destination_slot;
    uint8_t amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUTOEQUIP_ITEM_SLOT {
    uint64_t guid;
    uint8_t destination_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_DESTROYITEM {
    uint8_t bag;
    uint8_t slot;
    uint8_t amount;
    uint8_t unknown1;
    uint8_t unknown2;
    uint8_t unknown3;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_INVENTORY_CHANGE_FAILURE {
    InventoryResult result;
    uint32_t required_level;
    uint64_t item1;
    uint64_t item2;
    /* cmangos: bag type subclass, used with EQUIP_ERR_EVENT_AUTOEQUIP_BIND_CONFIRM and EQUIP_ERR_ITEM_DOESNT_GO_INTO_BAG2
vmangos sets to 0 */
    uint8_t bag_type_subclass;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_OPEN_CONTAINER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_INSPECT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_INSPECT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_INITIATE_TRADE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BEGIN_TRADE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BUSY_TRADE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_IGNORE_TRADE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_ACCEPT_TRADE {
    /* Skipped in vmangos and set to 1 for bots */
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_UNACCEPT_TRADE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent twice by the client when teleporting and logging out. */
struct CMSG_CANCEL_TRADE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SET_TRADE_ITEM {
    uint8_t trade_slot;
    uint8_t bag;
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CLEAR_TRADE_ITEM {
    uint8_t trade_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SET_TRADE_GOLD {
    uint32_t gold;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_TRADE_STATUS {
    TradeStatus status;
    /* Set to 0 in vmangos. */
    uint64_t unknown1;
    InventoryResult inventory_result;
    /* used for: EQUIP_ERR_BAG_FULL, EQUIP_ERR_CANT_CARRY_MORE_OF_THIS, EQUIP_ERR_MISSING_REAGENT, EQUIP_ERR_ITEM_MAX_LIMIT_CATEGORY_COUNT_EXCEEDED */
    bool target_error;
    /* ItemLimitCategory.dbc entry */
    uint32_t item_limit_category_id;
    /* Trade slot -1 here clears CGTradeInfo::m_tradeMoney */
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_TRADE_STATUS_EXTENDED {
    /* cmangos/vmangos/mangoszero: send trader or own trade windows state (last need for proper show spell apply to non-trade slot) */
    bool self_player;
    /* cmangos/vmangos/mangoszero: sets to 7
cmangos/vmangos/mangoszero: trade slots count/number?, = next field in most cases */
    uint32_t trade_slot_count1;
    /* cmangos/vmangos/mangoszero: sets to 7
cmangos/vmangos/mangoszero: trade slots count/number?, = prev field in most cases */
    uint32_t trade_slot_count2;
    uint32_t money_in_trade;
    uint32_t spell_on_lowest_slot;
    /* vmangos/cmangos/mangoszero: All set to same as trade_slot_count* (7), unsure which determines how big this is. Unused slots are 0. */
    std::array<vanilla::TradeSlot, 7> trade_slots;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_INITIALIZE_FACTIONS {
    std::vector<vanilla::FactionInitializer> factions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SET_FACTION_VISIBLE {
    Faction faction;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SET_FACTION_STANDING {
    std::vector<vanilla::FactionStanding> faction_standings;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SET_FACTION_ATWAR {
    Faction faction;
    FactionFlag flags;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SET_PROFICIENCY {
    ItemClass class_type;
    uint32_t item_sub_class_mask;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SET_ACTION_BUTTON {
    uint8_t button;
    uint16_t action;
    uint8_t misc;
    uint8_t action_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ACTION_BUTTONS {
    std::array<uint32_t, 120> data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_INITIAL_SPELLS {
    /* cmangos/mangoszero: sets to 0 */
    uint8_t unknown1;
    std::vector<vanilla::InitialSpell> initial_spells;
    std::vector<vanilla::CooldownSpell> cooldowns;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LEARNED_SPELL {
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SUPERCEDED_SPELL {
    uint16_t new_spell_id;
    uint16_t old_spell_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CAST_SPELL {
    uint32_t spell;
    vanilla::SpellCastTargets targets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CANCEL_CAST {
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CAST_RESULT {
    uint32_t spell;
    SimpleSpellCastResult result;
    CastFailureReason reason;
    uint32_t required_spell_focus;
    Area area;
    uint32_t equipped_item_class;
    uint32_t equipped_item_subclass_mask;
    uint32_t equipped_item_inventory_type_mask;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELL_START {
    /* cmangos/vmangos/mangoszero: if cast item is used, set this to guid of cast item, otherwise set it to same as caster. */
    uint64_t cast_item;
    uint64_t caster;
    uint32_t spell;
    CastFlags flags;
    uint32_t timer;
    vanilla::SpellCastTargets targets;
    uint32_t ammo_display_id;
    uint32_t ammo_inventory_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELL_GO {
    /* cmangos/vmangos/mangoszero: if cast item is used, set this to guid of cast item, otherwise set it to same as caster. */
    uint64_t cast_item;
    uint64_t caster;
    uint32_t spell;
    CastFlags flags;
    std::vector<uint64_t> hits;
    std::vector<vanilla::SpellMiss> misses;
    vanilla::SpellCastTargets targets;
    uint32_t ammo_display_id;
    uint32_t ammo_inventory_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELL_FAILURE {
    uint64_t guid;
    uint32_t spell;
    SpellCastResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELL_COOLDOWN {
    uint64_t guid;
    uint32_t amount_of_cooldowns;
    std::vector<vanilla::SpellCooldownStatus> cooldowns;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_COOLDOWN_EVENT {
    uint32_t id;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CANCEL_AURA {
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_UPDATE_AURA_DURATION {
    uint8_t aura_slot;
    uint32_t aura_duration;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PET_CAST_FAILED {
    uint32_t id;
    /* vmangos sets to 2 and cmangos sets to 0. */
    uint8_t unknown1;
    SpellCastResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_CHANNEL_START_Server {
    uint32_t spell;
    uint32_t duration;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_CHANNEL_UPDATE_Server {
    uint32_t time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CANCEL_CHANNELLING {
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_AI_REACTION {
    uint64_t guid;
    AiReaction reaction;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sets the current target. */
struct CMSG_SET_SELECTION {
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SET_TARGET_OBSOLETE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Signals that client has right clicked an opponent and is in the attack stance.
Server should reply with [SMSG_ATTACKSTART]. */
struct CMSG_ATTACKSWING {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_ATTACKSTOP {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ATTACKSTART {
    uint64_t attacker;
    uint64_t victim;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ATTACKSTOP {
    uint64_t player;
    uint64_t enemy;
    /* cmangos/vmangos/mangoszero/arcemu/azerothcore/mangostwo: set to 0 with comment: unk, can be 1 also */
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ATTACKSWING_NOTINRANGE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ATTACKSWING_BADFACING {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ATTACKSWING_NOTSTANDING {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ATTACKSWING_DEADTARGET {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ATTACKSWING_CANT_ATTACK {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ATTACKERSTATEUPDATE {
    HitInfo hit_info;
    uint64_t attacker;
    uint64_t target;
    uint32_t total_damage;
    std::vector<vanilla::DamageInfo> damages;
    uint32_t damage_state;
    uint32_t unknown1;
    /* vmangos: spell id, seen with heroic strike and disarm as examples */
    uint32_t spell_id;
    uint32_t blocked_amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CANCEL_COMBAT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELLHEALLOG {
    uint64_t victim;
    uint64_t caster;
    uint32_t id;
    uint32_t damage;
    bool critical;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELLENERGIZELOG {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    Power power;
    uint32_t damage;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Inform the client of a their hearthstone location. */
struct SMSG_BINDPOINTUPDATE {
    all::Vector3d position;
    Map map;
    Area area;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PLAYERBOUND {
    uint64_t guid;
    Area area;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CLIENT_CONTROL_UPDATE {
    uint64_t guid;
    bool allow_movement;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_REPOP_REQUEST {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_RESURRECT_REQUEST {
    uint64_t guid;
    std::string name;
    bool player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_RESURRECT_RESPONSE {
    uint64_t guid;
    uint8_t status;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LOOT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LOOT_MONEY {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LOOT_RELEASE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOOT_RESPONSE {
    uint64_t guid;
    LootMethod loot_method;
    LootMethodError loot_error;
    uint32_t gold;
    std::vector<vanilla::LootItem> items;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOOT_RELEASE_RESPONSE {
    uint64_t guid;
    /* Set to 1 on mangoszero/vmangos/cmangos/azerothcraft/mangosone/mangostwo/arcemu */
    uint8_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Notify a looting player that an item has been taken. */
struct SMSG_LOOT_REMOVED {
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOOT_MONEY_NOTIFY {
    uint32_t amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOOT_CLEAR_MONEY {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ITEM_PUSH_RESULT {
    uint64_t guid;
    NewItemSource source;
    NewItemCreationType creation_type;
    NewItemChatAlert alert_chat;
    uint8_t bag_slot;
    /* mangoszero: item slot, but when added to stack: 0xFFFFFFFF */
    uint32_t item_slot;
    uint32_t item;
    /* mangoszero: SuffixFactor */
    uint32_t item_suffix_factor;
    /* mangoszero: random item property id */
    uint32_t item_random_property_id;
    uint32_t item_count;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_DUEL_REQUESTED {
    uint64_t initiator;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_DUEL_OUTOFBOUNDS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_DUEL_INBOUNDS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_DUEL_COMPLETE {
    bool ended_without_interruption;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_DUEL_WINNER {
    DuelWinnerReason reason;
    std::string opponent_name;
    std::string initiator_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_DUEL_ACCEPTED {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_DUEL_CANCELLED {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* This is not used in any TBC emulator, but trinitycore has it implemented so it is assumed to be valid for TBC as well. */
struct SMSG_MOUNTRESULT {
    MountResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_DISMOUNTRESULT {
    DismountResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MOUNTSPECIAL_ANIM {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MOUNTSPECIAL_ANIM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PET_TAME_FAILURE {
    PetTameFailureReason reason;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PET_SET_ACTION {
    struct Extra {
        uint32_t position2;
        uint32_t data2;
    };

    uint64_t guid;
    uint32_t position1;
    uint32_t data1;
    std::shared_ptr<Extra> extra;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PET_ACTION {
    uint64_t pet;
    uint32_t data;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PET_ABANDON {
    uint64_t pet;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PET_RENAME {
    uint64_t pet;
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Some emulators have this with fields, but it has been verified to be empty on 1.12 through reverse engineering. */
struct SMSG_PET_NAME_INVALID {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PET_SPELLS {
    struct ActionBars {
        uint32_t duration;
        PetReactState react;
        PetCommandState command;
        /* mangoszero: set to 0 */
        uint8_t unknown;
        PetEnabled pet_enabled;
        std::array<uint32_t, 10> action_bars;
        std::vector<uint32_t> spells;
        std::vector<vanilla::PetSpellCooldown> cooldowns;
    };

    uint64_t pet;
    std::shared_ptr<ActionBars> action_bars;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PET_MODE {
    uint64_t guid;
    PetReactState react_state;
    PetCommandState command_state;
    /* vmangos sets to 0. */
    uint8_t unknown1;
    PetEnabled pet_enabled;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GOSSIP_HELLO {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GOSSIP_SELECT_OPTION {
    struct Unknown {
        /* vmangos: if (_player->PlayerTalkClass->GossipOptionCoded(gossipListId)) */
        std::string code;
    };

    uint64_t guid;
    uint32_t gossip_list_id;
    std::shared_ptr<Unknown> unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GOSSIP_MESSAGE {
    uint64_t guid;
    uint32_t title_text_id;
    std::vector<vanilla::GossipItem> gossips;
    std::vector<vanilla::QuestItem> quests;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GOSSIP_COMPLETE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_NPC_TEXT_QUERY {
    uint32_t text_id;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_NPC_TEXT_UPDATE {
    uint32_t text_id;
    std::array<vanilla::NpcTextUpdate, 8> texts;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTGIVER_STATUS_QUERY {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTGIVER_STATUS {
    uint64_t guid;
    QuestGiverStatus status;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTGIVER_HELLO {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTGIVER_QUEST_LIST {
    uint64_t npc;
    std::string title;
    /* mangoszero: player emote */
    uint32_t emote_delay;
    /* mangoszero: NPC emote */
    uint32_t emote;
    std::vector<vanilla::QuestItem> quest_items;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTGIVER_QUERY_QUEST {
    uint64_t guid;
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTGIVER_QUEST_AUTOLAUNCH {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTGIVER_QUEST_DETAILS {
    uint64_t guid;
    uint32_t quest_id;
    std::string title;
    std::string details;
    std::string objectives;
    bool auto_finish;
    std::vector<vanilla::QuestItemReward> choice_item_rewards;
    std::vector<vanilla::QuestItemReward> item_rewards;
    uint32_t money_reward;
    uint32_t reward_spell;
    std::vector<vanilla::QuestDetailsEmote> emotes;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTGIVER_ACCEPT_QUEST {
    uint64_t guid;
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTGIVER_COMPLETE_QUEST {
    uint64_t guid;
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* mangoszero/vmangos: Quests that don't require items use the `RequestItemsText` field to store the text that is shown when you talk to the quest giver while the quest is incomplete. Therefore the text should not be shown for them when the quest is complete. For quests that do require items, it is self explanatory. */
struct SMSG_QUESTGIVER_REQUEST_ITEMS {
    uint64_t npc;
    uint32_t quest_id;
    std::string title;
    std::string request_items_text;
    uint32_t emote_delay;
    uint32_t emote;
    bool auto_finish;
    uint32_t required_money;
    std::vector<vanilla::QuestItemRequirement> required_items;
    /* cmangos/vmangos/mangoszero: All emulators set to 0x02 */
    uint32_t unknown1;
    QuestCompletable completable;
    /* cmangos/vmangos/mangoszero: set to 0x04 */
    uint32_t flags2;
    /* cmangos/vmangos/mangoszero: set to 0x08 */
    uint32_t flags3;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTGIVER_REQUEST_REWARD {
    uint64_t guid;
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTGIVER_OFFER_REWARD {
    uint64_t npc;
    uint32_t quest_id;
    std::string title;
    std::string offer_reward_text;
    bool auto_finish;
    std::vector<vanilla::NpcTextUpdateEmote> emotes;
    std::vector<vanilla::QuestItemRequirement> choice_item_rewards;
    std::vector<vanilla::QuestItemRequirement> item_rewards;
    uint32_t money_reward;
    uint32_t reward_spell;
    /* mangoszero and cmangos disagree about which field is _cast, although they both agree that the _cast field should not be in zero (vanilla). They still both include both fields in the code though. */
    uint32_t reward_spell_cast;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTGIVER_CHOOSE_REWARD {
    uint64_t guid;
    uint32_t quest_id;
    uint32_t reward;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTGIVER_QUEST_INVALID {
    QuestFailedReason msg;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTGIVER_CANCEL {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTGIVER_QUEST_COMPLETE {
    uint32_t quest_id;
    /* cmangos/vmangos/mangoszero: set to 0x03 */
    uint32_t unknown;
    uint32_t experience_reward;
    uint32_t money_reward;
    std::vector<vanilla::QuestItemReward> item_rewards;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTGIVER_QUEST_FAILED {
    uint32_t quest_id;
    QuestFailedReason reason;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTLOG_SWAP_QUEST {
    uint8_t slot1;
    uint8_t slot2;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUESTLOG_REMOVE_QUEST {
    uint8_t slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTLOG_FULL {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTUPDATE_FAILED {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTUPDATE_FAILEDTIMER {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTUPDATE_COMPLETE {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTUPDATE_ADD_KILL {
    uint32_t quest_id;
    /* Unsure of name */
    uint32_t creature_id;
    uint32_t kill_count;
    uint32_t required_kill_count;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUESTUPDATE_ADD_ITEM {
    uint32_t required_item_id;
    uint32_t items_required;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_QUEST_CONFIRM_ACCEPT {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_QUEST_CONFIRM_ACCEPT {
    uint32_t quest_id;
    std::string quest_title;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PUSHQUESTTOPARTY {
    uint32_t quest_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LIST_INVENTORY {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* if `amount_of_items` is 0 it is supposedly followed by a single u8 with 0 to say that vendor has no items. */
struct SMSG_LIST_INVENTORY {
    uint64_t vendor;
    std::vector<vanilla::ListInventoryItem> items;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SELL_ITEM {
    uint64_t vendor;
    uint64_t item;
    uint8_t amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SELL_ITEM {
    uint64_t guid;
    uint64_t item;
    SellItemResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BUY_ITEM {
    uint64_t vendor;
    uint32_t item;
    uint8_t amount;
    /* cmangos says this is hardcoded to 1 in the TBC client. */
    uint8_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BUY_ITEM_IN_SLOT {
    uint64_t vendor;
    uint32_t item;
    uint64_t bag;
    uint8_t bag_slot;
    uint8_t amount;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_BUY_ITEM {
    uint64_t guid;
    /* Starts at index 1.
arcemu has this field as milliseconds since something instead. */
    uint32_t vendor_slot;
    uint32_t amount_for_sale;
    uint32_t amount_bought;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Some TBC and Wrath emus have a u32 before `result` that is only included if the value is > 0, but the emus never call it with anything other than 0. */
struct SMSG_BUY_FAILED {
    uint64_t guid;
    uint32_t item;
    BuyResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SHOWTAXINODES {
    /* Set to 1 in mangoszero */
    uint32_t unknown1;
    uint64_t guid;
    uint32_t nearest_node;
    uint32_t amount_of_nodes;
    std::vector<uint32_t> nodes;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_TAXINODE_STATUS_QUERY {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_TAXINODE_STATUS {
    uint64_t guid;
    bool taxi_mask_node_known;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_TAXIQUERYAVAILABLENODES {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_ACTIVATETAXI {
    uint64_t guid;
    uint32_t source_node;
    uint32_t destination_node;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ACTIVATETAXIREPLY {
    ActivateTaxiReply reply;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_NEW_TAXI_PATH {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_TRAINER_LIST {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_TRAINER_LIST {
    uint64_t guid;
    uint32_t trainer_type;
    std::vector<vanilla::TrainerSpell> spells;
    std::string greeting;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_TRAINER_BUY_SPELL {
    uint64_t guid;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_TRAINER_BUY_SUCCEEDED {
    uint64_t guid;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* No TBC emulators implement this. */
struct SMSG_TRAINER_BUY_FAILED {
    uint64_t guid;
    uint32_t id;
    TrainingFailureReason error;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BINDER_ACTIVATE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BANKER_ACTIVATE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SHOW_BANK {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BUY_BANK_SLOT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_BUY_BANK_SLOT_RESULT {
    BuyBankSlotResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PETITION_SHOWLIST {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PETITION_SHOWLIST {
    uint64_t npc;
    std::vector<vanilla::PetitionShowlist> petitions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* cmangos/vmangos/mangoszero: All fields with 'skip' are completely unused */
struct CMSG_PETITION_BUY {
    uint64_t npc;
    uint32_t unknown1;
    uint64_t unknown2;
    std::string name;
    uint32_t unknown3;
    uint32_t unknown4;
    uint32_t unknown5;
    uint32_t unknown6;
    uint32_t unknown7;
    uint32_t unknown8;
    uint32_t unknown9;
    uint32_t unknown10;
    uint32_t unknown11;
    uint32_t unknown12;
    uint16_t unknown13;
    uint8_t unknown14;
    /* cmangos/vmangos/mangoszero: Named but never used */
    uint32_t index;
    uint32_t unknown15;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PETITION_SHOW_SIGNATURES {
    uint64_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PETITION_SHOW_SIGNATURES {
    uint64_t item;
    uint64_t owner;
    uint32_t petition;
    std::vector<vanilla::PetitionSignature> signatures;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PETITION_SIGN {
    uint64_t petition;
    uint8_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PETITION_SIGN_RESULTS {
    uint64_t petition;
    uint64_t owner;
    PetitionResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_PETITION_DECLINE {
    uint64_t petition;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_OFFER_PETITION {
    uint64_t petition;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_TURN_IN_PETITION {
    uint64_t petition;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_TURN_IN_PETITION_RESULTS {
    PetitionResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PETITION_QUERY {
    uint32_t guild_id;
    uint64_t petition;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PETITION_QUERY_RESPONSE {
    uint32_t petition_id;
    uint64_t charter_owner;
    std::string guild_name;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    std::string body_text;
    /* cmangos/vmangos/mangoszero: Set to 1, only info is comment from vmangos */
    uint32_t unknown_flags;
    /* cmangos/vmangos/mangoszero: Set to 9, only info is comment from vmangos */
    uint32_t minimum_signatures;
    /* cmangos/vmangos/mangoszero: Set to 9, only info is comment from vmangos */
    uint32_t maximum_signatures;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t deadline;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t issue_date;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t allowed_guild_id;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    AllowedClass allowed_class;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    AllowedRace allowed_race;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint16_t allowed_genders;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t allowed_minimum_level;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t allowed_maximum_level;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos
vmangos: char m_choicetext[10][64] */
    uint32_t todo_amount_of_signers;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t number_of_choices;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FISH_NOT_HOOKED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FISH_ESCAPED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BUG {
    /* cmangos/vmangos/mangoszero: If 0 received bug report, else received suggestion */
    uint32_t suggestion;
    std::string content;
    std::string bug_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_NOTIFICATION {
    std::string notification;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PLAYED_TIME {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PLAYED_TIME {
    uint32_t total_played_time;
    uint32_t level_played_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent immediately after logging in. Client expects reply in [SMSG_QUERY_TIME_RESPONSE].
This message and the [SMSG_QUERY_TIME_RESPONSE] reply does not actually appear to set the time. Instead [SMSG_LOGIN_SETTIMESPEED] seems to correctly set the time. */
struct CMSG_QUERY_TIME {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Reply to [CMSG_QUERY_TIME].
[CMSG_QUERY_TIME] and this reply does not actually appear to set the time. Instead [SMSG_LOGIN_SETTIMESPEED] seems to correctly set the time. Running the client with `-console` will print the date when [SMSG_LOGIN_SETTIMESPEED] is received, but not when this message is received. */
struct SMSG_QUERY_TIME_RESPONSE {
    /* Seconds since 1970, 1st of January (Unix Time). */
    uint32_t time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOG_XPGAIN {
    uint64_t target;
    uint32_t total_exp;
    ExperienceAwardType exp_type;
    uint32_t experience_without_rested;
    /* mangoszero sets to 1 and comments: 1 - none 0 - 100% group bonus output */
    float exp_group_bonus;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_RECLAIM_CORPSE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_WRAP_ITEM {
    uint8_t gift_bag_index;
    uint8_t gift_slot;
    uint8_t item_bag_index;
    uint8_t item_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LEVELUP_INFO {
    uint32_t new_level;
    uint32_t health;
    uint32_t mana;
    uint32_t rage;
    uint32_t focus;
    uint32_t energy;
    uint32_t happiness;
    uint32_t strength;
    uint32_t agility;
    uint32_t stamina;
    uint32_t intellect;
    uint32_t spirit;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MINIMAP_PING_Client {
    float position_x;
    float position_y;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MINIMAP_PING_Server {
    uint64_t guid;
    float position_x;
    float position_y;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Structure as comment on `https://github1s.com/mangoszero/server/blob/HEAD/src/game/Server/Opcodes.h#L525`.
Not used in azerothcore/trinitycore/mangostwo/arcemu. */
struct SMSG_RESISTLOG {
    uint64_t guid1;
    uint64_t guid2;
    uint32_t unknown1;
    float unknown2;
    float unknown3;
    uint32_t unknown4;
    uint32_t unknown5;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* cmangos and vmangos/mangoszero disagree about packed and extra u8 */
struct SMSG_ENCHANTMENTLOG {
    uint64_t target;
    /* vmangos: message says enchant has faded if empty */
    uint64_t caster;
    uint32_t item;
    uint32_t spell;
    /* vmangos: Only used if `caster` is not 0. */
    bool show_affiliation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_START_MIRROR_TIMER {
    TimerType timer;
    uint32_t time_remaining;
    uint32_t duration;
    uint32_t scale;
    bool is_frozen;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* According to cmangos: 'Default UI handler for this is bugged, args dont match. Gotta do a full update with `SMSG_START_MIRROR_TIMER` to avoid lua errors. */
struct SMSG_PAUSE_MIRROR_TIMER {
    TimerType timer;
    bool is_frozen;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_STOP_MIRROR_TIMER {
    TimerType timer;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PING {
    uint32_t sequence_id;
    uint32_t round_time_in_ms;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PONG {
    uint32_t sequence_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CLEAR_COOLDOWN {
    uint32_t id;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GAMEOBJECT_PAGETEXT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Says which weapon the client pulls out. */
struct CMSG_SETSHEATHED {
    SheathState sheathed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELL_DELAYED {
    uint64_t guid;
    uint32_t delay_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ITEM_TIME_UPDATE {
    uint64_t guid;
    uint32_t duration;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ITEM_ENCHANT_TIME_UPDATE {
    uint64_t item;
    /* Possibly used with EnchantmentSlot enum. */
    uint32_t slot;
    uint32_t duration;
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Seed used by the client to prove in [CMSG_AUTH_SESSION] that it has authenticated with the auth server.
First thing sent when a client connects to the world server.
This message is always unencrypted. */
struct SMSG_AUTH_CHALLENGE {
    uint32_t server_seed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent after receiving [SMSG_AUTH_CHALLENGE].
Followed by [SMSG_AUTH_RESPONSE].
This message is never encrypted. */
struct CMSG_AUTH_SESSION {
    uint32_t build;
    /* This is sent to the client in [CMD_REALM_LIST_Server]. */
    uint32_t server_id;
    std::string username;
    uint32_t client_seed;
    std::array<uint8_t, 20> client_proof;
    uint32_t amount_of_addon_info;
    std::vector<vanilla::AddonInfo> addon_info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Response to [CMSG_AUTH_SESSION].
Usually followed by [CMSG_CHAR_ENUM] if login was successful (`AUTH_OK`).
vmangos/cmangos/mangoszero all have a variant of this message that contains fields from `AUTH_OK` for `AUTH_WAIT_QUEUE` as well (`https://github.com/vmangos/core/blob/cd896d43712ceafecdbd8f005846d7f676e55b4f/src/game/World.cpp#L322`) but this does not seem to be actually be a real thing. */
struct SMSG_AUTH_RESPONSE {
    WorldResult result;
    uint32_t billing_time;
    uint8_t billing_flags;
    uint32_t billing_rested;
    uint32_t queue_position;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PET_CAST_SPELL {
    uint64_t guid;
    uint32_t id;
    vanilla::SpellCastTargets targets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_SAVE_GUILD_EMBLEM_Server {
    GuildEmblemResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_SAVE_GUILD_EMBLEM_Client {
    uint64_t vendor;
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;
    uint32_t background_color;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_TABARDVENDOR_ACTIVATE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PLAY_SPELL_VISUAL {
    uint64_t guid;
    /* mangoszero/mangosone: index from SpellVisualKit.dbc. Set to 0xB3 when buying spells. */
    uint32_t spell_art_kit;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent by the client whenever it reaches a new area.
The client does not send an accurate area. For example when going to Sen'jin Village, the client will send `DUROTAR` (0x0E) and not `SENJIN_VILLAGE` (0x16F). */
struct CMSG_ZONEUPDATE {
    Area area;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PARTYKILLLOG {
    uint64_t player_with_killing_blow;
    uint64_t victim;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Compressed version of [SMSG_UPDATE_OBJECT]. Has the same fields when uncompressed */
struct SMSG_COMPRESSED_UPDATE_OBJECT {
    uint8_t has_transport;
    std::vector<vanilla::Object> objects;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PLAY_SPELL_IMPACT {
    uint64_t guid;
    /* mangoszero/mangosone/azerothcore: index from SpellVisualKit.dbc. Used for visual effect on player with 0x016A */
    uint32_t spell_visual_kit;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_EXPLORATION_EXPERIENCE {
    Area area;
    uint32_t experience;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_RANDOM_ROLL_Client {
    uint32_t minimum;
    uint32_t maximum;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_RANDOM_ROLL_Server {
    uint32_t minimum;
    uint32_t maximum;
    uint32_t actual_roll;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ENVIRONMENTAL_DAMAGE_LOG {
    uint64_t guid;
    EnvironmentalDamageType damage_type;
    uint32_t damage;
    uint32_t absorb;
    uint32_t resist;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_LOOKING_FOR_GROUP_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_LOOKING_FOR_GROUP_Server {
    /* vmangos sets to 0. cmangos/mangoszero don't implement */
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_UNLEARN_SKILL {
    Skill skill;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_REMOVED_SPELL {
    uint16_t spell;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GMTICKET_CREATE {
    GmTicketType category;
    Map map;
    all::Vector3d position;
    std::string message;
    /* cmangos/vmangos/mangoszero: Pre-TBC: 'Reserved for future use'
cmangos/vmangos/mangoszero: Unused */
    std::string reserved_for_future_use;
    uint32_t chat_data_line_count;
    uint32_t amount_of_compressed_chat_data;
    std::vector<uint8_t> compressed_chat_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GMTICKET_CREATE {
    GmTicketResponse response;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GMTICKET_UPDATETEXT {
    /* cmangos does not have this field, vmangos does. */
    GmTicketType ticket_type;
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GMTICKET_UPDATETEXT {
    GmTicketResponse response;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* The purpose of this message is unknown, but it is required in order to prevent the chat box from being a white rectangle that is unable to show text.
Sending this causes the client to send [CMSG_UPDATE_ACCOUNT_DATA] messages.
[CMSG_UPDATE_ACCOUNT_DATA] and [CMSG_REQUEST_ACCOUNT_DATA] act on blocks numbered 0 to 7. The 32 u32s in this message could possibly actually be 8 sets of u8[16] but it could also be a variable sized message. */
struct SMSG_ACCOUNT_DATA_TIMES {
    /* cmangos/vmangos/mangoszero sets to all zeros */
    std::array<uint32_t, 32> data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Respond with [SMSG_UPDATE_ACCOUNT_DATA] */
struct CMSG_REQUEST_ACCOUNT_DATA {
    /* The type of account data being requested. You can check this against the [CacheMask] to know if this is character-specific data or account-wide data. */
    uint32_t data_type;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* This is sent by the client after receiving [SMSG_ACCOUNT_DATA_TIMES]. Client can also request a block through [CMSG_REQUEST_ACCOUNT_DATA]. */
struct CMSG_UPDATE_ACCOUNT_DATA {
    /* Exact meaning unknown. Seems to be between 0 and 7. Block 6 is changed when changing `layout-cache.txt` inside the WTF folder. */
    AccountDataType data_type;
    uint32_t amount_of_compressed_data;
    std::vector<uint8_t> compressed_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent when the client enters the world. */
struct CMSG_GMTICKET_GETTICKET {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GMTICKET_GETTICKET {
    GmTicketStatus status;
    /* cmangos: Ticket text: data, should never exceed 1999 bytes */
    std::string text;
    GmTicketType ticket_type;
    float days_since_ticket_creation;
    float days_since_oldest_ticket_creation;
    float days_since_last_updated;
    GmTicketEscalationStatus escalation_status;
    bool read_by_gm;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GAMEOBJECT_SPAWN_ANIM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GAMEOBJECT_DESPAWN_ANIM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_CORPSE_QUERY_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_CORPSE_QUERY_Server {
    CorpseQueryResult result;
    Map map;
    all::Vector3d position;
    Map corpse_map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GMTICKET_DELETETICKET {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GMTICKET_DELETETICKET {
    GmTicketResponse response;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CHAT_WRONG_FACTION {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GMTICKET_SYSTEMSTATUS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GMTICKET_SYSTEMSTATUS {
    /* vmangos: This only disables the ticket UI at client side and is not fully reliable are we sure this is a uint32? Should ask Zor */
    GmTicketQueueStatus will_accept_tickets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SPIRIT_HEALER_ACTIVATE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SET_REST_START {
    /* cmangos/mangoszero: unknown, may be rest state time or experience */
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPIRIT_HEALER_CONFIRM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GOSSIP_POI {
    uint32_t flags;
    all::Vector2d position;
    uint32_t icon;
    uint32_t data;
    std::string location_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CHAT_IGNORED {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_RANK {
    uint32_t rank_id;
    uint32_t rights;
    std::string rank_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_ADD_RANK {
    std::string rank_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_DEL_RANK {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_SET_PUBLIC_NOTE {
    std::string player_name;
    std::string note;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_SET_OFFICER_NOTE {
    std::string player_name;
    /* vmangos: Max length 31 */
    std::string note;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Message to the client that is has successfully logged into the world and that it should load the map and coordinates.
The positions and orientations do not matter since they can be overwritten in the [SMSG_UPDATE_OBJECT], but the map determines which map the client loads and this is not changeable in [SMSG_UPDATE_OBJECT]. */
struct SMSG_LOGIN_VERIFY_WORLD {
    Map map;
    all::Vector3d position;
    float orientation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SEND_MAIL {
    uint64_t mailbox;
    std::string receiver;
    std::string subject;
    std::string body;
    /* cmangos: stationery? */
    uint32_t unknown1;
    /* cmangos: 0x00000000 */
    uint32_t unknown2;
    uint64_t item;
    uint32_t money;
    uint32_t cash_on_delivery_amount;
    /* cmangos: const 0 */
    uint32_t unknown3;
    /* cmangos: const 0 */
    uint32_t unknown4;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SEND_MAIL_RESULT {
    uint32_t mail_id;
    MailAction action;
    MailResult result;
    uint32_t equip_error;
    /* cmangos/vmangos: item guid low? */
    uint32_t item;
    uint32_t item_count;
    MailResultTwo result2;
    uint32_t equip_error2;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GET_MAIL_LIST {
    uint64_t mailbox;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MAIL_LIST_RESULT {
    std::vector<vanilla::Mail> mails;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BATTLEFIELD_LIST {
    Map map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_BATTLEFIELD_LIST {
    uint64_t battlemaster;
    Map map;
    BattlegroundBracket bracket;
    std::vector<uint32_t> battlegrounds;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BATTLEFIELD_JOIN {
    Map map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_ITEM_TEXT_QUERY {
    uint32_t item_text_id;
    /* vmangos/cmangos/mangoszero: this value can be item id in bag, but it is also mail id */
    uint32_t mail_id;
    /* vmangos/cmangos/mangoszero: maybe something like state - 0x70000000 */
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ITEM_TEXT_QUERY_RESPONSE {
    uint32_t item_text_id;
    /* mangoszero: CString TODO max length 8000 */
    std::string text;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MAIL_TAKE_MONEY {
    uint64_t mailbox;
    uint32_t mail_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MAIL_TAKE_ITEM {
    uint64_t mailbox;
    uint32_t mail_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MAIL_MARK_AS_READ {
    uint64_t mailbox;
    uint32_t mail_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MAIL_RETURN_TO_SENDER {
    uint64_t mailbox_id;
    uint32_t mail_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MAIL_DELETE {
    uint64_t mailbox_id;
    uint32_t mail_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MAIL_CREATE_TEXT_ITEM {
    uint64_t mailbox;
    uint32_t mail_id;
    /* mangoszero/cmangos/vmangos: mailTemplateId, non need, Mail store own 100% correct value anyway */
    uint32_t mail_template_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELLLOGMISS {
    uint32_t id;
    uint64_t caster;
    /* cmangos/mangoszero: can be 0 or 1 */
    uint8_t unknown1;
    std::vector<vanilla::SpellLogMiss> targets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELLLOGEXECUTE {
    uint64_t caster;
    uint32_t spell;
    std::vector<vanilla::SpellLog> logs;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PERIODICAURALOG {
    uint64_t target;
    uint64_t caster;
    uint32_t spell;
    std::vector<vanilla::AuraLog> auras;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELLDAMAGESHIELD {
    uint64_t victim;
    uint64_t caster;
    uint32_t damage;
    SpellSchool school;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELLNONMELEEDAMAGELOG {
    uint64_t target;
    uint64_t attacker;
    uint32_t spell;
    uint32_t damage;
    SpellSchool school;
    uint32_t absorbed_damage;
    /* cmangos/mangoszero/vmangos: sent as int32 */
    uint32_t resisted;
    /* cmangos/mangoszero/vmangos: if 1, then client show spell name (example: %s's ranged shot hit %s for %u school or %s suffers %u school damage from %s's spell_name */
    bool periodic_log;
    uint8_t unused;
    uint32_t blocked;
    HitInfo hit_info;
    /* cmangos has some that might be correct `https://github.com/cmangos/mangos-classic/blob/524a39412dae7946d06e4b8f319f45b615075815/src/game/Entities/Unit.cpp#L5497`. */
    uint8_t extend_flag;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LEARN_TALENT {
    Talent talent;
    uint32_t requested_rank;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* vmangos: this opcode can be used in two ways: Either set explicit new status or toggle old status */
struct CMSG_TOGGLE_PVP {
    struct Set {
        bool enable_pvp;
    };

    std::shared_ptr<Set> set;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ZONE_UNDER_ATTACK {
    Area zone_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_AUCTION_HELLO_Client {
    uint64_t auctioneer;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_AUCTION_HELLO_Server {
    uint64_t auctioneer;
    AuctionHouse auction_house;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUCTION_SELL_ITEM {
    uint64_t auctioneer;
    uint64_t item;
    uint32_t starting_bid;
    uint32_t buyout;
    uint32_t auction_duration_in_minutes;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUCTION_REMOVE_ITEM {
    uint64_t auctioneer;
    uint32_t auction_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUCTION_LIST_ITEMS {
    uint64_t auctioneer;
    uint32_t list_start_item;
    std::string searched_name;
    uint8_t minimum_level;
    uint8_t maximum_level;
    uint32_t auction_slot_id;
    uint32_t auction_main_category;
    uint32_t auction_sub_category;
    ItemQuality auction_quality;
    uint8_t usable;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUCTION_LIST_OWNER_ITEMS {
    uint64_t auctioneer;
    uint32_t list_from;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUCTION_PLACE_BID {
    uint64_t auctioneer;
    uint32_t auction_id;
    uint32_t price;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_AUCTION_COMMAND_RESULT {
    uint32_t auction_id;
    AuctionCommandAction action;
    AuctionCommandResult result;
    uint32_t auction_outbid1;
    InventoryResult inventory_result;
    uint64_t higher_bidder;
    uint32_t new_bid;
    uint32_t auction_outbid2;
    AuctionCommandResultTwo result2;
    InventoryResult inventory_result2;
    uint64_t higher_bidder2;
    uint32_t new_bid2;
    uint32_t auction_outbid3;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_AUCTION_LIST_RESULT {
    std::vector<vanilla::AuctionListItem> auctions;
    uint32_t total_amount_of_auctions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_AUCTION_OWNER_LIST_RESULT {
    std::vector<vanilla::AuctionListItem> auctions;
    uint32_t total_amount_of_auctions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_AUCTION_BIDDER_NOTIFICATION {
    AuctionHouse auction_house;
    uint32_t auction_id;
    uint64_t bidder;
    /* vmangos/cmangos: if 0, client shows ERR_AUCTION_WON_S, else ERR_AUCTION_OUTBID_S */
    uint32_t won;
    uint32_t out_bid;
    uint32_t item_template;
    uint32_t item_random_property_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* vmangos/cmangos/mangoszero: this message causes on client to display: 'Your auction sold' */
struct SMSG_AUCTION_OWNER_NOTIFICATION {
    uint32_t auction_id;
    /* vmangos/cmangos/mangoszero: if 0, client shows ERR_AUCTION_EXPIRED_S, else ERR_AUCTION_SOLD_S (works only when guid==0) */
    uint32_t bid;
    uint32_t auction_out_bid;
    uint64_t bidder;
    uint32_t item;
    uint32_t item_random_property_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* According to cmangos/azerothcore/trinitycore/mangostwo. Not present in vmangos. */
struct SMSG_PROCRESIST {
    uint64_t caster;
    uint64_t target;
    uint32_t id;
    LogFormat log_format;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_DISPEL_FAILED {
    uint64_t caster;
    uint64_t target;
    uint32_t amount_of_spells;
    std::vector<uint32_t> spells;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELLORDAMAGE_IMMUNE {
    uint64_t caster;
    uint64_t target;
    uint32_t id;
    bool debug_log_format;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUCTION_LIST_BIDDER_ITEMS {
    uint64_t auctioneer;
    uint32_t start_from_page;
    std::vector<uint32_t> outbid_item_ids;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_AUCTION_BIDDER_LIST_RESULT {
    std::vector<vanilla::AuctionListItem> auctions;
    uint32_t total_amount_of_auctions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SET_FLAT_SPELL_MODIFIER {
    uint8_t eff;
    uint8_t op;
    uint32_t value;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SET_PCT_SPELL_MODIFIER {
    uint8_t eff;
    uint8_t op;
    uint32_t value;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SET_AMMO {
    uint32_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CORPSE_RECLAIM_DELAY {
    uint32_t delay;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent when the client enters the world. */
struct CMSG_SET_ACTIVE_MOVER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PET_CANCEL_AURA {
    uint64_t guid;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CANCEL_AUTO_REPEAT_SPELL {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_LIST_STABLED_PETS_Client {
    uint64_t npc;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_LIST_STABLED_PETS_Server {
    uint64_t npc;
    uint8_t stable_slots;
    std::vector<vanilla::StabledPet> pets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_STABLE_PET {
    uint64_t stable_master;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_UNSTABLE_PET {
    uint64_t stable_master;
    uint32_t pet_number;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BUY_STABLE_SLOT {
    uint64_t npc;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_STABLE_RESULT {
    StableResult result;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_STABLE_SWAP_PET {
    uint64_t npc;
    uint32_t pet_slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_QUEST_PUSH_RESULT {
    uint64_t guid;
    QuestPartyMessage message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PLAY_MUSIC {
    uint32_t sound_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* vmangos: Nostalrius: ignored by client if unit is not loaded */
struct SMSG_PLAY_OBJECT_SOUND {
    uint32_t sound_id;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_REQUEST_PET_INFO {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_FAR_SIGHT {
    FarSightOperation operation;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELLDISPELLOG {
    uint64_t victim;
    uint64_t caster;
    std::vector<uint32_t> spells;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_CHANGE_SUB_GROUP {
    std::string name;
    uint8_t group_number;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_REQUEST_PARTY_MEMBER_STATS {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_SWAP_SUB_GROUP {
    std::string name;
    std::string swap_with_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUTOSTORE_BANK_ITEM {
    uint8_t bag_index;
    uint8_t slot_index;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AUTOBANK_ITEM {
    uint8_t bag_index;
    uint8_t slot_index;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* mangoszero/vmangos: No idea when this is called. */
struct MSG_QUERY_NEXT_MAIL_TIME_Server {
    /* mangoszero sets 0 if has unread mail, -86400.0f (0xC7A8C000) if not
vmangos sets 0 if has unread mail, -1.0f if not
cmangos has the behavior of mangoszero except when there are unread mails. This is TODO. */
    float unread_mails;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent when the client enters the world. */
struct MSG_QUERY_NEXT_MAIL_TIME_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* cmangos/vmangos/mangoszero: deliver undelivered mail */
struct SMSG_RECEIVED_MAIL {
    /* cmangos/vmangos sends 0 as u32, mangoszero sends 0 as f32 */
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* used when player leaves raid group inside instance */
struct SMSG_RAID_GROUP_ONLY {
    uint32_t homebind_timer;
    RaidGroupError error;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PVP_CREDIT {
    uint32_t honor_points;
    uint64_t victim;
    PvpRank rank;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_AUCTION_REMOVED_NOTIFICATION {
    uint32_t item;
    uint32_t item_template;
    uint32_t random_property_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_RAID_CONVERT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GROUP_ASSISTANT_LEADER {
    uint64_t guid;
    bool set_assistant;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BUYBACK_ITEM {
    uint64_t guid;
    BuybackSlot slot;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SERVER_MESSAGE {
    ServerMessageType message_type;
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MEETINGSTONE_JOIN {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MEETINGSTONE_LEAVE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MEETINGSTONE_SETQUEUE {
    Area area;
    MeetingStoneStatus status;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent when the client enters the world. */
struct CMSG_MEETINGSTONE_INFO {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MEETINGSTONE_COMPLETE {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MEETINGSTONE_IN_PROGRESS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MEETINGSTONE_MEMBER_ADDED {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_CANCEL_GROWTH_AURA {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CANCEL_AUTO_REPEAT {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_STANDSTATE_UPDATE {
    UnitStandState state;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOOT_ALL_PASSED {
    uint64_t looted_target;
    uint32_t loot_slot;
    uint32_t item;
    uint32_t item_random_property_id;
    /* vmangos/mangoszero: Always set to 0. */
    uint32_t item_random_suffix_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOOT_ROLL_WON {
    uint64_t looted_target;
    uint32_t loot_slot;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint64_t winning_player;
    /* rollnumber related to SMSG_LOOT_ROLL */
    uint8_t winning_roll;
    /* Rolltype related to SMSG_LOOT_ROLL */
    RollVote vote;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LOOT_ROLL {
    uint64_t item;
    uint32_t item_slot;
    RollVote vote;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOOT_START_ROLL {
    uint64_t creature;
    uint32_t loot_slot;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint32_t countdown_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOOT_ROLL {
    uint64_t creature;
    uint32_t loot_slot;
    uint64_t player;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    /* vmangos/cmangos/mangoszero: 0: Need for: `item_name` > 127: you passed on: `item_name`      Roll number */
    uint8_t roll_number;
    RollVote vote;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LOOT_MASTER_GIVE {
    uint64_t loot;
    uint8_t slot_id;
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_LOOT_MASTER_LIST {
    std::vector<uint64_t> guids;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SET_FORCED_REACTIONS {
    std::vector<vanilla::ForcedReaction> reactions;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELL_FAILED_OTHER {
    uint64_t caster;
    uint32_t id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GAMEOBJECT_RESET_STATE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_REPAIR_ITEM {
    uint64_t npc;
    uint64_t item;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CHAT_PLAYER_NOT_FOUND {
    std::string name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_TALENT_WIPE_CONFIRM_Client {
    uint64_t wiping_npc;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* cmangos/vmangos/mangoszero returns guid 0 and unknown 0 when talents can not be reset
cmangos/vmangos/mangoszero casts spell 14876 when resetting */
struct MSG_TALENT_WIPE_CONFIRM_Server {
    uint64_t wiping_npc;
    uint32_t cost_in_copper;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SUMMON_REQUEST {
    uint64_t summoner;
    Area area;
    uint32_t auto_decline_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SUMMON_RESPONSE {
    uint64_t summoner;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MONSTER_MOVE_TRANSPORT {
    uint64_t guid;
    uint64_t transport;
    all::Vector3d spline_point;
    uint32_t spline_id;
    MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all::Vector3d position;
    SplineFlag spline_flags;
    uint32_t duration;
    std::vector<::wow_world_messages::all::Vector3d> splines;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Not implemented in any Wrath emulator. */
struct SMSG_PET_BROKEN {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_FEATHER_FALL_Server {
    uint64_t player;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_WATER_WALK {
    uint64_t player;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SELF_RES {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FEIGN_DEATH_RESISTED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_DUEL_COUNTDOWN {
    uint32_t time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_AREA_TRIGGER_MESSAGE {
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_TOGGLE_HELM {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_TOGGLE_CLOAK {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_MEETINGSTONE_JOINFAILED {
    MeetingStoneFailure reason;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PLAYER_SKINNED {
    bool spirit_released;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Signals to the client that the death caused 10% durability loss. */
struct SMSG_DURABILITY_DAMAGE_DEATH {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SET_ACTIONBAR_TOGGLES {
    /* Emulators set PLAYER_FIELD_BYTES[2] to this unless it's 0. */
    uint8_t action_bar;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_PETITION_RENAME {
    uint64_t petition;
    std::string new_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_smsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write_cmsg(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_INIT_WORLD_STATES {
    Map map;
    Area area;
    std::vector<vanilla::WorldState> states;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_UPDATE_WORLD_STATE {
    vanilla::WorldState state;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_ITEM_NAME_QUERY {
    uint32_t item;
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ITEM_NAME_QUERY_RESPONSE {
    uint32_t item;
    std::string item_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PET_ACTION_FEEDBACK {
    PetFeedback feedback;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Request of new name for character. This is only sent by the client if RENAME is set in the [CharacterFlags] of [SMSG_CHAR_ENUM] and the client tries to login. */
struct CMSG_CHAR_RENAME {
    uint64_t character;
    std::string new_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Response to [CMSG_CHAR_RENAME]. */
struct SMSG_CHAR_RENAME {
    WorldResult result;
    uint64_t character;
    std::string new_name;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MOVE_SPLINE_DONE {
    vanilla::MovementInfo info;
    uint32_t movement_counter;
    uint32_t unknown1;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MOVE_FALL_RESET {
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_INSTANCE_SAVE_CREATED {
    /* All emulators across all versions set to 0 */
    uint32_t unknown;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_RAID_INSTANCE_INFO {
    std::vector<vanilla::RaidInfo> raid_infos;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent when the client enters the world. */
struct CMSG_REQUEST_RAID_INFO {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MOVE_TIME_SKIPPED {
    uint64_t guid;
    uint32_t lag;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MOVE_FEATHER_FALL_ACK {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla::MovementInfo info;
    uint32_t apply;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MOVE_WATER_WALK_ACK {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla::MovementInfo info;
    uint32_t apply;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_MOVE_NOT_ACTIVE_MOVER {
    uint64_t old_mover;
    vanilla::MovementInfo info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PLAY_SOUND {
    uint32_t sound_id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Sent when the client enters the world. */
struct CMSG_BATTLEFIELD_STATUS {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_BATTLEFIELD_STATUS {
    /* vmangos: players can be in 3 queues at the same time (0..2) */
    uint32_t queue_slot;
    Map map;
    BattlegroundBracket bracket;
    uint32_t client_instance_id;
    StatusId status_id;
    uint32_t average_wait_time_in_ms;
    uint32_t time_in_queue_in_ms;
    uint32_t time_to_remove_in_queue_in_ms;
    uint32_t time_to_bg_autoleave_in_ms;
    uint32_t time_to_bg_start_in_ms;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BATTLEFIELD_PORT {
    Map map;
    BattlefieldPortAction action;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_INSPECT_HONOR_STATS_Client {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_INSPECT_HONOR_STATS_Server {
    uint64_t guid;
    PvpRank highest_rank;
    uint32_t today_honorable_and_dishonorable;
    uint16_t yesterday_honorable;
    /* vmangos: Unknown (deprecated, yesterday dishonourable?) */
    uint16_t unknown1;
    uint16_t last_week_honorable;
    /* vmangos: Unknown (deprecated, last week dishonourable?) */
    uint16_t unknown2;
    uint16_t this_week_honorable;
    /* vmangos: Unknown (deprecated, this week dishonourable?) */
    uint16_t unknown3;
    uint32_t lifetime_honorable;
    uint32_t lifetime_dishonorable;
    uint32_t yesterday_honor;
    uint32_t last_week_honor;
    uint32_t this_week_honor;
    PvpRank last_week_standing;
    uint8_t rank_progress_bar;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BATTLEMASTER_HELLO {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FORCE_WALK_SPEED_CHANGE {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_FORCE_WALK_SPEED_CHANGE_ACK {
    uint64_t guid;
    uint32_t counter;
    vanilla::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FORCE_SWIM_BACK_SPEED_CHANGE {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK {
    uint64_t guid;
    uint32_t counter;
    vanilla::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_FORCE_TURN_RATE_CHANGE {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_FORCE_TURN_RATE_CHANGE_ACK {
    uint64_t guid;
    uint32_t counter;
    vanilla::MovementInfo info;
    float new_speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_PVP_LOG_DATA_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_PVP_LOG_DATA_Server {
    BattlegroundEndStatus status;
    BattlegroundWinner winner;
    std::vector<vanilla::BattlegroundPlayer> players;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_LEAVE_BATTLEFIELD {
    Map map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AREA_SPIRIT_HEALER_QUERY {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_AREA_SPIRIT_HEALER_QUEUE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_AREA_SPIRIT_HEALER_TIME {
    uint64_t guid;
    uint32_t next_resurrect_time;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_WARDEN_DATA {
    uint32_t amount_of_encrypted_data;
    std::vector<uint8_t> encrypted_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_WARDEN_DATA {
    uint32_t amount_of_encrypted_data;
    std::vector<uint8_t> encrypted_data;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GROUP_JOINED_BATTLEGROUND {
    BgTypeId id;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_BATTLEGROUND_PLAYER_POSITIONS_Client {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_BATTLEGROUND_PLAYER_POSITIONS_Server {
    std::vector<vanilla::BattlegroundPlayerPosition> teammates;
    std::vector<vanilla::BattlegroundPlayerPosition> carriers;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PET_STOP_ATTACK {
    uint64_t pet;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_BINDER_CONFIRM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_BATTLEGROUND_PLAYER_JOINED {
    uint64_t player;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_BATTLEGROUND_PLAYER_LEFT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_BATTLEMASTER_JOIN {
    /* vmangos: battlemaster guid, or player guid if joining queue from BG portal */
    uint64_t guid;
    Map map;
    /* vmangos: 0 if First Available selected */
    uint32_t instance_id;
    bool join_as_group;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_ADDON_INFO {
    uint32_t amount_of_addons;
    std::vector<vanilla::Addon> addons;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PET_UNLEARN {
    uint64_t pet;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PET_UNLEARN_CONFIRM {
    uint64_t pet;
    uint32_t talent_reset_cost;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PARTY_MEMBER_STATS_FULL {
    uint64_t player;
    GroupUpdateFlags mask;
    GroupMemberOnlineStatus status;
    uint16_t current_health;
    uint16_t max_health;
    Power power;
    uint16_t current_power;
    uint16_t max_power;
    uint16_t level;
    Area area;
    /* cmangos: float cast to u16 */
    uint16_t position_x;
    /* cmangos: float cast to u16 */
    uint16_t position_y;
    /* cmangos: In all checked pre-2.x data of packets included only positive auras */
    AuraMask auras;
    uint64_t pet;
    std::string pet_name;
    uint16_t pet_display_id;
    uint16_t pet_current_health;
    uint16_t pet_max_health;
    Power pet_power_type;
    uint16_t pet_current_power;
    uint16_t pet_max_power;
    AuraMask pet_auras;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_PET_SPELL_AUTOCAST {
    uint64_t guid;
    uint32_t id;
    bool autocast_enabled;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_WEATHER {
    WeatherType weather_type;
    float grade;
    uint32_t sound_id;
    WeatherChangeType change;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_RAID_INSTANCE_MESSAGE {
    RaidInstanceMessage message_type;
    Map map;
    uint32_t time_left;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_COMPRESSED_MOVES {
    uint32_t amount_of_moves;
    std::vector<vanilla::CompressedMove> moves;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GUILD_INFO_TEXT {
    std::string guild_info;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_CHAT_RESTRICTED {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Informs the client that the run speed of a unit has changed.
Mangos sends this to third parties that aren't having their speed changed and [SMSG_FORCE_RUN_SPEED_CHANGE] to the client that has their run speed changed. */
struct SMSG_SPLINE_SET_RUN_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_SET_RUN_BACK_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_SET_SWIM_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_SET_WALK_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_SET_SWIM_BACK_SPEED {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_SET_TURN_RATE {
    uint64_t guid;
    float speed;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_UNROOT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_FEATHER_FALL {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_NORMAL_FALL {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_SET_HOVER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_UNSET_HOVER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_WATER_WALK {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_LAND_WALK {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_START_SWIM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_STOP_SWIM {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_SET_RUN_MODE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_SET_WALK_MODE {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_ACTIVATETAXIEXPRESS {
    uint64_t guid;
    /* vmangos/mangosone: Never used. */
    uint32_t total_cost;
    std::vector<uint32_t> nodes;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SET_FACTION_INACTIVE {
    Faction faction;
    bool inactive;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_SET_WATCHED_FACTION {
    Faction faction;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_MOVE_TIME_SKIPPED_Server {
    uint64_t player;
    uint32_t time_skipped;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPLINE_MOVE_ROOT {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_INVALIDATE_PLAYER {
    uint64_t guid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_RESET_INSTANCES {

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_INSTANCE_RESET {
    Map map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_INSTANCE_RESET_FAILED {
    InstanceResetFailedReason reason;
    Map map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_UPDATE_LAST_INSTANCE {
    Map map;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_RAID_TARGET_UPDATE_Client {
    RaidTargetIndex target_index;
    uint64_t target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_RAID_TARGET_UPDATE_Server {
    RaidTargetUpdateType update_type;
    std::array<vanilla::RaidTargetUpdate, 8> raid_targets;
    vanilla::RaidTargetUpdate raid_target;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_RAID_READY_CHECK_Client {
    struct Answer {
        uint8_t state;
    };

    std::shared_ptr<Answer> answer;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct MSG_RAID_READY_CHECK_Server {
    struct StateCheck {
        uint64_t guid;
        uint8_t state;
    };

    std::shared_ptr<StateCheck> state_check;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_PET_ACTION_SOUND {
    uint64_t guid;
    PetTalkReason reason;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Not implemented in any Wrath emulators. */
struct SMSG_PET_DISMISS_SOUND {
    uint32_t sound_id;
    all::Vector3d position;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_GM_TICKET_STATUS_UPDATE {
    GmTicketStatusResponse response;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct CMSG_GMSURVEY_SUBMIT {
    /* cmangos: Survey ID: found in GMSurveySurveys.dbc */
    uint32_t survey_id;
    std::array<vanilla::GmSurveyQuestion, 10> questions;
    /* cmangos: Answer comment: Unused in stock UI, can be only set by calling Lua function
cmangos: Answer comment max sizes in bytes: Vanilla - 8106:8110, TBC - 11459:11463, Wrath - 582:586 */
    std::string answer_comment;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_UPDATE_INSTANCE_OWNERSHIP {
    bool player_is_saved_to_a_raid;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELLINSTAKILLLOG {
    uint64_t target;
    uint32_t spell;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_SPELL_UPDATE_CHAIN_TARGETS {
    uint64_t caster;
    uint32_t spell;
    std::vector<uint64_t> targets;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

/* Not implemented in Wrath or TBC emus. Only implemented in cmangos. */
struct SMSG_EXPECTED_SPAM_RECORDS {
    std::vector<std::string> records;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

struct SMSG_DEFENSE_MESSAGE {
    Area area;
    std::string message;

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;
};

class ClientOpcode {
    enum class Opcode {
        NONE = 0xFFFF,
        CMSG_BOOTME = 1,
        CMSG_DBLOOKUP = 2,
        CMSG_WORLD_TELEPORT = 8,
        CMSG_TELEPORT_TO_UNIT = 9,
        CMSG_CHAR_CREATE = 54,
        CMSG_CHAR_ENUM = 55,
        CMSG_CHAR_DELETE = 56,
        CMSG_PLAYER_LOGIN = 61,
        CMSG_PLAYER_LOGOUT = 74,
        CMSG_LOGOUT_REQUEST = 75,
        CMSG_LOGOUT_CANCEL = 78,
        CMSG_NAME_QUERY = 80,
        CMSG_PET_NAME_QUERY = 82,
        CMSG_GUILD_QUERY = 84,
        CMSG_ITEM_QUERY_SINGLE = 86,
        CMSG_PAGE_TEXT_QUERY = 90,
        CMSG_QUEST_QUERY = 92,
        CMSG_GAMEOBJECT_QUERY = 94,
        CMSG_CREATURE_QUERY = 96,
        CMSG_WHO = 98,
        CMSG_WHOIS = 100,
        CMSG_FRIEND_LIST = 102,
        CMSG_ADD_FRIEND = 105,
        CMSG_DEL_FRIEND = 106,
        CMSG_ADD_IGNORE = 108,
        CMSG_DEL_IGNORE = 109,
        CMSG_GROUP_INVITE = 110,
        CMSG_GROUP_ACCEPT = 114,
        CMSG_GROUP_DECLINE = 115,
        CMSG_GROUP_UNINVITE = 117,
        CMSG_GROUP_UNINVITE_GUID = 118,
        CMSG_GROUP_SET_LEADER = 120,
        CMSG_LOOT_METHOD = 122,
        CMSG_GROUP_DISBAND = 123,
        CMSG_GUILD_CREATE = 129,
        CMSG_GUILD_INVITE = 130,
        CMSG_GUILD_ACCEPT = 132,
        CMSG_GUILD_DECLINE = 133,
        CMSG_GUILD_INFO = 135,
        CMSG_GUILD_ROSTER = 137,
        CMSG_GUILD_PROMOTE = 139,
        CMSG_GUILD_DEMOTE = 140,
        CMSG_GUILD_LEAVE = 141,
        CMSG_GUILD_REMOVE = 142,
        CMSG_GUILD_DISBAND = 143,
        CMSG_GUILD_LEADER = 144,
        CMSG_GUILD_MOTD = 145,
        CMSG_MESSAGECHAT = 149,
        CMSG_JOIN_CHANNEL = 151,
        CMSG_LEAVE_CHANNEL = 152,
        CMSG_CHANNEL_LIST = 154,
        CMSG_CHANNEL_PASSWORD = 156,
        CMSG_CHANNEL_SET_OWNER = 157,
        CMSG_CHANNEL_OWNER = 158,
        CMSG_CHANNEL_MODERATOR = 159,
        CMSG_CHANNEL_UNMODERATOR = 160,
        CMSG_CHANNEL_MUTE = 161,
        CMSG_CHANNEL_UNMUTE = 162,
        CMSG_CHANNEL_INVITE = 163,
        CMSG_CHANNEL_KICK = 164,
        CMSG_CHANNEL_BAN = 165,
        CMSG_CHANNEL_UNBAN = 166,
        CMSG_CHANNEL_ANNOUNCEMENTS = 167,
        CMSG_CHANNEL_MODERATE = 168,
        CMSG_USE_ITEM = 171,
        CMSG_OPEN_ITEM = 172,
        CMSG_READ_ITEM = 173,
        CMSG_GAMEOBJ_USE = 177,
        CMSG_AREATRIGGER = 180,
        MSG_MOVE_START_FORWARD = 181,
        MSG_MOVE_START_BACKWARD = 182,
        MSG_MOVE_STOP = 183,
        MSG_MOVE_START_STRAFE_LEFT = 184,
        MSG_MOVE_START_STRAFE_RIGHT = 185,
        MSG_MOVE_STOP_STRAFE = 186,
        MSG_MOVE_JUMP = 187,
        MSG_MOVE_START_TURN_LEFT = 188,
        MSG_MOVE_START_TURN_RIGHT = 189,
        MSG_MOVE_STOP_TURN = 190,
        MSG_MOVE_START_PITCH_UP = 191,
        MSG_MOVE_START_PITCH_DOWN = 192,
        MSG_MOVE_STOP_PITCH = 193,
        MSG_MOVE_SET_RUN_MODE = 194,
        MSG_MOVE_SET_WALK_MODE = 195,
        MSG_MOVE_TELEPORT_ACK = 199,
        MSG_MOVE_FALL_LAND = 201,
        MSG_MOVE_START_SWIM = 202,
        MSG_MOVE_STOP_SWIM = 203,
        MSG_MOVE_SET_FACING = 218,
        MSG_MOVE_SET_PITCH = 219,
        MSG_MOVE_WORLDPORT_ACK = 220,
        CMSG_MOVE_SET_RAW_POSITION = 225,
        CMSG_FORCE_RUN_SPEED_CHANGE_ACK = 227,
        CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK = 229,
        CMSG_FORCE_SWIM_SPEED_CHANGE_ACK = 231,
        CMSG_FORCE_MOVE_ROOT_ACK = 233,
        CMSG_FORCE_MOVE_UNROOT_ACK = 235,
        MSG_MOVE_HEARTBEAT = 238,
        CMSG_MOVE_KNOCK_BACK_ACK = 240,
        CMSG_MOVE_HOVER_ACK = 246,
        CMSG_NEXT_CINEMATIC_CAMERA = 251,
        CMSG_COMPLETE_CINEMATIC = 252,
        CMSG_TUTORIAL_FLAG = 254,
        CMSG_TUTORIAL_CLEAR = 255,
        CMSG_TUTORIAL_RESET = 256,
        CMSG_STANDSTATECHANGE = 257,
        CMSG_EMOTE = 258,
        CMSG_TEXT_EMOTE = 260,
        CMSG_AUTOSTORE_LOOT_ITEM = 264,
        CMSG_AUTOEQUIP_ITEM = 266,
        CMSG_AUTOSTORE_BAG_ITEM = 267,
        CMSG_SWAP_ITEM = 268,
        CMSG_SWAP_INV_ITEM = 269,
        CMSG_SPLIT_ITEM = 270,
        CMSG_AUTOEQUIP_ITEM_SLOT = 271,
        CMSG_DESTROYITEM = 273,
        CMSG_INSPECT = 276,
        CMSG_INITIATE_TRADE = 278,
        CMSG_BEGIN_TRADE = 279,
        CMSG_BUSY_TRADE = 280,
        CMSG_IGNORE_TRADE = 281,
        CMSG_ACCEPT_TRADE = 282,
        CMSG_UNACCEPT_TRADE = 283,
        CMSG_CANCEL_TRADE = 284,
        CMSG_SET_TRADE_ITEM = 285,
        CMSG_CLEAR_TRADE_ITEM = 286,
        CMSG_SET_TRADE_GOLD = 287,
        CMSG_SET_FACTION_ATWAR = 293,
        CMSG_SET_ACTION_BUTTON = 296,
        CMSG_CAST_SPELL = 302,
        CMSG_CANCEL_CAST = 303,
        CMSG_CANCEL_AURA = 310,
        CMSG_CANCEL_CHANNELLING = 315,
        CMSG_SET_SELECTION = 317,
        CMSG_SET_TARGET_OBSOLETE = 318,
        CMSG_ATTACKSWING = 321,
        CMSG_ATTACKSTOP = 322,
        CMSG_REPOP_REQUEST = 346,
        CMSG_RESURRECT_RESPONSE = 348,
        CMSG_LOOT = 349,
        CMSG_LOOT_MONEY = 350,
        CMSG_LOOT_RELEASE = 351,
        CMSG_DUEL_ACCEPTED = 364,
        CMSG_DUEL_CANCELLED = 365,
        CMSG_MOUNTSPECIAL_ANIM = 369,
        CMSG_PET_SET_ACTION = 372,
        CMSG_PET_ACTION = 373,
        CMSG_PET_ABANDON = 374,
        CMSG_PET_RENAME = 375,
        CMSG_GOSSIP_HELLO = 379,
        CMSG_GOSSIP_SELECT_OPTION = 380,
        CMSG_NPC_TEXT_QUERY = 383,
        CMSG_QUESTGIVER_STATUS_QUERY = 386,
        CMSG_QUESTGIVER_HELLO = 388,
        CMSG_QUESTGIVER_QUERY_QUEST = 390,
        CMSG_QUESTGIVER_QUEST_AUTOLAUNCH = 391,
        CMSG_QUESTGIVER_ACCEPT_QUEST = 393,
        CMSG_QUESTGIVER_COMPLETE_QUEST = 394,
        CMSG_QUESTGIVER_REQUEST_REWARD = 396,
        CMSG_QUESTGIVER_CHOOSE_REWARD = 398,
        CMSG_QUESTGIVER_CANCEL = 400,
        CMSG_QUESTLOG_SWAP_QUEST = 403,
        CMSG_QUESTLOG_REMOVE_QUEST = 404,
        CMSG_QUEST_CONFIRM_ACCEPT = 411,
        CMSG_PUSHQUESTTOPARTY = 413,
        CMSG_LIST_INVENTORY = 414,
        CMSG_SELL_ITEM = 416,
        CMSG_BUY_ITEM = 418,
        CMSG_BUY_ITEM_IN_SLOT = 419,
        CMSG_TAXINODE_STATUS_QUERY = 426,
        CMSG_TAXIQUERYAVAILABLENODES = 428,
        CMSG_ACTIVATETAXI = 429,
        CMSG_TRAINER_LIST = 432,
        CMSG_TRAINER_BUY_SPELL = 434,
        CMSG_BINDER_ACTIVATE = 437,
        CMSG_BANKER_ACTIVATE = 439,
        CMSG_BUY_BANK_SLOT = 441,
        CMSG_PETITION_SHOWLIST = 443,
        CMSG_PETITION_BUY = 445,
        CMSG_PETITION_SHOW_SIGNATURES = 446,
        CMSG_PETITION_SIGN = 448,
        MSG_PETITION_DECLINE = 450,
        CMSG_OFFER_PETITION = 451,
        CMSG_TURN_IN_PETITION = 452,
        CMSG_PETITION_QUERY = 454,
        CMSG_BUG = 458,
        CMSG_PLAYED_TIME = 460,
        CMSG_QUERY_TIME = 462,
        CMSG_RECLAIM_CORPSE = 466,
        CMSG_WRAP_ITEM = 467,
        MSG_MINIMAP_PING = 469,
        CMSG_PING = 476,
        CMSG_SETSHEATHED = 480,
        CMSG_AUTH_SESSION = 493,
        CMSG_PET_CAST_SPELL = 496,
        MSG_SAVE_GUILD_EMBLEM = 497,
        MSG_TABARDVENDOR_ACTIVATE = 498,
        CMSG_ZONEUPDATE = 500,
        MSG_RANDOM_ROLL = 507,
        MSG_LOOKING_FOR_GROUP = 511,
        CMSG_UNLEARN_SKILL = 514,
        CMSG_GMTICKET_CREATE = 517,
        CMSG_GMTICKET_UPDATETEXT = 519,
        CMSG_REQUEST_ACCOUNT_DATA = 522,
        CMSG_UPDATE_ACCOUNT_DATA = 523,
        CMSG_GMTICKET_GETTICKET = 529,
        MSG_CORPSE_QUERY = 534,
        CMSG_GMTICKET_DELETETICKET = 535,
        CMSG_GMTICKET_SYSTEMSTATUS = 538,
        CMSG_SPIRIT_HEALER_ACTIVATE = 540,
        CMSG_CHAT_IGNORED = 549,
        CMSG_GUILD_RANK = 561,
        CMSG_GUILD_ADD_RANK = 562,
        CMSG_GUILD_DEL_RANK = 563,
        CMSG_GUILD_SET_PUBLIC_NOTE = 564,
        CMSG_GUILD_SET_OFFICER_NOTE = 565,
        CMSG_SEND_MAIL = 568,
        CMSG_GET_MAIL_LIST = 570,
        CMSG_BATTLEFIELD_LIST = 572,
        CMSG_BATTLEFIELD_JOIN = 574,
        CMSG_ITEM_TEXT_QUERY = 579,
        CMSG_MAIL_TAKE_MONEY = 581,
        CMSG_MAIL_TAKE_ITEM = 582,
        CMSG_MAIL_MARK_AS_READ = 583,
        CMSG_MAIL_RETURN_TO_SENDER = 584,
        CMSG_MAIL_DELETE = 585,
        CMSG_MAIL_CREATE_TEXT_ITEM = 586,
        CMSG_LEARN_TALENT = 593,
        CMSG_TOGGLE_PVP = 595,
        MSG_AUCTION_HELLO = 597,
        CMSG_AUCTION_SELL_ITEM = 598,
        CMSG_AUCTION_REMOVE_ITEM = 599,
        CMSG_AUCTION_LIST_ITEMS = 600,
        CMSG_AUCTION_LIST_OWNER_ITEMS = 601,
        CMSG_AUCTION_PLACE_BID = 602,
        CMSG_AUCTION_LIST_BIDDER_ITEMS = 612,
        CMSG_SET_AMMO = 616,
        CMSG_SET_ACTIVE_MOVER = 618,
        CMSG_PET_CANCEL_AURA = 619,
        CMSG_CANCEL_AUTO_REPEAT_SPELL = 621,
        MSG_LIST_STABLED_PETS = 623,
        CMSG_STABLE_PET = 624,
        CMSG_UNSTABLE_PET = 625,
        CMSG_BUY_STABLE_SLOT = 626,
        CMSG_STABLE_SWAP_PET = 629,
        MSG_QUEST_PUSH_RESULT = 630,
        CMSG_REQUEST_PET_INFO = 633,
        CMSG_FAR_SIGHT = 634,
        CMSG_GROUP_CHANGE_SUB_GROUP = 638,
        CMSG_REQUEST_PARTY_MEMBER_STATS = 639,
        CMSG_GROUP_SWAP_SUB_GROUP = 640,
        CMSG_AUTOSTORE_BANK_ITEM = 642,
        CMSG_AUTOBANK_ITEM = 643,
        MSG_QUERY_NEXT_MAIL_TIME = 644,
        CMSG_GROUP_RAID_CONVERT = 654,
        CMSG_GROUP_ASSISTANT_LEADER = 655,
        CMSG_BUYBACK_ITEM = 656,
        CMSG_MEETINGSTONE_JOIN = 658,
        CMSG_MEETINGSTONE_LEAVE = 659,
        CMSG_MEETINGSTONE_INFO = 662,
        CMSG_CANCEL_GROWTH_AURA = 667,
        CMSG_LOOT_ROLL = 672,
        CMSG_LOOT_MASTER_GIVE = 675,
        CMSG_REPAIR_ITEM = 680,
        MSG_TALENT_WIPE_CONFIRM = 682,
        CMSG_SUMMON_RESPONSE = 684,
        MSG_MOVE_WATER_WALK = 689,
        CMSG_SELF_RES = 691,
        CMSG_TOGGLE_HELM = 697,
        CMSG_TOGGLE_CLOAK = 698,
        CMSG_SET_ACTIONBAR_TOGGLES = 703,
        MSG_PETITION_RENAME = 705,
        CMSG_ITEM_NAME_QUERY = 708,
        CMSG_CHAR_RENAME = 711,
        CMSG_MOVE_SPLINE_DONE = 713,
        CMSG_MOVE_FALL_RESET = 714,
        CMSG_REQUEST_RAID_INFO = 717,
        CMSG_MOVE_TIME_SKIPPED = 718,
        CMSG_MOVE_FEATHER_FALL_ACK = 719,
        CMSG_MOVE_WATER_WALK_ACK = 720,
        CMSG_MOVE_NOT_ACTIVE_MOVER = 721,
        CMSG_BATTLEFIELD_STATUS = 723,
        CMSG_BATTLEFIELD_PORT = 725,
        MSG_INSPECT_HONOR_STATS = 726,
        CMSG_BATTLEMASTER_HELLO = 727,
        CMSG_FORCE_WALK_SPEED_CHANGE_ACK = 731,
        CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK = 733,
        CMSG_FORCE_TURN_RATE_CHANGE_ACK = 735,
        MSG_PVP_LOG_DATA = 736,
        CMSG_LEAVE_BATTLEFIELD = 737,
        CMSG_AREA_SPIRIT_HEALER_QUERY = 738,
        CMSG_AREA_SPIRIT_HEALER_QUEUE = 739,
        CMSG_WARDEN_DATA = 743,
        MSG_BATTLEGROUND_PLAYER_POSITIONS = 745,
        CMSG_PET_STOP_ATTACK = 746,
        CMSG_BATTLEMASTER_JOIN = 750,
        CMSG_PET_UNLEARN = 752,
        CMSG_PET_SPELL_AUTOCAST = 755,
        CMSG_GUILD_INFO_TEXT = 764,
        CMSG_ACTIVATETAXIEXPRESS = 786,
        CMSG_SET_FACTION_INACTIVE = 791,
        CMSG_SET_WATCHED_FACTION = 792,
        CMSG_RESET_INSTANCES = 797,
        MSG_RAID_TARGET_UPDATE = 801,
        MSG_RAID_READY_CHECK = 802,
        CMSG_GMSURVEY_SUBMIT = 810,
    } opcode;

    union {
        vanilla::CMSG_BOOTME CMSG_BOOTME;
        vanilla::CMSG_DBLOOKUP CMSG_DBLOOKUP;
        vanilla::CMSG_WORLD_TELEPORT CMSG_WORLD_TELEPORT;
        vanilla::CMSG_TELEPORT_TO_UNIT CMSG_TELEPORT_TO_UNIT;
        vanilla::CMSG_CHAR_CREATE CMSG_CHAR_CREATE;
        vanilla::CMSG_CHAR_ENUM CMSG_CHAR_ENUM;
        vanilla::CMSG_CHAR_DELETE CMSG_CHAR_DELETE;
        vanilla::CMSG_PLAYER_LOGIN CMSG_PLAYER_LOGIN;
        vanilla::CMSG_PLAYER_LOGOUT CMSG_PLAYER_LOGOUT;
        vanilla::CMSG_LOGOUT_REQUEST CMSG_LOGOUT_REQUEST;
        vanilla::CMSG_LOGOUT_CANCEL CMSG_LOGOUT_CANCEL;
        vanilla::CMSG_NAME_QUERY CMSG_NAME_QUERY;
        vanilla::CMSG_PET_NAME_QUERY CMSG_PET_NAME_QUERY;
        vanilla::CMSG_GUILD_QUERY CMSG_GUILD_QUERY;
        vanilla::CMSG_ITEM_QUERY_SINGLE CMSG_ITEM_QUERY_SINGLE;
        vanilla::CMSG_PAGE_TEXT_QUERY CMSG_PAGE_TEXT_QUERY;
        vanilla::CMSG_QUEST_QUERY CMSG_QUEST_QUERY;
        vanilla::CMSG_GAMEOBJECT_QUERY CMSG_GAMEOBJECT_QUERY;
        vanilla::CMSG_CREATURE_QUERY CMSG_CREATURE_QUERY;
        vanilla::CMSG_WHO CMSG_WHO;
        vanilla::CMSG_WHOIS CMSG_WHOIS;
        vanilla::CMSG_FRIEND_LIST CMSG_FRIEND_LIST;
        vanilla::CMSG_ADD_FRIEND CMSG_ADD_FRIEND;
        vanilla::CMSG_DEL_FRIEND CMSG_DEL_FRIEND;
        vanilla::CMSG_ADD_IGNORE CMSG_ADD_IGNORE;
        vanilla::CMSG_DEL_IGNORE CMSG_DEL_IGNORE;
        vanilla::CMSG_GROUP_INVITE CMSG_GROUP_INVITE;
        vanilla::CMSG_GROUP_ACCEPT CMSG_GROUP_ACCEPT;
        vanilla::CMSG_GROUP_DECLINE CMSG_GROUP_DECLINE;
        vanilla::CMSG_GROUP_UNINVITE CMSG_GROUP_UNINVITE;
        vanilla::CMSG_GROUP_UNINVITE_GUID CMSG_GROUP_UNINVITE_GUID;
        vanilla::CMSG_GROUP_SET_LEADER CMSG_GROUP_SET_LEADER;
        vanilla::CMSG_LOOT_METHOD CMSG_LOOT_METHOD;
        vanilla::CMSG_GROUP_DISBAND CMSG_GROUP_DISBAND;
        vanilla::CMSG_GUILD_CREATE CMSG_GUILD_CREATE;
        vanilla::CMSG_GUILD_INVITE CMSG_GUILD_INVITE;
        vanilla::CMSG_GUILD_ACCEPT CMSG_GUILD_ACCEPT;
        vanilla::CMSG_GUILD_DECLINE CMSG_GUILD_DECLINE;
        vanilla::CMSG_GUILD_INFO CMSG_GUILD_INFO;
        vanilla::CMSG_GUILD_ROSTER CMSG_GUILD_ROSTER;
        vanilla::CMSG_GUILD_PROMOTE CMSG_GUILD_PROMOTE;
        vanilla::CMSG_GUILD_DEMOTE CMSG_GUILD_DEMOTE;
        vanilla::CMSG_GUILD_LEAVE CMSG_GUILD_LEAVE;
        vanilla::CMSG_GUILD_REMOVE CMSG_GUILD_REMOVE;
        vanilla::CMSG_GUILD_DISBAND CMSG_GUILD_DISBAND;
        vanilla::CMSG_GUILD_LEADER CMSG_GUILD_LEADER;
        vanilla::CMSG_GUILD_MOTD CMSG_GUILD_MOTD;
        vanilla::CMSG_MESSAGECHAT CMSG_MESSAGECHAT;
        vanilla::CMSG_JOIN_CHANNEL CMSG_JOIN_CHANNEL;
        vanilla::CMSG_LEAVE_CHANNEL CMSG_LEAVE_CHANNEL;
        vanilla::CMSG_CHANNEL_LIST CMSG_CHANNEL_LIST;
        vanilla::CMSG_CHANNEL_PASSWORD CMSG_CHANNEL_PASSWORD;
        vanilla::CMSG_CHANNEL_SET_OWNER CMSG_CHANNEL_SET_OWNER;
        vanilla::CMSG_CHANNEL_OWNER CMSG_CHANNEL_OWNER;
        vanilla::CMSG_CHANNEL_MODERATOR CMSG_CHANNEL_MODERATOR;
        vanilla::CMSG_CHANNEL_UNMODERATOR CMSG_CHANNEL_UNMODERATOR;
        vanilla::CMSG_CHANNEL_MUTE CMSG_CHANNEL_MUTE;
        vanilla::CMSG_CHANNEL_UNMUTE CMSG_CHANNEL_UNMUTE;
        vanilla::CMSG_CHANNEL_INVITE CMSG_CHANNEL_INVITE;
        vanilla::CMSG_CHANNEL_KICK CMSG_CHANNEL_KICK;
        vanilla::CMSG_CHANNEL_BAN CMSG_CHANNEL_BAN;
        vanilla::CMSG_CHANNEL_UNBAN CMSG_CHANNEL_UNBAN;
        vanilla::CMSG_CHANNEL_ANNOUNCEMENTS CMSG_CHANNEL_ANNOUNCEMENTS;
        vanilla::CMSG_CHANNEL_MODERATE CMSG_CHANNEL_MODERATE;
        vanilla::CMSG_USE_ITEM CMSG_USE_ITEM;
        vanilla::CMSG_OPEN_ITEM CMSG_OPEN_ITEM;
        vanilla::CMSG_READ_ITEM CMSG_READ_ITEM;
        vanilla::CMSG_GAMEOBJ_USE CMSG_GAMEOBJ_USE;
        vanilla::CMSG_AREATRIGGER CMSG_AREATRIGGER;
        vanilla::MSG_MOVE_START_FORWARD_Client MSG_MOVE_START_FORWARD;
        vanilla::MSG_MOVE_START_BACKWARD_Client MSG_MOVE_START_BACKWARD;
        vanilla::MSG_MOVE_STOP_Client MSG_MOVE_STOP;
        vanilla::MSG_MOVE_START_STRAFE_LEFT_Client MSG_MOVE_START_STRAFE_LEFT;
        vanilla::MSG_MOVE_START_STRAFE_RIGHT_Client MSG_MOVE_START_STRAFE_RIGHT;
        vanilla::MSG_MOVE_STOP_STRAFE_Client MSG_MOVE_STOP_STRAFE;
        vanilla::MSG_MOVE_JUMP_Client MSG_MOVE_JUMP;
        vanilla::MSG_MOVE_START_TURN_LEFT_Client MSG_MOVE_START_TURN_LEFT;
        vanilla::MSG_MOVE_START_TURN_RIGHT_Client MSG_MOVE_START_TURN_RIGHT;
        vanilla::MSG_MOVE_STOP_TURN_Client MSG_MOVE_STOP_TURN;
        vanilla::MSG_MOVE_START_PITCH_UP_Client MSG_MOVE_START_PITCH_UP;
        vanilla::MSG_MOVE_START_PITCH_DOWN_Client MSG_MOVE_START_PITCH_DOWN;
        vanilla::MSG_MOVE_STOP_PITCH_Client MSG_MOVE_STOP_PITCH;
        vanilla::MSG_MOVE_SET_RUN_MODE_Client MSG_MOVE_SET_RUN_MODE;
        vanilla::MSG_MOVE_SET_WALK_MODE_Client MSG_MOVE_SET_WALK_MODE;
        vanilla::MSG_MOVE_TELEPORT_ACK_Client MSG_MOVE_TELEPORT_ACK;
        vanilla::MSG_MOVE_FALL_LAND_Client MSG_MOVE_FALL_LAND;
        vanilla::MSG_MOVE_START_SWIM_Client MSG_MOVE_START_SWIM;
        vanilla::MSG_MOVE_STOP_SWIM_Client MSG_MOVE_STOP_SWIM;
        vanilla::MSG_MOVE_SET_FACING_Client MSG_MOVE_SET_FACING;
        vanilla::MSG_MOVE_SET_PITCH_Client MSG_MOVE_SET_PITCH;
        vanilla::MSG_MOVE_WORLDPORT_ACK MSG_MOVE_WORLDPORT_ACK;
        vanilla::CMSG_MOVE_SET_RAW_POSITION CMSG_MOVE_SET_RAW_POSITION;
        vanilla::CMSG_FORCE_RUN_SPEED_CHANGE_ACK CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
        vanilla::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
        vanilla::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
        vanilla::CMSG_FORCE_MOVE_ROOT_ACK CMSG_FORCE_MOVE_ROOT_ACK;
        vanilla::CMSG_FORCE_MOVE_UNROOT_ACK CMSG_FORCE_MOVE_UNROOT_ACK;
        vanilla::MSG_MOVE_HEARTBEAT_Client MSG_MOVE_HEARTBEAT;
        vanilla::CMSG_MOVE_KNOCK_BACK_ACK CMSG_MOVE_KNOCK_BACK_ACK;
        vanilla::CMSG_MOVE_HOVER_ACK CMSG_MOVE_HOVER_ACK;
        vanilla::CMSG_NEXT_CINEMATIC_CAMERA CMSG_NEXT_CINEMATIC_CAMERA;
        vanilla::CMSG_COMPLETE_CINEMATIC CMSG_COMPLETE_CINEMATIC;
        vanilla::CMSG_TUTORIAL_FLAG CMSG_TUTORIAL_FLAG;
        vanilla::CMSG_TUTORIAL_CLEAR CMSG_TUTORIAL_CLEAR;
        vanilla::CMSG_TUTORIAL_RESET CMSG_TUTORIAL_RESET;
        vanilla::CMSG_STANDSTATECHANGE CMSG_STANDSTATECHANGE;
        vanilla::CMSG_EMOTE CMSG_EMOTE;
        vanilla::CMSG_TEXT_EMOTE CMSG_TEXT_EMOTE;
        vanilla::CMSG_AUTOSTORE_LOOT_ITEM CMSG_AUTOSTORE_LOOT_ITEM;
        vanilla::CMSG_AUTOEQUIP_ITEM CMSG_AUTOEQUIP_ITEM;
        vanilla::CMSG_AUTOSTORE_BAG_ITEM CMSG_AUTOSTORE_BAG_ITEM;
        vanilla::CMSG_SWAP_ITEM CMSG_SWAP_ITEM;
        vanilla::CMSG_SWAP_INV_ITEM CMSG_SWAP_INV_ITEM;
        vanilla::CMSG_SPLIT_ITEM CMSG_SPLIT_ITEM;
        vanilla::CMSG_AUTOEQUIP_ITEM_SLOT CMSG_AUTOEQUIP_ITEM_SLOT;
        vanilla::CMSG_DESTROYITEM CMSG_DESTROYITEM;
        vanilla::CMSG_INSPECT CMSG_INSPECT;
        vanilla::CMSG_INITIATE_TRADE CMSG_INITIATE_TRADE;
        vanilla::CMSG_BEGIN_TRADE CMSG_BEGIN_TRADE;
        vanilla::CMSG_BUSY_TRADE CMSG_BUSY_TRADE;
        vanilla::CMSG_IGNORE_TRADE CMSG_IGNORE_TRADE;
        vanilla::CMSG_ACCEPT_TRADE CMSG_ACCEPT_TRADE;
        vanilla::CMSG_UNACCEPT_TRADE CMSG_UNACCEPT_TRADE;
        vanilla::CMSG_CANCEL_TRADE CMSG_CANCEL_TRADE;
        vanilla::CMSG_SET_TRADE_ITEM CMSG_SET_TRADE_ITEM;
        vanilla::CMSG_CLEAR_TRADE_ITEM CMSG_CLEAR_TRADE_ITEM;
        vanilla::CMSG_SET_TRADE_GOLD CMSG_SET_TRADE_GOLD;
        vanilla::CMSG_SET_FACTION_ATWAR CMSG_SET_FACTION_ATWAR;
        vanilla::CMSG_SET_ACTION_BUTTON CMSG_SET_ACTION_BUTTON;
        vanilla::CMSG_CAST_SPELL CMSG_CAST_SPELL;
        vanilla::CMSG_CANCEL_CAST CMSG_CANCEL_CAST;
        vanilla::CMSG_CANCEL_AURA CMSG_CANCEL_AURA;
        vanilla::CMSG_CANCEL_CHANNELLING CMSG_CANCEL_CHANNELLING;
        vanilla::CMSG_SET_SELECTION CMSG_SET_SELECTION;
        vanilla::CMSG_SET_TARGET_OBSOLETE CMSG_SET_TARGET_OBSOLETE;
        vanilla::CMSG_ATTACKSWING CMSG_ATTACKSWING;
        vanilla::CMSG_ATTACKSTOP CMSG_ATTACKSTOP;
        vanilla::CMSG_REPOP_REQUEST CMSG_REPOP_REQUEST;
        vanilla::CMSG_RESURRECT_RESPONSE CMSG_RESURRECT_RESPONSE;
        vanilla::CMSG_LOOT CMSG_LOOT;
        vanilla::CMSG_LOOT_MONEY CMSG_LOOT_MONEY;
        vanilla::CMSG_LOOT_RELEASE CMSG_LOOT_RELEASE;
        vanilla::CMSG_DUEL_ACCEPTED CMSG_DUEL_ACCEPTED;
        vanilla::CMSG_DUEL_CANCELLED CMSG_DUEL_CANCELLED;
        vanilla::CMSG_MOUNTSPECIAL_ANIM CMSG_MOUNTSPECIAL_ANIM;
        vanilla::CMSG_PET_SET_ACTION CMSG_PET_SET_ACTION;
        vanilla::CMSG_PET_ACTION CMSG_PET_ACTION;
        vanilla::CMSG_PET_ABANDON CMSG_PET_ABANDON;
        vanilla::CMSG_PET_RENAME CMSG_PET_RENAME;
        vanilla::CMSG_GOSSIP_HELLO CMSG_GOSSIP_HELLO;
        vanilla::CMSG_GOSSIP_SELECT_OPTION CMSG_GOSSIP_SELECT_OPTION;
        vanilla::CMSG_NPC_TEXT_QUERY CMSG_NPC_TEXT_QUERY;
        vanilla::CMSG_QUESTGIVER_STATUS_QUERY CMSG_QUESTGIVER_STATUS_QUERY;
        vanilla::CMSG_QUESTGIVER_HELLO CMSG_QUESTGIVER_HELLO;
        vanilla::CMSG_QUESTGIVER_QUERY_QUEST CMSG_QUESTGIVER_QUERY_QUEST;
        vanilla::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH CMSG_QUESTGIVER_QUEST_AUTOLAUNCH;
        vanilla::CMSG_QUESTGIVER_ACCEPT_QUEST CMSG_QUESTGIVER_ACCEPT_QUEST;
        vanilla::CMSG_QUESTGIVER_COMPLETE_QUEST CMSG_QUESTGIVER_COMPLETE_QUEST;
        vanilla::CMSG_QUESTGIVER_REQUEST_REWARD CMSG_QUESTGIVER_REQUEST_REWARD;
        vanilla::CMSG_QUESTGIVER_CHOOSE_REWARD CMSG_QUESTGIVER_CHOOSE_REWARD;
        vanilla::CMSG_QUESTGIVER_CANCEL CMSG_QUESTGIVER_CANCEL;
        vanilla::CMSG_QUESTLOG_SWAP_QUEST CMSG_QUESTLOG_SWAP_QUEST;
        vanilla::CMSG_QUESTLOG_REMOVE_QUEST CMSG_QUESTLOG_REMOVE_QUEST;
        vanilla::CMSG_QUEST_CONFIRM_ACCEPT CMSG_QUEST_CONFIRM_ACCEPT;
        vanilla::CMSG_PUSHQUESTTOPARTY CMSG_PUSHQUESTTOPARTY;
        vanilla::CMSG_LIST_INVENTORY CMSG_LIST_INVENTORY;
        vanilla::CMSG_SELL_ITEM CMSG_SELL_ITEM;
        vanilla::CMSG_BUY_ITEM CMSG_BUY_ITEM;
        vanilla::CMSG_BUY_ITEM_IN_SLOT CMSG_BUY_ITEM_IN_SLOT;
        vanilla::CMSG_TAXINODE_STATUS_QUERY CMSG_TAXINODE_STATUS_QUERY;
        vanilla::CMSG_TAXIQUERYAVAILABLENODES CMSG_TAXIQUERYAVAILABLENODES;
        vanilla::CMSG_ACTIVATETAXI CMSG_ACTIVATETAXI;
        vanilla::CMSG_TRAINER_LIST CMSG_TRAINER_LIST;
        vanilla::CMSG_TRAINER_BUY_SPELL CMSG_TRAINER_BUY_SPELL;
        vanilla::CMSG_BINDER_ACTIVATE CMSG_BINDER_ACTIVATE;
        vanilla::CMSG_BANKER_ACTIVATE CMSG_BANKER_ACTIVATE;
        vanilla::CMSG_BUY_BANK_SLOT CMSG_BUY_BANK_SLOT;
        vanilla::CMSG_PETITION_SHOWLIST CMSG_PETITION_SHOWLIST;
        vanilla::CMSG_PETITION_BUY CMSG_PETITION_BUY;
        vanilla::CMSG_PETITION_SHOW_SIGNATURES CMSG_PETITION_SHOW_SIGNATURES;
        vanilla::CMSG_PETITION_SIGN CMSG_PETITION_SIGN;
        vanilla::MSG_PETITION_DECLINE MSG_PETITION_DECLINE;
        vanilla::CMSG_OFFER_PETITION CMSG_OFFER_PETITION;
        vanilla::CMSG_TURN_IN_PETITION CMSG_TURN_IN_PETITION;
        vanilla::CMSG_PETITION_QUERY CMSG_PETITION_QUERY;
        vanilla::CMSG_BUG CMSG_BUG;
        vanilla::CMSG_PLAYED_TIME CMSG_PLAYED_TIME;
        vanilla::CMSG_QUERY_TIME CMSG_QUERY_TIME;
        vanilla::CMSG_RECLAIM_CORPSE CMSG_RECLAIM_CORPSE;
        vanilla::CMSG_WRAP_ITEM CMSG_WRAP_ITEM;
        vanilla::MSG_MINIMAP_PING_Client MSG_MINIMAP_PING;
        vanilla::CMSG_PING CMSG_PING;
        vanilla::CMSG_SETSHEATHED CMSG_SETSHEATHED;
        vanilla::CMSG_AUTH_SESSION CMSG_AUTH_SESSION;
        vanilla::CMSG_PET_CAST_SPELL CMSG_PET_CAST_SPELL;
        vanilla::MSG_SAVE_GUILD_EMBLEM_Client MSG_SAVE_GUILD_EMBLEM;
        vanilla::MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE;
        vanilla::CMSG_ZONEUPDATE CMSG_ZONEUPDATE;
        vanilla::MSG_RANDOM_ROLL_Client MSG_RANDOM_ROLL;
        vanilla::MSG_LOOKING_FOR_GROUP_Client MSG_LOOKING_FOR_GROUP;
        vanilla::CMSG_UNLEARN_SKILL CMSG_UNLEARN_SKILL;
        vanilla::CMSG_GMTICKET_CREATE CMSG_GMTICKET_CREATE;
        vanilla::CMSG_GMTICKET_UPDATETEXT CMSG_GMTICKET_UPDATETEXT;
        vanilla::CMSG_REQUEST_ACCOUNT_DATA CMSG_REQUEST_ACCOUNT_DATA;
        vanilla::CMSG_UPDATE_ACCOUNT_DATA CMSG_UPDATE_ACCOUNT_DATA;
        vanilla::CMSG_GMTICKET_GETTICKET CMSG_GMTICKET_GETTICKET;
        vanilla::MSG_CORPSE_QUERY_Client MSG_CORPSE_QUERY;
        vanilla::CMSG_GMTICKET_DELETETICKET CMSG_GMTICKET_DELETETICKET;
        vanilla::CMSG_GMTICKET_SYSTEMSTATUS CMSG_GMTICKET_SYSTEMSTATUS;
        vanilla::CMSG_SPIRIT_HEALER_ACTIVATE CMSG_SPIRIT_HEALER_ACTIVATE;
        vanilla::CMSG_CHAT_IGNORED CMSG_CHAT_IGNORED;
        vanilla::CMSG_GUILD_RANK CMSG_GUILD_RANK;
        vanilla::CMSG_GUILD_ADD_RANK CMSG_GUILD_ADD_RANK;
        vanilla::CMSG_GUILD_DEL_RANK CMSG_GUILD_DEL_RANK;
        vanilla::CMSG_GUILD_SET_PUBLIC_NOTE CMSG_GUILD_SET_PUBLIC_NOTE;
        vanilla::CMSG_GUILD_SET_OFFICER_NOTE CMSG_GUILD_SET_OFFICER_NOTE;
        vanilla::CMSG_SEND_MAIL CMSG_SEND_MAIL;
        vanilla::CMSG_GET_MAIL_LIST CMSG_GET_MAIL_LIST;
        vanilla::CMSG_BATTLEFIELD_LIST CMSG_BATTLEFIELD_LIST;
        vanilla::CMSG_BATTLEFIELD_JOIN CMSG_BATTLEFIELD_JOIN;
        vanilla::CMSG_ITEM_TEXT_QUERY CMSG_ITEM_TEXT_QUERY;
        vanilla::CMSG_MAIL_TAKE_MONEY CMSG_MAIL_TAKE_MONEY;
        vanilla::CMSG_MAIL_TAKE_ITEM CMSG_MAIL_TAKE_ITEM;
        vanilla::CMSG_MAIL_MARK_AS_READ CMSG_MAIL_MARK_AS_READ;
        vanilla::CMSG_MAIL_RETURN_TO_SENDER CMSG_MAIL_RETURN_TO_SENDER;
        vanilla::CMSG_MAIL_DELETE CMSG_MAIL_DELETE;
        vanilla::CMSG_MAIL_CREATE_TEXT_ITEM CMSG_MAIL_CREATE_TEXT_ITEM;
        vanilla::CMSG_LEARN_TALENT CMSG_LEARN_TALENT;
        vanilla::CMSG_TOGGLE_PVP CMSG_TOGGLE_PVP;
        vanilla::MSG_AUCTION_HELLO_Client MSG_AUCTION_HELLO;
        vanilla::CMSG_AUCTION_SELL_ITEM CMSG_AUCTION_SELL_ITEM;
        vanilla::CMSG_AUCTION_REMOVE_ITEM CMSG_AUCTION_REMOVE_ITEM;
        vanilla::CMSG_AUCTION_LIST_ITEMS CMSG_AUCTION_LIST_ITEMS;
        vanilla::CMSG_AUCTION_LIST_OWNER_ITEMS CMSG_AUCTION_LIST_OWNER_ITEMS;
        vanilla::CMSG_AUCTION_PLACE_BID CMSG_AUCTION_PLACE_BID;
        vanilla::CMSG_AUCTION_LIST_BIDDER_ITEMS CMSG_AUCTION_LIST_BIDDER_ITEMS;
        vanilla::CMSG_SET_AMMO CMSG_SET_AMMO;
        vanilla::CMSG_SET_ACTIVE_MOVER CMSG_SET_ACTIVE_MOVER;
        vanilla::CMSG_PET_CANCEL_AURA CMSG_PET_CANCEL_AURA;
        vanilla::CMSG_CANCEL_AUTO_REPEAT_SPELL CMSG_CANCEL_AUTO_REPEAT_SPELL;
        vanilla::MSG_LIST_STABLED_PETS_Client MSG_LIST_STABLED_PETS;
        vanilla::CMSG_STABLE_PET CMSG_STABLE_PET;
        vanilla::CMSG_UNSTABLE_PET CMSG_UNSTABLE_PET;
        vanilla::CMSG_BUY_STABLE_SLOT CMSG_BUY_STABLE_SLOT;
        vanilla::CMSG_STABLE_SWAP_PET CMSG_STABLE_SWAP_PET;
        vanilla::MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT;
        vanilla::CMSG_REQUEST_PET_INFO CMSG_REQUEST_PET_INFO;
        vanilla::CMSG_FAR_SIGHT CMSG_FAR_SIGHT;
        vanilla::CMSG_GROUP_CHANGE_SUB_GROUP CMSG_GROUP_CHANGE_SUB_GROUP;
        vanilla::CMSG_REQUEST_PARTY_MEMBER_STATS CMSG_REQUEST_PARTY_MEMBER_STATS;
        vanilla::CMSG_GROUP_SWAP_SUB_GROUP CMSG_GROUP_SWAP_SUB_GROUP;
        vanilla::CMSG_AUTOSTORE_BANK_ITEM CMSG_AUTOSTORE_BANK_ITEM;
        vanilla::CMSG_AUTOBANK_ITEM CMSG_AUTOBANK_ITEM;
        vanilla::MSG_QUERY_NEXT_MAIL_TIME_Client MSG_QUERY_NEXT_MAIL_TIME;
        vanilla::CMSG_GROUP_RAID_CONVERT CMSG_GROUP_RAID_CONVERT;
        vanilla::CMSG_GROUP_ASSISTANT_LEADER CMSG_GROUP_ASSISTANT_LEADER;
        vanilla::CMSG_BUYBACK_ITEM CMSG_BUYBACK_ITEM;
        vanilla::CMSG_MEETINGSTONE_JOIN CMSG_MEETINGSTONE_JOIN;
        vanilla::CMSG_MEETINGSTONE_LEAVE CMSG_MEETINGSTONE_LEAVE;
        vanilla::CMSG_MEETINGSTONE_INFO CMSG_MEETINGSTONE_INFO;
        vanilla::CMSG_CANCEL_GROWTH_AURA CMSG_CANCEL_GROWTH_AURA;
        vanilla::CMSG_LOOT_ROLL CMSG_LOOT_ROLL;
        vanilla::CMSG_LOOT_MASTER_GIVE CMSG_LOOT_MASTER_GIVE;
        vanilla::CMSG_REPAIR_ITEM CMSG_REPAIR_ITEM;
        vanilla::MSG_TALENT_WIPE_CONFIRM_Client MSG_TALENT_WIPE_CONFIRM;
        vanilla::CMSG_SUMMON_RESPONSE CMSG_SUMMON_RESPONSE;
        vanilla::MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK;
        vanilla::CMSG_SELF_RES CMSG_SELF_RES;
        vanilla::CMSG_TOGGLE_HELM CMSG_TOGGLE_HELM;
        vanilla::CMSG_TOGGLE_CLOAK CMSG_TOGGLE_CLOAK;
        vanilla::CMSG_SET_ACTIONBAR_TOGGLES CMSG_SET_ACTIONBAR_TOGGLES;
        vanilla::MSG_PETITION_RENAME MSG_PETITION_RENAME;
        vanilla::CMSG_ITEM_NAME_QUERY CMSG_ITEM_NAME_QUERY;
        vanilla::CMSG_CHAR_RENAME CMSG_CHAR_RENAME;
        vanilla::CMSG_MOVE_SPLINE_DONE CMSG_MOVE_SPLINE_DONE;
        vanilla::CMSG_MOVE_FALL_RESET CMSG_MOVE_FALL_RESET;
        vanilla::CMSG_REQUEST_RAID_INFO CMSG_REQUEST_RAID_INFO;
        vanilla::CMSG_MOVE_TIME_SKIPPED CMSG_MOVE_TIME_SKIPPED;
        vanilla::CMSG_MOVE_FEATHER_FALL_ACK CMSG_MOVE_FEATHER_FALL_ACK;
        vanilla::CMSG_MOVE_WATER_WALK_ACK CMSG_MOVE_WATER_WALK_ACK;
        vanilla::CMSG_MOVE_NOT_ACTIVE_MOVER CMSG_MOVE_NOT_ACTIVE_MOVER;
        vanilla::CMSG_BATTLEFIELD_STATUS CMSG_BATTLEFIELD_STATUS;
        vanilla::CMSG_BATTLEFIELD_PORT CMSG_BATTLEFIELD_PORT;
        vanilla::MSG_INSPECT_HONOR_STATS_Client MSG_INSPECT_HONOR_STATS;
        vanilla::CMSG_BATTLEMASTER_HELLO CMSG_BATTLEMASTER_HELLO;
        vanilla::CMSG_FORCE_WALK_SPEED_CHANGE_ACK CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
        vanilla::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
        vanilla::CMSG_FORCE_TURN_RATE_CHANGE_ACK CMSG_FORCE_TURN_RATE_CHANGE_ACK;
        vanilla::MSG_PVP_LOG_DATA_Client MSG_PVP_LOG_DATA;
        vanilla::CMSG_LEAVE_BATTLEFIELD CMSG_LEAVE_BATTLEFIELD;
        vanilla::CMSG_AREA_SPIRIT_HEALER_QUERY CMSG_AREA_SPIRIT_HEALER_QUERY;
        vanilla::CMSG_AREA_SPIRIT_HEALER_QUEUE CMSG_AREA_SPIRIT_HEALER_QUEUE;
        vanilla::CMSG_WARDEN_DATA CMSG_WARDEN_DATA;
        vanilla::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client MSG_BATTLEGROUND_PLAYER_POSITIONS;
        vanilla::CMSG_PET_STOP_ATTACK CMSG_PET_STOP_ATTACK;
        vanilla::CMSG_BATTLEMASTER_JOIN CMSG_BATTLEMASTER_JOIN;
        vanilla::CMSG_PET_UNLEARN CMSG_PET_UNLEARN;
        vanilla::CMSG_PET_SPELL_AUTOCAST CMSG_PET_SPELL_AUTOCAST;
        vanilla::CMSG_GUILD_INFO_TEXT CMSG_GUILD_INFO_TEXT;
        vanilla::CMSG_ACTIVATETAXIEXPRESS CMSG_ACTIVATETAXIEXPRESS;
        vanilla::CMSG_SET_FACTION_INACTIVE CMSG_SET_FACTION_INACTIVE;
        vanilla::CMSG_SET_WATCHED_FACTION CMSG_SET_WATCHED_FACTION;
        vanilla::CMSG_RESET_INSTANCES CMSG_RESET_INSTANCES;
        vanilla::MSG_RAID_TARGET_UPDATE_Client MSG_RAID_TARGET_UPDATE;
        vanilla::MSG_RAID_READY_CHECK_Client MSG_RAID_READY_CHECK;
        vanilla::CMSG_GMSURVEY_SUBMIT CMSG_GMSURVEY_SUBMIT;
    };

public:
    WOW_WORLD_MESSAGES_CPP_EXPORT bool is_none() const noexcept {
        return opcode == Opcode::NONE;
    }
    WOW_WORLD_MESSAGES_CPP_EXPORT static ClientOpcode read(Reader& reader, const std::function<void(unsigned char*, size_t)>& decrypt);

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;


    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode() : opcode(Opcode::NONE), CMSG_BOOTME() {}

    /* 1 destructor */
    WOW_WORLD_MESSAGES_CPP_EXPORT ~ClientOpcode();

    /* 2 copy constructor */
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(const ClientOpcode& other);
    /* 3 copy assignment */
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode& operator=(const ClientOpcode& other);
    /* 4 move constructor */
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(ClientOpcode&& other) noexcept;

    /* 5 move assignment */
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode& operator=(ClientOpcode&& other) noexcept;

    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BOOTME&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_DBLOOKUP&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_WORLD_TELEPORT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TELEPORT_TO_UNIT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHAR_CREATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHAR_ENUM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHAR_DELETE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PLAYER_LOGIN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PLAYER_LOGOUT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LOGOUT_REQUEST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LOGOUT_CANCEL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_NAME_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PET_NAME_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ITEM_QUERY_SINGLE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PAGE_TEXT_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUEST_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GAMEOBJECT_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CREATURE_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_WHO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_WHOIS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_FRIEND_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ADD_FRIEND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_DEL_FRIEND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ADD_IGNORE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_DEL_IGNORE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_INVITE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_ACCEPT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_DECLINE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_UNINVITE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_UNINVITE_GUID&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_SET_LEADER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LOOT_METHOD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_DISBAND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_CREATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_INVITE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_ACCEPT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_DECLINE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_INFO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_ROSTER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_PROMOTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_DEMOTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_LEAVE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_REMOVE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_DISBAND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_LEADER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_MOTD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MESSAGECHAT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_JOIN_CHANNEL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LEAVE_CHANNEL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_PASSWORD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_SET_OWNER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_OWNER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_MODERATOR&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_UNMODERATOR&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_MUTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_UNMUTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_INVITE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_KICK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_BAN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_UNBAN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_ANNOUNCEMENTS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHANNEL_MODERATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_USE_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_OPEN_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_READ_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GAMEOBJ_USE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AREATRIGGER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_START_FORWARD_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_START_BACKWARD_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_STOP_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_START_STRAFE_LEFT_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_START_STRAFE_RIGHT_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_STOP_STRAFE_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_JUMP_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_START_TURN_LEFT_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_START_TURN_RIGHT_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_STOP_TURN_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_START_PITCH_UP_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_START_PITCH_DOWN_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_STOP_PITCH_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_SET_RUN_MODE_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_SET_WALK_MODE_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_TELEPORT_ACK_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_FALL_LAND_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_START_SWIM_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_STOP_SWIM_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_SET_FACING_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_SET_PITCH_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_WORLDPORT_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MOVE_SET_RAW_POSITION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_FORCE_RUN_SPEED_CHANGE_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_FORCE_MOVE_ROOT_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_FORCE_MOVE_UNROOT_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_HEARTBEAT_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MOVE_KNOCK_BACK_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MOVE_HOVER_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_NEXT_CINEMATIC_CAMERA&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_COMPLETE_CINEMATIC&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TUTORIAL_FLAG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TUTORIAL_CLEAR&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TUTORIAL_RESET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_STANDSTATECHANGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_EMOTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TEXT_EMOTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUTOSTORE_LOOT_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUTOEQUIP_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUTOSTORE_BAG_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SWAP_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SWAP_INV_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SPLIT_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUTOEQUIP_ITEM_SLOT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_DESTROYITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_INSPECT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_INITIATE_TRADE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BEGIN_TRADE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BUSY_TRADE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_IGNORE_TRADE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ACCEPT_TRADE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_UNACCEPT_TRADE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CANCEL_TRADE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_TRADE_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CLEAR_TRADE_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_TRADE_GOLD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_FACTION_ATWAR&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_ACTION_BUTTON&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CAST_SPELL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CANCEL_CAST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CANCEL_AURA&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CANCEL_CHANNELLING&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_SELECTION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_TARGET_OBSOLETE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ATTACKSWING&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ATTACKSTOP&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_REPOP_REQUEST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_RESURRECT_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LOOT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LOOT_MONEY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LOOT_RELEASE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_DUEL_ACCEPTED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_DUEL_CANCELLED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MOUNTSPECIAL_ANIM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PET_SET_ACTION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PET_ACTION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PET_ABANDON&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PET_RENAME&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GOSSIP_HELLO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GOSSIP_SELECT_OPTION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_NPC_TEXT_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTGIVER_STATUS_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTGIVER_HELLO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTGIVER_QUERY_QUEST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTGIVER_ACCEPT_QUEST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTGIVER_COMPLETE_QUEST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTGIVER_REQUEST_REWARD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTGIVER_CHOOSE_REWARD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTGIVER_CANCEL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTLOG_SWAP_QUEST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUESTLOG_REMOVE_QUEST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUEST_CONFIRM_ACCEPT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PUSHQUESTTOPARTY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LIST_INVENTORY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SELL_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BUY_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BUY_ITEM_IN_SLOT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TAXINODE_STATUS_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TAXIQUERYAVAILABLENODES&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ACTIVATETAXI&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TRAINER_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TRAINER_BUY_SPELL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BINDER_ACTIVATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BANKER_ACTIVATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BUY_BANK_SLOT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PETITION_SHOWLIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PETITION_BUY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PETITION_SHOW_SIGNATURES&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PETITION_SIGN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_PETITION_DECLINE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_OFFER_PETITION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TURN_IN_PETITION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PETITION_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BUG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PLAYED_TIME&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_QUERY_TIME&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_RECLAIM_CORPSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_WRAP_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MINIMAP_PING_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PING&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SETSHEATHED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUTH_SESSION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PET_CAST_SPELL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_SAVE_GUILD_EMBLEM_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_TABARDVENDOR_ACTIVATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ZONEUPDATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_RANDOM_ROLL_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_LOOKING_FOR_GROUP_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_UNLEARN_SKILL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GMTICKET_CREATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GMTICKET_UPDATETEXT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_REQUEST_ACCOUNT_DATA&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_UPDATE_ACCOUNT_DATA&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GMTICKET_GETTICKET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_CORPSE_QUERY_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GMTICKET_DELETETICKET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GMTICKET_SYSTEMSTATUS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SPIRIT_HEALER_ACTIVATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHAT_IGNORED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_RANK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_ADD_RANK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_DEL_RANK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_SET_PUBLIC_NOTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_SET_OFFICER_NOTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SEND_MAIL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GET_MAIL_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BATTLEFIELD_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BATTLEFIELD_JOIN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ITEM_TEXT_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MAIL_TAKE_MONEY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MAIL_TAKE_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MAIL_MARK_AS_READ&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MAIL_RETURN_TO_SENDER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MAIL_DELETE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MAIL_CREATE_TEXT_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LEARN_TALENT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TOGGLE_PVP&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_AUCTION_HELLO_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUCTION_SELL_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUCTION_REMOVE_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUCTION_LIST_ITEMS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUCTION_LIST_OWNER_ITEMS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUCTION_PLACE_BID&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUCTION_LIST_BIDDER_ITEMS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_AMMO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_ACTIVE_MOVER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PET_CANCEL_AURA&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CANCEL_AUTO_REPEAT_SPELL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_LIST_STABLED_PETS_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_STABLE_PET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_UNSTABLE_PET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BUY_STABLE_SLOT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_STABLE_SWAP_PET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_QUEST_PUSH_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_REQUEST_PET_INFO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_FAR_SIGHT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_CHANGE_SUB_GROUP&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_REQUEST_PARTY_MEMBER_STATS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_SWAP_SUB_GROUP&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUTOSTORE_BANK_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AUTOBANK_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_QUERY_NEXT_MAIL_TIME_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_RAID_CONVERT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GROUP_ASSISTANT_LEADER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BUYBACK_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MEETINGSTONE_JOIN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MEETINGSTONE_LEAVE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MEETINGSTONE_INFO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CANCEL_GROWTH_AURA&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LOOT_ROLL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LOOT_MASTER_GIVE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_REPAIR_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_TALENT_WIPE_CONFIRM_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SUMMON_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_MOVE_WATER_WALK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SELF_RES&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TOGGLE_HELM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_TOGGLE_CLOAK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_ACTIONBAR_TOGGLES&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_PETITION_RENAME&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ITEM_NAME_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_CHAR_RENAME&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MOVE_SPLINE_DONE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MOVE_FALL_RESET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_REQUEST_RAID_INFO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MOVE_TIME_SKIPPED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MOVE_FEATHER_FALL_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MOVE_WATER_WALK_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_MOVE_NOT_ACTIVE_MOVER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BATTLEFIELD_STATUS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BATTLEFIELD_PORT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_INSPECT_HONOR_STATS_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BATTLEMASTER_HELLO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_FORCE_WALK_SPEED_CHANGE_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_FORCE_TURN_RATE_CHANGE_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_PVP_LOG_DATA_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_LEAVE_BATTLEFIELD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AREA_SPIRIT_HEALER_QUERY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_AREA_SPIRIT_HEALER_QUEUE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_WARDEN_DATA&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PET_STOP_ATTACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_BATTLEMASTER_JOIN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PET_UNLEARN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_PET_SPELL_AUTOCAST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GUILD_INFO_TEXT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_ACTIVATETAXIEXPRESS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_FACTION_INACTIVE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_SET_WATCHED_FACTION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_RESET_INSTANCES&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_RAID_TARGET_UPDATE_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::MSG_RAID_READY_CHECK_Client&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ClientOpcode(vanilla::CMSG_GMSURVEY_SUBMIT&& obj);

    template<typename T>
    // NOLINTNEXTLINE
    T& get() {
        static_assert(std::is_same<T, vanilla::CMSG_BOOTME>::value, "Invalid type. All possible types have been specialized below.");
    }

    template<typename T>
    // NOLINTNEXTLINE
    T* get_if() {
        static_assert(std::is_same<T, vanilla::CMSG_BOOTME>::value, "Invalid type. All possible types have been specialized below.");
    }

    WOW_WORLD_MESSAGES_CPP_EXPORT const char* to_string() const;
};

template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BOOTME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BOOTME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DBLOOKUP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DBLOOKUP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_WORLD_TELEPORT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_WORLD_TELEPORT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TELEPORT_TO_UNIT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TELEPORT_TO_UNIT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHAR_CREATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHAR_CREATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHAR_ENUM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHAR_ENUM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHAR_DELETE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHAR_DELETE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PLAYER_LOGIN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PLAYER_LOGIN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PLAYER_LOGOUT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PLAYER_LOGOUT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOGOUT_REQUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOGOUT_REQUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOGOUT_CANCEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOGOUT_CANCEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_NAME_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_NAME_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_NAME_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_NAME_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ITEM_QUERY_SINGLE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ITEM_QUERY_SINGLE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PAGE_TEXT_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PAGE_TEXT_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUEST_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUEST_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GAMEOBJECT_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GAMEOBJECT_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CREATURE_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CREATURE_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_WHO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_WHO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_WHOIS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_WHOIS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FRIEND_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FRIEND_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ADD_FRIEND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ADD_FRIEND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DEL_FRIEND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DEL_FRIEND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ADD_IGNORE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ADD_IGNORE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DEL_IGNORE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DEL_IGNORE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_INVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_INVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_ACCEPT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_ACCEPT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_DECLINE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_DECLINE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_UNINVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_UNINVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_UNINVITE_GUID* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_UNINVITE_GUID& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_SET_LEADER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_SET_LEADER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT_METHOD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT_METHOD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_DISBAND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_DISBAND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_CREATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_CREATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_INVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_INVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_ACCEPT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_ACCEPT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_DECLINE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_DECLINE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_INFO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_INFO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_ROSTER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_ROSTER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_PROMOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_PROMOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_DEMOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_DEMOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_LEAVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_LEAVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_REMOVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_REMOVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_DISBAND* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_DISBAND& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_LEADER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_LEADER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_MOTD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_MOTD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MESSAGECHAT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MESSAGECHAT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_JOIN_CHANNEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_JOIN_CHANNEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LEAVE_CHANNEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LEAVE_CHANNEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_PASSWORD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_PASSWORD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_SET_OWNER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_SET_OWNER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_OWNER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_OWNER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_MODERATOR* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_MODERATOR& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_UNMODERATOR* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_UNMODERATOR& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_MUTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_MUTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_UNMUTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_UNMUTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_INVITE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_INVITE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_KICK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_KICK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_BAN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_BAN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_UNBAN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_UNBAN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_ANNOUNCEMENTS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_ANNOUNCEMENTS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_MODERATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHANNEL_MODERATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_USE_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_USE_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_OPEN_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_OPEN_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_READ_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_READ_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GAMEOBJ_USE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GAMEOBJ_USE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AREATRIGGER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AREATRIGGER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_FORWARD_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_FORWARD_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_BACKWARD_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_BACKWARD_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_STRAFE_LEFT_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_STRAFE_LEFT_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_STRAFE_RIGHT_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_STRAFE_RIGHT_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_STRAFE_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_STRAFE_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_JUMP_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_JUMP_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_TURN_LEFT_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_TURN_LEFT_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_TURN_RIGHT_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_TURN_RIGHT_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_TURN_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_TURN_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_PITCH_UP_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_PITCH_UP_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_PITCH_DOWN_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_PITCH_DOWN_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_PITCH_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_PITCH_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_RUN_MODE_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_RUN_MODE_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_WALK_MODE_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_WALK_MODE_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_TELEPORT_ACK_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_TELEPORT_ACK_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_FALL_LAND_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_FALL_LAND_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_SWIM_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_SWIM_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_SWIM_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_SWIM_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_FACING_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_FACING_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_PITCH_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_PITCH_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_WORLDPORT_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_WORLDPORT_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_SET_RAW_POSITION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_SET_RAW_POSITION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_RUN_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_RUN_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_MOVE_ROOT_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_MOVE_ROOT_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_MOVE_UNROOT_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_MOVE_UNROOT_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_HEARTBEAT_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_HEARTBEAT_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_KNOCK_BACK_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_KNOCK_BACK_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_HOVER_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_HOVER_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_NEXT_CINEMATIC_CAMERA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_NEXT_CINEMATIC_CAMERA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_COMPLETE_CINEMATIC* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_COMPLETE_CINEMATIC& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TUTORIAL_FLAG* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TUTORIAL_FLAG& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TUTORIAL_CLEAR* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TUTORIAL_CLEAR& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TUTORIAL_RESET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TUTORIAL_RESET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_STANDSTATECHANGE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_STANDSTATECHANGE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_EMOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_EMOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TEXT_EMOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TEXT_EMOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOSTORE_LOOT_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOSTORE_LOOT_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOEQUIP_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOEQUIP_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOSTORE_BAG_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOSTORE_BAG_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SWAP_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SWAP_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SWAP_INV_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SWAP_INV_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SPLIT_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SPLIT_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOEQUIP_ITEM_SLOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOEQUIP_ITEM_SLOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DESTROYITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DESTROYITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_INSPECT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_INSPECT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_INITIATE_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_INITIATE_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BEGIN_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BEGIN_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUSY_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUSY_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_IGNORE_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_IGNORE_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ACCEPT_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ACCEPT_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_UNACCEPT_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_UNACCEPT_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_TRADE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_TRADE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_TRADE_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_TRADE_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CLEAR_TRADE_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CLEAR_TRADE_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_TRADE_GOLD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_TRADE_GOLD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_FACTION_ATWAR* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_FACTION_ATWAR& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_ACTION_BUTTON* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_ACTION_BUTTON& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CAST_SPELL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CAST_SPELL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_CAST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_CAST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_AURA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_AURA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_CHANNELLING* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_CHANNELLING& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_SELECTION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_SELECTION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_TARGET_OBSOLETE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_TARGET_OBSOLETE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ATTACKSWING* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ATTACKSWING& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ATTACKSTOP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ATTACKSTOP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REPOP_REQUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REPOP_REQUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_RESURRECT_RESPONSE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_RESURRECT_RESPONSE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT_MONEY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT_MONEY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT_RELEASE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT_RELEASE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DUEL_ACCEPTED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DUEL_ACCEPTED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DUEL_CANCELLED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_DUEL_CANCELLED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOUNTSPECIAL_ANIM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOUNTSPECIAL_ANIM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_SET_ACTION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_SET_ACTION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_ACTION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_ACTION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_ABANDON* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_ABANDON& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_RENAME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_RENAME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GOSSIP_HELLO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GOSSIP_HELLO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GOSSIP_SELECT_OPTION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GOSSIP_SELECT_OPTION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_NPC_TEXT_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_NPC_TEXT_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_STATUS_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_STATUS_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_HELLO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_HELLO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_QUERY_QUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_QUERY_QUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_ACCEPT_QUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_ACCEPT_QUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_COMPLETE_QUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_COMPLETE_QUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_REQUEST_REWARD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_REQUEST_REWARD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_CHOOSE_REWARD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_CHOOSE_REWARD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_CANCEL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTGIVER_CANCEL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTLOG_SWAP_QUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTLOG_SWAP_QUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTLOG_REMOVE_QUEST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUESTLOG_REMOVE_QUEST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUEST_CONFIRM_ACCEPT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUEST_CONFIRM_ACCEPT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PUSHQUESTTOPARTY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PUSHQUESTTOPARTY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LIST_INVENTORY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LIST_INVENTORY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SELL_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SELL_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUY_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUY_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUY_ITEM_IN_SLOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUY_ITEM_IN_SLOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TAXINODE_STATUS_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TAXINODE_STATUS_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TAXIQUERYAVAILABLENODES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TAXIQUERYAVAILABLENODES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ACTIVATETAXI* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ACTIVATETAXI& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TRAINER_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TRAINER_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TRAINER_BUY_SPELL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TRAINER_BUY_SPELL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BINDER_ACTIVATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BINDER_ACTIVATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BANKER_ACTIVATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BANKER_ACTIVATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUY_BANK_SLOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUY_BANK_SLOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PETITION_SHOWLIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PETITION_SHOWLIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PETITION_BUY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PETITION_BUY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PETITION_SHOW_SIGNATURES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PETITION_SHOW_SIGNATURES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PETITION_SIGN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PETITION_SIGN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PETITION_DECLINE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PETITION_DECLINE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_OFFER_PETITION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_OFFER_PETITION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TURN_IN_PETITION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TURN_IN_PETITION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PETITION_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PETITION_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUG* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUG& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PLAYED_TIME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PLAYED_TIME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUERY_TIME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_QUERY_TIME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_RECLAIM_CORPSE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_RECLAIM_CORPSE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_WRAP_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_WRAP_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MINIMAP_PING_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MINIMAP_PING_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PING* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PING& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SETSHEATHED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SETSHEATHED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTH_SESSION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTH_SESSION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_CAST_SPELL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_CAST_SPELL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_SAVE_GUILD_EMBLEM_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_SAVE_GUILD_EMBLEM_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_TABARDVENDOR_ACTIVATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_TABARDVENDOR_ACTIVATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ZONEUPDATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ZONEUPDATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RANDOM_ROLL_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RANDOM_ROLL_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_LOOKING_FOR_GROUP_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_LOOKING_FOR_GROUP_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_UNLEARN_SKILL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_UNLEARN_SKILL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMTICKET_CREATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMTICKET_CREATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMTICKET_UPDATETEXT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMTICKET_UPDATETEXT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REQUEST_ACCOUNT_DATA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REQUEST_ACCOUNT_DATA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_UPDATE_ACCOUNT_DATA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_UPDATE_ACCOUNT_DATA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMTICKET_GETTICKET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMTICKET_GETTICKET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_CORPSE_QUERY_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_CORPSE_QUERY_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMTICKET_DELETETICKET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMTICKET_DELETETICKET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMTICKET_SYSTEMSTATUS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMTICKET_SYSTEMSTATUS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SPIRIT_HEALER_ACTIVATE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SPIRIT_HEALER_ACTIVATE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHAT_IGNORED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHAT_IGNORED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_RANK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_RANK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_ADD_RANK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_ADD_RANK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_DEL_RANK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_DEL_RANK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_SET_PUBLIC_NOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_SET_PUBLIC_NOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_SET_OFFICER_NOTE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_SET_OFFICER_NOTE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SEND_MAIL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SEND_MAIL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GET_MAIL_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GET_MAIL_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEFIELD_LIST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEFIELD_LIST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEFIELD_JOIN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEFIELD_JOIN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ITEM_TEXT_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ITEM_TEXT_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_TAKE_MONEY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_TAKE_MONEY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_TAKE_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_TAKE_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_MARK_AS_READ* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_MARK_AS_READ& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_RETURN_TO_SENDER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_RETURN_TO_SENDER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_DELETE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_DELETE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_CREATE_TEXT_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MAIL_CREATE_TEXT_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LEARN_TALENT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LEARN_TALENT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TOGGLE_PVP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TOGGLE_PVP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_AUCTION_HELLO_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_AUCTION_HELLO_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_SELL_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_SELL_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_REMOVE_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_REMOVE_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_LIST_ITEMS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_LIST_ITEMS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_LIST_OWNER_ITEMS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_LIST_OWNER_ITEMS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_PLACE_BID* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_PLACE_BID& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_LIST_BIDDER_ITEMS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUCTION_LIST_BIDDER_ITEMS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_AMMO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_AMMO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_ACTIVE_MOVER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_ACTIVE_MOVER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_CANCEL_AURA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_CANCEL_AURA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_AUTO_REPEAT_SPELL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_AUTO_REPEAT_SPELL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_LIST_STABLED_PETS_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_LIST_STABLED_PETS_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_STABLE_PET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_STABLE_PET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_UNSTABLE_PET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_UNSTABLE_PET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUY_STABLE_SLOT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUY_STABLE_SLOT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_STABLE_SWAP_PET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_STABLE_SWAP_PET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_QUEST_PUSH_RESULT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_QUEST_PUSH_RESULT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REQUEST_PET_INFO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REQUEST_PET_INFO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FAR_SIGHT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FAR_SIGHT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_CHANGE_SUB_GROUP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_CHANGE_SUB_GROUP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REQUEST_PARTY_MEMBER_STATS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REQUEST_PARTY_MEMBER_STATS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_SWAP_SUB_GROUP* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_SWAP_SUB_GROUP& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOSTORE_BANK_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOSTORE_BANK_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOBANK_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AUTOBANK_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_QUERY_NEXT_MAIL_TIME_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_QUERY_NEXT_MAIL_TIME_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_RAID_CONVERT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_RAID_CONVERT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_ASSISTANT_LEADER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GROUP_ASSISTANT_LEADER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUYBACK_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BUYBACK_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MEETINGSTONE_JOIN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MEETINGSTONE_JOIN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MEETINGSTONE_LEAVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MEETINGSTONE_LEAVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MEETINGSTONE_INFO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MEETINGSTONE_INFO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_GROWTH_AURA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CANCEL_GROWTH_AURA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT_ROLL* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT_ROLL& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT_MASTER_GIVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LOOT_MASTER_GIVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REPAIR_ITEM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REPAIR_ITEM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_TALENT_WIPE_CONFIRM_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_TALENT_WIPE_CONFIRM_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SUMMON_RESPONSE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SUMMON_RESPONSE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_WATER_WALK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_WATER_WALK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SELF_RES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SELF_RES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TOGGLE_HELM* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TOGGLE_HELM& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TOGGLE_CLOAK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_TOGGLE_CLOAK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_ACTIONBAR_TOGGLES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_ACTIONBAR_TOGGLES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PETITION_RENAME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PETITION_RENAME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ITEM_NAME_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ITEM_NAME_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHAR_RENAME* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_CHAR_RENAME& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_SPLINE_DONE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_SPLINE_DONE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_FALL_RESET* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_FALL_RESET& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REQUEST_RAID_INFO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_REQUEST_RAID_INFO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_TIME_SKIPPED* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_TIME_SKIPPED& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_FEATHER_FALL_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_FEATHER_FALL_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_WATER_WALK_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_WATER_WALK_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_NOT_ACTIVE_MOVER* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_MOVE_NOT_ACTIVE_MOVER& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEFIELD_STATUS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEFIELD_STATUS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEFIELD_PORT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEFIELD_PORT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_INSPECT_HONOR_STATS_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_INSPECT_HONOR_STATS_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEMASTER_HELLO* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEMASTER_HELLO& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_WALK_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_WALK_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_TURN_RATE_CHANGE_ACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_FORCE_TURN_RATE_CHANGE_ACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PVP_LOG_DATA_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PVP_LOG_DATA_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LEAVE_BATTLEFIELD* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_LEAVE_BATTLEFIELD& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AREA_SPIRIT_HEALER_QUERY* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AREA_SPIRIT_HEALER_QUERY& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AREA_SPIRIT_HEALER_QUEUE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_AREA_SPIRIT_HEALER_QUEUE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_WARDEN_DATA* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_WARDEN_DATA& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_BATTLEGROUND_PLAYER_POSITIONS_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_STOP_ATTACK* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_STOP_ATTACK& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEMASTER_JOIN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_BATTLEMASTER_JOIN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_UNLEARN* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_UNLEARN& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_SPELL_AUTOCAST* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_PET_SPELL_AUTOCAST& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_INFO_TEXT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GUILD_INFO_TEXT& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ACTIVATETAXIEXPRESS* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_ACTIVATETAXIEXPRESS& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_FACTION_INACTIVE* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_FACTION_INACTIVE& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_WATCHED_FACTION* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_SET_WATCHED_FACTION& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_RESET_INSTANCES* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_RESET_INSTANCES& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RAID_TARGET_UPDATE_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RAID_TARGET_UPDATE_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RAID_READY_CHECK_Client* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RAID_READY_CHECK_Client& ClientOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMSURVEY_SUBMIT* ClientOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::CMSG_GMSURVEY_SUBMIT& ClientOpcode::get();

class ServerOpcode {
    enum class Opcode {
        NONE = 0xFFFF,
        SMSG_CHAR_CREATE = 58,
        SMSG_CHAR_ENUM = 59,
        SMSG_CHAR_DELETE = 60,
        SMSG_NEW_WORLD = 62,
        SMSG_TRANSFER_PENDING = 63,
        SMSG_TRANSFER_ABORTED = 64,
        SMSG_CHARACTER_LOGIN_FAILED = 65,
        SMSG_LOGIN_SETTIMESPEED = 66,
        SMSG_LOGOUT_RESPONSE = 76,
        SMSG_LOGOUT_COMPLETE = 77,
        SMSG_LOGOUT_CANCEL_ACK = 79,
        SMSG_NAME_QUERY_RESPONSE = 81,
        SMSG_PET_NAME_QUERY_RESPONSE = 83,
        SMSG_GUILD_QUERY_RESPONSE = 85,
        SMSG_ITEM_QUERY_SINGLE_RESPONSE = 88,
        SMSG_PAGE_TEXT_QUERY_RESPONSE = 91,
        SMSG_QUEST_QUERY_RESPONSE = 93,
        SMSG_GAMEOBJECT_QUERY_RESPONSE = 95,
        SMSG_CREATURE_QUERY_RESPONSE = 97,
        SMSG_WHO = 99,
        SMSG_WHOIS = 101,
        SMSG_FRIEND_LIST = 103,
        SMSG_FRIEND_STATUS = 104,
        SMSG_IGNORE_LIST = 107,
        SMSG_GROUP_INVITE = 111,
        SMSG_GROUP_DECLINE = 116,
        SMSG_GROUP_UNINVITE = 119,
        SMSG_GROUP_SET_LEADER = 121,
        SMSG_GROUP_DESTROYED = 124,
        SMSG_GROUP_LIST = 125,
        SMSG_PARTY_MEMBER_STATS = 126,
        SMSG_PARTY_COMMAND_RESULT = 127,
        SMSG_GUILD_INVITE = 131,
        SMSG_GUILD_INFO = 136,
        SMSG_GUILD_ROSTER = 138,
        SMSG_GUILD_EVENT = 146,
        SMSG_GUILD_COMMAND_RESULT = 147,
        SMSG_MESSAGECHAT = 150,
        SMSG_CHANNEL_NOTIFY = 153,
        SMSG_CHANNEL_LIST = 155,
        SMSG_UPDATE_OBJECT = 169,
        SMSG_DESTROY_OBJECT = 170,
        SMSG_READ_ITEM_OK = 174,
        SMSG_READ_ITEM_FAILED = 175,
        SMSG_ITEM_COOLDOWN = 176,
        SMSG_GAMEOBJECT_CUSTOM_ANIM = 179,
        MSG_MOVE_START_FORWARD = 181,
        MSG_MOVE_START_BACKWARD = 182,
        MSG_MOVE_STOP = 183,
        MSG_MOVE_START_STRAFE_LEFT = 184,
        MSG_MOVE_START_STRAFE_RIGHT = 185,
        MSG_MOVE_STOP_STRAFE = 186,
        MSG_MOVE_JUMP = 187,
        MSG_MOVE_START_TURN_LEFT = 188,
        MSG_MOVE_START_TURN_RIGHT = 189,
        MSG_MOVE_STOP_TURN = 190,
        MSG_MOVE_START_PITCH_UP = 191,
        MSG_MOVE_START_PITCH_DOWN = 192,
        MSG_MOVE_STOP_PITCH = 193,
        MSG_MOVE_SET_RUN_MODE = 194,
        MSG_MOVE_SET_WALK_MODE = 195,
        MSG_MOVE_TELEPORT_ACK = 199,
        MSG_MOVE_FALL_LAND = 201,
        MSG_MOVE_START_SWIM = 202,
        MSG_MOVE_STOP_SWIM = 203,
        MSG_MOVE_SET_FACING = 218,
        MSG_MOVE_SET_PITCH = 219,
        MSG_MOVE_WORLDPORT_ACK = 220,
        SMSG_MONSTER_MOVE = 221,
        SMSG_MOVE_WATER_WALK = 222,
        SMSG_MOVE_LAND_WALK = 223,
        SMSG_FORCE_RUN_SPEED_CHANGE = 226,
        SMSG_FORCE_RUN_BACK_SPEED_CHANGE = 228,
        SMSG_FORCE_SWIM_SPEED_CHANGE = 230,
        SMSG_FORCE_MOVE_ROOT = 232,
        SMSG_FORCE_MOVE_UNROOT = 234,
        MSG_MOVE_HEARTBEAT = 238,
        SMSG_MOVE_KNOCK_BACK = 239,
        SMSG_MOVE_FEATHER_FALL = 242,
        SMSG_MOVE_NORMAL_FALL = 243,
        SMSG_MOVE_SET_HOVER = 244,
        SMSG_MOVE_UNSET_HOVER = 245,
        SMSG_TRIGGER_CINEMATIC = 250,
        SMSG_TUTORIAL_FLAGS = 253,
        SMSG_EMOTE = 259,
        SMSG_TEXT_EMOTE = 261,
        SMSG_INVENTORY_CHANGE_FAILURE = 274,
        SMSG_OPEN_CONTAINER = 275,
        SMSG_INSPECT = 277,
        SMSG_TRADE_STATUS = 288,
        SMSG_TRADE_STATUS_EXTENDED = 289,
        SMSG_INITIALIZE_FACTIONS = 290,
        SMSG_SET_FACTION_VISIBLE = 291,
        SMSG_SET_FACTION_STANDING = 292,
        SMSG_SET_PROFICIENCY = 295,
        SMSG_ACTION_BUTTONS = 297,
        SMSG_INITIAL_SPELLS = 298,
        SMSG_LEARNED_SPELL = 299,
        SMSG_SUPERCEDED_SPELL = 300,
        SMSG_CAST_RESULT = 304,
        SMSG_SPELL_START = 305,
        SMSG_SPELL_GO = 306,
        SMSG_SPELL_FAILURE = 307,
        SMSG_SPELL_COOLDOWN = 308,
        SMSG_COOLDOWN_EVENT = 309,
        SMSG_UPDATE_AURA_DURATION = 311,
        SMSG_PET_CAST_FAILED = 312,
        MSG_CHANNEL_START = 313,
        MSG_CHANNEL_UPDATE = 314,
        SMSG_AI_REACTION = 316,
        SMSG_ATTACKSTART = 323,
        SMSG_ATTACKSTOP = 324,
        SMSG_ATTACKSWING_NOTINRANGE = 325,
        SMSG_ATTACKSWING_BADFACING = 326,
        SMSG_ATTACKSWING_NOTSTANDING = 327,
        SMSG_ATTACKSWING_DEADTARGET = 328,
        SMSG_ATTACKSWING_CANT_ATTACK = 329,
        SMSG_ATTACKERSTATEUPDATE = 330,
        SMSG_CANCEL_COMBAT = 334,
        SMSG_SPELLHEALLOG = 336,
        SMSG_SPELLENERGIZELOG = 337,
        SMSG_BINDPOINTUPDATE = 341,
        SMSG_PLAYERBOUND = 344,
        SMSG_CLIENT_CONTROL_UPDATE = 345,
        SMSG_RESURRECT_REQUEST = 347,
        SMSG_LOOT_RESPONSE = 352,
        SMSG_LOOT_RELEASE_RESPONSE = 353,
        SMSG_LOOT_REMOVED = 354,
        SMSG_LOOT_MONEY_NOTIFY = 355,
        SMSG_LOOT_CLEAR_MONEY = 357,
        SMSG_ITEM_PUSH_RESULT = 358,
        SMSG_DUEL_REQUESTED = 359,
        SMSG_DUEL_OUTOFBOUNDS = 360,
        SMSG_DUEL_INBOUNDS = 361,
        SMSG_DUEL_COMPLETE = 362,
        SMSG_DUEL_WINNER = 363,
        SMSG_MOUNTRESULT = 366,
        SMSG_DISMOUNTRESULT = 367,
        SMSG_MOUNTSPECIAL_ANIM = 370,
        SMSG_PET_TAME_FAILURE = 371,
        SMSG_PET_NAME_INVALID = 376,
        SMSG_PET_SPELLS = 377,
        SMSG_PET_MODE = 378,
        SMSG_GOSSIP_MESSAGE = 381,
        SMSG_GOSSIP_COMPLETE = 382,
        SMSG_NPC_TEXT_UPDATE = 384,
        SMSG_QUESTGIVER_STATUS = 387,
        SMSG_QUESTGIVER_QUEST_LIST = 389,
        SMSG_QUESTGIVER_QUEST_DETAILS = 392,
        SMSG_QUESTGIVER_REQUEST_ITEMS = 395,
        SMSG_QUESTGIVER_OFFER_REWARD = 397,
        SMSG_QUESTGIVER_QUEST_INVALID = 399,
        SMSG_QUESTGIVER_QUEST_COMPLETE = 401,
        SMSG_QUESTGIVER_QUEST_FAILED = 402,
        SMSG_QUESTLOG_FULL = 405,
        SMSG_QUESTUPDATE_FAILED = 406,
        SMSG_QUESTUPDATE_FAILEDTIMER = 407,
        SMSG_QUESTUPDATE_COMPLETE = 408,
        SMSG_QUESTUPDATE_ADD_KILL = 409,
        SMSG_QUESTUPDATE_ADD_ITEM = 410,
        SMSG_QUEST_CONFIRM_ACCEPT = 412,
        SMSG_LIST_INVENTORY = 415,
        SMSG_SELL_ITEM = 417,
        SMSG_BUY_ITEM = 420,
        SMSG_BUY_FAILED = 421,
        SMSG_SHOWTAXINODES = 425,
        SMSG_TAXINODE_STATUS = 427,
        SMSG_ACTIVATETAXIREPLY = 430,
        SMSG_NEW_TAXI_PATH = 431,
        SMSG_TRAINER_LIST = 433,
        SMSG_TRAINER_BUY_SUCCEEDED = 435,
        SMSG_TRAINER_BUY_FAILED = 436,
        SMSG_SHOW_BANK = 440,
        SMSG_BUY_BANK_SLOT_RESULT = 442,
        SMSG_PETITION_SHOWLIST = 444,
        SMSG_PETITION_SHOW_SIGNATURES = 447,
        SMSG_PETITION_SIGN_RESULTS = 449,
        MSG_PETITION_DECLINE = 450,
        SMSG_TURN_IN_PETITION_RESULTS = 453,
        SMSG_PETITION_QUERY_RESPONSE = 455,
        SMSG_FISH_NOT_HOOKED = 456,
        SMSG_FISH_ESCAPED = 457,
        SMSG_NOTIFICATION = 459,
        SMSG_PLAYED_TIME = 461,
        SMSG_QUERY_TIME_RESPONSE = 463,
        SMSG_LOG_XPGAIN = 464,
        SMSG_LEVELUP_INFO = 468,
        MSG_MINIMAP_PING = 469,
        SMSG_RESISTLOG = 470,
        SMSG_ENCHANTMENTLOG = 471,
        SMSG_START_MIRROR_TIMER = 473,
        SMSG_PAUSE_MIRROR_TIMER = 474,
        SMSG_STOP_MIRROR_TIMER = 475,
        SMSG_PONG = 477,
        SMSG_CLEAR_COOLDOWN = 478,
        SMSG_GAMEOBJECT_PAGETEXT = 479,
        SMSG_SPELL_DELAYED = 482,
        SMSG_ITEM_TIME_UPDATE = 490,
        SMSG_ITEM_ENCHANT_TIME_UPDATE = 491,
        SMSG_AUTH_CHALLENGE = 492,
        SMSG_AUTH_RESPONSE = 494,
        MSG_SAVE_GUILD_EMBLEM = 497,
        MSG_TABARDVENDOR_ACTIVATE = 498,
        SMSG_PLAY_SPELL_VISUAL = 499,
        SMSG_PARTYKILLLOG = 501,
        SMSG_COMPRESSED_UPDATE_OBJECT = 502,
        SMSG_PLAY_SPELL_IMPACT = 503,
        SMSG_EXPLORATION_EXPERIENCE = 504,
        MSG_RANDOM_ROLL = 507,
        SMSG_ENVIRONMENTAL_DAMAGE_LOG = 508,
        MSG_LOOKING_FOR_GROUP = 511,
        SMSG_REMOVED_SPELL = 515,
        SMSG_GMTICKET_CREATE = 518,
        SMSG_GMTICKET_UPDATETEXT = 520,
        SMSG_ACCOUNT_DATA_TIMES = 521,
        SMSG_GMTICKET_GETTICKET = 530,
        SMSG_GAMEOBJECT_SPAWN_ANIM = 532,
        SMSG_GAMEOBJECT_DESPAWN_ANIM = 533,
        MSG_CORPSE_QUERY = 534,
        SMSG_GMTICKET_DELETETICKET = 536,
        SMSG_CHAT_WRONG_FACTION = 537,
        SMSG_GMTICKET_SYSTEMSTATUS = 539,
        SMSG_SET_REST_START = 542,
        SMSG_SPIRIT_HEALER_CONFIRM = 546,
        SMSG_GOSSIP_POI = 548,
        SMSG_LOGIN_VERIFY_WORLD = 566,
        SMSG_SEND_MAIL_RESULT = 569,
        SMSG_MAIL_LIST_RESULT = 571,
        SMSG_BATTLEFIELD_LIST = 573,
        SMSG_ITEM_TEXT_QUERY_RESPONSE = 580,
        SMSG_SPELLLOGMISS = 587,
        SMSG_SPELLLOGEXECUTE = 588,
        SMSG_PERIODICAURALOG = 590,
        SMSG_SPELLDAMAGESHIELD = 591,
        SMSG_SPELLNONMELEEDAMAGELOG = 592,
        SMSG_ZONE_UNDER_ATTACK = 596,
        MSG_AUCTION_HELLO = 597,
        SMSG_AUCTION_COMMAND_RESULT = 603,
        SMSG_AUCTION_LIST_RESULT = 604,
        SMSG_AUCTION_OWNER_LIST_RESULT = 605,
        SMSG_AUCTION_BIDDER_NOTIFICATION = 606,
        SMSG_AUCTION_OWNER_NOTIFICATION = 607,
        SMSG_PROCRESIST = 608,
        SMSG_DISPEL_FAILED = 610,
        SMSG_SPELLORDAMAGE_IMMUNE = 611,
        SMSG_AUCTION_BIDDER_LIST_RESULT = 613,
        SMSG_SET_FLAT_SPELL_MODIFIER = 614,
        SMSG_SET_PCT_SPELL_MODIFIER = 615,
        SMSG_CORPSE_RECLAIM_DELAY = 617,
        MSG_LIST_STABLED_PETS = 623,
        SMSG_STABLE_RESULT = 627,
        MSG_QUEST_PUSH_RESULT = 630,
        SMSG_PLAY_MUSIC = 631,
        SMSG_PLAY_OBJECT_SOUND = 632,
        SMSG_SPELLDISPELLOG = 635,
        MSG_QUERY_NEXT_MAIL_TIME = 644,
        SMSG_RECEIVED_MAIL = 645,
        SMSG_RAID_GROUP_ONLY = 646,
        SMSG_PVP_CREDIT = 652,
        SMSG_AUCTION_REMOVED_NOTIFICATION = 653,
        SMSG_SERVER_MESSAGE = 657,
        SMSG_MEETINGSTONE_SETQUEUE = 661,
        SMSG_MEETINGSTONE_COMPLETE = 663,
        SMSG_MEETINGSTONE_IN_PROGRESS = 664,
        SMSG_MEETINGSTONE_MEMBER_ADDED = 665,
        SMSG_CANCEL_AUTO_REPEAT = 668,
        SMSG_STANDSTATE_UPDATE = 669,
        SMSG_LOOT_ALL_PASSED = 670,
        SMSG_LOOT_ROLL_WON = 671,
        SMSG_LOOT_START_ROLL = 673,
        SMSG_LOOT_ROLL = 674,
        SMSG_LOOT_MASTER_LIST = 676,
        SMSG_SET_FORCED_REACTIONS = 677,
        SMSG_SPELL_FAILED_OTHER = 678,
        SMSG_GAMEOBJECT_RESET_STATE = 679,
        SMSG_CHAT_PLAYER_NOT_FOUND = 681,
        MSG_TALENT_WIPE_CONFIRM = 682,
        SMSG_SUMMON_REQUEST = 683,
        SMSG_MONSTER_MOVE_TRANSPORT = 686,
        SMSG_PET_BROKEN = 687,
        MSG_MOVE_FEATHER_FALL = 688,
        MSG_MOVE_WATER_WALK = 689,
        SMSG_FEIGN_DEATH_RESISTED = 692,
        SMSG_DUEL_COUNTDOWN = 695,
        SMSG_AREA_TRIGGER_MESSAGE = 696,
        SMSG_MEETINGSTONE_JOINFAILED = 699,
        SMSG_PLAYER_SKINNED = 700,
        SMSG_DURABILITY_DAMAGE_DEATH = 701,
        MSG_PETITION_RENAME = 705,
        SMSG_INIT_WORLD_STATES = 706,
        SMSG_UPDATE_WORLD_STATE = 707,
        SMSG_ITEM_NAME_QUERY_RESPONSE = 709,
        SMSG_PET_ACTION_FEEDBACK = 710,
        SMSG_CHAR_RENAME = 712,
        SMSG_INSTANCE_SAVE_CREATED = 715,
        SMSG_RAID_INSTANCE_INFO = 716,
        SMSG_PLAY_SOUND = 722,
        SMSG_BATTLEFIELD_STATUS = 724,
        MSG_INSPECT_HONOR_STATS = 726,
        SMSG_FORCE_WALK_SPEED_CHANGE = 730,
        SMSG_FORCE_SWIM_BACK_SPEED_CHANGE = 732,
        SMSG_FORCE_TURN_RATE_CHANGE = 734,
        MSG_PVP_LOG_DATA = 736,
        SMSG_AREA_SPIRIT_HEALER_TIME = 740,
        SMSG_WARDEN_DATA = 742,
        SMSG_GROUP_JOINED_BATTLEGROUND = 744,
        MSG_BATTLEGROUND_PLAYER_POSITIONS = 745,
        SMSG_BINDER_CONFIRM = 747,
        SMSG_BATTLEGROUND_PLAYER_JOINED = 748,
        SMSG_BATTLEGROUND_PLAYER_LEFT = 749,
        SMSG_ADDON_INFO = 751,
        SMSG_PET_UNLEARN_CONFIRM = 753,
        SMSG_PARTY_MEMBER_STATS_FULL = 754,
        SMSG_WEATHER = 756,
        SMSG_RAID_INSTANCE_MESSAGE = 762,
        SMSG_COMPRESSED_MOVES = 763,
        SMSG_CHAT_RESTRICTED = 765,
        SMSG_SPLINE_SET_RUN_SPEED = 766,
        SMSG_SPLINE_SET_RUN_BACK_SPEED = 767,
        SMSG_SPLINE_SET_SWIM_SPEED = 768,
        SMSG_SPLINE_SET_WALK_SPEED = 769,
        SMSG_SPLINE_SET_SWIM_BACK_SPEED = 770,
        SMSG_SPLINE_SET_TURN_RATE = 771,
        SMSG_SPLINE_MOVE_UNROOT = 772,
        SMSG_SPLINE_MOVE_FEATHER_FALL = 773,
        SMSG_SPLINE_MOVE_NORMAL_FALL = 774,
        SMSG_SPLINE_MOVE_SET_HOVER = 775,
        SMSG_SPLINE_MOVE_UNSET_HOVER = 776,
        SMSG_SPLINE_MOVE_WATER_WALK = 777,
        SMSG_SPLINE_MOVE_LAND_WALK = 778,
        SMSG_SPLINE_MOVE_START_SWIM = 779,
        SMSG_SPLINE_MOVE_STOP_SWIM = 780,
        SMSG_SPLINE_MOVE_SET_RUN_MODE = 781,
        SMSG_SPLINE_MOVE_SET_WALK_MODE = 782,
        MSG_MOVE_TIME_SKIPPED = 793,
        SMSG_SPLINE_MOVE_ROOT = 794,
        SMSG_INVALIDATE_PLAYER = 796,
        SMSG_INSTANCE_RESET = 798,
        SMSG_INSTANCE_RESET_FAILED = 799,
        SMSG_UPDATE_LAST_INSTANCE = 800,
        MSG_RAID_TARGET_UPDATE = 801,
        MSG_RAID_READY_CHECK = 802,
        SMSG_PET_ACTION_SOUND = 804,
        SMSG_PET_DISMISS_SOUND = 805,
        SMSG_GM_TICKET_STATUS_UPDATE = 808,
        SMSG_UPDATE_INSTANCE_OWNERSHIP = 811,
        SMSG_SPELLINSTAKILLLOG = 815,
        SMSG_SPELL_UPDATE_CHAIN_TARGETS = 816,
        SMSG_EXPECTED_SPAM_RECORDS = 818,
        SMSG_DEFENSE_MESSAGE = 827,
    } opcode;

    union {
        vanilla::SMSG_CHAR_CREATE SMSG_CHAR_CREATE;
        vanilla::SMSG_CHAR_ENUM SMSG_CHAR_ENUM;
        vanilla::SMSG_CHAR_DELETE SMSG_CHAR_DELETE;
        vanilla::SMSG_NEW_WORLD SMSG_NEW_WORLD;
        vanilla::SMSG_TRANSFER_PENDING SMSG_TRANSFER_PENDING;
        vanilla::SMSG_TRANSFER_ABORTED SMSG_TRANSFER_ABORTED;
        vanilla::SMSG_CHARACTER_LOGIN_FAILED SMSG_CHARACTER_LOGIN_FAILED;
        vanilla::SMSG_LOGIN_SETTIMESPEED SMSG_LOGIN_SETTIMESPEED;
        vanilla::SMSG_LOGOUT_RESPONSE SMSG_LOGOUT_RESPONSE;
        vanilla::SMSG_LOGOUT_COMPLETE SMSG_LOGOUT_COMPLETE;
        vanilla::SMSG_LOGOUT_CANCEL_ACK SMSG_LOGOUT_CANCEL_ACK;
        vanilla::SMSG_NAME_QUERY_RESPONSE SMSG_NAME_QUERY_RESPONSE;
        vanilla::SMSG_PET_NAME_QUERY_RESPONSE SMSG_PET_NAME_QUERY_RESPONSE;
        vanilla::SMSG_GUILD_QUERY_RESPONSE SMSG_GUILD_QUERY_RESPONSE;
        vanilla::SMSG_ITEM_QUERY_SINGLE_RESPONSE SMSG_ITEM_QUERY_SINGLE_RESPONSE;
        vanilla::SMSG_PAGE_TEXT_QUERY_RESPONSE SMSG_PAGE_TEXT_QUERY_RESPONSE;
        vanilla::SMSG_QUEST_QUERY_RESPONSE SMSG_QUEST_QUERY_RESPONSE;
        vanilla::SMSG_GAMEOBJECT_QUERY_RESPONSE SMSG_GAMEOBJECT_QUERY_RESPONSE;
        vanilla::SMSG_CREATURE_QUERY_RESPONSE SMSG_CREATURE_QUERY_RESPONSE;
        vanilla::SMSG_WHO SMSG_WHO;
        vanilla::SMSG_WHOIS SMSG_WHOIS;
        vanilla::SMSG_FRIEND_LIST SMSG_FRIEND_LIST;
        vanilla::SMSG_FRIEND_STATUS SMSG_FRIEND_STATUS;
        vanilla::SMSG_IGNORE_LIST SMSG_IGNORE_LIST;
        vanilla::SMSG_GROUP_INVITE SMSG_GROUP_INVITE;
        vanilla::SMSG_GROUP_DECLINE SMSG_GROUP_DECLINE;
        vanilla::SMSG_GROUP_UNINVITE SMSG_GROUP_UNINVITE;
        vanilla::SMSG_GROUP_SET_LEADER SMSG_GROUP_SET_LEADER;
        vanilla::SMSG_GROUP_DESTROYED SMSG_GROUP_DESTROYED;
        vanilla::SMSG_GROUP_LIST SMSG_GROUP_LIST;
        vanilla::SMSG_PARTY_MEMBER_STATS SMSG_PARTY_MEMBER_STATS;
        vanilla::SMSG_PARTY_COMMAND_RESULT SMSG_PARTY_COMMAND_RESULT;
        vanilla::SMSG_GUILD_INVITE SMSG_GUILD_INVITE;
        vanilla::SMSG_GUILD_INFO SMSG_GUILD_INFO;
        vanilla::SMSG_GUILD_ROSTER SMSG_GUILD_ROSTER;
        vanilla::SMSG_GUILD_EVENT SMSG_GUILD_EVENT;
        vanilla::SMSG_GUILD_COMMAND_RESULT SMSG_GUILD_COMMAND_RESULT;
        vanilla::SMSG_MESSAGECHAT SMSG_MESSAGECHAT;
        vanilla::SMSG_CHANNEL_NOTIFY SMSG_CHANNEL_NOTIFY;
        vanilla::SMSG_CHANNEL_LIST SMSG_CHANNEL_LIST;
        vanilla::SMSG_UPDATE_OBJECT SMSG_UPDATE_OBJECT;
        vanilla::SMSG_DESTROY_OBJECT SMSG_DESTROY_OBJECT;
        vanilla::SMSG_READ_ITEM_OK SMSG_READ_ITEM_OK;
        vanilla::SMSG_READ_ITEM_FAILED SMSG_READ_ITEM_FAILED;
        vanilla::SMSG_ITEM_COOLDOWN SMSG_ITEM_COOLDOWN;
        vanilla::SMSG_GAMEOBJECT_CUSTOM_ANIM SMSG_GAMEOBJECT_CUSTOM_ANIM;
        vanilla::MSG_MOVE_START_FORWARD_Server MSG_MOVE_START_FORWARD;
        vanilla::MSG_MOVE_START_BACKWARD_Server MSG_MOVE_START_BACKWARD;
        vanilla::MSG_MOVE_STOP_Server MSG_MOVE_STOP;
        vanilla::MSG_MOVE_START_STRAFE_LEFT_Server MSG_MOVE_START_STRAFE_LEFT;
        vanilla::MSG_MOVE_START_STRAFE_RIGHT_Server MSG_MOVE_START_STRAFE_RIGHT;
        vanilla::MSG_MOVE_STOP_STRAFE_Server MSG_MOVE_STOP_STRAFE;
        vanilla::MSG_MOVE_JUMP_Server MSG_MOVE_JUMP;
        vanilla::MSG_MOVE_START_TURN_LEFT_Server MSG_MOVE_START_TURN_LEFT;
        vanilla::MSG_MOVE_START_TURN_RIGHT_Server MSG_MOVE_START_TURN_RIGHT;
        vanilla::MSG_MOVE_STOP_TURN_Server MSG_MOVE_STOP_TURN;
        vanilla::MSG_MOVE_START_PITCH_UP_Server MSG_MOVE_START_PITCH_UP;
        vanilla::MSG_MOVE_START_PITCH_DOWN_Server MSG_MOVE_START_PITCH_DOWN;
        vanilla::MSG_MOVE_STOP_PITCH_Server MSG_MOVE_STOP_PITCH;
        vanilla::MSG_MOVE_SET_RUN_MODE_Server MSG_MOVE_SET_RUN_MODE;
        vanilla::MSG_MOVE_SET_WALK_MODE_Server MSG_MOVE_SET_WALK_MODE;
        vanilla::MSG_MOVE_TELEPORT_ACK_Server MSG_MOVE_TELEPORT_ACK;
        vanilla::MSG_MOVE_FALL_LAND_Server MSG_MOVE_FALL_LAND;
        vanilla::MSG_MOVE_START_SWIM_Server MSG_MOVE_START_SWIM;
        vanilla::MSG_MOVE_STOP_SWIM_Server MSG_MOVE_STOP_SWIM;
        vanilla::MSG_MOVE_SET_FACING_Server MSG_MOVE_SET_FACING;
        vanilla::MSG_MOVE_SET_PITCH_Server MSG_MOVE_SET_PITCH;
        vanilla::MSG_MOVE_WORLDPORT_ACK MSG_MOVE_WORLDPORT_ACK;
        vanilla::SMSG_MONSTER_MOVE SMSG_MONSTER_MOVE;
        vanilla::SMSG_MOVE_WATER_WALK SMSG_MOVE_WATER_WALK;
        vanilla::SMSG_MOVE_LAND_WALK SMSG_MOVE_LAND_WALK;
        vanilla::SMSG_FORCE_RUN_SPEED_CHANGE SMSG_FORCE_RUN_SPEED_CHANGE;
        vanilla::SMSG_FORCE_RUN_BACK_SPEED_CHANGE SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
        vanilla::SMSG_FORCE_SWIM_SPEED_CHANGE SMSG_FORCE_SWIM_SPEED_CHANGE;
        vanilla::SMSG_FORCE_MOVE_ROOT SMSG_FORCE_MOVE_ROOT;
        vanilla::SMSG_FORCE_MOVE_UNROOT SMSG_FORCE_MOVE_UNROOT;
        vanilla::MSG_MOVE_HEARTBEAT_Server MSG_MOVE_HEARTBEAT;
        vanilla::SMSG_MOVE_KNOCK_BACK SMSG_MOVE_KNOCK_BACK;
        vanilla::SMSG_MOVE_FEATHER_FALL SMSG_MOVE_FEATHER_FALL;
        vanilla::SMSG_MOVE_NORMAL_FALL SMSG_MOVE_NORMAL_FALL;
        vanilla::SMSG_MOVE_SET_HOVER SMSG_MOVE_SET_HOVER;
        vanilla::SMSG_MOVE_UNSET_HOVER SMSG_MOVE_UNSET_HOVER;
        vanilla::SMSG_TRIGGER_CINEMATIC SMSG_TRIGGER_CINEMATIC;
        vanilla::SMSG_TUTORIAL_FLAGS SMSG_TUTORIAL_FLAGS;
        vanilla::SMSG_EMOTE SMSG_EMOTE;
        vanilla::SMSG_TEXT_EMOTE SMSG_TEXT_EMOTE;
        vanilla::SMSG_INVENTORY_CHANGE_FAILURE SMSG_INVENTORY_CHANGE_FAILURE;
        vanilla::SMSG_OPEN_CONTAINER SMSG_OPEN_CONTAINER;
        vanilla::SMSG_INSPECT SMSG_INSPECT;
        vanilla::SMSG_TRADE_STATUS SMSG_TRADE_STATUS;
        vanilla::SMSG_TRADE_STATUS_EXTENDED SMSG_TRADE_STATUS_EXTENDED;
        vanilla::SMSG_INITIALIZE_FACTIONS SMSG_INITIALIZE_FACTIONS;
        vanilla::SMSG_SET_FACTION_VISIBLE SMSG_SET_FACTION_VISIBLE;
        vanilla::SMSG_SET_FACTION_STANDING SMSG_SET_FACTION_STANDING;
        vanilla::SMSG_SET_PROFICIENCY SMSG_SET_PROFICIENCY;
        vanilla::SMSG_ACTION_BUTTONS SMSG_ACTION_BUTTONS;
        vanilla::SMSG_INITIAL_SPELLS SMSG_INITIAL_SPELLS;
        vanilla::SMSG_LEARNED_SPELL SMSG_LEARNED_SPELL;
        vanilla::SMSG_SUPERCEDED_SPELL SMSG_SUPERCEDED_SPELL;
        vanilla::SMSG_CAST_RESULT SMSG_CAST_RESULT;
        vanilla::SMSG_SPELL_START SMSG_SPELL_START;
        vanilla::SMSG_SPELL_GO SMSG_SPELL_GO;
        vanilla::SMSG_SPELL_FAILURE SMSG_SPELL_FAILURE;
        vanilla::SMSG_SPELL_COOLDOWN SMSG_SPELL_COOLDOWN;
        vanilla::SMSG_COOLDOWN_EVENT SMSG_COOLDOWN_EVENT;
        vanilla::SMSG_UPDATE_AURA_DURATION SMSG_UPDATE_AURA_DURATION;
        vanilla::SMSG_PET_CAST_FAILED SMSG_PET_CAST_FAILED;
        vanilla::MSG_CHANNEL_START_Server MSG_CHANNEL_START;
        vanilla::MSG_CHANNEL_UPDATE_Server MSG_CHANNEL_UPDATE;
        vanilla::SMSG_AI_REACTION SMSG_AI_REACTION;
        vanilla::SMSG_ATTACKSTART SMSG_ATTACKSTART;
        vanilla::SMSG_ATTACKSTOP SMSG_ATTACKSTOP;
        vanilla::SMSG_ATTACKSWING_NOTINRANGE SMSG_ATTACKSWING_NOTINRANGE;
        vanilla::SMSG_ATTACKSWING_BADFACING SMSG_ATTACKSWING_BADFACING;
        vanilla::SMSG_ATTACKSWING_NOTSTANDING SMSG_ATTACKSWING_NOTSTANDING;
        vanilla::SMSG_ATTACKSWING_DEADTARGET SMSG_ATTACKSWING_DEADTARGET;
        vanilla::SMSG_ATTACKSWING_CANT_ATTACK SMSG_ATTACKSWING_CANT_ATTACK;
        vanilla::SMSG_ATTACKERSTATEUPDATE SMSG_ATTACKERSTATEUPDATE;
        vanilla::SMSG_CANCEL_COMBAT SMSG_CANCEL_COMBAT;
        vanilla::SMSG_SPELLHEALLOG SMSG_SPELLHEALLOG;
        vanilla::SMSG_SPELLENERGIZELOG SMSG_SPELLENERGIZELOG;
        vanilla::SMSG_BINDPOINTUPDATE SMSG_BINDPOINTUPDATE;
        vanilla::SMSG_PLAYERBOUND SMSG_PLAYERBOUND;
        vanilla::SMSG_CLIENT_CONTROL_UPDATE SMSG_CLIENT_CONTROL_UPDATE;
        vanilla::SMSG_RESURRECT_REQUEST SMSG_RESURRECT_REQUEST;
        vanilla::SMSG_LOOT_RESPONSE SMSG_LOOT_RESPONSE;
        vanilla::SMSG_LOOT_RELEASE_RESPONSE SMSG_LOOT_RELEASE_RESPONSE;
        vanilla::SMSG_LOOT_REMOVED SMSG_LOOT_REMOVED;
        vanilla::SMSG_LOOT_MONEY_NOTIFY SMSG_LOOT_MONEY_NOTIFY;
        vanilla::SMSG_LOOT_CLEAR_MONEY SMSG_LOOT_CLEAR_MONEY;
        vanilla::SMSG_ITEM_PUSH_RESULT SMSG_ITEM_PUSH_RESULT;
        vanilla::SMSG_DUEL_REQUESTED SMSG_DUEL_REQUESTED;
        vanilla::SMSG_DUEL_OUTOFBOUNDS SMSG_DUEL_OUTOFBOUNDS;
        vanilla::SMSG_DUEL_INBOUNDS SMSG_DUEL_INBOUNDS;
        vanilla::SMSG_DUEL_COMPLETE SMSG_DUEL_COMPLETE;
        vanilla::SMSG_DUEL_WINNER SMSG_DUEL_WINNER;
        vanilla::SMSG_MOUNTRESULT SMSG_MOUNTRESULT;
        vanilla::SMSG_DISMOUNTRESULT SMSG_DISMOUNTRESULT;
        vanilla::SMSG_MOUNTSPECIAL_ANIM SMSG_MOUNTSPECIAL_ANIM;
        vanilla::SMSG_PET_TAME_FAILURE SMSG_PET_TAME_FAILURE;
        vanilla::SMSG_PET_NAME_INVALID SMSG_PET_NAME_INVALID;
        vanilla::SMSG_PET_SPELLS SMSG_PET_SPELLS;
        vanilla::SMSG_PET_MODE SMSG_PET_MODE;
        vanilla::SMSG_GOSSIP_MESSAGE SMSG_GOSSIP_MESSAGE;
        vanilla::SMSG_GOSSIP_COMPLETE SMSG_GOSSIP_COMPLETE;
        vanilla::SMSG_NPC_TEXT_UPDATE SMSG_NPC_TEXT_UPDATE;
        vanilla::SMSG_QUESTGIVER_STATUS SMSG_QUESTGIVER_STATUS;
        vanilla::SMSG_QUESTGIVER_QUEST_LIST SMSG_QUESTGIVER_QUEST_LIST;
        vanilla::SMSG_QUESTGIVER_QUEST_DETAILS SMSG_QUESTGIVER_QUEST_DETAILS;
        vanilla::SMSG_QUESTGIVER_REQUEST_ITEMS SMSG_QUESTGIVER_REQUEST_ITEMS;
        vanilla::SMSG_QUESTGIVER_OFFER_REWARD SMSG_QUESTGIVER_OFFER_REWARD;
        vanilla::SMSG_QUESTGIVER_QUEST_INVALID SMSG_QUESTGIVER_QUEST_INVALID;
        vanilla::SMSG_QUESTGIVER_QUEST_COMPLETE SMSG_QUESTGIVER_QUEST_COMPLETE;
        vanilla::SMSG_QUESTGIVER_QUEST_FAILED SMSG_QUESTGIVER_QUEST_FAILED;
        vanilla::SMSG_QUESTLOG_FULL SMSG_QUESTLOG_FULL;
        vanilla::SMSG_QUESTUPDATE_FAILED SMSG_QUESTUPDATE_FAILED;
        vanilla::SMSG_QUESTUPDATE_FAILEDTIMER SMSG_QUESTUPDATE_FAILEDTIMER;
        vanilla::SMSG_QUESTUPDATE_COMPLETE SMSG_QUESTUPDATE_COMPLETE;
        vanilla::SMSG_QUESTUPDATE_ADD_KILL SMSG_QUESTUPDATE_ADD_KILL;
        vanilla::SMSG_QUESTUPDATE_ADD_ITEM SMSG_QUESTUPDATE_ADD_ITEM;
        vanilla::SMSG_QUEST_CONFIRM_ACCEPT SMSG_QUEST_CONFIRM_ACCEPT;
        vanilla::SMSG_LIST_INVENTORY SMSG_LIST_INVENTORY;
        vanilla::SMSG_SELL_ITEM SMSG_SELL_ITEM;
        vanilla::SMSG_BUY_ITEM SMSG_BUY_ITEM;
        vanilla::SMSG_BUY_FAILED SMSG_BUY_FAILED;
        vanilla::SMSG_SHOWTAXINODES SMSG_SHOWTAXINODES;
        vanilla::SMSG_TAXINODE_STATUS SMSG_TAXINODE_STATUS;
        vanilla::SMSG_ACTIVATETAXIREPLY SMSG_ACTIVATETAXIREPLY;
        vanilla::SMSG_NEW_TAXI_PATH SMSG_NEW_TAXI_PATH;
        vanilla::SMSG_TRAINER_LIST SMSG_TRAINER_LIST;
        vanilla::SMSG_TRAINER_BUY_SUCCEEDED SMSG_TRAINER_BUY_SUCCEEDED;
        vanilla::SMSG_TRAINER_BUY_FAILED SMSG_TRAINER_BUY_FAILED;
        vanilla::SMSG_SHOW_BANK SMSG_SHOW_BANK;
        vanilla::SMSG_BUY_BANK_SLOT_RESULT SMSG_BUY_BANK_SLOT_RESULT;
        vanilla::SMSG_PETITION_SHOWLIST SMSG_PETITION_SHOWLIST;
        vanilla::SMSG_PETITION_SHOW_SIGNATURES SMSG_PETITION_SHOW_SIGNATURES;
        vanilla::SMSG_PETITION_SIGN_RESULTS SMSG_PETITION_SIGN_RESULTS;
        vanilla::MSG_PETITION_DECLINE MSG_PETITION_DECLINE;
        vanilla::SMSG_TURN_IN_PETITION_RESULTS SMSG_TURN_IN_PETITION_RESULTS;
        vanilla::SMSG_PETITION_QUERY_RESPONSE SMSG_PETITION_QUERY_RESPONSE;
        vanilla::SMSG_FISH_NOT_HOOKED SMSG_FISH_NOT_HOOKED;
        vanilla::SMSG_FISH_ESCAPED SMSG_FISH_ESCAPED;
        vanilla::SMSG_NOTIFICATION SMSG_NOTIFICATION;
        vanilla::SMSG_PLAYED_TIME SMSG_PLAYED_TIME;
        vanilla::SMSG_QUERY_TIME_RESPONSE SMSG_QUERY_TIME_RESPONSE;
        vanilla::SMSG_LOG_XPGAIN SMSG_LOG_XPGAIN;
        vanilla::SMSG_LEVELUP_INFO SMSG_LEVELUP_INFO;
        vanilla::MSG_MINIMAP_PING_Server MSG_MINIMAP_PING;
        vanilla::SMSG_RESISTLOG SMSG_RESISTLOG;
        vanilla::SMSG_ENCHANTMENTLOG SMSG_ENCHANTMENTLOG;
        vanilla::SMSG_START_MIRROR_TIMER SMSG_START_MIRROR_TIMER;
        vanilla::SMSG_PAUSE_MIRROR_TIMER SMSG_PAUSE_MIRROR_TIMER;
        vanilla::SMSG_STOP_MIRROR_TIMER SMSG_STOP_MIRROR_TIMER;
        vanilla::SMSG_PONG SMSG_PONG;
        vanilla::SMSG_CLEAR_COOLDOWN SMSG_CLEAR_COOLDOWN;
        vanilla::SMSG_GAMEOBJECT_PAGETEXT SMSG_GAMEOBJECT_PAGETEXT;
        vanilla::SMSG_SPELL_DELAYED SMSG_SPELL_DELAYED;
        vanilla::SMSG_ITEM_TIME_UPDATE SMSG_ITEM_TIME_UPDATE;
        vanilla::SMSG_ITEM_ENCHANT_TIME_UPDATE SMSG_ITEM_ENCHANT_TIME_UPDATE;
        vanilla::SMSG_AUTH_CHALLENGE SMSG_AUTH_CHALLENGE;
        vanilla::SMSG_AUTH_RESPONSE SMSG_AUTH_RESPONSE;
        vanilla::MSG_SAVE_GUILD_EMBLEM_Server MSG_SAVE_GUILD_EMBLEM;
        vanilla::MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE;
        vanilla::SMSG_PLAY_SPELL_VISUAL SMSG_PLAY_SPELL_VISUAL;
        vanilla::SMSG_PARTYKILLLOG SMSG_PARTYKILLLOG;
        vanilla::SMSG_COMPRESSED_UPDATE_OBJECT SMSG_COMPRESSED_UPDATE_OBJECT;
        vanilla::SMSG_PLAY_SPELL_IMPACT SMSG_PLAY_SPELL_IMPACT;
        vanilla::SMSG_EXPLORATION_EXPERIENCE SMSG_EXPLORATION_EXPERIENCE;
        vanilla::MSG_RANDOM_ROLL_Server MSG_RANDOM_ROLL;
        vanilla::SMSG_ENVIRONMENTAL_DAMAGE_LOG SMSG_ENVIRONMENTAL_DAMAGE_LOG;
        vanilla::MSG_LOOKING_FOR_GROUP_Server MSG_LOOKING_FOR_GROUP;
        vanilla::SMSG_REMOVED_SPELL SMSG_REMOVED_SPELL;
        vanilla::SMSG_GMTICKET_CREATE SMSG_GMTICKET_CREATE;
        vanilla::SMSG_GMTICKET_UPDATETEXT SMSG_GMTICKET_UPDATETEXT;
        vanilla::SMSG_ACCOUNT_DATA_TIMES SMSG_ACCOUNT_DATA_TIMES;
        vanilla::SMSG_GMTICKET_GETTICKET SMSG_GMTICKET_GETTICKET;
        vanilla::SMSG_GAMEOBJECT_SPAWN_ANIM SMSG_GAMEOBJECT_SPAWN_ANIM;
        vanilla::SMSG_GAMEOBJECT_DESPAWN_ANIM SMSG_GAMEOBJECT_DESPAWN_ANIM;
        vanilla::MSG_CORPSE_QUERY_Server MSG_CORPSE_QUERY;
        vanilla::SMSG_GMTICKET_DELETETICKET SMSG_GMTICKET_DELETETICKET;
        vanilla::SMSG_CHAT_WRONG_FACTION SMSG_CHAT_WRONG_FACTION;
        vanilla::SMSG_GMTICKET_SYSTEMSTATUS SMSG_GMTICKET_SYSTEMSTATUS;
        vanilla::SMSG_SET_REST_START SMSG_SET_REST_START;
        vanilla::SMSG_SPIRIT_HEALER_CONFIRM SMSG_SPIRIT_HEALER_CONFIRM;
        vanilla::SMSG_GOSSIP_POI SMSG_GOSSIP_POI;
        vanilla::SMSG_LOGIN_VERIFY_WORLD SMSG_LOGIN_VERIFY_WORLD;
        vanilla::SMSG_SEND_MAIL_RESULT SMSG_SEND_MAIL_RESULT;
        vanilla::SMSG_MAIL_LIST_RESULT SMSG_MAIL_LIST_RESULT;
        vanilla::SMSG_BATTLEFIELD_LIST SMSG_BATTLEFIELD_LIST;
        vanilla::SMSG_ITEM_TEXT_QUERY_RESPONSE SMSG_ITEM_TEXT_QUERY_RESPONSE;
        vanilla::SMSG_SPELLLOGMISS SMSG_SPELLLOGMISS;
        vanilla::SMSG_SPELLLOGEXECUTE SMSG_SPELLLOGEXECUTE;
        vanilla::SMSG_PERIODICAURALOG SMSG_PERIODICAURALOG;
        vanilla::SMSG_SPELLDAMAGESHIELD SMSG_SPELLDAMAGESHIELD;
        vanilla::SMSG_SPELLNONMELEEDAMAGELOG SMSG_SPELLNONMELEEDAMAGELOG;
        vanilla::SMSG_ZONE_UNDER_ATTACK SMSG_ZONE_UNDER_ATTACK;
        vanilla::MSG_AUCTION_HELLO_Server MSG_AUCTION_HELLO;
        vanilla::SMSG_AUCTION_COMMAND_RESULT SMSG_AUCTION_COMMAND_RESULT;
        vanilla::SMSG_AUCTION_LIST_RESULT SMSG_AUCTION_LIST_RESULT;
        vanilla::SMSG_AUCTION_OWNER_LIST_RESULT SMSG_AUCTION_OWNER_LIST_RESULT;
        vanilla::SMSG_AUCTION_BIDDER_NOTIFICATION SMSG_AUCTION_BIDDER_NOTIFICATION;
        vanilla::SMSG_AUCTION_OWNER_NOTIFICATION SMSG_AUCTION_OWNER_NOTIFICATION;
        vanilla::SMSG_PROCRESIST SMSG_PROCRESIST;
        vanilla::SMSG_DISPEL_FAILED SMSG_DISPEL_FAILED;
        vanilla::SMSG_SPELLORDAMAGE_IMMUNE SMSG_SPELLORDAMAGE_IMMUNE;
        vanilla::SMSG_AUCTION_BIDDER_LIST_RESULT SMSG_AUCTION_BIDDER_LIST_RESULT;
        vanilla::SMSG_SET_FLAT_SPELL_MODIFIER SMSG_SET_FLAT_SPELL_MODIFIER;
        vanilla::SMSG_SET_PCT_SPELL_MODIFIER SMSG_SET_PCT_SPELL_MODIFIER;
        vanilla::SMSG_CORPSE_RECLAIM_DELAY SMSG_CORPSE_RECLAIM_DELAY;
        vanilla::MSG_LIST_STABLED_PETS_Server MSG_LIST_STABLED_PETS;
        vanilla::SMSG_STABLE_RESULT SMSG_STABLE_RESULT;
        vanilla::MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT;
        vanilla::SMSG_PLAY_MUSIC SMSG_PLAY_MUSIC;
        vanilla::SMSG_PLAY_OBJECT_SOUND SMSG_PLAY_OBJECT_SOUND;
        vanilla::SMSG_SPELLDISPELLOG SMSG_SPELLDISPELLOG;
        vanilla::MSG_QUERY_NEXT_MAIL_TIME_Server MSG_QUERY_NEXT_MAIL_TIME;
        vanilla::SMSG_RECEIVED_MAIL SMSG_RECEIVED_MAIL;
        vanilla::SMSG_RAID_GROUP_ONLY SMSG_RAID_GROUP_ONLY;
        vanilla::SMSG_PVP_CREDIT SMSG_PVP_CREDIT;
        vanilla::SMSG_AUCTION_REMOVED_NOTIFICATION SMSG_AUCTION_REMOVED_NOTIFICATION;
        vanilla::SMSG_SERVER_MESSAGE SMSG_SERVER_MESSAGE;
        vanilla::SMSG_MEETINGSTONE_SETQUEUE SMSG_MEETINGSTONE_SETQUEUE;
        vanilla::SMSG_MEETINGSTONE_COMPLETE SMSG_MEETINGSTONE_COMPLETE;
        vanilla::SMSG_MEETINGSTONE_IN_PROGRESS SMSG_MEETINGSTONE_IN_PROGRESS;
        vanilla::SMSG_MEETINGSTONE_MEMBER_ADDED SMSG_MEETINGSTONE_MEMBER_ADDED;
        vanilla::SMSG_CANCEL_AUTO_REPEAT SMSG_CANCEL_AUTO_REPEAT;
        vanilla::SMSG_STANDSTATE_UPDATE SMSG_STANDSTATE_UPDATE;
        vanilla::SMSG_LOOT_ALL_PASSED SMSG_LOOT_ALL_PASSED;
        vanilla::SMSG_LOOT_ROLL_WON SMSG_LOOT_ROLL_WON;
        vanilla::SMSG_LOOT_START_ROLL SMSG_LOOT_START_ROLL;
        vanilla::SMSG_LOOT_ROLL SMSG_LOOT_ROLL;
        vanilla::SMSG_LOOT_MASTER_LIST SMSG_LOOT_MASTER_LIST;
        vanilla::SMSG_SET_FORCED_REACTIONS SMSG_SET_FORCED_REACTIONS;
        vanilla::SMSG_SPELL_FAILED_OTHER SMSG_SPELL_FAILED_OTHER;
        vanilla::SMSG_GAMEOBJECT_RESET_STATE SMSG_GAMEOBJECT_RESET_STATE;
        vanilla::SMSG_CHAT_PLAYER_NOT_FOUND SMSG_CHAT_PLAYER_NOT_FOUND;
        vanilla::MSG_TALENT_WIPE_CONFIRM_Server MSG_TALENT_WIPE_CONFIRM;
        vanilla::SMSG_SUMMON_REQUEST SMSG_SUMMON_REQUEST;
        vanilla::SMSG_MONSTER_MOVE_TRANSPORT SMSG_MONSTER_MOVE_TRANSPORT;
        vanilla::SMSG_PET_BROKEN SMSG_PET_BROKEN;
        vanilla::MSG_MOVE_FEATHER_FALL_Server MSG_MOVE_FEATHER_FALL;
        vanilla::MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK;
        vanilla::SMSG_FEIGN_DEATH_RESISTED SMSG_FEIGN_DEATH_RESISTED;
        vanilla::SMSG_DUEL_COUNTDOWN SMSG_DUEL_COUNTDOWN;
        vanilla::SMSG_AREA_TRIGGER_MESSAGE SMSG_AREA_TRIGGER_MESSAGE;
        vanilla::SMSG_MEETINGSTONE_JOINFAILED SMSG_MEETINGSTONE_JOINFAILED;
        vanilla::SMSG_PLAYER_SKINNED SMSG_PLAYER_SKINNED;
        vanilla::SMSG_DURABILITY_DAMAGE_DEATH SMSG_DURABILITY_DAMAGE_DEATH;
        vanilla::MSG_PETITION_RENAME MSG_PETITION_RENAME;
        vanilla::SMSG_INIT_WORLD_STATES SMSG_INIT_WORLD_STATES;
        vanilla::SMSG_UPDATE_WORLD_STATE SMSG_UPDATE_WORLD_STATE;
        vanilla::SMSG_ITEM_NAME_QUERY_RESPONSE SMSG_ITEM_NAME_QUERY_RESPONSE;
        vanilla::SMSG_PET_ACTION_FEEDBACK SMSG_PET_ACTION_FEEDBACK;
        vanilla::SMSG_CHAR_RENAME SMSG_CHAR_RENAME;
        vanilla::SMSG_INSTANCE_SAVE_CREATED SMSG_INSTANCE_SAVE_CREATED;
        vanilla::SMSG_RAID_INSTANCE_INFO SMSG_RAID_INSTANCE_INFO;
        vanilla::SMSG_PLAY_SOUND SMSG_PLAY_SOUND;
        vanilla::SMSG_BATTLEFIELD_STATUS SMSG_BATTLEFIELD_STATUS;
        vanilla::MSG_INSPECT_HONOR_STATS_Server MSG_INSPECT_HONOR_STATS;
        vanilla::SMSG_FORCE_WALK_SPEED_CHANGE SMSG_FORCE_WALK_SPEED_CHANGE;
        vanilla::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
        vanilla::SMSG_FORCE_TURN_RATE_CHANGE SMSG_FORCE_TURN_RATE_CHANGE;
        vanilla::MSG_PVP_LOG_DATA_Server MSG_PVP_LOG_DATA;
        vanilla::SMSG_AREA_SPIRIT_HEALER_TIME SMSG_AREA_SPIRIT_HEALER_TIME;
        vanilla::SMSG_WARDEN_DATA SMSG_WARDEN_DATA;
        vanilla::SMSG_GROUP_JOINED_BATTLEGROUND SMSG_GROUP_JOINED_BATTLEGROUND;
        vanilla::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server MSG_BATTLEGROUND_PLAYER_POSITIONS;
        vanilla::SMSG_BINDER_CONFIRM SMSG_BINDER_CONFIRM;
        vanilla::SMSG_BATTLEGROUND_PLAYER_JOINED SMSG_BATTLEGROUND_PLAYER_JOINED;
        vanilla::SMSG_BATTLEGROUND_PLAYER_LEFT SMSG_BATTLEGROUND_PLAYER_LEFT;
        vanilla::SMSG_ADDON_INFO SMSG_ADDON_INFO;
        vanilla::SMSG_PET_UNLEARN_CONFIRM SMSG_PET_UNLEARN_CONFIRM;
        vanilla::SMSG_PARTY_MEMBER_STATS_FULL SMSG_PARTY_MEMBER_STATS_FULL;
        vanilla::SMSG_WEATHER SMSG_WEATHER;
        vanilla::SMSG_RAID_INSTANCE_MESSAGE SMSG_RAID_INSTANCE_MESSAGE;
        vanilla::SMSG_COMPRESSED_MOVES SMSG_COMPRESSED_MOVES;
        vanilla::SMSG_CHAT_RESTRICTED SMSG_CHAT_RESTRICTED;
        vanilla::SMSG_SPLINE_SET_RUN_SPEED SMSG_SPLINE_SET_RUN_SPEED;
        vanilla::SMSG_SPLINE_SET_RUN_BACK_SPEED SMSG_SPLINE_SET_RUN_BACK_SPEED;
        vanilla::SMSG_SPLINE_SET_SWIM_SPEED SMSG_SPLINE_SET_SWIM_SPEED;
        vanilla::SMSG_SPLINE_SET_WALK_SPEED SMSG_SPLINE_SET_WALK_SPEED;
        vanilla::SMSG_SPLINE_SET_SWIM_BACK_SPEED SMSG_SPLINE_SET_SWIM_BACK_SPEED;
        vanilla::SMSG_SPLINE_SET_TURN_RATE SMSG_SPLINE_SET_TURN_RATE;
        vanilla::SMSG_SPLINE_MOVE_UNROOT SMSG_SPLINE_MOVE_UNROOT;
        vanilla::SMSG_SPLINE_MOVE_FEATHER_FALL SMSG_SPLINE_MOVE_FEATHER_FALL;
        vanilla::SMSG_SPLINE_MOVE_NORMAL_FALL SMSG_SPLINE_MOVE_NORMAL_FALL;
        vanilla::SMSG_SPLINE_MOVE_SET_HOVER SMSG_SPLINE_MOVE_SET_HOVER;
        vanilla::SMSG_SPLINE_MOVE_UNSET_HOVER SMSG_SPLINE_MOVE_UNSET_HOVER;
        vanilla::SMSG_SPLINE_MOVE_WATER_WALK SMSG_SPLINE_MOVE_WATER_WALK;
        vanilla::SMSG_SPLINE_MOVE_LAND_WALK SMSG_SPLINE_MOVE_LAND_WALK;
        vanilla::SMSG_SPLINE_MOVE_START_SWIM SMSG_SPLINE_MOVE_START_SWIM;
        vanilla::SMSG_SPLINE_MOVE_STOP_SWIM SMSG_SPLINE_MOVE_STOP_SWIM;
        vanilla::SMSG_SPLINE_MOVE_SET_RUN_MODE SMSG_SPLINE_MOVE_SET_RUN_MODE;
        vanilla::SMSG_SPLINE_MOVE_SET_WALK_MODE SMSG_SPLINE_MOVE_SET_WALK_MODE;
        vanilla::MSG_MOVE_TIME_SKIPPED_Server MSG_MOVE_TIME_SKIPPED;
        vanilla::SMSG_SPLINE_MOVE_ROOT SMSG_SPLINE_MOVE_ROOT;
        vanilla::SMSG_INVALIDATE_PLAYER SMSG_INVALIDATE_PLAYER;
        vanilla::SMSG_INSTANCE_RESET SMSG_INSTANCE_RESET;
        vanilla::SMSG_INSTANCE_RESET_FAILED SMSG_INSTANCE_RESET_FAILED;
        vanilla::SMSG_UPDATE_LAST_INSTANCE SMSG_UPDATE_LAST_INSTANCE;
        vanilla::MSG_RAID_TARGET_UPDATE_Server MSG_RAID_TARGET_UPDATE;
        vanilla::MSG_RAID_READY_CHECK_Server MSG_RAID_READY_CHECK;
        vanilla::SMSG_PET_ACTION_SOUND SMSG_PET_ACTION_SOUND;
        vanilla::SMSG_PET_DISMISS_SOUND SMSG_PET_DISMISS_SOUND;
        vanilla::SMSG_GM_TICKET_STATUS_UPDATE SMSG_GM_TICKET_STATUS_UPDATE;
        vanilla::SMSG_UPDATE_INSTANCE_OWNERSHIP SMSG_UPDATE_INSTANCE_OWNERSHIP;
        vanilla::SMSG_SPELLINSTAKILLLOG SMSG_SPELLINSTAKILLLOG;
        vanilla::SMSG_SPELL_UPDATE_CHAIN_TARGETS SMSG_SPELL_UPDATE_CHAIN_TARGETS;
        vanilla::SMSG_EXPECTED_SPAM_RECORDS SMSG_EXPECTED_SPAM_RECORDS;
        vanilla::SMSG_DEFENSE_MESSAGE SMSG_DEFENSE_MESSAGE;
    };

public:
    WOW_WORLD_MESSAGES_CPP_EXPORT bool is_none() const noexcept {
        return opcode == Opcode::NONE;
    }
    WOW_WORLD_MESSAGES_CPP_EXPORT static ServerOpcode read(Reader& reader, const std::function<void(unsigned char*, size_t)>& decrypt);

    WOW_WORLD_MESSAGES_CPP_EXPORT std::vector<unsigned char> write(const std::function<void(unsigned char*, size_t)>& encrypt) const;


    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode() : opcode(Opcode::NONE), SMSG_CHAR_CREATE() {}

    /* 1 destructor */
    WOW_WORLD_MESSAGES_CPP_EXPORT ~ServerOpcode();

    /* 2 copy constructor */
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(const ServerOpcode& other);
    /* 3 copy assignment */
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode& operator=(const ServerOpcode& other);
    /* 4 move constructor */
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(ServerOpcode&& other) noexcept;

    /* 5 move assignment */
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode& operator=(ServerOpcode&& other) noexcept;

    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CHAR_CREATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CHAR_ENUM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CHAR_DELETE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_NEW_WORLD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TRANSFER_PENDING&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TRANSFER_ABORTED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CHARACTER_LOGIN_FAILED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOGIN_SETTIMESPEED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOGOUT_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOGOUT_COMPLETE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOGOUT_CANCEL_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_NAME_QUERY_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_NAME_QUERY_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GUILD_QUERY_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ITEM_QUERY_SINGLE_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PAGE_TEXT_QUERY_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUEST_QUERY_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GAMEOBJECT_QUERY_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CREATURE_QUERY_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_WHO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_WHOIS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FRIEND_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FRIEND_STATUS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_IGNORE_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GROUP_INVITE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GROUP_DECLINE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GROUP_UNINVITE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GROUP_SET_LEADER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GROUP_DESTROYED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GROUP_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PARTY_MEMBER_STATS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PARTY_COMMAND_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GUILD_INVITE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GUILD_INFO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GUILD_ROSTER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GUILD_EVENT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GUILD_COMMAND_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MESSAGECHAT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CHANNEL_NOTIFY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CHANNEL_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_UPDATE_OBJECT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DESTROY_OBJECT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_READ_ITEM_OK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_READ_ITEM_FAILED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ITEM_COOLDOWN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GAMEOBJECT_CUSTOM_ANIM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_START_FORWARD_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_START_BACKWARD_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_STOP_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_START_STRAFE_LEFT_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_START_STRAFE_RIGHT_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_STOP_STRAFE_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_JUMP_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_START_TURN_LEFT_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_START_TURN_RIGHT_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_STOP_TURN_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_START_PITCH_UP_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_START_PITCH_DOWN_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_STOP_PITCH_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_SET_RUN_MODE_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_SET_WALK_MODE_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_TELEPORT_ACK_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_FALL_LAND_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_START_SWIM_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_STOP_SWIM_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_SET_FACING_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_SET_PITCH_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_WORLDPORT_ACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MONSTER_MOVE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MOVE_WATER_WALK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MOVE_LAND_WALK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FORCE_RUN_SPEED_CHANGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FORCE_RUN_BACK_SPEED_CHANGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FORCE_SWIM_SPEED_CHANGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FORCE_MOVE_ROOT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FORCE_MOVE_UNROOT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_HEARTBEAT_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MOVE_KNOCK_BACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MOVE_FEATHER_FALL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MOVE_NORMAL_FALL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MOVE_SET_HOVER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MOVE_UNSET_HOVER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TRIGGER_CINEMATIC&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TUTORIAL_FLAGS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_EMOTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TEXT_EMOTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_INVENTORY_CHANGE_FAILURE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_OPEN_CONTAINER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_INSPECT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TRADE_STATUS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TRADE_STATUS_EXTENDED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_INITIALIZE_FACTIONS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SET_FACTION_VISIBLE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SET_FACTION_STANDING&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SET_PROFICIENCY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ACTION_BUTTONS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_INITIAL_SPELLS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LEARNED_SPELL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SUPERCEDED_SPELL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CAST_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELL_START&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELL_GO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELL_FAILURE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELL_COOLDOWN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_COOLDOWN_EVENT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_UPDATE_AURA_DURATION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_CAST_FAILED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_CHANNEL_START_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_CHANNEL_UPDATE_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AI_REACTION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ATTACKSTART&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ATTACKSTOP&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ATTACKSWING_NOTINRANGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ATTACKSWING_BADFACING&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ATTACKSWING_NOTSTANDING&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ATTACKSWING_DEADTARGET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ATTACKSWING_CANT_ATTACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ATTACKERSTATEUPDATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CANCEL_COMBAT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELLHEALLOG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELLENERGIZELOG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_BINDPOINTUPDATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PLAYERBOUND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CLIENT_CONTROL_UPDATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_RESURRECT_REQUEST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOOT_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOOT_RELEASE_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOOT_REMOVED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOOT_MONEY_NOTIFY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOOT_CLEAR_MONEY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ITEM_PUSH_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DUEL_REQUESTED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DUEL_OUTOFBOUNDS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DUEL_INBOUNDS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DUEL_COMPLETE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DUEL_WINNER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MOUNTRESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DISMOUNTRESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MOUNTSPECIAL_ANIM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_TAME_FAILURE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_NAME_INVALID&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_SPELLS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_MODE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GOSSIP_MESSAGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GOSSIP_COMPLETE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_NPC_TEXT_UPDATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTGIVER_STATUS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTGIVER_QUEST_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTGIVER_QUEST_DETAILS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTGIVER_REQUEST_ITEMS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTGIVER_OFFER_REWARD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTGIVER_QUEST_INVALID&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTGIVER_QUEST_COMPLETE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTGIVER_QUEST_FAILED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTLOG_FULL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTUPDATE_FAILED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTUPDATE_FAILEDTIMER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTUPDATE_COMPLETE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTUPDATE_ADD_KILL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUESTUPDATE_ADD_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUEST_CONFIRM_ACCEPT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LIST_INVENTORY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SELL_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_BUY_ITEM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_BUY_FAILED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SHOWTAXINODES&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TAXINODE_STATUS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ACTIVATETAXIREPLY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_NEW_TAXI_PATH&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TRAINER_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TRAINER_BUY_SUCCEEDED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TRAINER_BUY_FAILED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SHOW_BANK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_BUY_BANK_SLOT_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PETITION_SHOWLIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PETITION_SHOW_SIGNATURES&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PETITION_SIGN_RESULTS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_PETITION_DECLINE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_TURN_IN_PETITION_RESULTS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PETITION_QUERY_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FISH_NOT_HOOKED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FISH_ESCAPED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_NOTIFICATION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PLAYED_TIME&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_QUERY_TIME_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOG_XPGAIN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LEVELUP_INFO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MINIMAP_PING_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_RESISTLOG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ENCHANTMENTLOG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_START_MIRROR_TIMER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PAUSE_MIRROR_TIMER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_STOP_MIRROR_TIMER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PONG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CLEAR_COOLDOWN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GAMEOBJECT_PAGETEXT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELL_DELAYED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ITEM_TIME_UPDATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ITEM_ENCHANT_TIME_UPDATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AUTH_CHALLENGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AUTH_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_SAVE_GUILD_EMBLEM_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_TABARDVENDOR_ACTIVATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PLAY_SPELL_VISUAL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PARTYKILLLOG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_COMPRESSED_UPDATE_OBJECT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PLAY_SPELL_IMPACT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_EXPLORATION_EXPERIENCE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_RANDOM_ROLL_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ENVIRONMENTAL_DAMAGE_LOG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_LOOKING_FOR_GROUP_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_REMOVED_SPELL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GMTICKET_CREATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GMTICKET_UPDATETEXT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ACCOUNT_DATA_TIMES&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GMTICKET_GETTICKET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GAMEOBJECT_SPAWN_ANIM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GAMEOBJECT_DESPAWN_ANIM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_CORPSE_QUERY_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GMTICKET_DELETETICKET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CHAT_WRONG_FACTION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GMTICKET_SYSTEMSTATUS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SET_REST_START&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPIRIT_HEALER_CONFIRM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GOSSIP_POI&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOGIN_VERIFY_WORLD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SEND_MAIL_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MAIL_LIST_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_BATTLEFIELD_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ITEM_TEXT_QUERY_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELLLOGMISS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELLLOGEXECUTE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PERIODICAURALOG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELLDAMAGESHIELD&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELLNONMELEEDAMAGELOG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ZONE_UNDER_ATTACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_AUCTION_HELLO_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AUCTION_COMMAND_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AUCTION_LIST_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AUCTION_OWNER_LIST_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AUCTION_BIDDER_NOTIFICATION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AUCTION_OWNER_NOTIFICATION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PROCRESIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DISPEL_FAILED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELLORDAMAGE_IMMUNE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AUCTION_BIDDER_LIST_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SET_FLAT_SPELL_MODIFIER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SET_PCT_SPELL_MODIFIER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CORPSE_RECLAIM_DELAY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_LIST_STABLED_PETS_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_STABLE_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_QUEST_PUSH_RESULT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PLAY_MUSIC&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PLAY_OBJECT_SOUND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELLDISPELLOG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_QUERY_NEXT_MAIL_TIME_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_RECEIVED_MAIL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_RAID_GROUP_ONLY&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PVP_CREDIT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AUCTION_REMOVED_NOTIFICATION&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SERVER_MESSAGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MEETINGSTONE_SETQUEUE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MEETINGSTONE_COMPLETE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MEETINGSTONE_IN_PROGRESS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MEETINGSTONE_MEMBER_ADDED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CANCEL_AUTO_REPEAT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_STANDSTATE_UPDATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOOT_ALL_PASSED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOOT_ROLL_WON&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOOT_START_ROLL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOOT_ROLL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_LOOT_MASTER_LIST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SET_FORCED_REACTIONS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELL_FAILED_OTHER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GAMEOBJECT_RESET_STATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CHAT_PLAYER_NOT_FOUND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_TALENT_WIPE_CONFIRM_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SUMMON_REQUEST&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MONSTER_MOVE_TRANSPORT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_BROKEN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_FEATHER_FALL_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_WATER_WALK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FEIGN_DEATH_RESISTED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DUEL_COUNTDOWN&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AREA_TRIGGER_MESSAGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_MEETINGSTONE_JOINFAILED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PLAYER_SKINNED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DURABILITY_DAMAGE_DEATH&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_PETITION_RENAME&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_INIT_WORLD_STATES&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_UPDATE_WORLD_STATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ITEM_NAME_QUERY_RESPONSE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_ACTION_FEEDBACK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CHAR_RENAME&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_INSTANCE_SAVE_CREATED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_RAID_INSTANCE_INFO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PLAY_SOUND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_BATTLEFIELD_STATUS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_INSPECT_HONOR_STATS_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FORCE_WALK_SPEED_CHANGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_FORCE_TURN_RATE_CHANGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_PVP_LOG_DATA_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_AREA_SPIRIT_HEALER_TIME&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_WARDEN_DATA&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GROUP_JOINED_BATTLEGROUND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_BINDER_CONFIRM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_BATTLEGROUND_PLAYER_JOINED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_BATTLEGROUND_PLAYER_LEFT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_ADDON_INFO&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_UNLEARN_CONFIRM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PARTY_MEMBER_STATS_FULL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_WEATHER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_RAID_INSTANCE_MESSAGE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_COMPRESSED_MOVES&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_CHAT_RESTRICTED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_SET_RUN_SPEED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_SET_RUN_BACK_SPEED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_SET_SWIM_SPEED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_SET_WALK_SPEED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_SET_SWIM_BACK_SPEED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_SET_TURN_RATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_UNROOT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_FEATHER_FALL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_NORMAL_FALL&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_SET_HOVER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_UNSET_HOVER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_WATER_WALK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_LAND_WALK&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_START_SWIM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_STOP_SWIM&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_SET_RUN_MODE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_SET_WALK_MODE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_MOVE_TIME_SKIPPED_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPLINE_MOVE_ROOT&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_INVALIDATE_PLAYER&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_INSTANCE_RESET&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_INSTANCE_RESET_FAILED&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_UPDATE_LAST_INSTANCE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_RAID_TARGET_UPDATE_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::MSG_RAID_READY_CHECK_Server&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_ACTION_SOUND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_PET_DISMISS_SOUND&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_GM_TICKET_STATUS_UPDATE&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_UPDATE_INSTANCE_OWNERSHIP&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELLINSTAKILLLOG&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_SPELL_UPDATE_CHAIN_TARGETS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_EXPECTED_SPAM_RECORDS&& obj);
    WOW_WORLD_MESSAGES_CPP_EXPORT ServerOpcode(vanilla::SMSG_DEFENSE_MESSAGE&& obj);

    template<typename T>
    // NOLINTNEXTLINE
    T& get() {
        static_assert(std::is_same<T, vanilla::SMSG_CHAR_CREATE>::value, "Invalid type. All possible types have been specialized below.");
    }

    template<typename T>
    // NOLINTNEXTLINE
    T* get_if() {
        static_assert(std::is_same<T, vanilla::SMSG_CHAR_CREATE>::value, "Invalid type. All possible types have been specialized below.");
    }

    WOW_WORLD_MESSAGES_CPP_EXPORT const char* to_string() const;
};

template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAR_CREATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAR_CREATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAR_ENUM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAR_ENUM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAR_DELETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAR_DELETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_NEW_WORLD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_NEW_WORLD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRANSFER_PENDING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRANSFER_PENDING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRANSFER_ABORTED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRANSFER_ABORTED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHARACTER_LOGIN_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHARACTER_LOGIN_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOGIN_SETTIMESPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOGIN_SETTIMESPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOGOUT_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOGOUT_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOGOUT_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOGOUT_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOGOUT_CANCEL_ACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOGOUT_CANCEL_ACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_NAME_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_NAME_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_NAME_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_NAME_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_QUERY_SINGLE_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_QUERY_SINGLE_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PAGE_TEXT_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PAGE_TEXT_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUEST_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUEST_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CREATURE_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CREATURE_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_WHO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_WHO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_WHOIS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_WHOIS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FRIEND_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FRIEND_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FRIEND_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FRIEND_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_IGNORE_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_IGNORE_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_INVITE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_INVITE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_DECLINE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_DECLINE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_UNINVITE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_UNINVITE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_SET_LEADER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_SET_LEADER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_DESTROYED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_DESTROYED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PARTY_MEMBER_STATS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PARTY_MEMBER_STATS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PARTY_COMMAND_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PARTY_COMMAND_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_INVITE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_INVITE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_ROSTER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_ROSTER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_EVENT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_EVENT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_COMMAND_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GUILD_COMMAND_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MESSAGECHAT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MESSAGECHAT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHANNEL_NOTIFY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHANNEL_NOTIFY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHANNEL_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHANNEL_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_UPDATE_OBJECT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_UPDATE_OBJECT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DESTROY_OBJECT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DESTROY_OBJECT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_READ_ITEM_OK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_READ_ITEM_OK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_READ_ITEM_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_READ_ITEM_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_COOLDOWN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_COOLDOWN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_CUSTOM_ANIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_CUSTOM_ANIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_FORWARD_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_FORWARD_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_BACKWARD_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_BACKWARD_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_STRAFE_LEFT_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_STRAFE_LEFT_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_STRAFE_RIGHT_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_STRAFE_RIGHT_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_STRAFE_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_STRAFE_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_JUMP_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_JUMP_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_TURN_LEFT_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_TURN_LEFT_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_TURN_RIGHT_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_TURN_RIGHT_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_TURN_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_TURN_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_PITCH_UP_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_PITCH_UP_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_PITCH_DOWN_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_PITCH_DOWN_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_PITCH_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_PITCH_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_RUN_MODE_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_RUN_MODE_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_WALK_MODE_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_WALK_MODE_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_TELEPORT_ACK_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_TELEPORT_ACK_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_FALL_LAND_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_FALL_LAND_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_SWIM_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_START_SWIM_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_SWIM_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_STOP_SWIM_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_FACING_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_FACING_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_PITCH_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_SET_PITCH_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_WORLDPORT_ACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_WORLDPORT_ACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MONSTER_MOVE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MONSTER_MOVE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_WATER_WALK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_WATER_WALK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_LAND_WALK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_LAND_WALK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_RUN_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_RUN_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_RUN_BACK_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_RUN_BACK_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_SWIM_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_SWIM_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_MOVE_ROOT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_MOVE_ROOT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_MOVE_UNROOT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_MOVE_UNROOT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_HEARTBEAT_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_HEARTBEAT_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_KNOCK_BACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_KNOCK_BACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_FEATHER_FALL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_FEATHER_FALL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_NORMAL_FALL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_NORMAL_FALL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_SET_HOVER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_SET_HOVER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_UNSET_HOVER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOVE_UNSET_HOVER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRIGGER_CINEMATIC* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRIGGER_CINEMATIC& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TUTORIAL_FLAGS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TUTORIAL_FLAGS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_EMOTE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_EMOTE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TEXT_EMOTE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TEXT_EMOTE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INVENTORY_CHANGE_FAILURE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INVENTORY_CHANGE_FAILURE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_OPEN_CONTAINER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_OPEN_CONTAINER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INSPECT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INSPECT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRADE_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRADE_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRADE_STATUS_EXTENDED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRADE_STATUS_EXTENDED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INITIALIZE_FACTIONS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INITIALIZE_FACTIONS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_FACTION_VISIBLE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_FACTION_VISIBLE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_FACTION_STANDING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_FACTION_STANDING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_PROFICIENCY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_PROFICIENCY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ACTION_BUTTONS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ACTION_BUTTONS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INITIAL_SPELLS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INITIAL_SPELLS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LEARNED_SPELL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LEARNED_SPELL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SUPERCEDED_SPELL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SUPERCEDED_SPELL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CAST_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CAST_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_START* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_START& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_GO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_GO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_FAILURE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_FAILURE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_COOLDOWN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_COOLDOWN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_COOLDOWN_EVENT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_COOLDOWN_EVENT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_UPDATE_AURA_DURATION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_UPDATE_AURA_DURATION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_CAST_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_CAST_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_CHANNEL_START_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_CHANNEL_START_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_CHANNEL_UPDATE_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_CHANNEL_UPDATE_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AI_REACTION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AI_REACTION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSTART* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSTART& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSTOP* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSTOP& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSWING_NOTINRANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSWING_NOTINRANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSWING_BADFACING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSWING_BADFACING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSWING_NOTSTANDING* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSWING_NOTSTANDING& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSWING_DEADTARGET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSWING_DEADTARGET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSWING_CANT_ATTACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKSWING_CANT_ATTACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKERSTATEUPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ATTACKERSTATEUPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CANCEL_COMBAT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CANCEL_COMBAT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLHEALLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLHEALLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLENERGIZELOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLENERGIZELOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BINDPOINTUPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BINDPOINTUPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAYERBOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAYERBOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CLIENT_CONTROL_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CLIENT_CONTROL_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RESURRECT_REQUEST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RESURRECT_REQUEST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_RELEASE_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_RELEASE_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_REMOVED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_REMOVED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_MONEY_NOTIFY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_MONEY_NOTIFY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_CLEAR_MONEY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_CLEAR_MONEY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_PUSH_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_PUSH_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_REQUESTED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_REQUESTED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_OUTOFBOUNDS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_OUTOFBOUNDS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_INBOUNDS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_INBOUNDS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_WINNER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_WINNER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOUNTRESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOUNTRESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DISMOUNTRESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DISMOUNTRESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOUNTSPECIAL_ANIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MOUNTSPECIAL_ANIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_TAME_FAILURE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_TAME_FAILURE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_NAME_INVALID* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_NAME_INVALID& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_SPELLS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_SPELLS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_MODE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_MODE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GOSSIP_MESSAGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GOSSIP_MESSAGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GOSSIP_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GOSSIP_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_NPC_TEXT_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_NPC_TEXT_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_QUEST_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_QUEST_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_QUEST_DETAILS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_QUEST_DETAILS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_REQUEST_ITEMS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_REQUEST_ITEMS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_OFFER_REWARD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_OFFER_REWARD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_QUEST_INVALID* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_QUEST_INVALID& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_QUEST_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_QUEST_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_QUEST_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTGIVER_QUEST_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTLOG_FULL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTLOG_FULL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTUPDATE_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTUPDATE_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTUPDATE_FAILEDTIMER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTUPDATE_FAILEDTIMER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTUPDATE_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTUPDATE_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTUPDATE_ADD_KILL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTUPDATE_ADD_KILL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTUPDATE_ADD_ITEM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUESTUPDATE_ADD_ITEM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUEST_CONFIRM_ACCEPT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUEST_CONFIRM_ACCEPT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LIST_INVENTORY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LIST_INVENTORY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SELL_ITEM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SELL_ITEM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BUY_ITEM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BUY_ITEM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BUY_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BUY_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SHOWTAXINODES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SHOWTAXINODES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TAXINODE_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TAXINODE_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ACTIVATETAXIREPLY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ACTIVATETAXIREPLY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_NEW_TAXI_PATH* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_NEW_TAXI_PATH& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRAINER_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRAINER_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRAINER_BUY_SUCCEEDED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRAINER_BUY_SUCCEEDED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRAINER_BUY_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TRAINER_BUY_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SHOW_BANK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SHOW_BANK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BUY_BANK_SLOT_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BUY_BANK_SLOT_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PETITION_SHOWLIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PETITION_SHOWLIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PETITION_SHOW_SIGNATURES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PETITION_SHOW_SIGNATURES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PETITION_SIGN_RESULTS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PETITION_SIGN_RESULTS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PETITION_DECLINE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PETITION_DECLINE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TURN_IN_PETITION_RESULTS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_TURN_IN_PETITION_RESULTS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PETITION_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PETITION_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FISH_NOT_HOOKED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FISH_NOT_HOOKED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FISH_ESCAPED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FISH_ESCAPED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_NOTIFICATION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_NOTIFICATION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAYED_TIME* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAYED_TIME& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUERY_TIME_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_QUERY_TIME_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOG_XPGAIN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOG_XPGAIN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LEVELUP_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LEVELUP_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MINIMAP_PING_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MINIMAP_PING_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RESISTLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RESISTLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ENCHANTMENTLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ENCHANTMENTLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_START_MIRROR_TIMER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_START_MIRROR_TIMER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PAUSE_MIRROR_TIMER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PAUSE_MIRROR_TIMER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_STOP_MIRROR_TIMER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_STOP_MIRROR_TIMER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PONG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PONG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CLEAR_COOLDOWN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CLEAR_COOLDOWN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_PAGETEXT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_PAGETEXT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_DELAYED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_DELAYED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_TIME_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_TIME_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_ENCHANT_TIME_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_ENCHANT_TIME_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUTH_CHALLENGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUTH_CHALLENGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUTH_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUTH_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_SAVE_GUILD_EMBLEM_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_SAVE_GUILD_EMBLEM_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_TABARDVENDOR_ACTIVATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_TABARDVENDOR_ACTIVATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAY_SPELL_VISUAL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAY_SPELL_VISUAL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PARTYKILLLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PARTYKILLLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_COMPRESSED_UPDATE_OBJECT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_COMPRESSED_UPDATE_OBJECT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAY_SPELL_IMPACT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAY_SPELL_IMPACT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_EXPLORATION_EXPERIENCE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_EXPLORATION_EXPERIENCE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RANDOM_ROLL_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RANDOM_ROLL_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ENVIRONMENTAL_DAMAGE_LOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ENVIRONMENTAL_DAMAGE_LOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_LOOKING_FOR_GROUP_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_LOOKING_FOR_GROUP_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_REMOVED_SPELL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_REMOVED_SPELL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GMTICKET_CREATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GMTICKET_CREATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GMTICKET_UPDATETEXT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GMTICKET_UPDATETEXT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ACCOUNT_DATA_TIMES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ACCOUNT_DATA_TIMES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GMTICKET_GETTICKET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GMTICKET_GETTICKET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_SPAWN_ANIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_SPAWN_ANIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_DESPAWN_ANIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_DESPAWN_ANIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_CORPSE_QUERY_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_CORPSE_QUERY_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GMTICKET_DELETETICKET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GMTICKET_DELETETICKET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAT_WRONG_FACTION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAT_WRONG_FACTION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GMTICKET_SYSTEMSTATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GMTICKET_SYSTEMSTATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_REST_START* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_REST_START& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPIRIT_HEALER_CONFIRM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPIRIT_HEALER_CONFIRM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GOSSIP_POI* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GOSSIP_POI& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOGIN_VERIFY_WORLD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOGIN_VERIFY_WORLD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SEND_MAIL_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SEND_MAIL_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MAIL_LIST_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MAIL_LIST_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BATTLEFIELD_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BATTLEFIELD_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_TEXT_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_TEXT_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLLOGMISS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLLOGMISS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLLOGEXECUTE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLLOGEXECUTE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PERIODICAURALOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PERIODICAURALOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLDAMAGESHIELD* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLDAMAGESHIELD& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLNONMELEEDAMAGELOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLNONMELEEDAMAGELOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ZONE_UNDER_ATTACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ZONE_UNDER_ATTACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_AUCTION_HELLO_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_AUCTION_HELLO_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_COMMAND_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_COMMAND_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_LIST_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_LIST_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_OWNER_LIST_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_OWNER_LIST_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_BIDDER_NOTIFICATION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_BIDDER_NOTIFICATION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_OWNER_NOTIFICATION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_OWNER_NOTIFICATION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PROCRESIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PROCRESIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DISPEL_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DISPEL_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLORDAMAGE_IMMUNE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLORDAMAGE_IMMUNE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_BIDDER_LIST_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_BIDDER_LIST_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_FLAT_SPELL_MODIFIER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_FLAT_SPELL_MODIFIER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_PCT_SPELL_MODIFIER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_PCT_SPELL_MODIFIER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CORPSE_RECLAIM_DELAY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CORPSE_RECLAIM_DELAY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_LIST_STABLED_PETS_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_LIST_STABLED_PETS_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_STABLE_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_STABLE_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_QUEST_PUSH_RESULT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_QUEST_PUSH_RESULT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAY_MUSIC* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAY_MUSIC& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAY_OBJECT_SOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAY_OBJECT_SOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLDISPELLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLDISPELLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_QUERY_NEXT_MAIL_TIME_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_QUERY_NEXT_MAIL_TIME_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RECEIVED_MAIL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RECEIVED_MAIL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RAID_GROUP_ONLY* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RAID_GROUP_ONLY& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PVP_CREDIT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PVP_CREDIT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_REMOVED_NOTIFICATION* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AUCTION_REMOVED_NOTIFICATION& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SERVER_MESSAGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SERVER_MESSAGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MEETINGSTONE_SETQUEUE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MEETINGSTONE_SETQUEUE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MEETINGSTONE_COMPLETE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MEETINGSTONE_COMPLETE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MEETINGSTONE_IN_PROGRESS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MEETINGSTONE_IN_PROGRESS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MEETINGSTONE_MEMBER_ADDED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MEETINGSTONE_MEMBER_ADDED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CANCEL_AUTO_REPEAT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CANCEL_AUTO_REPEAT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_STANDSTATE_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_STANDSTATE_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_ALL_PASSED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_ALL_PASSED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_ROLL_WON* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_ROLL_WON& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_START_ROLL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_START_ROLL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_ROLL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_ROLL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_MASTER_LIST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_LOOT_MASTER_LIST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_FORCED_REACTIONS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SET_FORCED_REACTIONS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_FAILED_OTHER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_FAILED_OTHER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_RESET_STATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GAMEOBJECT_RESET_STATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAT_PLAYER_NOT_FOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAT_PLAYER_NOT_FOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_TALENT_WIPE_CONFIRM_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_TALENT_WIPE_CONFIRM_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SUMMON_REQUEST* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SUMMON_REQUEST& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MONSTER_MOVE_TRANSPORT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MONSTER_MOVE_TRANSPORT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_BROKEN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_BROKEN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_FEATHER_FALL_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_FEATHER_FALL_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_WATER_WALK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_WATER_WALK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FEIGN_DEATH_RESISTED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FEIGN_DEATH_RESISTED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_COUNTDOWN* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DUEL_COUNTDOWN& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AREA_TRIGGER_MESSAGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AREA_TRIGGER_MESSAGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MEETINGSTONE_JOINFAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_MEETINGSTONE_JOINFAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAYER_SKINNED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAYER_SKINNED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DURABILITY_DAMAGE_DEATH* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DURABILITY_DAMAGE_DEATH& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PETITION_RENAME* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PETITION_RENAME& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INIT_WORLD_STATES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INIT_WORLD_STATES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_UPDATE_WORLD_STATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_UPDATE_WORLD_STATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_NAME_QUERY_RESPONSE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ITEM_NAME_QUERY_RESPONSE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_ACTION_FEEDBACK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_ACTION_FEEDBACK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAR_RENAME* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAR_RENAME& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INSTANCE_SAVE_CREATED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INSTANCE_SAVE_CREATED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RAID_INSTANCE_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RAID_INSTANCE_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAY_SOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PLAY_SOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BATTLEFIELD_STATUS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BATTLEFIELD_STATUS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_INSPECT_HONOR_STATS_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_INSPECT_HONOR_STATS_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_WALK_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_WALK_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_TURN_RATE_CHANGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_FORCE_TURN_RATE_CHANGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PVP_LOG_DATA_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_PVP_LOG_DATA_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AREA_SPIRIT_HEALER_TIME* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_AREA_SPIRIT_HEALER_TIME& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_WARDEN_DATA* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_WARDEN_DATA& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_JOINED_BATTLEGROUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GROUP_JOINED_BATTLEGROUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_BATTLEGROUND_PLAYER_POSITIONS_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BINDER_CONFIRM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BINDER_CONFIRM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BATTLEGROUND_PLAYER_JOINED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BATTLEGROUND_PLAYER_JOINED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BATTLEGROUND_PLAYER_LEFT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_BATTLEGROUND_PLAYER_LEFT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ADDON_INFO* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_ADDON_INFO& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_UNLEARN_CONFIRM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_UNLEARN_CONFIRM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PARTY_MEMBER_STATS_FULL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PARTY_MEMBER_STATS_FULL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_WEATHER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_WEATHER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RAID_INSTANCE_MESSAGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_RAID_INSTANCE_MESSAGE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_COMPRESSED_MOVES* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_COMPRESSED_MOVES& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAT_RESTRICTED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_CHAT_RESTRICTED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_RUN_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_RUN_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_RUN_BACK_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_RUN_BACK_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_SWIM_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_SWIM_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_WALK_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_WALK_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_SWIM_BACK_SPEED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_SWIM_BACK_SPEED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_TURN_RATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_SET_TURN_RATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_UNROOT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_UNROOT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_FEATHER_FALL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_FEATHER_FALL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_NORMAL_FALL* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_NORMAL_FALL& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_SET_HOVER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_SET_HOVER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_UNSET_HOVER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_UNSET_HOVER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_WATER_WALK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_WATER_WALK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_LAND_WALK* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_LAND_WALK& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_START_SWIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_START_SWIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_STOP_SWIM* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_STOP_SWIM& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_SET_RUN_MODE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_SET_RUN_MODE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_SET_WALK_MODE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_SET_WALK_MODE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_TIME_SKIPPED_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_MOVE_TIME_SKIPPED_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_ROOT* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPLINE_MOVE_ROOT& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INVALIDATE_PLAYER* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INVALIDATE_PLAYER& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INSTANCE_RESET* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INSTANCE_RESET& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INSTANCE_RESET_FAILED* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_INSTANCE_RESET_FAILED& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_UPDATE_LAST_INSTANCE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_UPDATE_LAST_INSTANCE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RAID_TARGET_UPDATE_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RAID_TARGET_UPDATE_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RAID_READY_CHECK_Server* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::MSG_RAID_READY_CHECK_Server& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_ACTION_SOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_ACTION_SOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_DISMISS_SOUND* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_PET_DISMISS_SOUND& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GM_TICKET_STATUS_UPDATE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_GM_TICKET_STATUS_UPDATE& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_UPDATE_INSTANCE_OWNERSHIP* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_UPDATE_INSTANCE_OWNERSHIP& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLINSTAKILLLOG* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELLINSTAKILLLOG& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_UPDATE_CHAIN_TARGETS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_SPELL_UPDATE_CHAIN_TARGETS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_EXPECTED_SPAM_RECORDS* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_EXPECTED_SPAM_RECORDS& ServerOpcode::get();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DEFENSE_MESSAGE* ServerOpcode::get_if();
template<>
WOW_WORLD_MESSAGES_CPP_EXPORT vanilla::SMSG_DEFENSE_MESSAGE& ServerOpcode::get();

} // namespace vanilla
} // namespace wow_world_messages
#endif /* WOW_WORLD_MESSAGES_CPP_VANILLA_HPP */
