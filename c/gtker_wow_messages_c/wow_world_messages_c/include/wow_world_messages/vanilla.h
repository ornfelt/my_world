#ifndef WOW_WORLD_MESSAGES_VANILLA_H
#define WOW_WORLD_MESSAGES_VANILLA_H

/* clang-format off */

#include "wow_world_messages/wow_world_messages.h"
#include "wow_world_messages/all.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
typedef enum {
    VANILLA_ACCOUNT_DATA_TYPE_GLOBAL_CONFIG_CACHE = 0,
    VANILLA_ACCOUNT_DATA_TYPE_PER_CHARACTER_CONFIG_CACHE = 1,
    VANILLA_ACCOUNT_DATA_TYPE_GLOBAL_BINDINGS_CACHE = 2,
    VANILLA_ACCOUNT_DATA_TYPE_PER_CHARACTER_BINDINGS_CACHE = 3,
    VANILLA_ACCOUNT_DATA_TYPE_GLOBAL_MACROS_CACHE = 4,
    VANILLA_ACCOUNT_DATA_TYPE_PER_CHARACTER_MACROS_CACHE = 5,
    VANILLA_ACCOUNT_DATA_TYPE_PER_CHARACTER_LAYOUT_CACHE = 6,
    VANILLA_ACCOUNT_DATA_TYPE_PER_CHARACTER_CHAT_CACHE = 7,
    VANILLA_ACCOUNT_DATA_TYPE_NUM_ACCOUNT_DATA_TYPES = 8
} vanilla_AccountDataType;

typedef enum {
    VANILLA_ACTIVATE_TAXI_REPLY_OK = 0,
    VANILLA_ACTIVATE_TAXI_REPLY_UNSPECIFIED_SERVER_ERROR = 1,
    VANILLA_ACTIVATE_TAXI_REPLY_NO_SUCH_PATH = 2,
    VANILLA_ACTIVATE_TAXI_REPLY_NOT_ENOUGH_MONEY = 3,
    VANILLA_ACTIVATE_TAXI_REPLY_TOO_FAR_AWAY = 4,
    VANILLA_ACTIVATE_TAXI_REPLY_NO_VENDOR_NEARBY = 5,
    VANILLA_ACTIVATE_TAXI_REPLY_NOT_VISITED = 6,
    VANILLA_ACTIVATE_TAXI_REPLY_PLAYER_BUSY = 7,
    VANILLA_ACTIVATE_TAXI_REPLY_PLAYER_ALREADY_MOUNTED = 8,
    VANILLA_ACTIVATE_TAXI_REPLY_PLAYER_SHAPE_SHIFTED = 9,
    VANILLA_ACTIVATE_TAXI_REPLY_PLAYER_MOVING = 10,
    VANILLA_ACTIVATE_TAXI_REPLY_SAME_NODE = 11,
    VANILLA_ACTIVATE_TAXI_REPLY_NOT_STANDING = 12
} vanilla_ActivateTaxiReply;

typedef enum {
    VANILLA_ADDON_TYPE_BANNED = 0,
    VANILLA_ADDON_TYPE_ENABLED = 1,
    VANILLA_ADDON_TYPE_BLIZZARD = 2
} vanilla_AddonType;

typedef enum {
    VANILLA_AI_REACTION_ALERT = 0,
    VANILLA_AI_REACTION_FRIENDLY = 1,
    VANILLA_AI_REACTION_HOSTILE = 2,
    VANILLA_AI_REACTION_AFRAID = 3,
    VANILLA_AI_REACTION_DESTROY = 4
} vanilla_AiReaction;

typedef enum {
    VANILLA_AREA_NONE = 0,
    VANILLA_AREA_DUN_MOROGH = 1,
    VANILLA_AREA_LONGSHORE = 2,
    VANILLA_AREA_BADLANDS = 3,
    VANILLA_AREA_BLASTED_LANDS = 4,
    VANILLA_AREA_BLACKWATER_COVE = 7,
    VANILLA_AREA_SWAMP_OF_SORROWS = 8,
    VANILLA_AREA_NORTHSHIRE_VALLEY = 9,
    VANILLA_AREA_DUSKWOOD = 10,
    VANILLA_AREA_WETLANDS = 11,
    VANILLA_AREA_ELWYNN_FOREST = 12,
    VANILLA_AREA_THE_WORLD_TREE = 13,
    VANILLA_AREA_DUROTAR = 14,
    VANILLA_AREA_DUSTWALLOW_MARSH = 15,
    VANILLA_AREA_AZSHARA = 16,
    VANILLA_AREA_THE_BARRENS = 17,
    VANILLA_AREA_CRYSTAL_LAKE = 18,
    VANILLA_AREA_ZUL_GURUB0 = 19,
    VANILLA_AREA_MOONBROOK = 20,
    VANILLA_AREA_KUL_TIRAS = 21,
    VANILLA_AREA_PROGRAMMER_ISLE = 22,
    VANILLA_AREA_NORTHSHIRE_RIVER = 23,
    VANILLA_AREA_NORTHSHIRE_ABBEY = 24,
    VANILLA_AREA_BLACKROCK_MOUNTAIN0 = 25,
    VANILLA_AREA_LIGHTHOUSE = 26,
    VANILLA_AREA_WESTERN_PLAGUELANDS = 28,
    VANILLA_AREA_NINE = 30,
    VANILLA_AREA_THE_CEMETARY = 32,
    VANILLA_AREA_STRANGLETHORN_VALE = 33,
    VANILLA_AREA_ECHO_RIDGE_MINE = 34,
    VANILLA_AREA_BOOTY_BAY = 35,
    VANILLA_AREA_ALTERAC_MOUNTAINS = 36,
    VANILLA_AREA_LAKE_NAZFERITI = 37,
    VANILLA_AREA_LOCH_MODAN = 38,
    VANILLA_AREA_WESTFALL0 = 40,
    VANILLA_AREA_DEADWIND_PASS = 41,
    VANILLA_AREA_DARKSHIRE = 42,
    VANILLA_AREA_WILD_SHORE = 43,
    VANILLA_AREA_REDRIDGE_MOUNTAINS = 44,
    VANILLA_AREA_ARATHI_HIGHLANDS = 45,
    VANILLA_AREA_BURNING_STEPPES = 46,
    VANILLA_AREA_THE_HINTERLANDS = 47,
    VANILLA_AREA_DEAD_MANS_HOLE = 49,
    VANILLA_AREA_SEARING_GORGE = 51,
    VANILLA_AREA_THIEVES_CAMP = 53,
    VANILLA_AREA_JASPERLODE_MINE = 54,
    VANILLA_AREA_VALLEY_OF_HEROES_UNUSED = 55,
    VANILLA_AREA_HEROES_VIGIL = 56,
    VANILLA_AREA_FARGODEEP_MINE = 57,
    VANILLA_AREA_NORTHSHIRE_VINEYARDS = 59,
    VANILLA_AREA_FORESTS_EDGE = 60,
    VANILLA_AREA_THUNDER_FALLS = 61,
    VANILLA_AREA_BRACKWELL_PUMPKIN_PATCH = 62,
    VANILLA_AREA_THE_STONEFIELD_FARM = 63,
    VANILLA_AREA_THE_MACLURE_VINEYARDS = 64,
    VANILLA_AREA_ON_MAP_DUNGEON0 = 65,
    VANILLA_AREA_ON_MAP_DUNGEON1 = 66,
    VANILLA_AREA_ON_MAP_DUNGEON2 = 67,
    VANILLA_AREA_LAKE_EVERSTILL = 68,
    VANILLA_AREA_LAKESHIRE = 69,
    VANILLA_AREA_STONEWATCH = 70,
    VANILLA_AREA_STONEWATCH_FALLS = 71,
    VANILLA_AREA_THE_DARK_PORTAL = 72,
    VANILLA_AREA_THE_TAINTED_SCAR = 73,
    VANILLA_AREA_POOL_OF_TEARS = 74,
    VANILLA_AREA_STONARD = 75,
    VANILLA_AREA_FALLOW_SANCTUARY = 76,
    VANILLA_AREA_ANVILMAR = 77,
    VANILLA_AREA_STORMWIND_MOUNTAINS = 80,
    VANILLA_AREA_JEFF_NE_QUADRANT_CHANGED = 81,
    VANILLA_AREA_JEFF_NW_QUADRANT = 82,
    VANILLA_AREA_JEFF_SE_QUADRANT = 83,
    VANILLA_AREA_JEFF_SW_QUADRANT = 84,
    VANILLA_AREA_TIRISFAL_GLADES = 85,
    VANILLA_AREA_STONE_CAIRN_LAKE = 86,
    VANILLA_AREA_GOLDSHIRE = 87,
    VANILLA_AREA_EASTVALE_LOGGING_CAMP = 88,
    VANILLA_AREA_MIRROR_LAKE_ORCHARD = 89,
    VANILLA_AREA_TOWER_OF_AZORA = 91,
    VANILLA_AREA_MIRROR_LAKE = 92,
    VANILLA_AREA_VUL_GOL_OGRE_MOUND = 93,
    VANILLA_AREA_RAVEN_HILL = 94,
    VANILLA_AREA_REDRIDGE_CANYONS = 95,
    VANILLA_AREA_TOWER_OF_ILGALAR = 96,
    VANILLA_AREA_ALTHERS_MILL = 97,
    VANILLA_AREA_RETHBAN_CAVERNS = 98,
    VANILLA_AREA_REBEL_CAMP = 99,
    VANILLA_AREA_NESINGWARYS_EXPEDITION = 100,
    VANILLA_AREA_KURZENS_COMPOUND = 101,
    VANILLA_AREA_RUINS_OF_ZUL_KUNDA = 102,
    VANILLA_AREA_RUINS_OF_ZUL_MAMWE = 103,
    VANILLA_AREA_THE_VILE_REEF = 104,
    VANILLA_AREA_MOSH_OGG_OGRE_MOUND = 105,
    VANILLA_AREA_THE_STOCKPILE = 106,
    VANILLA_AREA_SALDEANS_FARM = 107,
    VANILLA_AREA_SENTINEL_HILL = 108,
    VANILLA_AREA_FURLBROWS_PUMPKIN_FARM = 109,
    VANILLA_AREA_JANGOLODE_MINE = 111,
    VANILLA_AREA_GOLD_COAST_QUARRY = 113,
    VANILLA_AREA_WESTFALL_LIGHTHOUSE = 115,
    VANILLA_AREA_MISTY_VALLEY = 116,
    VANILLA_AREA_GROM_GOL_BASE_CAMP = 117,
    VANILLA_AREA_WHELGARS_EXCAVATION_SITE = 118,
    VANILLA_AREA_WESTBROOK_GARRISON = 120,
    VANILLA_AREA_TRANQUIL_GARDENS_CEMETERY = 121,
    VANILLA_AREA_ZUULDAIA_RUINS = 122,
    VANILLA_AREA_BAL_LAL_RUINS = 123,
    VANILLA_AREA_KAL_AI_RUINS = 125,
    VANILLA_AREA_TKASHI_RUINS = 126,
    VANILLA_AREA_BALIA_MAH_RUINS = 127,
    VANILLA_AREA_ZIATAJAI_RUINS = 128,
    VANILLA_AREA_MIZJAH_RUINS = 129,
    VANILLA_AREA_SILVERPINE_FOREST = 130,
    VANILLA_AREA_KHARANOS = 131,
    VANILLA_AREA_COLDRIDGE_VALLEY = 132,
    VANILLA_AREA_GNOMEREGAN0 = 133,
    VANILLA_AREA_GOL_BOLAR_QUARRY = 134,
    VANILLA_AREA_FROSTMANE_HOLD = 135,
    VANILLA_AREA_THE_GRIZZLED_DEN = 136,
    VANILLA_AREA_BREWNALL_VILLAGE = 137,
    VANILLA_AREA_MISTY_PINE_REFUGE = 138,
    VANILLA_AREA_EASTERN_PLAGUELANDS = 139,
    VANILLA_AREA_TELDRASSIL = 141,
    VANILLA_AREA_IRONBANDS_EXCAVATION_SITE = 142,
    VANILLA_AREA_MO_GROSH_STRONGHOLD = 143,
    VANILLA_AREA_THELSAMAR = 144,
    VANILLA_AREA_ALGAZ_GATE = 145,
    VANILLA_AREA_STONEWROUGHT_DAM = 146,
    VANILLA_AREA_THE_FARSTRIDER_LODGE = 147,
    VANILLA_AREA_DARKSHORE = 148,
    VANILLA_AREA_SILVER_STREAM_MINE = 149,
    VANILLA_AREA_MENETHIL_HARBOR = 150,
    VANILLA_AREA_DESIGNER_ISLAND = 151,
    VANILLA_AREA_THE_BULWARK0 = 152,
    VANILLA_AREA_RUINS_OF_LORDAERON = 153,
    VANILLA_AREA_DEATHKNELL = 154,
    VANILLA_AREA_NIGHT_WEBS_HOLLOW = 155,
    VANILLA_AREA_SOLLIDEN_FARMSTEAD = 156,
    VANILLA_AREA_AGAMAND_MILLS = 157,
    VANILLA_AREA_AGAMAND_FAMILY_CRYPT = 158,
    VANILLA_AREA_BRILL = 159,
    VANILLA_AREA_WHISPERING_GARDENS = 160,
    VANILLA_AREA_TERRACE_OF_REPOSE = 161,
    VANILLA_AREA_BRIGHTWATER_LAKE = 162,
    VANILLA_AREA_GUNTHERS_RETREAT = 163,
    VANILLA_AREA_GARRENS_HAUNT = 164,
    VANILLA_AREA_BALNIR_FARMSTEAD = 165,
    VANILLA_AREA_COLD_HEARTH_MANOR = 166,
    VANILLA_AREA_CRUSADER_OUTPOST = 167,
    VANILLA_AREA_THE_NORTH_COAST = 168,
    VANILLA_AREA_WHISPERING_SHORE = 169,
    VANILLA_AREA_LORDAMERE_LAKE0 = 170,
    VANILLA_AREA_FENRIS_ISLE = 172,
    VANILLA_AREA_FAOLS_REST = 173,
    VANILLA_AREA_DOLANAAR = 186,
    VANILLA_AREA_DARNASSUS_UNUSED = 187,
    VANILLA_AREA_SHADOWGLEN = 188,
    VANILLA_AREA_STEELGRILLS_DEPOT = 189,
    VANILLA_AREA_HEARTHGLEN = 190,
    VANILLA_AREA_NORTHRIDGE_LUMBER_CAMP = 192,
    VANILLA_AREA_RUINS_OF_ANDORHAL = 193,
    VANILLA_AREA_SCHOOL_OF_NECROMANCY = 195,
    VANILLA_AREA_UTHERS_TOMB = 196,
    VANILLA_AREA_SORROW_HILL = 197,
    VANILLA_AREA_THE_WEEPING_CAVE = 198,
    VANILLA_AREA_FELSTONE_FIELD = 199,
    VANILLA_AREA_DALSONS_TEARS = 200,
    VANILLA_AREA_GAHRRONS_WITHERING = 201,
    VANILLA_AREA_THE_WRITHING_HAUNT = 202,
    VANILLA_AREA_MARDENHOLDE_KEEP = 203,
    VANILLA_AREA_PYREWOOD_VILLAGE = 204,
    VANILLA_AREA_DUN_MODR = 205,
    VANILLA_AREA_WESTFALL1 = 206,
    VANILLA_AREA_THE_GREAT_SEA0 = 207,
    VANILLA_AREA_UNUSED_IRONCLADCOVE = 208,
    VANILLA_AREA_SHADOWFANG_KEEP0 = 209,
    VANILLA_AREA_ON_MAP_DUNGEON3 = 210,
    VANILLA_AREA_ICEFLOW_LAKE = 211,
    VANILLA_AREA_HELMS_BED_LAKE = 212,
    VANILLA_AREA_DEEP_ELEM_MINE = 213,
    VANILLA_AREA_THE_GREAT_SEA1 = 214,
    VANILLA_AREA_MULGORE = 215,
    VANILLA_AREA_ALEXSTON_FARMSTEAD = 219,
    VANILLA_AREA_RED_CLOUD_MESA = 220,
    VANILLA_AREA_CAMP_NARACHE = 221,
    VANILLA_AREA_BLOODHOOF_VILLAGE = 222,
    VANILLA_AREA_STONEBULL_LAKE = 223,
    VANILLA_AREA_RAVAGED_CARAVAN = 224,
    VANILLA_AREA_RED_ROCKS = 225,
    VANILLA_AREA_THE_SKITTERING_DARK = 226,
    VANILLA_AREA_VALGANS_FIELD = 227,
    VANILLA_AREA_THE_SEPULCHER = 228,
    VANILLA_AREA_OLSENS_FARTHING = 229,
    VANILLA_AREA_THE_GREYMANE_WALL = 230,
    VANILLA_AREA_BERENS_PERIL = 231,
    VANILLA_AREA_THE_DAWNING_ISLES = 232,
    VANILLA_AREA_AMBERMILL = 233,
    VANILLA_AREA_FENRIS_KEEP = 235,
    VANILLA_AREA_SHADOWFANG_KEEP1 = 236,
    VANILLA_AREA_THE_DECREPIT_FERRY = 237,
    VANILLA_AREA_MALDENS_ORCHARD = 238,
    VANILLA_AREA_THE_IVAR_PATCH = 239,
    VANILLA_AREA_THE_DEAD_FIELD = 240,
    VANILLA_AREA_THE_ROTTING_ORCHARD = 241,
    VANILLA_AREA_BRIGHTWOOD_GROVE = 242,
    VANILLA_AREA_FORLORN_ROWE = 243,
    VANILLA_AREA_THE_WHIPPLE_ESTATE = 244,
    VANILLA_AREA_THE_YORGEN_FARMSTEAD = 245,
    VANILLA_AREA_THE_CAULDRON = 246,
    VANILLA_AREA_GRIMESILT_DIG_SITE = 247,
    VANILLA_AREA_DREADMAUL_ROCK = 249,
    VANILLA_AREA_RUINS_OF_THAURISSAN = 250,
    VANILLA_AREA_FLAME_CREST = 251,
    VANILLA_AREA_BLACKROCK_STRONGHOLD = 252,
    VANILLA_AREA_THE_PILLAR_OF_ASH = 253,
    VANILLA_AREA_BLACKROCK_MOUNTAIN1 = 254,
    VANILLA_AREA_ALTAR_OF_STORMS0 = 255,
    VANILLA_AREA_ALDRASSIL = 256,
    VANILLA_AREA_SHADOWTHREAD_CAVE = 257,
    VANILLA_AREA_FEL_ROCK = 258,
    VANILLA_AREA_LAKE_AL_AMETH = 259,
    VANILLA_AREA_STARBREEZE_VILLAGE = 260,
    VANILLA_AREA_GNARLPINE_HOLD = 261,
    VANILLA_AREA_BAN_ETHIL_BARROW_DEN = 262,
    VANILLA_AREA_THE_CLEFT = 263,
    VANILLA_AREA_THE_ORACLE_GLADE = 264,
    VANILLA_AREA_WELLSPRING_RIVER = 265,
    VANILLA_AREA_WELLSPRING_LAKE = 266,
    VANILLA_AREA_HILLSBRAD_FOOTHILLS = 267,
    VANILLA_AREA_AZSHARA_CRATER = 268,
    VANILLA_AREA_DUN_ALGAZ0 = 269,
    VANILLA_AREA_SOUTHSHORE0 = 271,
    VANILLA_AREA_TARREN_MILL0 = 272,
    VANILLA_AREA_DURNHOLDE_KEEP0 = 275,
    VANILLA_AREA_UNUSED_STONEWROUGHT_PASS = 276,
    VANILLA_AREA_THE_FOOTHILL_CAVERNS = 277,
    VANILLA_AREA_LORDAMERE_INTERNMENT_CAMP = 278,
    VANILLA_AREA_DALARAN = 279,
    VANILLA_AREA_STRAHNBRAD = 280,
    VANILLA_AREA_RUINS_OF_ALTERAC = 281,
    VANILLA_AREA_CRUSHRIDGE_HOLD = 282,
    VANILLA_AREA_SLAUGHTER_HOLLOW = 283,
    VANILLA_AREA_THE_UPLANDS = 284,
    VANILLA_AREA_SOUTHPOINT_TOWER0 = 285,
    VANILLA_AREA_HILLSBRAD_FIELDS0 = 286,
    VANILLA_AREA_HILLSBRAD = 287,
    VANILLA_AREA_AZURELODE_MINE0 = 288,
    VANILLA_AREA_NETHANDER_STEAD0 = 289,
    VANILLA_AREA_DUN_GAROK0 = 290,
    VANILLA_AREA_THORADINS_WALL0 = 293,
    VANILLA_AREA_EASTERN_STRAND0 = 294,
    VANILLA_AREA_WESTERN_STRAND0 = 295,
    VANILLA_AREA_SOUTH_SEAS_UNUSED = 296,
    VANILLA_AREA_JAGUERO_ISLE = 297,
    VANILLA_AREA_BARADIN_BAY = 298,
    VANILLA_AREA_MENETHIL_BAY = 299,
    VANILLA_AREA_MISTY_REED_STRAND = 300,
    VANILLA_AREA_THE_SAVAGE_COAST = 301,
    VANILLA_AREA_THE_CRYSTAL_SHORE = 302,
    VANILLA_AREA_SHELL_BEACH = 303,
    VANILLA_AREA_NORTH_TIDES_RUN = 305,
    VANILLA_AREA_SOUTH_TIDES_RUN = 306,
    VANILLA_AREA_THE_OVERLOOK_CLIFFS = 307,
    VANILLA_AREA_THE_FORBIDDING_SEA0 = 308,
    VANILLA_AREA_IRONBEARDS_TOMB = 309,
    VANILLA_AREA_CRYSTALVEIN_MINE = 310,
    VANILLA_AREA_RUINS_OF_ABORAZ = 311,
    VANILLA_AREA_JANEIROS_POINT = 312,
    VANILLA_AREA_NORTHFOLD_MANOR = 313,
    VANILLA_AREA_GO_SHEK_FARM = 314,
    VANILLA_AREA_DABYRIES_FARMSTEAD = 315,
    VANILLA_AREA_BOULDERFIST_HALL = 316,
    VANILLA_AREA_WITHERBARK_VILLAGE = 317,
    VANILLA_AREA_DRYWHISKER_GORGE = 318,
    VANILLA_AREA_REFUGE_POINTE = 320,
    VANILLA_AREA_HAMMERFALL = 321,
    VANILLA_AREA_BLACKWATER_SHIPWRECKS = 322,
    VANILLA_AREA_O_BREENS_CAMP = 323,
    VANILLA_AREA_STROMGARDE_KEEP = 324,
    VANILLA_AREA_THE_TOWER_OF_ARATHOR = 325,
    VANILLA_AREA_THE_SANCTUM = 326,
    VANILLA_AREA_FALDIRS_COVE = 327,
    VANILLA_AREA_THE_DROWNED_REEF = 328,
    VANILLA_AREA_THANDOL_SPAN0 = 330,
    VANILLA_AREA_ASHENVALE = 331,
    VANILLA_AREA_THE_GREAT_SEA2 = 332,
    VANILLA_AREA_CIRCLE_OF_EAST_BINDING = 333,
    VANILLA_AREA_CIRCLE_OF_WEST_BINDING = 334,
    VANILLA_AREA_CIRCLE_OF_INNER_BINDING = 335,
    VANILLA_AREA_CIRCLE_OF_OUTER_BINDING = 336,
    VANILLA_AREA_APOCRYPHANS_REST = 337,
    VANILLA_AREA_ANGOR_FORTRESS = 338,
    VANILLA_AREA_LETHLOR_RAVINE = 339,
    VANILLA_AREA_KARGATH = 340,
    VANILLA_AREA_CAMP_KOSH = 341,
    VANILLA_AREA_CAMP_BOFF = 342,
    VANILLA_AREA_CAMP_WURG = 343,
    VANILLA_AREA_CAMP_CAGG = 344,
    VANILLA_AREA_AGMONDS_END = 345,
    VANILLA_AREA_HAMMERTOES_DIGSITE = 346,
    VANILLA_AREA_DUSTBELCH_GROTTO = 347,
    VANILLA_AREA_AERIE_PEAK = 348,
    VANILLA_AREA_WILDHAMMER_KEEP = 349,
    VANILLA_AREA_QUEL_DANIL_LODGE = 350,
    VANILLA_AREA_SKULK_ROCK = 351,
    VANILLA_AREA_ZUN_WATHA = 352,
    VANILLA_AREA_SHADRA_ALOR = 353,
    VANILLA_AREA_JINTHA_ALOR = 354,
    VANILLA_AREA_THE_ALTAR_OF_ZUL = 355,
    VANILLA_AREA_SERADANE = 356,
    VANILLA_AREA_FERALAS = 357,
    VANILLA_AREA_BRAMBLEBLADE_RAVINE = 358,
    VANILLA_AREA_BAEL_MODAN = 359,
    VANILLA_AREA_THE_VENTURE_CO_MINE = 360,
    VANILLA_AREA_FELWOOD = 361,
    VANILLA_AREA_RAZOR_HILL = 362,
    VANILLA_AREA_VALLEY_OF_TRIALS = 363,
    VANILLA_AREA_THE_DEN = 364,
    VANILLA_AREA_BURNING_BLADE_COVEN = 365,
    VANILLA_AREA_KOLKAR_CRAG = 366,
    VANILLA_AREA_SEN_JIN_VILLAGE = 367,
    VANILLA_AREA_ECHO_ISLES = 368,
    VANILLA_AREA_THUNDER_RIDGE = 369,
    VANILLA_AREA_DRYGULCH_RAVINE = 370,
    VANILLA_AREA_DUSTWIND_CAVE = 371,
    VANILLA_AREA_TIRAGARDE_KEEP = 372,
    VANILLA_AREA_SCUTTLE_COAST = 373,
    VANILLA_AREA_BLADEFIST_BAY = 374,
    VANILLA_AREA_DEADEYE_SHORE = 375,
    VANILLA_AREA_SOUTHFURY_RIVER0 = 377,
    VANILLA_AREA_CAMP_TAURAJO = 378,
    VANILLA_AREA_FAR_WATCH_POST = 379,
    VANILLA_AREA_THE_CROSSROADS = 380,
    VANILLA_AREA_BOULDER_LODE_MINE = 381,
    VANILLA_AREA_THE_SLUDGE_FEN = 382,
    VANILLA_AREA_THE_DRY_HILLS = 383,
    VANILLA_AREA_DREADMIST_PEAK = 384,
    VANILLA_AREA_NORTHWATCH_HOLD = 385,
    VANILLA_AREA_THE_FORGOTTEN_POOLS = 386,
    VANILLA_AREA_LUSHWATER_OASIS = 387,
    VANILLA_AREA_THE_STAGNANT_OASIS = 388,
    VANILLA_AREA_FIELD_OF_GIANTS = 390,
    VANILLA_AREA_THE_MERCHANT_COAST = 391,
    VANILLA_AREA_RATCHET = 392,
    VANILLA_AREA_DARKSPEAR_STRAND = 393,
    VANILLA_AREA_DARROWMERE_LAKE_UNUSED = 394,
    VANILLA_AREA_CAER_DARROW_UNUSED = 395,
    VANILLA_AREA_WINTERHOOF_WATER_WELL = 396,
    VANILLA_AREA_THUNDERHORN_WATER_WELL = 397,
    VANILLA_AREA_WILDMANE_WATER_WELL = 398,
    VANILLA_AREA_SKYLINE_RIDGE = 399,
    VANILLA_AREA_THOUSAND_NEEDLES = 400,
    VANILLA_AREA_THE_TIDUS_STAIR = 401,
    VANILLA_AREA_SHADY_REST_INN = 403,
    VANILLA_AREA_BAEL_DUN_DIGSITE = 404,
    VANILLA_AREA_DESOLACE = 405,
    VANILLA_AREA_STONETALON_MOUNTAINS = 406,
    VANILLA_AREA_ORGRIMMAR_UNUSED = 407,
    VANILLA_AREA_GILLIJIMS_ISLE = 408,
    VANILLA_AREA_ISLAND_OF_DOCTOR_LAPIDIS = 409,
    VANILLA_AREA_RAZORWIND_CANYON = 410,
    VANILLA_AREA_BATHRANS_HAUNT = 411,
    VANILLA_AREA_THE_RUINS_OF_ORDIL_ARAN = 412,
    VANILLA_AREA_MAESTRAS_POST = 413,
    VANILLA_AREA_THE_ZORAM_STRAND = 414,
    VANILLA_AREA_ASTRANAAR = 415,
    VANILLA_AREA_THE_SHRINE_OF_AESSINA = 416,
    VANILLA_AREA_FIRE_SCAR_SHRINE = 417,
    VANILLA_AREA_THE_RUINS_OF_STARDUST = 418,
    VANILLA_AREA_THE_HOWLING_VALE = 419,
    VANILLA_AREA_SILVERWIND_REFUGE = 420,
    VANILLA_AREA_MYSTRAL_LAKE = 421,
    VANILLA_AREA_FALLEN_SKY_LAKE = 422,
    VANILLA_AREA_IRIS_LAKE = 424,
    VANILLA_AREA_MOONWELL = 425,
    VANILLA_AREA_RAYNEWOOD_RETREAT = 426,
    VANILLA_AREA_THE_SHADY_NOOK = 427,
    VANILLA_AREA_NIGHT_RUN = 428,
    VANILLA_AREA_XAVIAN = 429,
    VANILLA_AREA_SATYRNAAR = 430,
    VANILLA_AREA_SPLINTERTREE_POST = 431,
    VANILLA_AREA_THE_DOR_DANIL_BARROW_DEN = 432,
    VANILLA_AREA_FALFARREN_RIVER = 433,
    VANILLA_AREA_FELFIRE_HILL = 434,
    VANILLA_AREA_DEMON_FALL_CANYON = 435,
    VANILLA_AREA_DEMON_FALL_RIDGE = 436,
    VANILLA_AREA_WARSONG_LUMBER_CAMP = 437,
    VANILLA_AREA_BOUGH_SHADOW = 438,
    VANILLA_AREA_THE_SHIMMERING_FLATS = 439,
    VANILLA_AREA_TANARIS = 440,
    VANILLA_AREA_LAKE_FALATHIM = 441,
    VANILLA_AREA_AUBERDINE = 442,
    VANILLA_AREA_RUINS_OF_MATHYSTRA = 443,
    VANILLA_AREA_TOWER_OF_ALTHALAXX = 444,
    VANILLA_AREA_CLIFFSPRING_FALLS = 445,
    VANILLA_AREA_BASHAL_ARAN = 446,
    VANILLA_AREA_AMETH_ARAN = 447,
    VANILLA_AREA_GROVE_OF_THE_ANCIENTS = 448,
    VANILLA_AREA_THE_MASTERS_GLAIVE = 449,
    VANILLA_AREA_REMTRAVELS_EXCAVATION = 450,
    VANILLA_AREA_MISTS_EDGE = 452,
    VANILLA_AREA_THE_LONG_WASH = 453,
    VANILLA_AREA_WILDBEND_RIVER = 454,
    VANILLA_AREA_BLACKWOOD_DEN = 455,
    VANILLA_AREA_CLIFFSPRING_RIVER = 456,
    VANILLA_AREA_THE_VEILED_SEA0 = 457,
    VANILLA_AREA_GOLD_ROAD = 458,
    VANILLA_AREA_SCARLET_WATCH_POST = 459,
    VANILLA_AREA_SUN_ROCK_RETREAT = 460,
    VANILLA_AREA_WINDSHEAR_CRAG = 461,
    VANILLA_AREA_CRAGPOOL_LAKE = 463,
    VANILLA_AREA_MIRKFALLON_LAKE = 464,
    VANILLA_AREA_THE_CHARRED_VALE = 465,
    VANILLA_AREA_VALLEY_OF_THE_BLOODFURIES = 466,
    VANILLA_AREA_STONETALON_PEAK = 467,
    VANILLA_AREA_THE_TALON_DEN = 468,
    VANILLA_AREA_GREATWOOD_VALE = 469,
    VANILLA_AREA_THUNDER_BLUFF_UNUSED = 470,
    VANILLA_AREA_BRAVE_WIND_MESA = 471,
    VANILLA_AREA_FIRE_STONE_MESA = 472,
    VANILLA_AREA_MANTLE_ROCK = 473,
    VANILLA_AREA_HUNTER_RISE_UNUSED = 474,
    VANILLA_AREA_SPIRIT_RISE_UNUSED = 475,
    VANILLA_AREA_ELDER_RISE_UNUSED = 476,
    VANILLA_AREA_RUINS_OF_JUBUWAL = 477,
    VANILLA_AREA_POOLS_OF_ARLITHRIEN = 478,
    VANILLA_AREA_THE_RUSTMAUL_DIG_SITE = 479,
    VANILLA_AREA_CAMP_E_THOK = 480,
    VANILLA_AREA_SPLITHOOF_CRAG = 481,
    VANILLA_AREA_HIGHPERCH = 482,
    VANILLA_AREA_THE_SCREECHING_CANYON = 483,
    VANILLA_AREA_FREEWIND_POST = 484,
    VANILLA_AREA_THE_GREAT_LIFT0 = 485,
    VANILLA_AREA_GALAK_HOLD = 486,
    VANILLA_AREA_ROGUEFEATHER_DEN = 487,
    VANILLA_AREA_THE_WEATHERED_NOOK = 488,
    VANILLA_AREA_THALANAAR = 489,
    VANILLA_AREA_UN_GORO_CRATER = 490,
    VANILLA_AREA_RAZORFEN_KRAUL0 = 491,
    VANILLA_AREA_RAVEN_HILL_CEMETERY = 492,
    VANILLA_AREA_MOONGLADE = 493,
    VANILLA_AREA_DELETE_ME0 = 495,
    VANILLA_AREA_BRACKENWALL_VILLAGE = 496,
    VANILLA_AREA_SWAMPLIGHT_MANOR = 497,
    VANILLA_AREA_BLOODFEN_BURROW = 498,
    VANILLA_AREA_DARKMIST_CAVERN = 499,
    VANILLA_AREA_MOGGLE_POINT = 500,
    VANILLA_AREA_BEEZILS_WRECK = 501,
    VANILLA_AREA_WITCH_HILL = 502,
    VANILLA_AREA_SENTRY_POINT = 503,
    VANILLA_AREA_NORTH_POINT_TOWER = 504,
    VANILLA_AREA_WEST_POINT_TOWER = 505,
    VANILLA_AREA_LOST_POINT = 506,
    VANILLA_AREA_BLUEFEN = 507,
    VANILLA_AREA_STONEMAUL_RUINS = 508,
    VANILLA_AREA_THE_DEN_OF_FLAME = 509,
    VANILLA_AREA_THE_DRAGONMURK = 510,
    VANILLA_AREA_WYRMBOG = 511,
    VANILLA_AREA_ONYXIAS_LAIR_UNUSED = 512,
    VANILLA_AREA_THERAMORE_ISLE = 513,
    VANILLA_AREA_FOOTHOLD_CITADEL = 514,
    VANILLA_AREA_IRONCLAD_PRISON = 515,
    VANILLA_AREA_DUSTWALLOW_BAY = 516,
    VANILLA_AREA_TIDEFURY_COVE = 517,
    VANILLA_AREA_DREADMURK_SHORE = 518,
    VANILLA_AREA_ADDLES_STEAD = 536,
    VANILLA_AREA_FIRE_PLUME_RIDGE = 537,
    VANILLA_AREA_LAKKARI_TAR_PITS = 538,
    VANILLA_AREA_TERROR_RUN = 539,
    VANILLA_AREA_THE_SLITHERING_SCAR = 540,
    VANILLA_AREA_MARSHALS_REFUGE = 541,
    VANILLA_AREA_FUNGAL_ROCK = 542,
    VANILLA_AREA_GOLAKKA_HOT_SPRINGS = 543,
    VANILLA_AREA_THE_LOCH = 556,
    VANILLA_AREA_BEGGARS_HAUNT = 576,
    VANILLA_AREA_KODO_GRAVEYARD = 596,
    VANILLA_AREA_GHOST_WALKER_POST = 597,
    VANILLA_AREA_SAR_THERIS_STRAND = 598,
    VANILLA_AREA_THUNDER_AXE_FORTRESS = 599,
    VANILLA_AREA_BOLGANS_HOLE = 600,
    VANILLA_AREA_MANNOROC_COVEN = 602,
    VANILLA_AREA_SARGERON = 603,
    VANILLA_AREA_MAGRAM_VILLAGE = 604,
    VANILLA_AREA_GELKIS_VILLAGE = 606,
    VANILLA_AREA_VALLEY_OF_SPEARS = 607,
    VANILLA_AREA_NIJELS_POINT = 608,
    VANILLA_AREA_KOLKAR_VILLAGE = 609,
    VANILLA_AREA_HYJAL = 616,
    VANILLA_AREA_WINTERSPRING = 618,
    VANILLA_AREA_BLACKWOLF_RIVER = 636,
    VANILLA_AREA_KODO_ROCK = 637,
    VANILLA_AREA_HIDDEN_PATH = 638,
    VANILLA_AREA_SPIRIT_ROCK = 639,
    VANILLA_AREA_SHRINE_OF_THE_DORMANT_FLAME = 640,
    VANILLA_AREA_LAKE_ELUNE_ARA = 656,
    VANILLA_AREA_THE_HARBORAGE = 657,
    VANILLA_AREA_OUTLAND = 676,
    VANILLA_AREA_CRAFTSMENS_TERRACE_UNUSED = 696,
    VANILLA_AREA_TRADESMENS_TERRACE_UNUSED = 697,
    VANILLA_AREA_THE_TEMPLE_GARDENS_UNUSED = 698,
    VANILLA_AREA_TEMPLE_OF_ELUNE_UNUSED = 699,
    VANILLA_AREA_CENARION_ENCLAVE_UNUSED = 700,
    VANILLA_AREA_WARRIORS_TERRACE_UNUSED = 701,
    VANILLA_AREA_RUT_THERAN_VILLAGE = 702,
    VANILLA_AREA_IRONBANDS_COMPOUND = 716,
    VANILLA_AREA_THE_STOCKADE = 717,
    VANILLA_AREA_WAILING_CAVERNS = 718,
    VANILLA_AREA_BLACKFATHOM_DEEPS0 = 719,
    VANILLA_AREA_FRAY_ISLAND = 720,
    VANILLA_AREA_GNOMEREGAN1 = 721,
    VANILLA_AREA_RAZORFEN_DOWNS0 = 722,
    VANILLA_AREA_BAN_ETHIL_HOLLOW = 736,
    VANILLA_AREA_SCARLET_MONASTERY = 796,
    VANILLA_AREA_JERODS_LANDING = 797,
    VANILLA_AREA_RIDGEPOINT_TOWER = 798,
    VANILLA_AREA_THE_DARKENED_BANK = 799,
    VANILLA_AREA_COLDRIDGE_PASS = 800,
    VANILLA_AREA_CHILL_BREEZE_VALLEY = 801,
    VANILLA_AREA_SHIMMER_RIDGE = 802,
    VANILLA_AREA_AMBERSTILL_RANCH = 803,
    VANILLA_AREA_THE_TUNDRID_HILLS = 804,
    VANILLA_AREA_SOUTH_GATE_PASS0 = 805,
    VANILLA_AREA_SOUTH_GATE_OUTPOST = 806,
    VANILLA_AREA_NORTH_GATE_PASS0 = 807,
    VANILLA_AREA_NORTH_GATE_OUTPOST = 808,
    VANILLA_AREA_GATES_OF_IRONFORGE = 809,
    VANILLA_AREA_STILLWATER_POND = 810,
    VANILLA_AREA_NIGHTMARE_VALE = 811,
    VANILLA_AREA_VENOMWEB_VALE = 812,
    VANILLA_AREA_THE_BULWARK1 = 813,
    VANILLA_AREA_SOUTHFURY_RIVER1 = 814,
    VANILLA_AREA_SOUTHFURY_RIVER2 = 815,
    VANILLA_AREA_RAZORMANE_GROUNDS = 816,
    VANILLA_AREA_SKULL_ROCK = 817,
    VANILLA_AREA_PALEMANE_ROCK = 818,
    VANILLA_AREA_WINDFURY_RIDGE = 819,
    VANILLA_AREA_THE_GOLDEN_PLAINS = 820,
    VANILLA_AREA_THE_ROLLING_PLAINS = 821,
    VANILLA_AREA_DUN_ALGAZ1 = 836,
    VANILLA_AREA_DUN_ALGAZ2 = 837,
    VANILLA_AREA_NORTH_GATE_PASS1 = 838,
    VANILLA_AREA_SOUTH_GATE_PASS1 = 839,
    VANILLA_AREA_TWILIGHT_GROVE = 856,
    VANILLA_AREA_GM_ISLAND = 876,
    VANILLA_AREA_DELETE_ME1 = 877,
    VANILLA_AREA_SOUTHFURY_RIVER3 = 878,
    VANILLA_AREA_SOUTHFURY_RIVER4 = 879,
    VANILLA_AREA_THANDOL_SPAN1 = 880,
    VANILLA_AREA_THANDOL_SPAN2 = 881,
    VANILLA_AREA_PURGATION_ISLE = 896,
    VANILLA_AREA_THE_JANSEN_STEAD = 916,
    VANILLA_AREA_THE_DEAD_ACRE = 917,
    VANILLA_AREA_THE_MOLSEN_FARM = 918,
    VANILLA_AREA_STENDELS_POND = 919,
    VANILLA_AREA_THE_DAGGER_HILLS = 920,
    VANILLA_AREA_DEMONTS_PLACE = 921,
    VANILLA_AREA_THE_DUST_PLAINS = 922,
    VANILLA_AREA_STONESPLINTER_VALLEY = 923,
    VANILLA_AREA_VALLEY_OF_KINGS = 924,
    VANILLA_AREA_ALGAZ_STATION = 925,
    VANILLA_AREA_BUCKLEBREE_FARM = 926,
    VANILLA_AREA_THE_SHINING_STRAND = 927,
    VANILLA_AREA_NORTH_TIDES_HOLLOW = 928,
    VANILLA_AREA_GRIZZLEPAW_RIDGE = 936,
    VANILLA_AREA_THE_VERDANT_FIELDS = 956,
    VANILLA_AREA_GADGETZAN = 976,
    VANILLA_AREA_STEAMWHEEDLE_PORT = 977,
    VANILLA_AREA_ZUL_FARRAK0 = 978,
    VANILLA_AREA_SANDSORROW_WATCH = 979,
    VANILLA_AREA_THISTLESHRUB_VALLEY = 980,
    VANILLA_AREA_THE_GAPING_CHASM = 981,
    VANILLA_AREA_THE_NOXIOUS_LAIR = 982,
    VANILLA_AREA_DUNEMAUL_COMPOUND = 983,
    VANILLA_AREA_EASTMOON_RUINS = 984,
    VANILLA_AREA_WATERSPRING_FIELD = 985,
    VANILLA_AREA_ZALASHJIS_DEN = 986,
    VANILLA_AREA_LANDS_END_BEACH = 987,
    VANILLA_AREA_WAVESTRIDER_BEACH = 988,
    VANILLA_AREA_ULDUM = 989,
    VANILLA_AREA_VALLEY_OF_THE_WATCHERS = 990,
    VANILLA_AREA_GUNSTANS_POST = 991,
    VANILLA_AREA_SOUTHMOON_RUINS = 992,
    VANILLA_AREA_RENDERS_CAMP = 996,
    VANILLA_AREA_RENDERS_VALLEY = 997,
    VANILLA_AREA_RENDERS_ROCK = 998,
    VANILLA_AREA_STONEWATCH_TOWER = 999,
    VANILLA_AREA_GALARDELL_VALLEY = 1000,
    VANILLA_AREA_LAKERIDGE_HIGHWAY = 1001,
    VANILLA_AREA_THREE_CORNERS = 1002,
    VANILLA_AREA_DIREFORGE_HILL = 1016,
    VANILLA_AREA_RAPTOR_RIDGE = 1017,
    VANILLA_AREA_BLACK_CHANNEL_MARSH = 1018,
    VANILLA_AREA_THE_GREEN_BELT0 = 1019,
    VANILLA_AREA_MOSSHIDE_FEN = 1020,
    VANILLA_AREA_THELGEN_ROCK = 1021,
    VANILLA_AREA_BLUEGILL_MARSH = 1022,
    VANILLA_AREA_SALTSPRAY_GLEN = 1023,
    VANILLA_AREA_SUNDOWN_MARSH = 1024,
    VANILLA_AREA_THE_GREEN_BELT1 = 1025,
    VANILLA_AREA_ANGERFANG_ENCAMPMENT = 1036,
    VANILLA_AREA_GRIM_BATOL = 1037,
    VANILLA_AREA_DRAGONMAW_GATES = 1038,
    VANILLA_AREA_THE_LOST_FLEET = 1039,
    VANILLA_AREA_DARROW_HILL0 = 1056,
    VANILLA_AREA_THORADINS_WALL1 = 1057,
    VANILLA_AREA_WEBWINDER_PATH = 1076,
    VANILLA_AREA_THE_HUSHED_BANK = 1097,
    VANILLA_AREA_MANOR_MISTMANTLE = 1098,
    VANILLA_AREA_CAMP_MOJACHE = 1099,
    VANILLA_AREA_GRIMTOTEM_COMPOUND = 1100,
    VANILLA_AREA_THE_WRITHING_DEEP = 1101,
    VANILLA_AREA_WILDWIND_LAKE = 1102,
    VANILLA_AREA_GORDUNNI_OUTPOST = 1103,
    VANILLA_AREA_MOK_GORDUN = 1104,
    VANILLA_AREA_FERAL_SCAR_VALE = 1105,
    VANILLA_AREA_FRAYFEATHER_HIGHLANDS = 1106,
    VANILLA_AREA_IDLEWIND_LAKE = 1107,
    VANILLA_AREA_THE_FORGOTTEN_COAST = 1108,
    VANILLA_AREA_EAST_PILLAR = 1109,
    VANILLA_AREA_WEST_PILLAR = 1110,
    VANILLA_AREA_DREAM_BOUGH = 1111,
    VANILLA_AREA_JADEMIR_LAKE = 1112,
    VANILLA_AREA_ONEIROS = 1113,
    VANILLA_AREA_RUINS_OF_RAVENWIND = 1114,
    VANILLA_AREA_RAGE_SCAR_HOLD = 1115,
    VANILLA_AREA_FEATHERMOON_STRONGHOLD = 1116,
    VANILLA_AREA_RUINS_OF_SOLARSAL = 1117,
    VANILLA_AREA_LOWER_WILDS_UNUSED = 1118,
    VANILLA_AREA_THE_TWIN_COLOSSALS = 1119,
    VANILLA_AREA_SARDOR_ISLE = 1120,
    VANILLA_AREA_ISLE_OF_DREAD = 1121,
    VANILLA_AREA_HIGH_WILDERNESS = 1136,
    VANILLA_AREA_LOWER_WILDS = 1137,
    VANILLA_AREA_SOUTHERN_BARRENS = 1156,
    VANILLA_AREA_SOUTHERN_GOLD_ROAD = 1157,
    VANILLA_AREA_ZUL_FARRAK1 = 1176,
    VANILLA_AREA_UNUSED_ALCAZ_ISLAND = 1196,
    VANILLA_AREA_TIMBERMAW_HOLD0 = 1216,
    VANILLA_AREA_VANNDIR_ENCAMPMENT = 1217,
    VANILLA_AREA_TEST_AZSHARA = 1218,
    VANILLA_AREA_LEGASH_ENCAMPMENT = 1219,
    VANILLA_AREA_THALASSIAN_BASE_CAMP = 1220,
    VANILLA_AREA_RUINS_OF_ELDARATH = 1221,
    VANILLA_AREA_HETAERAS_CLUTCH = 1222,
    VANILLA_AREA_TEMPLE_OF_ZIN_MALOR = 1223,
    VANILLA_AREA_BEARS_HEAD = 1224,
    VANILLA_AREA_URSOLAN = 1225,
    VANILLA_AREA_TEMPLE_OF_ARKKORAN = 1226,
    VANILLA_AREA_BAY_OF_STORMS = 1227,
    VANILLA_AREA_THE_SHATTERED_STRAND = 1228,
    VANILLA_AREA_TOWER_OF_ELDARA = 1229,
    VANILLA_AREA_JAGGED_REEF = 1230,
    VANILLA_AREA_SOUTHRIDGE_BEACH = 1231,
    VANILLA_AREA_RAVENCREST_MONUMENT = 1232,
    VANILLA_AREA_FORLORN_RIDGE = 1233,
    VANILLA_AREA_LAKE_MENNAR = 1234,
    VANILLA_AREA_SHADOWSONG_SHRINE = 1235,
    VANILLA_AREA_HALDARR_ENCAMPMENT = 1236,
    VANILLA_AREA_VALORMOK = 1237,
    VANILLA_AREA_THE_RUINED_REACHES = 1256,
    VANILLA_AREA_THE_TALONDEEP_PATH0 = 1276,
    VANILLA_AREA_THE_TALONDEEP_PATH1 = 1277,
    VANILLA_AREA_ROCKTUSK_FARM = 1296,
    VANILLA_AREA_JAGGEDSWINE_FARM = 1297,
    VANILLA_AREA_RAZORFEN_DOWNS1 = 1316,
    VANILLA_AREA_LOST_RIGGER_COVE = 1336,
    VANILLA_AREA_ULDAMAN0 = 1337,
    VANILLA_AREA_LORDAMERE_LAKE1 = 1338,
    VANILLA_AREA_LORDAMERE_LAKE2 = 1339,
    VANILLA_AREA_GALLOWS_CORNER = 1357,
    VANILLA_AREA_SILITHUS = 1377,
    VANILLA_AREA_EMERALD_FOREST = 1397,
    VANILLA_AREA_SUNKEN_TEMPLE = 1417,
    VANILLA_AREA_DREADMAUL_HOLD = 1437,
    VANILLA_AREA_NETHERGARDE_KEEP = 1438,
    VANILLA_AREA_DREADMAUL_POST = 1439,
    VANILLA_AREA_SERPENTS_COIL = 1440,
    VANILLA_AREA_ALTAR_OF_STORMS1 = 1441,
    VANILLA_AREA_FIREWATCH_RIDGE = 1442,
    VANILLA_AREA_THE_SLAG_PIT = 1443,
    VANILLA_AREA_THE_SEA_OF_CINDERS = 1444,
    VANILLA_AREA_BLACKROCK_MOUNTAIN2 = 1445,
    VANILLA_AREA_THORIUM_POINT = 1446,
    VANILLA_AREA_GARRISON_ARMORY = 1457,
    VANILLA_AREA_THE_TEMPLE_OF_ATAL_HAKKAR = 1477,
    VANILLA_AREA_UNDERCITY = 1497,
    VANILLA_AREA_ULDAMAN1 = 1517,
    VANILLA_AREA_NOT_USED_DEADMINES = 1518,
    VANILLA_AREA_STORMWIND_CITY = 1519,
    VANILLA_AREA_IRONFORGE = 1537,
    VANILLA_AREA_SPLITHOOF_HOLD = 1557,
    VANILLA_AREA_THE_CAPE_OF_STRANGLETHORN = 1577,
    VANILLA_AREA_SOUTHERN_SAVAGE_COAST = 1578,
    VANILLA_AREA_UNUSED_THE_DEADMINES_002 = 1579,
    VANILLA_AREA_UNUSED_IRONCLAD_COVE_003 = 1580,
    VANILLA_AREA_THE_DEADMINES = 1581,
    VANILLA_AREA_IRONCLAD_COVE = 1582,
    VANILLA_AREA_BLACKROCK_SPIRE = 1583,
    VANILLA_AREA_BLACKROCK_DEPTHS = 1584,
    VANILLA_AREA_RAPTOR_GROUNDS_UNUSED = 1597,
    VANILLA_AREA_GROL_DOM_FARM_UNUSED = 1598,
    VANILLA_AREA_MORSHAN_BASE_CAMP = 1599,
    VANILLA_AREA_HONORS_STAND_UNUSED = 1600,
    VANILLA_AREA_BLACKTHORN_RIDGE_UNUSED = 1601,
    VANILLA_AREA_BRAMBLESCAR_UNUSED = 1602,
    VANILLA_AREA_AGAMA_GOR_UNUSED = 1603,
    VANILLA_AREA_VALLEY_OF_HEROES = 1617,
    VANILLA_AREA_ORGRIMMAR = 1637,
    VANILLA_AREA_THUNDER_BLUFF = 1638,
    VANILLA_AREA_ELDER_RISE = 1639,
    VANILLA_AREA_SPIRIT_RISE = 1640,
    VANILLA_AREA_HUNTER_RISE = 1641,
    VANILLA_AREA_DARNASSUS = 1657,
    VANILLA_AREA_CENARION_ENCLAVE = 1658,
    VANILLA_AREA_CRAFTSMENS_TERRACE = 1659,
    VANILLA_AREA_WARRIORS_TERRACE = 1660,
    VANILLA_AREA_THE_TEMPLE_GARDENS = 1661,
    VANILLA_AREA_TRADESMENS_TERRACE = 1662,
    VANILLA_AREA_GAVINS_NAZE = 1677,
    VANILLA_AREA_SOFERAS_NAZE = 1678,
    VANILLA_AREA_CORRAHNS_DAGGER = 1679,
    VANILLA_AREA_THE_HEADLAND = 1680,
    VANILLA_AREA_MISTY_SHORE = 1681,
    VANILLA_AREA_DANDREDS_FOLD = 1682,
    VANILLA_AREA_GROWLESS_CAVE = 1683,
    VANILLA_AREA_CHILLWIND_POINT = 1684,
    VANILLA_AREA_RAPTOR_GROUNDS = 1697,
    VANILLA_AREA_BRAMBLESCAR = 1698,
    VANILLA_AREA_THORN_HILL = 1699,
    VANILLA_AREA_AGAMA_GOR = 1700,
    VANILLA_AREA_BLACKTHORN_RIDGE = 1701,
    VANILLA_AREA_HONORS_STAND = 1702,
    VANILLA_AREA_THE_MORSHAN_RAMPART = 1703,
    VANILLA_AREA_GROL_DOM_FARM = 1704,
    VANILLA_AREA_RAZORFEN_KRAUL1 = 1717,
    VANILLA_AREA_THE_GREAT_LIFT1 = 1718,
    VANILLA_AREA_MISTVALE_VALLEY = 1737,
    VANILLA_AREA_NEK_MANI_WELLSPRING = 1738,
    VANILLA_AREA_BLOODSAIL_COMPOUND = 1739,
    VANILLA_AREA_VENTURE_CO_BASE_CAMP = 1740,
    VANILLA_AREA_GURUBASHI_ARENA = 1741,
    VANILLA_AREA_SPIRIT_DEN = 1742,
    VANILLA_AREA_THE_CRIMSON_VEIL = 1757,
    VANILLA_AREA_THE_RIPTIDE = 1758,
    VANILLA_AREA_THE_DAMSELS_LUCK = 1759,
    VANILLA_AREA_VENTURE_CO_OPERATIONS_CENTER = 1760,
    VANILLA_AREA_DEADWOOD_VILLAGE = 1761,
    VANILLA_AREA_FELPAW_VILLAGE = 1762,
    VANILLA_AREA_JAEDENAR = 1763,
    VANILLA_AREA_BLOODVENOM_RIVER = 1764,
    VANILLA_AREA_BLOODVENOM_FALLS = 1765,
    VANILLA_AREA_SHATTER_SCAR_VALE = 1766,
    VANILLA_AREA_IRONTREE_WOODS = 1767,
    VANILLA_AREA_IRONTREE_CAVERN = 1768,
    VANILLA_AREA_TIMBERMAW_HOLD1 = 1769,
    VANILLA_AREA_SHADOW_HOLD = 1770,
    VANILLA_AREA_SHRINE_OF_THE_DECEIVER = 1771,
    VANILLA_AREA_ITHARIUSS_CAVE = 1777,
    VANILLA_AREA_SORROWMURK = 1778,
    VANILLA_AREA_DRAENIL_DUR_VILLAGE = 1779,
    VANILLA_AREA_SPLINTERSPEAR_JUNCTION = 1780,
    VANILLA_AREA_STAGALBOG = 1797,
    VANILLA_AREA_THE_SHIFTING_MIRE = 1798,
    VANILLA_AREA_STAGALBOG_CAVE = 1817,
    VANILLA_AREA_WITHERBARK_CAVERNS = 1837,
    VANILLA_AREA_THORADINS_WALL2 = 1857,
    VANILLA_AREA_BOULDER_GOR = 1858,
    VANILLA_AREA_VALLEY_OF_FANGS = 1877,
    VANILLA_AREA_THE_DUSTBOWL = 1878,
    VANILLA_AREA_MIRAGE_FLATS = 1879,
    VANILLA_AREA_FEATHERBEARDS_HOVEL = 1880,
    VANILLA_AREA_SHINDIGGERS_CAMP = 1881,
    VANILLA_AREA_PLAGUEMIST_RAVINE = 1882,
    VANILLA_AREA_VALORWIND_LAKE = 1883,
    VANILLA_AREA_AGOL_WATHA = 1884,
    VANILLA_AREA_HIRI_WATHA = 1885,
    VANILLA_AREA_THE_CREEPING_RUIN = 1886,
    VANILLA_AREA_BOGENS_LEDGE = 1887,
    VANILLA_AREA_THE_MAKERS_TERRACE = 1897,
    VANILLA_AREA_DUSTWIND_GULCH = 1898,
    VANILLA_AREA_SHAOL_WATHA = 1917,
    VANILLA_AREA_NOONSHADE_RUINS = 1937,
    VANILLA_AREA_BROKEN_PILLAR = 1938,
    VANILLA_AREA_ABYSSAL_SANDS = 1939,
    VANILLA_AREA_SOUTHBREAK_SHORE = 1940,
    VANILLA_AREA_CAVERNS_OF_TIME0 = 1941,
    VANILLA_AREA_THE_MARSHLANDS = 1942,
    VANILLA_AREA_IRONSTONE_PLATEAU = 1943,
    VANILLA_AREA_BLACKCHAR_CAVE = 1957,
    VANILLA_AREA_TANNER_CAMP = 1958,
    VANILLA_AREA_DUSTFIRE_VALLEY = 1959,
    VANILLA_AREA_ZUL_GURUB1 = 1977,
    VANILLA_AREA_MISTY_REED_POST = 1978,
    VANILLA_AREA_BLOODVENOM_POST = 1997,
    VANILLA_AREA_TALONBRANCH_GLADE = 1998,
    VANILLA_AREA_STRATHOLME0 = 2017,
    VANILLA_AREA_UNUSED_SHADOWFANG_KEEP_003 = 2037,
    VANILLA_AREA_SCHOLOMANCE = 2057,
    VANILLA_AREA_TWILIGHT_VALE = 2077,
    VANILLA_AREA_TWILIGHT_SHORE = 2078,
    VANILLA_AREA_ALCAZ_ISLAND = 2079,
    VANILLA_AREA_DARKCLOUD_PINNACLE = 2097,
    VANILLA_AREA_DAWNING_WOOD_CATACOMBS = 2098,
    VANILLA_AREA_STONEWATCH_KEEP = 2099,
    VANILLA_AREA_MARAUDON = 2100,
    VANILLA_AREA_STOUTLAGER_INN = 2101,
    VANILLA_AREA_THUNDERBREW_DISTILLERY = 2102,
    VANILLA_AREA_MENETHIL_KEEP = 2103,
    VANILLA_AREA_DEEPWATER_TAVERN = 2104,
    VANILLA_AREA_SHADOW_GRAVE = 2117,
    VANILLA_AREA_BRILL_TOWN_HALL = 2118,
    VANILLA_AREA_GALLOWS_END_TAVERN = 2119,
    VANILLA_AREA_THE_POOLS_OF_VISION_UNUSED = 2137,
    VANILLA_AREA_DREADMIST_DEN = 2138,
    VANILLA_AREA_BAEL_DUN_KEEP = 2157,
    VANILLA_AREA_EMBERSTRIFES_DEN = 2158,
    VANILLA_AREA_ONYXIAS_LAIR = 2159,
    VANILLA_AREA_WINDSHEAR_MINE = 2160,
    VANILLA_AREA_ROLANDS_DOOM = 2161,
    VANILLA_AREA_BATTLE_RING = 2177,
    VANILLA_AREA_THE_POOLS_OF_VISION = 2197,
    VANILLA_AREA_SHADOWBREAK_RAVINE = 2198,
    VANILLA_AREA_BROKEN_SPEAR_VILLAGE = 2217,
    VANILLA_AREA_WHITEREACH_POST = 2237,
    VANILLA_AREA_GORNIA = 2238,
    VANILLA_AREA_ZANES_EYE_CRATER = 2239,
    VANILLA_AREA_MIRAGE_RACEWAY = 2240,
    VANILLA_AREA_FROSTSABER_ROCK = 2241,
    VANILLA_AREA_THE_HIDDEN_GROVE = 2242,
    VANILLA_AREA_TIMBERMAW_POST = 2243,
    VANILLA_AREA_WINTERFALL_VILLAGE = 2244,
    VANILLA_AREA_MAZTHORIL = 2245,
    VANILLA_AREA_FROSTFIRE_HOT_SPRINGS = 2246,
    VANILLA_AREA_ICE_THISTLE_HILLS = 2247,
    VANILLA_AREA_DUN_MANDARR = 2248,
    VANILLA_AREA_FROSTWHISPER_GORGE = 2249,
    VANILLA_AREA_OWL_WING_THICKET = 2250,
    VANILLA_AREA_LAKE_KEL_THERIL = 2251,
    VANILLA_AREA_THE_RUINS_OF_KEL_THERIL = 2252,
    VANILLA_AREA_STARFALL_VILLAGE = 2253,
    VANILLA_AREA_BAN_THALLOW_BARROW_DEN = 2254,
    VANILLA_AREA_EVERLOOK = 2255,
    VANILLA_AREA_DARKWHISPER_GORGE = 2256,
    VANILLA_AREA_DEEPRUN_TRAM = 2257,
    VANILLA_AREA_THE_FUNGAL_VALE = 2258,
    VANILLA_AREA_UNUSED_THE_MARRIS_STEAD = 2259,
    VANILLA_AREA_THE_MARRIS_STEAD = 2260,
    VANILLA_AREA_THE_UNDERCROFT = 2261,
    VANILLA_AREA_DARROWSHIRE = 2262,
    VANILLA_AREA_CROWN_GUARD_TOWER = 2263,
    VANILLA_AREA_CORINS_CROSSING = 2264,
    VANILLA_AREA_SCARLET_BASE_CAMP = 2265,
    VANILLA_AREA_TYRS_HAND = 2266,
    VANILLA_AREA_THE_SCARLET_BASILICA = 2267,
    VANILLA_AREA_LIGHTS_HOPE_CHAPEL = 2268,
    VANILLA_AREA_BROWMAN_MILL = 2269,
    VANILLA_AREA_THE_NOXIOUS_GLADE = 2270,
    VANILLA_AREA_EASTWALL_TOWER = 2271,
    VANILLA_AREA_NORTHDALE = 2272,
    VANILLA_AREA_ZUL_MASHAR = 2273,
    VANILLA_AREA_MAZRA_ALOR = 2274,
    VANILLA_AREA_NORTHPASS_TOWER = 2275,
    VANILLA_AREA_QUEL_LITHIEN_LODGE = 2276,
    VANILLA_AREA_PLAGUEWOOD = 2277,
    VANILLA_AREA_SCOURGEHOLD = 2278,
    VANILLA_AREA_STRATHOLME1 = 2279,
    VANILLA_AREA_UNUSED_STRATHOLME = 2280,
    VANILLA_AREA_DARROWMERE_LAKE0 = 2297,
    VANILLA_AREA_CAER_DARROW = 2298,
    VANILLA_AREA_DARROWMERE_LAKE1 = 2299,
    VANILLA_AREA_CAVERNS_OF_TIME1 = 2300,
    VANILLA_AREA_THISTLEFUR_VILLAGE = 2301,
    VANILLA_AREA_THE_QUAGMIRE = 2302,
    VANILLA_AREA_WINDBREAK_CANYON = 2303,
    VANILLA_AREA_SOUTH_SEAS0 = 2317,
    VANILLA_AREA_THE_GREAT_SEA3 = 2318,
    VANILLA_AREA_THE_GREAT_SEA4 = 2319,
    VANILLA_AREA_THE_GREAT_SEA5 = 2320,
    VANILLA_AREA_THE_GREAT_SEA6 = 2321,
    VANILLA_AREA_THE_VEILED_SEA1 = 2322,
    VANILLA_AREA_THE_VEILED_SEA2 = 2323,
    VANILLA_AREA_THE_VEILED_SEA3 = 2324,
    VANILLA_AREA_THE_VEILED_SEA4 = 2325,
    VANILLA_AREA_THE_VEILED_SEA5 = 2326,
    VANILLA_AREA_RAZOR_HILL_BARRACKS = 2337,
    VANILLA_AREA_SOUTH_SEAS1 = 2338,
    VANILLA_AREA_THE_GREAT_SEA7 = 2339,
    VANILLA_AREA_BLOODTOOTH_CAMP = 2357,
    VANILLA_AREA_FOREST_SONG = 2358,
    VANILLA_AREA_GREENPAW_VILLAGE = 2359,
    VANILLA_AREA_SILVERWING_OUTPOST = 2360,
    VANILLA_AREA_NIGHTHAVEN = 2361,
    VANILLA_AREA_SHRINE_OF_REMULOS = 2362,
    VANILLA_AREA_STORMRAGE_BARROW_DENS = 2363,
    VANILLA_AREA_THE_GREAT_SEA8 = 2364,
    VANILLA_AREA_THE_GREAT_SEA9 = 2365,
    VANILLA_AREA_THE_BLACK_MORASS = 2366,
    VANILLA_AREA_OLD_HILLSBRAD_FOOTHILLS = 2367,
    VANILLA_AREA_TARREN_MILL1 = 2368,
    VANILLA_AREA_SOUTHSHORE1 = 2369,
    VANILLA_AREA_DURNHOLDE_KEEP1 = 2370,
    VANILLA_AREA_DUN_GAROK1 = 2371,
    VANILLA_AREA_HILLSBRAD_FIELDS1 = 2372,
    VANILLA_AREA_EASTERN_STRAND1 = 2373,
    VANILLA_AREA_NETHANDER_STEAD1 = 2374,
    VANILLA_AREA_DARROW_HILL1 = 2375,
    VANILLA_AREA_SOUTHPOINT_TOWER1 = 2376,
    VANILLA_AREA_THORADINS_WALL3 = 2377,
    VANILLA_AREA_WESTERN_STRAND1 = 2378,
    VANILLA_AREA_AZURELODE_MINE1 = 2379,
    VANILLA_AREA_THE_GREAT_SEA10 = 2397,
    VANILLA_AREA_THE_GREAT_SEA11 = 2398,
    VANILLA_AREA_THE_GREAT_SEA12 = 2399,
    VANILLA_AREA_THE_FORBIDDING_SEA1 = 2400,
    VANILLA_AREA_THE_FORBIDDING_SEA2 = 2401,
    VANILLA_AREA_THE_FORBIDDING_SEA3 = 2402,
    VANILLA_AREA_THE_FORBIDDING_SEA4 = 2403,
    VANILLA_AREA_TETHRIS_ARAN = 2404,
    VANILLA_AREA_ETHEL_RETHOR = 2405,
    VANILLA_AREA_RANAZJAR_ISLE = 2406,
    VANILLA_AREA_KORMEKS_HUT = 2407,
    VANILLA_AREA_SHADOWPREY_VILLAGE = 2408,
    VANILLA_AREA_BLACKROCK_PASS = 2417,
    VANILLA_AREA_MORGANS_VIGIL = 2418,
    VANILLA_AREA_SLITHER_ROCK = 2419,
    VANILLA_AREA_TERROR_WING_PATH = 2420,
    VANILLA_AREA_DRACO_DAR = 2421,
    VANILLA_AREA_RAGEFIRE_CHASM = 2437,
    VANILLA_AREA_NIGHTSONG_WOODS = 2457,
    VANILLA_AREA_THE_VEILED_SEA6 = 2477,
    VANILLA_AREA_MORLOS_ARAN = 2478,
    VANILLA_AREA_EMERALD_SANCTUARY = 2479,
    VANILLA_AREA_JADEFIRE_GLEN = 2480,
    VANILLA_AREA_RUINS_OF_CONSTELLAS = 2481,
    VANILLA_AREA_BITTER_REACHES = 2497,
    VANILLA_AREA_RISE_OF_THE_DEFILER = 2517,
    VANILLA_AREA_LARISS_PAVILION = 2518,
    VANILLA_AREA_WOODPAW_HILLS = 2519,
    VANILLA_AREA_WOODPAW_DEN = 2520,
    VANILLA_AREA_VERDANTIS_RIVER = 2521,
    VANILLA_AREA_RUINS_OF_ISILDIEN = 2522,
    VANILLA_AREA_GRIMTOTEM_POST = 2537,
    VANILLA_AREA_CAMP_APARAJE = 2538,
    VANILLA_AREA_MALAKA_JIN = 2539,
    VANILLA_AREA_BOULDERSLIDE_RAVINE = 2540,
    VANILLA_AREA_SISHIR_CANYON = 2541,
    VANILLA_AREA_DIRE_MAUL0 = 2557,
    VANILLA_AREA_DEADWIND_RAVINE = 2558,
    VANILLA_AREA_DIAMONDHEAD_RIVER = 2559,
    VANILLA_AREA_ARIDENS_CAMP = 2560,
    VANILLA_AREA_THE_VICE = 2561,
    VANILLA_AREA_KARAZHAN = 2562,
    VANILLA_AREA_MORGANS_PLOT = 2563,
    VANILLA_AREA_DIRE_MAUL1 = 2577,
    VANILLA_AREA_ALTERAC_VALLEY0 = 2597,
    VANILLA_AREA_SCRABBLESCREWS_CAMP = 2617,
    VANILLA_AREA_JADEFIRE_RUN = 2618,
    VANILLA_AREA_THONDRORIL_RIVER0 = 2619,
    VANILLA_AREA_THONDRORIL_RIVER1 = 2620,
    VANILLA_AREA_LAKE_MERELDAR = 2621,
    VANILLA_AREA_PESTILENT_SCAR = 2622,
    VANILLA_AREA_THE_INFECTIS_SCAR = 2623,
    VANILLA_AREA_BLACKWOOD_LAKE = 2624,
    VANILLA_AREA_EASTWALL_GATE = 2625,
    VANILLA_AREA_TERRORWEB_TUNNEL = 2626,
    VANILLA_AREA_TERRORDALE = 2627,
    VANILLA_AREA_KARGATHIA_KEEP = 2637,
    VANILLA_AREA_VALLEY_OF_BONES = 2657,
    VANILLA_AREA_BLACKWING_LAIR = 2677,
    VANILLA_AREA_DEADMANS_CROSSING = 2697,
    VANILLA_AREA_MOLTEN_CORE = 2717,
    VANILLA_AREA_THE_SCARAB_WALL = 2737,
    VANILLA_AREA_SOUTHWIND_VILLAGE = 2738,
    VANILLA_AREA_TWILIGHT_BASE_CAMP = 2739,
    VANILLA_AREA_THE_CRYSTAL_VALE = 2740,
    VANILLA_AREA_THE_SCARAB_DAIS = 2741,
    VANILLA_AREA_HIVE_ASHI = 2742,
    VANILLA_AREA_HIVE_ZORA = 2743,
    VANILLA_AREA_HIVE_REGAL = 2744,
    VANILLA_AREA_SHRINE_OF_THE_FALLEN_WARRIOR = 2757,
    VANILLA_AREA_UNUSED_ALTERAC_VALLEY = 2777,
    VANILLA_AREA_BLACKFATHOM_DEEPS1 = 2797,
    VANILLA_AREA_ON_MAP_DUNGEON4 = 2817,
    VANILLA_AREA_THE_MASTERS_CELLAR = 2837,
    VANILLA_AREA_STONEWROUGHT_PASS = 2838,
    VANILLA_AREA_ALTERAC_VALLEY1 = 2839,
    VANILLA_AREA_THE_RUMBLE_CAGE = 2857,
    VANILLA_AREA_CHUNK_TEST = 2877,
    VANILLA_AREA_ZORAMGAR_OUTPOST = 2897,
    VANILLA_AREA_HALL_OF_LEGENDS = 2917,
    VANILLA_AREA_CHAMPIONS_HALL = 2918,
    VANILLA_AREA_GROSH_GOK_COMPOUND = 2937,
    VANILLA_AREA_SLEEPING_GORGE = 2938,
    VANILLA_AREA_IRONDEEP_MINE = 2957,
    VANILLA_AREA_STONEHEARTH_OUTPOST = 2958,
    VANILLA_AREA_DUN_BALDAR = 2959,
    VANILLA_AREA_ICEWING_PASS = 2960,
    VANILLA_AREA_FROSTWOLF_VILLAGE = 2961,
    VANILLA_AREA_TOWER_POINT = 2962,
    VANILLA_AREA_COLDTOOTH_MINE = 2963,
    VANILLA_AREA_WINTERAX_HOLD = 2964,
    VANILLA_AREA_ICEBLOOD_GARRISON = 2977,
    VANILLA_AREA_FROSTWOLF_KEEP = 2978,
    VANILLA_AREA_TOR_KREN_FARM = 2979,
    VANILLA_AREA_FROST_DAGGER_PASS = 3017,
    VANILLA_AREA_IRONSTONE_CAMP = 3037,
    VANILLA_AREA_WEAZELS_CRATER = 3038,
    VANILLA_AREA_TAHONDA_RUINS = 3039,
    VANILLA_AREA_FIELD_OF_STRIFE = 3057,
    VANILLA_AREA_ICEWING_CAVERN = 3058,
    VANILLA_AREA_VALORS_REST = 3077,
    VANILLA_AREA_THE_SWARMING_PILLAR = 3097,
    VANILLA_AREA_TWILIGHT_POST = 3098,
    VANILLA_AREA_TWILIGHT_OUTPOST = 3099,
    VANILLA_AREA_RAVAGED_TWILIGHT_CAMP = 3100,
    VANILLA_AREA_SHALZARUS_LAIR = 3117,
    VANILLA_AREA_TALRENDIS_POINT = 3137,
    VANILLA_AREA_RETHRESS_SANCTUM = 3138,
    VANILLA_AREA_MOON_HORROR_DEN = 3139,
    VANILLA_AREA_SCALEBEARDS_CAVE = 3140,
    VANILLA_AREA_BOULDERSLIDE_CAVERN = 3157,
    VANILLA_AREA_WARSONG_LABOR_CAMP = 3177,
    VANILLA_AREA_CHILLWIND_CAMP = 3197,
    VANILLA_AREA_THE_MAUL = 3217,
    VANILLA_AREA_THE_MAUL_UNUSED = 3237,
    VANILLA_AREA_BONES_OF_GRAKKAROND = 3257,
    VANILLA_AREA_WARSONG_GULCH = 3277,
    VANILLA_AREA_FROSTWOLF_GRAVEYARD = 3297,
    VANILLA_AREA_FROSTWOLF_PASS = 3298,
    VANILLA_AREA_DUN_BALDAR_PASS = 3299,
    VANILLA_AREA_ICEBLOOD_GRAVEYARD = 3300,
    VANILLA_AREA_SNOWFALL_GRAVEYARD = 3301,
    VANILLA_AREA_STONEHEARTH_GRAVEYARD = 3302,
    VANILLA_AREA_STORMPIKE_GRAVEYARD = 3303,
    VANILLA_AREA_ICEWING_BUNKER = 3304,
    VANILLA_AREA_STONEHEARTH_BUNKER = 3305,
    VANILLA_AREA_WILDPAW_RIDGE = 3306,
    VANILLA_AREA_REVANTUSK_VILLAGE = 3317,
    VANILLA_AREA_ROCK_OF_DUROTAN = 3318,
    VANILLA_AREA_SILVERWING_GROVE = 3319,
    VANILLA_AREA_WARSONG_LUMBER_MILL = 3320,
    VANILLA_AREA_SILVERWING_HOLD = 3321,
    VANILLA_AREA_WILDPAW_CAVERN = 3337,
    VANILLA_AREA_THE_VEILED_CLEFT = 3338,
    VANILLA_AREA_YOJAMBA_ISLE = 3357,
    VANILLA_AREA_ARATHI_BASIN = 3358,
    VANILLA_AREA_THE_COIL = 3377,
    VANILLA_AREA_ALTAR_OF_HIR_EEK = 3378,
    VANILLA_AREA_SHADRA_ZAAR = 3379,
    VANILLA_AREA_HAKKARI_GROUNDS = 3380,
    VANILLA_AREA_NAZE_OF_SHIRVALLAH = 3381,
    VANILLA_AREA_TEMPLE_OF_BETHEKK = 3382,
    VANILLA_AREA_THE_BLOODFIRE_PIT = 3383,
    VANILLA_AREA_ALTAR_OF_THE_BLOOD_GOD = 3384,
    VANILLA_AREA_ZANZAS_RISE = 3397,
    VANILLA_AREA_EDGE_OF_MADNESS = 3398,
    VANILLA_AREA_TROLLBANE_HALL = 3417,
    VANILLA_AREA_DEFILERS_DEN = 3418,
    VANILLA_AREA_PAGLES_POINTE = 3419,
    VANILLA_AREA_FARM = 3420,
    VANILLA_AREA_BLACKSMITH = 3421,
    VANILLA_AREA_LUMBER_MILL = 3422,
    VANILLA_AREA_GOLD_MINE = 3423,
    VANILLA_AREA_STABLES = 3424,
    VANILLA_AREA_CENARION_HOLD = 3425,
    VANILLA_AREA_STAGHELM_POINT = 3426,
    VANILLA_AREA_BRONZEBEARD_ENCAMPMENT = 3427,
    VANILLA_AREA_AHN_QIRAJ = 3428,
    VANILLA_AREA_RUINS_OF_AHN_QIRAJ0 = 3429,
    VANILLA_AREA_TWILIGHTS_RUN = 3446,
    VANILLA_AREA_ORTELLS_HIDEOUT = 3447,
    VANILLA_AREA_SCARAB_TERRACE = 3448,
    VANILLA_AREA_GENERALS_TERRACE = 3449,
    VANILLA_AREA_THE_RESERVOIR = 3450,
    VANILLA_AREA_THE_HATCHERY = 3451,
    VANILLA_AREA_THE_COMB = 3452,
    VANILLA_AREA_WATCHERS_TERRACE = 3453,
    VANILLA_AREA_RUINS_OF_AHN_QIRAJ1 = 3454,
    VANILLA_AREA_NAXXRAMAS = 3456,
    VANILLA_AREA_CITY = 3459,
    VANILLA_AREA_GATES_OF_AHN_QIRAJ = 3478,
    VANILLA_AREA_RAVENHOLDT_MANOR = 3486
} vanilla_Area;

typedef enum {
    VANILLA_ATTACK_HAND_MAIN_HAND = 0,
    VANILLA_ATTACK_HAND_OFF_HAND = 1
} vanilla_AttackHand;

typedef enum {
    VANILLA_AUCTION_COMMAND_ACTION_STARTED = 0,
    VANILLA_AUCTION_COMMAND_ACTION_REMOVED = 1,
    VANILLA_AUCTION_COMMAND_ACTION_BID_PLACED = 2
} vanilla_AuctionCommandAction;

typedef enum {
    VANILLA_AUCTION_COMMAND_RESULT_OK = 0,
    VANILLA_AUCTION_COMMAND_RESULT_ERR_INVENTORY = 1,
    VANILLA_AUCTION_COMMAND_RESULT_ERR_DATABASE = 2,
    VANILLA_AUCTION_COMMAND_RESULT_ERR_NOT_ENOUGH_MONEY = 3,
    VANILLA_AUCTION_COMMAND_RESULT_ERR_ITEM_NOT_FOUND = 4,
    VANILLA_AUCTION_COMMAND_RESULT_ERR_HIGHER_BID = 5,
    VANILLA_AUCTION_COMMAND_RESULT_ERR_BID_INCREMENT = 7,
    VANILLA_AUCTION_COMMAND_RESULT_ERR_BID_OWN = 10,
    VANILLA_AUCTION_COMMAND_RESULT_ERR_RESTRICTED_ACCOUNT = 13
} vanilla_AuctionCommandResult;

typedef enum {
    VANILLA_AUCTION_COMMAND_RESULT_TWO_OK = 0,
    VANILLA_AUCTION_COMMAND_RESULT_TWO_ERR_INVENTORY = 1,
    VANILLA_AUCTION_COMMAND_RESULT_TWO_ERR_DATABASE = 2,
    VANILLA_AUCTION_COMMAND_RESULT_TWO_ERR_NOT_ENOUGH_MONEY = 3,
    VANILLA_AUCTION_COMMAND_RESULT_TWO_ERR_ITEM_NOT_FOUND = 4,
    VANILLA_AUCTION_COMMAND_RESULT_TWO_ERR_HIGHER_BID = 5,
    VANILLA_AUCTION_COMMAND_RESULT_TWO_ERR_BID_INCREMENT = 7,
    VANILLA_AUCTION_COMMAND_RESULT_TWO_ERR_BID_OWN = 10,
    VANILLA_AUCTION_COMMAND_RESULT_TWO_ERR_RESTRICTED_ACCOUNT = 13
} vanilla_AuctionCommandResultTwo;

typedef enum {
    VANILLA_AUCTION_HOUSE_STORMWIND = 1,
    VANILLA_AUCTION_HOUSE_ALLIANCE = 2,
    VANILLA_AUCTION_HOUSE_DARNASSUS = 3,
    VANILLA_AUCTION_HOUSE_UNDERCITY = 4,
    VANILLA_AUCTION_HOUSE_THUNDER_BLUFF = 5,
    VANILLA_AUCTION_HOUSE_HORDE = 6,
    VANILLA_AUCTION_HOUSE_GOBLIN = 7
} vanilla_AuctionHouse;

typedef enum {
    VANILLA_AURA_MOD_NONE = 0,
    VANILLA_AURA_MOD_BIND_SIGHT = 1,
    VANILLA_AURA_MOD_MOD_POSSESS = 2,
    VANILLA_AURA_MOD_PERIODIC_DAMAGE = 3,
    VANILLA_AURA_MOD_DUMMY = 4,
    VANILLA_AURA_MOD_MOD_CONFUSE = 5,
    VANILLA_AURA_MOD_MOD_CHARM = 6,
    VANILLA_AURA_MOD_MOD_FEAR = 7,
    VANILLA_AURA_MOD_PERIODIC_HEAL = 8,
    VANILLA_AURA_MOD_MOD_ATTACKSPEED = 9,
    VANILLA_AURA_MOD_MOD_THREAT = 10,
    VANILLA_AURA_MOD_MOD_TAUNT = 11,
    VANILLA_AURA_MOD_MOD_STUN = 12,
    VANILLA_AURA_MOD_MOD_DAMAGE_DONE = 13,
    VANILLA_AURA_MOD_MOD_DAMAGE_TAKEN = 14,
    VANILLA_AURA_MOD_DAMAGE_SHIELD = 15,
    VANILLA_AURA_MOD_MOD_STEALTH = 16,
    VANILLA_AURA_MOD_MOD_STEALTH_DETECT = 17,
    VANILLA_AURA_MOD_MOD_INVISIBILITY = 18,
    VANILLA_AURA_MOD_MOD_INVISIBILITY_DETECTION = 19,
    VANILLA_AURA_MOD_OBS_MOD_HEALTH = 20,
    VANILLA_AURA_MOD_OBS_MOD_MANA = 21,
    VANILLA_AURA_MOD_MOD_RESISTANCE = 22,
    VANILLA_AURA_MOD_PERIODIC_TRIGGER_SPELL = 23,
    VANILLA_AURA_MOD_PERIODIC_ENERGIZE = 24,
    VANILLA_AURA_MOD_MOD_PACIFY = 25,
    VANILLA_AURA_MOD_MOD_ROOT = 26,
    VANILLA_AURA_MOD_MOD_SILENCE = 27,
    VANILLA_AURA_MOD_REFLECT_SPELLS = 28,
    VANILLA_AURA_MOD_MOD_STAT = 29,
    VANILLA_AURA_MOD_MOD_SKILL = 30,
    VANILLA_AURA_MOD_MOD_INCREASE_SPEED = 31,
    VANILLA_AURA_MOD_MOD_INCREASE_MOUNTED_SPEED = 32,
    VANILLA_AURA_MOD_MOD_DECREASE_SPEED = 33,
    VANILLA_AURA_MOD_MOD_INCREASE_HEALTH = 34,
    VANILLA_AURA_MOD_MOD_INCREASE_ENERGY = 35,
    VANILLA_AURA_MOD_MOD_SHAPESHIFT = 36,
    VANILLA_AURA_MOD_EFFECT_IMMUNITY = 37,
    VANILLA_AURA_MOD_STATE_IMMUNITY = 38,
    VANILLA_AURA_MOD_SCHOOL_IMMUNITY = 39,
    VANILLA_AURA_MOD_DAMAGE_IMMUNITY = 40,
    VANILLA_AURA_MOD_DISPEL_IMMUNITY = 41,
    VANILLA_AURA_MOD_PROC_TRIGGER_SPELL = 42,
    VANILLA_AURA_MOD_PROC_TRIGGER_DAMAGE = 43,
    VANILLA_AURA_MOD_TRACK_CREATURES = 44,
    VANILLA_AURA_MOD_TRACK_RESOURCES = 45,
    VANILLA_AURA_MOD_MOD_PARRY_SKILL = 46,
    VANILLA_AURA_MOD_MOD_PARRY_PERCENT = 47,
    VANILLA_AURA_MOD_MOD_DODGE_SKILL = 48,
    VANILLA_AURA_MOD_MOD_DODGE_PERCENT = 49,
    VANILLA_AURA_MOD_MOD_BLOCK_SKILL = 50,
    VANILLA_AURA_MOD_MOD_BLOCK_PERCENT = 51,
    VANILLA_AURA_MOD_MOD_CRIT_PERCENT = 52,
    VANILLA_AURA_MOD_PERIODIC_LEECH = 53,
    VANILLA_AURA_MOD_MOD_HIT_CHANCE = 54,
    VANILLA_AURA_MOD_MOD_SPELL_HIT_CHANCE = 55,
    VANILLA_AURA_MOD_TRANSFORM = 56,
    VANILLA_AURA_MOD_MOD_SPELL_CRIT_CHANCE = 57,
    VANILLA_AURA_MOD_MOD_INCREASE_SWIM_SPEED = 58,
    VANILLA_AURA_MOD_MOD_DAMAGE_DONE_CREATURE = 59,
    VANILLA_AURA_MOD_MOD_PACIFY_SILENCE = 60,
    VANILLA_AURA_MOD_MOD_SCALE = 61,
    VANILLA_AURA_MOD_PERIODIC_HEALTH_FUNNEL = 62,
    VANILLA_AURA_MOD_PERIODIC_MANA_FUNNEL = 63,
    VANILLA_AURA_MOD_PERIODIC_MANA_LEECH = 64,
    VANILLA_AURA_MOD_MOD_CASTING_SPEED_NOT_STACK = 65,
    VANILLA_AURA_MOD_FEIGN_DEATH = 66,
    VANILLA_AURA_MOD_MOD_DISARM = 67,
    VANILLA_AURA_MOD_MOD_STALKED = 68,
    VANILLA_AURA_MOD_SCHOOL_ABSORB = 69,
    VANILLA_AURA_MOD_EXTRA_ATTACKS = 70,
    VANILLA_AURA_MOD_MOD_SPELL_CRIT_CHANCE_SCHOOL = 71,
    VANILLA_AURA_MOD_MOD_POWER_COST_SCHOOL_PCT = 72,
    VANILLA_AURA_MOD_MOD_POWER_COST_SCHOOL = 73,
    VANILLA_AURA_MOD_REFLECT_SPELLS_SCHOOL = 74,
    VANILLA_AURA_MOD_MOD_LANGUAGE = 75,
    VANILLA_AURA_MOD_FAR_SIGHT = 76,
    VANILLA_AURA_MOD_MECHANIC_IMMUNITY = 77,
    VANILLA_AURA_MOD_MOUNTED = 78,
    VANILLA_AURA_MOD_MOD_DAMAGE_PERCENT_DONE = 79,
    VANILLA_AURA_MOD_MOD_PERCENT_STAT = 80,
    VANILLA_AURA_MOD_SPLIT_DAMAGE_PCT = 81,
    VANILLA_AURA_MOD_WATER_BREATHING = 82,
    VANILLA_AURA_MOD_MOD_BASE_RESISTANCE = 83,
    VANILLA_AURA_MOD_MOD_REGEN = 84,
    VANILLA_AURA_MOD_MOD_POWER_REGEN = 85,
    VANILLA_AURA_MOD_CHANNEL_DEATH_ITEM = 86,
    VANILLA_AURA_MOD_MOD_DAMAGE_PERCENT_TAKEN = 87,
    VANILLA_AURA_MOD_MOD_HEALTH_REGEN_PERCENT = 88,
    VANILLA_AURA_MOD_PERIODIC_DAMAGE_PERCENT = 89,
    VANILLA_AURA_MOD_MOD_RESIST_CHANCE = 90,
    VANILLA_AURA_MOD_MOD_DETECT_RANGE = 91,
    VANILLA_AURA_MOD_PREVENTS_FLEEING = 92,
    VANILLA_AURA_MOD_MOD_UNATTACKABLE = 93,
    VANILLA_AURA_MOD_INTERRUPT_REGEN = 94,
    VANILLA_AURA_MOD_GHOST = 95,
    VANILLA_AURA_MOD_SPELL_MAGNET = 96,
    VANILLA_AURA_MOD_MANA_SHIELD = 97,
    VANILLA_AURA_MOD_MOD_SKILL_TALENT = 98,
    VANILLA_AURA_MOD_MOD_ATTACK_POWER = 99,
    VANILLA_AURA_MOD_AURAS_VISIBLE = 100,
    VANILLA_AURA_MOD_MOD_RESISTANCE_PCT = 101,
    VANILLA_AURA_MOD_MOD_MELEE_ATTACK_POWER_VERSUS = 102,
    VANILLA_AURA_MOD_MOD_TOTAL_THREAT = 103,
    VANILLA_AURA_MOD_WATER_WALK = 104,
    VANILLA_AURA_MOD_FEATHER_FALL = 105,
    VANILLA_AURA_MOD_HOVER = 106,
    VANILLA_AURA_MOD_ADD_FLAT_MODIFIER = 107,
    VANILLA_AURA_MOD_ADD_PCT_MODIFIER = 108,
    VANILLA_AURA_MOD_ADD_TARGET_TRIGGER = 109,
    VANILLA_AURA_MOD_MOD_POWER_REGEN_PERCENT = 110,
    VANILLA_AURA_MOD_ADD_CASTER_HIT_TRIGGER = 111,
    VANILLA_AURA_MOD_OVERRIDE_CLASS_SCRIPTS = 112,
    VANILLA_AURA_MOD_MOD_RANGED_DAMAGE_TAKEN = 113,
    VANILLA_AURA_MOD_MOD_RANGED_DAMAGE_TAKEN_PCT = 114,
    VANILLA_AURA_MOD_MOD_HEALING = 115,
    VANILLA_AURA_MOD_MOD_REGEN_DURING_COMBAT = 116,
    VANILLA_AURA_MOD_MOD_MECHANIC_RESISTANCE = 117,
    VANILLA_AURA_MOD_MOD_HEALING_PCT = 118,
    VANILLA_AURA_MOD_SHARE_PET_TRACKING = 119,
    VANILLA_AURA_MOD_UNTRACKABLE = 120,
    VANILLA_AURA_MOD_EMPATHY = 121,
    VANILLA_AURA_MOD_MOD_OFFHAND_DAMAGE_PCT = 122,
    VANILLA_AURA_MOD_MOD_TARGET_RESISTANCE = 123,
    VANILLA_AURA_MOD_MOD_RANGED_ATTACK_POWER = 124,
    VANILLA_AURA_MOD_MOD_MELEE_DAMAGE_TAKEN = 125,
    VANILLA_AURA_MOD_MOD_MELEE_DAMAGE_TAKEN_PCT = 126,
    VANILLA_AURA_MOD_RANGED_ATTACK_POWER_ATTACKER_BONUS = 127,
    VANILLA_AURA_MOD_MOD_POSSESS_PET = 128,
    VANILLA_AURA_MOD_MOD_SPEED_ALWAYS = 129,
    VANILLA_AURA_MOD_MOD_MOUNTED_SPEED_ALWAYS = 130,
    VANILLA_AURA_MOD_MOD_RANGED_ATTACK_POWER_VERSUS = 131,
    VANILLA_AURA_MOD_MOD_INCREASE_ENERGY_PERCENT = 132,
    VANILLA_AURA_MOD_MOD_INCREASE_HEALTH_PERCENT = 133,
    VANILLA_AURA_MOD_MOD_MANA_REGEN_INTERRUPT = 134,
    VANILLA_AURA_MOD_MOD_HEALING_DONE = 135,
    VANILLA_AURA_MOD_MOD_HEALING_DONE_PERCENT = 136,
    VANILLA_AURA_MOD_MOD_TOTAL_STAT_PERCENTAGE = 137,
    VANILLA_AURA_MOD_MOD_MELEE_HASTE = 138,
    VANILLA_AURA_MOD_FORCE_REACTION = 139,
    VANILLA_AURA_MOD_MOD_RANGED_HASTE = 140,
    VANILLA_AURA_MOD_MOD_RANGED_AMMO_HASTE = 141,
    VANILLA_AURA_MOD_MOD_BASE_RESISTANCE_PCT = 142,
    VANILLA_AURA_MOD_MOD_RESISTANCE_EXCLUSIVE = 143,
    VANILLA_AURA_MOD_SAFE_FALL = 144,
    VANILLA_AURA_MOD_CHARISMA = 145,
    VANILLA_AURA_MOD_PERSUADED = 146,
    VANILLA_AURA_MOD_MECHANIC_IMMUNITY_MASK = 147,
    VANILLA_AURA_MOD_RETAIN_COMBO_POINTS = 148,
    VANILLA_AURA_MOD_RESIST_PUSHBACK = 149,
    VANILLA_AURA_MOD_MOD_SHIELD_BLOCKVALUE_PCT = 150,
    VANILLA_AURA_MOD_TRACK_STEALTHED = 151,
    VANILLA_AURA_MOD_MOD_DETECTED_RANGE = 152,
    VANILLA_AURA_MOD_SPLIT_DAMAGE_FLAT = 153,
    VANILLA_AURA_MOD_MOD_STEALTH_LEVEL = 154,
    VANILLA_AURA_MOD_MOD_WATER_BREATHING = 155,
    VANILLA_AURA_MOD_MOD_REPUTATION_GAIN = 156,
    VANILLA_AURA_MOD_PET_DAMAGE_MULTI = 157,
    VANILLA_AURA_MOD_MOD_SHIELD_BLOCKVALUE = 158,
    VANILLA_AURA_MOD_NO_PVP_CREDIT = 159,
    VANILLA_AURA_MOD_MOD_AOE_AVOIDANCE = 160,
    VANILLA_AURA_MOD_MOD_HEALTH_REGEN_IN_COMBAT = 161,
    VANILLA_AURA_MOD_POWER_BURN_MANA = 162,
    VANILLA_AURA_MOD_MOD_CRIT_DAMAGE_BONUS = 163,
    VANILLA_AURA_MOD_UNKNOWN164 = 164,
    VANILLA_AURA_MOD_MELEE_ATTACK_POWER_ATTACKER_BONUS = 165,
    VANILLA_AURA_MOD_MOD_ATTACK_POWER_PCT = 166,
    VANILLA_AURA_MOD_MOD_RANGED_ATTACK_POWER_PCT = 167,
    VANILLA_AURA_MOD_MOD_DAMAGE_DONE_VERSUS = 168,
    VANILLA_AURA_MOD_MOD_CRIT_PERCENT_VERSUS = 169,
    VANILLA_AURA_MOD_DETECT_AMORE = 170,
    VANILLA_AURA_MOD_MOD_SPEED_NOT_STACK = 171,
    VANILLA_AURA_MOD_MOD_MOUNTED_SPEED_NOT_STACK = 172,
    VANILLA_AURA_MOD_ALLOW_CHAMPION_SPELLS = 173,
    VANILLA_AURA_MOD_MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174,
    VANILLA_AURA_MOD_MOD_SPELL_HEALING_OF_STAT_PERCENT = 175,
    VANILLA_AURA_MOD_SPIRIT_OF_REDEMPTION = 176,
    VANILLA_AURA_MOD_AOE_CHARM = 177,
    VANILLA_AURA_MOD_MOD_DEBUFF_RESISTANCE = 178,
    VANILLA_AURA_MOD_MOD_ATTACKER_SPELL_CRIT_CHANCE = 179,
    VANILLA_AURA_MOD_MOD_FLAT_SPELL_DAMAGE_VERSUS = 180,
    VANILLA_AURA_MOD_MOD_FLAT_SPELL_CRIT_DAMAGE_VERSUS = 181,
    VANILLA_AURA_MOD_MOD_RESISTANCE_OF_STAT_PERCENT = 182,
    VANILLA_AURA_MOD_MOD_CRITICAL_THREAT = 183,
    VANILLA_AURA_MOD_MOD_ATTACKER_MELEE_HIT_CHANCE = 184,
    VANILLA_AURA_MOD_MOD_ATTACKER_RANGED_HIT_CHANCE = 185,
    VANILLA_AURA_MOD_MOD_ATTACKER_SPELL_HIT_CHANCE = 186,
    VANILLA_AURA_MOD_MOD_ATTACKER_MELEE_CRIT_CHANCE = 187,
    VANILLA_AURA_MOD_MOD_ATTACKER_RANGED_CRIT_CHANCE = 188,
    VANILLA_AURA_MOD_MOD_RATING = 189,
    VANILLA_AURA_MOD_MOD_FACTION_REPUTATION_GAIN = 190,
    VANILLA_AURA_MOD_USE_NORMAL_MOVEMENT_SPEED = 191
} vanilla_AuraMod;

typedef enum {
    VANILLA_AURA_TYPE_NONE = 0,
    VANILLA_AURA_TYPE_BIND_SIGHT = 1,
    VANILLA_AURA_TYPE_MOD_POSSESS = 2,
    VANILLA_AURA_TYPE_PERIODIC_DAMAGE = 3,
    VANILLA_AURA_TYPE_DUMMY = 4,
    VANILLA_AURA_TYPE_MOD_CONFUSE = 5,
    VANILLA_AURA_TYPE_MOD_CHARM = 6,
    VANILLA_AURA_TYPE_MOD_FEAR = 7,
    VANILLA_AURA_TYPE_PERIODIC_HEAL = 8,
    VANILLA_AURA_TYPE_MOD_ATTACKSPEED = 9,
    VANILLA_AURA_TYPE_MOD_THREAT = 10,
    VANILLA_AURA_TYPE_MOD_TAUNT = 11,
    VANILLA_AURA_TYPE_MOD_STUN = 12,
    VANILLA_AURA_TYPE_MOD_DAMAGE_DONE = 13,
    VANILLA_AURA_TYPE_MOD_DAMAGE_TAKEN = 14,
    VANILLA_AURA_TYPE_DAMAGE_SHIELD = 15,
    VANILLA_AURA_TYPE_MOD_STEALTH = 16,
    VANILLA_AURA_TYPE_MOD_STEALTH_DETECT = 17,
    VANILLA_AURA_TYPE_MOD_INVISIBILITY = 18,
    VANILLA_AURA_TYPE_MOD_INVISIBILITY_DETECTION = 19,
    VANILLA_AURA_TYPE_OBS_MOD_HEALTH = 20,
    VANILLA_AURA_TYPE_OBS_MOD_MANA = 21,
    VANILLA_AURA_TYPE_MOD_RESISTANCE = 22,
    VANILLA_AURA_TYPE_PERIODIC_TRIGGER_SPELL = 23,
    VANILLA_AURA_TYPE_PERIODIC_ENERGIZE = 24,
    VANILLA_AURA_TYPE_MOD_PACIFY = 25,
    VANILLA_AURA_TYPE_MOD_ROOT = 26,
    VANILLA_AURA_TYPE_MOD_SILENCE = 27,
    VANILLA_AURA_TYPE_REFLECT_SPELLS = 28,
    VANILLA_AURA_TYPE_MOD_STAT = 29,
    VANILLA_AURA_TYPE_MOD_SKILL = 30,
    VANILLA_AURA_TYPE_MOD_INCREASE_SPEED = 31,
    VANILLA_AURA_TYPE_MOD_INCREASE_MOUNTED_SPEED = 32,
    VANILLA_AURA_TYPE_MOD_DECREASE_SPEED = 33,
    VANILLA_AURA_TYPE_MOD_INCREASE_HEALTH = 34,
    VANILLA_AURA_TYPE_MOD_INCREASE_ENERGY = 35,
    VANILLA_AURA_TYPE_MOD_SHAPESHIFT = 36,
    VANILLA_AURA_TYPE_EFFECT_IMMUNITY = 37,
    VANILLA_AURA_TYPE_STATE_IMMUNITY = 38,
    VANILLA_AURA_TYPE_SCHOOL_IMMUNITY = 39,
    VANILLA_AURA_TYPE_DAMAGE_IMMUNITY = 40,
    VANILLA_AURA_TYPE_DISPEL_IMMUNITY = 41,
    VANILLA_AURA_TYPE_PROC_TRIGGER_SPELL = 42,
    VANILLA_AURA_TYPE_PROC_TRIGGER_DAMAGE = 43,
    VANILLA_AURA_TYPE_TRACK_CREATURES = 44,
    VANILLA_AURA_TYPE_TRACK_RESOURCES = 45,
    VANILLA_AURA_TYPE_UNKNOWN46 = 46,
    VANILLA_AURA_TYPE_MOD_PARRY_PERCENT = 47,
    VANILLA_AURA_TYPE_UNKNOWN48 = 48,
    VANILLA_AURA_TYPE_MOD_DODGE_PERCENT = 49,
    VANILLA_AURA_TYPE_MOD_BLOCK_SKILL = 50,
    VANILLA_AURA_TYPE_MOD_BLOCK_PERCENT = 51,
    VANILLA_AURA_TYPE_MOD_CRIT_PERCENT = 52,
    VANILLA_AURA_TYPE_PERIODIC_LEECH = 53,
    VANILLA_AURA_TYPE_MOD_HIT_CHANCE = 54,
    VANILLA_AURA_TYPE_MOD_SPELL_HIT_CHANCE = 55,
    VANILLA_AURA_TYPE_TRANSFORM = 56,
    VANILLA_AURA_TYPE_MOD_SPELL_CRIT_CHANCE = 57,
    VANILLA_AURA_TYPE_MOD_INCREASE_SWIM_SPEED = 58,
    VANILLA_AURA_TYPE_MOD_DAMAGE_DONE_CREATURE = 59,
    VANILLA_AURA_TYPE_MOD_PACIFY_SILENCE = 60,
    VANILLA_AURA_TYPE_MOD_SCALE = 61,
    VANILLA_AURA_TYPE_PERIODIC_HEALTH_FUNNEL = 62,
    VANILLA_AURA_TYPE_PERIODIC_MANA_FUNNEL = 63,
    VANILLA_AURA_TYPE_PERIODIC_MANA_LEECH = 64,
    VANILLA_AURA_TYPE_MOD_CASTING_SPEED_NOT_STACK = 65,
    VANILLA_AURA_TYPE_FEIGN_DEATH = 66,
    VANILLA_AURA_TYPE_MOD_DISARM = 67,
    VANILLA_AURA_TYPE_MOD_STALKED = 68,
    VANILLA_AURA_TYPE_SCHOOL_ABSORB = 69,
    VANILLA_AURA_TYPE_EXTRA_ATTACKS = 70,
    VANILLA_AURA_TYPE_MOD_SPELL_CRIT_CHANCE_SCHOOL = 71,
    VANILLA_AURA_TYPE_MOD_POWER_COST_SCHOOL_PCT = 72,
    VANILLA_AURA_TYPE_MOD_POWER_COST_SCHOOL = 73,
    VANILLA_AURA_TYPE_REFLECT_SPELLS_SCHOOL = 74,
    VANILLA_AURA_TYPE_MOD_LANGUAGE = 75,
    VANILLA_AURA_TYPE_FAR_SIGHT = 76,
    VANILLA_AURA_TYPE_MECHANIC_IMMUNITY = 77,
    VANILLA_AURA_TYPE_MOUNTED = 78,
    VANILLA_AURA_TYPE_MOD_DAMAGE_PERCENT_DONE = 79,
    VANILLA_AURA_TYPE_MOD_PERCENT_STAT = 80,
    VANILLA_AURA_TYPE_SPLIT_DAMAGE_PCT = 81,
    VANILLA_AURA_TYPE_WATER_BREATHING = 82,
    VANILLA_AURA_TYPE_MOD_BASE_RESISTANCE = 83,
    VANILLA_AURA_TYPE_MOD_REGEN = 84,
    VANILLA_AURA_TYPE_MOD_POWER_REGEN = 85,
    VANILLA_AURA_TYPE_CHANNEL_DEATH_ITEM = 86,
    VANILLA_AURA_TYPE_MOD_DAMAGE_PERCENT_TAKEN = 87,
    VANILLA_AURA_TYPE_MOD_HEALTH_REGEN_PERCENT = 88,
    VANILLA_AURA_TYPE_PERIODIC_DAMAGE_PERCENT = 89,
    VANILLA_AURA_TYPE_MOD_RESIST_CHANCE = 90,
    VANILLA_AURA_TYPE_MOD_DETECT_RANGE = 91,
    VANILLA_AURA_TYPE_PREVENTS_FLEEING = 92,
    VANILLA_AURA_TYPE_MOD_UNATTACKABLE = 93,
    VANILLA_AURA_TYPE_INTERRUPT_REGEN = 94,
    VANILLA_AURA_TYPE_GHOST = 95,
    VANILLA_AURA_TYPE_SPELL_MAGNET = 96,
    VANILLA_AURA_TYPE_MANA_SHIELD = 97,
    VANILLA_AURA_TYPE_MOD_SKILL_TALENT = 98,
    VANILLA_AURA_TYPE_MOD_ATTACK_POWER = 99,
    VANILLA_AURA_TYPE_AURAS_VISIBLE = 100,
    VANILLA_AURA_TYPE_MOD_RESISTANCE_PCT = 101,
    VANILLA_AURA_TYPE_MOD_MELEE_ATTACK_POWER_VERSUS = 102,
    VANILLA_AURA_TYPE_MOD_TOTAL_THREAT = 103,
    VANILLA_AURA_TYPE_WATER_WALK = 104,
    VANILLA_AURA_TYPE_FEATHER_FALL = 105,
    VANILLA_AURA_TYPE_HOVER = 106,
    VANILLA_AURA_TYPE_ADD_FLAT_MODIFIER = 107,
    VANILLA_AURA_TYPE_ADD_PCT_MODIFIER = 108,
    VANILLA_AURA_TYPE_ADD_TARGET_TRIGGER = 109,
    VANILLA_AURA_TYPE_MOD_POWER_REGEN_PERCENT = 110,
    VANILLA_AURA_TYPE_ADD_CASTER_HIT_TRIGGER = 111,
    VANILLA_AURA_TYPE_OVERRIDE_CLASS_SCRIPTS = 112,
    VANILLA_AURA_TYPE_MOD_RANGED_DAMAGE_TAKEN = 113,
    VANILLA_AURA_TYPE_MOD_RANGED_DAMAGE_TAKEN_PCT = 114,
    VANILLA_AURA_TYPE_MOD_HEALING = 115,
    VANILLA_AURA_TYPE_MOD_REGEN_DURING_COMBAT = 116,
    VANILLA_AURA_TYPE_MOD_MECHANIC_RESISTANCE = 117,
    VANILLA_AURA_TYPE_MOD_HEALING_PCT = 118,
    VANILLA_AURA_TYPE_SHARE_PET_TRACKING = 119,
    VANILLA_AURA_TYPE_UNTRACKABLE = 120,
    VANILLA_AURA_TYPE_EMPATHY = 121,
    VANILLA_AURA_TYPE_MOD_OFFHAND_DAMAGE_PCT = 122,
    VANILLA_AURA_TYPE_MOD_TARGET_RESISTANCE = 123,
    VANILLA_AURA_TYPE_MOD_RANGED_ATTACK_POWER = 124,
    VANILLA_AURA_TYPE_MOD_MELEE_DAMAGE_TAKEN = 125,
    VANILLA_AURA_TYPE_MOD_MELEE_DAMAGE_TAKEN_PCT = 126,
    VANILLA_AURA_TYPE_RANGED_ATTACK_POWER_ATTACKER_BONUS = 127,
    VANILLA_AURA_TYPE_MOD_POSSESS_PET = 128,
    VANILLA_AURA_TYPE_MOD_SPEED_ALWAYS = 129,
    VANILLA_AURA_TYPE_MOD_MOUNTED_SPEED_ALWAYS = 130,
    VANILLA_AURA_TYPE_MOD_RANGED_ATTACK_POWER_VERSUS = 131,
    VANILLA_AURA_TYPE_MOD_INCREASE_ENERGY_PERCENT = 132,
    VANILLA_AURA_TYPE_MOD_INCREASE_HEALTH_PERCENT = 133,
    VANILLA_AURA_TYPE_MOD_MANA_REGEN_INTERRUPT = 134,
    VANILLA_AURA_TYPE_MOD_HEALING_DONE = 135,
    VANILLA_AURA_TYPE_MOD_HEALING_DONE_PERCENT = 136,
    VANILLA_AURA_TYPE_MOD_TOTAL_STAT_PERCENTAGE = 137,
    VANILLA_AURA_TYPE_MOD_MELEE_HASTE = 138,
    VANILLA_AURA_TYPE_FORCE_REACTION = 139,
    VANILLA_AURA_TYPE_MOD_RANGED_HASTE = 140,
    VANILLA_AURA_TYPE_MOD_RANGED_AMMO_HASTE = 141,
    VANILLA_AURA_TYPE_MOD_BASE_RESISTANCE_PCT = 142,
    VANILLA_AURA_TYPE_MOD_RESISTANCE_EXCLUSIVE = 143,
    VANILLA_AURA_TYPE_SAFE_FALL = 144,
    VANILLA_AURA_TYPE_CHARISMA = 145,
    VANILLA_AURA_TYPE_PERSUADED = 146,
    VANILLA_AURA_TYPE_MECHANIC_IMMUNITY_MASK = 147,
    VANILLA_AURA_TYPE_RETAIN_COMBO_POINTS = 148,
    VANILLA_AURA_TYPE_RESIST_PUSHBACK = 149,
    VANILLA_AURA_TYPE_MOD_SHIELD_BLOCKVALUE_PCT = 150,
    VANILLA_AURA_TYPE_TRACK_STEALTHED = 151,
    VANILLA_AURA_TYPE_MOD_DETECTED_RANGE = 152,
    VANILLA_AURA_TYPE_SPLIT_DAMAGE_FLAT = 153,
    VANILLA_AURA_TYPE_MOD_STEALTH_LEVEL = 154,
    VANILLA_AURA_TYPE_MOD_WATER_BREATHING = 155,
    VANILLA_AURA_TYPE_MOD_REPUTATION_GAIN = 156,
    VANILLA_AURA_TYPE_PET_DAMAGE_MULTI = 157,
    VANILLA_AURA_TYPE_MOD_SHIELD_BLOCKVALUE = 158,
    VANILLA_AURA_TYPE_NO_PVP_CREDIT = 159,
    VANILLA_AURA_TYPE_MOD_AOE_AVOIDANCE = 160,
    VANILLA_AURA_TYPE_MOD_HEALTH_REGEN_IN_COMBAT = 161,
    VANILLA_AURA_TYPE_POWER_BURN_MANA = 162,
    VANILLA_AURA_TYPE_MOD_CRIT_DAMAGE_BONUS = 163,
    VANILLA_AURA_TYPE_UNKNOWN164 = 164,
    VANILLA_AURA_TYPE_MELEE_ATTACK_POWER_ATTACKER_BONUS = 165,
    VANILLA_AURA_TYPE_MOD_ATTACK_POWER_PCT = 166,
    VANILLA_AURA_TYPE_MOD_RANGED_ATTACK_POWER_PCT = 167,
    VANILLA_AURA_TYPE_MOD_DAMAGE_DONE_VERSUS = 168,
    VANILLA_AURA_TYPE_MOD_CRIT_PERCENT_VERSUS = 169,
    VANILLA_AURA_TYPE_DETECT_AMORE = 170,
    VANILLA_AURA_TYPE_MOD_SPEED_NOT_STACK = 171,
    VANILLA_AURA_TYPE_MOD_MOUNTED_SPEED_NOT_STACK = 172,
    VANILLA_AURA_TYPE_ALLOW_CHAMPION_SPELLS = 173,
    VANILLA_AURA_TYPE_MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174,
    VANILLA_AURA_TYPE_MOD_SPELL_HEALING_OF_STAT_PERCENT = 175,
    VANILLA_AURA_TYPE_SPIRIT_OF_REDEMPTION = 176,
    VANILLA_AURA_TYPE_AOE_CHARM = 177,
    VANILLA_AURA_TYPE_MOD_DEBUFF_RESISTANCE = 178,
    VANILLA_AURA_TYPE_MOD_ATTACKER_SPELL_CRIT_CHANCE = 179,
    VANILLA_AURA_TYPE_MOD_FLAT_SPELL_DAMAGE_VERSUS = 180,
    VANILLA_AURA_TYPE_MOD_FLAT_SPELL_CRIT_DAMAGE_VERSUS = 181,
    VANILLA_AURA_TYPE_MOD_RESISTANCE_OF_STAT_PERCENT = 182,
    VANILLA_AURA_TYPE_MOD_CRITICAL_THREAT = 183,
    VANILLA_AURA_TYPE_MOD_ATTACKER_MELEE_HIT_CHANCE = 184,
    VANILLA_AURA_TYPE_MOD_ATTACKER_RANGED_HIT_CHANCE = 185,
    VANILLA_AURA_TYPE_MOD_ATTACKER_SPELL_HIT_CHANCE = 186,
    VANILLA_AURA_TYPE_MOD_ATTACKER_MELEE_CRIT_CHANCE = 187,
    VANILLA_AURA_TYPE_MOD_ATTACKER_RANGED_CRIT_CHANCE = 188,
    VANILLA_AURA_TYPE_MOD_RATING = 189,
    VANILLA_AURA_TYPE_MOD_FACTION_REPUTATION_GAIN = 190,
    VANILLA_AURA_TYPE_USE_NORMAL_MOVEMENT_SPEED = 191
} vanilla_AuraType;

typedef enum {
    VANILLA_BAG_FAMILY_NONE = 0,
    VANILLA_BAG_FAMILY_ARROWS = 1,
    VANILLA_BAG_FAMILY_BULLETS = 2,
    VANILLA_BAG_FAMILY_SOUL_SHARDS = 3,
    VANILLA_BAG_FAMILY_UNKNOWN4 = 4,
    VANILLA_BAG_FAMILY_UNKNOWN5 = 5,
    VANILLA_BAG_FAMILY_HERBS = 6,
    VANILLA_BAG_FAMILY_ENCHANTING_SUPPLIES = 7,
    VANILLA_BAG_FAMILY_ENGINEERING_SUPPLIES = 8,
    VANILLA_BAG_FAMILY_KEYS = 9
} vanilla_BagFamily;

typedef enum {
    VANILLA_BATTLEFIELD_PORT_ACTION_LEAVE_QUEUE = 0,
    VANILLA_BATTLEFIELD_PORT_ACTION_ENTER_BATTLE = 1
} vanilla_BattlefieldPortAction;

typedef enum {
    VANILLA_BATTLEGROUND_BRACKET_TENS = 0,
    VANILLA_BATTLEGROUND_BRACKET_TWENTIES = 1,
    VANILLA_BATTLEGROUND_BRACKET_THIRTIES = 2,
    VANILLA_BATTLEGROUND_BRACKET_FORTIES = 3,
    VANILLA_BATTLEGROUND_BRACKET_FIFTIES = 4,
    VANILLA_BATTLEGROUND_BRACKET_SIXTY = 5
} vanilla_BattlegroundBracket;

typedef enum {
    VANILLA_BATTLEGROUND_END_STATUS_NOT_ENDED = 0,
    VANILLA_BATTLEGROUND_END_STATUS_ENDED = 1
} vanilla_BattlegroundEndStatus;

typedef enum {
    VANILLA_BATTLEGROUND_WINNER_HORDE = 0,
    VANILLA_BATTLEGROUND_WINNER_ALLIANCE = 1,
    VANILLA_BATTLEGROUND_WINNER_NONE = 2
} vanilla_BattlegroundWinner;

typedef enum {
    VANILLA_BG_TYPE_ID_NOT_ELIGIBLE = 0,
    VANILLA_BG_TYPE_ID_QUEUED_FOR_AV = 1,
    VANILLA_BG_TYPE_ID_QUEUED_FOR_WSG = 2,
    VANILLA_BG_TYPE_ID_QUEUED_FOR_AB = 3,
    VANILLA_BG_TYPE_ID_REMOVE_FROM_QUEUE = -2
} vanilla_BgTypeId;

typedef enum {
    VANILLA_BONDING_NO_BIND = 0,
    VANILLA_BONDING_PICK_UP = 1,
    VANILLA_BONDING_EQUIP = 2,
    VANILLA_BONDING_USE = 3,
    VANILLA_BONDING_QUEST_ITEM = 4,
    VANILLA_BONDING_QUEST_ITEM1 = 5
} vanilla_Bonding;

typedef enum {
    VANILLA_BUY_BANK_SLOT_RESULT_FAILED_TOO_MANY = 0,
    VANILLA_BUY_BANK_SLOT_RESULT_INSUFFICIENT_FUNDS = 1,
    VANILLA_BUY_BANK_SLOT_RESULT_NOT_BANKER = 2,
    VANILLA_BUY_BANK_SLOT_RESULT_OK = 3
} vanilla_BuyBankSlotResult;

typedef enum {
    VANILLA_BUY_RESULT_CANT_FIND_ITEM = 0,
    VANILLA_BUY_RESULT_ITEM_ALREADY_SOLD = 1,
    VANILLA_BUY_RESULT_NOT_ENOUGH_MONEY = 2,
    VANILLA_BUY_RESULT_SELLER_DONT_LIKE_YOU = 4,
    VANILLA_BUY_RESULT_DISTANCE_TOO_FAR = 5,
    VANILLA_BUY_RESULT_ITEM_SOLD_OUT = 7,
    VANILLA_BUY_RESULT_CANT_CARRY_MORE = 8,
    VANILLA_BUY_RESULT_RANK_REQUIRE = 11,
    VANILLA_BUY_RESULT_REPUTATION_REQUIRE = 12
} vanilla_BuyResult;

typedef enum {
    VANILLA_BUYBACK_SLOT_SLOT1 = 69,
    VANILLA_BUYBACK_SLOT_SLOT2 = 70,
    VANILLA_BUYBACK_SLOT_SLOT3 = 71,
    VANILLA_BUYBACK_SLOT_SLOT4 = 72,
    VANILLA_BUYBACK_SLOT_SLOT5 = 73,
    VANILLA_BUYBACK_SLOT_SLOT6 = 74,
    VANILLA_BUYBACK_SLOT_SLOT7 = 75,
    VANILLA_BUYBACK_SLOT_SLOT8 = 76,
    VANILLA_BUYBACK_SLOT_SLOT9 = 77,
    VANILLA_BUYBACK_SLOT_SLOT10 = 78,
    VANILLA_BUYBACK_SLOT_SLOT11 = 79,
    VANILLA_BUYBACK_SLOT_SLOT12 = 80,
    VANILLA_BUYBACK_SLOT_SLOT13 = 81
} vanilla_BuybackSlot;

typedef enum {
    VANILLA_CAST_FAILURE_REASON_AFFECTING_COMBAT = 0,
    VANILLA_CAST_FAILURE_REASON_ALREADY_AT_FULL_HEALTH = 1,
    VANILLA_CAST_FAILURE_REASON_ALREADY_AT_FULL_POWER = 2,
    VANILLA_CAST_FAILURE_REASON_ALREADY_BEING_TAMED = 3,
    VANILLA_CAST_FAILURE_REASON_ALREADY_HAVE_CHARM = 4,
    VANILLA_CAST_FAILURE_REASON_ALREADY_HAVE_SUMMON = 5,
    VANILLA_CAST_FAILURE_REASON_ALREADY_OPEN = 6,
    VANILLA_CAST_FAILURE_REASON_AURA_BOUNCED = 7,
    VANILLA_CAST_FAILURE_REASON_AUTOTRACK_INTERRUPTED = 8,
    VANILLA_CAST_FAILURE_REASON_BAD_IMPLICIT_TARGETS = 9,
    VANILLA_CAST_FAILURE_REASON_BAD_TARGETS = 10,
    VANILLA_CAST_FAILURE_REASON_CANT_BE_CHARMED = 11,
    VANILLA_CAST_FAILURE_REASON_CANT_BE_DISENCHANTED = 12,
    VANILLA_CAST_FAILURE_REASON_CANT_BE_PROSPECTED = 13,
    VANILLA_CAST_FAILURE_REASON_CANT_CAST_ON_TAPPED = 14,
    VANILLA_CAST_FAILURE_REASON_CANT_DUEL_WHILE_INVISIBLE = 15,
    VANILLA_CAST_FAILURE_REASON_CANT_DUEL_WHILE_STEALTHED = 16,
    VANILLA_CAST_FAILURE_REASON_CANT_STEALTH = 17,
    VANILLA_CAST_FAILURE_REASON_CASTER_AURASTATE = 18,
    VANILLA_CAST_FAILURE_REASON_CASTER_DEAD = 19,
    VANILLA_CAST_FAILURE_REASON_CHARMED = 20,
    VANILLA_CAST_FAILURE_REASON_CHEST_IN_USE = 21,
    VANILLA_CAST_FAILURE_REASON_CONFUSED = 22,
    VANILLA_CAST_FAILURE_REASON_DONT_REPORT = 23,
    VANILLA_CAST_FAILURE_REASON_EQUIPPED_ITEM = 24,
    VANILLA_CAST_FAILURE_REASON_EQUIPPED_ITEM_CLASS = 25,
    VANILLA_CAST_FAILURE_REASON_EQUIPPED_ITEM_CLASS_MAINHAND = 26,
    VANILLA_CAST_FAILURE_REASON_EQUIPPED_ITEM_CLASS_OFFHAND = 27,
    VANILLA_CAST_FAILURE_REASON_ERROR = 28,
    VANILLA_CAST_FAILURE_REASON_FIZZLE = 29,
    VANILLA_CAST_FAILURE_REASON_FLEEING = 30,
    VANILLA_CAST_FAILURE_REASON_FOOD_LOWLEVEL = 31,
    VANILLA_CAST_FAILURE_REASON_HIGHLEVEL = 32,
    VANILLA_CAST_FAILURE_REASON_HUNGER_SATIATED = 33,
    VANILLA_CAST_FAILURE_REASON_IMMUNE = 34,
    VANILLA_CAST_FAILURE_REASON_INTERRUPTED = 35,
    VANILLA_CAST_FAILURE_REASON_INTERRUPTED_COMBAT = 36,
    VANILLA_CAST_FAILURE_REASON_ITEM_ALREADY_ENCHANTED = 37,
    VANILLA_CAST_FAILURE_REASON_ITEM_GONE = 38,
    VANILLA_CAST_FAILURE_REASON_ITEM_NOT_FOUND = 39,
    VANILLA_CAST_FAILURE_REASON_ITEM_NOT_READY = 40,
    VANILLA_CAST_FAILURE_REASON_LEVEL_REQUIREMENT = 41,
    VANILLA_CAST_FAILURE_REASON_LINE_OF_SIGHT = 42,
    VANILLA_CAST_FAILURE_REASON_LOWLEVEL = 43,
    VANILLA_CAST_FAILURE_REASON_LOW_CASTLEVEL = 44,
    VANILLA_CAST_FAILURE_REASON_MAINHAND_EMPTY = 45,
    VANILLA_CAST_FAILURE_REASON_MOVING = 46,
    VANILLA_CAST_FAILURE_REASON_NEED_AMMO = 47,
    VANILLA_CAST_FAILURE_REASON_NEED_AMMO_POUCH = 48,
    VANILLA_CAST_FAILURE_REASON_NEED_EXOTIC_AMMO = 49,
    VANILLA_CAST_FAILURE_REASON_NOPATH = 50,
    VANILLA_CAST_FAILURE_REASON_NOT_BEHIND = 51,
    VANILLA_CAST_FAILURE_REASON_NOT_FISHABLE = 52,
    VANILLA_CAST_FAILURE_REASON_NOT_HERE = 53,
    VANILLA_CAST_FAILURE_REASON_NOT_INFRONT = 54,
    VANILLA_CAST_FAILURE_REASON_NOT_IN_CONTROL = 55,
    VANILLA_CAST_FAILURE_REASON_NOT_KNOWN = 56,
    VANILLA_CAST_FAILURE_REASON_NOT_MOUNTED = 57,
    VANILLA_CAST_FAILURE_REASON_NOT_ON_TAXI = 58,
    VANILLA_CAST_FAILURE_REASON_NOT_ON_TRANSPORT = 59,
    VANILLA_CAST_FAILURE_REASON_NOT_READY = 60,
    VANILLA_CAST_FAILURE_REASON_NOT_SHAPESHIFT = 61,
    VANILLA_CAST_FAILURE_REASON_NOT_STANDING = 62,
    VANILLA_CAST_FAILURE_REASON_NOT_TRADEABLE = 63,
    VANILLA_CAST_FAILURE_REASON_NOT_TRADING = 64,
    VANILLA_CAST_FAILURE_REASON_NOT_UNSHEATHED = 65,
    VANILLA_CAST_FAILURE_REASON_NOT_WHILE_GHOST = 66,
    VANILLA_CAST_FAILURE_REASON_NO_AMMO = 67,
    VANILLA_CAST_FAILURE_REASON_NO_CHARGES_REMAIN = 68,
    VANILLA_CAST_FAILURE_REASON_NO_CHAMPION = 69,
    VANILLA_CAST_FAILURE_REASON_NO_COMBO_POINTS = 70,
    VANILLA_CAST_FAILURE_REASON_NO_DUELING = 71,
    VANILLA_CAST_FAILURE_REASON_NO_ENDURANCE = 72,
    VANILLA_CAST_FAILURE_REASON_NO_FISH = 73,
    VANILLA_CAST_FAILURE_REASON_NO_ITEMS_WHILE_SHAPESHIFTED = 74,
    VANILLA_CAST_FAILURE_REASON_NO_MOUNTS_ALLOWED = 75,
    VANILLA_CAST_FAILURE_REASON_NO_PET = 76,
    VANILLA_CAST_FAILURE_REASON_NO_POWER = 77,
    VANILLA_CAST_FAILURE_REASON_NOTHING_TO_DISPEL = 78,
    VANILLA_CAST_FAILURE_REASON_NOTHING_TO_STEAL = 79,
    VANILLA_CAST_FAILURE_REASON_ONLY_ABOVEWATER = 80,
    VANILLA_CAST_FAILURE_REASON_ONLY_DAYTIME = 81,
    VANILLA_CAST_FAILURE_REASON_ONLY_INDOORS = 82,
    VANILLA_CAST_FAILURE_REASON_ONLY_MOUNTED = 83,
    VANILLA_CAST_FAILURE_REASON_ONLY_NIGHTTIME = 84,
    VANILLA_CAST_FAILURE_REASON_ONLY_OUTDOORS = 85,
    VANILLA_CAST_FAILURE_REASON_ONLY_SHAPESHIFT = 86,
    VANILLA_CAST_FAILURE_REASON_ONLY_STEALTHED = 87,
    VANILLA_CAST_FAILURE_REASON_ONLY_UNDERWATER = 88,
    VANILLA_CAST_FAILURE_REASON_OUT_OF_RANGE = 89,
    VANILLA_CAST_FAILURE_REASON_PACIFIED = 90,
    VANILLA_CAST_FAILURE_REASON_POSSESSED = 91,
    VANILLA_CAST_FAILURE_REASON_REAGENTS = 92,
    VANILLA_CAST_FAILURE_REASON_REQUIRES_AREA = 93,
    VANILLA_CAST_FAILURE_REASON_REQUIRES_SPELL_FOCUS = 94,
    VANILLA_CAST_FAILURE_REASON_ROOTED = 95,
    VANILLA_CAST_FAILURE_REASON_SILENCED = 96,
    VANILLA_CAST_FAILURE_REASON_SPELL_IN_PROGRESS = 97,
    VANILLA_CAST_FAILURE_REASON_SPELL_LEARNED = 98,
    VANILLA_CAST_FAILURE_REASON_SPELL_UNAVAILABLE = 99,
    VANILLA_CAST_FAILURE_REASON_STUNNED = 100,
    VANILLA_CAST_FAILURE_REASON_TARGETS_DEAD = 101,
    VANILLA_CAST_FAILURE_REASON_TARGET_AFFECTING_COMBAT = 102,
    VANILLA_CAST_FAILURE_REASON_TARGET_AURASTATE = 103,
    VANILLA_CAST_FAILURE_REASON_TARGET_DUELING = 104,
    VANILLA_CAST_FAILURE_REASON_TARGET_ENEMY = 105,
    VANILLA_CAST_FAILURE_REASON_TARGET_ENRAGED = 106,
    VANILLA_CAST_FAILURE_REASON_TARGET_FRIENDLY = 107,
    VANILLA_CAST_FAILURE_REASON_TARGET_IN_COMBAT = 108,
    VANILLA_CAST_FAILURE_REASON_TARGET_IS_PLAYER = 109,
    VANILLA_CAST_FAILURE_REASON_TARGET_NOT_DEAD = 110,
    VANILLA_CAST_FAILURE_REASON_TARGET_NOT_IN_PARTY = 111,
    VANILLA_CAST_FAILURE_REASON_TARGET_NOT_LOOTED = 112,
    VANILLA_CAST_FAILURE_REASON_TARGET_NOT_PLAYER = 113,
    VANILLA_CAST_FAILURE_REASON_TARGET_NO_POCKETS = 114,
    VANILLA_CAST_FAILURE_REASON_TARGET_NO_WEAPONS = 115,
    VANILLA_CAST_FAILURE_REASON_TARGET_UNSKINNABLE = 116,
    VANILLA_CAST_FAILURE_REASON_THIRST_SATIATED = 117,
    VANILLA_CAST_FAILURE_REASON_TOO_CLOSE = 118,
    VANILLA_CAST_FAILURE_REASON_TOO_MANY_OF_ITEM = 119,
    VANILLA_CAST_FAILURE_REASON_TOTEMS = 120,
    VANILLA_CAST_FAILURE_REASON_TRAINING_POINTS = 121,
    VANILLA_CAST_FAILURE_REASON_TRY_CAST_AGAIN = 122,
    VANILLA_CAST_FAILURE_REASON_UNIT_NOT_BEHIND = 123,
    VANILLA_CAST_FAILURE_REASON_UNIT_NOT_INFRONT = 124,
    VANILLA_CAST_FAILURE_REASON_WRONG_PET_FOOD = 125,
    VANILLA_CAST_FAILURE_REASON_NOT_WHILE_FATIGUED = 126,
    VANILLA_CAST_FAILURE_REASON_TARGET_NOT_IN_INSTANCE = 127,
    VANILLA_CAST_FAILURE_REASON_NOT_WHILE_TRADING = 128,
    VANILLA_CAST_FAILURE_REASON_TARGET_NOT_IN_RAID = 129,
    VANILLA_CAST_FAILURE_REASON_DISENCHANT_WHILE_LOOTING = 130,
    VANILLA_CAST_FAILURE_REASON_PROSPECT_WHILE_LOOTING = 131,
    VANILLA_CAST_FAILURE_REASON_PROSPECT_NEED_MORE = 132,
    VANILLA_CAST_FAILURE_REASON_TARGET_FREEFORALL = 133,
    VANILLA_CAST_FAILURE_REASON_NO_EDIBLE_CORPSES = 134,
    VANILLA_CAST_FAILURE_REASON_ONLY_BATTLEGROUNDS = 135,
    VANILLA_CAST_FAILURE_REASON_TARGET_NOT_GHOST = 136,
    VANILLA_CAST_FAILURE_REASON_TOO_MANY_SKILLS = 137,
    VANILLA_CAST_FAILURE_REASON_TRANSFORM_UNUSABLE = 138,
    VANILLA_CAST_FAILURE_REASON_WRONG_WEATHER = 139,
    VANILLA_CAST_FAILURE_REASON_DAMAGE_IMMUNE = 140,
    VANILLA_CAST_FAILURE_REASON_PREVENTED_BY_MECHANIC = 141,
    VANILLA_CAST_FAILURE_REASON_PLAY_TIME = 142,
    VANILLA_CAST_FAILURE_REASON_REPUTATION = 143,
    VANILLA_CAST_FAILURE_REASON_MIN_SKILL = 144,
    VANILLA_CAST_FAILURE_REASON_UNKNOWN = 145
} vanilla_CastFailureReason;

typedef enum {
    VANILLA_CHAT_NOTIFY_JOINED_NOTICE = 0,
    VANILLA_CHAT_NOTIFY_LEFT_NOTICE = 1,
    VANILLA_CHAT_NOTIFY_YOU_JOINED_NOTICE = 2,
    VANILLA_CHAT_NOTIFY_YOU_LEFT_NOTICE = 3,
    VANILLA_CHAT_NOTIFY_WRONG_PASSWORD_NOTICE = 4,
    VANILLA_CHAT_NOTIFY_NOT_MEMBER_NOTICE = 5,
    VANILLA_CHAT_NOTIFY_NOT_MODERATOR_NOTICE = 6,
    VANILLA_CHAT_NOTIFY_PASSWORD_CHANGED_NOTICE = 7,
    VANILLA_CHAT_NOTIFY_OWNER_CHANGED_NOTICE = 8,
    VANILLA_CHAT_NOTIFY_PLAYER_NOT_FOUND_NOTICE = 9,
    VANILLA_CHAT_NOTIFY_NOT_OWNER_NOTICE = 10,
    VANILLA_CHAT_NOTIFY_CHANNEL_OWNER_NOTICE = 11,
    VANILLA_CHAT_NOTIFY_MODE_CHANGE_NOTICE = 12,
    VANILLA_CHAT_NOTIFY_ANNOUNCEMENTS_ON_NOTICE = 13,
    VANILLA_CHAT_NOTIFY_ANNOUNCEMENTS_OFF_NOTICE = 14,
    VANILLA_CHAT_NOTIFY_MODERATION_ON_NOTICE = 15,
    VANILLA_CHAT_NOTIFY_MODERATION_OFF_NOTICE = 16,
    VANILLA_CHAT_NOTIFY_MUTED_NOTICE = 17,
    VANILLA_CHAT_NOTIFY_PLAYER_KICKED_NOTICE = 18,
    VANILLA_CHAT_NOTIFY_BANNED_NOTICE = 19,
    VANILLA_CHAT_NOTIFY_PLAYER_BANNED_NOTICE = 20,
    VANILLA_CHAT_NOTIFY_PLAYER_UNBANNED_NOTICE = 21,
    VANILLA_CHAT_NOTIFY_PLAYER_NOT_BANNED_NOTICE = 22,
    VANILLA_CHAT_NOTIFY_PLAYER_ALREADY_MEMBER_NOTICE = 23,
    VANILLA_CHAT_NOTIFY_INVITE_NOTICE = 24,
    VANILLA_CHAT_NOTIFY_INVITE_WRONG_FACTION_NOTICE = 25,
    VANILLA_CHAT_NOTIFY_WRONG_FACTION_NOTICE = 26,
    VANILLA_CHAT_NOTIFY_INVALID_NAME_NOTICE = 27,
    VANILLA_CHAT_NOTIFY_NOT_MODERATED_NOTICE = 28,
    VANILLA_CHAT_NOTIFY_PLAYER_INVITED_NOTICE = 29,
    VANILLA_CHAT_NOTIFY_PLAYER_INVITE_BANNED_NOTICE = 30,
    VANILLA_CHAT_NOTIFY_THROTTLED_NOTICE = 31
} vanilla_ChatNotify;

typedef enum {
    VANILLA_CHAT_TYPE_SAY = 0,
    VANILLA_CHAT_TYPE_PARTY = 1,
    VANILLA_CHAT_TYPE_RAID = 2,
    VANILLA_CHAT_TYPE_GUILD = 3,
    VANILLA_CHAT_TYPE_OFFICER = 4,
    VANILLA_CHAT_TYPE_YELL = 5,
    VANILLA_CHAT_TYPE_WHISPER = 6,
    VANILLA_CHAT_TYPE_WHISPER_INFORM = 7,
    VANILLA_CHAT_TYPE_EMOTE = 8,
    VANILLA_CHAT_TYPE_TEXT_EMOTE = 9,
    VANILLA_CHAT_TYPE_SYSTEM = 10,
    VANILLA_CHAT_TYPE_MONSTER_SAY = 11,
    VANILLA_CHAT_TYPE_MONSTER_YELL = 12,
    VANILLA_CHAT_TYPE_MONSTER_EMOTE = 13,
    VANILLA_CHAT_TYPE_CHANNEL = 14,
    VANILLA_CHAT_TYPE_CHANNEL_JOIN = 15,
    VANILLA_CHAT_TYPE_CHANNEL_LEAVE = 16,
    VANILLA_CHAT_TYPE_CHANNEL_LIST = 17,
    VANILLA_CHAT_TYPE_CHANNEL_NOTICE = 18,
    VANILLA_CHAT_TYPE_CHANNEL_NOTICE_USER = 19,
    VANILLA_CHAT_TYPE_AFK = 20,
    VANILLA_CHAT_TYPE_DND = 21,
    VANILLA_CHAT_TYPE_IGNORED = 22,
    VANILLA_CHAT_TYPE_SKILL = 23,
    VANILLA_CHAT_TYPE_LOOT = 24,
    VANILLA_CHAT_TYPE_MONSTER_WHISPER = 26,
    VANILLA_CHAT_TYPE_BG_SYSTEM_NEUTRAL = 82,
    VANILLA_CHAT_TYPE_BG_SYSTEM_ALLIANCE = 83,
    VANILLA_CHAT_TYPE_BG_SYSTEM_HORDE = 84,
    VANILLA_CHAT_TYPE_RAID_LEADER = 87,
    VANILLA_CHAT_TYPE_RAID_WARNING = 88,
    VANILLA_CHAT_TYPE_RAID_BOSS_WHISPER = 89,
    VANILLA_CHAT_TYPE_RAID_BOSS_EMOTE = 90,
    VANILLA_CHAT_TYPE_BATTLEGROUND = 92,
    VANILLA_CHAT_TYPE_BATTLEGROUND_LEADER = 93
} vanilla_ChatType;

typedef enum {
    VANILLA_CINEMATIC_SEQUENCE_ID_GOBLIN = 0,
    VANILLA_CINEMATIC_SEQUENCE_ID_UNDEAD = 2,
    VANILLA_CINEMATIC_SEQUENCE_ID_ORC = 21,
    VANILLA_CINEMATIC_SEQUENCE_ID_DWARF = 41,
    VANILLA_CINEMATIC_SEQUENCE_ID_NIGHT_ELF = 61,
    VANILLA_CINEMATIC_SEQUENCE_ID_HUMAN = 81,
    VANILLA_CINEMATIC_SEQUENCE_ID_GNOME = 101,
    VANILLA_CINEMATIC_SEQUENCE_ID_TROLL = 121,
    VANILLA_CINEMATIC_SEQUENCE_ID_TAUREN = 141
} vanilla_CinematicSequenceId;

typedef enum {
    VANILLA_CLASS_WARRIOR = 1,
    VANILLA_CLASS_PALADIN = 2,
    VANILLA_CLASS_HUNTER = 3,
    VANILLA_CLASS_ROGUE = 4,
    VANILLA_CLASS_PRIEST = 5,
    VANILLA_CLASS_SHAMAN = 7,
    VANILLA_CLASS_MAGE = 8,
    VANILLA_CLASS_WARLOCK = 9,
    VANILLA_CLASS_DRUID = 11
} vanilla_Class;

typedef enum {
    VANILLA_CLIENT_LANGUAGE_ENGLISH = 0,
    VANILLA_CLIENT_LANGUAGE_KOREAN = 1,
    VANILLA_CLIENT_LANGUAGE_FRENCH = 2,
    VANILLA_CLIENT_LANGUAGE_GERMAN = 3,
    VANILLA_CLIENT_LANGUAGE_CHINESE = 4,
    VANILLA_CLIENT_LANGUAGE_TAIWANESE = 5,
    VANILLA_CLIENT_LANGUAGE_SPANISH_SPAIN = 6,
    VANILLA_CLIENT_LANGUAGE_SPANISH_LATIN_AMERICA = 7
} vanilla_ClientLanguage;

typedef enum {
    VANILLA_COMPRESSED_MOVE_OPCODE_SMSG_MONSTER_MOVE = 221,
    VANILLA_COMPRESSED_MOVE_OPCODE_SMSG_MONSTER_MOVE_TRANSPORT = 686,
    VANILLA_COMPRESSED_MOVE_OPCODE_SMSG_SPLINE_SET_RUN_SPEED = 766,
    VANILLA_COMPRESSED_MOVE_OPCODE_SMSG_SPLINE_MOVE_UNROOT = 772,
    VANILLA_COMPRESSED_MOVE_OPCODE_SMSG_SPLINE_MOVE_SET_RUN_MODE = 781,
    VANILLA_COMPRESSED_MOVE_OPCODE_SMSG_SPLINE_MOVE_SET_WALK_MODE = 782
} vanilla_CompressedMoveOpcode;

typedef enum {
    VANILLA_CORPSE_QUERY_RESULT_NOT_FOUND = 0,
    VANILLA_CORPSE_QUERY_RESULT_FOUND = 1
} vanilla_CorpseQueryResult;

typedef enum {
    VANILLA_CREATURE_FAMILY_NONE = 0,
    VANILLA_CREATURE_FAMILY_WOLF = 1,
    VANILLA_CREATURE_FAMILY_CAT = 2,
    VANILLA_CREATURE_FAMILY_SPIDER = 3,
    VANILLA_CREATURE_FAMILY_BEAR = 4,
    VANILLA_CREATURE_FAMILY_BOAR = 5,
    VANILLA_CREATURE_FAMILY_CROCOLISK = 6,
    VANILLA_CREATURE_FAMILY_CARRION_BIRD = 7,
    VANILLA_CREATURE_FAMILY_CRAB = 8,
    VANILLA_CREATURE_FAMILY_GORILLA = 9,
    VANILLA_CREATURE_FAMILY_RAPTOR = 11,
    VANILLA_CREATURE_FAMILY_TALLSTRIDER = 12,
    VANILLA_CREATURE_FAMILY_FELHUNTER = 15,
    VANILLA_CREATURE_FAMILY_VOIDWALKER = 16,
    VANILLA_CREATURE_FAMILY_SUCCUBUS = 17,
    VANILLA_CREATURE_FAMILY_DOOMGUARD = 19,
    VANILLA_CREATURE_FAMILY_SCORPID = 20,
    VANILLA_CREATURE_FAMILY_TURTLE = 21,
    VANILLA_CREATURE_FAMILY_IMP = 23,
    VANILLA_CREATURE_FAMILY_BAT = 24,
    VANILLA_CREATURE_FAMILY_HYENA = 25,
    VANILLA_CREATURE_FAMILY_OWL = 26,
    VANILLA_CREATURE_FAMILY_WIND_SERPENT = 27,
    VANILLA_CREATURE_FAMILY_REMOTE_CONTROL = 28
} vanilla_CreatureFamily;

typedef enum {
    VANILLA_DISMOUNT_RESULT_NOT_MOUNTED = 1,
    VANILLA_DISMOUNT_RESULT_OK = 3
} vanilla_DismountResult;

typedef enum {
    VANILLA_DUEL_WINNER_REASON_WON = 0,
    VANILLA_DUEL_WINNER_REASON_FLED = 1
} vanilla_DuelWinnerReason;

typedef enum {
    VANILLA_EMOTE_ONESHOT_NONE = 0,
    VANILLA_EMOTE_ONESHOT_TALK = 1,
    VANILLA_EMOTE_ONESHOT_BOW = 2,
    VANILLA_EMOTE_ONESHOT_WAVE = 3,
    VANILLA_EMOTE_ONESHOT_CHEER = 4,
    VANILLA_EMOTE_ONESHOT_EXCLAMATION = 5,
    VANILLA_EMOTE_ONESHOT_QUESTION = 6,
    VANILLA_EMOTE_ONESHOT_EAT = 7,
    VANILLA_EMOTE_STATE_DANCE = 10,
    VANILLA_EMOTE_ONESHOT_LAUGH = 11,
    VANILLA_EMOTE_STATE_SLEEP = 12,
    VANILLA_EMOTE_STATE_SIT = 13,
    VANILLA_EMOTE_ONESHOT_RUDE = 14,
    VANILLA_EMOTE_ONESHOT_ROAR = 15,
    VANILLA_EMOTE_ONESHOT_KNEEL = 16,
    VANILLA_EMOTE_ONESHOT_KISS = 17,
    VANILLA_EMOTE_ONESHOT_CRY = 18,
    VANILLA_EMOTE_ONESHOT_CHICKEN = 19,
    VANILLA_EMOTE_ONESHOT_BEG = 20,
    VANILLA_EMOTE_ONESHOT_APPLAUD = 21,
    VANILLA_EMOTE_ONESHOT_SHOUT = 22,
    VANILLA_EMOTE_ONESHOT_FLEX = 23,
    VANILLA_EMOTE_ONESHOT_SHY = 24,
    VANILLA_EMOTE_ONESHOT_POINT = 25,
    VANILLA_EMOTE_STATE_STAND = 26,
    VANILLA_EMOTE_STATE_READYUNARMED = 27,
    VANILLA_EMOTE_STATE_WORK_SHEATHED = 28,
    VANILLA_EMOTE_STATE_POINT = 29,
    VANILLA_EMOTE_STATE_NONE = 30,
    VANILLA_EMOTE_ONESHOT_WOUND = 33,
    VANILLA_EMOTE_ONESHOT_WOUNDCRITICAL = 34,
    VANILLA_EMOTE_ONESHOT_ATTACKUNARMED = 35,
    VANILLA_EMOTE_ONESHOT_ATTACK1H = 36,
    VANILLA_EMOTE_ONESHOT_ATTACK2HTIGHT = 37,
    VANILLA_EMOTE_ONESHOT_ATTACK2HLOOSE = 38,
    VANILLA_EMOTE_ONESHOT_PARRYUNARMED = 39,
    VANILLA_EMOTE_ONESHOT_PARRYSHIELD = 43,
    VANILLA_EMOTE_ONESHOT_READYUNARMED = 44,
    VANILLA_EMOTE_ONESHOT_READY1H = 45,
    VANILLA_EMOTE_ONESHOT_READYBOW = 48,
    VANILLA_EMOTE_ONESHOT_SPELLPRECAST = 50,
    VANILLA_EMOTE_ONESHOT_SPELLCAST = 51,
    VANILLA_EMOTE_ONESHOT_BATTLEROAR = 53,
    VANILLA_EMOTE_ONESHOT_SPECIALATTACK1H = 54,
    VANILLA_EMOTE_ONESHOT_KICK = 60,
    VANILLA_EMOTE_ONESHOT_ATTACKTHROWN = 61,
    VANILLA_EMOTE_STATE_STUN = 64,
    VANILLA_EMOTE_STATE_DEAD = 65,
    VANILLA_EMOTE_ONESHOT_SALUTE = 66,
    VANILLA_EMOTE_STATE_KNEEL = 68,
    VANILLA_EMOTE_STATE_USESTANDING = 69,
    VANILLA_EMOTE_ONESHOT_WAVE_NOSHEATHE = 70,
    VANILLA_EMOTE_ONESHOT_CHEER_NOSHEATHE = 71,
    VANILLA_EMOTE_ONESHOT_EAT_NOSHEATHE = 92,
    VANILLA_EMOTE_STATE_STUN_NOSHEATHE = 93,
    VANILLA_EMOTE_ONESHOT_DANCE = 94,
    VANILLA_EMOTE_ONESHOT_SALUTE_NOSHEATH = 113,
    VANILLA_EMOTE_STATE_USESTANDING_NOSHEATHE = 133,
    VANILLA_EMOTE_ONESHOT_LAUGH_NOSHEATHE = 153,
    VANILLA_EMOTE_STATE_WORK = 173,
    VANILLA_EMOTE_STATE_SPELLPRECAST = 193,
    VANILLA_EMOTE_ONESHOT_READYRIFLE = 213,
    VANILLA_EMOTE_STATE_READYRIFLE = 214,
    VANILLA_EMOTE_STATE_WORK_MINING = 233,
    VANILLA_EMOTE_STATE_WORK_CHOPWOOD = 234,
    VANILLA_EMOTE_STATE_APPLAUD = 253,
    VANILLA_EMOTE_ONESHOT_LIFTOFF = 254,
    VANILLA_EMOTE_ONESHOT_YES = 273,
    VANILLA_EMOTE_ONESHOT_NO = 274,
    VANILLA_EMOTE_ONESHOT_TRAIN = 275,
    VANILLA_EMOTE_ONESHOT_LAND = 293,
    VANILLA_EMOTE_STATE_AT_EASE = 313,
    VANILLA_EMOTE_STATE_READY1H = 333,
    VANILLA_EMOTE_STATE_SPELLKNEELSTART = 353,
    VANILLA_EMOTE_STATE_SUBMERGED = 373,
    VANILLA_EMOTE_ONESHOT_SUBMERGE = 374,
    VANILLA_EMOTE_STATE_READY2H = 375,
    VANILLA_EMOTE_STATE_READYBOW = 376,
    VANILLA_EMOTE_ONESHOT_MOUNTSPECIAL = 377,
    VANILLA_EMOTE_STATE_TALK = 378,
    VANILLA_EMOTE_STATE_FISHING = 379,
    VANILLA_EMOTE_ONESHOT_FISHING = 380,
    VANILLA_EMOTE_ONESHOT_LOOT = 381,
    VANILLA_EMOTE_STATE_WHIRLWIND = 382,
    VANILLA_EMOTE_STATE_DROWNED = 383,
    VANILLA_EMOTE_STATE_HOLD_BOW = 384,
    VANILLA_EMOTE_STATE_HOLD_RIFLE = 385,
    VANILLA_EMOTE_STATE_HOLD_THROWN = 386,
    VANILLA_EMOTE_ONESHOT_DROWN = 387,
    VANILLA_EMOTE_ONESHOT_STOMP = 388,
    VANILLA_EMOTE_ONESHOT_ATTACKOFF = 389,
    VANILLA_EMOTE_ONESHOT_ATTACKOFFPIERCE = 390,
    VANILLA_EMOTE_STATE_ROAR = 391,
    VANILLA_EMOTE_STATE_LAUGH = 392,
    VANILLA_EMOTE_ONESHOT_CREATURE_SPECIAL = 393,
    VANILLA_EMOTE_ONESHOT_JUMPLANDRUN = 394,
    VANILLA_EMOTE_ONESHOT_JUMPEND = 395,
    VANILLA_EMOTE_ONESHOT_TALK_NOSHEATHE = 396,
    VANILLA_EMOTE_ONESHOT_POINT_NOSHEATHE = 397,
    VANILLA_EMOTE_STATE_CANNIBALIZE = 398,
    VANILLA_EMOTE_ONESHOT_JUMPSTART = 399,
    VANILLA_EMOTE_STATE_DANCESPECIAL = 400,
    VANILLA_EMOTE_ONESHOT_DANCESPECIAL = 401,
    VANILLA_EMOTE_ONESHOT_CUSTOMSPELL01 = 402,
    VANILLA_EMOTE_ONESHOT_CUSTOMSPELL02 = 403,
    VANILLA_EMOTE_ONESHOT_CUSTOMSPELL03 = 404,
    VANILLA_EMOTE_ONESHOT_CUSTOMSPELL04 = 405,
    VANILLA_EMOTE_ONESHOT_CUSTOMSPELL05 = 406,
    VANILLA_EMOTE_ONESHOT_CUSTOMSPELL06 = 407,
    VANILLA_EMOTE_ONESHOT_CUSTOMSPELL07 = 408,
    VANILLA_EMOTE_ONESHOT_CUSTOMSPELL08 = 409,
    VANILLA_EMOTE_ONESHOT_CUSTOMSPELL09 = 410,
    VANILLA_EMOTE_ONESHOT_CUSTOMSPELL10 = 411,
    VANILLA_EMOTE_STATE_EXCLAIM = 412,
    VANILLA_EMOTE_STATE_SIT_CHAIR_MED = 415,
    VANILLA_EMOTE_STATE_SPELLEFFECT_HOLD = 422,
    VANILLA_EMOTE_STATE_EAT_NO_SHEATHE = 423
} vanilla_Emote;

typedef enum {
    VANILLA_EMOTE_SPEC_PROC_NO_LOOP = 0,
    VANILLA_EMOTE_SPEC_PROC_LOOP = 1,
    VANILLA_EMOTE_SPEC_PROC_LOOP_WITH_SOUND = 2
} vanilla_EmoteSpecProc;

typedef enum {
    VANILLA_ENVIRONMENTAL_DAMAGE_TYPE_EXHAUSTED = 0,
    VANILLA_ENVIRONMENTAL_DAMAGE_TYPE_DROWNING = 1,
    VANILLA_ENVIRONMENTAL_DAMAGE_TYPE_FALL = 2,
    VANILLA_ENVIRONMENTAL_DAMAGE_TYPE_LAVA = 3,
    VANILLA_ENVIRONMENTAL_DAMAGE_TYPE_SLIME = 4,
    VANILLA_ENVIRONMENTAL_DAMAGE_TYPE_FIRE = 5
} vanilla_EnvironmentalDamageType;

typedef enum {
    VANILLA_EXPERIENCE_AWARD_TYPE_KILL = 0,
    VANILLA_EXPERIENCE_AWARD_TYPE_NON_KILL = 1
} vanilla_ExperienceAwardType;

typedef enum {
    VANILLA_FACTION_NONE = 0,
    VANILLA_FACTION_PLAYER_HUMAN = 1,
    VANILLA_FACTION_PLAYER_ORC = 2,
    VANILLA_FACTION_PLAYER_DWARF = 3,
    VANILLA_FACTION_PLAYER_NIGHT_ELF = 4,
    VANILLA_FACTION_PLAYER_UNDEAD = 5,
    VANILLA_FACTION_PLAYER_TAUREN = 6,
    VANILLA_FACTION_CREATURE = 7,
    VANILLA_FACTION_PLAYER_GNOME = 8,
    VANILLA_FACTION_PLAYER_TROLL = 9,
    VANILLA_FACTION_MONSTER = 14,
    VANILLA_FACTION_DEFIAS_BROTHERHOOD = 15,
    VANILLA_FACTION_GNOLL_RIVERPAW = 16,
    VANILLA_FACTION_GNOLL_REDRIDGE = 17,
    VANILLA_FACTION_GNOLL_SHADOWHIDE = 18,
    VANILLA_FACTION_MURLOC = 19,
    VANILLA_FACTION_UNDEAD_SCOURGE = 20,
    VANILLA_FACTION_BOOTY_BAY = 21,
    VANILLA_FACTION_BEAST_SPIDER = 22,
    VANILLA_FACTION_BEAST_BOAR = 23,
    VANILLA_FACTION_WORGEN = 24,
    VANILLA_FACTION_KOBOLD = 25,
    VANILLA_FACTION_TROLL_BLOODSCALP = 26,
    VANILLA_FACTION_TROLL_SKULLSPLITTER = 27,
    VANILLA_FACTION_PREY = 28,
    VANILLA_FACTION_BEAST_WOLF = 29,
    VANILLA_FACTION_DEFIAS_BROTHERHOOD_TRAITOR = 30,
    VANILLA_FACTION_FRIENDLY = 31,
    VANILLA_FACTION_TROGG = 32,
    VANILLA_FACTION_TROLL_FROSTMANE = 33,
    VANILLA_FACTION_ORC_BLACKROCK = 34,
    VANILLA_FACTION_VILLIAN = 35,
    VANILLA_FACTION_VICTIM = 36,
    VANILLA_FACTION_BEAST_BEAR = 37,
    VANILLA_FACTION_OGRE = 38,
    VANILLA_FACTION_KURZENS_MERCENARIES = 39,
    VANILLA_FACTION_ESCORTEE = 40,
    VANILLA_FACTION_VENTURE_COMPANY = 41,
    VANILLA_FACTION_BEAST_RAPTOR = 42,
    VANILLA_FACTION_BASILISK = 43,
    VANILLA_FACTION_DRAGONFLIGHT_GREEN = 44,
    VANILLA_FACTION_LOST_ONES = 45,
    VANILLA_FACTION_BLACKSMITHING_ARMORSMITHING = 46,
    VANILLA_FACTION_IRONFORGE = 47,
    VANILLA_FACTION_DARK_IRON_DWARVES = 48,
    VANILLA_FACTION_HUMAN_NIGHT_WATCH = 49,
    VANILLA_FACTION_DRAGONFLIGHT_RED = 50,
    VANILLA_FACTION_GNOLL_MOSSHIDE = 51,
    VANILLA_FACTION_ORC_DRAGONMAW = 52,
    VANILLA_FACTION_GNOME_LEPER = 53,
    VANILLA_FACTION_GNOMEREGAN_EXILES = 54,
    VANILLA_FACTION_LEOPARD = 55,
    VANILLA_FACTION_SCARLET_CRUSADE = 56,
    VANILLA_FACTION_GNOLL_ROTHIDE = 57,
    VANILLA_FACTION_BEAST_GORILLA = 58,
    VANILLA_FACTION_THORIUM_BROTHERHOOD = 59,
    VANILLA_FACTION_NAGA = 60,
    VANILLA_FACTION_DALARAN = 61,
    VANILLA_FACTION_FORLORN_SPIRIT = 62,
    VANILLA_FACTION_DARKHOWL = 63,
    VANILLA_FACTION_GRELL = 64,
    VANILLA_FACTION_FURBOLG = 65,
    VANILLA_FACTION_HORDE_GENERIC = 66,
    VANILLA_FACTION_HORDE = 67,
    VANILLA_FACTION_UNDERCITY = 68,
    VANILLA_FACTION_DARNASSUS = 69,
    VANILLA_FACTION_SYNDICATE = 70,
    VANILLA_FACTION_HILLSBRAD_MILITIA = 71,
    VANILLA_FACTION_STORMWIND = 72,
    VANILLA_FACTION_DEMON = 73,
    VANILLA_FACTION_ELEMENTAL = 74,
    VANILLA_FACTION_SPIRIT = 75,
    VANILLA_FACTION_ORGRIMMAR = 76,
    VANILLA_FACTION_TREASURE = 77,
    VANILLA_FACTION_GNOLL_MUDSNOUT = 78,
    VANILLA_FACTION_HILLSBRAD_SOUTHSHORE_MAYOR = 79,
    VANILLA_FACTION_DRAGONFLIGHT_BLACK = 80,
    VANILLA_FACTION_THUNDER_BLUFF = 81,
    VANILLA_FACTION_TROLL_WITHERBARK = 82,
    VANILLA_FACTION_LEATHERWORKING_ELEMENTAL = 83,
    VANILLA_FACTION_QUILBOAR_RAZORMANE = 84,
    VANILLA_FACTION_QUILBOAR_BRISTLEBACK = 85,
    VANILLA_FACTION_LEATHERWORKING_DRAGONSCALE = 86,
    VANILLA_FACTION_BLOODSAIL_BUCCANEERS = 87,
    VANILLA_FACTION_BLACKFATHOM = 88,
    VANILLA_FACTION_MAKRURA = 89,
    VANILLA_FACTION_CENTAUR_KOLKAR = 90,
    VANILLA_FACTION_CENTAUR_GALAK = 91,
    VANILLA_FACTION_GELKIS_CLAN_CENTAUR = 92,
    VANILLA_FACTION_MAGRAM_CLAN_CENTAUR = 93,
    VANILLA_FACTION_MARAUDINE = 94,
    VANILLA_FACTION_THERAMORE = 108,
    VANILLA_FACTION_QUILBOAR_RAZORFEN = 109,
    VANILLA_FACTION_QUILBOAR_RAZORMANE_2 = 110,
    VANILLA_FACTION_QUILBOAR_DEATHSHEAD = 111,
    VANILLA_FACTION_ENEMY = 128,
    VANILLA_FACTION_AMBIENT = 148,
    VANILLA_FACTION_NETHERGARDE_CARAVAN = 168,
    VANILLA_FACTION_STEAMWHEEDLE_CARTEL = 169,
    VANILLA_FACTION_ALLIANCE_GENERIC = 189,
    VANILLA_FACTION_NETHERGARDE = 209,
    VANILLA_FACTION_WAILING_CAVERNS = 229,
    VANILLA_FACTION_SILITHID = 249,
    VANILLA_FACTION_SILVERMOON_REMNANT = 269,
    VANILLA_FACTION_ZANDALAR_TRIBE = 270,
    VANILLA_FACTION_BLACKSMITHING_WEAPONSMITHING = 289,
    VANILLA_FACTION_SCORPID = 309,
    VANILLA_FACTION_BEAST_BAT = 310,
    VANILLA_FACTION_TITAN = 311,
    VANILLA_FACTION_TASKMASTER_FIZZULE = 329,
    VANILLA_FACTION_RAVENHOLDT = 349,
    VANILLA_FACTION_GADGETZAN = 369,
    VANILLA_FACTION_GNOMEREGAN_BUG = 389,
    VANILLA_FACTION_HARPY = 409,
    VANILLA_FACTION_BURNING_BLADE = 429,
    VANILLA_FACTION_SHADOWSILK_POACHER = 449,
    VANILLA_FACTION_SEARING_SPIDER = 450,
    VANILLA_FACTION_ALLIANCE = 469,
    VANILLA_FACTION_RATCHET = 470,
    VANILLA_FACTION_WILDHAMMER_CLAN = 471,
    VANILLA_FACTION_GOBLIN_DARK_IRON_BAR_PATRON = 489,
    VANILLA_FACTION_THE_LEAGUE_OF_ARATHOR = 509,
    VANILLA_FACTION_THE_DEFILERS = 510,
    VANILLA_FACTION_GIANT = 511,
    VANILLA_FACTION_ARGENT_DAWN = 529,
    VANILLA_FACTION_DARKSPEAR_TROLLS = 530,
    VANILLA_FACTION_DRAGONFLIGHT_BRONZE = 531,
    VANILLA_FACTION_DRAGONFLIGHT_BLUE = 532,
    VANILLA_FACTION_LEATHERWORKING_TRIBAL = 549,
    VANILLA_FACTION_ENGINEERING_GOBLIN = 550,
    VANILLA_FACTION_ENGINEERING_GNOME = 551,
    VANILLA_FACTION_BLACKSMITHING_HAMMERSMITHING = 569,
    VANILLA_FACTION_BLACKSMITHING_AXESMITHING = 570,
    VANILLA_FACTION_BLACKSMITHING_SWORDSMITHING = 571,
    VANILLA_FACTION_TROLL_VILEBRANCH = 572,
    VANILLA_FACTION_SOUTHSEA_FREEBOOTERS = 573,
    VANILLA_FACTION_CAER_DARROW = 574,
    VANILLA_FACTION_FURBOLG_UNCORRUPTED = 575,
    VANILLA_FACTION_TIMBERMAW_HOLD = 576,
    VANILLA_FACTION_EVERLOOK = 577,
    VANILLA_FACTION_WINTERSABER_TRAINERS = 589,
    VANILLA_FACTION_CENARION_CIRCLE = 609,
    VANILLA_FACTION_SHATTERSPEAR_TROLLS = 629,
    VANILLA_FACTION_RAVASAUR_TRAINERS = 630,
    VANILLA_FACTION_MAJORDOMO_EXECUTUS = 649,
    VANILLA_FACTION_BEAST_CARRION_BIRD = 669,
    VANILLA_FACTION_BEAST_CAT = 670,
    VANILLA_FACTION_BEAST_CRAB = 671,
    VANILLA_FACTION_BEAST_CROCILISK = 672,
    VANILLA_FACTION_BEAST_HYENA = 673,
    VANILLA_FACTION_BEAST_OWL = 674,
    VANILLA_FACTION_BEAST_SCORPID = 675,
    VANILLA_FACTION_BEAST_TALLSTRIDER = 676,
    VANILLA_FACTION_BEAST_TURTLE = 677,
    VANILLA_FACTION_BEAST_WIND_SERPENT = 678,
    VANILLA_FACTION_TRAINING_DUMMY = 679,
    VANILLA_FACTION_DRAGONFLIGHT_BLACK_BAIT = 689,
    VANILLA_FACTION_BATTLEGROUND_NEUTRAL = 709,
    VANILLA_FACTION_FROSTWOLF_CLAN = 729,
    VANILLA_FACTION_STORMPIKE_GUARD = 730,
    VANILLA_FACTION_HYDRAXIAN_WATERLORDS = 749,
    VANILLA_FACTION_SULFURON_FIRELORDS = 750,
    VANILLA_FACTION_GIZLOCKS_DUMMY = 769,
    VANILLA_FACTION_GIZLOCKS_CHARM = 770,
    VANILLA_FACTION_GIZLOCK = 771,
    VANILLA_FACTION_MORO_GAI = 789,
    VANILLA_FACTION_SPIRIT_GUIDE_ALLIANCE = 790,
    VANILLA_FACTION_SHEN_DRALAR = 809,
    VANILLA_FACTION_OGRE_CAPTAIN_KROMCRUSH = 829,
    VANILLA_FACTION_SPIRIT_GUIDE_HORDE = 849,
    VANILLA_FACTION_JAEDENAR = 869,
    VANILLA_FACTION_WARSONG_OUTRIDERS = 889,
    VANILLA_FACTION_SILVERWING_SENTINELS = 890,
    VANILLA_FACTION_ALLIANCE_FORCES = 891,
    VANILLA_FACTION_HORDE_FORCES = 892,
    VANILLA_FACTION_REVANTUSK_TROLLS = 893,
    VANILLA_FACTION_DARKMOON_FAIRE = 909,
    VANILLA_FACTION_BROOD_OF_NOZDORMU = 910,
    VANILLA_FACTION_MIGHT_OF_KALIMDOR = 912,
    VANILLA_FACTION_ARMIES_OF_C_THUN = 915,
    VANILLA_FACTION_SILITHID_ATTACKERS = 916,
    VANILLA_FACTION_THE_IRONFORGE_BRIGADE = 917,
    VANILLA_FACTION_RC_ENEMIES = 918,
    VANILLA_FACTION_RC_OBJECTS = 919,
    VANILLA_FACTION_RED = 920,
    VANILLA_FACTION_BLUE = 921,
    VANILLA_FACTION_SCOURGE_INVADERS = 928,
    VANILLA_FACTION_TEST_FACTION_NOT_A_REAL_FACTION = 931,
    VANILLA_FACTION_TOWOW_FLAG = 950,
    VANILLA_FACTION_TOWOW_FLAG_TRIGGER_ALLIANCE_DND = 951,
    VANILLA_FACTION_TOWOW_FLAG_TRIGGER_HORDE_DND = 954
} vanilla_Faction;

typedef enum {
    VANILLA_FAR_SIGHT_OPERATION_REMOVE = 0,
    VANILLA_FAR_SIGHT_OPERATION_ADD = 1
} vanilla_FarSightOperation;

typedef enum {
    VANILLA_FLUID_SPEED_STILL = 0,
    VANILLA_FLUID_SPEED_SLOW = 4,
    VANILLA_FLUID_SPEED_RAPID = 8
} vanilla_FluidSpeed;

typedef enum {
    VANILLA_FRIEND_RESULT_DB_ERROR = 0,
    VANILLA_FRIEND_RESULT_LIST_FULL = 1,
    VANILLA_FRIEND_RESULT_ONLINE = 2,
    VANILLA_FRIEND_RESULT_OFFLINE = 3,
    VANILLA_FRIEND_RESULT_NOT_FOUND = 4,
    VANILLA_FRIEND_RESULT_REMOVED = 5,
    VANILLA_FRIEND_RESULT_ADDED_ONLINE = 6,
    VANILLA_FRIEND_RESULT_ADDED_OFFLINE = 7,
    VANILLA_FRIEND_RESULT_ALREADY = 8,
    VANILLA_FRIEND_RESULT_SELF = 9,
    VANILLA_FRIEND_RESULT_ENEMY = 10,
    VANILLA_FRIEND_RESULT_IGNORE_FULL = 11,
    VANILLA_FRIEND_RESULT_IGNORE_SELF = 12,
    VANILLA_FRIEND_RESULT_IGNORE_NOT_FOUND = 13,
    VANILLA_FRIEND_RESULT_IGNORE_ALREADY = 14,
    VANILLA_FRIEND_RESULT_IGNORE_ADDED = 15,
    VANILLA_FRIEND_RESULT_IGNORE_REMOVED = 16,
    VANILLA_FRIEND_RESULT_IGNORE_AMBIGUOUS = 17,
    VANILLA_FRIEND_RESULT_MUTE_FULL = 18,
    VANILLA_FRIEND_RESULT_MUTE_SELF = 19,
    VANILLA_FRIEND_RESULT_MUTE_NOT_FOUND = 20,
    VANILLA_FRIEND_RESULT_MUTE_ALREADY = 21,
    VANILLA_FRIEND_RESULT_MUTE_ADDED = 22,
    VANILLA_FRIEND_RESULT_MUTE_REMOVED = 23,
    VANILLA_FRIEND_RESULT_MUTE_AMBIGUOUS = 24,
    VANILLA_FRIEND_RESULT_UNKNOWN19 = 25,
    VANILLA_FRIEND_RESULT_UNKNOWN20 = 26
} vanilla_FriendResult;

typedef enum {
    VANILLA_FRIEND_STATUS_OFFLINE = 0,
    VANILLA_FRIEND_STATUS_ONLINE = 1,
    VANILLA_FRIEND_STATUS_AFK = 2,
    VANILLA_FRIEND_STATUS_UNKNOWN3 = 3,
    VANILLA_FRIEND_STATUS_DND = 4
} vanilla_FriendStatus;

typedef enum {
    VANILLA_GENDER_MALE = 0,
    VANILLA_GENDER_FEMALE = 1,
    VANILLA_GENDER_NONE = 2
} vanilla_Gender;

typedef enum {
    VANILLA_GM_TICKET_ESCALATION_STATUS_GMTICKET_ASSIGNEDTOGM_STATUS_NOT_ASSIGNED = 0,
    VANILLA_GM_TICKET_ESCALATION_STATUS_GMTICKET_ASSIGNEDTOGM_STATUS_ASSIGNED = 1,
    VANILLA_GM_TICKET_ESCALATION_STATUS_GMTICKET_ASSIGNEDTOGM_STATUS_ESCALATED = 2
} vanilla_GmTicketEscalationStatus;

typedef enum {
    VANILLA_GM_TICKET_QUEUE_STATUS_ENABLED = 1,
    VANILLA_GM_TICKET_QUEUE_STATUS_DISABLED = 0
} vanilla_GmTicketQueueStatus;

typedef enum {
    VANILLA_GM_TICKET_RESPONSE_NOT_EXIST = 0,
    VANILLA_GM_TICKET_RESPONSE_ALREADY_EXIST = 1,
    VANILLA_GM_TICKET_RESPONSE_CREATE_SUCCESS = 2,
    VANILLA_GM_TICKET_RESPONSE_CREATE_ERROR = 3,
    VANILLA_GM_TICKET_RESPONSE_UPDATE_SUCCESS = 4,
    VANILLA_GM_TICKET_RESPONSE_UPDATE_ERROR = 5,
    VANILLA_GM_TICKET_RESPONSE_TICKET_DELETED = 9
} vanilla_GmTicketResponse;

typedef enum {
    VANILLA_GM_TICKET_STATUS_DB_ERROR = 0,
    VANILLA_GM_TICKET_STATUS_HAS_TEXT = 6,
    VANILLA_GM_TICKET_STATUS_DEFAULT = 10
} vanilla_GmTicketStatus;

typedef enum {
    VANILLA_GM_TICKET_STATUS_RESPONSE_UPDATED = 1,
    VANILLA_GM_TICKET_STATUS_RESPONSE_CLOSED = 2,
    VANILLA_GM_TICKET_STATUS_RESPONSE_SURVEY = 3
} vanilla_GmTicketStatusResponse;

typedef enum {
    VANILLA_GM_TICKET_TYPE_STUCK = 1,
    VANILLA_GM_TICKET_TYPE_BEHAVIOR_HARASSMENT = 2,
    VANILLA_GM_TICKET_TYPE_GUILD = 3,
    VANILLA_GM_TICKET_TYPE_ITEM = 4,
    VANILLA_GM_TICKET_TYPE_ENVIRONMENTAL = 5,
    VANILLA_GM_TICKET_TYPE_NONQUEST_CREEP = 6,
    VANILLA_GM_TICKET_TYPE_QUEST_QUESTNPC = 7,
    VANILLA_GM_TICKET_TYPE_TECHNICAL = 8,
    VANILLA_GM_TICKET_TYPE_ACCOUNT_BILLING = 9,
    VANILLA_GM_TICKET_TYPE_CHARACTER = 10
} vanilla_GmTicketType;

typedef enum {
    VANILLA_GROUP_LOOT_SETTING_FREE_FOR_ALL = 0,
    VANILLA_GROUP_LOOT_SETTING_ROUND_ROBIN = 1,
    VANILLA_GROUP_LOOT_SETTING_MASTER_LOOT = 2,
    VANILLA_GROUP_LOOT_SETTING_GROUP_LOOT = 3,
    VANILLA_GROUP_LOOT_SETTING_NEED_BEFORE_GREED = 4
} vanilla_GroupLootSetting;

typedef enum {
    VANILLA_GROUP_TYPE_NORMAL = 0,
    VANILLA_GROUP_TYPE_RAID = 1
} vanilla_GroupType;

typedef enum {
    VANILLA_GUILD_COMMAND_CREATE = 0,
    VANILLA_GUILD_COMMAND_INVITE = 1,
    VANILLA_GUILD_COMMAND_QUIT = 3,
    VANILLA_GUILD_COMMAND_FOUNDER = 14,
    VANILLA_GUILD_COMMAND_UNKNOWN19 = 19,
    VANILLA_GUILD_COMMAND_UNKNOWN20 = 20
} vanilla_GuildCommand;

typedef enum {
    VANILLA_GUILD_COMMAND_RESULT_PLAYER_NO_MORE_IN_GUILD = 0,
    VANILLA_GUILD_COMMAND_RESULT_GUILD_INTERNAL = 1,
    VANILLA_GUILD_COMMAND_RESULT_ALREADY_IN_GUILD = 2,
    VANILLA_GUILD_COMMAND_RESULT_ALREADY_IN_GUILD_S = 3,
    VANILLA_GUILD_COMMAND_RESULT_INVITED_TO_GUILD = 4,
    VANILLA_GUILD_COMMAND_RESULT_ALREADY_INVITED_TO_GUILD_S = 5,
    VANILLA_GUILD_COMMAND_RESULT_GUILD_NAME_INVALID = 6,
    VANILLA_GUILD_COMMAND_RESULT_GUILD_NAME_EXISTS_S = 7,
    VANILLA_GUILD_COMMAND_RESULT_GUILD_PERMISSIONS_OR_LEADER = 8,
    VANILLA_GUILD_COMMAND_RESULT_GUILD_PLAYER_NOT_IN_GUILD = 9,
    VANILLA_GUILD_COMMAND_RESULT_GUILD_PLAYER_NOT_IN_GUILD_S = 10,
    VANILLA_GUILD_COMMAND_RESULT_GUILD_PLAYER_NOT_FOUND_S = 11,
    VANILLA_GUILD_COMMAND_RESULT_GUILD_NOT_ALLIED = 12,
    VANILLA_GUILD_COMMAND_RESULT_GUILD_RANK_TOO_HIGH_S = 13,
    VANILLA_GUILD_COMMAND_RESULT_GUILD_RANK_TOO_LOW_S = 14
} vanilla_GuildCommandResult;

typedef enum {
    VANILLA_GUILD_EMBLEM_RESULT_SUCCESS = 0,
    VANILLA_GUILD_EMBLEM_RESULT_INVALID_TABARD_COLORS = 1,
    VANILLA_GUILD_EMBLEM_RESULT_NO_GUILD = 2,
    VANILLA_GUILD_EMBLEM_RESULT_NOT_GUILD_MASTER = 3,
    VANILLA_GUILD_EMBLEM_RESULT_NOT_ENOUGH_MONEY = 4,
    VANILLA_GUILD_EMBLEM_RESULT_NO_MESSAGE = 5
} vanilla_GuildEmblemResult;

typedef enum {
    VANILLA_GUILD_EVENT_PROMOTION = 0,
    VANILLA_GUILD_EVENT_DEMOTION = 1,
    VANILLA_GUILD_EVENT_MOTD = 2,
    VANILLA_GUILD_EVENT_JOINED = 3,
    VANILLA_GUILD_EVENT_LEFT = 4,
    VANILLA_GUILD_EVENT_REMOVED = 5,
    VANILLA_GUILD_EVENT_LEADER_IS = 6,
    VANILLA_GUILD_EVENT_LEADER_CHANGED = 7,
    VANILLA_GUILD_EVENT_DISBANDED = 8,
    VANILLA_GUILD_EVENT_TABARD_CHANGED = 9,
    VANILLA_GUILD_EVENT_UNKNOWN10 = 10,
    VANILLA_GUILD_EVENT_ROSTER_UPDATE = 11,
    VANILLA_GUILD_EVENT_SIGNED_ON = 12,
    VANILLA_GUILD_EVENT_SIGNED_OFF = 13
} vanilla_GuildEvent;

typedef enum {
    VANILLA_GUILD_MEMBER_STATUS_OFFLINE = 0,
    VANILLA_GUILD_MEMBER_STATUS_ONLINE = 1
} vanilla_GuildMemberStatus;

typedef enum {
    VANILLA_HIT_INFO_NORMAL_SWING = 0,
    VANILLA_HIT_INFO_UNK1 = 1,
    VANILLA_HIT_INFO_AFFECTS_VICTIM = 2,
    VANILLA_HIT_INFO_LEFT_SWING = 4,
    VANILLA_HIT_INFO_EARLY_CRITICAL_HIT = 8,
    VANILLA_HIT_INFO_MISS = 16,
    VANILLA_HIT_INFO_ABSORB = 32,
    VANILLA_HIT_INFO_RESIST = 64,
    VANILLA_HIT_INFO_CRITICAL_HIT = 128,
    VANILLA_HIT_INFO_UNK9 = 256,
    VANILLA_HIT_INFO_UNK10 = 8192,
    VANILLA_HIT_INFO_GLANCING = 16384,
    VANILLA_HIT_INFO_CRUSHING = 32768,
    VANILLA_HIT_INFO_NO_ACTION = 65536,
    VANILLA_HIT_INFO_SWING_NO_HIT_SOUND = 524288
} vanilla_HitInfo;

typedef enum {
    VANILLA_INFO_BLOCK_UNAVAILABLE = 0,
    VANILLA_INFO_BLOCK_AVAILABLE = 1
} vanilla_InfoBlock;

typedef enum {
    VANILLA_INSTANCE_RESET_FAILED_REASON_GENERAL = 0,
    VANILLA_INSTANCE_RESET_FAILED_REASON_OFFLINE = 1,
    VANILLA_INSTANCE_RESET_FAILED_REASON_ZONING = 2,
    VANILLA_INSTANCE_RESET_FAILED_REASON_SILENTLY = 3
} vanilla_InstanceResetFailedReason;

typedef enum {
    VANILLA_INSTANCE_TYPE_NORMAL = 0,
    VANILLA_INSTANCE_TYPE_GROUP_INSTANCE = 1,
    VANILLA_INSTANCE_TYPE_RAID_INSTANCE = 2,
    VANILLA_INSTANCE_TYPE_BATTLEGROUND = 3,
    VANILLA_INSTANCE_TYPE_WORLD_ZONE = 4,
    VANILLA_INSTANCE_TYPE_BATTLEGROUND2 = 5
} vanilla_InstanceType;

typedef enum {
    VANILLA_INVENTORY_RESULT_OK = 0,
    VANILLA_INVENTORY_RESULT_CANT_EQUIP_LEVEL_I = 1,
    VANILLA_INVENTORY_RESULT_CANT_EQUIP_SKILL = 2,
    VANILLA_INVENTORY_RESULT_ITEM_DOESNT_GO_TO_SLOT = 3,
    VANILLA_INVENTORY_RESULT_BAG_FULL = 4,
    VANILLA_INVENTORY_RESULT_NONEMPTY_BAG_OVER_OTHER_BAG = 5,
    VANILLA_INVENTORY_RESULT_CANT_TRADE_EQUIP_BAGS = 6,
    VANILLA_INVENTORY_RESULT_ONLY_AMMO_CAN_GO_HERE = 7,
    VANILLA_INVENTORY_RESULT_NO_REQUIRED_PROFICIENCY = 8,
    VANILLA_INVENTORY_RESULT_NO_EQUIPMENT_SLOT_AVAILABLE = 9,
    VANILLA_INVENTORY_RESULT_YOU_CAN_NEVER_USE_THAT_ITEM = 10,
    VANILLA_INVENTORY_RESULT_YOU_CAN_NEVER_USE_THAT_ITEM2 = 11,
    VANILLA_INVENTORY_RESULT_NO_EQUIPMENT_SLOT_AVAILABLE2 = 12,
    VANILLA_INVENTORY_RESULT_CANT_EQUIP_WITH_TWOHANDED = 13,
    VANILLA_INVENTORY_RESULT_CANT_DUAL_WIELD = 14,
    VANILLA_INVENTORY_RESULT_ITEM_DOESNT_GO_INTO_BAG = 15,
    VANILLA_INVENTORY_RESULT_ITEM_DOESNT_GO_INTO_BAG2 = 16,
    VANILLA_INVENTORY_RESULT_CANT_CARRY_MORE_OF_THIS = 17,
    VANILLA_INVENTORY_RESULT_NO_EQUIPMENT_SLOT_AVAILABLE3 = 18,
    VANILLA_INVENTORY_RESULT_ITEM_CANT_STACK = 19,
    VANILLA_INVENTORY_RESULT_ITEM_CANT_BE_EQUIPPED = 20,
    VANILLA_INVENTORY_RESULT_ITEMS_CANT_BE_SWAPPED = 21,
    VANILLA_INVENTORY_RESULT_SLOT_IS_EMPTY = 22,
    VANILLA_INVENTORY_RESULT_ITEM_NOT_FOUND = 23,
    VANILLA_INVENTORY_RESULT_CANT_DROP_SOULBOUND = 24,
    VANILLA_INVENTORY_RESULT_OUT_OF_RANGE = 25,
    VANILLA_INVENTORY_RESULT_TRIED_TO_SPLIT_MORE_THAN_COUNT = 26,
    VANILLA_INVENTORY_RESULT_COULDNT_SPLIT_ITEMS = 27,
    VANILLA_INVENTORY_RESULT_MISSING_REAGENT = 28,
    VANILLA_INVENTORY_RESULT_NOT_ENOUGH_MONEY = 29,
    VANILLA_INVENTORY_RESULT_NOT_A_BAG = 30,
    VANILLA_INVENTORY_RESULT_CAN_ONLY_DO_WITH_EMPTY_BAGS = 31,
    VANILLA_INVENTORY_RESULT_DONT_OWN_THAT_ITEM = 32,
    VANILLA_INVENTORY_RESULT_CAN_EQUIP_ONLY1_QUIVER = 33,
    VANILLA_INVENTORY_RESULT_MUST_PURCHASE_THAT_BAG_SLOT = 34,
    VANILLA_INVENTORY_RESULT_TOO_FAR_AWAY_FROM_BANK = 35,
    VANILLA_INVENTORY_RESULT_ITEM_LOCKED = 36,
    VANILLA_INVENTORY_RESULT_YOU_ARE_STUNNED = 37,
    VANILLA_INVENTORY_RESULT_YOU_ARE_DEAD = 38,
    VANILLA_INVENTORY_RESULT_CANT_DO_RIGHT_NOW = 39,
    VANILLA_INVENTORY_RESULT_INT_BAG_ERROR = 40,
    VANILLA_INVENTORY_RESULT_CAN_EQUIP_ONLY1_BOLT = 41,
    VANILLA_INVENTORY_RESULT_CAN_EQUIP_ONLY1_AMMOPOUCH = 42,
    VANILLA_INVENTORY_RESULT_STACKABLE_CANT_BE_WRAPPED = 43,
    VANILLA_INVENTORY_RESULT_EQUIPPED_CANT_BE_WRAPPED = 44,
    VANILLA_INVENTORY_RESULT_WRAPPED_CANT_BE_WRAPPED = 45,
    VANILLA_INVENTORY_RESULT_BOUND_CANT_BE_WRAPPED = 46,
    VANILLA_INVENTORY_RESULT_UNIQUE_CANT_BE_WRAPPED = 47,
    VANILLA_INVENTORY_RESULT_BAGS_CANT_BE_WRAPPED = 48,
    VANILLA_INVENTORY_RESULT_ALREADY_LOOTED = 49,
    VANILLA_INVENTORY_RESULT_INVENTORY_FULL = 50,
    VANILLA_INVENTORY_RESULT_BANK_FULL = 51,
    VANILLA_INVENTORY_RESULT_ITEM_IS_CURRENTLY_SOLD_OUT = 52,
    VANILLA_INVENTORY_RESULT_BAG_FULL3 = 53,
    VANILLA_INVENTORY_RESULT_ITEM_NOT_FOUND2 = 54,
    VANILLA_INVENTORY_RESULT_ITEM_CANT_STACK2 = 55,
    VANILLA_INVENTORY_RESULT_BAG_FULL4 = 56,
    VANILLA_INVENTORY_RESULT_ITEM_SOLD_OUT = 57,
    VANILLA_INVENTORY_RESULT_OBJECT_IS_BUSY = 58,
    VANILLA_INVENTORY_RESULT_NONE = 59,
    VANILLA_INVENTORY_RESULT_NOT_IN_COMBAT = 60,
    VANILLA_INVENTORY_RESULT_NOT_WHILE_DISARMED = 61,
    VANILLA_INVENTORY_RESULT_BAG_FULL6 = 62,
    VANILLA_INVENTORY_RESULT_CANT_EQUIP_RANK = 63,
    VANILLA_INVENTORY_RESULT_CANT_EQUIP_REPUTATION = 64,
    VANILLA_INVENTORY_RESULT_TOO_MANY_SPECIAL_BAGS = 65,
    VANILLA_INVENTORY_RESULT_LOOT_CANT_LOOT_THAT_NOW = 66
} vanilla_InventoryResult;

typedef enum {
    VANILLA_INVENTORY_TYPE_NON_EQUIP = 0,
    VANILLA_INVENTORY_TYPE_HEAD = 1,
    VANILLA_INVENTORY_TYPE_NECK = 2,
    VANILLA_INVENTORY_TYPE_SHOULDERS = 3,
    VANILLA_INVENTORY_TYPE_BODY = 4,
    VANILLA_INVENTORY_TYPE_CHEST = 5,
    VANILLA_INVENTORY_TYPE_WAIST = 6,
    VANILLA_INVENTORY_TYPE_LEGS = 7,
    VANILLA_INVENTORY_TYPE_FEET = 8,
    VANILLA_INVENTORY_TYPE_WRISTS = 9,
    VANILLA_INVENTORY_TYPE_HANDS = 10,
    VANILLA_INVENTORY_TYPE_FINGER = 11,
    VANILLA_INVENTORY_TYPE_TRINKET = 12,
    VANILLA_INVENTORY_TYPE_WEAPON = 13,
    VANILLA_INVENTORY_TYPE_SHIELD = 14,
    VANILLA_INVENTORY_TYPE_RANGED = 15,
    VANILLA_INVENTORY_TYPE_CLOAK = 16,
    VANILLA_INVENTORY_TYPE_TWO_HANDED_WEAPON = 17,
    VANILLA_INVENTORY_TYPE_BAG = 18,
    VANILLA_INVENTORY_TYPE_TABARD = 19,
    VANILLA_INVENTORY_TYPE_ROBE = 20,
    VANILLA_INVENTORY_TYPE_WEAPON_MAIN_HAND = 21,
    VANILLA_INVENTORY_TYPE_WEAPON_OFF_HAND = 22,
    VANILLA_INVENTORY_TYPE_HOLDABLE = 23,
    VANILLA_INVENTORY_TYPE_AMMO = 24,
    VANILLA_INVENTORY_TYPE_THROWN = 25,
    VANILLA_INVENTORY_TYPE_RANGED_RIGHT = 26,
    VANILLA_INVENTORY_TYPE_QUIVER = 27,
    VANILLA_INVENTORY_TYPE_RELIC = 28
} vanilla_InventoryType;

typedef enum {
    VANILLA_ITEM_CLASS_CONSUMABLE = 0,
    VANILLA_ITEM_CLASS_CONTAINER = 1,
    VANILLA_ITEM_CLASS_WEAPON = 2,
    VANILLA_ITEM_CLASS_GEM = 3,
    VANILLA_ITEM_CLASS_ARMOR = 4,
    VANILLA_ITEM_CLASS_REAGENT = 5,
    VANILLA_ITEM_CLASS_PROJECTILE = 6,
    VANILLA_ITEM_CLASS_TRADE_GOODS = 7,
    VANILLA_ITEM_CLASS_GENERIC = 8,
    VANILLA_ITEM_CLASS_RECIPE = 9,
    VANILLA_ITEM_CLASS_MONEY = 10,
    VANILLA_ITEM_CLASS_QUIVER = 11,
    VANILLA_ITEM_CLASS_QUEST = 12,
    VANILLA_ITEM_CLASS_KEY = 13,
    VANILLA_ITEM_CLASS_PERMANENT = 14,
    VANILLA_ITEM_CLASS_MISC = 15
} vanilla_ItemClass;

/* standard C only allows enums to be ints. We need larger than that */
typedef uint64_t vanilla_ItemClassAndSubClass;
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_CONSUMABLE 0
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_CHEESE_OR_BREAD_OBSOLETE 4294967296
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_LIQUID_OBSOLETE 8589934592
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_BAG 1
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_SOUL_BAG 4294967297
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_HERB_BAG 8589934593
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_ENCHANTING_BAG 12884901889
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_ENGINEERING_BAG 17179869185
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_AXE 2
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_AXE 4294967298
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_BOW 8589934594
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_GUN 12884901890
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_MACE 17179869186
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_MACE 21474836482
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_POLEARM 25769803778
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_SWORD 30064771074
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_SWORD 34359738370
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_OBSOLETE_WEAPON 38654705666
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_STAFF 42949672962
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_EXOTIC 47244640258
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_EXOTIC 51539607554
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_FIST_WEAPON 55834574850
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_WEAPON 60129542146
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_DAGGER 64424509442
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_THROWN 68719476738
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_SPEAR 73014444034
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_CROSSBOW 77309411330
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_WAND 81604378626
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_FISHING_POLE 85899345922
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_JEWELRY_OBSOLETE 3
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_ARMOR 4
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_CLOTH_ARMOR 4294967300
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_LEATHER_ARMOR 8589934596
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_MAIL_ARMOR 12884901892
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_PLATE_ARMOR 17179869188
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_BUCKLER_OBSOLETE 21474836484
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_SHIELD 25769803780
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_LIBRAM 30064771076
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_IDOL 34359738372
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_TOTEM 38654705668
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_REAGENT 5
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_WAND_OBSOLETE 6
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_BOLT_OBSOLETE 4294967302
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_ARROW 8589934598
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_BULLET 12884901894
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_THROWN_OBSOLETE 17179869190
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_TRADE_GOOD 7
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_PART_TRADE_GOOD 4294967303
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_EXPLOSIVE_TRADE_GOOD 8589934599
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_DEVICE_TRADE_GOOD 12884901895
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_GENERIC_OBSOLETE 8
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_BOOK 9
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_LEATHERWORKING_RECIPE 4294967305
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_TAILORING_RECIPE 8589934601
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_ENGINEERING_RECIPE 12884901897
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_BLACKSMITHING_RECIPE 17179869193
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_COOKING_RECIPE 21474836489
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_ALCHEMY_RECIPE 25769803785
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_FIRST_AID_RECIPE 30064771081
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_ENCHANTING_RECIPE 34359738377
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_FISHING_RECIPE 38654705673
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_MONEY_OBSOLETE 10
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_QUIVER_OBSOLETE 11
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_QUIVER_OBSOLETE1 4294967307
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_QUIVER 8589934603
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_AMMO_POUCH 12884901899
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_QUEST 12
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_KEY 13
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_LOCKPICK 4294967309
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_PERMANENT 14
#define VANILLA_ITEM_CLASS_AND_SUB_CLASS_JUNK 15

typedef enum {
    VANILLA_ITEM_ENV_TYPES_SHIELD = 0,
    VANILLA_ITEM_ENV_TYPES_METAL_WEAPON = 1,
    VANILLA_ITEM_ENV_TYPES_WOOD_WEAPON = 2
} vanilla_ItemEnvTypes;

typedef enum {
    VANILLA_ITEM_QUALITY_POOR = 0,
    VANILLA_ITEM_QUALITY_NORMAL = 1,
    VANILLA_ITEM_QUALITY_UNCOMMON = 2,
    VANILLA_ITEM_QUALITY_RARE = 3,
    VANILLA_ITEM_QUALITY_EPIC = 4,
    VANILLA_ITEM_QUALITY_LEGENDARY = 5,
    VANILLA_ITEM_QUALITY_ARTIFACT = 6
} vanilla_ItemQuality;

typedef enum {
    VANILLA_ITEM_SET_NONE = 0,
    VANILLA_ITEM_SET_THE_GLADIATOR = 1,
    VANILLA_ITEM_SET_DAL_RENDS_ARMS = 41,
    VANILLA_ITEM_SET_SPIDERS_KISS = 65,
    VANILLA_ITEM_SET_THE_POSTMASTER = 81,
    VANILLA_ITEM_SET_CADAVEROUS_GARB = 121,
    VANILLA_ITEM_SET_NECROPILE_RAIMENT = 122,
    VANILLA_ITEM_SET_BLOODMAIL_REGALIA = 123,
    VANILLA_ITEM_SET_DEATHBONE_GUARDIAN = 124,
    VANILLA_ITEM_SET_VOLCANIC_ARMOR = 141,
    VANILLA_ITEM_SET_STORMSHROUD_ARMOR = 142,
    VANILLA_ITEM_SET_DEVILSAUR_ARMOR = 143,
    VANILLA_ITEM_SET_IRONFEATHER_ARMOR = 144,
    VANILLA_ITEM_SET_DEFIAS_LEATHER = 161,
    VANILLA_ITEM_SET_EMBRACE_OF_THE_VIPER = 162,
    VANILLA_ITEM_SET_CHAIN_OF_THE_SCARLET_CRUSADE = 163,
    VANILLA_ITEM_SET_MAGISTERS_REGALIA = 181,
    VANILLA_ITEM_SET_VESTMENTS_OF_THE_DEVOUT = 182,
    VANILLA_ITEM_SET_DREADMIST_RAIMENT = 183,
    VANILLA_ITEM_SET_SHADOWCRAFT_ARMOR = 184,
    VANILLA_ITEM_SET_WILDHEART_RAIMENT = 185,
    VANILLA_ITEM_SET_BEASTSTALKER_ARMOR = 186,
    VANILLA_ITEM_SET_THE_ELEMENTS = 187,
    VANILLA_ITEM_SET_LIGHTFORGE_ARMOR = 188,
    VANILLA_ITEM_SET_BATTLEGEAR_OF_VALOR = 189,
    VANILLA_ITEM_SET_ARCANIST_REGALIA = 201,
    VANILLA_ITEM_SET_VESTMENTS_OF_PROPHECY = 202,
    VANILLA_ITEM_SET_FELHEART_RAIMENT = 203,
    VANILLA_ITEM_SET_NIGHTSLAYER_ARMOR = 204,
    VANILLA_ITEM_SET_CENARION_RAIMENT = 205,
    VANILLA_ITEM_SET_GIANTSTALKER_ARMOR = 206,
    VANILLA_ITEM_SET_THE_EARTHFURY = 207,
    VANILLA_ITEM_SET_LAWBRINGER_ARMOR = 208,
    VANILLA_ITEM_SET_BATTLEGEAR_OF_MIGHT = 209,
    VANILLA_ITEM_SET_NETHERWIND_REGALIA = 210,
    VANILLA_ITEM_SET_VESTMENTS_OF_TRANSCENDENCE = 211,
    VANILLA_ITEM_SET_NEMESIS_RAIMENT = 212,
    VANILLA_ITEM_SET_BLOODFANG_ARMOR = 213,
    VANILLA_ITEM_SET_STORMRAGE_RAIMENT = 214,
    VANILLA_ITEM_SET_DRAGONSTALKER_ARMOR = 215,
    VANILLA_ITEM_SET_THE_TEN_STORMS = 216,
    VANILLA_ITEM_SET_JUDGEMENT_ARMOR = 217,
    VANILLA_ITEM_SET_BATTLEGEAR_OF_WRATH = 218,
    VANILLA_ITEM_SET_GARB_OF_THERO_SHAN = 221,
    VANILLA_ITEM_SET_SHARD_OF_THE_GODS = 241,
    VANILLA_ITEM_SET_SPIRIT_OF_ESKHANDAR = 261,
    VANILLA_ITEM_SET_CHAMPIONS_BATTLEGEAR = 281,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_BATTLEGEAR = 282,
    VANILLA_ITEM_SET_CHAMPIONS_EARTHSHAKER = 301,
    VANILLA_ITEM_SET_IMPERIAL_PLATE = 321,
    VANILLA_ITEM_SET_CHAMPIONS_REGALIA = 341,
    VANILLA_ITEM_SET_CHAMPIONS_RAIMENT = 342,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_REGALIA = 343,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_RAIMENT = 344,
    VANILLA_ITEM_SET_CHAMPIONS_THREADS = 345,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_THREADS = 346,
    VANILLA_ITEM_SET_CHAMPIONS_VESTMENTS = 347,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_VESTMENTS = 348,
    VANILLA_ITEM_SET_CHAMPIONS_PURSUIT = 361,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_PURSUIT = 362,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_SANCTUARY = 381,
    VANILLA_ITEM_SET_CHAMPIONS_SANCTUARY = 382,
    VANILLA_ITEM_SET_WARLORDS_BATTLEGEAR = 383,
    VANILLA_ITEM_SET_FIELD_MARSHALS_BATTLEGEAR = 384,
    VANILLA_ITEM_SET_WARLORDS_EARTHSHAKER = 386,
    VANILLA_ITEM_SET_WARLORDS_REGALIA = 387,
    VANILLA_ITEM_SET_FIELD_MARSHALS_REGALIA = 388,
    VANILLA_ITEM_SET_FIELD_MARSHALS_RAIMENT = 389,
    VANILLA_ITEM_SET_WARLORDS_RAIMENT = 390,
    VANILLA_ITEM_SET_WARLORDS_THREADS = 391,
    VANILLA_ITEM_SET_FIELD_MARSHALS_THREADS = 392,
    VANILLA_ITEM_SET_WARLORDS_VESTMENTS = 393,
    VANILLA_ITEM_SET_FIELD_MARSHALS_VESTMENTS = 394,
    VANILLA_ITEM_SET_FIELD_MARSHALS_PURSUIT = 395,
    VANILLA_ITEM_SET_WARLORDS_PURSUIT = 396,
    VANILLA_ITEM_SET_FIELD_MARSHALS_SANCTUARY = 397,
    VANILLA_ITEM_SET_WARLORDS_SANCTUARY = 398,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_AEGIS = 401,
    VANILLA_ITEM_SET_FIELD_MARSHALS_AEGIS = 402,
    VANILLA_ITEM_SET_BLOODVINE_GARB = 421,
    VANILLA_ITEM_SET_PRIMAL_BATSKIN = 441,
    VANILLA_ITEM_SET_BLOOD_TIGER_HARNESS = 442,
    VANILLA_ITEM_SET_BLOODSOUL_EMBRACE = 443,
    VANILLA_ITEM_SET_THE_DARKSOUL = 444,
    VANILLA_ITEM_SET_THE_TWIN_BLADES_OF_HAKKARI = 461,
    VANILLA_ITEM_SET_ZANZILS_CONCENTRATION = 462,
    VANILLA_ITEM_SET_PRIMAL_BLESSING = 463,
    VANILLA_ITEM_SET_OVERLORDS_RESOLUTION = 464,
    VANILLA_ITEM_SET_PRAYER_OF_THE_PRIMAL = 465,
    VANILLA_ITEM_SET_MAJOR_MOJO_INFUSION = 466,
    VANILLA_ITEM_SET_THE_HIGHLANDERS_RESOLUTION = 467,
    VANILLA_ITEM_SET_THE_HIGHLANDERS_RESOLVE = 468,
    VANILLA_ITEM_SET_THE_HIGHLANDERS_DETERMINATION = 469,
    VANILLA_ITEM_SET_THE_HIGHLANDERS_FORTITUDE = 470,
    VANILLA_ITEM_SET_THE_HIGHLANDERS_PURPOSE = 471,
    VANILLA_ITEM_SET_THE_HIGHLANDERS_WILL = 472,
    VANILLA_ITEM_SET_THE_HIGHLANDERS_INTENT = 473,
    VANILLA_ITEM_SET_VINDICATORS_BATTLEGEAR = 474,
    VANILLA_ITEM_SET_FREETHINKERS_ARMOR = 475,
    VANILLA_ITEM_SET_AUGURS_REGALIA = 476,
    VANILLA_ITEM_SET_PREDATORS_ARMOR = 477,
    VANILLA_ITEM_SET_MADCAPS_OUTFIT = 478,
    VANILLA_ITEM_SET_HARUSPEXS_GARB = 479,
    VANILLA_ITEM_SET_CONFESSORS_RAIMENT = 480,
    VANILLA_ITEM_SET_DEMONIACS_THREADS = 481,
    VANILLA_ITEM_SET_ILLUSIONISTS_ATTIRE = 482,
    VANILLA_ITEM_SET_THE_DEFILERS_DETERMINATION = 483,
    VANILLA_ITEM_SET_THE_DEFILERS_FORTITUDE = 484,
    VANILLA_ITEM_SET_THE_DEFILERS_INTENT = 485,
    VANILLA_ITEM_SET_THE_DEFILERS_PURPOSE = 486,
    VANILLA_ITEM_SET_THE_DEFILERS_RESOLUTION = 487,
    VANILLA_ITEM_SET_THE_DEFILERS_WILL = 488,
    VANILLA_ITEM_SET_BLACK_DRAGON_MAIL = 489,
    VANILLA_ITEM_SET_GREEN_DRAGON_MAIL = 490,
    VANILLA_ITEM_SET_BLUE_DRAGON_MAIL = 491,
    VANILLA_ITEM_SET_TWILIGHT_TRAPPINGS = 492,
    VANILLA_ITEM_SET_GENESIS_RAIMENT = 493,
    VANILLA_ITEM_SET_SYMBOLS_OF_UNENDING_LIFE = 494,
    VANILLA_ITEM_SET_BATTLEGEAR_OF_UNYIELDING_STRENGTH = 495,
    VANILLA_ITEM_SET_CONQUERORS_BATTLEGEAR = 496,
    VANILLA_ITEM_SET_DEATHDEALERS_EMBRACE = 497,
    VANILLA_ITEM_SET_EMBLEMS_OF_VEILED_SHADOWS = 498,
    VANILLA_ITEM_SET_DOOMCALLERS_ATTIRE = 499,
    VANILLA_ITEM_SET_IMPLEMENTS_OF_UNSPOKEN_NAMES = 500,
    VANILLA_ITEM_SET_STORMCALLERS_GARB = 501,
    VANILLA_ITEM_SET_GIFT_OF_THE_GATHERING_STORM = 502,
    VANILLA_ITEM_SET_ENIGMA_VESTMENTS = 503,
    VANILLA_ITEM_SET_TRAPPINGS_OF_VAULTED_SECRETS = 504,
    VANILLA_ITEM_SET_AVENGERS_BATTLEGEAR = 505,
    VANILLA_ITEM_SET_BATTLEGEAR_OF_ETERNAL_JUSTICE = 506,
    VANILLA_ITEM_SET_GARMENTS_OF_THE_ORACLE = 507,
    VANILLA_ITEM_SET_FINERY_OF_INFINITE_WISDOM = 508,
    VANILLA_ITEM_SET_STRIKERS_GARB = 509,
    VANILLA_ITEM_SET_TRAPPINGS_OF_THE_UNSEEN_PATH = 510,
    VANILLA_ITEM_SET_BATTLEGEAR_OF_HEROISM = 511,
    VANILLA_ITEM_SET_DARKMANTLE_ARMOR = 512,
    VANILLA_ITEM_SET_FERALHEART_RAIMENT = 513,
    VANILLA_ITEM_SET_VESTMENTS_OF_THE_VIRTUOUS = 514,
    VANILLA_ITEM_SET_BEASTMASTER_ARMOR = 515,
    VANILLA_ITEM_SET_SOULFORGE_ARMOR = 516,
    VANILLA_ITEM_SET_SORCERERS_REGALIA = 517,
    VANILLA_ITEM_SET_DEATHMIST_RAIMENT = 518,
    VANILLA_ITEM_SET_THE_FIVE_THUNDERS = 519,
    VANILLA_ITEM_SET_IRONWEAVE_BATTLESUIT = 520,
    VANILLA_ITEM_SET_DREAMWALKER_RAIMENT = 521,
    VANILLA_ITEM_SET_CHAMPIONS_GUARD = 522,
    VANILLA_ITEM_SET_DREADNAUGHTS_BATTLEGEAR = 523,
    VANILLA_ITEM_SET_BONESCYTHE_ARMOR = 524,
    VANILLA_ITEM_SET_VESTMENTS_OF_FAITH = 525,
    VANILLA_ITEM_SET_FROSTFIRE_REGALIA = 526,
    VANILLA_ITEM_SET_THE_EARTHSHATTERER = 527,
    VANILLA_ITEM_SET_REDEMPTION_ARMOR = 528,
    VANILLA_ITEM_SET_PLAGUEHEART_RAIMENT = 529,
    VANILLA_ITEM_SET_CRYPTSTALKER_ARMOR = 530,
    VANILLA_ITEM_SET_BATTLEGEAR_OF_UNDEAD_SLAYING = 533,
    VANILLA_ITEM_SET_UNDEAD_SLAYERS_ARMOR = 534,
    VANILLA_ITEM_SET_GARB_OF_THE_UNDEAD_SLAYER = 535,
    VANILLA_ITEM_SET_REGALIA_OF_UNDEAD_CLEANSING = 536,
    VANILLA_ITEM_SET_CHAMPIONS_BATTLEARMOR = 537,
    VANILLA_ITEM_SET_CHAMPIONS_STORMCALLER = 538,
    VANILLA_ITEM_SET_CHAMPIONS_REFUGE = 539,
    VANILLA_ITEM_SET_CHAMPIONS_INVESTITURE = 540,
    VANILLA_ITEM_SET_CHAMPIONS_DREADGEAR = 541,
    VANILLA_ITEM_SET_CHAMPIONS_ARCANUM = 542,
    VANILLA_ITEM_SET_CHAMPIONS_PURSUANCE = 543,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_REDOUBT = 544,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_BATTLEARMOR = 545,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_ARCANUM = 546,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_DREADGEAR = 547,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_GUARD = 548,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_INVESTITURE = 549,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_PURSUANCE = 550,
    VANILLA_ITEM_SET_LIEUTENANT_COMMANDERS_REFUGE = 551
} vanilla_ItemSet;

typedef enum {
    VANILLA_ITEM_SLOT_HEAD = 0,
    VANILLA_ITEM_SLOT_NECK = 1,
    VANILLA_ITEM_SLOT_SHOULDERS = 2,
    VANILLA_ITEM_SLOT_SHIRT = 3,
    VANILLA_ITEM_SLOT_CHEST = 4,
    VANILLA_ITEM_SLOT_WAIST = 5,
    VANILLA_ITEM_SLOT_LEGS = 6,
    VANILLA_ITEM_SLOT_BOOTS = 7,
    VANILLA_ITEM_SLOT_WRIST = 8,
    VANILLA_ITEM_SLOT_HANDS = 9,
    VANILLA_ITEM_SLOT_RING1 = 10,
    VANILLA_ITEM_SLOT_RING2 = 11,
    VANILLA_ITEM_SLOT_TRINKET1 = 12,
    VANILLA_ITEM_SLOT_TRINKET2 = 13,
    VANILLA_ITEM_SLOT_BACK = 14,
    VANILLA_ITEM_SLOT_MAIN_HAND = 15,
    VANILLA_ITEM_SLOT_OFF_HAND = 16,
    VANILLA_ITEM_SLOT_RANGED_OR_RELIC = 17,
    VANILLA_ITEM_SLOT_TABARD = 18,
    VANILLA_ITEM_SLOT_BAG1 = 19,
    VANILLA_ITEM_SLOT_BAG2 = 20,
    VANILLA_ITEM_SLOT_BAG3 = 21,
    VANILLA_ITEM_SLOT_BAG4 = 22,
    VANILLA_ITEM_SLOT_INVENTORY_0 = 23,
    VANILLA_ITEM_SLOT_INVENTORY_1 = 24,
    VANILLA_ITEM_SLOT_INVENTORY_2 = 25,
    VANILLA_ITEM_SLOT_INVENTORY_3 = 26,
    VANILLA_ITEM_SLOT_INVENTORY_4 = 27,
    VANILLA_ITEM_SLOT_INVENTORY_5 = 28,
    VANILLA_ITEM_SLOT_INVENTORY_6 = 29,
    VANILLA_ITEM_SLOT_INVENTORY_7 = 30,
    VANILLA_ITEM_SLOT_INVENTORY_8 = 31,
    VANILLA_ITEM_SLOT_INVENTORY_9 = 32,
    VANILLA_ITEM_SLOT_INVENTORY_10 = 33,
    VANILLA_ITEM_SLOT_INVENTORY_11 = 34,
    VANILLA_ITEM_SLOT_INVENTORY_12 = 35,
    VANILLA_ITEM_SLOT_INVENTORY_13 = 36,
    VANILLA_ITEM_SLOT_INVENTORY_14 = 37,
    VANILLA_ITEM_SLOT_INVENTORY_15 = 38,
    VANILLA_ITEM_SLOT_BANK_1 = 39,
    VANILLA_ITEM_SLOT_BANK_2 = 40,
    VANILLA_ITEM_SLOT_BANK_3 = 41,
    VANILLA_ITEM_SLOT_BANK_4 = 42,
    VANILLA_ITEM_SLOT_BANK_5 = 43,
    VANILLA_ITEM_SLOT_BANK_6 = 44,
    VANILLA_ITEM_SLOT_BANK_7 = 45,
    VANILLA_ITEM_SLOT_BANK_8 = 46,
    VANILLA_ITEM_SLOT_BANK_9 = 47,
    VANILLA_ITEM_SLOT_BANK_10 = 48,
    VANILLA_ITEM_SLOT_BANK_11 = 49,
    VANILLA_ITEM_SLOT_BANK_12 = 50,
    VANILLA_ITEM_SLOT_BANK_13 = 51,
    VANILLA_ITEM_SLOT_BANK_14 = 52,
    VANILLA_ITEM_SLOT_BANK_15 = 53,
    VANILLA_ITEM_SLOT_BANK_16 = 54,
    VANILLA_ITEM_SLOT_BANK_17 = 55,
    VANILLA_ITEM_SLOT_BANK_18 = 56,
    VANILLA_ITEM_SLOT_BANK_19 = 57,
    VANILLA_ITEM_SLOT_BANK_20 = 58,
    VANILLA_ITEM_SLOT_BANK_21 = 59,
    VANILLA_ITEM_SLOT_BANK_22 = 60,
    VANILLA_ITEM_SLOT_BANK_23 = 61,
    VANILLA_ITEM_SLOT_BANK_24 = 62,
    VANILLA_ITEM_SLOT_BANK_BAG_SLOT_1 = 63,
    VANILLA_ITEM_SLOT_BANK_BAG_SLOT_2 = 64,
    VANILLA_ITEM_SLOT_BANK_BAG_SLOT_3 = 65,
    VANILLA_ITEM_SLOT_BANK_BAG_SLOT_4 = 66,
    VANILLA_ITEM_SLOT_BANK_BAG_SLOT_5 = 67,
    VANILLA_ITEM_SLOT_BANK_BAG_SLOT_6 = 68,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_1 = 69,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_2 = 70,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_3 = 71,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_4 = 72,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_5 = 73,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_6 = 74,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_7 = 75,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_8 = 76,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_9 = 77,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_10 = 78,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_11 = 79,
    VANILLA_ITEM_SLOT_VENDOR_BUYBACK_12 = 80,
    VANILLA_ITEM_SLOT_KEYRING_1 = 81,
    VANILLA_ITEM_SLOT_KEYRING_2 = 82,
    VANILLA_ITEM_SLOT_KEYRING_3 = 83,
    VANILLA_ITEM_SLOT_KEYRING_4 = 84,
    VANILLA_ITEM_SLOT_KEYRING_5 = 85,
    VANILLA_ITEM_SLOT_KEYRING_6 = 86,
    VANILLA_ITEM_SLOT_KEYRING_7 = 87,
    VANILLA_ITEM_SLOT_KEYRING_8 = 88,
    VANILLA_ITEM_SLOT_KEYRING_9 = 89,
    VANILLA_ITEM_SLOT_KEYRING_10 = 90,
    VANILLA_ITEM_SLOT_KEYRING_11 = 91,
    VANILLA_ITEM_SLOT_KEYRING_12 = 92,
    VANILLA_ITEM_SLOT_KEYRING_13 = 93,
    VANILLA_ITEM_SLOT_KEYRING_14 = 94,
    VANILLA_ITEM_SLOT_KEYRING_15 = 95,
    VANILLA_ITEM_SLOT_KEYRING_16 = 96,
    VANILLA_ITEM_SLOT_KEYRING_17 = 97,
    VANILLA_ITEM_SLOT_KEYRING_18 = 98,
    VANILLA_ITEM_SLOT_KEYRING_19 = 99,
    VANILLA_ITEM_SLOT_KEYRING_20 = 100,
    VANILLA_ITEM_SLOT_KEYRING_21 = 101,
    VANILLA_ITEM_SLOT_KEYRING_22 = 102,
    VANILLA_ITEM_SLOT_KEYRING_23 = 103,
    VANILLA_ITEM_SLOT_KEYRING_24 = 104,
    VANILLA_ITEM_SLOT_KEYRING_25 = 105,
    VANILLA_ITEM_SLOT_KEYRING_26 = 106,
    VANILLA_ITEM_SLOT_KEYRING_27 = 107,
    VANILLA_ITEM_SLOT_KEYRING_28 = 108,
    VANILLA_ITEM_SLOT_KEYRING_29 = 109,
    VANILLA_ITEM_SLOT_KEYRING_30 = 110,
    VANILLA_ITEM_SLOT_KEYRING_31 = 111,
    VANILLA_ITEM_SLOT_KEYRING_32 = 112
} vanilla_ItemSlot;

typedef enum {
    VANILLA_ITEM_STAT_TYPE_MANA = 0,
    VANILLA_ITEM_STAT_TYPE_HEALTH = 1,
    VANILLA_ITEM_STAT_TYPE_AGILITY = 3,
    VANILLA_ITEM_STAT_TYPE_STRENGTH = 4,
    VANILLA_ITEM_STAT_TYPE_INTELLECT = 5,
    VANILLA_ITEM_STAT_TYPE_SPIRIT = 6,
    VANILLA_ITEM_STAT_TYPE_STAMINA = 7
} vanilla_ItemStatType;

typedef enum {
    VANILLA_ITEM_WEAPON_CLASS_ITEM = 0,
    VANILLA_ITEM_WEAPON_CLASS_WEAPON = 1
} vanilla_ItemWeaponClass;

typedef enum {
    VANILLA_KEY_VERSION_ZERO = 0,
    VANILLA_KEY_VERSION_ONE = 1,
    VANILLA_KEY_VERSION_TWO = 2,
    VANILLA_KEY_VERSION_THREE = 3,
    VANILLA_KEY_VERSION_FOUR = 4,
    VANILLA_KEY_VERSION_FIVE = 5,
    VANILLA_KEY_VERSION_SIX = 6,
    VANILLA_KEY_VERSION_SEVEN = 7,
    VANILLA_KEY_VERSION_EIGHT = 8,
    VANILLA_KEY_VERSION_NINE = 9
} vanilla_KeyVersion;

typedef enum {
    VANILLA_LANGUAGE_UNIVERSAL = 0,
    VANILLA_LANGUAGE_ORCISH = 1,
    VANILLA_LANGUAGE_DARNASSIAN = 2,
    VANILLA_LANGUAGE_TAURAHE = 3,
    VANILLA_LANGUAGE_DWARVISH = 6,
    VANILLA_LANGUAGE_COMMON = 7,
    VANILLA_LANGUAGE_DEMONIC = 8,
    VANILLA_LANGUAGE_TITAN = 9,
    VANILLA_LANGUAGE_THALASSIAN = 10,
    VANILLA_LANGUAGE_DRACONIC = 11,
    VANILLA_LANGUAGE_KALIMAG = 12,
    VANILLA_LANGUAGE_GNOMISH = 13,
    VANILLA_LANGUAGE_TROLL = 14,
    VANILLA_LANGUAGE_GUTTERSPEAK = 33,
    VANILLA_LANGUAGE_ADDON = -1
} vanilla_Language;

typedef enum {
    VANILLA_LFG_FACTION_NEUTRAL = -1,
    VANILLA_LFG_FACTION_HORDE = 0,
    VANILLA_LFG_FACTION_ALLIANCE = 1
} vanilla_LfgFaction;

typedef enum {
    VANILLA_LOCK_TYPE_NONE = 0,
    VANILLA_LOCK_TYPE_ITEM_REQUIRED = 1,
    VANILLA_LOCK_TYPE_LOCKTYPE_REFERENCE = 2
} vanilla_LockType;

typedef enum {
    VANILLA_LOG_FORMAT_DEFAULT = 0,
    VANILLA_LOG_FORMAT_DEBUG = 1
} vanilla_LogFormat;

typedef enum {
    VANILLA_LOGOUT_RESULT_SUCCESS = 0,
    VANILLA_LOGOUT_RESULT_FAILURE_IN_COMBAT = 1,
    VANILLA_LOGOUT_RESULT_FAILURE_FROZEN_BY_GM = 2,
    VANILLA_LOGOUT_RESULT_FAILURE_JUMPING_OR_FALLING = 3
} vanilla_LogoutResult;

typedef enum {
    VANILLA_LOGOUT_SPEED_DELAYED = 0,
    VANILLA_LOGOUT_SPEED_INSTANT = 1
} vanilla_LogoutSpeed;

typedef enum {
    VANILLA_LOOT_METHOD_ERROR = 0,
    VANILLA_LOOT_METHOD_CORPSE = 1,
    VANILLA_LOOT_METHOD_PICKPOCKETING = 2,
    VANILLA_LOOT_METHOD_FISHING = 3,
    VANILLA_LOOT_METHOD_DISENCHANTING = 4,
    VANILLA_LOOT_METHOD_SKINNING = 6,
    VANILLA_LOOT_METHOD_FISHINGHOLE = 20,
    VANILLA_LOOT_METHOD_FISHING_FAIL = 21,
    VANILLA_LOOT_METHOD_INSIGNIA = 22
} vanilla_LootMethod;

typedef enum {
    VANILLA_LOOT_METHOD_ERROR_DIDNT_KILL = 0,
    VANILLA_LOOT_METHOD_ERROR_TOO_FAR = 4,
    VANILLA_LOOT_METHOD_ERROR_BAD_FACING = 5,
    VANILLA_LOOT_METHOD_ERROR_LOCKED = 6,
    VANILLA_LOOT_METHOD_ERROR_NOTSTANDING = 8,
    VANILLA_LOOT_METHOD_ERROR_STUNNED = 9,
    VANILLA_LOOT_METHOD_ERROR_PLAYER_NOT_FOUND = 10,
    VANILLA_LOOT_METHOD_ERROR_PLAY_TIME_EXCEEDED = 11,
    VANILLA_LOOT_METHOD_ERROR_MASTER_INV_FULL = 12,
    VANILLA_LOOT_METHOD_ERROR_MASTER_UNIQUE_ITEM = 13,
    VANILLA_LOOT_METHOD_ERROR_MASTER_OTHER = 14,
    VANILLA_LOOT_METHOD_ERROR_ALREADY_PICKPOCKETED = 15,
    VANILLA_LOOT_METHOD_ERROR_NOT_WHILE_SHAPESHIFTED = 16
} vanilla_LootMethodError;

typedef enum {
    VANILLA_LOOT_SLOT_TYPE_TYPE_ALLOW_LOOT = 0,
    VANILLA_LOOT_SLOT_TYPE_TYPE_ROLL_ONGOING = 1,
    VANILLA_LOOT_SLOT_TYPE_TYPE_MASTER = 2,
    VANILLA_LOOT_SLOT_TYPE_TYPE_LOCKED = 3,
    VANILLA_LOOT_SLOT_TYPE_TYPE_OWNER = 4
} vanilla_LootSlotType;

typedef enum {
    VANILLA_MAIL_ACTION_SEND = 0,
    VANILLA_MAIL_ACTION_MONEY_TAKEN = 1,
    VANILLA_MAIL_ACTION_ITEM_TAKEN = 2,
    VANILLA_MAIL_ACTION_RETURNED_TO_SENDER = 3,
    VANILLA_MAIL_ACTION_DELETED = 4,
    VANILLA_MAIL_ACTION_MADE_PERMANENT = 5
} vanilla_MailAction;

typedef enum {
    VANILLA_MAIL_MESSAGE_TYPE_NORMAL = 0,
    VANILLA_MAIL_MESSAGE_TYPE_AUCTION = 2,
    VANILLA_MAIL_MESSAGE_TYPE_CREATURE = 3,
    VANILLA_MAIL_MESSAGE_TYPE_GAMEOBJECT = 4,
    VANILLA_MAIL_MESSAGE_TYPE_ITEM = 5
} vanilla_MailMessageType;

typedef enum {
    VANILLA_MAIL_RESULT_OK = 0,
    VANILLA_MAIL_RESULT_ERR_EQUIP_ERROR = 1,
    VANILLA_MAIL_RESULT_ERR_CANNOT_SEND_TO_SELF = 2,
    VANILLA_MAIL_RESULT_ERR_NOT_ENOUGH_MONEY = 3,
    VANILLA_MAIL_RESULT_ERR_RECIPIENT_NOT_FOUND = 4,
    VANILLA_MAIL_RESULT_ERR_NOT_YOUR_TEAM = 5,
    VANILLA_MAIL_RESULT_ERR_INTERNAL_ERROR = 6,
    VANILLA_MAIL_RESULT_ERR_DISABLED_FOR_TRIAL_ACC = 14,
    VANILLA_MAIL_RESULT_ERR_RECIPIENT_CAP_REACHED = 15,
    VANILLA_MAIL_RESULT_ERR_CANT_SEND_WRAPPED_COD = 16,
    VANILLA_MAIL_RESULT_ERR_MAIL_AND_CHAT_SUSPENDED = 17,
    VANILLA_MAIL_RESULT_ERR_TOO_MANY_ATTACHMENTS = 18,
    VANILLA_MAIL_RESULT_ERR_MAIL_ATTACHMENT_INVALID = 19
} vanilla_MailResult;

typedef enum {
    VANILLA_MAIL_RESULT_TWO_OK = 0,
    VANILLA_MAIL_RESULT_TWO_ERR_EQUIP_ERROR = 1,
    VANILLA_MAIL_RESULT_TWO_ERR_CANNOT_SEND_TO_SELF = 2,
    VANILLA_MAIL_RESULT_TWO_ERR_NOT_ENOUGH_MONEY = 3,
    VANILLA_MAIL_RESULT_TWO_ERR_RECIPIENT_NOT_FOUND = 4,
    VANILLA_MAIL_RESULT_TWO_ERR_NOT_YOUR_TEAM = 5,
    VANILLA_MAIL_RESULT_TWO_ERR_INTERNAL_ERROR = 6,
    VANILLA_MAIL_RESULT_TWO_ERR_DISABLED_FOR_TRIAL_ACC = 14,
    VANILLA_MAIL_RESULT_TWO_ERR_RECIPIENT_CAP_REACHED = 15,
    VANILLA_MAIL_RESULT_TWO_ERR_CANT_SEND_WRAPPED_COD = 16,
    VANILLA_MAIL_RESULT_TWO_ERR_MAIL_AND_CHAT_SUSPENDED = 17,
    VANILLA_MAIL_RESULT_TWO_ERR_TOO_MANY_ATTACHMENTS = 18,
    VANILLA_MAIL_RESULT_TWO_ERR_MAIL_ATTACHMENT_INVALID = 19
} vanilla_MailResultTwo;

typedef enum {
    VANILLA_MAIL_TYPE_NORMAL = 0,
    VANILLA_MAIL_TYPE_AUCTION = 2,
    VANILLA_MAIL_TYPE_CREATURE = 3,
    VANILLA_MAIL_TYPE_GAMEOBJECT = 4,
    VANILLA_MAIL_TYPE_ITEM = 5
} vanilla_MailType;

typedef enum {
    VANILLA_MAP_EASTERN_KINGDOMS = 0,
    VANILLA_MAP_KALIMDOR = 1,
    VANILLA_MAP_TESTING = 13,
    VANILLA_MAP_SCOTT_TEST = 25,
    VANILLA_MAP_CASH_TEST = 29,
    VANILLA_MAP_ALTERAC_VALLEY = 30,
    VANILLA_MAP_SHADOWFANG_KEEP = 33,
    VANILLA_MAP_STORMWIND_STOCKADE = 34,
    VANILLA_MAP_STORMWIND_PRISON = 35,
    VANILLA_MAP_DEADMINES = 36,
    VANILLA_MAP_AZSHARA_CRATER = 37,
    VANILLA_MAP_COLLINS_TEST = 42,
    VANILLA_MAP_WAILING_CAVERNS = 43,
    VANILLA_MAP_MONASTERY_UNUSED = 44,
    VANILLA_MAP_RAZORFEN_KRAUL = 47,
    VANILLA_MAP_BLACKFATHOM_DEEPS = 48,
    VANILLA_MAP_ULDAMAN = 70,
    VANILLA_MAP_GNOMEREGAN = 90,
    VANILLA_MAP_SUNKEN_TEMPLE = 109,
    VANILLA_MAP_RAZORFEN_DOWNS = 129,
    VANILLA_MAP_EMERALD_DREAM = 169,
    VANILLA_MAP_SCARLET_MONASTERY = 189,
    VANILLA_MAP_ZUL_FARRAK = 209,
    VANILLA_MAP_BLACKROCK_SPIRE = 229,
    VANILLA_MAP_BLACKROCK_DEPTHS = 230,
    VANILLA_MAP_ONYXIAS_LAIR = 249,
    VANILLA_MAP_OPENING_OF_THE_DARK_PORTAL = 269,
    VANILLA_MAP_SCHOLOMANCE = 289,
    VANILLA_MAP_ZUL_GURUB = 309,
    VANILLA_MAP_STRATHOLME = 329,
    VANILLA_MAP_MARAUDON = 349,
    VANILLA_MAP_DEEPRUN_TRAM = 369,
    VANILLA_MAP_RAGEFIRE_CHASM = 389,
    VANILLA_MAP_MOLTEN_CORE = 409,
    VANILLA_MAP_DIRE_MAUL = 429,
    VANILLA_MAP_ALLIANCE_PVP_BARRACKS = 449,
    VANILLA_MAP_HORDE_PVP_BARRACKS = 450,
    VANILLA_MAP_DEVELOPMENT_LAND = 451,
    VANILLA_MAP_BLACKWING_LAIR = 469,
    VANILLA_MAP_WARSONG_GULCH = 489,
    VANILLA_MAP_RUINS_OF_AHN_QIRAJ = 509,
    VANILLA_MAP_ARATHI_BASIN = 529,
    VANILLA_MAP_AHN_QIRAJ_TEMPLE = 531,
    VANILLA_MAP_NAXXRAMAS = 533
} vanilla_Map;

typedef enum {
    VANILLA_MEETING_STONE_FAILURE_MEETINGSTONE_FAIL_PARTYLEADER = 1,
    VANILLA_MEETING_STONE_FAILURE_MEETINGSTONE_FAIL_FULL_GROUP = 2,
    VANILLA_MEETING_STONE_FAILURE_MEETINGSTONE_FAIL_RAID_GROUP = 3
} vanilla_MeetingStoneFailure;

typedef enum {
    VANILLA_MEETING_STONE_STATUS_LEAVE_QUEUE = 0,
    VANILLA_MEETING_STONE_STATUS_JOINED_QUEUE = 1,
    VANILLA_MEETING_STONE_STATUS_PARTY_MEMBER_LEFT_LFG = 2,
    VANILLA_MEETING_STONE_STATUS_PARTY_MEMBER_REMOVED_PARTY_REMOVED = 3,
    VANILLA_MEETING_STONE_STATUS_LOOKING_FOR_NEW_PARTY_IN_QUEUE = 4,
    VANILLA_MEETING_STONE_STATUS_NONE = 5
} vanilla_MeetingStoneStatus;

typedef enum {
    VANILLA_MONSTER_MOVE_TYPE_NORMAL = 0,
    VANILLA_MONSTER_MOVE_TYPE_STOP = 1,
    VANILLA_MONSTER_MOVE_TYPE_FACING_SPOT = 2,
    VANILLA_MONSTER_MOVE_TYPE_FACING_TARGET = 3,
    VANILLA_MONSTER_MOVE_TYPE_FACING_ANGLE = 4
} vanilla_MonsterMoveType;

typedef enum {
    VANILLA_MOUNT_RESULT_INVALID_MOUNTEE = 0,
    VANILLA_MOUNT_RESULT_TOO_FAR_AWAY = 1,
    VANILLA_MOUNT_RESULT_ALREADY_MOUNTED = 2,
    VANILLA_MOUNT_RESULT_NOT_MOUNTABLE = 3,
    VANILLA_MOUNT_RESULT_NOT_YOUR_PET = 4,
    VANILLA_MOUNT_RESULT_OTHER = 5,
    VANILLA_MOUNT_RESULT_LOOTING = 6,
    VANILLA_MOUNT_RESULT_RACE_CANT_MOUNT = 7,
    VANILLA_MOUNT_RESULT_SHAPESHIFTED = 8,
    VANILLA_MOUNT_RESULT_FORCED_DISMOUNT = 9,
    VANILLA_MOUNT_RESULT_OK = 10
} vanilla_MountResult;

typedef enum {
    VANILLA_NEW_ITEM_CHAT_ALERT_DO_NOT_SHOW = 0,
    VANILLA_NEW_ITEM_CHAT_ALERT_SHOW = 1
} vanilla_NewItemChatAlert;

typedef enum {
    VANILLA_NEW_ITEM_CREATION_TYPE_RECEIVED = 0,
    VANILLA_NEW_ITEM_CREATION_TYPE_CREATED = 1
} vanilla_NewItemCreationType;

typedef enum {
    VANILLA_NEW_ITEM_SOURCE_LOOTED = 0,
    VANILLA_NEW_ITEM_SOURCE_FROM_NPC = 1
} vanilla_NewItemSource;

typedef enum {
    VANILLA_OBJECT_TYPE_OBJECT = 0,
    VANILLA_OBJECT_TYPE_ITEM = 1,
    VANILLA_OBJECT_TYPE_CONTAINER = 2,
    VANILLA_OBJECT_TYPE_UNIT = 3,
    VANILLA_OBJECT_TYPE_PLAYER = 4,
    VANILLA_OBJECT_TYPE_GAME_OBJECT = 5,
    VANILLA_OBJECT_TYPE_DYNAMIC_OBJECT = 6,
    VANILLA_OBJECT_TYPE_CORPSE = 7
} vanilla_ObjectType;

typedef enum {
    VANILLA_OCEAN_TYPE_FIRE = 0,
    VANILLA_OCEAN_TYPE_SLIME = 2,
    VANILLA_OCEAN_TYPE_WATER = 3
} vanilla_OceanType;

typedef enum {
    VANILLA_PAGE_TEXT_MATERIAL_NONE = 0,
    VANILLA_PAGE_TEXT_MATERIAL_PARCHMENT = 1,
    VANILLA_PAGE_TEXT_MATERIAL_STONE = 2,
    VANILLA_PAGE_TEXT_MATERIAL_MARBLE = 3,
    VANILLA_PAGE_TEXT_MATERIAL_SILVER = 4,
    VANILLA_PAGE_TEXT_MATERIAL_BRONZE = 5,
    VANILLA_PAGE_TEXT_MATERIAL_VALENTINE = 6
} vanilla_PageTextMaterial;

typedef enum {
    VANILLA_PARTY_OPERATION_INVITE = 0,
    VANILLA_PARTY_OPERATION_LEAVE = 2
} vanilla_PartyOperation;

typedef enum {
    VANILLA_PARTY_RESULT_SUCCESS = 0,
    VANILLA_PARTY_RESULT_BAD_PLAYER_NAME = 1,
    VANILLA_PARTY_RESULT_TARGET_NOT_IN_GROUP = 2,
    VANILLA_PARTY_RESULT_GROUP_FULL = 3,
    VANILLA_PARTY_RESULT_ALREADY_IN_GROUP = 4,
    VANILLA_PARTY_RESULT_NOT_IN_GROUP = 5,
    VANILLA_PARTY_RESULT_NOT_LEADER = 6,
    VANILLA_PARTY_RESULT_PLAYER_WRONG_FACTION = 7,
    VANILLA_PARTY_RESULT_IGNORING_YOU = 8
} vanilla_PartyResult;

typedef enum {
    VANILLA_PET_COMMAND_STATE_STAY = 0,
    VANILLA_PET_COMMAND_STATE_FOLLOW = 1,
    VANILLA_PET_COMMAND_STATE_ATTACK = 2,
    VANILLA_PET_COMMAND_STATE_DISMISS = 3
} vanilla_PetCommandState;

typedef enum {
    VANILLA_PET_ENABLED_ENABLED = 8,
    VANILLA_PET_ENABLED_DISABLED = 0
} vanilla_PetEnabled;

typedef enum {
    VANILLA_PET_FEEDBACK_PET_DEAD = 1,
    VANILLA_PET_FEEDBACK_NOTHING_TO_ATTACK = 2,
    VANILLA_PET_FEEDBACK_CANT_ATTACK_TARGET = 3,
    VANILLA_PET_FEEDBACK_NO_PATH_TO = 4
} vanilla_PetFeedback;

typedef enum {
    VANILLA_PET_REACT_STATE_PASSIVE = 0,
    VANILLA_PET_REACT_STATE_DEFENSIVE = 1,
    VANILLA_PET_REACT_STATE_AGGRESSIVE = 2
} vanilla_PetReactState;

typedef enum {
    VANILLA_PET_TALK_REASON_SPECIAL_SPELL = 0,
    VANILLA_PET_TALK_REASON_ATTACK = 1
} vanilla_PetTalkReason;

typedef enum {
    VANILLA_PET_TAME_FAILURE_REASON_INVALID_CREATURE = 1,
    VANILLA_PET_TAME_FAILURE_REASON_TOO_MANY = 2,
    VANILLA_PET_TAME_FAILURE_REASON_CREATURE_ALREADY_OWNED = 3,
    VANILLA_PET_TAME_FAILURE_REASON_NOT_TAMEABLE = 4,
    VANILLA_PET_TAME_FAILURE_REASON_ANOTHER_SUMMON_ACTIVE = 5,
    VANILLA_PET_TAME_FAILURE_REASON_UNITS_CANT_TAME = 6,
    VANILLA_PET_TAME_FAILURE_REASON_NO_PET_AVAILABLE = 7,
    VANILLA_PET_TAME_FAILURE_REASON_INTERNAL_ERROR = 8,
    VANILLA_PET_TAME_FAILURE_REASON_TOO_HIGH_LEVEL = 9,
    VANILLA_PET_TAME_FAILURE_REASON_DEAD = 10,
    VANILLA_PET_TAME_FAILURE_REASON_NOT_DEAD = 11,
    VANILLA_PET_TAME_FAILURE_REASON_UNKNOWN_ERROR = 12
} vanilla_PetTameFailureReason;

typedef enum {
    VANILLA_PETITION_RESULT_OK = 0,
    VANILLA_PETITION_RESULT_ALREADY_SIGNED = 1,
    VANILLA_PETITION_RESULT_ALREADY_IN_GUILD = 2,
    VANILLA_PETITION_RESULT_CANT_SIGN_OWN = 3,
    VANILLA_PETITION_RESULT_NEED_MORE = 4,
    VANILLA_PETITION_RESULT_NOT_SERVER = 5
} vanilla_PetitionResult;

typedef enum {
    VANILLA_PLAYER_CHAT_TAG_NONE = 0,
    VANILLA_PLAYER_CHAT_TAG_AFK = 1,
    VANILLA_PLAYER_CHAT_TAG_DND = 2,
    VANILLA_PLAYER_CHAT_TAG_GM = 3
} vanilla_PlayerChatTag;

typedef enum {
    VANILLA_POWER_MANA = 0,
    VANILLA_POWER_RAGE = 1,
    VANILLA_POWER_FOCUS = 2,
    VANILLA_POWER_ENERGY = 3,
    VANILLA_POWER_HAPPINESS = 4,
    VANILLA_POWER_HEALTH = 254
} vanilla_Power;

typedef enum {
    VANILLA_PVP_RANK_NO_RANK = 0,
    VANILLA_PVP_RANK_PARIAH = 1,
    VANILLA_PVP_RANK_OUTLAW = 2,
    VANILLA_PVP_RANK_EXILED = 3,
    VANILLA_PVP_RANK_DISHONORED = 4,
    VANILLA_PVP_RANK_RANK1 = 5,
    VANILLA_PVP_RANK_RANK2 = 6,
    VANILLA_PVP_RANK_RANK3 = 7,
    VANILLA_PVP_RANK_RANK4 = 8,
    VANILLA_PVP_RANK_RANK5 = 9,
    VANILLA_PVP_RANK_RANK6 = 10,
    VANILLA_PVP_RANK_RANK7 = 11,
    VANILLA_PVP_RANK_RANK8 = 12,
    VANILLA_PVP_RANK_RANK9 = 13,
    VANILLA_PVP_RANK_RANK10 = 14,
    VANILLA_PVP_RANK_RANK11 = 15,
    VANILLA_PVP_RANK_RANK12 = 16,
    VANILLA_PVP_RANK_RANK13 = 17,
    VANILLA_PVP_RANK_RANK14 = 18,
    VANILLA_PVP_RANK_FACTION_LEADER = 19
} vanilla_PvpRank;

typedef enum {
    VANILLA_QUEST_COMPLETABLE_NOT_COMPLETABLE = 0,
    VANILLA_QUEST_COMPLETABLE_COMPLETEABLE = 3
} vanilla_QuestCompletable;

typedef enum {
    VANILLA_QUEST_FAILED_REASON_DONT_HAVE_REQ = 0,
    VANILLA_QUEST_FAILED_REASON_QUEST_FAILED_LOW_LEVEL = 1,
    VANILLA_QUEST_FAILED_REASON_QUEST_FAILED_REQS = 2,
    VANILLA_QUEST_FAILED_REASON_QUEST_FAILED_INVENTORY_FULL = 4,
    VANILLA_QUEST_FAILED_REASON_QUEST_FAILED_WRONG_RACE = 6,
    VANILLA_QUEST_FAILED_REASON_QUEST_ONLY_ONE_TIMED = 12,
    VANILLA_QUEST_FAILED_REASON_QUEST_ALREADY_ON = 13,
    VANILLA_QUEST_FAILED_REASON_QUEST_FAILED_DUPLICATE_ITEM = 17,
    VANILLA_QUEST_FAILED_REASON_QUEST_FAILED_MISSING_ITEMS = 20,
    VANILLA_QUEST_FAILED_REASON_QUEST_FAILED_NOT_ENOUGH_MONEY = 22
} vanilla_QuestFailedReason;

typedef enum {
    VANILLA_QUEST_GIVER_STATUS_NONE = 0,
    VANILLA_QUEST_GIVER_STATUS_UNAVAILABLE = 1,
    VANILLA_QUEST_GIVER_STATUS_CHAT = 2,
    VANILLA_QUEST_GIVER_STATUS_INCOMPLETE = 3,
    VANILLA_QUEST_GIVER_STATUS_REWARD_REP = 4,
    VANILLA_QUEST_GIVER_STATUS_AVAILABLE = 5,
    VANILLA_QUEST_GIVER_STATUS_REWARD_OLD = 6,
    VANILLA_QUEST_GIVER_STATUS_REWARD2 = 7
} vanilla_QuestGiverStatus;

typedef enum {
    VANILLA_QUEST_PARTY_MESSAGE_SHARING_QUEST = 0,
    VANILLA_QUEST_PARTY_MESSAGE_CANT_TAKE_QUEST = 1,
    VANILLA_QUEST_PARTY_MESSAGE_ACCEPT_QUEST = 2,
    VANILLA_QUEST_PARTY_MESSAGE_DECLINE_QUEST = 3,
    VANILLA_QUEST_PARTY_MESSAGE_TOO_FAR = 4,
    VANILLA_QUEST_PARTY_MESSAGE_BUSY = 5,
    VANILLA_QUEST_PARTY_MESSAGE_LOG_FULL = 6,
    VANILLA_QUEST_PARTY_MESSAGE_HAVE_QUEST = 7,
    VANILLA_QUEST_PARTY_MESSAGE_FINISH_QUEST = 8
} vanilla_QuestPartyMessage;

typedef enum {
    VANILLA_RACE_HUMAN = 1,
    VANILLA_RACE_ORC = 2,
    VANILLA_RACE_DWARF = 3,
    VANILLA_RACE_NIGHT_ELF = 4,
    VANILLA_RACE_UNDEAD = 5,
    VANILLA_RACE_TAUREN = 6,
    VANILLA_RACE_GNOME = 7,
    VANILLA_RACE_TROLL = 8,
    VANILLA_RACE_GOBLIN = 9
} vanilla_Race;

typedef enum {
    VANILLA_RAID_GROUP_ERROR_REQUIRED = 1,
    VANILLA_RAID_GROUP_ERROR_FULL = 2
} vanilla_RaidGroupError;

typedef enum {
    VANILLA_RAID_INSTANCE_MESSAGE_WARNING_HOURS = 1,
    VANILLA_RAID_INSTANCE_MESSAGE_WARNING_MIN = 2,
    VANILLA_RAID_INSTANCE_MESSAGE_WARNING_MIN_SOON = 3,
    VANILLA_RAID_INSTANCE_MESSAGE_WELCOME = 4
} vanilla_RaidInstanceMessage;

typedef enum {
    VANILLA_RAID_TARGET_INDEX_UNKNOWN0 = 0,
    VANILLA_RAID_TARGET_INDEX_UNKNOWN1 = 1,
    VANILLA_RAID_TARGET_INDEX_UNKNOWN2 = 2,
    VANILLA_RAID_TARGET_INDEX_UNKNOWN3 = 3,
    VANILLA_RAID_TARGET_INDEX_UNKNOWN4 = 4,
    VANILLA_RAID_TARGET_INDEX_UNKNOWN5 = 5,
    VANILLA_RAID_TARGET_INDEX_UNKNOWN6 = 6,
    VANILLA_RAID_TARGET_INDEX_UNKNOWN7 = 7,
    VANILLA_RAID_TARGET_INDEX_UNKNOWN8 = 8,
    VANILLA_RAID_TARGET_INDEX_REQUEST_ICONS = 255
} vanilla_RaidTargetIndex;

typedef enum {
    VANILLA_RAID_TARGET_UPDATE_TYPE_PARTIAL = 0,
    VANILLA_RAID_TARGET_UPDATE_TYPE_FULL = 1
} vanilla_RaidTargetUpdateType;

typedef enum {
    VANILLA_ROLL_VOTE_PASS = 0,
    VANILLA_ROLL_VOTE_NEED = 1,
    VANILLA_ROLL_VOTE_GREED = 2
} vanilla_RollVote;

typedef enum {
    VANILLA_SCALP_HAIR = 0,
    VANILLA_SCALP_BALD = 1
} vanilla_Scalp;

typedef enum {
    VANILLA_SELECTION_TYPE_BASE_SKIN = 0,
    VANILLA_SELECTION_TYPE_FACE = 1,
    VANILLA_SELECTION_TYPE_FACIAL_HAIR = 2,
    VANILLA_SELECTION_TYPE_HAIR = 3,
    VANILLA_SELECTION_TYPE_UNDERWEAR = 4
} vanilla_SelectionType;

typedef enum {
    VANILLA_SELL_ITEM_RESULT_CANT_FIND_ITEM = 1,
    VANILLA_SELL_ITEM_RESULT_CANT_SELL_ITEM = 2,
    VANILLA_SELL_ITEM_RESULT_CANT_FIND_VENDOR = 3,
    VANILLA_SELL_ITEM_RESULT_YOU_DONT_OWN_THAT_ITEM = 4,
    VANILLA_SELL_ITEM_RESULT_UNK = 5,
    VANILLA_SELL_ITEM_RESULT_ONLY_EMPTY_BAG = 6
} vanilla_SellItemResult;

typedef enum {
    VANILLA_SERVER_CATEGORY_ONE = 1,
    VANILLA_SERVER_CATEGORY_TWO = 2,
    VANILLA_SERVER_CATEGORY_THREE = 3,
    VANILLA_SERVER_CATEGORY_FIVE = 5
} vanilla_ServerCategory;

typedef enum {
    VANILLA_SERVER_MESSAGE_TYPE_SHUTDOWN_TIME = 1,
    VANILLA_SERVER_MESSAGE_TYPE_RESTART_TIME = 2,
    VANILLA_SERVER_MESSAGE_TYPE_CUSTOM = 3,
    VANILLA_SERVER_MESSAGE_TYPE_SHUTDOWN_CANCELLED = 4,
    VANILLA_SERVER_MESSAGE_TYPE_RESTART_CANCELLED = 5
} vanilla_ServerMessageType;

typedef enum {
    VANILLA_SERVER_REGION_UNITED_STATES = 1,
    VANILLA_SERVER_REGION_KOREA = 2,
    VANILLA_SERVER_REGION_EUROPE = 3,
    VANILLA_SERVER_REGION_TAIWAN = 4,
    VANILLA_SERVER_REGION_CHINA = 5,
    VANILLA_SERVER_REGION_TEST_SERVER = 99,
    VANILLA_SERVER_REGION_QA_SERVER = 101
} vanilla_ServerRegion;

typedef enum {
    VANILLA_SHEATH_STATE_UNARMED = 0,
    VANILLA_SHEATH_STATE_MELEE = 1,
    VANILLA_SHEATH_STATE_RANGED = 2
} vanilla_SheathState;

typedef enum {
    VANILLA_SHEATHE_TYPE_NONE = 0,
    VANILLA_SHEATHE_TYPE_MAIN_HAND = 1,
    VANILLA_SHEATHE_TYPE_OFF_HAND = 2,
    VANILLA_SHEATHE_TYPE_LARGE_WEAPON_LEFT = 3,
    VANILLA_SHEATHE_TYPE_LARGE_WEAPON_RIGHT = 4,
    VANILLA_SHEATHE_TYPE_HIP_WEAPON_LEFT = 5,
    VANILLA_SHEATHE_TYPE_HIP_WEAPON_RIGHT = 6,
    VANILLA_SHEATHE_TYPE_SHIELD = 7
} vanilla_SheatheType;

typedef enum {
    VANILLA_SIMPLE_SPELL_CAST_RESULT_SUCCESS = 0,
    VANILLA_SIMPLE_SPELL_CAST_RESULT_FAILURE = 2
} vanilla_SimpleSpellCastResult;

typedef enum {
    VANILLA_SIZE_CLASS_NONE = -1,
    VANILLA_SIZE_CLASS_SMALL = 0,
    VANILLA_SIZE_CLASS_MEDIUM = 1,
    VANILLA_SIZE_CLASS_LARGE = 2,
    VANILLA_SIZE_CLASS_GIANT = 3,
    VANILLA_SIZE_CLASS_COLOSSAL = 4
} vanilla_SizeClass;

typedef enum {
    VANILLA_SKILL_NONE = 0,
    VANILLA_SKILL_FROST = 6,
    VANILLA_SKILL_FIRE = 8,
    VANILLA_SKILL_ARMS = 26,
    VANILLA_SKILL_COMBAT = 38,
    VANILLA_SKILL_SUBTLETY = 39,
    VANILLA_SKILL_POISONS = 40,
    VANILLA_SKILL_SWORDS = 43,
    VANILLA_SKILL_AXES = 44,
    VANILLA_SKILL_BOWS = 45,
    VANILLA_SKILL_GUNS = 46,
    VANILLA_SKILL_BEAST_MASTERY = 50,
    VANILLA_SKILL_SURVIVAL = 51,
    VANILLA_SKILL_MACES = 54,
    VANILLA_SKILL_TWO_HANDED_SWORDS = 55,
    VANILLA_SKILL_HOLY = 56,
    VANILLA_SKILL_SHADOW = 78,
    VANILLA_SKILL_DEFENSE = 95,
    VANILLA_SKILL_LANGUAGE_COMMON = 98,
    VANILLA_SKILL_RACIAL_DWARVEN = 101,
    VANILLA_SKILL_LANGUAGE_ORCISH = 109,
    VANILLA_SKILL_LANGUAGE_DWARVEN = 111,
    VANILLA_SKILL_LANGUAGE_DARNASSIAN = 113,
    VANILLA_SKILL_LANGUAGE_TAURAHE = 115,
    VANILLA_SKILL_DUAL_WIELD = 118,
    VANILLA_SKILL_RACIAL_TAUREN = 124,
    VANILLA_SKILL_ORC_RACIAL = 125,
    VANILLA_SKILL_RACIAL_NIGHT_ELF = 126,
    VANILLA_SKILL_FIRST_AID = 129,
    VANILLA_SKILL_FERAL_COMBAT = 134,
    VANILLA_SKILL_STAVES = 136,
    VANILLA_SKILL_LANGUAGE_THALASSIAN = 137,
    VANILLA_SKILL_LANGUAGE_DRACONIC = 138,
    VANILLA_SKILL_LANGUAGE_DEMON_TONGUE = 139,
    VANILLA_SKILL_LANGUAGE_TITAN = 140,
    VANILLA_SKILL_LANGUAGE_OLD_TONGUE = 141,
    VANILLA_SKILL_SURVIVAL2 = 142,
    VANILLA_SKILL_RIDING_HORSE = 148,
    VANILLA_SKILL_RIDING_WOLF = 149,
    VANILLA_SKILL_RIDING_TIGER = 150,
    VANILLA_SKILL_RIDING_RAM = 152,
    VANILLA_SKILL_SWIMMING = 155,
    VANILLA_SKILL_TWO_HANDED_MACES = 160,
    VANILLA_SKILL_UNARMED = 162,
    VANILLA_SKILL_MARKSMANSHIP = 163,
    VANILLA_SKILL_BLACKSMITHING = 164,
    VANILLA_SKILL_LEATHERWORKING = 165,
    VANILLA_SKILL_ALCHEMY = 171,
    VANILLA_SKILL_TWO_HANDED_AXES = 172,
    VANILLA_SKILL_DAGGERS = 173,
    VANILLA_SKILL_THROWN = 176,
    VANILLA_SKILL_HERBALISM = 182,
    VANILLA_SKILL_GENERIC_DND = 183,
    VANILLA_SKILL_RETRIBUTION = 184,
    VANILLA_SKILL_COOKING = 185,
    VANILLA_SKILL_MINING = 186,
    VANILLA_SKILL_PET_IMP = 188,
    VANILLA_SKILL_PET_FELHUNTER = 189,
    VANILLA_SKILL_TAILORING = 197,
    VANILLA_SKILL_ENGINEERING = 202,
    VANILLA_SKILL_PET_SPIDER = 203,
    VANILLA_SKILL_PET_VOIDWALKER = 204,
    VANILLA_SKILL_PET_SUCCUBUS = 205,
    VANILLA_SKILL_PET_INFERNAL = 206,
    VANILLA_SKILL_PET_DOOMGUARD = 207,
    VANILLA_SKILL_PET_WOLF = 208,
    VANILLA_SKILL_PET_CAT = 209,
    VANILLA_SKILL_PET_BEAR = 210,
    VANILLA_SKILL_PET_BOAR = 211,
    VANILLA_SKILL_PET_CROCILISK = 212,
    VANILLA_SKILL_PET_CARRION_BIRD = 213,
    VANILLA_SKILL_PET_CRAB = 214,
    VANILLA_SKILL_PET_GORILLA = 215,
    VANILLA_SKILL_PET_RAPTOR = 217,
    VANILLA_SKILL_PET_TALLSTRIDER = 218,
    VANILLA_SKILL_RACIAL_UNDED = 220,
    VANILLA_SKILL_CROSSBOWS = 226,
    VANILLA_SKILL_WANDS = 228,
    VANILLA_SKILL_POLEARMS = 229,
    VANILLA_SKILL_PET_SCORPID = 236,
    VANILLA_SKILL_ARCANE = 237,
    VANILLA_SKILL_PET_TURTLE = 251,
    VANILLA_SKILL_ASSASSINATION = 253,
    VANILLA_SKILL_FURY = 256,
    VANILLA_SKILL_PROTECTION = 257,
    VANILLA_SKILL_BEAST_TRAINING = 261,
    VANILLA_SKILL_PROTECTION2 = 267,
    VANILLA_SKILL_PET_TALENTS = 270,
    VANILLA_SKILL_PLATE_MAIL = 293,
    VANILLA_SKILL_LANGUAGE_GNOMISH = 313,
    VANILLA_SKILL_LANGUAGE_TROLL = 315,
    VANILLA_SKILL_ENCHANTING = 333,
    VANILLA_SKILL_DEMONOLOGY = 354,
    VANILLA_SKILL_AFFLICTION = 355,
    VANILLA_SKILL_FISHING = 356,
    VANILLA_SKILL_ENHANCEMENT = 373,
    VANILLA_SKILL_RESTORATION = 374,
    VANILLA_SKILL_ELEMENTAL_COMBAT = 375,
    VANILLA_SKILL_SKINNING = 393,
    VANILLA_SKILL_MAIL = 413,
    VANILLA_SKILL_LEATHER = 414,
    VANILLA_SKILL_CLOTH = 415,
    VANILLA_SKILL_SHIELD = 433,
    VANILLA_SKILL_FIST_WEAPONS = 473,
    VANILLA_SKILL_RIDING_RAPTOR = 533,
    VANILLA_SKILL_RIDING_MECHANOSTRIDER = 553,
    VANILLA_SKILL_RIDING_UNDEAD_HORSE = 554,
    VANILLA_SKILL_RESTORATION2 = 573,
    VANILLA_SKILL_BALANCE = 574,
    VANILLA_SKILL_DESTRUCTION = 593,
    VANILLA_SKILL_HOLY2 = 594,
    VANILLA_SKILL_DISCIPLINE = 613,
    VANILLA_SKILL_LOCKPICKING = 633,
    VANILLA_SKILL_PET_BAT = 653,
    VANILLA_SKILL_PET_HYENA = 654,
    VANILLA_SKILL_PET_OWL = 655,
    VANILLA_SKILL_PET_WIND_SERPENT = 656,
    VANILLA_SKILL_LANGUAGE_GUTTERSPEAK = 673,
    VANILLA_SKILL_RIDING_KODO = 713,
    VANILLA_SKILL_RACIAL_TROLL = 733,
    VANILLA_SKILL_RACIAL_GNOME = 753,
    VANILLA_SKILL_RACIAL_HUMAN = 754,
    VANILLA_SKILL_PET_EVENT_RC = 758,
    VANILLA_SKILL_RIDING = 762
} vanilla_Skill;

typedef enum {
    VANILLA_SKILL_CATEGORY_ATTRIBUTE = 5,
    VANILLA_SKILL_CATEGORY_WEAPON = 6,
    VANILLA_SKILL_CATEGORY_CLASS = 7,
    VANILLA_SKILL_CATEGORY_ARMOR = 8,
    VANILLA_SKILL_CATEGORY_SECONDARY_PROFESSION = 9,
    VANILLA_SKILL_CATEGORY_LANGUAGE = 10,
    VANILLA_SKILL_CATEGORY_PRIMARY_PROFESSION = 11,
    VANILLA_SKILL_CATEGORY_GENERIC = 12
} vanilla_SkillCategory;

typedef enum {
    VANILLA_SOUND_TYPE_UNUSED = 0,
    VANILLA_SOUND_TYPE_SPELLS = 1,
    VANILLA_SOUND_TYPE_UI = 2,
    VANILLA_SOUND_TYPE_FOOTSTEPS = 3,
    VANILLA_SOUND_TYPE_WEAPON_IMPACT = 4,
    VANILLA_SOUND_TYPE_WEAPON_MISS = 6,
    VANILLA_SOUND_TYPE_PICK_UP_PUT_DOWN = 9,
    VANILLA_SOUND_TYPE_NPC_COMBAT = 10,
    VANILLA_SOUND_TYPE_ERRORS = 12,
    VANILLA_SOUND_TYPE_OBJECTS = 14,
    VANILLA_SOUND_TYPE_DEATH = 16,
    VANILLA_SOUND_TYPE_NPC_GREETINGS = 17,
    VANILLA_SOUND_TYPE_TEST = 18,
    VANILLA_SOUND_TYPE_ARMOUR_FOLEY = 19,
    VANILLA_SOUND_TYPE_FOOTSTEPS_2 = 20,
    VANILLA_SOUND_TYPE_WATER_CHARACTER = 21,
    VANILLA_SOUND_TYPE_WATER_LIQUID = 22,
    VANILLA_SOUND_TYPE_TRADESKILLS = 23,
    VANILLA_SOUND_TYPE_DOODADS = 25,
    VANILLA_SOUND_TYPE_SPELL_FIZZLE = 26,
    VANILLA_SOUND_TYPE_NPC_LOOPS = 27,
    VANILLA_SOUND_TYPE_ZONE_MUSIC = 28,
    VANILLA_SOUND_TYPE_EMOTES = 29,
    VANILLA_SOUND_TYPE_NARRATION_MUSIC = 30,
    VANILLA_SOUND_TYPE_NARRATION = 31,
    VANILLA_SOUND_TYPE_ZONE_AMBIENCE = 50
} vanilla_SoundType;

typedef enum {
    VANILLA_SPELL_CAST_RESULT_AFFECTING_COMBAT = 0,
    VANILLA_SPELL_CAST_RESULT_ALREADY_AT_FULL_HEALTH = 1,
    VANILLA_SPELL_CAST_RESULT_ALREADY_AT_FULL_MANA = 2,
    VANILLA_SPELL_CAST_RESULT_ALREADY_BEING_TAMED = 3,
    VANILLA_SPELL_CAST_RESULT_ALREADY_HAVE_CHARM = 4,
    VANILLA_SPELL_CAST_RESULT_ALREADY_HAVE_SUMMON = 5,
    VANILLA_SPELL_CAST_RESULT_ALREADY_OPEN = 6,
    VANILLA_SPELL_CAST_RESULT_MORE_POWERFUL_SPELL_ACTIVE = 7,
    VANILLA_SPELL_CAST_RESULT_BAD_IMPLICIT_TARGETS = 9,
    VANILLA_SPELL_CAST_RESULT_BAD_TARGETS = 10,
    VANILLA_SPELL_CAST_RESULT_CANT_BE_CHARMED = 11,
    VANILLA_SPELL_CAST_RESULT_CANT_BE_DISENCHANTED = 12,
    VANILLA_SPELL_CAST_RESULT_CANT_BE_PROSPECTED = 13,
    VANILLA_SPELL_CAST_RESULT_CANT_CAST_ON_TAPPED = 14,
    VANILLA_SPELL_CAST_RESULT_CANT_DUEL_WHILE_INVISIBLE = 15,
    VANILLA_SPELL_CAST_RESULT_CANT_DUEL_WHILE_STEALTHED = 16,
    VANILLA_SPELL_CAST_RESULT_CANT_TOO_CLOSE_TO_ENEMY = 17,
    VANILLA_SPELL_CAST_RESULT_CANT_DO_THAT_YET = 18,
    VANILLA_SPELL_CAST_RESULT_CASTER_DEAD = 19,
    VANILLA_SPELL_CAST_RESULT_CHARMED = 20,
    VANILLA_SPELL_CAST_RESULT_CHEST_IN_USE = 21,
    VANILLA_SPELL_CAST_RESULT_CONFUSED = 22,
    VANILLA_SPELL_CAST_RESULT_DONT_REPORT = 23,
    VANILLA_SPELL_CAST_RESULT_EQUIPPED_ITEM = 24,
    VANILLA_SPELL_CAST_RESULT_EQUIPPED_ITEM_CLASS = 25,
    VANILLA_SPELL_CAST_RESULT_EQUIPPED_ITEM_CLASS_MAINHAND = 26,
    VANILLA_SPELL_CAST_RESULT_EQUIPPED_ITEM_CLASS_OFFHAND = 27,
    VANILLA_SPELL_CAST_RESULT_ERROR = 28,
    VANILLA_SPELL_CAST_RESULT_FIZZLE = 29,
    VANILLA_SPELL_CAST_RESULT_FLEEING = 30,
    VANILLA_SPELL_CAST_RESULT_FOOD_LOWLEVEL = 31,
    VANILLA_SPELL_CAST_RESULT_HIGHLEVEL = 32,
    VANILLA_SPELL_CAST_RESULT_IMMUNE = 34,
    VANILLA_SPELL_CAST_RESULT_INTERRUPTED = 35,
    VANILLA_SPELL_CAST_RESULT_INTERRUPTED_COMBAT = 36,
    VANILLA_SPELL_CAST_RESULT_ITEM_ALREADY_ENCHANTED = 37,
    VANILLA_SPELL_CAST_RESULT_ITEM_GONE = 38,
    VANILLA_SPELL_CAST_RESULT_ENCHANT_NOT_EXISTING_ITEM = 39,
    VANILLA_SPELL_CAST_RESULT_ITEM_NOT_READY = 40,
    VANILLA_SPELL_CAST_RESULT_LEVEL_REQUIREMENT = 41,
    VANILLA_SPELL_CAST_RESULT_LINE_OF_SIGHT = 42,
    VANILLA_SPELL_CAST_RESULT_LOWLEVEL = 43,
    VANILLA_SPELL_CAST_RESULT_SKILL_NOT_HIGH_ENOUGH = 44,
    VANILLA_SPELL_CAST_RESULT_MAINHAND_EMPTY = 45,
    VANILLA_SPELL_CAST_RESULT_MOVING = 46,
    VANILLA_SPELL_CAST_RESULT_NEED_AMMO = 47,
    VANILLA_SPELL_CAST_RESULT_NEED_REQUIRES_SOMETHING = 48,
    VANILLA_SPELL_CAST_RESULT_NEED_EXOTIC_AMMO = 49,
    VANILLA_SPELL_CAST_RESULT_NOPATH = 50,
    VANILLA_SPELL_CAST_RESULT_NOT_BEHIND = 51,
    VANILLA_SPELL_CAST_RESULT_NOT_FISHABLE = 52,
    VANILLA_SPELL_CAST_RESULT_NOT_HERE = 53,
    VANILLA_SPELL_CAST_RESULT_NOT_INFRONT = 54,
    VANILLA_SPELL_CAST_RESULT_NOT_IN_CONTROL = 55,
    VANILLA_SPELL_CAST_RESULT_NOT_KNOWN = 56,
    VANILLA_SPELL_CAST_RESULT_NOT_MOUNTED = 57,
    VANILLA_SPELL_CAST_RESULT_NOT_ON_TAXI = 58,
    VANILLA_SPELL_CAST_RESULT_NOT_ON_TRANSPORT = 59,
    VANILLA_SPELL_CAST_RESULT_NOT_READY = 60,
    VANILLA_SPELL_CAST_RESULT_NOT_SHAPESHIFT = 61,
    VANILLA_SPELL_CAST_RESULT_NOT_STANDING = 62,
    VANILLA_SPELL_CAST_RESULT_NOT_TRADEABLE = 63,
    VANILLA_SPELL_CAST_RESULT_NOT_TRADING = 64,
    VANILLA_SPELL_CAST_RESULT_NOT_UNSHEATHED = 65,
    VANILLA_SPELL_CAST_RESULT_NOT_WHILE_GHOST = 66,
    VANILLA_SPELL_CAST_RESULT_NO_AMMO = 67,
    VANILLA_SPELL_CAST_RESULT_NO_CHARGES_REMAIN = 68,
    VANILLA_SPELL_CAST_RESULT_NO_CHAMPION = 69,
    VANILLA_SPELL_CAST_RESULT_NO_COMBO_POINTS = 70,
    VANILLA_SPELL_CAST_RESULT_NO_DUELING = 71,
    VANILLA_SPELL_CAST_RESULT_NO_ENDURANCE = 72,
    VANILLA_SPELL_CAST_RESULT_NO_FISH = 73,
    VANILLA_SPELL_CAST_RESULT_NO_ITEMS_WHILE_SHAPESHIFTED = 74,
    VANILLA_SPELL_CAST_RESULT_NO_MOUNTS_ALLOWED = 75,
    VANILLA_SPELL_CAST_RESULT_NO_PET = 76,
    VANILLA_SPELL_CAST_RESULT_NO_POWER = 77,
    VANILLA_SPELL_CAST_RESULT_NOTHING_TO_DISPEL = 78,
    VANILLA_SPELL_CAST_RESULT_NOTHING_TO_STEAL = 79,
    VANILLA_SPELL_CAST_RESULT_ONLY_ABOVEWATER = 80,
    VANILLA_SPELL_CAST_RESULT_ONLY_DAYTIME = 81,
    VANILLA_SPELL_CAST_RESULT_ONLY_INDOORS = 82,
    VANILLA_SPELL_CAST_RESULT_ONLY_MOUNTED = 83,
    VANILLA_SPELL_CAST_RESULT_ONLY_NIGHTTIME = 84,
    VANILLA_SPELL_CAST_RESULT_ONLY_OUTDOORS = 85,
    VANILLA_SPELL_CAST_RESULT_ONLY_SHAPESHIFT = 86,
    VANILLA_SPELL_CAST_RESULT_ONLY_STEALTHED = 87,
    VANILLA_SPELL_CAST_RESULT_ONLY_UNDERWATER = 88,
    VANILLA_SPELL_CAST_RESULT_OUT_OF_RANGE = 89,
    VANILLA_SPELL_CAST_RESULT_PACIFIED = 90,
    VANILLA_SPELL_CAST_RESULT_POSSESSED = 91,
    VANILLA_SPELL_CAST_RESULT_REQUIRES_AREA = 93,
    VANILLA_SPELL_CAST_RESULT_REQUIRES_SPELL_FOCUS = 94,
    VANILLA_SPELL_CAST_RESULT_ROOTED = 95,
    VANILLA_SPELL_CAST_RESULT_SILENCED = 96,
    VANILLA_SPELL_CAST_RESULT_SPELL_IN_PROGRESS = 97,
    VANILLA_SPELL_CAST_RESULT_SPELL_LEARNED = 98,
    VANILLA_SPELL_CAST_RESULT_SPELL_UNAVAILABLE = 99,
    VANILLA_SPELL_CAST_RESULT_STUNNED = 100,
    VANILLA_SPELL_CAST_RESULT_TARGETS_DEAD = 101,
    VANILLA_SPELL_CAST_RESULT_TARGET_AFFECTING_COMBAT = 102,
    VANILLA_SPELL_CAST_RESULT_TARGET_AURASTATE = 103,
    VANILLA_SPELL_CAST_RESULT_TARGET_DUELING = 104,
    VANILLA_SPELL_CAST_RESULT_TARGET_ENEMY = 105,
    VANILLA_SPELL_CAST_RESULT_TARGET_ENRAGED = 106,
    VANILLA_SPELL_CAST_RESULT_TARGET_FRIENDLY = 107,
    VANILLA_SPELL_CAST_RESULT_TARGET_IN_COMBAT = 108,
    VANILLA_SPELL_CAST_RESULT_TARGET_IS_PLAYER = 109,
    VANILLA_SPELL_CAST_RESULT_TARGET_NOT_DEAD = 110,
    VANILLA_SPELL_CAST_RESULT_TARGET_NOT_IN_PARTY = 111,
    VANILLA_SPELL_CAST_RESULT_TARGET_NOT_LOOTED = 112,
    VANILLA_SPELL_CAST_RESULT_TARGET_NOT_PLAYER = 113,
    VANILLA_SPELL_CAST_RESULT_TARGET_NO_POCKETS = 114,
    VANILLA_SPELL_CAST_RESULT_TARGET_NO_WEAPONS = 115,
    VANILLA_SPELL_CAST_RESULT_TARGET_UNSKINNABLE = 116,
    VANILLA_SPELL_CAST_RESULT_THIRST_SATIATED = 117,
    VANILLA_SPELL_CAST_RESULT_TOO_CLOSE = 118,
    VANILLA_SPELL_CAST_RESULT_TOO_MANY_OF_ITEM = 119,
    VANILLA_SPELL_CAST_RESULT_TRAINING_POINTS = 121,
    VANILLA_SPELL_CAST_RESULT_TRY_CAST_AGAIN = 122,
    VANILLA_SPELL_CAST_RESULT_UNIT_NOT_BEHIND = 123,
    VANILLA_SPELL_CAST_RESULT_UNIT_NOT_INFRONT = 124,
    VANILLA_SPELL_CAST_RESULT_WRONG_PET_FOOD = 125,
    VANILLA_SPELL_CAST_RESULT_NOT_WHILE_FATIGUED = 126,
    VANILLA_SPELL_CAST_RESULT_TARGET_NOT_IN_INSTANCE = 127,
    VANILLA_SPELL_CAST_RESULT_NOT_WHILE_TRADING = 128,
    VANILLA_SPELL_CAST_RESULT_TARGET_NOT_IN_RAID = 129,
    VANILLA_SPELL_CAST_RESULT_DISENCHANT_WHILE_LOOTING = 130,
    VANILLA_SPELL_CAST_RESULT_PROSPECT_WHILE_LOOTING = 131,
    VANILLA_SPELL_CAST_RESULT_TARGET_FREEFORALL = 133,
    VANILLA_SPELL_CAST_RESULT_NO_EDIBLE_CORPSES = 134,
    VANILLA_SPELL_CAST_RESULT_ONLY_BATTLEGROUNDS = 135,
    VANILLA_SPELL_CAST_RESULT_TARGET_NOT_GHOST = 136,
    VANILLA_SPELL_CAST_RESULT_TOO_MANY_SKILLS = 137,
    VANILLA_SPELL_CAST_RESULT_CANT_USE_NEW_ITEM = 138,
    VANILLA_SPELL_CAST_RESULT_WRONG_WEATHER = 139,
    VANILLA_SPELL_CAST_RESULT_DAMAGE_IMMUNE = 140,
    VANILLA_SPELL_CAST_RESULT_PREVENTED_BY_MECHANIC = 141,
    VANILLA_SPELL_CAST_RESULT_PLAY_TIME = 142,
    VANILLA_SPELL_CAST_RESULT_REPUTATION = 143,
    VANILLA_SPELL_CAST_RESULT_MIN_SKILL = 144,
    VANILLA_SPELL_CAST_RESULT_UNKNOWN = 145
} vanilla_SpellCastResult;

typedef enum {
    VANILLA_SPELL_EFFECT_NONE = 0,
    VANILLA_SPELL_EFFECT_INSTAKILL = 1,
    VANILLA_SPELL_EFFECT_SCHOOL_DAMAGE = 2,
    VANILLA_SPELL_EFFECT_DUMMY = 3,
    VANILLA_SPELL_EFFECT_PORTAL_TELEPORT = 4,
    VANILLA_SPELL_EFFECT_TELEPORT_UNITS = 5,
    VANILLA_SPELL_EFFECT_APPLY_AURA = 6,
    VANILLA_SPELL_EFFECT_ENVIRONMENTAL_DAMAGE = 7,
    VANILLA_SPELL_EFFECT_POWER_DRAIN = 8,
    VANILLA_SPELL_EFFECT_HEALTH_LEECH = 9,
    VANILLA_SPELL_EFFECT_HEAL = 10,
    VANILLA_SPELL_EFFECT_BIND = 11,
    VANILLA_SPELL_EFFECT_PORTAL = 12,
    VANILLA_SPELL_EFFECT_RITUAL_BASE = 13,
    VANILLA_SPELL_EFFECT_RITUAL_SPECIALIZE = 14,
    VANILLA_SPELL_EFFECT_RITUAL_ACTIVATE_PORTAL = 15,
    VANILLA_SPELL_EFFECT_QUEST_COMPLETE = 16,
    VANILLA_SPELL_EFFECT_WEAPON_DAMAGE_NOSCHOOL = 17,
    VANILLA_SPELL_EFFECT_RESURRECT = 18,
    VANILLA_SPELL_EFFECT_ADD_EXTRA_ATTACKS = 19,
    VANILLA_SPELL_EFFECT_DODGE = 20,
    VANILLA_SPELL_EFFECT_EVADE = 21,
    VANILLA_SPELL_EFFECT_PARRY = 22,
    VANILLA_SPELL_EFFECT_BLOCK = 23,
    VANILLA_SPELL_EFFECT_CREATE_ITEM = 24,
    VANILLA_SPELL_EFFECT_WEAPON = 25,
    VANILLA_SPELL_EFFECT_DEFENSE = 26,
    VANILLA_SPELL_EFFECT_PERSISTENT_AREA_AURA = 27,
    VANILLA_SPELL_EFFECT_SUMMON = 28,
    VANILLA_SPELL_EFFECT_LEAP = 29,
    VANILLA_SPELL_EFFECT_ENERGIZE = 30,
    VANILLA_SPELL_EFFECT_WEAPON_PERCENT_DAMAGE = 31,
    VANILLA_SPELL_EFFECT_TRIGGER_MISSILE = 32,
    VANILLA_SPELL_EFFECT_OPEN_LOCK = 33,
    VANILLA_SPELL_EFFECT_SUMMON_CHANGE_ITEM = 34,
    VANILLA_SPELL_EFFECT_APPLY_AREA_AURA_PARTY = 35,
    VANILLA_SPELL_EFFECT_LEARN_SPELL = 36,
    VANILLA_SPELL_EFFECT_SPELL_DEFENSE = 37,
    VANILLA_SPELL_EFFECT_DISPEL = 38,
    VANILLA_SPELL_EFFECT_LANGUAGE = 39,
    VANILLA_SPELL_EFFECT_DUAL_WIELD = 40,
    VANILLA_SPELL_EFFECT_SUMMON_WILD = 41,
    VANILLA_SPELL_EFFECT_SUMMON_GUARDIAN = 42,
    VANILLA_SPELL_EFFECT_TELEPORT_UNITS_FACE_CASTER = 43,
    VANILLA_SPELL_EFFECT_SKILL_STEP = 44,
    VANILLA_SPELL_EFFECT_ADD_HONOR = 45,
    VANILLA_SPELL_EFFECT_SPAWN = 46,
    VANILLA_SPELL_EFFECT_TRADE_SKILL = 47,
    VANILLA_SPELL_EFFECT_STEALTH = 48,
    VANILLA_SPELL_EFFECT_DETECT = 49,
    VANILLA_SPELL_EFFECT_TRANS_DOOR = 50,
    VANILLA_SPELL_EFFECT_FORCE_CRITICAL_HIT = 51,
    VANILLA_SPELL_EFFECT_GUARANTEE_HIT = 52,
    VANILLA_SPELL_EFFECT_ENCHANT_ITEM = 53,
    VANILLA_SPELL_EFFECT_ENCHANT_ITEM_TEMPORARY = 54,
    VANILLA_SPELL_EFFECT_TAMECREATURE = 55,
    VANILLA_SPELL_EFFECT_SUMMON_PET = 56,
    VANILLA_SPELL_EFFECT_LEARN_PET_SPELL = 57,
    VANILLA_SPELL_EFFECT_WEAPON_DAMAGE = 58,
    VANILLA_SPELL_EFFECT_OPEN_LOCK_ITEM = 59,
    VANILLA_SPELL_EFFECT_PROFICIENCY = 60,
    VANILLA_SPELL_EFFECT_SEND_EVENT = 61,
    VANILLA_SPELL_EFFECT_POWER_BURN = 62,
    VANILLA_SPELL_EFFECT_THREAT = 63,
    VANILLA_SPELL_EFFECT_TRIGGER_SPELL = 64,
    VANILLA_SPELL_EFFECT_HEALTH_FUNNEL = 65,
    VANILLA_SPELL_EFFECT_POWER_FUNNEL = 66,
    VANILLA_SPELL_EFFECT_HEAL_MAX_HEALTH = 67,
    VANILLA_SPELL_EFFECT_INTERRUPT_CAST = 68,
    VANILLA_SPELL_EFFECT_DISTRACT = 69,
    VANILLA_SPELL_EFFECT_PULL = 70,
    VANILLA_SPELL_EFFECT_PICKPOCKET = 71,
    VANILLA_SPELL_EFFECT_ADD_FARSIGHT = 72,
    VANILLA_SPELL_EFFECT_SUMMON_POSSESSED = 73,
    VANILLA_SPELL_EFFECT_SUMMON_TOTEM = 74,
    VANILLA_SPELL_EFFECT_HEAL_MECHANICAL = 75,
    VANILLA_SPELL_EFFECT_SUMMON_OBJECT_WILD = 76,
    VANILLA_SPELL_EFFECT_SCRIPT_EFFECT = 77,
    VANILLA_SPELL_EFFECT_ATTACK = 78,
    VANILLA_SPELL_EFFECT_SANCTUARY = 79,
    VANILLA_SPELL_EFFECT_ADD_COMBO_POINTS = 80,
    VANILLA_SPELL_EFFECT_CREATE_HOUSE = 81,
    VANILLA_SPELL_EFFECT_BIND_SIGHT = 82,
    VANILLA_SPELL_EFFECT_DUEL = 83,
    VANILLA_SPELL_EFFECT_STUCK = 84,
    VANILLA_SPELL_EFFECT_SUMMON_PLAYER = 85,
    VANILLA_SPELL_EFFECT_ACTIVATE_OBJECT = 86,
    VANILLA_SPELL_EFFECT_SUMMON_TOTEM_SLOT1 = 87,
    VANILLA_SPELL_EFFECT_SUMMON_TOTEM_SLOT2 = 88,
    VANILLA_SPELL_EFFECT_SUMMON_TOTEM_SLOT3 = 89,
    VANILLA_SPELL_EFFECT_SUMMON_TOTEM_SLOT4 = 90,
    VANILLA_SPELL_EFFECT_THREAT_ALL = 91,
    VANILLA_SPELL_EFFECT_ENCHANT_HELD_ITEM = 92,
    VANILLA_SPELL_EFFECT_SUMMON_PHANTASM = 93,
    VANILLA_SPELL_EFFECT_SELF_RESURRECT = 94,
    VANILLA_SPELL_EFFECT_SKINNING = 95,
    VANILLA_SPELL_EFFECT_CHARGE = 96,
    VANILLA_SPELL_EFFECT_SUMMON_CRITTER = 97,
    VANILLA_SPELL_EFFECT_KNOCK_BACK = 98,
    VANILLA_SPELL_EFFECT_DISENCHANT = 99,
    VANILLA_SPELL_EFFECT_INEBRIATE = 100,
    VANILLA_SPELL_EFFECT_FEED_PET = 101,
    VANILLA_SPELL_EFFECT_DISMISS_PET = 102,
    VANILLA_SPELL_EFFECT_REPUTATION = 103,
    VANILLA_SPELL_EFFECT_SUMMON_OBJECT_SLOT1 = 104,
    VANILLA_SPELL_EFFECT_SUMMON_OBJECT_SLOT2 = 105,
    VANILLA_SPELL_EFFECT_SUMMON_OBJECT_SLOT3 = 106,
    VANILLA_SPELL_EFFECT_SUMMON_OBJECT_SLOT4 = 107,
    VANILLA_SPELL_EFFECT_DISPEL_MECHANIC = 108,
    VANILLA_SPELL_EFFECT_SUMMON_DEAD_PET = 109,
    VANILLA_SPELL_EFFECT_DESTROY_ALL_TOTEMS = 110,
    VANILLA_SPELL_EFFECT_DURABILITY_DAMAGE = 111,
    VANILLA_SPELL_EFFECT_SUMMON_DEMON = 112,
    VANILLA_SPELL_EFFECT_RESURRECT_NEW = 113,
    VANILLA_SPELL_EFFECT_ATTACK_ME = 114,
    VANILLA_SPELL_EFFECT_DURABILITY_DAMAGE_PCT = 115,
    VANILLA_SPELL_EFFECT_SKIN_PLAYER_CORPSE = 116,
    VANILLA_SPELL_EFFECT_SPIRIT_HEAL = 117,
    VANILLA_SPELL_EFFECT_SKILL = 118,
    VANILLA_SPELL_EFFECT_APPLY_AREA_AURA_PET = 119,
    VANILLA_SPELL_EFFECT_TELEPORT_GRAVEYARD = 120,
    VANILLA_SPELL_EFFECT_NORMALIZED_WEAPON_DMG = 121,
    VANILLA_SPELL_EFFECT_UNKNOWN122 = 122,
    VANILLA_SPELL_EFFECT_SEND_TAXI = 123,
    VANILLA_SPELL_EFFECT_PLAYER_PULL = 124,
    VANILLA_SPELL_EFFECT_MODIFY_THREAT_PERCENT = 125,
    VANILLA_SPELL_EFFECT_UNKNOWN126 = 126,
    VANILLA_SPELL_EFFECT_UNKNOWN127 = 127
} vanilla_SpellEffect;

typedef enum {
    VANILLA_SPELL_MISS_INFO_NONE = 0,
    VANILLA_SPELL_MISS_INFO_MISS = 1,
    VANILLA_SPELL_MISS_INFO_RESIST = 2,
    VANILLA_SPELL_MISS_INFO_DODGE = 3,
    VANILLA_SPELL_MISS_INFO_PARRY = 4,
    VANILLA_SPELL_MISS_INFO_BLOCK = 5,
    VANILLA_SPELL_MISS_INFO_EVADE = 6,
    VANILLA_SPELL_MISS_INFO_IMMUNE = 7,
    VANILLA_SPELL_MISS_INFO_IMMUNE2 = 8,
    VANILLA_SPELL_MISS_INFO_DEFLECT = 9,
    VANILLA_SPELL_MISS_INFO_ABSORB = 10,
    VANILLA_SPELL_MISS_INFO_REFLECT = 11
} vanilla_SpellMissInfo;

typedef enum {
    VANILLA_SPELL_SCHOOL_NORMAL = 0,
    VANILLA_SPELL_SCHOOL_HOLY = 1,
    VANILLA_SPELL_SCHOOL_FIRE = 2,
    VANILLA_SPELL_SCHOOL_NATURE = 3,
    VANILLA_SPELL_SCHOOL_FROST = 4,
    VANILLA_SPELL_SCHOOL_SHADOW = 5,
    VANILLA_SPELL_SCHOOL_ARCANE = 6
} vanilla_SpellSchool;

typedef enum {
    VANILLA_SPELL_TRIGGER_TYPE_ON_USE = 0,
    VANILLA_SPELL_TRIGGER_TYPE_ON_EQUIP = 1,
    VANILLA_SPELL_TRIGGER_TYPE_CHANCE_ON_HIT = 2
} vanilla_SpellTriggerType;

typedef enum {
    VANILLA_STABLE_RESULT_ERR_MONEY = 1,
    VANILLA_STABLE_RESULT_ERR_STABLE = 6,
    VANILLA_STABLE_RESULT_SUCCESS_STABLE = 8,
    VANILLA_STABLE_RESULT_SUCCESS_UNSTABLE = 9,
    VANILLA_STABLE_RESULT_SUCCESS_BUY_SLOT = 10
} vanilla_StableResult;

typedef enum {
    VANILLA_STATUS_ID_NONE = 0,
    VANILLA_STATUS_ID_WAIT_QUEUE = 1,
    VANILLA_STATUS_ID_WAIT_JOIN = 2,
    VANILLA_STATUS_ID_IN_PROGRESS = 3,
    VANILLA_STATUS_ID_WAIT_LEAVE = 4
} vanilla_StatusId;

typedef enum {
    VANILLA_SWING_TYPE_LIGHT = 0,
    VANILLA_SWING_TYPE_MEDIUM = 1,
    VANILLA_SWING_TYPE_HEAVY = 2
} vanilla_SwingType;

typedef enum {
    VANILLA_TALENT_BURNING_SOUL = 23,
    VANILLA_TALENT_IMPROVED_FIRE_WARD = 24,
    VANILLA_TALENT_IMPROVED_SCORCH = 25,
    VANILLA_TALENT_IMPROVED_FIREBALL = 26,
    VANILLA_TALENT_IMPROVED_FIRE_BLAST = 27,
    VANILLA_TALENT_FLAME_THROWING = 28,
    VANILLA_TALENT_PYROBLAST = 29,
    VANILLA_TALENT_IMPACT = 30,
    VANILLA_TALENT_IMPROVED_FLAMESTRIKE = 31,
    VANILLA_TALENT_BLAST_WAVE = 32,
    VANILLA_TALENT_CRITICAL_MASS = 33,
    VANILLA_TALENT_IGNITE = 34,
    VANILLA_TALENT_FIRE_POWER = 35,
    VANILLA_TALENT_COMBUSTION = 36,
    VANILLA_TALENT_IMPROVED_FROSTBOLT = 37,
    VANILLA_TALENT_FROSTBITE = 38,
    VANILLA_TALENT_PIERCING_ICE = 61,
    VANILLA_TALENT_IMPROVED_FROST_NOVA = 62,
    VANILLA_TALENT_IMPROVED_BLIZZARD = 63,
    VANILLA_TALENT_IMPROVED_CONE_OF_COLD = 64,
    VANILLA_TALENT_PERMAFROST = 65,
    VANILLA_TALENT_FROST_CHANNELING = 66,
    VANILLA_TALENT_SHATTER = 67,
    VANILLA_TALENT_WINTERS_CHILL = 68,
    VANILLA_TALENT_COLD_SNAP = 69,
    VANILLA_TALENT_FROST_WARDING = 70,
    VANILLA_TALENT_ICE_BARRIER = 71,
    VANILLA_TALENT_ICE_BLOCK = 72,
    VANILLA_TALENT_ICE_SHARDS = 73,
    VANILLA_TALENT_ARCANE_SUBTLETY = 74,
    VANILLA_TALENT_ARCANE_CONCENTRATION = 75,
    VANILLA_TALENT_ARCANE_FOCUS = 76,
    VANILLA_TALENT_ARCANE_MIND = 77,
    VANILLA_TALENT_MAGE_WAND_SPECIALIZATION = 78,
    VANILLA_TALENT_IMPROVED_ARCANE_MISSILES = 80,
    VANILLA_TALENT_IMPROVED_ARCANE_EXPLOSION = 81,
    VANILLA_TALENT_MAGIC_ATTUNEMENT = 82,
    VANILLA_TALENT_IMPROVED_MANA_SHIELD = 83,
    VANILLA_TALENT_ARCANE_RESILIENCE = 85,
    VANILLA_TALENT_PRESENCE_OF_MIND = 86,
    VANILLA_TALENT_ARCANE_POWER = 87,
    VANILLA_TALENT_IMPROVED_COUNTERSPELL = 88,
    VANILLA_TALENT_DEEP_WOUNDS = 121,
    VANILLA_TALENT_WARRIOR_SWORD_SPECIALIZATION = 123,
    VANILLA_TALENT_IMPROVED_HEROIC_STRIKE = 124,
    VANILLA_TALENT_WARRIOR_MACE_SPECIALIZATION = 125,
    VANILLA_TALENT_IMPROVED_CHARGE = 126,
    VANILLA_TALENT_IMPROVED_REND = 127,
    VANILLA_TALENT_IMPROVED_THUNDER_CLAP = 128,
    VANILLA_TALENT_IMPROVED_HAMSTRING = 129,
    VANILLA_TALENT_WARRIOR_DEFLECTION = 130,
    VANILLA_TALENT_IMPROVED_OVERPOWER = 131,
    VANILLA_TALENT_AXE_SPECIALIZATION = 132,
    VANILLA_TALENT_SWEEPING_STRIKES = 133,
    VANILLA_TALENT_POLEARM_SPECIALIZATION = 134,
    VANILLA_TALENT_MORTAL_STRIKE = 135,
    VANILLA_TALENT_WARRIOR_TWO_HANDED_WEAPON_SPECIALIZATION = 136,
    VANILLA_TALENT_ANGER_MANAGEMENT = 137,
    VANILLA_TALENT_WARRIOR_ANTICIPATION = 138,
    VANILLA_TALENT_WARRIOR_TOUGHNESS = 140,
    VANILLA_TALENT_IRON_WILL = 141,
    VANILLA_TALENT_IMPROVED_BLOODRAGE = 142,
    VANILLA_TALENT_IMPROVED_TAUNT = 143,
    VANILLA_TALENT_DEFIANCE = 144,
    VANILLA_TALENT_IMPROVED_SHIELD_BLOCK = 145,
    VANILLA_TALENT_IMPROVED_SUNDER_ARMOR = 146,
    VANILLA_TALENT_IMPROVED_REVENGE = 147,
    VANILLA_TALENT_SHIELD_SLAM = 148,
    VANILLA_TALENT_IMPROVED_SHIELD_BASH = 149,
    VANILLA_TALENT_IMPROVED_SHIELD_WALL = 150,
    VANILLA_TALENT_IMPROVED_DISARM = 151,
    VANILLA_TALENT_CONCUSSION_BLOW = 152,
    VANILLA_TALENT_LAST_STAND = 153,
    VANILLA_TALENT_IMPROVED_BATTLE_SHOUT = 154,
    VANILLA_TALENT_ENRAGE = 155,
    VANILLA_TALENT_WARRIOR_FLURRY = 156,
    VANILLA_TALENT_CRUELTY = 157,
    VANILLA_TALENT_BOOMING_VOICE = 158,
    VANILLA_TALENT_UNBRIDLED_WRATH = 159,
    VANILLA_TALENT_PIERCING_HOWL = 160,
    VANILLA_TALENT_IMPROVED_DEMORALIZING_SHOUT = 161,
    VANILLA_TALENT_DEATH_WISH = 165,
    VANILLA_TALENT_IMPROVED_CLEAVE = 166,
    VANILLA_TALENT_BLOODTHIRST = 167,
    VANILLA_TALENT_IMPROVED_SLAM = 168,
    VANILLA_TALENT_ROGUE_PRECISION = 181,
    VANILLA_TALENT_DAGGER_SPECIALIZATION = 182,
    VANILLA_TALENT_FIST_WEAPON_SPECIALIZATION = 183,
    VANILLA_TALENT_ROGUE_MACE_SPECIALIZATION = 184,
    VANILLA_TALENT_ROGUE_LIGHTNING_REFLEXES = 186,
    VANILLA_TALENT_ROGUE_DEFLECTION = 187,
    VANILLA_TALENT_IMPROVED_SINISTER_STRIKE = 201,
    VANILLA_TALENT_IMPROVED_BACKSTAB = 202,
    VANILLA_TALENT_IMPROVED_GOUGE = 203,
    VANILLA_TALENT_ENDURANCE = 204,
    VANILLA_TALENT_ADRENALINE_RUSH = 205,
    VANILLA_TALENT_IMPROVED_KICK = 206,
    VANILLA_TALENT_ROGUE_DUAL_WIELD_SPECIALIZATION = 221,
    VANILLA_TALENT_IMPROVED_SPRINT = 222,
    VANILLA_TALENT_BLADE_FLURRY = 223,
    VANILLA_TALENT_MASTER_OF_DECEPTION = 241,
    VANILLA_TALENT_ROGUE_SWORD_SPECIALIZATION = 242,
    VANILLA_TALENT_CAMOUFLAGE = 244,
    VANILLA_TALENT_INITIATIVE = 245,
    VANILLA_TALENT_SETUP = 246,
    VANILLA_TALENT_ELUSIVENESS = 247,
    VANILLA_TALENT_OPPORTUNITY = 261,
    VANILLA_TALENT_IMPROVED_SAP = 262,
    VANILLA_TALENT_IMPROVED_AMBUSH = 263,
    VANILLA_TALENT_DIRTY_DEEDS = 265,
    VANILLA_TALENT_IMPROVED_POISONS = 268,
    VANILLA_TALENT_LETHALITY = 269,
    VANILLA_TALENT_MALICE = 270,
    VANILLA_TALENT_REMORSELESS_ATTACKS = 272,
    VANILLA_TALENT_RUTHLESSNESS = 273,
    VANILLA_TALENT_MURDER = 274,
    VANILLA_TALENT_IMPROVED_EVISCERATE = 276,
    VANILLA_TALENT_IMPROVED_SLICE_AND_DICE = 277,
    VANILLA_TALENT_IMPROVED_EXPOSE_ARMOR = 278,
    VANILLA_TALENT_IMPROVED_KIDNEY_SHOT = 279,
    VANILLA_TALENT_COLD_BLOOD = 280,
    VANILLA_TALENT_RELENTLESS_STRIKES = 281,
    VANILLA_TALENT_SEAL_FATE = 283,
    VANILLA_TALENT_PREPARATION = 284,
    VANILLA_TALENT_RIPOSTE = 301,
    VANILLA_TALENT_GHOSTLY_STRIKE = 303,
    VANILLA_TALENT_MARTYRDOM = 321,
    VANILLA_TALENT_POWER_INFUSION = 322,
    VANILLA_TALENT_MENTAL_AGILITY = 341,
    VANILLA_TALENT_UNBREAKABLE_WILL = 342,
    VANILLA_TALENT_IMPROVED_POWER_WORD_SHIELD = 343,
    VANILLA_TALENT_IMPROVED_POWER_WORD_FORTITUDE = 344,
    VANILLA_TALENT_PRIEST_WAND_SPECIALIZATION = 345,
    VANILLA_TALENT_IMPROVED_INNER_FIRE = 346,
    VANILLA_TALENT_MEDITATION = 347,
    VANILLA_TALENT_INNER_FOCUS = 348,
    VANILLA_TALENT_IMPROVED_MANA_BURN = 350,
    VANILLA_TALENT_DIVINE_SPIRIT = 351,
    VANILLA_TALENT_SILENT_RESOLVE = 352,
    VANILLA_TALENT_INSPIRATION = 361,
    VANILLA_TALENT_PREMEDITATION = 381,
    VANILLA_TALENT_VIGOR = 382,
    VANILLA_TALENT_HOLY_SPECIALIZATION = 401,
    VANILLA_TALENT_SPIRITUAL_GUIDANCE = 402,
    VANILLA_TALENT_SEARING_LIGHT = 403,
    VANILLA_TALENT_SPIRITUAL_HEALING = 404,
    VANILLA_TALENT_IMPROVED_RENEW = 406,
    VANILLA_TALENT_IMPROVED_HEALING = 408,
    VANILLA_TALENT_PRIEST_HEALING_FOCUS = 410,
    VANILLA_TALENT_SPELL_WARDING = 411,
    VANILLA_TALENT_IMPROVED_PRAYER_OF_HEALING = 413,
    VANILLA_TALENT_ARCANE_INSTABILITY = 421,
    VANILLA_TALENT_HOLY_NOVA = 442,
    VANILLA_TALENT_SHADOW_WEAVING = 461,
    VANILLA_TALENT_DARKNESS = 462,
    VANILLA_TALENT_SHADOW_FOCUS = 463,
    VANILLA_TALENT_BLACKOUT = 464,
    VANILLA_TALENT_SPIRIT_TAP = 465,
    VANILLA_TALENT_SHADOW_AFFINITY = 466,
    VANILLA_TALENT_IMPROVED_MIND_BLAST = 481,
    VANILLA_TALENT_IMPROVED_SHADOW_WORD_PAIN = 482,
    VANILLA_TALENT_IMPROVED_FADE = 483,
    VANILLA_TALENT_VAMPIRIC_EMBRACE = 484,
    VANILLA_TALENT_MIND_FLAY = 501,
    VANILLA_TALENT_SHADOWFORM = 521,
    VANILLA_TALENT_SILENCE = 541,
    VANILLA_TALENT_IMPROVED_PSYCHIC_SCREAM = 542,
    VANILLA_TALENT_CALL_OF_FLAME = 561,
    VANILLA_TALENT_CALL_OF_THUNDER = 562,
    VANILLA_TALENT_CONCUSSION = 563,
    VANILLA_TALENT_CONVECTION = 564,
    VANILLA_TALENT_ELEMENTAL_FURY = 565,
    VANILLA_TALENT_IMPROVED_FIRE_TOTEMS = 567,
    VANILLA_TALENT_EARTHS_GRASP = 572,
    VANILLA_TALENT_ELEMENTAL_MASTERY = 573,
    VANILLA_TALENT_ELEMENTAL_FOCUS = 574,
    VANILLA_TALENT_REVERBERATION = 575,
    VANILLA_TALENT_ANCESTRAL_HEALING = 581,
    VANILLA_TALENT_TOTEMIC_MASTERY = 582,
    VANILLA_TALENT_NATURES_GUIDANCE = 583,
    VANILLA_TALENT_IMPROVED_HEALING_WAVE = 586,
    VANILLA_TALENT_SHAMAN_HEALING_FOCUS = 587,
    VANILLA_TALENT_RESTORATIVE_TOTEMS = 588,
    VANILLA_TALENT_IMPROVED_REINCARNATION = 589,
    VANILLA_TALENT_MANA_TIDE_TOTEM = 590,
    VANILLA_TALENT_SHAMAN_NATURES_SWIFTNESS = 591,
    VANILLA_TALENT_PURIFICATION = 592,
    VANILLA_TALENT_TIDAL_FOCUS = 593,
    VANILLA_TALENT_TIDAL_MASTERY = 594,
    VANILLA_TALENT_TOTEMIC_FOCUS = 595,
    VANILLA_TALENT_SHAMAN_ANTICIPATION = 601,
    VANILLA_TALENT_SHAMAN_FLURRY = 602,
    VANILLA_TALENT_IMPROVED_GHOST_WOLF = 605,
    VANILLA_TALENT_IMPROVED_LIGHTNING_SHIELD = 607,
    VANILLA_TALENT_GUARDIAN_TOTEMS = 609,
    VANILLA_TALENT_ENHANCING_TOTEMS = 610,
    VANILLA_TALENT_ELEMENTAL_WEAPONS = 611,
    VANILLA_TALENT_SHAMAN_SHIELD_SPECIALIZATION = 612,
    VANILLA_TALENT_THUNDERING_STRIKES = 613,
    VANILLA_TALENT_ANCESTRAL_KNOWLEDGE = 614,
    VANILLA_TALENT_SHAMAN_TOUGHNESS = 615,
    VANILLA_TALENT_PARRY = 616,
    VANILLA_TALENT_TWO_HANDED_AXES_AND_MACES = 617,
    VANILLA_TALENT_TACTICAL_MASTERY = 641,
    VANILLA_TALENT_BLOOD_CRAZE = 661,
    VANILLA_TALENT_IMPALE = 662,
    VANILLA_TALENT_HEMORRHAGE = 681,
    VANILLA_TALENT_VILE_POISONS = 682,
    VANILLA_TALENT_WARRIOR_ONE_HANDED_WEAPON_SPECIALIZATION = 702,
    VANILLA_TALENT_LIGHTNING_MASTERY = 721,
    VANILLA_TALENT_ARCTIC_REACH = 741,
    VANILLA_TALENT_NATURES_GRASP = 761,
    VANILLA_TALENT_IMPROVED_WRATH = 762,
    VANILLA_TALENT_IMPROVED_MOONFIRE = 763,
    VANILLA_TALENT_NATURES_REACH = 764,
    VANILLA_TALENT_NATURAL_SHAPESHIFTER = 781,
    VANILLA_TALENT_IMPROVED_THORNS = 782,
    VANILLA_TALENT_MOONGLOW = 783,
    VANILLA_TALENT_IMPROVED_STARFIRE = 784,
    VANILLA_TALENT_IMPROVED_ENTANGLING_ROOTS = 787,
    VANILLA_TALENT_OMEN_OF_CLARITY = 788,
    VANILLA_TALENT_NATURES_GRACE = 789,
    VANILLA_TALENT_MOONFURY = 790,
    VANILLA_TALENT_NATURAL_WEAPONS = 791,
    VANILLA_TALENT_DRUID_VENGEANCE = 792,
    VANILLA_TALENT_MOONKIN_FORM = 793,
    VANILLA_TALENT_DRUID_THICK_HIDE = 794,
    VANILLA_TALENT_FERAL_AGGRESSION = 795,
    VANILLA_TALENT_DRUID_FEROCITY = 796,
    VANILLA_TALENT_BRUTAL_IMPACT = 797,
    VANILLA_TALENT_SHARPENED_CLAWS = 798,
    VANILLA_TALENT_FERAL_INSTINCT = 799,
    VANILLA_TALENT_BLOOD_FRENZY = 800,
    VANILLA_TALENT_PRIMAL_FURY = 801,
    VANILLA_TALENT_IMPROVED_SHRED = 802,
    VANILLA_TALENT_PREDATORY_STRIKES = 803,
    VANILLA_TALENT_FERAL_CHARGE = 804,
    VANILLA_TALENT_SAVAGE_FURY = 805,
    VANILLA_TALENT_FELINE_SWIFTNESS = 807,
    VANILLA_TALENT_HEART_OF_THE_WILD = 808,
    VANILLA_TALENT_LEADER_OF_THE_PACK = 809,
    VANILLA_TALENT_IMPROVED_MARK_OF_THE_WILD = 821,
    VANILLA_TALENT_FUROR = 822,
    VANILLA_TALENT_NATURES_FOCUS = 823,
    VANILLA_TALENT_IMPROVED_HEALING_TOUCH = 824,
    VANILLA_TALENT_IMPROVED_REGROWTH = 825,
    VANILLA_TALENT_IMPROVED_ENRAGE = 826,
    VANILLA_TALENT_INSECT_SWARM = 827,
    VANILLA_TALENT_GIFT_OF_NATURE = 828,
    VANILLA_TALENT_REFLECTION = 829,
    VANILLA_TALENT_IMPROVED_REJUVENATION = 830,
    VANILLA_TALENT_DRUID_NATURES_SWIFTNESS = 831,
    VANILLA_TALENT_SUBTLETY = 841,
    VANILLA_TALENT_IMPROVED_TRANQUILITY = 842,
    VANILLA_TALENT_TRANQUIL_SPIRIT = 843,
    VANILLA_TALENT_SWIFTMEND = 844,
    VANILLA_TALENT_SHADOW_REACH = 881,
    VANILLA_TALENT_STORMSTRIKE = 901,
    VANILLA_TALENT_IMPROVED_NATURES_GRASP = 921,
    VANILLA_TALENT_CATACLYSM = 941,
    VANILLA_TALENT_BANE = 943,
    VANILLA_TALENT_IMPROVED_SHADOW_BOLT = 944,
    VANILLA_TALENT_IMPROVED_IMMOLATE = 961,
    VANILLA_TALENT_SHADOWBURN = 963,
    VANILLA_TALENT_DESTRUCTIVE_REACH = 964,
    VANILLA_TALENT_IMPROVED_SEARING_PAIN = 965,
    VANILLA_TALENT_EMBERSTORM = 966,
    VANILLA_TALENT_RUIN = 967,
    VANILLA_TALENT_CONFLAGRATE = 968,
    VANILLA_TALENT_DEVASTATION = 981,
    VANILLA_TALENT_AFTERMATH = 982,
    VANILLA_TALENT_IMPROVED_FIREBOLT = 983,
    VANILLA_TALENT_IMPROVED_LASH_OF_PAIN = 984,
    VANILLA_TALENT_INTENSITY = 985,
    VANILLA_TALENT_PYROCLASM = 986,
    VANILLA_TALENT_FEL_CONCENTRATION = 1001,
    VANILLA_TALENT_NIGHTFALL = 1002,
    VANILLA_TALENT_IMPROVED_CORRUPTION = 1003,
    VANILLA_TALENT_IMPROVED_DRAIN_LIFE = 1004,
    VANILLA_TALENT_SUPPRESSION = 1005,
    VANILLA_TALENT_IMPROVED_CURSE_OF_WEAKNESS = 1006,
    VANILLA_TALENT_IMPROVED_LIFE_TAP = 1007,
    VANILLA_TALENT_GRIM_REACH = 1021,
    VANILLA_TALENT_DARK_PACT = 1022,
    VANILLA_TALENT_SIPHON_LIFE = 1041,
    VANILLA_TALENT_SHADOW_MASTERY = 1042,
    VANILLA_TALENT_AMPLIFY_CURSE = 1061,
    VANILLA_TALENT_CURSE_OF_EXHAUSTION = 1081,
    VANILLA_TALENT_IMPROVED_CURSE_OF_EXHAUSTION = 1082,
    VANILLA_TALENT_IMPROVED_DRAIN_SOUL = 1101,
    VANILLA_TALENT_IMPROVED_DRAIN_MANA = 1121,
    VANILLA_TALENT_AGGRESSION = 1122,
    VANILLA_TALENT_SERRATED_BLADES = 1123,
    VANILLA_TALENT_INCINERATE = 1141,
    VANILLA_TALENT_ARCANE_MEDITATION = 1142,
    VANILLA_TALENT_FAERIE_FIRE_FERAL = 1162,
    VANILLA_TALENT_DIVINE_FURY = 1181,
    VANILLA_TALENT_MENTAL_STRENGTH = 1201,
    VANILLA_TALENT_FORCE_OF_WILL = 1202,
    VANILLA_TALENT_IMPROVED_HEALTHSTONE = 1221,
    VANILLA_TALENT_IMPROVED_IMP = 1222,
    VANILLA_TALENT_DEMONIC_EMBRACE = 1223,
    VANILLA_TALENT_IMPROVED_HEALTH_FUNNEL = 1224,
    VANILLA_TALENT_IMPROVED_VOIDWALKER = 1225,
    VANILLA_TALENT_FEL_DOMINATION = 1226,
    VANILLA_TALENT_MASTER_SUMMONER = 1227,
    VANILLA_TALENT_FEL_STAMINA = 1241,
    VANILLA_TALENT_FEL_INTELLECT = 1242,
    VANILLA_TALENT_IMPROVED_SUCCUBUS = 1243,
    VANILLA_TALENT_MASTER_DEMONOLOGIST = 1244,
    VANILLA_TALENT_IMPROVED_FIRESTONE = 1261,
    VANILLA_TALENT_UNHOLY_POWER = 1262,
    VANILLA_TALENT_IMPROVED_SPELLSTONE = 1263,
    VANILLA_TALENT_DEMONIC_SACRIFICE = 1281,
    VANILLA_TALENT_SOUL_LINK = 1282,
    VANILLA_TALENT_IMPROVED_ENSLAVE_DEMON = 1283,
    VANILLA_TALENT_IMPROVED_CURSE_OF_AGONY = 1284,
    VANILLA_TALENT_HUMANOID_SLAYING = 1301,
    VANILLA_TALENT_HUNTER_LIGHTNING_REFLEXES = 1303,
    VANILLA_TALENT_ENTRAPMENT = 1304,
    VANILLA_TALENT_IMPROVED_WING_CLIP = 1305,
    VANILLA_TALENT_CLEVER_TRAPS = 1306,
    VANILLA_TALENT_DETERRENCE = 1308,
    VANILLA_TALENT_IMPROVED_FEIGN_DEATH = 1309,
    VANILLA_TALENT_SUREFOOTED = 1310,
    VANILLA_TALENT_HUNTER_DEFLECTION = 1311,
    VANILLA_TALENT_COUNTERATTACK = 1312,
    VANILLA_TALENT_KILLER_INSTINCT = 1321,
    VANILLA_TALENT_TRAP_MASTERY = 1322,
    VANILLA_TALENT_WYVERN_STING = 1325,
    VANILLA_TALENT_IMPROVED_CONCUSSIVE_SHOT = 1341,
    VANILLA_TALENT_EFFICIENCY = 1342,
    VANILLA_TALENT_IMPROVED_HUNTERS_MARK = 1343,
    VANILLA_TALENT_LETHAL_SHOTS = 1344,
    VANILLA_TALENT_AIMED_SHOT = 1345,
    VANILLA_TALENT_IMPROVED_ARCANE_SHOT = 1346,
    VANILLA_TALENT_BARRAGE = 1347,
    VANILLA_TALENT_IMPROVED_SERPENT_STING = 1348,
    VANILLA_TALENT_MORTAL_SHOTS = 1349,
    VANILLA_TALENT_IMPROVED_SCORPID_STING = 1351,
    VANILLA_TALENT_HAWK_EYE = 1352,
    VANILLA_TALENT_SCATTER_SHOT = 1353,
    VANILLA_TALENT_TRUESHOT_AURA = 1361,
    VANILLA_TALENT_RANGED_WEAPON_SPECIALIZATION = 1362,
    VANILLA_TALENT_IMPROVED_ASPECT_OF_THE_MONKEY = 1381,
    VANILLA_TALENT_IMPROVED_ASPECT_OF_THE_HAWK = 1382,
    VANILLA_TALENT_PATHFINDING = 1384,
    VANILLA_TALENT_IMPROVED_MEND_PET = 1385,
    VANILLA_TALENT_BESTIAL_WRATH = 1386,
    VANILLA_TALENT_INTIMIDATION = 1387,
    VANILLA_TALENT_SPIRIT_BOND = 1388,
    VANILLA_TALENT_ENDURANCE_TRAINING = 1389,
    VANILLA_TALENT_BESTIAL_DISCIPLINE = 1390,
    VANILLA_TALENT_BESTIAL_SWIFTNESS = 1391,
    VANILLA_TALENT_HUNTER_FEROCITY = 1393,
    VANILLA_TALENT_HUNTER_THICK_HIDE = 1395,
    VANILLA_TALENT_UNLEASHED_FURY = 1396,
    VANILLA_TALENT_FRENZY = 1397,
    VANILLA_TALENT_IMPROVED_BLESSING_OF_MIGHT = 1401,
    VANILLA_TALENT_PALADIN_VENGEANCE = 1402,
    VANILLA_TALENT_PALADIN_DEFLECTION = 1403,
    VANILLA_TALENT_IMPROVED_RETRIBUTION_AURA = 1405,
    VANILLA_TALENT_BENEDICTION = 1407,
    VANILLA_TALENT_SANCTITY_AURA = 1409,
    VANILLA_TALENT_PALADIN_TWO_HANDED_WEAPON_SPECIALIZATION = 1410,
    VANILLA_TALENT_CONVICTION = 1411,
    VANILLA_TALENT_REDOUBT = 1421,
    VANILLA_TALENT_IMPROVED_DEVOTION_AURA = 1422,
    VANILLA_TALENT_PALADIN_TOUGHNESS = 1423,
    VANILLA_TALENT_PALADIN_SHIELD_SPECIALIZATION = 1424,
    VANILLA_TALENT_GUARDIANS_FAVOR = 1425,
    VANILLA_TALENT_RECKONING = 1426,
    VANILLA_TALENT_PALADIN_ONE_HANDED_WEAPON_SPECIALIZATION = 1429,
    VANILLA_TALENT_HOLY_SHIELD = 1430,
    VANILLA_TALENT_BLESSING_OF_SANCTUARY = 1431,
    VANILLA_TALENT_SPIRITUAL_FOCUS = 1432,
    VANILLA_TALENT_DIVINE_FAVOR = 1433,
    VANILLA_TALENT_CONSECRATION = 1435,
    VANILLA_TALENT_REPENTANCE = 1441,
    VANILLA_TALENT_BLESSING_OF_KINGS = 1442,
    VANILLA_TALENT_IMPROVED_LAY_ON_HANDS = 1443,
    VANILLA_TALENT_HEALING_LIGHT = 1444,
    VANILLA_TALENT_IMPROVED_BLESSING_OF_WISDOM = 1446,
    VANILLA_TALENT_DIVINE_INTELLECT = 1449,
    VANILLA_TALENT_DIVINE_STRENGTH = 1450,
    VANILLA_TALENT_ILLUMINATION = 1461,
    VANILLA_TALENT_IMPROVED_SEAL_OF_RIGHTEOUSNESS = 1463,
    VANILLA_TALENT_IMPROVED_SEAL_OF_THE_CRUSADER = 1464,
    VANILLA_TALENT_LASTING_JUDGEMENT = 1465,
    VANILLA_TALENT_SEAL_OF_COMMAND = 1481,
    VANILLA_TALENT_IMPROVED_RIGHTEOUS_FURY = 1501,
    VANILLA_TALENT_HOLY_SHOCK = 1502,
    VANILLA_TALENT_IMPROVED_HAMMER_OF_JUSTICE = 1521,
    VANILLA_TALENT_IMPROVED_BERSERKER_RAGE = 1541,
    VANILLA_TALENT_IMPROVED_EXECUTE = 1542,
    VANILLA_TALENT_IMPROVED_INTERCEPT = 1543,
    VANILLA_TALENT_SPIRIT_OF_REDEMPTION = 1561,
    VANILLA_TALENT_WARRIOR_DUAL_WIELD_SPECIALIZATION = 1581,
    VANILLA_TALENT_WARRIOR_SHIELD_SPECIALIZATION = 1601,
    VANILLA_TALENT_SAVAGE_STRIKES = 1621,
    VANILLA_TALENT_SURVIVALIST = 1622,
    VANILLA_TALENT_MONSTER_SLAYING = 1623,
    VANILLA_TALENT_IMPROVED_EYES_OF_THE_BEAST = 1624,
    VANILLA_TALENT_IMPROVED_REVIVE_PET = 1625,
    VANILLA_TALENT_IMPROVED_CONCENTRATION_AURA = 1626,
    VANILLA_TALENT_HOLY_POWER = 1627,
    VANILLA_TALENT_UNYIELDING_FAITH = 1628,
    VANILLA_TALENT_PALADIN_ANTICIPATION = 1629,
    VANILLA_TALENT_PALADIN_PRECISION = 1630,
    VANILLA_TALENT_IMPROVED_JUDGEMENT = 1631,
    VANILLA_TALENT_EYE_FOR_AN_EYE = 1632,
    VANILLA_TALENT_VINDICATION = 1633,
    VANILLA_TALENT_PURSUIT_OF_JUSTICE = 1634,
    VANILLA_TALENT_HOLY_REACH = 1635,
    VANILLA_TALENT_BLESSED_RECOVERY = 1636,
    VANILLA_TALENT_LIGHTWELL = 1637,
    VANILLA_TALENT_IMPROVED_VAMPIRIC_EMBRACE = 1638,
    VANILLA_TALENT_MASTER_OF_ELEMENTS = 1639,
    VANILLA_TALENT_ELEMENTAL_WARDING = 1640,
    VANILLA_TALENT_STORM_REACH = 1641,
    VANILLA_TALENT_EYE_OF_THE_STORM = 1642,
    VANILLA_TALENT_WEAPON_MASTERY = 1643,
    VANILLA_TALENT_ELEMENTAL_DEVASTATION = 1645,
    VANILLA_TALENT_HEALING_GRACE = 1646,
    VANILLA_TALENT_IMPROVED_WEAPON_TOTEMS = 1647,
    VANILLA_TALENT_HEALING_WAY = 1648,
    VANILLA_TALENT_ELEMENTAL_PRECISION = 1649,
    VANILLA_TALENT_MAGIC_ABSORPTION = 1650,
    VANILLA_TALENT_SLEIGHT_OF_HAND = 1700,
    VANILLA_TALENT_HEIGHTENED_SENSES = 1701,
    VANILLA_TALENT_DEADLINESS = 1702,
    VANILLA_TALENT_WEAPON_EXPERTISE = 1703
} vanilla_Talent;

typedef enum {
    VANILLA_TEXT_EMOTE_AGREE = 1,
    VANILLA_TEXT_EMOTE_AMAZE = 2,
    VANILLA_TEXT_EMOTE_ANGRY = 3,
    VANILLA_TEXT_EMOTE_APOLOGIZE = 4,
    VANILLA_TEXT_EMOTE_APPLAUD = 5,
    VANILLA_TEXT_EMOTE_BASHFUL = 6,
    VANILLA_TEXT_EMOTE_BECKON = 7,
    VANILLA_TEXT_EMOTE_BEG = 8,
    VANILLA_TEXT_EMOTE_BITE = 9,
    VANILLA_TEXT_EMOTE_BLEED = 10,
    VANILLA_TEXT_EMOTE_BLINK = 11,
    VANILLA_TEXT_EMOTE_BLUSH = 12,
    VANILLA_TEXT_EMOTE_BONK = 13,
    VANILLA_TEXT_EMOTE_BORED = 14,
    VANILLA_TEXT_EMOTE_BOUNCE = 15,
    VANILLA_TEXT_EMOTE_BRB = 16,
    VANILLA_TEXT_EMOTE_BOW = 17,
    VANILLA_TEXT_EMOTE_BURP = 18,
    VANILLA_TEXT_EMOTE_BYE = 19,
    VANILLA_TEXT_EMOTE_CACKLE = 20,
    VANILLA_TEXT_EMOTE_CHEER = 21,
    VANILLA_TEXT_EMOTE_CHICKEN = 22,
    VANILLA_TEXT_EMOTE_CHUCKLE = 23,
    VANILLA_TEXT_EMOTE_CLAP = 24,
    VANILLA_TEXT_EMOTE_CONFUSED = 25,
    VANILLA_TEXT_EMOTE_CONGRATULATE = 26,
    VANILLA_TEXT_EMOTE_COUGH = 27,
    VANILLA_TEXT_EMOTE_COWER = 28,
    VANILLA_TEXT_EMOTE_CRACK = 29,
    VANILLA_TEXT_EMOTE_CRINGE = 30,
    VANILLA_TEXT_EMOTE_CRY = 31,
    VANILLA_TEXT_EMOTE_CURIOUS = 32,
    VANILLA_TEXT_EMOTE_CURTSEY = 33,
    VANILLA_TEXT_EMOTE_DANCE = 34,
    VANILLA_TEXT_EMOTE_DRINK = 35,
    VANILLA_TEXT_EMOTE_DROOL = 36,
    VANILLA_TEXT_EMOTE_EAT = 37,
    VANILLA_TEXT_EMOTE_EYE = 38,
    VANILLA_TEXT_EMOTE_FART = 39,
    VANILLA_TEXT_EMOTE_FIDGET = 40,
    VANILLA_TEXT_EMOTE_FLEX = 41,
    VANILLA_TEXT_EMOTE_FROWN = 42,
    VANILLA_TEXT_EMOTE_GASP = 43,
    VANILLA_TEXT_EMOTE_GAZE = 44,
    VANILLA_TEXT_EMOTE_GIGGLE = 45,
    VANILLA_TEXT_EMOTE_GLARE = 46,
    VANILLA_TEXT_EMOTE_GLOAT = 47,
    VANILLA_TEXT_EMOTE_GREET = 48,
    VANILLA_TEXT_EMOTE_GRIN = 49,
    VANILLA_TEXT_EMOTE_GROAN = 50,
    VANILLA_TEXT_EMOTE_GROVEL = 51,
    VANILLA_TEXT_EMOTE_GUFFAW = 52,
    VANILLA_TEXT_EMOTE_HAIL = 53,
    VANILLA_TEXT_EMOTE_HAPPY = 54,
    VANILLA_TEXT_EMOTE_HELLO = 55,
    VANILLA_TEXT_EMOTE_HUG = 56,
    VANILLA_TEXT_EMOTE_HUNGRY = 57,
    VANILLA_TEXT_EMOTE_KISS = 58,
    VANILLA_TEXT_EMOTE_KNEEL = 59,
    VANILLA_TEXT_EMOTE_LAUGH = 60,
    VANILLA_TEXT_EMOTE_LAYDOWN = 61,
    VANILLA_TEXT_EMOTE_MASSAGE = 62,
    VANILLA_TEXT_EMOTE_MOAN = 63,
    VANILLA_TEXT_EMOTE_MOON = 64,
    VANILLA_TEXT_EMOTE_MOURN = 65,
    VANILLA_TEXT_EMOTE_NO = 66,
    VANILLA_TEXT_EMOTE_NOD = 67,
    VANILLA_TEXT_EMOTE_NOSE_PICK = 68,
    VANILLA_TEXT_EMOTE_PANIC = 69,
    VANILLA_TEXT_EMOTE_PEER = 70,
    VANILLA_TEXT_EMOTE_PLEAD = 71,
    VANILLA_TEXT_EMOTE_POINT = 72,
    VANILLA_TEXT_EMOTE_POKE = 73,
    VANILLA_TEXT_EMOTE_PRAY = 74,
    VANILLA_TEXT_EMOTE_ROAR = 75,
    VANILLA_TEXT_EMOTE_ROFL = 76,
    VANILLA_TEXT_EMOTE_RUDE = 77,
    VANILLA_TEXT_EMOTE_SALUTE = 78,
    VANILLA_TEXT_EMOTE_SCRATCH = 79,
    VANILLA_TEXT_EMOTE_SEXY = 80,
    VANILLA_TEXT_EMOTE_SHAKE = 81,
    VANILLA_TEXT_EMOTE_SHOUT = 82,
    VANILLA_TEXT_EMOTE_SHRUG = 83,
    VANILLA_TEXT_EMOTE_SHY = 84,
    VANILLA_TEXT_EMOTE_SIGH = 85,
    VANILLA_TEXT_EMOTE_SIT = 86,
    VANILLA_TEXT_EMOTE_SLEEP = 87,
    VANILLA_TEXT_EMOTE_SNARL = 88,
    VANILLA_TEXT_EMOTE_SPIT = 89,
    VANILLA_TEXT_EMOTE_STARE = 90,
    VANILLA_TEXT_EMOTE_SURPRISED = 91,
    VANILLA_TEXT_EMOTE_SURRENDER = 92,
    VANILLA_TEXT_EMOTE_TALK = 93,
    VANILLA_TEXT_EMOTE_TALK_EX = 94,
    VANILLA_TEXT_EMOTE_TALK_Q = 95,
    VANILLA_TEXT_EMOTE_TAP = 96,
    VANILLA_TEXT_EMOTE_THANK = 97,
    VANILLA_TEXT_EMOTE_THREATEN = 98,
    VANILLA_TEXT_EMOTE_TIRED = 99,
    VANILLA_TEXT_EMOTE_VICTORY = 100,
    VANILLA_TEXT_EMOTE_WAVE = 101,
    VANILLA_TEXT_EMOTE_WELCOME = 102,
    VANILLA_TEXT_EMOTE_WHINE = 103,
    VANILLA_TEXT_EMOTE_WHISTLE = 104,
    VANILLA_TEXT_EMOTE_WORK = 105,
    VANILLA_TEXT_EMOTE_YAWN = 106,
    VANILLA_TEXT_EMOTE_BOGGLE = 107,
    VANILLA_TEXT_EMOTE_CALM = 108,
    VANILLA_TEXT_EMOTE_COLD = 109,
    VANILLA_TEXT_EMOTE_COMFORT = 110,
    VANILLA_TEXT_EMOTE_CUDDLE = 111,
    VANILLA_TEXT_EMOTE_DUCK = 112,
    VANILLA_TEXT_EMOTE_INSULT = 113,
    VANILLA_TEXT_EMOTE_INTRODUCE = 114,
    VANILLA_TEXT_EMOTE_JK = 115,
    VANILLA_TEXT_EMOTE_LICK = 116,
    VANILLA_TEXT_EMOTE_LISTEN = 117,
    VANILLA_TEXT_EMOTE_LOST = 118,
    VANILLA_TEXT_EMOTE_MOCK = 119,
    VANILLA_TEXT_EMOTE_PONDER = 120,
    VANILLA_TEXT_EMOTE_POUNCE = 121,
    VANILLA_TEXT_EMOTE_PRAISE = 122,
    VANILLA_TEXT_EMOTE_PURR = 123,
    VANILLA_TEXT_EMOTE_PUZZLE = 124,
    VANILLA_TEXT_EMOTE_RAISE = 125,
    VANILLA_TEXT_EMOTE_READY = 126,
    VANILLA_TEXT_EMOTE_SHIMMY = 127,
    VANILLA_TEXT_EMOTE_SHIVER = 128,
    VANILLA_TEXT_EMOTE_SHOO = 129,
    VANILLA_TEXT_EMOTE_SLAP = 130,
    VANILLA_TEXT_EMOTE_SMIRK = 131,
    VANILLA_TEXT_EMOTE_SNIFF = 132,
    VANILLA_TEXT_EMOTE_SNUB = 133,
    VANILLA_TEXT_EMOTE_SOOTHE = 134,
    VANILLA_TEXT_EMOTE_STINK = 135,
    VANILLA_TEXT_EMOTE_TAUNT = 136,
    VANILLA_TEXT_EMOTE_TEASE = 137,
    VANILLA_TEXT_EMOTE_THIRSTY = 138,
    VANILLA_TEXT_EMOTE_VETO = 139,
    VANILLA_TEXT_EMOTE_SNICKER = 140,
    VANILLA_TEXT_EMOTE_STAND = 141,
    VANILLA_TEXT_EMOTE_TICKLE = 142,
    VANILLA_TEXT_EMOTE_VIOLIN = 143,
    VANILLA_TEXT_EMOTE_SMILE = 163,
    VANILLA_TEXT_EMOTE_RASP = 183,
    VANILLA_TEXT_EMOTE_PITY = 203,
    VANILLA_TEXT_EMOTE_GROWL = 204,
    VANILLA_TEXT_EMOTE_BARK = 205,
    VANILLA_TEXT_EMOTE_SCARED = 223,
    VANILLA_TEXT_EMOTE_FLOP = 224,
    VANILLA_TEXT_EMOTE_LOVE = 225,
    VANILLA_TEXT_EMOTE_MOO = 226,
    VANILLA_TEXT_EMOTE_COMMEND = 243,
    VANILLA_TEXT_EMOTE_TRAIN = 264,
    VANILLA_TEXT_EMOTE_HELPME = 303,
    VANILLA_TEXT_EMOTE_INCOMING = 304,
    VANILLA_TEXT_EMOTE_CHARGE = 305,
    VANILLA_TEXT_EMOTE_FLEE = 306,
    VANILLA_TEXT_EMOTE_ATTACK_MY_TARGET = 307,
    VANILLA_TEXT_EMOTE_OOM = 323,
    VANILLA_TEXT_EMOTE_FOLLOW = 324,
    VANILLA_TEXT_EMOTE_WAIT = 325,
    VANILLA_TEXT_EMOTE_HEAL_ME = 326,
    VANILLA_TEXT_EMOTE_OPEN_FIRE = 327,
    VANILLA_TEXT_EMOTE_FLIRT = 328,
    VANILLA_TEXT_EMOTE_JOKE = 329,
    VANILLA_TEXT_EMOTE_GOLF_CLAP = 343,
    VANILLA_TEXT_EMOTE_WINK = 363,
    VANILLA_TEXT_EMOTE_PAT = 364
} vanilla_TextEmote;

typedef enum {
    VANILLA_TIMER_TYPE_FATIGUE = 0,
    VANILLA_TIMER_TYPE_BREATH = 1,
    VANILLA_TIMER_TYPE_FEIGN_DEATH = 2,
    VANILLA_TIMER_TYPE_ENVIRONMENTAL = 3
} vanilla_TimerType;

typedef enum {
    VANILLA_TRADE_STATUS_BUSY = 0,
    VANILLA_TRADE_STATUS_BEGIN_TRADE = 1,
    VANILLA_TRADE_STATUS_OPEN_WINDOW = 2,
    VANILLA_TRADE_STATUS_TRADE_CANCELED = 3,
    VANILLA_TRADE_STATUS_TRADE_ACCEPT = 4,
    VANILLA_TRADE_STATUS_BUSY_2 = 5,
    VANILLA_TRADE_STATUS_NO_TARGET = 6,
    VANILLA_TRADE_STATUS_BACK_TO_TRADE = 7,
    VANILLA_TRADE_STATUS_TRADE_COMPLETE = 8,
    VANILLA_TRADE_STATUS_TRADE_REJECTED = 9,
    VANILLA_TRADE_STATUS_TARGET_TO_FAR = 10,
    VANILLA_TRADE_STATUS_WRONG_FACTION = 11,
    VANILLA_TRADE_STATUS_CLOSE_WINDOW = 12,
    VANILLA_TRADE_STATUS_UNKNOWN_13 = 13,
    VANILLA_TRADE_STATUS_IGNORE_YOU = 14,
    VANILLA_TRADE_STATUS_YOU_STUNNED = 15,
    VANILLA_TRADE_STATUS_TARGET_STUNNED = 16,
    VANILLA_TRADE_STATUS_YOU_DEAD = 17,
    VANILLA_TRADE_STATUS_TARGET_DEAD = 18,
    VANILLA_TRADE_STATUS_YOU_LOGOUT = 19,
    VANILLA_TRADE_STATUS_TARGET_LOGOUT = 20,
    VANILLA_TRADE_STATUS_TRIAL_ACCOUNT = 21,
    VANILLA_TRADE_STATUS_ONLY_CONJURED = 22,
    VANILLA_TRADE_STATUS_NOT_ON_TAPLIST = 23
} vanilla_TradeStatus;

typedef enum {
    VANILLA_TRAINER_SPELL_STATE_GREEN = 0,
    VANILLA_TRAINER_SPELL_STATE_RED = 1,
    VANILLA_TRAINER_SPELL_STATE_GRAY = 2
} vanilla_TrainerSpellState;

typedef enum {
    VANILLA_TRAINING_FAILURE_REASON_UNAVAILABLE = 0,
    VANILLA_TRAINING_FAILURE_REASON_NOT_ENOUGH_MONEY = 1,
    VANILLA_TRAINING_FAILURE_REASON_NOT_ENOUGH_SKILL = 2
} vanilla_TrainingFailureReason;

typedef enum {
    VANILLA_TRANSFER_ABORT_REASON_NONE = 0,
    VANILLA_TRANSFER_ABORT_REASON_IS_FULL = 1,
    VANILLA_TRANSFER_ABORT_REASON_NOT_FOUND = 2,
    VANILLA_TRANSFER_ABORT_REASON_TOO_MANY_INSTANCES = 3,
    VANILLA_TRANSFER_ABORT_REASON_ZONE_IS_IN_COMBAT = 5
} vanilla_TransferAbortReason;

typedef enum {
    VANILLA_UNIT_STAND_STATE_STAND = 0,
    VANILLA_UNIT_STAND_STATE_SIT = 1,
    VANILLA_UNIT_STAND_STATE_SIT_CHAIR = 2,
    VANILLA_UNIT_STAND_STATE_SLEEP = 3,
    VANILLA_UNIT_STAND_STATE_SIT_LOW_CHAIR = 4,
    VANILLA_UNIT_STAND_STATE_SIT_MEDIUM_CHAIR = 5,
    VANILLA_UNIT_STAND_STATE_SIT_HIGH_CHAIR = 6,
    VANILLA_UNIT_STAND_STATE_DEAD = 7,
    VANILLA_UNIT_STAND_STATE_KNEEL = 8,
    VANILLA_UNIT_STAND_STATE_CUSTOM = 9
} vanilla_UnitStandState;

typedef enum {
    VANILLA_UPDATE_TYPE_VALUES = 0,
    VANILLA_UPDATE_TYPE_MOVEMENT = 1,
    VANILLA_UPDATE_TYPE_CREATE_OBJECT = 2,
    VANILLA_UPDATE_TYPE_CREATE_OBJECT2 = 3,
    VANILLA_UPDATE_TYPE_OUT_OF_RANGE_OBJECTS = 4,
    VANILLA_UPDATE_TYPE_NEAR_OBJECTS = 5
} vanilla_UpdateType;

typedef enum {
    VANILLA_URL_INFO_UNAVAILABLE = 0,
    VANILLA_URL_INFO_AVAILABLE = 1
} vanilla_UrlInfo;

typedef enum {
    VANILLA_WEATHER_CHANGE_TYPE_SMOOTH = 0,
    VANILLA_WEATHER_CHANGE_TYPE_INSTANT = 1
} vanilla_WeatherChangeType;

typedef enum {
    VANILLA_WEATHER_TYPE_FINE = 0,
    VANILLA_WEATHER_TYPE_RAIN = 1,
    VANILLA_WEATHER_TYPE_SNOW = 2,
    VANILLA_WEATHER_TYPE_STORM = 3
} vanilla_WeatherType;

typedef enum {
    VANILLA_WORLD_RESULT_RESPONSE_SUCCESS = 0,
    VANILLA_WORLD_RESULT_RESPONSE_FAILURE = 1,
    VANILLA_WORLD_RESULT_RESPONSE_CANCELLED = 2,
    VANILLA_WORLD_RESULT_RESPONSE_DISCONNECTED = 3,
    VANILLA_WORLD_RESULT_RESPONSE_FAILED_TO_CONNECT = 4,
    VANILLA_WORLD_RESULT_RESPONSE_CONNECTED = 5,
    VANILLA_WORLD_RESULT_RESPONSE_VERSION_MISMATCH = 6,
    VANILLA_WORLD_RESULT_CSTATUS_CONNECTING = 7,
    VANILLA_WORLD_RESULT_CSTATUS_NEGOTIATING_SECURITY = 8,
    VANILLA_WORLD_RESULT_CSTATUS_NEGOTIATION_COMPLETE = 9,
    VANILLA_WORLD_RESULT_CSTATUS_NEGOTIATION_FAILED = 10,
    VANILLA_WORLD_RESULT_CSTATUS_AUTHENTICATING = 11,
    VANILLA_WORLD_RESULT_AUTH_OK = 12,
    VANILLA_WORLD_RESULT_AUTH_FAILED = 13,
    VANILLA_WORLD_RESULT_AUTH_REJECT = 14,
    VANILLA_WORLD_RESULT_AUTH_BAD_SERVER_PROOF = 15,
    VANILLA_WORLD_RESULT_AUTH_UNAVAILABLE = 16,
    VANILLA_WORLD_RESULT_AUTH_SYSTEM_ERROR = 17,
    VANILLA_WORLD_RESULT_AUTH_BILLING_ERROR = 18,
    VANILLA_WORLD_RESULT_AUTH_BILLING_EXPIRED = 19,
    VANILLA_WORLD_RESULT_AUTH_VERSION_MISMATCH = 20,
    VANILLA_WORLD_RESULT_AUTH_UNKNOWN_ACCOUNT = 21,
    VANILLA_WORLD_RESULT_AUTH_INCORRECT_PASSWORD = 22,
    VANILLA_WORLD_RESULT_AUTH_SESSION_EXPIRED = 23,
    VANILLA_WORLD_RESULT_AUTH_SERVER_SHUTTING_DOWN = 24,
    VANILLA_WORLD_RESULT_AUTH_ALREADY_LOGGING_IN = 25,
    VANILLA_WORLD_RESULT_AUTH_LOGIN_SERVER_NOT_FOUND = 26,
    VANILLA_WORLD_RESULT_AUTH_WAIT_QUEUE = 27,
    VANILLA_WORLD_RESULT_AUTH_BANNED = 28,
    VANILLA_WORLD_RESULT_AUTH_ALREADY_ONLINE = 29,
    VANILLA_WORLD_RESULT_AUTH_NO_TIME = 30,
    VANILLA_WORLD_RESULT_AUTH_DB_BUSY = 31,
    VANILLA_WORLD_RESULT_AUTH_SUSPENDED = 32,
    VANILLA_WORLD_RESULT_AUTH_PARENTAL_CONTROL = 33,
    VANILLA_WORLD_RESULT_REALM_LIST_IN_PROGRESS = 34,
    VANILLA_WORLD_RESULT_REALM_LIST_SUCCESS = 35,
    VANILLA_WORLD_RESULT_REALM_LIST_FAILED = 36,
    VANILLA_WORLD_RESULT_REALM_LIST_INVALID = 37,
    VANILLA_WORLD_RESULT_REALM_LIST_REALM_NOT_FOUND = 38,
    VANILLA_WORLD_RESULT_ACCOUNT_CREATE_IN_PROGRESS = 39,
    VANILLA_WORLD_RESULT_ACCOUNT_CREATE_SUCCESS = 40,
    VANILLA_WORLD_RESULT_ACCOUNT_CREATE_FAILED = 41,
    VANILLA_WORLD_RESULT_CHAR_LIST_RETRIEVING = 42,
    VANILLA_WORLD_RESULT_CHAR_LIST_RETRIEVED = 43,
    VANILLA_WORLD_RESULT_CHAR_LIST_FAILED = 44,
    VANILLA_WORLD_RESULT_CHAR_CREATE_IN_PROGRESS = 45,
    VANILLA_WORLD_RESULT_CHAR_CREATE_SUCCESS = 46,
    VANILLA_WORLD_RESULT_CHAR_CREATE_ERROR = 47,
    VANILLA_WORLD_RESULT_CHAR_CREATE_FAILED = 48,
    VANILLA_WORLD_RESULT_CHAR_CREATE_NAME_IN_USE = 49,
    VANILLA_WORLD_RESULT_CHAR_CREATE_DISABLED = 50,
    VANILLA_WORLD_RESULT_CHAR_CREATE_PVP_TEAMS_VIOLATION = 51,
    VANILLA_WORLD_RESULT_CHAR_CREATE_SERVER_LIMIT = 52,
    VANILLA_WORLD_RESULT_CHAR_CREATE_ACCOUNT_LIMIT = 53,
    VANILLA_WORLD_RESULT_CHAR_CREATE_SERVER_QUEUE = 54,
    VANILLA_WORLD_RESULT_CHAR_CREATE_ONLY_EXISTING = 55,
    VANILLA_WORLD_RESULT_CHAR_DELETE_IN_PROGRESS = 56,
    VANILLA_WORLD_RESULT_CHAR_DELETE_SUCCESS = 57,
    VANILLA_WORLD_RESULT_CHAR_DELETE_FAILED = 58,
    VANILLA_WORLD_RESULT_CHAR_DELETE_FAILED_LOCKED_FOR_TRANSFER = 59,
    VANILLA_WORLD_RESULT_CHAR_LOGIN_IN_PROGRESS = 60,
    VANILLA_WORLD_RESULT_CHAR_LOGIN_SUCCESS = 61,
    VANILLA_WORLD_RESULT_CHAR_LOGIN_NO_WORLD = 62,
    VANILLA_WORLD_RESULT_CHAR_LOGIN_DUPLICATE_CHARACTER = 63,
    VANILLA_WORLD_RESULT_CHAR_LOGIN_NO_INSTANCES = 64,
    VANILLA_WORLD_RESULT_CHAR_LOGIN_FAILED = 65,
    VANILLA_WORLD_RESULT_CHAR_LOGIN_DISABLED = 66,
    VANILLA_WORLD_RESULT_CHAR_LOGIN_NO_CHARACTER = 67,
    VANILLA_WORLD_RESULT_CHAR_LOGIN_LOCKED_FOR_TRANSFER = 68,
    VANILLA_WORLD_RESULT_CHAR_NAME_NO_NAME = 69,
    VANILLA_WORLD_RESULT_CHAR_NAME_TOO_SHORT = 70,
    VANILLA_WORLD_RESULT_CHAR_NAME_TOO_LONG = 71,
    VANILLA_WORLD_RESULT_CHAR_NAME_ONLY_LETTERS = 72,
    VANILLA_WORLD_RESULT_CHAR_NAME_MIXED_LANGUAGES = 73,
    VANILLA_WORLD_RESULT_CHAR_NAME_PROFANE = 74,
    VANILLA_WORLD_RESULT_CHAR_NAME_RESERVED = 75,
    VANILLA_WORLD_RESULT_CHAR_NAME_INVALID_APOSTROPHE = 76,
    VANILLA_WORLD_RESULT_CHAR_NAME_MULTIPLE_APOSTROPHES = 77,
    VANILLA_WORLD_RESULT_CHAR_NAME_THREE_CONSECUTIVE = 78,
    VANILLA_WORLD_RESULT_CHAR_NAME_INVALID_SPACE = 79,
    VANILLA_WORLD_RESULT_CHAR_NAME_SUCCESS = 80,
    VANILLA_WORLD_RESULT_CHAR_NAME_FAILURE = 81
} vanilla_WorldResult;

typedef enum {
    VANILLA_ALLOWED_CLASS_ALL = 0,
    VANILLA_ALLOWED_CLASS_WARRIOR = 1,
    VANILLA_ALLOWED_CLASS_PALADIN = 2,
    VANILLA_ALLOWED_CLASS_HUNTER = 4,
    VANILLA_ALLOWED_CLASS_ROGUE = 8,
    VANILLA_ALLOWED_CLASS_PRIEST = 16,
    VANILLA_ALLOWED_CLASS_SHAMAN = 64,
    VANILLA_ALLOWED_CLASS_MAGE = 128,
    VANILLA_ALLOWED_CLASS_WARLOCK = 256,
    VANILLA_ALLOWED_CLASS_DRUID = 1024
} vanilla_AllowedClass;

typedef enum {
    VANILLA_ALLOWED_RACE_ALL = 0,
    VANILLA_ALLOWED_RACE_HUMAN = 1,
    VANILLA_ALLOWED_RACE_ORC = 2,
    VANILLA_ALLOWED_RACE_DWARF = 4,
    VANILLA_ALLOWED_RACE_NIGHT_ELF = 8,
    VANILLA_ALLOWED_RACE_UNDEAD = 16,
    VANILLA_ALLOWED_RACE_TAUREN = 32,
    VANILLA_ALLOWED_RACE_GNOME = 64,
    VANILLA_ALLOWED_RACE_TROLL = 128,
    VANILLA_ALLOWED_RACE_GOBLIN = 256
} vanilla_AllowedRace;

typedef enum {
    VANILLA_AREA_FLAGS_SNOW = 1,
    VANILLA_AREA_FLAGS_UNK = 2,
    VANILLA_AREA_FLAGS_DEVELOPMENT = 4,
    VANILLA_AREA_FLAGS_UNK2 = 8,
    VANILLA_AREA_FLAGS_UNK3 = 16,
    VANILLA_AREA_FLAGS_CITY_SLAVE = 32,
    VANILLA_AREA_FLAGS_CITY_ALLOW_DUELS = 64,
    VANILLA_AREA_FLAGS_UNK4 = 128,
    VANILLA_AREA_FLAGS_CITY = 256,
    VANILLA_AREA_FLAGS_TEST = 512
} vanilla_AreaFlags;

typedef enum {
    VANILLA_ATTRIBUTES_NONE = 0,
    VANILLA_ATTRIBUTES_PROC_FAILURE_BURNS_CHARGE = 1,
    VANILLA_ATTRIBUTES_USES_RANGED_SLOT = 2,
    VANILLA_ATTRIBUTES_ON_NEXT_SWING_NO_DAMAGE = 4,
    VANILLA_ATTRIBUTES_NEED_EXOTIC_AMMO = 8,
    VANILLA_ATTRIBUTES_IS_ABILITY = 16,
    VANILLA_ATTRIBUTES_IS_TRADESKILL = 32,
    VANILLA_ATTRIBUTES_PASSIVE = 64,
    VANILLA_ATTRIBUTES_DO_NOT_DISPLAY = 128,
    VANILLA_ATTRIBUTES_DO_NOT_LOG = 256,
    VANILLA_ATTRIBUTES_HELD_ITEM_ONLY = 512,
    VANILLA_ATTRIBUTES_ON_NEXT_SWING = 1024,
    VANILLA_ATTRIBUTES_WEARER_CASTS_PROC_TRIGGER = 2048,
    VANILLA_ATTRIBUTES_DAYTIME_ONLY = 4096,
    VANILLA_ATTRIBUTES_NIGHT_ONLY = 8192,
    VANILLA_ATTRIBUTES_ONLY_INDOORS = 16384,
    VANILLA_ATTRIBUTES_ONLY_OUTDOORS = 32768,
    VANILLA_ATTRIBUTES_NOT_SHAPESHIFT = 65536,
    VANILLA_ATTRIBUTES_ONLY_STEALTHED = 131072,
    VANILLA_ATTRIBUTES_DO_NOT_SHEATH = 262144,
    VANILLA_ATTRIBUTES_SCALES_WITH_CREATURE_LEVEL = 524288,
    VANILLA_ATTRIBUTES_CANCELS_AUTO_ATTACK_COMBAT = 1048576,
    VANILLA_ATTRIBUTES_NO_ACTIVE_DEFENSE = 2097152,
    VANILLA_ATTRIBUTES_TRACK_TARGET_IN_CAST_PLAYER_ONLY = 4194304,
    VANILLA_ATTRIBUTES_ALLOW_CAST_WHILE_DEAD = 8388608,
    VANILLA_ATTRIBUTES_ALLOW_WHILE_MOUNTED = 16777216,
    VANILLA_ATTRIBUTES_COOLDOWN_ON_EVENT = 33554432,
    VANILLA_ATTRIBUTES_AURA_IS_DEBUFF = 67108864,
    VANILLA_ATTRIBUTES_ALLOW_WHILE_SITTING = 134217728,
    VANILLA_ATTRIBUTES_NOT_IN_COMBAT_ONLY_PEACEFUL = 268435456,
    VANILLA_ATTRIBUTES_NO_IMMUNITIES = 536870912,
    VANILLA_ATTRIBUTES_HEARTBEAT_RESIST = 1073741824,
    VANILLA_ATTRIBUTES_NO_AURA_CANCEL = -2147483647 - 1
} vanilla_Attributes;

typedef enum {
    VANILLA_ATTRIBUTES_EX1_NONE = 0,
    VANILLA_ATTRIBUTES_EX1_DISMISS_PET_FIRST = 1,
    VANILLA_ATTRIBUTES_EX1_USE_ALL_MANA = 2,
    VANILLA_ATTRIBUTES_EX1_IS_CHANNELED = 4,
    VANILLA_ATTRIBUTES_EX1_NO_REDIRECTION = 8,
    VANILLA_ATTRIBUTES_EX1_NO_SKILL_INCREASE = 16,
    VANILLA_ATTRIBUTES_EX1_ALLOW_WHILE_STEALTHED = 32,
    VANILLA_ATTRIBUTES_EX1_IS_SELF_CHANNELED = 64,
    VANILLA_ATTRIBUTES_EX1_NO_REFLECTION = 128,
    VANILLA_ATTRIBUTES_EX1_ONLY_PEACEFUL_TARGETS = 256,
    VANILLA_ATTRIBUTES_EX1_INITIATES_COMBAT_ENABLES_AUTO_ATTACK = 512,
    VANILLA_ATTRIBUTES_EX1_NO_THREAT = 1024,
    VANILLA_ATTRIBUTES_EX1_AURA_UNIQUE = 2048,
    VANILLA_ATTRIBUTES_EX1_FAILURE_BREAKS_STEALTH = 4096,
    VANILLA_ATTRIBUTES_EX1_TOGGLE_FARSIGHT = 8192,
    VANILLA_ATTRIBUTES_EX1_TRACK_TARGET_IN_CHANNEL = 16384,
    VANILLA_ATTRIBUTES_EX1_IMMUNITY_PURGES_EFFECT = 32768,
    VANILLA_ATTRIBUTES_EX1_IMMUNITY_TO_HOSTILE_AND_FRIENDLY_EFFECTS = 65536,
    VANILLA_ATTRIBUTES_EX1_NO_AUTOCAST_AI = 131072,
    VANILLA_ATTRIBUTES_EX1_PREVENTS_ANIM = 262144,
    VANILLA_ATTRIBUTES_EX1_EXCLUDE_CASTER = 524288,
    VANILLA_ATTRIBUTES_EX1_FINISHING_MOVE_DAMAGE = 1048576,
    VANILLA_ATTRIBUTES_EX1_THREAT_ONLY_ON_MISS = 2097152,
    VANILLA_ATTRIBUTES_EX1_FINISHING_MOVE_DURATION = 4194304,
    VANILLA_ATTRIBUTES_EX1_UNK23 = 8388608,
    VANILLA_ATTRIBUTES_EX1_SPECIAL_SKILLUP = 16777216,
    VANILLA_ATTRIBUTES_EX1_AURA_STAYS_AFTER_COMBAT = 33554432,
    VANILLA_ATTRIBUTES_EX1_REQUIRE_ALL_TARGETS = 67108864,
    VANILLA_ATTRIBUTES_EX1_DISCOUNT_POWER_ON_MISS = 134217728,
    VANILLA_ATTRIBUTES_EX1_NO_AURA_ICON = 268435456,
    VANILLA_ATTRIBUTES_EX1_NAME_IN_CHANNEL_BAR = 536870912,
    VANILLA_ATTRIBUTES_EX1_COMBO_ON_BLOCK = 1073741824,
    VANILLA_ATTRIBUTES_EX1_CAST_WHEN_LEARNED = -2147483647 - 1
} vanilla_AttributesEx1;

typedef enum {
    VANILLA_ATTRIBUTES_EX2_NONE = 0,
    VANILLA_ATTRIBUTES_EX2_ALLOW_DEAD_TARGET = 1,
    VANILLA_ATTRIBUTES_EX2_NO_SHAPESHIFT_UI = 2,
    VANILLA_ATTRIBUTES_EX2_IGNORE_LINE_OF_SIGHT = 4,
    VANILLA_ATTRIBUTES_EX2_ALLOW_LOW_LEVEL_BUFF = 8,
    VANILLA_ATTRIBUTES_EX2_USE_SHAPESHIFT_BAR = 16,
    VANILLA_ATTRIBUTES_EX2_AUTO_REPEAT = 32,
    VANILLA_ATTRIBUTES_EX2_CANNOT_CAST_ON_TAPPED = 64,
    VANILLA_ATTRIBUTES_EX2_DO_NOT_REPORT_SPELL_FAILURE = 128,
    VANILLA_ATTRIBUTES_EX2_INCLUDE_IN_ADVANCED_COMBAT_LOG = 256,
    VANILLA_ATTRIBUTES_EX2_ALWAYS_CAST_AS_UNIT = 512,
    VANILLA_ATTRIBUTES_EX2_SPECIAL_TAMING_FLAG = 1024,
    VANILLA_ATTRIBUTES_EX2_NO_TARGET_PER_SECOND_COSTS = 2048,
    VANILLA_ATTRIBUTES_EX2_CHAIN_FROM_CASTER = 4096,
    VANILLA_ATTRIBUTES_EX2_ENCHANT_OWN_ITEM_ONLY = 8192,
    VANILLA_ATTRIBUTES_EX2_ALLOW_WHILE_INVISIBLE = 16384,
    VANILLA_ATTRIBUTES_EX2_UNK15 = 32768,
    VANILLA_ATTRIBUTES_EX2_NO_ACTIVE_PETS = 65536,
    VANILLA_ATTRIBUTES_EX2_DO_NOT_RESET_COMBAT_TIMERS = 131072,
    VANILLA_ATTRIBUTES_EX2_REQ_DEAD_PET = 262144,
    VANILLA_ATTRIBUTES_EX2_ALLOW_WHILE_NOT_SHAPESHIFTED = 524288,
    VANILLA_ATTRIBUTES_EX2_INITIATE_COMBAT_POST_CAST = 1048576,
    VANILLA_ATTRIBUTES_EX2_FAIL_ON_ALL_TARGETS_IMMUNE = 2097152,
    VANILLA_ATTRIBUTES_EX2_NO_INITIAL_THREAT = 4194304,
    VANILLA_ATTRIBUTES_EX2_PROC_COOLDOWN_ON_FAILURE = 8388608,
    VANILLA_ATTRIBUTES_EX2_ITEM_CAST_WITH_OWNER_SKILL = 16777216,
    VANILLA_ATTRIBUTES_EX2_DONT_BLOCK_MANA_REGEN = 33554432,
    VANILLA_ATTRIBUTES_EX2_NO_SCHOOL_IMMUNITIES = 67108864,
    VANILLA_ATTRIBUTES_EX2_IGNORE_WEAPONSKILL = 134217728,
    VANILLA_ATTRIBUTES_EX2_NOT_AN_ACTION = 268435456,
    VANILLA_ATTRIBUTES_EX2_CANT_CRIT = 536870912,
    VANILLA_ATTRIBUTES_EX2_ACTIVE_THREAT = 1073741824,
    VANILLA_ATTRIBUTES_EX2_RETAIN_ITEM_CAST = -2147483647 - 1
} vanilla_AttributesEx2;

typedef enum {
    VANILLA_ATTRIBUTES_EX3_NONE = 0,
    VANILLA_ATTRIBUTES_EX3_PVP_ENABLING = 1,
    VANILLA_ATTRIBUTES_EX3_NO_PROC_EQUIP_REQUIREMENT = 2,
    VANILLA_ATTRIBUTES_EX3_NO_CASTING_BAR_TEXT = 4,
    VANILLA_ATTRIBUTES_EX3_COMPLETELY_BLOCKED = 8,
    VANILLA_ATTRIBUTES_EX3_NO_RES_TIMER = 16,
    VANILLA_ATTRIBUTES_EX3_NO_DURABILITY_LOSS = 32,
    VANILLA_ATTRIBUTES_EX3_NO_AVOIDANCE = 64,
    VANILLA_ATTRIBUTES_EX3_DOT_STACKING_RULE = 128,
    VANILLA_ATTRIBUTES_EX3_ONLY_ON_PLAYER = 256,
    VANILLA_ATTRIBUTES_EX3_NOT_A_PROC = 512,
    VANILLA_ATTRIBUTES_EX3_REQUIRES_MAIN_HAND_WEAPON = 1024,
    VANILLA_ATTRIBUTES_EX3_ONLY_BATTLEGROUNDS = 2048,
    VANILLA_ATTRIBUTES_EX3_ONLY_ON_GHOSTS = 4096,
    VANILLA_ATTRIBUTES_EX3_HIDE_CHANNEL_BAR = 8192,
    VANILLA_ATTRIBUTES_EX3_HIDE_IN_RAID_FILTER = 16384,
    VANILLA_ATTRIBUTES_EX3_NORMAL_RANGED_ATTACK = 32768,
    VANILLA_ATTRIBUTES_EX3_SUPPRESS_CASTER_PROCS = 65536,
    VANILLA_ATTRIBUTES_EX3_SUPPRESS_TARGET_PROCS = 131072,
    VANILLA_ATTRIBUTES_EX3_ALWAYS_HIT = 262144,
    VANILLA_ATTRIBUTES_EX3_INSTANT_TARGET_PROCS = 524288,
    VANILLA_ATTRIBUTES_EX3_ALLOW_AURA_WHILE_DEAD = 1048576,
    VANILLA_ATTRIBUTES_EX3_ONLY_PROC_OUTDOORS = 2097152,
    VANILLA_ATTRIBUTES_EX3_CASTING_CANCELS_AUTOREPEAT = 4194304,
    VANILLA_ATTRIBUTES_EX3_NO_DAMAGE_HISTORY = 8388608,
    VANILLA_ATTRIBUTES_EX3_REQUIRES_OFFHAND_WEAPON = 16777216,
    VANILLA_ATTRIBUTES_EX3_TREAT_AS_PERIODIC = 33554432,
    VANILLA_ATTRIBUTES_EX3_CAN_PROC_FROM_PROCS = 67108864,
    VANILLA_ATTRIBUTES_EX3_ONLY_PROC_ON_CASTER = 134217728,
    VANILLA_ATTRIBUTES_EX3_IGNORE_CASTER_AND_TARGET_RESTRICTIONS = 268435456,
    VANILLA_ATTRIBUTES_EX3_IGNORE_CASTER_MODIFIERS = 536870912,
    VANILLA_ATTRIBUTES_EX3_DO_NOT_DISPLAY_RANGE = 1073741824,
    VANILLA_ATTRIBUTES_EX3_NOT_ON_AOE_IMMUNE = -2147483647 - 1
} vanilla_AttributesEx3;

typedef enum {
    VANILLA_ATTRIBUTES_EX4_NONE = 0,
    VANILLA_ATTRIBUTES_EX4_NO_CAST_LOG = 1,
    VANILLA_ATTRIBUTES_EX4_CLASS_TRIGGER_ONLY_ON_TARGET = 2,
    VANILLA_ATTRIBUTES_EX4_AURA_EXPIRES_OFFLINE = 4,
    VANILLA_ATTRIBUTES_EX4_NO_HELPFUL_THREAT = 8,
    VANILLA_ATTRIBUTES_EX4_NO_HARMFUL_THREAT = 16,
    VANILLA_ATTRIBUTES_EX4_ALLOW_CLIENT_TARGETING = 32,
    VANILLA_ATTRIBUTES_EX4_CANNOT_BE_STOLEN = 64,
    VANILLA_ATTRIBUTES_EX4_ALLOW_CAST_WHILE_CASTING = 128,
    VANILLA_ATTRIBUTES_EX4_IGNORE_DAMAGE_TAKEN_MODIFIERS = 256,
    VANILLA_ATTRIBUTES_EX4_COMBAT_FEEDBACK_WHEN_USABLE = 512,
    VANILLA_ATTRIBUTES_EX4_WEAPON_SPEED_COST_SCALING = 1024,
    VANILLA_ATTRIBUTES_EX4_NO_PARTIAL_IMMUNITY = 2048
} vanilla_AttributesEx4;

typedef enum {
    VANILLA_CAST_FLAGS_NONE = 0,
    VANILLA_CAST_FLAGS_HIDDEN_COMBATLOG = 1,
    VANILLA_CAST_FLAGS_UNKNOWN2 = 2,
    VANILLA_CAST_FLAGS_UNKNOWN3 = 4,
    VANILLA_CAST_FLAGS_UNKNOWN4 = 8,
    VANILLA_CAST_FLAGS_UNKNOWN5 = 16,
    VANILLA_CAST_FLAGS_AMMO = 32,
    VANILLA_CAST_FLAGS_UNKNOWN7 = 64,
    VANILLA_CAST_FLAGS_UNKNOWN8 = 128,
    VANILLA_CAST_FLAGS_UNKNOWN9 = 256
} vanilla_CastFlags;

typedef enum {
    VANILLA_CHANNEL_FLAGS_NONE = 0,
    VANILLA_CHANNEL_FLAGS_CUSTOM = 1,
    VANILLA_CHANNEL_FLAGS_TRADE = 4,
    VANILLA_CHANNEL_FLAGS_NOT_LFG = 8,
    VANILLA_CHANNEL_FLAGS_GENERAL = 16,
    VANILLA_CHANNEL_FLAGS_CITY = 32,
    VANILLA_CHANNEL_FLAGS_LFG = 64,
    VANILLA_CHANNEL_FLAGS_VOICE = 128
} vanilla_ChannelFlags;

typedef enum {
    VANILLA_CHANNEL_MEMBER_FLAGS_NONE = 0,
    VANILLA_CHANNEL_MEMBER_FLAGS_OWNER = 1,
    VANILLA_CHANNEL_MEMBER_FLAGS_MODERATOR = 4,
    VANILLA_CHANNEL_MEMBER_FLAGS_VOICED = 8,
    VANILLA_CHANNEL_MEMBER_FLAGS_MUTED = 16,
    VANILLA_CHANNEL_MEMBER_FLAGS_CUSTOM = 32,
    VANILLA_CHANNEL_MEMBER_FLAGS_MICROPHONE_MUTE = 64
} vanilla_ChannelMemberFlags;

typedef enum {
    VANILLA_CHARACTER_FLAGS_NONE = 0,
    VANILLA_CHARACTER_FLAGS_LOCKED_FOR_TRANSFER = 4,
    VANILLA_CHARACTER_FLAGS_HIDE_HELM = 1024,
    VANILLA_CHARACTER_FLAGS_HIDE_CLOAK = 2048,
    VANILLA_CHARACTER_FLAGS_GHOST = 8192,
    VANILLA_CHARACTER_FLAGS_RENAME = 16384
} vanilla_CharacterFlags;

typedef enum {
    VANILLA_CHARACTER_RACE_FLAGS_NONE = 0,
    VANILLA_CHARACTER_RACE_FLAGS_NOT_PLAYABLE = 1,
    VANILLA_CHARACTER_RACE_FLAGS_BARE_FEET = 2,
    VANILLA_CHARACTER_RACE_FLAGS_CAN_CURRENT_FORM_MOUNT = 4,
    VANILLA_CHARACTER_RACE_FLAGS_UNKNOWN2 = 8
} vanilla_CharacterRaceFlags;

typedef enum {
    VANILLA_DEFAULT_CHANNEL_FLAGS_NONE = 0,
    VANILLA_DEFAULT_CHANNEL_FLAGS_INITIAL = 1,
    VANILLA_DEFAULT_CHANNEL_FLAGS_ZONE_DEPENDENCY = 2,
    VANILLA_DEFAULT_CHANNEL_FLAGS_GLOBAL = 4,
    VANILLA_DEFAULT_CHANNEL_FLAGS_TRADE = 8,
    VANILLA_DEFAULT_CHANNEL_FLAGS_CITY_ONLY = 16,
    VANILLA_DEFAULT_CHANNEL_FLAGS_CITY_ONLY_2 = 32,
    VANILLA_DEFAULT_CHANNEL_FLAGS_DEFENCE = 65536,
    VANILLA_DEFAULT_CHANNEL_FLAGS_UNSELECTED = 262144
} vanilla_DefaultChannelFlags;

typedef enum {
    VANILLA_EMOTE_FLAGS_TALK = 8,
    VANILLA_EMOTE_FLAGS_QUESTION = 16,
    VANILLA_EMOTE_FLAGS_EXCLAMATION = 32,
    VANILLA_EMOTE_FLAGS_SHOUT = 64,
    VANILLA_EMOTE_FLAGS_LAUGH = 128
} vanilla_EmoteFlags;

typedef enum {
    VANILLA_FACTION_FLAG_VISIBLE = 1,
    VANILLA_FACTION_FLAG_AT_WAR = 2,
    VANILLA_FACTION_FLAG_HIDDEN = 4,
    VANILLA_FACTION_FLAG_INVISIBLE_FORCED = 8,
    VANILLA_FACTION_FLAG_PEACE_FORCED = 16,
    VANILLA_FACTION_FLAG_INACTIVE = 32,
    VANILLA_FACTION_FLAG_RIVAL = 64
} vanilla_FactionFlag;

typedef enum {
    VANILLA_GROUP_MEMBER_ONLINE_STATUS_OFFLINE = 0,
    VANILLA_GROUP_MEMBER_ONLINE_STATUS_ONLINE = 1,
    VANILLA_GROUP_MEMBER_ONLINE_STATUS_PVP = 2,
    VANILLA_GROUP_MEMBER_ONLINE_STATUS_DEAD = 4,
    VANILLA_GROUP_MEMBER_ONLINE_STATUS_GHOST = 8,
    VANILLA_GROUP_MEMBER_ONLINE_STATUS_PVP_FFA = 16,
    VANILLA_GROUP_MEMBER_ONLINE_STATUS_ZONE_OUT = 32,
    VANILLA_GROUP_MEMBER_ONLINE_STATUS_AFK = 64,
    VANILLA_GROUP_MEMBER_ONLINE_STATUS_DND = 128
} vanilla_GroupMemberOnlineStatus;

typedef enum {
    VANILLA_GROUP_UPDATE_FLAGS_NONE = 0,
    VANILLA_GROUP_UPDATE_FLAGS_STATUS = 1,
    VANILLA_GROUP_UPDATE_FLAGS_CUR_HP = 2,
    VANILLA_GROUP_UPDATE_FLAGS_MAX_HP = 4,
    VANILLA_GROUP_UPDATE_FLAGS_POWER_TYPE = 8,
    VANILLA_GROUP_UPDATE_FLAGS_CUR_POWER = 16,
    VANILLA_GROUP_UPDATE_FLAGS_MAX_POWER = 32,
    VANILLA_GROUP_UPDATE_FLAGS_LEVEL = 64,
    VANILLA_GROUP_UPDATE_FLAGS_ZONE = 128,
    VANILLA_GROUP_UPDATE_FLAGS_POSITION = 256,
    VANILLA_GROUP_UPDATE_FLAGS_AURAS = 512,
    VANILLA_GROUP_UPDATE_FLAGS_AURAS_2 = 1024,
    VANILLA_GROUP_UPDATE_FLAGS_PET_GUID = 2048,
    VANILLA_GROUP_UPDATE_FLAGS_PET_NAME = 4096,
    VANILLA_GROUP_UPDATE_FLAGS_PET_MODEL_ID = 8192,
    VANILLA_GROUP_UPDATE_FLAGS_PET_CUR_HP = 16384,
    VANILLA_GROUP_UPDATE_FLAGS_PET_MAX_HP = 32768,
    VANILLA_GROUP_UPDATE_FLAGS_PET_POWER_TYPE = 65536,
    VANILLA_GROUP_UPDATE_FLAGS_PET_CUR_POWER = 131072,
    VANILLA_GROUP_UPDATE_FLAGS_PET_MAX_POWER = 262144,
    VANILLA_GROUP_UPDATE_FLAGS_PET_AURAS = 524288,
    VANILLA_GROUP_UPDATE_FLAGS_PET_AURAS_2 = 1048576,
    VANILLA_GROUP_UPDATE_FLAGS_MODE_OFFLINE = 268435456
} vanilla_GroupUpdateFlags;

typedef enum {
    VANILLA_ITEM_FLAG_NONE = 0,
    VANILLA_ITEM_FLAG_NO_PICKUP = 1,
    VANILLA_ITEM_FLAG_CONJURED = 2,
    VANILLA_ITEM_FLAG_LOOTABLE = 4,
    VANILLA_ITEM_FLAG_DEPRECATED = 16,
    VANILLA_ITEM_FLAG_INDESTRUCTIBLE = 32,
    VANILLA_ITEM_FLAG_PLAYER_CAST = 64,
    VANILLA_ITEM_FLAG_NO_EQUIP_COOLDOWN = 128,
    VANILLA_ITEM_FLAG_INT_BONUS_INSTEAD = 256,
    VANILLA_ITEM_FLAG_WRAPPER = 512,
    VANILLA_ITEM_FLAG_IGNORE_BAG_SPACE = 1024,
    VANILLA_ITEM_FLAG_PARTY_LOOT = 2048,
    VANILLA_ITEM_FLAG_CHARTER = 8192,
    VANILLA_ITEM_FLAG_HAS_TEXT = 16384,
    VANILLA_ITEM_FLAG_NO_DISENCHANT = 32768,
    VANILLA_ITEM_FLAG_REAL_DURATION = 65536,
    VANILLA_ITEM_FLAG_NO_CREATOR = 131072
} vanilla_ItemFlag;

typedef enum {
    VANILLA_MOVEMENT_FLAGS_NONE = 0,
    VANILLA_MOVEMENT_FLAGS_FORWARD = 1,
    VANILLA_MOVEMENT_FLAGS_BACKWARD = 2,
    VANILLA_MOVEMENT_FLAGS_STRAFE_LEFT = 4,
    VANILLA_MOVEMENT_FLAGS_STRAFE_RIGHT = 8,
    VANILLA_MOVEMENT_FLAGS_TURN_LEFT = 16,
    VANILLA_MOVEMENT_FLAGS_TURN_RIGHT = 32,
    VANILLA_MOVEMENT_FLAGS_PITCH_UP = 64,
    VANILLA_MOVEMENT_FLAGS_PITCH_DOWN = 128,
    VANILLA_MOVEMENT_FLAGS_WALK_MODE = 256,
    VANILLA_MOVEMENT_FLAGS_ON_TRANSPORT = 512,
    VANILLA_MOVEMENT_FLAGS_LEVITATING = 1024,
    VANILLA_MOVEMENT_FLAGS_FIXED_Z = 2048,
    VANILLA_MOVEMENT_FLAGS_ROOT = 4096,
    VANILLA_MOVEMENT_FLAGS_JUMPING = 8192,
    VANILLA_MOVEMENT_FLAGS_FALLINGFAR = 16384,
    VANILLA_MOVEMENT_FLAGS_SWIMMING = 2097152,
    VANILLA_MOVEMENT_FLAGS_SPLINE_ENABLED = 4194304,
    VANILLA_MOVEMENT_FLAGS_CAN_FLY = 8388608,
    VANILLA_MOVEMENT_FLAGS_FLYING = 16777216,
    VANILLA_MOVEMENT_FLAGS_ONTRANSPORT = 33554432,
    VANILLA_MOVEMENT_FLAGS_SPLINE_ELEVATION = 67108864,
    VANILLA_MOVEMENT_FLAGS_WATERWALKING = 268435456,
    VANILLA_MOVEMENT_FLAGS_SAFE_FALL = 536870912,
    VANILLA_MOVEMENT_FLAGS_HOVER = 1073741824
} vanilla_MovementFlags;

typedef enum {
    VANILLA_PVP_FLAGS_PVP_FLAGGED = 2048,
    VANILLA_PVP_FLAGS_ATTACK_PVPING_PLAYERS = 4096
} vanilla_PvpFlags;

typedef enum {
    VANILLA_REPUTATION_FLAGS_VISIBLE_TO_CLIENT = 1,
    VANILLA_REPUTATION_FLAGS_ENABLE_AT_WAR = 2,
    VANILLA_REPUTATION_FLAGS_HIDE_IN_CLIENT = 4,
    VANILLA_REPUTATION_FLAGS_FORCE_HIDE_IN_CLIENT = 8,
    VANILLA_REPUTATION_FLAGS_FORCE_AT_PEACE = 16,
    VANILLA_REPUTATION_FLAGS_FACTION_INACTIVE = 32
} vanilla_ReputationFlags;

typedef enum {
    VANILLA_SPELL_CAST_TARGET_FLAGS_SELF = 0,
    VANILLA_SPELL_CAST_TARGET_FLAGS_UNUSED1 = 1,
    VANILLA_SPELL_CAST_TARGET_FLAGS_UNIT = 2,
    VANILLA_SPELL_CAST_TARGET_FLAGS_UNUSED2 = 4,
    VANILLA_SPELL_CAST_TARGET_FLAGS_UNUSED3 = 8,
    VANILLA_SPELL_CAST_TARGET_FLAGS_ITEM = 16,
    VANILLA_SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION = 32,
    VANILLA_SPELL_CAST_TARGET_FLAGS_DEST_LOCATION = 64,
    VANILLA_SPELL_CAST_TARGET_FLAGS_OBJECT_UNK = 128,
    VANILLA_SPELL_CAST_TARGET_FLAGS_UNIT_UNK = 256,
    VANILLA_SPELL_CAST_TARGET_FLAGS_PVP_CORPSE = 512,
    VANILLA_SPELL_CAST_TARGET_FLAGS_UNIT_CORPSE = 1024,
    VANILLA_SPELL_CAST_TARGET_FLAGS_GAMEOBJECT = 2048,
    VANILLA_SPELL_CAST_TARGET_FLAGS_TRADE_ITEM = 4096,
    VANILLA_SPELL_CAST_TARGET_FLAGS_STRING = 8192,
    VANILLA_SPELL_CAST_TARGET_FLAGS_UNK1 = 16384,
    VANILLA_SPELL_CAST_TARGET_FLAGS_CORPSE = 32768
} vanilla_SpellCastTargetFlags;

typedef enum {
    VANILLA_SPLINE_FLAG_NONE = 0,
    VANILLA_SPLINE_FLAG_DONE = 1,
    VANILLA_SPLINE_FLAG_FALLING = 2,
    VANILLA_SPLINE_FLAG_UNKNOWN3 = 4,
    VANILLA_SPLINE_FLAG_UNKNOWN4 = 8,
    VANILLA_SPLINE_FLAG_UNKNOWN5 = 16,
    VANILLA_SPLINE_FLAG_UNKNOWN6 = 32,
    VANILLA_SPLINE_FLAG_UNKNOWN7 = 64,
    VANILLA_SPLINE_FLAG_UNKNOWN8 = 128,
    VANILLA_SPLINE_FLAG_RUN_MODE = 256,
    VANILLA_SPLINE_FLAG_FLYING = 512,
    VANILLA_SPLINE_FLAG_NO_SPLINE = 1024,
    VANILLA_SPLINE_FLAG_UNKNOWN12 = 2048,
    VANILLA_SPLINE_FLAG_UNKNOWN13 = 4096,
    VANILLA_SPLINE_FLAG_UNKNOWN14 = 8192,
    VANILLA_SPLINE_FLAG_UNKNOWN15 = 16384,
    VANILLA_SPLINE_FLAG_UNKNOWN16 = 32768,
    VANILLA_SPLINE_FLAG_FINAL_POINT = 65536,
    VANILLA_SPLINE_FLAG_FINAL_TARGET = 131072,
    VANILLA_SPLINE_FLAG_FINAL_ANGLE = 262144,
    VANILLA_SPLINE_FLAG_UNKNOWN19 = 524288,
    VANILLA_SPLINE_FLAG_CYCLIC = 1048576,
    VANILLA_SPLINE_FLAG_ENTER_CYCLE = 2097152,
    VANILLA_SPLINE_FLAG_FROZEN = 4194304,
    VANILLA_SPLINE_FLAG_UNKNOWN23 = 8388608,
    VANILLA_SPLINE_FLAG_UNKNOWN24 = 16777216,
    VANILLA_SPLINE_FLAG_UNKNOWN25 = 33554432,
    VANILLA_SPLINE_FLAG_UNKNOWN26 = 67108864,
    VANILLA_SPLINE_FLAG_UNKNOWN27 = 134217728,
    VANILLA_SPLINE_FLAG_UNKNOWN28 = 268435456,
    VANILLA_SPLINE_FLAG_UNKNOWN29 = 536870912,
    VANILLA_SPLINE_FLAG_UNKNOWN30 = 1073741824,
    VANILLA_SPLINE_FLAG_UNKNOWN31 = -2147483647 - 1
} vanilla_SplineFlag;

typedef enum {
    VANILLA_UPDATE_FLAG_NONE = 0,
    VANILLA_UPDATE_FLAG_SELF = 1,
    VANILLA_UPDATE_FLAG_TRANSPORT = 2,
    VANILLA_UPDATE_FLAG_MELEE_ATTACKING = 4,
    VANILLA_UPDATE_FLAG_HIGH_GUID = 8,
    VANILLA_UPDATE_FLAG_ALL = 16,
    VANILLA_UPDATE_FLAG_LIVING = 32,
    VANILLA_UPDATE_FLAG_HAS_POSITION = 64
} vanilla_UpdateFlag;

typedef enum {
    VANILLA_WEAPON_FLAGS_WEAPON_NOT_AFFECTED_BY_ANIMATION = 0,
    VANILLA_WEAPON_FLAGS_SHEATHE_WEAPONS_AUTOMATICALLY = 4,
    VANILLA_WEAPON_FLAGS_SHEATHE_WEAPONS_AUTOMATICALLY_2 = 16,
    VANILLA_WEAPON_FLAGS_UNSHEATHE_WEAPONS = 32
} vanilla_WeaponFlags;

#define VANILLA_HEADERS_LENGTH 40
#define VANILLA_VALUES_LENGTH 1262

typedef struct {
    uint32_t headers[VANILLA_HEADERS_LENGTH];
    uint32_t values[VANILLA_VALUES_LENGTH];
} vanilla_UpdateMask;

WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_object_guid_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_object_guid_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_object_type_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_object_type_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_object_entry_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_object_entry_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_object_scale_x_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_object_scale_x_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_owner_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_item_owner_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_contained_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_item_contained_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_creator_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_item_creator_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_giftcreator_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_item_giftcreator_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_stack_count_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_item_stack_count_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_duration_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_item_duration_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_spell_charges_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_item_spell_charges_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_flags_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_item_flags_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_enchantment_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_item_enchantment_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_property_seed_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_item_property_seed_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_random_properties_id_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_item_random_properties_id_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_item_text_id_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_item_item_text_id_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_durability_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_item_durability_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_item_maxdurability_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_item_maxdurability_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_container_num_slots_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_container_num_slots_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_container_slot_1_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_container_slot_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_charm_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_unit_charm_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_summon_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_unit_summon_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_charmedby_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_unit_charmedby_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_summonedby_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_unit_summonedby_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_createdby_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_unit_createdby_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_target_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_unit_target_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_persuaded_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_unit_persuaded_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_channel_object_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_unit_channel_object_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_health_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_health_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_power1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_power1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_power2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_power2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_power3_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_power3_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_power4_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_power4_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_power5_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_power5_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_maxhealth_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_maxhealth_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_maxpower1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_maxpower1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_maxpower2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_maxpower2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_maxpower3_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_maxpower3_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_maxpower4_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_maxpower4_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_maxpower5_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_maxpower5_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_level_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_level_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_factiontemplate_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_factiontemplate_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_bytes_0_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_unit_bytes_0_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_virtual_item_slot_display_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_virtual_item_slot_display_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_virtual_item_info_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_unit_virtual_item_info_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_flags_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_flags_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_aura_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_aura_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_auraflags_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_unit_auraflags_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_auralevels_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_unit_auralevels_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_auraapplications_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_unit_auraapplications_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_aurastate_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_aurastate_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_baseattacktime_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_baseattacktime_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_rangedattacktime_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_rangedattacktime_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_boundingradius_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_boundingradius_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_combatreach_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_combatreach_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_displayid_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_displayid_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_nativedisplayid_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_nativedisplayid_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_mountdisplayid_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_mountdisplayid_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_mindamage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_mindamage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_maxdamage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_maxdamage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_minoffhanddamage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_minoffhanddamage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_maxoffhanddamage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_maxoffhanddamage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_bytes_1_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_unit_bytes_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_petnumber_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_petnumber_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_pet_name_timestamp_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_pet_name_timestamp_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_petexperience_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_petexperience_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_petnextlevelexp_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_petnextlevelexp_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_dynamic_flags_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_dynamic_flags_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_channel_spell_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_channel_spell_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_mod_cast_speed_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_mod_cast_speed_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_created_by_spell_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_created_by_spell_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_npc_flags_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_npc_flags_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_npc_emotestate_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_npc_emotestate_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_training_points_set(vanilla_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts vanilla_update_mask_unit_training_points_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_strength_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_strength_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_agility_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_agility_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_stamina_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_stamina_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_intellect_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_intellect_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_spirit_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_spirit_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_normal_resistance_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_normal_resistance_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_holy_resistance_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_holy_resistance_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_fire_resistance_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_fire_resistance_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_nature_resistance_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_nature_resistance_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_frost_resistance_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_frost_resistance_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_shadow_resistance_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_shadow_resistance_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_arcane_resistance_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_arcane_resistance_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_base_mana_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_base_mana_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_base_health_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_base_health_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_bytes_2_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_unit_bytes_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_attack_power_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_attack_power_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_attack_power_mods_set(vanilla_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts vanilla_update_mask_unit_attack_power_mods_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_attack_power_multiplier_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_attack_power_multiplier_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_ranged_attack_power_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_ranged_attack_power_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_ranged_attack_power_mods_set(vanilla_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts vanilla_update_mask_unit_ranged_attack_power_mods_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_ranged_attack_power_multiplier_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_ranged_attack_power_multiplier_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_minrangeddamage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_minrangeddamage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_maxrangeddamage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_maxrangeddamage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_power_cost_modifier_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_unit_power_cost_modifier_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_unit_power_cost_multiplier_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_unit_power_cost_multiplier_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_duel_arbiter_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_player_duel_arbiter_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_flags_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_flags_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_guildid_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_guildid_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_guildrank_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_guildrank_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_features_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_player_features_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_bytes_2_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_player_bytes_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_bytes_3_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_player_bytes_3_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_duel_team_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_duel_team_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_guild_timestamp_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_guild_timestamp_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_1_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_1_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_1_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_1_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_2_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_2_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_2_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_2_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_3_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_3_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_3_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_3_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_4_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_4_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_4_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_4_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_5_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_5_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_5_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_5_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_6_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_6_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_6_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_6_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_7_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_7_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_7_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_7_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_8_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_8_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_8_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_8_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_9_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_9_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_9_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_9_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_10_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_10_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_10_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_10_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_11_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_11_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_11_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_11_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_12_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_12_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_12_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_12_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_13_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_13_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_13_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_13_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_14_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_14_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_14_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_14_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_15_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_15_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_15_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_15_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_16_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_16_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_16_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_16_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_17_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_17_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_17_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_17_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_18_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_18_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_18_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_18_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_19_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_19_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_19_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_19_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_20_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_20_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_quest_log_20_2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_quest_log_20_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_visible_item_creator_set(vanilla_UpdateMask* mask, uint32_t index, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_player_visible_item_creator_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_visible_item_item_set(vanilla_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_visible_item_item_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_visible_item_enchants_set(vanilla_UpdateMask* mask, uint32_t index, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_player_visible_item_enchants_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_visible_item_random_property_id_set(vanilla_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_visible_item_random_property_id_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_visible_item_item_suffix_factor_set(vanilla_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_visible_item_item_suffix_factor_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_player_field_inv_get(const vanilla_UpdateMask* mask, vanilla_ItemSlot def);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_inv_set(vanilla_UpdateMask* mask, vanilla_ItemSlot def, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_farsight_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_player_farsight_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_combo_target_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_player_field_combo_target_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_xp_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_xp_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_next_level_xp_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_next_level_xp_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_skill_info_skill_set(vanilla_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_skill_info_skill_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_skill_info_skill_step_set(vanilla_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_skill_info_skill_step_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_skill_info_minimum_set(vanilla_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_skill_info_minimum_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_skill_info_maximum_set(vanilla_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_skill_info_maximum_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_skill_info_permanent_bonus_set(vanilla_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_skill_info_permanent_bonus_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_skill_info_temporary_bonus_set(vanilla_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_skill_info_temporary_bonus_get(const vanilla_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_character_points1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_character_points1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_character_points2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_character_points2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_track_creatures_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_track_creatures_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_track_resources_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_track_resources_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_block_percentage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_player_block_percentage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_dodge_percentage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_player_dodge_percentage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_parry_percentage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_player_parry_percentage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_crit_percentage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_player_crit_percentage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_ranged_crit_percentage_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_player_ranged_crit_percentage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_explored_zones_1_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_player_explored_zones_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_rest_state_experience_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_rest_state_experience_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_coinage_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_coinage_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_posstat0_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_posstat0_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_posstat1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_posstat1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_posstat2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_posstat2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_posstat3_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_posstat3_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_posstat4_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_posstat4_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_negstat0_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_negstat0_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_negstat1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_negstat1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_negstat2_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_negstat2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_negstat3_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_negstat3_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_negstat4_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_negstat4_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_resistancebuffmodspositive_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_resistancebuffmodspositive_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_resistancebuffmodsnegative_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_resistancebuffmodsnegative_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_mod_damage_done_pos_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_mod_damage_done_pos_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_mod_damage_done_neg_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_mod_damage_done_neg_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_mod_damage_done_pct_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_mod_damage_done_pct_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_bytes_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_player_field_bytes_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_ammo_id_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_ammo_id_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_self_res_spell_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_self_res_spell_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_pvp_medals_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_pvp_medals_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_buyback_price_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_buyback_price_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_buyback_timestamp_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_buyback_timestamp_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_session_kills_set(vanilla_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts vanilla_update_mask_player_field_session_kills_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_yesterday_kills_set(vanilla_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts vanilla_update_mask_player_field_yesterday_kills_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_last_week_kills_set(vanilla_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts vanilla_update_mask_player_field_last_week_kills_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_this_week_kills_set(vanilla_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts vanilla_update_mask_player_field_this_week_kills_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_this_week_contribution_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_this_week_contribution_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_lifetime_honorbale_kills_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_lifetime_honorbale_kills_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_lifetime_dishonorbale_kills_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_lifetime_dishonorbale_kills_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_yesterday_contribution_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_yesterday_contribution_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_last_week_contribution_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_last_week_contribution_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_last_week_rank_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_last_week_rank_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_bytes2_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_player_field_bytes2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_watched_faction_index_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_watched_faction_index_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_player_field_combat_rating_1_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_player_field_combat_rating_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_created_by_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_game_object_created_by_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_displayid_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_game_object_displayid_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_flags_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_game_object_flags_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_rotation_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_game_object_rotation_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_state_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_game_object_state_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_pos_x_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_game_object_pos_x_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_pos_y_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_game_object_pos_y_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_pos_z_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_game_object_pos_z_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_facing_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_game_object_facing_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_dyn_flags_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_game_object_dyn_flags_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_faction_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_game_object_faction_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_type_id_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_game_object_type_id_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_level_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_game_object_level_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_artkit_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_game_object_artkit_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_game_object_animprogress_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_game_object_animprogress_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_dynamic_object_caster_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_dynamic_object_caster_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_dynamic_object_bytes_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_dynamic_object_bytes_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_dynamic_object_spellid_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_dynamic_object_spellid_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_dynamic_object_radius_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_dynamic_object_radius_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_dynamic_object_pos_x_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_dynamic_object_pos_x_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_dynamic_object_pos_y_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_dynamic_object_pos_y_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_dynamic_object_pos_z_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_dynamic_object_pos_z_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_dynamic_object_facing_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_dynamic_object_facing_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_owner_set(vanilla_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t vanilla_update_mask_corpse_owner_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_facing_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_corpse_facing_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_pos_x_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_corpse_pos_x_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_pos_y_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_corpse_pos_y_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_pos_z_set(vanilla_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float vanilla_update_mask_corpse_pos_z_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_display_id_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_corpse_display_id_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_item_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_corpse_item_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_bytes_1_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_corpse_bytes_1_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_bytes_2_set(vanilla_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes vanilla_update_mask_corpse_bytes_2_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_guild_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_corpse_guild_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_flags_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_corpse_flags_get(const vanilla_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_update_mask_corpse_dynamic_flags_set(vanilla_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t vanilla_update_mask_corpse_dynamic_flags_get(const vanilla_UpdateMask* mask);

typedef struct {
    vanilla_AddonType addon_type;
    vanilla_InfoBlock info_block;
    vanilla_KeyVersion key_version;
    uint8_t public_key[256];
    uint32_t update_available_flag;
    vanilla_UrlInfo url_info;
    char* url;

} vanilla_Addon;

typedef struct {
    char* addon_name;
    uint8_t addon_has_signature;
    uint32_t addon_crc;
    uint32_t addon_extra_crc;

} vanilla_AddonInfo;

typedef struct {
    uint32_t id;
    uint32_t item;
    uint32_t item_enchantment;
    uint32_t item_random_property_id;
    uint32_t item_suffix_factor;
    uint32_t item_count;
    uint32_t item_charges;
    uint64_t item_owner;
    uint32_t start_bid;
    uint32_t minimum_bid;
    uint32_t buyout_amount;
    uint32_t time_left;
    uint64_t highest_bidder;
    uint32_t highest_bid;

} vanilla_AuctionListItem;

typedef struct {
    vanilla_AuraType aura_type;
    uint32_t damage1;
    vanilla_SpellSchool school;
    uint32_t absorbed;
    /* vmangos: Sent as int32 */
    uint32_t resisted;
    uint32_t damage2;
    /* vmangos: A miscvalue that is dependent on what the aura will do, this is usually decided by the AuraType, ie: with AuraType::SPELL_AURA_MOD_BASE_RESISTANCE_PCT this value could be SpellSchoolMask::SPELL_SCHOOL_MASK_NORMAL which would tell the aura that it should change armor.  If Modifier::m_auraname would have been AuraType::SPELL_AURA_MOUNTED then m_miscvalue would have decided which model the mount should have */
    uint32_t misc_value1;
    uint32_t damage3;
    /* vmangos: A miscvalue that is dependent on what the aura will do, this is usually decided by the AuraType, ie: with AuraType::SPELL_AURA_MOD_BASE_RESISTANCE_PCT this value could be SpellSchoolMask::SPELL_SCHOOL_MASK_NORMAL which would tell the aura that it should change armor.  If Modifier::m_auraname would have been AuraType::SPELL_AURA_MOUNTED then m_miscvalue would have decided which model the mount should have */
    uint32_t misc_value2;
    uint32_t damage;
    float gain_multiplier;

} vanilla_AuraLog;

typedef struct {
    uint64_t player;
    vanilla_PvpRank rank;
    uint32_t killing_blows;
    uint32_t honorable_kills;
    uint32_t deaths;
    uint32_t bonus_honor;
    uint32_t amount_of_extra_fields;
    /* This depends on the BG in question. AV expects 7: Graveyards Assaulted, Graveyards Defended, Towers Assaulted, Towers Defended, Secondary Objectives, LieutenantCount, SecondaryNpc
WSG expects 2: Flag captures and flag returns
AB expects 2: Bases assaulted and bases defended */
    uint32_t* fields;

} vanilla_BattlegroundPlayer;

typedef struct {
    uint64_t player;
    float position_x;
    float position_y;

} vanilla_BattlegroundPlayerPosition;

typedef struct {
    uint64_t guid;
    vanilla_ChannelMemberFlags member_flags;

} vanilla_ChannelMember;

typedef struct {
    uint32_t equipment_display_id;
    vanilla_InventoryType inventory_type;

} vanilla_CharacterGear;

typedef struct {
    uint64_t guid;
    char* name;
    vanilla_Race race;
    vanilla_Class class_type;
    vanilla_Gender gender;
    uint8_t skin;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;
    uint8_t level;
    vanilla_Area area;
    vanilla_Map map;
    all_Vector3d position;
    uint32_t guild_id;
    vanilla_CharacterFlags flags;
    bool first_login;
    uint32_t pet_display_id;
    uint32_t pet_level;
    vanilla_CreatureFamily pet_family;
    vanilla_CharacterGear equipment[19];

} vanilla_Character;

typedef struct {
    all_Vector3d spline_point;
    uint32_t spline_id;
    vanilla_MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all_Vector3d position;
    vanilla_SplineFlag spline_flags;
    uint32_t duration;
    MonsterMoveSpline splines;

} vanilla_MonsterMove;

typedef struct {
    vanilla_CompressedMoveOpcode opcode;
    uint64_t guid;
    float speed;
    vanilla_MonsterMove monster_move;
    uint64_t transport;
    vanilla_MonsterMove monster_move_transport;

} vanilla_CompressedMove;

typedef struct {
    uint16_t spell_id;
    /* cmangos/mangoszero: cast item id */
    uint16_t item_id;
    uint16_t spell_category;
    uint32_t cooldown;
    uint32_t category_cooldown;

} vanilla_CooldownSpell;

typedef struct {
    uint32_t spell_school_mask;
    /* vmangos sends the same data in `damage_uint`. */
    float damage_float;
    /* vmangos sends the same data in `damage_float`. */
    uint32_t damage_uint;
    uint32_t absorb;
    uint32_t resist;

} vanilla_DamageInfo;

typedef struct {
    vanilla_FactionFlag flag;
    uint32_t standing;

} vanilla_FactionInitializer;

typedef struct {
    vanilla_Faction faction;
    uint32_t standing;

} vanilla_FactionStanding;

typedef struct {
    vanilla_Faction faction;
    uint32_t reputation_rank;

} vanilla_ForcedReaction;

typedef struct {
    uint64_t guid;
    vanilla_FriendStatus status;
    vanilla_Area area;
    uint32_t level;
    vanilla_Class class_type;

} vanilla_Friend;

typedef struct {
    /* cmangos: questions found in GMSurveyQuestions.dbc
ref to i'th GMSurveySurveys.dbc field (all fields in that dbc point to fields in GMSurveyQuestions.dbc) */
    uint32_t question_id;
    /* Rating: hardcoded limit of 0-5 in pre-Wrath, ranges defined in GMSurveyAnswers.dbc Wrath+ */
    uint8_t answer;
    /* Usage: `GMSurveyAnswerSubmit(question, rank, comment)`
cmangos: Unused in stock UI, can be only set by calling Lua function */
    char* comment;

} vanilla_GmSurveyQuestion;

typedef struct {
    /* vmangos: sets to loop index */
    uint32_t id;
    uint8_t item_icon;
    /* vmangos: makes pop up box password */
    bool coded;
    char* message;

} vanilla_GossipItem;

typedef struct {
    char* name;
    uint64_t guid;
    bool is_online;
    /* mangoszero/cmangos/vmangos: own flags (groupid | (assistant?0x80:0)) */
    uint8_t flags;

} vanilla_GroupListMember;

typedef struct {
    uint64_t guid;
    vanilla_GuildMemberStatus status;
    char* name;
    uint32_t rank;
    uint8_t level;
    vanilla_Class class_type;
    vanilla_Area area;
    float time_offline;
    char* public_note;
    char* officer_note;

} vanilla_GuildMember;

typedef struct {
    /* cmangos/mangoszero: only send 'first' part of spell */
    uint16_t spell_id;
    /* cmangos/mangoszero: sets to 0
cmangos/mangoszero: it's not slot id */
    uint16_t unknown1;

} vanilla_InitialSpell;

typedef struct {
    float damage_minimum;
    float damage_maximum;
    vanilla_SpellSchool school;

} vanilla_ItemDamageType;

typedef struct {
    uint32_t spell;
    vanilla_SpellTriggerType spell_trigger;
    /* let the database control the sign here. negative means that the item should be consumed once the charges are consumed. */
    int32_t spell_charges;
    int32_t spell_cooldown;
    uint32_t spell_category;
    int32_t spell_category_cooldown;

} vanilla_ItemSpells;

typedef struct {
    vanilla_ItemStatType stat_type;
    int32_t value;

} vanilla_ItemStat;

typedef struct {
    uint32_t item_stack_count;
    uint32_t item;
    uint32_t item_display_id;
    /* cmangos: 0 for infinity item amount, although they send 0xFFFFFFFF in that case */
    uint32_t max_items;
    uint32_t price;
    uint32_t max_durability;
    uint32_t durability;

} vanilla_ListInventoryItem;

typedef struct {
    uint8_t index;
    uint32_t item;
    vanilla_LootSlotType ty;

} vanilla_LootItem;

typedef struct {
    uint32_t message_id;
    vanilla_MailType message_type;
    uint64_t sender;
    uint32_t sender_id;
    uint32_t auction_id;
    char* subject;
    uint32_t item_text_id;
    /* cmangos/vmangos/mangoszero: set to 0 */
    uint32_t unknown1;
    /* cmangos/vmangos/mangoszero: stationery (Stationery.dbc) */
    uint32_t stationery;
    uint32_t item;
    uint32_t item_enchant_id;
    uint32_t item_random_property_id;
    uint32_t item_suffix_factor;
    uint8_t item_stack_size;
    uint32_t item_spell_charges;
    uint32_t max_durability;
    uint32_t durability;
    uint32_t money;
    uint32_t cash_on_delivery_amount;
    /* cmangos/vmangos/mangoszero: All have a comment with 'flags' but send the timestamp from the item. */
    uint32_t checked_timestamp;
    float expiration_time;
    /* cmangos/vmangos/mangoszero: mail template (MailTemplate.dbc) */
    uint32_t mail_template_id;

} vanilla_Mail;

typedef struct {
    vanilla_UpdateFlag update_flag;
    vanilla_MovementFlags flags;
    uint32_t timestamp;
    all_Vector3d living_position;
    float living_orientation;
    uint64_t transport_guid;
    all_Vector3d transport_position;
    float transport_orientation;
    float pitch;
    float fall_time;
    float z_speed;
    float cos_angle;
    float sin_angle;
    float xy_speed;
    float spline_elevation;
    float walking_speed;
    float running_speed;
    float backwards_running_speed;
    float swimming_speed;
    float backwards_swimming_speed;
    float turn_rate;
    vanilla_SplineFlag spline_flags;
    float angle;
    uint64_t target;
    all_Vector3d spline_final_point;
    uint32_t time_passed;
    uint32_t duration;
    uint32_t id;
    uint32_t amount_of_nodes;
    all_Vector3d* nodes;
    all_Vector3d final_node;
    all_Vector3d position;
    float orientation;
    /* vmangos statically sets to 0 */
    uint32_t unknown0;
    /* vmangos sets statically to 1 */
    uint32_t unknown1;
    uint64_t guid;
    uint32_t transport_progress_in_ms;

} vanilla_MovementBlock;

typedef struct {
    uint64_t guid;
    all_Vector3d position;
    float orientation;
    uint32_t timestamp;

} vanilla_TransportInfo;

typedef struct {
    vanilla_MovementFlags flags;
    uint32_t timestamp;
    all_Vector3d position;
    float orientation;
    vanilla_TransportInfo transport;
    float pitch;
    float fall_time;
    float z_speed;
    float cos_angle;
    float sin_angle;
    float xy_speed;
    float spline_elevation;

} vanilla_MovementInfo;

typedef struct {
    uint32_t delay;
    uint32_t emote;

} vanilla_NpcTextUpdateEmote;

typedef struct {
    float probability;
    char* texts[2];
    vanilla_Language language;
    vanilla_NpcTextUpdateEmote emotes[3];

} vanilla_NpcTextUpdate;

typedef struct {
    vanilla_UpdateType update_type;
    uint64_t guid1;
    vanilla_UpdateMask mask1;
    uint64_t guid2;
    vanilla_MovementBlock movement1;
    uint64_t guid3;
    vanilla_ObjectType object_type;
    vanilla_MovementBlock movement2;
    vanilla_UpdateMask mask2;
    uint32_t count;
    uint64_t* guids;

} vanilla_Object;

typedef struct {
    uint16_t spell;
    /* mangoszero: sets to 0 */
    uint16_t spell_category;
    uint32_t cooldown;
    uint32_t category_cooldown;

} vanilla_PetSpellCooldown;

typedef struct {
    uint32_t index;
    /* cmangos/vmangos/mangoszero: statically sets to guild charter item id (5863) and arena charter ids. */
    uint32_t charter_entry;
    /* cmangos/vmangos/mangoszero: statically sets to guild charter display id (16161) and arena charter ids. */
    uint32_t charter_display_id;
    /* cmangos/vmangos/mangoszero: statically set to 1000 (10 silver) for guild charters and the cost of arena charters for that. */
    uint32_t guild_charter_cost;
    /* cmangos/vmangos/mangoszero: statically set to 1 */
    uint32_t unknown1;

} vanilla_PetitionShowlist;

typedef struct {
    uint64_t signer;
    uint32_t unknown1;

} vanilla_PetitionSignature;

typedef struct {
    uint32_t emote;
    uint32_t emote_delay;

} vanilla_QuestDetailsEmote;

typedef struct {
    uint32_t quest_id;
    uint32_t quest_icon;
    uint32_t level;
    /* vmangos/cmangos/mangoszero: max 0x200 */
    char* title;

} vanilla_QuestItem;

typedef struct {
    uint32_t item;
    uint32_t item_count;
    uint32_t item_display_id;

} vanilla_QuestItemRequirement;

typedef struct {
    uint32_t item;
    uint32_t item_count;

} vanilla_QuestItemReward;

typedef struct {
    /* cmangos: client expected gameobject template id in form (id|0x80000000) */
    uint32_t creature_id;
    uint32_t kill_count;
    uint32_t required_item_id;
    uint32_t required_item_count;

} vanilla_QuestObjective;

typedef struct {
    vanilla_Map map;
    uint32_t reset_time;
    uint32_t instance_id;

} vanilla_RaidInfo;

typedef struct {
    vanilla_RaidTargetIndex index;
    uint64_t guid;

} vanilla_RaidTargetUpdate;

typedef struct {
    vanilla_SpellCastTargetFlags target_flags;
    uint64_t unit_target;
    uint64_t gameobject;
    uint64_t object_unk;
    uint64_t item;
    uint64_t trade_item;
    all_Vector3d source;
    all_Vector3d destination;
    char* target_string;
    uint64_t corpse;
    uint64_t pvp_corpse;

} vanilla_SpellCastTargets;

typedef struct {
    uint32_t id;
    uint32_t cooldown_time;

} vanilla_SpellCooldownStatus;

typedef struct {
    vanilla_SpellEffect effect;
    uint64_t target1;
    uint32_t amount;
    vanilla_Power power;
    float multiplier;
    uint64_t target2;
    uint32_t heal_amount;
    uint32_t heal_critical;
    uint64_t target3;
    uint32_t energize_amount;
    uint32_t energize_power;
    uint64_t target4;
    uint32_t extra_attacks;
    uint32_t item;
    uint64_t target5;
    uint32_t interrupted_spell;
    uint64_t target6;
    uint32_t item_to_damage;
    uint32_t unknown5;
    uint32_t feed_pet_item;
    uint64_t target7;

} vanilla_SpellLog;

typedef struct {
    uint64_t target;
    vanilla_SpellMissInfo miss_info;

} vanilla_SpellLogMiss;

typedef struct {
    uint64_t target;
    vanilla_SpellMissInfo miss_info;

} vanilla_SpellMiss;

typedef struct {
    uint32_t pet_number;
    uint32_t entry;
    uint32_t level;
    char* name;
    uint32_t loyalty;
    /* vmangos/mangoszero/cmangos: client slot 1 == current pet (0) */
    uint8_t slot;

} vanilla_StabledPet;

typedef struct {
    /* cmangos/vmangos/mangoszero: sets to index of array */
    uint8_t trade_slot_number;
    uint32_t item;
    uint32_t display_id;
    uint32_t stack_count;
    bool wrapped;
    uint64_t gift_wrapper;
    uint32_t enchantment;
    uint64_t item_creator;
    uint32_t spell_charges;
    uint32_t item_suffix_factor;
    uint32_t item_random_properties_id;
    uint32_t lock_id;
    uint32_t max_durability;
    uint32_t durability;

} vanilla_TradeSlot;

typedef struct {
    /* cmangos: learned spell (or cast-spell in profession case) */
    uint32_t spell;
    vanilla_TrainerSpellState state;
    uint32_t spell_cost;
    /* cmangos: spells don't cost talent points
cmangos: set to 0 */
    uint32_t talent_point_cost;
    /* cmangos: must be equal prev. field to have learn button in enabled state
cmangos: 1 for true 0 for false */
    uint32_t first_rank;
    uint8_t required_level;
    vanilla_Skill required_skill;
    uint32_t required_skill_value;
    uint32_t required_spells[3];

} vanilla_TrainerSpell;

typedef struct {
    char* name;
    char* guild;
    uint32_t level;
    vanilla_Class class_type;
    vanilla_Race race;
    vanilla_Area area;
    uint32_t party_status;

} vanilla_WhoPlayer;

typedef struct {
    uint32_t state;
    uint32_t value;

} vanilla_WorldState;

#define VANILLA_AURA_MASK_SIZE 32
typedef struct {
    uint16_t auras[VANILLA_AURA_MASK_SIZE];
} vanilla_AuraMask;

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BOOTME_write(WowWorldWriter* writer);

/* Executes a query directly on the world server.
Not implemented on any major emulator. */
typedef struct {
    char* query;

} vanilla_CMSG_DBLOOKUP;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_DBLOOKUP_free(vanilla_CMSG_DBLOOKUP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_DBLOOKUP_write(WowWorldWriter* writer, const vanilla_CMSG_DBLOOKUP* object);

/* Sent when using the `worldport` console command. */
typedef struct {
    uint32_t time;
    vanilla_Map map;
    all_Vector3d position;
    float orientation;

} vanilla_CMSG_WORLD_TELEPORT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_WORLD_TELEPORT_write(WowWorldWriter* writer, const vanilla_CMSG_WORLD_TELEPORT* object);

/* Sent when using the `port` console command. */
typedef struct {
    char* name;

} vanilla_CMSG_TELEPORT_TO_UNIT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_TELEPORT_TO_UNIT_free(vanilla_CMSG_TELEPORT_TO_UNIT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TELEPORT_TO_UNIT_write(WowWorldWriter* writer, const vanilla_CMSG_TELEPORT_TO_UNIT* object);

/* Sent after the client presses 'Create Character'. The client will then wait for [SMSG_CHAR_CREATE]. */
typedef struct {
    char* name;
    vanilla_Race race;
    vanilla_Class class_type;
    vanilla_Gender gender;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;

} vanilla_CMSG_CHAR_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHAR_CREATE_free(vanilla_CMSG_CHAR_CREATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHAR_CREATE_write(WowWorldWriter* writer, const vanilla_CMSG_CHAR_CREATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHAR_ENUM_write(WowWorldWriter* writer);

/* Command to delete a character from the clients account. Can be sent after the client has received [SMSG_CHAR_ENUM].
Sent after the client has confirmed the character deletion. */
typedef struct {
    uint64_t guid;

} vanilla_CMSG_CHAR_DELETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHAR_DELETE_write(WowWorldWriter* writer, const vanilla_CMSG_CHAR_DELETE* object);

/* Response to [CMSG_CHAR_CREATE].
Every [WorldResult] except `CHAR_CREATE_SUCCESS` will lead to a popup showing. `CHAR_CREATE_SUCCESS` will cause the client to send a [CMSG_CHAR_ENUM]. */
typedef struct {
    vanilla_WorldResult result;

} vanilla_SMSG_CHAR_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CHAR_CREATE_write(WowWorldWriter* writer, const vanilla_SMSG_CHAR_CREATE* object);

/* Response to [CMSG_CHAR_ENUM]. */
typedef struct {
    /* Client can not handle values larger than 10 */
    uint8_t amount_of_characters;
    vanilla_Character* characters;

} vanilla_SMSG_CHAR_ENUM;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_CHAR_ENUM_free(vanilla_SMSG_CHAR_ENUM* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CHAR_ENUM_write(WowWorldWriter* writer, const vanilla_SMSG_CHAR_ENUM* object);

/* Response to [CMSG_CHAR_DELETE].
The result of this message will update the client character screen without them sending another [CMSG_CHAR_ENUM]. */
typedef struct {
    vanilla_WorldResult result;

} vanilla_SMSG_CHAR_DELETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CHAR_DELETE_write(WowWorldWriter* writer, const vanilla_SMSG_CHAR_DELETE* object);

/* Command to log into the specified character.
This is sent after the client has been authenticated and served the character list with [SMSG_CHAR_ENUM].
If the player receives a [SMSG_CHARACTER_LOGIN_FAILED] it will return to the character screen and send a [CMSG_CHAR_ENUM]. */
typedef struct {
    uint64_t guid;

} vanilla_CMSG_PLAYER_LOGIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PLAYER_LOGIN_write(WowWorldWriter* writer, const vanilla_CMSG_PLAYER_LOGIN* object);

typedef struct {
    vanilla_Map map;
    all_Vector3d position;
    float orientation;

} vanilla_SMSG_NEW_WORLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_NEW_WORLD_write(WowWorldWriter* writer, const vanilla_SMSG_NEW_WORLD* object);

typedef struct {
    uint32_t transport;
    vanilla_Map transport_map;
} vanilla_SMSG_TRANSFER_PENDING_has_transport;

typedef struct {
    vanilla_Map map;

    vanilla_SMSG_TRANSFER_PENDING_has_transport* has_transport;
} vanilla_SMSG_TRANSFER_PENDING;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_TRANSFER_PENDING_free(vanilla_SMSG_TRANSFER_PENDING* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TRANSFER_PENDING_write(WowWorldWriter* writer, const vanilla_SMSG_TRANSFER_PENDING* object);

typedef struct {
    vanilla_Map map;
    vanilla_TransferAbortReason reason;
    /* Possibly not needed. */
    uint8_t argument;

} vanilla_SMSG_TRANSFER_ABORTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TRANSFER_ABORTED_write(WowWorldWriter* writer, const vanilla_SMSG_TRANSFER_ABORTED* object);

/* Response if [CMSG_PLAYER_LOGIN] fails. If successful it should instead be [SMSG_LOGIN_VERIFY_WORLD].
Client seems to always send a [CMSG_CANCEL_TRADE] after receiving this message, for unknown reasons. */
typedef struct {
    vanilla_WorldResult result;

} vanilla_SMSG_CHARACTER_LOGIN_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CHARACTER_LOGIN_FAILED_write(WowWorldWriter* writer, const vanilla_SMSG_CHARACTER_LOGIN_FAILED* object);

/* Tells the client what the datetime is and how fast time passes.
The client also asks for the datetime with [CMSG_QUERY_TIME] and gets a reply from [SMSG_QUERY_TIME_RESPONSE], but this does not appear to change anything in the client.
Despite sending this as the very first message after the client logs in it will still send a [CMSG_QUERY_TIME]. */
typedef struct {
    /* Current server datetime.
Running the client with `-console` verifies that this message in this format sets the correct datetime. [SMSG_QUERY_TIME_RESPONSE] will not set this. */
    uint32_t datetime;
    /* How many minutes should pass by every second.
vmangos/cmangos/mangoszero set this to 0.01666667. This means that 1/60 minutes pass every second (one second passes every second). Setting this to 1.0 will make the client advance one minute every second. */
    float timescale;

} vanilla_SMSG_LOGIN_SETTIMESPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOGIN_SETTIMESPEED_write(WowWorldWriter* writer, const vanilla_SMSG_LOGIN_SETTIMESPEED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PLAYER_LOGOUT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LOGOUT_REQUEST_write(WowWorldWriter* writer);

/* Reply to [CMSG_LOGOUT_REQUEST].
The client expects to get an [SMSG_LOGOUT_COMPLETE] when logout is complete. */
typedef struct {
    vanilla_LogoutResult result;
    vanilla_LogoutSpeed speed;

} vanilla_SMSG_LOGOUT_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOGOUT_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_LOGOUT_RESPONSE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOGOUT_COMPLETE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LOGOUT_CANCEL_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOGOUT_CANCEL_ACK_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_NAME_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_NAME_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_NAME_QUERY* object);

/* Response to [CMSG_NAME_QUERY]. */
typedef struct {
    uint64_t guid;
    char* character_name;
    /* Used for showing cross realm realm names. If this is an empty string it is shown like a regular player on the same realm. */
    char* realm_name;
    vanilla_Race race;
    vanilla_Gender gender;
    vanilla_Class class_type;

} vanilla_SMSG_NAME_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_NAME_QUERY_RESPONSE_free(vanilla_SMSG_NAME_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_NAME_QUERY_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_NAME_QUERY_RESPONSE* object);

typedef struct {
    uint32_t pet_number;
    uint64_t guid;

} vanilla_CMSG_PET_NAME_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PET_NAME_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_PET_NAME_QUERY* object);

typedef struct {
    uint32_t pet_number;
    char* name;
    uint32_t pet_name_timestamp;

} vanilla_SMSG_PET_NAME_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_PET_NAME_QUERY_RESPONSE_free(vanilla_SMSG_PET_NAME_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_NAME_QUERY_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_PET_NAME_QUERY_RESPONSE* object);

typedef struct {
    uint32_t guild_id;

} vanilla_CMSG_GUILD_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_QUERY* object);

typedef struct {
    uint32_t id;
    char* name;
    char* rank_names[10];
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;
    uint32_t background_color;

} vanilla_SMSG_GUILD_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GUILD_QUERY_RESPONSE_free(vanilla_SMSG_GUILD_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GUILD_QUERY_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_GUILD_QUERY_RESPONSE* object);

typedef struct {
    uint32_t item;
    uint64_t guid;

} vanilla_CMSG_ITEM_QUERY_SINGLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ITEM_QUERY_SINGLE_write(WowWorldWriter* writer, const vanilla_CMSG_ITEM_QUERY_SINGLE* object);

typedef struct {
    vanilla_ItemClassAndSubClass class_and_sub_class;
    char* name1;
    char* name2;
    char* name3;
    char* name4;
    /* id from ItemDisplayInfo.dbc */
    uint32_t display_id;
    vanilla_ItemQuality quality;
    vanilla_ItemFlag flags;
    uint32_t buy_price;
    uint32_t sell_price;
    vanilla_InventoryType inventory_type;
    vanilla_AllowedClass allowed_class;
    vanilla_AllowedRace allowed_race;
    uint32_t item_level;
    uint32_t required_level;
    vanilla_Skill required_skill;
    uint32_t required_skill_rank;
    uint32_t required_spell;
    uint32_t required_honor_rank;
    uint32_t required_city_rank;
    vanilla_Faction required_faction;
    /* cmangos/vmangos/mangoszero: send value only if reputation faction id setted ( needed for some items) */
    uint32_t required_faction_rank;
    uint32_t max_count;
    uint32_t stackable;
    uint32_t container_slots;
    vanilla_ItemStat stats[10];
    vanilla_ItemDamageType damages[5];
    int32_t armor;
    int32_t holy_resistance;
    int32_t fire_resistance;
    int32_t nature_resistance;
    int32_t frost_resistance;
    int32_t shadow_resistance;
    int32_t arcane_resistance;
    uint32_t delay;
    uint32_t ammo_type;
    float ranged_range_modification;
    vanilla_ItemSpells spells[5];
    vanilla_Bonding bonding;
    char* description;
    uint32_t page_text;
    vanilla_Language language;
    vanilla_PageTextMaterial page_text_material;
    /* cmangos/vmangos/mangoszero: id from QuestCache.wdb */
    uint32_t start_quest;
    uint32_t lock_id;
    /* cmangos/vmangos/mangoszero: id from Material.dbc */
    uint32_t material;
    vanilla_SheatheType sheathe_type;
    /* cmangos/vmangos/mangoszero: id from ItemRandomProperties.dbc */
    uint32_t random_property;
    uint32_t block;
    vanilla_ItemSet item_set;
    uint32_t max_durability;
    vanilla_Area area;
    vanilla_Map map;
    vanilla_BagFamily bag_family;
} vanilla_SMSG_ITEM_QUERY_SINGLE_RESPONSE_found;

typedef struct {
    uint32_t item;

    vanilla_SMSG_ITEM_QUERY_SINGLE_RESPONSE_found* found;
} vanilla_SMSG_ITEM_QUERY_SINGLE_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_ITEM_QUERY_SINGLE_RESPONSE_free(vanilla_SMSG_ITEM_QUERY_SINGLE_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ITEM_QUERY_SINGLE_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_ITEM_QUERY_SINGLE_RESPONSE* object);

typedef struct {
    uint32_t page_id;

} vanilla_CMSG_PAGE_TEXT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PAGE_TEXT_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_PAGE_TEXT_QUERY* object);

typedef struct {
    uint32_t page_id;
    char* text;
    uint32_t next_page_id;

} vanilla_SMSG_PAGE_TEXT_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_PAGE_TEXT_QUERY_RESPONSE_free(vanilla_SMSG_PAGE_TEXT_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PAGE_TEXT_QUERY_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_PAGE_TEXT_QUERY_RESPONSE* object);

typedef struct {
    uint32_t quest_id;

} vanilla_CMSG_QUEST_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUEST_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_QUEST_QUERY* object);

typedef struct {
    uint32_t quest_id;
    /* Accepted values: 0, 1 or 2. 0==IsAutoComplete() (skip objectives/details) */
    uint32_t quest_method;
    uint32_t quest_level;
    uint32_t zone_or_sort;
    uint32_t quest_type;
    /* cmangos: shown in quest log as part of quest objective */
    vanilla_Faction reputation_objective_faction;
    /* cmangos: shown in quest log as part of quest objective */
    uint32_t reputation_objective_value;
    /* cmangos: RequiredOpositeRepFaction, required faction value with another (oposite) faction (objective). cmangos sets to 0 */
    vanilla_Faction required_opposite_faction;
    /* cmangos: RequiredOpositeRepValue, required faction value with another (oposite) faction (objective). cmangos sets to 0 */
    uint32_t required_opposite_reputation_value;
    uint32_t next_quest_in_chain;
    uint32_t money_reward;
    /* cmangos: used in XP calculation at client */
    uint32_t max_level_money_reward;
    /* cmangos: reward spell, this spell will display (icon) (casted if RewSpellCast==0) */
    uint32_t reward_spell;
    uint32_t source_item_id;
    uint32_t quest_flags;
    vanilla_QuestItemReward rewards[4];
    vanilla_QuestItemReward choice_rewards[6];
    uint32_t point_map_id;
    all_Vector2d position;
    uint32_t point_opt;
    char* title;
    char* objective_text;
    char* details;
    char* end_text;
    vanilla_QuestObjective objectives[4];
    char* objective_texts[4];

} vanilla_SMSG_QUEST_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_QUEST_QUERY_RESPONSE_free(vanilla_SMSG_QUEST_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUEST_QUERY_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_QUEST_QUERY_RESPONSE* object);

typedef struct {
    uint32_t entry_id;
    uint64_t guid;

} vanilla_CMSG_GAMEOBJECT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GAMEOBJECT_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_GAMEOBJECT_QUERY* object);

typedef struct {
    uint32_t info_type;
    uint32_t display_id;
    char* name1;
    char* name2;
    char* name3;
    char* name4;
    char* name5;
    uint32_t raw_data[6];
} vanilla_SMSG_GAMEOBJECT_QUERY_RESPONSE_found;

typedef struct {
    /* When the `found` optional is not present all emulators bitwise OR the entry with `0x80000000`.`` */
    uint32_t entry_id;

    vanilla_SMSG_GAMEOBJECT_QUERY_RESPONSE_found* found;
} vanilla_SMSG_GAMEOBJECT_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GAMEOBJECT_QUERY_RESPONSE_free(vanilla_SMSG_GAMEOBJECT_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GAMEOBJECT_QUERY_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_GAMEOBJECT_QUERY_RESPONSE* object);

typedef struct {
    uint32_t creature;
    uint64_t guid;

} vanilla_CMSG_CREATURE_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CREATURE_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_CREATURE_QUERY* object);

typedef struct {
    char* name1;
    char* name2;
    char* name3;
    char* name4;
    char* sub_name;
    uint32_t type_flags;
    /* cmangos: CreatureType.dbc   wdbFeild8 */
    uint32_t creature_type;
    vanilla_CreatureFamily creature_family;
    /* cmangos: Creature Rank (elite, boss, etc) */
    uint32_t creature_rank;
    /* cmangos: wdbFeild11 */
    uint32_t unknown0;
    /* cmangos: Id from CreatureSpellData.dbc wdbField12 */
    uint32_t spell_data_id;
    /* cmangos: DisplayID      wdbFeild13 and workaround, way to manage models must be fixed */
    uint32_t display_id;
    /* cmangos: wdbFeild14 */
    uint8_t civilian;
    uint8_t racial_leader;
} vanilla_SMSG_CREATURE_QUERY_RESPONSE_found;

typedef struct {
    /* When the `found` optional is not present all emulators bitwise OR the entry with `0x80000000`.`` */
    uint32_t creature_entry;

    vanilla_SMSG_CREATURE_QUERY_RESPONSE_found* found;
} vanilla_SMSG_CREATURE_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_CREATURE_QUERY_RESPONSE_free(vanilla_SMSG_CREATURE_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CREATURE_QUERY_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_CREATURE_QUERY_RESPONSE* object);

typedef struct {
    uint32_t minimum_level;
    uint32_t maximum_level;
    char* player_name;
    char* guild_name;
    uint32_t race_mask;
    uint32_t class_mask;
    uint32_t amount_of_zones;
    uint32_t* zones;
    uint32_t amount_of_strings;
    char** search_strings;

} vanilla_CMSG_WHO;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_WHO_free(vanilla_CMSG_WHO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_WHO_write(WowWorldWriter* writer, const vanilla_CMSG_WHO* object);

typedef struct {
    uint32_t listed_players;
    uint32_t online_players;
    vanilla_WhoPlayer* players;

} vanilla_SMSG_WHO;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_WHO_free(vanilla_SMSG_WHO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_WHO_write(WowWorldWriter* writer, const vanilla_SMSG_WHO* object);

typedef struct {
    char* character;

} vanilla_CMSG_WHOIS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_WHOIS_free(vanilla_CMSG_WHOIS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_WHOIS_write(WowWorldWriter* writer, const vanilla_CMSG_WHOIS* object);

typedef struct {
    /* vmangos: max CString length allowed: 256 */
    char* message;

} vanilla_SMSG_WHOIS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_WHOIS_free(vanilla_SMSG_WHOIS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_WHOIS_write(WowWorldWriter* writer, const vanilla_SMSG_WHOIS* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_FRIEND_LIST_write(WowWorldWriter* writer);

typedef struct {
    uint8_t amount_of_friends;
    vanilla_Friend* friends;

} vanilla_SMSG_FRIEND_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_FRIEND_LIST_free(vanilla_SMSG_FRIEND_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FRIEND_LIST_write(WowWorldWriter* writer, const vanilla_SMSG_FRIEND_LIST* object);

typedef struct {
    vanilla_FriendResult result;
    uint64_t guid;

} vanilla_SMSG_FRIEND_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FRIEND_STATUS_write(WowWorldWriter* writer, const vanilla_SMSG_FRIEND_STATUS* object);

typedef struct {
    char* name;

} vanilla_CMSG_ADD_FRIEND;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_ADD_FRIEND_free(vanilla_CMSG_ADD_FRIEND* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ADD_FRIEND_write(WowWorldWriter* writer, const vanilla_CMSG_ADD_FRIEND* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_DEL_FRIEND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_DEL_FRIEND_write(WowWorldWriter* writer, const vanilla_CMSG_DEL_FRIEND* object);

typedef struct {
    uint8_t amount_of_ignored;
    uint64_t* ignored;

} vanilla_SMSG_IGNORE_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_IGNORE_LIST_free(vanilla_SMSG_IGNORE_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_IGNORE_LIST_write(WowWorldWriter* writer, const vanilla_SMSG_IGNORE_LIST* object);

typedef struct {
    char* name;

} vanilla_CMSG_ADD_IGNORE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_ADD_IGNORE_free(vanilla_CMSG_ADD_IGNORE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ADD_IGNORE_write(WowWorldWriter* writer, const vanilla_CMSG_ADD_IGNORE* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_DEL_IGNORE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_DEL_IGNORE_write(WowWorldWriter* writer, const vanilla_CMSG_DEL_IGNORE* object);

typedef struct {
    char* name;

} vanilla_CMSG_GROUP_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GROUP_INVITE_free(vanilla_CMSG_GROUP_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_INVITE_write(WowWorldWriter* writer, const vanilla_CMSG_GROUP_INVITE* object);

typedef struct {
    char* name;

} vanilla_SMSG_GROUP_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GROUP_INVITE_free(vanilla_SMSG_GROUP_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GROUP_INVITE_write(WowWorldWriter* writer, const vanilla_SMSG_GROUP_INVITE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_ACCEPT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_DECLINE_write(WowWorldWriter* writer);

typedef struct {
    char* name;

} vanilla_SMSG_GROUP_DECLINE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GROUP_DECLINE_free(vanilla_SMSG_GROUP_DECLINE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GROUP_DECLINE_write(WowWorldWriter* writer, const vanilla_SMSG_GROUP_DECLINE* object);

typedef struct {
    char* name;

} vanilla_CMSG_GROUP_UNINVITE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GROUP_UNINVITE_free(vanilla_CMSG_GROUP_UNINVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_UNINVITE_write(WowWorldWriter* writer, const vanilla_CMSG_GROUP_UNINVITE* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_GROUP_UNINVITE_GUID;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_UNINVITE_GUID_write(WowWorldWriter* writer, const vanilla_CMSG_GROUP_UNINVITE_GUID* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GROUP_UNINVITE_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_GROUP_SET_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_SET_LEADER_write(WowWorldWriter* writer, const vanilla_CMSG_GROUP_SET_LEADER* object);

typedef struct {
    char* name;

} vanilla_SMSG_GROUP_SET_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GROUP_SET_LEADER_free(vanilla_SMSG_GROUP_SET_LEADER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GROUP_SET_LEADER_write(WowWorldWriter* writer, const vanilla_SMSG_GROUP_SET_LEADER* object);

typedef struct {
    vanilla_GroupLootSetting loot_setting;
    uint64_t loot_master;
    vanilla_ItemQuality loot_threshold;

} vanilla_CMSG_LOOT_METHOD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LOOT_METHOD_write(WowWorldWriter* writer, const vanilla_CMSG_LOOT_METHOD* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_DISBAND_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GROUP_DESTROYED_write(WowWorldWriter* writer);

typedef struct {
    vanilla_GroupLootSetting loot_setting;
    /* Zero if loot_setting is not MASTER_LOOT */
    uint64_t master_loot;
    vanilla_ItemQuality loot_threshold;
} vanilla_SMSG_GROUP_LIST_group_not_empty;

typedef struct {
    vanilla_GroupType group_type;
    /* mangoszero/cmangos/vmangos: own flags (groupid | (assistant?0x80:0)) */
    uint8_t flags;
    uint32_t amount_of_members;
    vanilla_GroupListMember* members;
    uint64_t leader;

    vanilla_SMSG_GROUP_LIST_group_not_empty* group_not_empty;
} vanilla_SMSG_GROUP_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GROUP_LIST_free(vanilla_SMSG_GROUP_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GROUP_LIST_write(WowWorldWriter* writer, const vanilla_SMSG_GROUP_LIST* object);

typedef struct {
    uint64_t guid;
    vanilla_GroupUpdateFlags mask;
    vanilla_GroupMemberOnlineStatus status;
    uint16_t current_health;
    uint16_t max_health;
    vanilla_Power power;
    uint16_t current_power;
    uint16_t max_power;
    uint16_t level;
    vanilla_Area area;
    /* cmangos: float cast to u16 */
    uint16_t position_x;
    /* cmangos: float cast to u16 */
    uint16_t position_y;
    /* cmangos: In all checked pre-2.x data of packets included only positive auras */
    vanilla_AuraMask auras;
    vanilla_AuraMask negative_auras;
    uint64_t pet;
    char* pet_name;
    uint16_t pet_display_id;
    uint16_t pet_current_health;
    uint16_t pet_max_health;
    vanilla_Power pet_power_type;
    uint16_t pet_current_power;
    uint16_t pet_max_power;
    vanilla_AuraMask pet_auras;

} vanilla_SMSG_PARTY_MEMBER_STATS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_PARTY_MEMBER_STATS_free(vanilla_SMSG_PARTY_MEMBER_STATS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PARTY_MEMBER_STATS_write(WowWorldWriter* writer, const vanilla_SMSG_PARTY_MEMBER_STATS* object);

typedef struct {
    vanilla_PartyOperation operation;
    char* member;
    vanilla_PartyResult result;

} vanilla_SMSG_PARTY_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_PARTY_COMMAND_RESULT_free(vanilla_SMSG_PARTY_COMMAND_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PARTY_COMMAND_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_PARTY_COMMAND_RESULT* object);

typedef struct {
    char* guild_name;

} vanilla_CMSG_GUILD_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_CREATE_free(vanilla_CMSG_GUILD_CREATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_CREATE_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_CREATE* object);

typedef struct {
    char* invited_player;

} vanilla_CMSG_GUILD_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_INVITE_free(vanilla_CMSG_GUILD_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_INVITE_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_INVITE* object);

typedef struct {
    char* player_name;
    char* guild_name;

} vanilla_SMSG_GUILD_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GUILD_INVITE_free(vanilla_SMSG_GUILD_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GUILD_INVITE_write(WowWorldWriter* writer, const vanilla_SMSG_GUILD_INVITE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_ACCEPT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_DECLINE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_INFO_write(WowWorldWriter* writer);

typedef struct {
    char* guild_name;
    uint32_t created_day;
    uint32_t created_month;
    uint32_t created_year;
    uint32_t amount_of_characters_in_guild;
    uint32_t amount_of_accounts_in_guild;

} vanilla_SMSG_GUILD_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GUILD_INFO_free(vanilla_SMSG_GUILD_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GUILD_INFO_write(WowWorldWriter* writer, const vanilla_SMSG_GUILD_INFO* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_ROSTER_write(WowWorldWriter* writer);

typedef struct {
    uint32_t amount_of_members;
    char* motd;
    char* guild_info;
    uint32_t amount_of_rights;
    uint32_t* rights;
    vanilla_GuildMember* members;

} vanilla_SMSG_GUILD_ROSTER;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GUILD_ROSTER_free(vanilla_SMSG_GUILD_ROSTER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GUILD_ROSTER_write(WowWorldWriter* writer, const vanilla_SMSG_GUILD_ROSTER* object);

typedef struct {
    char* player_name;

} vanilla_CMSG_GUILD_PROMOTE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_PROMOTE_free(vanilla_CMSG_GUILD_PROMOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_PROMOTE_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_PROMOTE* object);

typedef struct {
    char* player_name;

} vanilla_CMSG_GUILD_DEMOTE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_DEMOTE_free(vanilla_CMSG_GUILD_DEMOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_DEMOTE_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_DEMOTE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_LEAVE_write(WowWorldWriter* writer);

typedef struct {
    char* player_name;

} vanilla_CMSG_GUILD_REMOVE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_REMOVE_free(vanilla_CMSG_GUILD_REMOVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_REMOVE_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_REMOVE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_DISBAND_write(WowWorldWriter* writer);

typedef struct {
    char* new_guild_leader_name;

} vanilla_CMSG_GUILD_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_LEADER_free(vanilla_CMSG_GUILD_LEADER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_LEADER_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_LEADER* object);

typedef struct {
    char* message_of_the_day;

} vanilla_CMSG_GUILD_MOTD;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_MOTD_free(vanilla_CMSG_GUILD_MOTD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_MOTD_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_MOTD* object);

typedef struct {
    vanilla_GuildEvent event;
    uint8_t amount_of_events;
    char** event_descriptions;

} vanilla_SMSG_GUILD_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GUILD_EVENT_free(vanilla_SMSG_GUILD_EVENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GUILD_EVENT_write(WowWorldWriter* writer, const vanilla_SMSG_GUILD_EVENT* object);

typedef struct {
    vanilla_GuildCommand command;
    char* string;
    vanilla_GuildCommandResult result;

} vanilla_SMSG_GUILD_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GUILD_COMMAND_RESULT_free(vanilla_SMSG_GUILD_COMMAND_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GUILD_COMMAND_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_GUILD_COMMAND_RESULT* object);

typedef struct {
    vanilla_ChatType chat_type;
    vanilla_Language language;
    char* target_player;
    char* channel;
    char* message;

} vanilla_CMSG_MESSAGECHAT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_MESSAGECHAT_free(vanilla_CMSG_MESSAGECHAT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MESSAGECHAT_write(WowWorldWriter* writer, const vanilla_CMSG_MESSAGECHAT* object);

typedef struct {
    vanilla_ChatType chat_type;
    vanilla_Language language;
    char* monster_name;
    uint64_t monster;
    /* This character will have the speech bubble above their head.
0 value credits same as `chat_credit`. Invalid value credits no one.
cmangos/vmangos/mangoszero: `chat_credit` and `speech_bubble_credit` are the same */
    uint64_t speech_bubble_credit;
    /* This character will be appear to say this in the chat box.
0 value credits no name.
cmangos/vmangos/mangoszero: `chat_credit` and `speech_bubble_credit` are the same */
    uint64_t chat_credit;
    uint64_t sender1;
    char* sender_name;
    uint64_t target;
    char* channel_name;
    uint32_t player_rank;
    uint64_t player;
    uint64_t sender2;
    char* message;
    vanilla_PlayerChatTag tag;

} vanilla_SMSG_MESSAGECHAT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_MESSAGECHAT_free(vanilla_SMSG_MESSAGECHAT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MESSAGECHAT_write(WowWorldWriter* writer, const vanilla_SMSG_MESSAGECHAT* object);

typedef struct {
    char* channel_name;
    char* channel_password;

} vanilla_CMSG_JOIN_CHANNEL;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_JOIN_CHANNEL_free(vanilla_CMSG_JOIN_CHANNEL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_JOIN_CHANNEL_write(WowWorldWriter* writer, const vanilla_CMSG_JOIN_CHANNEL* object);

typedef struct {
    char* channel_name;

} vanilla_CMSG_LEAVE_CHANNEL;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_LEAVE_CHANNEL_free(vanilla_CMSG_LEAVE_CHANNEL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LEAVE_CHANNEL_write(WowWorldWriter* writer, const vanilla_CMSG_LEAVE_CHANNEL* object);

typedef struct {
    vanilla_ChatNotify notify_type;
    char* channel_name;

} vanilla_SMSG_CHANNEL_NOTIFY;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_CHANNEL_NOTIFY_free(vanilla_SMSG_CHANNEL_NOTIFY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CHANNEL_NOTIFY_write(WowWorldWriter* writer, const vanilla_SMSG_CHANNEL_NOTIFY* object);

typedef struct {
    char* channel_name;

} vanilla_CMSG_CHANNEL_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_LIST_free(vanilla_CMSG_CHANNEL_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_LIST_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_LIST* object);

typedef struct {
    char* channel_name;
    vanilla_ChannelFlags channel_flags;
    uint32_t amount_of_members;
    vanilla_ChannelMember* members;

} vanilla_SMSG_CHANNEL_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_CHANNEL_LIST_free(vanilla_SMSG_CHANNEL_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CHANNEL_LIST_write(WowWorldWriter* writer, const vanilla_SMSG_CHANNEL_LIST* object);

typedef struct {
    char* channel_name;
    char* channel_password;

} vanilla_CMSG_CHANNEL_PASSWORD;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_PASSWORD_free(vanilla_CMSG_CHANNEL_PASSWORD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_PASSWORD_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_PASSWORD* object);

typedef struct {
    char* channel_name;
    char* new_owner;

} vanilla_CMSG_CHANNEL_SET_OWNER;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_SET_OWNER_free(vanilla_CMSG_CHANNEL_SET_OWNER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_SET_OWNER_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_SET_OWNER* object);

typedef struct {
    char* channel_name;

} vanilla_CMSG_CHANNEL_OWNER;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_OWNER_free(vanilla_CMSG_CHANNEL_OWNER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_OWNER_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_OWNER* object);

typedef struct {
    char* channel_name;
    char* player_name;

} vanilla_CMSG_CHANNEL_MODERATOR;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_MODERATOR_free(vanilla_CMSG_CHANNEL_MODERATOR* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_MODERATOR_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_MODERATOR* object);

typedef struct {
    char* channel_name;
    char* player_name;

} vanilla_CMSG_CHANNEL_UNMODERATOR;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_UNMODERATOR_free(vanilla_CMSG_CHANNEL_UNMODERATOR* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_UNMODERATOR_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_UNMODERATOR* object);

typedef struct {
    char* channel_name;
    char* player_name;

} vanilla_CMSG_CHANNEL_MUTE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_MUTE_free(vanilla_CMSG_CHANNEL_MUTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_MUTE_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_MUTE* object);

typedef struct {
    char* channel_name;
    char* player_name;

} vanilla_CMSG_CHANNEL_UNMUTE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_UNMUTE_free(vanilla_CMSG_CHANNEL_UNMUTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_UNMUTE_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_UNMUTE* object);

typedef struct {
    char* channel_name;
    char* player_name;

} vanilla_CMSG_CHANNEL_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_INVITE_free(vanilla_CMSG_CHANNEL_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_INVITE_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_INVITE* object);

typedef struct {
    char* channel_name;
    char* player_name;

} vanilla_CMSG_CHANNEL_KICK;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_KICK_free(vanilla_CMSG_CHANNEL_KICK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_KICK_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_KICK* object);

typedef struct {
    char* channel_name;
    char* player_name;

} vanilla_CMSG_CHANNEL_BAN;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_BAN_free(vanilla_CMSG_CHANNEL_BAN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_BAN_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_BAN* object);

typedef struct {
    char* channel_name;
    char* player_name;

} vanilla_CMSG_CHANNEL_UNBAN;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_UNBAN_free(vanilla_CMSG_CHANNEL_UNBAN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_UNBAN_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_UNBAN* object);

typedef struct {
    char* channel_name;

} vanilla_CMSG_CHANNEL_ANNOUNCEMENTS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_ANNOUNCEMENTS_free(vanilla_CMSG_CHANNEL_ANNOUNCEMENTS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_ANNOUNCEMENTS_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_ANNOUNCEMENTS* object);

typedef struct {
    char* channel_name;

} vanilla_CMSG_CHANNEL_MODERATE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHANNEL_MODERATE_free(vanilla_CMSG_CHANNEL_MODERATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHANNEL_MODERATE_write(WowWorldWriter* writer, const vanilla_CMSG_CHANNEL_MODERATE* object);

typedef struct {
    uint32_t amount_of_objects;
    uint8_t has_transport;
    vanilla_Object* objects;

} vanilla_SMSG_UPDATE_OBJECT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_UPDATE_OBJECT_free(vanilla_SMSG_UPDATE_OBJECT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_UPDATE_OBJECT_write(WowWorldWriter* writer, const vanilla_SMSG_UPDATE_OBJECT* object);

/* Immediately removes an object from the presence of the player.
Used by vmangos for logout. */
typedef struct {
    uint64_t guid;

} vanilla_SMSG_DESTROY_OBJECT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DESTROY_OBJECT_write(WowWorldWriter* writer, const vanilla_SMSG_DESTROY_OBJECT* object);

typedef struct {
    uint8_t bag_index;
    uint8_t bag_slot;
    uint8_t spell_index;
    vanilla_SpellCastTargets targets;

} vanilla_CMSG_USE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_USE_ITEM_free(vanilla_CMSG_USE_ITEM* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_USE_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_USE_ITEM* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot;

} vanilla_CMSG_OPEN_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_OPEN_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_OPEN_ITEM* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot;

} vanilla_CMSG_READ_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_READ_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_READ_ITEM* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_READ_ITEM_OK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_READ_ITEM_OK_write(WowWorldWriter* writer, const vanilla_SMSG_READ_ITEM_OK* object);

/* vmangos has extra u8 with comment `0..2, read failure reason? if == 1, use next command`. */
typedef struct {
    uint64_t guid;

} vanilla_SMSG_READ_ITEM_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_READ_ITEM_FAILED_write(WowWorldWriter* writer, const vanilla_SMSG_READ_ITEM_FAILED* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} vanilla_SMSG_ITEM_COOLDOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ITEM_COOLDOWN_write(WowWorldWriter* writer, const vanilla_SMSG_ITEM_COOLDOWN* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_GAMEOBJ_USE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GAMEOBJ_USE_write(WowWorldWriter* writer, const vanilla_CMSG_GAMEOBJ_USE* object);

typedef struct {
    uint64_t guid;
    uint32_t animation_id;

} vanilla_SMSG_GAMEOBJECT_CUSTOM_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GAMEOBJECT_CUSTOM_ANIM_write(WowWorldWriter* writer, const vanilla_SMSG_GAMEOBJECT_CUSTOM_ANIM* object);

typedef struct {
    uint32_t trigger_id;

} vanilla_CMSG_AREATRIGGER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AREATRIGGER_write(WowWorldWriter* writer, const vanilla_CMSG_AREATRIGGER* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_FORWARD_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_FORWARD_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_FORWARD_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_FORWARD_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_FORWARD_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_FORWARD_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_BACKWARD_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_BACKWARD_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_BACKWARD_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_BACKWARD_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_BACKWARD_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_BACKWARD_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_STOP_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_STOP_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_STOP_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_STOP_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_STOP_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_STOP_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_STRAFE_LEFT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_STRAFE_LEFT_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_STRAFE_LEFT_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_STRAFE_LEFT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_STRAFE_LEFT_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_STRAFE_LEFT_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_STRAFE_RIGHT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_STRAFE_RIGHT_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_STRAFE_RIGHT_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_STRAFE_RIGHT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_STRAFE_RIGHT_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_STRAFE_RIGHT_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_STOP_STRAFE_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_STOP_STRAFE_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_STOP_STRAFE_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_STOP_STRAFE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_STOP_STRAFE_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_STOP_STRAFE_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_JUMP_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_JUMP_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_JUMP_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_JUMP_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_JUMP_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_JUMP_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_TURN_LEFT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_TURN_LEFT_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_TURN_LEFT_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_TURN_LEFT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_TURN_LEFT_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_TURN_LEFT_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_TURN_RIGHT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_TURN_RIGHT_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_TURN_RIGHT_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_TURN_RIGHT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_TURN_RIGHT_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_TURN_RIGHT_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_STOP_TURN_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_STOP_TURN_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_STOP_TURN_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_STOP_TURN_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_STOP_TURN_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_STOP_TURN_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_PITCH_UP_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_PITCH_UP_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_PITCH_UP_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_PITCH_UP_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_PITCH_UP_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_PITCH_UP_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_PITCH_DOWN_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_PITCH_DOWN_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_PITCH_DOWN_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_PITCH_DOWN_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_PITCH_DOWN_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_PITCH_DOWN_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_STOP_PITCH_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_STOP_PITCH_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_STOP_PITCH_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_STOP_PITCH_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_STOP_PITCH_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_STOP_PITCH_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_SET_RUN_MODE_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_SET_RUN_MODE_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_SET_RUN_MODE_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_SET_RUN_MODE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_SET_RUN_MODE_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_SET_RUN_MODE_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_SET_WALK_MODE_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_SET_WALK_MODE_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_SET_WALK_MODE_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_SET_WALK_MODE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_SET_WALK_MODE_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_SET_WALK_MODE_Server* object);

/* Response to [MSG_MOVE_TELEPORT_ACK_Server], at which point [MSG_MOVE_TELEPORT_ACK_Server] should be sent to observing players. */
typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    uint32_t time;

} vanilla_MSG_MOVE_TELEPORT_ACK_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_TELEPORT_ACK_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_TELEPORT_ACK_Client* object);

/* Can be response to [CMSG_TELEPORT_TO_UNIT].
Can also be a response to [MSG_MOVE_TELEPORT_ACK_Client] after being sent. */
typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_TELEPORT_ACK_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_TELEPORT_ACK_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_TELEPORT_ACK_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_FALL_LAND_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_FALL_LAND_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_FALL_LAND_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_FALL_LAND_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_FALL_LAND_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_FALL_LAND_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_SWIM_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_SWIM_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_SWIM_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_START_SWIM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_START_SWIM_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_START_SWIM_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_STOP_SWIM_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_STOP_SWIM_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_STOP_SWIM_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_STOP_SWIM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_STOP_SWIM_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_STOP_SWIM_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_SET_FACING_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_SET_FACING_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_SET_FACING_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_SET_FACING_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_SET_FACING_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_SET_FACING_Server* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_SET_PITCH_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_SET_PITCH_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_SET_PITCH_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_SET_PITCH_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_SET_PITCH_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_SET_PITCH_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_WORLDPORT_ACK_cmsg_write(WowWorldWriter* writer);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_WORLDPORT_ACK_smsg_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    all_Vector3d spline_point;
    uint32_t spline_id;
    vanilla_MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all_Vector3d position;
    vanilla_SplineFlag spline_flags;
    uint32_t duration;
    MonsterMoveSpline splines;

} vanilla_SMSG_MONSTER_MOVE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_MONSTER_MOVE_free(vanilla_SMSG_MONSTER_MOVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MONSTER_MOVE_write(WowWorldWriter* writer, const vanilla_SMSG_MONSTER_MOVE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} vanilla_SMSG_MOVE_WATER_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MOVE_WATER_WALK_write(WowWorldWriter* writer, const vanilla_SMSG_MOVE_WATER_WALK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} vanilla_SMSG_MOVE_LAND_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MOVE_LAND_WALK_write(WowWorldWriter* writer, const vanilla_SMSG_MOVE_LAND_WALK* object);

/* vmangos/mangoszero: write in client console: setrawpos x y z o. For now, it is implemented like worldport but on the same map. Consider using [MSG_MOVE_SET_RAW_POSITION_ACK]. */
typedef struct {
    all_Vector3d position;
    float orientation;

} vanilla_CMSG_MOVE_SET_RAW_POSITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MOVE_SET_RAW_POSITION_write(WowWorldWriter* writer, const vanilla_CMSG_MOVE_SET_RAW_POSITION* object);

/* Tells the client that the running speed has changed.
Client replies with [CMSG_FORCE_RUN_SPEED_CHANGE_ACK].
vmangos sends this message to the client being changed and [SMSG_SPLINE_SET_RUN_SPEED] to others. */
typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} vanilla_SMSG_FORCE_RUN_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FORCE_RUN_SPEED_CHANGE_write(WowWorldWriter* writer, const vanilla_SMSG_FORCE_RUN_SPEED_CHANGE* object);

/* Sent to acknowledge the new speed. Reply to [SMSG_FORCE_RUN_SPEED_CHANGE]. */
typedef struct {
    uint64_t guid;
    uint32_t counter;
    vanilla_MovementInfo info;
    float new_speed;

} vanilla_CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_FORCE_RUN_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_FORCE_RUN_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} vanilla_SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FORCE_RUN_BACK_SPEED_CHANGE_write(WowWorldWriter* writer, const vanilla_SMSG_FORCE_RUN_BACK_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla_MovementInfo info;
    float new_speed;

} vanilla_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} vanilla_SMSG_FORCE_SWIM_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FORCE_SWIM_SPEED_CHANGE_write(WowWorldWriter* writer, const vanilla_SMSG_FORCE_SWIM_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    vanilla_MovementInfo info;
    float new_speed;

} vanilla_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} vanilla_SMSG_FORCE_MOVE_ROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FORCE_MOVE_ROOT_write(WowWorldWriter* writer, const vanilla_SMSG_FORCE_MOVE_ROOT* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla_MovementInfo info;

} vanilla_CMSG_FORCE_MOVE_ROOT_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_FORCE_MOVE_ROOT_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_FORCE_MOVE_ROOT_ACK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} vanilla_SMSG_FORCE_MOVE_UNROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FORCE_MOVE_UNROOT_write(WowWorldWriter* writer, const vanilla_SMSG_FORCE_MOVE_UNROOT* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla_MovementInfo info;

} vanilla_CMSG_FORCE_MOVE_UNROOT_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_FORCE_MOVE_UNROOT_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_FORCE_MOVE_UNROOT_ACK* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_HEARTBEAT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_HEARTBEAT_Client_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_HEARTBEAT_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_HEARTBEAT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_HEARTBEAT_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_HEARTBEAT_Server* object);

typedef struct {
    uint64_t guid;
    /* mangoszero: Sequence
mangoszero sets to 0 */
    uint32_t movement_counter;
    /* cmangos/mangoszero/vmangos: x direction */
    float v_cos;
    /* cmangos/mangoszero/vmangos: y direction */
    float v_sin;
    /* cmangos/mangoszero/vmangos: Horizontal speed */
    float horizontal_speed;
    /* cmangos/mangoszero/vmangos: Z Movement speed (vertical) */
    float vertical_speed;

} vanilla_SMSG_MOVE_KNOCK_BACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MOVE_KNOCK_BACK_write(WowWorldWriter* writer, const vanilla_SMSG_MOVE_KNOCK_BACK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    vanilla_MovementInfo info;

} vanilla_CMSG_MOVE_KNOCK_BACK_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MOVE_KNOCK_BACK_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_MOVE_KNOCK_BACK_ACK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} vanilla_SMSG_MOVE_FEATHER_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MOVE_FEATHER_FALL_write(WowWorldWriter* writer, const vanilla_SMSG_MOVE_FEATHER_FALL* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} vanilla_SMSG_MOVE_NORMAL_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MOVE_NORMAL_FALL_write(WowWorldWriter* writer, const vanilla_SMSG_MOVE_NORMAL_FALL* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} vanilla_SMSG_MOVE_SET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MOVE_SET_HOVER_write(WowWorldWriter* writer, const vanilla_SMSG_MOVE_SET_HOVER* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} vanilla_SMSG_MOVE_UNSET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MOVE_UNSET_HOVER_write(WowWorldWriter* writer, const vanilla_SMSG_MOVE_UNSET_HOVER* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    vanilla_MovementInfo info;
    uint32_t is_applied;

} vanilla_CMSG_MOVE_HOVER_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MOVE_HOVER_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_MOVE_HOVER_ACK* object);

typedef struct {
    vanilla_CinematicSequenceId cinematic_sequence_id;

} vanilla_SMSG_TRIGGER_CINEMATIC;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TRIGGER_CINEMATIC_write(WowWorldWriter* writer, const vanilla_SMSG_TRIGGER_CINEMATIC* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_NEXT_CINEMATIC_CAMERA_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_COMPLETE_CINEMATIC_write(WowWorldWriter* writer);

/* Data for which tutorials the client has passed.
All bits set means that all tutorials have been passed.
Must be sent after [SMSG_LOGIN_VERIFY_WORLD] otherwise the client will SEGFAULT. */
typedef struct {
    uint32_t tutorial_data[8];

} vanilla_SMSG_TUTORIAL_FLAGS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TUTORIAL_FLAGS_write(WowWorldWriter* writer, const vanilla_SMSG_TUTORIAL_FLAGS* object);

typedef struct {
    /* arcemu indexes into the tutorials by dividing by 32 and modulo 32. */
    uint32_t tutorial_flag;

} vanilla_CMSG_TUTORIAL_FLAG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TUTORIAL_FLAG_write(WowWorldWriter* writer, const vanilla_CMSG_TUTORIAL_FLAG* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TUTORIAL_CLEAR_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TUTORIAL_RESET_write(WowWorldWriter* writer);

/* Automatically sent by the client when it goes AFK. */
typedef struct {
    vanilla_UnitStandState animation_state;

} vanilla_CMSG_STANDSTATECHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_STANDSTATECHANGE_write(WowWorldWriter* writer, const vanilla_CMSG_STANDSTATECHANGE* object);

typedef struct {
    vanilla_Emote emote;

} vanilla_CMSG_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_EMOTE_write(WowWorldWriter* writer, const vanilla_CMSG_EMOTE* object);

typedef struct {
    vanilla_Emote emote;
    uint64_t guid;

} vanilla_SMSG_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_EMOTE_write(WowWorldWriter* writer, const vanilla_SMSG_EMOTE* object);

/* Sent to notify the server that the client wants to perform an emote like /dance or /cry.
Server responds with [SMSG_TEXT_EMOTE] and [SMSG_EMOTE]. */
typedef struct {
    vanilla_TextEmote text_emote;
    uint32_t emote;
    /* Guid targeted by the client. */
    uint64_t target;

} vanilla_CMSG_TEXT_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TEXT_EMOTE_write(WowWorldWriter* writer, const vanilla_CMSG_TEXT_EMOTE* object);

typedef struct {
    uint64_t guid;
    vanilla_TextEmote text_emote;
    uint32_t emote;
    char* name;

} vanilla_SMSG_TEXT_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_TEXT_EMOTE_free(vanilla_SMSG_TEXT_EMOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TEXT_EMOTE_write(WowWorldWriter* writer, const vanilla_SMSG_TEXT_EMOTE* object);

typedef struct {
    uint8_t item_slot;

} vanilla_CMSG_AUTOSTORE_LOOT_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUTOSTORE_LOOT_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_AUTOSTORE_LOOT_ITEM* object);

typedef struct {
    uint8_t source_bag;
    uint8_t source_slot;

} vanilla_CMSG_AUTOEQUIP_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUTOEQUIP_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_AUTOEQUIP_ITEM* object);

typedef struct {
    uint8_t source_bag;
    uint8_t source_slot;
    uint8_t destination_bag;

} vanilla_CMSG_AUTOSTORE_BAG_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUTOSTORE_BAG_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_AUTOSTORE_BAG_ITEM* object);

typedef struct {
    uint8_t destination_bag;
    uint8_t destionation_slot;
    uint8_t source_bag;
    uint8_t source_slot;

} vanilla_CMSG_SWAP_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SWAP_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_SWAP_ITEM* object);

typedef struct {
    vanilla_ItemSlot source_slot;
    vanilla_ItemSlot destination_slot;

} vanilla_CMSG_SWAP_INV_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SWAP_INV_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_SWAP_INV_ITEM* object);

typedef struct {
    uint8_t source_bag;
    uint8_t source_slot;
    uint8_t destination_bag;
    uint8_t destination_slot;
    uint8_t amount;

} vanilla_CMSG_SPLIT_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SPLIT_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_SPLIT_ITEM* object);

typedef struct {
    uint64_t guid;
    uint8_t destination_slot;

} vanilla_CMSG_AUTOEQUIP_ITEM_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUTOEQUIP_ITEM_SLOT_write(WowWorldWriter* writer, const vanilla_CMSG_AUTOEQUIP_ITEM_SLOT* object);

typedef struct {
    uint8_t bag;
    uint8_t slot;
    uint8_t amount;
    uint8_t unknown1;
    uint8_t unknown2;
    uint8_t unknown3;

} vanilla_CMSG_DESTROYITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_DESTROYITEM_write(WowWorldWriter* writer, const vanilla_CMSG_DESTROYITEM* object);

typedef struct {
    vanilla_InventoryResult result;
    uint32_t required_level;
    uint64_t item1;
    uint64_t item2;
    /* cmangos: bag type subclass, used with EQUIP_ERR_EVENT_AUTOEQUIP_BIND_CONFIRM and EQUIP_ERR_ITEM_DOESNT_GO_INTO_BAG2
vmangos sets to 0 */
    uint8_t bag_type_subclass;

} vanilla_SMSG_INVENTORY_CHANGE_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_INVENTORY_CHANGE_FAILURE_write(WowWorldWriter* writer, const vanilla_SMSG_INVENTORY_CHANGE_FAILURE* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_OPEN_CONTAINER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_OPEN_CONTAINER_write(WowWorldWriter* writer, const vanilla_SMSG_OPEN_CONTAINER* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_INSPECT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_INSPECT_write(WowWorldWriter* writer, const vanilla_CMSG_INSPECT* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_INSPECT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_INSPECT_write(WowWorldWriter* writer, const vanilla_SMSG_INSPECT* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_INITIATE_TRADE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_INITIATE_TRADE_write(WowWorldWriter* writer, const vanilla_CMSG_INITIATE_TRADE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BEGIN_TRADE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BUSY_TRADE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_IGNORE_TRADE_write(WowWorldWriter* writer);

typedef struct {
    /* Skipped in vmangos and set to 1 for bots */
    uint32_t unknown1;

} vanilla_CMSG_ACCEPT_TRADE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ACCEPT_TRADE_write(WowWorldWriter* writer, const vanilla_CMSG_ACCEPT_TRADE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_UNACCEPT_TRADE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CANCEL_TRADE_write(WowWorldWriter* writer);

typedef struct {
    uint8_t trade_slot;
    uint8_t bag;
    uint8_t slot;

} vanilla_CMSG_SET_TRADE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_TRADE_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_SET_TRADE_ITEM* object);

typedef struct {
    uint8_t trade_slot;

} vanilla_CMSG_CLEAR_TRADE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CLEAR_TRADE_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_CLEAR_TRADE_ITEM* object);

typedef struct {
    uint32_t gold;

} vanilla_CMSG_SET_TRADE_GOLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_TRADE_GOLD_write(WowWorldWriter* writer, const vanilla_CMSG_SET_TRADE_GOLD* object);

typedef struct {
    vanilla_TradeStatus status;
    /* Set to 0 in vmangos. */
    uint64_t unknown1;
    vanilla_InventoryResult inventory_result;
    /* used for: EQUIP_ERR_BAG_FULL, EQUIP_ERR_CANT_CARRY_MORE_OF_THIS, EQUIP_ERR_MISSING_REAGENT, EQUIP_ERR_ITEM_MAX_LIMIT_CATEGORY_COUNT_EXCEEDED */
    bool target_error;
    /* ItemLimitCategory.dbc entry */
    uint32_t item_limit_category_id;
    /* Trade slot -1 here clears CGTradeInfo::m_tradeMoney */
    uint8_t slot;

} vanilla_SMSG_TRADE_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TRADE_STATUS_write(WowWorldWriter* writer, const vanilla_SMSG_TRADE_STATUS* object);

typedef struct {
    /* cmangos/vmangos/mangoszero: send trader or own trade windows state (last need for proper show spell apply to non-trade slot) */
    bool self_player;
    /* cmangos/vmangos/mangoszero: sets to 7
cmangos/vmangos/mangoszero: trade slots count/number?, = next field in most cases */
    uint32_t trade_slot_count1;
    /* cmangos/vmangos/mangoszero: sets to 7
cmangos/vmangos/mangoszero: trade slots count/number?, = prev field in most cases */
    uint32_t trade_slot_count2;
    uint32_t money_in_trade;
    uint32_t spell_on_lowest_slot;
    /* vmangos/cmangos/mangoszero: All set to same as trade_slot_count* (7), unsure which determines how big this is. Unused slots are 0. */
    vanilla_TradeSlot trade_slots[7];

} vanilla_SMSG_TRADE_STATUS_EXTENDED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TRADE_STATUS_EXTENDED_write(WowWorldWriter* writer, const vanilla_SMSG_TRADE_STATUS_EXTENDED* object);

typedef struct {
    /* vmangos/cmangos/mangoszero: sets to 0x00000040 (64)
mangostwo (wrath) sets this to 0x00000080 (128) */
    uint32_t amount_of_factions;
    vanilla_FactionInitializer* factions;

} vanilla_SMSG_INITIALIZE_FACTIONS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_INITIALIZE_FACTIONS_free(vanilla_SMSG_INITIALIZE_FACTIONS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_INITIALIZE_FACTIONS_write(WowWorldWriter* writer, const vanilla_SMSG_INITIALIZE_FACTIONS* object);

typedef struct {
    vanilla_Faction faction;

} vanilla_SMSG_SET_FACTION_VISIBLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SET_FACTION_VISIBLE_write(WowWorldWriter* writer, const vanilla_SMSG_SET_FACTION_VISIBLE* object);

typedef struct {
    uint32_t amount_of_faction_standings;
    vanilla_FactionStanding* faction_standings;

} vanilla_SMSG_SET_FACTION_STANDING;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SET_FACTION_STANDING_free(vanilla_SMSG_SET_FACTION_STANDING* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SET_FACTION_STANDING_write(WowWorldWriter* writer, const vanilla_SMSG_SET_FACTION_STANDING* object);

typedef struct {
    vanilla_Faction faction;
    vanilla_FactionFlag flags;

} vanilla_CMSG_SET_FACTION_ATWAR;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_FACTION_ATWAR_write(WowWorldWriter* writer, const vanilla_CMSG_SET_FACTION_ATWAR* object);

typedef struct {
    vanilla_ItemClass class_type;
    uint32_t item_sub_class_mask;

} vanilla_SMSG_SET_PROFICIENCY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SET_PROFICIENCY_write(WowWorldWriter* writer, const vanilla_SMSG_SET_PROFICIENCY* object);

typedef struct {
    uint8_t button;
    uint16_t action;
    uint8_t misc;
    uint8_t action_type;

} vanilla_CMSG_SET_ACTION_BUTTON;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_ACTION_BUTTON_write(WowWorldWriter* writer, const vanilla_CMSG_SET_ACTION_BUTTON* object);

typedef struct {
    uint32_t data[120];

} vanilla_SMSG_ACTION_BUTTONS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ACTION_BUTTONS_write(WowWorldWriter* writer, const vanilla_SMSG_ACTION_BUTTONS* object);

typedef struct {
    /* cmangos/mangoszero: sets to 0 */
    uint8_t unknown1;
    uint16_t spell_count;
    vanilla_InitialSpell* initial_spells;
    uint16_t cooldown_count;
    vanilla_CooldownSpell* cooldowns;

} vanilla_SMSG_INITIAL_SPELLS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_INITIAL_SPELLS_free(vanilla_SMSG_INITIAL_SPELLS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_INITIAL_SPELLS_write(WowWorldWriter* writer, const vanilla_SMSG_INITIAL_SPELLS* object);

typedef struct {
    uint32_t id;

} vanilla_SMSG_LEARNED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LEARNED_SPELL_write(WowWorldWriter* writer, const vanilla_SMSG_LEARNED_SPELL* object);

typedef struct {
    uint16_t new_spell_id;
    uint16_t old_spell_id;

} vanilla_SMSG_SUPERCEDED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SUPERCEDED_SPELL_write(WowWorldWriter* writer, const vanilla_SMSG_SUPERCEDED_SPELL* object);

typedef struct {
    uint32_t spell;
    vanilla_SpellCastTargets targets;

} vanilla_CMSG_CAST_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CAST_SPELL_free(vanilla_CMSG_CAST_SPELL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CAST_SPELL_write(WowWorldWriter* writer, const vanilla_CMSG_CAST_SPELL* object);

typedef struct {
    uint32_t id;

} vanilla_CMSG_CANCEL_CAST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CANCEL_CAST_write(WowWorldWriter* writer, const vanilla_CMSG_CANCEL_CAST* object);

typedef struct {
    uint32_t spell;
    vanilla_SimpleSpellCastResult result;
    vanilla_CastFailureReason reason;
    uint32_t required_spell_focus;
    vanilla_Area area;
    uint32_t equipped_item_class;
    uint32_t equipped_item_subclass_mask;
    uint32_t equipped_item_inventory_type_mask;

} vanilla_SMSG_CAST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CAST_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_CAST_RESULT* object);

typedef struct {
    /* cmangos/vmangos/mangoszero: if cast item is used, set this to guid of cast item, otherwise set it to same as caster. */
    uint64_t cast_item;
    uint64_t caster;
    uint32_t spell;
    vanilla_CastFlags flags;
    uint32_t timer;
    vanilla_SpellCastTargets targets;
    uint32_t ammo_display_id;
    uint32_t ammo_inventory_type;

} vanilla_SMSG_SPELL_START;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SPELL_START_free(vanilla_SMSG_SPELL_START* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELL_START_write(WowWorldWriter* writer, const vanilla_SMSG_SPELL_START* object);

typedef struct {
    /* cmangos/vmangos/mangoszero: if cast item is used, set this to guid of cast item, otherwise set it to same as caster. */
    uint64_t cast_item;
    uint64_t caster;
    uint32_t spell;
    vanilla_CastFlags flags;
    uint8_t amount_of_hits;
    uint64_t* hits;
    uint8_t amount_of_misses;
    vanilla_SpellMiss* misses;
    vanilla_SpellCastTargets targets;
    uint32_t ammo_display_id;
    uint32_t ammo_inventory_type;

} vanilla_SMSG_SPELL_GO;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SPELL_GO_free(vanilla_SMSG_SPELL_GO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELL_GO_write(WowWorldWriter* writer, const vanilla_SMSG_SPELL_GO* object);

typedef struct {
    uint64_t guid;
    uint32_t spell;
    vanilla_SpellCastResult result;

} vanilla_SMSG_SPELL_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELL_FAILURE_write(WowWorldWriter* writer, const vanilla_SMSG_SPELL_FAILURE* object);

typedef struct {
    uint64_t guid;
    uint32_t amount_of_cooldowns;
    vanilla_SpellCooldownStatus* cooldowns;

} vanilla_SMSG_SPELL_COOLDOWN;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SPELL_COOLDOWN_free(vanilla_SMSG_SPELL_COOLDOWN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELL_COOLDOWN_write(WowWorldWriter* writer, const vanilla_SMSG_SPELL_COOLDOWN* object);

typedef struct {
    uint32_t id;
    uint64_t guid;

} vanilla_SMSG_COOLDOWN_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_COOLDOWN_EVENT_write(WowWorldWriter* writer, const vanilla_SMSG_COOLDOWN_EVENT* object);

typedef struct {
    uint32_t id;

} vanilla_CMSG_CANCEL_AURA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CANCEL_AURA_write(WowWorldWriter* writer, const vanilla_CMSG_CANCEL_AURA* object);

typedef struct {
    uint8_t aura_slot;
    uint32_t aura_duration;

} vanilla_SMSG_UPDATE_AURA_DURATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_UPDATE_AURA_DURATION_write(WowWorldWriter* writer, const vanilla_SMSG_UPDATE_AURA_DURATION* object);

typedef struct {
    uint32_t id;
    /* vmangos sets to 2 and cmangos sets to 0. */
    uint8_t unknown1;
    vanilla_SpellCastResult result;

} vanilla_SMSG_PET_CAST_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_CAST_FAILED_write(WowWorldWriter* writer, const vanilla_SMSG_PET_CAST_FAILED* object);

typedef struct {
    uint32_t spell;
    uint32_t duration;

} vanilla_MSG_CHANNEL_START_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_CHANNEL_START_Server_write(WowWorldWriter* writer, const vanilla_MSG_CHANNEL_START_Server* object);

typedef struct {
    uint32_t time;

} vanilla_MSG_CHANNEL_UPDATE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_CHANNEL_UPDATE_Server_write(WowWorldWriter* writer, const vanilla_MSG_CHANNEL_UPDATE_Server* object);

typedef struct {
    uint32_t id;

} vanilla_CMSG_CANCEL_CHANNELLING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CANCEL_CHANNELLING_write(WowWorldWriter* writer, const vanilla_CMSG_CANCEL_CHANNELLING* object);

typedef struct {
    uint64_t guid;
    vanilla_AiReaction reaction;

} vanilla_SMSG_AI_REACTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AI_REACTION_write(WowWorldWriter* writer, const vanilla_SMSG_AI_REACTION* object);

/* Sets the current target. */
typedef struct {
    uint64_t target;

} vanilla_CMSG_SET_SELECTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_SELECTION_write(WowWorldWriter* writer, const vanilla_CMSG_SET_SELECTION* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_SET_TARGET_OBSOLETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_TARGET_OBSOLETE_write(WowWorldWriter* writer, const vanilla_CMSG_SET_TARGET_OBSOLETE* object);

/* Signals that client has right clicked an opponent and is in the attack stance.
Server should reply with [SMSG_ATTACKSTART]. */
typedef struct {
    uint64_t guid;

} vanilla_CMSG_ATTACKSWING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ATTACKSWING_write(WowWorldWriter* writer, const vanilla_CMSG_ATTACKSWING* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ATTACKSTOP_write(WowWorldWriter* writer);

typedef struct {
    uint64_t attacker;
    uint64_t victim;

} vanilla_SMSG_ATTACKSTART;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ATTACKSTART_write(WowWorldWriter* writer, const vanilla_SMSG_ATTACKSTART* object);

typedef struct {
    uint64_t player;
    uint64_t enemy;
    /* cmangos/vmangos/mangoszero/arcemu/azerothcore/mangostwo: set to 0 with comment: unk, can be 1 also */
    uint32_t unknown1;

} vanilla_SMSG_ATTACKSTOP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ATTACKSTOP_write(WowWorldWriter* writer, const vanilla_SMSG_ATTACKSTOP* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ATTACKSWING_NOTINRANGE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ATTACKSWING_BADFACING_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ATTACKSWING_NOTSTANDING_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ATTACKSWING_DEADTARGET_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ATTACKSWING_CANT_ATTACK_write(WowWorldWriter* writer);

typedef struct {
    vanilla_HitInfo hit_info;
    uint64_t attacker;
    uint64_t target;
    uint32_t total_damage;
    uint8_t amount_of_damages;
    vanilla_DamageInfo* damages;
    uint32_t damage_state;
    uint32_t unknown1;
    /* vmangos: spell id, seen with heroic strike and disarm as examples */
    uint32_t spell_id;
    uint32_t blocked_amount;

} vanilla_SMSG_ATTACKERSTATEUPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_ATTACKERSTATEUPDATE_free(vanilla_SMSG_ATTACKERSTATEUPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ATTACKERSTATEUPDATE_write(WowWorldWriter* writer, const vanilla_SMSG_ATTACKERSTATEUPDATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CANCEL_COMBAT_write(WowWorldWriter* writer);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t id;
    uint32_t damage;
    bool critical;

} vanilla_SMSG_SPELLHEALLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELLHEALLOG_write(WowWorldWriter* writer, const vanilla_SMSG_SPELLHEALLOG* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    vanilla_Power power;
    uint32_t damage;

} vanilla_SMSG_SPELLENERGIZELOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELLENERGIZELOG_write(WowWorldWriter* writer, const vanilla_SMSG_SPELLENERGIZELOG* object);

/* Inform the client of a their hearthstone location. */
typedef struct {
    all_Vector3d position;
    vanilla_Map map;
    vanilla_Area area;

} vanilla_SMSG_BINDPOINTUPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_BINDPOINTUPDATE_write(WowWorldWriter* writer, const vanilla_SMSG_BINDPOINTUPDATE* object);

typedef struct {
    uint64_t guid;
    vanilla_Area area;

} vanilla_SMSG_PLAYERBOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PLAYERBOUND_write(WowWorldWriter* writer, const vanilla_SMSG_PLAYERBOUND* object);

typedef struct {
    uint64_t guid;
    bool allow_movement;

} vanilla_SMSG_CLIENT_CONTROL_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CLIENT_CONTROL_UPDATE_write(WowWorldWriter* writer, const vanilla_SMSG_CLIENT_CONTROL_UPDATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_REPOP_REQUEST_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    char* name;
    bool player;

} vanilla_SMSG_RESURRECT_REQUEST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_RESURRECT_REQUEST_free(vanilla_SMSG_RESURRECT_REQUEST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_RESURRECT_REQUEST_write(WowWorldWriter* writer, const vanilla_SMSG_RESURRECT_REQUEST* object);

typedef struct {
    uint64_t guid;
    uint8_t status;

} vanilla_CMSG_RESURRECT_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_RESURRECT_RESPONSE_write(WowWorldWriter* writer, const vanilla_CMSG_RESURRECT_RESPONSE* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_LOOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LOOT_write(WowWorldWriter* writer, const vanilla_CMSG_LOOT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LOOT_MONEY_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_LOOT_RELEASE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LOOT_RELEASE_write(WowWorldWriter* writer, const vanilla_CMSG_LOOT_RELEASE* object);

typedef struct {
    uint64_t guid;
    vanilla_LootMethod loot_method;
    vanilla_LootMethodError loot_error;
    uint32_t gold;
    uint8_t amount_of_items;
    vanilla_LootItem* items;

} vanilla_SMSG_LOOT_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_LOOT_RESPONSE_free(vanilla_SMSG_LOOT_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOOT_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_LOOT_RESPONSE* object);

typedef struct {
    uint64_t guid;
    /* Set to 1 on mangoszero/vmangos/cmangos/azerothcraft/mangosone/mangostwo/arcemu */
    uint8_t unknown1;

} vanilla_SMSG_LOOT_RELEASE_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOOT_RELEASE_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_LOOT_RELEASE_RESPONSE* object);

/* Notify a looting player that an item has been taken. */
typedef struct {
    uint8_t slot;

} vanilla_SMSG_LOOT_REMOVED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOOT_REMOVED_write(WowWorldWriter* writer, const vanilla_SMSG_LOOT_REMOVED* object);

typedef struct {
    uint32_t amount;

} vanilla_SMSG_LOOT_MONEY_NOTIFY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOOT_MONEY_NOTIFY_write(WowWorldWriter* writer, const vanilla_SMSG_LOOT_MONEY_NOTIFY* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOOT_CLEAR_MONEY_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    vanilla_NewItemSource source;
    vanilla_NewItemCreationType creation_type;
    vanilla_NewItemChatAlert alert_chat;
    uint8_t bag_slot;
    /* mangoszero: item slot, but when added to stack: 0xFFFFFFFF */
    uint32_t item_slot;
    uint32_t item;
    /* mangoszero: SuffixFactor */
    uint32_t item_suffix_factor;
    /* mangoszero: random item property id */
    uint32_t item_random_property_id;
    uint32_t item_count;

} vanilla_SMSG_ITEM_PUSH_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ITEM_PUSH_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_ITEM_PUSH_RESULT* object);

typedef struct {
    uint64_t initiator;
    uint64_t target;

} vanilla_SMSG_DUEL_REQUESTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DUEL_REQUESTED_write(WowWorldWriter* writer, const vanilla_SMSG_DUEL_REQUESTED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DUEL_OUTOFBOUNDS_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DUEL_INBOUNDS_write(WowWorldWriter* writer);

typedef struct {
    bool ended_without_interruption;

} vanilla_SMSG_DUEL_COMPLETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DUEL_COMPLETE_write(WowWorldWriter* writer, const vanilla_SMSG_DUEL_COMPLETE* object);

typedef struct {
    vanilla_DuelWinnerReason reason;
    char* opponent_name;
    char* initiator_name;

} vanilla_SMSG_DUEL_WINNER;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_DUEL_WINNER_free(vanilla_SMSG_DUEL_WINNER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DUEL_WINNER_write(WowWorldWriter* writer, const vanilla_SMSG_DUEL_WINNER* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_DUEL_ACCEPTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_DUEL_ACCEPTED_write(WowWorldWriter* writer, const vanilla_CMSG_DUEL_ACCEPTED* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_DUEL_CANCELLED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_DUEL_CANCELLED_write(WowWorldWriter* writer, const vanilla_CMSG_DUEL_CANCELLED* object);

/* This is not used in any TBC emulator, but trinitycore has it implemented so it is assumed to be valid for TBC as well. */
typedef struct {
    vanilla_MountResult result;

} vanilla_SMSG_MOUNTRESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MOUNTRESULT_write(WowWorldWriter* writer, const vanilla_SMSG_MOUNTRESULT* object);

typedef struct {
    vanilla_DismountResult result;

} vanilla_SMSG_DISMOUNTRESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DISMOUNTRESULT_write(WowWorldWriter* writer, const vanilla_SMSG_DISMOUNTRESULT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MOUNTSPECIAL_ANIM_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_MOUNTSPECIAL_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MOUNTSPECIAL_ANIM_write(WowWorldWriter* writer, const vanilla_SMSG_MOUNTSPECIAL_ANIM* object);

typedef struct {
    vanilla_PetTameFailureReason reason;

} vanilla_SMSG_PET_TAME_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_TAME_FAILURE_write(WowWorldWriter* writer, const vanilla_SMSG_PET_TAME_FAILURE* object);

typedef struct {
    uint32_t position2;
    uint32_t data2;
} vanilla_CMSG_PET_SET_ACTION_extra;

typedef struct {
    uint64_t guid;
    uint32_t position1;
    uint32_t data1;

    vanilla_CMSG_PET_SET_ACTION_extra* extra;
} vanilla_CMSG_PET_SET_ACTION;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_PET_SET_ACTION_free(vanilla_CMSG_PET_SET_ACTION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PET_SET_ACTION_write(WowWorldWriter* writer, const vanilla_CMSG_PET_SET_ACTION* object);

typedef struct {
    uint64_t pet;
    uint32_t data;
    uint64_t target;

} vanilla_CMSG_PET_ACTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PET_ACTION_write(WowWorldWriter* writer, const vanilla_CMSG_PET_ACTION* object);

typedef struct {
    uint64_t pet;

} vanilla_CMSG_PET_ABANDON;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PET_ABANDON_write(WowWorldWriter* writer, const vanilla_CMSG_PET_ABANDON* object);

typedef struct {
    uint64_t pet;
    char* name;

} vanilla_CMSG_PET_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_PET_RENAME_free(vanilla_CMSG_PET_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PET_RENAME_write(WowWorldWriter* writer, const vanilla_CMSG_PET_RENAME* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_NAME_INVALID_write(WowWorldWriter* writer);

typedef struct {
    uint32_t duration;
    vanilla_PetReactState react;
    vanilla_PetCommandState command;
    /* mangoszero: set to 0 */
    uint8_t unknown;
    vanilla_PetEnabled pet_enabled;
    uint32_t action_bars[10];
    uint8_t amount_of_spells;
    uint32_t* spells;
    uint8_t amount_of_cooldowns;
    vanilla_PetSpellCooldown* cooldowns;
} vanilla_SMSG_PET_SPELLS_action_bars;

typedef struct {
    uint64_t pet;

    vanilla_SMSG_PET_SPELLS_action_bars* action_bars;
} vanilla_SMSG_PET_SPELLS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_PET_SPELLS_free(vanilla_SMSG_PET_SPELLS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_SPELLS_write(WowWorldWriter* writer, const vanilla_SMSG_PET_SPELLS* object);

typedef struct {
    uint64_t guid;
    vanilla_PetReactState react_state;
    vanilla_PetCommandState command_state;
    /* vmangos sets to 0. */
    uint8_t unknown1;
    vanilla_PetEnabled pet_enabled;

} vanilla_SMSG_PET_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_MODE_write(WowWorldWriter* writer, const vanilla_SMSG_PET_MODE* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_GOSSIP_HELLO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GOSSIP_HELLO_write(WowWorldWriter* writer, const vanilla_CMSG_GOSSIP_HELLO* object);

typedef struct {
    /* vmangos: if (_player->PlayerTalkClass->GossipOptionCoded(gossipListId)) */
    char* code;
} vanilla_CMSG_GOSSIP_SELECT_OPTION_unknown;

typedef struct {
    uint64_t guid;
    uint32_t gossip_list_id;

    vanilla_CMSG_GOSSIP_SELECT_OPTION_unknown* unknown;
} vanilla_CMSG_GOSSIP_SELECT_OPTION;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GOSSIP_SELECT_OPTION_free(vanilla_CMSG_GOSSIP_SELECT_OPTION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GOSSIP_SELECT_OPTION_write(WowWorldWriter* writer, const vanilla_CMSG_GOSSIP_SELECT_OPTION* object);

typedef struct {
    uint64_t guid;
    uint32_t title_text_id;
    uint32_t amount_of_gossip_items;
    vanilla_GossipItem* gossips;
    uint32_t amount_of_quests;
    vanilla_QuestItem* quests;

} vanilla_SMSG_GOSSIP_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GOSSIP_MESSAGE_free(vanilla_SMSG_GOSSIP_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GOSSIP_MESSAGE_write(WowWorldWriter* writer, const vanilla_SMSG_GOSSIP_MESSAGE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GOSSIP_COMPLETE_write(WowWorldWriter* writer);

typedef struct {
    uint32_t text_id;
    uint64_t guid;

} vanilla_CMSG_NPC_TEXT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_NPC_TEXT_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_NPC_TEXT_QUERY* object);

typedef struct {
    uint32_t text_id;
    vanilla_NpcTextUpdate texts[8];

} vanilla_SMSG_NPC_TEXT_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_NPC_TEXT_UPDATE_free(vanilla_SMSG_NPC_TEXT_UPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_NPC_TEXT_UPDATE_write(WowWorldWriter* writer, const vanilla_SMSG_NPC_TEXT_UPDATE* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_QUESTGIVER_STATUS_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTGIVER_STATUS_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_QUESTGIVER_STATUS_QUERY* object);

typedef struct {
    uint64_t guid;
    vanilla_QuestGiverStatus status;

} vanilla_SMSG_QUESTGIVER_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTGIVER_STATUS_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTGIVER_STATUS* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_QUESTGIVER_HELLO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTGIVER_HELLO_write(WowWorldWriter* writer, const vanilla_CMSG_QUESTGIVER_HELLO* object);

typedef struct {
    uint64_t npc;
    char* title;
    /* mangoszero: player emote */
    uint32_t emote_delay;
    /* mangoszero: NPC emote */
    uint32_t emote;
    uint8_t amount_of_entries;
    vanilla_QuestItem* quest_items;

} vanilla_SMSG_QUESTGIVER_QUEST_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_QUESTGIVER_QUEST_LIST_free(vanilla_SMSG_QUESTGIVER_QUEST_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTGIVER_QUEST_LIST_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTGIVER_QUEST_LIST* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} vanilla_CMSG_QUESTGIVER_QUERY_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTGIVER_QUERY_QUEST_write(WowWorldWriter* writer, const vanilla_CMSG_QUESTGIVER_QUERY_QUEST* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTGIVER_QUEST_AUTOLAUNCH_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;
    char* title;
    char* details;
    char* objectives;
    bool auto_finish;
    uint32_t amount_of_choice_item_rewards;
    vanilla_QuestItemReward* choice_item_rewards;
    uint32_t amount_of_item_rewards;
    vanilla_QuestItemReward* item_rewards;
    uint32_t money_reward;
    uint32_t reward_spell;
    uint32_t amount_of_emotes;
    vanilla_QuestDetailsEmote* emotes;

} vanilla_SMSG_QUESTGIVER_QUEST_DETAILS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_QUESTGIVER_QUEST_DETAILS_free(vanilla_SMSG_QUESTGIVER_QUEST_DETAILS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTGIVER_QUEST_DETAILS_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTGIVER_QUEST_DETAILS* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} vanilla_CMSG_QUESTGIVER_ACCEPT_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTGIVER_ACCEPT_QUEST_write(WowWorldWriter* writer, const vanilla_CMSG_QUESTGIVER_ACCEPT_QUEST* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} vanilla_CMSG_QUESTGIVER_COMPLETE_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTGIVER_COMPLETE_QUEST_write(WowWorldWriter* writer, const vanilla_CMSG_QUESTGIVER_COMPLETE_QUEST* object);

/* mangoszero/vmangos: Quests that don't require items use the `RequestItemsText` field to store the text that is shown when you talk to the quest giver while the quest is incomplete. Therefore the text should not be shown for them when the quest is complete. For quests that do require items, it is self explanatory. */
typedef struct {
    uint64_t npc;
    uint32_t quest_id;
    char* title;
    char* request_items_text;
    uint32_t emote_delay;
    uint32_t emote;
    bool auto_finish;
    uint32_t required_money;
    uint32_t amount_of_required_items;
    vanilla_QuestItemRequirement* required_items;
    /* cmangos/vmangos/mangoszero: All emulators set to 0x02 */
    uint32_t unknown1;
    vanilla_QuestCompletable completable;
    /* cmangos/vmangos/mangoszero: set to 0x04 */
    uint32_t flags2;
    /* cmangos/vmangos/mangoszero: set to 0x08 */
    uint32_t flags3;

} vanilla_SMSG_QUESTGIVER_REQUEST_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_QUESTGIVER_REQUEST_ITEMS_free(vanilla_SMSG_QUESTGIVER_REQUEST_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTGIVER_REQUEST_ITEMS_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTGIVER_REQUEST_ITEMS* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} vanilla_CMSG_QUESTGIVER_REQUEST_REWARD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTGIVER_REQUEST_REWARD_write(WowWorldWriter* writer, const vanilla_CMSG_QUESTGIVER_REQUEST_REWARD* object);

typedef struct {
    uint64_t npc;
    uint32_t quest_id;
    char* title;
    char* offer_reward_text;
    bool auto_finish;
    uint32_t amount_of_emotes;
    vanilla_NpcTextUpdateEmote* emotes;
    uint32_t amount_of_choice_item_rewards;
    vanilla_QuestItemRequirement* choice_item_rewards;
    uint32_t amount_of_item_rewards;
    vanilla_QuestItemRequirement* item_rewards;
    uint32_t money_reward;
    uint32_t reward_spell;
    /* mangoszero and cmangos disagree about which field is _cast, although they both agree that the _cast field should not be in zero (vanilla). They still both include both fields in the code though. */
    uint32_t reward_spell_cast;

} vanilla_SMSG_QUESTGIVER_OFFER_REWARD;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_QUESTGIVER_OFFER_REWARD_free(vanilla_SMSG_QUESTGIVER_OFFER_REWARD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTGIVER_OFFER_REWARD_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTGIVER_OFFER_REWARD* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;
    uint32_t reward;

} vanilla_CMSG_QUESTGIVER_CHOOSE_REWARD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTGIVER_CHOOSE_REWARD_write(WowWorldWriter* writer, const vanilla_CMSG_QUESTGIVER_CHOOSE_REWARD* object);

typedef struct {
    vanilla_QuestFailedReason msg;

} vanilla_SMSG_QUESTGIVER_QUEST_INVALID;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTGIVER_QUEST_INVALID_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTGIVER_QUEST_INVALID* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTGIVER_CANCEL_write(WowWorldWriter* writer);

typedef struct {
    uint32_t quest_id;
    /* cmangos/vmangos/mangoszero: set to 0x03 */
    uint32_t unknown;
    uint32_t experience_reward;
    uint32_t money_reward;
    uint32_t amount_of_item_rewards;
    vanilla_QuestItemReward* item_rewards;

} vanilla_SMSG_QUESTGIVER_QUEST_COMPLETE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_QUESTGIVER_QUEST_COMPLETE_free(vanilla_SMSG_QUESTGIVER_QUEST_COMPLETE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTGIVER_QUEST_COMPLETE_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTGIVER_QUEST_COMPLETE* object);

typedef struct {
    uint32_t quest_id;
    vanilla_QuestFailedReason reason;

} vanilla_SMSG_QUESTGIVER_QUEST_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTGIVER_QUEST_FAILED_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTGIVER_QUEST_FAILED* object);

typedef struct {
    uint8_t slot1;
    uint8_t slot2;

} vanilla_CMSG_QUESTLOG_SWAP_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTLOG_SWAP_QUEST_write(WowWorldWriter* writer, const vanilla_CMSG_QUESTLOG_SWAP_QUEST* object);

typedef struct {
    uint8_t slot;

} vanilla_CMSG_QUESTLOG_REMOVE_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUESTLOG_REMOVE_QUEST_write(WowWorldWriter* writer, const vanilla_CMSG_QUESTLOG_REMOVE_QUEST* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTLOG_FULL_write(WowWorldWriter* writer);

typedef struct {
    uint32_t quest_id;

} vanilla_SMSG_QUESTUPDATE_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTUPDATE_FAILED_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTUPDATE_FAILED* object);

typedef struct {
    uint32_t quest_id;

} vanilla_SMSG_QUESTUPDATE_FAILEDTIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTUPDATE_FAILEDTIMER_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTUPDATE_FAILEDTIMER* object);

typedef struct {
    uint32_t quest_id;

} vanilla_SMSG_QUESTUPDATE_COMPLETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTUPDATE_COMPLETE_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTUPDATE_COMPLETE* object);

typedef struct {
    uint32_t quest_id;
    /* Unsure of name */
    uint32_t creature_id;
    uint32_t kill_count;
    uint32_t required_kill_count;
    uint64_t guid;

} vanilla_SMSG_QUESTUPDATE_ADD_KILL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTUPDATE_ADD_KILL_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTUPDATE_ADD_KILL* object);

typedef struct {
    uint32_t required_item_id;
    uint32_t items_required;

} vanilla_SMSG_QUESTUPDATE_ADD_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUESTUPDATE_ADD_ITEM_write(WowWorldWriter* writer, const vanilla_SMSG_QUESTUPDATE_ADD_ITEM* object);

typedef struct {
    uint32_t quest_id;

} vanilla_CMSG_QUEST_CONFIRM_ACCEPT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUEST_CONFIRM_ACCEPT_write(WowWorldWriter* writer, const vanilla_CMSG_QUEST_CONFIRM_ACCEPT* object);

typedef struct {
    uint32_t quest_id;
    char* quest_title;
    uint64_t guid;

} vanilla_SMSG_QUEST_CONFIRM_ACCEPT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_QUEST_CONFIRM_ACCEPT_free(vanilla_SMSG_QUEST_CONFIRM_ACCEPT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUEST_CONFIRM_ACCEPT_write(WowWorldWriter* writer, const vanilla_SMSG_QUEST_CONFIRM_ACCEPT* object);

typedef struct {
    uint32_t quest_id;

} vanilla_CMSG_PUSHQUESTTOPARTY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PUSHQUESTTOPARTY_write(WowWorldWriter* writer, const vanilla_CMSG_PUSHQUESTTOPARTY* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_LIST_INVENTORY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LIST_INVENTORY_write(WowWorldWriter* writer, const vanilla_CMSG_LIST_INVENTORY* object);

/* if `amount_of_items` is 0 it is supposedly followed by a single u8 with 0 to say that vendor has no items. */
typedef struct {
    uint64_t vendor;
    /* cmangos: 0 displays Vendor has no inventory */
    uint8_t amount_of_items;
    vanilla_ListInventoryItem* items;

} vanilla_SMSG_LIST_INVENTORY;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_LIST_INVENTORY_free(vanilla_SMSG_LIST_INVENTORY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LIST_INVENTORY_write(WowWorldWriter* writer, const vanilla_SMSG_LIST_INVENTORY* object);

typedef struct {
    uint64_t vendor;
    uint64_t item;
    uint8_t amount;

} vanilla_CMSG_SELL_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SELL_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_SELL_ITEM* object);

typedef struct {
    uint64_t guid;
    uint64_t item;
    vanilla_SellItemResult result;

} vanilla_SMSG_SELL_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SELL_ITEM_write(WowWorldWriter* writer, const vanilla_SMSG_SELL_ITEM* object);

typedef struct {
    uint64_t vendor;
    uint32_t item;
    uint8_t amount;
    /* cmangos says this is hardcoded to 1 in the TBC client. */
    uint8_t unknown1;

} vanilla_CMSG_BUY_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BUY_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_BUY_ITEM* object);

typedef struct {
    uint64_t vendor;
    uint32_t item;
    uint64_t bag;
    uint8_t bag_slot;
    uint8_t amount;

} vanilla_CMSG_BUY_ITEM_IN_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BUY_ITEM_IN_SLOT_write(WowWorldWriter* writer, const vanilla_CMSG_BUY_ITEM_IN_SLOT* object);

typedef struct {
    uint64_t guid;
    /* Starts at index 1.
arcemu has this field as milliseconds since something instead. */
    uint32_t vendor_slot;
    uint32_t amount_for_sale;
    uint32_t amount_bought;

} vanilla_SMSG_BUY_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_BUY_ITEM_write(WowWorldWriter* writer, const vanilla_SMSG_BUY_ITEM* object);

/* Some TBC and Wrath emus have a u32 before `result` that is only included if the value is > 0, but the emus never call it with anything other than 0. */
typedef struct {
    uint64_t guid;
    uint32_t item;
    vanilla_BuyResult result;

} vanilla_SMSG_BUY_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_BUY_FAILED_write(WowWorldWriter* writer, const vanilla_SMSG_BUY_FAILED* object);

typedef struct {
    /* Set to 1 in mangoszero */
    uint32_t unknown1;
    uint64_t guid;
    uint32_t nearest_node;
    uint32_t amount_of_nodes;
    uint32_t* nodes;

} vanilla_SMSG_SHOWTAXINODES;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SHOWTAXINODES_free(vanilla_SMSG_SHOWTAXINODES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SHOWTAXINODES_write(WowWorldWriter* writer, const vanilla_SMSG_SHOWTAXINODES* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_TAXINODE_STATUS_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TAXINODE_STATUS_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_TAXINODE_STATUS_QUERY* object);

typedef struct {
    uint64_t guid;
    bool taxi_mask_node_known;

} vanilla_SMSG_TAXINODE_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TAXINODE_STATUS_write(WowWorldWriter* writer, const vanilla_SMSG_TAXINODE_STATUS* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_TAXIQUERYAVAILABLENODES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TAXIQUERYAVAILABLENODES_write(WowWorldWriter* writer, const vanilla_CMSG_TAXIQUERYAVAILABLENODES* object);

typedef struct {
    uint64_t guid;
    uint32_t source_node;
    uint32_t destination_node;

} vanilla_CMSG_ACTIVATETAXI;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ACTIVATETAXI_write(WowWorldWriter* writer, const vanilla_CMSG_ACTIVATETAXI* object);

typedef struct {
    vanilla_ActivateTaxiReply reply;

} vanilla_SMSG_ACTIVATETAXIREPLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ACTIVATETAXIREPLY_write(WowWorldWriter* writer, const vanilla_SMSG_ACTIVATETAXIREPLY* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_NEW_TAXI_PATH_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_TRAINER_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TRAINER_LIST_write(WowWorldWriter* writer, const vanilla_CMSG_TRAINER_LIST* object);

typedef struct {
    uint64_t guid;
    uint32_t trainer_type;
    uint32_t amount_of_spells;
    vanilla_TrainerSpell* spells;
    char* greeting;

} vanilla_SMSG_TRAINER_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_TRAINER_LIST_free(vanilla_SMSG_TRAINER_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TRAINER_LIST_write(WowWorldWriter* writer, const vanilla_SMSG_TRAINER_LIST* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} vanilla_CMSG_TRAINER_BUY_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TRAINER_BUY_SPELL_write(WowWorldWriter* writer, const vanilla_CMSG_TRAINER_BUY_SPELL* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} vanilla_SMSG_TRAINER_BUY_SUCCEEDED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TRAINER_BUY_SUCCEEDED_write(WowWorldWriter* writer, const vanilla_SMSG_TRAINER_BUY_SUCCEEDED* object);

/* No TBC emulators implement this. */
typedef struct {
    uint64_t guid;
    uint32_t id;
    vanilla_TrainingFailureReason error;

} vanilla_SMSG_TRAINER_BUY_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TRAINER_BUY_FAILED_write(WowWorldWriter* writer, const vanilla_SMSG_TRAINER_BUY_FAILED* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_BINDER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BINDER_ACTIVATE_write(WowWorldWriter* writer, const vanilla_CMSG_BINDER_ACTIVATE* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_BANKER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BANKER_ACTIVATE_write(WowWorldWriter* writer, const vanilla_CMSG_BANKER_ACTIVATE* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SHOW_BANK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SHOW_BANK_write(WowWorldWriter* writer, const vanilla_SMSG_SHOW_BANK* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_BUY_BANK_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BUY_BANK_SLOT_write(WowWorldWriter* writer, const vanilla_CMSG_BUY_BANK_SLOT* object);

typedef struct {
    vanilla_BuyBankSlotResult result;

} vanilla_SMSG_BUY_BANK_SLOT_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_BUY_BANK_SLOT_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_BUY_BANK_SLOT_RESULT* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_PETITION_SHOWLIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PETITION_SHOWLIST_write(WowWorldWriter* writer, const vanilla_CMSG_PETITION_SHOWLIST* object);

typedef struct {
    uint64_t npc;
    uint8_t amount_of_petitions;
    vanilla_PetitionShowlist* petitions;

} vanilla_SMSG_PETITION_SHOWLIST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_PETITION_SHOWLIST_free(vanilla_SMSG_PETITION_SHOWLIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PETITION_SHOWLIST_write(WowWorldWriter* writer, const vanilla_SMSG_PETITION_SHOWLIST* object);

/* cmangos/vmangos/mangoszero: All fields with 'skip' are completely unused */
typedef struct {
    uint64_t npc;
    uint32_t unknown1;
    uint64_t unknown2;
    char* name;
    uint32_t unknown3;
    uint32_t unknown4;
    uint32_t unknown5;
    uint32_t unknown6;
    uint32_t unknown7;
    uint32_t unknown8;
    uint32_t unknown9;
    uint32_t unknown10;
    uint32_t unknown11;
    uint32_t unknown12;
    uint16_t unknown13;
    uint8_t unknown14;
    /* cmangos/vmangos/mangoszero: Named but never used */
    uint32_t index;
    uint32_t unknown15;

} vanilla_CMSG_PETITION_BUY;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_PETITION_BUY_free(vanilla_CMSG_PETITION_BUY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PETITION_BUY_write(WowWorldWriter* writer, const vanilla_CMSG_PETITION_BUY* object);

typedef struct {
    uint64_t item;

} vanilla_CMSG_PETITION_SHOW_SIGNATURES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PETITION_SHOW_SIGNATURES_write(WowWorldWriter* writer, const vanilla_CMSG_PETITION_SHOW_SIGNATURES* object);

typedef struct {
    uint64_t item;
    uint64_t owner;
    uint32_t petition;
    uint8_t amount_of_signatures;
    vanilla_PetitionSignature* signatures;

} vanilla_SMSG_PETITION_SHOW_SIGNATURES;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_PETITION_SHOW_SIGNATURES_free(vanilla_SMSG_PETITION_SHOW_SIGNATURES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PETITION_SHOW_SIGNATURES_write(WowWorldWriter* writer, const vanilla_SMSG_PETITION_SHOW_SIGNATURES* object);

typedef struct {
    uint64_t petition;
    uint8_t unknown1;

} vanilla_CMSG_PETITION_SIGN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PETITION_SIGN_write(WowWorldWriter* writer, const vanilla_CMSG_PETITION_SIGN* object);

typedef struct {
    uint64_t petition;
    uint64_t owner;
    vanilla_PetitionResult result;

} vanilla_SMSG_PETITION_SIGN_RESULTS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PETITION_SIGN_RESULTS_write(WowWorldWriter* writer, const vanilla_SMSG_PETITION_SIGN_RESULTS* object);

typedef struct {
    uint64_t petition;

} vanilla_MSG_PETITION_DECLINE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_PETITION_DECLINE_cmsg_write(WowWorldWriter* writer, const vanilla_MSG_PETITION_DECLINE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_PETITION_DECLINE_smsg_write(WowWorldWriter* writer, const vanilla_MSG_PETITION_DECLINE* object);

typedef struct {
    uint64_t petition;
    uint64_t target;

} vanilla_CMSG_OFFER_PETITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_OFFER_PETITION_write(WowWorldWriter* writer, const vanilla_CMSG_OFFER_PETITION* object);

typedef struct {
    uint64_t petition;

} vanilla_CMSG_TURN_IN_PETITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TURN_IN_PETITION_write(WowWorldWriter* writer, const vanilla_CMSG_TURN_IN_PETITION* object);

typedef struct {
    vanilla_PetitionResult result;

} vanilla_SMSG_TURN_IN_PETITION_RESULTS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_TURN_IN_PETITION_RESULTS_write(WowWorldWriter* writer, const vanilla_SMSG_TURN_IN_PETITION_RESULTS* object);

typedef struct {
    uint32_t guild_id;
    uint64_t petition;

} vanilla_CMSG_PETITION_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PETITION_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_PETITION_QUERY* object);

typedef struct {
    uint32_t petition_id;
    uint64_t charter_owner;
    char* guild_name;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    char* body_text;
    /* cmangos/vmangos/mangoszero: Set to 1, only info is comment from vmangos */
    uint32_t unknown_flags;
    /* cmangos/vmangos/mangoszero: Set to 9, only info is comment from vmangos */
    uint32_t minimum_signatures;
    /* cmangos/vmangos/mangoszero: Set to 9, only info is comment from vmangos */
    uint32_t maximum_signatures;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t deadline;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t issue_date;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t allowed_guild_id;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    vanilla_AllowedClass allowed_class;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    vanilla_AllowedRace allowed_race;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint16_t allowed_genders;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t allowed_minimum_level;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t allowed_maximum_level;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos
vmangos: char m_choicetext[10][64] */
    uint32_t todo_amount_of_signers;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    uint32_t number_of_choices;

} vanilla_SMSG_PETITION_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_PETITION_QUERY_RESPONSE_free(vanilla_SMSG_PETITION_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PETITION_QUERY_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_PETITION_QUERY_RESPONSE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FISH_NOT_HOOKED_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FISH_ESCAPED_write(WowWorldWriter* writer);

typedef struct {
    /* cmangos/vmangos/mangoszero: If 0 received bug report, else received suggestion */
    uint32_t suggestion;
    char* content;
    char* bug_type;

} vanilla_CMSG_BUG;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_BUG_free(vanilla_CMSG_BUG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BUG_write(WowWorldWriter* writer, const vanilla_CMSG_BUG* object);

typedef struct {
    char* notification;

} vanilla_SMSG_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_NOTIFICATION_free(vanilla_SMSG_NOTIFICATION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_NOTIFICATION_write(WowWorldWriter* writer, const vanilla_SMSG_NOTIFICATION* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PLAYED_TIME_write(WowWorldWriter* writer);

typedef struct {
    uint32_t total_played_time;
    uint32_t level_played_time;

} vanilla_SMSG_PLAYED_TIME;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PLAYED_TIME_write(WowWorldWriter* writer, const vanilla_SMSG_PLAYED_TIME* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_QUERY_TIME_write(WowWorldWriter* writer);

/* Reply to [CMSG_QUERY_TIME].
[CMSG_QUERY_TIME] and this reply does not actually appear to set the time. Instead [SMSG_LOGIN_SETTIMESPEED] seems to correctly set the time. Running the client with `-console` will print the date when [SMSG_LOGIN_SETTIMESPEED] is received, but not when this message is received. */
typedef struct {
    /* Seconds since 1970, 1st of January (Unix Time). */
    uint32_t time;

} vanilla_SMSG_QUERY_TIME_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_QUERY_TIME_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_QUERY_TIME_RESPONSE* object);

typedef struct {
    uint64_t target;
    uint32_t total_exp;
    vanilla_ExperienceAwardType exp_type;
    uint32_t experience_without_rested;
    /* mangoszero sets to 1 and comments: 1 - none 0 - 100% group bonus output */
    float exp_group_bonus;

} vanilla_SMSG_LOG_XPGAIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOG_XPGAIN_write(WowWorldWriter* writer, const vanilla_SMSG_LOG_XPGAIN* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_RECLAIM_CORPSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_RECLAIM_CORPSE_write(WowWorldWriter* writer, const vanilla_CMSG_RECLAIM_CORPSE* object);

typedef struct {
    uint8_t gift_bag_index;
    uint8_t gift_slot;
    uint8_t item_bag_index;
    uint8_t item_slot;

} vanilla_CMSG_WRAP_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_WRAP_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_WRAP_ITEM* object);

typedef struct {
    uint32_t new_level;
    uint32_t health;
    uint32_t mana;
    uint32_t rage;
    uint32_t focus;
    uint32_t energy;
    uint32_t happiness;
    uint32_t strength;
    uint32_t agility;
    uint32_t stamina;
    uint32_t intellect;
    uint32_t spirit;

} vanilla_SMSG_LEVELUP_INFO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LEVELUP_INFO_write(WowWorldWriter* writer, const vanilla_SMSG_LEVELUP_INFO* object);

typedef struct {
    float position_x;
    float position_y;

} vanilla_MSG_MINIMAP_PING_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MINIMAP_PING_Client_write(WowWorldWriter* writer, const vanilla_MSG_MINIMAP_PING_Client* object);

typedef struct {
    uint64_t guid;
    float position_x;
    float position_y;

} vanilla_MSG_MINIMAP_PING_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MINIMAP_PING_Server_write(WowWorldWriter* writer, const vanilla_MSG_MINIMAP_PING_Server* object);

/* Structure as comment on `https://github1s.com/mangoszero/server/blob/HEAD/src/game/Server/Opcodes.h#L525`.
Not used in azerothcore/trinitycore/mangostwo/arcemu. */
typedef struct {
    uint64_t guid1;
    uint64_t guid2;
    uint32_t unknown1;
    float unknown2;
    float unknown3;
    uint32_t unknown4;
    uint32_t unknown5;

} vanilla_SMSG_RESISTLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_RESISTLOG_write(WowWorldWriter* writer, const vanilla_SMSG_RESISTLOG* object);

/* cmangos and vmangos/mangoszero disagree about packed and extra u8 */
typedef struct {
    uint64_t target;
    /* vmangos: message says enchant has faded if empty */
    uint64_t caster;
    uint32_t item;
    uint32_t spell;
    /* vmangos: Only used if `caster` is not 0. */
    bool show_affiliation;

} vanilla_SMSG_ENCHANTMENTLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ENCHANTMENTLOG_write(WowWorldWriter* writer, const vanilla_SMSG_ENCHANTMENTLOG* object);

typedef struct {
    vanilla_TimerType timer;
    uint32_t time_remaining;
    uint32_t duration;
    uint32_t scale;
    bool is_frozen;
    uint32_t id;

} vanilla_SMSG_START_MIRROR_TIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_START_MIRROR_TIMER_write(WowWorldWriter* writer, const vanilla_SMSG_START_MIRROR_TIMER* object);

/* According to cmangos: 'Default UI handler for this is bugged, args dont match. Gotta do a full update with `SMSG_START_MIRROR_TIMER` to avoid lua errors. */
typedef struct {
    vanilla_TimerType timer;
    bool is_frozen;

} vanilla_SMSG_PAUSE_MIRROR_TIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PAUSE_MIRROR_TIMER_write(WowWorldWriter* writer, const vanilla_SMSG_PAUSE_MIRROR_TIMER* object);

typedef struct {
    vanilla_TimerType timer;

} vanilla_SMSG_STOP_MIRROR_TIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_STOP_MIRROR_TIMER_write(WowWorldWriter* writer, const vanilla_SMSG_STOP_MIRROR_TIMER* object);

typedef struct {
    uint32_t sequence_id;
    uint32_t round_time_in_ms;

} vanilla_CMSG_PING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PING_write(WowWorldWriter* writer, const vanilla_CMSG_PING* object);

typedef struct {
    uint32_t sequence_id;

} vanilla_SMSG_PONG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PONG_write(WowWorldWriter* writer, const vanilla_SMSG_PONG* object);

typedef struct {
    uint32_t id;
    uint64_t target;

} vanilla_SMSG_CLEAR_COOLDOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CLEAR_COOLDOWN_write(WowWorldWriter* writer, const vanilla_SMSG_CLEAR_COOLDOWN* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_GAMEOBJECT_PAGETEXT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GAMEOBJECT_PAGETEXT_write(WowWorldWriter* writer, const vanilla_SMSG_GAMEOBJECT_PAGETEXT* object);

/* Says which weapon the client pulls out. */
typedef struct {
    vanilla_SheathState sheathed;

} vanilla_CMSG_SETSHEATHED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SETSHEATHED_write(WowWorldWriter* writer, const vanilla_CMSG_SETSHEATHED* object);

typedef struct {
    uint64_t guid;
    uint32_t delay_time;

} vanilla_SMSG_SPELL_DELAYED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELL_DELAYED_write(WowWorldWriter* writer, const vanilla_SMSG_SPELL_DELAYED* object);

typedef struct {
    uint64_t guid;
    uint32_t duration;

} vanilla_SMSG_ITEM_TIME_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ITEM_TIME_UPDATE_write(WowWorldWriter* writer, const vanilla_SMSG_ITEM_TIME_UPDATE* object);

typedef struct {
    uint64_t item;
    /* Possibly used with EnchantmentSlot enum. */
    uint32_t slot;
    uint32_t duration;
    uint64_t player;

} vanilla_SMSG_ITEM_ENCHANT_TIME_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ITEM_ENCHANT_TIME_UPDATE_write(WowWorldWriter* writer, const vanilla_SMSG_ITEM_ENCHANT_TIME_UPDATE* object);

/* Seed used by the client to prove in [CMSG_AUTH_SESSION] that it has authenticated with the auth server.
First thing sent when a client connects to the world server.
This message is always unencrypted. */
typedef struct {
    uint32_t server_seed;

} vanilla_SMSG_AUTH_CHALLENGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AUTH_CHALLENGE_write(WowWorldWriter* writer, const vanilla_SMSG_AUTH_CHALLENGE* object);

/* Sent after receiving [SMSG_AUTH_CHALLENGE].
Followed by [SMSG_AUTH_RESPONSE].
This message is never encrypted. */
typedef struct {
    uint32_t build;
    /* This is sent to the client in [CMD_REALM_LIST_Server]. */
    uint32_t server_id;
    char* username;
    uint32_t client_seed;
    uint8_t client_proof[20];
    uint32_t amount_of_addon_info;
    vanilla_AddonInfo* addon_info;

} vanilla_CMSG_AUTH_SESSION;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_AUTH_SESSION_free(vanilla_CMSG_AUTH_SESSION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUTH_SESSION_write(WowWorldWriter* writer, const vanilla_CMSG_AUTH_SESSION* object);

/* Response to [CMSG_AUTH_SESSION].
Usually followed by [CMSG_CHAR_ENUM] if login was successful (`AUTH_OK`).
vmangos/cmangos/mangoszero all have a variant of this message that contains fields from `AUTH_OK` for `AUTH_WAIT_QUEUE` as well (`https://github.com/vmangos/core/blob/cd896d43712ceafecdbd8f005846d7f676e55b4f/src/game/World.cpp#L322`) but this does not seem to be actually be a real thing. */
typedef struct {
    vanilla_WorldResult result;
    uint32_t billing_time;
    uint8_t billing_flags;
    uint32_t billing_rested;
    uint32_t queue_position;

} vanilla_SMSG_AUTH_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AUTH_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_AUTH_RESPONSE* object);

typedef struct {
    uint64_t guid;
    uint32_t id;
    vanilla_SpellCastTargets targets;

} vanilla_CMSG_PET_CAST_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_PET_CAST_SPELL_free(vanilla_CMSG_PET_CAST_SPELL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PET_CAST_SPELL_write(WowWorldWriter* writer, const vanilla_CMSG_PET_CAST_SPELL* object);

typedef struct {
    vanilla_GuildEmblemResult result;

} vanilla_MSG_SAVE_GUILD_EMBLEM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_SAVE_GUILD_EMBLEM_Server_write(WowWorldWriter* writer, const vanilla_MSG_SAVE_GUILD_EMBLEM_Server* object);

typedef struct {
    uint64_t vendor;
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;
    uint32_t background_color;

} vanilla_MSG_SAVE_GUILD_EMBLEM_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_SAVE_GUILD_EMBLEM_Client_write(WowWorldWriter* writer, const vanilla_MSG_SAVE_GUILD_EMBLEM_Client* object);

typedef struct {
    uint64_t guid;

} vanilla_MSG_TABARDVENDOR_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_TABARDVENDOR_ACTIVATE_cmsg_write(WowWorldWriter* writer, const vanilla_MSG_TABARDVENDOR_ACTIVATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_TABARDVENDOR_ACTIVATE_smsg_write(WowWorldWriter* writer, const vanilla_MSG_TABARDVENDOR_ACTIVATE* object);

typedef struct {
    uint64_t guid;
    /* mangoszero/mangosone: index from SpellVisualKit.dbc. Set to 0xB3 when buying spells. */
    uint32_t spell_art_kit;

} vanilla_SMSG_PLAY_SPELL_VISUAL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PLAY_SPELL_VISUAL_write(WowWorldWriter* writer, const vanilla_SMSG_PLAY_SPELL_VISUAL* object);

/* Sent by the client whenever it reaches a new area.
The client does not send an accurate area. For example when going to Sen'jin Village, the client will send `DUROTAR` (0x0E) and not `SENJIN_VILLAGE` (0x16F). */
typedef struct {
    vanilla_Area area;

} vanilla_CMSG_ZONEUPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ZONEUPDATE_write(WowWorldWriter* writer, const vanilla_CMSG_ZONEUPDATE* object);

typedef struct {
    uint64_t player_with_killing_blow;
    uint64_t victim;

} vanilla_SMSG_PARTYKILLLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PARTYKILLLOG_write(WowWorldWriter* writer, const vanilla_SMSG_PARTYKILLLOG* object);

/* Compressed version of [SMSG_UPDATE_OBJECT]. Has the same fields when uncompressed */
typedef struct {
    uint32_t amount_of_objects;
    uint8_t has_transport;
    vanilla_Object* objects;

} vanilla_SMSG_COMPRESSED_UPDATE_OBJECT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_COMPRESSED_UPDATE_OBJECT_free(vanilla_SMSG_COMPRESSED_UPDATE_OBJECT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_COMPRESSED_UPDATE_OBJECT_write(WowWorldWriter* writer, const vanilla_SMSG_COMPRESSED_UPDATE_OBJECT* object);

typedef struct {
    uint64_t guid;
    /* mangoszero/mangosone/azerothcore: index from SpellVisualKit.dbc. Used for visual effect on player with 0x016A */
    uint32_t spell_visual_kit;

} vanilla_SMSG_PLAY_SPELL_IMPACT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PLAY_SPELL_IMPACT_write(WowWorldWriter* writer, const vanilla_SMSG_PLAY_SPELL_IMPACT* object);

typedef struct {
    vanilla_Area area;
    uint32_t experience;

} vanilla_SMSG_EXPLORATION_EXPERIENCE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_EXPLORATION_EXPERIENCE_write(WowWorldWriter* writer, const vanilla_SMSG_EXPLORATION_EXPERIENCE* object);

typedef struct {
    uint32_t minimum;
    uint32_t maximum;

} vanilla_MSG_RANDOM_ROLL_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_RANDOM_ROLL_Client_write(WowWorldWriter* writer, const vanilla_MSG_RANDOM_ROLL_Client* object);

typedef struct {
    uint32_t minimum;
    uint32_t maximum;
    uint32_t actual_roll;
    uint64_t guid;

} vanilla_MSG_RANDOM_ROLL_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_RANDOM_ROLL_Server_write(WowWorldWriter* writer, const vanilla_MSG_RANDOM_ROLL_Server* object);

typedef struct {
    uint64_t guid;
    vanilla_EnvironmentalDamageType damage_type;
    uint32_t damage;
    uint32_t absorb;
    uint32_t resist;

} vanilla_SMSG_ENVIRONMENTAL_DAMAGE_LOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ENVIRONMENTAL_DAMAGE_LOG_write(WowWorldWriter* writer, const vanilla_SMSG_ENVIRONMENTAL_DAMAGE_LOG* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_LOOKING_FOR_GROUP_Client_write(WowWorldWriter* writer);

typedef struct {
    /* vmangos sets to 0. cmangos/mangoszero don't implement */
    uint32_t unknown1;

} vanilla_MSG_LOOKING_FOR_GROUP_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_LOOKING_FOR_GROUP_Server_write(WowWorldWriter* writer, const vanilla_MSG_LOOKING_FOR_GROUP_Server* object);

typedef struct {
    vanilla_Skill skill;

} vanilla_CMSG_UNLEARN_SKILL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_UNLEARN_SKILL_write(WowWorldWriter* writer, const vanilla_CMSG_UNLEARN_SKILL* object);

typedef struct {
    uint16_t spell;

} vanilla_SMSG_REMOVED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_REMOVED_SPELL_write(WowWorldWriter* writer, const vanilla_SMSG_REMOVED_SPELL* object);

typedef struct {
    vanilla_GmTicketType category;
    vanilla_Map map;
    all_Vector3d position;
    char* message;
    /* cmangos/vmangos/mangoszero: Pre-TBC: 'Reserved for future use'
cmangos/vmangos/mangoszero: Unused */
    char* reserved_for_future_use;
    uint32_t chat_data_line_count;
    uint32_t amount_of_compressed_chat_data;
    uint8_t* compressed_chat_data;

} vanilla_CMSG_GMTICKET_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GMTICKET_CREATE_free(vanilla_CMSG_GMTICKET_CREATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GMTICKET_CREATE_write(WowWorldWriter* writer, const vanilla_CMSG_GMTICKET_CREATE* object);

typedef struct {
    vanilla_GmTicketResponse response;

} vanilla_SMSG_GMTICKET_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GMTICKET_CREATE_write(WowWorldWriter* writer, const vanilla_SMSG_GMTICKET_CREATE* object);

typedef struct {
    /* cmangos does not have this field, vmangos does. */
    vanilla_GmTicketType ticket_type;
    char* message;

} vanilla_CMSG_GMTICKET_UPDATETEXT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GMTICKET_UPDATETEXT_free(vanilla_CMSG_GMTICKET_UPDATETEXT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GMTICKET_UPDATETEXT_write(WowWorldWriter* writer, const vanilla_CMSG_GMTICKET_UPDATETEXT* object);

typedef struct {
    vanilla_GmTicketResponse response;

} vanilla_SMSG_GMTICKET_UPDATETEXT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GMTICKET_UPDATETEXT_write(WowWorldWriter* writer, const vanilla_SMSG_GMTICKET_UPDATETEXT* object);

/* The purpose of this message is unknown, but it is required in order to prevent the chat box from being a white rectangle that is unable to show text.
Sending this causes the client to send [CMSG_UPDATE_ACCOUNT_DATA] messages.
[CMSG_UPDATE_ACCOUNT_DATA] and [CMSG_REQUEST_ACCOUNT_DATA] act on blocks numbered 0 to 7. The 32 u32s in this message could possibly actually be 8 sets of u8[16] but it could also be a variable sized message. */
typedef struct {
    /* cmangos/vmangos/mangoszero sets to all zeros */
    uint32_t data[32];

} vanilla_SMSG_ACCOUNT_DATA_TIMES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ACCOUNT_DATA_TIMES_write(WowWorldWriter* writer, const vanilla_SMSG_ACCOUNT_DATA_TIMES* object);

/* Respond with [SMSG_UPDATE_ACCOUNT_DATA] */
typedef struct {
    /* The type of account data being requested. You can check this against the [CacheMask] to know if this is character-specific data or account-wide data. */
    uint32_t data_type;

} vanilla_CMSG_REQUEST_ACCOUNT_DATA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_REQUEST_ACCOUNT_DATA_write(WowWorldWriter* writer, const vanilla_CMSG_REQUEST_ACCOUNT_DATA* object);

/* This is sent by the client after receiving [SMSG_ACCOUNT_DATA_TIMES]. Client can also request a block through [CMSG_REQUEST_ACCOUNT_DATA]. */
typedef struct {
    /* Exact meaning unknown. Seems to be between 0 and 7. Block 6 is changed when changing `layout-cache.txt` inside the WTF folder. */
    vanilla_AccountDataType data_type;
    uint32_t amount_of_compressed_data;
    uint8_t* compressed_data;

} vanilla_CMSG_UPDATE_ACCOUNT_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_UPDATE_ACCOUNT_DATA_free(vanilla_CMSG_UPDATE_ACCOUNT_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_UPDATE_ACCOUNT_DATA_write(WowWorldWriter* writer, const vanilla_CMSG_UPDATE_ACCOUNT_DATA* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GMTICKET_GETTICKET_write(WowWorldWriter* writer);

typedef struct {
    vanilla_GmTicketStatus status;
    /* cmangos: Ticket text: data, should never exceed 1999 bytes */
    char* text;
    vanilla_GmTicketType ticket_type;
    float days_since_ticket_creation;
    float days_since_oldest_ticket_creation;
    float days_since_last_updated;
    vanilla_GmTicketEscalationStatus escalation_status;
    bool read_by_gm;

} vanilla_SMSG_GMTICKET_GETTICKET;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GMTICKET_GETTICKET_free(vanilla_SMSG_GMTICKET_GETTICKET* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GMTICKET_GETTICKET_write(WowWorldWriter* writer, const vanilla_SMSG_GMTICKET_GETTICKET* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_GAMEOBJECT_SPAWN_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GAMEOBJECT_SPAWN_ANIM_write(WowWorldWriter* writer, const vanilla_SMSG_GAMEOBJECT_SPAWN_ANIM* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_GAMEOBJECT_DESPAWN_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GAMEOBJECT_DESPAWN_ANIM_write(WowWorldWriter* writer, const vanilla_SMSG_GAMEOBJECT_DESPAWN_ANIM* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_CORPSE_QUERY_Client_write(WowWorldWriter* writer);

typedef struct {
    vanilla_CorpseQueryResult result;
    vanilla_Map map;
    all_Vector3d position;
    vanilla_Map corpse_map;

} vanilla_MSG_CORPSE_QUERY_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_CORPSE_QUERY_Server_write(WowWorldWriter* writer, const vanilla_MSG_CORPSE_QUERY_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GMTICKET_DELETETICKET_write(WowWorldWriter* writer);

typedef struct {
    vanilla_GmTicketResponse response;

} vanilla_SMSG_GMTICKET_DELETETICKET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GMTICKET_DELETETICKET_write(WowWorldWriter* writer, const vanilla_SMSG_GMTICKET_DELETETICKET* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CHAT_WRONG_FACTION_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GMTICKET_SYSTEMSTATUS_write(WowWorldWriter* writer);

typedef struct {
    /* vmangos: This only disables the ticket UI at client side and is not fully reliable are we sure this is a uint32? Should ask Zor */
    vanilla_GmTicketQueueStatus will_accept_tickets;

} vanilla_SMSG_GMTICKET_SYSTEMSTATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GMTICKET_SYSTEMSTATUS_write(WowWorldWriter* writer, const vanilla_SMSG_GMTICKET_SYSTEMSTATUS* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_SPIRIT_HEALER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SPIRIT_HEALER_ACTIVATE_write(WowWorldWriter* writer, const vanilla_CMSG_SPIRIT_HEALER_ACTIVATE* object);

typedef struct {
    /* cmangos/mangoszero: unknown, may be rest state time or experience */
    uint32_t unknown1;

} vanilla_SMSG_SET_REST_START;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SET_REST_START_write(WowWorldWriter* writer, const vanilla_SMSG_SET_REST_START* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPIRIT_HEALER_CONFIRM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPIRIT_HEALER_CONFIRM_write(WowWorldWriter* writer, const vanilla_SMSG_SPIRIT_HEALER_CONFIRM* object);

typedef struct {
    uint32_t flags;
    all_Vector2d position;
    uint32_t icon;
    uint32_t data;
    char* location_name;

} vanilla_SMSG_GOSSIP_POI;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_GOSSIP_POI_free(vanilla_SMSG_GOSSIP_POI* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GOSSIP_POI_write(WowWorldWriter* writer, const vanilla_SMSG_GOSSIP_POI* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_CHAT_IGNORED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHAT_IGNORED_write(WowWorldWriter* writer, const vanilla_CMSG_CHAT_IGNORED* object);

typedef struct {
    uint32_t rank_id;
    uint32_t rights;
    char* rank_name;

} vanilla_CMSG_GUILD_RANK;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_RANK_free(vanilla_CMSG_GUILD_RANK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_RANK_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_RANK* object);

typedef struct {
    char* rank_name;

} vanilla_CMSG_GUILD_ADD_RANK;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_ADD_RANK_free(vanilla_CMSG_GUILD_ADD_RANK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_ADD_RANK_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_ADD_RANK* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_DEL_RANK_write(WowWorldWriter* writer);

typedef struct {
    char* player_name;
    char* note;

} vanilla_CMSG_GUILD_SET_PUBLIC_NOTE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_SET_PUBLIC_NOTE_free(vanilla_CMSG_GUILD_SET_PUBLIC_NOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_SET_PUBLIC_NOTE_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_SET_PUBLIC_NOTE* object);

typedef struct {
    char* player_name;
    /* vmangos: Max length 31 */
    char* note;

} vanilla_CMSG_GUILD_SET_OFFICER_NOTE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_SET_OFFICER_NOTE_free(vanilla_CMSG_GUILD_SET_OFFICER_NOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_SET_OFFICER_NOTE_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_SET_OFFICER_NOTE* object);

/* Message to the client that is has successfully logged into the world and that it should load the map and coordinates.
The positions and orientations do not matter since they can be overwritten in the [SMSG_UPDATE_OBJECT], but the map determines which map the client loads and this is not changeable in [SMSG_UPDATE_OBJECT]. */
typedef struct {
    vanilla_Map map;
    all_Vector3d position;
    float orientation;

} vanilla_SMSG_LOGIN_VERIFY_WORLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOGIN_VERIFY_WORLD_write(WowWorldWriter* writer, const vanilla_SMSG_LOGIN_VERIFY_WORLD* object);

typedef struct {
    uint64_t mailbox;
    char* receiver;
    char* subject;
    char* body;
    /* cmangos: stationery? */
    uint32_t unknown1;
    /* cmangos: 0x00000000 */
    uint32_t unknown2;
    uint64_t item;
    uint32_t money;
    uint32_t cash_on_delivery_amount;
    /* cmangos: const 0 */
    uint32_t unknown3;
    /* cmangos: const 0 */
    uint32_t unknown4;

} vanilla_CMSG_SEND_MAIL;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_SEND_MAIL_free(vanilla_CMSG_SEND_MAIL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SEND_MAIL_write(WowWorldWriter* writer, const vanilla_CMSG_SEND_MAIL* object);

typedef struct {
    uint32_t mail_id;
    vanilla_MailAction action;
    vanilla_MailResult result;
    uint32_t equip_error;
    /* cmangos/vmangos: item guid low? */
    uint32_t item;
    uint32_t item_count;
    vanilla_MailResultTwo result2;
    uint32_t equip_error2;

} vanilla_SMSG_SEND_MAIL_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SEND_MAIL_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_SEND_MAIL_RESULT* object);

typedef struct {
    uint64_t mailbox;

} vanilla_CMSG_GET_MAIL_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GET_MAIL_LIST_write(WowWorldWriter* writer, const vanilla_CMSG_GET_MAIL_LIST* object);

typedef struct {
    uint8_t amount_of_mails;
    vanilla_Mail* mails;

} vanilla_SMSG_MAIL_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_MAIL_LIST_RESULT_free(vanilla_SMSG_MAIL_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MAIL_LIST_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_MAIL_LIST_RESULT* object);

typedef struct {
    vanilla_Map map;

} vanilla_CMSG_BATTLEFIELD_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BATTLEFIELD_LIST_write(WowWorldWriter* writer, const vanilla_CMSG_BATTLEFIELD_LIST* object);

typedef struct {
    uint64_t battlemaster;
    vanilla_Map map;
    vanilla_BattlegroundBracket bracket;
    uint32_t number_of_battlegrounds;
    uint32_t* battlegrounds;

} vanilla_SMSG_BATTLEFIELD_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_BATTLEFIELD_LIST_free(vanilla_SMSG_BATTLEFIELD_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_BATTLEFIELD_LIST_write(WowWorldWriter* writer, const vanilla_SMSG_BATTLEFIELD_LIST* object);

typedef struct {
    vanilla_Map map;

} vanilla_CMSG_BATTLEFIELD_JOIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BATTLEFIELD_JOIN_write(WowWorldWriter* writer, const vanilla_CMSG_BATTLEFIELD_JOIN* object);

typedef struct {
    uint32_t item_text_id;
    /* vmangos/cmangos/mangoszero: this value can be item id in bag, but it is also mail id */
    uint32_t mail_id;
    /* vmangos/cmangos/mangoszero: maybe something like state - 0x70000000 */
    uint32_t unknown1;

} vanilla_CMSG_ITEM_TEXT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ITEM_TEXT_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_ITEM_TEXT_QUERY* object);

typedef struct {
    uint32_t item_text_id;
    /* mangoszero: CString TODO max length 8000 */
    char* text;

} vanilla_SMSG_ITEM_TEXT_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_ITEM_TEXT_QUERY_RESPONSE_free(vanilla_SMSG_ITEM_TEXT_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ITEM_TEXT_QUERY_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_ITEM_TEXT_QUERY_RESPONSE* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;

} vanilla_CMSG_MAIL_TAKE_MONEY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MAIL_TAKE_MONEY_write(WowWorldWriter* writer, const vanilla_CMSG_MAIL_TAKE_MONEY* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;

} vanilla_CMSG_MAIL_TAKE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MAIL_TAKE_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_MAIL_TAKE_ITEM* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;

} vanilla_CMSG_MAIL_MARK_AS_READ;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MAIL_MARK_AS_READ_write(WowWorldWriter* writer, const vanilla_CMSG_MAIL_MARK_AS_READ* object);

typedef struct {
    uint64_t mailbox_id;
    uint32_t mail_id;

} vanilla_CMSG_MAIL_RETURN_TO_SENDER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MAIL_RETURN_TO_SENDER_write(WowWorldWriter* writer, const vanilla_CMSG_MAIL_RETURN_TO_SENDER* object);

typedef struct {
    uint64_t mailbox_id;
    uint32_t mail_id;

} vanilla_CMSG_MAIL_DELETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MAIL_DELETE_write(WowWorldWriter* writer, const vanilla_CMSG_MAIL_DELETE* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;
    /* mangoszero/cmangos/vmangos: mailTemplateId, non need, Mail store own 100% correct value anyway */
    uint32_t mail_template_id;

} vanilla_CMSG_MAIL_CREATE_TEXT_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MAIL_CREATE_TEXT_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_MAIL_CREATE_TEXT_ITEM* object);

typedef struct {
    uint32_t id;
    uint64_t caster;
    /* cmangos/mangoszero: can be 0 or 1 */
    uint8_t unknown1;
    uint32_t amount_of_targets;
    vanilla_SpellLogMiss* targets;

} vanilla_SMSG_SPELLLOGMISS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SPELLLOGMISS_free(vanilla_SMSG_SPELLLOGMISS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELLLOGMISS_write(WowWorldWriter* writer, const vanilla_SMSG_SPELLLOGMISS* object);

typedef struct {
    uint64_t caster;
    uint32_t spell;
    uint32_t amount_of_effects;
    vanilla_SpellLog* logs;

} vanilla_SMSG_SPELLLOGEXECUTE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SPELLLOGEXECUTE_free(vanilla_SMSG_SPELLLOGEXECUTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELLLOGEXECUTE_write(WowWorldWriter* writer, const vanilla_SMSG_SPELLLOGEXECUTE* object);

typedef struct {
    uint64_t target;
    uint64_t caster;
    uint32_t spell;
    uint32_t amount_of_auras;
    vanilla_AuraLog* auras;

} vanilla_SMSG_PERIODICAURALOG;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_PERIODICAURALOG_free(vanilla_SMSG_PERIODICAURALOG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PERIODICAURALOG_write(WowWorldWriter* writer, const vanilla_SMSG_PERIODICAURALOG* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t damage;
    vanilla_SpellSchool school;

} vanilla_SMSG_SPELLDAMAGESHIELD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELLDAMAGESHIELD_write(WowWorldWriter* writer, const vanilla_SMSG_SPELLDAMAGESHIELD* object);

typedef struct {
    uint64_t target;
    uint64_t attacker;
    uint32_t spell;
    uint32_t damage;
    vanilla_SpellSchool school;
    uint32_t absorbed_damage;
    /* cmangos/mangoszero/vmangos: sent as int32 */
    uint32_t resisted;
    /* cmangos/mangoszero/vmangos: if 1, then client show spell name (example: %s's ranged shot hit %s for %u school or %s suffers %u school damage from %s's spell_name */
    bool periodic_log;
    uint8_t unused;
    uint32_t blocked;
    vanilla_HitInfo hit_info;
    /* cmangos has some that might be correct `https://github.com/cmangos/mangos-classic/blob/524a39412dae7946d06e4b8f319f45b615075815/src/game/Entities/Unit.cpp#L5497`. */
    uint8_t extend_flag;

} vanilla_SMSG_SPELLNONMELEEDAMAGELOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELLNONMELEEDAMAGELOG_write(WowWorldWriter* writer, const vanilla_SMSG_SPELLNONMELEEDAMAGELOG* object);

typedef struct {
    vanilla_Talent talent;
    uint32_t requested_rank;

} vanilla_CMSG_LEARN_TALENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LEARN_TALENT_write(WowWorldWriter* writer, const vanilla_CMSG_LEARN_TALENT* object);

typedef struct {
    bool enable_pvp;
} vanilla_CMSG_TOGGLE_PVP_set;

/* vmangos: this opcode can be used in two ways: Either set explicit new status or toggle old status */
typedef struct {

    vanilla_CMSG_TOGGLE_PVP_set* set;
} vanilla_CMSG_TOGGLE_PVP;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_TOGGLE_PVP_free(vanilla_CMSG_TOGGLE_PVP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TOGGLE_PVP_write(WowWorldWriter* writer, const vanilla_CMSG_TOGGLE_PVP* object);

typedef struct {
    vanilla_Area zone_id;

} vanilla_SMSG_ZONE_UNDER_ATTACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ZONE_UNDER_ATTACK_write(WowWorldWriter* writer, const vanilla_SMSG_ZONE_UNDER_ATTACK* object);

typedef struct {
    uint64_t auctioneer;

} vanilla_MSG_AUCTION_HELLO_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_AUCTION_HELLO_Client_write(WowWorldWriter* writer, const vanilla_MSG_AUCTION_HELLO_Client* object);

typedef struct {
    uint64_t auctioneer;
    vanilla_AuctionHouse auction_house;

} vanilla_MSG_AUCTION_HELLO_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_AUCTION_HELLO_Server_write(WowWorldWriter* writer, const vanilla_MSG_AUCTION_HELLO_Server* object);

typedef struct {
    uint64_t auctioneer;
    uint64_t item;
    uint32_t starting_bid;
    uint32_t buyout;
    uint32_t auction_duration_in_minutes;

} vanilla_CMSG_AUCTION_SELL_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUCTION_SELL_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_AUCTION_SELL_ITEM* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t auction_id;

} vanilla_CMSG_AUCTION_REMOVE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUCTION_REMOVE_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_AUCTION_REMOVE_ITEM* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t list_start_item;
    char* searched_name;
    uint8_t minimum_level;
    uint8_t maximum_level;
    uint32_t auction_slot_id;
    uint32_t auction_main_category;
    uint32_t auction_sub_category;
    vanilla_ItemQuality auction_quality;
    uint8_t usable;

} vanilla_CMSG_AUCTION_LIST_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_AUCTION_LIST_ITEMS_free(vanilla_CMSG_AUCTION_LIST_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUCTION_LIST_ITEMS_write(WowWorldWriter* writer, const vanilla_CMSG_AUCTION_LIST_ITEMS* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t list_from;

} vanilla_CMSG_AUCTION_LIST_OWNER_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUCTION_LIST_OWNER_ITEMS_write(WowWorldWriter* writer, const vanilla_CMSG_AUCTION_LIST_OWNER_ITEMS* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t auction_id;
    uint32_t price;

} vanilla_CMSG_AUCTION_PLACE_BID;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUCTION_PLACE_BID_write(WowWorldWriter* writer, const vanilla_CMSG_AUCTION_PLACE_BID* object);

typedef struct {
    uint32_t auction_id;
    vanilla_AuctionCommandAction action;
    vanilla_AuctionCommandResult result;
    uint32_t auction_outbid1;
    vanilla_InventoryResult inventory_result;
    uint64_t higher_bidder;
    uint32_t new_bid;
    uint32_t auction_outbid2;
    vanilla_AuctionCommandResultTwo result2;
    vanilla_InventoryResult inventory_result2;
    uint64_t higher_bidder2;
    uint32_t new_bid2;
    uint32_t auction_outbid3;

} vanilla_SMSG_AUCTION_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AUCTION_COMMAND_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_AUCTION_COMMAND_RESULT* object);

typedef struct {
    uint32_t count;
    vanilla_AuctionListItem* auctions;
    uint32_t total_amount_of_auctions;

} vanilla_SMSG_AUCTION_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_AUCTION_LIST_RESULT_free(vanilla_SMSG_AUCTION_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AUCTION_LIST_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_AUCTION_LIST_RESULT* object);

typedef struct {
    uint32_t count;
    vanilla_AuctionListItem* auctions;
    uint32_t total_amount_of_auctions;

} vanilla_SMSG_AUCTION_OWNER_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_AUCTION_OWNER_LIST_RESULT_free(vanilla_SMSG_AUCTION_OWNER_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AUCTION_OWNER_LIST_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_AUCTION_OWNER_LIST_RESULT* object);

typedef struct {
    vanilla_AuctionHouse auction_house;
    uint32_t auction_id;
    uint64_t bidder;
    /* vmangos/cmangos: if 0, client shows ERR_AUCTION_WON_S, else ERR_AUCTION_OUTBID_S */
    uint32_t won;
    uint32_t out_bid;
    uint32_t item_template;
    uint32_t item_random_property_id;

} vanilla_SMSG_AUCTION_BIDDER_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AUCTION_BIDDER_NOTIFICATION_write(WowWorldWriter* writer, const vanilla_SMSG_AUCTION_BIDDER_NOTIFICATION* object);

/* vmangos/cmangos/mangoszero: this message causes on client to display: 'Your auction sold' */
typedef struct {
    uint32_t auction_id;
    /* vmangos/cmangos/mangoszero: if 0, client shows ERR_AUCTION_EXPIRED_S, else ERR_AUCTION_SOLD_S (works only when guid==0) */
    uint32_t bid;
    uint32_t auction_out_bid;
    uint64_t bidder;
    uint32_t item;
    uint32_t item_random_property_id;

} vanilla_SMSG_AUCTION_OWNER_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AUCTION_OWNER_NOTIFICATION_write(WowWorldWriter* writer, const vanilla_SMSG_AUCTION_OWNER_NOTIFICATION* object);

/* According to cmangos/azerothcore/trinitycore/mangostwo. Not present in vmangos. */
typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t id;
    vanilla_LogFormat log_format;

} vanilla_SMSG_PROCRESIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PROCRESIST_write(WowWorldWriter* writer, const vanilla_SMSG_PROCRESIST* object);

typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t amount_of_spells;
    uint32_t* spells;

} vanilla_SMSG_DISPEL_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_DISPEL_FAILED_free(vanilla_SMSG_DISPEL_FAILED* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DISPEL_FAILED_write(WowWorldWriter* writer, const vanilla_SMSG_DISPEL_FAILED* object);

typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t id;
    bool debug_log_format;

} vanilla_SMSG_SPELLORDAMAGE_IMMUNE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELLORDAMAGE_IMMUNE_write(WowWorldWriter* writer, const vanilla_SMSG_SPELLORDAMAGE_IMMUNE* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t start_from_page;
    uint32_t amount_of_outbid_items;
    uint32_t* outbid_item_ids;

} vanilla_CMSG_AUCTION_LIST_BIDDER_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_AUCTION_LIST_BIDDER_ITEMS_free(vanilla_CMSG_AUCTION_LIST_BIDDER_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUCTION_LIST_BIDDER_ITEMS_write(WowWorldWriter* writer, const vanilla_CMSG_AUCTION_LIST_BIDDER_ITEMS* object);

typedef struct {
    uint32_t count;
    vanilla_AuctionListItem* auctions;
    uint32_t total_amount_of_auctions;

} vanilla_SMSG_AUCTION_BIDDER_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_AUCTION_BIDDER_LIST_RESULT_free(vanilla_SMSG_AUCTION_BIDDER_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AUCTION_BIDDER_LIST_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_AUCTION_BIDDER_LIST_RESULT* object);

typedef struct {
    uint8_t eff;
    uint8_t op;
    uint32_t value;

} vanilla_SMSG_SET_FLAT_SPELL_MODIFIER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SET_FLAT_SPELL_MODIFIER_write(WowWorldWriter* writer, const vanilla_SMSG_SET_FLAT_SPELL_MODIFIER* object);

typedef struct {
    uint8_t eff;
    uint8_t op;
    uint32_t value;

} vanilla_SMSG_SET_PCT_SPELL_MODIFIER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SET_PCT_SPELL_MODIFIER_write(WowWorldWriter* writer, const vanilla_SMSG_SET_PCT_SPELL_MODIFIER* object);

typedef struct {
    uint32_t item;

} vanilla_CMSG_SET_AMMO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_AMMO_write(WowWorldWriter* writer, const vanilla_CMSG_SET_AMMO* object);

typedef struct {
    uint32_t delay;

} vanilla_SMSG_CORPSE_RECLAIM_DELAY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CORPSE_RECLAIM_DELAY_write(WowWorldWriter* writer, const vanilla_SMSG_CORPSE_RECLAIM_DELAY* object);

/* Sent when the client enters the world. */
typedef struct {
    uint64_t guid;

} vanilla_CMSG_SET_ACTIVE_MOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_ACTIVE_MOVER_write(WowWorldWriter* writer, const vanilla_CMSG_SET_ACTIVE_MOVER* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} vanilla_CMSG_PET_CANCEL_AURA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PET_CANCEL_AURA_write(WowWorldWriter* writer, const vanilla_CMSG_PET_CANCEL_AURA* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CANCEL_AUTO_REPEAT_SPELL_write(WowWorldWriter* writer);

typedef struct {
    uint64_t npc;

} vanilla_MSG_LIST_STABLED_PETS_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_LIST_STABLED_PETS_Client_write(WowWorldWriter* writer, const vanilla_MSG_LIST_STABLED_PETS_Client* object);

typedef struct {
    uint64_t npc;
    uint8_t amount_of_pets;
    uint8_t stable_slots;
    vanilla_StabledPet* pets;

} vanilla_MSG_LIST_STABLED_PETS_Server;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_MSG_LIST_STABLED_PETS_Server_free(vanilla_MSG_LIST_STABLED_PETS_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_LIST_STABLED_PETS_Server_write(WowWorldWriter* writer, const vanilla_MSG_LIST_STABLED_PETS_Server* object);

typedef struct {
    uint64_t stable_master;

} vanilla_CMSG_STABLE_PET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_STABLE_PET_write(WowWorldWriter* writer, const vanilla_CMSG_STABLE_PET* object);

typedef struct {
    uint64_t stable_master;
    uint32_t pet_number;

} vanilla_CMSG_UNSTABLE_PET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_UNSTABLE_PET_write(WowWorldWriter* writer, const vanilla_CMSG_UNSTABLE_PET* object);

typedef struct {
    uint64_t npc;

} vanilla_CMSG_BUY_STABLE_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BUY_STABLE_SLOT_write(WowWorldWriter* writer, const vanilla_CMSG_BUY_STABLE_SLOT* object);

typedef struct {
    vanilla_StableResult result;

} vanilla_SMSG_STABLE_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_STABLE_RESULT_write(WowWorldWriter* writer, const vanilla_SMSG_STABLE_RESULT* object);

typedef struct {
    uint64_t npc;
    uint32_t pet_slot;

} vanilla_CMSG_STABLE_SWAP_PET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_STABLE_SWAP_PET_write(WowWorldWriter* writer, const vanilla_CMSG_STABLE_SWAP_PET* object);

typedef struct {
    uint64_t guid;
    vanilla_QuestPartyMessage message;

} vanilla_MSG_QUEST_PUSH_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_QUEST_PUSH_RESULT_cmsg_write(WowWorldWriter* writer, const vanilla_MSG_QUEST_PUSH_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_QUEST_PUSH_RESULT_smsg_write(WowWorldWriter* writer, const vanilla_MSG_QUEST_PUSH_RESULT* object);

typedef struct {
    uint32_t sound_id;

} vanilla_SMSG_PLAY_MUSIC;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PLAY_MUSIC_write(WowWorldWriter* writer, const vanilla_SMSG_PLAY_MUSIC* object);

/* vmangos: Nostalrius: ignored by client if unit is not loaded */
typedef struct {
    uint32_t sound_id;
    uint64_t guid;

} vanilla_SMSG_PLAY_OBJECT_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PLAY_OBJECT_SOUND_write(WowWorldWriter* writer, const vanilla_SMSG_PLAY_OBJECT_SOUND* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_REQUEST_PET_INFO_write(WowWorldWriter* writer);

typedef struct {
    vanilla_FarSightOperation operation;

} vanilla_CMSG_FAR_SIGHT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_FAR_SIGHT_write(WowWorldWriter* writer, const vanilla_CMSG_FAR_SIGHT* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t amount_of_spells;
    uint32_t* spells;

} vanilla_SMSG_SPELLDISPELLOG;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SPELLDISPELLOG_free(vanilla_SMSG_SPELLDISPELLOG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELLDISPELLOG_write(WowWorldWriter* writer, const vanilla_SMSG_SPELLDISPELLOG* object);

typedef struct {
    char* name;
    uint8_t group_number;

} vanilla_CMSG_GROUP_CHANGE_SUB_GROUP;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GROUP_CHANGE_SUB_GROUP_free(vanilla_CMSG_GROUP_CHANGE_SUB_GROUP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_CHANGE_SUB_GROUP_write(WowWorldWriter* writer, const vanilla_CMSG_GROUP_CHANGE_SUB_GROUP* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_REQUEST_PARTY_MEMBER_STATS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_REQUEST_PARTY_MEMBER_STATS_write(WowWorldWriter* writer, const vanilla_CMSG_REQUEST_PARTY_MEMBER_STATS* object);

typedef struct {
    char* name;
    char* swap_with_name;

} vanilla_CMSG_GROUP_SWAP_SUB_GROUP;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GROUP_SWAP_SUB_GROUP_free(vanilla_CMSG_GROUP_SWAP_SUB_GROUP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_SWAP_SUB_GROUP_write(WowWorldWriter* writer, const vanilla_CMSG_GROUP_SWAP_SUB_GROUP* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot_index;

} vanilla_CMSG_AUTOSTORE_BANK_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUTOSTORE_BANK_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_AUTOSTORE_BANK_ITEM* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot_index;

} vanilla_CMSG_AUTOBANK_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AUTOBANK_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_AUTOBANK_ITEM* object);

/* mangoszero/vmangos: No idea when this is called. */
typedef struct {
    /* mangoszero sets 0 if has unread mail, -86400.0f (0xC7A8C000) if not
vmangos sets 0 if has unread mail, -1.0f if not
cmangos has the behavior of mangoszero except when there are unread mails. This is TODO. */
    float unread_mails;

} vanilla_MSG_QUERY_NEXT_MAIL_TIME_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_QUERY_NEXT_MAIL_TIME_Server_write(WowWorldWriter* writer, const vanilla_MSG_QUERY_NEXT_MAIL_TIME_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_QUERY_NEXT_MAIL_TIME_Client_write(WowWorldWriter* writer);

/* cmangos/vmangos/mangoszero: deliver undelivered mail */
typedef struct {
    /* cmangos/vmangos sends 0 as u32, mangoszero sends 0 as f32 */
    uint32_t unknown1;

} vanilla_SMSG_RECEIVED_MAIL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_RECEIVED_MAIL_write(WowWorldWriter* writer, const vanilla_SMSG_RECEIVED_MAIL* object);

/* used when player leaves raid group inside instance */
typedef struct {
    uint32_t homebind_timer;
    vanilla_RaidGroupError error;

} vanilla_SMSG_RAID_GROUP_ONLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_RAID_GROUP_ONLY_write(WowWorldWriter* writer, const vanilla_SMSG_RAID_GROUP_ONLY* object);

typedef struct {
    uint32_t honor_points;
    uint64_t victim;
    vanilla_PvpRank rank;

} vanilla_SMSG_PVP_CREDIT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PVP_CREDIT_write(WowWorldWriter* writer, const vanilla_SMSG_PVP_CREDIT* object);

typedef struct {
    uint32_t item;
    uint32_t item_template;
    uint32_t random_property_id;

} vanilla_SMSG_AUCTION_REMOVED_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AUCTION_REMOVED_NOTIFICATION_write(WowWorldWriter* writer, const vanilla_SMSG_AUCTION_REMOVED_NOTIFICATION* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_RAID_CONVERT_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    bool set_assistant;

} vanilla_CMSG_GROUP_ASSISTANT_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GROUP_ASSISTANT_LEADER_write(WowWorldWriter* writer, const vanilla_CMSG_GROUP_ASSISTANT_LEADER* object);

typedef struct {
    uint64_t guid;
    vanilla_BuybackSlot slot;

} vanilla_CMSG_BUYBACK_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BUYBACK_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_BUYBACK_ITEM* object);

typedef struct {
    vanilla_ServerMessageType message_type;
    char* message;

} vanilla_SMSG_SERVER_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SERVER_MESSAGE_free(vanilla_SMSG_SERVER_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SERVER_MESSAGE_write(WowWorldWriter* writer, const vanilla_SMSG_SERVER_MESSAGE* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_MEETINGSTONE_JOIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MEETINGSTONE_JOIN_write(WowWorldWriter* writer, const vanilla_CMSG_MEETINGSTONE_JOIN* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MEETINGSTONE_LEAVE_write(WowWorldWriter* writer);

typedef struct {
    vanilla_Area area;
    vanilla_MeetingStoneStatus status;

} vanilla_SMSG_MEETINGSTONE_SETQUEUE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MEETINGSTONE_SETQUEUE_write(WowWorldWriter* writer, const vanilla_SMSG_MEETINGSTONE_SETQUEUE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MEETINGSTONE_INFO_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MEETINGSTONE_COMPLETE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MEETINGSTONE_IN_PROGRESS_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_MEETINGSTONE_MEMBER_ADDED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MEETINGSTONE_MEMBER_ADDED_write(WowWorldWriter* writer, const vanilla_SMSG_MEETINGSTONE_MEMBER_ADDED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CANCEL_GROWTH_AURA_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CANCEL_AUTO_REPEAT_write(WowWorldWriter* writer);

typedef struct {
    vanilla_UnitStandState state;

} vanilla_SMSG_STANDSTATE_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_STANDSTATE_UPDATE_write(WowWorldWriter* writer, const vanilla_SMSG_STANDSTATE_UPDATE* object);

typedef struct {
    uint64_t looted_target;
    uint32_t loot_slot;
    uint32_t item;
    uint32_t item_random_property_id;
    /* vmangos/mangoszero: Always set to 0. */
    uint32_t item_random_suffix_id;

} vanilla_SMSG_LOOT_ALL_PASSED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOOT_ALL_PASSED_write(WowWorldWriter* writer, const vanilla_SMSG_LOOT_ALL_PASSED* object);

typedef struct {
    uint64_t looted_target;
    uint32_t loot_slot;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint64_t winning_player;
    /* rollnumber related to SMSG_LOOT_ROLL */
    uint8_t winning_roll;
    /* Rolltype related to SMSG_LOOT_ROLL */
    vanilla_RollVote vote;

} vanilla_SMSG_LOOT_ROLL_WON;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOOT_ROLL_WON_write(WowWorldWriter* writer, const vanilla_SMSG_LOOT_ROLL_WON* object);

typedef struct {
    uint64_t item;
    uint32_t item_slot;
    vanilla_RollVote vote;

} vanilla_CMSG_LOOT_ROLL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LOOT_ROLL_write(WowWorldWriter* writer, const vanilla_CMSG_LOOT_ROLL* object);

typedef struct {
    uint64_t creature;
    uint32_t loot_slot;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint32_t countdown_time;

} vanilla_SMSG_LOOT_START_ROLL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOOT_START_ROLL_write(WowWorldWriter* writer, const vanilla_SMSG_LOOT_START_ROLL* object);

typedef struct {
    uint64_t creature;
    uint32_t loot_slot;
    uint64_t player;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    /* vmangos/cmangos/mangoszero: 0: Need for: `item_name` > 127: you passed on: `item_name`      Roll number */
    uint8_t roll_number;
    vanilla_RollVote vote;

} vanilla_SMSG_LOOT_ROLL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOOT_ROLL_write(WowWorldWriter* writer, const vanilla_SMSG_LOOT_ROLL* object);

typedef struct {
    uint64_t loot;
    uint8_t slot_id;
    uint64_t player;

} vanilla_CMSG_LOOT_MASTER_GIVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LOOT_MASTER_GIVE_write(WowWorldWriter* writer, const vanilla_CMSG_LOOT_MASTER_GIVE* object);

typedef struct {
    uint8_t amount_of_players;
    uint64_t* guids;

} vanilla_SMSG_LOOT_MASTER_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_LOOT_MASTER_LIST_free(vanilla_SMSG_LOOT_MASTER_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_LOOT_MASTER_LIST_write(WowWorldWriter* writer, const vanilla_SMSG_LOOT_MASTER_LIST* object);

typedef struct {
    uint32_t amount_of_reactions;
    vanilla_ForcedReaction* reactions;

} vanilla_SMSG_SET_FORCED_REACTIONS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SET_FORCED_REACTIONS_free(vanilla_SMSG_SET_FORCED_REACTIONS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SET_FORCED_REACTIONS_write(WowWorldWriter* writer, const vanilla_SMSG_SET_FORCED_REACTIONS* object);

typedef struct {
    uint64_t caster;
    uint32_t id;

} vanilla_SMSG_SPELL_FAILED_OTHER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELL_FAILED_OTHER_write(WowWorldWriter* writer, const vanilla_SMSG_SPELL_FAILED_OTHER* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_GAMEOBJECT_RESET_STATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GAMEOBJECT_RESET_STATE_write(WowWorldWriter* writer, const vanilla_SMSG_GAMEOBJECT_RESET_STATE* object);

typedef struct {
    uint64_t npc;
    uint64_t item;

} vanilla_CMSG_REPAIR_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_REPAIR_ITEM_write(WowWorldWriter* writer, const vanilla_CMSG_REPAIR_ITEM* object);

typedef struct {
    char* name;

} vanilla_SMSG_CHAT_PLAYER_NOT_FOUND;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_CHAT_PLAYER_NOT_FOUND_free(vanilla_SMSG_CHAT_PLAYER_NOT_FOUND* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CHAT_PLAYER_NOT_FOUND_write(WowWorldWriter* writer, const vanilla_SMSG_CHAT_PLAYER_NOT_FOUND* object);

typedef struct {
    uint64_t wiping_npc;

} vanilla_MSG_TALENT_WIPE_CONFIRM_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_TALENT_WIPE_CONFIRM_Client_write(WowWorldWriter* writer, const vanilla_MSG_TALENT_WIPE_CONFIRM_Client* object);

/* cmangos/vmangos/mangoszero returns guid 0 and unknown 0 when talents can not be reset
cmangos/vmangos/mangoszero casts spell 14876 when resetting */
typedef struct {
    uint64_t wiping_npc;
    uint32_t cost_in_copper;

} vanilla_MSG_TALENT_WIPE_CONFIRM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_TALENT_WIPE_CONFIRM_Server_write(WowWorldWriter* writer, const vanilla_MSG_TALENT_WIPE_CONFIRM_Server* object);

typedef struct {
    uint64_t summoner;
    vanilla_Area area;
    uint32_t auto_decline_time;

} vanilla_SMSG_SUMMON_REQUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SUMMON_REQUEST_write(WowWorldWriter* writer, const vanilla_SMSG_SUMMON_REQUEST* object);

typedef struct {
    uint64_t summoner;

} vanilla_CMSG_SUMMON_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SUMMON_RESPONSE_write(WowWorldWriter* writer, const vanilla_CMSG_SUMMON_RESPONSE* object);

typedef struct {
    uint64_t guid;
    uint64_t transport;
    all_Vector3d spline_point;
    uint32_t spline_id;
    vanilla_MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all_Vector3d position;
    vanilla_SplineFlag spline_flags;
    uint32_t duration;
    MonsterMoveSpline splines;

} vanilla_SMSG_MONSTER_MOVE_TRANSPORT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_MONSTER_MOVE_TRANSPORT_free(vanilla_SMSG_MONSTER_MOVE_TRANSPORT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MONSTER_MOVE_TRANSPORT_write(WowWorldWriter* writer, const vanilla_SMSG_MONSTER_MOVE_TRANSPORT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_BROKEN_write(WowWorldWriter* writer);

typedef struct {
    uint64_t player;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_FEATHER_FALL_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_FEATHER_FALL_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_FEATHER_FALL_Server* object);

typedef struct {
    uint64_t player;
    vanilla_MovementInfo info;

} vanilla_MSG_MOVE_WATER_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_WATER_WALK_cmsg_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_WATER_WALK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_WATER_WALK_smsg_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_WATER_WALK* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SELF_RES_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FEIGN_DEATH_RESISTED_write(WowWorldWriter* writer);

typedef struct {
    uint32_t time;

} vanilla_SMSG_DUEL_COUNTDOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DUEL_COUNTDOWN_write(WowWorldWriter* writer, const vanilla_SMSG_DUEL_COUNTDOWN* object);

typedef struct {
    char* message;

} vanilla_SMSG_AREA_TRIGGER_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_AREA_TRIGGER_MESSAGE_free(vanilla_SMSG_AREA_TRIGGER_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AREA_TRIGGER_MESSAGE_write(WowWorldWriter* writer, const vanilla_SMSG_AREA_TRIGGER_MESSAGE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TOGGLE_HELM_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_TOGGLE_CLOAK_write(WowWorldWriter* writer);

typedef struct {
    vanilla_MeetingStoneFailure reason;

} vanilla_SMSG_MEETINGSTONE_JOINFAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_MEETINGSTONE_JOINFAILED_write(WowWorldWriter* writer, const vanilla_SMSG_MEETINGSTONE_JOINFAILED* object);

typedef struct {
    bool spirit_released;

} vanilla_SMSG_PLAYER_SKINNED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PLAYER_SKINNED_write(WowWorldWriter* writer, const vanilla_SMSG_PLAYER_SKINNED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DURABILITY_DAMAGE_DEATH_write(WowWorldWriter* writer);

typedef struct {
    /* Emulators set PLAYER_FIELD_BYTES[2] to this unless it's 0. */
    uint8_t action_bar;

} vanilla_CMSG_SET_ACTIONBAR_TOGGLES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_ACTIONBAR_TOGGLES_write(WowWorldWriter* writer, const vanilla_CMSG_SET_ACTIONBAR_TOGGLES* object);

typedef struct {
    uint64_t petition;
    char* new_name;

} vanilla_MSG_PETITION_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_MSG_PETITION_RENAME_free(vanilla_MSG_PETITION_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_PETITION_RENAME_cmsg_write(WowWorldWriter* writer, const vanilla_MSG_PETITION_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_PETITION_RENAME_smsg_write(WowWorldWriter* writer, const vanilla_MSG_PETITION_RENAME* object);

typedef struct {
    vanilla_Map map;
    vanilla_Area area;
    uint16_t amount_of_states;
    vanilla_WorldState* states;

} vanilla_SMSG_INIT_WORLD_STATES;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_INIT_WORLD_STATES_free(vanilla_SMSG_INIT_WORLD_STATES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_INIT_WORLD_STATES_write(WowWorldWriter* writer, const vanilla_SMSG_INIT_WORLD_STATES* object);

typedef struct {
    vanilla_WorldState state;

} vanilla_SMSG_UPDATE_WORLD_STATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_UPDATE_WORLD_STATE_write(WowWorldWriter* writer, const vanilla_SMSG_UPDATE_WORLD_STATE* object);

typedef struct {
    uint32_t item;
    uint64_t guid;

} vanilla_CMSG_ITEM_NAME_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ITEM_NAME_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_ITEM_NAME_QUERY* object);

typedef struct {
    uint32_t item;
    char* item_name;

} vanilla_SMSG_ITEM_NAME_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_ITEM_NAME_QUERY_RESPONSE_free(vanilla_SMSG_ITEM_NAME_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ITEM_NAME_QUERY_RESPONSE_write(WowWorldWriter* writer, const vanilla_SMSG_ITEM_NAME_QUERY_RESPONSE* object);

typedef struct {
    vanilla_PetFeedback feedback;

} vanilla_SMSG_PET_ACTION_FEEDBACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_ACTION_FEEDBACK_write(WowWorldWriter* writer, const vanilla_SMSG_PET_ACTION_FEEDBACK* object);

/* Request of new name for character. This is only sent by the client if RENAME is set in the [CharacterFlags] of [SMSG_CHAR_ENUM] and the client tries to login. */
typedef struct {
    uint64_t character;
    char* new_name;

} vanilla_CMSG_CHAR_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_CHAR_RENAME_free(vanilla_CMSG_CHAR_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_CHAR_RENAME_write(WowWorldWriter* writer, const vanilla_CMSG_CHAR_RENAME* object);

/* Response to [CMSG_CHAR_RENAME]. */
typedef struct {
    vanilla_WorldResult result;
    uint64_t character;
    char* new_name;

} vanilla_SMSG_CHAR_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_CHAR_RENAME_free(vanilla_SMSG_CHAR_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CHAR_RENAME_write(WowWorldWriter* writer, const vanilla_SMSG_CHAR_RENAME* object);

typedef struct {
    vanilla_MovementInfo info;
    uint32_t movement_counter;
    uint32_t unknown1;

} vanilla_CMSG_MOVE_SPLINE_DONE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MOVE_SPLINE_DONE_write(WowWorldWriter* writer, const vanilla_CMSG_MOVE_SPLINE_DONE* object);

typedef struct {
    vanilla_MovementInfo info;

} vanilla_CMSG_MOVE_FALL_RESET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MOVE_FALL_RESET_write(WowWorldWriter* writer, const vanilla_CMSG_MOVE_FALL_RESET* object);

typedef struct {
    /* All emulators across all versions set to 0 */
    uint32_t unknown;

} vanilla_SMSG_INSTANCE_SAVE_CREATED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_INSTANCE_SAVE_CREATED_write(WowWorldWriter* writer, const vanilla_SMSG_INSTANCE_SAVE_CREATED* object);

typedef struct {
    uint32_t amount_of_raid_infos;
    vanilla_RaidInfo* raid_infos;

} vanilla_SMSG_RAID_INSTANCE_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_RAID_INSTANCE_INFO_free(vanilla_SMSG_RAID_INSTANCE_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_RAID_INSTANCE_INFO_write(WowWorldWriter* writer, const vanilla_SMSG_RAID_INSTANCE_INFO* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_REQUEST_RAID_INFO_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    uint32_t lag;

} vanilla_CMSG_MOVE_TIME_SKIPPED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MOVE_TIME_SKIPPED_write(WowWorldWriter* writer, const vanilla_CMSG_MOVE_TIME_SKIPPED* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla_MovementInfo info;
    uint32_t apply;

} vanilla_CMSG_MOVE_FEATHER_FALL_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MOVE_FEATHER_FALL_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_MOVE_FEATHER_FALL_ACK* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    vanilla_MovementInfo info;
    uint32_t apply;

} vanilla_CMSG_MOVE_WATER_WALK_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MOVE_WATER_WALK_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_MOVE_WATER_WALK_ACK* object);

typedef struct {
    uint64_t old_mover;
    vanilla_MovementInfo info;

} vanilla_CMSG_MOVE_NOT_ACTIVE_MOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_MOVE_NOT_ACTIVE_MOVER_write(WowWorldWriter* writer, const vanilla_CMSG_MOVE_NOT_ACTIVE_MOVER* object);

typedef struct {
    uint32_t sound_id;

} vanilla_SMSG_PLAY_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PLAY_SOUND_write(WowWorldWriter* writer, const vanilla_SMSG_PLAY_SOUND* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BATTLEFIELD_STATUS_write(WowWorldWriter* writer);

typedef struct {
    /* vmangos: players can be in 3 queues at the same time (0..2) */
    uint32_t queue_slot;
    vanilla_Map map;
    vanilla_BattlegroundBracket bracket;
    uint32_t client_instance_id;
    vanilla_StatusId status_id;
    uint32_t average_wait_time_in_ms;
    uint32_t time_in_queue_in_ms;
    uint32_t time_to_remove_in_queue_in_ms;
    uint32_t time_to_bg_autoleave_in_ms;
    uint32_t time_to_bg_start_in_ms;

} vanilla_SMSG_BATTLEFIELD_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_BATTLEFIELD_STATUS_write(WowWorldWriter* writer, const vanilla_SMSG_BATTLEFIELD_STATUS* object);

typedef struct {
    vanilla_Map map;
    vanilla_BattlefieldPortAction action;

} vanilla_CMSG_BATTLEFIELD_PORT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BATTLEFIELD_PORT_write(WowWorldWriter* writer, const vanilla_CMSG_BATTLEFIELD_PORT* object);

typedef struct {
    uint64_t guid;

} vanilla_MSG_INSPECT_HONOR_STATS_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_INSPECT_HONOR_STATS_Client_write(WowWorldWriter* writer, const vanilla_MSG_INSPECT_HONOR_STATS_Client* object);

typedef struct {
    uint64_t guid;
    vanilla_PvpRank highest_rank;
    uint32_t today_honorable_and_dishonorable;
    uint16_t yesterday_honorable;
    /* vmangos: Unknown (deprecated, yesterday dishonourable?) */
    uint16_t unknown1;
    uint16_t last_week_honorable;
    /* vmangos: Unknown (deprecated, last week dishonourable?) */
    uint16_t unknown2;
    uint16_t this_week_honorable;
    /* vmangos: Unknown (deprecated, this week dishonourable?) */
    uint16_t unknown3;
    uint32_t lifetime_honorable;
    uint32_t lifetime_dishonorable;
    uint32_t yesterday_honor;
    uint32_t last_week_honor;
    uint32_t this_week_honor;
    vanilla_PvpRank last_week_standing;
    uint8_t rank_progress_bar;

} vanilla_MSG_INSPECT_HONOR_STATS_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_INSPECT_HONOR_STATS_Server_write(WowWorldWriter* writer, const vanilla_MSG_INSPECT_HONOR_STATS_Server* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_BATTLEMASTER_HELLO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BATTLEMASTER_HELLO_write(WowWorldWriter* writer, const vanilla_CMSG_BATTLEMASTER_HELLO* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} vanilla_SMSG_FORCE_WALK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FORCE_WALK_SPEED_CHANGE_write(WowWorldWriter* writer, const vanilla_SMSG_FORCE_WALK_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    vanilla_MovementInfo info;
    float new_speed;

} vanilla_CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_FORCE_WALK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_FORCE_WALK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} vanilla_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE_write(WowWorldWriter* writer, const vanilla_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    vanilla_MovementInfo info;
    float new_speed;

} vanilla_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} vanilla_SMSG_FORCE_TURN_RATE_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_FORCE_TURN_RATE_CHANGE_write(WowWorldWriter* writer, const vanilla_SMSG_FORCE_TURN_RATE_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    vanilla_MovementInfo info;
    float new_speed;

} vanilla_CMSG_FORCE_TURN_RATE_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_FORCE_TURN_RATE_CHANGE_ACK_write(WowWorldWriter* writer, const vanilla_CMSG_FORCE_TURN_RATE_CHANGE_ACK* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_PVP_LOG_DATA_Client_write(WowWorldWriter* writer);

typedef struct {
    vanilla_BattlegroundEndStatus status;
    vanilla_BattlegroundWinner winner;
    /* vmangos: Client has a hard limit to 80. If we go beyond (but it should not happen ?!), WoW Error (happening !) */
    uint32_t amount_of_players;
    vanilla_BattlegroundPlayer* players;

} vanilla_MSG_PVP_LOG_DATA_Server;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_MSG_PVP_LOG_DATA_Server_free(vanilla_MSG_PVP_LOG_DATA_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_PVP_LOG_DATA_Server_write(WowWorldWriter* writer, const vanilla_MSG_PVP_LOG_DATA_Server* object);

typedef struct {
    vanilla_Map map;

} vanilla_CMSG_LEAVE_BATTLEFIELD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_LEAVE_BATTLEFIELD_write(WowWorldWriter* writer, const vanilla_CMSG_LEAVE_BATTLEFIELD* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_AREA_SPIRIT_HEALER_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AREA_SPIRIT_HEALER_QUERY_write(WowWorldWriter* writer, const vanilla_CMSG_AREA_SPIRIT_HEALER_QUERY* object);

typedef struct {
    uint64_t guid;

} vanilla_CMSG_AREA_SPIRIT_HEALER_QUEUE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_AREA_SPIRIT_HEALER_QUEUE_write(WowWorldWriter* writer, const vanilla_CMSG_AREA_SPIRIT_HEALER_QUEUE* object);

typedef struct {
    uint64_t guid;
    uint32_t next_resurrect_time;

} vanilla_SMSG_AREA_SPIRIT_HEALER_TIME;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_AREA_SPIRIT_HEALER_TIME_write(WowWorldWriter* writer, const vanilla_SMSG_AREA_SPIRIT_HEALER_TIME* object);

typedef struct {
    uint32_t amount_of_encrypted_data;
    uint8_t* encrypted_data;

} vanilla_SMSG_WARDEN_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_WARDEN_DATA_free(vanilla_SMSG_WARDEN_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_WARDEN_DATA_write(WowWorldWriter* writer, const vanilla_SMSG_WARDEN_DATA* object);

typedef struct {
    uint32_t amount_of_encrypted_data;
    uint8_t* encrypted_data;

} vanilla_CMSG_WARDEN_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_WARDEN_DATA_free(vanilla_CMSG_WARDEN_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_WARDEN_DATA_write(WowWorldWriter* writer, const vanilla_CMSG_WARDEN_DATA* object);

typedef struct {
    vanilla_BgTypeId id;

} vanilla_SMSG_GROUP_JOINED_BATTLEGROUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GROUP_JOINED_BATTLEGROUND_write(WowWorldWriter* writer, const vanilla_SMSG_GROUP_JOINED_BATTLEGROUND* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_BATTLEGROUND_PLAYER_POSITIONS_Client_write(WowWorldWriter* writer);

typedef struct {
    uint32_t amount_of_teammates;
    vanilla_BattlegroundPlayerPosition* teammates;
    /* vmangos only sends the carrier of the player team. No emu ever sends more than 2. */
    uint8_t amount_of_carriers;
    vanilla_BattlegroundPlayerPosition* carriers;

} vanilla_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_free(vanilla_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_write(WowWorldWriter* writer, const vanilla_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server* object);

typedef struct {
    uint64_t pet;

} vanilla_CMSG_PET_STOP_ATTACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PET_STOP_ATTACK_write(WowWorldWriter* writer, const vanilla_CMSG_PET_STOP_ATTACK* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_BINDER_CONFIRM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_BINDER_CONFIRM_write(WowWorldWriter* writer, const vanilla_SMSG_BINDER_CONFIRM* object);

typedef struct {
    uint64_t player;

} vanilla_SMSG_BATTLEGROUND_PLAYER_JOINED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_BATTLEGROUND_PLAYER_JOINED_write(WowWorldWriter* writer, const vanilla_SMSG_BATTLEGROUND_PLAYER_JOINED* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_BATTLEGROUND_PLAYER_LEFT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_BATTLEGROUND_PLAYER_LEFT_write(WowWorldWriter* writer, const vanilla_SMSG_BATTLEGROUND_PLAYER_LEFT* object);

typedef struct {
    /* vmangos: battlemaster guid, or player guid if joining queue from BG portal */
    uint64_t guid;
    vanilla_Map map;
    /* vmangos: 0 if First Available selected */
    uint32_t instance_id;
    bool join_as_group;

} vanilla_CMSG_BATTLEMASTER_JOIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_BATTLEMASTER_JOIN_write(WowWorldWriter* writer, const vanilla_CMSG_BATTLEMASTER_JOIN* object);

typedef struct {
    uint32_t amount_of_addons;
    vanilla_Addon* addons;

} vanilla_SMSG_ADDON_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_ADDON_INFO_free(vanilla_SMSG_ADDON_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_ADDON_INFO_write(WowWorldWriter* writer, const vanilla_SMSG_ADDON_INFO* object);

typedef struct {
    uint64_t pet;

} vanilla_CMSG_PET_UNLEARN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PET_UNLEARN_write(WowWorldWriter* writer, const vanilla_CMSG_PET_UNLEARN* object);

typedef struct {
    uint64_t pet;
    uint32_t talent_reset_cost;

} vanilla_SMSG_PET_UNLEARN_CONFIRM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_UNLEARN_CONFIRM_write(WowWorldWriter* writer, const vanilla_SMSG_PET_UNLEARN_CONFIRM* object);

typedef struct {
    uint64_t player;
    vanilla_GroupUpdateFlags mask;
    vanilla_GroupMemberOnlineStatus status;
    uint16_t current_health;
    uint16_t max_health;
    vanilla_Power power;
    uint16_t current_power;
    uint16_t max_power;
    uint16_t level;
    vanilla_Area area;
    /* cmangos: float cast to u16 */
    uint16_t position_x;
    /* cmangos: float cast to u16 */
    uint16_t position_y;
    /* cmangos: In all checked pre-2.x data of packets included only positive auras */
    vanilla_AuraMask auras;
    uint64_t pet;
    char* pet_name;
    uint16_t pet_display_id;
    uint16_t pet_current_health;
    uint16_t pet_max_health;
    vanilla_Power pet_power_type;
    uint16_t pet_current_power;
    uint16_t pet_max_power;
    vanilla_AuraMask pet_auras;

} vanilla_SMSG_PARTY_MEMBER_STATS_FULL;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_PARTY_MEMBER_STATS_FULL_free(vanilla_SMSG_PARTY_MEMBER_STATS_FULL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PARTY_MEMBER_STATS_FULL_write(WowWorldWriter* writer, const vanilla_SMSG_PARTY_MEMBER_STATS_FULL* object);

typedef struct {
    uint64_t guid;
    uint32_t id;
    bool autocast_enabled;

} vanilla_CMSG_PET_SPELL_AUTOCAST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_PET_SPELL_AUTOCAST_write(WowWorldWriter* writer, const vanilla_CMSG_PET_SPELL_AUTOCAST* object);

typedef struct {
    vanilla_WeatherType weather_type;
    float grade;
    uint32_t sound_id;
    vanilla_WeatherChangeType change;

} vanilla_SMSG_WEATHER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_WEATHER_write(WowWorldWriter* writer, const vanilla_SMSG_WEATHER* object);

typedef struct {
    vanilla_RaidInstanceMessage message_type;
    vanilla_Map map;
    uint32_t time_left;

} vanilla_SMSG_RAID_INSTANCE_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_RAID_INSTANCE_MESSAGE_write(WowWorldWriter* writer, const vanilla_SMSG_RAID_INSTANCE_MESSAGE* object);

typedef struct {
    uint32_t amount_of_moves;
    vanilla_CompressedMove* moves;

} vanilla_SMSG_COMPRESSED_MOVES;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_COMPRESSED_MOVES_free(vanilla_SMSG_COMPRESSED_MOVES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_COMPRESSED_MOVES_write(WowWorldWriter* writer, const vanilla_SMSG_COMPRESSED_MOVES* object);

typedef struct {
    char* guild_info;

} vanilla_CMSG_GUILD_INFO_TEXT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GUILD_INFO_TEXT_free(vanilla_CMSG_GUILD_INFO_TEXT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GUILD_INFO_TEXT_write(WowWorldWriter* writer, const vanilla_CMSG_GUILD_INFO_TEXT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_CHAT_RESTRICTED_write(WowWorldWriter* writer);

/* Informs the client that the run speed of a unit has changed.
Mangos sends this to third parties that aren't having their speed changed and [SMSG_FORCE_RUN_SPEED_CHANGE] to the client that has their run speed changed. */
typedef struct {
    uint64_t guid;
    float speed;

} vanilla_SMSG_SPLINE_SET_RUN_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_SET_RUN_SPEED_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_SET_RUN_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} vanilla_SMSG_SPLINE_SET_RUN_BACK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_SET_RUN_BACK_SPEED_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_SET_RUN_BACK_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} vanilla_SMSG_SPLINE_SET_SWIM_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_SET_SWIM_SPEED_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_SET_SWIM_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} vanilla_SMSG_SPLINE_SET_WALK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_SET_WALK_SPEED_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_SET_WALK_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} vanilla_SMSG_SPLINE_SET_SWIM_BACK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_SET_SWIM_BACK_SPEED_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_SET_SWIM_BACK_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} vanilla_SMSG_SPLINE_SET_TURN_RATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_SET_TURN_RATE_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_SET_TURN_RATE* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_UNROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_UNROOT_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_UNROOT* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_FEATHER_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_FEATHER_FALL_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_FEATHER_FALL* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_NORMAL_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_NORMAL_FALL_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_NORMAL_FALL* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_SET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_SET_HOVER_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_SET_HOVER* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_UNSET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_UNSET_HOVER_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_UNSET_HOVER* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_WATER_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_WATER_WALK_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_WATER_WALK* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_LAND_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_LAND_WALK_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_LAND_WALK* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_START_SWIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_START_SWIM_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_START_SWIM* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_STOP_SWIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_STOP_SWIM_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_STOP_SWIM* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_SET_RUN_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_SET_RUN_MODE_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_SET_RUN_MODE* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_SET_WALK_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_SET_WALK_MODE_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_SET_WALK_MODE* object);

typedef struct {
    uint64_t guid;
    /* vmangos/mangosone: Never used. */
    uint32_t total_cost;
    uint32_t node_count;
    uint32_t* nodes;

} vanilla_CMSG_ACTIVATETAXIEXPRESS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_ACTIVATETAXIEXPRESS_free(vanilla_CMSG_ACTIVATETAXIEXPRESS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_ACTIVATETAXIEXPRESS_write(WowWorldWriter* writer, const vanilla_CMSG_ACTIVATETAXIEXPRESS* object);

typedef struct {
    vanilla_Faction faction;
    bool inactive;

} vanilla_CMSG_SET_FACTION_INACTIVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_FACTION_INACTIVE_write(WowWorldWriter* writer, const vanilla_CMSG_SET_FACTION_INACTIVE* object);

typedef struct {
    vanilla_Faction faction;

} vanilla_CMSG_SET_WATCHED_FACTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_SET_WATCHED_FACTION_write(WowWorldWriter* writer, const vanilla_CMSG_SET_WATCHED_FACTION* object);

typedef struct {
    uint64_t player;
    uint32_t time_skipped;

} vanilla_MSG_MOVE_TIME_SKIPPED_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_MOVE_TIME_SKIPPED_Server_write(WowWorldWriter* writer, const vanilla_MSG_MOVE_TIME_SKIPPED_Server* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_SPLINE_MOVE_ROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPLINE_MOVE_ROOT_write(WowWorldWriter* writer, const vanilla_SMSG_SPLINE_MOVE_ROOT* object);

typedef struct {
    uint64_t guid;

} vanilla_SMSG_INVALIDATE_PLAYER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_INVALIDATE_PLAYER_write(WowWorldWriter* writer, const vanilla_SMSG_INVALIDATE_PLAYER* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_RESET_INSTANCES_write(WowWorldWriter* writer);

typedef struct {
    vanilla_Map map;

} vanilla_SMSG_INSTANCE_RESET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_INSTANCE_RESET_write(WowWorldWriter* writer, const vanilla_SMSG_INSTANCE_RESET* object);

typedef struct {
    vanilla_InstanceResetFailedReason reason;
    vanilla_Map map;

} vanilla_SMSG_INSTANCE_RESET_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_INSTANCE_RESET_FAILED_write(WowWorldWriter* writer, const vanilla_SMSG_INSTANCE_RESET_FAILED* object);

typedef struct {
    vanilla_Map map;

} vanilla_SMSG_UPDATE_LAST_INSTANCE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_UPDATE_LAST_INSTANCE_write(WowWorldWriter* writer, const vanilla_SMSG_UPDATE_LAST_INSTANCE* object);

typedef struct {
    vanilla_RaidTargetIndex target_index;
    uint64_t target;

} vanilla_MSG_RAID_TARGET_UPDATE_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_RAID_TARGET_UPDATE_Client_write(WowWorldWriter* writer, const vanilla_MSG_RAID_TARGET_UPDATE_Client* object);

typedef struct {
    vanilla_RaidTargetUpdateType update_type;
    vanilla_RaidTargetUpdate raid_targets[8];
    vanilla_RaidTargetUpdate raid_target;

} vanilla_MSG_RAID_TARGET_UPDATE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_RAID_TARGET_UPDATE_Server_write(WowWorldWriter* writer, const vanilla_MSG_RAID_TARGET_UPDATE_Server* object);

typedef struct {
    uint8_t state;
} vanilla_MSG_RAID_READY_CHECK_Client_answer;

typedef struct {

    vanilla_MSG_RAID_READY_CHECK_Client_answer* answer;
} vanilla_MSG_RAID_READY_CHECK_Client;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_MSG_RAID_READY_CHECK_Client_free(vanilla_MSG_RAID_READY_CHECK_Client* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_RAID_READY_CHECK_Client_write(WowWorldWriter* writer, const vanilla_MSG_RAID_READY_CHECK_Client* object);

typedef struct {
    uint64_t guid;
    uint8_t state;
} vanilla_MSG_RAID_READY_CHECK_Server_state_check;

typedef struct {

    vanilla_MSG_RAID_READY_CHECK_Server_state_check* state_check;
} vanilla_MSG_RAID_READY_CHECK_Server;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_MSG_RAID_READY_CHECK_Server_free(vanilla_MSG_RAID_READY_CHECK_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_MSG_RAID_READY_CHECK_Server_write(WowWorldWriter* writer, const vanilla_MSG_RAID_READY_CHECK_Server* object);

typedef struct {
    uint64_t guid;
    vanilla_PetTalkReason reason;

} vanilla_SMSG_PET_ACTION_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_ACTION_SOUND_write(WowWorldWriter* writer, const vanilla_SMSG_PET_ACTION_SOUND* object);

/* Not implemented in any Wrath emulators. */
typedef struct {
    uint32_t sound_id;
    all_Vector3d position;

} vanilla_SMSG_PET_DISMISS_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_PET_DISMISS_SOUND_write(WowWorldWriter* writer, const vanilla_SMSG_PET_DISMISS_SOUND* object);

typedef struct {
    vanilla_GmTicketStatusResponse response;

} vanilla_SMSG_GM_TICKET_STATUS_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_GM_TICKET_STATUS_UPDATE_write(WowWorldWriter* writer, const vanilla_SMSG_GM_TICKET_STATUS_UPDATE* object);

typedef struct {
    /* cmangos: Survey ID: found in GMSurveySurveys.dbc */
    uint32_t survey_id;
    vanilla_GmSurveyQuestion questions[10];
    /* cmangos: Answer comment: Unused in stock UI, can be only set by calling Lua function
cmangos: Answer comment max sizes in bytes: Vanilla - 8106:8110, TBC - 11459:11463, Wrath - 582:586 */
    char* answer_comment;

} vanilla_CMSG_GMSURVEY_SUBMIT;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_CMSG_GMSURVEY_SUBMIT_free(vanilla_CMSG_GMSURVEY_SUBMIT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_CMSG_GMSURVEY_SUBMIT_write(WowWorldWriter* writer, const vanilla_CMSG_GMSURVEY_SUBMIT* object);

typedef struct {
    bool player_is_saved_to_a_raid;

} vanilla_SMSG_UPDATE_INSTANCE_OWNERSHIP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_UPDATE_INSTANCE_OWNERSHIP_write(WowWorldWriter* writer, const vanilla_SMSG_UPDATE_INSTANCE_OWNERSHIP* object);

typedef struct {
    uint64_t target;
    uint32_t spell;

} vanilla_SMSG_SPELLINSTAKILLLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELLINSTAKILLLOG_write(WowWorldWriter* writer, const vanilla_SMSG_SPELLINSTAKILLLOG* object);

typedef struct {
    uint64_t caster;
    uint32_t spell;
    uint32_t amount_of_targets;
    uint64_t* targets;

} vanilla_SMSG_SPELL_UPDATE_CHAIN_TARGETS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_SPELL_UPDATE_CHAIN_TARGETS_free(vanilla_SMSG_SPELL_UPDATE_CHAIN_TARGETS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_SPELL_UPDATE_CHAIN_TARGETS_write(WowWorldWriter* writer, const vanilla_SMSG_SPELL_UPDATE_CHAIN_TARGETS* object);

/* Not implemented in Wrath or TBC emus. Only implemented in cmangos. */
typedef struct {
    uint32_t amount_of_records;
    char** records;

} vanilla_SMSG_EXPECTED_SPAM_RECORDS;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_EXPECTED_SPAM_RECORDS_free(vanilla_SMSG_EXPECTED_SPAM_RECORDS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_EXPECTED_SPAM_RECORDS_write(WowWorldWriter* writer, const vanilla_SMSG_EXPECTED_SPAM_RECORDS* object);

typedef struct {
    vanilla_Area area;
    char* message;

} vanilla_SMSG_DEFENSE_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void vanilla_SMSG_DEFENSE_MESSAGE_free(vanilla_SMSG_DEFENSE_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_SMSG_DEFENSE_MESSAGE_write(WowWorldWriter* writer, const vanilla_SMSG_DEFENSE_MESSAGE* object);

typedef enum {
    V_CMSG_BOOTME = 1,
    V_CMSG_DBLOOKUP = 2,
    V_CMSG_WORLD_TELEPORT = 8,
    V_CMSG_TELEPORT_TO_UNIT = 9,
    V_CMSG_CHAR_CREATE = 54,
    V_CMSG_CHAR_ENUM = 55,
    V_CMSG_CHAR_DELETE = 56,
    V_SMSG_CHAR_CREATE = 58,
    V_SMSG_CHAR_ENUM = 59,
    V_SMSG_CHAR_DELETE = 60,
    V_CMSG_PLAYER_LOGIN = 61,
    V_SMSG_NEW_WORLD = 62,
    V_SMSG_TRANSFER_PENDING = 63,
    V_SMSG_TRANSFER_ABORTED = 64,
    V_SMSG_CHARACTER_LOGIN_FAILED = 65,
    V_SMSG_LOGIN_SETTIMESPEED = 66,
    V_CMSG_PLAYER_LOGOUT = 74,
    V_CMSG_LOGOUT_REQUEST = 75,
    V_SMSG_LOGOUT_RESPONSE = 76,
    V_SMSG_LOGOUT_COMPLETE = 77,
    V_CMSG_LOGOUT_CANCEL = 78,
    V_SMSG_LOGOUT_CANCEL_ACK = 79,
    V_CMSG_NAME_QUERY = 80,
    V_SMSG_NAME_QUERY_RESPONSE = 81,
    V_CMSG_PET_NAME_QUERY = 82,
    V_SMSG_PET_NAME_QUERY_RESPONSE = 83,
    V_CMSG_GUILD_QUERY = 84,
    V_SMSG_GUILD_QUERY_RESPONSE = 85,
    V_CMSG_ITEM_QUERY_SINGLE = 86,
    V_SMSG_ITEM_QUERY_SINGLE_RESPONSE = 88,
    V_CMSG_PAGE_TEXT_QUERY = 90,
    V_SMSG_PAGE_TEXT_QUERY_RESPONSE = 91,
    V_CMSG_QUEST_QUERY = 92,
    V_SMSG_QUEST_QUERY_RESPONSE = 93,
    V_CMSG_GAMEOBJECT_QUERY = 94,
    V_SMSG_GAMEOBJECT_QUERY_RESPONSE = 95,
    V_CMSG_CREATURE_QUERY = 96,
    V_SMSG_CREATURE_QUERY_RESPONSE = 97,
    V_CMSG_WHO = 98,
    V_SMSG_WHO = 99,
    V_CMSG_WHOIS = 100,
    V_SMSG_WHOIS = 101,
    V_CMSG_FRIEND_LIST = 102,
    V_SMSG_FRIEND_LIST = 103,
    V_SMSG_FRIEND_STATUS = 104,
    V_CMSG_ADD_FRIEND = 105,
    V_CMSG_DEL_FRIEND = 106,
    V_SMSG_IGNORE_LIST = 107,
    V_CMSG_ADD_IGNORE = 108,
    V_CMSG_DEL_IGNORE = 109,
    V_CMSG_GROUP_INVITE = 110,
    V_SMSG_GROUP_INVITE = 111,
    V_CMSG_GROUP_ACCEPT = 114,
    V_CMSG_GROUP_DECLINE = 115,
    V_SMSG_GROUP_DECLINE = 116,
    V_CMSG_GROUP_UNINVITE = 117,
    V_CMSG_GROUP_UNINVITE_GUID = 118,
    V_SMSG_GROUP_UNINVITE = 119,
    V_CMSG_GROUP_SET_LEADER = 120,
    V_SMSG_GROUP_SET_LEADER = 121,
    V_CMSG_LOOT_METHOD = 122,
    V_CMSG_GROUP_DISBAND = 123,
    V_SMSG_GROUP_DESTROYED = 124,
    V_SMSG_GROUP_LIST = 125,
    V_SMSG_PARTY_MEMBER_STATS = 126,
    V_SMSG_PARTY_COMMAND_RESULT = 127,
    V_CMSG_GUILD_CREATE = 129,
    V_CMSG_GUILD_INVITE = 130,
    V_SMSG_GUILD_INVITE = 131,
    V_CMSG_GUILD_ACCEPT = 132,
    V_CMSG_GUILD_DECLINE = 133,
    V_CMSG_GUILD_INFO = 135,
    V_SMSG_GUILD_INFO = 136,
    V_CMSG_GUILD_ROSTER = 137,
    V_SMSG_GUILD_ROSTER = 138,
    V_CMSG_GUILD_PROMOTE = 139,
    V_CMSG_GUILD_DEMOTE = 140,
    V_CMSG_GUILD_LEAVE = 141,
    V_CMSG_GUILD_REMOVE = 142,
    V_CMSG_GUILD_DISBAND = 143,
    V_CMSG_GUILD_LEADER = 144,
    V_CMSG_GUILD_MOTD = 145,
    V_SMSG_GUILD_EVENT = 146,
    V_SMSG_GUILD_COMMAND_RESULT = 147,
    V_CMSG_MESSAGECHAT = 149,
    V_SMSG_MESSAGECHAT = 150,
    V_CMSG_JOIN_CHANNEL = 151,
    V_CMSG_LEAVE_CHANNEL = 152,
    V_SMSG_CHANNEL_NOTIFY = 153,
    V_CMSG_CHANNEL_LIST = 154,
    V_SMSG_CHANNEL_LIST = 155,
    V_CMSG_CHANNEL_PASSWORD = 156,
    V_CMSG_CHANNEL_SET_OWNER = 157,
    V_CMSG_CHANNEL_OWNER = 158,
    V_CMSG_CHANNEL_MODERATOR = 159,
    V_CMSG_CHANNEL_UNMODERATOR = 160,
    V_CMSG_CHANNEL_MUTE = 161,
    V_CMSG_CHANNEL_UNMUTE = 162,
    V_CMSG_CHANNEL_INVITE = 163,
    V_CMSG_CHANNEL_KICK = 164,
    V_CMSG_CHANNEL_BAN = 165,
    V_CMSG_CHANNEL_UNBAN = 166,
    V_CMSG_CHANNEL_ANNOUNCEMENTS = 167,
    V_CMSG_CHANNEL_MODERATE = 168,
    V_SMSG_UPDATE_OBJECT = 169,
    V_SMSG_DESTROY_OBJECT = 170,
    V_CMSG_USE_ITEM = 171,
    V_CMSG_OPEN_ITEM = 172,
    V_CMSG_READ_ITEM = 173,
    V_SMSG_READ_ITEM_OK = 174,
    V_SMSG_READ_ITEM_FAILED = 175,
    V_SMSG_ITEM_COOLDOWN = 176,
    V_CMSG_GAMEOBJ_USE = 177,
    V_SMSG_GAMEOBJECT_CUSTOM_ANIM = 179,
    V_CMSG_AREATRIGGER = 180,
    V_MSG_MOVE_START_FORWARD = 181,
    V_MSG_MOVE_START_BACKWARD = 182,
    V_MSG_MOVE_STOP = 183,
    V_MSG_MOVE_START_STRAFE_LEFT = 184,
    V_MSG_MOVE_START_STRAFE_RIGHT = 185,
    V_MSG_MOVE_STOP_STRAFE = 186,
    V_MSG_MOVE_JUMP = 187,
    V_MSG_MOVE_START_TURN_LEFT = 188,
    V_MSG_MOVE_START_TURN_RIGHT = 189,
    V_MSG_MOVE_STOP_TURN = 190,
    V_MSG_MOVE_START_PITCH_UP = 191,
    V_MSG_MOVE_START_PITCH_DOWN = 192,
    V_MSG_MOVE_STOP_PITCH = 193,
    V_MSG_MOVE_SET_RUN_MODE = 194,
    V_MSG_MOVE_SET_WALK_MODE = 195,
    V_MSG_MOVE_TELEPORT_ACK = 199,
    V_MSG_MOVE_FALL_LAND = 201,
    V_MSG_MOVE_START_SWIM = 202,
    V_MSG_MOVE_STOP_SWIM = 203,
    V_MSG_MOVE_SET_FACING = 218,
    V_MSG_MOVE_SET_PITCH = 219,
    V_MSG_MOVE_WORLDPORT_ACK = 220,
    V_SMSG_MONSTER_MOVE = 221,
    V_SMSG_MOVE_WATER_WALK = 222,
    V_SMSG_MOVE_LAND_WALK = 223,
    V_CMSG_MOVE_SET_RAW_POSITION = 225,
    V_SMSG_FORCE_RUN_SPEED_CHANGE = 226,
    V_CMSG_FORCE_RUN_SPEED_CHANGE_ACK = 227,
    V_SMSG_FORCE_RUN_BACK_SPEED_CHANGE = 228,
    V_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK = 229,
    V_SMSG_FORCE_SWIM_SPEED_CHANGE = 230,
    V_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK = 231,
    V_SMSG_FORCE_MOVE_ROOT = 232,
    V_CMSG_FORCE_MOVE_ROOT_ACK = 233,
    V_SMSG_FORCE_MOVE_UNROOT = 234,
    V_CMSG_FORCE_MOVE_UNROOT_ACK = 235,
    V_MSG_MOVE_HEARTBEAT = 238,
    V_SMSG_MOVE_KNOCK_BACK = 239,
    V_CMSG_MOVE_KNOCK_BACK_ACK = 240,
    V_SMSG_MOVE_FEATHER_FALL = 242,
    V_SMSG_MOVE_NORMAL_FALL = 243,
    V_SMSG_MOVE_SET_HOVER = 244,
    V_SMSG_MOVE_UNSET_HOVER = 245,
    V_CMSG_MOVE_HOVER_ACK = 246,
    V_SMSG_TRIGGER_CINEMATIC = 250,
    V_CMSG_NEXT_CINEMATIC_CAMERA = 251,
    V_CMSG_COMPLETE_CINEMATIC = 252,
    V_SMSG_TUTORIAL_FLAGS = 253,
    V_CMSG_TUTORIAL_FLAG = 254,
    V_CMSG_TUTORIAL_CLEAR = 255,
    V_CMSG_TUTORIAL_RESET = 256,
    V_CMSG_STANDSTATECHANGE = 257,
    V_CMSG_EMOTE = 258,
    V_SMSG_EMOTE = 259,
    V_CMSG_TEXT_EMOTE = 260,
    V_SMSG_TEXT_EMOTE = 261,
    V_CMSG_AUTOSTORE_LOOT_ITEM = 264,
    V_CMSG_AUTOEQUIP_ITEM = 266,
    V_CMSG_AUTOSTORE_BAG_ITEM = 267,
    V_CMSG_SWAP_ITEM = 268,
    V_CMSG_SWAP_INV_ITEM = 269,
    V_CMSG_SPLIT_ITEM = 270,
    V_CMSG_AUTOEQUIP_ITEM_SLOT = 271,
    V_CMSG_DESTROYITEM = 273,
    V_SMSG_INVENTORY_CHANGE_FAILURE = 274,
    V_SMSG_OPEN_CONTAINER = 275,
    V_CMSG_INSPECT = 276,
    V_SMSG_INSPECT = 277,
    V_CMSG_INITIATE_TRADE = 278,
    V_CMSG_BEGIN_TRADE = 279,
    V_CMSG_BUSY_TRADE = 280,
    V_CMSG_IGNORE_TRADE = 281,
    V_CMSG_ACCEPT_TRADE = 282,
    V_CMSG_UNACCEPT_TRADE = 283,
    V_CMSG_CANCEL_TRADE = 284,
    V_CMSG_SET_TRADE_ITEM = 285,
    V_CMSG_CLEAR_TRADE_ITEM = 286,
    V_CMSG_SET_TRADE_GOLD = 287,
    V_SMSG_TRADE_STATUS = 288,
    V_SMSG_TRADE_STATUS_EXTENDED = 289,
    V_SMSG_INITIALIZE_FACTIONS = 290,
    V_SMSG_SET_FACTION_VISIBLE = 291,
    V_SMSG_SET_FACTION_STANDING = 292,
    V_CMSG_SET_FACTION_ATWAR = 293,
    V_SMSG_SET_PROFICIENCY = 295,
    V_CMSG_SET_ACTION_BUTTON = 296,
    V_SMSG_ACTION_BUTTONS = 297,
    V_SMSG_INITIAL_SPELLS = 298,
    V_SMSG_LEARNED_SPELL = 299,
    V_SMSG_SUPERCEDED_SPELL = 300,
    V_CMSG_CAST_SPELL = 302,
    V_CMSG_CANCEL_CAST = 303,
    V_SMSG_CAST_RESULT = 304,
    V_SMSG_SPELL_START = 305,
    V_SMSG_SPELL_GO = 306,
    V_SMSG_SPELL_FAILURE = 307,
    V_SMSG_SPELL_COOLDOWN = 308,
    V_SMSG_COOLDOWN_EVENT = 309,
    V_CMSG_CANCEL_AURA = 310,
    V_SMSG_UPDATE_AURA_DURATION = 311,
    V_SMSG_PET_CAST_FAILED = 312,
    V_MSG_CHANNEL_START = 313,
    V_MSG_CHANNEL_UPDATE = 314,
    V_CMSG_CANCEL_CHANNELLING = 315,
    V_SMSG_AI_REACTION = 316,
    V_CMSG_SET_SELECTION = 317,
    V_CMSG_SET_TARGET_OBSOLETE = 318,
    V_CMSG_ATTACKSWING = 321,
    V_CMSG_ATTACKSTOP = 322,
    V_SMSG_ATTACKSTART = 323,
    V_SMSG_ATTACKSTOP = 324,
    V_SMSG_ATTACKSWING_NOTINRANGE = 325,
    V_SMSG_ATTACKSWING_BADFACING = 326,
    V_SMSG_ATTACKSWING_NOTSTANDING = 327,
    V_SMSG_ATTACKSWING_DEADTARGET = 328,
    V_SMSG_ATTACKSWING_CANT_ATTACK = 329,
    V_SMSG_ATTACKERSTATEUPDATE = 330,
    V_SMSG_CANCEL_COMBAT = 334,
    V_SMSG_SPELLHEALLOG = 336,
    V_SMSG_SPELLENERGIZELOG = 337,
    V_SMSG_BINDPOINTUPDATE = 341,
    V_SMSG_PLAYERBOUND = 344,
    V_SMSG_CLIENT_CONTROL_UPDATE = 345,
    V_CMSG_REPOP_REQUEST = 346,
    V_SMSG_RESURRECT_REQUEST = 347,
    V_CMSG_RESURRECT_RESPONSE = 348,
    V_CMSG_LOOT = 349,
    V_CMSG_LOOT_MONEY = 350,
    V_CMSG_LOOT_RELEASE = 351,
    V_SMSG_LOOT_RESPONSE = 352,
    V_SMSG_LOOT_RELEASE_RESPONSE = 353,
    V_SMSG_LOOT_REMOVED = 354,
    V_SMSG_LOOT_MONEY_NOTIFY = 355,
    V_SMSG_LOOT_CLEAR_MONEY = 357,
    V_SMSG_ITEM_PUSH_RESULT = 358,
    V_SMSG_DUEL_REQUESTED = 359,
    V_SMSG_DUEL_OUTOFBOUNDS = 360,
    V_SMSG_DUEL_INBOUNDS = 361,
    V_SMSG_DUEL_COMPLETE = 362,
    V_SMSG_DUEL_WINNER = 363,
    V_CMSG_DUEL_ACCEPTED = 364,
    V_CMSG_DUEL_CANCELLED = 365,
    V_SMSG_MOUNTRESULT = 366,
    V_SMSG_DISMOUNTRESULT = 367,
    V_CMSG_MOUNTSPECIAL_ANIM = 369,
    V_SMSG_MOUNTSPECIAL_ANIM = 370,
    V_SMSG_PET_TAME_FAILURE = 371,
    V_CMSG_PET_SET_ACTION = 372,
    V_CMSG_PET_ACTION = 373,
    V_CMSG_PET_ABANDON = 374,
    V_CMSG_PET_RENAME = 375,
    V_SMSG_PET_NAME_INVALID = 376,
    V_SMSG_PET_SPELLS = 377,
    V_SMSG_PET_MODE = 378,
    V_CMSG_GOSSIP_HELLO = 379,
    V_CMSG_GOSSIP_SELECT_OPTION = 380,
    V_SMSG_GOSSIP_MESSAGE = 381,
    V_SMSG_GOSSIP_COMPLETE = 382,
    V_CMSG_NPC_TEXT_QUERY = 383,
    V_SMSG_NPC_TEXT_UPDATE = 384,
    V_CMSG_QUESTGIVER_STATUS_QUERY = 386,
    V_SMSG_QUESTGIVER_STATUS = 387,
    V_CMSG_QUESTGIVER_HELLO = 388,
    V_SMSG_QUESTGIVER_QUEST_LIST = 389,
    V_CMSG_QUESTGIVER_QUERY_QUEST = 390,
    V_CMSG_QUESTGIVER_QUEST_AUTOLAUNCH = 391,
    V_SMSG_QUESTGIVER_QUEST_DETAILS = 392,
    V_CMSG_QUESTGIVER_ACCEPT_QUEST = 393,
    V_CMSG_QUESTGIVER_COMPLETE_QUEST = 394,
    V_SMSG_QUESTGIVER_REQUEST_ITEMS = 395,
    V_CMSG_QUESTGIVER_REQUEST_REWARD = 396,
    V_SMSG_QUESTGIVER_OFFER_REWARD = 397,
    V_CMSG_QUESTGIVER_CHOOSE_REWARD = 398,
    V_SMSG_QUESTGIVER_QUEST_INVALID = 399,
    V_CMSG_QUESTGIVER_CANCEL = 400,
    V_SMSG_QUESTGIVER_QUEST_COMPLETE = 401,
    V_SMSG_QUESTGIVER_QUEST_FAILED = 402,
    V_CMSG_QUESTLOG_SWAP_QUEST = 403,
    V_CMSG_QUESTLOG_REMOVE_QUEST = 404,
    V_SMSG_QUESTLOG_FULL = 405,
    V_SMSG_QUESTUPDATE_FAILED = 406,
    V_SMSG_QUESTUPDATE_FAILEDTIMER = 407,
    V_SMSG_QUESTUPDATE_COMPLETE = 408,
    V_SMSG_QUESTUPDATE_ADD_KILL = 409,
    V_SMSG_QUESTUPDATE_ADD_ITEM = 410,
    V_CMSG_QUEST_CONFIRM_ACCEPT = 411,
    V_SMSG_QUEST_CONFIRM_ACCEPT = 412,
    V_CMSG_PUSHQUESTTOPARTY = 413,
    V_CMSG_LIST_INVENTORY = 414,
    V_SMSG_LIST_INVENTORY = 415,
    V_CMSG_SELL_ITEM = 416,
    V_SMSG_SELL_ITEM = 417,
    V_CMSG_BUY_ITEM = 418,
    V_CMSG_BUY_ITEM_IN_SLOT = 419,
    V_SMSG_BUY_ITEM = 420,
    V_SMSG_BUY_FAILED = 421,
    V_SMSG_SHOWTAXINODES = 425,
    V_CMSG_TAXINODE_STATUS_QUERY = 426,
    V_SMSG_TAXINODE_STATUS = 427,
    V_CMSG_TAXIQUERYAVAILABLENODES = 428,
    V_CMSG_ACTIVATETAXI = 429,
    V_SMSG_ACTIVATETAXIREPLY = 430,
    V_SMSG_NEW_TAXI_PATH = 431,
    V_CMSG_TRAINER_LIST = 432,
    V_SMSG_TRAINER_LIST = 433,
    V_CMSG_TRAINER_BUY_SPELL = 434,
    V_SMSG_TRAINER_BUY_SUCCEEDED = 435,
    V_SMSG_TRAINER_BUY_FAILED = 436,
    V_CMSG_BINDER_ACTIVATE = 437,
    V_CMSG_BANKER_ACTIVATE = 439,
    V_SMSG_SHOW_BANK = 440,
    V_CMSG_BUY_BANK_SLOT = 441,
    V_SMSG_BUY_BANK_SLOT_RESULT = 442,
    V_CMSG_PETITION_SHOWLIST = 443,
    V_SMSG_PETITION_SHOWLIST = 444,
    V_CMSG_PETITION_BUY = 445,
    V_CMSG_PETITION_SHOW_SIGNATURES = 446,
    V_SMSG_PETITION_SHOW_SIGNATURES = 447,
    V_CMSG_PETITION_SIGN = 448,
    V_SMSG_PETITION_SIGN_RESULTS = 449,
    V_MSG_PETITION_DECLINE = 450,
    V_CMSG_OFFER_PETITION = 451,
    V_CMSG_TURN_IN_PETITION = 452,
    V_SMSG_TURN_IN_PETITION_RESULTS = 453,
    V_CMSG_PETITION_QUERY = 454,
    V_SMSG_PETITION_QUERY_RESPONSE = 455,
    V_SMSG_FISH_NOT_HOOKED = 456,
    V_SMSG_FISH_ESCAPED = 457,
    V_CMSG_BUG = 458,
    V_SMSG_NOTIFICATION = 459,
    V_CMSG_PLAYED_TIME = 460,
    V_SMSG_PLAYED_TIME = 461,
    V_CMSG_QUERY_TIME = 462,
    V_SMSG_QUERY_TIME_RESPONSE = 463,
    V_SMSG_LOG_XPGAIN = 464,
    V_CMSG_RECLAIM_CORPSE = 466,
    V_CMSG_WRAP_ITEM = 467,
    V_SMSG_LEVELUP_INFO = 468,
    V_MSG_MINIMAP_PING = 469,
    V_SMSG_RESISTLOG = 470,
    V_SMSG_ENCHANTMENTLOG = 471,
    V_SMSG_START_MIRROR_TIMER = 473,
    V_SMSG_PAUSE_MIRROR_TIMER = 474,
    V_SMSG_STOP_MIRROR_TIMER = 475,
    V_CMSG_PING = 476,
    V_SMSG_PONG = 477,
    V_SMSG_CLEAR_COOLDOWN = 478,
    V_SMSG_GAMEOBJECT_PAGETEXT = 479,
    V_CMSG_SETSHEATHED = 480,
    V_SMSG_SPELL_DELAYED = 482,
    V_SMSG_ITEM_TIME_UPDATE = 490,
    V_SMSG_ITEM_ENCHANT_TIME_UPDATE = 491,
    V_SMSG_AUTH_CHALLENGE = 492,
    V_CMSG_AUTH_SESSION = 493,
    V_SMSG_AUTH_RESPONSE = 494,
    V_CMSG_PET_CAST_SPELL = 496,
    V_MSG_SAVE_GUILD_EMBLEM = 497,
    V_MSG_TABARDVENDOR_ACTIVATE = 498,
    V_SMSG_PLAY_SPELL_VISUAL = 499,
    V_CMSG_ZONEUPDATE = 500,
    V_SMSG_PARTYKILLLOG = 501,
    V_SMSG_COMPRESSED_UPDATE_OBJECT = 502,
    V_SMSG_PLAY_SPELL_IMPACT = 503,
    V_SMSG_EXPLORATION_EXPERIENCE = 504,
    V_MSG_RANDOM_ROLL = 507,
    V_SMSG_ENVIRONMENTAL_DAMAGE_LOG = 508,
    V_MSG_LOOKING_FOR_GROUP = 511,
    V_CMSG_UNLEARN_SKILL = 514,
    V_SMSG_REMOVED_SPELL = 515,
    V_CMSG_GMTICKET_CREATE = 517,
    V_SMSG_GMTICKET_CREATE = 518,
    V_CMSG_GMTICKET_UPDATETEXT = 519,
    V_SMSG_GMTICKET_UPDATETEXT = 520,
    V_SMSG_ACCOUNT_DATA_TIMES = 521,
    V_CMSG_REQUEST_ACCOUNT_DATA = 522,
    V_CMSG_UPDATE_ACCOUNT_DATA = 523,
    V_CMSG_GMTICKET_GETTICKET = 529,
    V_SMSG_GMTICKET_GETTICKET = 530,
    V_SMSG_GAMEOBJECT_SPAWN_ANIM = 532,
    V_SMSG_GAMEOBJECT_DESPAWN_ANIM = 533,
    V_MSG_CORPSE_QUERY = 534,
    V_CMSG_GMTICKET_DELETETICKET = 535,
    V_SMSG_GMTICKET_DELETETICKET = 536,
    V_SMSG_CHAT_WRONG_FACTION = 537,
    V_CMSG_GMTICKET_SYSTEMSTATUS = 538,
    V_SMSG_GMTICKET_SYSTEMSTATUS = 539,
    V_CMSG_SPIRIT_HEALER_ACTIVATE = 540,
    V_SMSG_SET_REST_START = 542,
    V_SMSG_SPIRIT_HEALER_CONFIRM = 546,
    V_SMSG_GOSSIP_POI = 548,
    V_CMSG_CHAT_IGNORED = 549,
    V_CMSG_GUILD_RANK = 561,
    V_CMSG_GUILD_ADD_RANK = 562,
    V_CMSG_GUILD_DEL_RANK = 563,
    V_CMSG_GUILD_SET_PUBLIC_NOTE = 564,
    V_CMSG_GUILD_SET_OFFICER_NOTE = 565,
    V_SMSG_LOGIN_VERIFY_WORLD = 566,
    V_CMSG_SEND_MAIL = 568,
    V_SMSG_SEND_MAIL_RESULT = 569,
    V_CMSG_GET_MAIL_LIST = 570,
    V_SMSG_MAIL_LIST_RESULT = 571,
    V_CMSG_BATTLEFIELD_LIST = 572,
    V_SMSG_BATTLEFIELD_LIST = 573,
    V_CMSG_BATTLEFIELD_JOIN = 574,
    V_CMSG_ITEM_TEXT_QUERY = 579,
    V_SMSG_ITEM_TEXT_QUERY_RESPONSE = 580,
    V_CMSG_MAIL_TAKE_MONEY = 581,
    V_CMSG_MAIL_TAKE_ITEM = 582,
    V_CMSG_MAIL_MARK_AS_READ = 583,
    V_CMSG_MAIL_RETURN_TO_SENDER = 584,
    V_CMSG_MAIL_DELETE = 585,
    V_CMSG_MAIL_CREATE_TEXT_ITEM = 586,
    V_SMSG_SPELLLOGMISS = 587,
    V_SMSG_SPELLLOGEXECUTE = 588,
    V_SMSG_PERIODICAURALOG = 590,
    V_SMSG_SPELLDAMAGESHIELD = 591,
    V_SMSG_SPELLNONMELEEDAMAGELOG = 592,
    V_CMSG_LEARN_TALENT = 593,
    V_CMSG_TOGGLE_PVP = 595,
    V_SMSG_ZONE_UNDER_ATTACK = 596,
    V_MSG_AUCTION_HELLO = 597,
    V_CMSG_AUCTION_SELL_ITEM = 598,
    V_CMSG_AUCTION_REMOVE_ITEM = 599,
    V_CMSG_AUCTION_LIST_ITEMS = 600,
    V_CMSG_AUCTION_LIST_OWNER_ITEMS = 601,
    V_CMSG_AUCTION_PLACE_BID = 602,
    V_SMSG_AUCTION_COMMAND_RESULT = 603,
    V_SMSG_AUCTION_LIST_RESULT = 604,
    V_SMSG_AUCTION_OWNER_LIST_RESULT = 605,
    V_SMSG_AUCTION_BIDDER_NOTIFICATION = 606,
    V_SMSG_AUCTION_OWNER_NOTIFICATION = 607,
    V_SMSG_PROCRESIST = 608,
    V_SMSG_DISPEL_FAILED = 610,
    V_SMSG_SPELLORDAMAGE_IMMUNE = 611,
    V_CMSG_AUCTION_LIST_BIDDER_ITEMS = 612,
    V_SMSG_AUCTION_BIDDER_LIST_RESULT = 613,
    V_SMSG_SET_FLAT_SPELL_MODIFIER = 614,
    V_SMSG_SET_PCT_SPELL_MODIFIER = 615,
    V_CMSG_SET_AMMO = 616,
    V_SMSG_CORPSE_RECLAIM_DELAY = 617,
    V_CMSG_SET_ACTIVE_MOVER = 618,
    V_CMSG_PET_CANCEL_AURA = 619,
    V_CMSG_CANCEL_AUTO_REPEAT_SPELL = 621,
    V_MSG_LIST_STABLED_PETS = 623,
    V_CMSG_STABLE_PET = 624,
    V_CMSG_UNSTABLE_PET = 625,
    V_CMSG_BUY_STABLE_SLOT = 626,
    V_SMSG_STABLE_RESULT = 627,
    V_CMSG_STABLE_SWAP_PET = 629,
    V_MSG_QUEST_PUSH_RESULT = 630,
    V_SMSG_PLAY_MUSIC = 631,
    V_SMSG_PLAY_OBJECT_SOUND = 632,
    V_CMSG_REQUEST_PET_INFO = 633,
    V_CMSG_FAR_SIGHT = 634,
    V_SMSG_SPELLDISPELLOG = 635,
    V_CMSG_GROUP_CHANGE_SUB_GROUP = 638,
    V_CMSG_REQUEST_PARTY_MEMBER_STATS = 639,
    V_CMSG_GROUP_SWAP_SUB_GROUP = 640,
    V_CMSG_AUTOSTORE_BANK_ITEM = 642,
    V_CMSG_AUTOBANK_ITEM = 643,
    V_MSG_QUERY_NEXT_MAIL_TIME = 644,
    V_SMSG_RECEIVED_MAIL = 645,
    V_SMSG_RAID_GROUP_ONLY = 646,
    V_SMSG_PVP_CREDIT = 652,
    V_SMSG_AUCTION_REMOVED_NOTIFICATION = 653,
    V_CMSG_GROUP_RAID_CONVERT = 654,
    V_CMSG_GROUP_ASSISTANT_LEADER = 655,
    V_CMSG_BUYBACK_ITEM = 656,
    V_SMSG_SERVER_MESSAGE = 657,
    V_CMSG_MEETINGSTONE_JOIN = 658,
    V_CMSG_MEETINGSTONE_LEAVE = 659,
    V_SMSG_MEETINGSTONE_SETQUEUE = 661,
    V_CMSG_MEETINGSTONE_INFO = 662,
    V_SMSG_MEETINGSTONE_COMPLETE = 663,
    V_SMSG_MEETINGSTONE_IN_PROGRESS = 664,
    V_SMSG_MEETINGSTONE_MEMBER_ADDED = 665,
    V_CMSG_CANCEL_GROWTH_AURA = 667,
    V_SMSG_CANCEL_AUTO_REPEAT = 668,
    V_SMSG_STANDSTATE_UPDATE = 669,
    V_SMSG_LOOT_ALL_PASSED = 670,
    V_SMSG_LOOT_ROLL_WON = 671,
    V_CMSG_LOOT_ROLL = 672,
    V_SMSG_LOOT_START_ROLL = 673,
    V_SMSG_LOOT_ROLL = 674,
    V_CMSG_LOOT_MASTER_GIVE = 675,
    V_SMSG_LOOT_MASTER_LIST = 676,
    V_SMSG_SET_FORCED_REACTIONS = 677,
    V_SMSG_SPELL_FAILED_OTHER = 678,
    V_SMSG_GAMEOBJECT_RESET_STATE = 679,
    V_CMSG_REPAIR_ITEM = 680,
    V_SMSG_CHAT_PLAYER_NOT_FOUND = 681,
    V_MSG_TALENT_WIPE_CONFIRM = 682,
    V_SMSG_SUMMON_REQUEST = 683,
    V_CMSG_SUMMON_RESPONSE = 684,
    V_SMSG_MONSTER_MOVE_TRANSPORT = 686,
    V_SMSG_PET_BROKEN = 687,
    V_MSG_MOVE_FEATHER_FALL = 688,
    V_MSG_MOVE_WATER_WALK = 689,
    V_CMSG_SELF_RES = 691,
    V_SMSG_FEIGN_DEATH_RESISTED = 692,
    V_SMSG_DUEL_COUNTDOWN = 695,
    V_SMSG_AREA_TRIGGER_MESSAGE = 696,
    V_CMSG_TOGGLE_HELM = 697,
    V_CMSG_TOGGLE_CLOAK = 698,
    V_SMSG_MEETINGSTONE_JOINFAILED = 699,
    V_SMSG_PLAYER_SKINNED = 700,
    V_SMSG_DURABILITY_DAMAGE_DEATH = 701,
    V_CMSG_SET_ACTIONBAR_TOGGLES = 703,
    V_MSG_PETITION_RENAME = 705,
    V_SMSG_INIT_WORLD_STATES = 706,
    V_SMSG_UPDATE_WORLD_STATE = 707,
    V_CMSG_ITEM_NAME_QUERY = 708,
    V_SMSG_ITEM_NAME_QUERY_RESPONSE = 709,
    V_SMSG_PET_ACTION_FEEDBACK = 710,
    V_CMSG_CHAR_RENAME = 711,
    V_SMSG_CHAR_RENAME = 712,
    V_CMSG_MOVE_SPLINE_DONE = 713,
    V_CMSG_MOVE_FALL_RESET = 714,
    V_SMSG_INSTANCE_SAVE_CREATED = 715,
    V_SMSG_RAID_INSTANCE_INFO = 716,
    V_CMSG_REQUEST_RAID_INFO = 717,
    V_CMSG_MOVE_TIME_SKIPPED = 718,
    V_CMSG_MOVE_FEATHER_FALL_ACK = 719,
    V_CMSG_MOVE_WATER_WALK_ACK = 720,
    V_CMSG_MOVE_NOT_ACTIVE_MOVER = 721,
    V_SMSG_PLAY_SOUND = 722,
    V_CMSG_BATTLEFIELD_STATUS = 723,
    V_SMSG_BATTLEFIELD_STATUS = 724,
    V_CMSG_BATTLEFIELD_PORT = 725,
    V_MSG_INSPECT_HONOR_STATS = 726,
    V_CMSG_BATTLEMASTER_HELLO = 727,
    V_SMSG_FORCE_WALK_SPEED_CHANGE = 730,
    V_CMSG_FORCE_WALK_SPEED_CHANGE_ACK = 731,
    V_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE = 732,
    V_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK = 733,
    V_SMSG_FORCE_TURN_RATE_CHANGE = 734,
    V_CMSG_FORCE_TURN_RATE_CHANGE_ACK = 735,
    V_MSG_PVP_LOG_DATA = 736,
    V_CMSG_LEAVE_BATTLEFIELD = 737,
    V_CMSG_AREA_SPIRIT_HEALER_QUERY = 738,
    V_CMSG_AREA_SPIRIT_HEALER_QUEUE = 739,
    V_SMSG_AREA_SPIRIT_HEALER_TIME = 740,
    V_SMSG_WARDEN_DATA = 742,
    V_CMSG_WARDEN_DATA = 743,
    V_SMSG_GROUP_JOINED_BATTLEGROUND = 744,
    V_MSG_BATTLEGROUND_PLAYER_POSITIONS = 745,
    V_CMSG_PET_STOP_ATTACK = 746,
    V_SMSG_BINDER_CONFIRM = 747,
    V_SMSG_BATTLEGROUND_PLAYER_JOINED = 748,
    V_SMSG_BATTLEGROUND_PLAYER_LEFT = 749,
    V_CMSG_BATTLEMASTER_JOIN = 750,
    V_SMSG_ADDON_INFO = 751,
    V_CMSG_PET_UNLEARN = 752,
    V_SMSG_PET_UNLEARN_CONFIRM = 753,
    V_SMSG_PARTY_MEMBER_STATS_FULL = 754,
    V_CMSG_PET_SPELL_AUTOCAST = 755,
    V_SMSG_WEATHER = 756,
    V_SMSG_RAID_INSTANCE_MESSAGE = 762,
    V_SMSG_COMPRESSED_MOVES = 763,
    V_CMSG_GUILD_INFO_TEXT = 764,
    V_SMSG_CHAT_RESTRICTED = 765,
    V_SMSG_SPLINE_SET_RUN_SPEED = 766,
    V_SMSG_SPLINE_SET_RUN_BACK_SPEED = 767,
    V_SMSG_SPLINE_SET_SWIM_SPEED = 768,
    V_SMSG_SPLINE_SET_WALK_SPEED = 769,
    V_SMSG_SPLINE_SET_SWIM_BACK_SPEED = 770,
    V_SMSG_SPLINE_SET_TURN_RATE = 771,
    V_SMSG_SPLINE_MOVE_UNROOT = 772,
    V_SMSG_SPLINE_MOVE_FEATHER_FALL = 773,
    V_SMSG_SPLINE_MOVE_NORMAL_FALL = 774,
    V_SMSG_SPLINE_MOVE_SET_HOVER = 775,
    V_SMSG_SPLINE_MOVE_UNSET_HOVER = 776,
    V_SMSG_SPLINE_MOVE_WATER_WALK = 777,
    V_SMSG_SPLINE_MOVE_LAND_WALK = 778,
    V_SMSG_SPLINE_MOVE_START_SWIM = 779,
    V_SMSG_SPLINE_MOVE_STOP_SWIM = 780,
    V_SMSG_SPLINE_MOVE_SET_RUN_MODE = 781,
    V_SMSG_SPLINE_MOVE_SET_WALK_MODE = 782,
    V_CMSG_ACTIVATETAXIEXPRESS = 786,
    V_CMSG_SET_FACTION_INACTIVE = 791,
    V_CMSG_SET_WATCHED_FACTION = 792,
    V_MSG_MOVE_TIME_SKIPPED = 793,
    V_SMSG_SPLINE_MOVE_ROOT = 794,
    V_SMSG_INVALIDATE_PLAYER = 796,
    V_CMSG_RESET_INSTANCES = 797,
    V_SMSG_INSTANCE_RESET = 798,
    V_SMSG_INSTANCE_RESET_FAILED = 799,
    V_SMSG_UPDATE_LAST_INSTANCE = 800,
    V_MSG_RAID_TARGET_UPDATE = 801,
    V_MSG_RAID_READY_CHECK = 802,
    V_SMSG_PET_ACTION_SOUND = 804,
    V_SMSG_PET_DISMISS_SOUND = 805,
    V_SMSG_GM_TICKET_STATUS_UPDATE = 808,
    V_CMSG_GMSURVEY_SUBMIT = 810,
    V_SMSG_UPDATE_INSTANCE_OWNERSHIP = 811,
    V_SMSG_SPELLINSTAKILLLOG = 815,
    V_SMSG_SPELL_UPDATE_CHAIN_TARGETS = 816,
    V_SMSG_EXPECTED_SPAM_RECORDS = 818,
    V_SMSG_DEFENSE_MESSAGE = 827
} WowVanillaWorldOpcode;

typedef struct {
    WowVanillaWorldOpcode opcode;

    union {
        vanilla_CMSG_DBLOOKUP CMSG_DBLOOKUP;
        vanilla_CMSG_WORLD_TELEPORT CMSG_WORLD_TELEPORT;
        vanilla_CMSG_TELEPORT_TO_UNIT CMSG_TELEPORT_TO_UNIT;
        vanilla_CMSG_CHAR_CREATE CMSG_CHAR_CREATE;
        vanilla_CMSG_CHAR_DELETE CMSG_CHAR_DELETE;
        vanilla_CMSG_PLAYER_LOGIN CMSG_PLAYER_LOGIN;
        vanilla_CMSG_NAME_QUERY CMSG_NAME_QUERY;
        vanilla_CMSG_PET_NAME_QUERY CMSG_PET_NAME_QUERY;
        vanilla_CMSG_GUILD_QUERY CMSG_GUILD_QUERY;
        vanilla_CMSG_ITEM_QUERY_SINGLE CMSG_ITEM_QUERY_SINGLE;
        vanilla_CMSG_PAGE_TEXT_QUERY CMSG_PAGE_TEXT_QUERY;
        vanilla_CMSG_QUEST_QUERY CMSG_QUEST_QUERY;
        vanilla_CMSG_GAMEOBJECT_QUERY CMSG_GAMEOBJECT_QUERY;
        vanilla_CMSG_CREATURE_QUERY CMSG_CREATURE_QUERY;
        vanilla_CMSG_WHO CMSG_WHO;
        vanilla_CMSG_WHOIS CMSG_WHOIS;
        vanilla_CMSG_ADD_FRIEND CMSG_ADD_FRIEND;
        vanilla_CMSG_DEL_FRIEND CMSG_DEL_FRIEND;
        vanilla_CMSG_ADD_IGNORE CMSG_ADD_IGNORE;
        vanilla_CMSG_DEL_IGNORE CMSG_DEL_IGNORE;
        vanilla_CMSG_GROUP_INVITE CMSG_GROUP_INVITE;
        vanilla_CMSG_GROUP_UNINVITE CMSG_GROUP_UNINVITE;
        vanilla_CMSG_GROUP_UNINVITE_GUID CMSG_GROUP_UNINVITE_GUID;
        vanilla_CMSG_GROUP_SET_LEADER CMSG_GROUP_SET_LEADER;
        vanilla_CMSG_LOOT_METHOD CMSG_LOOT_METHOD;
        vanilla_CMSG_GUILD_CREATE CMSG_GUILD_CREATE;
        vanilla_CMSG_GUILD_INVITE CMSG_GUILD_INVITE;
        vanilla_CMSG_GUILD_PROMOTE CMSG_GUILD_PROMOTE;
        vanilla_CMSG_GUILD_DEMOTE CMSG_GUILD_DEMOTE;
        vanilla_CMSG_GUILD_REMOVE CMSG_GUILD_REMOVE;
        vanilla_CMSG_GUILD_LEADER CMSG_GUILD_LEADER;
        vanilla_CMSG_GUILD_MOTD CMSG_GUILD_MOTD;
        vanilla_CMSG_MESSAGECHAT CMSG_MESSAGECHAT;
        vanilla_CMSG_JOIN_CHANNEL CMSG_JOIN_CHANNEL;
        vanilla_CMSG_LEAVE_CHANNEL CMSG_LEAVE_CHANNEL;
        vanilla_CMSG_CHANNEL_LIST CMSG_CHANNEL_LIST;
        vanilla_CMSG_CHANNEL_PASSWORD CMSG_CHANNEL_PASSWORD;
        vanilla_CMSG_CHANNEL_SET_OWNER CMSG_CHANNEL_SET_OWNER;
        vanilla_CMSG_CHANNEL_OWNER CMSG_CHANNEL_OWNER;
        vanilla_CMSG_CHANNEL_MODERATOR CMSG_CHANNEL_MODERATOR;
        vanilla_CMSG_CHANNEL_UNMODERATOR CMSG_CHANNEL_UNMODERATOR;
        vanilla_CMSG_CHANNEL_MUTE CMSG_CHANNEL_MUTE;
        vanilla_CMSG_CHANNEL_UNMUTE CMSG_CHANNEL_UNMUTE;
        vanilla_CMSG_CHANNEL_INVITE CMSG_CHANNEL_INVITE;
        vanilla_CMSG_CHANNEL_KICK CMSG_CHANNEL_KICK;
        vanilla_CMSG_CHANNEL_BAN CMSG_CHANNEL_BAN;
        vanilla_CMSG_CHANNEL_UNBAN CMSG_CHANNEL_UNBAN;
        vanilla_CMSG_CHANNEL_ANNOUNCEMENTS CMSG_CHANNEL_ANNOUNCEMENTS;
        vanilla_CMSG_CHANNEL_MODERATE CMSG_CHANNEL_MODERATE;
        vanilla_CMSG_USE_ITEM CMSG_USE_ITEM;
        vanilla_CMSG_OPEN_ITEM CMSG_OPEN_ITEM;
        vanilla_CMSG_READ_ITEM CMSG_READ_ITEM;
        vanilla_CMSG_GAMEOBJ_USE CMSG_GAMEOBJ_USE;
        vanilla_CMSG_AREATRIGGER CMSG_AREATRIGGER;
        vanilla_MSG_MOVE_START_FORWARD_Client MSG_MOVE_START_FORWARD_Client;
        vanilla_MSG_MOVE_START_BACKWARD_Client MSG_MOVE_START_BACKWARD_Client;
        vanilla_MSG_MOVE_STOP_Client MSG_MOVE_STOP_Client;
        vanilla_MSG_MOVE_START_STRAFE_LEFT_Client MSG_MOVE_START_STRAFE_LEFT_Client;
        vanilla_MSG_MOVE_START_STRAFE_RIGHT_Client MSG_MOVE_START_STRAFE_RIGHT_Client;
        vanilla_MSG_MOVE_STOP_STRAFE_Client MSG_MOVE_STOP_STRAFE_Client;
        vanilla_MSG_MOVE_JUMP_Client MSG_MOVE_JUMP_Client;
        vanilla_MSG_MOVE_START_TURN_LEFT_Client MSG_MOVE_START_TURN_LEFT_Client;
        vanilla_MSG_MOVE_START_TURN_RIGHT_Client MSG_MOVE_START_TURN_RIGHT_Client;
        vanilla_MSG_MOVE_STOP_TURN_Client MSG_MOVE_STOP_TURN_Client;
        vanilla_MSG_MOVE_START_PITCH_UP_Client MSG_MOVE_START_PITCH_UP_Client;
        vanilla_MSG_MOVE_START_PITCH_DOWN_Client MSG_MOVE_START_PITCH_DOWN_Client;
        vanilla_MSG_MOVE_STOP_PITCH_Client MSG_MOVE_STOP_PITCH_Client;
        vanilla_MSG_MOVE_SET_RUN_MODE_Client MSG_MOVE_SET_RUN_MODE_Client;
        vanilla_MSG_MOVE_SET_WALK_MODE_Client MSG_MOVE_SET_WALK_MODE_Client;
        vanilla_MSG_MOVE_TELEPORT_ACK_Client MSG_MOVE_TELEPORT_ACK_Client;
        vanilla_MSG_MOVE_FALL_LAND_Client MSG_MOVE_FALL_LAND_Client;
        vanilla_MSG_MOVE_START_SWIM_Client MSG_MOVE_START_SWIM_Client;
        vanilla_MSG_MOVE_STOP_SWIM_Client MSG_MOVE_STOP_SWIM_Client;
        vanilla_MSG_MOVE_SET_FACING_Client MSG_MOVE_SET_FACING_Client;
        vanilla_MSG_MOVE_SET_PITCH_Client MSG_MOVE_SET_PITCH_Client;
        vanilla_CMSG_MOVE_SET_RAW_POSITION CMSG_MOVE_SET_RAW_POSITION;
        vanilla_CMSG_FORCE_RUN_SPEED_CHANGE_ACK CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
        vanilla_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
        vanilla_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
        vanilla_CMSG_FORCE_MOVE_ROOT_ACK CMSG_FORCE_MOVE_ROOT_ACK;
        vanilla_CMSG_FORCE_MOVE_UNROOT_ACK CMSG_FORCE_MOVE_UNROOT_ACK;
        vanilla_MSG_MOVE_HEARTBEAT_Client MSG_MOVE_HEARTBEAT_Client;
        vanilla_CMSG_MOVE_KNOCK_BACK_ACK CMSG_MOVE_KNOCK_BACK_ACK;
        vanilla_CMSG_MOVE_HOVER_ACK CMSG_MOVE_HOVER_ACK;
        vanilla_CMSG_TUTORIAL_FLAG CMSG_TUTORIAL_FLAG;
        vanilla_CMSG_STANDSTATECHANGE CMSG_STANDSTATECHANGE;
        vanilla_CMSG_EMOTE CMSG_EMOTE;
        vanilla_CMSG_TEXT_EMOTE CMSG_TEXT_EMOTE;
        vanilla_CMSG_AUTOSTORE_LOOT_ITEM CMSG_AUTOSTORE_LOOT_ITEM;
        vanilla_CMSG_AUTOEQUIP_ITEM CMSG_AUTOEQUIP_ITEM;
        vanilla_CMSG_AUTOSTORE_BAG_ITEM CMSG_AUTOSTORE_BAG_ITEM;
        vanilla_CMSG_SWAP_ITEM CMSG_SWAP_ITEM;
        vanilla_CMSG_SWAP_INV_ITEM CMSG_SWAP_INV_ITEM;
        vanilla_CMSG_SPLIT_ITEM CMSG_SPLIT_ITEM;
        vanilla_CMSG_AUTOEQUIP_ITEM_SLOT CMSG_AUTOEQUIP_ITEM_SLOT;
        vanilla_CMSG_DESTROYITEM CMSG_DESTROYITEM;
        vanilla_CMSG_INSPECT CMSG_INSPECT;
        vanilla_CMSG_INITIATE_TRADE CMSG_INITIATE_TRADE;
        vanilla_CMSG_ACCEPT_TRADE CMSG_ACCEPT_TRADE;
        vanilla_CMSG_SET_TRADE_ITEM CMSG_SET_TRADE_ITEM;
        vanilla_CMSG_CLEAR_TRADE_ITEM CMSG_CLEAR_TRADE_ITEM;
        vanilla_CMSG_SET_TRADE_GOLD CMSG_SET_TRADE_GOLD;
        vanilla_CMSG_SET_FACTION_ATWAR CMSG_SET_FACTION_ATWAR;
        vanilla_CMSG_SET_ACTION_BUTTON CMSG_SET_ACTION_BUTTON;
        vanilla_CMSG_CAST_SPELL CMSG_CAST_SPELL;
        vanilla_CMSG_CANCEL_CAST CMSG_CANCEL_CAST;
        vanilla_CMSG_CANCEL_AURA CMSG_CANCEL_AURA;
        vanilla_CMSG_CANCEL_CHANNELLING CMSG_CANCEL_CHANNELLING;
        vanilla_CMSG_SET_SELECTION CMSG_SET_SELECTION;
        vanilla_CMSG_SET_TARGET_OBSOLETE CMSG_SET_TARGET_OBSOLETE;
        vanilla_CMSG_ATTACKSWING CMSG_ATTACKSWING;
        vanilla_CMSG_RESURRECT_RESPONSE CMSG_RESURRECT_RESPONSE;
        vanilla_CMSG_LOOT CMSG_LOOT;
        vanilla_CMSG_LOOT_RELEASE CMSG_LOOT_RELEASE;
        vanilla_CMSG_DUEL_ACCEPTED CMSG_DUEL_ACCEPTED;
        vanilla_CMSG_DUEL_CANCELLED CMSG_DUEL_CANCELLED;
        vanilla_CMSG_PET_SET_ACTION CMSG_PET_SET_ACTION;
        vanilla_CMSG_PET_ACTION CMSG_PET_ACTION;
        vanilla_CMSG_PET_ABANDON CMSG_PET_ABANDON;
        vanilla_CMSG_PET_RENAME CMSG_PET_RENAME;
        vanilla_CMSG_GOSSIP_HELLO CMSG_GOSSIP_HELLO;
        vanilla_CMSG_GOSSIP_SELECT_OPTION CMSG_GOSSIP_SELECT_OPTION;
        vanilla_CMSG_NPC_TEXT_QUERY CMSG_NPC_TEXT_QUERY;
        vanilla_CMSG_QUESTGIVER_STATUS_QUERY CMSG_QUESTGIVER_STATUS_QUERY;
        vanilla_CMSG_QUESTGIVER_HELLO CMSG_QUESTGIVER_HELLO;
        vanilla_CMSG_QUESTGIVER_QUERY_QUEST CMSG_QUESTGIVER_QUERY_QUEST;
        vanilla_CMSG_QUESTGIVER_ACCEPT_QUEST CMSG_QUESTGIVER_ACCEPT_QUEST;
        vanilla_CMSG_QUESTGIVER_COMPLETE_QUEST CMSG_QUESTGIVER_COMPLETE_QUEST;
        vanilla_CMSG_QUESTGIVER_REQUEST_REWARD CMSG_QUESTGIVER_REQUEST_REWARD;
        vanilla_CMSG_QUESTGIVER_CHOOSE_REWARD CMSG_QUESTGIVER_CHOOSE_REWARD;
        vanilla_CMSG_QUESTLOG_SWAP_QUEST CMSG_QUESTLOG_SWAP_QUEST;
        vanilla_CMSG_QUESTLOG_REMOVE_QUEST CMSG_QUESTLOG_REMOVE_QUEST;
        vanilla_CMSG_QUEST_CONFIRM_ACCEPT CMSG_QUEST_CONFIRM_ACCEPT;
        vanilla_CMSG_PUSHQUESTTOPARTY CMSG_PUSHQUESTTOPARTY;
        vanilla_CMSG_LIST_INVENTORY CMSG_LIST_INVENTORY;
        vanilla_CMSG_SELL_ITEM CMSG_SELL_ITEM;
        vanilla_CMSG_BUY_ITEM CMSG_BUY_ITEM;
        vanilla_CMSG_BUY_ITEM_IN_SLOT CMSG_BUY_ITEM_IN_SLOT;
        vanilla_CMSG_TAXINODE_STATUS_QUERY CMSG_TAXINODE_STATUS_QUERY;
        vanilla_CMSG_TAXIQUERYAVAILABLENODES CMSG_TAXIQUERYAVAILABLENODES;
        vanilla_CMSG_ACTIVATETAXI CMSG_ACTIVATETAXI;
        vanilla_CMSG_TRAINER_LIST CMSG_TRAINER_LIST;
        vanilla_CMSG_TRAINER_BUY_SPELL CMSG_TRAINER_BUY_SPELL;
        vanilla_CMSG_BINDER_ACTIVATE CMSG_BINDER_ACTIVATE;
        vanilla_CMSG_BANKER_ACTIVATE CMSG_BANKER_ACTIVATE;
        vanilla_CMSG_BUY_BANK_SLOT CMSG_BUY_BANK_SLOT;
        vanilla_CMSG_PETITION_SHOWLIST CMSG_PETITION_SHOWLIST;
        vanilla_CMSG_PETITION_BUY CMSG_PETITION_BUY;
        vanilla_CMSG_PETITION_SHOW_SIGNATURES CMSG_PETITION_SHOW_SIGNATURES;
        vanilla_CMSG_PETITION_SIGN CMSG_PETITION_SIGN;
        vanilla_MSG_PETITION_DECLINE MSG_PETITION_DECLINE;
        vanilla_CMSG_OFFER_PETITION CMSG_OFFER_PETITION;
        vanilla_CMSG_TURN_IN_PETITION CMSG_TURN_IN_PETITION;
        vanilla_CMSG_PETITION_QUERY CMSG_PETITION_QUERY;
        vanilla_CMSG_BUG CMSG_BUG;
        vanilla_CMSG_RECLAIM_CORPSE CMSG_RECLAIM_CORPSE;
        vanilla_CMSG_WRAP_ITEM CMSG_WRAP_ITEM;
        vanilla_MSG_MINIMAP_PING_Client MSG_MINIMAP_PING_Client;
        vanilla_CMSG_PING CMSG_PING;
        vanilla_CMSG_SETSHEATHED CMSG_SETSHEATHED;
        vanilla_CMSG_AUTH_SESSION CMSG_AUTH_SESSION;
        vanilla_CMSG_PET_CAST_SPELL CMSG_PET_CAST_SPELL;
        vanilla_MSG_SAVE_GUILD_EMBLEM_Client MSG_SAVE_GUILD_EMBLEM_Client;
        vanilla_MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE;
        vanilla_CMSG_ZONEUPDATE CMSG_ZONEUPDATE;
        vanilla_MSG_RANDOM_ROLL_Client MSG_RANDOM_ROLL_Client;
        vanilla_CMSG_UNLEARN_SKILL CMSG_UNLEARN_SKILL;
        vanilla_CMSG_GMTICKET_CREATE CMSG_GMTICKET_CREATE;
        vanilla_CMSG_GMTICKET_UPDATETEXT CMSG_GMTICKET_UPDATETEXT;
        vanilla_CMSG_REQUEST_ACCOUNT_DATA CMSG_REQUEST_ACCOUNT_DATA;
        vanilla_CMSG_UPDATE_ACCOUNT_DATA CMSG_UPDATE_ACCOUNT_DATA;
        vanilla_CMSG_SPIRIT_HEALER_ACTIVATE CMSG_SPIRIT_HEALER_ACTIVATE;
        vanilla_CMSG_CHAT_IGNORED CMSG_CHAT_IGNORED;
        vanilla_CMSG_GUILD_RANK CMSG_GUILD_RANK;
        vanilla_CMSG_GUILD_ADD_RANK CMSG_GUILD_ADD_RANK;
        vanilla_CMSG_GUILD_SET_PUBLIC_NOTE CMSG_GUILD_SET_PUBLIC_NOTE;
        vanilla_CMSG_GUILD_SET_OFFICER_NOTE CMSG_GUILD_SET_OFFICER_NOTE;
        vanilla_CMSG_SEND_MAIL CMSG_SEND_MAIL;
        vanilla_CMSG_GET_MAIL_LIST CMSG_GET_MAIL_LIST;
        vanilla_CMSG_BATTLEFIELD_LIST CMSG_BATTLEFIELD_LIST;
        vanilla_CMSG_BATTLEFIELD_JOIN CMSG_BATTLEFIELD_JOIN;
        vanilla_CMSG_ITEM_TEXT_QUERY CMSG_ITEM_TEXT_QUERY;
        vanilla_CMSG_MAIL_TAKE_MONEY CMSG_MAIL_TAKE_MONEY;
        vanilla_CMSG_MAIL_TAKE_ITEM CMSG_MAIL_TAKE_ITEM;
        vanilla_CMSG_MAIL_MARK_AS_READ CMSG_MAIL_MARK_AS_READ;
        vanilla_CMSG_MAIL_RETURN_TO_SENDER CMSG_MAIL_RETURN_TO_SENDER;
        vanilla_CMSG_MAIL_DELETE CMSG_MAIL_DELETE;
        vanilla_CMSG_MAIL_CREATE_TEXT_ITEM CMSG_MAIL_CREATE_TEXT_ITEM;
        vanilla_CMSG_LEARN_TALENT CMSG_LEARN_TALENT;
        vanilla_CMSG_TOGGLE_PVP CMSG_TOGGLE_PVP;
        vanilla_MSG_AUCTION_HELLO_Client MSG_AUCTION_HELLO_Client;
        vanilla_CMSG_AUCTION_SELL_ITEM CMSG_AUCTION_SELL_ITEM;
        vanilla_CMSG_AUCTION_REMOVE_ITEM CMSG_AUCTION_REMOVE_ITEM;
        vanilla_CMSG_AUCTION_LIST_ITEMS CMSG_AUCTION_LIST_ITEMS;
        vanilla_CMSG_AUCTION_LIST_OWNER_ITEMS CMSG_AUCTION_LIST_OWNER_ITEMS;
        vanilla_CMSG_AUCTION_PLACE_BID CMSG_AUCTION_PLACE_BID;
        vanilla_CMSG_AUCTION_LIST_BIDDER_ITEMS CMSG_AUCTION_LIST_BIDDER_ITEMS;
        vanilla_CMSG_SET_AMMO CMSG_SET_AMMO;
        vanilla_CMSG_SET_ACTIVE_MOVER CMSG_SET_ACTIVE_MOVER;
        vanilla_CMSG_PET_CANCEL_AURA CMSG_PET_CANCEL_AURA;
        vanilla_MSG_LIST_STABLED_PETS_Client MSG_LIST_STABLED_PETS_Client;
        vanilla_CMSG_STABLE_PET CMSG_STABLE_PET;
        vanilla_CMSG_UNSTABLE_PET CMSG_UNSTABLE_PET;
        vanilla_CMSG_BUY_STABLE_SLOT CMSG_BUY_STABLE_SLOT;
        vanilla_CMSG_STABLE_SWAP_PET CMSG_STABLE_SWAP_PET;
        vanilla_MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT;
        vanilla_CMSG_FAR_SIGHT CMSG_FAR_SIGHT;
        vanilla_CMSG_GROUP_CHANGE_SUB_GROUP CMSG_GROUP_CHANGE_SUB_GROUP;
        vanilla_CMSG_REQUEST_PARTY_MEMBER_STATS CMSG_REQUEST_PARTY_MEMBER_STATS;
        vanilla_CMSG_GROUP_SWAP_SUB_GROUP CMSG_GROUP_SWAP_SUB_GROUP;
        vanilla_CMSG_AUTOSTORE_BANK_ITEM CMSG_AUTOSTORE_BANK_ITEM;
        vanilla_CMSG_AUTOBANK_ITEM CMSG_AUTOBANK_ITEM;
        vanilla_CMSG_GROUP_ASSISTANT_LEADER CMSG_GROUP_ASSISTANT_LEADER;
        vanilla_CMSG_BUYBACK_ITEM CMSG_BUYBACK_ITEM;
        vanilla_CMSG_MEETINGSTONE_JOIN CMSG_MEETINGSTONE_JOIN;
        vanilla_CMSG_LOOT_ROLL CMSG_LOOT_ROLL;
        vanilla_CMSG_LOOT_MASTER_GIVE CMSG_LOOT_MASTER_GIVE;
        vanilla_CMSG_REPAIR_ITEM CMSG_REPAIR_ITEM;
        vanilla_MSG_TALENT_WIPE_CONFIRM_Client MSG_TALENT_WIPE_CONFIRM_Client;
        vanilla_CMSG_SUMMON_RESPONSE CMSG_SUMMON_RESPONSE;
        vanilla_MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK;
        vanilla_CMSG_SET_ACTIONBAR_TOGGLES CMSG_SET_ACTIONBAR_TOGGLES;
        vanilla_MSG_PETITION_RENAME MSG_PETITION_RENAME;
        vanilla_CMSG_ITEM_NAME_QUERY CMSG_ITEM_NAME_QUERY;
        vanilla_CMSG_CHAR_RENAME CMSG_CHAR_RENAME;
        vanilla_CMSG_MOVE_SPLINE_DONE CMSG_MOVE_SPLINE_DONE;
        vanilla_CMSG_MOVE_FALL_RESET CMSG_MOVE_FALL_RESET;
        vanilla_CMSG_MOVE_TIME_SKIPPED CMSG_MOVE_TIME_SKIPPED;
        vanilla_CMSG_MOVE_FEATHER_FALL_ACK CMSG_MOVE_FEATHER_FALL_ACK;
        vanilla_CMSG_MOVE_WATER_WALK_ACK CMSG_MOVE_WATER_WALK_ACK;
        vanilla_CMSG_MOVE_NOT_ACTIVE_MOVER CMSG_MOVE_NOT_ACTIVE_MOVER;
        vanilla_CMSG_BATTLEFIELD_PORT CMSG_BATTLEFIELD_PORT;
        vanilla_MSG_INSPECT_HONOR_STATS_Client MSG_INSPECT_HONOR_STATS_Client;
        vanilla_CMSG_BATTLEMASTER_HELLO CMSG_BATTLEMASTER_HELLO;
        vanilla_CMSG_FORCE_WALK_SPEED_CHANGE_ACK CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
        vanilla_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
        vanilla_CMSG_FORCE_TURN_RATE_CHANGE_ACK CMSG_FORCE_TURN_RATE_CHANGE_ACK;
        vanilla_CMSG_LEAVE_BATTLEFIELD CMSG_LEAVE_BATTLEFIELD;
        vanilla_CMSG_AREA_SPIRIT_HEALER_QUERY CMSG_AREA_SPIRIT_HEALER_QUERY;
        vanilla_CMSG_AREA_SPIRIT_HEALER_QUEUE CMSG_AREA_SPIRIT_HEALER_QUEUE;
        vanilla_CMSG_WARDEN_DATA CMSG_WARDEN_DATA;
        vanilla_CMSG_PET_STOP_ATTACK CMSG_PET_STOP_ATTACK;
        vanilla_CMSG_BATTLEMASTER_JOIN CMSG_BATTLEMASTER_JOIN;
        vanilla_CMSG_PET_UNLEARN CMSG_PET_UNLEARN;
        vanilla_CMSG_PET_SPELL_AUTOCAST CMSG_PET_SPELL_AUTOCAST;
        vanilla_CMSG_GUILD_INFO_TEXT CMSG_GUILD_INFO_TEXT;
        vanilla_CMSG_ACTIVATETAXIEXPRESS CMSG_ACTIVATETAXIEXPRESS;
        vanilla_CMSG_SET_FACTION_INACTIVE CMSG_SET_FACTION_INACTIVE;
        vanilla_CMSG_SET_WATCHED_FACTION CMSG_SET_WATCHED_FACTION;
        vanilla_MSG_RAID_TARGET_UPDATE_Client MSG_RAID_TARGET_UPDATE_Client;
        vanilla_MSG_RAID_READY_CHECK_Client MSG_RAID_READY_CHECK_Client;
        vanilla_CMSG_GMSURVEY_SUBMIT CMSG_GMSURVEY_SUBMIT;
    } body;
} VanillaClientOpcodeContainer;

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_client_opcode_write(WowWorldWriter* writer, const VanillaClientOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_client_opcode_read(WowWorldReader* reader, VanillaClientOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT void vanilla_client_opcode_free(VanillaClientOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT char* vanilla_client_opcode_to_str(VanillaClientOpcodeContainer* opcodes);
typedef struct {
    WowVanillaWorldOpcode opcode;

    union {
        vanilla_SMSG_CHAR_CREATE SMSG_CHAR_CREATE;
        vanilla_SMSG_CHAR_ENUM SMSG_CHAR_ENUM;
        vanilla_SMSG_CHAR_DELETE SMSG_CHAR_DELETE;
        vanilla_SMSG_NEW_WORLD SMSG_NEW_WORLD;
        vanilla_SMSG_TRANSFER_PENDING SMSG_TRANSFER_PENDING;
        vanilla_SMSG_TRANSFER_ABORTED SMSG_TRANSFER_ABORTED;
        vanilla_SMSG_CHARACTER_LOGIN_FAILED SMSG_CHARACTER_LOGIN_FAILED;
        vanilla_SMSG_LOGIN_SETTIMESPEED SMSG_LOGIN_SETTIMESPEED;
        vanilla_SMSG_LOGOUT_RESPONSE SMSG_LOGOUT_RESPONSE;
        vanilla_SMSG_NAME_QUERY_RESPONSE SMSG_NAME_QUERY_RESPONSE;
        vanilla_SMSG_PET_NAME_QUERY_RESPONSE SMSG_PET_NAME_QUERY_RESPONSE;
        vanilla_SMSG_GUILD_QUERY_RESPONSE SMSG_GUILD_QUERY_RESPONSE;
        vanilla_SMSG_ITEM_QUERY_SINGLE_RESPONSE SMSG_ITEM_QUERY_SINGLE_RESPONSE;
        vanilla_SMSG_PAGE_TEXT_QUERY_RESPONSE SMSG_PAGE_TEXT_QUERY_RESPONSE;
        vanilla_SMSG_QUEST_QUERY_RESPONSE SMSG_QUEST_QUERY_RESPONSE;
        vanilla_SMSG_GAMEOBJECT_QUERY_RESPONSE SMSG_GAMEOBJECT_QUERY_RESPONSE;
        vanilla_SMSG_CREATURE_QUERY_RESPONSE SMSG_CREATURE_QUERY_RESPONSE;
        vanilla_SMSG_WHO SMSG_WHO;
        vanilla_SMSG_WHOIS SMSG_WHOIS;
        vanilla_SMSG_FRIEND_LIST SMSG_FRIEND_LIST;
        vanilla_SMSG_FRIEND_STATUS SMSG_FRIEND_STATUS;
        vanilla_SMSG_IGNORE_LIST SMSG_IGNORE_LIST;
        vanilla_SMSG_GROUP_INVITE SMSG_GROUP_INVITE;
        vanilla_SMSG_GROUP_DECLINE SMSG_GROUP_DECLINE;
        vanilla_SMSG_GROUP_SET_LEADER SMSG_GROUP_SET_LEADER;
        vanilla_SMSG_GROUP_LIST SMSG_GROUP_LIST;
        vanilla_SMSG_PARTY_MEMBER_STATS SMSG_PARTY_MEMBER_STATS;
        vanilla_SMSG_PARTY_COMMAND_RESULT SMSG_PARTY_COMMAND_RESULT;
        vanilla_SMSG_GUILD_INVITE SMSG_GUILD_INVITE;
        vanilla_SMSG_GUILD_INFO SMSG_GUILD_INFO;
        vanilla_SMSG_GUILD_ROSTER SMSG_GUILD_ROSTER;
        vanilla_SMSG_GUILD_EVENT SMSG_GUILD_EVENT;
        vanilla_SMSG_GUILD_COMMAND_RESULT SMSG_GUILD_COMMAND_RESULT;
        vanilla_SMSG_MESSAGECHAT SMSG_MESSAGECHAT;
        vanilla_SMSG_CHANNEL_NOTIFY SMSG_CHANNEL_NOTIFY;
        vanilla_SMSG_CHANNEL_LIST SMSG_CHANNEL_LIST;
        vanilla_SMSG_UPDATE_OBJECT SMSG_UPDATE_OBJECT;
        vanilla_SMSG_DESTROY_OBJECT SMSG_DESTROY_OBJECT;
        vanilla_SMSG_READ_ITEM_OK SMSG_READ_ITEM_OK;
        vanilla_SMSG_READ_ITEM_FAILED SMSG_READ_ITEM_FAILED;
        vanilla_SMSG_ITEM_COOLDOWN SMSG_ITEM_COOLDOWN;
        vanilla_SMSG_GAMEOBJECT_CUSTOM_ANIM SMSG_GAMEOBJECT_CUSTOM_ANIM;
        vanilla_MSG_MOVE_START_FORWARD_Server MSG_MOVE_START_FORWARD_Server;
        vanilla_MSG_MOVE_START_BACKWARD_Server MSG_MOVE_START_BACKWARD_Server;
        vanilla_MSG_MOVE_STOP_Server MSG_MOVE_STOP_Server;
        vanilla_MSG_MOVE_START_STRAFE_LEFT_Server MSG_MOVE_START_STRAFE_LEFT_Server;
        vanilla_MSG_MOVE_START_STRAFE_RIGHT_Server MSG_MOVE_START_STRAFE_RIGHT_Server;
        vanilla_MSG_MOVE_STOP_STRAFE_Server MSG_MOVE_STOP_STRAFE_Server;
        vanilla_MSG_MOVE_JUMP_Server MSG_MOVE_JUMP_Server;
        vanilla_MSG_MOVE_START_TURN_LEFT_Server MSG_MOVE_START_TURN_LEFT_Server;
        vanilla_MSG_MOVE_START_TURN_RIGHT_Server MSG_MOVE_START_TURN_RIGHT_Server;
        vanilla_MSG_MOVE_STOP_TURN_Server MSG_MOVE_STOP_TURN_Server;
        vanilla_MSG_MOVE_START_PITCH_UP_Server MSG_MOVE_START_PITCH_UP_Server;
        vanilla_MSG_MOVE_START_PITCH_DOWN_Server MSG_MOVE_START_PITCH_DOWN_Server;
        vanilla_MSG_MOVE_STOP_PITCH_Server MSG_MOVE_STOP_PITCH_Server;
        vanilla_MSG_MOVE_SET_RUN_MODE_Server MSG_MOVE_SET_RUN_MODE_Server;
        vanilla_MSG_MOVE_SET_WALK_MODE_Server MSG_MOVE_SET_WALK_MODE_Server;
        vanilla_MSG_MOVE_TELEPORT_ACK_Server MSG_MOVE_TELEPORT_ACK_Server;
        vanilla_MSG_MOVE_FALL_LAND_Server MSG_MOVE_FALL_LAND_Server;
        vanilla_MSG_MOVE_START_SWIM_Server MSG_MOVE_START_SWIM_Server;
        vanilla_MSG_MOVE_STOP_SWIM_Server MSG_MOVE_STOP_SWIM_Server;
        vanilla_MSG_MOVE_SET_FACING_Server MSG_MOVE_SET_FACING_Server;
        vanilla_MSG_MOVE_SET_PITCH_Server MSG_MOVE_SET_PITCH_Server;
        vanilla_SMSG_MONSTER_MOVE SMSG_MONSTER_MOVE;
        vanilla_SMSG_MOVE_WATER_WALK SMSG_MOVE_WATER_WALK;
        vanilla_SMSG_MOVE_LAND_WALK SMSG_MOVE_LAND_WALK;
        vanilla_SMSG_FORCE_RUN_SPEED_CHANGE SMSG_FORCE_RUN_SPEED_CHANGE;
        vanilla_SMSG_FORCE_RUN_BACK_SPEED_CHANGE SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
        vanilla_SMSG_FORCE_SWIM_SPEED_CHANGE SMSG_FORCE_SWIM_SPEED_CHANGE;
        vanilla_SMSG_FORCE_MOVE_ROOT SMSG_FORCE_MOVE_ROOT;
        vanilla_SMSG_FORCE_MOVE_UNROOT SMSG_FORCE_MOVE_UNROOT;
        vanilla_MSG_MOVE_HEARTBEAT_Server MSG_MOVE_HEARTBEAT_Server;
        vanilla_SMSG_MOVE_KNOCK_BACK SMSG_MOVE_KNOCK_BACK;
        vanilla_SMSG_MOVE_FEATHER_FALL SMSG_MOVE_FEATHER_FALL;
        vanilla_SMSG_MOVE_NORMAL_FALL SMSG_MOVE_NORMAL_FALL;
        vanilla_SMSG_MOVE_SET_HOVER SMSG_MOVE_SET_HOVER;
        vanilla_SMSG_MOVE_UNSET_HOVER SMSG_MOVE_UNSET_HOVER;
        vanilla_SMSG_TRIGGER_CINEMATIC SMSG_TRIGGER_CINEMATIC;
        vanilla_SMSG_TUTORIAL_FLAGS SMSG_TUTORIAL_FLAGS;
        vanilla_SMSG_EMOTE SMSG_EMOTE;
        vanilla_SMSG_TEXT_EMOTE SMSG_TEXT_EMOTE;
        vanilla_SMSG_INVENTORY_CHANGE_FAILURE SMSG_INVENTORY_CHANGE_FAILURE;
        vanilla_SMSG_OPEN_CONTAINER SMSG_OPEN_CONTAINER;
        vanilla_SMSG_INSPECT SMSG_INSPECT;
        vanilla_SMSG_TRADE_STATUS SMSG_TRADE_STATUS;
        vanilla_SMSG_TRADE_STATUS_EXTENDED SMSG_TRADE_STATUS_EXTENDED;
        vanilla_SMSG_INITIALIZE_FACTIONS SMSG_INITIALIZE_FACTIONS;
        vanilla_SMSG_SET_FACTION_VISIBLE SMSG_SET_FACTION_VISIBLE;
        vanilla_SMSG_SET_FACTION_STANDING SMSG_SET_FACTION_STANDING;
        vanilla_SMSG_SET_PROFICIENCY SMSG_SET_PROFICIENCY;
        vanilla_SMSG_ACTION_BUTTONS SMSG_ACTION_BUTTONS;
        vanilla_SMSG_INITIAL_SPELLS SMSG_INITIAL_SPELLS;
        vanilla_SMSG_LEARNED_SPELL SMSG_LEARNED_SPELL;
        vanilla_SMSG_SUPERCEDED_SPELL SMSG_SUPERCEDED_SPELL;
        vanilla_SMSG_CAST_RESULT SMSG_CAST_RESULT;
        vanilla_SMSG_SPELL_START SMSG_SPELL_START;
        vanilla_SMSG_SPELL_GO SMSG_SPELL_GO;
        vanilla_SMSG_SPELL_FAILURE SMSG_SPELL_FAILURE;
        vanilla_SMSG_SPELL_COOLDOWN SMSG_SPELL_COOLDOWN;
        vanilla_SMSG_COOLDOWN_EVENT SMSG_COOLDOWN_EVENT;
        vanilla_SMSG_UPDATE_AURA_DURATION SMSG_UPDATE_AURA_DURATION;
        vanilla_SMSG_PET_CAST_FAILED SMSG_PET_CAST_FAILED;
        vanilla_MSG_CHANNEL_START_Server MSG_CHANNEL_START_Server;
        vanilla_MSG_CHANNEL_UPDATE_Server MSG_CHANNEL_UPDATE_Server;
        vanilla_SMSG_AI_REACTION SMSG_AI_REACTION;
        vanilla_SMSG_ATTACKSTART SMSG_ATTACKSTART;
        vanilla_SMSG_ATTACKSTOP SMSG_ATTACKSTOP;
        vanilla_SMSG_ATTACKERSTATEUPDATE SMSG_ATTACKERSTATEUPDATE;
        vanilla_SMSG_SPELLHEALLOG SMSG_SPELLHEALLOG;
        vanilla_SMSG_SPELLENERGIZELOG SMSG_SPELLENERGIZELOG;
        vanilla_SMSG_BINDPOINTUPDATE SMSG_BINDPOINTUPDATE;
        vanilla_SMSG_PLAYERBOUND SMSG_PLAYERBOUND;
        vanilla_SMSG_CLIENT_CONTROL_UPDATE SMSG_CLIENT_CONTROL_UPDATE;
        vanilla_SMSG_RESURRECT_REQUEST SMSG_RESURRECT_REQUEST;
        vanilla_SMSG_LOOT_RESPONSE SMSG_LOOT_RESPONSE;
        vanilla_SMSG_LOOT_RELEASE_RESPONSE SMSG_LOOT_RELEASE_RESPONSE;
        vanilla_SMSG_LOOT_REMOVED SMSG_LOOT_REMOVED;
        vanilla_SMSG_LOOT_MONEY_NOTIFY SMSG_LOOT_MONEY_NOTIFY;
        vanilla_SMSG_ITEM_PUSH_RESULT SMSG_ITEM_PUSH_RESULT;
        vanilla_SMSG_DUEL_REQUESTED SMSG_DUEL_REQUESTED;
        vanilla_SMSG_DUEL_COMPLETE SMSG_DUEL_COMPLETE;
        vanilla_SMSG_DUEL_WINNER SMSG_DUEL_WINNER;
        vanilla_SMSG_MOUNTRESULT SMSG_MOUNTRESULT;
        vanilla_SMSG_DISMOUNTRESULT SMSG_DISMOUNTRESULT;
        vanilla_SMSG_MOUNTSPECIAL_ANIM SMSG_MOUNTSPECIAL_ANIM;
        vanilla_SMSG_PET_TAME_FAILURE SMSG_PET_TAME_FAILURE;
        vanilla_SMSG_PET_SPELLS SMSG_PET_SPELLS;
        vanilla_SMSG_PET_MODE SMSG_PET_MODE;
        vanilla_SMSG_GOSSIP_MESSAGE SMSG_GOSSIP_MESSAGE;
        vanilla_SMSG_NPC_TEXT_UPDATE SMSG_NPC_TEXT_UPDATE;
        vanilla_SMSG_QUESTGIVER_STATUS SMSG_QUESTGIVER_STATUS;
        vanilla_SMSG_QUESTGIVER_QUEST_LIST SMSG_QUESTGIVER_QUEST_LIST;
        vanilla_SMSG_QUESTGIVER_QUEST_DETAILS SMSG_QUESTGIVER_QUEST_DETAILS;
        vanilla_SMSG_QUESTGIVER_REQUEST_ITEMS SMSG_QUESTGIVER_REQUEST_ITEMS;
        vanilla_SMSG_QUESTGIVER_OFFER_REWARD SMSG_QUESTGIVER_OFFER_REWARD;
        vanilla_SMSG_QUESTGIVER_QUEST_INVALID SMSG_QUESTGIVER_QUEST_INVALID;
        vanilla_SMSG_QUESTGIVER_QUEST_COMPLETE SMSG_QUESTGIVER_QUEST_COMPLETE;
        vanilla_SMSG_QUESTGIVER_QUEST_FAILED SMSG_QUESTGIVER_QUEST_FAILED;
        vanilla_SMSG_QUESTUPDATE_FAILED SMSG_QUESTUPDATE_FAILED;
        vanilla_SMSG_QUESTUPDATE_FAILEDTIMER SMSG_QUESTUPDATE_FAILEDTIMER;
        vanilla_SMSG_QUESTUPDATE_COMPLETE SMSG_QUESTUPDATE_COMPLETE;
        vanilla_SMSG_QUESTUPDATE_ADD_KILL SMSG_QUESTUPDATE_ADD_KILL;
        vanilla_SMSG_QUESTUPDATE_ADD_ITEM SMSG_QUESTUPDATE_ADD_ITEM;
        vanilla_SMSG_QUEST_CONFIRM_ACCEPT SMSG_QUEST_CONFIRM_ACCEPT;
        vanilla_SMSG_LIST_INVENTORY SMSG_LIST_INVENTORY;
        vanilla_SMSG_SELL_ITEM SMSG_SELL_ITEM;
        vanilla_SMSG_BUY_ITEM SMSG_BUY_ITEM;
        vanilla_SMSG_BUY_FAILED SMSG_BUY_FAILED;
        vanilla_SMSG_SHOWTAXINODES SMSG_SHOWTAXINODES;
        vanilla_SMSG_TAXINODE_STATUS SMSG_TAXINODE_STATUS;
        vanilla_SMSG_ACTIVATETAXIREPLY SMSG_ACTIVATETAXIREPLY;
        vanilla_SMSG_TRAINER_LIST SMSG_TRAINER_LIST;
        vanilla_SMSG_TRAINER_BUY_SUCCEEDED SMSG_TRAINER_BUY_SUCCEEDED;
        vanilla_SMSG_TRAINER_BUY_FAILED SMSG_TRAINER_BUY_FAILED;
        vanilla_SMSG_SHOW_BANK SMSG_SHOW_BANK;
        vanilla_SMSG_BUY_BANK_SLOT_RESULT SMSG_BUY_BANK_SLOT_RESULT;
        vanilla_SMSG_PETITION_SHOWLIST SMSG_PETITION_SHOWLIST;
        vanilla_SMSG_PETITION_SHOW_SIGNATURES SMSG_PETITION_SHOW_SIGNATURES;
        vanilla_SMSG_PETITION_SIGN_RESULTS SMSG_PETITION_SIGN_RESULTS;
        vanilla_MSG_PETITION_DECLINE MSG_PETITION_DECLINE;
        vanilla_SMSG_TURN_IN_PETITION_RESULTS SMSG_TURN_IN_PETITION_RESULTS;
        vanilla_SMSG_PETITION_QUERY_RESPONSE SMSG_PETITION_QUERY_RESPONSE;
        vanilla_SMSG_NOTIFICATION SMSG_NOTIFICATION;
        vanilla_SMSG_PLAYED_TIME SMSG_PLAYED_TIME;
        vanilla_SMSG_QUERY_TIME_RESPONSE SMSG_QUERY_TIME_RESPONSE;
        vanilla_SMSG_LOG_XPGAIN SMSG_LOG_XPGAIN;
        vanilla_SMSG_LEVELUP_INFO SMSG_LEVELUP_INFO;
        vanilla_MSG_MINIMAP_PING_Server MSG_MINIMAP_PING_Server;
        vanilla_SMSG_RESISTLOG SMSG_RESISTLOG;
        vanilla_SMSG_ENCHANTMENTLOG SMSG_ENCHANTMENTLOG;
        vanilla_SMSG_START_MIRROR_TIMER SMSG_START_MIRROR_TIMER;
        vanilla_SMSG_PAUSE_MIRROR_TIMER SMSG_PAUSE_MIRROR_TIMER;
        vanilla_SMSG_STOP_MIRROR_TIMER SMSG_STOP_MIRROR_TIMER;
        vanilla_SMSG_PONG SMSG_PONG;
        vanilla_SMSG_CLEAR_COOLDOWN SMSG_CLEAR_COOLDOWN;
        vanilla_SMSG_GAMEOBJECT_PAGETEXT SMSG_GAMEOBJECT_PAGETEXT;
        vanilla_SMSG_SPELL_DELAYED SMSG_SPELL_DELAYED;
        vanilla_SMSG_ITEM_TIME_UPDATE SMSG_ITEM_TIME_UPDATE;
        vanilla_SMSG_ITEM_ENCHANT_TIME_UPDATE SMSG_ITEM_ENCHANT_TIME_UPDATE;
        vanilla_SMSG_AUTH_CHALLENGE SMSG_AUTH_CHALLENGE;
        vanilla_SMSG_AUTH_RESPONSE SMSG_AUTH_RESPONSE;
        vanilla_MSG_SAVE_GUILD_EMBLEM_Server MSG_SAVE_GUILD_EMBLEM_Server;
        vanilla_MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE;
        vanilla_SMSG_PLAY_SPELL_VISUAL SMSG_PLAY_SPELL_VISUAL;
        vanilla_SMSG_PARTYKILLLOG SMSG_PARTYKILLLOG;
        vanilla_SMSG_COMPRESSED_UPDATE_OBJECT SMSG_COMPRESSED_UPDATE_OBJECT;
        vanilla_SMSG_PLAY_SPELL_IMPACT SMSG_PLAY_SPELL_IMPACT;
        vanilla_SMSG_EXPLORATION_EXPERIENCE SMSG_EXPLORATION_EXPERIENCE;
        vanilla_MSG_RANDOM_ROLL_Server MSG_RANDOM_ROLL_Server;
        vanilla_SMSG_ENVIRONMENTAL_DAMAGE_LOG SMSG_ENVIRONMENTAL_DAMAGE_LOG;
        vanilla_MSG_LOOKING_FOR_GROUP_Server MSG_LOOKING_FOR_GROUP_Server;
        vanilla_SMSG_REMOVED_SPELL SMSG_REMOVED_SPELL;
        vanilla_SMSG_GMTICKET_CREATE SMSG_GMTICKET_CREATE;
        vanilla_SMSG_GMTICKET_UPDATETEXT SMSG_GMTICKET_UPDATETEXT;
        vanilla_SMSG_ACCOUNT_DATA_TIMES SMSG_ACCOUNT_DATA_TIMES;
        vanilla_SMSG_GMTICKET_GETTICKET SMSG_GMTICKET_GETTICKET;
        vanilla_SMSG_GAMEOBJECT_SPAWN_ANIM SMSG_GAMEOBJECT_SPAWN_ANIM;
        vanilla_SMSG_GAMEOBJECT_DESPAWN_ANIM SMSG_GAMEOBJECT_DESPAWN_ANIM;
        vanilla_MSG_CORPSE_QUERY_Server MSG_CORPSE_QUERY_Server;
        vanilla_SMSG_GMTICKET_DELETETICKET SMSG_GMTICKET_DELETETICKET;
        vanilla_SMSG_GMTICKET_SYSTEMSTATUS SMSG_GMTICKET_SYSTEMSTATUS;
        vanilla_SMSG_SET_REST_START SMSG_SET_REST_START;
        vanilla_SMSG_SPIRIT_HEALER_CONFIRM SMSG_SPIRIT_HEALER_CONFIRM;
        vanilla_SMSG_GOSSIP_POI SMSG_GOSSIP_POI;
        vanilla_SMSG_LOGIN_VERIFY_WORLD SMSG_LOGIN_VERIFY_WORLD;
        vanilla_SMSG_SEND_MAIL_RESULT SMSG_SEND_MAIL_RESULT;
        vanilla_SMSG_MAIL_LIST_RESULT SMSG_MAIL_LIST_RESULT;
        vanilla_SMSG_BATTLEFIELD_LIST SMSG_BATTLEFIELD_LIST;
        vanilla_SMSG_ITEM_TEXT_QUERY_RESPONSE SMSG_ITEM_TEXT_QUERY_RESPONSE;
        vanilla_SMSG_SPELLLOGMISS SMSG_SPELLLOGMISS;
        vanilla_SMSG_SPELLLOGEXECUTE SMSG_SPELLLOGEXECUTE;
        vanilla_SMSG_PERIODICAURALOG SMSG_PERIODICAURALOG;
        vanilla_SMSG_SPELLDAMAGESHIELD SMSG_SPELLDAMAGESHIELD;
        vanilla_SMSG_SPELLNONMELEEDAMAGELOG SMSG_SPELLNONMELEEDAMAGELOG;
        vanilla_SMSG_ZONE_UNDER_ATTACK SMSG_ZONE_UNDER_ATTACK;
        vanilla_MSG_AUCTION_HELLO_Server MSG_AUCTION_HELLO_Server;
        vanilla_SMSG_AUCTION_COMMAND_RESULT SMSG_AUCTION_COMMAND_RESULT;
        vanilla_SMSG_AUCTION_LIST_RESULT SMSG_AUCTION_LIST_RESULT;
        vanilla_SMSG_AUCTION_OWNER_LIST_RESULT SMSG_AUCTION_OWNER_LIST_RESULT;
        vanilla_SMSG_AUCTION_BIDDER_NOTIFICATION SMSG_AUCTION_BIDDER_NOTIFICATION;
        vanilla_SMSG_AUCTION_OWNER_NOTIFICATION SMSG_AUCTION_OWNER_NOTIFICATION;
        vanilla_SMSG_PROCRESIST SMSG_PROCRESIST;
        vanilla_SMSG_DISPEL_FAILED SMSG_DISPEL_FAILED;
        vanilla_SMSG_SPELLORDAMAGE_IMMUNE SMSG_SPELLORDAMAGE_IMMUNE;
        vanilla_SMSG_AUCTION_BIDDER_LIST_RESULT SMSG_AUCTION_BIDDER_LIST_RESULT;
        vanilla_SMSG_SET_FLAT_SPELL_MODIFIER SMSG_SET_FLAT_SPELL_MODIFIER;
        vanilla_SMSG_SET_PCT_SPELL_MODIFIER SMSG_SET_PCT_SPELL_MODIFIER;
        vanilla_SMSG_CORPSE_RECLAIM_DELAY SMSG_CORPSE_RECLAIM_DELAY;
        vanilla_MSG_LIST_STABLED_PETS_Server MSG_LIST_STABLED_PETS_Server;
        vanilla_SMSG_STABLE_RESULT SMSG_STABLE_RESULT;
        vanilla_MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT;
        vanilla_SMSG_PLAY_MUSIC SMSG_PLAY_MUSIC;
        vanilla_SMSG_PLAY_OBJECT_SOUND SMSG_PLAY_OBJECT_SOUND;
        vanilla_SMSG_SPELLDISPELLOG SMSG_SPELLDISPELLOG;
        vanilla_MSG_QUERY_NEXT_MAIL_TIME_Server MSG_QUERY_NEXT_MAIL_TIME_Server;
        vanilla_SMSG_RECEIVED_MAIL SMSG_RECEIVED_MAIL;
        vanilla_SMSG_RAID_GROUP_ONLY SMSG_RAID_GROUP_ONLY;
        vanilla_SMSG_PVP_CREDIT SMSG_PVP_CREDIT;
        vanilla_SMSG_AUCTION_REMOVED_NOTIFICATION SMSG_AUCTION_REMOVED_NOTIFICATION;
        vanilla_SMSG_SERVER_MESSAGE SMSG_SERVER_MESSAGE;
        vanilla_SMSG_MEETINGSTONE_SETQUEUE SMSG_MEETINGSTONE_SETQUEUE;
        vanilla_SMSG_MEETINGSTONE_MEMBER_ADDED SMSG_MEETINGSTONE_MEMBER_ADDED;
        vanilla_SMSG_STANDSTATE_UPDATE SMSG_STANDSTATE_UPDATE;
        vanilla_SMSG_LOOT_ALL_PASSED SMSG_LOOT_ALL_PASSED;
        vanilla_SMSG_LOOT_ROLL_WON SMSG_LOOT_ROLL_WON;
        vanilla_SMSG_LOOT_START_ROLL SMSG_LOOT_START_ROLL;
        vanilla_SMSG_LOOT_ROLL SMSG_LOOT_ROLL;
        vanilla_SMSG_LOOT_MASTER_LIST SMSG_LOOT_MASTER_LIST;
        vanilla_SMSG_SET_FORCED_REACTIONS SMSG_SET_FORCED_REACTIONS;
        vanilla_SMSG_SPELL_FAILED_OTHER SMSG_SPELL_FAILED_OTHER;
        vanilla_SMSG_GAMEOBJECT_RESET_STATE SMSG_GAMEOBJECT_RESET_STATE;
        vanilla_SMSG_CHAT_PLAYER_NOT_FOUND SMSG_CHAT_PLAYER_NOT_FOUND;
        vanilla_MSG_TALENT_WIPE_CONFIRM_Server MSG_TALENT_WIPE_CONFIRM_Server;
        vanilla_SMSG_SUMMON_REQUEST SMSG_SUMMON_REQUEST;
        vanilla_SMSG_MONSTER_MOVE_TRANSPORT SMSG_MONSTER_MOVE_TRANSPORT;
        vanilla_MSG_MOVE_FEATHER_FALL_Server MSG_MOVE_FEATHER_FALL_Server;
        vanilla_MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK;
        vanilla_SMSG_DUEL_COUNTDOWN SMSG_DUEL_COUNTDOWN;
        vanilla_SMSG_AREA_TRIGGER_MESSAGE SMSG_AREA_TRIGGER_MESSAGE;
        vanilla_SMSG_MEETINGSTONE_JOINFAILED SMSG_MEETINGSTONE_JOINFAILED;
        vanilla_SMSG_PLAYER_SKINNED SMSG_PLAYER_SKINNED;
        vanilla_MSG_PETITION_RENAME MSG_PETITION_RENAME;
        vanilla_SMSG_INIT_WORLD_STATES SMSG_INIT_WORLD_STATES;
        vanilla_SMSG_UPDATE_WORLD_STATE SMSG_UPDATE_WORLD_STATE;
        vanilla_SMSG_ITEM_NAME_QUERY_RESPONSE SMSG_ITEM_NAME_QUERY_RESPONSE;
        vanilla_SMSG_PET_ACTION_FEEDBACK SMSG_PET_ACTION_FEEDBACK;
        vanilla_SMSG_CHAR_RENAME SMSG_CHAR_RENAME;
        vanilla_SMSG_INSTANCE_SAVE_CREATED SMSG_INSTANCE_SAVE_CREATED;
        vanilla_SMSG_RAID_INSTANCE_INFO SMSG_RAID_INSTANCE_INFO;
        vanilla_SMSG_PLAY_SOUND SMSG_PLAY_SOUND;
        vanilla_SMSG_BATTLEFIELD_STATUS SMSG_BATTLEFIELD_STATUS;
        vanilla_MSG_INSPECT_HONOR_STATS_Server MSG_INSPECT_HONOR_STATS_Server;
        vanilla_SMSG_FORCE_WALK_SPEED_CHANGE SMSG_FORCE_WALK_SPEED_CHANGE;
        vanilla_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
        vanilla_SMSG_FORCE_TURN_RATE_CHANGE SMSG_FORCE_TURN_RATE_CHANGE;
        vanilla_MSG_PVP_LOG_DATA_Server MSG_PVP_LOG_DATA_Server;
        vanilla_SMSG_AREA_SPIRIT_HEALER_TIME SMSG_AREA_SPIRIT_HEALER_TIME;
        vanilla_SMSG_WARDEN_DATA SMSG_WARDEN_DATA;
        vanilla_SMSG_GROUP_JOINED_BATTLEGROUND SMSG_GROUP_JOINED_BATTLEGROUND;
        vanilla_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server MSG_BATTLEGROUND_PLAYER_POSITIONS_Server;
        vanilla_SMSG_BINDER_CONFIRM SMSG_BINDER_CONFIRM;
        vanilla_SMSG_BATTLEGROUND_PLAYER_JOINED SMSG_BATTLEGROUND_PLAYER_JOINED;
        vanilla_SMSG_BATTLEGROUND_PLAYER_LEFT SMSG_BATTLEGROUND_PLAYER_LEFT;
        vanilla_SMSG_ADDON_INFO SMSG_ADDON_INFO;
        vanilla_SMSG_PET_UNLEARN_CONFIRM SMSG_PET_UNLEARN_CONFIRM;
        vanilla_SMSG_PARTY_MEMBER_STATS_FULL SMSG_PARTY_MEMBER_STATS_FULL;
        vanilla_SMSG_WEATHER SMSG_WEATHER;
        vanilla_SMSG_RAID_INSTANCE_MESSAGE SMSG_RAID_INSTANCE_MESSAGE;
        vanilla_SMSG_COMPRESSED_MOVES SMSG_COMPRESSED_MOVES;
        vanilla_SMSG_SPLINE_SET_RUN_SPEED SMSG_SPLINE_SET_RUN_SPEED;
        vanilla_SMSG_SPLINE_SET_RUN_BACK_SPEED SMSG_SPLINE_SET_RUN_BACK_SPEED;
        vanilla_SMSG_SPLINE_SET_SWIM_SPEED SMSG_SPLINE_SET_SWIM_SPEED;
        vanilla_SMSG_SPLINE_SET_WALK_SPEED SMSG_SPLINE_SET_WALK_SPEED;
        vanilla_SMSG_SPLINE_SET_SWIM_BACK_SPEED SMSG_SPLINE_SET_SWIM_BACK_SPEED;
        vanilla_SMSG_SPLINE_SET_TURN_RATE SMSG_SPLINE_SET_TURN_RATE;
        vanilla_SMSG_SPLINE_MOVE_UNROOT SMSG_SPLINE_MOVE_UNROOT;
        vanilla_SMSG_SPLINE_MOVE_FEATHER_FALL SMSG_SPLINE_MOVE_FEATHER_FALL;
        vanilla_SMSG_SPLINE_MOVE_NORMAL_FALL SMSG_SPLINE_MOVE_NORMAL_FALL;
        vanilla_SMSG_SPLINE_MOVE_SET_HOVER SMSG_SPLINE_MOVE_SET_HOVER;
        vanilla_SMSG_SPLINE_MOVE_UNSET_HOVER SMSG_SPLINE_MOVE_UNSET_HOVER;
        vanilla_SMSG_SPLINE_MOVE_WATER_WALK SMSG_SPLINE_MOVE_WATER_WALK;
        vanilla_SMSG_SPLINE_MOVE_LAND_WALK SMSG_SPLINE_MOVE_LAND_WALK;
        vanilla_SMSG_SPLINE_MOVE_START_SWIM SMSG_SPLINE_MOVE_START_SWIM;
        vanilla_SMSG_SPLINE_MOVE_STOP_SWIM SMSG_SPLINE_MOVE_STOP_SWIM;
        vanilla_SMSG_SPLINE_MOVE_SET_RUN_MODE SMSG_SPLINE_MOVE_SET_RUN_MODE;
        vanilla_SMSG_SPLINE_MOVE_SET_WALK_MODE SMSG_SPLINE_MOVE_SET_WALK_MODE;
        vanilla_MSG_MOVE_TIME_SKIPPED_Server MSG_MOVE_TIME_SKIPPED_Server;
        vanilla_SMSG_SPLINE_MOVE_ROOT SMSG_SPLINE_MOVE_ROOT;
        vanilla_SMSG_INVALIDATE_PLAYER SMSG_INVALIDATE_PLAYER;
        vanilla_SMSG_INSTANCE_RESET SMSG_INSTANCE_RESET;
        vanilla_SMSG_INSTANCE_RESET_FAILED SMSG_INSTANCE_RESET_FAILED;
        vanilla_SMSG_UPDATE_LAST_INSTANCE SMSG_UPDATE_LAST_INSTANCE;
        vanilla_MSG_RAID_TARGET_UPDATE_Server MSG_RAID_TARGET_UPDATE_Server;
        vanilla_MSG_RAID_READY_CHECK_Server MSG_RAID_READY_CHECK_Server;
        vanilla_SMSG_PET_ACTION_SOUND SMSG_PET_ACTION_SOUND;
        vanilla_SMSG_PET_DISMISS_SOUND SMSG_PET_DISMISS_SOUND;
        vanilla_SMSG_GM_TICKET_STATUS_UPDATE SMSG_GM_TICKET_STATUS_UPDATE;
        vanilla_SMSG_UPDATE_INSTANCE_OWNERSHIP SMSG_UPDATE_INSTANCE_OWNERSHIP;
        vanilla_SMSG_SPELLINSTAKILLLOG SMSG_SPELLINSTAKILLLOG;
        vanilla_SMSG_SPELL_UPDATE_CHAIN_TARGETS SMSG_SPELL_UPDATE_CHAIN_TARGETS;
        vanilla_SMSG_EXPECTED_SPAM_RECORDS SMSG_EXPECTED_SPAM_RECORDS;
        vanilla_SMSG_DEFENSE_MESSAGE SMSG_DEFENSE_MESSAGE;
    } body;
} VanillaServerOpcodeContainer;

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_server_opcode_write(WowWorldWriter* writer, const VanillaServerOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult vanilla_server_opcode_read(WowWorldReader* reader, VanillaServerOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT void vanilla_server_opcode_free(VanillaServerOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT char* vanilla_server_opcode_to_str(VanillaServerOpcodeContainer* opcodes);
#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* WOW_WORLD_MESSAGES_VANILLA_H */
