#ifndef WOW_WORLD_MESSAGES_WRATH_H
#define WOW_WORLD_MESSAGES_WRATH_H

/* clang-format off */

#include "wow_world_messages/wow_world_messages.h"
#include "wow_world_messages/all.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
typedef enum {
    WRATH_ACHIEVEMENT_NAME_LINK_TYPE_NORMAL = 0,
    WRATH_ACHIEVEMENT_NAME_LINK_TYPE_CLICKABLE = 1
} wrath_AchievementNameLinkType;

typedef enum {
    WRATH_ACTION_BAR_BEHAVIOR_INITIAL = 0,
    WRATH_ACTION_BAR_BEHAVIOR_SET = 1,
    WRATH_ACTION_BAR_BEHAVIOR_CLEAR = 2
} wrath_ActionBarBehavior;

typedef enum {
    WRATH_ACTIVATE_TAXI_REPLY_OK = 0,
    WRATH_ACTIVATE_TAXI_REPLY_UNSPECIFIED_SERVER_ERROR = 1,
    WRATH_ACTIVATE_TAXI_REPLY_NO_SUCH_PATH = 2,
    WRATH_ACTIVATE_TAXI_REPLY_NOT_ENOUGH_MONEY = 3,
    WRATH_ACTIVATE_TAXI_REPLY_TOO_FAR_AWAY = 4,
    WRATH_ACTIVATE_TAXI_REPLY_NO_VENDOR_NEARBY = 5,
    WRATH_ACTIVATE_TAXI_REPLY_NOT_VISITED = 6,
    WRATH_ACTIVATE_TAXI_REPLY_PLAYER_BUSY = 7,
    WRATH_ACTIVATE_TAXI_REPLY_PLAYER_ALREADY_MOUNTED = 8,
    WRATH_ACTIVATE_TAXI_REPLY_PLAYER_SHAPE_SHIFTED = 9,
    WRATH_ACTIVATE_TAXI_REPLY_PLAYER_MOVING = 10,
    WRATH_ACTIVATE_TAXI_REPLY_SAME_NODE = 11,
    WRATH_ACTIVATE_TAXI_REPLY_NOT_STANDING = 12
} wrath_ActivateTaxiReply;

typedef enum {
    WRATH_AI_REACTION_ALERT = 0,
    WRATH_AI_REACTION_FRIENDLY = 1,
    WRATH_AI_REACTION_HOSTILE = 2,
    WRATH_AI_REACTION_AFRAID = 3,
    WRATH_AI_REACTION_DESTROY = 4
} wrath_AiReaction;

typedef enum {
    WRATH_AREA_NONE = 0,
    WRATH_AREA_DUN_MOROGH = 1,
    WRATH_AREA_LONGSHORE = 2,
    WRATH_AREA_BADLANDS = 3,
    WRATH_AREA_BLASTED_LANDS = 4,
    WRATH_AREA_BLACKWATER_COVE = 7,
    WRATH_AREA_SWAMP_OF_SORROWS = 8,
    WRATH_AREA_NORTHSHIRE_VALLEY = 9,
    WRATH_AREA_DUSKWOOD = 10,
    WRATH_AREA_WETLANDS = 11,
    WRATH_AREA_ELWYNN_FOREST = 12,
    WRATH_AREA_THE_WORLD_TREE = 13,
    WRATH_AREA_DUROTAR = 14,
    WRATH_AREA_DUSTWALLOW_MARSH = 15,
    WRATH_AREA_AZSHARA = 16,
    WRATH_AREA_THE_BARRENS = 17,
    WRATH_AREA_CRYSTAL_LAKE = 18,
    WRATH_AREA_ZUL_GURUB = 19,
    WRATH_AREA_MOONBROOK = 20,
    WRATH_AREA_KUL_TIRAS = 21,
    WRATH_AREA_PROGRAMMER_ISLE = 22,
    WRATH_AREA_NORTHSHIRE_RIVER = 23,
    WRATH_AREA_NORTHSHIRE_ABBEY = 24,
    WRATH_AREA_BLACKROCK_MOUNTAIN = 25,
    WRATH_AREA_LIGHTHOUSE = 26,
    WRATH_AREA_WESTERN_PLAGUELANDS = 28,
    WRATH_AREA_NINE = 30,
    WRATH_AREA_THE_CEMETARY = 32,
    WRATH_AREA_STRANGLETHORN_VALE = 33,
    WRATH_AREA_ECHO_RIDGE_MINE = 34,
    WRATH_AREA_BOOTY_BAY = 35,
    WRATH_AREA_ALTERAC_MOUNTAINS = 36,
    WRATH_AREA_LAKE_NAZFERITI = 37,
    WRATH_AREA_LOCH_MODAN = 38,
    WRATH_AREA_WESTFALL = 40,
    WRATH_AREA_DEADWIND_PASS = 41,
    WRATH_AREA_DARKSHIRE = 42,
    WRATH_AREA_WILD_SHORE = 43,
    WRATH_AREA_REDRIDGE_MOUNTAINS = 44,
    WRATH_AREA_ARATHI_HIGHLANDS = 45,
    WRATH_AREA_BURNING_STEPPES = 46,
    WRATH_AREA_THE_HINTERLANDS = 47,
    WRATH_AREA_DEAD_MANS_HOLE = 49,
    WRATH_AREA_SEARING_GORGE = 51,
    WRATH_AREA_THIEVES_CAMP = 53,
    WRATH_AREA_JASPERLODE_MINE = 54,
    WRATH_AREA_VALLEY_OF_HEROES_UNUSED = 55,
    WRATH_AREA_HEROES_VIGIL = 56,
    WRATH_AREA_FARGODEEP_MINE = 57,
    WRATH_AREA_NORTHSHIRE_VINEYARDS = 59,
    WRATH_AREA_FORESTS_EDGE = 60,
    WRATH_AREA_THUNDER_FALLS = 61,
    WRATH_AREA_BRACKWELL_PUMPKIN_PATCH = 62,
    WRATH_AREA_THE_STONEFIELD_FARM = 63,
    WRATH_AREA_THE_MACLURE_VINEYARDS = 64,
    WRATH_AREA_DRAGONBLIGHT = 65,
    WRATH_AREA_ZUL_DRAK = 66,
    WRATH_AREA_THE_STORM_PEAKS = 67,
    WRATH_AREA_LAKE_EVERSTILL = 68,
    WRATH_AREA_LAKESHIRE = 69,
    WRATH_AREA_STONEWATCH = 70,
    WRATH_AREA_STONEWATCH_FALLS = 71,
    WRATH_AREA_THE_DARK_PORTAL = 72,
    WRATH_AREA_THE_TAINTED_SCAR = 73,
    WRATH_AREA_POOL_OF_TEARS = 74,
    WRATH_AREA_STONARD = 75,
    WRATH_AREA_FALLOW_SANCTUARY = 76,
    WRATH_AREA_ANVILMAR = 77,
    WRATH_AREA_STORMWIND_MOUNTAINS = 80,
    WRATH_AREA_JEFF_NE_QUADRANT_CHANGED = 81,
    WRATH_AREA_JEFF_NW_QUADRANT = 82,
    WRATH_AREA_JEFF_SE_QUADRANT = 83,
    WRATH_AREA_JEFF_SW_QUADRANT = 84,
    WRATH_AREA_TIRISFAL_GLADES = 85,
    WRATH_AREA_STONE_CAIRN_LAKE = 86,
    WRATH_AREA_GOLDSHIRE = 87,
    WRATH_AREA_EASTVALE_LOGGING_CAMP = 88,
    WRATH_AREA_MIRROR_LAKE_ORCHARD = 89,
    WRATH_AREA_TOWER_OF_AZORA = 91,
    WRATH_AREA_MIRROR_LAKE = 92,
    WRATH_AREA_VUL_GOL_OGRE_MOUND = 93,
    WRATH_AREA_RAVEN_HILL = 94,
    WRATH_AREA_REDRIDGE_CANYONS = 95,
    WRATH_AREA_TOWER_OF_ILGALAR = 96,
    WRATH_AREA_ALTHERS_MILL = 97,
    WRATH_AREA_RETHBAN_CAVERNS = 98,
    WRATH_AREA_REBEL_CAMP = 99,
    WRATH_AREA_NESINGWARYS_EXPEDITION = 100,
    WRATH_AREA_KURZENS_COMPOUND = 101,
    WRATH_AREA_RUINS_OF_ZUL_KUNDA = 102,
    WRATH_AREA_RUINS_OF_ZUL_MAMWE = 103,
    WRATH_AREA_THE_VILE_REEF = 104,
    WRATH_AREA_MOSH_OGG_OGRE_MOUND = 105,
    WRATH_AREA_THE_STOCKPILE = 106,
    WRATH_AREA_SALDEANS_FARM = 107,
    WRATH_AREA_SENTINEL_HILL = 108,
    WRATH_AREA_FURLBROWS_PUMPKIN_FARM = 109,
    WRATH_AREA_JANGOLODE_MINE = 111,
    WRATH_AREA_GOLD_COAST_QUARRY = 113,
    WRATH_AREA_WESTFALL_LIGHTHOUSE = 115,
    WRATH_AREA_MISTY_VALLEY = 116,
    WRATH_AREA_GROM_GOL_BASE_CAMP = 117,
    WRATH_AREA_WHELGARS_EXCAVATION_SITE = 118,
    WRATH_AREA_WESTBROOK_GARRISON = 120,
    WRATH_AREA_TRANQUIL_GARDENS_CEMETERY = 121,
    WRATH_AREA_ZUULDAIA_RUINS = 122,
    WRATH_AREA_BAL_LAL_RUINS = 123,
    WRATH_AREA_KAL_AI_RUINS = 125,
    WRATH_AREA_TKASHI_RUINS = 126,
    WRATH_AREA_BALIA_MAH_RUINS = 127,
    WRATH_AREA_ZIATA_JAI_RUINS = 128,
    WRATH_AREA_MIZJAH_RUINS = 129,
    WRATH_AREA_SILVERPINE_FOREST = 130,
    WRATH_AREA_KHARANOS = 131,
    WRATH_AREA_COLDRIDGE_VALLEY = 132,
    WRATH_AREA_GNOMEREGAN = 133,
    WRATH_AREA_GOL_BOLAR_QUARRY = 134,
    WRATH_AREA_FROSTMANE_HOLD = 135,
    WRATH_AREA_THE_GRIZZLED_DEN = 136,
    WRATH_AREA_BREWNALL_VILLAGE = 137,
    WRATH_AREA_MISTY_PINE_REFUGE = 138,
    WRATH_AREA_EASTERN_PLAGUELANDS = 139,
    WRATH_AREA_TELDRASSIL = 141,
    WRATH_AREA_IRONBANDS_EXCAVATION_SITE = 142,
    WRATH_AREA_MO_GROSH_STRONGHOLD = 143,
    WRATH_AREA_THELSAMAR = 144,
    WRATH_AREA_ALGAZ_GATE = 145,
    WRATH_AREA_STONEWROUGHT_DAM = 146,
    WRATH_AREA_THE_FARSTRIDER_LODGE = 147,
    WRATH_AREA_DARKSHORE = 148,
    WRATH_AREA_SILVER_STREAM_MINE = 149,
    WRATH_AREA_MENETHIL_HARBOR = 150,
    WRATH_AREA_DESIGNER_ISLAND = 151,
    WRATH_AREA_THE_BULWARK = 152,
    WRATH_AREA_RUINS_OF_LORDAERON = 153,
    WRATH_AREA_DEATHKNELL = 154,
    WRATH_AREA_NIGHT_WEBS_HOLLOW = 155,
    WRATH_AREA_SOLLIDEN_FARMSTEAD = 156,
    WRATH_AREA_AGAMAND_MILLS = 157,
    WRATH_AREA_AGAMAND_FAMILY_CRYPT = 158,
    WRATH_AREA_BRILL = 159,
    WRATH_AREA_WHISPERING_GARDENS = 160,
    WRATH_AREA_TERRACE_OF_REPOSE = 161,
    WRATH_AREA_BRIGHTWATER_LAKE = 162,
    WRATH_AREA_GUNTHERS_RETREAT = 163,
    WRATH_AREA_GARRENS_HAUNT = 164,
    WRATH_AREA_BALNIR_FARMSTEAD = 165,
    WRATH_AREA_COLD_HEARTH_MANOR = 166,
    WRATH_AREA_CRUSADER_OUTPOST = 167,
    WRATH_AREA_THE_NORTH_COAST = 168,
    WRATH_AREA_WHISPERING_SHORE = 169,
    WRATH_AREA_LORDAMERE_LAKE = 170,
    WRATH_AREA_FENRIS_ISLE = 172,
    WRATH_AREA_FAOLS_REST = 173,
    WRATH_AREA_DOLANAAR = 186,
    WRATH_AREA_DARNASSUS_UNUSED = 187,
    WRATH_AREA_SHADOWGLEN = 188,
    WRATH_AREA_STEELGRILLS_DEPOT = 189,
    WRATH_AREA_HEARTHGLEN = 190,
    WRATH_AREA_NORTHRIDGE_LUMBER_CAMP = 192,
    WRATH_AREA_RUINS_OF_ANDORHAL = 193,
    WRATH_AREA_SCHOOL_OF_NECROMANCY = 195,
    WRATH_AREA_UTHERS_TOMB = 196,
    WRATH_AREA_SORROW_HILL = 197,
    WRATH_AREA_THE_WEEPING_CAVE = 198,
    WRATH_AREA_FELSTONE_FIELD = 199,
    WRATH_AREA_DALSONS_TEARS = 200,
    WRATH_AREA_GAHRRONS_WITHERING = 201,
    WRATH_AREA_THE_WRITHING_HAUNT = 202,
    WRATH_AREA_MARDENHOLDE_KEEP = 203,
    WRATH_AREA_PYREWOOD_VILLAGE = 204,
    WRATH_AREA_DUN_MODR = 205,
    WRATH_AREA_UTGARDE_KEEP = 206,
    WRATH_AREA_THE_GREAT_SEA = 207,
    WRATH_AREA_UNUSED_IRONCLADCOVE = 208,
    WRATH_AREA_SHADOWFANG_KEEP = 209,
    WRATH_AREA_ICECROWN = 210,
    WRATH_AREA_ICEFLOW_LAKE = 211,
    WRATH_AREA_HELMS_BED_LAKE = 212,
    WRATH_AREA_DEEP_ELEM_MINE = 213,
    WRATH_AREA_THE_GREAT_SEA1 = 214,
    WRATH_AREA_MULGORE = 215,
    WRATH_AREA_ALEXSTON_FARMSTEAD = 219,
    WRATH_AREA_RED_CLOUD_MESA = 220,
    WRATH_AREA_CAMP_NARACHE = 221,
    WRATH_AREA_BLOODHOOF_VILLAGE = 222,
    WRATH_AREA_STONEBULL_LAKE = 223,
    WRATH_AREA_RAVAGED_CARAVAN = 224,
    WRATH_AREA_RED_ROCKS = 225,
    WRATH_AREA_THE_SKITTERING_DARK = 226,
    WRATH_AREA_VALGANS_FIELD = 227,
    WRATH_AREA_THE_SEPULCHER = 228,
    WRATH_AREA_OLSENS_FARTHING = 229,
    WRATH_AREA_THE_GREYMANE_WALL = 230,
    WRATH_AREA_BERENS_PERIL = 231,
    WRATH_AREA_THE_DAWNING_ISLES = 232,
    WRATH_AREA_AMBERMILL = 233,
    WRATH_AREA_FENRIS_KEEP = 235,
    WRATH_AREA_SHADOWFANG_KEEP1 = 236,
    WRATH_AREA_THE_DECREPIT_FERRY = 237,
    WRATH_AREA_MALDENS_ORCHARD = 238,
    WRATH_AREA_THE_IVAR_PATCH = 239,
    WRATH_AREA_THE_DEAD_FIELD = 240,
    WRATH_AREA_THE_ROTTING_ORCHARD = 241,
    WRATH_AREA_BRIGHTWOOD_GROVE = 242,
    WRATH_AREA_FORLORN_ROWE = 243,
    WRATH_AREA_THE_WHIPPLE_ESTATE = 244,
    WRATH_AREA_THE_YORGEN_FARMSTEAD = 245,
    WRATH_AREA_THE_CAULDRON = 246,
    WRATH_AREA_GRIMESILT_DIG_SITE = 247,
    WRATH_AREA_DREADMAUL_ROCK = 249,
    WRATH_AREA_RUINS_OF_THAURISSAN = 250,
    WRATH_AREA_FLAME_CREST = 251,
    WRATH_AREA_BLACKROCK_STRONGHOLD = 252,
    WRATH_AREA_THE_PILLAR_OF_ASH = 253,
    WRATH_AREA_BLACKROCK_MOUNTAIN1 = 254,
    WRATH_AREA_ALTAR_OF_STORMS = 255,
    WRATH_AREA_ALDRASSIL = 256,
    WRATH_AREA_SHADOWTHREAD_CAVE = 257,
    WRATH_AREA_FEL_ROCK = 258,
    WRATH_AREA_LAKE_AL_AMETH = 259,
    WRATH_AREA_STARBREEZE_VILLAGE = 260,
    WRATH_AREA_GNARLPINE_HOLD = 261,
    WRATH_AREA_BAN_ETHIL_BARROW_DEN = 262,
    WRATH_AREA_THE_CLEFT = 263,
    WRATH_AREA_THE_ORACLE_GLADE = 264,
    WRATH_AREA_WELLSPRING_RIVER = 265,
    WRATH_AREA_WELLSPRING_LAKE = 266,
    WRATH_AREA_HILLSBRAD_FOOTHILLS = 267,
    WRATH_AREA_AZSHARA_CRATER = 268,
    WRATH_AREA_DUN_ALGAZ = 269,
    WRATH_AREA_SOUTHSHORE = 271,
    WRATH_AREA_TARREN_MILL = 272,
    WRATH_AREA_DURNHOLDE_KEEP = 275,
    WRATH_AREA_UNUSED_STONEWROUGHT_PASS = 276,
    WRATH_AREA_THE_FOOTHILL_CAVERNS = 277,
    WRATH_AREA_LORDAMERE_INTERNMENT_CAMP = 278,
    WRATH_AREA_DALARAN_CRATER = 279,
    WRATH_AREA_STRAHNBRAD = 280,
    WRATH_AREA_RUINS_OF_ALTERAC = 281,
    WRATH_AREA_CRUSHRIDGE_HOLD = 282,
    WRATH_AREA_SLAUGHTER_HOLLOW = 283,
    WRATH_AREA_THE_UPLANDS = 284,
    WRATH_AREA_SOUTHPOINT_TOWER = 285,
    WRATH_AREA_HILLSBRAD_FIELDS = 286,
    WRATH_AREA_HILLSBRAD = 287,
    WRATH_AREA_AZURELODE_MINE = 288,
    WRATH_AREA_NETHANDER_STEAD = 289,
    WRATH_AREA_DUN_GAROK = 290,
    WRATH_AREA_THORADINS_WALL = 293,
    WRATH_AREA_EASTERN_STRAND = 294,
    WRATH_AREA_WESTERN_STRAND = 295,
    WRATH_AREA_SOUTH_SEAS_UNUSED = 296,
    WRATH_AREA_JAGUERO_ISLE = 297,
    WRATH_AREA_BARADIN_BAY = 298,
    WRATH_AREA_MENETHIL_BAY = 299,
    WRATH_AREA_MISTY_REED_STRAND = 300,
    WRATH_AREA_THE_SAVAGE_COAST = 301,
    WRATH_AREA_THE_CRYSTAL_SHORE = 302,
    WRATH_AREA_SHELL_BEACH = 303,
    WRATH_AREA_NORTH_TIDES_RUN = 305,
    WRATH_AREA_SOUTH_TIDES_RUN = 306,
    WRATH_AREA_THE_OVERLOOK_CLIFFS = 307,
    WRATH_AREA_THE_FORBIDDING_SEA = 308,
    WRATH_AREA_IRONBEARDS_TOMB = 309,
    WRATH_AREA_CRYSTALVEIN_MINE = 310,
    WRATH_AREA_RUINS_OF_ABORAZ = 311,
    WRATH_AREA_JANEIROS_POINT = 312,
    WRATH_AREA_NORTHFOLD_MANOR = 313,
    WRATH_AREA_GOSHEK_FARM = 314,
    WRATH_AREA_DABYRIES_FARMSTEAD = 315,
    WRATH_AREA_BOULDERFIST_HALL = 316,
    WRATH_AREA_WITHERBARK_VILLAGE = 317,
    WRATH_AREA_DRYWHISKER_GORGE = 318,
    WRATH_AREA_REFUGE_POINTE = 320,
    WRATH_AREA_HAMMERFALL = 321,
    WRATH_AREA_BLACKWATER_SHIPWRECKS = 322,
    WRATH_AREA_O_BREENS_CAMP = 323,
    WRATH_AREA_STROMGARDE_KEEP = 324,
    WRATH_AREA_THE_TOWER_OF_ARATHOR = 325,
    WRATH_AREA_THE_SANCTUM = 326,
    WRATH_AREA_FALDIRS_COVE = 327,
    WRATH_AREA_THE_DROWNED_REEF = 328,
    WRATH_AREA_THANDOL_SPAN = 330,
    WRATH_AREA_ASHENVALE = 331,
    WRATH_AREA_THE_GREAT_SEA2 = 332,
    WRATH_AREA_CIRCLE_OF_EAST_BINDING = 333,
    WRATH_AREA_CIRCLE_OF_WEST_BINDING = 334,
    WRATH_AREA_CIRCLE_OF_INNER_BINDING = 335,
    WRATH_AREA_CIRCLE_OF_OUTER_BINDING = 336,
    WRATH_AREA_APOCRYPHANS_REST = 337,
    WRATH_AREA_ANGOR_FORTRESS = 338,
    WRATH_AREA_LETHLOR_RAVINE = 339,
    WRATH_AREA_KARGATH = 340,
    WRATH_AREA_CAMP_KOSH = 341,
    WRATH_AREA_CAMP_BOFF = 342,
    WRATH_AREA_CAMP_WURG = 343,
    WRATH_AREA_CAMP_CAGG = 344,
    WRATH_AREA_AGMONDS_END = 345,
    WRATH_AREA_HAMMERTOES_DIGSITE = 346,
    WRATH_AREA_DUSTBELCH_GROTTO = 347,
    WRATH_AREA_AERIE_PEAK = 348,
    WRATH_AREA_WILDHAMMER_KEEP = 349,
    WRATH_AREA_QUEL_DANIL_LODGE = 350,
    WRATH_AREA_SKULK_ROCK = 351,
    WRATH_AREA_ZUN_WATHA = 352,
    WRATH_AREA_SHADRA_ALOR = 353,
    WRATH_AREA_JINTHA_ALOR = 354,
    WRATH_AREA_THE_ALTAR_OF_ZUL = 355,
    WRATH_AREA_SERADANE = 356,
    WRATH_AREA_FERALAS = 357,
    WRATH_AREA_BRAMBLEBLADE_RAVINE = 358,
    WRATH_AREA_BAEL_MODAN = 359,
    WRATH_AREA_THE_VENTURE_CO_MINE = 360,
    WRATH_AREA_FELWOOD = 361,
    WRATH_AREA_RAZOR_HILL = 362,
    WRATH_AREA_VALLEY_OF_TRIALS = 363,
    WRATH_AREA_THE_DEN = 364,
    WRATH_AREA_BURNING_BLADE_COVEN = 365,
    WRATH_AREA_KOLKAR_CRAG = 366,
    WRATH_AREA_SEN_JIN_VILLAGE = 367,
    WRATH_AREA_ECHO_ISLES = 368,
    WRATH_AREA_THUNDER_RIDGE = 369,
    WRATH_AREA_DRYGULCH_RAVINE = 370,
    WRATH_AREA_DUSTWIND_CAVE = 371,
    WRATH_AREA_TIRAGARDE_KEEP = 372,
    WRATH_AREA_SCUTTLE_COAST = 373,
    WRATH_AREA_BLADEFIST_BAY = 374,
    WRATH_AREA_DEADEYE_SHORE = 375,
    WRATH_AREA_SOUTHFURY_RIVER = 377,
    WRATH_AREA_CAMP_TAURAJO = 378,
    WRATH_AREA_FAR_WATCH_POST = 379,
    WRATH_AREA_THE_CROSSROADS = 380,
    WRATH_AREA_BOULDER_LODE_MINE = 381,
    WRATH_AREA_THE_SLUDGE_FEN = 382,
    WRATH_AREA_THE_DRY_HILLS = 383,
    WRATH_AREA_DREADMIST_PEAK = 384,
    WRATH_AREA_NORTHWATCH_HOLD = 385,
    WRATH_AREA_THE_FORGOTTEN_POOLS = 386,
    WRATH_AREA_LUSHWATER_OASIS = 387,
    WRATH_AREA_THE_STAGNANT_OASIS = 388,
    WRATH_AREA_FIELD_OF_GIANTS = 390,
    WRATH_AREA_THE_MERCHANT_COAST = 391,
    WRATH_AREA_RATCHET = 392,
    WRATH_AREA_DARKSPEAR_STRAND = 393,
    WRATH_AREA_GRIZZLY_HILLS = 394,
    WRATH_AREA_GRIZZLEMAW = 395,
    WRATH_AREA_WINTERHOOF_WATER_WELL = 396,
    WRATH_AREA_THUNDERHORN_WATER_WELL = 397,
    WRATH_AREA_WILDMANE_WATER_WELL = 398,
    WRATH_AREA_SKYLINE_RIDGE = 399,
    WRATH_AREA_THOUSAND_NEEDLES = 400,
    WRATH_AREA_THE_TIDUS_STAIR = 401,
    WRATH_AREA_SHADY_REST_INN = 403,
    WRATH_AREA_BAEL_DUN_DIGSITE = 404,
    WRATH_AREA_DESOLACE = 405,
    WRATH_AREA_STONETALON_MOUNTAINS = 406,
    WRATH_AREA_ORGRIMMAR_UNUSED = 407,
    WRATH_AREA_GILLIJIMS_ISLE = 408,
    WRATH_AREA_ISLAND_OF_DOCTOR_LAPIDIS = 409,
    WRATH_AREA_RAZORWIND_CANYON = 410,
    WRATH_AREA_BATHRANS_HAUNT = 411,
    WRATH_AREA_THE_RUINS_OF_ORDIL_ARAN = 412,
    WRATH_AREA_MAESTRAS_POST = 413,
    WRATH_AREA_THE_ZORAM_STRAND = 414,
    WRATH_AREA_ASTRANAAR = 415,
    WRATH_AREA_THE_SHRINE_OF_AESSINA = 416,
    WRATH_AREA_FIRE_SCAR_SHRINE = 417,
    WRATH_AREA_THE_RUINS_OF_STARDUST = 418,
    WRATH_AREA_THE_HOWLING_VALE = 419,
    WRATH_AREA_SILVERWIND_REFUGE = 420,
    WRATH_AREA_MYSTRAL_LAKE = 421,
    WRATH_AREA_FALLEN_SKY_LAKE = 422,
    WRATH_AREA_IRIS_LAKE = 424,
    WRATH_AREA_MOONWELL = 425,
    WRATH_AREA_RAYNEWOOD_RETREAT = 426,
    WRATH_AREA_THE_SHADY_NOOK = 427,
    WRATH_AREA_NIGHT_RUN = 428,
    WRATH_AREA_XAVIAN = 429,
    WRATH_AREA_SATYRNAAR = 430,
    WRATH_AREA_SPLINTERTREE_POST = 431,
    WRATH_AREA_THE_DOR_DANIL_BARROW_DEN = 432,
    WRATH_AREA_FALFARREN_RIVER = 433,
    WRATH_AREA_FELFIRE_HILL = 434,
    WRATH_AREA_DEMON_FALL_CANYON = 435,
    WRATH_AREA_DEMON_FALL_RIDGE = 436,
    WRATH_AREA_WARSONG_LUMBER_CAMP = 437,
    WRATH_AREA_BOUGH_SHADOW = 438,
    WRATH_AREA_THE_SHIMMERING_FLATS = 439,
    WRATH_AREA_TANARIS = 440,
    WRATH_AREA_LAKE_FALATHIM = 441,
    WRATH_AREA_AUBERDINE = 442,
    WRATH_AREA_RUINS_OF_MATHYSTRA = 443,
    WRATH_AREA_TOWER_OF_ALTHALAXX = 444,
    WRATH_AREA_CLIFFSPRING_FALLS = 445,
    WRATH_AREA_BASHAL_ARAN = 446,
    WRATH_AREA_AMETH_ARAN = 447,
    WRATH_AREA_GROVE_OF_THE_ANCIENTS = 448,
    WRATH_AREA_THE_MASTERS_GLAIVE = 449,
    WRATH_AREA_REMTRAVELS_EXCAVATION = 450,
    WRATH_AREA_MISTS_EDGE = 452,
    WRATH_AREA_THE_LONG_WASH = 453,
    WRATH_AREA_WILDBEND_RIVER = 454,
    WRATH_AREA_BLACKWOOD_DEN = 455,
    WRATH_AREA_CLIFFSPRING_RIVER = 456,
    WRATH_AREA_THE_VEILED_SEA = 457,
    WRATH_AREA_GOLD_ROAD = 458,
    WRATH_AREA_SCARLET_WATCH_POST = 459,
    WRATH_AREA_SUN_ROCK_RETREAT = 460,
    WRATH_AREA_WINDSHEAR_CRAG = 461,
    WRATH_AREA_CRAGPOOL_LAKE = 463,
    WRATH_AREA_MIRKFALLON_LAKE = 464,
    WRATH_AREA_THE_CHARRED_VALE = 465,
    WRATH_AREA_VALLEY_OF_THE_BLOODFURIES = 466,
    WRATH_AREA_STONETALON_PEAK = 467,
    WRATH_AREA_THE_TALON_DEN = 468,
    WRATH_AREA_GREATWOOD_VALE = 469,
    WRATH_AREA_THUNDER_BLUFF_UNUSED = 470,
    WRATH_AREA_BRAVE_WIND_MESA = 471,
    WRATH_AREA_FIRE_STONE_MESA = 472,
    WRATH_AREA_MANTLE_ROCK = 473,
    WRATH_AREA_HUNTER_RISE_UNUSED = 474,
    WRATH_AREA_SPIRIT_RISEUNUSED = 475,
    WRATH_AREA_ELDER_RISEUNUSED = 476,
    WRATH_AREA_RUINS_OF_JUBUWAL = 477,
    WRATH_AREA_POOLS_OF_ARLITHRIEN = 478,
    WRATH_AREA_THE_RUSTMAUL_DIG_SITE = 479,
    WRATH_AREA_CAMP_E_THOK = 480,
    WRATH_AREA_SPLITHOOF_CRAG = 481,
    WRATH_AREA_HIGHPERCH = 482,
    WRATH_AREA_THE_SCREECHING_CANYON = 483,
    WRATH_AREA_FREEWIND_POST = 484,
    WRATH_AREA_THE_GREAT_LIFT = 485,
    WRATH_AREA_GALAK_HOLD = 486,
    WRATH_AREA_ROGUEFEATHER_DEN = 487,
    WRATH_AREA_THE_WEATHERED_NOOK = 488,
    WRATH_AREA_THALANAAR = 489,
    WRATH_AREA_UN_GORO_CRATER = 490,
    WRATH_AREA_RAZORFEN_KRAUL = 491,
    WRATH_AREA_RAVEN_HILL_CEMETERY = 492,
    WRATH_AREA_MOONGLADE = 493,
    WRATH_AREA_HOWLING_FJORD = 495,
    WRATH_AREA_BRACKENWALL_VILLAGE = 496,
    WRATH_AREA_SWAMPLIGHT_MANOR = 497,
    WRATH_AREA_BLOODFEN_BURROW = 498,
    WRATH_AREA_DARKMIST_CAVERN = 499,
    WRATH_AREA_MOGGLE_POINT = 500,
    WRATH_AREA_BEEZILS_WRECK = 501,
    WRATH_AREA_WITCH_HILL = 502,
    WRATH_AREA_SENTRY_POINT = 503,
    WRATH_AREA_NORTH_POINT_TOWER = 504,
    WRATH_AREA_WEST_POINT_TOWER = 505,
    WRATH_AREA_LOST_POINT = 506,
    WRATH_AREA_BLUEFEN = 507,
    WRATH_AREA_STONEMAUL_RUINS = 508,
    WRATH_AREA_THE_DEN_OF_FLAME = 509,
    WRATH_AREA_THE_DRAGONMURK = 510,
    WRATH_AREA_WYRMBOG = 511,
    WRATH_AREA_BLACKHOOF_VILLAGE = 512,
    WRATH_AREA_THERAMORE_ISLE = 513,
    WRATH_AREA_FOOTHOLD_CITADEL = 514,
    WRATH_AREA_IRONCLAD_PRISON = 515,
    WRATH_AREA_DUSTWALLOW_BAY = 516,
    WRATH_AREA_TIDEFURY_COVE = 517,
    WRATH_AREA_DREADMURK_SHORE = 518,
    WRATH_AREA_ADDLES_STEAD = 536,
    WRATH_AREA_FIRE_PLUME_RIDGE = 537,
    WRATH_AREA_LAKKARI_TAR_PITS = 538,
    WRATH_AREA_TERROR_RUN = 539,
    WRATH_AREA_THE_SLITHERING_SCAR = 540,
    WRATH_AREA_MARSHALS_REFUGE = 541,
    WRATH_AREA_FUNGAL_ROCK = 542,
    WRATH_AREA_GOLAKKA_HOT_SPRINGS = 543,
    WRATH_AREA_THE_LOCH = 556,
    WRATH_AREA_BEGGARS_HAUNT = 576,
    WRATH_AREA_KODO_GRAVEYARD = 596,
    WRATH_AREA_GHOST_WALKER_POST = 597,
    WRATH_AREA_SAR_THERIS_STRAND = 598,
    WRATH_AREA_THUNDER_AXE_FORTRESS = 599,
    WRATH_AREA_BOLGANS_HOLE = 600,
    WRATH_AREA_MANNOROC_COVEN = 602,
    WRATH_AREA_SARGERON = 603,
    WRATH_AREA_MAGRAM_VILLAGE = 604,
    WRATH_AREA_GELKIS_VILLAGE = 606,
    WRATH_AREA_VALLEY_OF_SPEARS = 607,
    WRATH_AREA_NIJELS_POINT = 608,
    WRATH_AREA_KOLKAR_VILLAGE = 609,
    WRATH_AREA_HYJAL = 616,
    WRATH_AREA_WINTERSPRING = 618,
    WRATH_AREA_BLACKWOLF_RIVER = 636,
    WRATH_AREA_KODO_ROCK = 637,
    WRATH_AREA_HIDDEN_PATH = 638,
    WRATH_AREA_SPIRIT_ROCK = 639,
    WRATH_AREA_SHRINE_OF_THE_DORMANT_FLAME = 640,
    WRATH_AREA_LAKE_ELUNE_ARA = 656,
    WRATH_AREA_THE_HARBORAGE = 657,
    WRATH_AREA_OUTLAND = 676,
    WRATH_AREA_CRAFTSMENS_TERRACE_UNUSED = 696,
    WRATH_AREA_TRADESMENS_TERRACE_UNUSED = 697,
    WRATH_AREA_THE_TEMPLE_GARDENS_UNUSED = 698,
    WRATH_AREA_TEMPLE_OF_ELUNE_UNUSED = 699,
    WRATH_AREA_CENARION_ENCLAVE_UNUSED = 700,
    WRATH_AREA_WARRIORS_TERRACE_UNUSED = 701,
    WRATH_AREA_RUT_THERAN_VILLAGE = 702,
    WRATH_AREA_IRONBANDS_COMPOUND = 716,
    WRATH_AREA_THE_STOCKADE = 717,
    WRATH_AREA_WAILING_CAVERNS = 718,
    WRATH_AREA_BLACKFATHOM_DEEPS = 719,
    WRATH_AREA_FRAY_ISLAND = 720,
    WRATH_AREA_GNOMEREGAN1 = 721,
    WRATH_AREA_RAZORFEN_DOWNS = 722,
    WRATH_AREA_BAN_ETHIL_HOLLOW = 736,
    WRATH_AREA_SCARLET_MONASTERY = 796,
    WRATH_AREA_JERODS_LANDING = 797,
    WRATH_AREA_RIDGEPOINT_TOWER = 798,
    WRATH_AREA_THE_DARKENED_BANK = 799,
    WRATH_AREA_COLDRIDGE_PASS = 800,
    WRATH_AREA_CHILL_BREEZE_VALLEY = 801,
    WRATH_AREA_SHIMMER_RIDGE = 802,
    WRATH_AREA_AMBERSTILL_RANCH = 803,
    WRATH_AREA_THE_TUNDRID_HILLS = 804,
    WRATH_AREA_SOUTH_GATE_PASS = 805,
    WRATH_AREA_SOUTH_GATE_OUTPOST = 806,
    WRATH_AREA_NORTH_GATE_PASS = 807,
    WRATH_AREA_NORTH_GATE_OUTPOST = 808,
    WRATH_AREA_GATES_OF_IRONFORGE = 809,
    WRATH_AREA_STILLWATER_POND = 810,
    WRATH_AREA_NIGHTMARE_VALE = 811,
    WRATH_AREA_VENOMWEB_VALE = 812,
    WRATH_AREA_THE_BULWARK1 = 813,
    WRATH_AREA_SOUTHFURY_RIVER1 = 814,
    WRATH_AREA_SOUTHFURY_RIVER2 = 815,
    WRATH_AREA_RAZORMANE_GROUNDS = 816,
    WRATH_AREA_SKULL_ROCK = 817,
    WRATH_AREA_PALEMANE_ROCK = 818,
    WRATH_AREA_WINDFURY_RIDGE = 819,
    WRATH_AREA_THE_GOLDEN_PLAINS = 820,
    WRATH_AREA_THE_ROLLING_PLAINS = 821,
    WRATH_AREA_DUN_ALGAZ1 = 836,
    WRATH_AREA_DUN_ALGAZ2 = 837,
    WRATH_AREA_NORTH_GATE_PASS1 = 838,
    WRATH_AREA_SOUTH_GATE_PASS1 = 839,
    WRATH_AREA_TWILIGHT_GROVE = 856,
    WRATH_AREA_GM_ISLAND = 876,
    WRATH_AREA_DELETE_ME = 877,
    WRATH_AREA_SOUTHFURY_RIVER3 = 878,
    WRATH_AREA_SOUTHFURY_RIVER4 = 879,
    WRATH_AREA_THANDOL_SPAN1 = 880,
    WRATH_AREA_THANDOL_SPAN2 = 881,
    WRATH_AREA_PURGATION_ISLE = 896,
    WRATH_AREA_THE_JANSEN_STEAD = 916,
    WRATH_AREA_THE_DEAD_ACRE = 917,
    WRATH_AREA_THE_MOLSEN_FARM = 918,
    WRATH_AREA_STENDELS_POND = 919,
    WRATH_AREA_THE_DAGGER_HILLS = 920,
    WRATH_AREA_DEMONTS_PLACE = 921,
    WRATH_AREA_THE_DUST_PLAINS = 922,
    WRATH_AREA_STONESPLINTER_VALLEY = 923,
    WRATH_AREA_VALLEY_OF_KINGS = 924,
    WRATH_AREA_ALGAZ_STATION = 925,
    WRATH_AREA_BUCKLEBREE_FARM = 926,
    WRATH_AREA_THE_SHINING_STRAND = 927,
    WRATH_AREA_NORTH_TIDES_HOLLOW = 928,
    WRATH_AREA_GRIZZLEPAW_RIDGE = 936,
    WRATH_AREA_THE_VERDANT_FIELDS = 956,
    WRATH_AREA_GADGETZAN = 976,
    WRATH_AREA_STEAMWHEEDLE_PORT = 977,
    WRATH_AREA_ZUL_FARRAK = 978,
    WRATH_AREA_SANDSORROW_WATCH = 979,
    WRATH_AREA_THISTLESHRUB_VALLEY = 980,
    WRATH_AREA_THE_GAPING_CHASM = 981,
    WRATH_AREA_THE_NOXIOUS_LAIR = 982,
    WRATH_AREA_DUNEMAUL_COMPOUND = 983,
    WRATH_AREA_EASTMOON_RUINS = 984,
    WRATH_AREA_WATERSPRING_FIELD = 985,
    WRATH_AREA_ZALASHJIS_DEN = 986,
    WRATH_AREA_LANDS_END_BEACH = 987,
    WRATH_AREA_WAVESTRIDER_BEACH = 988,
    WRATH_AREA_ULDUM = 989,
    WRATH_AREA_VALLEY_OF_THE_WATCHERS = 990,
    WRATH_AREA_GUNSTANS_POST = 991,
    WRATH_AREA_SOUTHMOON_RUINS = 992,
    WRATH_AREA_RENDERS_CAMP = 996,
    WRATH_AREA_RENDERS_VALLEY = 997,
    WRATH_AREA_RENDERS_ROCK = 998,
    WRATH_AREA_STONEWATCH_TOWER = 999,
    WRATH_AREA_GALARDELL_VALLEY = 1000,
    WRATH_AREA_LAKERIDGE_HIGHWAY = 1001,
    WRATH_AREA_THREE_CORNERS = 1002,
    WRATH_AREA_DIREFORGE_HILL = 1016,
    WRATH_AREA_RAPTOR_RIDGE = 1017,
    WRATH_AREA_BLACK_CHANNEL_MARSH = 1018,
    WRATH_AREA_THE_GREEN_BELT = 1019,
    WRATH_AREA_MOSSHIDE_FEN = 1020,
    WRATH_AREA_THELGEN_ROCK = 1021,
    WRATH_AREA_BLUEGILL_MARSH = 1022,
    WRATH_AREA_SALTSPRAY_GLEN = 1023,
    WRATH_AREA_SUNDOWN_MARSH = 1024,
    WRATH_AREA_THE_GREEN_BELT1 = 1025,
    WRATH_AREA_ANGERFANG_ENCAMPMENT = 1036,
    WRATH_AREA_GRIM_BATOL = 1037,
    WRATH_AREA_DRAGONMAW_GATES = 1038,
    WRATH_AREA_THE_LOST_FLEET = 1039,
    WRATH_AREA_DARROW_HILL = 1056,
    WRATH_AREA_THORADINS_WALL1 = 1057,
    WRATH_AREA_WEBWINDER_PATH = 1076,
    WRATH_AREA_THE_HUSHED_BANK = 1097,
    WRATH_AREA_MANOR_MISTMANTLE = 1098,
    WRATH_AREA_CAMP_MOJACHE = 1099,
    WRATH_AREA_GRIMTOTEM_COMPOUND = 1100,
    WRATH_AREA_THE_WRITHING_DEEP = 1101,
    WRATH_AREA_WILDWIND_LAKE = 1102,
    WRATH_AREA_GORDUNNI_OUTPOST = 1103,
    WRATH_AREA_MOK_GORDUN = 1104,
    WRATH_AREA_FERAL_SCAR_VALE = 1105,
    WRATH_AREA_FRAYFEATHER_HIGHLANDS = 1106,
    WRATH_AREA_IDLEWIND_LAKE = 1107,
    WRATH_AREA_THE_FORGOTTEN_COAST = 1108,
    WRATH_AREA_EAST_PILLAR = 1109,
    WRATH_AREA_WEST_PILLAR = 1110,
    WRATH_AREA_DREAM_BOUGH = 1111,
    WRATH_AREA_JADEMIR_LAKE = 1112,
    WRATH_AREA_ONEIROS = 1113,
    WRATH_AREA_RUINS_OF_RAVENWIND = 1114,
    WRATH_AREA_RAGE_SCAR_HOLD = 1115,
    WRATH_AREA_FEATHERMOON_STRONGHOLD = 1116,
    WRATH_AREA_RUINS_OF_SOLARSAL = 1117,
    WRATH_AREA_LOWER_WILDS_UNUSED = 1118,
    WRATH_AREA_THE_TWIN_COLOSSALS = 1119,
    WRATH_AREA_SARDOR_ISLE = 1120,
    WRATH_AREA_ISLE_OF_DREAD = 1121,
    WRATH_AREA_HIGH_WILDERNESS = 1136,
    WRATH_AREA_LOWER_WILDS = 1137,
    WRATH_AREA_SOUTHERN_BARRENS = 1156,
    WRATH_AREA_SOUTHERN_GOLD_ROAD = 1157,
    WRATH_AREA_ZUL_FARRAK1 = 1176,
    WRATH_AREA_UTGARDE_PINNACLE = 1196,
    WRATH_AREA_TIMBERMAW_HOLD = 1216,
    WRATH_AREA_VANNDIR_ENCAMPMENT = 1217,
    WRATH_AREA_TESTAZSHARA = 1218,
    WRATH_AREA_LEGASH_ENCAMPMENT = 1219,
    WRATH_AREA_THALASSIAN_BASE_CAMP = 1220,
    WRATH_AREA_RUINS_OF_ELDARATH = 1221,
    WRATH_AREA_HETAERAS_CLUTCH = 1222,
    WRATH_AREA_TEMPLE_OF_ZIN_MALOR = 1223,
    WRATH_AREA_BEARS_HEAD = 1224,
    WRATH_AREA_URSOLAN = 1225,
    WRATH_AREA_TEMPLE_OF_ARKKORAN = 1226,
    WRATH_AREA_BAY_OF_STORMS = 1227,
    WRATH_AREA_THE_SHATTERED_STRAND = 1228,
    WRATH_AREA_TOWER_OF_ELDARA = 1229,
    WRATH_AREA_JAGGED_REEF = 1230,
    WRATH_AREA_SOUTHRIDGE_BEACH = 1231,
    WRATH_AREA_RAVENCREST_MONUMENT = 1232,
    WRATH_AREA_FORLORN_RIDGE = 1233,
    WRATH_AREA_LAKE_MENNAR = 1234,
    WRATH_AREA_SHADOWSONG_SHRINE = 1235,
    WRATH_AREA_HALDARR_ENCAMPMENT = 1236,
    WRATH_AREA_VALORMOK = 1237,
    WRATH_AREA_THE_RUINED_REACHES = 1256,
    WRATH_AREA_THE_TALONDEEP_PATH = 1276,
    WRATH_AREA_THE_TALONDEEP_PATH1 = 1277,
    WRATH_AREA_ROCKTUSK_FARM = 1296,
    WRATH_AREA_JAGGEDSWINE_FARM = 1297,
    WRATH_AREA_RAZORFEN_DOWNS1 = 1316,
    WRATH_AREA_LOST_RIGGER_COVE = 1336,
    WRATH_AREA_ULDAMAN = 1337,
    WRATH_AREA_LORDAMERE_LAKE1 = 1338,
    WRATH_AREA_LORDAMERE_LAKE2 = 1339,
    WRATH_AREA_GALLOWS_CORNER = 1357,
    WRATH_AREA_SILITHUS = 1377,
    WRATH_AREA_EMERALD_FOREST = 1397,
    WRATH_AREA_SUNKEN_TEMPLE = 1417,
    WRATH_AREA_DREADMAUL_HOLD = 1437,
    WRATH_AREA_NETHERGARDE_KEEP = 1438,
    WRATH_AREA_DREADMAUL_POST = 1439,
    WRATH_AREA_SERPENTS_COIL = 1440,
    WRATH_AREA_ALTAR_OF_STORMS1 = 1441,
    WRATH_AREA_FIREWATCH_RIDGE = 1442,
    WRATH_AREA_THE_SLAG_PIT = 1443,
    WRATH_AREA_THE_SEA_OF_CINDERS = 1444,
    WRATH_AREA_BLACKROCK_MOUNTAIN2 = 1445,
    WRATH_AREA_THORIUM_POINT = 1446,
    WRATH_AREA_GARRISON_ARMORY = 1457,
    WRATH_AREA_THE_TEMPLE_OF_ATAL_HAKKAR = 1477,
    WRATH_AREA_UNDERCITY = 1497,
    WRATH_AREA_ULDAMAN1 = 1517,
    WRATH_AREA_NOT_USED_DEADMINES = 1518,
    WRATH_AREA_STORMWIND_CITY = 1519,
    WRATH_AREA_IRONFORGE = 1537,
    WRATH_AREA_SPLITHOOF_HOLD = 1557,
    WRATH_AREA_THE_CAPE_OF_STRANGLETHORN = 1577,
    WRATH_AREA_SOUTHERN_SAVAGE_COAST = 1578,
    WRATH_AREA_UNUSED_THE_DEADMINES_002 = 1579,
    WRATH_AREA_UNUSED_IRONCLAD_COVE_003 = 1580,
    WRATH_AREA_THE_DEADMINES = 1581,
    WRATH_AREA_IRONCLAD_COVE = 1582,
    WRATH_AREA_BLACKROCK_SPIRE = 1583,
    WRATH_AREA_BLACKROCK_DEPTHS = 1584,
    WRATH_AREA_RAPTOR_GROUNDS_UNUSED = 1597,
    WRATH_AREA_GROL_DOM_FARM_UNUSED = 1598,
    WRATH_AREA_MORSHAN_BASE_CAMP = 1599,
    WRATH_AREA_HONORS_STAND_UNUSED = 1600,
    WRATH_AREA_BLACKTHORN_RIDGE_UNUSED = 1601,
    WRATH_AREA_BRAMBLESCAR_UNUSED = 1602,
    WRATH_AREA_AGAMA_GOR_UNUSED = 1603,
    WRATH_AREA_VALLEY_OF_HEROES = 1617,
    WRATH_AREA_ORGRIMMAR = 1637,
    WRATH_AREA_THUNDER_BLUFF = 1638,
    WRATH_AREA_ELDER_RISE = 1639,
    WRATH_AREA_SPIRIT_RISE = 1640,
    WRATH_AREA_HUNTER_RISE = 1641,
    WRATH_AREA_DARNASSUS = 1657,
    WRATH_AREA_CENARION_ENCLAVE = 1658,
    WRATH_AREA_CRAFTSMENS_TERRACE = 1659,
    WRATH_AREA_WARRIORS_TERRACE = 1660,
    WRATH_AREA_THE_TEMPLE_GARDENS = 1661,
    WRATH_AREA_TRADESMENS_TERRACE = 1662,
    WRATH_AREA_GAVINS_NAZE = 1677,
    WRATH_AREA_SOFERAS_NAZE = 1678,
    WRATH_AREA_CORRAHNS_DAGGER = 1679,
    WRATH_AREA_THE_HEADLAND = 1680,
    WRATH_AREA_MISTY_SHORE = 1681,
    WRATH_AREA_DANDREDS_FOLD = 1682,
    WRATH_AREA_GROWLESS_CAVE = 1683,
    WRATH_AREA_CHILLWIND_POINT = 1684,
    WRATH_AREA_RAPTOR_GROUNDS = 1697,
    WRATH_AREA_BRAMBLESCAR = 1698,
    WRATH_AREA_THORN_HILL = 1699,
    WRATH_AREA_AGAMA_GOR = 1700,
    WRATH_AREA_BLACKTHORN_RIDGE = 1701,
    WRATH_AREA_HONORS_STAND = 1702,
    WRATH_AREA_THE_MORSHAN_RAMPART = 1703,
    WRATH_AREA_GROL_DOM_FARM = 1704,
    WRATH_AREA_RAZORFEN_KRAUL1 = 1717,
    WRATH_AREA_THE_GREAT_LIFT1 = 1718,
    WRATH_AREA_MISTVALE_VALLEY = 1737,
    WRATH_AREA_NEK_MANI_WELLSPRING = 1738,
    WRATH_AREA_BLOODSAIL_COMPOUND = 1739,
    WRATH_AREA_VENTURE_CO_BASE_CAMP = 1740,
    WRATH_AREA_GURUBASHI_ARENA = 1741,
    WRATH_AREA_SPIRIT_DEN = 1742,
    WRATH_AREA_THE_CRIMSON_VEIL = 1757,
    WRATH_AREA_THE_RIPTIDE = 1758,
    WRATH_AREA_THE_DAMSELS_LUCK = 1759,
    WRATH_AREA_VENTURE_CO_OPERATIONS_CENTER = 1760,
    WRATH_AREA_DEADWOOD_VILLAGE = 1761,
    WRATH_AREA_FELPAW_VILLAGE = 1762,
    WRATH_AREA_JAEDENAR = 1763,
    WRATH_AREA_BLOODVENOM_RIVER = 1764,
    WRATH_AREA_BLOODVENOM_FALLS = 1765,
    WRATH_AREA_SHATTER_SCAR_VALE = 1766,
    WRATH_AREA_IRONTREE_WOODS = 1767,
    WRATH_AREA_IRONTREE_CAVERN = 1768,
    WRATH_AREA_TIMBERMAW_HOLD1 = 1769,
    WRATH_AREA_SHADOW_HOLD = 1770,
    WRATH_AREA_SHRINE_OF_THE_DECEIVER = 1771,
    WRATH_AREA_ITHARIUSS_CAVE = 1777,
    WRATH_AREA_SORROWMURK = 1778,
    WRATH_AREA_DRAENIL_DUR_VILLAGE = 1779,
    WRATH_AREA_SPLINTERSPEAR_JUNCTION = 1780,
    WRATH_AREA_STAGALBOG = 1797,
    WRATH_AREA_THE_SHIFTING_MIRE = 1798,
    WRATH_AREA_STAGALBOG_CAVE = 1817,
    WRATH_AREA_WITHERBARK_CAVERNS = 1837,
    WRATH_AREA_THORADINS_WALL2 = 1857,
    WRATH_AREA_BOULDER_GOR = 1858,
    WRATH_AREA_VALLEY_OF_FANGS = 1877,
    WRATH_AREA_THE_DUSTBOWL = 1878,
    WRATH_AREA_MIRAGE_FLATS = 1879,
    WRATH_AREA_FEATHERBEARDS_HOVEL = 1880,
    WRATH_AREA_SHINDIGGERS_CAMP = 1881,
    WRATH_AREA_PLAGUEMIST_RAVINE = 1882,
    WRATH_AREA_VALORWIND_LAKE = 1883,
    WRATH_AREA_AGOL_WATHA = 1884,
    WRATH_AREA_HIRI_WATHA = 1885,
    WRATH_AREA_THE_CREEPING_RUIN = 1886,
    WRATH_AREA_BOGENS_LEDGE = 1887,
    WRATH_AREA_THE_MAKERS_TERRACE = 1897,
    WRATH_AREA_DUSTWIND_GULCH = 1898,
    WRATH_AREA_SHAOL_WATHA = 1917,
    WRATH_AREA_NOONSHADE_RUINS = 1937,
    WRATH_AREA_BROKEN_PILLAR = 1938,
    WRATH_AREA_ABYSSAL_SANDS = 1939,
    WRATH_AREA_SOUTHBREAK_SHORE = 1940,
    WRATH_AREA_CAVERNS_OF_TIME = 1941,
    WRATH_AREA_THE_MARSHLANDS = 1942,
    WRATH_AREA_IRONSTONE_PLATEAU = 1943,
    WRATH_AREA_BLACKCHAR_CAVE = 1957,
    WRATH_AREA_TANNER_CAMP = 1958,
    WRATH_AREA_DUSTFIRE_VALLEY = 1959,
    WRATH_AREA_ZUL_GURUB1 = 1977,
    WRATH_AREA_MISTY_REED_POST = 1978,
    WRATH_AREA_BLOODVENOM_POST = 1997,
    WRATH_AREA_TALONBRANCH_GLADE_ = 1998,
    WRATH_AREA_STRATHOLME = 2017,
    WRATH_AREA_QUEL_THALAS = 2037,
    WRATH_AREA_SCHOLOMANCE = 2057,
    WRATH_AREA_TWILIGHT_VALE = 2077,
    WRATH_AREA_TWILIGHT_SHORE = 2078,
    WRATH_AREA_ALCAZ_ISLAND = 2079,
    WRATH_AREA_DARKCLOUD_PINNACLE = 2097,
    WRATH_AREA_DAWNING_WOOD_CATACOMBS = 2098,
    WRATH_AREA_STONEWATCH_KEEP = 2099,
    WRATH_AREA_MARAUDON = 2100,
    WRATH_AREA_STOUTLAGER_INN = 2101,
    WRATH_AREA_THUNDERBREW_DISTILLERY = 2102,
    WRATH_AREA_MENETHIL_KEEP = 2103,
    WRATH_AREA_DEEPWATER_TAVERN = 2104,
    WRATH_AREA_SHADOW_GRAVE = 2117,
    WRATH_AREA_BRILL_TOWN_HALL = 2118,
    WRATH_AREA_GALLOWS_END_TAVERN = 2119,
    WRATH_AREA_THE_POOLS_OF_VISIONUNUSED = 2137,
    WRATH_AREA_DREADMIST_DEN = 2138,
    WRATH_AREA_BAEL_DUN_KEEP = 2157,
    WRATH_AREA_EMBERSTRIFES_DEN = 2158,
    WRATH_AREA_ONYXIAS_LAIR = 2159,
    WRATH_AREA_WINDSHEAR_MINE = 2160,
    WRATH_AREA_ROLANDS_DOOM = 2161,
    WRATH_AREA_BATTLE_RING = 2177,
    WRATH_AREA_THE_POOLS_OF_VISION = 2197,
    WRATH_AREA_SHADOWBREAK_RAVINE = 2198,
    WRATH_AREA_BROKEN_SPEAR_VILLAGE = 2217,
    WRATH_AREA_WHITEREACH_POST = 2237,
    WRATH_AREA_GORNIA = 2238,
    WRATH_AREA_ZANES_EYE_CRATER = 2239,
    WRATH_AREA_MIRAGE_RACEWAY = 2240,
    WRATH_AREA_FROSTSABER_ROCK = 2241,
    WRATH_AREA_THE_HIDDEN_GROVE = 2242,
    WRATH_AREA_TIMBERMAW_POST = 2243,
    WRATH_AREA_WINTERFALL_VILLAGE = 2244,
    WRATH_AREA_MAZTHORIL = 2245,
    WRATH_AREA_FROSTFIRE_HOT_SPRINGS = 2246,
    WRATH_AREA_ICE_THISTLE_HILLS = 2247,
    WRATH_AREA_DUN_MANDARR = 2248,
    WRATH_AREA_FROSTWHISPER_GORGE = 2249,
    WRATH_AREA_OWL_WING_THICKET = 2250,
    WRATH_AREA_LAKE_KEL_THERIL = 2251,
    WRATH_AREA_THE_RUINS_OF_KEL_THERIL = 2252,
    WRATH_AREA_STARFALL_VILLAGE = 2253,
    WRATH_AREA_BAN_THALLOW_BARROW_DEN = 2254,
    WRATH_AREA_EVERLOOK = 2255,
    WRATH_AREA_DARKWHISPER_GORGE = 2256,
    WRATH_AREA_DEEPRUN_TRAM = 2257,
    WRATH_AREA_THE_FUNGAL_VALE = 2258,
    WRATH_AREA_UNUSEDTHE_MARRIS_STEAD = 2259,
    WRATH_AREA_THE_MARRIS_STEAD = 2260,
    WRATH_AREA_THE_UNDERCROFT = 2261,
    WRATH_AREA_DARROWSHIRE = 2262,
    WRATH_AREA_CROWN_GUARD_TOWER = 2263,
    WRATH_AREA_CORINS_CROSSING = 2264,
    WRATH_AREA_SCARLET_BASE_CAMP = 2265,
    WRATH_AREA_TYRS_HAND = 2266,
    WRATH_AREA_THE_SCARLET_BASILICA = 2267,
    WRATH_AREA_LIGHTS_HOPE_CHAPEL = 2268,
    WRATH_AREA_BROWMAN_MILL = 2269,
    WRATH_AREA_THE_NOXIOUS_GLADE = 2270,
    WRATH_AREA_EASTWALL_TOWER = 2271,
    WRATH_AREA_NORTHDALE = 2272,
    WRATH_AREA_ZUL_MASHAR = 2273,
    WRATH_AREA_MAZRA_ALOR = 2274,
    WRATH_AREA_NORTHPASS_TOWER = 2275,
    WRATH_AREA_QUEL_LITHIEN_LODGE = 2276,
    WRATH_AREA_PLAGUEWOOD = 2277,
    WRATH_AREA_SCOURGEHOLD = 2278,
    WRATH_AREA_STRATHOLME1 = 2279,
    WRATH_AREA_DO_NOT_USE = 2280,
    WRATH_AREA_DARROWMERE_LAKE = 2297,
    WRATH_AREA_CAER_DARROW = 2298,
    WRATH_AREA_DARROWMERE_LAKE1 = 2299,
    WRATH_AREA_CAVERNS_OF_TIME1 = 2300,
    WRATH_AREA_THISTLEFUR_VILLAGE = 2301,
    WRATH_AREA_THE_QUAGMIRE = 2302,
    WRATH_AREA_WINDBREAK_CANYON = 2303,
    WRATH_AREA_SOUTH_SEAS = 2317,
    WRATH_AREA_THE_GREAT_SEA3 = 2318,
    WRATH_AREA_THE_GREAT_SEA4 = 2319,
    WRATH_AREA_THE_GREAT_SEA5 = 2320,
    WRATH_AREA_THE_GREAT_SEA6 = 2321,
    WRATH_AREA_THE_VEILED_SEA1 = 2322,
    WRATH_AREA_THE_VEILED_SEA2 = 2323,
    WRATH_AREA_THE_VEILED_SEA3 = 2324,
    WRATH_AREA_THE_VEILED_SEA4 = 2325,
    WRATH_AREA_THE_VEILED_SEA5 = 2326,
    WRATH_AREA_RAZOR_HILL_BARRACKS = 2337,
    WRATH_AREA_SOUTH_SEAS1 = 2338,
    WRATH_AREA_THE_GREAT_SEA7 = 2339,
    WRATH_AREA_BLOODTOOTH_CAMP = 2357,
    WRATH_AREA_FOREST_SONG = 2358,
    WRATH_AREA_GREENPAW_VILLAGE = 2359,
    WRATH_AREA_SILVERWING_OUTPOST = 2360,
    WRATH_AREA_NIGHTHAVEN = 2361,
    WRATH_AREA_SHRINE_OF_REMULOS = 2362,
    WRATH_AREA_STORMRAGE_BARROW_DENS = 2363,
    WRATH_AREA_THE_GREAT_SEA8 = 2364,
    WRATH_AREA_THE_GREAT_SEA9 = 2365,
    WRATH_AREA_THE_BLACK_MORASS = 2366,
    WRATH_AREA_OLD_HILLSBRAD_FOOTHILLS = 2367,
    WRATH_AREA_TARREN_MILL1 = 2368,
    WRATH_AREA_SOUTHSHORE1 = 2369,
    WRATH_AREA_DURNHOLDE_KEEP1 = 2370,
    WRATH_AREA_DUN_GAROK1 = 2371,
    WRATH_AREA_HILLSBRAD_FIELDS1 = 2372,
    WRATH_AREA_EASTERN_STRAND1 = 2373,
    WRATH_AREA_NETHANDER_STEAD1 = 2374,
    WRATH_AREA_DARROW_HILL1 = 2375,
    WRATH_AREA_SOUTHPOINT_TOWER1 = 2376,
    WRATH_AREA_THORADINS_WALL3 = 2377,
    WRATH_AREA_WESTERN_STRAND1 = 2378,
    WRATH_AREA_AZURELODE_MINE1 = 2379,
    WRATH_AREA_THE_GREAT_SEA10 = 2397,
    WRATH_AREA_THE_GREAT_SEA11 = 2398,
    WRATH_AREA_THE_GREAT_SEA12 = 2399,
    WRATH_AREA_THE_FORBIDDING_SEA1 = 2400,
    WRATH_AREA_THE_FORBIDDING_SEA2 = 2401,
    WRATH_AREA_THE_FORBIDDING_SEA3 = 2402,
    WRATH_AREA_THE_FORBIDDING_SEA4 = 2403,
    WRATH_AREA_TETHRIS_ARAN = 2404,
    WRATH_AREA_ETHEL_RETHOR = 2405,
    WRATH_AREA_RANAZJAR_ISLE = 2406,
    WRATH_AREA_KORMEKS_HUT = 2407,
    WRATH_AREA_SHADOWPREY_VILLAGE = 2408,
    WRATH_AREA_BLACKROCK_PASS = 2417,
    WRATH_AREA_MORGANS_VIGIL = 2418,
    WRATH_AREA_SLITHER_ROCK = 2419,
    WRATH_AREA_TERROR_WING_PATH = 2420,
    WRATH_AREA_DRACO_DAR = 2421,
    WRATH_AREA_RAGEFIRE_CHASM = 2437,
    WRATH_AREA_NIGHTSONG_WOODS = 2457,
    WRATH_AREA_THE_VEILED_SEA6 = 2477,
    WRATH_AREA_MORLOS_ARAN = 2478,
    WRATH_AREA_EMERALD_SANCTUARY = 2479,
    WRATH_AREA_JADEFIRE_GLEN = 2480,
    WRATH_AREA_RUINS_OF_CONSTELLAS = 2481,
    WRATH_AREA_BITTER_REACHES = 2497,
    WRATH_AREA_RISE_OF_THE_DEFILER = 2517,
    WRATH_AREA_LARISS_PAVILION = 2518,
    WRATH_AREA_WOODPAW_HILLS = 2519,
    WRATH_AREA_WOODPAW_DEN = 2520,
    WRATH_AREA_VERDANTIS_RIVER = 2521,
    WRATH_AREA_RUINS_OF_ISILDIEN = 2522,
    WRATH_AREA_GRIMTOTEM_POST = 2537,
    WRATH_AREA_CAMP_APARAJE = 2538,
    WRATH_AREA_MALAKA_JIN = 2539,
    WRATH_AREA_BOULDERSLIDE_RAVINE = 2540,
    WRATH_AREA_SISHIR_CANYON = 2541,
    WRATH_AREA_DIRE_MAUL = 2557,
    WRATH_AREA_DEADWIND_RAVINE = 2558,
    WRATH_AREA_DIAMONDHEAD_RIVER = 2559,
    WRATH_AREA_ARIDENS_CAMP = 2560,
    WRATH_AREA_THE_VICE = 2561,
    WRATH_AREA_KARAZHAN = 2562,
    WRATH_AREA_MORGANS_PLOT = 2563,
    WRATH_AREA_DIRE_MAUL1 = 2577,
    WRATH_AREA_ALTERAC_VALLEY = 2597,
    WRATH_AREA_SCRABBLESCREWS_CAMP = 2617,
    WRATH_AREA_JADEFIRE_RUN = 2618,
    WRATH_AREA_THONDRORIL_RIVER = 2619,
    WRATH_AREA_THONDRORIL_RIVER1 = 2620,
    WRATH_AREA_LAKE_MERELDAR = 2621,
    WRATH_AREA_PESTILENT_SCAR = 2622,
    WRATH_AREA_THE_INFECTIS_SCAR = 2623,
    WRATH_AREA_BLACKWOOD_LAKE = 2624,
    WRATH_AREA_EASTWALL_GATE = 2625,
    WRATH_AREA_TERRORWEB_TUNNEL = 2626,
    WRATH_AREA_TERRORDALE = 2627,
    WRATH_AREA_KARGATHIA_KEEP = 2637,
    WRATH_AREA_VALLEY_OF_BONES = 2657,
    WRATH_AREA_BLACKWING_LAIR = 2677,
    WRATH_AREA_DEADMANS_CROSSING = 2697,
    WRATH_AREA_MOLTEN_CORE = 2717,
    WRATH_AREA_THE_SCARAB_WALL = 2737,
    WRATH_AREA_SOUTHWIND_VILLAGE = 2738,
    WRATH_AREA_TWILIGHT_BASE_CAMP = 2739,
    WRATH_AREA_THE_CRYSTAL_VALE = 2740,
    WRATH_AREA_THE_SCARAB_DAIS = 2741,
    WRATH_AREA_HIVE_ASHI = 2742,
    WRATH_AREA_HIVE_ZORA = 2743,
    WRATH_AREA_HIVE_REGAL = 2744,
    WRATH_AREA_SHRINE_OF_THE_FALLEN_WARRIOR = 2757,
    WRATH_AREA_UNUSED_ALTERAC_VALLEY = 2777,
    WRATH_AREA_BLACKFATHOM_DEEPS1 = 2797,
    WRATH_AREA_CRYSTALSONG_FOREST = 2817,
    WRATH_AREA_THE_MASTERS_CELLAR = 2837,
    WRATH_AREA_STONEWROUGHT_PASS = 2838,
    WRATH_AREA_ALTERAC_VALLEY1 = 2839,
    WRATH_AREA_THE_RUMBLE_CAGE = 2857,
    WRATH_AREA_CHUNK_TEST = 2877,
    WRATH_AREA_ZORAM_GAR_OUTPOST = 2897,
    WRATH_AREA_HALL_OF_LEGENDS = 2917,
    WRATH_AREA_CHAMPIONS_HALL = 2918,
    WRATH_AREA_GROSH_GOK_COMPOUND = 2937,
    WRATH_AREA_SLEEPING_GORGE = 2938,
    WRATH_AREA_IRONDEEP_MINE = 2957,
    WRATH_AREA_STONEHEARTH_OUTPOST = 2958,
    WRATH_AREA_DUN_BALDAR = 2959,
    WRATH_AREA_ICEWING_PASS = 2960,
    WRATH_AREA_FROSTWOLF_VILLAGE = 2961,
    WRATH_AREA_TOWER_POINT = 2962,
    WRATH_AREA_COLDTOOTH_MINE = 2963,
    WRATH_AREA_WINTERAX_HOLD = 2964,
    WRATH_AREA_ICEBLOOD_GARRISON = 2977,
    WRATH_AREA_FROSTWOLF_KEEP = 2978,
    WRATH_AREA_TOR_KREN_FARM = 2979,
    WRATH_AREA_FROST_DAGGER_PASS = 3017,
    WRATH_AREA_IRONSTONE_CAMP = 3037,
    WRATH_AREA_WEAZELS_CRATER = 3038,
    WRATH_AREA_TAHONDA_RUINS = 3039,
    WRATH_AREA_FIELD_OF_STRIFE = 3057,
    WRATH_AREA_ICEWING_CAVERN = 3058,
    WRATH_AREA_VALORS_REST = 3077,
    WRATH_AREA_THE_SWARMING_PILLAR = 3097,
    WRATH_AREA_TWILIGHT_POST = 3098,
    WRATH_AREA_TWILIGHT_OUTPOST = 3099,
    WRATH_AREA_RAVAGED_TWILIGHT_CAMP = 3100,
    WRATH_AREA_SHALZARUS_LAIR = 3117,
    WRATH_AREA_TALRENDIS_POINT = 3137,
    WRATH_AREA_RETHRESS_SANCTUM = 3138,
    WRATH_AREA_MOON_HORROR_DEN = 3139,
    WRATH_AREA_SCALEBEARDS_CAVE = 3140,
    WRATH_AREA_BOULDERSLIDE_CAVERN = 3157,
    WRATH_AREA_WARSONG_LABOR_CAMP = 3177,
    WRATH_AREA_CHILLWIND_CAMP = 3197,
    WRATH_AREA_THE_MAUL = 3217,
    WRATH_AREA_THE_MAUL_UNUSED = 3237,
    WRATH_AREA_BONES_OF_GRAKKAROND = 3257,
    WRATH_AREA_WARSONG_GULCH = 3277,
    WRATH_AREA_FROSTWOLF_GRAVEYARD = 3297,
    WRATH_AREA_FROSTWOLF_PASS = 3298,
    WRATH_AREA_DUN_BALDAR_PASS = 3299,
    WRATH_AREA_ICEBLOOD_GRAVEYARD = 3300,
    WRATH_AREA_SNOWFALL_GRAVEYARD = 3301,
    WRATH_AREA_STONEHEARTH_GRAVEYARD = 3302,
    WRATH_AREA_STORMPIKE_GRAVEYARD = 3303,
    WRATH_AREA_ICEWING_BUNKER = 3304,
    WRATH_AREA_STONEHEARTH_BUNKER = 3305,
    WRATH_AREA_WILDPAW_RIDGE = 3306,
    WRATH_AREA_REVANTUSK_VILLAGE = 3317,
    WRATH_AREA_ROCK_OF_DUROTAN = 3318,
    WRATH_AREA_SILVERWING_GROVE = 3319,
    WRATH_AREA_WARSONG_LUMBER_MILL = 3320,
    WRATH_AREA_SILVERWING_HOLD = 3321,
    WRATH_AREA_WILDPAW_CAVERN = 3337,
    WRATH_AREA_THE_VEILED_CLEFT = 3338,
    WRATH_AREA_YOJAMBA_ISLE = 3357,
    WRATH_AREA_ARATHI_BASIN = 3358,
    WRATH_AREA_THE_COIL = 3377,
    WRATH_AREA_ALTAR_OF_HIR_EEK = 3378,
    WRATH_AREA_SHADRA_ZAAR = 3379,
    WRATH_AREA_HAKKARI_GROUNDS = 3380,
    WRATH_AREA_NAZE_OF_SHIRVALLAH = 3381,
    WRATH_AREA_TEMPLE_OF_BETHEKK = 3382,
    WRATH_AREA_THE_BLOODFIRE_PIT = 3383,
    WRATH_AREA_ALTAR_OF_THE_BLOOD_GOD = 3384,
    WRATH_AREA_ZANZAS_RISE = 3397,
    WRATH_AREA_EDGE_OF_MADNESS = 3398,
    WRATH_AREA_TROLLBANE_HALL = 3417,
    WRATH_AREA_DEFILERS_DEN = 3418,
    WRATH_AREA_PAGLES_POINTE = 3419,
    WRATH_AREA_FARM = 3420,
    WRATH_AREA_BLACKSMITH = 3421,
    WRATH_AREA_LUMBER_MILL = 3422,
    WRATH_AREA_GOLD_MINE = 3423,
    WRATH_AREA_STABLES = 3424,
    WRATH_AREA_CENARION_HOLD = 3425,
    WRATH_AREA_STAGHELM_POINT = 3426,
    WRATH_AREA_BRONZEBEARD_ENCAMPMENT = 3427,
    WRATH_AREA_AHN_QIRAJ = 3428,
    WRATH_AREA_RUINS_OF_AHN_QIRAJ = 3429,
    WRATH_AREA_EVERSONG_WOODS = 3430,
    WRATH_AREA_SUNSTRIDER_ISLE = 3431,
    WRATH_AREA_SHRINE_OF_DATH_REMAR = 3432,
    WRATH_AREA_GHOSTLANDS = 3433,
    WRATH_AREA_SCARAB_TERRACE = 3434,
    WRATH_AREA_GENERALS_TERRACE = 3435,
    WRATH_AREA_THE_RESERVOIR = 3436,
    WRATH_AREA_THE_HATCHERY = 3437,
    WRATH_AREA_THE_COMB = 3438,
    WRATH_AREA_WATCHERS_TERRACE = 3439,
    WRATH_AREA_SCARAB_TERRACE1 = 3440,
    WRATH_AREA_GENERALS_TERRACE1 = 3441,
    WRATH_AREA_THE_RESERVOIR1 = 3442,
    WRATH_AREA_THE_HATCHERY1 = 3443,
    WRATH_AREA_THE_COMB1 = 3444,
    WRATH_AREA_WATCHERS_TERRACE1 = 3445,
    WRATH_AREA_TWILIGHTS_RUN = 3446,
    WRATH_AREA_ORTELLS_HIDEOUT = 3447,
    WRATH_AREA_SCARAB_TERRACE2 = 3448,
    WRATH_AREA_GENERALS_TERRACE2 = 3449,
    WRATH_AREA_THE_RESERVOIR2 = 3450,
    WRATH_AREA_THE_HATCHERY2 = 3451,
    WRATH_AREA_THE_COMB2 = 3452,
    WRATH_AREA_WATCHERS_TERRACE2 = 3453,
    WRATH_AREA_RUINS_OF_AHN_QIRAJ1 = 3454,
    WRATH_AREA_THE_NORTH_SEA = 3455,
    WRATH_AREA_NAXXRAMAS = 3456,
    WRATH_AREA_KARAZHAN1 = 3457,
    WRATH_AREA_CITY = 3459,
    WRATH_AREA_GOLDEN_STRAND = 3460,
    WRATH_AREA_SUNSAIL_ANCHORAGE = 3461,
    WRATH_AREA_FAIRBREEZE_VILLAGE = 3462,
    WRATH_AREA_MAGISTERS_GATE = 3463,
    WRATH_AREA_FARSTRIDER_RETREAT = 3464,
    WRATH_AREA_NORTH_SANCTUM = 3465,
    WRATH_AREA_WEST_SANCTUM = 3466,
    WRATH_AREA_EAST_SANCTUM = 3467,
    WRATH_AREA_SALTHERILS_HAVEN = 3468,
    WRATH_AREA_THURONS_LIVERY = 3469,
    WRATH_AREA_STILLWHISPER_POND = 3470,
    WRATH_AREA_THE_LIVING_WOOD = 3471,
    WRATH_AREA_AZUREBREEZE_COAST = 3472,
    WRATH_AREA_LAKE_ELRENDAR = 3473,
    WRATH_AREA_THE_SCORCHED_GROVE = 3474,
    WRATH_AREA_ZEB_WATHA = 3475,
    WRATH_AREA_TOR_WATHA = 3476,
    WRATH_AREA_AZJOL_NERUB = 3477,
    WRATH_AREA_GATES_OF_AHN_QIRAJ = 3478,
    WRATH_AREA_THE_VEILED_SEA7 = 3479,
    WRATH_AREA_DUSKWITHER_GROUNDS = 3480,
    WRATH_AREA_DUSKWITHER_SPIRE = 3481,
    WRATH_AREA_THE_DEAD_SCAR = 3482,
    WRATH_AREA_HELLFIRE_PENINSULA = 3483,
    WRATH_AREA_THE_SUNSPIRE = 3484,
    WRATH_AREA_FALTHRIEN_ACADEMY = 3485,
    WRATH_AREA_RAVENHOLDT_MANOR = 3486,
    WRATH_AREA_SILVERMOON_CITY = 3487,
    WRATH_AREA_TRANQUILLIEN = 3488,
    WRATH_AREA_SUNCROWN_VILLAGE = 3489,
    WRATH_AREA_GOLDENMIST_VILLAGE = 3490,
    WRATH_AREA_WINDRUNNER_VILLAGE = 3491,
    WRATH_AREA_WINDRUNNER_SPIRE = 3492,
    WRATH_AREA_SANCTUM_OF_THE_SUN = 3493,
    WRATH_AREA_SANCTUM_OF_THE_MOON = 3494,
    WRATH_AREA_DAWNSTAR_SPIRE = 3495,
    WRATH_AREA_FARSTRIDER_ENCLAVE = 3496,
    WRATH_AREA_AN_DAROTH = 3497,
    WRATH_AREA_AN_TELAS = 3498,
    WRATH_AREA_AN_OWYN = 3499,
    WRATH_AREA_DEATHOLME = 3500,
    WRATH_AREA_BLEEDING_ZIGGURAT = 3501,
    WRATH_AREA_HOWLING_ZIGGURAT = 3502,
    WRATH_AREA_SHALANDIS_ISLE = 3503,
    WRATH_AREA_TORYL_ESTATE = 3504,
    WRATH_AREA_UNDERLIGHT_MINES = 3505,
    WRATH_AREA_ANDILIEN_ESTATE = 3506,
    WRATH_AREA_HATCHET_HILLS = 3507,
    WRATH_AREA_AMANI_PASS = 3508,
    WRATH_AREA_SUNGRAZE_PEAK = 3509,
    WRATH_AREA_AMANI_CATACOMBS = 3510,
    WRATH_AREA_TOWER_OF_THE_DAMNED = 3511,
    WRATH_AREA_ZEB_SORA = 3512,
    WRATH_AREA_LAKE_ELRENDAR1 = 3513,
    WRATH_AREA_THE_DEAD_SCAR1 = 3514,
    WRATH_AREA_ELRENDAR_RIVER = 3515,
    WRATH_AREA_ZEB_TELA = 3516,
    WRATH_AREA_ZEB_NOWA = 3517,
    WRATH_AREA_NAGRAND = 3518,
    WRATH_AREA_TEROKKAR_FOREST = 3519,
    WRATH_AREA_SHADOWMOON_VALLEY = 3520,
    WRATH_AREA_ZANGARMARSH = 3521,
    WRATH_AREA_BLADES_EDGE_MOUNTAINS = 3522,
    WRATH_AREA_NETHERSTORM = 3523,
    WRATH_AREA_AZUREMYST_ISLE = 3524,
    WRATH_AREA_BLOODMYST_ISLE = 3525,
    WRATH_AREA_AMMEN_VALE = 3526,
    WRATH_AREA_CRASH_SITE = 3527,
    WRATH_AREA_SILVERLINE_LAKE = 3528,
    WRATH_AREA_NESTLEWOOD_THICKET = 3529,
    WRATH_AREA_SHADOW_RIDGE = 3530,
    WRATH_AREA_SKULKING_ROW = 3531,
    WRATH_AREA_DAWNING_LANE = 3532,
    WRATH_AREA_RUINS_OF_SILVERMOON = 3533,
    WRATH_AREA_FETHS_WAY = 3534,
    WRATH_AREA_HELLFIRE_CITADEL = 3535,
    WRATH_AREA_THRALLMAR = 3536,
    WRATH_AREA_BOREAN_TUNDRA = 3537,
    WRATH_AREA_HONOR_HOLD = 3538,
    WRATH_AREA_THE_STAIR_OF_DESTINY = 3539,
    WRATH_AREA_TWISTING_NETHER = 3540,
    WRATH_AREA_FORGE_CAMP_MAGEDDON = 3541,
    WRATH_AREA_THE_PATH_OF_GLORY = 3542,
    WRATH_AREA_THE_GREAT_FISSURE = 3543,
    WRATH_AREA_PLAIN_OF_SHARDS = 3544,
    WRATH_AREA_HELLFIRE_CITADEL1 = 3545,
    WRATH_AREA_EXPEDITION_ARMORY = 3546,
    WRATH_AREA_THRONE_OF_KIL_JAEDEN = 3547,
    WRATH_AREA_FORGE_CAMP_RAGE = 3548,
    WRATH_AREA_INVASION_POINT_ANNIHILATOR = 3549,
    WRATH_AREA_BORUNE_RUINS = 3550,
    WRATH_AREA_RUINS_OF_SHA_NAAR = 3551,
    WRATH_AREA_TEMPLE_OF_TELHAMAT = 3552,
    WRATH_AREA_POOLS_OF_AGGONAR = 3553,
    WRATH_AREA_FALCON_WATCH = 3554,
    WRATH_AREA_MAG_HAR_POST = 3555,
    WRATH_AREA_DEN_OF_HAAL_ESH = 3556,
    WRATH_AREA_THE_EXODAR = 3557,
    WRATH_AREA_ELRENDAR_FALLS = 3558,
    WRATH_AREA_NESTLEWOOD_HILLS = 3559,
    WRATH_AREA_AMMEN_FIELDS = 3560,
    WRATH_AREA_THE_SACRED_GROVE = 3561,
    WRATH_AREA_HELLFIRE_RAMPARTS = 3562,
    WRATH_AREA_HELLFIRE_CITADEL2 = 3563,
    WRATH_AREA_EMBERGLADE = 3564,
    WRATH_AREA_CENARION_REFUGE = 3565,
    WRATH_AREA_MOONWING_DEN = 3566,
    WRATH_AREA_POD_CLUSTER = 3567,
    WRATH_AREA_POD_WRECKAGE = 3568,
    WRATH_AREA_TIDES_HOLLOW = 3569,
    WRATH_AREA_WRATHSCALE_POINT = 3570,
    WRATH_AREA_BRISTLELIMB_VILLAGE = 3571,
    WRATH_AREA_STILLPINE_HOLD = 3572,
    WRATH_AREA_ODESYUS_LANDING = 3573,
    WRATH_AREA_VALAARS_BERTH = 3574,
    WRATH_AREA_SILTING_SHORE = 3575,
    WRATH_AREA_AZURE_WATCH = 3576,
    WRATH_AREA_GEEZLES_CAMP = 3577,
    WRATH_AREA_MENAGERIE_WRECKAGE = 3578,
    WRATH_AREA_TRAITORS_COVE = 3579,
    WRATH_AREA_WILDWIND_PEAK = 3580,
    WRATH_AREA_WILDWIND_PATH = 3581,
    WRATH_AREA_ZETH_GOR = 3582,
    WRATH_AREA_BERYL_COAST = 3583,
    WRATH_AREA_BLOOD_WATCH = 3584,
    WRATH_AREA_BLADEWOOD = 3585,
    WRATH_AREA_THE_VECTOR_COIL = 3586,
    WRATH_AREA_THE_WARP_PISTON = 3587,
    WRATH_AREA_THE_CRYO_CORE = 3588,
    WRATH_AREA_THE_CRIMSON_REACH = 3589,
    WRATH_AREA_WRATHSCALE_LAIR = 3590,
    WRATH_AREA_RUINS_OF_LORETH_ARAN = 3591,
    WRATH_AREA_NAZZIVIAN = 3592,
    WRATH_AREA_AXXARIEN = 3593,
    WRATH_AREA_BLACKSILT_SHORE = 3594,
    WRATH_AREA_THE_FOUL_POOL = 3595,
    WRATH_AREA_THE_HIDDEN_REEF = 3596,
    WRATH_AREA_AMBERWEB_PASS = 3597,
    WRATH_AREA_WYRMSCAR_ISLAND = 3598,
    WRATH_AREA_TALON_STAND = 3599,
    WRATH_AREA_BRISTLELIMB_ENCLAVE = 3600,
    WRATH_AREA_RAGEFEATHER_RIDGE = 3601,
    WRATH_AREA_KESSELS_CROSSING = 3602,
    WRATH_AREA_TEL_ATHIONS_CAMP = 3603,
    WRATH_AREA_THE_BLOODCURSED_REEF = 3604,
    WRATH_AREA_HYJAL_PAST = 3605,
    WRATH_AREA_HYJAL_SUMMIT = 3606,
    WRATH_AREA_SERPENTSHRINE_CAVERN = 3607,
    WRATH_AREA_VINDICATORS_REST = 3608,
    WRATH_AREA_UNUSED3 = 3609,
    WRATH_AREA_BURNING_BLADE_RUINS = 3610,
    WRATH_AREA_CLAN_WATCH = 3611,
    WRATH_AREA_BLOODCURSE_ISLE = 3612,
    WRATH_AREA_GARADAR = 3613,
    WRATH_AREA_SKYSONG_LAKE = 3614,
    WRATH_AREA_THRONE_OF_THE_ELEMENTS = 3615,
    WRATH_AREA_LAUGHING_SKULL_RUINS = 3616,
    WRATH_AREA_WARMAUL_HILL = 3617,
    WRATH_AREA_GRUULS_LAIR = 3618,
    WRATH_AREA_AUREN_RIDGE = 3619,
    WRATH_AREA_AUREN_FALLS = 3620,
    WRATH_AREA_LAKE_SUNSPRING = 3621,
    WRATH_AREA_SUNSPRING_POST = 3622,
    WRATH_AREA_AERIS_LANDING = 3623,
    WRATH_AREA_FORGE_CAMP_FEAR = 3624,
    WRATH_AREA_FORGE_CAMP_HATE = 3625,
    WRATH_AREA_TELAAR = 3626,
    WRATH_AREA_NORTHWIND_CLEFT = 3627,
    WRATH_AREA_HALAA = 3628,
    WRATH_AREA_SOUTHWIND_CLEFT = 3629,
    WRATH_AREA_OSHU_GUN = 3630,
    WRATH_AREA_SPIRIT_FIELDS = 3631,
    WRATH_AREA_SHAMANAR = 3632,
    WRATH_AREA_ANCESTRAL_GROUNDS = 3633,
    WRATH_AREA_WINDYREED_VILLAGE = 3634,
    WRATH_AREA_UNUSED2 = 3635,
    WRATH_AREA_ELEMENTAL_PLATEAU = 3636,
    WRATH_AREA_KILSORROW_FORTRESS = 3637,
    WRATH_AREA_THE_RING_OF_TRIALS = 3638,
    WRATH_AREA_SILVERMYST_ISLE = 3639,
    WRATH_AREA_DAGGERFEN_VILLAGE = 3640,
    WRATH_AREA_UMBRAFEN_VILLAGE = 3641,
    WRATH_AREA_FERALFEN_VILLAGE = 3642,
    WRATH_AREA_BLOODSCALE_ENCLAVE = 3643,
    WRATH_AREA_TELREDOR = 3644,
    WRATH_AREA_ZABRA_JIN = 3645,
    WRATH_AREA_QUAGG_RIDGE = 3646,
    WRATH_AREA_THE_SPAWNING_GLEN = 3647,
    WRATH_AREA_THE_DEAD_MIRE = 3648,
    WRATH_AREA_SPOREGGAR = 3649,
    WRATH_AREA_ANGO_ROSH_GROUNDS = 3650,
    WRATH_AREA_ANGO_ROSH_STRONGHOLD = 3651,
    WRATH_AREA_FUNGGOR_CAVERN = 3652,
    WRATH_AREA_SERPENT_LAKE = 3653,
    WRATH_AREA_THE_DRAIN = 3654,
    WRATH_AREA_UMBRAFEN_LAKE = 3655,
    WRATH_AREA_MARSHLIGHT_LAKE = 3656,
    WRATH_AREA_PORTAL_CLEARING = 3657,
    WRATH_AREA_SPOREWIND_LAKE = 3658,
    WRATH_AREA_THE_LAGOON = 3659,
    WRATH_AREA_BLADES_RUN = 3660,
    WRATH_AREA_BLADE_TOOTH_CANYON = 3661,
    WRATH_AREA_COMMONS_HALL = 3662,
    WRATH_AREA_DERELICT_MANOR = 3663,
    WRATH_AREA_HUNTRESS_OF_THE_SUN = 3664,
    WRATH_AREA_FALCONWING_SQUARE = 3665,
    WRATH_AREA_HALAANI_BASIN = 3666,
    WRATH_AREA_HEWN_BOG = 3667,
    WRATH_AREA_BOHA_MU_RUINS = 3668,
    WRATH_AREA_THE_STADIUM = 3669,
    WRATH_AREA_THE_OVERLOOK = 3670,
    WRATH_AREA_BROKEN_HILL = 3671,
    WRATH_AREA_MAG_HARI_PROCESSION = 3672,
    WRATH_AREA_NESINGWARY_SAFARI = 3673,
    WRATH_AREA_CENARION_THICKET = 3674,
    WRATH_AREA_TUUREM = 3675,
    WRATH_AREA_VEIL_SHIENOR = 3676,
    WRATH_AREA_VEIL_SKITH = 3677,
    WRATH_AREA_VEIL_SHALAS = 3678,
    WRATH_AREA_SKETTIS = 3679,
    WRATH_AREA_BLACKWIND_VALLEY = 3680,
    WRATH_AREA_FIREWING_POINT = 3681,
    WRATH_AREA_GRANGOL_VAR_VILLAGE = 3682,
    WRATH_AREA_STONEBREAKER_HOLD = 3683,
    WRATH_AREA_ALLERIAN_STRONGHOLD = 3684,
    WRATH_AREA_BONECHEWER_RUINS = 3685,
    WRATH_AREA_VEIL_LITHIC = 3686,
    WRATH_AREA_OLEMBAS = 3687,
    WRATH_AREA_AUCHINDOUN = 3688,
    WRATH_AREA_VEIL_RESKK = 3689,
    WRATH_AREA_BLACKWIND_LAKE = 3690,
    WRATH_AREA_LAKE_ERE_NORU = 3691,
    WRATH_AREA_LAKE_JORUNE = 3692,
    WRATH_AREA_SKETHYL_MOUNTAINS = 3693,
    WRATH_AREA_MISTY_RIDGE = 3694,
    WRATH_AREA_THE_BROKEN_HILLS = 3695,
    WRATH_AREA_THE_BARRIER_HILLS = 3696,
    WRATH_AREA_THE_BONE_WASTES = 3697,
    WRATH_AREA_NAGRAND_ARENA = 3698,
    WRATH_AREA_LAUGHING_SKULL_COURTYARD = 3699,
    WRATH_AREA_THE_RING_OF_BLOOD = 3700,
    WRATH_AREA_ARENA_FLOOR = 3701,
    WRATH_AREA_BLADES_EDGE_ARENA = 3702,
    WRATH_AREA_SHATTRATH_CITY = 3703,
    WRATH_AREA_THE_SHEPHERDS_GATE = 3704,
    WRATH_AREA_TELAARI_BASIN = 3705,
    WRATH_AREA_THE_DARK_PORTAL1 = 3706,
    WRATH_AREA_ALLIANCE_BASE = 3707,
    WRATH_AREA_HORDE_ENCAMPMENT = 3708,
    WRATH_AREA_NIGHT_ELF_VILLAGE = 3709,
    WRATH_AREA_NORDRASSIL = 3710,
    WRATH_AREA_SHOLAZAR_BASIN = 3711,
    WRATH_AREA_AREA_52 = 3712,
    WRATH_AREA_THE_BLOOD_FURNACE = 3713,
    WRATH_AREA_THE_SHATTERED_HALLS = 3714,
    WRATH_AREA_THE_STEAMVAULT = 3715,
    WRATH_AREA_THE_UNDERBOG = 3716,
    WRATH_AREA_THE_SLAVE_PENS = 3717,
    WRATH_AREA_SWAMPRAT_POST = 3718,
    WRATH_AREA_BLEEDING_HOLLOW_RUINS = 3719,
    WRATH_AREA_TWIN_SPIRE_RUINS = 3720,
    WRATH_AREA_THE_CRUMBLING_WASTE = 3721,
    WRATH_AREA_MANAFORGE_ARA = 3722,
    WRATH_AREA_ARKLON_RUINS = 3723,
    WRATH_AREA_COSMOWRENCH = 3724,
    WRATH_AREA_RUINS_OF_ENKAAT = 3725,
    WRATH_AREA_MANAFORGE_B_NAAR = 3726,
    WRATH_AREA_THE_SCRAP_FIELD = 3727,
    WRATH_AREA_THE_VORTEX_FIELDS = 3728,
    WRATH_AREA_THE_HEAP = 3729,
    WRATH_AREA_MANAFORGE_CORUU = 3730,
    WRATH_AREA_THE_TEMPEST_RIFT = 3731,
    WRATH_AREA_KIRIN_VAR_VILLAGE = 3732,
    WRATH_AREA_THE_VIOLET_TOWER = 3733,
    WRATH_AREA_MANAFORGE_DURO = 3734,
    WRATH_AREA_VOIDWIND_PLATEAU = 3735,
    WRATH_AREA_MANAFORGE_ULTRIS = 3736,
    WRATH_AREA_CELESTIAL_RIDGE = 3737,
    WRATH_AREA_THE_STORMSPIRE = 3738,
    WRATH_AREA_FORGE_BASE_OBLIVION = 3739,
    WRATH_AREA_FORGE_BASE_GEHENNA = 3740,
    WRATH_AREA_RUINS_OF_FARAHLON = 3741,
    WRATH_AREA_SOCRETHARS_SEAT = 3742,
    WRATH_AREA_LEGION_HOLD = 3743,
    WRATH_AREA_SHADOWMOON_VILLAGE = 3744,
    WRATH_AREA_WILDHAMMER_STRONGHOLD = 3745,
    WRATH_AREA_THE_HAND_OF_GUL_DAN = 3746,
    WRATH_AREA_THE_FEL_PITS = 3747,
    WRATH_AREA_THE_DEATHFORGE = 3748,
    WRATH_AREA_COILSKAR_CISTERN = 3749,
    WRATH_AREA_COILSKAR_POINT = 3750,
    WRATH_AREA_SUNFIRE_POINT = 3751,
    WRATH_AREA_ILLIDARI_POINT = 3752,
    WRATH_AREA_RUINS_OF_BAA_RI = 3753,
    WRATH_AREA_ALTAR_OF_SHA_TAR = 3754,
    WRATH_AREA_THE_STAIR_OF_DOOM = 3755,
    WRATH_AREA_RUINS_OF_KARABOR = 3756,
    WRATH_AREA_ATA_MAL_TERRACE = 3757,
    WRATH_AREA_NETHERWING_FIELDS = 3758,
    WRATH_AREA_NETHERWING_LEDGE = 3759,
    WRATH_AREA_THE_BARRIER_HILLS1 = 3760,
    WRATH_AREA_THE_HIGH_PATH = 3761,
    WRATH_AREA_WINDYREED_PASS = 3762,
    WRATH_AREA_ZANGAR_RIDGE = 3763,
    WRATH_AREA_THE_TWILIGHT_RIDGE = 3764,
    WRATH_AREA_RAZORTHORN_TRAIL = 3765,
    WRATH_AREA_OREBOR_HARBORAGE = 3766,
    WRATH_AREA_BLADES_RUN1 = 3767,
    WRATH_AREA_JAGGED_RIDGE = 3768,
    WRATH_AREA_THUNDERLORD_STRONGHOLD = 3769,
    WRATH_AREA_BLADE_TOOTH_CANYON1 = 3770,
    WRATH_AREA_THE_LIVING_GROVE = 3771,
    WRATH_AREA_SYLVANAAR = 3772,
    WRATH_AREA_BLADESPIRE_HOLD = 3773,
    WRATH_AREA_GRUULS_LAIR1 = 3774,
    WRATH_AREA_CIRCLE_OF_BLOOD = 3775,
    WRATH_AREA_BLOODMAUL_OUTPOST = 3776,
    WRATH_AREA_BLOODMAUL_CAMP = 3777,
    WRATH_AREA_DRAENETHYST_MINE = 3778,
    WRATH_AREA_TROGMAS_CLAIM = 3779,
    WRATH_AREA_BLACKWING_COVEN = 3780,
    WRATH_AREA_GRISHNATH = 3781,
    WRATH_AREA_VEIL_LASHH = 3782,
    WRATH_AREA_VEIL_VEKH = 3783,
    WRATH_AREA_FORGE_CAMP_TERROR = 3784,
    WRATH_AREA_FORGE_CAMP_WRATH = 3785,
    WRATH_AREA_OGRI_LA = 3786,
    WRATH_AREA_FORGE_CAMP_ANGER = 3787,
    WRATH_AREA_THE_LOW_PATH = 3788,
    WRATH_AREA_SHADOW_LABYRINTH = 3789,
    WRATH_AREA_AUCHENAI_CRYPTS = 3790,
    WRATH_AREA_SETHEKK_HALLS = 3791,
    WRATH_AREA_MANA_TOMBS = 3792,
    WRATH_AREA_FELSPARK_RAVINE = 3793,
    WRATH_AREA_VALLEY_OF_BONES1 = 3794,
    WRATH_AREA_SHA_NAARI_WASTES = 3795,
    WRATH_AREA_THE_WARP_FIELDS = 3796,
    WRATH_AREA_FALLEN_SKY_RIDGE = 3797,
    WRATH_AREA_HAAL_ESHI_GORGE = 3798,
    WRATH_AREA_STONEWALL_CANYON = 3799,
    WRATH_AREA_THORNFANG_HILL = 3800,
    WRATH_AREA_MAG_HAR_GROUNDS = 3801,
    WRATH_AREA_VOID_RIDGE = 3802,
    WRATH_AREA_THE_ABYSSAL_SHELF = 3803,
    WRATH_AREA_THE_LEGION_FRONT = 3804,
    WRATH_AREA_ZUL_AMAN = 3805,
    WRATH_AREA_SUPPLY_CARAVAN = 3806,
    WRATH_AREA_REAVERS_FALL = 3807,
    WRATH_AREA_CENARION_POST = 3808,
    WRATH_AREA_SOUTHERN_RAMPART = 3809,
    WRATH_AREA_NORTHERN_RAMPART = 3810,
    WRATH_AREA_GOR_GAZ_OUTPOST = 3811,
    WRATH_AREA_SPINEBREAKER_POST = 3812,
    WRATH_AREA_THE_PATH_OF_ANGUISH = 3813,
    WRATH_AREA_EAST_SUPPLY_CARAVAN = 3814,
    WRATH_AREA_EXPEDITION_POINT = 3815,
    WRATH_AREA_ZEPPELIN_CRASH = 3816,
    WRATH_AREA_TESTING = 3817,
    WRATH_AREA_BLOODSCALE_GROUNDS = 3818,
    WRATH_AREA_DARKCREST_ENCLAVE = 3819,
    WRATH_AREA_EYE_OF_THE_STORM = 3820,
    WRATH_AREA_WARDENS_CAGE = 3821,
    WRATH_AREA_ECLIPSE_POINT = 3822,
    WRATH_AREA_ISLE_OF_TRIBULATIONS = 3823,
    WRATH_AREA_BLOODMAUL_RAVINE = 3824,
    WRATH_AREA_DRAGONS_END = 3825,
    WRATH_AREA_DAGGERMAW_CANYON = 3826,
    WRATH_AREA_VEKHAAR_STAND = 3827,
    WRATH_AREA_RUUAN_WEALD = 3828,
    WRATH_AREA_VEIL_RUUAN = 3829,
    WRATH_AREA_RAVENS_WOOD = 3830,
    WRATH_AREA_DEATHS_DOOR = 3831,
    WRATH_AREA_VORTEX_PINNACLE = 3832,
    WRATH_AREA_RAZOR_RIDGE = 3833,
    WRATH_AREA_RIDGE_OF_MADNESS = 3834,
    WRATH_AREA_DUSTQUILL_RAVINE = 3835,
    WRATH_AREA_MAGTHERIDONS_LAIR = 3836,
    WRATH_AREA_SUNFURY_HOLD = 3837,
    WRATH_AREA_SPINEBREAKER_MOUNTAINS = 3838,
    WRATH_AREA_ABANDONED_ARMORY = 3839,
    WRATH_AREA_THE_BLACK_TEMPLE = 3840,
    WRATH_AREA_DARKCREST_SHORE = 3841,
    WRATH_AREA_TEMPEST_KEEP = 3842,
    WRATH_AREA_MOK_NATHAL_VILLAGE = 3844,
    WRATH_AREA_TEMPEST_KEEP1 = 3845,
    WRATH_AREA_THE_ARCATRAZ = 3846,
    WRATH_AREA_THE_BOTANICA = 3847,
    WRATH_AREA_THE_ARCATRAZ1 = 3848,
    WRATH_AREA_THE_MECHANAR = 3849,
    WRATH_AREA_NETHERSTONE = 3850,
    WRATH_AREA_MIDREALM_POST = 3851,
    WRATH_AREA_TULUMANS_LANDING = 3852,
    WRATH_AREA_PROTECTORATE_WATCH_POST = 3854,
    WRATH_AREA_CIRCLE_OF_BLOOD_ARENA = 3855,
    WRATH_AREA_ELRENDAR_CROSSING = 3856,
    WRATH_AREA_AMMEN_FORD = 3857,
    WRATH_AREA_RAZORTHORN_SHELF = 3858,
    WRATH_AREA_SILMYR_LAKE = 3859,
    WRATH_AREA_RAASTOK_GLADE = 3860,
    WRATH_AREA_THALASSIAN_PASS = 3861,
    WRATH_AREA_CHURNING_GULCH = 3862,
    WRATH_AREA_BROKEN_WILDS = 3863,
    WRATH_AREA_BASH_IR_LANDING = 3864,
    WRATH_AREA_CRYSTAL_SPINE = 3865,
    WRATH_AREA_SKALD = 3866,
    WRATH_AREA_BLADED_GULCH = 3867,
    WRATH_AREA_GYRO_PLANK_BRIDGE = 3868,
    WRATH_AREA_MAGE_TOWER = 3869,
    WRATH_AREA_BLOOD_ELF_TOWER = 3870,
    WRATH_AREA_DRAENEI_RUINS = 3871,
    WRATH_AREA_FEL_REAVER_RUINS = 3872,
    WRATH_AREA_THE_PROVING_GROUNDS = 3873,
    WRATH_AREA_ECO_DOME_FARFIELD = 3874,
    WRATH_AREA_ECO_DOME_SKYPERCH = 3875,
    WRATH_AREA_ECO_DOME_SUTHERON = 3876,
    WRATH_AREA_ECO_DOME_MIDREALM = 3877,
    WRATH_AREA_ETHEREUM_STAGING_GROUNDS = 3878,
    WRATH_AREA_CHAPEL_YARD = 3879,
    WRATH_AREA_ACCESS_SHAFT_ZEON = 3880,
    WRATH_AREA_TRELLEUM_MINE = 3881,
    WRATH_AREA_INVASION_POINT_DESTROYER = 3882,
    WRATH_AREA_CAMP_OF_BOOM = 3883,
    WRATH_AREA_SPINEBREAKER_PASS = 3884,
    WRATH_AREA_NETHERWEB_RIDGE = 3885,
    WRATH_AREA_DERELICT_CARAVAN = 3886,
    WRATH_AREA_REFUGEE_CARAVAN = 3887,
    WRATH_AREA_SHADOW_TOMB = 3888,
    WRATH_AREA_VEIL_RHAZE = 3889,
    WRATH_AREA_TOMB_OF_LIGHTS = 3890,
    WRATH_AREA_CARRION_HILL = 3891,
    WRATH_AREA_WRITHING_MOUND = 3892,
    WRATH_AREA_RING_OF_OBSERVANCE = 3893,
    WRATH_AREA_AUCHENAI_GROUNDS = 3894,
    WRATH_AREA_CENARION_WATCHPOST = 3895,
    WRATH_AREA_ALDOR_RISE = 3896,
    WRATH_AREA_TERRACE_OF_LIGHT = 3897,
    WRATH_AREA_SCRYERS_TIER = 3898,
    WRATH_AREA_LOWER_CITY = 3899,
    WRATH_AREA_INVASION_POINT_OVERLORD = 3900,
    WRATH_AREA_ALLERIAN_POST = 3901,
    WRATH_AREA_STONEBREAKER_CAMP = 3902,
    WRATH_AREA_BOULDER_MOK = 3903,
    WRATH_AREA_CURSED_HOLLOW = 3904,
    WRATH_AREA_COILFANG_RESERVOIR = 3905,
    WRATH_AREA_THE_BLOODWASH = 3906,
    WRATH_AREA_VERIDIAN_POINT = 3907,
    WRATH_AREA_MIDDENVALE = 3908,
    WRATH_AREA_THE_LOST_FOLD = 3909,
    WRATH_AREA_MYSTWOOD = 3910,
    WRATH_AREA_TRANQUIL_SHORE = 3911,
    WRATH_AREA_GOLDENBOUGH_PASS = 3912,
    WRATH_AREA_RUNESTONE_FALITHAS = 3913,
    WRATH_AREA_RUNESTONE_SHAN_DOR = 3914,
    WRATH_AREA_FAIRBRIDGE_STRAND = 3915,
    WRATH_AREA_MOONGRAZE_WOODS = 3916,
    WRATH_AREA_AUCHINDOUN1 = 3917,
    WRATH_AREA_TOSHLEYS_STATION = 3918,
    WRATH_AREA_SINGING_RIDGE = 3919,
    WRATH_AREA_SHATTER_POINT = 3920,
    WRATH_AREA_ARKLONIS_RIDGE = 3921,
    WRATH_AREA_BLADESPIRE_OUTPOST = 3922,
    WRATH_AREA_GRUULS_LAIR2 = 3923,
    WRATH_AREA_NORTHMAUL_TOWER = 3924,
    WRATH_AREA_SOUTHMAUL_TOWER = 3925,
    WRATH_AREA_SHATTERED_PLAINS = 3926,
    WRATH_AREA_ORONOKS_FARM = 3927,
    WRATH_AREA_THE_ALTAR_OF_DAMNATION = 3928,
    WRATH_AREA_THE_PATH_OF_CONQUEST = 3929,
    WRATH_AREA_ECLIPSION_FIELDS = 3930,
    WRATH_AREA_BLADESPIRE_GROUNDS = 3931,
    WRATH_AREA_SKETH_LON_BASE_CAMP = 3932,
    WRATH_AREA_SKETH_LON_WRECKAGE = 3933,
    WRATH_AREA_TOWN_SQUARE = 3934,
    WRATH_AREA_WIZARD_ROW = 3935,
    WRATH_AREA_DEATHFORGE_TOWER = 3936,
    WRATH_AREA_SLAG_WATCH = 3937,
    WRATH_AREA_SANCTUM_OF_THE_STARS = 3938,
    WRATH_AREA_DRAGONMAW_FORTRESS = 3939,
    WRATH_AREA_THE_FETID_POOL = 3940,
    WRATH_AREA_TEST = 3941,
    WRATH_AREA_RAZAANS_LANDING = 3942,
    WRATH_AREA_INVASION_POINT_CATACLYSM = 3943,
    WRATH_AREA_THE_ALTAR_OF_SHADOWS = 3944,
    WRATH_AREA_NETHERWING_PASS = 3945,
    WRATH_AREA_WAYNES_REFUGE = 3946,
    WRATH_AREA_THE_SCALDING_POOLS = 3947,
    WRATH_AREA_BRIAN_AND_PAT_TEST = 3948,
    WRATH_AREA_MAGMA_FIELDS = 3949,
    WRATH_AREA_CRIMSON_WATCH = 3950,
    WRATH_AREA_EVERGROVE = 3951,
    WRATH_AREA_WYRMSKULL_BRIDGE = 3952,
    WRATH_AREA_SCALEWING_SHELF = 3953,
    WRATH_AREA_WYRMSKULL_TUNNEL = 3954,
    WRATH_AREA_HELLFIRE_BASIN = 3955,
    WRATH_AREA_THE_SHADOW_STAIR = 3956,
    WRATH_AREA_SHA_TARI_OUTPOST = 3957,
    WRATH_AREA_SHA_TARI_BASE_CAMP = 3958,
    WRATH_AREA_BLACK_TEMPLE = 3959,
    WRATH_AREA_SOULGRINDERS_BARROW = 3960,
    WRATH_AREA_SORROW_WING_POINT = 3961,
    WRATH_AREA_VIM_GOLS_CIRCLE = 3962,
    WRATH_AREA_DRAGONSPINE_RIDGE = 3963,
    WRATH_AREA_SKYGUARD_OUTPOST = 3964,
    WRATH_AREA_NETHERWING_MINES = 3965,
    WRATH_AREA_DRAGONMAW_BASE_CAMP = 3966,
    WRATH_AREA_DRAGONMAW_SKYWAY = 3967,
    WRATH_AREA_RUINS_OF_LORDAERON1 = 3968,
    WRATH_AREA_RIVENDARKS_PERCH = 3969,
    WRATH_AREA_OBSIDIAS_PERCH = 3970,
    WRATH_AREA_INSIDIONS_PERCH = 3971,
    WRATH_AREA_FURYWINGS_PERCH = 3972,
    WRATH_AREA_BLACKWIND_LANDING = 3973,
    WRATH_AREA_VEIL_HARR_IK = 3974,
    WRATH_AREA_TEROKKS_REST = 3975,
    WRATH_AREA_VEIL_ALA_RAK = 3976,
    WRATH_AREA_UPPER_VEIL_SHIL_AK = 3977,
    WRATH_AREA_LOWER_VEIL_SHIL_AK = 3978,
    WRATH_AREA_THE_FROZEN_SEA = 3979,
    WRATH_AREA_DAGGERCAP_BAY = 3980,
    WRATH_AREA_VALGARDE = 3981,
    WRATH_AREA_WYRMSKULL_VILLAGE = 3982,
    WRATH_AREA_UTGARDE_KEEP1 = 3983,
    WRATH_AREA_NIFFLEVAR = 3984,
    WRATH_AREA_FALLS_OF_YMIRON = 3985,
    WRATH_AREA_ECHO_REACH = 3986,
    WRATH_AREA_THE_ISLE_OF_SPEARS = 3987,
    WRATH_AREA_KAMAGUA = 3988,
    WRATH_AREA_GARVANS_REEF = 3989,
    WRATH_AREA_SCALAWAG_POINT = 3990,
    WRATH_AREA_NEW_AGAMAND = 3991,
    WRATH_AREA_THE_ANCIENT_LIFT = 3992,
    WRATH_AREA_WESTGUARD_TURRET = 3993,
    WRATH_AREA_HALGRIND = 3994,
    WRATH_AREA_THE_LAUGHING_STAND = 3995,
    WRATH_AREA_BAELGUNS_EXCAVATION_SITE = 3996,
    WRATH_AREA_EXPLORERS_LEAGUE_OUTPOST = 3997,
    WRATH_AREA_WESTGUARD_KEEP = 3998,
    WRATH_AREA_STEEL_GATE = 3999,
    WRATH_AREA_VENGEANCE_LANDING = 4000,
    WRATH_AREA_BALEHEIM = 4001,
    WRATH_AREA_SKORN = 4002,
    WRATH_AREA_FORT_WILDERVAR = 4003,
    WRATH_AREA_VILEPREY_VILLAGE = 4004,
    WRATH_AREA_IVALDS_RUIN = 4005,
    WRATH_AREA_GJALERBRON = 4006,
    WRATH_AREA_TOMB_OF_THE_LOST_KINGS = 4007,
    WRATH_AREA_SHARTUULS_TRANSPORTER = 4008,
    WRATH_AREA_ILLIDARI_TRAINING_GROUNDS = 4009,
    WRATH_AREA_MUDSPROCKET = 4010,
    WRATH_AREA_CAMP_WINTERHOOF = 4018,
    WRATH_AREA_DEVELOPMENT_LAND = 4019,
    WRATH_AREA_MIGHTSTONE_QUARRY = 4020,
    WRATH_AREA_BLOODSPORE_PLAINS = 4021,
    WRATH_AREA_GAMMOTH = 4022,
    WRATH_AREA_AMBER_LEDGE = 4023,
    WRATH_AREA_COLDARRA = 4024,
    WRATH_AREA_THE_WESTRIFT = 4025,
    WRATH_AREA_THE_TRANSITUS_STAIR = 4026,
    WRATH_AREA_COAST_OF_ECHOES = 4027,
    WRATH_AREA_RIPLASH_STRAND = 4028,
    WRATH_AREA_RIPLASH_RUINS = 4029,
    WRATH_AREA_COAST_OF_IDOLS = 4030,
    WRATH_AREA_PAL_EA = 4031,
    WRATH_AREA_VALIANCE_KEEP = 4032,
    WRATH_AREA_WINTERFIN_VILLAGE = 4033,
    WRATH_AREA_THE_BOREAN_WALL = 4034,
    WRATH_AREA_THE_GEYSER_FIELDS = 4035,
    WRATH_AREA_FIZZCRANK_PUMPING_STATION = 4036,
    WRATH_AREA_TAUNKA_LE_VILLAGE = 4037,
    WRATH_AREA_MAGNAMOTH_CAVERNS = 4038,
    WRATH_AREA_COLDROCK_QUARRY = 4039,
    WRATH_AREA_NJORDS_BREATH_BAY = 4040,
    WRATH_AREA_KASKALA = 4041,
    WRATH_AREA_TRANSBOREA = 4042,
    WRATH_AREA_THE_FLOOD_PLAINS = 4043,
    WRATH_AREA_DIREHORN_POST = 4046,
    WRATH_AREA_NATS_LANDING = 4047,
    WRATH_AREA_EMBER_CLUTCH = 4048,
    WRATH_AREA_TABETHAS_FARM = 4049,
    WRATH_AREA_DERELICT_STRAND = 4050,
    WRATH_AREA_THE_FROZEN_GLADE = 4051,
    WRATH_AREA_THE_VIBRANT_GLADE = 4052,
    WRATH_AREA_THE_TWISTED_GLADE = 4053,
    WRATH_AREA_RIVENWOOD = 4054,
    WRATH_AREA_CALDEMERE_LAKE = 4055,
    WRATH_AREA_UTGARDE_CATACOMBS = 4056,
    WRATH_AREA_SHIELD_HILL = 4057,
    WRATH_AREA_LAKE_CAULDROS = 4058,
    WRATH_AREA_CAULDROS_ISLE = 4059,
    WRATH_AREA_BLEEDING_VALE = 4060,
    WRATH_AREA_GIANTS_RUN = 4061,
    WRATH_AREA_APOTHECARY_CAMP = 4062,
    WRATH_AREA_EMBER_SPEAR_TOWER = 4063,
    WRATH_AREA_SHATTERED_STRAITS = 4064,
    WRATH_AREA_GJALERHORN = 4065,
    WRATH_AREA_FROSTBLADE_PEAK = 4066,
    WRATH_AREA_PLAGUEWOOD_TOWER = 4067,
    WRATH_AREA_WEST_SPEAR_TOWER = 4068,
    WRATH_AREA_NORTH_SPEAR_TOWER = 4069,
    WRATH_AREA_CHILLMERE_COAST = 4070,
    WRATH_AREA_WHISPER_GULCH = 4071,
    WRATH_AREA_SUB_ZONE = 4072,
    WRATH_AREA_WINTERS_TERRACE = 4073,
    WRATH_AREA_THE_WAKING_HALLS = 4074,
    WRATH_AREA_SUNWELL_PLATEAU = 4075,
    WRATH_AREA_REUSE_ME_SEVEN = 4076,
    WRATH_AREA_SORLOFS_STRAND = 4077,
    WRATH_AREA_RAZORTHORN_RISE = 4078,
    WRATH_AREA_FROSTBLADE_PASS = 4079,
    WRATH_AREA_ISLE_OF_QUEL_DANAS = 4080,
    WRATH_AREA_THE_DAWNCHASER = 4081,
    WRATH_AREA_THE_SIN_LOREN = 4082,
    WRATH_AREA_SILVERMOONS_PRIDE = 4083,
    WRATH_AREA_THE_BLOODOATH = 4084,
    WRATH_AREA_SHATTERED_SUN_STAGING_AREA = 4085,
    WRATH_AREA_SUNS_REACH_SANCTUM = 4086,
    WRATH_AREA_SUNS_REACH_HARBOR = 4087,
    WRATH_AREA_SUNS_REACH_ARMORY = 4088,
    WRATH_AREA_DAWNSTAR_VILLAGE = 4089,
    WRATH_AREA_THE_DAWNING_SQUARE = 4090,
    WRATH_AREA_GREENGILL_COAST = 4091,
    WRATH_AREA_THE_DEAD_SCAR2 = 4092,
    WRATH_AREA_THE_SUN_FORGE = 4093,
    WRATH_AREA_SUNWELL_PLATEAU1 = 4094,
    WRATH_AREA_MAGISTERS_TERRACE = 4095,
    WRATH_AREA_CLAYTONS_WOWEDIT_LAND = 4096,
    WRATH_AREA_WINTERFIN_CAVERNS = 4097,
    WRATH_AREA_GLIMMER_BAY = 4098,
    WRATH_AREA_WINTERFIN_RETREAT = 4099,
    WRATH_AREA_THE_CULLING_OF_STRATHOLME = 4100,
    WRATH_AREA_SANDS_OF_NASAM = 4101,
    WRATH_AREA_KROMS_LANDING = 4102,
    WRATH_AREA_NASAMS_TALON = 4103,
    WRATH_AREA_ECHO_COVE = 4104,
    WRATH_AREA_BERYL_POINT = 4105,
    WRATH_AREA_GARROSHS_LANDING = 4106,
    WRATH_AREA_WARSONG_JETTY = 4107,
    WRATH_AREA_FIZZCRANK_AIRSTRIP = 4108,
    WRATH_AREA_LAKE_KUM_UYA = 4109,
    WRATH_AREA_FARSHIRE_FIELDS = 4110,
    WRATH_AREA_FARSHIRE = 4111,
    WRATH_AREA_FARSHIRE_LIGHTHOUSE = 4112,
    WRATH_AREA_UNU_PE = 4113,
    WRATH_AREA_DEATHS_STAND = 4114,
    WRATH_AREA_THE_ABANDONED_REACH = 4115,
    WRATH_AREA_SCALDING_POOLS = 4116,
    WRATH_AREA_STEAM_SPRINGS = 4117,
    WRATH_AREA_TALRAMAS = 4118,
    WRATH_AREA_FESTERING_POOLS = 4119,
    WRATH_AREA_THE_NEXUS = 4120,
    WRATH_AREA_TRANSITUS_SHIELD = 4121,
    WRATH_AREA_BOR_GOROK_OUTPOST = 4122,
    WRATH_AREA_MAGMOTH = 4123,
    WRATH_AREA_THE_DENS_OF_DYING = 4124,
    WRATH_AREA_TEMPLE_CITY_OF_EN_KILAH = 4125,
    WRATH_AREA_THE_WAILING_ZIGGURAT = 4126,
    WRATH_AREA_STEELJAWS_CARAVAN = 4127,
    WRATH_AREA_NAXXANAR = 4128,
    WRATH_AREA_WARSONG_HOLD = 4129,
    WRATH_AREA_PLAINS_OF_NASAM = 4130,
    WRATH_AREA_MAGISTERS_TERRACE1 = 4131,
    WRATH_AREA_RUINS_OF_ELDRA_NATH = 4132,
    WRATH_AREA_CHARRED_RISE = 4133,
    WRATH_AREA_BLISTERING_POOL = 4134,
    WRATH_AREA_SPIRE_OF_BLOOD = 4135,
    WRATH_AREA_SPIRE_OF_DECAY = 4136,
    WRATH_AREA_SPIRE_OF_PAIN = 4137,
    WRATH_AREA_FROZEN_REACH = 4138,
    WRATH_AREA_PARHELION_PLAZA = 4139,
    WRATH_AREA_THE_DEAD_SCAR3 = 4140,
    WRATH_AREA_TORPS_FARM = 4141,
    WRATH_AREA_WARSONG_GRANARY = 4142,
    WRATH_AREA_WARSONG_SLAUGHTERHOUSE = 4143,
    WRATH_AREA_WARSONG_FARMS_OUTPOST = 4144,
    WRATH_AREA_WEST_POINT_STATION = 4145,
    WRATH_AREA_NORTH_POINT_STATION = 4146,
    WRATH_AREA_MID_POINT_STATION = 4147,
    WRATH_AREA_SOUTH_POINT_STATION = 4148,
    WRATH_AREA_DEHTA_ENCAMPMENT = 4149,
    WRATH_AREA_KAWS_ROOST = 4150,
    WRATH_AREA_WESTWIND_REFUGEE_CAMP = 4151,
    WRATH_AREA_MOA_KI_HARBOR = 4152,
    WRATH_AREA_INDU_LE_VILLAGE = 4153,
    WRATH_AREA_SNOWFALL_GLADE = 4154,
    WRATH_AREA_THE_HALF_SHELL = 4155,
    WRATH_AREA_SURGE_NEEDLE = 4156,
    WRATH_AREA_MOONREST_GARDENS = 4157,
    WRATH_AREA_STARS_REST = 4158,
    WRATH_AREA_WESTFALL_BRIGADE_ENCAMPMENT = 4159,
    WRATH_AREA_LOTHALOR_WOODLANDS = 4160,
    WRATH_AREA_WYRMREST_TEMPLE = 4161,
    WRATH_AREA_ICEMIST_FALLS = 4162,
    WRATH_AREA_ICEMIST_VILLAGE = 4163,
    WRATH_AREA_THE_PIT_OF_NARJUN = 4164,
    WRATH_AREA_AGMARS_HAMMER = 4165,
    WRATH_AREA_LAKE_INDU_LE = 4166,
    WRATH_AREA_OBSIDIAN_DRAGONSHRINE = 4167,
    WRATH_AREA_RUBY_DRAGONSHRINE = 4168,
    WRATH_AREA_FORDRAGON_HOLD = 4169,
    WRATH_AREA_KOR_KRON_VANGUARD = 4170,
    WRATH_AREA_THE_COURT_OF_SKULLS = 4171,
    WRATH_AREA_ANGRATHAR_THE_WRATHGATE = 4172,
    WRATH_AREA_GALAKRONDS_REST = 4173,
    WRATH_AREA_THE_WICKED_COIL = 4174,
    WRATH_AREA_BRONZE_DRAGONSHRINE = 4175,
    WRATH_AREA_THE_MIRROR_OF_DAWN = 4176,
    WRATH_AREA_WINTERGARDE_KEEP = 4177,
    WRATH_AREA_WINTERGARDE_MINE = 4178,
    WRATH_AREA_EMERALD_DRAGONSHRINE = 4179,
    WRATH_AREA_NEW_HEARTHGLEN = 4180,
    WRATH_AREA_CRUSADERS_LANDING = 4181,
    WRATH_AREA_SINNERS_FOLLY = 4182,
    WRATH_AREA_AZURE_DRAGONSHRINE = 4183,
    WRATH_AREA_PATH_OF_THE_TITANS = 4184,
    WRATH_AREA_THE_FORGOTTEN_SHORE = 4185,
    WRATH_AREA_VENOMSPITE = 4186,
    WRATH_AREA_THE_CRYSTAL_VICE = 4187,
    WRATH_AREA_THE_CARRION_FIELDS = 4188,
    WRATH_AREA_ONSLAUGHT_BASE_CAMP = 4189,
    WRATH_AREA_THORSONS_POST = 4190,
    WRATH_AREA_LIGHTS_TRUST = 4191,
    WRATH_AREA_FROSTMOURNE_CAVERN = 4192,
    WRATH_AREA_SCARLET_POINT = 4193,
    WRATH_AREA_JINTHA_KALAR = 4194,
    WRATH_AREA_ICE_HEART_CAVERN = 4195,
    WRATH_AREA_DRAK_THARON_KEEP = 4196,
    WRATH_AREA_WINTERGRASP = 4197,
    WRATH_AREA_KILI_UAS_ATOLL = 4198,
    WRATH_AREA_SILVERBROOK = 4199,
    WRATH_AREA_VORDRASSILS_HEART = 4200,
    WRATH_AREA_VORDRASSILS_TEARS = 4201,
    WRATH_AREA_VORDRASSILS_TEARS1 = 4202,
    WRATH_AREA_VORDRASSILS_LIMB = 4203,
    WRATH_AREA_AMBERPINE_LODGE = 4204,
    WRATH_AREA_SOLSTICE_VILLAGE = 4205,
    WRATH_AREA_CONQUEST_HOLD = 4206,
    WRATH_AREA_VOLDRUNE = 4207,
    WRATH_AREA_GRANITE_SPRINGS = 4208,
    WRATH_AREA_ZEB_HALAK = 4209,
    WRATH_AREA_DRAK_THARON_KEEP1 = 4210,
    WRATH_AREA_CAMP_ONEQWAH = 4211,
    WRATH_AREA_EASTWIND_SHORE = 4212,
    WRATH_AREA_THE_BROKEN_BLUFFS = 4213,
    WRATH_AREA_BOULDER_HILLS = 4214,
    WRATH_AREA_RAGE_FANG_SHRINE = 4215,
    WRATH_AREA_DRAKIL_JIN_RUINS = 4216,
    WRATH_AREA_BLACKRIVER_LOGGING_CAMP = 4217,
    WRATH_AREA_HEARTS_BLOOD_SHRINE = 4218,
    WRATH_AREA_HOLLOWSTONE_MINE = 4219,
    WRATH_AREA_DUN_ARGOL = 4220,
    WRATH_AREA_THOR_MODAN = 4221,
    WRATH_AREA_BLUE_SKY_LOGGING_GROUNDS = 4222,
    WRATH_AREA_MAW_OF_NELTHARION = 4223,
    WRATH_AREA_THE_BRINY_PINNACLE = 4224,
    WRATH_AREA_GLITTERING_STRAND = 4225,
    WRATH_AREA_ISKAAL = 4226,
    WRATH_AREA_DRAGONS_FALL = 4227,
    WRATH_AREA_THE_OCULUS = 4228,
    WRATH_AREA_PROSPECTORS_POINT = 4229,
    WRATH_AREA_COLDWIND_HEIGHTS = 4230,
    WRATH_AREA_REDWOOD_TRADING_POST = 4231,
    WRATH_AREA_VENGEANCE_PASS = 4232,
    WRATH_AREA_DAWNS_REACH = 4233,
    WRATH_AREA_NAXXRAMAS1 = 4234,
    WRATH_AREA_HEARTWOOD_TRADING_POST = 4235,
    WRATH_AREA_EVERGREEN_TRADING_POST = 4236,
    WRATH_AREA_SPRUCE_POINT_POST = 4237,
    WRATH_AREA_WHITE_PINE_TRADING_POST = 4238,
    WRATH_AREA_ASPEN_GROVE_POST = 4239,
    WRATH_AREA_FORESTS_EDGE_POST = 4240,
    WRATH_AREA_ELDRITCH_HEIGHTS = 4241,
    WRATH_AREA_VENTURE_BAY = 4242,
    WRATH_AREA_WINTERGARDE_CRYPT = 4243,
    WRATH_AREA_BLOODMOON_ISLE = 4244,
    WRATH_AREA_SHADOWFANG_TOWER = 4245,
    WRATH_AREA_WINTERGARDE_MAUSOLEUM = 4246,
    WRATH_AREA_DUSKHOWL_DEN = 4247,
    WRATH_AREA_THE_CONQUEST_PIT = 4248,
    WRATH_AREA_THE_PATH_OF_IRON = 4249,
    WRATH_AREA_RUINS_OF_TETHYS = 4250,
    WRATH_AREA_SILVERBROOK_HILLS = 4251,
    WRATH_AREA_THE_BROKEN_BLUFFS1 = 4252,
    WRATH_AREA_SEVENTH_LEGION_FRONT = 4253,
    WRATH_AREA_THE_DRAGON_WASTES = 4254,
    WRATH_AREA_RUINS_OF_DRAK_ZIN = 4255,
    WRATH_AREA_DRAK_MAR_LAKE = 4256,
    WRATH_AREA_DRAGONSPINE_TRIBUTARY = 4257,
    WRATH_AREA_THE_NORTH_SEA1 = 4258,
    WRATH_AREA_DRAK_URAL = 4259,
    WRATH_AREA_THORVALDS_CAMP = 4260,
    WRATH_AREA_GHOSTBLADE_POST = 4261,
    WRATH_AREA_ASHWOOD_POST = 4262,
    WRATH_AREA_LYDELLS_AMBUSH = 4263,
    WRATH_AREA_HALLS_OF_STONE = 4264,
    WRATH_AREA_THE_NEXUS1 = 4265,
    WRATH_AREA_HARKORS_CAMP = 4266,
    WRATH_AREA_VORDRASSIL_PASS = 4267,
    WRATH_AREA_RUUNAS_CAMP = 4268,
    WRATH_AREA_SHRINE_OF_SCALES = 4269,
    WRATH_AREA_DRAK_ATAL_PASSAGE = 4270,
    WRATH_AREA_UTGARDE_PINNACLE1 = 4271,
    WRATH_AREA_HALLS_OF_LIGHTNING = 4272,
    WRATH_AREA_ULDUAR = 4273,
    WRATH_AREA_THE_ARGENT_STAND = 4275,
    WRATH_AREA_ALTAR_OF_SSERATUS = 4276,
    WRATH_AREA_AZJOL_NERUB1 = 4277,
    WRATH_AREA_DRAKSOTRA_FIELDS = 4278,
    WRATH_AREA_DRAKSOTRA = 4279,
    WRATH_AREA_DRAK_AGAL = 4280,
    WRATH_AREA_ACHERUS_THE_EBON_HOLD = 4281,
    WRATH_AREA_THE_AVALANCHE = 4282,
    WRATH_AREA_THE_LOST_LANDS = 4283,
    WRATH_AREA_NESINGWARY_BASE_CAMP = 4284,
    WRATH_AREA_THE_SEABREACH_FLOW = 4285,
    WRATH_AREA_THE_BONES_OF_NOZRONN = 4286,
    WRATH_AREA_KARTAKS_HOLD = 4287,
    WRATH_AREA_SPARKTOUCHED_HAVEN = 4288,
    WRATH_AREA_THE_PATH_OF_THE_LIFEWARDEN = 4289,
    WRATH_AREA_RIVERS_HEART = 4290,
    WRATH_AREA_RAINSPEAKER_CANOPY = 4291,
    WRATH_AREA_FRENZYHEART_HILL = 4292,
    WRATH_AREA_WILDGROWTH_MANGAL = 4293,
    WRATH_AREA_HEB_VALOK = 4294,
    WRATH_AREA_THE_SUNDERED_SHARD = 4295,
    WRATH_AREA_THE_LIFEBLOOD_PILLAR = 4296,
    WRATH_AREA_MOSSWALKER_VILLAGE = 4297,
    WRATH_AREA_PLAGUELANDS_THE_SCARLET_ENCLAVE = 4298,
    WRATH_AREA_KOLRAMAS = 4299,
    WRATH_AREA_WAYGATE = 4300,
    WRATH_AREA_THE_SKYREACH_PILLAR = 4302,
    WRATH_AREA_HARDKNUCKLE_CLEARING = 4303,
    WRATH_AREA_SAPPHIRE_HIVE = 4304,
    WRATH_AREA_MISTWHISPER_REFUGE = 4306,
    WRATH_AREA_THE_GLIMMERING_PILLAR = 4307,
    WRATH_AREA_SPEARBORN_ENCAMPMENT = 4308,
    WRATH_AREA_DRAK_THARON_KEEP2 = 4309,
    WRATH_AREA_ZERAMAS = 4310,
    WRATH_AREA_RELIQUARY_OF_AGONY = 4311,
    WRATH_AREA_EBON_WATCH = 4312,
    WRATH_AREA_THRYMS_END = 4313,
    WRATH_AREA_VOLTARUS = 4314,
    WRATH_AREA_RELIQUARY_OF_PAIN = 4315,
    WRATH_AREA_RAGECLAW_DEN = 4316,
    WRATH_AREA_LIGHTS_BREACH = 4317,
    WRATH_AREA_POOLS_OF_ZHA_JIN = 4318,
    WRATH_AREA_ZIM_ABWA = 4319,
    WRATH_AREA_AMPHITHEATER_OF_ANGUISH = 4320,
    WRATH_AREA_ALTAR_OF_RHUNOK = 4321,
    WRATH_AREA_ALTAR_OF_HAR_KOA = 4322,
    WRATH_AREA_ZIM_TORGA = 4323,
    WRATH_AREA_POOLS_OF_JIN_ALAI = 4324,
    WRATH_AREA_ALTAR_OF_QUETZ_LUN = 4325,
    WRATH_AREA_HEB_DRAKKAR = 4326,
    WRATH_AREA_DRAK_MABWA = 4327,
    WRATH_AREA_ZIM_RHUK = 4328,
    WRATH_AREA_ALTAR_OF_MAM_TOTH = 4329,
    WRATH_AREA_ACHERUS_THE_EBON_HOLD1 = 4342,
    WRATH_AREA_NEW_AVALON = 4343,
    WRATH_AREA_NEW_AVALON_FIELDS = 4344,
    WRATH_AREA_NEW_AVALON_ORCHARD = 4345,
    WRATH_AREA_NEW_AVALON_TOWN_HALL = 4346,
    WRATH_AREA_HAVENSHIRE = 4347,
    WRATH_AREA_HAVENSHIRE_FARMS = 4348,
    WRATH_AREA_HAVENSHIRE_LUMBER_MILL = 4349,
    WRATH_AREA_HAVENSHIRE_STABLES = 4350,
    WRATH_AREA_SCARLET_HOLD = 4351,
    WRATH_AREA_CHAPEL_OF_THE_CRIMSON_FLAME = 4352,
    WRATH_AREA_LIGHTS_POINT_TOWER = 4353,
    WRATH_AREA_LIGHTS_POINT = 4354,
    WRATH_AREA_CRYPT_OF_REMEMBRANCE = 4355,
    WRATH_AREA_DEATHS_BREACH = 4356,
    WRATH_AREA_THE_NOXIOUS_GLADE1 = 4357,
    WRATH_AREA_TYRS_HAND1 = 4358,
    WRATH_AREA_KINGS_HARBOR = 4359,
    WRATH_AREA_SCARLET_OVERLOOK = 4360,
    WRATH_AREA_LIGHTS_HOPE_CHAPEL1 = 4361,
    WRATH_AREA_SINNERS_FOLLY1 = 4362,
    WRATH_AREA_PESTILENT_SCAR1 = 4363,
    WRATH_AREA_BROWMAN_MILL1 = 4364,
    WRATH_AREA_HAVENSHIRE_MINE = 4365,
    WRATH_AREA_URSOCS_DEN = 4366,
    WRATH_AREA_THE_BLIGHT_LINE = 4367,
    WRATH_AREA_THE_BONEFIELDS = 4368,
    WRATH_AREA_DORIANS_OUTPOST = 4369,
    WRATH_AREA_MAM_TOTH_CRATER = 4371,
    WRATH_AREA_ZOL_MAZ_STRONGHOLD = 4372,
    WRATH_AREA_ZOL_HEB = 4373,
    WRATH_AREA_RAGECLAW_LAKE = 4374,
    WRATH_AREA_GUNDRAK = 4375,
    WRATH_AREA_THE_SAVAGE_THICKET = 4376,
    WRATH_AREA_NEW_AVALON_FORGE = 4377,
    WRATH_AREA_DALARAN_ARENA = 4378,
    WRATH_AREA_VALGARDE1 = 4379,
    WRATH_AREA_WESTGUARD_INN = 4380,
    WRATH_AREA_WAYGATE1 = 4381,
    WRATH_AREA_THE_SHAPERS_TERRACE = 4382,
    WRATH_AREA_LAKESIDE_LANDING = 4383,
    WRATH_AREA_STRAND_OF_THE_ANCIENTS = 4384,
    WRATH_AREA_BITTERTIDE_LAKE = 4385,
    WRATH_AREA_RAINSPEAKER_RAPIDS = 4386,
    WRATH_AREA_FRENZYHEART_RIVER = 4387,
    WRATH_AREA_WINTERGRASP_RIVER = 4388,
    WRATH_AREA_THE_SUNTOUCHED_PILLAR = 4389,
    WRATH_AREA_FRIGID_BREACH = 4390,
    WRATH_AREA_SWINDLEGRINS_DIG = 4391,
    WRATH_AREA_THE_STORMWRIGHTS_SHELF = 4392,
    WRATH_AREA_DEATHS_HAND_ENCAMPMENT = 4393,
    WRATH_AREA_SCARLET_TAVERN = 4394,
    WRATH_AREA_DALARAN = 4395,
    WRATH_AREA_NOZZLERUST_POST = 4396,
    WRATH_AREA_FARSHIRE_MINE = 4399,
    WRATH_AREA_THE_MOSSLIGHT_PILLAR = 4400,
    WRATH_AREA_SARAGOSAS_LANDING = 4401,
    WRATH_AREA_VENGEANCE_LIFT = 4402,
    WRATH_AREA_BALEJAR_WATCH = 4403,
    WRATH_AREA_NEW_AGAMAND_INN = 4404,
    WRATH_AREA_PASSAGE_OF_LOST_FIENDS = 4405,
    WRATH_AREA_THE_RING_OF_VALOR = 4406,
    WRATH_AREA_HALL_OF_THE_FROSTWOLF = 4407,
    WRATH_AREA_HALL_OF_THE_STORMPIKE = 4408,
    WRATH_AREA_STORMWIND_HARBOR = 4411,
    WRATH_AREA_THE_MAKERS_OVERLOOK = 4412,
    WRATH_AREA_THE_MAKERS_PERCH = 4413,
    WRATH_AREA_SCARLET_TOWER = 4414,
    WRATH_AREA_THE_VIOLET_HOLD = 4415,
    WRATH_AREA_GUNDRAK1 = 4416,
    WRATH_AREA_ONSLAUGHT_HARBOR = 4417,
    WRATH_AREA_K3 = 4418,
    WRATH_AREA_SNOWBLIND_HILLS = 4419,
    WRATH_AREA_SNOWBLIND_TERRACE = 4420,
    WRATH_AREA_GARM = 4421,
    WRATH_AREA_BRUNNHILDAR_VILLAGE = 4422,
    WRATH_AREA_SIFRELDAR_VILLAGE = 4423,
    WRATH_AREA_VALKYRION = 4424,
    WRATH_AREA_THE_FORLORN_MINE = 4425,
    WRATH_AREA_BORS_BREATH_RIVER = 4426,
    WRATH_AREA_ARGENT_VANGUARD = 4427,
    WRATH_AREA_FROSTHOLD = 4428,
    WRATH_AREA_GROM_ARSH_CRASH_SITE = 4429,
    WRATH_AREA_TEMPLE_OF_STORMS = 4430,
    WRATH_AREA_ENGINE_OF_THE_MAKERS = 4431,
    WRATH_AREA_THE_FOOT_STEPPES = 4432,
    WRATH_AREA_DRAGONSPINE_PEAKS = 4433,
    WRATH_AREA_NIDAVELIR = 4434,
    WRATH_AREA_NARVIRS_CRADLE = 4435,
    WRATH_AREA_SNOWDRIFT_PLAINS = 4436,
    WRATH_AREA_VALLEY_OF_ANCIENT_WINTERS = 4437,
    WRATH_AREA_DUN_NIFFELEM = 4438,
    WRATH_AREA_FROSTFIELD_LAKE = 4439,
    WRATH_AREA_THUNDERFALL = 4440,
    WRATH_AREA_CAMP_TUNKA_LO = 4441,
    WRATH_AREA_BRANNS_BASE_CAMP = 4442,
    WRATH_AREA_GATE_OF_ECHOES = 4443,
    WRATH_AREA_PLAIN_OF_ECHOES = 4444,
    WRATH_AREA_ULDUAR1 = 4445,
    WRATH_AREA_TERRACE_OF_THE_MAKERS = 4446,
    WRATH_AREA_GATE_OF_LIGHTNING = 4447,
    WRATH_AREA_PATH_OF_THE_TITANS1 = 4448,
    WRATH_AREA_ULDIS = 4449,
    WRATH_AREA_LOKENS_BARGAIN = 4450,
    WRATH_AREA_BORS_FALL = 4451,
    WRATH_AREA_BORS_BREATH = 4452,
    WRATH_AREA_ROHEMDAL_PASS = 4453,
    WRATH_AREA_THE_STORM_FOUNDRY = 4454,
    WRATH_AREA_HIBERNAL_CAVERN = 4455,
    WRATH_AREA_VOLDRUNE_DWELLING = 4456,
    WRATH_AREA_TORSEGS_REST = 4457,
    WRATH_AREA_SPARKSOCKET_MINEFIELD = 4458,
    WRATH_AREA_RICKETS_FOLLY = 4459,
    WRATH_AREA_GARMS_BANE = 4460,
    WRATH_AREA_GARMS_RISE = 4461,
    WRATH_AREA_CRYSTALWEB_CAVERN = 4462,
    WRATH_AREA_TEMPLE_OF_LIFE = 4463,
    WRATH_AREA_TEMPLE_OF_ORDER = 4464,
    WRATH_AREA_TEMPLE_OF_WINTER = 4465,
    WRATH_AREA_TEMPLE_OF_INVENTION = 4466,
    WRATH_AREA_DEATHS_RISE = 4467,
    WRATH_AREA_THE_DEAD_FIELDS = 4468,
    WRATH_AREA_DARGATHS_DEMISE = 4469,
    WRATH_AREA_THE_HIDDEN_HOLLOW = 4470,
    WRATH_AREA_BERNAUS_HAPPY_FUN_LAND = 4471,
    WRATH_AREA_FROSTGRIPS_HOLLOW = 4472,
    WRATH_AREA_THE_FRIGID_TOMB = 4473,
    WRATH_AREA_TWIN_SHORES = 4474,
    WRATH_AREA_ZIM_BOS_HIDEOUT = 4475,
    WRATH_AREA_ABANDONED_CAMP = 4476,
    WRATH_AREA_THE_SHADOW_VAULT = 4477,
    WRATH_AREA_COLDWIND_PASS = 4478,
    WRATH_AREA_WINTERS_BREATH_LAKE = 4479,
    WRATH_AREA_THE_FORGOTTEN_OVERLOOK = 4480,
    WRATH_AREA_JINTHA_KALAR_PASSAGE = 4481,
    WRATH_AREA_ARRIGA_FOOTBRIDGE = 4482,
    WRATH_AREA_THE_LOST_PASSAGE = 4483,
    WRATH_AREA_BOULDERCRAGS_REFUGE = 4484,
    WRATH_AREA_THE_INVENTORS_LIBRARY = 4485,
    WRATH_AREA_THE_FROZEN_MINE = 4486,
    WRATH_AREA_FROSTFLOE_DEEP = 4487,
    WRATH_AREA_THE_HOWLING_HOLLOW = 4488,
    WRATH_AREA_CRUSADER_FORWARD_CAMP = 4489,
    WRATH_AREA_STORMCREST = 4490,
    WRATH_AREA_BONESNAPS_CAMP = 4491,
    WRATH_AREA_UFRANGS_HALL = 4492,
    WRATH_AREA_THE_OBSIDIAN_SANCTUM = 4493,
    WRATH_AREA_AHN_KAHET_THE_OLD_KINGDOM = 4494,
    WRATH_AREA_FJORNS_ANVIL = 4495,
    WRATH_AREA_JOTUNHEIM = 4496,
    WRATH_AREA_SAVAGE_LEDGE = 4497,
    WRATH_AREA_HALLS_OF_THE_ANCESTORS = 4498,
    WRATH_AREA_THE_BLIGHTED_POOL = 4499,
    WRATH_AREA_THE_EYE_OF_ETERNITY = 4500,
    WRATH_AREA_THE_ARGENT_VANGUARD = 4501,
    WRATH_AREA_MIMIRS_WORKSHOP = 4502,
    WRATH_AREA_IRONWALL_DAM = 4503,
    WRATH_AREA_VALLEY_OF_ECHOES = 4504,
    WRATH_AREA_THE_BREACH = 4505,
    WRATH_AREA_SCOURGEHOLME = 4506,
    WRATH_AREA_THE_BROKEN_FRONT = 4507,
    WRATH_AREA_MORD_RETHAR_THE_DEATH_GATE = 4508,
    WRATH_AREA_THE_BOMBARDMENT = 4509,
    WRATH_AREA_ALDUR_THAR_THE_DESOLATION_GATE = 4510,
    WRATH_AREA_THE_SKYBREAKER = 4511,
    WRATH_AREA_ORGRIMS_HAMMER = 4512,
    WRATH_AREA_YMIRHEIM = 4513,
    WRATH_AREA_SARONITE_MINES = 4514,
    WRATH_AREA_THE_CONFLAGRATION = 4515,
    WRATH_AREA_IRONWALL_RAMPART = 4516,
    WRATH_AREA_WEEPING_QUARRY = 4517,
    WRATH_AREA_CORP_RETHAR_THE_HORROR_GATE = 4518,
    WRATH_AREA_THE_COURT_OF_BONES = 4519,
    WRATH_AREA_MALYKRISS_THE_VILE_HOLD = 4520,
    WRATH_AREA_CATHEDRAL_OF_DARKNESS = 4521,
    WRATH_AREA_ICECROWN_CITADEL = 4522,
    WRATH_AREA_ICECROWN_GLACIER = 4523,
    WRATH_AREA_VALHALAS = 4524,
    WRATH_AREA_THE_UNDERHALLS = 4525,
    WRATH_AREA_NJORNDAR_VILLAGE = 4526,
    WRATH_AREA_BALARGARDE_FORTRESS = 4527,
    WRATH_AREA_KUL_GALAR_KEEP = 4528,
    WRATH_AREA_THE_CRIMSON_CATHEDRAL = 4529,
    WRATH_AREA_SANCTUM_OF_REANIMATION = 4530,
    WRATH_AREA_THE_FLESHWERKS = 4531,
    WRATH_AREA_VENGEANCE_LANDING_INN = 4532,
    WRATH_AREA_SINDRAGOSAS_FALL = 4533,
    WRATH_AREA_WILDERVAR_MINE = 4534,
    WRATH_AREA_THE_PIT_OF_THE_FANG = 4535,
    WRATH_AREA_FROSTHOWL_CAVERN = 4536,
    WRATH_AREA_THE_VALLEY_OF_LOST_HOPE = 4537,
    WRATH_AREA_THE_SUNKEN_RING = 4538,
    WRATH_AREA_THE_BROKEN_TEMPLE = 4539,
    WRATH_AREA_THE_VALLEY_OF_FALLEN_HEROES = 4540,
    WRATH_AREA_VANGUARD_INFIRMARY = 4541,
    WRATH_AREA_HALL_OF_THE_SHAPER = 4542,
    WRATH_AREA_TEMPLE_OF_WISDOM = 4543,
    WRATH_AREA_DEATHS_BREACH1 = 4544,
    WRATH_AREA_ABANDONED_MINE = 4545,
    WRATH_AREA_RUINS_OF_THE_SCARLET_ENCLAVE = 4546,
    WRATH_AREA_HALLS_OF_STONE1 = 4547,
    WRATH_AREA_HALLS_OF_LIGHTNING1 = 4548,
    WRATH_AREA_THE_GREAT_TREE = 4549,
    WRATH_AREA_THE_MIRROR_OF_TWILIGHT = 4550,
    WRATH_AREA_THE_TWILIGHT_RIVULET = 4551,
    WRATH_AREA_THE_DECREPIT_FLOW = 4552,
    WRATH_AREA_FORLORN_WOODS = 4553,
    WRATH_AREA_RUINS_OF_SHANDARAL = 4554,
    WRATH_AREA_THE_AZURE_FRONT = 4555,
    WRATH_AREA_VIOLET_STAND = 4556,
    WRATH_AREA_THE_UNBOUND_THICKET = 4557,
    WRATH_AREA_SUNREAVERS_COMMAND = 4558,
    WRATH_AREA_WINDRUNNERS_OVERLOOK = 4559,
    WRATH_AREA_THE_UNDERBELLY = 4560,
    WRATH_AREA_KRASUS_LANDING = 4564,
    WRATH_AREA_THE_VIOLET_HOLD1 = 4567,
    WRATH_AREA_THE_EVENTIDE = 4568,
    WRATH_AREA_SEWER_EXIT_PIPE = 4569,
    WRATH_AREA_CIRCLE_OF_WILLS = 4570,
    WRATH_AREA_SILVERWING_FLAG_ROOM = 4571,
    WRATH_AREA_WARSONG_FLAG_ROOM = 4572,
    WRATH_AREA_WINTERGRASP_FORTRESS = 4575,
    WRATH_AREA_CENTRAL_BRIDGE = 4576,
    WRATH_AREA_EASTERN_BRIDGE = 4577,
    WRATH_AREA_WESTERN_BRIDGE = 4578,
    WRATH_AREA_DUBRA_JIN = 4579,
    WRATH_AREA_CRUSADERS_PINNACLE = 4580,
    WRATH_AREA_FLAMEWATCH_TOWER = 4581,
    WRATH_AREA_WINTERS_EDGE_TOWER = 4582,
    WRATH_AREA_SHADOWSIGHT_TOWER = 4583,
    WRATH_AREA_THE_CAULDRON_OF_FLAMES = 4584,
    WRATH_AREA_GLACIAL_FALLS = 4585,
    WRATH_AREA_WINDY_BLUFFS = 4586,
    WRATH_AREA_THE_FOREST_OF_SHADOWS = 4587,
    WRATH_AREA_BLACKWATCH = 4588,
    WRATH_AREA_THE_CHILLED_QUAGMIRE = 4589,
    WRATH_AREA_THE_STEPPE_OF_LIFE = 4590,
    WRATH_AREA_SILENT_VIGIL = 4591,
    WRATH_AREA_GIMORAKS_DEN = 4592,
    WRATH_AREA_THE_PIT_OF_FIENDS = 4593,
    WRATH_AREA_BATTLESCAR_SPIRE = 4594,
    WRATH_AREA_HALL_OF_HORRORS = 4595,
    WRATH_AREA_THE_CIRCLE_OF_SUFFERING = 4596,
    WRATH_AREA_RISE_OF_SUFFERING = 4597,
    WRATH_AREA_KRASUS_LANDING1 = 4598,
    WRATH_AREA_SEWER_EXIT_PIPE1 = 4599,
    WRATH_AREA_DALARAN_ISLAND = 4601,
    WRATH_AREA_FORCE_INTERIOR = 4602,
    WRATH_AREA_VAULT_OF_ARCHAVON = 4603,
    WRATH_AREA_GATE_OF_THE_RED_SUN = 4604,
    WRATH_AREA_GATE_OF_THE_BLUE_SAPPHIRE = 4605,
    WRATH_AREA_GATE_OF_THE_GREEN_EMERALD = 4606,
    WRATH_AREA_GATE_OF_THE_PURPLE_AMETHYST = 4607,
    WRATH_AREA_GATE_OF_THE_YELLOW_MOON = 4608,
    WRATH_AREA_COURTYARD_OF_THE_ANCIENTS = 4609,
    WRATH_AREA_LANDING_BEACH = 4610,
    WRATH_AREA_WESTSPARK_WORKSHOP = 4611,
    WRATH_AREA_EASTSPARK_WORKSHOP = 4612,
    WRATH_AREA_DALARAN_CITY = 4613,
    WRATH_AREA_THE_VIOLET_CITADEL_SPIRE = 4614,
    WRATH_AREA_NAZ_ANAK_THE_FORGOTTEN_DEPTHS = 4615,
    WRATH_AREA_SUNREAVERS_SANCTUARY = 4616,
    WRATH_AREA_ELEVATOR = 4617,
    WRATH_AREA_ANTONIDAS_MEMORIAL = 4618,
    WRATH_AREA_THE_VIOLET_CITADEL = 4619,
    WRATH_AREA_MAGUS_COMMERCE_EXCHANGE = 4620,
    WRATH_AREA_UNUSED = 4621,
    WRATH_AREA_FIRST_LEGION_FORWARD_CAMP = 4622,
    WRATH_AREA_HALL_OF_THE_CONQUERED_KINGS = 4623,
    WRATH_AREA_BEFOULED_TERRACE = 4624,
    WRATH_AREA_THE_DESECRATED_ALTAR = 4625,
    WRATH_AREA_SHIMMERING_BOG = 4626,
    WRATH_AREA_FALLEN_TEMPLE_OF_AHN_KAHET = 4627,
    WRATH_AREA_HALLS_OF_BINDING = 4628,
    WRATH_AREA_WINTERS_HEART = 4629,
    WRATH_AREA_THE_NORTH_SEA2 = 4630,
    WRATH_AREA_THE_BROODMOTHERS_NEST = 4631,
    WRATH_AREA_DALARAN_FLOATING_ROCKS = 4632,
    WRATH_AREA_RAPTOR_PENS = 4633,
    WRATH_AREA_DRAK_THARON_KEEP3 = 4635,
    WRATH_AREA_THE_NOXIOUS_PASS = 4636,
    WRATH_AREA_VARGOTHS_RETREAT = 4637,
    WRATH_AREA_VIOLET_CITADEL_BALCONY = 4638,
    WRATH_AREA_BAND_OF_VARIANCE = 4639,
    WRATH_AREA_BAND_OF_ACCELERATION = 4640,
    WRATH_AREA_BAND_OF_TRANSMUTATION = 4641,
    WRATH_AREA_BAND_OF_ALIGNMENT = 4642,
    WRATH_AREA_ASHWOOD_LAKE = 4646,
    WRATH_AREA_IRON_CONCOURSE = 4650,
    WRATH_AREA_FORMATION_GROUNDS = 4652,
    WRATH_AREA_RAZORSCALES_AERIE = 4653,
    WRATH_AREA_THE_COLOSSAL_FORGE = 4654,
    WRATH_AREA_THE_SCRAPYARD = 4655,
    WRATH_AREA_THE_CONSERVATORY_OF_LIFE = 4656,
    WRATH_AREA_THE_ARCHIVUM = 4657,
    WRATH_AREA_ARGENT_TOURNAMENT_GROUNDS = 4658,
    WRATH_AREA_EXPEDITION_BASE_CAMP = 4665,
    WRATH_AREA_SUNREAVER_PAVILION = 4666,
    WRATH_AREA_SILVER_COVENANT_PAVILION = 4667,
    WRATH_AREA_THE_COOPER_RESIDENCE = 4668,
    WRATH_AREA_THE_RING_OF_CHAMPIONS = 4669,
    WRATH_AREA_THE_ASPIRANTS_RING = 4670,
    WRATH_AREA_THE_ARGENT_VALIANTS_RING = 4671,
    WRATH_AREA_THE_ALLIANCE_VALIANTS_RING = 4672,
    WRATH_AREA_THE_HORDE_VALIANTS_RING = 4673,
    WRATH_AREA_ARGENT_PAVILION = 4674,
    WRATH_AREA_SUNREAVER_PAVILION1 = 4676,
    WRATH_AREA_SILVER_COVENANT_PAVILION1 = 4677,
    WRATH_AREA_THE_FORLORN_CAVERN = 4679,
    WRATH_AREA_CLAYTONIO_TEST_AREA = 4688,
    WRATH_AREA_QUEL_DELARS_REST = 4692,
    WRATH_AREA_ISLE_OF_CONQUEST = 4710,
    WRATH_AREA_TRIAL_OF_THE_CRUSADER = 4722,
    WRATH_AREA_TRIAL_OF_THE_CHAMPION = 4723,
    WRATH_AREA_RUNEWEAVER_SQUARE = 4739,
    WRATH_AREA_THE_SILVER_ENCLAVE = 4740,
    WRATH_AREA_ISLE_OF_CONQUEST_NO_MANS_LAND = 4741,
    WRATH_AREA_HROTHGARS_LANDING = 4742,
    WRATH_AREA_DEATHSPEAKERS_WATCH = 4743,
    WRATH_AREA_WORKSHOP = 4747,
    WRATH_AREA_QUARRY = 4748,
    WRATH_AREA_DOCKS = 4749,
    WRATH_AREA_HANGAR = 4750,
    WRATH_AREA_REFINERY = 4751,
    WRATH_AREA_HORDE_KEEP = 4752,
    WRATH_AREA_ALLIANCE_KEEP = 4753,
    WRATH_AREA_THE_SEA_REAVERS_RUN = 4760,
    WRATH_AREA_TRANSPORT_ALLIANCE_GUNSHIP = 4763,
    WRATH_AREA_TRANSPORT_HORDE_GUNSHIP = 4764,
    WRATH_AREA_HROTHGARS_LANDING1 = 4769,
    WRATH_AREA_THE_FORGE_OF_SOULS = 4809,
    WRATH_AREA_ICECROWN_CITADEL1 = 4812,
    WRATH_AREA_PIT_OF_SARON = 4813,
    WRATH_AREA_HALLS_OF_REFLECTION = 4820,
    WRATH_AREA_TRANSPORT_ALLIANCE_GUNSHIP_IGB = 4832,
    WRATH_AREA_TRANSPORT_HORDE_GUNSHIP_IGB = 4833,
    WRATH_AREA_THE_FROZEN_THRONE = 4859,
    WRATH_AREA_THE_FROZEN_HALLS = 4862,
    WRATH_AREA_THE_FROST_QUEENS_LAIR = 4889,
    WRATH_AREA_PUTRICIDES_LABORATORY_OF_ALCHEMICAL_HORRORS_AND_FUN = 4890,
    WRATH_AREA_THE_SANCTUM_OF_BLOOD = 4891,
    WRATH_AREA_THE_CRIMSON_HALL = 4892,
    WRATH_AREA_THE_FROST_QUEENS_LAIR1 = 4893,
    WRATH_AREA_PUTRICIDES_LABORATORY_OF_ALCHEMICAL_HORRORS_AND_FUN1 = 4894,
    WRATH_AREA_THE_CRIMSON_HALL1 = 4895,
    WRATH_AREA_THE_FROZEN_THRONE1 = 4896,
    WRATH_AREA_THE_SANCTUM_OF_BLOOD1 = 4897,
    WRATH_AREA_FROSTMOURNE = 4898,
    WRATH_AREA_THE_DARK_APPROACH = 4904,
    WRATH_AREA_SCOURGELORDS_COMMAND = 4905,
    WRATH_AREA_THE_SHADOW_THRONE = 4906,
    WRATH_AREA_THE_HIDDEN_PASSAGE = 4908,
    WRATH_AREA_FROSTMOURNE1 = 4910,
    WRATH_AREA_THE_RUBY_SANCTUM = 4987
} wrath_Area;

typedef enum {
    WRATH_ARENA_FACTION_HORDE = 0,
    WRATH_ARENA_FACTION_ALLIANCE = 1
} wrath_ArenaFaction;

typedef enum {
    WRATH_ARENA_TEAM_COMMAND_TEAM_CREATE_S = 0,
    WRATH_ARENA_TEAM_COMMAND_TEAM_INVITE_SS = 1,
    WRATH_ARENA_TEAM_COMMAND_TEAM_QUIT_S = 3,
    WRATH_ARENA_TEAM_COMMAND_TEAM_FOUNDER_S = 14
} wrath_ArenaTeamCommand;

typedef enum {
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_INTERNAL = 1,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ALREADY_IN_ARENA_TEAM = 2,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ALREADY_IN_ARENA_TEAM_S = 3,
    WRATH_ARENA_TEAM_COMMAND_ERROR_INVITED_TO_ARENA_TEAM = 4,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ALREADY_INVITED_TO_ARENA_TEAM_S = 5,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_NAME_INVALID = 6,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_NAME_EXISTS_S = 7,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_LEADER_LEAVE_S = 8,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_PLAYER_NOT_IN_TEAM = 9,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_PLAYER_NOT_IN_TEAM_SS = 10,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_PLAYER_NOT_FOUND_S = 11,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_NOT_ALLIED = 12,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_IGNORING_YOU_S = 19,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_TARGET_TOO_LOW_S = 21,
    WRATH_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_TOO_MANY_MEMBERS_S = 22
} wrath_ArenaTeamCommandError;

typedef enum {
    WRATH_ARENA_TEAM_EVENT_JOIN = 3,
    WRATH_ARENA_TEAM_EVENT_LEAVE = 4,
    WRATH_ARENA_TEAM_EVENT_REMOVE = 5,
    WRATH_ARENA_TEAM_EVENT_LEADER_IS = 6,
    WRATH_ARENA_TEAM_EVENT_LEADER_CHANGED = 7,
    WRATH_ARENA_TEAM_EVENT_DISBANDED = 8
} wrath_ArenaTeamEvent;

typedef enum {
    WRATH_ARENA_TEAM_ROLE_CAPTAIN = 0,
    WRATH_ARENA_TEAM_ROLE_MEMBER = 1
} wrath_ArenaTeamRole;

typedef enum {
    WRATH_ARENA_TYPE_NOT_ARENA = 0,
    WRATH_ARENA_TYPE_TWO_VS_TWO = 2,
    WRATH_ARENA_TYPE_THREE_VS_THREE = 3,
    WRATH_ARENA_TYPE_FIVE_VS_FIVE = 5
} wrath_ArenaType;

typedef enum {
    WRATH_AUCTION_COMMAND_ACTION_STARTED = 0,
    WRATH_AUCTION_COMMAND_ACTION_REMOVED = 1,
    WRATH_AUCTION_COMMAND_ACTION_BID_PLACED = 2
} wrath_AuctionCommandAction;

typedef enum {
    WRATH_AUCTION_COMMAND_RESULT_OK = 0,
    WRATH_AUCTION_COMMAND_RESULT_ERR_INVENTORY = 1,
    WRATH_AUCTION_COMMAND_RESULT_ERR_DATABASE = 2,
    WRATH_AUCTION_COMMAND_RESULT_ERR_NOT_ENOUGH_MONEY = 3,
    WRATH_AUCTION_COMMAND_RESULT_ERR_ITEM_NOT_FOUND = 4,
    WRATH_AUCTION_COMMAND_RESULT_ERR_HIGHER_BID = 5,
    WRATH_AUCTION_COMMAND_RESULT_ERR_BID_INCREMENT = 7,
    WRATH_AUCTION_COMMAND_RESULT_ERR_BID_OWN = 10,
    WRATH_AUCTION_COMMAND_RESULT_ERR_RESTRICTED_ACCOUNT = 13
} wrath_AuctionCommandResult;

typedef enum {
    WRATH_AUCTION_COMMAND_RESULT_TWO_OK = 0,
    WRATH_AUCTION_COMMAND_RESULT_TWO_ERR_INVENTORY = 1,
    WRATH_AUCTION_COMMAND_RESULT_TWO_ERR_DATABASE = 2,
    WRATH_AUCTION_COMMAND_RESULT_TWO_ERR_NOT_ENOUGH_MONEY = 3,
    WRATH_AUCTION_COMMAND_RESULT_TWO_ERR_ITEM_NOT_FOUND = 4,
    WRATH_AUCTION_COMMAND_RESULT_TWO_ERR_HIGHER_BID = 5,
    WRATH_AUCTION_COMMAND_RESULT_TWO_ERR_BID_INCREMENT = 7,
    WRATH_AUCTION_COMMAND_RESULT_TWO_ERR_BID_OWN = 10,
    WRATH_AUCTION_COMMAND_RESULT_TWO_ERR_RESTRICTED_ACCOUNT = 13
} wrath_AuctionCommandResultTwo;

typedef enum {
    WRATH_AUCTION_HOUSE_STORMWIND = 1,
    WRATH_AUCTION_HOUSE_ALLIANCE = 2,
    WRATH_AUCTION_HOUSE_DARNASSUS = 3,
    WRATH_AUCTION_HOUSE_UNDERCITY = 4,
    WRATH_AUCTION_HOUSE_THUNDER_BLUFF = 5,
    WRATH_AUCTION_HOUSE_HORDE = 6,
    WRATH_AUCTION_HOUSE_GOBLIN = 7
} wrath_AuctionHouse;

typedef enum {
    WRATH_AURA_MOD_NONE = 0,
    WRATH_AURA_MOD_BIND_SIGHT = 1,
    WRATH_AURA_MOD_MOD_POSSESS = 2,
    WRATH_AURA_MOD_PERIODIC_DAMAGE = 3,
    WRATH_AURA_MOD_DUMMY = 4,
    WRATH_AURA_MOD_MOD_CONFUSE = 5,
    WRATH_AURA_MOD_MOD_CHARM = 6,
    WRATH_AURA_MOD_MOD_FEAR = 7,
    WRATH_AURA_MOD_PERIODIC_HEAL = 8,
    WRATH_AURA_MOD_MOD_ATTACKSPEED = 9,
    WRATH_AURA_MOD_MOD_THREAT = 10,
    WRATH_AURA_MOD_MOD_TAUNT = 11,
    WRATH_AURA_MOD_MOD_STUN = 12,
    WRATH_AURA_MOD_MOD_DAMAGE_DONE = 13,
    WRATH_AURA_MOD_MOD_DAMAGE_TAKEN = 14,
    WRATH_AURA_MOD_DAMAGE_SHIELD = 15,
    WRATH_AURA_MOD_MOD_STEALTH = 16,
    WRATH_AURA_MOD_MOD_STEALTH_DETECT = 17,
    WRATH_AURA_MOD_MOD_INVISIBILITY = 18,
    WRATH_AURA_MOD_MOD_INVISIBILITY_DETECT = 19,
    WRATH_AURA_MOD_OBS_MOD_HEALTH = 20,
    WRATH_AURA_MOD_OBS_MOD_POWER = 21,
    WRATH_AURA_MOD_MOD_RESISTANCE = 22,
    WRATH_AURA_MOD_PERIODIC_TRIGGER_SPELL = 23,
    WRATH_AURA_MOD_PERIODIC_ENERGIZE = 24,
    WRATH_AURA_MOD_MOD_PACIFY = 25,
    WRATH_AURA_MOD_MOD_ROOT = 26,
    WRATH_AURA_MOD_MOD_SILENCE = 27,
    WRATH_AURA_MOD_REFLECT_SPELLS = 28,
    WRATH_AURA_MOD_MOD_STAT = 29,
    WRATH_AURA_MOD_MOD_SKILL = 30,
    WRATH_AURA_MOD_MOD_INCREASE_SPEED = 31,
    WRATH_AURA_MOD_MOD_INCREASE_MOUNTED_SPEED = 32,
    WRATH_AURA_MOD_MOD_DECREASE_SPEED = 33,
    WRATH_AURA_MOD_MOD_INCREASE_HEALTH = 34,
    WRATH_AURA_MOD_MOD_INCREASE_ENERGY = 35,
    WRATH_AURA_MOD_MOD_SHAPESHIFT = 36,
    WRATH_AURA_MOD_EFFECT_IMMUNITY = 37,
    WRATH_AURA_MOD_STATE_IMMUNITY = 38,
    WRATH_AURA_MOD_SCHOOL_IMMUNITY = 39,
    WRATH_AURA_MOD_DAMAGE_IMMUNITY = 40,
    WRATH_AURA_MOD_DISPEL_IMMUNITY = 41,
    WRATH_AURA_MOD_PROC_TRIGGER_SPELL = 42,
    WRATH_AURA_MOD_PROC_TRIGGER_DAMAGE = 43,
    WRATH_AURA_MOD_TRACK_CREATURES = 44,
    WRATH_AURA_MOD_TRACK_RESOURCES = 45,
    WRATH_AURA_MOD_UNKNOWN46 = 46,
    WRATH_AURA_MOD_MOD_PARRY_PERCENT = 47,
    WRATH_AURA_MOD_PERIODIC_TRIGGER_SPELL_FROM_CLIENT = 48,
    WRATH_AURA_MOD_MOD_DODGE_PERCENT = 49,
    WRATH_AURA_MOD_MOD_CRITICAL_HEALING_AMOUNT = 50,
    WRATH_AURA_MOD_MOD_BLOCK_PERCENT = 51,
    WRATH_AURA_MOD_MOD_WEAPON_CRIT_PERCENT = 52,
    WRATH_AURA_MOD_PERIODIC_LEECH = 53,
    WRATH_AURA_MOD_MOD_HIT_CHANCE = 54,
    WRATH_AURA_MOD_MOD_SPELL_HIT_CHANCE = 55,
    WRATH_AURA_MOD_TRANSFORM = 56,
    WRATH_AURA_MOD_MOD_SPELL_CRIT_CHANCE = 57,
    WRATH_AURA_MOD_MOD_INCREASE_SWIM_SPEED = 58,
    WRATH_AURA_MOD_MOD_DAMAGE_DONE_CREATURE = 59,
    WRATH_AURA_MOD_MOD_PACIFY_SILENCE = 60,
    WRATH_AURA_MOD_MOD_SCALE = 61,
    WRATH_AURA_MOD_PERIODIC_HEALTH_FUNNEL = 62,
    WRATH_AURA_MOD_UNKNOWN63 = 63,
    WRATH_AURA_MOD_PERIODIC_MANA_LEECH = 64,
    WRATH_AURA_MOD_MOD_CASTING_SPEED_NOT_STACK = 65,
    WRATH_AURA_MOD_FEIGN_DEATH = 66,
    WRATH_AURA_MOD_MOD_DISARM = 67,
    WRATH_AURA_MOD_MOD_STALKED = 68,
    WRATH_AURA_MOD_SCHOOL_ABSORB = 69,
    WRATH_AURA_MOD_EXTRA_ATTACKS = 70,
    WRATH_AURA_MOD_MOD_SPELL_CRIT_CHANCE_SCHOOL = 71,
    WRATH_AURA_MOD_MOD_POWER_COST_SCHOOL_PCT = 72,
    WRATH_AURA_MOD_MOD_POWER_COST_SCHOOL = 73,
    WRATH_AURA_MOD_REFLECT_SPELLS_SCHOOL = 74,
    WRATH_AURA_MOD_MOD_LANGUAGE = 75,
    WRATH_AURA_MOD_FAR_SIGHT = 76,
    WRATH_AURA_MOD_MECHANIC_IMMUNITY = 77,
    WRATH_AURA_MOD_MOUNTED = 78,
    WRATH_AURA_MOD_MOD_DAMAGE_PERCENT_DONE = 79,
    WRATH_AURA_MOD_MOD_PERCENT_STAT = 80,
    WRATH_AURA_MOD_SPLIT_DAMAGE_PCT = 81,
    WRATH_AURA_MOD_WATER_BREATHING = 82,
    WRATH_AURA_MOD_MOD_BASE_RESISTANCE = 83,
    WRATH_AURA_MOD_MOD_REGEN = 84,
    WRATH_AURA_MOD_MOD_POWER_REGEN = 85,
    WRATH_AURA_MOD_CHANNEL_DEATH_ITEM = 86,
    WRATH_AURA_MOD_MOD_DAMAGE_PERCENT_TAKEN = 87,
    WRATH_AURA_MOD_MOD_HEALTH_REGEN_PERCENT = 88,
    WRATH_AURA_MOD_PERIODIC_DAMAGE_PERCENT = 89,
    WRATH_AURA_MOD_UNKNOWN90 = 90,
    WRATH_AURA_MOD_MOD_DETECT_RANGE = 91,
    WRATH_AURA_MOD_PREVENTS_FLEEING = 92,
    WRATH_AURA_MOD_MOD_UNATTACKABLE = 93,
    WRATH_AURA_MOD_INTERRUPT_REGEN = 94,
    WRATH_AURA_MOD_GHOST = 95,
    WRATH_AURA_MOD_SPELL_MAGNET = 96,
    WRATH_AURA_MOD_MANA_SHIELD = 97,
    WRATH_AURA_MOD_MOD_SKILL_TALENT = 98,
    WRATH_AURA_MOD_MOD_ATTACK_POWER = 99,
    WRATH_AURA_MOD_AURAS_VISIBLE = 100,
    WRATH_AURA_MOD_MOD_RESISTANCE_PCT = 101,
    WRATH_AURA_MOD_MOD_MELEE_ATTACK_POWER_VERSUS = 102,
    WRATH_AURA_MOD_MOD_TOTAL_THREAT = 103,
    WRATH_AURA_MOD_WATER_WALK = 104,
    WRATH_AURA_MOD_FEATHER_FALL = 105,
    WRATH_AURA_MOD_HOVER = 106,
    WRATH_AURA_MOD_ADD_FLAT_MODIFIER = 107,
    WRATH_AURA_MOD_ADD_PCT_MODIFIER = 108,
    WRATH_AURA_MOD_ADD_TARGET_TRIGGER = 109,
    WRATH_AURA_MOD_MOD_POWER_REGEN_PERCENT = 110,
    WRATH_AURA_MOD_ADD_CASTER_HIT_TRIGGER = 111,
    WRATH_AURA_MOD_OVERRIDE_CLASS_SCRIPTS = 112,
    WRATH_AURA_MOD_MOD_RANGED_DAMAGE_TAKEN = 113,
    WRATH_AURA_MOD_MOD_RANGED_DAMAGE_TAKEN_PCT = 114,
    WRATH_AURA_MOD_MOD_HEALING = 115,
    WRATH_AURA_MOD_MOD_REGEN_DURING_COMBAT = 116,
    WRATH_AURA_MOD_MOD_MECHANIC_RESISTANCE = 117,
    WRATH_AURA_MOD_MOD_HEALING_PCT = 118,
    WRATH_AURA_MOD_UNKNOWN119 = 119,
    WRATH_AURA_MOD_UNTRACKABLE = 120,
    WRATH_AURA_MOD_EMPATHY = 121,
    WRATH_AURA_MOD_MOD_OFFHAND_DAMAGE_PCT = 122,
    WRATH_AURA_MOD_MOD_TARGET_RESISTANCE = 123,
    WRATH_AURA_MOD_MOD_RANGED_ATTACK_POWER = 124,
    WRATH_AURA_MOD_MOD_MELEE_DAMAGE_TAKEN = 125,
    WRATH_AURA_MOD_MOD_MELEE_DAMAGE_TAKEN_PCT = 126,
    WRATH_AURA_MOD_RANGED_ATTACK_POWER_ATTACKER_BONUS = 127,
    WRATH_AURA_MOD_MOD_POSSESS_PET = 128,
    WRATH_AURA_MOD_MOD_SPEED_ALWAYS = 129,
    WRATH_AURA_MOD_MOD_MOUNTED_SPEED_ALWAYS = 130,
    WRATH_AURA_MOD_MOD_RANGED_ATTACK_POWER_VERSUS = 131,
    WRATH_AURA_MOD_MOD_INCREASE_ENERGY_PERCENT = 132,
    WRATH_AURA_MOD_MOD_INCREASE_HEALTH_PERCENT = 133,
    WRATH_AURA_MOD_MOD_MANA_REGEN_INTERRUPT = 134,
    WRATH_AURA_MOD_MOD_HEALING_DONE = 135,
    WRATH_AURA_MOD_MOD_HEALING_DONE_PERCENT = 136,
    WRATH_AURA_MOD_MOD_TOTAL_STAT_PERCENTAGE = 137,
    WRATH_AURA_MOD_MOD_MELEE_HASTE = 138,
    WRATH_AURA_MOD_FORCE_REACTION = 139,
    WRATH_AURA_MOD_MOD_RANGED_HASTE = 140,
    WRATH_AURA_MOD_MOD_RANGED_AMMO_HASTE = 141,
    WRATH_AURA_MOD_MOD_BASE_RESISTANCE_PCT = 142,
    WRATH_AURA_MOD_MOD_RESISTANCE_EXCLUSIVE = 143,
    WRATH_AURA_MOD_SAFE_FALL = 144,
    WRATH_AURA_MOD_MOD_PET_TALENT_POINTS = 145,
    WRATH_AURA_MOD_ALLOW_TAME_PET_TYPE = 146,
    WRATH_AURA_MOD_MECHANIC_IMMUNITY_MASK = 147,
    WRATH_AURA_MOD_RETAIN_COMBO_POINTS = 148,
    WRATH_AURA_MOD_REDUCE_PUSHBACK = 149,
    WRATH_AURA_MOD_MOD_SHIELD_BLOCKVALUE_PCT = 150,
    WRATH_AURA_MOD_TRACK_STEALTHED = 151,
    WRATH_AURA_MOD_MOD_DETECTED_RANGE = 152,
    WRATH_AURA_MOD_SPLIT_DAMAGE_FLAT = 153,
    WRATH_AURA_MOD_MOD_STEALTH_LEVEL = 154,
    WRATH_AURA_MOD_MOD_WATER_BREATHING = 155,
    WRATH_AURA_MOD_MOD_REPUTATION_GAIN = 156,
    WRATH_AURA_MOD_PET_DAMAGE_MULTI = 157,
    WRATH_AURA_MOD_MOD_SHIELD_BLOCKVALUE = 158,
    WRATH_AURA_MOD_NO_PVP_CREDIT = 159,
    WRATH_AURA_MOD_MOD_AOE_AVOIDANCE = 160,
    WRATH_AURA_MOD_MOD_HEALTH_REGEN_IN_COMBAT = 161,
    WRATH_AURA_MOD_POWER_BURN = 162,
    WRATH_AURA_MOD_MOD_CRIT_DAMAGE_BONUS = 163,
    WRATH_AURA_MOD_UNKNOWN164 = 164,
    WRATH_AURA_MOD_MELEE_ATTACK_POWER_ATTACKER_BONUS = 165,
    WRATH_AURA_MOD_MOD_ATTACK_POWER_PCT = 166,
    WRATH_AURA_MOD_MOD_RANGED_ATTACK_POWER_PCT = 167,
    WRATH_AURA_MOD_MOD_DAMAGE_DONE_VERSUS = 168,
    WRATH_AURA_MOD_MOD_CRIT_PERCENT_VERSUS = 169,
    WRATH_AURA_MOD_DETECT_AMORE = 170,
    WRATH_AURA_MOD_MOD_SPEED_NOT_STACK = 171,
    WRATH_AURA_MOD_MOD_MOUNTED_SPEED_NOT_STACK = 172,
    WRATH_AURA_MOD_UNKNOWN173 = 173,
    WRATH_AURA_MOD_MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174,
    WRATH_AURA_MOD_MOD_SPELL_HEALING_OF_STAT_PERCENT = 175,
    WRATH_AURA_MOD_SPIRIT_OF_REDEMPTION = 176,
    WRATH_AURA_MOD_AOE_CHARM = 177,
    WRATH_AURA_MOD_MOD_DEBUFF_RESISTANCE = 178,
    WRATH_AURA_MOD_MOD_ATTACKER_SPELL_CRIT_CHANCE = 179,
    WRATH_AURA_MOD_MOD_FLAT_SPELL_DAMAGE_VERSUS = 180,
    WRATH_AURA_MOD_UNKNOWN181 = 181,
    WRATH_AURA_MOD_MOD_RESISTANCE_OF_STAT_PERCENT = 182,
    WRATH_AURA_MOD_MOD_CRITICAL_THREAT = 183,
    WRATH_AURA_MOD_MOD_ATTACKER_MELEE_HIT_CHANCE = 184,
    WRATH_AURA_MOD_MOD_ATTACKER_RANGED_HIT_CHANCE = 185,
    WRATH_AURA_MOD_MOD_ATTACKER_SPELL_HIT_CHANCE = 186,
    WRATH_AURA_MOD_MOD_ATTACKER_MELEE_CRIT_CHANCE = 187,
    WRATH_AURA_MOD_MOD_ATTACKER_RANGED_CRIT_CHANCE = 188,
    WRATH_AURA_MOD_MOD_RATING = 189,
    WRATH_AURA_MOD_MOD_FACTION_REPUTATION_GAIN = 190,
    WRATH_AURA_MOD_USE_NORMAL_MOVEMENT_SPEED = 191,
    WRATH_AURA_MOD_MOD_MELEE_RANGED_HASTE = 192,
    WRATH_AURA_MOD_MELEE_SLOW = 193,
    WRATH_AURA_MOD_MOD_TARGET_ABSORB_SCHOOL = 194,
    WRATH_AURA_MOD_MOD_TARGET_ABILITY_ABSORB_SCHOOL = 195,
    WRATH_AURA_MOD_MOD_COOLDOWN = 196,
    WRATH_AURA_MOD_MOD_ATTACKER_SPELL_AND_WEAPON_CRIT_CHANCE = 197,
    WRATH_AURA_MOD_UNKNOWN198 = 198,
    WRATH_AURA_MOD_MOD_INCREASES_SPELL_PCT_TO_HIT = 199,
    WRATH_AURA_MOD_MOD_XP_PCT = 200,
    WRATH_AURA_MOD_FLY = 201,
    WRATH_AURA_MOD_IGNORE_COMBAT_RESULT = 202,
    WRATH_AURA_MOD_MOD_ATTACKER_MELEE_CRIT_DAMAGE = 203,
    WRATH_AURA_MOD_MOD_ATTACKER_RANGED_CRIT_DAMAGE = 204,
    WRATH_AURA_MOD_MOD_SCHOOL_CRIT_DMG_TAKEN = 205,
    WRATH_AURA_MOD_MOD_INCREASE_VEHICLE_FLIGHT_SPEED = 206,
    WRATH_AURA_MOD_MOD_INCREASE_MOUNTED_FLIGHT_SPEED = 207,
    WRATH_AURA_MOD_MOD_INCREASE_FLIGHT_SPEED = 208,
    WRATH_AURA_MOD_MOD_MOUNTED_FLIGHT_SPEED_ALWAYS = 209,
    WRATH_AURA_MOD_MOD_VEHICLE_SPEED_ALWAYS = 210,
    WRATH_AURA_MOD_MOD_FLIGHT_SPEED_NOT_STACK = 211,
    WRATH_AURA_MOD_MOD_RANGED_ATTACK_POWER_OF_STAT_PERCENT = 212,
    WRATH_AURA_MOD_MOD_RAGE_FROM_DAMAGE_DEALT = 213,
    WRATH_AURA_MOD_UNKNOWN214 = 214,
    WRATH_AURA_MOD_ARENA_PREPARATION = 215,
    WRATH_AURA_MOD_HASTE_SPELLS = 216,
    WRATH_AURA_MOD_MOD_MELEE_HASTE_2 = 217,
    WRATH_AURA_MOD_HASTE_RANGED = 218,
    WRATH_AURA_MOD_MOD_MANA_REGEN_FROM_STAT = 219,
    WRATH_AURA_MOD_MOD_RATING_FROM_STAT = 220,
    WRATH_AURA_MOD_MOD_DETAUNT = 221,
    WRATH_AURA_MOD_UNKNOWN222 = 222,
    WRATH_AURA_MOD_RAID_PROC_FROM_CHARGE = 223,
    WRATH_AURA_MOD_UNKNOWN224 = 224,
    WRATH_AURA_MOD_RAID_PROC_FROM_CHARGE_WITH_VALUE = 225,
    WRATH_AURA_MOD_PERIODIC_DUMMY = 226,
    WRATH_AURA_MOD_PERIODIC_TRIGGER_SPELL_WITH_VALUE = 227,
    WRATH_AURA_MOD_DETECT_STEALTH = 228,
    WRATH_AURA_MOD_MOD_AOE_DAMAGE_AVOIDANCE = 229,
    WRATH_AURA_MOD_UNKNOWN230 = 230,
    WRATH_AURA_MOD_PROC_TRIGGER_SPELL_WITH_VALUE = 231,
    WRATH_AURA_MOD_MECHANIC_DURATION_MOD = 232,
    WRATH_AURA_MOD_CHANGE_MODEL_FOR_ALL_HUMANOIDS = 233,
    WRATH_AURA_MOD_MECHANIC_DURATION_MOD_NOT_STACK = 234,
    WRATH_AURA_MOD_MOD_DISPEL_RESIST = 235,
    WRATH_AURA_MOD_CONTROL_VEHICLE = 236,
    WRATH_AURA_MOD_MOD_SPELL_DAMAGE_OF_ATTACK_POWER = 237,
    WRATH_AURA_MOD_MOD_SPELL_HEALING_OF_ATTACK_POWER = 238,
    WRATH_AURA_MOD_MOD_SCALE_2 = 239,
    WRATH_AURA_MOD_MOD_EXPERTISE = 240,
    WRATH_AURA_MOD_FORCE_MOVE_FORWARD = 241,
    WRATH_AURA_MOD_MOD_SPELL_DAMAGE_FROM_HEALING = 242,
    WRATH_AURA_MOD_MOD_FACTION = 243,
    WRATH_AURA_MOD_COMPREHEND_LANGUAGE = 244,
    WRATH_AURA_MOD_MOD_AURA_DURATION_BY_DISPEL = 245,
    WRATH_AURA_MOD_MOD_AURA_DURATION_BY_DISPEL_NOT_STACK = 246,
    WRATH_AURA_MOD_CLONE_CASTER = 247,
    WRATH_AURA_MOD_MOD_COMBAT_RESULT_CHANCE = 248,
    WRATH_AURA_MOD_CONVERT_RUNE = 249,
    WRATH_AURA_MOD_MOD_INCREASE_HEALTH_2 = 250,
    WRATH_AURA_MOD_MOD_ENEMY_DODGE = 251,
    WRATH_AURA_MOD_MOD_SPEED_SLOW_ALL = 252,
    WRATH_AURA_MOD_MOD_BLOCK_CRIT_CHANCE = 253,
    WRATH_AURA_MOD_MOD_DISARM_OFFHAND = 254,
    WRATH_AURA_MOD_MOD_MECHANIC_DAMAGE_TAKEN_PERCENT = 255,
    WRATH_AURA_MOD_NO_REAGENT_USE = 256,
    WRATH_AURA_MOD_MOD_TARGET_RESIST_BY_SPELL_CLASS = 257,
    WRATH_AURA_MOD_UNKNOWN258 = 258,
    WRATH_AURA_MOD_MOD_HOT_PCT = 259,
    WRATH_AURA_MOD_SCREEN_EFFECT = 260,
    WRATH_AURA_MOD_PHASE = 261,
    WRATH_AURA_MOD_ABILITY_IGNORE_AURASTATE = 262,
    WRATH_AURA_MOD_ALLOW_ONLY_ABILITY = 263,
    WRATH_AURA_MOD_UNKNOWN264 = 264,
    WRATH_AURA_MOD_UNKNOWN265 = 265,
    WRATH_AURA_MOD_UNKNOWN266 = 266,
    WRATH_AURA_MOD_MOD_IMMUNE_AURA_APPLY_SCHOOL = 267,
    WRATH_AURA_MOD_MOD_ATTACK_POWER_OF_STAT_PERCENT = 268,
    WRATH_AURA_MOD_MOD_IGNORE_TARGET_RESIST = 269,
    WRATH_AURA_MOD_MOD_ABILITY_IGNORE_TARGET_RESIST = 270,
    WRATH_AURA_MOD_MOD_DAMAGE_FROM_CASTER = 271,
    WRATH_AURA_MOD_IGNORE_MELEE_RESET = 272,
    WRATH_AURA_MOD_X_RAY = 273,
    WRATH_AURA_MOD_ABILITY_CONSUME_NO_AMMO = 274,
    WRATH_AURA_MOD_MOD_IGNORE_SHAPESHIFT = 275,
    WRATH_AURA_MOD_MOD_DAMAGE_DONE_FOR_MECHANIC = 276,
    WRATH_AURA_MOD_MOD_MAX_AFFECTED_TARGETS = 277,
    WRATH_AURA_MOD_MOD_DISARM_RANGED = 278,
    WRATH_AURA_MOD_INITIALIZE_IMAGES = 279,
    WRATH_AURA_MOD_MOD_ARMOR_PENETRATION_PCT = 280,
    WRATH_AURA_MOD_MOD_HONOR_GAIN_PCT = 281,
    WRATH_AURA_MOD_MOD_BASE_HEALTH_PCT = 282,
    WRATH_AURA_MOD_MOD_HEALING_RECEIVED = 283,
    WRATH_AURA_MOD_LINKED = 284,
    WRATH_AURA_MOD_MOD_ATTACK_POWER_OF_ARMOR = 285,
    WRATH_AURA_MOD_ABILITY_PERIODIC_CRIT = 286,
    WRATH_AURA_MOD_DEFLECT_SPELLS = 287,
    WRATH_AURA_MOD_IGNORE_HIT_DIRECTION = 288,
    WRATH_AURA_MOD_PREVENT_DURABILITY_LOSS = 289,
    WRATH_AURA_MOD_MOD_CRIT_PCT = 290,
    WRATH_AURA_MOD_MOD_XP_QUEST_PCT = 291,
    WRATH_AURA_MOD_OPEN_STABLE = 292,
    WRATH_AURA_MOD_OVERRIDE_SPELLS = 293,
    WRATH_AURA_MOD_PREVENT_REGENERATE_POWER = 294,
    WRATH_AURA_MOD_UNKNOWN295 = 295,
    WRATH_AURA_MOD_SET_VEHICLE_ID = 296,
    WRATH_AURA_MOD_BLOCK_SPELL_FAMILY = 297,
    WRATH_AURA_MOD_STRANGULATE = 298,
    WRATH_AURA_MOD_UNKNOWN299 = 299,
    WRATH_AURA_MOD_SHARE_DAMAGE_PCT = 300,
    WRATH_AURA_MOD_SCHOOL_HEAL_ABSORB = 301,
    WRATH_AURA_MOD_UNKNOWN302 = 302,
    WRATH_AURA_MOD_MOD_DAMAGE_DONE_VERSUS_AURASTATE = 303,
    WRATH_AURA_MOD_MOD_FAKE_INEBRIATE = 304,
    WRATH_AURA_MOD_MOD_MINIMUM_SPEED = 305,
    WRATH_AURA_MOD_UNKNOWN306 = 306,
    WRATH_AURA_MOD_HEAL_ABSORB_TEST = 307,
    WRATH_AURA_MOD_MOD_CRIT_CHANCE_FOR_CASTER = 308,
    WRATH_AURA_MOD_UNKNOWN309 = 309,
    WRATH_AURA_MOD_MOD_CREATURE_AOE_DAMAGE_AVOIDANCE = 310,
    WRATH_AURA_MOD_UNKNOWN311 = 311,
    WRATH_AURA_MOD_UNKNOWN312 = 312,
    WRATH_AURA_MOD_UNKNOWN313 = 313,
    WRATH_AURA_MOD_PREVENT_RESURRECTION = 314,
    WRATH_AURA_MOD_UNDERWATER_WALKING = 315,
    WRATH_AURA_MOD_PERIODIC_HASTE = 316
} wrath_AuraMod;

typedef enum {
    WRATH_AURA_TYPE_NONE = 0,
    WRATH_AURA_TYPE_BIND_SIGHT = 1,
    WRATH_AURA_TYPE_MOD_POSSESS = 2,
    WRATH_AURA_TYPE_PERIODIC_DAMAGE = 3,
    WRATH_AURA_TYPE_DUMMY = 4,
    WRATH_AURA_TYPE_MOD_CONFUSE = 5,
    WRATH_AURA_TYPE_MOD_CHARM = 6,
    WRATH_AURA_TYPE_MOD_FEAR = 7,
    WRATH_AURA_TYPE_PERIODIC_HEAL = 8,
    WRATH_AURA_TYPE_MOD_ATTACKSPEED = 9,
    WRATH_AURA_TYPE_MOD_THREAT = 10,
    WRATH_AURA_TYPE_MOD_TAUNT = 11,
    WRATH_AURA_TYPE_MOD_STUN = 12,
    WRATH_AURA_TYPE_MOD_DAMAGE_DONE = 13,
    WRATH_AURA_TYPE_MOD_DAMAGE_TAKEN = 14,
    WRATH_AURA_TYPE_DAMAGE_SHIELD = 15,
    WRATH_AURA_TYPE_MOD_STEALTH = 16,
    WRATH_AURA_TYPE_MOD_STEALTH_DETECT = 17,
    WRATH_AURA_TYPE_MOD_INVISIBILITY = 18,
    WRATH_AURA_TYPE_MOD_INVISIBILITY_DETECT = 19,
    WRATH_AURA_TYPE_OBS_MOD_HEALTH = 20,
    WRATH_AURA_TYPE_OBS_MOD_POWER = 21,
    WRATH_AURA_TYPE_MOD_RESISTANCE = 22,
    WRATH_AURA_TYPE_PERIODIC_TRIGGER_SPELL = 23,
    WRATH_AURA_TYPE_PERIODIC_ENERGIZE = 24,
    WRATH_AURA_TYPE_MOD_PACIFY = 25,
    WRATH_AURA_TYPE_MOD_ROOT = 26,
    WRATH_AURA_TYPE_MOD_SILENCE = 27,
    WRATH_AURA_TYPE_REFLECT_SPELLS = 28,
    WRATH_AURA_TYPE_MOD_STAT = 29,
    WRATH_AURA_TYPE_MOD_SKILL = 30,
    WRATH_AURA_TYPE_MOD_INCREASE_SPEED = 31,
    WRATH_AURA_TYPE_MOD_INCREASE_MOUNTED_SPEED = 32,
    WRATH_AURA_TYPE_MOD_DECREASE_SPEED = 33,
    WRATH_AURA_TYPE_MOD_INCREASE_HEALTH = 34,
    WRATH_AURA_TYPE_MOD_INCREASE_ENERGY = 35,
    WRATH_AURA_TYPE_MOD_SHAPESHIFT = 36,
    WRATH_AURA_TYPE_EFFECT_IMMUNITY = 37,
    WRATH_AURA_TYPE_STATE_IMMUNITY = 38,
    WRATH_AURA_TYPE_SCHOOL_IMMUNITY = 39,
    WRATH_AURA_TYPE_DAMAGE_IMMUNITY = 40,
    WRATH_AURA_TYPE_DISPEL_IMMUNITY = 41,
    WRATH_AURA_TYPE_PROC_TRIGGER_SPELL = 42,
    WRATH_AURA_TYPE_PROC_TRIGGER_DAMAGE = 43,
    WRATH_AURA_TYPE_TRACK_CREATURES = 44,
    WRATH_AURA_TYPE_TRACK_RESOURCES = 45,
    WRATH_AURA_TYPE_UNKNOWN46 = 46,
    WRATH_AURA_TYPE_MOD_PARRY_PERCENT = 47,
    WRATH_AURA_TYPE_PERIODIC_TRIGGER_SPELL_FROM_CLIENT = 48,
    WRATH_AURA_TYPE_MOD_DODGE_PERCENT = 49,
    WRATH_AURA_TYPE_MOD_CRITICAL_HEALING_AMOUNT = 50,
    WRATH_AURA_TYPE_MOD_BLOCK_PERCENT = 51,
    WRATH_AURA_TYPE_MOD_WEAPON_CRIT_PERCENT = 52,
    WRATH_AURA_TYPE_PERIODIC_LEECH = 53,
    WRATH_AURA_TYPE_MOD_HIT_CHANCE = 54,
    WRATH_AURA_TYPE_MOD_SPELL_HIT_CHANCE = 55,
    WRATH_AURA_TYPE_TRANSFORM = 56,
    WRATH_AURA_TYPE_MOD_SPELL_CRIT_CHANCE = 57,
    WRATH_AURA_TYPE_MOD_INCREASE_SWIM_SPEED = 58,
    WRATH_AURA_TYPE_MOD_DAMAGE_DONE_CREATURE = 59,
    WRATH_AURA_TYPE_MOD_PACIFY_SILENCE = 60,
    WRATH_AURA_TYPE_MOD_SCALE = 61,
    WRATH_AURA_TYPE_PERIODIC_HEALTH_FUNNEL = 62,
    WRATH_AURA_TYPE_UNKNOWN63 = 63,
    WRATH_AURA_TYPE_PERIODIC_MANA_LEECH = 64,
    WRATH_AURA_TYPE_MOD_CASTING_SPEED_NOT_STACK = 65,
    WRATH_AURA_TYPE_FEIGN_DEATH = 66,
    WRATH_AURA_TYPE_MOD_DISARM = 67,
    WRATH_AURA_TYPE_MOD_STALKED = 68,
    WRATH_AURA_TYPE_SCHOOL_ABSORB = 69,
    WRATH_AURA_TYPE_EXTRA_ATTACKS = 70,
    WRATH_AURA_TYPE_MOD_SPELL_CRIT_CHANCE_SCHOOL = 71,
    WRATH_AURA_TYPE_MOD_POWER_COST_SCHOOL_PCT = 72,
    WRATH_AURA_TYPE_MOD_POWER_COST_SCHOOL = 73,
    WRATH_AURA_TYPE_REFLECT_SPELLS_SCHOOL = 74,
    WRATH_AURA_TYPE_MOD_LANGUAGE = 75,
    WRATH_AURA_TYPE_FAR_SIGHT = 76,
    WRATH_AURA_TYPE_MECHANIC_IMMUNITY = 77,
    WRATH_AURA_TYPE_MOUNTED = 78,
    WRATH_AURA_TYPE_MOD_DAMAGE_PERCENT_DONE = 79,
    WRATH_AURA_TYPE_MOD_PERCENT_STAT = 80,
    WRATH_AURA_TYPE_SPLIT_DAMAGE_PCT = 81,
    WRATH_AURA_TYPE_WATER_BREATHING = 82,
    WRATH_AURA_TYPE_MOD_BASE_RESISTANCE = 83,
    WRATH_AURA_TYPE_MOD_REGEN = 84,
    WRATH_AURA_TYPE_MOD_POWER_REGEN = 85,
    WRATH_AURA_TYPE_CHANNEL_DEATH_ITEM = 86,
    WRATH_AURA_TYPE_MOD_DAMAGE_PERCENT_TAKEN = 87,
    WRATH_AURA_TYPE_MOD_HEALTH_REGEN_PERCENT = 88,
    WRATH_AURA_TYPE_PERIODIC_DAMAGE_PERCENT = 89,
    WRATH_AURA_TYPE_UNKNOWN90 = 90,
    WRATH_AURA_TYPE_MOD_DETECT_RANGE = 91,
    WRATH_AURA_TYPE_PREVENTS_FLEEING = 92,
    WRATH_AURA_TYPE_MOD_UNATTACKABLE = 93,
    WRATH_AURA_TYPE_INTERRUPT_REGEN = 94,
    WRATH_AURA_TYPE_GHOST = 95,
    WRATH_AURA_TYPE_SPELL_MAGNET = 96,
    WRATH_AURA_TYPE_MANA_SHIELD = 97,
    WRATH_AURA_TYPE_MOD_SKILL_TALENT = 98,
    WRATH_AURA_TYPE_MOD_ATTACK_POWER = 99,
    WRATH_AURA_TYPE_AURAS_VISIBLE = 100,
    WRATH_AURA_TYPE_MOD_RESISTANCE_PCT = 101,
    WRATH_AURA_TYPE_MOD_MELEE_ATTACK_POWER_VERSUS = 102,
    WRATH_AURA_TYPE_MOD_TOTAL_THREAT = 103,
    WRATH_AURA_TYPE_WATER_WALK = 104,
    WRATH_AURA_TYPE_FEATHER_FALL = 105,
    WRATH_AURA_TYPE_HOVER = 106,
    WRATH_AURA_TYPE_ADD_FLAT_MODIFIER = 107,
    WRATH_AURA_TYPE_ADD_PCT_MODIFIER = 108,
    WRATH_AURA_TYPE_ADD_TARGET_TRIGGER = 109,
    WRATH_AURA_TYPE_MOD_POWER_REGEN_PERCENT = 110,
    WRATH_AURA_TYPE_ADD_CASTER_HIT_TRIGGER = 111,
    WRATH_AURA_TYPE_OVERRIDE_CLASS_SCRIPTS = 112,
    WRATH_AURA_TYPE_MOD_RANGED_DAMAGE_TAKEN = 113,
    WRATH_AURA_TYPE_MOD_RANGED_DAMAGE_TAKEN_PCT = 114,
    WRATH_AURA_TYPE_MOD_HEALING = 115,
    WRATH_AURA_TYPE_MOD_REGEN_DURING_COMBAT = 116,
    WRATH_AURA_TYPE_MOD_MECHANIC_RESISTANCE = 117,
    WRATH_AURA_TYPE_MOD_HEALING_PCT = 118,
    WRATH_AURA_TYPE_UNKNOWN119 = 119,
    WRATH_AURA_TYPE_UNTRACKABLE = 120,
    WRATH_AURA_TYPE_EMPATHY = 121,
    WRATH_AURA_TYPE_MOD_OFFHAND_DAMAGE_PCT = 122,
    WRATH_AURA_TYPE_MOD_TARGET_RESISTANCE = 123,
    WRATH_AURA_TYPE_MOD_RANGED_ATTACK_POWER = 124,
    WRATH_AURA_TYPE_MOD_MELEE_DAMAGE_TAKEN = 125,
    WRATH_AURA_TYPE_MOD_MELEE_DAMAGE_TAKEN_PCT = 126,
    WRATH_AURA_TYPE_RANGED_ATTACK_POWER_ATTACKER_BONUS = 127,
    WRATH_AURA_TYPE_MOD_POSSESS_PET = 128,
    WRATH_AURA_TYPE_MOD_SPEED_ALWAYS = 129,
    WRATH_AURA_TYPE_MOD_MOUNTED_SPEED_ALWAYS = 130,
    WRATH_AURA_TYPE_MOD_RANGED_ATTACK_POWER_VERSUS = 131,
    WRATH_AURA_TYPE_MOD_INCREASE_ENERGY_PERCENT = 132,
    WRATH_AURA_TYPE_MOD_INCREASE_HEALTH_PERCENT = 133,
    WRATH_AURA_TYPE_MOD_MANA_REGEN_INTERRUPT = 134,
    WRATH_AURA_TYPE_MOD_HEALING_DONE = 135,
    WRATH_AURA_TYPE_MOD_HEALING_DONE_PERCENT = 136,
    WRATH_AURA_TYPE_MOD_TOTAL_STAT_PERCENTAGE = 137,
    WRATH_AURA_TYPE_MOD_MELEE_HASTE = 138,
    WRATH_AURA_TYPE_FORCE_REACTION = 139,
    WRATH_AURA_TYPE_MOD_RANGED_HASTE = 140,
    WRATH_AURA_TYPE_MOD_RANGED_AMMO_HASTE = 141,
    WRATH_AURA_TYPE_MOD_BASE_RESISTANCE_PCT = 142,
    WRATH_AURA_TYPE_MOD_RESISTANCE_EXCLUSIVE = 143,
    WRATH_AURA_TYPE_SAFE_FALL = 144,
    WRATH_AURA_TYPE_MOD_PET_TALENT_POINTS = 145,
    WRATH_AURA_TYPE_ALLOW_TAME_PET_TYPE = 146,
    WRATH_AURA_TYPE_MECHANIC_IMMUNITY_MASK = 147,
    WRATH_AURA_TYPE_RETAIN_COMBO_POINTS = 148,
    WRATH_AURA_TYPE_REDUCE_PUSHBACK = 149,
    WRATH_AURA_TYPE_MOD_SHIELD_BLOCKVALUE_PCT = 150,
    WRATH_AURA_TYPE_TRACK_STEALTHED = 151,
    WRATH_AURA_TYPE_MOD_DETECTED_RANGE = 152,
    WRATH_AURA_TYPE_SPLIT_DAMAGE_FLAT = 153,
    WRATH_AURA_TYPE_MOD_STEALTH_LEVEL = 154,
    WRATH_AURA_TYPE_MOD_WATER_BREATHING = 155,
    WRATH_AURA_TYPE_MOD_REPUTATION_GAIN = 156,
    WRATH_AURA_TYPE_PET_DAMAGE_MULTI = 157,
    WRATH_AURA_TYPE_MOD_SHIELD_BLOCKVALUE = 158,
    WRATH_AURA_TYPE_NO_PVP_CREDIT = 159,
    WRATH_AURA_TYPE_MOD_AOE_AVOIDANCE = 160,
    WRATH_AURA_TYPE_MOD_HEALTH_REGEN_IN_COMBAT = 161,
    WRATH_AURA_TYPE_POWER_BURN = 162,
    WRATH_AURA_TYPE_MOD_CRIT_DAMAGE_BONUS = 163,
    WRATH_AURA_TYPE_UNKNOWN164 = 164,
    WRATH_AURA_TYPE_MELEE_ATTACK_POWER_ATTACKER_BONUS = 165,
    WRATH_AURA_TYPE_MOD_ATTACK_POWER_PCT = 166,
    WRATH_AURA_TYPE_MOD_RANGED_ATTACK_POWER_PCT = 167,
    WRATH_AURA_TYPE_MOD_DAMAGE_DONE_VERSUS = 168,
    WRATH_AURA_TYPE_MOD_CRIT_PERCENT_VERSUS = 169,
    WRATH_AURA_TYPE_DETECT_AMORE = 170,
    WRATH_AURA_TYPE_MOD_SPEED_NOT_STACK = 171,
    WRATH_AURA_TYPE_MOD_MOUNTED_SPEED_NOT_STACK = 172,
    WRATH_AURA_TYPE_UNKNOWN173 = 173,
    WRATH_AURA_TYPE_MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174,
    WRATH_AURA_TYPE_MOD_SPELL_HEALING_OF_STAT_PERCENT = 175,
    WRATH_AURA_TYPE_SPIRIT_OF_REDEMPTION = 176,
    WRATH_AURA_TYPE_AOE_CHARM = 177,
    WRATH_AURA_TYPE_MOD_DEBUFF_RESISTANCE = 178,
    WRATH_AURA_TYPE_MOD_ATTACKER_SPELL_CRIT_CHANCE = 179,
    WRATH_AURA_TYPE_MOD_FLAT_SPELL_DAMAGE_VERSUS = 180,
    WRATH_AURA_TYPE_UNKNOWN181 = 181,
    WRATH_AURA_TYPE_MOD_RESISTANCE_OF_STAT_PERCENT = 182,
    WRATH_AURA_TYPE_MOD_CRITICAL_THREAT = 183,
    WRATH_AURA_TYPE_MOD_ATTACKER_MELEE_HIT_CHANCE = 184,
    WRATH_AURA_TYPE_MOD_ATTACKER_RANGED_HIT_CHANCE = 185,
    WRATH_AURA_TYPE_MOD_ATTACKER_SPELL_HIT_CHANCE = 186,
    WRATH_AURA_TYPE_MOD_ATTACKER_MELEE_CRIT_CHANCE = 187,
    WRATH_AURA_TYPE_MOD_ATTACKER_RANGED_CRIT_CHANCE = 188,
    WRATH_AURA_TYPE_MOD_RATING = 189,
    WRATH_AURA_TYPE_MOD_FACTION_REPUTATION_GAIN = 190,
    WRATH_AURA_TYPE_USE_NORMAL_MOVEMENT_SPEED = 191,
    WRATH_AURA_TYPE_MOD_MELEE_RANGED_HASTE = 192,
    WRATH_AURA_TYPE_MELEE_SLOW = 193,
    WRATH_AURA_TYPE_MOD_TARGET_ABSORB_SCHOOL = 194,
    WRATH_AURA_TYPE_MOD_TARGET_ABILITY_ABSORB_SCHOOL = 195,
    WRATH_AURA_TYPE_MOD_COOLDOWN = 196,
    WRATH_AURA_TYPE_MOD_ATTACKER_SPELL_AND_WEAPON_CRIT_CHANCE = 197,
    WRATH_AURA_TYPE_UNKNOWN198 = 198,
    WRATH_AURA_TYPE_MOD_INCREASES_SPELL_PCT_TO_HIT = 199,
    WRATH_AURA_TYPE_MOD_XP_PCT = 200,
    WRATH_AURA_TYPE_FLY = 201,
    WRATH_AURA_TYPE_IGNORE_COMBAT_RESULT = 202,
    WRATH_AURA_TYPE_MOD_ATTACKER_MELEE_CRIT_DAMAGE = 203,
    WRATH_AURA_TYPE_MOD_ATTACKER_RANGED_CRIT_DAMAGE = 204,
    WRATH_AURA_TYPE_MOD_SCHOOL_CRIT_DMG_TAKEN = 205,
    WRATH_AURA_TYPE_MOD_INCREASE_VEHICLE_FLIGHT_SPEED = 206,
    WRATH_AURA_TYPE_MOD_INCREASE_MOUNTED_FLIGHT_SPEED = 207,
    WRATH_AURA_TYPE_MOD_INCREASE_FLIGHT_SPEED = 208,
    WRATH_AURA_TYPE_MOD_MOUNTED_FLIGHT_SPEED_ALWAYS = 209,
    WRATH_AURA_TYPE_MOD_VEHICLE_SPEED_ALWAYS = 210,
    WRATH_AURA_TYPE_MOD_FLIGHT_SPEED_NOT_STACK = 211,
    WRATH_AURA_TYPE_MOD_RANGED_ATTACK_POWER_OF_STAT_PERCENT = 212,
    WRATH_AURA_TYPE_MOD_RAGE_FROM_DAMAGE_DEALT = 213,
    WRATH_AURA_TYPE_UNKNOWN214 = 214,
    WRATH_AURA_TYPE_ARENA_PREPARATION = 215,
    WRATH_AURA_TYPE_HASTE_SPELLS = 216,
    WRATH_AURA_TYPE_MOD_MELEE_HASTE_2 = 217,
    WRATH_AURA_TYPE_HASTE_RANGED = 218,
    WRATH_AURA_TYPE_MOD_MANA_REGEN_FROM_STAT = 219,
    WRATH_AURA_TYPE_MOD_RATING_FROM_STAT = 220,
    WRATH_AURA_TYPE_MOD_DETAUNT = 221,
    WRATH_AURA_TYPE_UNKNOWN222 = 222,
    WRATH_AURA_TYPE_RAID_PROC_FROM_CHARGE = 223,
    WRATH_AURA_TYPE_UNKNOWN224 = 224,
    WRATH_AURA_TYPE_RAID_PROC_FROM_CHARGE_WITH_VALUE = 225,
    WRATH_AURA_TYPE_PERIODIC_DUMMY = 226,
    WRATH_AURA_TYPE_PERIODIC_TRIGGER_SPELL_WITH_VALUE = 227,
    WRATH_AURA_TYPE_DETECT_STEALTH = 228,
    WRATH_AURA_TYPE_MOD_AOE_DAMAGE_AVOIDANCE = 229,
    WRATH_AURA_TYPE_UNKNOWN230 = 230,
    WRATH_AURA_TYPE_PROC_TRIGGER_SPELL_WITH_VALUE = 231,
    WRATH_AURA_TYPE_MECHANIC_DURATION_MOD = 232,
    WRATH_AURA_TYPE_CHANGE_MODEL_FOR_ALL_HUMANOIDS = 233,
    WRATH_AURA_TYPE_MECHANIC_DURATION_MOD_NOT_STACK = 234,
    WRATH_AURA_TYPE_MOD_DISPEL_RESIST = 235,
    WRATH_AURA_TYPE_CONTROL_VEHICLE = 236,
    WRATH_AURA_TYPE_MOD_SPELL_DAMAGE_OF_ATTACK_POWER = 237,
    WRATH_AURA_TYPE_MOD_SPELL_HEALING_OF_ATTACK_POWER = 238,
    WRATH_AURA_TYPE_MOD_SCALE_2 = 239,
    WRATH_AURA_TYPE_MOD_EXPERTISE = 240,
    WRATH_AURA_TYPE_FORCE_MOVE_FORWARD = 241,
    WRATH_AURA_TYPE_MOD_SPELL_DAMAGE_FROM_HEALING = 242,
    WRATH_AURA_TYPE_MOD_FACTION = 243,
    WRATH_AURA_TYPE_COMPREHEND_LANGUAGE = 244,
    WRATH_AURA_TYPE_MOD_AURA_DURATION_BY_DISPEL = 245,
    WRATH_AURA_TYPE_MOD_AURA_DURATION_BY_DISPEL_NOT_STACK = 246,
    WRATH_AURA_TYPE_CLONE_CASTER = 247,
    WRATH_AURA_TYPE_MOD_COMBAT_RESULT_CHANCE = 248,
    WRATH_AURA_TYPE_CONVERT_RUNE = 249,
    WRATH_AURA_TYPE_MOD_INCREASE_HEALTH_2 = 250,
    WRATH_AURA_TYPE_MOD_ENEMY_DODGE = 251,
    WRATH_AURA_TYPE_MOD_SPEED_SLOW_ALL = 252,
    WRATH_AURA_TYPE_MOD_BLOCK_CRIT_CHANCE = 253,
    WRATH_AURA_TYPE_MOD_DISARM_OFFHAND = 254,
    WRATH_AURA_TYPE_MOD_MECHANIC_DAMAGE_TAKEN_PERCENT = 255,
    WRATH_AURA_TYPE_NO_REAGENT_USE = 256,
    WRATH_AURA_TYPE_MOD_TARGET_RESIST_BY_SPELL_CLASS = 257,
    WRATH_AURA_TYPE_UNKNOWN258 = 258,
    WRATH_AURA_TYPE_MOD_HOT_PCT = 259,
    WRATH_AURA_TYPE_SCREEN_EFFECT = 260,
    WRATH_AURA_TYPE_PHASE = 261,
    WRATH_AURA_TYPE_ABILITY_IGNORE_AURASTATE = 262,
    WRATH_AURA_TYPE_ALLOW_ONLY_ABILITY = 263,
    WRATH_AURA_TYPE_UNKNOWN264 = 264,
    WRATH_AURA_TYPE_UNKNOWN265 = 265,
    WRATH_AURA_TYPE_UNKNOWN266 = 266,
    WRATH_AURA_TYPE_MOD_IMMUNE_AURA_APPLY_SCHOOL = 267,
    WRATH_AURA_TYPE_MOD_ATTACK_POWER_OF_STAT_PERCENT = 268,
    WRATH_AURA_TYPE_MOD_IGNORE_TARGET_RESIST = 269,
    WRATH_AURA_TYPE_MOD_ABILITY_IGNORE_TARGET_RESIST = 270,
    WRATH_AURA_TYPE_MOD_DAMAGE_FROM_CASTER = 271,
    WRATH_AURA_TYPE_IGNORE_MELEE_RESET = 272,
    WRATH_AURA_TYPE_X_RAY = 273,
    WRATH_AURA_TYPE_ABILITY_CONSUME_NO_AMMO = 274,
    WRATH_AURA_TYPE_MOD_IGNORE_SHAPESHIFT = 275,
    WRATH_AURA_TYPE_MOD_DAMAGE_DONE_FOR_MECHANIC = 276,
    WRATH_AURA_TYPE_MOD_MAX_AFFECTED_TARGETS = 277,
    WRATH_AURA_TYPE_MOD_DISARM_RANGED = 278,
    WRATH_AURA_TYPE_INITIALIZE_IMAGES = 279,
    WRATH_AURA_TYPE_MOD_ARMOR_PENETRATION_PCT = 280,
    WRATH_AURA_TYPE_MOD_HONOR_GAIN_PCT = 281,
    WRATH_AURA_TYPE_MOD_BASE_HEALTH_PCT = 282,
    WRATH_AURA_TYPE_MOD_HEALING_RECEIVED = 283,
    WRATH_AURA_TYPE_LINKED = 284,
    WRATH_AURA_TYPE_MOD_ATTACK_POWER_OF_ARMOR = 285,
    WRATH_AURA_TYPE_ABILITY_PERIODIC_CRIT = 286,
    WRATH_AURA_TYPE_DEFLECT_SPELLS = 287,
    WRATH_AURA_TYPE_IGNORE_HIT_DIRECTION = 288,
    WRATH_AURA_TYPE_PREVENT_DURABILITY_LOSS = 289,
    WRATH_AURA_TYPE_MOD_CRIT_PCT = 290,
    WRATH_AURA_TYPE_MOD_XP_QUEST_PCT = 291,
    WRATH_AURA_TYPE_OPEN_STABLE = 292,
    WRATH_AURA_TYPE_OVERRIDE_SPELLS = 293,
    WRATH_AURA_TYPE_PREVENT_REGENERATE_POWER = 294,
    WRATH_AURA_TYPE_UNKNOWN295 = 295,
    WRATH_AURA_TYPE_SET_VEHICLE_ID = 296,
    WRATH_AURA_TYPE_BLOCK_SPELL_FAMILY = 297,
    WRATH_AURA_TYPE_STRANGULATE = 298,
    WRATH_AURA_TYPE_UNKNOWN299 = 299,
    WRATH_AURA_TYPE_SHARE_DAMAGE_PCT = 300,
    WRATH_AURA_TYPE_SCHOOL_HEAL_ABSORB = 301,
    WRATH_AURA_TYPE_UNKNOWN302 = 302,
    WRATH_AURA_TYPE_MOD_DAMAGE_DONE_VERSUS_AURASTATE = 303,
    WRATH_AURA_TYPE_MOD_FAKE_INEBRIATE = 304,
    WRATH_AURA_TYPE_MOD_MINIMUM_SPEED = 305,
    WRATH_AURA_TYPE_UNKNOWN306 = 306,
    WRATH_AURA_TYPE_HEAL_ABSORB_TEST = 307,
    WRATH_AURA_TYPE_MOD_CRIT_CHANCE_FOR_CASTER = 308,
    WRATH_AURA_TYPE_UNKNOWN309 = 309,
    WRATH_AURA_TYPE_MOD_CREATURE_AOE_DAMAGE_AVOIDANCE = 310,
    WRATH_AURA_TYPE_UNKNOWN311 = 311,
    WRATH_AURA_TYPE_UNKNOWN312 = 312,
    WRATH_AURA_TYPE_UNKNOWN313 = 313,
    WRATH_AURA_TYPE_PREVENT_RESURRECTION = 314,
    WRATH_AURA_TYPE_UNDERWATER_WALKING = 315,
    WRATH_AURA_TYPE_PERIODIC_HASTE = 316
} wrath_AuraType;

typedef enum {
    WRATH_BANK_SWAP_SOURCE_INVENTORY = 0,
    WRATH_BANK_SWAP_SOURCE_BANK = 1
} wrath_BankSwapSource;

typedef enum {
    WRATH_BANK_SWAP_STORE_MODE_MANUAL = 0,
    WRATH_BANK_SWAP_STORE_MODE_AUTOMATIC = 1
} wrath_BankSwapStoreMode;

typedef enum {
    WRATH_BARBER_SHOP_RESULT_OK = 0,
    WRATH_BARBER_SHOP_RESULT_NOT_ENOUGH_MONEY = 1,
    WRATH_BARBER_SHOP_RESULT_MUST_BE_SEATED_IN_BARBER_CHAIR = 2,
    WRATH_BARBER_SHOP_RESULT_NOT_ENOUGH_MONEY2 = 3
} wrath_BarberShopResult;

typedef enum {
    WRATH_BATTLEFIELD_LIST_LOCATION_BATTLEMASTER = 0,
    WRATH_BATTLEFIELD_LIST_LOCATION_UI = 1
} wrath_BattlefieldListLocation;

typedef enum {
    WRATH_BATTLEFIELD_PORT_ACTION_LEAVE_QUEUE = 0,
    WRATH_BATTLEFIELD_PORT_ACTION_ENTER_BATTLE = 1
} wrath_BattlefieldPortAction;

typedef enum {
    WRATH_BATTLEGROUND_TYPE_NONE = 0,
    WRATH_BATTLEGROUND_TYPE_ALTERAC_VALLEY = 1,
    WRATH_BATTLEGROUND_TYPE_WARSONG_GULCH = 2,
    WRATH_BATTLEGROUND_TYPE_ARATHI_BASIN = 3,
    WRATH_BATTLEGROUND_TYPE_NAGRAND_ARENA = 4,
    WRATH_BATTLEGROUND_TYPE_BLADES_EDGE_ARENA = 5,
    WRATH_BATTLEGROUND_TYPE_ARENA = 6,
    WRATH_BATTLEGROUND_TYPE_EYE_OF_THE_STORM = 7,
    WRATH_BATTLEGROUND_TYPE_RUINS_OF_LORDAERON = 8,
    WRATH_BATTLEGROUND_TYPE_STRAND_OF_THE_ANCIENT = 9,
    WRATH_BATTLEGROUND_TYPE_DALARAN_SEWERS = 10,
    WRATH_BATTLEGROUND_TYPE_RING_OF_VALOR = 11,
    WRATH_BATTLEGROUND_TYPE_ISLE_OF_CONQUEST = 30,
    WRATH_BATTLEGROUND_TYPE_RANDOM = 32
} wrath_BattlegroundType;

typedef enum {
    WRATH_BG_TYPE_ID_NOT_ELIGIBLE = 0,
    WRATH_BG_TYPE_ID_QUEUED_FOR_AV = 1,
    WRATH_BG_TYPE_ID_QUEUED_FOR_WSG = 2,
    WRATH_BG_TYPE_ID_QUEUED_FOR_AB = 3,
    WRATH_BG_TYPE_ID_QUEUED_FOR_NETHERSTORM = 4,
    WRATH_BG_TYPE_ID_QUEUED_FOR_BLADES_EDGE_ARENA = 5,
    WRATH_BG_TYPE_ID_QUEUED_FOR_ARENA = 6,
    WRATH_BG_TYPE_ID_QUEUED_FOR_EYE_OF_THE_STORM = 7,
    WRATH_BG_TYPE_ID_QUEUED_FOR_RUINS_OF_LORDAERON = 8,
    WRATH_BG_TYPE_ID_QUEUED_FOR_STRAND_OF_THE_ANCIENT = 9,
    WRATH_BG_TYPE_ID_QUEUED_FOR_DALARAN_SEWERS = 10,
    WRATH_BG_TYPE_ID_QUEUED_FOR_RING_OF_VALOR = 11,
    WRATH_BG_TYPE_ID_QUEUED_FOR_ISLE_OF_CONQUEST = 30,
    WRATH_BG_TYPE_ID_REMOVE_FROM_QUEUE = -2
} wrath_BgTypeId;

typedef enum {
    WRATH_BONDING_NO_BIND = 0,
    WRATH_BONDING_PICK_UP = 1,
    WRATH_BONDING_EQUIP = 2,
    WRATH_BONDING_USE = 3,
    WRATH_BONDING_QUEST_ITEM = 4,
    WRATH_BONDING_QUEST_ITEM1 = 5
} wrath_Bonding;

typedef enum {
    WRATH_BUY_BANK_SLOT_RESULT_FAILED_TOO_MANY = 0,
    WRATH_BUY_BANK_SLOT_RESULT_INSUFFICIENT_FUNDS = 1,
    WRATH_BUY_BANK_SLOT_RESULT_NOT_BANKER = 2,
    WRATH_BUY_BANK_SLOT_RESULT_OK = 3
} wrath_BuyBankSlotResult;

typedef enum {
    WRATH_BUY_RESULT_CANT_FIND_ITEM = 0,
    WRATH_BUY_RESULT_ITEM_ALREADY_SOLD = 1,
    WRATH_BUY_RESULT_NOT_ENOUGH_MONEY = 2,
    WRATH_BUY_RESULT_SELLER_DONT_LIKE_YOU = 4,
    WRATH_BUY_RESULT_DISTANCE_TOO_FAR = 5,
    WRATH_BUY_RESULT_ITEM_SOLD_OUT = 7,
    WRATH_BUY_RESULT_CANT_CARRY_MORE = 8,
    WRATH_BUY_RESULT_RANK_REQUIRE = 11,
    WRATH_BUY_RESULT_REPUTATION_REQUIRE = 12
} wrath_BuyResult;

typedef enum {
    WRATH_BUYBACK_SLOT_SLOT1 = 69,
    WRATH_BUYBACK_SLOT_SLOT2 = 70,
    WRATH_BUYBACK_SLOT_SLOT3 = 71,
    WRATH_BUYBACK_SLOT_SLOT4 = 72,
    WRATH_BUYBACK_SLOT_SLOT5 = 73,
    WRATH_BUYBACK_SLOT_SLOT6 = 74,
    WRATH_BUYBACK_SLOT_SLOT7 = 75,
    WRATH_BUYBACK_SLOT_SLOT8 = 76,
    WRATH_BUYBACK_SLOT_SLOT9 = 77,
    WRATH_BUYBACK_SLOT_SLOT10 = 78,
    WRATH_BUYBACK_SLOT_SLOT11 = 79,
    WRATH_BUYBACK_SLOT_SLOT12 = 80,
    WRATH_BUYBACK_SLOT_SLOT13 = 81
} wrath_BuybackSlot;

typedef enum {
    WRATH_CALENDAR_MODERATOR_RANK_PLAYER = 0,
    WRATH_CALENDAR_MODERATOR_RANK_MODERATOR = 1,
    WRATH_CALENDAR_MODERATOR_RANK_OWNER = 2
} wrath_CalendarModeratorRank;

typedef enum {
    WRATH_CALENDAR_STATUS_INVITED = 0,
    WRATH_CALENDAR_STATUS_ACCEPTED = 1,
    WRATH_CALENDAR_STATUS_DECLINED = 2,
    WRATH_CALENDAR_STATUS_CONFIRMED = 3,
    WRATH_CALENDAR_STATUS_OUT = 4,
    WRATH_CALENDAR_STATUS_STANDBY = 5,
    WRATH_CALENDAR_STATUS_SIGNED_UP = 6,
    WRATH_CALENDAR_STATUS_NOT_SIGNED_UP = 7,
    WRATH_CALENDAR_STATUS_TENTATIVE = 8,
    WRATH_CALENDAR_STATUS_REMOVED = 9
} wrath_CalendarStatus;

typedef enum {
    WRATH_CALENDAR_STATUS_TIME_NOT_PRESENT = 0,
    WRATH_CALENDAR_STATUS_TIME_PRESENT = 1
} wrath_CalendarStatusTime;

typedef enum {
    WRATH_CHARTER_TYPE_GUILD = 0,
    WRATH_CHARTER_TYPE_ARENA = 1
} wrath_CharterType;

typedef enum {
    WRATH_CHAT_NOTIFY_JOINED_NOTICE = 0,
    WRATH_CHAT_NOTIFY_LEFT_NOTICE = 1,
    WRATH_CHAT_NOTIFY_YOU_JOINED_NOTICE = 2,
    WRATH_CHAT_NOTIFY_YOU_LEFT_NOTICE = 3,
    WRATH_CHAT_NOTIFY_WRONG_PASSWORD_NOTICE = 4,
    WRATH_CHAT_NOTIFY_NOT_MEMBER_NOTICE = 5,
    WRATH_CHAT_NOTIFY_NOT_MODERATOR_NOTICE = 6,
    WRATH_CHAT_NOTIFY_PASSWORD_CHANGED_NOTICE = 7,
    WRATH_CHAT_NOTIFY_OWNER_CHANGED_NOTICE = 8,
    WRATH_CHAT_NOTIFY_PLAYER_NOT_FOUND_NOTICE = 9,
    WRATH_CHAT_NOTIFY_NOT_OWNER_NOTICE = 10,
    WRATH_CHAT_NOTIFY_CHANNEL_OWNER_NOTICE = 11,
    WRATH_CHAT_NOTIFY_MODE_CHANGE_NOTICE = 12,
    WRATH_CHAT_NOTIFY_ANNOUNCEMENTS_ON_NOTICE = 13,
    WRATH_CHAT_NOTIFY_ANNOUNCEMENTS_OFF_NOTICE = 14,
    WRATH_CHAT_NOTIFY_MODERATION_ON_NOTICE = 15,
    WRATH_CHAT_NOTIFY_MODERATION_OFF_NOTICE = 16,
    WRATH_CHAT_NOTIFY_MUTED_NOTICE = 17,
    WRATH_CHAT_NOTIFY_PLAYER_KICKED_NOTICE = 18,
    WRATH_CHAT_NOTIFY_BANNED_NOTICE = 19,
    WRATH_CHAT_NOTIFY_PLAYER_BANNED_NOTICE = 20,
    WRATH_CHAT_NOTIFY_PLAYER_UNBANNED_NOTICE = 21,
    WRATH_CHAT_NOTIFY_PLAYER_NOT_BANNED_NOTICE = 22,
    WRATH_CHAT_NOTIFY_PLAYER_ALREADY_MEMBER_NOTICE = 23,
    WRATH_CHAT_NOTIFY_INVITE_NOTICE = 24,
    WRATH_CHAT_NOTIFY_INVITE_WRONG_FACTION_NOTICE = 25,
    WRATH_CHAT_NOTIFY_WRONG_FACTION_NOTICE = 26,
    WRATH_CHAT_NOTIFY_INVALID_NAME_NOTICE = 27,
    WRATH_CHAT_NOTIFY_NOT_MODERATED_NOTICE = 28,
    WRATH_CHAT_NOTIFY_PLAYER_INVITED_NOTICE = 29,
    WRATH_CHAT_NOTIFY_PLAYER_INVITE_BANNED_NOTICE = 30,
    WRATH_CHAT_NOTIFY_THROTTLED_NOTICE = 31,
    WRATH_CHAT_NOTIFY_NOT_IN_AREA_NOTICE = 32,
    WRATH_CHAT_NOTIFY_NOT_IN_LFG_NOTICE = 33,
    WRATH_CHAT_NOTIFY_VOICE_ON_NOTICE = 34,
    WRATH_CHAT_NOTIFY_VOICE_OFF_NOTICE = 35
} wrath_ChatNotify;

typedef enum {
    WRATH_CHAT_RESTRICTION_TYPE_CHAT_RESTRICTED = 0,
    WRATH_CHAT_RESTRICTION_TYPE_CHAT_THROTTLED = 1,
    WRATH_CHAT_RESTRICTION_TYPE_USER_SQUELCHED = 2,
    WRATH_CHAT_RESTRICTION_TYPE_YELL_RESTRICTED = 3
} wrath_ChatRestrictionType;

typedef enum {
    WRATH_CHAT_TYPE_SYSTEM = 0,
    WRATH_CHAT_TYPE_SAY = 1,
    WRATH_CHAT_TYPE_PARTY = 2,
    WRATH_CHAT_TYPE_RAID = 3,
    WRATH_CHAT_TYPE_GUILD = 4,
    WRATH_CHAT_TYPE_OFFICER = 5,
    WRATH_CHAT_TYPE_YELL = 6,
    WRATH_CHAT_TYPE_WHISPER = 7,
    WRATH_CHAT_TYPE_WHISPER_FOREIGN = 8,
    WRATH_CHAT_TYPE_WHISPER_INFORM = 9,
    WRATH_CHAT_TYPE_EMOTE = 10,
    WRATH_CHAT_TYPE_TEXT_EMOTE = 11,
    WRATH_CHAT_TYPE_MONSTER_SAY = 12,
    WRATH_CHAT_TYPE_MONSTER_PARTY = 13,
    WRATH_CHAT_TYPE_MONSTER_YELL = 14,
    WRATH_CHAT_TYPE_MONSTER_WHISPER = 15,
    WRATH_CHAT_TYPE_MONSTER_EMOTE = 16,
    WRATH_CHAT_TYPE_CHANNEL = 17,
    WRATH_CHAT_TYPE_CHANNEL_JOIN = 18,
    WRATH_CHAT_TYPE_CHANNEL_LEAVE = 19,
    WRATH_CHAT_TYPE_CHANNEL_LIST = 20,
    WRATH_CHAT_TYPE_CHANNEL_NOTICE = 21,
    WRATH_CHAT_TYPE_CHANNEL_NOTICE_USER = 22,
    WRATH_CHAT_TYPE_AFK = 23,
    WRATH_CHAT_TYPE_DND = 24,
    WRATH_CHAT_TYPE_IGNORED = 25,
    WRATH_CHAT_TYPE_SKILL = 26,
    WRATH_CHAT_TYPE_LOOT = 27,
    WRATH_CHAT_TYPE_MONEY = 28,
    WRATH_CHAT_TYPE_OPENING = 29,
    WRATH_CHAT_TYPE_TRADESKILLS = 30,
    WRATH_CHAT_TYPE_PET_INFO = 31,
    WRATH_CHAT_TYPE_COMBAT_MISC_INFO = 32,
    WRATH_CHAT_TYPE_COMBAT_XP_GAIN = 33,
    WRATH_CHAT_TYPE_COMBAT_HONOR_GAIN = 34,
    WRATH_CHAT_TYPE_COMBAT_FACTION_CHANGE = 35,
    WRATH_CHAT_TYPE_BG_SYSTEM_NEUTRAL = 36,
    WRATH_CHAT_TYPE_BG_SYSTEM_ALLIANCE = 37,
    WRATH_CHAT_TYPE_BG_SYSTEM_HORDE = 38,
    WRATH_CHAT_TYPE_RAID_LEADER = 39,
    WRATH_CHAT_TYPE_RAID_WARNING = 40,
    WRATH_CHAT_TYPE_RAID_BOSS_EMOTE = 41,
    WRATH_CHAT_TYPE_RAID_BOSS_WHISPER = 42,
    WRATH_CHAT_TYPE_FILTERED = 43,
    WRATH_CHAT_TYPE_BATTLEGROUND = 44,
    WRATH_CHAT_TYPE_BATTLEGROUND_LEADER = 45,
    WRATH_CHAT_TYPE_RESTRICTED = 46,
    WRATH_CHAT_TYPE_BATTLENET = 47,
    WRATH_CHAT_TYPE_ACHIEVEMENT = 48,
    WRATH_CHAT_TYPE_GUILD_ACHIEVEMENT = 49,
    WRATH_CHAT_TYPE_ARENA_POINTS = 50,
    WRATH_CHAT_TYPE_PARTY_LEADER = 51
} wrath_ChatType;

typedef enum {
    WRATH_CINEMATIC_SEQUENCE_ID_GOBLIN = 0,
    WRATH_CINEMATIC_SEQUENCE_ID_PALANTIR_OF_AZORA = 1,
    WRATH_CINEMATIC_SEQUENCE_ID_UNDEAD = 2,
    WRATH_CINEMATIC_SEQUENCE_ID_ORC = 21,
    WRATH_CINEMATIC_SEQUENCE_ID_DWARF = 41,
    WRATH_CINEMATIC_SEQUENCE_ID_NIGHT_ELF = 61,
    WRATH_CINEMATIC_SEQUENCE_ID_HUMAN = 81,
    WRATH_CINEMATIC_SEQUENCE_ID_GNOME = 101,
    WRATH_CINEMATIC_SEQUENCE_ID_TROLL = 121,
    WRATH_CINEMATIC_SEQUENCE_ID_TAUREN = 141,
    WRATH_CINEMATIC_SEQUENCE_ID_SCRY_CAM = 161,
    WRATH_CINEMATIC_SEQUENCE_ID_BLOOD_ELF = 162,
    WRATH_CINEMATIC_SEQUENCE_ID_DRAENEI = 163,
    WRATH_CINEMATIC_SEQUENCE_ID_SUNWELL_FIVE_MAN = 164,
    WRATH_CINEMATIC_SEQUENCE_ID_DEATH_KNIGHT = 165
} wrath_CinematicSequenceId;

typedef enum {
    WRATH_CLASS_WARRIOR = 1,
    WRATH_CLASS_PALADIN = 2,
    WRATH_CLASS_HUNTER = 3,
    WRATH_CLASS_ROGUE = 4,
    WRATH_CLASS_PRIEST = 5,
    WRATH_CLASS_DEATH_KNIGHT = 6,
    WRATH_CLASS_SHAMAN = 7,
    WRATH_CLASS_MAGE = 8,
    WRATH_CLASS_WARLOCK = 9,
    WRATH_CLASS_DRUID = 11
} wrath_Class;

typedef enum {
    WRATH_CLIENT_CAST_FLAGS_NONE = 0,
    WRATH_CLIENT_CAST_FLAGS_EXTRA = 2
} wrath_ClientCastFlags;

typedef enum {
    WRATH_CLIENT_MOVEMENT_DATA_NOT_PRESENT = 0,
    WRATH_CLIENT_MOVEMENT_DATA_PRESENT = 1
} wrath_ClientMovementData;

typedef enum {
    WRATH_COMMENTATOR_ENABLE_OPTION_DISABLE = 0,
    WRATH_COMMENTATOR_ENABLE_OPTION_ENABLE = 1,
    WRATH_COMMENTATOR_ENABLE_OPTION_TOGGLE = 2
} wrath_CommentatorEnableOption;

typedef enum {
    WRATH_COMPLAIN_RESULT_WINDOW_DO_NOT_SHOW = 0,
    WRATH_COMPLAIN_RESULT_WINDOW_SHOW = 1
} wrath_ComplainResultWindow;

typedef enum {
    WRATH_COMPLAINT_STATUS_DISABLED = 0,
    WRATH_COMPLAINT_STATUS_ENABLED_WITHOUT_AUTO_IGNORE = 1,
    WRATH_COMPLAINT_STATUS_ENABLED_WITH_AUTO_IGNORE = 2
} wrath_ComplaintStatus;

typedef enum {
    WRATH_CORPSE_QUERY_RESULT_NOT_FOUND = 0,
    WRATH_CORPSE_QUERY_RESULT_FOUND = 1
} wrath_CorpseQueryResult;

typedef enum {
    WRATH_CREATURE_FAMILY_NONE = 0,
    WRATH_CREATURE_FAMILY_WOLF = 1,
    WRATH_CREATURE_FAMILY_CAT = 2,
    WRATH_CREATURE_FAMILY_SPIDER = 3,
    WRATH_CREATURE_FAMILY_BEAR = 4,
    WRATH_CREATURE_FAMILY_BOAR = 5,
    WRATH_CREATURE_FAMILY_CROCOLISK = 6,
    WRATH_CREATURE_FAMILY_CARRION_BIRD = 7,
    WRATH_CREATURE_FAMILY_CRAB = 8,
    WRATH_CREATURE_FAMILY_GORILLA = 9,
    WRATH_CREATURE_FAMILY_RAPTOR = 11,
    WRATH_CREATURE_FAMILY_TALLSTRIDER = 12,
    WRATH_CREATURE_FAMILY_FELHUNTER = 15,
    WRATH_CREATURE_FAMILY_VOIDWALKER = 16,
    WRATH_CREATURE_FAMILY_SUCCUBUS = 17,
    WRATH_CREATURE_FAMILY_DOOMGUARD = 19,
    WRATH_CREATURE_FAMILY_SCORPID = 20,
    WRATH_CREATURE_FAMILY_TURTLE = 21,
    WRATH_CREATURE_FAMILY_IMP = 23,
    WRATH_CREATURE_FAMILY_BAT = 24,
    WRATH_CREATURE_FAMILY_HYENA = 25,
    WRATH_CREATURE_FAMILY_BIRD_OF_PREY = 26,
    WRATH_CREATURE_FAMILY_WIND_SERPENT = 27,
    WRATH_CREATURE_FAMILY_REMOTE_CONTROL = 28,
    WRATH_CREATURE_FAMILY_FELGUARD = 29,
    WRATH_CREATURE_FAMILY_DRAGONHAWK = 30,
    WRATH_CREATURE_FAMILY_RAVAGER = 31,
    WRATH_CREATURE_FAMILY_WARP_STALKER = 32,
    WRATH_CREATURE_FAMILY_SPOREBAT = 33,
    WRATH_CREATURE_FAMILY_NETHER_RAY = 34,
    WRATH_CREATURE_FAMILY_SERPENT = 35,
    WRATH_CREATURE_FAMILY_MOTH = 37,
    WRATH_CREATURE_FAMILY_CHIMAERA = 38,
    WRATH_CREATURE_FAMILY_DEVILSAUR = 39,
    WRATH_CREATURE_FAMILY_GHOUL = 40,
    WRATH_CREATURE_FAMILY_SILITHID = 41,
    WRATH_CREATURE_FAMILY_WORM = 42,
    WRATH_CREATURE_FAMILY_RHINO = 43,
    WRATH_CREATURE_FAMILY_WASP = 44,
    WRATH_CREATURE_FAMILY_CORE_HOUND = 45,
    WRATH_CREATURE_FAMILY_SPIRIT_BEAST = 46
} wrath_CreatureFamily;

typedef enum {
    WRATH_DECLINED_NAMES_NO = 0,
    WRATH_DECLINED_NAMES_YES = 1
} wrath_DeclinedNames;

typedef enum {
    WRATH_DECLINED_PET_NAME_INCLUDED_NOT_INCLUDED = 0,
    WRATH_DECLINED_PET_NAME_INCLUDED_INCLUDED = 1
} wrath_DeclinedPetNameIncluded;

typedef enum {
    WRATH_DISPEL_METHOD_DISPELLED = 0,
    WRATH_DISPEL_METHOD_CLEANSED = 1
} wrath_DispelMethod;

typedef enum {
    WRATH_DUEL_WINNER_REASON_WON = 0,
    WRATH_DUEL_WINNER_REASON_FLED = 1
} wrath_DuelWinnerReason;

typedef enum {
    WRATH_DUNGEON_DIFFICULTY_NORMAL = 0,
    WRATH_DUNGEON_DIFFICULTY_HEROIC = 1
} wrath_DungeonDifficulty;

typedef enum {
    WRATH_EMOTE_ONESHOT_NONE = 0,
    WRATH_EMOTE_ONESHOT_TALK = 1,
    WRATH_EMOTE_ONESHOT_BOW = 2,
    WRATH_EMOTE_ONESHOT_WAVE = 3,
    WRATH_EMOTE_ONESHOT_CHEER = 4,
    WRATH_EMOTE_ONESHOT_EXCLAMATION = 5,
    WRATH_EMOTE_ONESHOT_QUESTION = 6,
    WRATH_EMOTE_ONESHOT_EAT = 7,
    WRATH_EMOTE_STATE_DANCE = 10,
    WRATH_EMOTE_ONESHOT_LAUGH = 11,
    WRATH_EMOTE_STATE_SLEEP = 12,
    WRATH_EMOTE_STATE_SIT = 13,
    WRATH_EMOTE_ONESHOT_RUDE = 14,
    WRATH_EMOTE_ONESHOT_ROAR = 15,
    WRATH_EMOTE_ONESHOT_KNEEL = 16,
    WRATH_EMOTE_ONESHOT_KISS = 17,
    WRATH_EMOTE_ONESHOT_CRY = 18,
    WRATH_EMOTE_ONESHOT_CHICKEN = 19,
    WRATH_EMOTE_ONESHOT_BEG = 20,
    WRATH_EMOTE_ONESHOT_APPLAUD = 21,
    WRATH_EMOTE_ONESHOT_SHOUT = 22,
    WRATH_EMOTE_ONESHOT_FLEX = 23,
    WRATH_EMOTE_ONESHOT_SHY = 24,
    WRATH_EMOTE_ONESHOT_POINT = 25,
    WRATH_EMOTE_STATE_STAND = 26,
    WRATH_EMOTE_STATE_READY_UNARMED = 27,
    WRATH_EMOTE_STATE_WORK_SHEATHED = 28,
    WRATH_EMOTE_STATE_POINT = 29,
    WRATH_EMOTE_STATE_NONE = 30,
    WRATH_EMOTE_ONESHOT_WOUND = 33,
    WRATH_EMOTE_ONESHOT_WOUND_CRITICAL = 34,
    WRATH_EMOTE_ONESHOT_ATTACK_UNARMED = 35,
    WRATH_EMOTE_ONESHOT_ATTACK1H = 36,
    WRATH_EMOTE_ONESHOT_ATTACK2HTIGHT = 37,
    WRATH_EMOTE_ONESHOT_ATTACK2H_LOOSE = 38,
    WRATH_EMOTE_ONESHOT_PARRY_UNARMED = 39,
    WRATH_EMOTE_ONESHOT_PARRY_SHIELD = 43,
    WRATH_EMOTE_ONESHOT_READY_UNARMED = 44,
    WRATH_EMOTE_ONESHOT_READY1H = 45,
    WRATH_EMOTE_ONESHOT_READY_BOW = 48,
    WRATH_EMOTE_ONESHOT_SPELL_PRECAST = 50,
    WRATH_EMOTE_ONESHOT_SPELL_CAST = 51,
    WRATH_EMOTE_ONESHOT_BATTLE_ROAR = 53,
    WRATH_EMOTE_ONESHOT_SPECIALATTACK1H = 54,
    WRATH_EMOTE_ONESHOT_KICK = 60,
    WRATH_EMOTE_ONESHOT_ATTACK_THROWN = 61,
    WRATH_EMOTE_STATE_STUN = 64,
    WRATH_EMOTE_STATE_DEAD = 65,
    WRATH_EMOTE_ONESHOT_SALUTE = 66,
    WRATH_EMOTE_STATE_KNEEL = 68,
    WRATH_EMOTE_STATE_USE_STANDING = 69,
    WRATH_EMOTE_ONESHOT_WAVE_NO_SHEATHE = 70,
    WRATH_EMOTE_ONESHOT_CHEER_NO_SHEATHE = 71,
    WRATH_EMOTE_ONESHOT_EAT_NO_SHEATHE = 92,
    WRATH_EMOTE_STATE_STUN_NO_SHEATHE = 93,
    WRATH_EMOTE_ONESHOT_DANCE = 94,
    WRATH_EMOTE_ONESHOT_SALUTE_NO_SHEATH = 113,
    WRATH_EMOTE_STATE_USE_STANDING_NO_SHEATHE = 133,
    WRATH_EMOTE_ONESHOT_LAUGH_NO_SHEATHE = 153,
    WRATH_EMOTE_STATE_WORK = 173,
    WRATH_EMOTE_STATE_SPELL_PRECAST = 193,
    WRATH_EMOTE_ONESHOT_READY_RIFLE = 213,
    WRATH_EMOTE_STATE_READY_RIFLE = 214,
    WRATH_EMOTE_STATE_WORK_MINING = 233,
    WRATH_EMOTE_STATE_WORK_CHOPWOOD = 234,
    WRATH_EMOTE_STATE_APPLAUD = 253,
    WRATH_EMOTE_ONESHOT_LIFTOFF = 254,
    WRATH_EMOTE_ONESHOT_YES = 273,
    WRATH_EMOTE_ONESHOT_NO = 274,
    WRATH_EMOTE_ONESHOT_TRAIN = 275,
    WRATH_EMOTE_ONESHOT_LAND = 293,
    WRATH_EMOTE_STATE_AT_EASE = 313,
    WRATH_EMOTE_STATE_READY1H = 333,
    WRATH_EMOTE_STATE_SPELL_KNEEL_START = 353,
    WRATH_EMOTE_STATE_SUBMERGED = 373,
    WRATH_EMOTE_ONESHOT_SUBMERGE = 374,
    WRATH_EMOTE_STATE_READY2H = 375,
    WRATH_EMOTE_STATE_READY_BOW = 376,
    WRATH_EMOTE_ONESHOT_MOUNT_SPECIAL = 377,
    WRATH_EMOTE_STATE_TALK = 378,
    WRATH_EMOTE_STATE_FISHING = 379,
    WRATH_EMOTE_ONESHOT_FISHING = 380,
    WRATH_EMOTE_ONESHOT_LOOT = 381,
    WRATH_EMOTE_STATE_WHIRLWIND = 382,
    WRATH_EMOTE_STATE_DROWNED = 383,
    WRATH_EMOTE_STATE_HOLD_BOW = 384,
    WRATH_EMOTE_STATE_HOLD_RIFLE = 385,
    WRATH_EMOTE_STATE_HOLD_THROWN = 386,
    WRATH_EMOTE_ONESHOT_DROWN = 387,
    WRATH_EMOTE_ONESHOT_STOMP = 388,
    WRATH_EMOTE_ONESHOT_ATTACK_OFF = 389,
    WRATH_EMOTE_ONESHOT_ATTACK_OFF_PIERCE = 390,
    WRATH_EMOTE_STATE_ROAR = 391,
    WRATH_EMOTE_STATE_LAUGH = 392,
    WRATH_EMOTE_ONESHOT_CREATURE_SPECIAL = 393,
    WRATH_EMOTE_ONESHOT_JUMPLANDRUN = 394,
    WRATH_EMOTE_ONESHOT_JUMPEND = 395,
    WRATH_EMOTE_ONESHOT_TALK_NO_SHEATHE = 396,
    WRATH_EMOTE_ONESHOT_POINT_NO_SHEATHE = 397,
    WRATH_EMOTE_STATE_CANNIBALIZE = 398,
    WRATH_EMOTE_ONESHOT_JUMPSTART = 399,
    WRATH_EMOTE_STATE_DANCESPECIAL = 400,
    WRATH_EMOTE_ONESHOT_DANCESPECIAL = 401,
    WRATH_EMOTE_ONESHOT_CUSTOM_SPELL_01 = 402,
    WRATH_EMOTE_ONESHOT_CUSTOM_SPELL_02 = 403,
    WRATH_EMOTE_ONESHOT_CUSTOM_SPELL_03 = 404,
    WRATH_EMOTE_ONESHOT_CUSTOM_SPELL_04 = 405,
    WRATH_EMOTE_ONESHOT_CUSTOM_SPELL_05 = 406,
    WRATH_EMOTE_ONESHOT_CUSTOM_SPELL_06 = 407,
    WRATH_EMOTE_ONESHOT_CUSTOM_SPELL_07 = 408,
    WRATH_EMOTE_ONESHOT_CUSTOM_SPELL_08 = 409,
    WRATH_EMOTE_ONESHOT_CUSTOM_SPELL_09 = 410,
    WRATH_EMOTE_ONESHOT_CUSTOM_SPELL_10 = 411,
    WRATH_EMOTE_STATE_EXCLAIM = 412,
    WRATH_EMOTE_STATE_DANCE_CUSTOM = 413,
    WRATH_EMOTE_STATE_SIT_CHAIR_MED = 415,
    WRATH_EMOTE_STATE_CUSTOM_SPELL_01 = 416,
    WRATH_EMOTE_STATE_CUSTOM_SPELL_02 = 417,
    WRATH_EMOTE_STATE_EAT = 418,
    WRATH_EMOTE_STATE_CUSTOM_SPELL_04 = 419,
    WRATH_EMOTE_STATE_CUSTOM_SPELL_03 = 420,
    WRATH_EMOTE_STATE_CUSTOM_SPELL_05 = 421,
    WRATH_EMOTE_STATE_SPELLEFFECT_HOLD = 422,
    WRATH_EMOTE_STATE_EAT_NO_SHEATHE = 423,
    WRATH_EMOTE_STATE_MOUNT = 424,
    WRATH_EMOTE_STATE_READY2HL = 425,
    WRATH_EMOTE_STATE_SIT_CHAIR_HIGH = 426,
    WRATH_EMOTE_STATE_FALL = 427,
    WRATH_EMOTE_STATE_LOOT = 428,
    WRATH_EMOTE_STATE_SUBMERGED_NEW = 429,
    WRATH_EMOTE_ONESHOT_COWER = 430,
    WRATH_EMOTE_STATE_COWER = 431,
    WRATH_EMOTE_ONESHOT_USE_STANDING = 432,
    WRATH_EMOTE_STATE_STEALTH_STAND = 433,
    WRATH_EMOTE_ONESHOT_OMNICAST_GHOUL = 434,
    WRATH_EMOTE_ONESHOT_ATTACK_BOW = 435,
    WRATH_EMOTE_ONESHOT_ATTACK_RIFLE = 436,
    WRATH_EMOTE_STATE_SWIM_IDLE = 437,
    WRATH_EMOTE_STATE_ATTACK_UNARMED = 438,
    WRATH_EMOTE_ONESHOT_SPELL_CAST_W_SOUND = 439,
    WRATH_EMOTE_ONESHOT_DODGE = 440,
    WRATH_EMOTE_ONESHOT_PARRY1H = 441,
    WRATH_EMOTE_ONESHOT_PARRY2H = 442,
    WRATH_EMOTE_ONESHOT_PARRY2HL = 443,
    WRATH_EMOTE_STATE_FLYFALL = 444,
    WRATH_EMOTE_ONESHOT_FLYDEATH = 445,
    WRATH_EMOTE_STATE_FLY_FALL = 446,
    WRATH_EMOTE_ONESHOT_FLY_SIT_GROUND_DOWN = 447,
    WRATH_EMOTE_ONESHOT_FLY_SIT_GROUND_UP = 448,
    WRATH_EMOTE_ONESHOT_EMERGE = 449,
    WRATH_EMOTE_ONESHOT_DRAGON_SPIT = 450,
    WRATH_EMOTE_STATE_SPECIAL_UNARMED = 451,
    WRATH_EMOTE_ONESHOT_FLYGRAB = 452,
    WRATH_EMOTE_STATE_FLYGRABCLOSED = 453,
    WRATH_EMOTE_ONESHOT_FLYGRABTHROWN = 454,
    WRATH_EMOTE_STATE_FLY_SIT_GROUND = 455,
    WRATH_EMOTE_STATE_WALK_BACKWARDS = 456,
    WRATH_EMOTE_ONESHOT_FLYTALK = 457,
    WRATH_EMOTE_ONESHOT_FLYATTACK1H = 458,
    WRATH_EMOTE_STATE_CUSTOM_SPELL_08 = 459,
    WRATH_EMOTE_ONESHOT_FLY_DRAGON_SPIT = 460,
    WRATH_EMOTE_STATE_SIT_CHAIR_LOW = 461,
    WRATH_EMOTE_ONESHOT_STUN = 462,
    WRATH_EMOTE_ONESHOT_SPELL_CAST_OMNI = 463,
    WRATH_EMOTE_STATE_READY_THROWN = 465,
    WRATH_EMOTE_ONESHOT_WORK_CHOPWOOD = 466,
    WRATH_EMOTE_ONESHOT_WORK_MINING = 467,
    WRATH_EMOTE_STATE_SPELL_CHANNEL_OMNI = 468,
    WRATH_EMOTE_STATE_SPELL_CHANNEL_DIRECTED = 469,
    WRATH_EMOTE_STAND_STATE_NONE = 470,
    WRATH_EMOTE_STATE_READYJOUST = 471,
    WRATH_EMOTE_STATE_STRANGULATE = 473,
    WRATH_EMOTE_STATE_READY_SPELL_OMNI = 474,
    WRATH_EMOTE_STATE_HOLD_JOUST = 475,
    WRATH_EMOTE_ONESHOT_CRY_JAINA = 476
} wrath_Emote;

typedef enum {
    WRATH_ENCOUNTER_FRAME_ENGAGE = 0,
    WRATH_ENCOUNTER_FRAME_DISENGAGE = 1,
    WRATH_ENCOUNTER_FRAME_UPDATE_PRIORITY = 2,
    WRATH_ENCOUNTER_FRAME_ADD_TIMER = 3,
    WRATH_ENCOUNTER_FRAME_ENABLE_OBJECTIVE = 4,
    WRATH_ENCOUNTER_FRAME_UPDATE_OBJECTIVE = 5,
    WRATH_ENCOUNTER_FRAME_DISABLE_OBJECTIVE = 6,
    WRATH_ENCOUNTER_FRAME_REFRESH_FRAMES = 7
} wrath_EncounterFrame;

typedef enum {
    WRATH_ENVIRONMENTAL_DAMAGE_TYPE_EXHAUSTED = 0,
    WRATH_ENVIRONMENTAL_DAMAGE_TYPE_DROWNING = 1,
    WRATH_ENVIRONMENTAL_DAMAGE_TYPE_FALL = 2,
    WRATH_ENVIRONMENTAL_DAMAGE_TYPE_LAVA = 3,
    WRATH_ENVIRONMENTAL_DAMAGE_TYPE_SLIME = 4,
    WRATH_ENVIRONMENTAL_DAMAGE_TYPE_FIRE = 5
} wrath_EnvironmentalDamageType;

typedef enum {
    WRATH_EXPANSION_VANILLA = 0,
    WRATH_EXPANSION_THE_BURNING_CRUSADE = 1,
    WRATH_EXPANSION_WRATH_OF_THE_LICH_KING = 2
} wrath_Expansion;

typedef enum {
    WRATH_EXPERIENCE_AWARD_TYPE_KILL = 0,
    WRATH_EXPERIENCE_AWARD_TYPE_NON_KILL = 1
} wrath_ExperienceAwardType;

typedef enum {
    WRATH_FACTION_NONE = 0,
    WRATH_FACTION_PLAYER_HUMAN = 1,
    WRATH_FACTION_PLAYER_ORC = 2,
    WRATH_FACTION_PLAYER_DWARF = 3,
    WRATH_FACTION_PLAYER_NIGHT_ELF = 4,
    WRATH_FACTION_PLAYER_UNDEAD = 5,
    WRATH_FACTION_PLAYER_TAUREN = 6,
    WRATH_FACTION_CREATURE = 7,
    WRATH_FACTION_PLAYER_GNOME = 8,
    WRATH_FACTION_PLAYER_TROLL = 9,
    WRATH_FACTION_MONSTER = 14,
    WRATH_FACTION_DEFIAS_BROTHERHOOD = 15,
    WRATH_FACTION_GNOLL_RIVERPAW = 16,
    WRATH_FACTION_GNOLL_REDRIDGE = 17,
    WRATH_FACTION_GNOLL_SHADOWHIDE = 18,
    WRATH_FACTION_MURLOC = 19,
    WRATH_FACTION_UNDEAD_SCOURGE = 20,
    WRATH_FACTION_BOOTY_BAY = 21,
    WRATH_FACTION_BEAST_SPIDER = 22,
    WRATH_FACTION_BEAST_BOAR = 23,
    WRATH_FACTION_WORGEN = 24,
    WRATH_FACTION_KOBOLD = 25,
    WRATH_FACTION_TROLL_BLOODSCALP = 26,
    WRATH_FACTION_TROLL_SKULLSPLITTER = 27,
    WRATH_FACTION_PREY = 28,
    WRATH_FACTION_BEAST_WOLF = 29,
    WRATH_FACTION_DEFIAS_BROTHERHOOD_TRAITOR = 30,
    WRATH_FACTION_FRIENDLY = 31,
    WRATH_FACTION_TROGG = 32,
    WRATH_FACTION_TROLL_FROSTMANE = 33,
    WRATH_FACTION_ORC_BLACKROCK = 34,
    WRATH_FACTION_VILLIAN = 35,
    WRATH_FACTION_VICTIM = 36,
    WRATH_FACTION_BEAST_BEAR = 37,
    WRATH_FACTION_OGRE = 38,
    WRATH_FACTION_KURZENS_MERCENARIES = 39,
    WRATH_FACTION_ESCORTEE = 40,
    WRATH_FACTION_VENTURE_COMPANY = 41,
    WRATH_FACTION_BEAST_RAPTOR = 42,
    WRATH_FACTION_BASILISK = 43,
    WRATH_FACTION_DRAGONFLIGHT_GREEN = 44,
    WRATH_FACTION_LOST_ONES = 45,
    WRATH_FACTION_BLACKSMITHING_ARMORSMITHING = 46,
    WRATH_FACTION_IRONFORGE = 47,
    WRATH_FACTION_DARK_IRON_DWARVES = 48,
    WRATH_FACTION_HUMAN_NIGHT_WATCH = 49,
    WRATH_FACTION_DRAGONFLIGHT_RED = 50,
    WRATH_FACTION_GNOLL_MOSSHIDE = 51,
    WRATH_FACTION_ORC_DRAGONMAW = 52,
    WRATH_FACTION_GNOME_LEPER = 53,
    WRATH_FACTION_GNOMEREGAN_EXILES = 54,
    WRATH_FACTION_LEOPARD = 55,
    WRATH_FACTION_SCARLET_CRUSADE = 56,
    WRATH_FACTION_GNOLL_ROTHIDE = 57,
    WRATH_FACTION_BEAST_GORILLA = 58,
    WRATH_FACTION_THORIUM_BROTHERHOOD = 59,
    WRATH_FACTION_NAGA = 60,
    WRATH_FACTION_DALARAN = 61,
    WRATH_FACTION_FORLORN_SPIRIT = 62,
    WRATH_FACTION_DARKHOWL = 63,
    WRATH_FACTION_GRELL = 64,
    WRATH_FACTION_FURBOLG = 65,
    WRATH_FACTION_HORDE_GENERIC = 66,
    WRATH_FACTION_HORDE = 67,
    WRATH_FACTION_UNDERCITY = 68,
    WRATH_FACTION_DARNASSUS = 69,
    WRATH_FACTION_SYNDICATE = 70,
    WRATH_FACTION_HILLSBRAD_MILITIA = 71,
    WRATH_FACTION_STORMWIND = 72,
    WRATH_FACTION_DEMON = 73,
    WRATH_FACTION_ELEMENTAL = 74,
    WRATH_FACTION_SPIRIT = 75,
    WRATH_FACTION_ORGRIMMAR = 76,
    WRATH_FACTION_TREASURE = 77,
    WRATH_FACTION_GNOLL_MUDSNOUT = 78,
    WRATH_FACTION_HILLSBRAD_SOUTHSHORE_MAYOR = 79,
    WRATH_FACTION_DRAGONFLIGHT_BLACK = 80,
    WRATH_FACTION_THUNDER_BLUFF = 81,
    WRATH_FACTION_TROLL_WITHERBARK = 82,
    WRATH_FACTION_LEATHERWORKING_ELEMENTAL = 83,
    WRATH_FACTION_QUILBOAR_RAZORMANE = 84,
    WRATH_FACTION_QUILBOAR_BRISTLEBACK = 85,
    WRATH_FACTION_LEATHERWORKING_DRAGONSCALE = 86,
    WRATH_FACTION_BLOODSAIL_BUCCANEERS = 87,
    WRATH_FACTION_BLACKFATHOM = 88,
    WRATH_FACTION_MAKRURA = 89,
    WRATH_FACTION_CENTAUR_KOLKAR = 90,
    WRATH_FACTION_CENTAUR_GALAK = 91,
    WRATH_FACTION_GELKIS_CLAN_CENTAUR = 92,
    WRATH_FACTION_MAGRAM_CLAN_CENTAUR = 93,
    WRATH_FACTION_MARAUDINE = 94,
    WRATH_FACTION_THERAMORE = 108,
    WRATH_FACTION_QUILBOAR_RAZORFEN = 109,
    WRATH_FACTION_QUILBOAR_RAZORMANE_2 = 110,
    WRATH_FACTION_QUILBOAR_DEATHSHEAD = 111,
    WRATH_FACTION_ENEMY = 128,
    WRATH_FACTION_AMBIENT = 148,
    WRATH_FACTION_NETHERGARDE_CARAVAN = 168,
    WRATH_FACTION_STEAMWHEEDLE_CARTEL = 169,
    WRATH_FACTION_ALLIANCE_GENERIC = 189,
    WRATH_FACTION_NETHERGARDE = 209,
    WRATH_FACTION_WAILING_CAVERNS = 229,
    WRATH_FACTION_SILITHID = 249,
    WRATH_FACTION_SILVERMOON_REMNANT = 269,
    WRATH_FACTION_ZANDALAR_TRIBE = 270,
    WRATH_FACTION_BLACKSMITHING_WEAPONSMITHING = 289,
    WRATH_FACTION_SCORPID = 309,
    WRATH_FACTION_BEAST_BAT = 310,
    WRATH_FACTION_TITAN = 311,
    WRATH_FACTION_TASKMASTER_FIZZULE = 329,
    WRATH_FACTION_RAVENHOLDT = 349,
    WRATH_FACTION_GADGETZAN = 369,
    WRATH_FACTION_GNOMEREGAN_BUG = 389,
    WRATH_FACTION_HARPY = 409,
    WRATH_FACTION_BURNING_BLADE = 429,
    WRATH_FACTION_SHADOWSILK_POACHER = 449,
    WRATH_FACTION_SEARING_SPIDER = 450,
    WRATH_FACTION_ALLIANCE = 469,
    WRATH_FACTION_RATCHET = 470,
    WRATH_FACTION_WILDHAMMER_CLAN = 471,
    WRATH_FACTION_GOBLIN_DARK_IRON_BAR_PATRON = 489,
    WRATH_FACTION_THE_LEAGUE_OF_ARATHOR = 509,
    WRATH_FACTION_THE_DEFILERS = 510,
    WRATH_FACTION_GIANT = 511,
    WRATH_FACTION_ARGENT_DAWN = 529,
    WRATH_FACTION_DARKSPEAR_TROLLS = 530,
    WRATH_FACTION_DRAGONFLIGHT_BRONZE = 531,
    WRATH_FACTION_DRAGONFLIGHT_BLUE = 532,
    WRATH_FACTION_LEATHERWORKING_TRIBAL = 549,
    WRATH_FACTION_ENGINEERING_GOBLIN = 550,
    WRATH_FACTION_ENGINEERING_GNOME = 551,
    WRATH_FACTION_BLACKSMITHING_HAMMERSMITHING = 569,
    WRATH_FACTION_BLACKSMITHING_AXESMITHING = 570,
    WRATH_FACTION_BLACKSMITHING_SWORDSMITHING = 571,
    WRATH_FACTION_TROLL_VILEBRANCH = 572,
    WRATH_FACTION_SOUTHSEA_FREEBOOTERS = 573,
    WRATH_FACTION_CAER_DARROW = 574,
    WRATH_FACTION_FURBOLG_UNCORRUPTED = 575,
    WRATH_FACTION_TIMBERMAW_HOLD = 576,
    WRATH_FACTION_EVERLOOK = 577,
    WRATH_FACTION_WINTERSABER_TRAINERS = 589,
    WRATH_FACTION_CENARION_CIRCLE = 609,
    WRATH_FACTION_SHATTERSPEAR_TROLLS = 629,
    WRATH_FACTION_RAVASAUR_TRAINERS = 630,
    WRATH_FACTION_MAJORDOMO_EXECUTUS = 649,
    WRATH_FACTION_BEAST_CARRION_BIRD = 669,
    WRATH_FACTION_BEAST_CAT = 670,
    WRATH_FACTION_BEAST_CRAB = 671,
    WRATH_FACTION_BEAST_CROCILISK = 672,
    WRATH_FACTION_BEAST_HYENA = 673,
    WRATH_FACTION_BEAST_OWL = 674,
    WRATH_FACTION_BEAST_SCORPID = 675,
    WRATH_FACTION_BEAST_TALLSTRIDER = 676,
    WRATH_FACTION_BEAST_TURTLE = 677,
    WRATH_FACTION_BEAST_WIND_SERPENT = 678,
    WRATH_FACTION_TRAINING_DUMMY = 679,
    WRATH_FACTION_DRAGONFLIGHT_BLACK_BAIT = 689,
    WRATH_FACTION_BATTLEGROUND_NEUTRAL = 709,
    WRATH_FACTION_FROSTWOLF_CLAN = 729,
    WRATH_FACTION_STORMPIKE_GUARD = 730,
    WRATH_FACTION_HYDRAXIAN_WATERLORDS = 749,
    WRATH_FACTION_SULFURON_FIRELORDS = 750,
    WRATH_FACTION_GIZLOCKS_DUMMY = 769,
    WRATH_FACTION_GIZLOCKS_CHARM = 770,
    WRATH_FACTION_GIZLOCK = 771,
    WRATH_FACTION_MORO_GAI = 789,
    WRATH_FACTION_SPIRIT_GUIDE_ALLIANCE = 790,
    WRATH_FACTION_SHEN_DRALAR = 809,
    WRATH_FACTION_OGRE_CAPTAIN_KROMCRUSH = 829,
    WRATH_FACTION_SPIRIT_GUIDE_HORDE = 849,
    WRATH_FACTION_JAEDENAR = 869,
    WRATH_FACTION_WARSONG_OUTRIDERS = 889,
    WRATH_FACTION_SILVERWING_SENTINELS = 890,
    WRATH_FACTION_ALLIANCE_FORCES = 891,
    WRATH_FACTION_HORDE_FORCES = 892,
    WRATH_FACTION_REVANTUSK_TROLLS = 893,
    WRATH_FACTION_DARKMOON_FAIRE = 909,
    WRATH_FACTION_BROOD_OF_NOZDORMU = 910,
    WRATH_FACTION_SILVERMOON_CITY = 911,
    WRATH_FACTION_MIGHT_OF_KALIMDOR = 912,
    WRATH_FACTION_PLAYER_BLOOD_ELF = 914,
    WRATH_FACTION_ARMIES_OF_C_THUN = 915,
    WRATH_FACTION_SILITHID_ATTACKERS = 916,
    WRATH_FACTION_THE_IRONFORGE_BRIGADE = 917,
    WRATH_FACTION_RC_ENEMIES = 918,
    WRATH_FACTION_RC_OBJECTS = 919,
    WRATH_FACTION_RED = 920,
    WRATH_FACTION_BLUE = 921,
    WRATH_FACTION_TRANQUILLIEN = 922,
    WRATH_FACTION_FARSTRIDERS = 923,
    WRATH_FACTION_DEPRECATED = 924,
    WRATH_FACTION_SUNSTRIDERS = 925,
    WRATH_FACTION_MAGISTERS_GUILD = 926,
    WRATH_FACTION_PLAYER_DRAENEI = 927,
    WRATH_FACTION_SCOURGE_INVADERS = 928,
    WRATH_FACTION_BLOODMAUL_CLAN = 929,
    WRATH_FACTION_EXODAR = 930,
    WRATH_FACTION_TEST_FACTION_NOT_A_REAL_FACTION = 931,
    WRATH_FACTION_THE_ALDOR = 932,
    WRATH_FACTION_THE_CONSORTIUM = 933,
    WRATH_FACTION_THE_SCRYERS = 934,
    WRATH_FACTION_THE_SHA_TAR = 935,
    WRATH_FACTION_SHATTRATH_CITY = 936,
    WRATH_FACTION_TROLL_FOREST = 937,
    WRATH_FACTION_THE_OMENAI = 938,
    WRATH_FACTION_DEPRECATED1 = 939,
    WRATH_FACTION_THE_SONS_OF_LOTHAR = 940,
    WRATH_FACTION_THE_MAG_HAR = 941,
    WRATH_FACTION_CENARION_EXPEDITION = 942,
    WRATH_FACTION_FEL_ORC = 943,
    WRATH_FACTION_FEL_ORC_GHOST = 944,
    WRATH_FACTION_SONS_OF_LOTHAR_GHOSTS = 945,
    WRATH_FACTION_HONOR_HOLD = 946,
    WRATH_FACTION_THRALLMAR = 947,
    WRATH_FACTION_TEST_FACTION_2 = 948,
    WRATH_FACTION_TEST_FACTION_1 = 949,
    WRATH_FACTION_TOWOW_FLAG = 950,
    WRATH_FACTION_TOWOW_FLAG_TRIGGER_ALLIANCE_DND = 951,
    WRATH_FACTION_TEST_FACTION_3 = 952,
    WRATH_FACTION_TEST_FACTION_4 = 953,
    WRATH_FACTION_TOWOW_FLAG_TRIGGER_HORDE_DND = 954,
    WRATH_FACTION_BROKEN = 955,
    WRATH_FACTION_ETHEREUM = 956,
    WRATH_FACTION_EARTH_ELEMENTAL = 957,
    WRATH_FACTION_FIGHTING_ROBOTS = 958,
    WRATH_FACTION_ACTOR_GOOD = 959,
    WRATH_FACTION_ACTOR_EVIL = 960,
    WRATH_FACTION_STILLPINE_FURBOLG = 961,
    WRATH_FACTION_CRAZED_OWLKIN = 962,
    WRATH_FACTION_CHESS_ALLIANCE = 963,
    WRATH_FACTION_CHESS_HORDE = 964,
    WRATH_FACTION_MONSTER_SPAR = 965,
    WRATH_FACTION_MONSTER_SPAR_BUDDY = 966,
    WRATH_FACTION_THE_VIOLET_EYE = 967,
    WRATH_FACTION_SUNHAWKS = 968,
    WRATH_FACTION_HAND_OF_ARGUS = 969,
    WRATH_FACTION_SPOREGGAR = 970,
    WRATH_FACTION_FUNGAL_GIANT = 971,
    WRATH_FACTION_SPORE_BAT = 972,
    WRATH_FACTION_MONSTER_PREDATOR = 973,
    WRATH_FACTION_MONSTER_PREY = 974,
    WRATH_FACTION_VOID_ANOMALY = 975,
    WRATH_FACTION_HYJAL_DEFENDERS = 976,
    WRATH_FACTION_HYJAL_INVADERS = 977,
    WRATH_FACTION_KURENAI = 978,
    WRATH_FACTION_EARTHEN_RING = 979,
    WRATH_FACTION_THE_BURNING_CRUSADE = 980,
    WRATH_FACTION_ARAKKOA = 981,
    WRATH_FACTION_ZANGARMARSH_BANNER_ALLIANCE = 982,
    WRATH_FACTION_ZANGARMARSH_BANNER_HORDE = 983,
    WRATH_FACTION_ZANGARMARSH_BANNER_NEUTRAL = 984,
    WRATH_FACTION_CAVERNS_OF_TIME_THRALL = 985,
    WRATH_FACTION_CAVERNS_OF_TIME_DURNHOLDE = 986,
    WRATH_FACTION_CAVERNS_OF_TIME_SOUTHSHORE_GUARDS = 987,
    WRATH_FACTION_SHADOW_COUNCIL_COVERT = 988,
    WRATH_FACTION_KEEPERS_OF_TIME = 989,
    WRATH_FACTION_THE_SCALE_OF_THE_SANDS = 990,
    WRATH_FACTION_DARK_PORTAL_DEFENDER_ALLIANCE = 991,
    WRATH_FACTION_DARK_PORTAL_DEFENDER_HORDE = 992,
    WRATH_FACTION_DARK_PORTAL_ATTACKER_LEGION = 993,
    WRATH_FACTION_INCITER_TRIGGER = 994,
    WRATH_FACTION_INCITER_TRIGGER_2 = 995,
    WRATH_FACTION_INCITER_TRIGGER_3 = 996,
    WRATH_FACTION_INCITER_TRIGGER_4 = 997,
    WRATH_FACTION_INCITER_TRIGGER_5 = 998,
    WRATH_FACTION_MANA_CREATURE = 999,
    WRATH_FACTION_KHADGARS_SERVANT = 1000,
    WRATH_FACTION_BLADESPIRE_CLAN = 1001,
    WRATH_FACTION_ETHEREUM_SPARBUDDY = 1002,
    WRATH_FACTION_PROTECTORATE = 1003,
    WRATH_FACTION_ARCANE_ANNIHILATOR_DNR = 1004,
    WRATH_FACTION_FRIENDLY_HIDDEN = 1005,
    WRATH_FACTION_KIRIN_VAR_DATHRIC = 1006,
    WRATH_FACTION_KIRIN_VAR_BELMARA = 1007,
    WRATH_FACTION_KIRIN_VAR_LUMINRATH = 1008,
    WRATH_FACTION_KIRIN_VAR_COHLIEN = 1009,
    WRATH_FACTION_SERVANT_OF_ILLIDAN = 1010,
    WRATH_FACTION_LOWER_CITY = 1011,
    WRATH_FACTION_ASHTONGUE_DEATHSWORN = 1012,
    WRATH_FACTION_SPIRITS_OF_SHADOWMOON_1 = 1013,
    WRATH_FACTION_SPIRITS_OF_SHADOWMOON_2 = 1014,
    WRATH_FACTION_NETHERWING = 1015,
    WRATH_FACTION_WYRMCULT = 1016,
    WRATH_FACTION_TREANT = 1017,
    WRATH_FACTION_LEOTHERAS_DEMON_I = 1018,
    WRATH_FACTION_LEOTHERAS_DEMON_II = 1019,
    WRATH_FACTION_LEOTHERAS_DEMON_III = 1020,
    WRATH_FACTION_LEOTHERAS_DEMON_IV = 1021,
    WRATH_FACTION_LEOTHERAS_DEMON_V = 1022,
    WRATH_FACTION_AZALOTH = 1023,
    WRATH_FACTION_ROCK_FLAYER = 1024,
    WRATH_FACTION_FLAYER_HUNTER = 1025,
    WRATH_FACTION_SHADOWMOON_SHADE = 1026,
    WRATH_FACTION_LEGION_COMMUNICATOR = 1027,
    WRATH_FACTION_RAVENSWOOD_ANCIENTS = 1028,
    WRATH_FACTION_CHESS_FRIENDLY_TO_ALL_CHESS = 1029,
    WRATH_FACTION_BLACK_TEMPLE_GATES_ILLIDARI = 1030,
    WRATH_FACTION_SHA_TARI_SKYGUARD = 1031,
    WRATH_FACTION_AREA_52 = 1032,
    WRATH_FACTION_MAIEV = 1033,
    WRATH_FACTION_SKETTIS_SHADOWY_ARAKKOA = 1034,
    WRATH_FACTION_SKETTIS_ARAKKOA = 1035,
    WRATH_FACTION_DRAGONMAW_ENEMY = 1036,
    WRATH_FACTION_ALLIANCE_VANGUARD = 1037,
    WRATH_FACTION_OGRI_LA = 1038,
    WRATH_FACTION_RAVAGER = 1039,
    WRATH_FACTION_REUSE = 1040,
    WRATH_FACTION_FRENZY = 1041,
    WRATH_FACTION_SKYGUARD_ENEMY = 1042,
    WRATH_FACTION_SKUNK_PETUNIA = 1043,
    WRATH_FACTION_THERAMORE_DESERTER = 1044,
    WRATH_FACTION_VRYKUL = 1045,
    WRATH_FACTION_NORTHSEA_PIRATES = 1046,
    WRATH_FACTION_TUSKARR = 1047,
    WRATH_FACTION_UNUSED = 1048,
    WRATH_FACTION_TROLL_AMANI = 1049,
    WRATH_FACTION_VALIANCE_EXPEDITION = 1050,
    WRATH_FACTION_UNUSED1 = 1051,
    WRATH_FACTION_HORDE_EXPEDITION = 1052,
    WRATH_FACTION_WESTGUARD = 1053,
    WRATH_FACTION_SPOTTED_GRYPHON = 1054,
    WRATH_FACTION_TAMED_PLAGUEHOUND = 1055,
    WRATH_FACTION_VRYKUL_ANCIENT_SPIRIT_1 = 1056,
    WRATH_FACTION_VRYKUL_ANCIENT_SIPRIT_2 = 1057,
    WRATH_FACTION_VRYKUL_ANCIENT_SIPRIT_3 = 1058,
    WRATH_FACTION_CTF_FLAG_ALLIANCE = 1059,
    WRATH_FACTION_TEST = 1060,
    WRATH_FACTION_VRYKUL1 = 1061,
    WRATH_FACTION_VRYKUL_GLADIATOR = 1062,
    WRATH_FACTION_VALGARDE_COMBATANT = 1063,
    WRATH_FACTION_THE_TAUNKA = 1064,
    WRATH_FACTION_MONSTER_ZONE_FORCE_REACTION_1 = 1065,
    WRATH_FACTION_MONSTER_ZONE_FORCE_REACTION_2 = 1066,
    WRATH_FACTION_THE_HAND_OF_VENGEANCE = 1067,
    WRATH_FACTION_EXPLORERS__LEAGUE = 1068,
    WRATH_FACTION_RAM_RACING_POWERUP_DND = 1069,
    WRATH_FACTION_RAM_RACING_TRAP_DND = 1070,
    WRATH_FACTION_CRAIGS_SQUIRRELS = 1071,
    WRATH_FACTION_REUSE1 = 1072,
    WRATH_FACTION_THE_KALU_AK = 1073,
    WRATH_FACTION_HOLIDAY_WATER_BARREL = 1074,
    WRATH_FACTION_HOLIDAY_GENERIC = 1075,
    WRATH_FACTION_IRON_DWARVES = 1076,
    WRATH_FACTION_SHATTERED_SUN_OFFENSIVE = 1077,
    WRATH_FACTION_FIGHTING_VANITY_PET = 1078,
    WRATH_FACTION_MURLOC_WINTERFIN = 1079,
    WRATH_FACTION_FRIENDLY_FORCE_REACTION = 1080,
    WRATH_FACTION_OBJECT_FORCE_REACTION = 1081,
    WRATH_FACTION_REUSE2 = 1082,
    WRATH_FACTION_REUSE4 = 1083,
    WRATH_FACTION_VRYKUL_SEA = 1084,
    WRATH_FACTION_WARSONG_OFFENSIVE = 1085,
    WRATH_FACTION_POACHER = 1086,
    WRATH_FACTION_HOLIDAY_MONSTER = 1087,
    WRATH_FACTION_FURBOLG_REDFANG = 1088,
    WRATH_FACTION_FURBOLG_FROSTPAW = 1089,
    WRATH_FACTION_KIRIN_TOR = 1090,
    WRATH_FACTION_THE_WYRMREST_ACCORD = 1091,
    WRATH_FACTION_AZJOL_NERUB = 1092,
    WRATH_FACTION_REUSE8 = 1093,
    WRATH_FACTION_THE_SILVER_COVENANT = 1094,
    WRATH_FACTION_GRIZZLY_HILLS_TRAPPER = 1095,
    WRATH_FACTION_REUSE16 = 1096,
    WRATH_FACTION_WRATH_OF_THE_LICH_KING = 1097,
    WRATH_FACTION_KNIGHTS_OF_THE_EBON_BLADE = 1098,
    WRATH_FACTION_WRATHGATE_SCOURGE = 1099,
    WRATH_FACTION_WRATHGATE_ALLIANCE = 1100,
    WRATH_FACTION_WRATHGATE_HORDE = 1101,
    WRATH_FACTION_CTF_FLAG_HORDE = 1102,
    WRATH_FACTION_CTF_FLAG_NEUTRAL = 1103,
    WRATH_FACTION_FRENZYHEART_TRIBE = 1104,
    WRATH_FACTION_THE_ORACLES = 1105,
    WRATH_FACTION_ARGENT_CRUSADE = 1106,
    WRATH_FACTION_TROLL_DRAKKARI = 1107,
    WRATH_FACTION_COT_ARTHAS = 1108,
    WRATH_FACTION_COT_STRATHOLME_CITIZEN = 1109,
    WRATH_FACTION_COT_SCOURGE = 1110,
    WRATH_FACTION_FREYA = 1111,
    WRATH_FACTION_MOUNT_TAXI_ALLIANCE = 1112,
    WRATH_FACTION_MOUNT_TAXI_HORDE = 1113,
    WRATH_FACTION_MOUNT_TAXI_NEUTRAL = 1114,
    WRATH_FACTION_ELEMENTAL_WATER = 1115,
    WRATH_FACTION_ELEMENTAL_AIR = 1116,
    WRATH_FACTION_SHOLAZAR_BASIN = 1117,
    WRATH_FACTION_CLASSIC = 1118,
    WRATH_FACTION_THE_SONS_OF_HODIR = 1119,
    WRATH_FACTION_IRON_GIANTS = 1120,
    WRATH_FACTION_FROST_VRYKUL = 1121,
    WRATH_FACTION_EARTHEN = 1122,
    WRATH_FACTION_MONSTER_REFEREE = 1123,
    WRATH_FACTION_THE_SUNREAVERS = 1124,
    WRATH_FACTION_HYLDSMEET = 1125,
    WRATH_FACTION_THE_FROSTBORN = 1126,
    WRATH_FACTION_ORGRIMMAR_ALEX_TEST = 1127,
    WRATH_FACTION_TRANQUILLIEN_CONVERSION = 1136,
    WRATH_FACTION_WINTERSABER_CONVERSION = 1137,
    WRATH_FACTION_HATES_EVERYTHING = 1145,
    WRATH_FACTION_SILVER_COVENANT_CONVERSION = 1154,
    WRATH_FACTION_SUNREAVERS_CONVERSION = 1155,
    WRATH_FACTION_THE_ASHEN_VERDICT = 1156,
    WRATH_FACTION_CTF_FLAG_ALLIANCE_2 = 1159,
    WRATH_FACTION_CTF_FLAG_HORDE_2 = 1160
} wrath_Faction;

typedef enum {
    WRATH_FAR_SIGHT_OPERATION_REMOVE = 0,
    WRATH_FAR_SIGHT_OPERATION_ADD = 1
} wrath_FarSightOperation;

typedef enum {
    WRATH_FRIEND_RESULT_DB_ERROR = 0,
    WRATH_FRIEND_RESULT_LIST_FULL = 1,
    WRATH_FRIEND_RESULT_ONLINE = 2,
    WRATH_FRIEND_RESULT_OFFLINE = 3,
    WRATH_FRIEND_RESULT_NOT_FOUND = 4,
    WRATH_FRIEND_RESULT_REMOVED = 5,
    WRATH_FRIEND_RESULT_ADDED_ONLINE = 6,
    WRATH_FRIEND_RESULT_ADDED_OFFLINE = 7,
    WRATH_FRIEND_RESULT_ALREADY = 8,
    WRATH_FRIEND_RESULT_SELF = 9,
    WRATH_FRIEND_RESULT_ENEMY = 10,
    WRATH_FRIEND_RESULT_IGNORE_FULL = 11,
    WRATH_FRIEND_RESULT_IGNORE_SELF = 12,
    WRATH_FRIEND_RESULT_IGNORE_NOT_FOUND = 13,
    WRATH_FRIEND_RESULT_IGNORE_ALREADY = 14,
    WRATH_FRIEND_RESULT_IGNORE_ADDED = 15,
    WRATH_FRIEND_RESULT_IGNORE_REMOVED = 16
} wrath_FriendResult;

typedef enum {
    WRATH_FRIEND_STATUS_OFFLINE = 0,
    WRATH_FRIEND_STATUS_ONLINE = 1,
    WRATH_FRIEND_STATUS_AFK = 2,
    WRATH_FRIEND_STATUS_UNKNOWN3 = 3,
    WRATH_FRIEND_STATUS_DND = 4
} wrath_FriendStatus;

typedef enum {
    WRATH_GENDER_MALE = 0,
    WRATH_GENDER_FEMALE = 1,
    WRATH_GENDER_NONE = 2
} wrath_Gender;

typedef enum {
    WRATH_GM_TICKET_ESCALATION_STATUS_GMTICKET_ASSIGNEDTOGM_STATUS_NOT_ASSIGNED = 0,
    WRATH_GM_TICKET_ESCALATION_STATUS_GMTICKET_ASSIGNEDTOGM_STATUS_ASSIGNED = 1,
    WRATH_GM_TICKET_ESCALATION_STATUS_GMTICKET_ASSIGNEDTOGM_STATUS_ESCALATED = 2
} wrath_GmTicketEscalationStatus;

typedef enum {
    WRATH_GM_TICKET_QUEUE_STATUS_ENABLED = 1,
    WRATH_GM_TICKET_QUEUE_STATUS_DISABLED = 0
} wrath_GmTicketQueueStatus;

typedef enum {
    WRATH_GM_TICKET_RESPONSE_NOT_EXIST = 0,
    WRATH_GM_TICKET_RESPONSE_ALREADY_EXIST = 1,
    WRATH_GM_TICKET_RESPONSE_CREATE_SUCCESS = 2,
    WRATH_GM_TICKET_RESPONSE_CREATE_ERROR = 3,
    WRATH_GM_TICKET_RESPONSE_UPDATE_SUCCESS = 4,
    WRATH_GM_TICKET_RESPONSE_UPDATE_ERROR = 5,
    WRATH_GM_TICKET_RESPONSE_TICKET_DELETED = 9
} wrath_GmTicketResponse;

typedef enum {
    WRATH_GM_TICKET_STATUS_DB_ERROR = 0,
    WRATH_GM_TICKET_STATUS_HAS_TEXT = 6,
    WRATH_GM_TICKET_STATUS_DEFAULT = 10
} wrath_GmTicketStatus;

typedef enum {
    WRATH_GM_TICKET_STATUS_RESPONSE_UPDATED = 1,
    WRATH_GM_TICKET_STATUS_RESPONSE_CLOSED = 2,
    WRATH_GM_TICKET_STATUS_RESPONSE_SURVEY = 3
} wrath_GmTicketStatusResponse;

typedef enum {
    WRATH_GROUP_LOOT_SETTING_FREE_FOR_ALL = 0,
    WRATH_GROUP_LOOT_SETTING_ROUND_ROBIN = 1,
    WRATH_GROUP_LOOT_SETTING_MASTER_LOOT = 2,
    WRATH_GROUP_LOOT_SETTING_GROUP_LOOT = 3,
    WRATH_GROUP_LOOT_SETTING_NEED_BEFORE_GREED = 4
} wrath_GroupLootSetting;

typedef enum {
    WRATH_GUILD_BANK_CONTENT_RESULT_NOT_PRESENT = 0,
    WRATH_GUILD_BANK_CONTENT_RESULT_PRESENT = 1
} wrath_GuildBankContentResult;

typedef enum {
    WRATH_GUILD_BANK_TAB_RESULT_NOT_PRESENT = 0,
    WRATH_GUILD_BANK_TAB_RESULT_PRESENT = 1
} wrath_GuildBankTabResult;

typedef enum {
    WRATH_GUILD_COMMAND_CREATE = 0,
    WRATH_GUILD_COMMAND_INVITE = 1,
    WRATH_GUILD_COMMAND_QUIT = 2,
    WRATH_GUILD_COMMAND_PROMOTE = 3,
    WRATH_GUILD_COMMAND_FOUNDER = 12,
    WRATH_GUILD_COMMAND_MEMBER = 13,
    WRATH_GUILD_COMMAND_PUBLIC_NOTE_CHANGED = 19,
    WRATH_GUILD_COMMAND_OFFICER_NOTE_CHANGED = 20
} wrath_GuildCommand;

typedef enum {
    WRATH_GUILD_COMMAND_RESULT_PLAYER_NO_MORE_IN_GUILD = 0,
    WRATH_GUILD_COMMAND_RESULT_GUILD_INTERNAL = 1,
    WRATH_GUILD_COMMAND_RESULT_ALREADY_IN_GUILD = 2,
    WRATH_GUILD_COMMAND_RESULT_ALREADY_IN_GUILD_S = 3,
    WRATH_GUILD_COMMAND_RESULT_INVITED_TO_GUILD = 4,
    WRATH_GUILD_COMMAND_RESULT_ALREADY_INVITED_TO_GUILD_S = 5,
    WRATH_GUILD_COMMAND_RESULT_GUILD_NAME_INVALID = 6,
    WRATH_GUILD_COMMAND_RESULT_GUILD_NAME_EXISTS_S = 7,
    WRATH_GUILD_COMMAND_RESULT_GUILD_LEADER_LEAVE_OR_PERMISSIONS = 8,
    WRATH_GUILD_COMMAND_RESULT_GUILD_PLAYER_NOT_IN_GUILD = 9,
    WRATH_GUILD_COMMAND_RESULT_GUILD_PLAYER_NOT_IN_GUILD_S = 10,
    WRATH_GUILD_COMMAND_RESULT_GUILD_PLAYER_NOT_FOUND_S = 11,
    WRATH_GUILD_COMMAND_RESULT_GUILD_NOT_ALLIED = 12,
    WRATH_GUILD_COMMAND_RESULT_GUILD_RANK_TOO_HIGH_S = 13,
    WRATH_GUILD_COMMAND_RESULT_GUILD_RANK_TOO_LOW_S = 14,
    WRATH_GUILD_COMMAND_RESULT_GUILD_RANKS_LOCKED = 17,
    WRATH_GUILD_COMMAND_RESULT_GUILD_RANK_IN_USE = 18,
    WRATH_GUILD_COMMAND_RESULT_GUILD_IGNORING_YOU_S = 19,
    WRATH_GUILD_COMMAND_RESULT_GUILD_UNK1 = 20,
    WRATH_GUILD_COMMAND_RESULT_GUILD_WITHDRAW_LIMIT = 25,
    WRATH_GUILD_COMMAND_RESULT_GUILD_NOT_ENOUGH_MONEY = 26,
    WRATH_GUILD_COMMAND_RESULT_GUILD_BANK_FULL = 28,
    WRATH_GUILD_COMMAND_RESULT_GUILD_ITEM_NOT_FOUND = 29
} wrath_GuildCommandResult;

typedef enum {
    WRATH_GUILD_EMBLEM_RESULT_SUCCESS = 0,
    WRATH_GUILD_EMBLEM_RESULT_INVALID_TABARD_COLORS = 1,
    WRATH_GUILD_EMBLEM_RESULT_NO_GUILD = 2,
    WRATH_GUILD_EMBLEM_RESULT_NOT_GUILD_MASTER = 3,
    WRATH_GUILD_EMBLEM_RESULT_NOT_ENOUGH_MONEY = 4,
    WRATH_GUILD_EMBLEM_RESULT_INVALID_VENDOR = 5
} wrath_GuildEmblemResult;

typedef enum {
    WRATH_GUILD_EVENT_PROMOTION = 0,
    WRATH_GUILD_EVENT_DEMOTION = 1,
    WRATH_GUILD_EVENT_MOTD = 2,
    WRATH_GUILD_EVENT_JOINED = 3,
    WRATH_GUILD_EVENT_LEFT = 4,
    WRATH_GUILD_EVENT_REMOVED = 5,
    WRATH_GUILD_EVENT_LEADER_IS = 6,
    WRATH_GUILD_EVENT_LEADER_CHANGED = 7,
    WRATH_GUILD_EVENT_DISBANDED = 8,
    WRATH_GUILD_EVENT_TABARD_CHANGED = 9,
    WRATH_GUILD_EVENT_UNK1 = 10,
    WRATH_GUILD_EVENT_UNK2 = 11,
    WRATH_GUILD_EVENT_SIGNED_ON = 12,
    WRATH_GUILD_EVENT_SIGNED_OFF = 13,
    WRATH_GUILD_EVENT_GUILD_BANK_BAG_SLOTS_CHANGED = 14,
    WRATH_GUILD_EVENT_BANKTAB_PURCHASED = 15,
    WRATH_GUILD_EVENT_UNK5 = 16,
    WRATH_GUILD_EVENT_GUILD_BANK_UPDATE_MONEY = 17,
    WRATH_GUILD_EVENT_GUILD_BANK_MONEY_WITHDRAWN = 18,
    WRATH_GUILD_EVENT_GUILD_BANK_TEXT_CHANGED = 19
} wrath_GuildEvent;

typedef enum {
    WRATH_GUILD_MEMBER_STATUS_OFFLINE = 0,
    WRATH_GUILD_MEMBER_STATUS_ONLINE = 1
} wrath_GuildMemberStatus;

typedef enum {
    WRATH_INSTANCE_RESET_FAILED_REASON_GENERAL = 0,
    WRATH_INSTANCE_RESET_FAILED_REASON_OFFLINE = 1,
    WRATH_INSTANCE_RESET_FAILED_REASON_ZONING = 2,
    WRATH_INSTANCE_RESET_FAILED_REASON_SILENTLY = 3
} wrath_InstanceResetFailedReason;

typedef enum {
    WRATH_INVENTORY_RESULT_OK = 0,
    WRATH_INVENTORY_RESULT_CANT_EQUIP_LEVEL_I = 1,
    WRATH_INVENTORY_RESULT_CANT_EQUIP_SKILL = 2,
    WRATH_INVENTORY_RESULT_ITEM_DOESNT_GO_TO_SLOT = 3,
    WRATH_INVENTORY_RESULT_BAG_FULL = 4,
    WRATH_INVENTORY_RESULT_NONEMPTY_BAG_OVER_OTHER_BAG = 5,
    WRATH_INVENTORY_RESULT_CANT_TRADE_EQUIP_BAGS = 6,
    WRATH_INVENTORY_RESULT_ONLY_AMMO_CAN_GO_HERE = 7,
    WRATH_INVENTORY_RESULT_NO_REQUIRED_PROFICIENCY = 8,
    WRATH_INVENTORY_RESULT_NO_EQUIPMENT_SLOT_AVAILABLE = 9,
    WRATH_INVENTORY_RESULT_YOU_CAN_NEVER_USE_THAT_ITEM = 10,
    WRATH_INVENTORY_RESULT_YOU_CAN_NEVER_USE_THAT_ITEM2 = 11,
    WRATH_INVENTORY_RESULT_NO_EQUIPMENT_SLOT_AVAILABLE2 = 12,
    WRATH_INVENTORY_RESULT_CANT_EQUIP_WITH_TWOHANDED = 13,
    WRATH_INVENTORY_RESULT_CANT_DUAL_WIELD = 14,
    WRATH_INVENTORY_RESULT_ITEM_DOESNT_GO_INTO_BAG = 15,
    WRATH_INVENTORY_RESULT_ITEM_DOESNT_GO_INTO_BAG2 = 16,
    WRATH_INVENTORY_RESULT_CANT_CARRY_MORE_OF_THIS = 17,
    WRATH_INVENTORY_RESULT_NO_EQUIPMENT_SLOT_AVAILABLE3 = 18,
    WRATH_INVENTORY_RESULT_ITEM_CANT_STACK = 19,
    WRATH_INVENTORY_RESULT_ITEM_CANT_BE_EQUIPPED = 20,
    WRATH_INVENTORY_RESULT_ITEMS_CANT_BE_SWAPPED = 21,
    WRATH_INVENTORY_RESULT_SLOT_IS_EMPTY = 22,
    WRATH_INVENTORY_RESULT_ITEM_NOT_FOUND = 23,
    WRATH_INVENTORY_RESULT_CANT_DROP_SOULBOUND = 24,
    WRATH_INVENTORY_RESULT_OUT_OF_RANGE = 25,
    WRATH_INVENTORY_RESULT_TRIED_TO_SPLIT_MORE_THAN_COUNT = 26,
    WRATH_INVENTORY_RESULT_COULDNT_SPLIT_ITEMS = 27,
    WRATH_INVENTORY_RESULT_MISSING_REAGENT = 28,
    WRATH_INVENTORY_RESULT_NOT_ENOUGH_MONEY = 29,
    WRATH_INVENTORY_RESULT_NOT_A_BAG = 30,
    WRATH_INVENTORY_RESULT_CAN_ONLY_DO_WITH_EMPTY_BAGS = 31,
    WRATH_INVENTORY_RESULT_DONT_OWN_THAT_ITEM = 32,
    WRATH_INVENTORY_RESULT_CAN_EQUIP_ONLY1_QUIVER = 33,
    WRATH_INVENTORY_RESULT_MUST_PURCHASE_THAT_BAG_SLOT = 34,
    WRATH_INVENTORY_RESULT_TOO_FAR_AWAY_FROM_BANK = 35,
    WRATH_INVENTORY_RESULT_ITEM_LOCKED = 36,
    WRATH_INVENTORY_RESULT_YOU_ARE_STUNNED = 37,
    WRATH_INVENTORY_RESULT_YOU_ARE_DEAD = 38,
    WRATH_INVENTORY_RESULT_CANT_DO_RIGHT_NOW = 39,
    WRATH_INVENTORY_RESULT_INT_BAG_ERROR = 40,
    WRATH_INVENTORY_RESULT_CAN_EQUIP_ONLY1_BOLT = 41,
    WRATH_INVENTORY_RESULT_CAN_EQUIP_ONLY1_AMMOPOUCH = 42,
    WRATH_INVENTORY_RESULT_STACKABLE_CANT_BE_WRAPPED = 43,
    WRATH_INVENTORY_RESULT_EQUIPPED_CANT_BE_WRAPPED = 44,
    WRATH_INVENTORY_RESULT_WRAPPED_CANT_BE_WRAPPED = 45,
    WRATH_INVENTORY_RESULT_BOUND_CANT_BE_WRAPPED = 46,
    WRATH_INVENTORY_RESULT_UNIQUE_CANT_BE_WRAPPED = 47,
    WRATH_INVENTORY_RESULT_BAGS_CANT_BE_WRAPPED = 48,
    WRATH_INVENTORY_RESULT_ALREADY_LOOTED = 49,
    WRATH_INVENTORY_RESULT_INVENTORY_FULL = 50,
    WRATH_INVENTORY_RESULT_BANK_FULL = 51,
    WRATH_INVENTORY_RESULT_ITEM_IS_CURRENTLY_SOLD_OUT = 52,
    WRATH_INVENTORY_RESULT_BAG_FULL3 = 53,
    WRATH_INVENTORY_RESULT_ITEM_NOT_FOUND2 = 54,
    WRATH_INVENTORY_RESULT_ITEM_CANT_STACK2 = 55,
    WRATH_INVENTORY_RESULT_BAG_FULL4 = 56,
    WRATH_INVENTORY_RESULT_ITEM_SOLD_OUT = 57,
    WRATH_INVENTORY_RESULT_OBJECT_IS_BUSY = 58,
    WRATH_INVENTORY_RESULT_NONE = 59,
    WRATH_INVENTORY_RESULT_NOT_IN_COMBAT = 60,
    WRATH_INVENTORY_RESULT_NOT_WHILE_DISARMED = 61,
    WRATH_INVENTORY_RESULT_BAG_FULL6 = 62,
    WRATH_INVENTORY_RESULT_CANT_EQUIP_RANK = 63,
    WRATH_INVENTORY_RESULT_CANT_EQUIP_REPUTATION = 64,
    WRATH_INVENTORY_RESULT_TOO_MANY_SPECIAL_BAGS = 65,
    WRATH_INVENTORY_RESULT_LOOT_CANT_LOOT_THAT_NOW = 66,
    WRATH_INVENTORY_RESULT_ITEM_UNIQUE_EQUIPABLE = 67,
    WRATH_INVENTORY_RESULT_VENDOR_MISSING_TURNINS = 68,
    WRATH_INVENTORY_RESULT_NOT_ENOUGH_HONOR_POINTS = 69,
    WRATH_INVENTORY_RESULT_NOT_ENOUGH_ARENA_POINTS = 70,
    WRATH_INVENTORY_RESULT_ITEM_MAX_COUNT_SOCKETED = 71,
    WRATH_INVENTORY_RESULT_MAIL_BOUND_ITEM = 72,
    WRATH_INVENTORY_RESULT_NO_SPLIT_WHILE_PROSPECTING = 73,
    WRATH_INVENTORY_RESULT_ITEM_MAX_COUNT_EQUIPPED_SOCKETED = 75,
    WRATH_INVENTORY_RESULT_ITEM_UNIQUE_EQUIPPABLE_SOCKETED = 76,
    WRATH_INVENTORY_RESULT_TOO_MUCH_GOLD = 77,
    WRATH_INVENTORY_RESULT_NOT_DURING_ARENA_MATCH = 78,
    WRATH_INVENTORY_RESULT_CANNOT_TRADE_THAT = 79,
    WRATH_INVENTORY_RESULT_PERSONAL_ARENA_RATING_TOO_LOW = 80,
    WRATH_INVENTORY_RESULT_EVENT_AUTOEQUIP_BIND_CONFIRM = 81,
    WRATH_INVENTORY_RESULT_ARTEFACTS_ONLY_FOR_OWN_CHARACTERS = 82,
    WRATH_INVENTORY_RESULT_ITEM_MAX_LIMIT_CATEGORY_COUNT_EXCEEDED = 84,
    WRATH_INVENTORY_RESULT_ITEM_MAX_LIMIT_CATEGORY_SOCKETED_EXCEEDED = 85,
    WRATH_INVENTORY_RESULT_SCALING_STAT_ITEM_LEVEL_EXCEEDED = 86,
    WRATH_INVENTORY_RESULT_PURCHASE_LEVEL_TOO_LOW = 87,
    WRATH_INVENTORY_RESULT_CANT_EQUIP_NEED_TALENT = 88,
    WRATH_INVENTORY_RESULT_ITEM_MAX_LIMIT_CATEGORY_EQUIPPED_EXCEEDED = 89
} wrath_InventoryResult;

typedef enum {
    WRATH_INVENTORY_TYPE_NON_EQUIP = 0,
    WRATH_INVENTORY_TYPE_HEAD = 1,
    WRATH_INVENTORY_TYPE_NECK = 2,
    WRATH_INVENTORY_TYPE_SHOULDERS = 3,
    WRATH_INVENTORY_TYPE_BODY = 4,
    WRATH_INVENTORY_TYPE_CHEST = 5,
    WRATH_INVENTORY_TYPE_WAIST = 6,
    WRATH_INVENTORY_TYPE_LEGS = 7,
    WRATH_INVENTORY_TYPE_FEET = 8,
    WRATH_INVENTORY_TYPE_WRISTS = 9,
    WRATH_INVENTORY_TYPE_HANDS = 10,
    WRATH_INVENTORY_TYPE_FINGER = 11,
    WRATH_INVENTORY_TYPE_TRINKET = 12,
    WRATH_INVENTORY_TYPE_WEAPON = 13,
    WRATH_INVENTORY_TYPE_SHIELD = 14,
    WRATH_INVENTORY_TYPE_RANGED = 15,
    WRATH_INVENTORY_TYPE_CLOAK = 16,
    WRATH_INVENTORY_TYPE_TWO_HANDED_WEAPON = 17,
    WRATH_INVENTORY_TYPE_BAG = 18,
    WRATH_INVENTORY_TYPE_TABARD = 19,
    WRATH_INVENTORY_TYPE_ROBE = 20,
    WRATH_INVENTORY_TYPE_WEAPON_MAIN_HAND = 21,
    WRATH_INVENTORY_TYPE_WEAPON_OFF_HAND = 22,
    WRATH_INVENTORY_TYPE_HOLDABLE = 23,
    WRATH_INVENTORY_TYPE_AMMO = 24,
    WRATH_INVENTORY_TYPE_THROWN = 25,
    WRATH_INVENTORY_TYPE_RANGED_RIGHT = 26,
    WRATH_INVENTORY_TYPE_QUIVER = 27,
    WRATH_INVENTORY_TYPE_RELIC = 28
} wrath_InventoryType;

typedef enum {
    WRATH_ITEM_CLASS_CONSUMABLE = 0,
    WRATH_ITEM_CLASS_CONTAINER = 1,
    WRATH_ITEM_CLASS_WEAPON = 2,
    WRATH_ITEM_CLASS_GEM = 3,
    WRATH_ITEM_CLASS_ARMOR = 4,
    WRATH_ITEM_CLASS_REAGENT = 5,
    WRATH_ITEM_CLASS_PROJECTILE = 6,
    WRATH_ITEM_CLASS_TRADE_GOODS = 7,
    WRATH_ITEM_CLASS_GENERIC = 8,
    WRATH_ITEM_CLASS_RECIPE = 9,
    WRATH_ITEM_CLASS_MONEY = 10,
    WRATH_ITEM_CLASS_QUIVER = 11,
    WRATH_ITEM_CLASS_QUEST = 12,
    WRATH_ITEM_CLASS_KEY = 13,
    WRATH_ITEM_CLASS_PERMANENT = 14,
    WRATH_ITEM_CLASS_MISC = 15,
    WRATH_ITEM_CLASS_GLYPH = 16
} wrath_ItemClass;

/* standard C only allows enums to be ints. We need larger than that */
typedef uint64_t wrath_ItemClassAndSubClass;
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_CONSUMABLE 0
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_FOOD_AND_DRINK 21474836480
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_POTION 4294967296
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ELIXIR 8589934592
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_FLASK 12884901888
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_BANDAGE 30064771072
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ITEM_ENHANCEMENT 25769803776
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_SCROLL 17179869184
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_OTHER_CONSUMABLE 34359738368
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_BAG 1
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_SOUL_BAG 4294967297
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_HERB_BAG 8589934593
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ENCHANTING_BAG 12884901889
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ENGINEERING_BAG 17179869185
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GEM_BAG 21474836481
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MINING_BAG 25769803777
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_LEATHERWORKING_BAG 30064771073
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_INSCRIPTION_BAG 34359738369
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_AXE 2
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_AXE 4294967298
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_BOW 8589934594
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GUN 12884901890
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_MACE 17179869186
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_MACE 21474836482
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_POLEARM 25769803778
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_SWORD 30064771074
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_SWORD 34359738370
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_OBSOLETE_WEAPON 38654705666
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_STAFF 42949672962
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_EXOTIC 47244640258
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_EXOTIC 51539607554
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_FIST_WEAPON 55834574850
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_WEAPON 60129542146
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_DAGGER 64424509442
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_THROWN 68719476738
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_SPEAR 73014444034
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_CROSSBOW 77309411330
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_WAND 81604378626
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_FISHING_POLE 85899345922
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GEM_RED 3
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GEM_BLUE 4294967299
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GEM_YELLOW 8589934595
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GEM_PURPLE 12884901891
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GEM_GREEN 17179869187
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GEM_ORANGE 21474836483
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GEM_META 25769803779
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GEM_SIMPLE 30064771075
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GEM_PRISMATIC 34359738371
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_ARMOR 4
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_CLOTH_ARMOR 4294967300
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_LEATHER_ARMOR 8589934596
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MAIL_ARMOR 12884901892
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_PLATE_ARMOR 17179869188
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_BUCKLER_OBSOLETE 21474836484
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_SHIELD 25769803780
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_LIBRAM 30064771076
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_IDOL 34359738372
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_TOTEM 38654705668
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_SIGIL 42949672964
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_REAGENT 5
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_WAND_OBSOLETE 6
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_BOLT_OBSOLETE 4294967302
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ARROW 8589934598
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_BULLET 12884901894
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_THROWN_OBSOLETE 17179869190
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_TRADE_GOOD 7
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ELEMENTAL_TRADE_GOOD 42949672967
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_CLOTH_TRADE_GOOD 21474836487
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_LEATHER_TRADE_GOOD 25769803783
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_METAL_AND_STONE_TRADE_GOOD 30064771079
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MEAT_TRADE_GOOD 34359738375
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_HERB_TRADE_GOOD 38654705671
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ENCHANTING_TRADE_GOOD 51539607559
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_JEWELCRAFTING_TRADE_GOOD 17179869191
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_PART_TRADE_GOOD 4294967303
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_DEVICE_TRADE_GOOD 12884901895
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_EXPLOSIVE_TRADE_GOOD 8589934599
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MATERIAL_TRADE_GOOD 55834574855
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_OTHER_TRADE_GOOD 47244640263
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ARMOR_ENCHANTMENT_TRADE_GOOD 60129542151
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_WEAPON_ENCHANTMENT_TRADE_GOOD 64424509447
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_GENERIC_OBSOLETE 8
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_BOOK 9
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_LEATHERWORKING_RECIPE 4294967305
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_TAILORING_RECIPE 8589934601
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ENGINEERING_RECIPE 12884901897
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_BLACKSMITHING_RECIPE 17179869193
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_COOKING_RECIPE 21474836489
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ALCHEMY_RECIPE 25769803785
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_FIRST_AID_RECIPE 30064771081
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ENCHANTING_RECIPE 34359738377
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_FISHING_RECIPE 38654705673
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_JEWELCRAFTING_RECIPE 42949672969
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_INSCRIPTION_RECIPE 47244640265
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MONEY_OBSOLETE 10
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_QUIVER_OBSOLETE 11
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_QUIVER_OBSOLETE1 4294967307
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_QUIVER 8589934603
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_AMMO_POUCH 12884901899
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_QUEST 12
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_KEY 13
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_LOCKPICK 4294967309
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_PERMANENT_OBSOLETE 14
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_JUNK 15
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_REAGENT 4294967311
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_PET 8589934607
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_HOLIDAY 12884901903
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_OTHER 17179869199
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_MOUNT 21474836495
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_WARRIOR_GLYPH 4294967312
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_PALADIN_GLYPH 8589934608
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_HUNTER_GLYPH 12884901904
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_ROGUE_GLYPH 17179869200
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_PRIEST_GLYPH 21474836496
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_DEATH_KNIGHT_GLYPH 25769803792
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_SHAMAN_GLYPH 30064771088
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_MAGE_GLYPH 34359738384
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_WARLOCK_GLYPH 38654705680
#define WRATH_ITEM_CLASS_AND_SUB_CLASS_DRUID_GLYPH 47244640272

typedef enum {
    WRATH_ITEM_QUALITY_POOR = 0,
    WRATH_ITEM_QUALITY_NORMAL = 1,
    WRATH_ITEM_QUALITY_UNCOMMON = 2,
    WRATH_ITEM_QUALITY_RARE = 3,
    WRATH_ITEM_QUALITY_EPIC = 4,
    WRATH_ITEM_QUALITY_LEGENDARY = 5,
    WRATH_ITEM_QUALITY_ARTIFACT = 6,
    WRATH_ITEM_QUALITY_HEIRLOOM = 7
} wrath_ItemQuality;

typedef enum {
    WRATH_ITEM_REFUND_RESULT_SUCCESS = 0,
    WRATH_ITEM_REFUND_RESULT_FAILURE = 10
} wrath_ItemRefundResult;

typedef enum {
    WRATH_ITEM_SET_NONE = 0,
    WRATH_ITEM_SET_THE_GLADIATOR = 1,
    WRATH_ITEM_SET_DAL_RENDS_ARMS = 41,
    WRATH_ITEM_SET_SPIDERS_KISS = 65,
    WRATH_ITEM_SET_THE_POSTMASTER = 81,
    WRATH_ITEM_SET_CADAVEROUS_GARB = 121,
    WRATH_ITEM_SET_NECROPILE_RAIMENT = 122,
    WRATH_ITEM_SET_BLOODMAIL_REGALIA = 123,
    WRATH_ITEM_SET_DEATHBONE_GUARDIAN = 124,
    WRATH_ITEM_SET_VOLCANIC_ARMOR = 141,
    WRATH_ITEM_SET_STORMSHROUD_ARMOR = 142,
    WRATH_ITEM_SET_DEVILSAUR_ARMOR = 143,
    WRATH_ITEM_SET_IRONFEATHER_ARMOR = 144,
    WRATH_ITEM_SET_DEFIAS_LEATHER = 161,
    WRATH_ITEM_SET_EMBRACE_OF_THE_VIPER = 162,
    WRATH_ITEM_SET_CHAIN_OF_THE_SCARLET_CRUSADE = 163,
    WRATH_ITEM_SET_MAGISTERS_REGALIA = 181,
    WRATH_ITEM_SET_VESTMENTS_OF_THE_DEVOUT = 182,
    WRATH_ITEM_SET_DREADMIST_RAIMENT = 183,
    WRATH_ITEM_SET_SHADOWCRAFT_ARMOR = 184,
    WRATH_ITEM_SET_WILDHEART_RAIMENT = 185,
    WRATH_ITEM_SET_BEASTSTALKER_ARMOR = 186,
    WRATH_ITEM_SET_THE_ELEMENTS = 187,
    WRATH_ITEM_SET_LIGHTFORGE_ARMOR = 188,
    WRATH_ITEM_SET_BATTLEGEAR_OF_VALOR = 189,
    WRATH_ITEM_SET_ARCANIST_REGALIA = 201,
    WRATH_ITEM_SET_VESTMENTS_OF_PROPHECY = 202,
    WRATH_ITEM_SET_FELHEART_RAIMENT = 203,
    WRATH_ITEM_SET_NIGHTSLAYER_ARMOR = 204,
    WRATH_ITEM_SET_CENARION_RAIMENT = 205,
    WRATH_ITEM_SET_GIANTSTALKER_ARMOR = 206,
    WRATH_ITEM_SET_THE_EARTHFURY = 207,
    WRATH_ITEM_SET_LAWBRINGER_ARMOR = 208,
    WRATH_ITEM_SET_BATTLEGEAR_OF_MIGHT = 209,
    WRATH_ITEM_SET_NETHERWIND_REGALIA = 210,
    WRATH_ITEM_SET_VESTMENTS_OF_TRANSCENDENCE = 211,
    WRATH_ITEM_SET_NEMESIS_RAIMENT = 212,
    WRATH_ITEM_SET_BLOODFANG_ARMOR = 213,
    WRATH_ITEM_SET_STORMRAGE_RAIMENT = 214,
    WRATH_ITEM_SET_DRAGONSTALKER_ARMOR = 215,
    WRATH_ITEM_SET_THE_TEN_STORMS = 216,
    WRATH_ITEM_SET_JUDGEMENT_ARMOR = 217,
    WRATH_ITEM_SET_BATTLEGEAR_OF_WRATH = 218,
    WRATH_ITEM_SET_GARB_OF_THERO_SHAN = 221,
    WRATH_ITEM_SET_SHARD_OF_THE_GODS = 241,
    WRATH_ITEM_SET_SPIRIT_OF_ESKHANDAR = 261,
    WRATH_ITEM_SET_CHAMPIONS_BATTLEGEAR = 281,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_BATTLEGEAR = 282,
    WRATH_ITEM_SET_CHAMPIONS_EARTHSHAKER = 301,
    WRATH_ITEM_SET_IMPERIAL_PLATE = 321,
    WRATH_ITEM_SET_CHAMPIONS_REGALIA = 341,
    WRATH_ITEM_SET_CHAMPIONS_RAIMENT = 342,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_REGALIA = 343,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_RAIMENT = 344,
    WRATH_ITEM_SET_CHAMPIONS_THREADS = 345,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_THREADS = 346,
    WRATH_ITEM_SET_CHAMPIONS_VESTMENTS = 347,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_VESTMENTS = 348,
    WRATH_ITEM_SET_CHAMPIONS_PURSUIT = 361,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_PURSUIT = 362,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_SANCTUARY = 381,
    WRATH_ITEM_SET_CHAMPIONS_SANCTUARY = 382,
    WRATH_ITEM_SET_WARLORDS_BATTLEGEAR = 383,
    WRATH_ITEM_SET_FIELD_MARSHALS_BATTLEGEAR = 384,
    WRATH_ITEM_SET_WARLORDS_EARTHSHAKER = 386,
    WRATH_ITEM_SET_WARLORDS_REGALIA = 387,
    WRATH_ITEM_SET_FIELD_MARSHALS_REGALIA = 388,
    WRATH_ITEM_SET_FIELD_MARSHALS_RAIMENT = 389,
    WRATH_ITEM_SET_WARLORDS_RAIMENT = 390,
    WRATH_ITEM_SET_WARLORDS_THREADS = 391,
    WRATH_ITEM_SET_FIELD_MARSHALS_THREADS = 392,
    WRATH_ITEM_SET_WARLORDS_VESTMENTS = 393,
    WRATH_ITEM_SET_FIELD_MARSHALS_VESTMENTS = 394,
    WRATH_ITEM_SET_FIELD_MARSHALS_PURSUIT = 395,
    WRATH_ITEM_SET_WARLORDS_PURSUIT = 396,
    WRATH_ITEM_SET_FIELD_MARSHALS_SANCTUARY = 397,
    WRATH_ITEM_SET_WARLORDS_SANCTUARY = 398,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_AEGIS = 401,
    WRATH_ITEM_SET_FIELD_MARSHALS_AEGIS = 402,
    WRATH_ITEM_SET_BLOODVINE_GARB = 421,
    WRATH_ITEM_SET_PRIMAL_BATSKIN = 441,
    WRATH_ITEM_SET_BLOOD_TIGER_HARNESS = 442,
    WRATH_ITEM_SET_BLOODSOUL_EMBRACE = 443,
    WRATH_ITEM_SET_THE_DARKSOUL = 444,
    WRATH_ITEM_SET_THE_TWIN_BLADES_OF_HAKKARI = 461,
    WRATH_ITEM_SET_ZANZILS_CONCENTRATION = 462,
    WRATH_ITEM_SET_PRIMAL_BLESSING = 463,
    WRATH_ITEM_SET_OVERLORDS_RESOLUTION = 464,
    WRATH_ITEM_SET_PRAYER_OF_THE_PRIMAL = 465,
    WRATH_ITEM_SET_MAJOR_MOJO_INFUSION = 466,
    WRATH_ITEM_SET_THE_HIGHLANDERS_RESOLUTION = 467,
    WRATH_ITEM_SET_THE_HIGHLANDERS_RESOLVE = 468,
    WRATH_ITEM_SET_THE_HIGHLANDERS_DETERMINATION = 469,
    WRATH_ITEM_SET_THE_HIGHLANDERS_FORTITUDE = 470,
    WRATH_ITEM_SET_THE_HIGHLANDERS_PURPOSE = 471,
    WRATH_ITEM_SET_THE_HIGHLANDERS_WILL = 472,
    WRATH_ITEM_SET_THE_HIGHLANDERS_INTENT = 473,
    WRATH_ITEM_SET_VINDICATORS_BATTLEGEAR = 474,
    WRATH_ITEM_SET_FREETHINKERS_ARMOR = 475,
    WRATH_ITEM_SET_AUGURS_REGALIA = 476,
    WRATH_ITEM_SET_PREDATORS_ARMOR = 477,
    WRATH_ITEM_SET_MADCAPS_OUTFIT = 478,
    WRATH_ITEM_SET_HARUSPEXS_GARB = 479,
    WRATH_ITEM_SET_CONFESSORS_RAIMENT = 480,
    WRATH_ITEM_SET_DEMONIACS_THREADS = 481,
    WRATH_ITEM_SET_ILLUSIONISTS_ATTIRE = 482,
    WRATH_ITEM_SET_THE_DEFILERS_DETERMINATION = 483,
    WRATH_ITEM_SET_THE_DEFILERS_FORTITUDE = 484,
    WRATH_ITEM_SET_THE_DEFILERS_INTENT = 485,
    WRATH_ITEM_SET_THE_DEFILERS_PURPOSE = 486,
    WRATH_ITEM_SET_THE_DEFILERS_RESOLUTION = 487,
    WRATH_ITEM_SET_THE_DEFILERS_WILL = 488,
    WRATH_ITEM_SET_BLACK_DRAGON_MAIL = 489,
    WRATH_ITEM_SET_GREEN_DRAGON_MAIL = 490,
    WRATH_ITEM_SET_BLUE_DRAGON_MAIL = 491,
    WRATH_ITEM_SET_TWILIGHT_TRAPPINGS = 492,
    WRATH_ITEM_SET_GENESIS_RAIMENT = 493,
    WRATH_ITEM_SET_SYMBOLS_OF_UNENDING_LIFE = 494,
    WRATH_ITEM_SET_BATTLEGEAR_OF_UNYIELDING_STRENGTH = 495,
    WRATH_ITEM_SET_CONQUERORS_BATTLEGEAR = 496,
    WRATH_ITEM_SET_DEATHDEALERS_EMBRACE = 497,
    WRATH_ITEM_SET_EMBLEMS_OF_VEILED_SHADOWS = 498,
    WRATH_ITEM_SET_DOOMCALLERS_ATTIRE = 499,
    WRATH_ITEM_SET_IMPLEMENTS_OF_UNSPOKEN_NAMES = 500,
    WRATH_ITEM_SET_STORMCALLERS_GARB = 501,
    WRATH_ITEM_SET_GIFT_OF_THE_GATHERING_STORM = 502,
    WRATH_ITEM_SET_ENIGMA_VESTMENTS = 503,
    WRATH_ITEM_SET_TRAPPINGS_OF_VAULTED_SECRETS = 504,
    WRATH_ITEM_SET_AVENGERS_BATTLEGEAR = 505,
    WRATH_ITEM_SET_BATTLEGEAR_OF_ETERNAL_JUSTICE = 506,
    WRATH_ITEM_SET_GARMENTS_OF_THE_ORACLE = 507,
    WRATH_ITEM_SET_FINERY_OF_INFINITE_WISDOM = 508,
    WRATH_ITEM_SET_STRIKERS_GARB = 509,
    WRATH_ITEM_SET_TRAPPINGS_OF_THE_UNSEEN_PATH = 510,
    WRATH_ITEM_SET_BATTLEGEAR_OF_HEROISM = 511,
    WRATH_ITEM_SET_DARKMANTLE_ARMOR = 512,
    WRATH_ITEM_SET_FERALHEART_RAIMENT = 513,
    WRATH_ITEM_SET_VESTMENTS_OF_THE_VIRTUOUS = 514,
    WRATH_ITEM_SET_BEASTMASTER_ARMOR = 515,
    WRATH_ITEM_SET_SOULFORGE_ARMOR = 516,
    WRATH_ITEM_SET_SORCERERS_REGALIA = 517,
    WRATH_ITEM_SET_DEATHMIST_RAIMENT = 518,
    WRATH_ITEM_SET_THE_FIVE_THUNDERS = 519,
    WRATH_ITEM_SET_IRONWEAVE_BATTLESUIT = 520,
    WRATH_ITEM_SET_DREAMWALKER_RAIMENT = 521,
    WRATH_ITEM_SET_CHAMPIONS_GUARD = 522,
    WRATH_ITEM_SET_DREADNAUGHTS_BATTLEGEAR = 523,
    WRATH_ITEM_SET_BONESCYTHE_ARMOR = 524,
    WRATH_ITEM_SET_VESTMENTS_OF_FAITH = 525,
    WRATH_ITEM_SET_FROSTFIRE_REGALIA = 526,
    WRATH_ITEM_SET_THE_EARTHSHATTERER = 527,
    WRATH_ITEM_SET_REDEMPTION_ARMOR = 528,
    WRATH_ITEM_SET_PLAGUEHEART_RAIMENT = 529,
    WRATH_ITEM_SET_CRYPTSTALKER_ARMOR = 530,
    WRATH_ITEM_SET_BATTLEGEAR_OF_UNDEAD_SLAYING = 533,
    WRATH_ITEM_SET_UNDEAD_SLAYERS_ARMOR = 534,
    WRATH_ITEM_SET_GARB_OF_THE_UNDEAD_SLAYER = 535,
    WRATH_ITEM_SET_REGALIA_OF_UNDEAD_CLEANSING = 536,
    WRATH_ITEM_SET_CHAMPIONS_BATTLEARMOR = 537,
    WRATH_ITEM_SET_CHAMPIONS_STORMCALLER = 538,
    WRATH_ITEM_SET_CHAMPIONS_REFUGE = 539,
    WRATH_ITEM_SET_CHAMPIONS_INVESTITURE = 540,
    WRATH_ITEM_SET_CHAMPIONS_DREADGEAR = 541,
    WRATH_ITEM_SET_CHAMPIONS_ARCANUM = 542,
    WRATH_ITEM_SET_CHAMPIONS_PURSUANCE = 543,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_REDOUBT = 544,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_BATTLEARMOR = 545,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_ARCANUM = 546,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_DREADGEAR = 547,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_GUARD = 548,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_INVESTITURE = 549,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_PURSUANCE = 550,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_REFUGE = 551,
    WRATH_ITEM_SET_WRATH_OF_SPELLFIRE = 552,
    WRATH_ITEM_SET_SHADOWS_EMBRACE = 553,
    WRATH_ITEM_SET_PRIMAL_MOONCLOTH = 554,
    WRATH_ITEM_SET_NETHERWEAVE_VESTMENTS = 555,
    WRATH_ITEM_SET_IMBUED_NETHERWEAVE = 556,
    WRATH_ITEM_SET_SOULCLOTH_EMBRACE = 557,
    WRATH_ITEM_SET_ARCANOWEAVE_VESTMENTS = 558,
    WRATH_ITEM_SET_SPELLSTRIKE_INFUSION = 559,
    WRATH_ITEM_SET_FEL_IRON_PLATE = 560,
    WRATH_ITEM_SET_FEL_IRON_CHAIN = 561,
    WRATH_ITEM_SET_ADAMANTITE_BATTLEGEAR = 562,
    WRATH_ITEM_SET_ENCHANTED_ADAMANTITE_ARMOR = 563,
    WRATH_ITEM_SET_FLAME_GUARD = 564,
    WRATH_ITEM_SET_KHORIUM_WARD = 565,
    WRATH_ITEM_SET_BURNING_RAGE = 566,
    WRATH_ITEM_SET_GLADIATORS_BATTLEGEAR = 567,
    WRATH_ITEM_SET_GLADIATORS_DREADGEAR = 568,
    WRATH_ITEM_SET_FAITH_IN_FELSTEEL = 569,
    WRATH_ITEM_SET_THE_UNYIELDING = 570,
    WRATH_ITEM_SET_WHITEMEND_WISDOM = 571,
    WRATH_ITEM_SET_BATTLECAST_GARB = 572,
    WRATH_ITEM_SET_FEL_SKIN = 573,
    WRATH_ITEM_SET_STRENGTH_OF_THE_CLEFTHOOF = 574,
    WRATH_ITEM_SET_FELSTALKER_ARMOR = 575,
    WRATH_ITEM_SET_FURY_OF_THE_NETHER = 576,
    WRATH_ITEM_SET_GLADIATORS_VESTMENTS = 577,
    WRATH_ITEM_SET_GLADIATORS_EARTHSHAKER = 578,
    WRATH_ITEM_SET_GLADIATORS_REGALIA = 579,
    WRATH_ITEM_SET_GLADIATORS_THUNDERFIST = 580,
    WRATH_ITEM_SET_GLADIATORS_RAIMENT = 581,
    WRATH_ITEM_SET_GLADIATORS_AEGIS = 582,
    WRATH_ITEM_SET_GLADIATORS_VINDICATION = 583,
    WRATH_ITEM_SET_GLADIATORS_SANCTUARY = 584,
    WRATH_ITEM_SET_GLADIATORS_WILDHIDE = 585,
    WRATH_ITEM_SET_GLADIATORS_PURSUIT = 586,
    WRATH_ITEM_SET_HIGH_WARLORDS_AEGIS = 587,
    WRATH_ITEM_SET_HIGH_WARLORDS_BATTLEGEAR = 588,
    WRATH_ITEM_SET_GRAND_MARSHALS_AEGIS = 589,
    WRATH_ITEM_SET_GRAND_MARSHALS_BATTLEGEAR = 590,
    WRATH_ITEM_SET_GRAND_MARSHALS_DREADGEAR = 591,
    WRATH_ITEM_SET_HIGH_WARLORDS_DREADGEAR = 592,
    WRATH_ITEM_SET_GRAND_MARSHALS_EARTHSHAKER = 593,
    WRATH_ITEM_SET_HIGH_WARLORDS_EARTHSHAKER = 594,
    WRATH_ITEM_SET_GRAND_MARSHALS_PURSUIT = 595,
    WRATH_ITEM_SET_HIGH_WARLORDS_PURSUIT = 596,
    WRATH_ITEM_SET_GRAND_MARSHALS_RAIMENT = 597,
    WRATH_ITEM_SET_HIGH_WARLORDS_RAIMENT = 598,
    WRATH_ITEM_SET_GRAND_MARSHALS_REGALIA = 599,
    WRATH_ITEM_SET_HIGH_WARLORDS_REGALIA = 600,
    WRATH_ITEM_SET_GRAND_MARSHALS_SANCTUARY = 601,
    WRATH_ITEM_SET_HIGH_WARLORDS_SANCTUARY = 602,
    WRATH_ITEM_SET_GRAND_MARSHALS_THUNDERFIST = 603,
    WRATH_ITEM_SET_HIGH_WARLORDS_THUNDERFIST = 604,
    WRATH_ITEM_SET_GRAND_MARSHALS_VESTMENTS = 605,
    WRATH_ITEM_SET_HIGH_WARLORDS_VESTMENTS = 606,
    WRATH_ITEM_SET_GRAND_MARSHALS_VINDICATION = 607,
    WRATH_ITEM_SET_HIGH_WARLORDS_VINDICATION = 608,
    WRATH_ITEM_SET_GRAND_MARSHALS_WILDHIDE = 609,
    WRATH_ITEM_SET_HIGH_WARLORDS_WILDHIDE = 610,
    WRATH_ITEM_SET_FELSCALE_ARMOR = 611,
    WRATH_ITEM_SET_SCALED_DRAENIC_ARMOR = 612,
    WRATH_ITEM_SET_THICK_DRAENIC_ARMOR = 613,
    WRATH_ITEM_SET_WILD_DRAENISH_ARMOR = 614,
    WRATH_ITEM_SET_GLADIATORS_FELSHROUD = 615,
    WRATH_ITEM_SET_NETHERSCALE_ARMOR = 616,
    WRATH_ITEM_SET_NETHERSTRIKE_ARMOR = 617,
    WRATH_ITEM_SET_WINDHAWK_ARMOR = 618,
    WRATH_ITEM_SET_PRIMAL_INTENT = 619,
    WRATH_ITEM_SET_ASSASSINATION_ARMOR = 620,
    WRATH_ITEM_SET_NETHERBLADE = 621,
    WRATH_ITEM_SET_DEATHMANTLE = 622,
    WRATH_ITEM_SET_RIGHTEOUS_ARMOR = 623,
    WRATH_ITEM_SET_JUSTICAR_RAIMENT = 624,
    WRATH_ITEM_SET_JUSTICAR_ARMOR = 625,
    WRATH_ITEM_SET_JUSTICAR_BATTLEGEAR = 626,
    WRATH_ITEM_SET_CRYSTALFORGE_RAIMENT = 627,
    WRATH_ITEM_SET_CRYSTALFORGE_ARMOR = 628,
    WRATH_ITEM_SET_CRYSTALFORGE_BATTLEGEAR = 629,
    WRATH_ITEM_SET_TIDEFURY_RAIMENT = 630,
    WRATH_ITEM_SET_CYCLONE_RAIMENT = 631,
    WRATH_ITEM_SET_CYCLONE_REGALIA = 632,
    WRATH_ITEM_SET_CYCLONE_HARNESS = 633,
    WRATH_ITEM_SET_CATACLYSM_RAIMENT = 634,
    WRATH_ITEM_SET_CATACLYSM_REGALIA = 635,
    WRATH_ITEM_SET_CATACLYSM_HARNESS = 636,
    WRATH_ITEM_SET_MOONGLADE_RAIMENT = 637,
    WRATH_ITEM_SET_MALORNE_RAIMENT = 638,
    WRATH_ITEM_SET_MALORNE_REGALIA = 639,
    WRATH_ITEM_SET_MALORNE_HARNESS = 640,
    WRATH_ITEM_SET_NORDRASSIL_HARNESS = 641,
    WRATH_ITEM_SET_NORDRASSIL_RAIMENT = 642,
    WRATH_ITEM_SET_NORDRASSIL_REGALIA = 643,
    WRATH_ITEM_SET_OBLIVION_RAIMENT = 644,
    WRATH_ITEM_SET_VOIDHEART_RAIMENT = 645,
    WRATH_ITEM_SET_CORRUPTOR_RAIMENT = 646,
    WRATH_ITEM_SET_INCANTERS_REGALIA = 647,
    WRATH_ITEM_SET_ALDOR_REGALIA = 648,
    WRATH_ITEM_SET_TIRISFAL_REGALIA = 649,
    WRATH_ITEM_SET_BEAST_LORD_ARMOR = 650,
    WRATH_ITEM_SET_DEMON_STALKER_ARMOR = 651,
    WRATH_ITEM_SET_RIFT_STALKER_ARMOR = 652,
    WRATH_ITEM_SET_BOLD_ARMOR = 653,
    WRATH_ITEM_SET_WARBRINGER_ARMOR = 654,
    WRATH_ITEM_SET_WARBRINGER_BATTLEGEAR = 655,
    WRATH_ITEM_SET_DESTROYER_ARMOR = 656,
    WRATH_ITEM_SET_DESTROYER_BATTLEGEAR = 657,
    WRATH_ITEM_SET_MANA_ETCHED_REGALIA = 658,
    WRATH_ITEM_SET_WASTEWALKER_ARMOR = 659,
    WRATH_ITEM_SET_DESOLATION_BATTLEGEAR = 660,
    WRATH_ITEM_SET_DOOMPLATE_BATTLEGEAR = 661,
    WRATH_ITEM_SET_HALLOWED_RAIMENT = 662,
    WRATH_ITEM_SET_INCARNATE_RAIMENT = 663,
    WRATH_ITEM_SET_INCARNATE_REGALIA = 664,
    WRATH_ITEM_SET_AVATAR_RAIMENT = 665,
    WRATH_ITEM_SET_AVATAR_REGALIA = 666,
    WRATH_ITEM_SET_THE_TWIN_STARS = 667,
    WRATH_ITEM_SET_SLAYERS_ARMOR = 668,
    WRATH_ITEM_SET_GRONNSTALKERS_ARMOR = 669,
    WRATH_ITEM_SET_MALEFIC_RAIMENT = 670,
    WRATH_ITEM_SET_TEMPEST_REGALIA = 671,
    WRATH_ITEM_SET_ONSLAUGHT_BATTLEGEAR = 672,
    WRATH_ITEM_SET_ONSLAUGHT_ARMOR = 673,
    WRATH_ITEM_SET_ABSOLUTION_REGALIA = 674,
    WRATH_ITEM_SET_VESTMENTS_OF_ABSOLUTION = 675,
    WRATH_ITEM_SET_THUNDERHEART_HARNESS = 676,
    WRATH_ITEM_SET_THUNDERHEART_REGALIA = 677,
    WRATH_ITEM_SET_THUNDERHEART_RAIMENT = 678,
    WRATH_ITEM_SET_LIGHTBRINGER_ARMOR = 679,
    WRATH_ITEM_SET_LIGHTBRINGER_BATTLEGEAR = 680,
    WRATH_ITEM_SET_LIGHTBRINGER_RAIMENT = 681,
    WRATH_ITEM_SET_SKYSHATTER_HARNESS = 682,
    WRATH_ITEM_SET_SKYSHATTER_RAIMENT = 683,
    WRATH_ITEM_SET_SKYSHATTER_REGALIA = 684,
    WRATH_ITEM_SET_GLADIATORS_REFUGE = 685,
    WRATH_ITEM_SET_GLADIATORS_WARTIDE = 686,
    WRATH_ITEM_SET_GLADIATORS_INVESTITURE = 687,
    WRATH_ITEM_SET_GRAND_MARSHALS_REFUGE = 688,
    WRATH_ITEM_SET_HIGH_WARLORDS_REFUGE = 689,
    WRATH_ITEM_SET_GLADIATORS_REDEMPTION = 690,
    WRATH_ITEM_SET_GRAND_MARSHALS_INVESTITURE = 691,
    WRATH_ITEM_SET_HIGH_WARLORDS_INVESTITURE = 692,
    WRATH_ITEM_SET_GRAND_MARSHALS_REDEMPTION = 693,
    WRATH_ITEM_SET_HIGH_WARLORDS_REDEMPTION = 694,
    WRATH_ITEM_SET_GRAND_MARSHALS_WARTIDE = 695,
    WRATH_ITEM_SET_HIGH_WARLORDS_WARTIDE = 696,
    WRATH_ITEM_SET_CHAMPIONS_REDOUBT = 697,
    WRATH_ITEM_SET_WARLORDS_AEGIS = 698,
    WRATH_ITEM_SET_THE_TWIN_BLADES_OF_AZZINOTH = 699,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_AEGIS = 700,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_BATTLEGEAR = 701,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_DREADGEAR = 702,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_EARTHSHAKER = 703,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_FELSHROUD = 704,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_INVESTITURE = 705,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_PURSUIT = 706,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_RAIMENT = 707,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_REDEMPTION = 708,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_REFUGE = 709,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_REGALIA = 710,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_SANCTUARY = 711,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_THUNDERFIST = 712,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_VESTMENTS = 713,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_VINDICATION = 714,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_WARTIDE = 715,
    WRATH_ITEM_SET_MERCILESS_GLADIATORS_WILDHIDE = 716,
    WRATH_ITEM_SET_FIELD_MARSHALS_EARTHSHAKER = 717,
    WRATH_ITEM_SET_LIEUTENANT_COMMANDERS_EARTHSHAKER = 718,
    WRATH_ITEM_SET_THE_FISTS_OF_FURY = 719,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_REFUGE = 720,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_SANCTUARY = 721,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_WILDHIDE = 722,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_PURSUIT = 723,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_REGALIA = 724,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_REDEMPTION = 725,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_VINDICATION = 726,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_AEGIS = 727,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_INVESTITURE = 728,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_RAIMENT = 729,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_VESTMENTS = 730,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_WARTIDE = 731,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_EARTHSHAKER = 732,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_THUNDERFIST = 733,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_DREADGEAR = 734,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_FELSHROUD = 735,
    WRATH_ITEM_SET_VENGEFUL_GLADIATORS_BATTLEGEAR = 736,
    WRATH_ITEM_SET_LATROS_FLURRY = 737,
    WRATH_ITEM_SET_DREADWEAVE_BATTLEGEAR = 738,
    WRATH_ITEM_SET_MOONCLOTH_BATTLEGEAR = 739,
    WRATH_ITEM_SET_SATIN_BATTLEGEAR = 740,
    WRATH_ITEM_SET_EVOKERS_SILK_BATTLEGEAR = 741,
    WRATH_ITEM_SET_DRAGONHIDE_BATTLEGEAR = 742,
    WRATH_ITEM_SET_WYRMHIDE_BATTLEGEAR = 743,
    WRATH_ITEM_SET_KODOHIDE_BATTLEGEAR = 744,
    WRATH_ITEM_SET_OPPORTUNISTS_BATTLEGEAR = 745,
    WRATH_ITEM_SET_SEERS_MAIL_BATTLEGEAR = 746,
    WRATH_ITEM_SET_SEERS_RINGMAIL_BATTLEGEAR = 747,
    WRATH_ITEM_SET_SEERS_LINKED_BATTLEGEAR = 748,
    WRATH_ITEM_SET_STALKERS_CHAIN_BATTLEGEAR = 749,
    WRATH_ITEM_SET_SAVAGE_PLATE_BATTLEGEAR = 750,
    WRATH_ITEM_SET_CRUSADERS_ORNAMENTED_BATTLEGEAR = 751,
    WRATH_ITEM_SET_CRUSADERS_SCALED_BATTLEGEAR = 752,
    WRATH_ITEM_SET_BOREAN_EMBRACE = 754,
    WRATH_ITEM_SET_NERUBIAN_HIVE = 755,
    WRATH_ITEM_SET_FROSTSCALE_BINDING = 756,
    WRATH_ITEM_SET_ICEBORNE_EMBRACE = 757,
    WRATH_ITEM_SET_RAINES_REVENGE = 759,
    WRATH_ITEM_SET_GLADIATORS_DREADPLATE = 760,
    WRATH_ITEM_SET_WINTER_GARB = 761,
    WRATH_ITEM_SET_BREWFEST_GARB = 762,
    WRATH_ITEM_SET_FROSTWOVEN_POWER = 763,
    WRATH_ITEM_SET_DUSKWEAVER = 764,
    WRATH_ITEM_SET_GLADIATORS_BATTLEGEAR2 = 765,
    WRATH_ITEM_SET_GLADIATORS_VINDICATION2 = 766,
    WRATH_ITEM_SET_GLADIATORS_REDEMPTION2 = 767,
    WRATH_ITEM_SET_GLADIATORS_DESECRATION = 768,
    WRATH_ITEM_SET_GLADIATORS_THUNDERFIST2 = 769,
    WRATH_ITEM_SET_GLADIATORS_EARTHSHAKER2 = 770,
    WRATH_ITEM_SET_GLADIATORS_WARTIDE2 = 771,
    WRATH_ITEM_SET_GLADIATORS_PURSUIT2 = 772,
    WRATH_ITEM_SET_GLADIATORS_REFUGE2 = 773,
    WRATH_ITEM_SET_GLADIATORS_WILDHIDE2 = 774,
    WRATH_ITEM_SET_GLADIATORS_SANCTUARY2 = 775,
    WRATH_ITEM_SET_GLADIATORS_VESTMENTS2 = 776,
    WRATH_ITEM_SET_GLADIATORS_INVESTITURE2 = 777,
    WRATH_ITEM_SET_GLADIATORS_RAIMENT2 = 778,
    WRATH_ITEM_SET_GLADIATORS_REGALIA2 = 779,
    WRATH_ITEM_SET_GLADIATORS_FELSHROUD2 = 780,
    WRATH_ITEM_SET_BLESSED_REGALIA_OF_UNDEAD_CLEANSING = 781,
    WRATH_ITEM_SET_UNDEAD_SLAYERS_BLESSED_ARMOR = 782,
    WRATH_ITEM_SET_BLESSED_GARB_OF_THE_UNDEAD_SLAYER = 783,
    WRATH_ITEM_SET_BLESSED_BATTLEGEAR_OF_UNDEAD_SLAYING = 784,
    WRATH_ITEM_SET_MIDSUMMER_REVELER = 785,
    WRATH_ITEM_SET_DREADNAUGHT_PLATE = 787,
    WRATH_ITEM_SET_DREADNAUGHT_BATTLEGEAR = 788,
    WRATH_ITEM_SET_REDEMPTION_BATTLEGEAR = 789,
    WRATH_ITEM_SET_REDEMPTION_REGALIA = 790,
    WRATH_ITEM_SET_REDEMPTION_PLATE = 791,
    WRATH_ITEM_SET_SCOURGEBORNE_BATTLEGEAR = 792,
    WRATH_ITEM_SET_SCOURGEBORNE_PLATE = 793,
    WRATH_ITEM_SET_CRYPTSTALKER_BATTLEGEAR = 794,
    WRATH_ITEM_SET_EARTHSHATTER_BATTLEGEAR = 795,
    WRATH_ITEM_SET_EARTHSHATTER_GARB = 796,
    WRATH_ITEM_SET_EARTHSHATTER_REGALIA = 797,
    WRATH_ITEM_SET_DREAMWALKER_BATTLEGEAR = 798,
    WRATH_ITEM_SET_DREAMWALKER_REGALIA = 799,
    WRATH_ITEM_SET_DREAMWALKER_GARB = 800,
    WRATH_ITEM_SET_BONESCYTHE_BATTLEGEAR = 801,
    WRATH_ITEM_SET_PLAGUEHEART_GARB = 802,
    WRATH_ITEM_SET_FROSTFIRE_GARB = 803,
    WRATH_ITEM_SET_REGALIA_OF_FAITH = 804,
    WRATH_ITEM_SET_GARB_OF_FAITH = 805,
    WRATH_ITEM_SET_SPRING_TUXEDO = 812,
    WRATH_ITEM_SET_EVISCERATORS_BATTLEGEAR = 813,
    WRATH_ITEM_SET_ORNATE_SARONITE_BATTLEGEAR = 814,
    WRATH_ITEM_SET_OVERCASTER_BATTLEGEAR = 815,
    WRATH_ITEM_SET_SAVAGE_SARONITE_BATTLEGEAR = 816,
    WRATH_ITEM_SET_STORMHIDE_BATTLEGEAR = 817,
    WRATH_ITEM_SET_SWIFTARROW_BATTLEGEAR = 818,
    WRATH_ITEM_SET_FROSTSAVAGE_BATTLEGEAR = 819,
    WRATH_ITEM_SET_AEGIS_BATTLEGEAR = 820,
    WRATH_ITEM_SET_AEGIS_PLATE = 821,
    WRATH_ITEM_SET_AEGIS_REGALIA = 822,
    WRATH_ITEM_SET_WORLDBREAKER_BATTLEGEAR = 823,
    WRATH_ITEM_SET_WORLDBREAKER_GARB = 824,
    WRATH_ITEM_SET_WORLDBREAKER_REGALIA = 825,
    WRATH_ITEM_SET_TERRORBLADE_BATTLEGEAR = 826,
    WRATH_ITEM_SET_NIGHTSONG_BATTLEGEAR = 827,
    WRATH_ITEM_SET_NIGHTSONG_GARB = 828,
    WRATH_ITEM_SET_NIGHTSONG_REGALIA = 829,
    WRATH_ITEM_SET_SIEGEBREAKER_BATTLEGEAR = 830,
    WRATH_ITEM_SET_SIEGEBREAKER_PLATE = 831,
    WRATH_ITEM_SET_SANCTIFICATION_GARB = 832,
    WRATH_ITEM_SET_SANCTIFICATION_REGALIA = 833,
    WRATH_ITEM_SET_DARKRUNED_BATTLEGEAR = 834,
    WRATH_ITEM_SET_DARKRUNED_PLATE = 835,
    WRATH_ITEM_SET_KIRIN_TOR_GARB = 836,
    WRATH_ITEM_SET_DEATHBRINGER_GARB = 837,
    WRATH_ITEM_SET_SCOURGESTALKER_BATTLEGEAR = 838,
    WRATH_ITEM_SET_KHADGARS_REGALIA = 843,
    WRATH_ITEM_SET_SUNSTRIDERS_REGALIA = 844,
    WRATH_ITEM_SET_GUL_DANS_REGALIA = 845,
    WRATH_ITEM_SET_KEL_THUZADS_REGALIA = 846,
    WRATH_ITEM_SET_VELENS_RAIMENT = 847,
    WRATH_ITEM_SET_ZABRAS_RAIMENT = 848,
    WRATH_ITEM_SET_VELENS_REGALIA = 849,
    WRATH_ITEM_SET_ZABRAS_REGALIA = 850,
    WRATH_ITEM_SET_MALFURIONS_GARB = 851,
    WRATH_ITEM_SET_RUNETOTEMS_GARB = 852,
    WRATH_ITEM_SET_MALFURIONS_REGALIA = 853,
    WRATH_ITEM_SET_RUNETOTEMS_REGALIA = 854,
    WRATH_ITEM_SET_MALFURIONS_BATTLEGEAR = 855,
    WRATH_ITEM_SET_RUNETOTEMS_BATTLEGEAR = 856,
    WRATH_ITEM_SET_VANCLEEFS_BATTLEGEAR = 857,
    WRATH_ITEM_SET_GARONAS_BATTLEGEAR = 858,
    WRATH_ITEM_SET_WINDRUNNERS_BATTLEGEAR = 859,
    WRATH_ITEM_SET_WINDRUNNERS_PURSUIT = 860,
    WRATH_ITEM_SET_NOBUNDOS_GARB = 861,
    WRATH_ITEM_SET_THRALLS_GARB = 862,
    WRATH_ITEM_SET_THRALLS_REGALIA = 863,
    WRATH_ITEM_SET_NOBUNDOS_REGALIA = 864,
    WRATH_ITEM_SET_NOBUNDOS_BATTLEGEAR = 865,
    WRATH_ITEM_SET_THRALLS_BATTLEGEAR = 866,
    WRATH_ITEM_SET_WRYNNS_BATTLEGEAR = 867,
    WRATH_ITEM_SET_HELLSCREAMS_BATTLEGEAR = 868,
    WRATH_ITEM_SET_WRYNNS_PLATE = 869,
    WRATH_ITEM_SET_HELLSCREAMS_PLATE = 870,
    WRATH_ITEM_SET_THASSARIANS_BATTLEGEAR = 871,
    WRATH_ITEM_SET_KOLTIRAS_BATTLEGEAR = 872,
    WRATH_ITEM_SET_THASSARIANS_PLATE = 873,
    WRATH_ITEM_SET_KOLTIRAS_PLATE = 874,
    WRATH_ITEM_SET_TURALYONS_GARB = 875,
    WRATH_ITEM_SET_LIADRINS_GARB = 876,
    WRATH_ITEM_SET_TURALYONS_BATTLEGEAR = 877,
    WRATH_ITEM_SET_LIADRINS_BATTLEGEAR = 878,
    WRATH_ITEM_SET_TURALYONS_PLATE = 879,
    WRATH_ITEM_SET_LIADRINS_PLATE = 880,
    WRATH_ITEM_SET_PURIFIED_SHARD_OF_THE_GODS = 881,
    WRATH_ITEM_SET_SHINY_SHARD_OF_THE_GODS = 882,
    WRATH_ITEM_SET_BLOODMAGES_REGALIA = 883,
    WRATH_ITEM_SET_DARK_COVENS_REGALIA = 884,
    WRATH_ITEM_SET_CRIMSON_ACOLYTES_RAIMENT = 885,
    WRATH_ITEM_SET_CRIMSON_ACOLYTES_REGALIA = 886,
    WRATH_ITEM_SET_LASHERWEAVE_GARB = 887,
    WRATH_ITEM_SET_LASHERWEAVE_REGALIA = 888,
    WRATH_ITEM_SET_LASHERWEAVE_BATTLEGEAR = 889,
    WRATH_ITEM_SET_SHADOWBLADES_BATTLEGEAR = 890,
    WRATH_ITEM_SET_AHN_KAHAR_BLOOD_HUNTERS_BATTLEGEAR = 891,
    WRATH_ITEM_SET_FROST_WITCHS_GARB = 892,
    WRATH_ITEM_SET_FROST_WITCHS_REGALIA = 893,
    WRATH_ITEM_SET_FROST_WITCHS_BATTLEGEAR = 894,
    WRATH_ITEM_SET_YMIRJAR_LORDS_BATTLEGEAR = 895,
    WRATH_ITEM_SET_YMIRJAR_LORDS_PLATE = 896,
    WRATH_ITEM_SET_SCOURGELORDS_BATTLEGEAR = 897,
    WRATH_ITEM_SET_SCOURGELORDS_PLATE = 898,
    WRATH_ITEM_SET_LIGHTSWORN_GARB = 899,
    WRATH_ITEM_SET_LIGHTSWORN_BATTLEGEAR = 900,
    WRATH_ITEM_SET_LIGHTSWORN_PLATE = 901
} wrath_ItemSet;

typedef enum {
    WRATH_ITEM_SLOT_HEAD = 0,
    WRATH_ITEM_SLOT_NECK = 1,
    WRATH_ITEM_SLOT_SHOULDERS = 2,
    WRATH_ITEM_SLOT_SHIRT = 3,
    WRATH_ITEM_SLOT_CHEST = 4,
    WRATH_ITEM_SLOT_WAIST = 5,
    WRATH_ITEM_SLOT_LEGS = 6,
    WRATH_ITEM_SLOT_BOOTS = 7,
    WRATH_ITEM_SLOT_WRIST = 8,
    WRATH_ITEM_SLOT_HANDS = 9,
    WRATH_ITEM_SLOT_RING1 = 10,
    WRATH_ITEM_SLOT_RING2 = 11,
    WRATH_ITEM_SLOT_TRINKET1 = 12,
    WRATH_ITEM_SLOT_TRINKET2 = 13,
    WRATH_ITEM_SLOT_BACK = 14,
    WRATH_ITEM_SLOT_MAIN_HAND = 15,
    WRATH_ITEM_SLOT_OFF_HAND = 16,
    WRATH_ITEM_SLOT_RANGED_OR_RELIC = 17,
    WRATH_ITEM_SLOT_TABARD = 18,
    WRATH_ITEM_SLOT_BAG1 = 19,
    WRATH_ITEM_SLOT_BAG2 = 20,
    WRATH_ITEM_SLOT_BAG3 = 21,
    WRATH_ITEM_SLOT_BAG4 = 22,
    WRATH_ITEM_SLOT_INVENTORY_0 = 23,
    WRATH_ITEM_SLOT_INVENTORY_1 = 24,
    WRATH_ITEM_SLOT_INVENTORY_2 = 25,
    WRATH_ITEM_SLOT_INVENTORY_3 = 26,
    WRATH_ITEM_SLOT_INVENTORY_4 = 27,
    WRATH_ITEM_SLOT_INVENTORY_5 = 28,
    WRATH_ITEM_SLOT_INVENTORY_6 = 29,
    WRATH_ITEM_SLOT_INVENTORY_7 = 30,
    WRATH_ITEM_SLOT_INVENTORY_8 = 31,
    WRATH_ITEM_SLOT_INVENTORY_9 = 32,
    WRATH_ITEM_SLOT_INVENTORY_10 = 33,
    WRATH_ITEM_SLOT_INVENTORY_11 = 34,
    WRATH_ITEM_SLOT_INVENTORY_12 = 35,
    WRATH_ITEM_SLOT_INVENTORY_13 = 36,
    WRATH_ITEM_SLOT_INVENTORY_14 = 37,
    WRATH_ITEM_SLOT_INVENTORY_15 = 38,
    WRATH_ITEM_SLOT_BANK_1 = 39,
    WRATH_ITEM_SLOT_BANK_2 = 40,
    WRATH_ITEM_SLOT_BANK_3 = 41,
    WRATH_ITEM_SLOT_BANK_4 = 42,
    WRATH_ITEM_SLOT_BANK_5 = 43,
    WRATH_ITEM_SLOT_BANK_6 = 44,
    WRATH_ITEM_SLOT_BANK_7 = 45,
    WRATH_ITEM_SLOT_BANK_8 = 46,
    WRATH_ITEM_SLOT_BANK_9 = 47,
    WRATH_ITEM_SLOT_BANK_10 = 48,
    WRATH_ITEM_SLOT_BANK_11 = 49,
    WRATH_ITEM_SLOT_BANK_12 = 50,
    WRATH_ITEM_SLOT_BANK_13 = 51,
    WRATH_ITEM_SLOT_BANK_14 = 52,
    WRATH_ITEM_SLOT_BANK_15 = 53,
    WRATH_ITEM_SLOT_BANK_16 = 54,
    WRATH_ITEM_SLOT_BANK_17 = 55,
    WRATH_ITEM_SLOT_BANK_18 = 56,
    WRATH_ITEM_SLOT_BANK_19 = 57,
    WRATH_ITEM_SLOT_BANK_20 = 58,
    WRATH_ITEM_SLOT_BANK_21 = 59,
    WRATH_ITEM_SLOT_BANK_22 = 60,
    WRATH_ITEM_SLOT_BANK_23 = 61,
    WRATH_ITEM_SLOT_BANK_24 = 62,
    WRATH_ITEM_SLOT_BANK_25 = 63,
    WRATH_ITEM_SLOT_BANK_26 = 64,
    WRATH_ITEM_SLOT_BANK_27 = 65,
    WRATH_ITEM_SLOT_BANK_28 = 66,
    WRATH_ITEM_SLOT_BANK_BAG_SLOT_1 = 67,
    WRATH_ITEM_SLOT_BANK_BAG_SLOT_2 = 68,
    WRATH_ITEM_SLOT_BANK_BAG_SLOT_3 = 69,
    WRATH_ITEM_SLOT_BANK_BAG_SLOT_4 = 70,
    WRATH_ITEM_SLOT_BANK_BAG_SLOT_5 = 71,
    WRATH_ITEM_SLOT_BANK_BAG_SLOT_6 = 72,
    WRATH_ITEM_SLOT_BANK_BAG_SLOT_7 = 73,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_1 = 74,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_2 = 75,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_3 = 76,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_4 = 77,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_5 = 78,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_6 = 79,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_7 = 80,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_8 = 81,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_9 = 82,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_10 = 83,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_11 = 84,
    WRATH_ITEM_SLOT_VENDOR_BUYBACK_12 = 85,
    WRATH_ITEM_SLOT_KEYRING_1 = 86,
    WRATH_ITEM_SLOT_KEYRING_2 = 87,
    WRATH_ITEM_SLOT_KEYRING_3 = 88,
    WRATH_ITEM_SLOT_KEYRING_4 = 89,
    WRATH_ITEM_SLOT_KEYRING_5 = 90,
    WRATH_ITEM_SLOT_KEYRING_6 = 91,
    WRATH_ITEM_SLOT_KEYRING_7 = 92,
    WRATH_ITEM_SLOT_KEYRING_8 = 93,
    WRATH_ITEM_SLOT_KEYRING_9 = 94,
    WRATH_ITEM_SLOT_KEYRING_10 = 95,
    WRATH_ITEM_SLOT_KEYRING_11 = 96,
    WRATH_ITEM_SLOT_KEYRING_12 = 97,
    WRATH_ITEM_SLOT_KEYRING_13 = 98,
    WRATH_ITEM_SLOT_KEYRING_14 = 99,
    WRATH_ITEM_SLOT_KEYRING_15 = 100,
    WRATH_ITEM_SLOT_KEYRING_16 = 101,
    WRATH_ITEM_SLOT_KEYRING_17 = 102,
    WRATH_ITEM_SLOT_KEYRING_18 = 103,
    WRATH_ITEM_SLOT_KEYRING_19 = 104,
    WRATH_ITEM_SLOT_KEYRING_20 = 105,
    WRATH_ITEM_SLOT_KEYRING_21 = 106,
    WRATH_ITEM_SLOT_KEYRING_22 = 107,
    WRATH_ITEM_SLOT_KEYRING_23 = 108,
    WRATH_ITEM_SLOT_KEYRING_24 = 109,
    WRATH_ITEM_SLOT_KEYRING_25 = 110,
    WRATH_ITEM_SLOT_KEYRING_26 = 111,
    WRATH_ITEM_SLOT_KEYRING_27 = 112,
    WRATH_ITEM_SLOT_KEYRING_28 = 113,
    WRATH_ITEM_SLOT_KEYRING_29 = 114,
    WRATH_ITEM_SLOT_KEYRING_30 = 115,
    WRATH_ITEM_SLOT_KEYRING_31 = 116,
    WRATH_ITEM_SLOT_KEYRING_32 = 117,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_1 = 118,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_2 = 119,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_3 = 120,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_4 = 121,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_5 = 122,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_6 = 123,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_7 = 124,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_8 = 125,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_9 = 126,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_10 = 127,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_11 = 128,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_12 = 129,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_13 = 130,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_14 = 131,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_15 = 132,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_16 = 133,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_17 = 134,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_18 = 135,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_19 = 136,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_20 = 137,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_21 = 138,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_22 = 139,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_23 = 140,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_24 = 141,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_25 = 142,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_26 = 143,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_27 = 144,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_28 = 145,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_29 = 146,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_30 = 147,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_31 = 148,
    WRATH_ITEM_SLOT_CURRENCY_TOKEN_32 = 149
} wrath_ItemSlot;

typedef enum {
    WRATH_ITEM_TEXT_QUERY_HAS_TEXT = 0,
    WRATH_ITEM_TEXT_QUERY_NO_TEXT = 1
} wrath_ItemTextQuery;

typedef enum {
    WRATH_JOIN_ARENA_TYPE_TWO_VS_TWO = 0,
    WRATH_JOIN_ARENA_TYPE_THREE_VS_THREE = 1,
    WRATH_JOIN_ARENA_TYPE_FIVE_VS_FIVE = 2
} wrath_JoinArenaType;

typedef enum {
    WRATH_LANGUAGE_UNIVERSAL = 0,
    WRATH_LANGUAGE_ORCISH = 1,
    WRATH_LANGUAGE_DARNASSIAN = 2,
    WRATH_LANGUAGE_TAURAHE = 3,
    WRATH_LANGUAGE_DWARVISH = 6,
    WRATH_LANGUAGE_COMMON = 7,
    WRATH_LANGUAGE_DEMONIC = 8,
    WRATH_LANGUAGE_TITAN = 9,
    WRATH_LANGUAGE_THALASSIAN = 10,
    WRATH_LANGUAGE_DRACONIC = 11,
    WRATH_LANGUAGE_KALIMAG = 12,
    WRATH_LANGUAGE_GNOMISH = 13,
    WRATH_LANGUAGE_TROLL = 14,
    WRATH_LANGUAGE_GUTTERSPEAK = 33,
    WRATH_LANGUAGE_DRAENEI = 35,
    WRATH_LANGUAGE_ZOMBIE = 36,
    WRATH_LANGUAGE_GNOMISH_BINARY = 37,
    WRATH_LANGUAGE_GOBLIN_BINARY = 38
} wrath_Language;

typedef enum {
    WRATH_LFG_JOIN_STATUS_NOT_JOINED = 0,
    WRATH_LFG_JOIN_STATUS_JOINED = 1
} wrath_LfgJoinStatus;

typedef enum {
    WRATH_LFG_LIST_UPDATE_TYPE_PARTIAL = 0,
    WRATH_LFG_LIST_UPDATE_TYPE_FULL = 1
} wrath_LfgListUpdateType;

typedef enum {
    WRATH_LFG_TELEPORT_ERROR_PLAYER_DEAD = 1,
    WRATH_LFG_TELEPORT_ERROR_FALLING = 2,
    WRATH_LFG_TELEPORT_ERROR_IN_VEHICLE = 3,
    WRATH_LFG_TELEPORT_ERROR_FATIGUE = 4,
    WRATH_LFG_TELEPORT_ERROR_INVALID_LOCATION = 6,
    WRATH_LFG_TELEPORT_ERROR_COMBAT = 8
} wrath_LfgTeleportError;

typedef enum {
    WRATH_LFG_TELEPORT_LOCATION_IN = 0,
    WRATH_LFG_TELEPORT_LOCATION_OUT = 1
} wrath_LfgTeleportLocation;

typedef enum {
    WRATH_LFG_TYPE_NONE = 0,
    WRATH_LFG_TYPE_DUNGEON = 1,
    WRATH_LFG_TYPE_RAID = 2,
    WRATH_LFG_TYPE_ZONE = 4,
    WRATH_LFG_TYPE_HEROIC = 5,
    WRATH_LFG_TYPE_RANDOM = 6
} wrath_LfgType;

typedef enum {
    WRATH_LFG_UPDATE_TYPE_DEFAULT = 0,
    WRATH_LFG_UPDATE_TYPE_LEADER_LEAVE = 1,
    WRATH_LFG_UPDATE_TYPE_ROLECHECK_ABORTED = 4,
    WRATH_LFG_UPDATE_TYPE_JOIN = 5,
    WRATH_LFG_UPDATE_TYPE_ROLECHECK_FAILED = 6,
    WRATH_LFG_UPDATE_TYPE_LEAVE = 7,
    WRATH_LFG_UPDATE_TYPE_PROPOSAL_FAILED = 8,
    WRATH_LFG_UPDATE_TYPE_PROPOSAL_DECLINED = 9,
    WRATH_LFG_UPDATE_TYPE_GROUP_FOUND = 10,
    WRATH_LFG_UPDATE_TYPE_ADDED_TO_QUEUE = 12,
    WRATH_LFG_UPDATE_TYPE_PROPOSAL_BEGIN = 13,
    WRATH_LFG_UPDATE_TYPE_STATUS = 14,
    WRATH_LFG_UPDATE_TYPE_GROUP_MEMBER_OFFLINE = 15,
    WRATH_LFG_UPDATE_TYPE_GROUP_DISBAND = 16
} wrath_LfgUpdateType;

typedef enum {
    WRATH_LOG_FORMAT_DEFAULT = 0,
    WRATH_LOG_FORMAT_DEBUG = 1
} wrath_LogFormat;

typedef enum {
    WRATH_LOGOUT_RESULT_SUCCESS = 0,
    WRATH_LOGOUT_RESULT_FAILURE_IN_COMBAT = 1,
    WRATH_LOGOUT_RESULT_FAILURE_FROZEN_BY_GM = 2,
    WRATH_LOGOUT_RESULT_FAILURE_JUMPING_OR_FALLING = 3
} wrath_LogoutResult;

typedef enum {
    WRATH_LOGOUT_SPEED_DELAYED = 0,
    WRATH_LOGOUT_SPEED_INSTANT = 1
} wrath_LogoutSpeed;

typedef enum {
    WRATH_LOOT_METHOD_ERROR = 0,
    WRATH_LOOT_METHOD_CORPSE = 1,
    WRATH_LOOT_METHOD_PICKPOCKETING = 2,
    WRATH_LOOT_METHOD_FISHING = 3,
    WRATH_LOOT_METHOD_DISENCHANTING = 4,
    WRATH_LOOT_METHOD_SKINNING = 6,
    WRATH_LOOT_METHOD_FISHINGHOLE = 20,
    WRATH_LOOT_METHOD_FISHING_FAIL = 21,
    WRATH_LOOT_METHOD_INSIGNIA = 22
} wrath_LootMethod;

typedef enum {
    WRATH_LOOT_METHOD_ERROR_DIDNT_KILL = 0,
    WRATH_LOOT_METHOD_ERROR_TOO_FAR = 4,
    WRATH_LOOT_METHOD_ERROR_BAD_FACING = 5,
    WRATH_LOOT_METHOD_ERROR_LOCKED = 6,
    WRATH_LOOT_METHOD_ERROR_NOTSTANDING = 8,
    WRATH_LOOT_METHOD_ERROR_STUNNED = 9,
    WRATH_LOOT_METHOD_ERROR_PLAYER_NOT_FOUND = 10,
    WRATH_LOOT_METHOD_ERROR_PLAY_TIME_EXCEEDED = 11,
    WRATH_LOOT_METHOD_ERROR_MASTER_INV_FULL = 12,
    WRATH_LOOT_METHOD_ERROR_MASTER_UNIQUE_ITEM = 13,
    WRATH_LOOT_METHOD_ERROR_MASTER_OTHER = 14,
    WRATH_LOOT_METHOD_ERROR_ALREADY_PICKPOCKETED = 15,
    WRATH_LOOT_METHOD_ERROR_NOT_WHILE_SHAPESHIFTED = 16
} wrath_LootMethodError;

typedef enum {
    WRATH_LOOT_SLOT_TYPE_TYPE_ALLOW_LOOT = 0,
    WRATH_LOOT_SLOT_TYPE_TYPE_ROLL_ONGOING = 1,
    WRATH_LOOT_SLOT_TYPE_TYPE_MASTER = 2,
    WRATH_LOOT_SLOT_TYPE_TYPE_LOCKED = 3,
    WRATH_LOOT_SLOT_TYPE_TYPE_OWNER = 4
} wrath_LootSlotType;

typedef enum {
    WRATH_MAIL_ACTION_SEND = 0,
    WRATH_MAIL_ACTION_MONEY_TAKEN = 1,
    WRATH_MAIL_ACTION_ITEM_TAKEN = 2,
    WRATH_MAIL_ACTION_RETURNED_TO_SENDER = 3,
    WRATH_MAIL_ACTION_DELETED = 4,
    WRATH_MAIL_ACTION_MADE_PERMANENT = 5
} wrath_MailAction;

typedef enum {
    WRATH_MAIL_MESSAGE_TYPE_NORMAL = 0,
    WRATH_MAIL_MESSAGE_TYPE_AUCTION = 2,
    WRATH_MAIL_MESSAGE_TYPE_CREATURE = 3,
    WRATH_MAIL_MESSAGE_TYPE_GAMEOBJECT = 4,
    WRATH_MAIL_MESSAGE_TYPE_ITEM = 5
} wrath_MailMessageType;

typedef enum {
    WRATH_MAIL_RESULT_OK = 0,
    WRATH_MAIL_RESULT_ERR_EQUIP_ERROR = 1,
    WRATH_MAIL_RESULT_ERR_CANNOT_SEND_TO_SELF = 2,
    WRATH_MAIL_RESULT_ERR_NOT_ENOUGH_MONEY = 3,
    WRATH_MAIL_RESULT_ERR_RECIPIENT_NOT_FOUND = 4,
    WRATH_MAIL_RESULT_ERR_NOT_YOUR_TEAM = 5,
    WRATH_MAIL_RESULT_ERR_INTERNAL_ERROR = 6,
    WRATH_MAIL_RESULT_ERR_DISABLED_FOR_TRIAL_ACC = 14,
    WRATH_MAIL_RESULT_ERR_RECIPIENT_CAP_REACHED = 15,
    WRATH_MAIL_RESULT_ERR_CANT_SEND_WRAPPED_COD = 16,
    WRATH_MAIL_RESULT_ERR_MAIL_AND_CHAT_SUSPENDED = 17,
    WRATH_MAIL_RESULT_ERR_TOO_MANY_ATTACHMENTS = 18,
    WRATH_MAIL_RESULT_ERR_MAIL_ATTACHMENT_INVALID = 19,
    WRATH_MAIL_RESULT_ERR_ITEM_HAS_EXPIRED = 21
} wrath_MailResult;

typedef enum {
    WRATH_MAIL_RESULT_TWO_OK = 0,
    WRATH_MAIL_RESULT_TWO_ERR_EQUIP_ERROR = 1,
    WRATH_MAIL_RESULT_TWO_ERR_CANNOT_SEND_TO_SELF = 2,
    WRATH_MAIL_RESULT_TWO_ERR_NOT_ENOUGH_MONEY = 3,
    WRATH_MAIL_RESULT_TWO_ERR_RECIPIENT_NOT_FOUND = 4,
    WRATH_MAIL_RESULT_TWO_ERR_NOT_YOUR_TEAM = 5,
    WRATH_MAIL_RESULT_TWO_ERR_INTERNAL_ERROR = 6,
    WRATH_MAIL_RESULT_TWO_ERR_DISABLED_FOR_TRIAL_ACC = 14,
    WRATH_MAIL_RESULT_TWO_ERR_RECIPIENT_CAP_REACHED = 15,
    WRATH_MAIL_RESULT_TWO_ERR_CANT_SEND_WRAPPED_COD = 16,
    WRATH_MAIL_RESULT_TWO_ERR_MAIL_AND_CHAT_SUSPENDED = 17,
    WRATH_MAIL_RESULT_TWO_ERR_TOO_MANY_ATTACHMENTS = 18,
    WRATH_MAIL_RESULT_TWO_ERR_MAIL_ATTACHMENT_INVALID = 19,
    WRATH_MAIL_RESULT_TWO_ERR_ITEM_HAS_EXPIRED = 21
} wrath_MailResultTwo;

typedef enum {
    WRATH_MAIL_TYPE_NORMAL = 0,
    WRATH_MAIL_TYPE_AUCTION = 2,
    WRATH_MAIL_TYPE_CREATURE = 3,
    WRATH_MAIL_TYPE_GAMEOBJECT = 4,
    WRATH_MAIL_TYPE_ITEM = 5
} wrath_MailType;

typedef enum {
    WRATH_MAP_EASTERN_KINGDOMS = 0,
    WRATH_MAP_KALIMDOR = 1,
    WRATH_MAP_TESTING = 13,
    WRATH_MAP_SCOTT_TEST = 25,
    WRATH_MAP_ALTERAC_VALLEY = 30,
    WRATH_MAP_SHADOWFANG_KEEP = 33,
    WRATH_MAP_STORMWIND_STOCKADE = 34,
    WRATH_MAP_STORMWIND_PRISON = 35,
    WRATH_MAP_DEADMINES = 36,
    WRATH_MAP_AZSHARA_CRATER = 37,
    WRATH_MAP_COLLINS_TEST = 42,
    WRATH_MAP_WAILING_CAVERNS = 43,
    WRATH_MAP_MONASTERY_UNUSED = 44,
    WRATH_MAP_RAZORFEN_KRAUL = 47,
    WRATH_MAP_BLACKFATHOM_DEEPS = 48,
    WRATH_MAP_ULDAMAN = 70,
    WRATH_MAP_GNOMEREGAN = 90,
    WRATH_MAP_SUNKEN_TEMPLE = 109,
    WRATH_MAP_RAZORFEN_DOWNS = 129,
    WRATH_MAP_EMERALD_DREAM = 169,
    WRATH_MAP_SCARLET_MONASTERY = 189,
    WRATH_MAP_ZUL_FARRAK = 209,
    WRATH_MAP_BLACKROCK_SPIRE = 229,
    WRATH_MAP_BLACKROCK_DEPTHS = 230,
    WRATH_MAP_ONYXIAS_LAIR = 249,
    WRATH_MAP_OPENING_OF_THE_DARK_PORTAL = 269,
    WRATH_MAP_SCHOLOMANCE = 289,
    WRATH_MAP_ZUL_GURUB = 309,
    WRATH_MAP_STRATHOLME = 329,
    WRATH_MAP_MARAUDON = 349,
    WRATH_MAP_DEEPRUN_TRAM = 369,
    WRATH_MAP_RAGEFIRE_CHASM = 389,
    WRATH_MAP_MOLTEN_CORE = 409,
    WRATH_MAP_DIRE_MAUL = 429,
    WRATH_MAP_ALLIANCE_PVP_BARRACKS = 449,
    WRATH_MAP_HORDE_PVP_BARRACKS = 450,
    WRATH_MAP_DEVELOPMENT_LAND = 451,
    WRATH_MAP_BLACKWING_LAIR = 469,
    WRATH_MAP_WARSONG_GULCH = 489,
    WRATH_MAP_RUINS_OF_AHN_QIRAJ = 509,
    WRATH_MAP_ARATHI_BASIN = 529,
    WRATH_MAP_OUTLAND = 530,
    WRATH_MAP_AHN_QIRAJ_TEMPLE = 531,
    WRATH_MAP_KARAZHAN = 532,
    WRATH_MAP_NAXXRAMAS = 533,
    WRATH_MAP_THE_BATTLE_FOR_MOUNT_HYJAL = 534,
    WRATH_MAP_HELLFIRE_CITADEL_THE_SHATTERED_HALLS = 540,
    WRATH_MAP_HELLFIRE_CITADEL_THE_BLOOD_FURNACE = 542,
    WRATH_MAP_HELLFIRE_CITADEL_RAMPARTS = 543,
    WRATH_MAP_MAGTHERIDONS_LAIR = 544,
    WRATH_MAP_COILFANG_THE_STEAMVAULT = 545,
    WRATH_MAP_COILFANG_THE_UNDERBOG = 546,
    WRATH_MAP_COILFANG_THE_SLAVE_PENS = 547,
    WRATH_MAP_COILFANG_SERPENTSHRINE_CAVERN = 548,
    WRATH_MAP_TEMPEST_KEEP = 550,
    WRATH_MAP_TEMPEST_KEEP_THE_ARCATRAZ = 552,
    WRATH_MAP_TEMPEST_KEEP_THE_BOTANICA = 553,
    WRATH_MAP_TEMPEST_KEEP_THE_MECHANAR = 554,
    WRATH_MAP_AUCHINDOUN_SHADOW_LABYRINTH = 555,
    WRATH_MAP_AUCHINDOUN_SETHEKK_HALLS = 556,
    WRATH_MAP_AUCHINDOUN_MANA_TOMBS = 557,
    WRATH_MAP_AUCHINDOUN_AUCHENAI_CRYPTS = 558,
    WRATH_MAP_NAGRAND_ARENA = 559,
    WRATH_MAP_THE_ESCAPE_FROM_DURNHOLDE = 560,
    WRATH_MAP_BLADES_EDGE_ARENA = 562,
    WRATH_MAP_BLACK_TEMPLE = 564,
    WRATH_MAP_GRUULS_LAIR = 565,
    WRATH_MAP_EYE_OF_THE_STORM = 566,
    WRATH_MAP_ZUL_AMAN = 568,
    WRATH_MAP_NORTHREND = 571,
    WRATH_MAP_RUINS_OF_LORDAERON = 572,
    WRATH_MAP_EXTERIORTEST = 573,
    WRATH_MAP_UTGARDE_KEEP = 574,
    WRATH_MAP_UTGARDE_PINNACLE = 575,
    WRATH_MAP_THE_NEXUS = 576,
    WRATH_MAP_THE_OCULUS = 578,
    WRATH_MAP_THE_SUNWELL = 580,
    WRATH_MAP_TRANSPORT_RUT_THERAN_TO_AUBERDINE = 582,
    WRATH_MAP_TRANSPORT_MENETHIL_TO_THERAMORE = 584,
    WRATH_MAP_MAGISTERS_TERRACE = 585,
    WRATH_MAP_TRANSPORT_EXODAR_TO_AUBERDINE = 586,
    WRATH_MAP_TRANSPORT_FEATHERMOON_FERRY = 587,
    WRATH_MAP_TRANSPORT_MENETHIL_TO_AUBERDINE = 588,
    WRATH_MAP_TRANSPORT_ORGRIMMAR_TO_GROM_GOL = 589,
    WRATH_MAP_TRANSPORT_GROM_GOL_TO_UNDERCITY = 590,
    WRATH_MAP_TRANSPORT_UNDERCITY_TO_ORGRIMMAR = 591,
    WRATH_MAP_TRANSPORT_BOREAN_TUNDRA_TEST = 592,
    WRATH_MAP_TRANSPORT_BOOTY_BAY_TO_RATCHET = 593,
    WRATH_MAP_TRANSPORT_HOWLING_FJORD_SISTER_MERCY_QUEST = 594,
    WRATH_MAP_THE_CULLING_OF_STRATHOLME = 595,
    WRATH_MAP_TRANSPORT_NAGLFAR = 596,
    WRATH_MAP_CRAIG_TEST = 597,
    WRATH_MAP_SUNWELL_FIX_UNUSED = 598,
    WRATH_MAP_HALLS_OF_STONE = 599,
    WRATH_MAP_DRAK_THARON_KEEP = 600,
    WRATH_MAP_AZJOL_NERUB = 601,
    WRATH_MAP_HALLS_OF_LIGHTNING = 602,
    WRATH_MAP_ULDUAR = 603,
    WRATH_MAP_GUNDRAK = 604,
    WRATH_MAP_DEVELOPMENT_LAND_NON_WEIGHTED_TEXTURES = 605,
    WRATH_MAP_QA_AND_DVD = 606,
    WRATH_MAP_STRAND_OF_THE_ANCIENTS = 607,
    WRATH_MAP_VIOLET_HOLD = 608,
    WRATH_MAP_EBON_HOLD = 609,
    WRATH_MAP_TRANSPORT_TIRISFAL_TO_VENGEANCE_LANDING = 610,
    WRATH_MAP_TRANSPORT_MENETHIL_TO_VALGARDE = 612,
    WRATH_MAP_TRANSPORT_ORGRIMMAR_TO_WARSONG_HOLD = 613,
    WRATH_MAP_TRANSPORT_STORMWIND_TO_VALIANCE_KEEP = 614,
    WRATH_MAP_THE_OBSIDIAN_SANCTUM = 615,
    WRATH_MAP_THE_EYE_OF_ETERNITY = 616,
    WRATH_MAP_DALARAN_SEWERS = 617,
    WRATH_MAP_THE_RING_OF_VALOR = 618,
    WRATH_MAP_AHN_KAHET_THE_OLD_KINGDOM = 619,
    WRATH_MAP_TRANSPORT_MOA_KI_TO_UNU_PE = 620,
    WRATH_MAP_TRANSPORT_MOA_KI_TO_KAMAGUA = 621,
    WRATH_MAP_TRANSPORT_ORGRIMS_HAMMER = 622,
    WRATH_MAP_TRANSPORT_THE_SKYBREAKER = 623,
    WRATH_MAP_VAULT_OF_ARCHAVON = 624,
    WRATH_MAP_ISLE_OF_CONQUEST = 628,
    WRATH_MAP_ICECROWN_CITADEL = 631,
    WRATH_MAP_THE_FORGE_OF_SOULS = 632,
    WRATH_MAP_TRANSPORT_ALLIANCE_AIRSHIP_BG = 641,
    WRATH_MAP_TRANSPORT_HORDEAIRSHIPBG = 642,
    WRATH_MAP_TRANSPORT_ORGRIMMAR_TO_THUNDER_BLUFF = 647,
    WRATH_MAP_TRIAL_OF_THE_CRUSADER = 649,
    WRATH_MAP_TRIAL_OF_THE_CHAMPION = 650,
    WRATH_MAP_PIT_OF_SARON = 658,
    WRATH_MAP_HALLS_OF_REFLECTION = 668,
    WRATH_MAP_TRANSPORT_THE_SKYBREAKER_ICECROWN_CITADEL_RAID = 672,
    WRATH_MAP_TRANSPORT_ORGRIMS_HAMMER_ICECROWN_CITADEL_RAID = 673,
    WRATH_MAP_TRANSPORT_THE_SKYBREAKER_IC_DUNGEON = 712,
    WRATH_MAP_TRANSPORT_ORGRIMS_HAMMER_IC_DUNGEON = 713,
    WRATH_MAP_TRANSPORT_THE_MIGHTY_WIND_ICECROWN_CITADEL_RAID = 718,
    WRATH_MAP_STORMWIND = 723,
    WRATH_MAP_THE_RUBY_SANCTUM = 724
} wrath_Map;

typedef enum {
    WRATH_MINI_MOVE_OPCODE_SMSG_FORCE_MOVE_ROOT = 232,
    WRATH_MINI_MOVE_OPCODE_SMSG_MOVE_FEATHER_FALL = 242,
    WRATH_MINI_MOVE_OPCODE_SMSG_MOVE_WATER_WALK = 222,
    WRATH_MINI_MOVE_OPCODE_SMSG_MOVE_SET_HOVER = 244
} wrath_MiniMoveOpcode;

typedef enum {
    WRATH_MONSTER_MOVE_TYPE_NORMAL = 0,
    WRATH_MONSTER_MOVE_TYPE_STOP = 1,
    WRATH_MONSTER_MOVE_TYPE_FACING_SPOT = 2,
    WRATH_MONSTER_MOVE_TYPE_FACING_TARGET = 3,
    WRATH_MONSTER_MOVE_TYPE_FACING_ANGLE = 4
} wrath_MonsterMoveType;

typedef enum {
    WRATH_MOUNT_RESULT_INVALID_MOUNTEE = 0,
    WRATH_MOUNT_RESULT_TOO_FAR_AWAY = 1,
    WRATH_MOUNT_RESULT_ALREADY_MOUNTED = 2,
    WRATH_MOUNT_RESULT_NOT_MOUNTABLE = 3,
    WRATH_MOUNT_RESULT_NOT_YOUR_PET = 4,
    WRATH_MOUNT_RESULT_OTHER = 5,
    WRATH_MOUNT_RESULT_LOOTING = 6,
    WRATH_MOUNT_RESULT_RACE_CANT_MOUNT = 7,
    WRATH_MOUNT_RESULT_SHAPESHIFTED = 8,
    WRATH_MOUNT_RESULT_FORCED_DISMOUNT = 9,
    WRATH_MOUNT_RESULT_OK = 10
} wrath_MountResult;

typedef enum {
    WRATH_NEW_ITEM_CHAT_ALERT_DO_NOT_SHOW = 0,
    WRATH_NEW_ITEM_CHAT_ALERT_SHOW = 1
} wrath_NewItemChatAlert;

typedef enum {
    WRATH_NEW_ITEM_CREATION_TYPE_RECEIVED = 0,
    WRATH_NEW_ITEM_CREATION_TYPE_CREATED = 1
} wrath_NewItemCreationType;

typedef enum {
    WRATH_NEW_ITEM_SOURCE_LOOTED = 0,
    WRATH_NEW_ITEM_SOURCE_FROM_NPC = 1
} wrath_NewItemSource;

typedef enum {
    WRATH_OBJECT_TYPE_OBJECT = 0,
    WRATH_OBJECT_TYPE_ITEM = 1,
    WRATH_OBJECT_TYPE_CONTAINER = 2,
    WRATH_OBJECT_TYPE_UNIT = 3,
    WRATH_OBJECT_TYPE_PLAYER = 4,
    WRATH_OBJECT_TYPE_GAME_OBJECT = 5,
    WRATH_OBJECT_TYPE_DYNAMIC_OBJECT = 6,
    WRATH_OBJECT_TYPE_CORPSE = 7
} wrath_ObjectType;

typedef enum {
    WRATH_PAGE_TEXT_MATERIAL_NONE = 0,
    WRATH_PAGE_TEXT_MATERIAL_PARCHMENT = 1,
    WRATH_PAGE_TEXT_MATERIAL_STONE = 2,
    WRATH_PAGE_TEXT_MATERIAL_MARBLE = 3,
    WRATH_PAGE_TEXT_MATERIAL_SILVER = 4,
    WRATH_PAGE_TEXT_MATERIAL_BRONZE = 5,
    WRATH_PAGE_TEXT_MATERIAL_VALENTINE = 6,
    WRATH_PAGE_TEXT_MATERIAL_ILLIDAN = 7
} wrath_PageTextMaterial;

typedef enum {
    WRATH_PARTY_OPERATION_INVITE = 0,
    WRATH_PARTY_OPERATION_LEAVE = 2
} wrath_PartyOperation;

typedef enum {
    WRATH_PARTY_RESULT_SUCCESS = 0,
    WRATH_PARTY_RESULT_BAD_PLAYER_NAME = 1,
    WRATH_PARTY_RESULT_TARGET_NOT_IN_GROUP = 2,
    WRATH_PARTY_RESULT_TARGET_NOT_IN_INSTANCE = 3,
    WRATH_PARTY_RESULT_GROUP_FULL = 4,
    WRATH_PARTY_RESULT_ALREADY_IN_GROUP = 5,
    WRATH_PARTY_RESULT_NOT_IN_GROUP = 6,
    WRATH_PARTY_RESULT_NOT_LEADER = 7,
    WRATH_PARTY_RESULT_PLAYER_WRONG_FACTION = 8,
    WRATH_PARTY_RESULT_IGNORING_YOU = 9,
    WRATH_PARTY_RESULT_LFG_PENDING = 12,
    WRATH_PARTY_RESULT_INVITE_RESTRICTED = 13
} wrath_PartyResult;

typedef enum {
    WRATH_PARTY_ROLE_MAIN_TANK = 0,
    WRATH_PARTY_ROLE_ASSISTANT = 1
} wrath_PartyRole;

typedef enum {
    WRATH_PET_COMMAND_STATE_STAY = 0,
    WRATH_PET_COMMAND_STATE_FOLLOW = 1,
    WRATH_PET_COMMAND_STATE_ATTACK = 2,
    WRATH_PET_COMMAND_STATE_DISMISS = 3
} wrath_PetCommandState;

typedef enum {
    WRATH_PET_ENABLED_ENABLED = 8,
    WRATH_PET_ENABLED_DISABLED = 0
} wrath_PetEnabled;

typedef enum {
    WRATH_PET_FEEDBACK_PET_DEAD = 1,
    WRATH_PET_FEEDBACK_NOTHING_TO_ATTACK = 2,
    WRATH_PET_FEEDBACK_CANT_ATTACK_TARGET = 3,
    WRATH_PET_FEEDBACK_NO_PATH_TO = 4
} wrath_PetFeedback;

typedef enum {
    WRATH_PET_NAME_INVALID_REASON_INVALID = 1,
    WRATH_PET_NAME_INVALID_REASON_NO_NAME = 2,
    WRATH_PET_NAME_INVALID_REASON_TOO_SHORT = 3,
    WRATH_PET_NAME_INVALID_REASON_TOO_LONG = 4,
    WRATH_PET_NAME_INVALID_REASON_MIXED_LANGUAGES = 6,
    WRATH_PET_NAME_INVALID_REASON_PROFANE = 7,
    WRATH_PET_NAME_INVALID_REASON_RESERVED = 8,
    WRATH_PET_NAME_INVALID_REASON_THREE_CONSECUTIVE = 11,
    WRATH_PET_NAME_INVALID_REASON_INVALID_SPACE = 12,
    WRATH_PET_NAME_INVALID_REASON_CONSECUTIVE_SPACES = 13,
    WRATH_PET_NAME_INVALID_REASON_RUSSIAN_CONSECUTIVE_SILENT_CHARACTERS = 14,
    WRATH_PET_NAME_INVALID_REASON_RUSSIAN_SILENT_CHARACTER_AT_BEGINNING_OR_END = 15,
    WRATH_PET_NAME_INVALID_REASON_DECLENSION_DOESNT_MATCH_BASE_NAME = 16
} wrath_PetNameInvalidReason;

typedef enum {
    WRATH_PET_QUERY_DISABLED_NAMES_PRESENT = 1,
    WRATH_PET_QUERY_DISABLED_NAMES_NOT_PRESENT = 0
} wrath_PetQueryDisabledNames;

typedef enum {
    WRATH_PET_REACT_STATE_PASSIVE = 0,
    WRATH_PET_REACT_STATE_DEFENSIVE = 1,
    WRATH_PET_REACT_STATE_AGGRESSIVE = 2
} wrath_PetReactState;

typedef enum {
    WRATH_PET_TALK_REASON_SPECIAL_SPELL = 0,
    WRATH_PET_TALK_REASON_ATTACK = 1
} wrath_PetTalkReason;

typedef enum {
    WRATH_PET_TAME_FAILURE_REASON_INVALID_CREATURE = 1,
    WRATH_PET_TAME_FAILURE_REASON_TOO_MANY = 2,
    WRATH_PET_TAME_FAILURE_REASON_CREATURE_ALREADY_OWNED = 3,
    WRATH_PET_TAME_FAILURE_REASON_NOT_TAMEABLE = 4,
    WRATH_PET_TAME_FAILURE_REASON_ANOTHER_SUMMON_ACTIVE = 5,
    WRATH_PET_TAME_FAILURE_REASON_UNITS_CANT_TAME = 6,
    WRATH_PET_TAME_FAILURE_REASON_NO_PET_AVAILABLE = 7,
    WRATH_PET_TAME_FAILURE_REASON_INTERNA_LERROR = 8,
    WRATH_PET_TAME_FAILURE_REASON_TOO_HIGH_LEVEL = 9,
    WRATH_PET_TAME_FAILURE_REASON_DEAD = 10,
    WRATH_PET_TAME_FAILURE_REASON_NOT_DEAD = 11,
    WRATH_PET_TAME_FAILURE_REASON_CANT_CONTROL_EXOTIC = 12,
    WRATH_PET_TAME_FAILURE_REASON_UNKNOWN_ERROR = 13
} wrath_PetTameFailureReason;

typedef enum {
    WRATH_PETITION_RESULT_OK = 0,
    WRATH_PETITION_RESULT_ALREADY_SIGNED = 1,
    WRATH_PETITION_RESULT_ALREADY_IN_GUILD = 2,
    WRATH_PETITION_RESULT_CANT_SIGN_OWN = 3,
    WRATH_PETITION_RESULT_NOT_SERVER = 4
} wrath_PetitionResult;

typedef enum {
    WRATH_PLAYER_CHAT_TAG_NONE = 0,
    WRATH_PLAYER_CHAT_TAG_AFK = 1,
    WRATH_PLAYER_CHAT_TAG_DND = 2,
    WRATH_PLAYER_CHAT_TAG_GM = 3,
    WRATH_PLAYER_CHAT_TAG_COMMENTATOR = 4,
    WRATH_PLAYER_CHAT_TAG_DEVELOPER = 5
} wrath_PlayerChatTag;

typedef enum {
    WRATH_PLAYER_INVITE_STATUS_ALREADY_IN_GROUP = 0,
    WRATH_PLAYER_INVITE_STATUS_NOT_IN_GROUP = 1
} wrath_PlayerInviteStatus;

typedef enum {
    WRATH_POWER_MANA = 0,
    WRATH_POWER_RAGE = 1,
    WRATH_POWER_FOCUS = 2,
    WRATH_POWER_ENERGY = 3,
    WRATH_POWER_HAPPINESS = 4,
    WRATH_POWER_RUNE = 5,
    WRATH_POWER_RUNIC_POWER = 6,
    WRATH_POWER_HEALTH = 254
} wrath_Power;

typedef enum {
    WRATH_PVP_RANK_NO_RANK = 0,
    WRATH_PVP_RANK_PARIAH = 1,
    WRATH_PVP_RANK_OUTLAW = 2,
    WRATH_PVP_RANK_EXILED = 3,
    WRATH_PVP_RANK_DISHONORED = 4,
    WRATH_PVP_RANK_RANK1 = 5,
    WRATH_PVP_RANK_RANK2 = 6,
    WRATH_PVP_RANK_RANK3 = 7,
    WRATH_PVP_RANK_RANK4 = 8,
    WRATH_PVP_RANK_RANK5 = 9,
    WRATH_PVP_RANK_RANK6 = 10,
    WRATH_PVP_RANK_RANK7 = 11,
    WRATH_PVP_RANK_RANK8 = 12,
    WRATH_PVP_RANK_RANK9 = 13,
    WRATH_PVP_RANK_RANK10 = 14,
    WRATH_PVP_RANK_RANK11 = 15,
    WRATH_PVP_RANK_RANK12 = 16,
    WRATH_PVP_RANK_RANK13 = 17,
    WRATH_PVP_RANK_RANK14 = 18,
    WRATH_PVP_RANK_FACTION_LEADER = 19
} wrath_PvpRank;

typedef enum {
    WRATH_QUEST_COMPLETABLE_NOT_COMPLETABLE = 0,
    WRATH_QUEST_COMPLETABLE_COMPLETEABLE = 3
} wrath_QuestCompletable;

typedef enum {
    WRATH_QUEST_FAILED_REASON_DONT_HAVE_REQ = 0,
    WRATH_QUEST_FAILED_REASON_QUEST_FAILED_LOW_LEVEL = 1,
    WRATH_QUEST_FAILED_REASON_QUEST_FAILED_WRONG_RACE = 6,
    WRATH_QUEST_FAILED_REASON_QUEST_ALREADY_DONE = 7,
    WRATH_QUEST_FAILED_REASON_QUEST_ONLY_ONE_TIMED = 12,
    WRATH_QUEST_FAILED_REASON_QUEST_ALREADY_ON = 13,
    WRATH_QUEST_FAILED_REASON_QUEST_FAILED_EXPANSION = 16,
    WRATH_QUEST_FAILED_REASON_QUEST_ALREADY_ON2 = 18,
    WRATH_QUEST_FAILED_REASON_QUEST_FAILED_MISSING_ITEMS = 21,
    WRATH_QUEST_FAILED_REASON_QUEST_FAILED_NOT_ENOUGH_MONEY = 23,
    WRATH_QUEST_FAILED_REASON_DAILY_QUESTS_REMAINING = 26,
    WRATH_QUEST_FAILED_REASON_QUEST_FAILED_CAIS = 27,
    WRATH_QUEST_FAILED_REASON_DAILY_QUEST_COMPLETED_TODAY = 29
} wrath_QuestFailedReason;

typedef enum {
    WRATH_QUEST_GIVER_STATUS_NONE = 0,
    WRATH_QUEST_GIVER_STATUS_UNAVAILABLE = 1,
    WRATH_QUEST_GIVER_STATUS_LOW_LEVEL_AVAILABLE = 2,
    WRATH_QUEST_GIVER_STATUS_LOW_LEVEL_REWARD_REP = 3,
    WRATH_QUEST_GIVER_STATUS_LOW_LEVEL_AVAILABLE_REP = 4,
    WRATH_QUEST_GIVER_STATUS_INCOMPLETE = 5,
    WRATH_QUEST_GIVER_STATUS_REWARD_REP = 6,
    WRATH_QUEST_GIVER_STATUS_AVAILABLE_REP = 7,
    WRATH_QUEST_GIVER_STATUS_AVAILABLE = 8,
    WRATH_QUEST_GIVER_STATUS_REWARD2 = 9,
    WRATH_QUEST_GIVER_STATUS_REWARD = 10
} wrath_QuestGiverStatus;

typedef enum {
    WRATH_QUEST_PARTY_MESSAGE_MSG_SHARING_QUEST = 0,
    WRATH_QUEST_PARTY_MESSAGE_MSG_CANT_TAKE_QUEST = 1,
    WRATH_QUEST_PARTY_MESSAGE_MSG_ACCEPT_QUEST = 2,
    WRATH_QUEST_PARTY_MESSAGE_MSG_REFUSE_QUEST = 3,
    WRATH_QUEST_PARTY_MESSAGE_MSG_BUSY = 4,
    WRATH_QUEST_PARTY_MESSAGE_MSG_LOG_FULL = 5,
    WRATH_QUEST_PARTY_MESSAGE_MSG_HAVE_QUEST = 6,
    WRATH_QUEST_PARTY_MESSAGE_MSG_FINISH_QUEST = 7,
    WRATH_QUEST_PARTY_MESSAGE_MSG_CANT_BE_SHARED_TODAY = 8,
    WRATH_QUEST_PARTY_MESSAGE_MSG_SHARING_TIMER_EXPIRED = 9,
    WRATH_QUEST_PARTY_MESSAGE_MSG_NOT_IN_PARTY = 10,
    WRATH_QUEST_PARTY_MESSAGE_MSG_DIFFERENT_SERVER_DAILY = 11
} wrath_QuestPartyMessage;

typedef enum {
    WRATH_RACE_HUMAN = 1,
    WRATH_RACE_ORC = 2,
    WRATH_RACE_DWARF = 3,
    WRATH_RACE_NIGHT_ELF = 4,
    WRATH_RACE_UNDEAD = 5,
    WRATH_RACE_TAUREN = 6,
    WRATH_RACE_GNOME = 7,
    WRATH_RACE_TROLL = 8,
    WRATH_RACE_GOBLIN = 9,
    WRATH_RACE_BLOOD_ELF = 10,
    WRATH_RACE_DRAENEI = 11,
    WRATH_RACE_FEL_ORC = 12,
    WRATH_RACE_NAGA = 13,
    WRATH_RACE_BROKEN = 14,
    WRATH_RACE_SKELETON = 15,
    WRATH_RACE_VRYKUL = 16,
    WRATH_RACE_TUSKARR = 17,
    WRATH_RACE_FOREST_TROLL = 18,
    WRATH_RACE_TAUNKA = 19,
    WRATH_RACE_NORTHREND_SKELETON = 20,
    WRATH_RACE_ICE_TROLL = 21
} wrath_Race;

typedef enum {
    WRATH_RAID_DIFFICULTY_TEN_MAN_NORMAL = 0,
    WRATH_RAID_DIFFICULTY_TWENTY_FIVE_MAN_NORMAL = 1,
    WRATH_RAID_DIFFICULTY_TEN_MAN_HEROIC = 2,
    WRATH_RAID_DIFFICULTY_TWENTY_FIVE_MAN_HEROIC = 3
} wrath_RaidDifficulty;

typedef enum {
    WRATH_RAID_GROUP_ERROR_REQUIRED = 1,
    WRATH_RAID_GROUP_ERROR_FULL = 2
} wrath_RaidGroupError;

typedef enum {
    WRATH_RAID_INSTANCE_MESSAGE_WARNING_HOURS = 1,
    WRATH_RAID_INSTANCE_MESSAGE_WARNING_MIN = 2,
    WRATH_RAID_INSTANCE_MESSAGE_WARNING_MIN_SOON = 3,
    WRATH_RAID_INSTANCE_MESSAGE_WELCOME = 4,
    WRATH_RAID_INSTANCE_MESSAGE_EXPIRED = 5
} wrath_RaidInstanceMessage;

typedef enum {
    WRATH_RAID_TARGET_INDEX_UNKNOWN0 = 0,
    WRATH_RAID_TARGET_INDEX_UNKNOWN1 = 1,
    WRATH_RAID_TARGET_INDEX_UNKNOWN2 = 2,
    WRATH_RAID_TARGET_INDEX_UNKNOWN3 = 3,
    WRATH_RAID_TARGET_INDEX_UNKNOWN4 = 4,
    WRATH_RAID_TARGET_INDEX_UNKNOWN5 = 5,
    WRATH_RAID_TARGET_INDEX_UNKNOWN6 = 6,
    WRATH_RAID_TARGET_INDEX_UNKNOWN7 = 7,
    WRATH_RAID_TARGET_INDEX_UNKNOWN8 = 8,
    WRATH_RAID_TARGET_INDEX_REQUEST_ICONS = 255
} wrath_RaidTargetIndex;

typedef enum {
    WRATH_RAID_TARGET_UPDATE_TYPE_PARTIAL = 0,
    WRATH_RAID_TARGET_UPDATE_TYPE_FULL = 1
} wrath_RaidTargetUpdateType;

typedef enum {
    WRATH_RANDOM_BG_NOT_RANDOM = 0,
    WRATH_RANDOM_BG_RANDOM = 1
} wrath_RandomBg;

typedef enum {
    WRATH_REALM_SPLIT_STATE_NORMAL = 0,
    WRATH_REALM_SPLIT_STATE_SPLIT = 1,
    WRATH_REALM_SPLIT_STATE_SPLIT_PENDING = 2
} wrath_RealmSplitState;

typedef enum {
    WRATH_REFER_A_FRIEND_ERROR_NONE = 0,
    WRATH_REFER_A_FRIEND_ERROR_NOT_REFERRED_BY = 1,
    WRATH_REFER_A_FRIEND_ERROR_TARGET_TOO_HIGH = 2,
    WRATH_REFER_A_FRIEND_ERROR_INSUFFICIENT_GRANTABLE_LEVELS = 3,
    WRATH_REFER_A_FRIEND_ERROR_TOO_FAR = 4,
    WRATH_REFER_A_FRIEND_ERROR_DIFFERENT_FACTION = 5,
    WRATH_REFER_A_FRIEND_ERROR_NOT_NOW = 6,
    WRATH_REFER_A_FRIEND_ERROR_GRANT_LEVEL_MAX = 7,
    WRATH_REFER_A_FRIEND_ERROR_NO_TARGET = 8,
    WRATH_REFER_A_FRIEND_ERROR_NOT_IN_GROUP = 9,
    WRATH_REFER_A_FRIEND_ERROR_SUMMON_LEVEL_MAX = 10,
    WRATH_REFER_A_FRIEND_ERROR_SUMMON_COOLDOWN = 11,
    WRATH_REFER_A_FRIEND_ERROR_INSUFFICIENT_EXPANSION_LEVEL = 12,
    WRATH_REFER_A_FRIEND_ERROR_SUMMON_OFFLINE = 13
} wrath_ReferAFriendError;

typedef enum {
    WRATH_ROLL_VOTE_PASS = 0,
    WRATH_ROLL_VOTE_NEED = 1,
    WRATH_ROLL_VOTE_GREED = 2,
    WRATH_ROLL_VOTE_DISENCHANT = 3
} wrath_RollVote;

typedef enum {
    WRATH_SELL_ITEM_RESULT_ERR_CANT_FIND_ITEM = 1,
    WRATH_SELL_ITEM_RESULT_ERR_CANT_SELL_ITEM = 2,
    WRATH_SELL_ITEM_RESULT_ERR_CANT_FIND_VENDOR = 3,
    WRATH_SELL_ITEM_RESULT_ERR_YOU_DONT_OWN_THAT_ITEM = 4,
    WRATH_SELL_ITEM_RESULT_ERR_UNK = 5,
    WRATH_SELL_ITEM_RESULT_ERR_ONLY_EMPTY_BAG = 6,
    WRATH_SELL_ITEM_RESULT_ERR_CANT_SELL_TO_THIS_MERCHANT = 7,
    WRATH_SELL_ITEM_RESULT_ERR_MUST_REPAIR_ITEM_DURABILITY_TO_USE = 8,
    WRATH_SELL_ITEM_RESULT_INTERNAL_BAG_ERROR = 9
} wrath_SellItemResult;

typedef enum {
    WRATH_SERVER_MESSAGE_TYPE_SHUTDOWN_TIME = 1,
    WRATH_SERVER_MESSAGE_TYPE_RESTART_TIME = 2,
    WRATH_SERVER_MESSAGE_TYPE_CUSTOM = 3,
    WRATH_SERVER_MESSAGE_TYPE_SHUTDOWN_CANCELLED = 4,
    WRATH_SERVER_MESSAGE_TYPE_RESTART_CANCELLED = 5,
    WRATH_SERVER_MESSAGE_TYPE_BATTLEGROUND_SHUTDOWN = 6,
    WRATH_SERVER_MESSAGE_TYPE_BATTLEGROUND_RESTART = 7,
    WRATH_SERVER_MESSAGE_TYPE_INSTANCE_SHUTDOWN = 8,
    WRATH_SERVER_MESSAGE_TYPE_INSTANCE_RESTART = 9
} wrath_ServerMessageType;

typedef enum {
    WRATH_SHEATH_STATE_UNARMED = 0,
    WRATH_SHEATH_STATE_MELEE = 1,
    WRATH_SHEATH_STATE_RANGED = 2
} wrath_SheathState;

typedef enum {
    WRATH_SHEATHE_TYPE_NONE = 0,
    WRATH_SHEATHE_TYPE_MAIN_HAND = 1,
    WRATH_SHEATHE_TYPE_OFF_HAND = 2,
    WRATH_SHEATHE_TYPE_LARGE_WEAPON_LEFT = 3,
    WRATH_SHEATHE_TYPE_LARGE_WEAPON_RIGHT = 4,
    WRATH_SHEATHE_TYPE_HIP_WEAPON_LEFT = 5,
    WRATH_SHEATHE_TYPE_HIP_WEAPON_RIGHT = 6,
    WRATH_SHEATHE_TYPE_SHIELD = 7
} wrath_SheatheType;

typedef enum {
    WRATH_SIZE_CLASS_NONE = -1,
    WRATH_SIZE_CLASS_SMALL = 0,
    WRATH_SIZE_CLASS_MEDIUM = 1,
    WRATH_SIZE_CLASS_LARGE = 2,
    WRATH_SIZE_CLASS_GIANT = 3,
    WRATH_SIZE_CLASS_COLOSSAL = 4
} wrath_SizeClass;

typedef enum {
    WRATH_SKILL_NONE = 0,
    WRATH_SKILL_FROST = 6,
    WRATH_SKILL_FIRE = 8,
    WRATH_SKILL_ARMS = 26,
    WRATH_SKILL_COMBAT = 38,
    WRATH_SKILL_SUBTLETY = 39,
    WRATH_SKILL_SWORDS = 43,
    WRATH_SKILL_AXES = 44,
    WRATH_SKILL_BOWS = 45,
    WRATH_SKILL_GUNS = 46,
    WRATH_SKILL_BEAST_MASTERY = 50,
    WRATH_SKILL_SURVIVAL = 51,
    WRATH_SKILL_MACES = 54,
    WRATH_SKILL_TWO_HANDED_SWORDS = 55,
    WRATH_SKILL_HOLY = 56,
    WRATH_SKILL_SHADOW = 78,
    WRATH_SKILL_DEFENSE = 95,
    WRATH_SKILL_LANGUAGE_COMMON = 98,
    WRATH_SKILL_RACIAL_DWARVEN = 101,
    WRATH_SKILL_LANGUAGE_ORCISH = 109,
    WRATH_SKILL_LANGUAGE_DWARVEN = 111,
    WRATH_SKILL_LANGUAGE_DARNASSIAN = 113,
    WRATH_SKILL_LANGUAGE_TAURAHE = 115,
    WRATH_SKILL_DUAL_WIELD = 118,
    WRATH_SKILL_RACIAL_TAUREN = 124,
    WRATH_SKILL_ORC_RACIAL = 125,
    WRATH_SKILL_RACIAL_NIGHT_ELF = 126,
    WRATH_SKILL_FIRST_AID = 129,
    WRATH_SKILL_FERAL_COMBAT = 134,
    WRATH_SKILL_STAVES = 136,
    WRATH_SKILL_LANGUAGE_THALASSIAN = 137,
    WRATH_SKILL_LANGUAGE_DRACONIC = 138,
    WRATH_SKILL_LANGUAGE_DEMON_TONGUE = 139,
    WRATH_SKILL_LANGUAGE_TITAN = 140,
    WRATH_SKILL_LANGUAGE_OLD_TONGUE = 141,
    WRATH_SKILL_SURVIVAL2 = 142,
    WRATH_SKILL_RIDING_HORSE = 148,
    WRATH_SKILL_RIDING_WOLF = 149,
    WRATH_SKILL_RIDING_TIGER = 150,
    WRATH_SKILL_RIDING_RAM = 152,
    WRATH_SKILL_SWIMMING = 155,
    WRATH_SKILL_TWO_HANDED_MACES = 160,
    WRATH_SKILL_UNARMED = 162,
    WRATH_SKILL_MARKSMANSHIP = 163,
    WRATH_SKILL_BLACKSMITHING = 164,
    WRATH_SKILL_LEATHERWORKING = 165,
    WRATH_SKILL_ALCHEMY = 171,
    WRATH_SKILL_TWO_HANDED_AXES = 172,
    WRATH_SKILL_DAGGERS = 173,
    WRATH_SKILL_THROWN = 176,
    WRATH_SKILL_HERBALISM = 182,
    WRATH_SKILL_GENERIC_DND = 183,
    WRATH_SKILL_RETRIBUTION = 184,
    WRATH_SKILL_COOKING = 185,
    WRATH_SKILL_MINING = 186,
    WRATH_SKILL_PET_IMP = 188,
    WRATH_SKILL_PET_FELHUNTER = 189,
    WRATH_SKILL_TAILORING = 197,
    WRATH_SKILL_ENGINEERING = 202,
    WRATH_SKILL_PET_SPIDER = 203,
    WRATH_SKILL_PET_VOIDWALKER = 204,
    WRATH_SKILL_PET_SUCCUBUS = 205,
    WRATH_SKILL_PET_INFERNAL = 206,
    WRATH_SKILL_PET_DOOMGUARD = 207,
    WRATH_SKILL_PET_WOLF = 208,
    WRATH_SKILL_PET_CAT = 209,
    WRATH_SKILL_PET_BEAR = 210,
    WRATH_SKILL_PET_BOAR = 211,
    WRATH_SKILL_PET_CROCILISK = 212,
    WRATH_SKILL_PET_CARRION_BIRD = 213,
    WRATH_SKILL_PET_CRAB = 214,
    WRATH_SKILL_PET_GORILLA = 215,
    WRATH_SKILL_PET_RAPTOR = 217,
    WRATH_SKILL_PET_TALLSTRIDER = 218,
    WRATH_SKILL_RACIAL_UNDED = 220,
    WRATH_SKILL_CROSSBOWS = 226,
    WRATH_SKILL_WANDS = 228,
    WRATH_SKILL_POLEARMS = 229,
    WRATH_SKILL_PET_SCORPID = 236,
    WRATH_SKILL_ARCANE = 237,
    WRATH_SKILL_PET_TURTLE = 251,
    WRATH_SKILL_ASSASSINATION = 253,
    WRATH_SKILL_FURY = 256,
    WRATH_SKILL_PROTECTION = 257,
    WRATH_SKILL_PROTECTION2 = 267,
    WRATH_SKILL_PET_TALENTS = 270,
    WRATH_SKILL_PLATE_MAIL = 293,
    WRATH_SKILL_LANGUAGE_GNOMISH = 313,
    WRATH_SKILL_LANGUAGE_TROLL = 315,
    WRATH_SKILL_ENCHANTING = 333,
    WRATH_SKILL_DEMONOLOGY = 354,
    WRATH_SKILL_AFFLICTION = 355,
    WRATH_SKILL_FISHING = 356,
    WRATH_SKILL_ENHANCEMENT = 373,
    WRATH_SKILL_RESTORATION = 374,
    WRATH_SKILL_ELEMENTAL_COMBAT = 375,
    WRATH_SKILL_SKINNING = 393,
    WRATH_SKILL_MAIL = 413,
    WRATH_SKILL_LEATHER = 414,
    WRATH_SKILL_CLOTH = 415,
    WRATH_SKILL_SHIELD = 433,
    WRATH_SKILL_FIST_WEAPONS = 473,
    WRATH_SKILL_RIDING_RAPTOR = 533,
    WRATH_SKILL_RIDING_MECHANOSTRIDER = 553,
    WRATH_SKILL_RIDING_UNDEAD_HORSE = 554,
    WRATH_SKILL_RESTORATION2 = 573,
    WRATH_SKILL_BALANCE = 574,
    WRATH_SKILL_DESTRUCTION = 593,
    WRATH_SKILL_HOLY2 = 594,
    WRATH_SKILL_DISCIPLINE = 613,
    WRATH_SKILL_LOCKPICKING = 633,
    WRATH_SKILL_PET_BAT = 653,
    WRATH_SKILL_PET_HYENA = 654,
    WRATH_SKILL_PET_BIRD_OF_PREY = 655,
    WRATH_SKILL_PET_WIND_SERPENT = 656,
    WRATH_SKILL_LANGUAGE_GUTTERSPEAK = 673,
    WRATH_SKILL_RIDING_KODO = 713,
    WRATH_SKILL_RACIAL_TROLL = 733,
    WRATH_SKILL_RACIAL_GNOME = 753,
    WRATH_SKILL_RACIAL_HUMAN = 754,
    WRATH_SKILL_JEWELCRAFTING = 755,
    WRATH_SKILL_RACIAL_BLOODELF = 756,
    WRATH_SKILL_PET_EVENT_RC = 758,
    WRATH_SKILL_LANGUAGE_DRAENEI = 759,
    WRATH_SKILL_RACIAL_DRAENEI = 760,
    WRATH_SKILL_PET_FELGUARD = 761,
    WRATH_SKILL_RIDING = 762,
    WRATH_SKILL_PET_DRAGONHAWK = 763,
    WRATH_SKILL_PET_NETHER_RAY = 764,
    WRATH_SKILL_PET_SPOREBAT = 765,
    WRATH_SKILL_PET_WARP_STALKER = 766,
    WRATH_SKILL_PET_RAVAGER = 767,
    WRATH_SKILL_PET_SERPENT = 768,
    WRATH_SKILL_INTERNAL = 769,
    WRATH_SKILL_DK_BLOOD = 770,
    WRATH_SKILL_DK_FROST = 771,
    WRATH_SKILL_DK_UNHOLY = 772,
    WRATH_SKILL_INSCRIPTION = 773,
    WRATH_SKILL_PET_MOTH = 775,
    WRATH_SKILL_RUNEFORGING = 776,
    WRATH_SKILL_MOUNTS = 777,
    WRATH_SKILL_COMPANIONS = 778,
    WRATH_SKILL_PET_EXOTIC_CHIMAERA = 780,
    WRATH_SKILL_PET_EXOTIC_DEVILSAUR = 781,
    WRATH_SKILL_PET_GHOUL = 782,
    WRATH_SKILL_PET_EXOTIC_SILITHID = 783,
    WRATH_SKILL_PET_EXOTIC_WORM = 784,
    WRATH_SKILL_PET_WASP = 785,
    WRATH_SKILL_PET_EXOTIC_RHINO = 786,
    WRATH_SKILL_PET_EXOTIC_CORE_HOUND = 787,
    WRATH_SKILL_PET_EXOTIC_SPIRIT_BEAST = 788
} wrath_Skill;

typedef enum {
    WRATH_SKILL_CATEGORY_ATTRIBUTE = 5,
    WRATH_SKILL_CATEGORY_WEAPON = 6,
    WRATH_SKILL_CATEGORY_CLASS = 7,
    WRATH_SKILL_CATEGORY_ARMOR = 8,
    WRATH_SKILL_CATEGORY_SECONDARY_PROFESSION = 9,
    WRATH_SKILL_CATEGORY_LANGUAGE = 10,
    WRATH_SKILL_CATEGORY_PRIMARY_PROFESSION = 11,
    WRATH_SKILL_CATEGORY_GENERIC = 12
} wrath_SkillCategory;

typedef enum {
    WRATH_SPAM_TYPE_MAIL = 0,
    WRATH_SPAM_TYPE_CHAT = 1
} wrath_SpamType;

typedef enum {
    WRATH_SPELL_CAST_RESULT_SUCCESS = 0,
    WRATH_SPELL_CAST_RESULT_AFFECTING_COMBAT = 1,
    WRATH_SPELL_CAST_RESULT_ALREADY_AT_FULL_HEALTH = 2,
    WRATH_SPELL_CAST_RESULT_ALREADY_AT_FULL_MANA = 3,
    WRATH_SPELL_CAST_RESULT_ALREADY_AT_FULL_POWER = 4,
    WRATH_SPELL_CAST_RESULT_ALREADY_BEING_TAMED = 5,
    WRATH_SPELL_CAST_RESULT_ALREADY_HAVE_CHARM = 6,
    WRATH_SPELL_CAST_RESULT_ALREADY_HAVE_SUMMON = 7,
    WRATH_SPELL_CAST_RESULT_ALREADY_OPEN = 8,
    WRATH_SPELL_CAST_RESULT_AURA_BOUNCED = 9,
    WRATH_SPELL_CAST_RESULT_AUTOTRACK_INTERRUPTED = 10,
    WRATH_SPELL_CAST_RESULT_BAD_IMPLICIT_TARGETS = 11,
    WRATH_SPELL_CAST_RESULT_BAD_TARGETS = 12,
    WRATH_SPELL_CAST_RESULT_CANT_BE_CHARMED = 13,
    WRATH_SPELL_CAST_RESULT_CANT_BE_DISENCHANTED = 14,
    WRATH_SPELL_CAST_RESULT_CANT_BE_DISENCHANTED_SKILL = 15,
    WRATH_SPELL_CAST_RESULT_CANT_BE_MILLED = 16,
    WRATH_SPELL_CAST_RESULT_CANT_BE_PROSPECTED = 17,
    WRATH_SPELL_CAST_RESULT_CANT_CAST_ON_TAPPED = 18,
    WRATH_SPELL_CAST_RESULT_CANT_DUEL_WHILE_INVISIBLE = 19,
    WRATH_SPELL_CAST_RESULT_CANT_DUEL_WHILE_STEALTHED = 20,
    WRATH_SPELL_CAST_RESULT_CANT_STEALTH = 21,
    WRATH_SPELL_CAST_RESULT_CASTER_AURASTATE = 22,
    WRATH_SPELL_CAST_RESULT_CASTER_DEAD = 23,
    WRATH_SPELL_CAST_RESULT_CHARMED = 24,
    WRATH_SPELL_CAST_RESULT_CHEST_IN_USE = 25,
    WRATH_SPELL_CAST_RESULT_CONFUSED = 26,
    WRATH_SPELL_CAST_RESULT_DONT_REPORT = 27,
    WRATH_SPELL_CAST_RESULT_EQUIPPED_ITEM = 28,
    WRATH_SPELL_CAST_RESULT_EQUIPPED_ITEM_CLASS = 29,
    WRATH_SPELL_CAST_RESULT_EQUIPPED_ITEM_CLASS_MAINHAND = 30,
    WRATH_SPELL_CAST_RESULT_EQUIPPED_ITEM_CLASS_OFFHAND = 31,
    WRATH_SPELL_CAST_RESULT_ERROR = 32,
    WRATH_SPELL_CAST_RESULT_FIZZLE = 33,
    WRATH_SPELL_CAST_RESULT_FLEEING = 34,
    WRATH_SPELL_CAST_RESULT_FOOD_LOWLEVEL = 35,
    WRATH_SPELL_CAST_RESULT_HIGHLEVEL = 36,
    WRATH_SPELL_CAST_RESULT_HUNGER_SATIATED = 37,
    WRATH_SPELL_CAST_RESULT_IMMUNE = 38,
    WRATH_SPELL_CAST_RESULT_INCORRECT_AREA = 39,
    WRATH_SPELL_CAST_RESULT_INTERRUPTED = 40,
    WRATH_SPELL_CAST_RESULT_INTERRUPTED_COMBAT = 41,
    WRATH_SPELL_CAST_RESULT_ITEM_ALREADY_ENCHANTED = 42,
    WRATH_SPELL_CAST_RESULT_ITEM_GONE = 43,
    WRATH_SPELL_CAST_RESULT_ITEM_NOT_FOUND = 44,
    WRATH_SPELL_CAST_RESULT_ITEM_NOT_READY = 45,
    WRATH_SPELL_CAST_RESULT_LEVEL_REQUIREMENT = 46,
    WRATH_SPELL_CAST_RESULT_LINE_OF_SIGHT = 47,
    WRATH_SPELL_CAST_RESULT_LOWLEVEL = 48,
    WRATH_SPELL_CAST_RESULT_LOW_CASTLEVEL = 49,
    WRATH_SPELL_CAST_RESULT_MAINHAND_EMPTY = 50,
    WRATH_SPELL_CAST_RESULT_MOVING = 51,
    WRATH_SPELL_CAST_RESULT_NEED_AMMO = 52,
    WRATH_SPELL_CAST_RESULT_NEED_AMMO_POUCH = 53,
    WRATH_SPELL_CAST_RESULT_NEED_EXOTIC_AMMO = 54,
    WRATH_SPELL_CAST_RESULT_NEED_MORE_ITEMS = 55,
    WRATH_SPELL_CAST_RESULT_NOPATH = 56,
    WRATH_SPELL_CAST_RESULT_NOT_BEHIND = 57,
    WRATH_SPELL_CAST_RESULT_NOT_FISHABLE = 58,
    WRATH_SPELL_CAST_RESULT_NOT_FLYING = 59,
    WRATH_SPELL_CAST_RESULT_NOT_HERE = 60,
    WRATH_SPELL_CAST_RESULT_NOT_INFRONT = 61,
    WRATH_SPELL_CAST_RESULT_NOT_IN_CONTROL = 62,
    WRATH_SPELL_CAST_RESULT_NOT_KNOWN = 63,
    WRATH_SPELL_CAST_RESULT_NOT_MOUNTED = 64,
    WRATH_SPELL_CAST_RESULT_NOT_ON_TAXI = 65,
    WRATH_SPELL_CAST_RESULT_NOT_ON_TRANSPORT = 66,
    WRATH_SPELL_CAST_RESULT_NOT_READY = 67,
    WRATH_SPELL_CAST_RESULT_NOT_SHAPESHIFT = 68,
    WRATH_SPELL_CAST_RESULT_NOT_STANDING = 69,
    WRATH_SPELL_CAST_RESULT_NOT_TRADEABLE = 70,
    WRATH_SPELL_CAST_RESULT_NOT_TRADING = 71,
    WRATH_SPELL_CAST_RESULT_NOT_UNSHEATHED = 72,
    WRATH_SPELL_CAST_RESULT_NOT_WHILE_GHOST = 73,
    WRATH_SPELL_CAST_RESULT_NOT_WHILE_LOOTING = 74,
    WRATH_SPELL_CAST_RESULT_NO_AMMO = 75,
    WRATH_SPELL_CAST_RESULT_NO_CHARGES_REMAIN = 76,
    WRATH_SPELL_CAST_RESULT_NO_CHAMPION = 77,
    WRATH_SPELL_CAST_RESULT_NO_COMBO_POINTS = 78,
    WRATH_SPELL_CAST_RESULT_NO_DUELING = 79,
    WRATH_SPELL_CAST_RESULT_NO_ENDURANCE = 80,
    WRATH_SPELL_CAST_RESULT_NO_FISH = 81,
    WRATH_SPELL_CAST_RESULT_NO_ITEMS_WHILE_SHAPESHIFTED = 82,
    WRATH_SPELL_CAST_RESULT_NO_MOUNTS_ALLOWED = 83,
    WRATH_SPELL_CAST_RESULT_NO_PET = 84,
    WRATH_SPELL_CAST_RESULT_NO_POWER = 85,
    WRATH_SPELL_CAST_RESULT_NOTHING_TO_DISPEL = 86,
    WRATH_SPELL_CAST_RESULT_NOTHING_TO_STEAL = 87,
    WRATH_SPELL_CAST_RESULT_ONLY_ABOVEWATER = 88,
    WRATH_SPELL_CAST_RESULT_ONLY_DAYTIME = 89,
    WRATH_SPELL_CAST_RESULT_ONLY_INDOORS = 90,
    WRATH_SPELL_CAST_RESULT_ONLY_MOUNTED = 91,
    WRATH_SPELL_CAST_RESULT_ONLY_NIGHTTIME = 92,
    WRATH_SPELL_CAST_RESULT_ONLY_OUTDOORS = 93,
    WRATH_SPELL_CAST_RESULT_ONLY_SHAPESHIFT = 94,
    WRATH_SPELL_CAST_RESULT_ONLY_STEALTHED = 95,
    WRATH_SPELL_CAST_RESULT_ONLY_UNDERWATER = 96,
    WRATH_SPELL_CAST_RESULT_OUT_OF_RANGE = 97,
    WRATH_SPELL_CAST_RESULT_PACIFIED = 98,
    WRATH_SPELL_CAST_RESULT_POSSESSED = 99,
    WRATH_SPELL_CAST_RESULT_REAGENTS = 100,
    WRATH_SPELL_CAST_RESULT_REQUIRES_AREA = 101,
    WRATH_SPELL_CAST_RESULT_REQUIRES_SPELL_FOCUS = 102,
    WRATH_SPELL_CAST_RESULT_ROOTED = 103,
    WRATH_SPELL_CAST_RESULT_SILENCED = 104,
    WRATH_SPELL_CAST_RESULT_SPELL_IN_PROGRESS = 105,
    WRATH_SPELL_CAST_RESULT_SPELL_LEARNED = 106,
    WRATH_SPELL_CAST_RESULT_SPELL_UNAVAILABLE = 107,
    WRATH_SPELL_CAST_RESULT_STUNNED = 108,
    WRATH_SPELL_CAST_RESULT_TARGETS_DEAD = 109,
    WRATH_SPELL_CAST_RESULT_TARGET_AFFECTING_COMBAT = 110,
    WRATH_SPELL_CAST_RESULT_TARGET_AURASTATE = 111,
    WRATH_SPELL_CAST_RESULT_TARGET_DUELING = 112,
    WRATH_SPELL_CAST_RESULT_TARGET_ENEMY = 113,
    WRATH_SPELL_CAST_RESULT_TARGET_ENRAGED = 114,
    WRATH_SPELL_CAST_RESULT_TARGET_FRIENDLY = 115,
    WRATH_SPELL_CAST_RESULT_TARGET_IN_COMBAT = 116,
    WRATH_SPELL_CAST_RESULT_TARGET_IS_PLAYER = 117,
    WRATH_SPELL_CAST_RESULT_TARGET_IS_PLAYER_CONTROLLED = 118,
    WRATH_SPELL_CAST_RESULT_TARGET_NOT_DEAD = 119,
    WRATH_SPELL_CAST_RESULT_TARGET_NOT_IN_PARTY = 120,
    WRATH_SPELL_CAST_RESULT_TARGET_NOT_LOOTED = 121,
    WRATH_SPELL_CAST_RESULT_TARGET_NOT_PLAYER = 122,
    WRATH_SPELL_CAST_RESULT_TARGET_NO_POCKETS = 123,
    WRATH_SPELL_CAST_RESULT_TARGET_NO_WEAPONS = 124,
    WRATH_SPELL_CAST_RESULT_TARGET_NO_RANGED_WEAPONS = 125,
    WRATH_SPELL_CAST_RESULT_TARGET_UNSKINNABLE = 126,
    WRATH_SPELL_CAST_RESULT_THIRST_SATIATED = 127,
    WRATH_SPELL_CAST_RESULT_TOO_CLOSE = 128,
    WRATH_SPELL_CAST_RESULT_TOO_MANY_OF_ITEM = 129,
    WRATH_SPELL_CAST_RESULT_TOTEM_CATEGORY = 130,
    WRATH_SPELL_CAST_RESULT_TOTEMS = 131,
    WRATH_SPELL_CAST_RESULT_TRY_CAST_AGAIN = 132,
    WRATH_SPELL_CAST_RESULT_UNIT_NOT_BEHIND = 133,
    WRATH_SPELL_CAST_RESULT_UNIT_NOT_INFRONT = 134,
    WRATH_SPELL_CAST_RESULT_WRONG_PET_FOOD = 135,
    WRATH_SPELL_CAST_RESULT_NOT_WHILE_FATIGUED = 136,
    WRATH_SPELL_CAST_RESULT_TARGET_NOT_IN_INSTANCE = 137,
    WRATH_SPELL_CAST_RESULT_NOT_WHILE_TRADING = 138,
    WRATH_SPELL_CAST_RESULT_TARGET_NOT_IN_RAID = 139,
    WRATH_SPELL_CAST_RESULT_TARGET_FREEFORALL = 140,
    WRATH_SPELL_CAST_RESULT_NO_EDIBLE_CORPSES = 141,
    WRATH_SPELL_CAST_RESULT_ONLY_BATTLEGROUNDS = 142,
    WRATH_SPELL_CAST_RESULT_TARGET_NOT_GHOST = 143,
    WRATH_SPELL_CAST_RESULT_TRANSFORM_UNUSABLE = 144,
    WRATH_SPELL_CAST_RESULT_WRONG_WEATHER = 145,
    WRATH_SPELL_CAST_RESULT_DAMAGE_IMMUNE = 146,
    WRATH_SPELL_CAST_RESULT_PREVENTED_BY_MECHANIC = 147,
    WRATH_SPELL_CAST_RESULT_PLAY_TIME = 148,
    WRATH_SPELL_CAST_RESULT_REPUTATION = 149,
    WRATH_SPELL_CAST_RESULT_MIN_SKILL = 150,
    WRATH_SPELL_CAST_RESULT_NOT_IN_ARENA = 151,
    WRATH_SPELL_CAST_RESULT_NOT_ON_SHAPESHIFT = 152,
    WRATH_SPELL_CAST_RESULT_NOT_ON_STEALTHED = 153,
    WRATH_SPELL_CAST_RESULT_NOT_ON_DAMAGE_IMMUNE = 154,
    WRATH_SPELL_CAST_RESULT_NOT_ON_MOUNTED = 155,
    WRATH_SPELL_CAST_RESULT_TOO_SHALLOW = 156,
    WRATH_SPELL_CAST_RESULT_TARGET_NOT_IN_SANCTUARY = 157,
    WRATH_SPELL_CAST_RESULT_TARGET_IS_TRIVIAL = 158,
    WRATH_SPELL_CAST_RESULT_BM_OR_INVISGOD = 159,
    WRATH_SPELL_CAST_RESULT_EXPERT_RIDING_REQUIREMENT = 160,
    WRATH_SPELL_CAST_RESULT_ARTISAN_RIDING_REQUIREMENT = 161,
    WRATH_SPELL_CAST_RESULT_NOT_IDLE = 162,
    WRATH_SPELL_CAST_RESULT_NOT_INACTIVE = 163,
    WRATH_SPELL_CAST_RESULT_PARTIAL_PLAYTIME = 164,
    WRATH_SPELL_CAST_RESULT_NO_PLAYTIME = 165,
    WRATH_SPELL_CAST_RESULT_NOT_IN_BATTLEGROUND = 166,
    WRATH_SPELL_CAST_RESULT_NOT_IN_RAID_INSTANCE = 167,
    WRATH_SPELL_CAST_RESULT_ONLY_IN_ARENA = 168,
    WRATH_SPELL_CAST_RESULT_TARGET_LOCKED_TO_RAID_INSTANCE = 169,
    WRATH_SPELL_CAST_RESULT_ON_USE_ENCHANT = 170,
    WRATH_SPELL_CAST_RESULT_NOT_ON_GROUND = 171,
    WRATH_SPELL_CAST_RESULT_CUSTOM_ERROR = 172,
    WRATH_SPELL_CAST_RESULT_CANT_DO_THAT_RIGHT_NOW = 173,
    WRATH_SPELL_CAST_RESULT_TOO_MANY_SOCKETS = 174,
    WRATH_SPELL_CAST_RESULT_INVALID_GLYPH = 175,
    WRATH_SPELL_CAST_RESULT_UNIQUE_GLYPH = 176,
    WRATH_SPELL_CAST_RESULT_GLYPH_SOCKET_LOCKED = 177,
    WRATH_SPELL_CAST_RESULT_NO_VALID_TARGETS = 178,
    WRATH_SPELL_CAST_RESULT_ITEM_AT_MAX_CHARGES = 179,
    WRATH_SPELL_CAST_RESULT_NOT_IN_BARBERSHOP = 180,
    WRATH_SPELL_CAST_RESULT_FISHING_TOO_LOW = 181,
    WRATH_SPELL_CAST_RESULT_ITEM_ENCHANT_TRADE_WINDOW = 182,
    WRATH_SPELL_CAST_RESULT_SUMMON_PENDING = 183,
    WRATH_SPELL_CAST_RESULT_MAX_SOCKETS = 184,
    WRATH_SPELL_CAST_RESULT_PET_CAN_RENAME = 185,
    WRATH_SPELL_CAST_RESULT_TARGET_CANNOT_BE_RESURRECTED = 186,
    WRATH_SPELL_CAST_RESULT_UNKNOWN = 187
} wrath_SpellCastResult;

typedef enum {
    WRATH_SPELL_EFFECT_NONE = 0,
    WRATH_SPELL_EFFECT_INSTAKILL = 1,
    WRATH_SPELL_EFFECT_SCHOOL_DAMAGE = 2,
    WRATH_SPELL_EFFECT_DUMMY = 3,
    WRATH_SPELL_EFFECT_PORTAL_TELEPORT = 4,
    WRATH_SPELL_EFFECT_TELEPORT_UNITS = 5,
    WRATH_SPELL_EFFECT_APPLY_AURA = 6,
    WRATH_SPELL_EFFECT_ENVIRONMENTAL_DAMAGE = 7,
    WRATH_SPELL_EFFECT_POWER_DRAIN = 8,
    WRATH_SPELL_EFFECT_HEALTH_LEECH = 9,
    WRATH_SPELL_EFFECT_HEAL = 10,
    WRATH_SPELL_EFFECT_BIND = 11,
    WRATH_SPELL_EFFECT_PORTAL = 12,
    WRATH_SPELL_EFFECT_RITUAL_BASE = 13,
    WRATH_SPELL_EFFECT_RITUAL_SPECIALIZE = 14,
    WRATH_SPELL_EFFECT_RITUAL_ACTIVATE_PORTAL = 15,
    WRATH_SPELL_EFFECT_QUEST_COMPLETE = 16,
    WRATH_SPELL_EFFECT_WEAPON_DAMAGE_NOSCHOOL = 17,
    WRATH_SPELL_EFFECT_RESURRECT = 18,
    WRATH_SPELL_EFFECT_ADD_EXTRA_ATTACKS = 19,
    WRATH_SPELL_EFFECT_DODGE = 20,
    WRATH_SPELL_EFFECT_EVADE = 21,
    WRATH_SPELL_EFFECT_PARRY = 22,
    WRATH_SPELL_EFFECT_BLOCK = 23,
    WRATH_SPELL_EFFECT_CREATE_ITEM = 24,
    WRATH_SPELL_EFFECT_WEAPON = 25,
    WRATH_SPELL_EFFECT_DEFENSE = 26,
    WRATH_SPELL_EFFECT_PERSISTENT_AREA_AURA = 27,
    WRATH_SPELL_EFFECT_SUMMON = 28,
    WRATH_SPELL_EFFECT_LEAP = 29,
    WRATH_SPELL_EFFECT_ENERGIZE = 30,
    WRATH_SPELL_EFFECT_WEAPON_PERCENT_DAMAGE = 31,
    WRATH_SPELL_EFFECT_TRIGGER_MISSILE = 32,
    WRATH_SPELL_EFFECT_OPEN_LOCK = 33,
    WRATH_SPELL_EFFECT_SUMMON_CHANGE_ITEM = 34,
    WRATH_SPELL_EFFECT_APPLY_AREA_AURA_PARTY = 35,
    WRATH_SPELL_EFFECT_LEARN_SPELL = 36,
    WRATH_SPELL_EFFECT_SPELL_DEFENSE = 37,
    WRATH_SPELL_EFFECT_DISPEL = 38,
    WRATH_SPELL_EFFECT_LANGUAGE = 39,
    WRATH_SPELL_EFFECT_DUAL_WIELD = 40,
    WRATH_SPELL_EFFECT_JUMP = 41,
    WRATH_SPELL_EFFECT_JUMP2 = 42,
    WRATH_SPELL_EFFECT_TELEPORT_UNITS_FACE_CASTER = 43,
    WRATH_SPELL_EFFECT_SKILL_STEP = 44,
    WRATH_SPELL_EFFECT_ADD_HONOR = 45,
    WRATH_SPELL_EFFECT_SPAWN = 46,
    WRATH_SPELL_EFFECT_TRADE_SKILL = 47,
    WRATH_SPELL_EFFECT_STEALTH = 48,
    WRATH_SPELL_EFFECT_DETECT = 49,
    WRATH_SPELL_EFFECT_TRANS_DOOR = 50,
    WRATH_SPELL_EFFECT_FORCE_CRITICAL_HIT = 51,
    WRATH_SPELL_EFFECT_GUARANTEE_HIT = 52,
    WRATH_SPELL_EFFECT_ENCHANT_ITEM = 53,
    WRATH_SPELL_EFFECT_ENCHANT_ITEM_TEMPORARY = 54,
    WRATH_SPELL_EFFECT_TAMECREATURE = 55,
    WRATH_SPELL_EFFECT_SUMMON_PET = 56,
    WRATH_SPELL_EFFECT_LEARN_PET_SPELL = 57,
    WRATH_SPELL_EFFECT_WEAPON_DAMAGE = 58,
    WRATH_SPELL_EFFECT_OPEN_LOCK_ITEM = 59,
    WRATH_SPELL_EFFECT_PROFICIENCY = 60,
    WRATH_SPELL_EFFECT_SEND_EVENT = 61,
    WRATH_SPELL_EFFECT_POWER_BURN = 62,
    WRATH_SPELL_EFFECT_THREAT = 63,
    WRATH_SPELL_EFFECT_TRIGGER_SPELL = 64,
    WRATH_SPELL_EFFECT_APPLY_AREA_AURA_RAID = 65,
    WRATH_SPELL_EFFECT_RESTORE_ITEM_CHARGES = 66,
    WRATH_SPELL_EFFECT_HEAL_MAX_HEALTH = 67,
    WRATH_SPELL_EFFECT_INTERRUPT_CAST = 68,
    WRATH_SPELL_EFFECT_DISTRACT = 69,
    WRATH_SPELL_EFFECT_PULL = 70,
    WRATH_SPELL_EFFECT_PICKPOCKET = 71,
    WRATH_SPELL_EFFECT_ADD_FARSIGHT = 72,
    WRATH_SPELL_EFFECT_UNTRAIN_TALENTS = 73,
    WRATH_SPELL_EFFECT_APPLY_GLYPH = 74,
    WRATH_SPELL_EFFECT_HEAL_MECHANICAL = 75,
    WRATH_SPELL_EFFECT_SUMMON_OBJECT_WILD = 76,
    WRATH_SPELL_EFFECT_SCRIPT_EFFECT = 77,
    WRATH_SPELL_EFFECT_ATTACK = 78,
    WRATH_SPELL_EFFECT_SANCTUARY = 79,
    WRATH_SPELL_EFFECT_ADD_COMBO_POINTS = 80,
    WRATH_SPELL_EFFECT_CREATE_HOUSE = 81,
    WRATH_SPELL_EFFECT_BIND_SIGHT = 82,
    WRATH_SPELL_EFFECT_DUEL = 83,
    WRATH_SPELL_EFFECT_STUCK = 84,
    WRATH_SPELL_EFFECT_SUMMON_PLAYER = 85,
    WRATH_SPELL_EFFECT_ACTIVATE_OBJECT = 86,
    WRATH_SPELL_EFFECT_WMO_DAMAGE = 87,
    WRATH_SPELL_EFFECT_WMO_REPAIR = 88,
    WRATH_SPELL_EFFECT_WMO_CHANGE = 89,
    WRATH_SPELL_EFFECT_KILL_CREDIT_PERSONAL = 90,
    WRATH_SPELL_EFFECT_THREAT_ALL = 91,
    WRATH_SPELL_EFFECT_ENCHANT_HELD_ITEM = 92,
    WRATH_SPELL_EFFECT_BREAK_PLAYER_TARGETING = 93,
    WRATH_SPELL_EFFECT_SELF_RESURRECT = 94,
    WRATH_SPELL_EFFECT_SKINNING = 95,
    WRATH_SPELL_EFFECT_CHARGE = 96,
    WRATH_SPELL_EFFECT_SUMMON_ALL_TOTEMS = 97,
    WRATH_SPELL_EFFECT_KNOCK_BACK = 98,
    WRATH_SPELL_EFFECT_DISENCHANT = 99,
    WRATH_SPELL_EFFECT_INEBRIATE = 100,
    WRATH_SPELL_EFFECT_FEED_PET = 101,
    WRATH_SPELL_EFFECT_DISMISS_PET = 102,
    WRATH_SPELL_EFFECT_REPUTATION = 103,
    WRATH_SPELL_EFFECT_SUMMON_OBJECT_SLOT1 = 104,
    WRATH_SPELL_EFFECT_SUMMON_OBJECT_SLOT2 = 105,
    WRATH_SPELL_EFFECT_SUMMON_OBJECT_SLOT3 = 106,
    WRATH_SPELL_EFFECT_SUMMON_OBJECT_SLOT4 = 107,
    WRATH_SPELL_EFFECT_DISPEL_MECHANIC = 108,
    WRATH_SPELL_EFFECT_SUMMON_DEAD_PET = 109,
    WRATH_SPELL_EFFECT_DESTROY_ALL_TOTEMS = 110,
    WRATH_SPELL_EFFECT_DURABILITY_DAMAGE = 111,
    WRATH_SPELL_EFFECT_UNKNOWN112 = 112,
    WRATH_SPELL_EFFECT_RESURRECT_NEW = 113,
    WRATH_SPELL_EFFECT_ATTACK_ME = 114,
    WRATH_SPELL_EFFECT_DURABILITY_DAMAGE_PCT = 115,
    WRATH_SPELL_EFFECT_SKIN_PLAYER_CORPSE = 116,
    WRATH_SPELL_EFFECT_SPIRIT_HEAL = 117,
    WRATH_SPELL_EFFECT_SKILL = 118,
    WRATH_SPELL_EFFECT_APPLY_AREA_AURA_PET = 119,
    WRATH_SPELL_EFFECT_TELEPORT_GRAVEYARD = 120,
    WRATH_SPELL_EFFECT_NORMALIZED_WEAPON_DMG = 121,
    WRATH_SPELL_EFFECT_UNKNOWN122 = 122,
    WRATH_SPELL_EFFECT_SEND_TAXI = 123,
    WRATH_SPELL_EFFECT_PLAYER_PULL = 124,
    WRATH_SPELL_EFFECT_MODIFY_THREAT_PERCENT = 125,
    WRATH_SPELL_EFFECT_STEAL_BENEFICIAL_BUFF = 126,
    WRATH_SPELL_EFFECT_PROSPECTING = 127,
    WRATH_SPELL_EFFECT_APPLY_AREA_AURA_FRIEND = 128,
    WRATH_SPELL_EFFECT_APPLY_AREA_AURA_ENEMY = 129,
    WRATH_SPELL_EFFECT_REDIRECT_THREAT = 130,
    WRATH_SPELL_EFFECT_PLAY_SOUND = 131,
    WRATH_SPELL_EFFECT_PLAY_MUSIC = 132,
    WRATH_SPELL_EFFECT_UNLEARN_SPECIALIZATION = 133,
    WRATH_SPELL_EFFECT_KILL_CREDIT_GROUP = 134,
    WRATH_SPELL_EFFECT_CALL_PET = 135,
    WRATH_SPELL_EFFECT_HEAL_PCT = 136,
    WRATH_SPELL_EFFECT_ENERGIZE_PCT = 137,
    WRATH_SPELL_EFFECT_LEAP_BACK = 138,
    WRATH_SPELL_EFFECT_CLEAR_QUEST = 139,
    WRATH_SPELL_EFFECT_FORCE_CAST = 140,
    WRATH_SPELL_EFFECT_FORCE_CAST_WITH_VALUE = 141,
    WRATH_SPELL_EFFECT_TRIGGER_SPELL_WITH_VALUE = 142,
    WRATH_SPELL_EFFECT_APPLY_AREA_AURA_OWNER = 143,
    WRATH_SPELL_EFFECT_KNOCKBACK_FROM_POSITION = 144,
    WRATH_SPELL_EFFECT_GRAVITY_PULL = 145,
    WRATH_SPELL_EFFECT_ACTIVATE_RUNE = 146,
    WRATH_SPELL_EFFECT_QUEST_FAIL = 147,
    WRATH_SPELL_EFFECT_UNKNOWN148 = 148,
    WRATH_SPELL_EFFECT_CHARGE2 = 149,
    WRATH_SPELL_EFFECT_QUEST_OFFER = 150,
    WRATH_SPELL_EFFECT_TRIGGER_SPELL_2 = 151,
    WRATH_SPELL_EFFECT_UNKNOWN152 = 152,
    WRATH_SPELL_EFFECT_CREATE_PET = 153,
    WRATH_SPELL_EFFECT_TEACH_TAXI_NODE = 154,
    WRATH_SPELL_EFFECT_TITAN_GRIP = 155,
    WRATH_SPELL_EFFECT_ENCHANT_ITEM_PRISMATIC = 156,
    WRATH_SPELL_EFFECT_CREATE_ITEM2 = 157,
    WRATH_SPELL_EFFECT_MILLING = 158,
    WRATH_SPELL_EFFECT_ALLOW_RENAME_PET = 159,
    WRATH_SPELL_EFFECT_UNKNOWN160 = 160,
    WRATH_SPELL_EFFECT_TALENT_SPEC_COUNT = 161,
    WRATH_SPELL_EFFECT_TALENT_SPEC_SELECT = 162,
    WRATH_SPELL_EFFECT_UNKNOWN163 = 163,
    WRATH_SPELL_EFFECT_CANCEL_AURA = 164
} wrath_SpellEffect;

typedef enum {
    WRATH_SPELL_MISS_INFO_NONE = 0,
    WRATH_SPELL_MISS_INFO_MISS = 1,
    WRATH_SPELL_MISS_INFO_RESIST = 2,
    WRATH_SPELL_MISS_INFO_DODGE = 3,
    WRATH_SPELL_MISS_INFO_PARRY = 4,
    WRATH_SPELL_MISS_INFO_BLOCK = 5,
    WRATH_SPELL_MISS_INFO_EVADE = 6,
    WRATH_SPELL_MISS_INFO_IMMUNE = 7,
    WRATH_SPELL_MISS_INFO_IMMUNE2 = 8,
    WRATH_SPELL_MISS_INFO_DEFLECT = 9,
    WRATH_SPELL_MISS_INFO_ABSORB = 10,
    WRATH_SPELL_MISS_INFO_REFLECT = 11
} wrath_SpellMissInfo;

typedef enum {
    WRATH_SPELL_SCHOOL_NORMAL = 0,
    WRATH_SPELL_SCHOOL_HOLY = 1,
    WRATH_SPELL_SCHOOL_FIRE = 2,
    WRATH_SPELL_SCHOOL_NATURE = 3,
    WRATH_SPELL_SCHOOL_FROST = 4,
    WRATH_SPELL_SCHOOL_SHADOW = 5,
    WRATH_SPELL_SCHOOL_ARCANE = 6
} wrath_SpellSchool;

typedef enum {
    WRATH_SPELL_STEAL_ACTION_STEAL = 0,
    WRATH_SPELL_STEAL_ACTION_CLEANSE = 1
} wrath_SpellStealAction;

typedef enum {
    WRATH_SPELL_TRIGGER_TYPE_ON_USE = 0,
    WRATH_SPELL_TRIGGER_TYPE_ON_EQUIP = 1,
    WRATH_SPELL_TRIGGER_TYPE_CHANCE_ON_HIT = 2,
    WRATH_SPELL_TRIGGER_TYPE_SERVER_SIDE_SCRIPT = 3,
    WRATH_SPELL_TRIGGER_TYPE_SOULSTONE = 4,
    WRATH_SPELL_TRIGGER_TYPE_NO_EQUIP_COOLDOWN = 5,
    WRATH_SPELL_TRIGGER_TYPE_LEARN_SPELL_ID = 6
} wrath_SpellTriggerType;

typedef enum {
    WRATH_STABLE_RESULT_ERR_MONEY = 1,
    WRATH_STABLE_RESULT_ERR_STABLE = 6,
    WRATH_STABLE_RESULT_SUCCESS_STABLE = 8,
    WRATH_STABLE_RESULT_SUCCESS_UNSTABLE = 9,
    WRATH_STABLE_RESULT_SUCCESS_BUY_SLOT = 10,
    WRATH_STABLE_RESULT_ERR_EXOTIC = 12
} wrath_StableResult;

typedef enum {
    WRATH_STATUS_ID_NONE = 0,
    WRATH_STATUS_ID_WAIT_QUEUE = 1,
    WRATH_STATUS_ID_WAIT_JOIN = 2,
    WRATH_STATUS_ID_IN_PROGRESS = 3,
    WRATH_STATUS_ID_WAIT_LEAVE = 4
} wrath_StatusId;

typedef enum {
    WRATH_TALENT_BURNING_SOUL = 23,
    WRATH_TALENT_MOLTEN_SHIELDS = 24,
    WRATH_TALENT_IMPROVED_SCORCH = 25,
    WRATH_TALENT_IMPROVED_FIREBALL = 26,
    WRATH_TALENT_IMPROVED_FIRE_BLAST = 27,
    WRATH_TALENT_FLAME_THROWING = 28,
    WRATH_TALENT_PYROBLAST = 29,
    WRATH_TALENT_IMPACT = 30,
    WRATH_TALENT_WORLD_IN_FLAMES = 31,
    WRATH_TALENT_BLAST_WAVE = 32,
    WRATH_TALENT_CRITICAL_MASS = 33,
    WRATH_TALENT_IGNITE = 34,
    WRATH_TALENT_FIRE_POWER = 35,
    WRATH_TALENT_COMBUSTION = 36,
    WRATH_TALENT_IMPROVED_FROSTBOLT = 37,
    WRATH_TALENT_FROSTBITE = 38,
    WRATH_TALENT_PIERCING_ICE = 61,
    WRATH_TALENT_ICE_FLOES = 62,
    WRATH_TALENT_IMPROVED_BLIZZARD = 63,
    WRATH_TALENT_IMPROVED_CONE_OF_COLD = 64,
    WRATH_TALENT_PERMAFROST = 65,
    WRATH_TALENT_FROST_CHANNELING = 66,
    WRATH_TALENT_SHATTER = 67,
    WRATH_TALENT_WINTERS_CHILL = 68,
    WRATH_TALENT_ICY_VEINS = 69,
    WRATH_TALENT_FROST_WARDING = 70,
    WRATH_TALENT_ICE_BARRIER = 71,
    WRATH_TALENT_COLD_SNAP = 72,
    WRATH_TALENT_ICE_SHARDS = 73,
    WRATH_TALENT_ARCANE_SUBTLETY = 74,
    WRATH_TALENT_ARCANE_CONCENTRATION = 75,
    WRATH_TALENT_ARCANE_FOCUS = 76,
    WRATH_TALENT_ARCANE_MIND = 77,
    WRATH_TALENT_ARCANE_STABILITY = 80,
    WRATH_TALENT_SPELL_IMPACT = 81,
    WRATH_TALENT_MAGIC_ATTUNEMENT = 82,
    WRATH_TALENT_ARCANE_SHIELDING = 83,
    WRATH_TALENT_ARCANE_FORTITUDE = 85,
    WRATH_TALENT_PRESENCE_OF_MIND = 86,
    WRATH_TALENT_ARCANE_POWER = 87,
    WRATH_TALENT_IMPROVED_COUNTERSPELL = 88,
    WRATH_TALENT_DEEP_WOUNDS = 121,
    WRATH_TALENT_SWORD_SPECIALIZATION = 123,
    WRATH_TALENT_IMPROVED_HEROIC_STRIKE = 124,
    WRATH_TALENT_WARRIOR_MACE_SPECIALIZATION = 125,
    WRATH_TALENT_IMPROVED_CHARGE = 126,
    WRATH_TALENT_IMPROVED_REND = 127,
    WRATH_TALENT_TACTICAL_MASTERY = 128,
    WRATH_TALENT_IMPROVED_HAMSTRING = 129,
    WRATH_TALENT_WARRIOR_DEFLECTION = 130,
    WRATH_TALENT_IMPROVED_OVERPOWER = 131,
    WRATH_TALENT_POLEAXE_SPECIALIZATION = 132,
    WRATH_TALENT_SWEEPING_STRIKES = 133,
    WRATH_TALENT_WARRIOR_WEAPON_MASTERY = 134,
    WRATH_TALENT_MORTAL_STRIKE = 135,
    WRATH_TALENT_WARRIOR_TWO_HANDED_WEAPON_SPECIALIZATION = 136,
    WRATH_TALENT_ANGER_MANAGEMENT = 137,
    WRATH_TALENT_WARRIOR_ANTICIPATION = 138,
    WRATH_TALENT_WARRIOR_TOUGHNESS = 140,
    WRATH_TALENT_IMPROVED_THUNDER_CLAP = 141,
    WRATH_TALENT_IMPROVED_BLOODRAGE = 142,
    WRATH_TALENT_INCITE = 144,
    WRATH_TALENT_PUNCTURE = 146,
    WRATH_TALENT_IMPROVED_REVENGE = 147,
    WRATH_TALENT_VIGILANCE = 148,
    WRATH_TALENT_GAG_ORDER = 149,
    WRATH_TALENT_IMPROVED_DISCIPLINES = 150,
    WRATH_TALENT_IMPROVED_DISARM = 151,
    WRATH_TALENT_CONCUSSION_BLOW = 152,
    WRATH_TALENT_WARRIOR_LAST_STAND = 153,
    WRATH_TALENT_COMMANDING_PRESENCE = 154,
    WRATH_TALENT_ENRAGE = 155,
    WRATH_TALENT_WARRIOR_FLURRY = 156,
    WRATH_TALENT_CRUELTY = 157,
    WRATH_TALENT_BOOMING_VOICE = 158,
    WRATH_TALENT_UNBRIDLED_WRATH = 159,
    WRATH_TALENT_PIERCING_HOWL = 160,
    WRATH_TALENT_IMPROVED_DEMORALIZING_SHOUT = 161,
    WRATH_TALENT_DEATH_WISH = 165,
    WRATH_TALENT_IMPROVED_CLEAVE = 166,
    WRATH_TALENT_BLOODTHIRST = 167,
    WRATH_TALENT_ROGUE_PRECISION = 181,
    WRATH_TALENT_CLOSE_QUARTERS_COMBAT = 182,
    WRATH_TALENT_ROGUE_MACE_SPECIALIZATION = 184,
    WRATH_TALENT_ROGUE_LIGHTNING_REFLEXES = 186,
    WRATH_TALENT_ROGUE_DEFLECTION = 187,
    WRATH_TALENT_IMPROVED_SINISTER_STRIKE = 201,
    WRATH_TALENT_IMPROVED_GOUGE = 203,
    WRATH_TALENT_ENDURANCE = 204,
    WRATH_TALENT_ADRENALINE_RUSH = 205,
    WRATH_TALENT_IMPROVED_KICK = 206,
    WRATH_TALENT_ROGUE_DUAL_WIELD_SPECIALIZATION = 221,
    WRATH_TALENT_IMPROVED_SPRINT = 222,
    WRATH_TALENT_BLADE_FLURRY = 223,
    WRATH_TALENT_MASTER_OF_DECEPTION = 241,
    WRATH_TALENT_HACK_AND_SLASH = 242,
    WRATH_TALENT_CAMOUFLAGE = 244,
    WRATH_TALENT_INITIATIVE = 245,
    WRATH_TALENT_SETUP = 246,
    WRATH_TALENT_ELUSIVENESS = 247,
    WRATH_TALENT_OPPORTUNITY = 261,
    WRATH_TALENT_DIRTY_TRICKS = 262,
    WRATH_TALENT_IMPROVED_AMBUSH = 263,
    WRATH_TALENT_DIRTY_DEEDS = 265,
    WRATH_TALENT_IMPROVED_POISONS = 268,
    WRATH_TALENT_LETHALITY = 269,
    WRATH_TALENT_MALICE = 270,
    WRATH_TALENT_REMORSELESS_ATTACKS = 272,
    WRATH_TALENT_RUTHLESSNESS = 273,
    WRATH_TALENT_MURDER = 274,
    WRATH_TALENT_IMPROVED_EVISCERATE = 276,
    WRATH_TALENT_PUNCTURING_WOUNDS = 277,
    WRATH_TALENT_IMPROVED_EXPOSE_ARMOR = 278,
    WRATH_TALENT_IMPROVED_KIDNEY_SHOT = 279,
    WRATH_TALENT_COLD_BLOOD = 280,
    WRATH_TALENT_OVERKILL = 281,
    WRATH_TALENT_SEAL_FATE = 283,
    WRATH_TALENT_PREPARATION = 284,
    WRATH_TALENT_RIPOSTE = 301,
    WRATH_TALENT_GHOSTLY_STRIKE = 303,
    WRATH_TALENT_MARTYRDOM = 321,
    WRATH_TALENT_POWER_INFUSION = 322,
    WRATH_TALENT_MENTAL_AGILITY = 341,
    WRATH_TALENT_UNBREAKABLE_WILL = 342,
    WRATH_TALENT_IMPROVED_POWER_WORD_SHIELD = 343,
    WRATH_TALENT_IMPROVED_POWER_WORD_FORTITUDE = 344,
    WRATH_TALENT_IMPROVED_INNER_FIRE = 346,
    WRATH_TALENT_MEDITATION = 347,
    WRATH_TALENT_INNER_FOCUS = 348,
    WRATH_TALENT_IMPROVED_MANA_BURN = 350,
    WRATH_TALENT_SOUL_WARDING = 351,
    WRATH_TALENT_SILENT_RESOLVE = 352,
    WRATH_TALENT_INSPIRATION = 361,
    WRATH_TALENT_PREMEDITATION = 381,
    WRATH_TALENT_VIGOR = 382,
    WRATH_TALENT_HOLY_SPECIALIZATION = 401,
    WRATH_TALENT_SPIRITUAL_GUIDANCE = 402,
    WRATH_TALENT_SEARING_LIGHT = 403,
    WRATH_TALENT_SPIRITUAL_HEALING = 404,
    WRATH_TALENT_IMPROVED_RENEW = 406,
    WRATH_TALENT_IMPROVED_HEALING = 408,
    WRATH_TALENT_PRIEST_HEALING_FOCUS = 410,
    WRATH_TALENT_SPELL_WARDING = 411,
    WRATH_TALENT_HEALING_PRAYERS = 413,
    WRATH_TALENT_ARCANE_INSTABILITY = 421,
    WRATH_TALENT_DESPERATE_PRAYER = 442,
    WRATH_TALENT_SHADOW_WEAVING = 461,
    WRATH_TALENT_DARKNESS = 462,
    WRATH_TALENT_SHADOW_FOCUS = 463,
    WRATH_TALENT_SPIRIT_TAP = 465,
    WRATH_TALENT_SHADOW_AFFINITY = 466,
    WRATH_TALENT_IMPROVED_MIND_BLAST = 481,
    WRATH_TALENT_IMPROVED_SHADOW_WORD_PAIN = 482,
    WRATH_TALENT_VEILED_SHADOWS = 483,
    WRATH_TALENT_VAMPIRIC_EMBRACE = 484,
    WRATH_TALENT_MIND_FLAY = 501,
    WRATH_TALENT_SHADOWFORM = 521,
    WRATH_TALENT_SILENCE = 541,
    WRATH_TALENT_IMPROVED_PSYCHIC_SCREAM = 542,
    WRATH_TALENT_CALL_OF_FLAME = 561,
    WRATH_TALENT_CALL_OF_THUNDER = 562,
    WRATH_TALENT_CONCUSSION = 563,
    WRATH_TALENT_CONVECTION = 564,
    WRATH_TALENT_ELEMENTAL_FURY = 565,
    WRATH_TALENT_IMPROVED_FIRE_NOVA = 567,
    WRATH_TALENT_ELEMENTAL_MASTERY = 573,
    WRATH_TALENT_ELEMENTAL_FOCUS = 574,
    WRATH_TALENT_REVERBERATION = 575,
    WRATH_TALENT_ANCESTRAL_HEALING = 581,
    WRATH_TALENT_TIDAL_FORCE = 582,
    WRATH_TALENT_IMPROVED_WATER_SHIELD = 583,
    WRATH_TALENT_IMPROVED_HEALING_WAVE = 586,
    WRATH_TALENT_SHAMAN_HEALING_FOCUS = 587,
    WRATH_TALENT_RESTORATIVE_TOTEMS = 588,
    WRATH_TALENT_IMPROVED_REINCARNATION = 589,
    WRATH_TALENT_MANA_TIDE_TOTEM = 590,
    WRATH_TALENT_SHAMAN_NATURES_SWIFTNESS = 591,
    WRATH_TALENT_PURIFICATION = 592,
    WRATH_TALENT_TIDAL_FOCUS = 593,
    WRATH_TALENT_TIDAL_MASTERY = 594,
    WRATH_TALENT_TOTEMIC_FOCUS = 595,
    WRATH_TALENT_SHAMAN_ANTICIPATION = 601,
    WRATH_TALENT_SHAMAN_FLURRY = 602,
    WRATH_TALENT_IMPROVED_GHOST_WOLF = 605,
    WRATH_TALENT_IMPROVED_SHIELDS = 607,
    WRATH_TALENT_GUARDIAN_TOTEMS = 609,
    WRATH_TALENT_ENHANCING_TOTEMS = 610,
    WRATH_TALENT_ELEMENTAL_WEAPONS = 611,
    WRATH_TALENT_THUNDERING_STRIKES = 613,
    WRATH_TALENT_ANCESTRAL_KNOWLEDGE = 614,
    WRATH_TALENT_SHAMAN_TOUGHNESS = 615,
    WRATH_TALENT_SPIRIT_WEAPONS = 616,
    WRATH_TALENT_SHAMANISTIC_FOCUS = 617,
    WRATH_TALENT_IRON_WILL = 641,
    WRATH_TALENT_BLOOD_CRAZE = 661,
    WRATH_TALENT_IMPALE = 662,
    WRATH_TALENT_HEMORRHAGE = 681,
    WRATH_TALENT_VILE_POISONS = 682,
    WRATH_TALENT_WARRIOR_ONE_HANDED_WEAPON_SPECIALIZATION = 702,
    WRATH_TALENT_LIGHTNING_MASTERY = 721,
    WRATH_TALENT_ARCTIC_REACH = 741,
    WRATH_TALENT_STARLIGHT_WRATH = 762,
    WRATH_TALENT_IMPROVED_MOONFIRE = 763,
    WRATH_TALENT_NATURES_REACH = 764,
    WRATH_TALENT_BRAMBLES = 782,
    WRATH_TALENT_MOONGLOW = 783,
    WRATH_TALENT_CELESTIAL_FOCUS = 784,
    WRATH_TALENT_INSECT_SWARM = 788,
    WRATH_TALENT_NATURES_GRACE = 789,
    WRATH_TALENT_MOONFURY = 790,
    WRATH_TALENT_DRUID_VENGEANCE = 792,
    WRATH_TALENT_MOONKIN_FORM = 793,
    WRATH_TALENT_DRUID_THICK_HIDE = 794,
    WRATH_TALENT_FERAL_AGGRESSION = 795,
    WRATH_TALENT_DRUID_FEROCITY = 796,
    WRATH_TALENT_BRUTAL_IMPACT = 797,
    WRATH_TALENT_SHARPENED_CLAWS = 798,
    WRATH_TALENT_FERAL_INSTINCT = 799,
    WRATH_TALENT_PRIMAL_FURY = 801,
    WRATH_TALENT_SHREDDING_ATTACKS = 802,
    WRATH_TALENT_PREDATORY_STRIKES = 803,
    WRATH_TALENT_FERAL_CHARGE = 804,
    WRATH_TALENT_SAVAGE_FURY = 805,
    WRATH_TALENT_FERAL_SWIFTNESS = 807,
    WRATH_TALENT_HEART_OF_THE_WILD = 808,
    WRATH_TALENT_LEADER_OF_THE_PACK = 809,
    WRATH_TALENT_IMPROVED_MARK_OF_THE_WILD = 821,
    WRATH_TALENT_FUROR = 822,
    WRATH_TALENT_NATURES_FOCUS = 823,
    WRATH_TALENT_NATURALIST = 824,
    WRATH_TALENT_NATURES_BOUNTY = 825,
    WRATH_TALENT_NATURAL_SHAPESHIFTER = 826,
    WRATH_TALENT_OMEN_OF_CLARITY = 827,
    WRATH_TALENT_GIFT_OF_NATURE = 828,
    WRATH_TALENT_DRUID_INTENSITY = 829,
    WRATH_TALENT_IMPROVED_REJUVENATION = 830,
    WRATH_TALENT_DRUID_NATURES_SWIFTNESS = 831,
    WRATH_TALENT_SUBTLETY = 841,
    WRATH_TALENT_IMPROVED_TRANQUILITY = 842,
    WRATH_TALENT_TRANQUIL_SPIRIT = 843,
    WRATH_TALENT_SWIFTMEND = 844,
    WRATH_TALENT_SHADOW_REACH = 881,
    WRATH_TALENT_STORMSTRIKE = 901,
    WRATH_TALENT_CATACLYSM = 941,
    WRATH_TALENT_BANE = 943,
    WRATH_TALENT_IMPROVED_SHADOW_BOLT = 944,
    WRATH_TALENT_IMPROVED_IMMOLATE = 961,
    WRATH_TALENT_SHADOWBURN = 963,
    WRATH_TALENT_DESTRUCTIVE_REACH = 964,
    WRATH_TALENT_IMPROVED_SEARING_PAIN = 965,
    WRATH_TALENT_EMBERSTORM = 966,
    WRATH_TALENT_RUIN = 967,
    WRATH_TALENT_CONFLAGRATE = 968,
    WRATH_TALENT_DEVASTATION = 981,
    WRATH_TALENT_AFTERMATH = 982,
    WRATH_TALENT_DEMONIC_POWER = 983,
    WRATH_TALENT_WARLOCK_INTENSITY = 985,
    WRATH_TALENT_PYROCLASM = 986,
    WRATH_TALENT_FEL_CONCENTRATION = 1001,
    WRATH_TALENT_NIGHTFALL = 1002,
    WRATH_TALENT_IMPROVED_CORRUPTION = 1003,
    WRATH_TALENT_SOUL_SIPHON = 1004,
    WRATH_TALENT_SUPPRESSION = 1005,
    WRATH_TALENT_IMPROVED_CURSE_OF_WEAKNESS = 1006,
    WRATH_TALENT_IMPROVED_LIFE_TAP = 1007,
    WRATH_TALENT_GRIM_REACH = 1021,
    WRATH_TALENT_DARK_PACT = 1022,
    WRATH_TALENT_SIPHON_LIFE = 1041,
    WRATH_TALENT_SHADOW_MASTERY = 1042,
    WRATH_TALENT_AMPLIFY_CURSE = 1061,
    WRATH_TALENT_CURSE_OF_EXHAUSTION = 1081,
    WRATH_TALENT_IMPROVED_DRAIN_SOUL = 1101,
    WRATH_TALENT_AGGRESSION = 1122,
    WRATH_TALENT_SERRATED_BLADES = 1123,
    WRATH_TALENT_INCINERATION = 1141,
    WRATH_TALENT_ARCANE_MEDITATION = 1142,
    WRATH_TALENT_DRUID_SURVIVAL_INSTINCTS = 1162,
    WRATH_TALENT_DIVINE_FURY = 1181,
    WRATH_TALENT_MENTAL_STRENGTH = 1201,
    WRATH_TALENT_BORROWED_TIME = 1202,
    WRATH_TALENT_IMPROVED_HEALTHSTONE = 1221,
    WRATH_TALENT_IMPROVED_IMP = 1222,
    WRATH_TALENT_DEMONIC_EMBRACE = 1223,
    WRATH_TALENT_IMPROVED_HEALTH_FUNNEL = 1224,
    WRATH_TALENT_DEMONIC_BRUTALITY = 1225,
    WRATH_TALENT_FEL_DOMINATION = 1226,
    WRATH_TALENT_MASTER_SUMMONER = 1227,
    WRATH_TALENT_FEL_VITALITY = 1242,
    WRATH_TALENT_IMPROVED_SUCCUBUS = 1243,
    WRATH_TALENT_MASTER_DEMONOLOGIST = 1244,
    WRATH_TALENT_MASTER_CONJUROR = 1261,
    WRATH_TALENT_UNHOLY_POWER = 1262,
    WRATH_TALENT_DEMONIC_KNOWLEDGE = 1263,
    WRATH_TALENT_MANA_FEED = 1281,
    WRATH_TALENT_SOUL_LINK = 1282,
    WRATH_TALENT_MOLTEN_CORE = 1283,
    WRATH_TALENT_IMPROVED_CURSE_OF_AGONY = 1284,
    WRATH_TALENT_HUNTER_LIGHTNING_REFLEXES = 1303,
    WRATH_TALENT_ENTRAPMENT = 1304,
    WRATH_TALENT_TRAP_MASTERY = 1305,
    WRATH_TALENT_LOCK_AND_LOAD = 1306,
    WRATH_TALENT_SURVIVAL_TACTICS = 1309,
    WRATH_TALENT_SUREFOOTED = 1310,
    WRATH_TALENT_HUNTER_DEFLECTION = 1311,
    WRATH_TALENT_COUNTERATTACK = 1312,
    WRATH_TALENT_KILLER_INSTINCT = 1321,
    WRATH_TALENT_BLACK_ARROW = 1322,
    WRATH_TALENT_WYVERN_STING = 1325,
    WRATH_TALENT_IMPROVED_CONCUSSIVE_SHOT = 1341,
    WRATH_TALENT_EFFICIENCY = 1342,
    WRATH_TALENT_IMPROVED_HUNTERS_MARK = 1343,
    WRATH_TALENT_LETHAL_SHOTS = 1344,
    WRATH_TALENT_AIMED_SHOT = 1345,
    WRATH_TALENT_IMPROVED_ARCANE_SHOT = 1346,
    WRATH_TALENT_BARRAGE = 1347,
    WRATH_TALENT_IMPROVED_STINGS = 1348,
    WRATH_TALENT_MORTAL_SHOTS = 1349,
    WRATH_TALENT_CONCUSSIVE_BARRAGE = 1351,
    WRATH_TALENT_READINESS = 1353,
    WRATH_TALENT_TRUESHOT_AURA = 1361,
    WRATH_TALENT_RANGED_WEAPON_SPECIALIZATION = 1362,
    WRATH_TALENT_IMPROVED_ASPECT_OF_THE_MONKEY = 1381,
    WRATH_TALENT_IMPROVED_ASPECT_OF_THE_HAWK = 1382,
    WRATH_TALENT_PATHFINDING = 1384,
    WRATH_TALENT_IMPROVED_MEND_PET = 1385,
    WRATH_TALENT_BESTIAL_WRATH = 1386,
    WRATH_TALENT_INTIMIDATION = 1387,
    WRATH_TALENT_SPIRIT_BOND = 1388,
    WRATH_TALENT_ENDURANCE_TRAINING = 1389,
    WRATH_TALENT_BESTIAL_DISCIPLINE = 1390,
    WRATH_TALENT_HUNTER_FEROCITY = 1393,
    WRATH_TALENT_HUNTER_THICK_HIDE = 1395,
    WRATH_TALENT_UNLEASHED_FURY = 1396,
    WRATH_TALENT_FRENZY = 1397,
    WRATH_TALENT_IMPROVED_BLESSING_OF_MIGHT = 1401,
    WRATH_TALENT_PALADIN_VENGEANCE = 1402,
    WRATH_TALENT_PALADIN_DEFLECTION = 1403,
    WRATH_TALENT_BENEDICTION = 1407,
    WRATH_TALENT_PALADIN_TWO_HANDED_WEAPON_SPECIALIZATION = 1410,
    WRATH_TALENT_CONVICTION = 1411,
    WRATH_TALENT_REDOUBT = 1421,
    WRATH_TALENT_IMPROVED_DEVOTION_AURA = 1422,
    WRATH_TALENT_PALADIN_TOUGHNESS = 1423,
    WRATH_TALENT_GUARDIANS_FAVOR = 1425,
    WRATH_TALENT_RECKONING = 1426,
    WRATH_TALENT_PALADIN_ONE_HANDED_WEAPON_SPECIALIZATION = 1429,
    WRATH_TALENT_HOLY_SHIELD = 1430,
    WRATH_TALENT_BLESSING_OF_SANCTUARY = 1431,
    WRATH_TALENT_SPIRITUAL_FOCUS = 1432,
    WRATH_TALENT_DIVINE_FAVOR = 1433,
    WRATH_TALENT_AURA_MASTERY = 1435,
    WRATH_TALENT_REPENTANCE = 1441,
    WRATH_TALENT_DIVINITY = 1442,
    WRATH_TALENT_IMPROVED_LAY_ON_HANDS = 1443,
    WRATH_TALENT_HEALING_LIGHT = 1444,
    WRATH_TALENT_IMPROVED_BLESSING_OF_WISDOM = 1446,
    WRATH_TALENT_DIVINE_INTELLECT = 1449,
    WRATH_TALENT_IMPROVED_CONCENTRATION_AURA = 1450,
    WRATH_TALENT_ILLUMINATION = 1461,
    WRATH_TALENT_SEALS_OF_THE_PURE = 1463,
    WRATH_TALENT_HEART_OF_THE_CRUSADER = 1464,
    WRATH_TALENT_SANCTIFIED_LIGHT = 1465,
    WRATH_TALENT_SEAL_OF_COMMAND = 1481,
    WRATH_TALENT_IMPROVED_RIGHTEOUS_FURY = 1501,
    WRATH_TALENT_HOLY_SHOCK = 1502,
    WRATH_TALENT_IMPROVED_HAMMER_OF_JUSTICE = 1521,
    WRATH_TALENT_IMPROVED_BERSERKER_RAGE = 1541,
    WRATH_TALENT_IMPROVED_EXECUTE = 1542,
    WRATH_TALENT_IMPROVED_INTERCEPT = 1543,
    WRATH_TALENT_SPIRIT_OF_REDEMPTION = 1561,
    WRATH_TALENT_WARRIOR_DUAL_WIELD_SPECIALIZATION = 1581,
    WRATH_TALENT_SHIELD_SPECIALIZATION = 1601,
    WRATH_TALENT_SAVAGE_STRIKES = 1621,
    WRATH_TALENT_SURVIVALIST = 1622,
    WRATH_TALENT_IMPROVED_TRACKING = 1623,
    WRATH_TALENT_FOCUSED_FIRE = 1624,
    WRATH_TALENT_IMPROVED_REVIVE_PET = 1625,
    WRATH_TALENT_HOLY_POWER = 1627,
    WRATH_TALENT_UNYIELDING_FAITH = 1628,
    WRATH_TALENT_PALADIN_ANTICIPATION = 1629,
    WRATH_TALENT_IMPROVED_JUDGEMENTS = 1631,
    WRATH_TALENT_EYE_FOR_AN_EYE = 1632,
    WRATH_TALENT_VINDICATION = 1633,
    WRATH_TALENT_PURSUIT_OF_JUSTICE = 1634,
    WRATH_TALENT_HOLY_REACH = 1635,
    WRATH_TALENT_BLESSED_RECOVERY = 1636,
    WRATH_TALENT_LIGHTWELL = 1637,
    WRATH_TALENT_IMPROVED_VAMPIRIC_EMBRACE = 1638,
    WRATH_TALENT_MASTER_OF_ELEMENTS = 1639,
    WRATH_TALENT_ELEMENTAL_WARDING = 1640,
    WRATH_TALENT_ELEMENTAL_REACH = 1641,
    WRATH_TALENT_EYE_OF_THE_STORM = 1642,
    WRATH_TALENT_SHAMAN_WEAPON_MASTERY = 1643,
    WRATH_TALENT_ELEMENTAL_DEVASTATION = 1645,
    WRATH_TALENT_HEALING_GRACE = 1646,
    WRATH_TALENT_IMPROVED_WINDFURY_TOTEM = 1647,
    WRATH_TALENT_HEALING_WAY = 1648,
    WRATH_TALENT_MAGE_PRECISION = 1649,
    WRATH_TALENT_MAGIC_ABSORPTION = 1650,
    WRATH_TALENT_IMPROVED_DEFENSIVE_STANCE = 1652,
    WRATH_TALENT_WARRIOR_VITALITY = 1653,
    WRATH_TALENT_SHIELD_MASTERY = 1654,
    WRATH_TALENT_IMPROVED_WHIRLWIND = 1655,
    WRATH_TALENT_WARRIOR_PRECISION = 1657,
    WRATH_TALENT_IMPROVED_BERSERKER_STANCE = 1658,
    WRATH_TALENT_RAMPAGE = 1659,
    WRATH_TALENT_FOCUSED_RAGE = 1660,
    WRATH_TALENT_ENDLESS_RAGE = 1661,
    WRATH_TALENT_SUDDEN_DEATH = 1662,
    WRATH_TALENT_SECOND_WIND = 1663,
    WRATH_TALENT_BLOOD_FRENZY = 1664,
    WRATH_TALENT_DEVASTATE = 1666,
    WRATH_TALENT_MALEDICTION = 1667,
    WRATH_TALENT_IMPROVED_HOWL_OF_TERROR = 1668,
    WRATH_TALENT_CONTAGION = 1669,
    WRATH_TALENT_UNSTABLE_AFFLICTION = 1670,
    WRATH_TALENT_DEMONIC_AEGIS = 1671,
    WRATH_TALENT_SUMMON_FELGUARD = 1672,
    WRATH_TALENT_DEMONIC_TACTICS = 1673,
    WRATH_TALENT_SHADOWFURY = 1676,
    WRATH_TALENT_SHADOW_AND_FLAME = 1677,
    WRATH_TALENT_SOUL_LEECH = 1678,
    WRATH_TALENT_NETHER_PROTECTION = 1679,
    WRATH_TALENT_DEMONIC_RESILIENCE = 1680,
    WRATH_TALENT_UNRELENTING_STORM = 1682,
    WRATH_TALENT_ELEMENTAL_PRECISION = 1685,
    WRATH_TALENT_LIGHTNING_OVERLOAD = 1686,
    WRATH_TALENT_TOTEM_OF_WRATH = 1687,
    WRATH_TALENT_UNLEASHED_RAGE = 1689,
    WRATH_TALENT_DUAL_WIELD = 1690,
    WRATH_TALENT_MENTAL_QUICKNESS = 1691,
    WRATH_TALENT_SHAMAN_DUAL_WIELD_SPECIALIZATION = 1692,
    WRATH_TALENT_SHAMANISTIC_RAGE = 1693,
    WRATH_TALENT_SHAMAN_FOCUSED_MIND = 1695,
    WRATH_TALENT_NATURES_BLESSING = 1696,
    WRATH_TALENT_IMPROVED_CHAIN_HEAL = 1697,
    WRATH_TALENT_EARTH_SHIELD = 1698,
    WRATH_TALENT_NATURES_GUARDIAN = 1699,
    WRATH_TALENT_SLEIGHT_OF_HAND = 1700,
    WRATH_TALENT_HEIGHTENED_SENSES = 1701,
    WRATH_TALENT_DEADLINESS = 1702,
    WRATH_TALENT_WEAPON_EXPERTISE = 1703,
    WRATH_TALENT_ROGUE_VITALITY = 1705,
    WRATH_TALENT_BLADE_TWISTING = 1706,
    WRATH_TALENT_NERVES_OF_STEEL = 1707,
    WRATH_TALENT_SURPRISE_ATTACKS = 1709,
    WRATH_TALENT_ENVELOPING_SHADOWS = 1711,
    WRATH_TALENT_SINISTER_CALLING = 1712,
    WRATH_TALENT_MASTER_OF_SUBTLETY = 1713,
    WRATH_TALENT_SHADOWSTEP = 1714,
    WRATH_TALENT_MASTER_POISONER = 1715,
    WRATH_TALENT_FIND_WEAKNESS = 1718,
    WRATH_TALENT_MUTILATE = 1719,
    WRATH_TALENT_FLEET_FOOTED = 1721,
    WRATH_TALENT_CHEAT_DEATH = 1722,
    WRATH_TALENT_DEADENED_NERVES = 1723,
    WRATH_TALENT_IMPROVED_BLINK = 1724,
    WRATH_TALENT_ARCANE_POTENCY = 1725,
    WRATH_TALENT_PRISMATIC_CLOAK = 1726,
    WRATH_TALENT_ARCANE_EMPOWERMENT = 1727,
    WRATH_TALENT_MIND_MASTERY = 1728,
    WRATH_TALENT_SLOW = 1729,
    WRATH_TALENT_PLAYING_WITH_FIRE = 1730,
    WRATH_TALENT_BLAZING_SPEED = 1731,
    WRATH_TALENT_MOLTEN_FURY = 1732,
    WRATH_TALENT_PYROMANIAC = 1733,
    WRATH_TALENT_EMPOWERED_FIRE = 1734,
    WRATH_TALENT_DRAGONS_BREATH = 1735,
    WRATH_TALENT_FROZEN_CORE = 1736,
    WRATH_TALENT_COLD_AS_ICE = 1737,
    WRATH_TALENT_ARCTIC_WINDS = 1738,
    WRATH_TALENT_EMPOWERED_FROSTBOLT = 1740,
    WRATH_TALENT_SUMMON_WATER_ELEMENTAL = 1741,
    WRATH_TALENT_PURE_OF_HEART = 1742,
    WRATH_TALENT_PURIFYING_POWER = 1743,
    WRATH_TALENT_BLESSED_LIFE = 1744,
    WRATH_TALENT_LIGHTS_GRACE = 1745,
    WRATH_TALENT_HOLY_GUIDANCE = 1746,
    WRATH_TALENT_DIVINE_ILLUMINATION = 1747,
    WRATH_TALENT_STOICISM = 1748,
    WRATH_TALENT_SACRED_DUTY = 1750,
    WRATH_TALENT_ARDENT_DEFENDER = 1751,
    WRATH_TALENT_COMBAT_EXPERTISE = 1753,
    WRATH_TALENT_AVENGERS_SHIELD = 1754,
    WRATH_TALENT_CRUSADE = 1755,
    WRATH_TALENT_SANCTIFIED_RETRIBUTION = 1756,
    WRATH_TALENT_DIVINE_PURPOSE = 1757,
    WRATH_TALENT_JUDGEMENTS_OF_THE_WISE = 1758,
    WRATH_TALENT_FANATICISM = 1759,
    WRATH_TALENT_SANCTITY_OF_BATTLE = 1761,
    WRATH_TALENT_QUICK_RECOVERY = 1762,
    WRATH_TALENT_SHADOW_EMBRACE = 1763,
    WRATH_TALENT_EMPOWERED_CORRUPTION = 1764,
    WRATH_TALENT_BLESSED_RESILIENCE = 1765,
    WRATH_TALENT_SURGE_OF_LIGHT = 1766,
    WRATH_TALENT_EMPOWERED_HEALING = 1767,
    WRATH_TALENT_HOLY_CONCENTRATION = 1768,
    WRATH_TALENT_ABSOLUTION = 1769,
    WRATH_TALENT_FOCUSED_POWER = 1771,
    WRATH_TALENT_ENLIGHTENMENT = 1772,
    WRATH_TALENT_IMPROVED_FLASH_HEAL = 1773,
    WRATH_TALENT_PAIN_SUPPRESSION = 1774,
    WRATH_TALENT_PRIEST_FOCUSED_MIND = 1777,
    WRATH_TALENT_SHADOW_POWER = 1778,
    WRATH_TALENT_VAMPIRIC_TOUCH = 1779,
    WRATH_TALENT_MIND_MELT = 1781,
    WRATH_TALENT_LUNAR_GUIDANCE = 1782,
    WRATH_TALENT_BALANCE_OF_POWER = 1783,
    WRATH_TALENT_DREAMSTATE = 1784,
    WRATH_TALENT_IMPROVED_FAERIE_FIRE = 1785,
    WRATH_TALENT_WRATH_OF_CENARIUS = 1786,
    WRATH_TALENT_FORCE_OF_NATURE = 1787,
    WRATH_TALENT_EMPOWERED_TOUCH = 1788,
    WRATH_TALENT_EMPOWERED_REJUVENATION = 1789,
    WRATH_TALENT_NATURAL_PERFECTION = 1790,
    WRATH_TALENT_TREE_OF_LIFE = 1791,
    WRATH_TALENT_NURTURING_INSTINCT = 1792,
    WRATH_TALENT_PRIMAL_TENACITY = 1793,
    WRATH_TALENT_SURVIVAL_OF_THE_FITTEST = 1794,
    WRATH_TALENT_PREDATORY_INSTINCTS = 1795,
    WRATH_TALENT_MANGLE = 1796,
    WRATH_TALENT_LIVING_SPIRIT = 1797,
    WRATH_TALENT_IMPROVED_LEADER_OF_THE_PACK = 1798,
    WRATH_TALENT_ANIMAL_HANDLER = 1799,
    WRATH_TALENT_FEROCIOUS_INSPIRATION = 1800,
    WRATH_TALENT_CATLIKE_REFLEXES = 1801,
    WRATH_TALENT_SERPENTS_SWIFTNESS = 1802,
    WRATH_TALENT_THE_BEAST_WITHIN = 1803,
    WRATH_TALENT_COMBAT_EXPERIENCE = 1804,
    WRATH_TALENT_CAREFUL_AIM = 1806,
    WRATH_TALENT_MASTER_MARKSMAN = 1807,
    WRATH_TALENT_SILENCING_SHOT = 1808,
    WRATH_TALENT_RESOURCEFULNESS = 1809,
    WRATH_TALENT_HUNTER_SURVIVAL_INSTINCTS = 1810,
    WRATH_TALENT_THRILL_OF_THE_HUNT = 1811,
    WRATH_TALENT_EXPOSE_WEAKNESS = 1812,
    WRATH_TALENT_MASTER_TACTICIAN = 1813,
    WRATH_TALENT_SCATTER_SHOT = 1814,
    WRATH_TALENT_CIRCLE_OF_HEALING = 1815,
    WRATH_TALENT_MISERY = 1816,
    WRATH_TALENT_BACKLASH = 1817,
    WRATH_TALENT_GO_FOR_THE_THROAT = 1818,
    WRATH_TALENT_RAPID_KILLING = 1819,
    WRATH_TALENT_HAWK_EYE = 1820,
    WRATH_TALENT_IMPROVED_BARRAGE = 1821,
    WRATH_TALENT_NATURES_MAJESTY = 1822,
    WRATH_TALENT_CRUSADER_STRIKE = 1823,
    WRATH_TALENT_IMPROVED_MORTAL_STRIKE = 1824,
    WRATH_TALENT_COMBAT_POTENCY = 1825,
    WRATH_TALENT_SPELL_POWER = 1826,
    WRATH_TALENT_IMPROVED_SLICE_AND_DICE = 1827,
    WRATH_TALENT_ARCANE_FLOWS = 1843,
    WRATH_TALENT_INCANTERS_ABSORPTION = 1844,
    WRATH_TALENT_STUDENT_OF_THE_MIND = 1845,
    WRATH_TALENT_NETHERWIND_PRESENCE = 1846,
    WRATH_TALENT_ARCANE_BARRAGE = 1847,
    WRATH_TALENT_FIERY_PAYBACK = 1848,
    WRATH_TALENT_FIRESTARTER = 1849,
    WRATH_TALENT_HOT_STREAK = 1850,
    WRATH_TALENT_BURNOUT = 1851,
    WRATH_TALENT_LIVING_BOMB = 1852,
    WRATH_TALENT_FINGERS_OF_FROST = 1853,
    WRATH_TALENT_BRAIN_FREEZE = 1854,
    WRATH_TALENT_ENDURING_WINTER = 1855,
    WRATH_TALENT_CHILLED_TO_THE_BONE = 1856,
    WRATH_TALENT_DEEP_FREEZE = 1857,
    WRATH_TALENT_FOCUSED_WILL = 1858,
    WRATH_TALENT_TRAUMA = 1859,
    WRATH_TALENT_UNRELENTING_ASSAULT = 1860,
    WRATH_TALENT_STRENGTH_OF_ARMS = 1862,
    WRATH_TALENT_BLADESTORM = 1863,
    WRATH_TALENT_INTENSIFY_RAGE = 1864,
    WRATH_TALENT_FURIOUS_ATTACKS = 1865,
    WRATH_TALENT_BLOODSURGE = 1866,
    WRATH_TALENT_TITANS_GRIP = 1867,
    WRATH_TALENT_HEROIC_FURY = 1868,
    WRATH_TALENT_SAFEGUARD = 1870,
    WRATH_TALENT_SWORD_AND_BOARD = 1871,
    WRATH_TALENT_SHOCKWAVE = 1872,
    WRATH_TALENT_IMPROVED_FELHUNTER = 1873,
    WRATH_TALENT_DEATHS_EMBRACE = 1875,
    WRATH_TALENT_EVERLASTING_AFFLICTION = 1876,
    WRATH_TALENT_ERADICATION = 1878,
    WRATH_TALENT_DEMONIC_EMPOWERMENT = 1880,
    WRATH_TALENT_IMPROVED_DEMONIC_TACTICS = 1882,
    WRATH_TALENT_FEL_SYNERGY = 1883,
    WRATH_TALENT_NEMESIS = 1884,
    WRATH_TALENT_DEMONIC_PACT = 1885,
    WRATH_TALENT_METAMORPHOSIS = 1886,
    WRATH_TALENT_MOLTEN_SKIN = 1887,
    WRATH_TALENT_BACKDRAFT = 1888,
    WRATH_TALENT_IMPROVED_SOUL_LEECH = 1889,
    WRATH_TALENT_FIRE_AND_BRIMSTONE = 1890,
    WRATH_TALENT_CHAOS_BOLT = 1891,
    WRATH_TALENT_CRITICAL_BLOCK = 1893,
    WRATH_TALENT_ASPIRATION = 1894,
    WRATH_TALENT_DIVINE_AEGIS = 1895,
    WRATH_TALENT_RAPTURE = 1896,
    WRATH_TALENT_PENANCE = 1897,
    WRATH_TALENT_TWIN_DISCIPLINES = 1898,
    WRATH_TALENT_GRACE = 1901,
    WRATH_TALENT_EMPOWERED_RENEW = 1902,
    WRATH_TALENT_TEST_OF_FAITH = 1903,
    WRATH_TALENT_SERENDIPITY = 1904,
    WRATH_TALENT_DIVINE_PROVIDENCE = 1905,
    WRATH_TALENT_IMPROVED_SHADOWFORM = 1906,
    WRATH_TALENT_TWISTED_FAITH = 1907,
    WRATH_TALENT_PSYCHIC_HORROR = 1908,
    WRATH_TALENT_PAIN_AND_SUFFERING = 1909,
    WRATH_TALENT_DISPERSION = 1910,
    WRATH_TALENT_GUARDIAN_SPIRIT = 1911,
    WRATH_TALENT_IMPROVED_MOONKIN_FORM = 1912,
    WRATH_TALENT_OWLKIN_FRENZY = 1913,
    WRATH_TALENT_PRIMAL_PRECISION = 1914,
    WRATH_TALENT_MASTER_SHAPESHIFTER = 1915,
    WRATH_TALENT_GIFT_OF_THE_EARTHMOTHER = 1916,
    WRATH_TALENT_WILD_GROWTH = 1917,
    WRATH_TALENT_REND_AND_TEAR = 1918,
    WRATH_TALENT_INFECTED_WOUNDS = 1919,
    WRATH_TALENT_IMPROVED_MANGLE = 1920,
    WRATH_TALENT_KING_OF_THE_JUNGLE = 1921,
    WRATH_TALENT_LIVING_SEED = 1922,
    WRATH_TALENT_TYPHOON = 1923,
    WRATH_TALENT_ECLIPSE = 1924,
    WRATH_TALENT_GALE_WINDS = 1925,
    WRATH_TALENT_STARFALL = 1926,
    WRATH_TALENT_BERSERK = 1927,
    WRATH_TALENT_EARTH_AND_MOON = 1928,
    WRATH_TALENT_REVITALIZE = 1929,
    WRATH_TALENT_IMPROVED_TREE_OF_LIFE = 1930,
    WRATH_TALENT_VIRULENCE = 1932,
    WRATH_TALENT_MORBIDITY = 1933,
    WRATH_TALENT_RAVENOUS_DEAD = 1934,
    WRATH_TALENT_IMPROVED_BLOOD_PRESENCE = 1936,
    WRATH_TALENT_BLADED_ARMOR = 1938,
    WRATH_TALENT_BUTCHERY = 1939,
    WRATH_TALENT_RUNE_TAP = 1941,
    WRATH_TALENT_IMPROVED_RUNE_TAP = 1942,
    WRATH_TALENT_DARK_CONVICTION = 1943,
    WRATH_TALENT_BLOODY_VENGEANCE = 1944,
    WRATH_TALENT_SUBVERSION = 1945,
    WRATH_TALENT_SCENT_OF_BLOOD = 1948,
    WRATH_TALENT_MARK_OF_BLOOD = 1949,
    WRATH_TALENT_VETERAN_OF_THE_THIRD_WAR = 1950,
    WRATH_TALENT_VENDETTA = 1953,
    WRATH_TALENT_HYSTERIA = 1954,
    WRATH_TALENT_SUDDEN_DOOM = 1955,
    WRATH_TALENT_HEART_STRIKE = 1957,
    WRATH_TALENT_MIGHT_OF_MOGRAINE = 1958,
    WRATH_TALENT_WILL_OF_THE_NECROPOLIS = 1959,
    WRATH_TALENT_BLOODWORMS = 1960,
    WRATH_TALENT_DANCING_RUNE_WEAPON = 1961,
    WRATH_TALENT_CRYPT_FEVER = 1962,
    WRATH_TALENT_EPIDEMIC = 1963,
    WRATH_TALENT_DEATH_KNIGHT_TOUGHNESS = 1968,
    WRATH_TALENT_ENDLESS_WINTER = 1971,
    WRATH_TALENT_BLACK_ICE = 1973,
    WRATH_TALENT_FROST_STRIKE = 1975,
    WRATH_TALENT_UNBREAKABLE_ARMOR = 1979,
    WRATH_TALENT_DEATHCHILL = 1980,
    WRATH_TALENT_CHILL_OF_THE_GRAVE = 1981,
    WRATH_TALENT_MASTER_OF_GHOULS = 1984,
    WRATH_TALENT_CORPSE_EXPLOSION = 1985,
    WRATH_TALENT_HOWLING_BLAST = 1989,
    WRATH_TALENT_FRIGID_DREADPLATE = 1990,
    WRATH_TALENT_RIME = 1992,
    WRATH_TALENT_MERCILESS_COMBAT = 1993,
    WRATH_TALENT_UNHOLY_BLIGHT = 1996,
    WRATH_TALENT_ACCLIMATION = 1997,
    WRATH_TALENT_TUNDRA_STALKER = 1998,
    WRATH_TALENT_HUNGERING_COLD = 1999,
    WRATH_TALENT_SUMMON_GARGOYLE = 2000,
    WRATH_TALENT_REAPING = 2001,
    WRATH_TALENT_WANDERING_PLAGUE = 2003,
    WRATH_TALENT_BLOOD_CAKED_BLADE = 2004,
    WRATH_TALENT_IMPURITY = 2005,
    WRATH_TALENT_BONE_SHIELD = 2007,
    WRATH_TALENT_OUTBREAK = 2008,
    WRATH_TALENT_MAGIC_SUPPRESSION = 2009,
    WRATH_TALENT_DIRGE = 2011,
    WRATH_TALENT_IMPROVED_UNHOLY_PRESENCE = 2013,
    WRATH_TALENT_BLOODY_STRIKES = 2015,
    WRATH_TALENT_BLADE_BARRIER = 2017,
    WRATH_TALENT_SPELL_DEFLECTION = 2018,
    WRATH_TALENT_VAMPIRIC_BLOOD = 2019,
    WRATH_TALENT_RUNIC_POWER_MASTERY = 2020,
    WRATH_TALENT_NERVES_OF_COLD_STEEL = 2022,
    WRATH_TALENT_UNHOLY_COMMAND = 2025,
    WRATH_TALENT_IMPROVED_SPIRIT_TAP = 2027,
    WRATH_TALENT_IMPROVED_FROST_PRESENCE = 2029,
    WRATH_TALENT_GLACIER_ROT = 2030,
    WRATH_TALENT_IMPROVED_ICY_TOUCH = 2031,
    WRATH_TALENT_BLOOD_GORGED = 2034,
    WRATH_TALENT_ICY_REACH = 2035,
    WRATH_TALENT_RAGE_OF_RIVENDARE = 2036,
    WRATH_TALENT_ON_A_PALE_HORSE = 2039,
    WRATH_TALENT_GUILE_OF_GOREFIEND = 2040,
    WRATH_TALENT_HAUNT = 2041,
    WRATH_TALENT_ICY_TALONS = 2042,
    WRATH_TALENT_EBON_PLAGUEBRINGER = 2043,
    WRATH_TALENT_KILLING_MACHINE = 2044,
    WRATH_TALENT_EMPOWERED_IMP = 2045,
    WRATH_TALENT_NECROSIS = 2047,
    WRATH_TALENT_ANNIHILATION = 2048,
    WRATH_TALENT_ELEMENTAL_OATH = 2049,
    WRATH_TALENT_ASTRAL_SHIFT = 2050,
    WRATH_TALENT_LAVA_FLOWS = 2051,
    WRATH_TALENT_STORM_EARTH_AND_FIRE = 2052,
    WRATH_TALENT_THUNDERSTORM = 2053,
    WRATH_TALENT_IMPROVED_STORMSTRIKE = 2054,
    WRATH_TALENT_STATIC_SHOCK = 2055,
    WRATH_TALENT_EARTHEN_POWER = 2056,
    WRATH_TALENT_MAELSTROM_WEAPON = 2057,
    WRATH_TALENT_FERAL_SPIRIT = 2058,
    WRATH_TALENT_IMPROVED_EARTH_SHIELD = 2059,
    WRATH_TALENT_BLESSING_OF_THE_ETERNALS = 2060,
    WRATH_TALENT_ANCESTRAL_AWAKENING = 2061,
    WRATH_TALENT_TIDAL_WAVES = 2063,
    WRATH_TALENT_RIPTIDE = 2064,
    WRATH_TALENT_DEADLY_BREW = 2065,
    WRATH_TALENT_TURN_THE_TABLES = 2066,
    WRATH_TALENT_BLOOD_SPATTER = 2068,
    WRATH_TALENT_FOCUSED_ATTACKS = 2069,
    WRATH_TALENT_CUT_TO_THE_CHASE = 2070,
    WRATH_TALENT_HUNGER_FOR_BLOOD = 2071,
    WRATH_TALENT_THROWING_SPECIALIZATION = 2072,
    WRATH_TALENT_UNFAIR_ADVANTAGE = 2073,
    WRATH_TALENT_SAVAGE_COMBAT = 2074,
    WRATH_TALENT_PREY_ON_THE_WEAK = 2075,
    WRATH_TALENT_KILLING_SPREE = 2076,
    WRATH_TALENT_WAYLAY = 2077,
    WRATH_TALENT_HONOR_AMONG_THIEVES = 2078,
    WRATH_TALENT_FILTHY_TRICKS = 2079,
    WRATH_TALENT_SLAUGHTER_FROM_THE_SHADOWS = 2080,
    WRATH_TALENT_SHADOW_DANCE = 2081,
    WRATH_TALENT_VICIOUS_STRIKES = 2082,
    WRATH_TALENT_MENTAL_DEXTERITY = 2083,
    WRATH_TALENT_CLEANSE_SPIRIT = 2084,
    WRATH_TALENT_GHOUL_FRENZY = 2085,
    WRATH_TALENT_DEATH_RUNE_MASTERY = 2086,
    WRATH_TALENT_EARTHS_GRASP = 2101,
    WRATH_TALENT_ABOMINATIONS_MIGHT = 2105,
    WRATH_TALENT_HUNTER_CULLING_THE_HERD = 2106,
    WRATH_TALENT_HUNTER_COBRA_REFLEXES = 2107,
    WRATH_TALENT_HUNTER_DASH = 2109,
    WRATH_TALENT_HUNTER_CULLING_THE_HERD2 = 2110,
    WRATH_TALENT_HUNTER_CHARGE = 2111,
    WRATH_TALENT_HUNTER_GREAT_STAMINA = 2112,
    WRATH_TALENT_HUNTER_NATURAL_ARMOR = 2113,
    WRATH_TALENT_HUNTER_COBRA_REFLEXES2 = 2114,
    WRATH_TALENT_HUNTER_GREAT_STAMINA2 = 2116,
    WRATH_TALENT_HUNTER_NATURAL_ARMOR2 = 2117,
    WRATH_TALENT_HUNTER_COBRA_REFLEXES3 = 2118,
    WRATH_TALENT_HUNTER_DASH2 = 2119,
    WRATH_TALENT_HUNTER_GREAT_STAMINA3 = 2120,
    WRATH_TALENT_HUNTER_NATURAL_ARMOR3 = 2121,
    WRATH_TALENT_PET_BARDING = 2122,
    WRATH_TALENT_GUARD_DOG = 2123,
    WRATH_TALENT_IMPROVED_COWER = 2124,
    WRATH_TALENT_HUNTER_SPIKED_COLLAR = 2125,
    WRATH_TALENT_HUNTER_SPIKED_COLLAR2 = 2126,
    WRATH_TALENT_HUNTER_SPIKED_COLLAR3 = 2127,
    WRATH_TALENT_BLOODTHIRSTY = 2128,
    WRATH_TALENT_SPIDERS_BITE = 2129,
    WRATH_TALENT_PIERCING_SHOTS = 2130,
    WRATH_TALENT_RAPID_RECUPERATION = 2131,
    WRATH_TALENT_WILD_QUIVER = 2132,
    WRATH_TALENT_IMPROVED_STEADY_SHOT = 2133,
    WRATH_TALENT_MARKED_FOR_DEATH = 2134,
    WRATH_TALENT_CHIMERA_SHOT = 2135,
    WRATH_TALENT_INVIGORATION = 2136,
    WRATH_TALENT_COBRA_STRIKES = 2137,
    WRATH_TALENT_ASPECT_MASTERY = 2138,
    WRATH_TALENT_BEAST_MASTERY = 2139,
    WRATH_TALENT_LONGEVITY = 2140,
    WRATH_TALENT_NOXIOUS_STINGS = 2141,
    WRATH_TALENT_POINT_OF_NO_ESCAPE = 2142,
    WRATH_TALENT_SNIPER_TRAINING = 2143,
    WRATH_TALENT_HUNTING_PARTY = 2144,
    WRATH_TALENT_EXPLOSIVE_SHOT = 2145,
    WRATH_TALENT_SANCTIFIED_WRATH = 2147,
    WRATH_TALENT_SWIFT_RETRIBUTION = 2148,
    WRATH_TALENT_RIGHTEOUS_VENGEANCE = 2149,
    WRATH_TALENT_DIVINE_STORM = 2150,
    WRATH_TALENT_HUNTER_BOARS_SPEED = 2151,
    WRATH_TALENT_HUNTER_LIONHEARTED = 2152,
    WRATH_TALENT_LICK_YOUR_WOUNDS = 2153,
    WRATH_TALENT_HUNTER_GREAT_RESISTANCE = 2154,
    WRATH_TALENT_RABID = 2155,
    WRATH_TALENT_HEART_OF_THE_PHOENIX = 2156,
    WRATH_TALENT_CALL_OF_THE_WILD = 2157,
    WRATH_TALENT_HUNTER_BOARS_SPEED2 = 2160,
    WRATH_TALENT_HUNTER_GREAT_RESISTANCE2 = 2161,
    WRATH_TALENT_HUNTER_LIONHEARTED2 = 2162,
    WRATH_TALENT_HUNTER_GRACE_OF_THE_MANTIS = 2163,
    WRATH_TALENT_HUNTER_BOARS_SPEED3 = 2165,
    WRATH_TALENT_HUNTER_CULLING_THE_HERD3 = 2166,
    WRATH_TALENT_HUNTER_LIONHEARTED3 = 2167,
    WRATH_TALENT_HUNTER_GREAT_RESISTANCE3 = 2168,
    WRATH_TALENT_INTERVENE = 2169,
    WRATH_TALENT_TAUNT = 2170,
    WRATH_TALENT_HUNTER_LAST_STAND = 2171,
    WRATH_TALENT_HUNTER_ROAR_OF_SACRIFICE = 2172,
    WRATH_TALENT_BLOOD_OF_THE_RHINO = 2173,
    WRATH_TALENT_BULLHEADED = 2175,
    WRATH_TALENT_THE_ART_OF_WAR = 2176,
    WRATH_TALENT_CORNERED = 2177,
    WRATH_TALENT_SHEATH_OF_LIGHT = 2179,
    WRATH_TALENT_WOLVERINE_BITE = 2181,
    WRATH_TALENT_OWLS_FOCUS = 2182,
    WRATH_TALENT_FEEDING_FRENZY = 2183,
    WRATH_TALENT_ROAR_OF_RECOVERY = 2184,
    WRATH_TALENT_DIVINE_STRENGTH = 2185,
    WRATH_TALENT_SACRED_CLEANSING = 2190,
    WRATH_TALENT_ENLIGHTENED_JUDGEMENTS = 2191,
    WRATH_TALENT_BEACON_OF_LIGHT = 2192,
    WRATH_TALENT_INFUSION_OF_LIGHT = 2193,
    WRATH_TALENT_GUARDED_BY_THE_LIGHT = 2194,
    WRATH_TALENT_TOUCHED_BY_THE_LIGHT = 2195,
    WRATH_TALENT_HAMMER_OF_THE_RIGHTEOUS = 2196,
    WRATH_TALENT_FOCUSED_AIM = 2197,
    WRATH_TALENT_BLESSED_HANDS = 2198,
    WRATH_TALENT_JUDGEMENTS_OF_THE_PURE = 2199,
    WRATH_TALENT_JUDGEMENTS_OF_THE_JUST = 2200,
    WRATH_TALENT_HUNTER_DIVE = 2201,
    WRATH_TALENT_HUNTER_DIVE2 = 2203,
    WRATH_TALENT_SHIELD_OF_THE_TEMPLAR = 2204,
    WRATH_TALENT_IMPROVED_FEAR = 2205,
    WRATH_TALENT_CARRION_FEEDER = 2206,
    WRATH_TALENT_HUNTER_MOBILITY = 2207,
    WRATH_TALENT_HUNTER_MOBILITY2 = 2208,
    WRATH_TALENT_MISSILE_BARRAGE = 2209,
    WRATH_TALENT_BLOOD_OF_THE_NORTH = 2210,
    WRATH_TALENT_FOCUS_MAGIC = 2211,
    WRATH_TALENT_BURNING_DETERMINATION = 2212,
    WRATH_TALENT_SHATTERED_BARRIER = 2214,
    WRATH_TALENT_LICHBORNE = 2215,
    WRATH_TALENT_SCOURGE_STRIKE = 2216,
    WRATH_TALENT_DEATH_KNIGHT_TWO_HANDED_WEAPON_SPECIALIZATION = 2217,
    WRATH_TALENT_DEATH_KNIGHT_ANTICIPATION = 2218,
    WRATH_TALENT_SWOOP = 2219,
    WRATH_TALENT_ANTI_MAGIC_ZONE = 2221,
    WRATH_TALENT_TORMENT_THE_WEAK = 2222,
    WRATH_TALENT_IMPROVED_ICY_TALONS = 2223,
    WRATH_TALENT_NIGHT_OF_THE_DEAD = 2225,
    WRATH_TALENT_DESECRATION = 2226,
    WRATH_TALENT_KINDRED_SPIRITS = 2227,
    WRATH_TALENT_HUNTER_VS_WILD = 2228,
    WRATH_TALENT_T_N_T = 2229,
    WRATH_TALENT_WRECKING_CREW = 2231,
    WRATH_TALENT_TASTE_FOR_BLOOD = 2232,
    WRATH_TALENT_IMPROVED_SLAM = 2233,
    WRATH_TALENT_UNENDING_FURY = 2234,
    WRATH_TALENT_RENEWED_HOPE = 2235,
    WRATH_TALENT_WARBRINGER = 2236,
    WRATH_TALENT_HUNTER_CHARGE2 = 2237,
    WRATH_TALENT_GENESIS = 2238,
    WRATH_TALENT_IMPROVED_INSECT_SWARM = 2239,
    WRATH_TALENT_NATURES_SPLENDOR = 2240,
    WRATH_TALENT_PROTECTOR_OF_THE_PACK = 2241,
    WRATH_TALENT_NATURAL_REACTION = 2242,
    WRATH_TALENT_RELENTLESS_STRIKES = 2244,
    WRATH_TALENT_PANDEMIC = 2245,
    WRATH_TALENT_DAMAGE_SHIELD = 2246,
    WRATH_TALENT_IMPROVED_SPELL_REFLECTION = 2247,
    WRATH_TALENT_LAVA_LASH = 2249,
    WRATH_TALENT_ARMORED_TO_THE_TEETH = 2250,
    WRATH_TALENT_SHAMANISM = 2252,
    WRATH_TALENT_HUNTER_WILD_HUNT = 2253,
    WRATH_TALENT_SHARK_ATTACK = 2254,
    WRATH_TALENT_HUNTER_WILD_HUNT2 = 2255,
    WRATH_TALENT_HUNTER_WILD_HUNT3 = 2256,
    WRATH_TALENT_HUNTER_GRACE_OF_THE_MANTIS2 = 2257,
    WRATH_TALENT_SILVERBACK = 2258,
    WRATH_TALENT_IMPROVED_DEATH_STRIKE = 2259,
    WRATH_TALENT_CHILBLAINS = 2260,
    WRATH_TALENT_DECIMATION = 2261,
    WRATH_TALENT_BOOMING_ECHOES = 2262,
    WRATH_TALENT_FROZEN_POWER = 2263,
    WRATH_TALENT_IMPROVED_BARKSKIN = 2264,
    WRATH_TALENT_PRIMAL_GORE = 2266,
    WRATH_TALENT_IMPROVED_DEVOURING_PLAGUE = 2267,
    WRATH_TALENT_REFLECTIVE_SHIELD = 2268,
    WRATH_TALENT_THUNDERSTOMP = 2277,
    WRATH_TALENT_HUNTER_ROAR_OF_SACRIFICE2 = 2278,
    WRATH_TALENT_BODY_AND_SOUL = 2279,
    WRATH_TALENT_DIVINE_SACRIFICE = 2280,
    WRATH_TALENT_DIVINE_GUARDIAN = 2281,
    WRATH_TALENT_SPIRITUAL_ATTUNEMENT = 2282,
    WRATH_TALENT_JUGGERNAUT = 2283,
    WRATH_TALENT_THREAT_OF_THASSARIAN = 2284,
    WRATH_TALENT_DESOLATION = 2285
} wrath_Talent;

typedef enum {
    WRATH_TALENT_INFO_TYPE_PLAYER = 0,
    WRATH_TALENT_INFO_TYPE_PET = 1
} wrath_TalentInfoType;

typedef enum {
    WRATH_TEXT_EMOTE_AGREE = 1,
    WRATH_TEXT_EMOTE_AMAZE = 2,
    WRATH_TEXT_EMOTE_ANGRY = 3,
    WRATH_TEXT_EMOTE_APOLOGIZE = 4,
    WRATH_TEXT_EMOTE_APPLAUD = 5,
    WRATH_TEXT_EMOTE_BASHFUL = 6,
    WRATH_TEXT_EMOTE_BECKON = 7,
    WRATH_TEXT_EMOTE_BEG = 8,
    WRATH_TEXT_EMOTE_BITE = 9,
    WRATH_TEXT_EMOTE_BLEED = 10,
    WRATH_TEXT_EMOTE_BLINK = 11,
    WRATH_TEXT_EMOTE_BLUSH = 12,
    WRATH_TEXT_EMOTE_BONK = 13,
    WRATH_TEXT_EMOTE_BORED = 14,
    WRATH_TEXT_EMOTE_BOUNCE = 15,
    WRATH_TEXT_EMOTE_BRB = 16,
    WRATH_TEXT_EMOTE_BOW = 17,
    WRATH_TEXT_EMOTE_BURP = 18,
    WRATH_TEXT_EMOTE_BYE = 19,
    WRATH_TEXT_EMOTE_CACKLE = 20,
    WRATH_TEXT_EMOTE_CHEER = 21,
    WRATH_TEXT_EMOTE_CHICKEN = 22,
    WRATH_TEXT_EMOTE_CHUCKLE = 23,
    WRATH_TEXT_EMOTE_CLAP = 24,
    WRATH_TEXT_EMOTE_CONFUSED = 25,
    WRATH_TEXT_EMOTE_CONGRATULATE = 26,
    WRATH_TEXT_EMOTE_COUGH = 27,
    WRATH_TEXT_EMOTE_COWER = 28,
    WRATH_TEXT_EMOTE_CRACK = 29,
    WRATH_TEXT_EMOTE_CRINGE = 30,
    WRATH_TEXT_EMOTE_CRY = 31,
    WRATH_TEXT_EMOTE_CURIOUS = 32,
    WRATH_TEXT_EMOTE_CURTSEY = 33,
    WRATH_TEXT_EMOTE_DANCE = 34,
    WRATH_TEXT_EMOTE_DRINK = 35,
    WRATH_TEXT_EMOTE_DROOL = 36,
    WRATH_TEXT_EMOTE_EAT = 37,
    WRATH_TEXT_EMOTE_EYE = 38,
    WRATH_TEXT_EMOTE_FART = 39,
    WRATH_TEXT_EMOTE_FIDGET = 40,
    WRATH_TEXT_EMOTE_FLEX = 41,
    WRATH_TEXT_EMOTE_FROWN = 42,
    WRATH_TEXT_EMOTE_GASP = 43,
    WRATH_TEXT_EMOTE_GAZE = 44,
    WRATH_TEXT_EMOTE_GIGGLE = 45,
    WRATH_TEXT_EMOTE_GLARE = 46,
    WRATH_TEXT_EMOTE_GLOAT = 47,
    WRATH_TEXT_EMOTE_GREET = 48,
    WRATH_TEXT_EMOTE_GRIN = 49,
    WRATH_TEXT_EMOTE_GROAN = 50,
    WRATH_TEXT_EMOTE_GROVEL = 51,
    WRATH_TEXT_EMOTE_GUFFAW = 52,
    WRATH_TEXT_EMOTE_HAIL = 53,
    WRATH_TEXT_EMOTE_HAPPY = 54,
    WRATH_TEXT_EMOTE_HELLO = 55,
    WRATH_TEXT_EMOTE_HUG = 56,
    WRATH_TEXT_EMOTE_HUNGRY = 57,
    WRATH_TEXT_EMOTE_KISS = 58,
    WRATH_TEXT_EMOTE_KNEEL = 59,
    WRATH_TEXT_EMOTE_LAUGH = 60,
    WRATH_TEXT_EMOTE_LAYDOWN = 61,
    WRATH_TEXT_EMOTE_MASSAGE = 62,
    WRATH_TEXT_EMOTE_MOAN = 63,
    WRATH_TEXT_EMOTE_MOON = 64,
    WRATH_TEXT_EMOTE_MOURN = 65,
    WRATH_TEXT_EMOTE_NO = 66,
    WRATH_TEXT_EMOTE_NOD = 67,
    WRATH_TEXT_EMOTE_NOSE_PICK = 68,
    WRATH_TEXT_EMOTE_PANIC = 69,
    WRATH_TEXT_EMOTE_PEER = 70,
    WRATH_TEXT_EMOTE_PLEAD = 71,
    WRATH_TEXT_EMOTE_POINT = 72,
    WRATH_TEXT_EMOTE_POKE = 73,
    WRATH_TEXT_EMOTE_PRAY = 74,
    WRATH_TEXT_EMOTE_ROAR = 75,
    WRATH_TEXT_EMOTE_ROFL = 76,
    WRATH_TEXT_EMOTE_RUDE = 77,
    WRATH_TEXT_EMOTE_SALUTE = 78,
    WRATH_TEXT_EMOTE_SCRATCH = 79,
    WRATH_TEXT_EMOTE_SEXY = 80,
    WRATH_TEXT_EMOTE_SHAKE = 81,
    WRATH_TEXT_EMOTE_SHOUT = 82,
    WRATH_TEXT_EMOTE_SHRUG = 83,
    WRATH_TEXT_EMOTE_SHY = 84,
    WRATH_TEXT_EMOTE_SIGH = 85,
    WRATH_TEXT_EMOTE_SIT = 86,
    WRATH_TEXT_EMOTE_SLEEP = 87,
    WRATH_TEXT_EMOTE_SNARL = 88,
    WRATH_TEXT_EMOTE_SPIT = 89,
    WRATH_TEXT_EMOTE_STARE = 90,
    WRATH_TEXT_EMOTE_SURPRISED = 91,
    WRATH_TEXT_EMOTE_SURRENDER = 92,
    WRATH_TEXT_EMOTE_TALK = 93,
    WRATH_TEXT_EMOTE_TALK_EX = 94,
    WRATH_TEXT_EMOTE_TALK_Q = 95,
    WRATH_TEXT_EMOTE_TAP = 96,
    WRATH_TEXT_EMOTE_THANK = 97,
    WRATH_TEXT_EMOTE_THREATEN = 98,
    WRATH_TEXT_EMOTE_TIRED = 99,
    WRATH_TEXT_EMOTE_VICTORY = 100,
    WRATH_TEXT_EMOTE_WAVE = 101,
    WRATH_TEXT_EMOTE_WELCOME = 102,
    WRATH_TEXT_EMOTE_WHINE = 103,
    WRATH_TEXT_EMOTE_WHISTLE = 104,
    WRATH_TEXT_EMOTE_WORK = 105,
    WRATH_TEXT_EMOTE_YAWN = 106,
    WRATH_TEXT_EMOTE_BOGGLE = 107,
    WRATH_TEXT_EMOTE_CALM = 108,
    WRATH_TEXT_EMOTE_COLD = 109,
    WRATH_TEXT_EMOTE_COMFORT = 110,
    WRATH_TEXT_EMOTE_CUDDLE = 111,
    WRATH_TEXT_EMOTE_DUCK = 112,
    WRATH_TEXT_EMOTE_INSULT = 113,
    WRATH_TEXT_EMOTE_INTRODUCE = 114,
    WRATH_TEXT_EMOTE_JK = 115,
    WRATH_TEXT_EMOTE_LICK = 116,
    WRATH_TEXT_EMOTE_LISTEN = 117,
    WRATH_TEXT_EMOTE_LOST = 118,
    WRATH_TEXT_EMOTE_MOCK = 119,
    WRATH_TEXT_EMOTE_PONDER = 120,
    WRATH_TEXT_EMOTE_POUNCE = 121,
    WRATH_TEXT_EMOTE_PRAISE = 122,
    WRATH_TEXT_EMOTE_PURR = 123,
    WRATH_TEXT_EMOTE_PUZZLE = 124,
    WRATH_TEXT_EMOTE_RAISE = 125,
    WRATH_TEXT_EMOTE_READY = 126,
    WRATH_TEXT_EMOTE_SHIMMY = 127,
    WRATH_TEXT_EMOTE_SHIVER = 128,
    WRATH_TEXT_EMOTE_SHOO = 129,
    WRATH_TEXT_EMOTE_SLAP = 130,
    WRATH_TEXT_EMOTE_SMIRK = 131,
    WRATH_TEXT_EMOTE_SNIFF = 132,
    WRATH_TEXT_EMOTE_SNUB = 133,
    WRATH_TEXT_EMOTE_SOOTHE = 134,
    WRATH_TEXT_EMOTE_STINK = 135,
    WRATH_TEXT_EMOTE_TAUNT = 136,
    WRATH_TEXT_EMOTE_TEASE = 137,
    WRATH_TEXT_EMOTE_THIRSTY = 138,
    WRATH_TEXT_EMOTE_VETO = 139,
    WRATH_TEXT_EMOTE_SNICKER = 140,
    WRATH_TEXT_EMOTE_STAND = 141,
    WRATH_TEXT_EMOTE_TICKLE = 142,
    WRATH_TEXT_EMOTE_VIOLIN = 143,
    WRATH_TEXT_EMOTE_SMILE = 163,
    WRATH_TEXT_EMOTE_RASP = 183,
    WRATH_TEXT_EMOTE_PITY = 203,
    WRATH_TEXT_EMOTE_GROWL = 204,
    WRATH_TEXT_EMOTE_BARK = 205,
    WRATH_TEXT_EMOTE_SCARED = 223,
    WRATH_TEXT_EMOTE_FLOP = 224,
    WRATH_TEXT_EMOTE_LOVE = 225,
    WRATH_TEXT_EMOTE_MOO = 226,
    WRATH_TEXT_EMOTE_COMMEND = 243,
    WRATH_TEXT_EMOTE_TRAIN = 264,
    WRATH_TEXT_EMOTE_HELPME = 303,
    WRATH_TEXT_EMOTE_INCOMING = 304,
    WRATH_TEXT_EMOTE_CHARGE = 305,
    WRATH_TEXT_EMOTE_FLEE = 306,
    WRATH_TEXT_EMOTE_ATTACK_MY_TARGET = 307,
    WRATH_TEXT_EMOTE_OOM = 323,
    WRATH_TEXT_EMOTE_FOLLOW = 324,
    WRATH_TEXT_EMOTE_WAIT = 325,
    WRATH_TEXT_EMOTE_HEAL_ME = 326,
    WRATH_TEXT_EMOTE_OPEN_FIRE = 327,
    WRATH_TEXT_EMOTE_FLIRT = 328,
    WRATH_TEXT_EMOTE_JOKE = 329,
    WRATH_TEXT_EMOTE_GOLF_CLAP = 343,
    WRATH_TEXT_EMOTE_WINK = 363,
    WRATH_TEXT_EMOTE_PAT = 364,
    WRATH_TEXT_EMOTE_SERIOUS = 365,
    WRATH_TEXT_EMOTE_MOUNT_SPECIAL = 366,
    WRATH_TEXT_EMOTE_GOOD_LUCK = 367,
    WRATH_TEXT_EMOTE_BLAME = 368,
    WRATH_TEXT_EMOTE_BLANK = 369,
    WRATH_TEXT_EMOTE_BRANDISH = 370,
    WRATH_TEXT_EMOTE_BREATH = 371,
    WRATH_TEXT_EMOTE_DISAGREE = 372,
    WRATH_TEXT_EMOTE_DOUBT = 373,
    WRATH_TEXT_EMOTE_EMBARRASS = 374,
    WRATH_TEXT_EMOTE_ENCOURAGE = 375,
    WRATH_TEXT_EMOTE_ENEMY = 376,
    WRATH_TEXT_EMOTE_EYE_BROW = 377,
    WRATH_TEXT_EMOTE_TOAST = 378,
    WRATH_TEXT_EMOTE_FAIL = 379,
    WRATH_TEXT_EMOTE_HIGH_FIVE = 380,
    WRATH_TEXT_EMOTE_ABSENT = 381,
    WRATH_TEXT_EMOTE_ARM = 382,
    WRATH_TEXT_EMOTE_AWE = 383,
    WRATH_TEXT_EMOTE_BACKPACK = 384,
    WRATH_TEXT_EMOTE_BAD_FEELING = 385,
    WRATH_TEXT_EMOTE_CHALLENGE = 386,
    WRATH_TEXT_EMOTE_CHUG = 387,
    WRATH_TEXT_EMOTE_DING = 389,
    WRATH_TEXT_EMOTE_FACE_PALM = 390,
    WRATH_TEXT_EMOTE_FAINT = 391,
    WRATH_TEXT_EMOTE_GO = 392,
    WRATH_TEXT_EMOTE_GOING = 393,
    WRATH_TEXT_EMOTE_GLOWER = 394,
    WRATH_TEXT_EMOTE_HEADACHE = 395,
    WRATH_TEXT_EMOTE_HICCUP = 396,
    WRATH_TEXT_EMOTE_HISS = 398,
    WRATH_TEXT_EMOTE_HOLD_HAND = 399,
    WRATH_TEXT_EMOTE_HURRY = 401,
    WRATH_TEXT_EMOTE_IDEA = 402,
    WRATH_TEXT_EMOTE_JEALOUS = 403,
    WRATH_TEXT_EMOTE_LUCK = 404,
    WRATH_TEXT_EMOTE_MAP = 405,
    WRATH_TEXT_EMOTE_MERCY = 406,
    WRATH_TEXT_EMOTE_MUTTER = 407,
    WRATH_TEXT_EMOTE_NERVOUS = 408,
    WRATH_TEXT_EMOTE_OFFER = 409,
    WRATH_TEXT_EMOTE_PET = 410,
    WRATH_TEXT_EMOTE_PINCH = 411,
    WRATH_TEXT_EMOTE_PROUD = 413,
    WRATH_TEXT_EMOTE_PROMISE = 414,
    WRATH_TEXT_EMOTE_PULSE = 415,
    WRATH_TEXT_EMOTE_PUNCH = 416,
    WRATH_TEXT_EMOTE_POUT = 417,
    WRATH_TEXT_EMOTE_REGRET = 418,
    WRATH_TEXT_EMOTE_REVENGE = 420,
    WRATH_TEXT_EMOTE_ROLL_EYES = 421,
    WRATH_TEXT_EMOTE_RUFFLE = 422,
    WRATH_TEXT_EMOTE_SAD = 423,
    WRATH_TEXT_EMOTE_SCOFF = 424,
    WRATH_TEXT_EMOTE_SCOLD = 425,
    WRATH_TEXT_EMOTE_SCOWL = 426,
    WRATH_TEXT_EMOTE_SEARCH = 427,
    WRATH_TEXT_EMOTE_SHAKEFIST = 428,
    WRATH_TEXT_EMOTE_SHIFTY = 429,
    WRATH_TEXT_EMOTE_SHUDDER = 430,
    WRATH_TEXT_EMOTE_SIGNAL = 431,
    WRATH_TEXT_EMOTE_SILENCE = 432,
    WRATH_TEXT_EMOTE_SINGS = 433,
    WRATH_TEXT_EMOTE_SMACK = 434,
    WRATH_TEXT_EMOTE_SNEAK = 435,
    WRATH_TEXT_EMOTE_SNEEZE = 436,
    WRATH_TEXT_EMOTE_SNORT = 437,
    WRATH_TEXT_EMOTE_SQUEAL = 438,
    WRATH_TEXT_EMOTE_STOP_ATTACK = 439,
    WRATH_TEXT_EMOTE_SUSPICIOUS = 440,
    WRATH_TEXT_EMOTE_THINK = 441,
    WRATH_TEXT_EMOTE_TRUCE = 442,
    WRATH_TEXT_EMOTE_TWIDDLE = 443,
    WRATH_TEXT_EMOTE_WARN = 444,
    WRATH_TEXT_EMOTE_SNAP = 445,
    WRATH_TEXT_EMOTE_CHARM = 446,
    WRATH_TEXT_EMOTE_COVER_EARS = 447,
    WRATH_TEXT_EMOTE_CROSS_ARMS = 448,
    WRATH_TEXT_EMOTE_LOOK = 449,
    WRATH_TEXT_EMOTE_OBJECT = 450,
    WRATH_TEXT_EMOTE_SWEAT = 451,
    WRATH_TEXT_EMOTE_YW = 453
} wrath_TextEmote;

typedef enum {
    WRATH_TIMER_TYPE_FATIGUE = 0,
    WRATH_TIMER_TYPE_BREATH = 1,
    WRATH_TIMER_TYPE_FEIGN_DEATH = 2,
    WRATH_TIMER_TYPE_ENVIRONMENTAL = 3
} wrath_TimerType;

typedef enum {
    WRATH_TITLE_EARN_STATUS_LOST = 0,
    WRATH_TITLE_EARN_STATUS_EARNED = 1
} wrath_TitleEarnStatus;

typedef enum {
    WRATH_TRADE_STATUS_BUSY = 0,
    WRATH_TRADE_STATUS_BEGIN_TRADE = 1,
    WRATH_TRADE_STATUS_OPEN_WINDOW = 2,
    WRATH_TRADE_STATUS_TRADE_CANCELED = 3,
    WRATH_TRADE_STATUS_TRADE_ACCEPT = 4,
    WRATH_TRADE_STATUS_BUSY_2 = 5,
    WRATH_TRADE_STATUS_NO_TARGET = 6,
    WRATH_TRADE_STATUS_BACK_TO_TRADE = 7,
    WRATH_TRADE_STATUS_TRADE_COMPLETE = 8,
    WRATH_TRADE_STATUS_TRADE_REJECTED = 9,
    WRATH_TRADE_STATUS_TARGET_TO_FAR = 10,
    WRATH_TRADE_STATUS_WRONG_FACTION = 11,
    WRATH_TRADE_STATUS_CLOSE_WINDOW = 12,
    WRATH_TRADE_STATUS_UNKNOWN_13 = 13,
    WRATH_TRADE_STATUS_IGNORE_YOU = 14,
    WRATH_TRADE_STATUS_YOU_STUNNED = 15,
    WRATH_TRADE_STATUS_TARGET_STUNNED = 16,
    WRATH_TRADE_STATUS_YOU_DEAD = 17,
    WRATH_TRADE_STATUS_TARGET_DEAD = 18,
    WRATH_TRADE_STATUS_YOU_LOGOUT = 19,
    WRATH_TRADE_STATUS_TARGET_LOGOUT = 20,
    WRATH_TRADE_STATUS_TRIAL_ACCOUNT = 21,
    WRATH_TRADE_STATUS_ONLY_CONJURED = 22,
    WRATH_TRADE_STATUS_NOT_ON_TAPLIST = 23
} wrath_TradeStatus;

typedef enum {
    WRATH_TRAINER_SPELL_STATE_GREEN = 0,
    WRATH_TRAINER_SPELL_STATE_RED = 1,
    WRATH_TRAINER_SPELL_STATE_GRAY = 2
} wrath_TrainerSpellState;

typedef enum {
    WRATH_TRAINING_FAILURE_REASON_UNAVAILABLE = 0,
    WRATH_TRAINING_FAILURE_REASON_NOT_ENOUGH_MONEY = 1,
    WRATH_TRAINING_FAILURE_REASON_NOT_ENOUGH_SKILL = 2
} wrath_TrainingFailureReason;

typedef enum {
    WRATH_TRANSFER_ABORT_REASON_NONE = 0,
    WRATH_TRANSFER_ABORT_REASON_ERROR = 1,
    WRATH_TRANSFER_ABORT_REASON_MAX_PLAYERS = 2,
    WRATH_TRANSFER_ABORT_REASON_NOT_FOUND = 3,
    WRATH_TRANSFER_ABORT_REASON_TOO_MANY_INSTANCES = 4,
    WRATH_TRANSFER_ABORT_REASON_ZONE_IN_COMBAT = 6,
    WRATH_TRANSFER_ABORT_REASON_INSUFFICIENT_EXPANSION_LEVEL = 7,
    WRATH_TRANSFER_ABORT_REASON_DIFFICULTY_NOT_AVAILABLE = 8,
    WRATH_TRANSFER_ABORT_REASON_UNIQUE_MESSAGE = 9,
    WRATH_TRANSFER_ABORT_REASON_TOO_MANY_REALM_INSTANCES = 10,
    WRATH_TRANSFER_ABORT_REASON_NEED_GROUP = 11,
    WRATH_TRANSFER_ABORT_REASON_NOT_FOUND1 = 12,
    WRATH_TRANSFER_ABORT_REASON_NOT_FOUND2 = 13,
    WRATH_TRANSFER_ABORT_REASON_NOT_FOUND3 = 14,
    WRATH_TRANSFER_ABORT_REASON_REALM_ONLY = 15,
    WRATH_TRANSFER_ABORT_REASON_MAP_NOT_ALLOWED = 16
} wrath_TransferAbortReason;

typedef enum {
    WRATH_UNIT_STAND_STATE_STAND = 0,
    WRATH_UNIT_STAND_STATE_SIT = 1,
    WRATH_UNIT_STAND_STATE_SIT_CHAIR = 2,
    WRATH_UNIT_STAND_STATE_SLEEP = 3,
    WRATH_UNIT_STAND_STATE_SIT_LOW_CHAIR = 4,
    WRATH_UNIT_STAND_STATE_SIT_MEDIUM_CHAIR = 5,
    WRATH_UNIT_STAND_STATE_SIT_HIGH_CHAIR = 6,
    WRATH_UNIT_STAND_STATE_DEAD = 7,
    WRATH_UNIT_STAND_STATE_KNEEL = 8,
    WRATH_UNIT_STAND_STATE_CUSTOM = 9
} wrath_UnitStandState;

typedef enum {
    WRATH_UPDATE_TYPE_VALUES = 0,
    WRATH_UPDATE_TYPE_MOVEMENT = 1,
    WRATH_UPDATE_TYPE_CREATE_OBJECT = 2,
    WRATH_UPDATE_TYPE_CREATE_OBJECT2 = 3,
    WRATH_UPDATE_TYPE_OUT_OF_RANGE_OBJECTS = 4,
    WRATH_UPDATE_TYPE_NEAR_OBJECTS = 5
} wrath_UpdateType;

typedef enum {
    WRATH_WEATHER_CHANGE_TYPE_SMOOTH = 0,
    WRATH_WEATHER_CHANGE_TYPE_INSTANT = 1
} wrath_WeatherChangeType;

typedef enum {
    WRATH_WEATHER_TYPE_FINE = 0,
    WRATH_WEATHER_TYPE_FOG = 1,
    WRATH_WEATHER_TYPE_LIGHT_RAIN = 3,
    WRATH_WEATHER_TYPE_MEDIUM_RAIN = 4,
    WRATH_WEATHER_TYPE_HEAVY_RAIN = 5,
    WRATH_WEATHER_TYPE_LIGHT_SNOW = 6,
    WRATH_WEATHER_TYPE_MEDIUM_SNOW = 7,
    WRATH_WEATHER_TYPE_HEAVY_SNOW = 8,
    WRATH_WEATHER_TYPE_LIGHT_SANDSTORM = 22,
    WRATH_WEATHER_TYPE_MEDIUM_SANDSTORM = 41,
    WRATH_WEATHER_TYPE_HEAVY_SANDSTORM = 42,
    WRATH_WEATHER_TYPE_THUNDERS = 86,
    WRATH_WEATHER_TYPE_BLACKRAIN = 90
} wrath_WeatherType;

typedef enum {
    WRATH_WORLD_RESULT_RESPONSE_SUCCESS = 0,
    WRATH_WORLD_RESULT_RESPONSE_FAILURE = 1,
    WRATH_WORLD_RESULT_RESPONSE_CANCELLED = 2,
    WRATH_WORLD_RESULT_RESPONSE_DISCONNECTED = 3,
    WRATH_WORLD_RESULT_RESPONSE_FAILED_TO_CONNECT = 4,
    WRATH_WORLD_RESULT_RESPONSE_CONNECTED = 5,
    WRATH_WORLD_RESULT_RESPONSE_VERSION_MISMATCH = 6,
    WRATH_WORLD_RESULT_CSTATUS_CONNECTING = 7,
    WRATH_WORLD_RESULT_CSTATUS_NEGOTIATING_SECURITY = 8,
    WRATH_WORLD_RESULT_CSTATUS_NEGOTIATION_COMPLETE = 9,
    WRATH_WORLD_RESULT_CSTATUS_NEGOTIATION_FAILED = 10,
    WRATH_WORLD_RESULT_CSTATUS_AUTHENTICATING = 11,
    WRATH_WORLD_RESULT_AUTH_OK = 12,
    WRATH_WORLD_RESULT_AUTH_FAILED = 13,
    WRATH_WORLD_RESULT_AUTH_REJECT = 14,
    WRATH_WORLD_RESULT_AUTH_BAD_SERVER_PROOF = 15,
    WRATH_WORLD_RESULT_AUTH_UNAVAILABLE = 16,
    WRATH_WORLD_RESULT_AUTH_SYSTEM_ERROR = 17,
    WRATH_WORLD_RESULT_AUTH_BILLING_ERROR = 18,
    WRATH_WORLD_RESULT_AUTH_BILLING_EXPIRED = 19,
    WRATH_WORLD_RESULT_AUTH_VERSION_MISMATCH = 20,
    WRATH_WORLD_RESULT_AUTH_UNKNOWN_ACCOUNT = 21,
    WRATH_WORLD_RESULT_AUTH_INCORRECT_PASSWORD = 22,
    WRATH_WORLD_RESULT_AUTH_SESSION_EXPIRED = 23,
    WRATH_WORLD_RESULT_AUTH_SERVER_SHUTTING_DOWN = 24,
    WRATH_WORLD_RESULT_AUTH_ALREADY_LOGGING_IN = 25,
    WRATH_WORLD_RESULT_AUTH_LOGIN_SERVER_NOT_FOUND = 26,
    WRATH_WORLD_RESULT_AUTH_WAIT_QUEUE = 27,
    WRATH_WORLD_RESULT_AUTH_BANNED = 28,
    WRATH_WORLD_RESULT_AUTH_ALREADY_ONLINE = 29,
    WRATH_WORLD_RESULT_AUTH_NO_TIME = 30,
    WRATH_WORLD_RESULT_AUTH_DB_BUSY = 31,
    WRATH_WORLD_RESULT_AUTH_SUSPENDED = 32,
    WRATH_WORLD_RESULT_AUTH_PARENTAL_CONTROL = 33,
    WRATH_WORLD_RESULT_AUTH_LOCKED_ENFORCED = 34,
    WRATH_WORLD_RESULT_REALM_LIST_IN_PROGRESS = 35,
    WRATH_WORLD_RESULT_REALM_LIST_SUCCESS = 36,
    WRATH_WORLD_RESULT_REALM_LIST_FAILED = 37,
    WRATH_WORLD_RESULT_REALM_LIST_INVALID = 38,
    WRATH_WORLD_RESULT_REALM_LIST_REALM_NOT_FOUND = 39,
    WRATH_WORLD_RESULT_ACCOUNT_CREATE_IN_PROGRESS = 40,
    WRATH_WORLD_RESULT_ACCOUNT_CREATE_SUCCESS = 41,
    WRATH_WORLD_RESULT_ACCOUNT_CREATE_FAILED = 42,
    WRATH_WORLD_RESULT_CHAR_LIST_RETRIEVING = 43,
    WRATH_WORLD_RESULT_CHAR_LIST_RETRIEVED = 44,
    WRATH_WORLD_RESULT_CHAR_LIST_FAILED = 45,
    WRATH_WORLD_RESULT_CHAR_CREATE_IN_PROGRESS = 46,
    WRATH_WORLD_RESULT_CHAR_CREATE_SUCCESS = 47,
    WRATH_WORLD_RESULT_CHAR_CREATE_ERROR = 48,
    WRATH_WORLD_RESULT_CHAR_CREATE_FAILED = 49,
    WRATH_WORLD_RESULT_CHAR_CREATE_NAME_IN_USE = 50,
    WRATH_WORLD_RESULT_CHAR_CREATE_DISABLED = 51,
    WRATH_WORLD_RESULT_CHAR_CREATE_PVP_TEAMS_VIOLATION = 52,
    WRATH_WORLD_RESULT_CHAR_CREATE_SERVER_LIMIT = 53,
    WRATH_WORLD_RESULT_CHAR_CREATE_ACCOUNT_LIMIT = 54,
    WRATH_WORLD_RESULT_CHAR_CREATE_SERVER_QUEUE = 55,
    WRATH_WORLD_RESULT_CHAR_CREATE_ONLY_EXISTING = 56,
    WRATH_WORLD_RESULT_CHAR_CREATE_EXPANSION = 57,
    WRATH_WORLD_RESULT_CHAR_CREATE_EXPANSION_CLASS = 58,
    WRATH_WORLD_RESULT_CHAR_CREATE_LEVEL_REQUIREMENT = 59,
    WRATH_WORLD_RESULT_CHAR_CREATE_UNIQUE_CLASS_LIMIT = 60,
    WRATH_WORLD_RESULT_CHAR_CREATE_CHARACTER_IN_GUILD = 61,
    WRATH_WORLD_RESULT_CHAR_CREATE_RESTRICTED_RACECLASS = 62,
    WRATH_WORLD_RESULT_CHAR_CREATE_CHARACTER_CHOOSE_RACE = 63,
    WRATH_WORLD_RESULT_CHAR_CREATE_CHARACTER_ARENA_LEADER = 64,
    WRATH_WORLD_RESULT_CHAR_CREATE_CHARACTER_DELETE_MAIL = 65,
    WRATH_WORLD_RESULT_CHAR_CREATE_CHARACTER_SWAP_FACTION = 66,
    WRATH_WORLD_RESULT_CHAR_CREATE_CHARACTER_RACE_ONLY = 67,
    WRATH_WORLD_RESULT_CHAR_CREATE_CHARACTER_GOLD_LIMIT = 68,
    WRATH_WORLD_RESULT_CHAR_CREATE_FORCE_LOGIN = 69,
    WRATH_WORLD_RESULT_CHAR_DELETE_IN_PROGRESS = 70,
    WRATH_WORLD_RESULT_CHAR_DELETE_SUCCESS = 71,
    WRATH_WORLD_RESULT_CHAR_DELETE_FAILED = 72,
    WRATH_WORLD_RESULT_CHAR_DELETE_FAILED_LOCKED_FOR_TRANSFER = 73,
    WRATH_WORLD_RESULT_CHAR_DELETE_FAILED_GUILD_LEADER = 74,
    WRATH_WORLD_RESULT_CHAR_DELETE_FAILED_ARENA_CAPTAIN = 75,
    WRATH_WORLD_RESULT_CHAR_LOGIN_IN_PROGRESS = 76,
    WRATH_WORLD_RESULT_CHAR_LOGIN_SUCCESS = 77,
    WRATH_WORLD_RESULT_CHAR_LOGIN_NO_WORLD = 78,
    WRATH_WORLD_RESULT_CHAR_LOGIN_DUPLICATE_CHARACTER = 79,
    WRATH_WORLD_RESULT_CHAR_LOGIN_NO_INSTANCES = 80,
    WRATH_WORLD_RESULT_CHAR_LOGIN_FAILED = 81,
    WRATH_WORLD_RESULT_CHAR_LOGIN_DISABLED = 82,
    WRATH_WORLD_RESULT_CHAR_LOGIN_NO_CHARACTER = 83,
    WRATH_WORLD_RESULT_CHAR_LOGIN_LOCKED_FOR_TRANSFER = 84,
    WRATH_WORLD_RESULT_CHAR_LOGIN_LOCKED_BY_BILLING = 85,
    WRATH_WORLD_RESULT_CHAR_LOGIN_LOCKED_BY_MOBILE_AH = 86,
    WRATH_WORLD_RESULT_CHAR_NAME_SUCCESS = 87,
    WRATH_WORLD_RESULT_CHAR_NAME_FAILURE = 88,
    WRATH_WORLD_RESULT_CHAR_NAME_NO_NAME = 89,
    WRATH_WORLD_RESULT_CHAR_NAME_TOO_SHORT = 90,
    WRATH_WORLD_RESULT_CHAR_NAME_TOO_LONG = 91,
    WRATH_WORLD_RESULT_CHAR_NAME_INVALID_CHARACTER = 92,
    WRATH_WORLD_RESULT_CHAR_NAME_MIXED_LANGUAGES = 93,
    WRATH_WORLD_RESULT_CHAR_NAME_PROFANE = 94,
    WRATH_WORLD_RESULT_CHAR_NAME_RESERVED = 95,
    WRATH_WORLD_RESULT_CHAR_NAME_INVALID_APOSTROPHE = 96,
    WRATH_WORLD_RESULT_CHAR_NAME_MULTIPLE_APOSTROPHES = 97,
    WRATH_WORLD_RESULT_CHAR_NAME_THREE_CONSECUTIVE = 98,
    WRATH_WORLD_RESULT_CHAR_NAME_INVALID_SPACE = 99,
    WRATH_WORLD_RESULT_CHAR_NAME_CONSECUTIVE_SPACES = 100,
    WRATH_WORLD_RESULT_CHAR_NAME_RUSSIAN_CONSECUTIVE_SILENT_CHARACTERS = 101,
    WRATH_WORLD_RESULT_CHAR_NAME_RUSSIAN_SILENT_CHARACTER_AT_BEGINNING_OR_END = 102,
    WRATH_WORLD_RESULT_CHAR_NAME_DECLENSION_DOESNT_MATCH_BASE_NAME = 103
} wrath_WorldResult;

typedef enum {
    WRATH_ALLOWED_CLASS_ALL = 0,
    WRATH_ALLOWED_CLASS_WARRIOR = 1,
    WRATH_ALLOWED_CLASS_PALADIN = 2,
    WRATH_ALLOWED_CLASS_HUNTER = 4,
    WRATH_ALLOWED_CLASS_ROGUE = 8,
    WRATH_ALLOWED_CLASS_PRIEST = 16,
    WRATH_ALLOWED_CLASS_DEATH_KNIGHT = 32,
    WRATH_ALLOWED_CLASS_SHAMAN = 64,
    WRATH_ALLOWED_CLASS_MAGE = 128,
    WRATH_ALLOWED_CLASS_WARLOCK = 256,
    WRATH_ALLOWED_CLASS_DRUID = 1024
} wrath_AllowedClass;

typedef enum {
    WRATH_ALLOWED_RACE_ALL = 0,
    WRATH_ALLOWED_RACE_HUMAN = 1,
    WRATH_ALLOWED_RACE_ORC = 2,
    WRATH_ALLOWED_RACE_DWARF = 4,
    WRATH_ALLOWED_RACE_NIGHT_ELF = 8,
    WRATH_ALLOWED_RACE_UNDEAD = 16,
    WRATH_ALLOWED_RACE_TAUREN = 32,
    WRATH_ALLOWED_RACE_GNOME = 64,
    WRATH_ALLOWED_RACE_TROLL = 128,
    WRATH_ALLOWED_RACE_GOBLIN = 256,
    WRATH_ALLOWED_RACE_BLOODELF = 512,
    WRATH_ALLOWED_RACE_DRAENEI = 1024,
    WRATH_ALLOWED_RACE_FEL_ORC = 2048,
    WRATH_ALLOWED_RACE_NAGA = 4096,
    WRATH_ALLOWED_RACE_BROKEN = 8192,
    WRATH_ALLOWED_RACE_SKELETON = 16384,
    WRATH_ALLOWED_RACE_VRYKUL = 32768,
    WRATH_ALLOWED_RACE_TUSKARR = 65536,
    WRATH_ALLOWED_RACE_FOREST_TROLL = 131072,
    WRATH_ALLOWED_RACE_TAUNKA = 262144,
    WRATH_ALLOWED_RACE_NORTHREND_SKELETON = 524288,
    WRATH_ALLOWED_RACE_ICE_TROLL = 1048576
} wrath_AllowedRace;

typedef enum {
    WRATH_AURA_FLAG_EMPTY = 0,
    WRATH_AURA_FLAG_EFFECT_1 = 1,
    WRATH_AURA_FLAG_EFFECT_2 = 2,
    WRATH_AURA_FLAG_EFFECT_3 = 4,
    WRATH_AURA_FLAG_NOT_CASTER = 8,
    WRATH_AURA_FLAG_SET = 9,
    WRATH_AURA_FLAG_CANCELLABLE = 16,
    WRATH_AURA_FLAG_DURATION = 32,
    WRATH_AURA_FLAG_HIDE = 64,
    WRATH_AURA_FLAG_NEGATIVE = 128
} wrath_AuraFlag;

typedef enum {
    WRATH_BAG_FAMILY_NONE = 0,
    WRATH_BAG_FAMILY_ARROWS = 1,
    WRATH_BAG_FAMILY_BULLETS = 2,
    WRATH_BAG_FAMILY_SOUL_SHARDS = 4,
    WRATH_BAG_FAMILY_LEATHERWORKING_SUPPLIES = 8,
    WRATH_BAG_FAMILY_INSCRIPTION_SUPPLIES = 16,
    WRATH_BAG_FAMILY_HERBS = 32,
    WRATH_BAG_FAMILY_ENCHANTING_SUPPLIES = 64,
    WRATH_BAG_FAMILY_ENGINEERING_SUPPLIES = 128,
    WRATH_BAG_FAMILY_KEYS = 256,
    WRATH_BAG_FAMILY_GEMS = 512,
    WRATH_BAG_FAMILY_MINING_SUPPLIES = 1024,
    WRATH_BAG_FAMILY_SOULBOUND_EQUIPMENT = 2048,
    WRATH_BAG_FAMILY_VANITY_PETS = 4096,
    WRATH_BAG_FAMILY_CURRENCY_TOKENS = 8192,
    WRATH_BAG_FAMILY_QUEST_ITEMS = 16384
} wrath_BagFamily;

typedef enum {
    WRATH_BILLING_PLAN_FLAGS_NONE = 0,
    WRATH_BILLING_PLAN_FLAGS_UNUSED = 1,
    WRATH_BILLING_PLAN_FLAGS_RECURRING_BILL = 2,
    WRATH_BILLING_PLAN_FLAGS_FREE_TRIAL = 4,
    WRATH_BILLING_PLAN_FLAGS_IGR = 8,
    WRATH_BILLING_PLAN_FLAGS_USAGE = 16,
    WRATH_BILLING_PLAN_FLAGS_TIME_MIXTURE = 32,
    WRATH_BILLING_PLAN_FLAGS_RESTRICTED = 64,
    WRATH_BILLING_PLAN_FLAGS_ENABLE_CAIS = 128
} wrath_BillingPlanFlags;

typedef enum {
    WRATH_CAST_FLAGS_NONE = 0,
    WRATH_CAST_FLAGS_PENDING = 1,
    WRATH_CAST_FLAGS_HAS_TRAJECTORY = 2,
    WRATH_CAST_FLAGS_UNKNOWN_3 = 4,
    WRATH_CAST_FLAGS_UNKNOWN_4 = 8,
    WRATH_CAST_FLAGS_UNKNOWN_5 = 16,
    WRATH_CAST_FLAGS_AMMO = 32,
    WRATH_CAST_FLAGS_UNKNOWN_7 = 64,
    WRATH_CAST_FLAGS_UNKNOWN_8 = 128,
    WRATH_CAST_FLAGS_UNKNOWN_9 = 256,
    WRATH_CAST_FLAGS_UNKNOWN_10 = 512,
    WRATH_CAST_FLAGS_UNKNOWN_11 = 1024,
    WRATH_CAST_FLAGS_POWER_LEFT_SELF = 2048,
    WRATH_CAST_FLAGS_UNKNOWN_13 = 4096,
    WRATH_CAST_FLAGS_UNKNOWN_14 = 8192,
    WRATH_CAST_FLAGS_UNKNOWN_15 = 16384,
    WRATH_CAST_FLAGS_UNKNOWN_16 = 32768,
    WRATH_CAST_FLAGS_UNKNOWN_17 = 65536,
    WRATH_CAST_FLAGS_ADJUST_MISSILE = 131072,
    WRATH_CAST_FLAGS_NO_GCD = 262144,
    WRATH_CAST_FLAGS_VISUAL_CHAIN = 524288,
    WRATH_CAST_FLAGS_UNKNOWN_21 = 1048576,
    WRATH_CAST_FLAGS_RUNE_LIST = 2097152,
    WRATH_CAST_FLAGS_UNKNOWN_23 = 4194304,
    WRATH_CAST_FLAGS_UNKNOWN_24 = 8388608,
    WRATH_CAST_FLAGS_UNKNOWN_25 = 16777216,
    WRATH_CAST_FLAGS_UNKNOWN_26 = 33554432,
    WRATH_CAST_FLAGS_IMMUNITY = 67108864,
    WRATH_CAST_FLAGS_UNKNOWN_28 = 134217728,
    WRATH_CAST_FLAGS_UNKNOWN_29 = 268435456,
    WRATH_CAST_FLAGS_UNKNOWN_30 = 536870912,
    WRATH_CAST_FLAGS_HEAL_PREDICTION = 1073741824,
    WRATH_CAST_FLAGS_UNKNOWN_32 = -2147483647 - 1
} wrath_CastFlags;

typedef enum {
    WRATH_CHANNEL_FLAGS_NONE = 0,
    WRATH_CHANNEL_FLAGS_CUSTOM = 1,
    WRATH_CHANNEL_FLAGS_TRADE = 4,
    WRATH_CHANNEL_FLAGS_NOT_LFG = 8,
    WRATH_CHANNEL_FLAGS_GENERAL = 16,
    WRATH_CHANNEL_FLAGS_CITY = 32,
    WRATH_CHANNEL_FLAGS_LFG = 64,
    WRATH_CHANNEL_FLAGS_VOICE = 128
} wrath_ChannelFlags;

typedef enum {
    WRATH_CHANNEL_MEMBER_FLAGS_NONE = 0,
    WRATH_CHANNEL_MEMBER_FLAGS_OWNER = 1,
    WRATH_CHANNEL_MEMBER_FLAGS_MODERATOR = 4,
    WRATH_CHANNEL_MEMBER_FLAGS_VOICED = 8,
    WRATH_CHANNEL_MEMBER_FLAGS_MUTED = 16,
    WRATH_CHANNEL_MEMBER_FLAGS_CUSTOM = 32,
    WRATH_CHANNEL_MEMBER_FLAGS_MICROPHONE_MUTE = 64
} wrath_ChannelMemberFlags;

typedef enum {
    WRATH_FACTION_FLAG_VISIBLE = 1,
    WRATH_FACTION_FLAG_AT_WAR = 2,
    WRATH_FACTION_FLAG_HIDDEN = 4,
    WRATH_FACTION_FLAG_INVISIBLE_FORCED = 8,
    WRATH_FACTION_FLAG_PEACE_FORCED = 16,
    WRATH_FACTION_FLAG_INACTIVE = 32,
    WRATH_FACTION_FLAG_RIVAL = 64,
    WRATH_FACTION_FLAG_SPECIAL = 128
} wrath_FactionFlag;

typedef enum {
    WRATH_GAMEOBJECT_CAST_FLAGS_LOCK_PLAYER_CAST_ANIM = 1,
    WRATH_GAMEOBJECT_CAST_FLAGS_UNKNOWN2 = 2,
    WRATH_GAMEOBJECT_CAST_FLAGS_UNKNOWN4 = 4,
    WRATH_GAMEOBJECT_CAST_FLAGS_UNKNOWN8 = 8,
    WRATH_GAMEOBJECT_CAST_FLAGS_UNKNOWN16 = 16,
    WRATH_GAMEOBJECT_CAST_FLAGS_AMMO = 32,
    WRATH_GAMEOBJECT_CAST_FLAGS_DEST_LOCATION = 64,
    WRATH_GAMEOBJECT_CAST_FLAGS_ITEM_CASTER = 256,
    WRATH_GAMEOBJECT_CAST_FLAGS_UNK200 = 512,
    WRATH_GAMEOBJECT_CAST_FLAGS_EXTRA_MESSAGE = 1024,
    WRATH_GAMEOBJECT_CAST_FLAGS_POWER_UPDATE = 2048,
    WRATH_GAMEOBJECT_CAST_FLAGS_UNK2000 = 8192,
    WRATH_GAMEOBJECT_CAST_FLAGS_UNK1000 = 4096,
    WRATH_GAMEOBJECT_CAST_FLAGS_UNK8000 = 32768,
    WRATH_GAMEOBJECT_CAST_FLAGS_ADJUST_MISSILE = 131072,
    WRATH_GAMEOBJECT_CAST_FLAGS_UNK40000 = 262144,
    WRATH_GAMEOBJECT_CAST_FLAGS_VISUAL_CHAIN = 524288,
    WRATH_GAMEOBJECT_CAST_FLAGS_RUNE_UPDATE = 2097152,
    WRATH_GAMEOBJECT_CAST_FLAGS_UNK400000 = 4194304
} wrath_GameobjectCastFlags;

typedef enum {
    WRATH_GROUP_MEMBER_ONLINE_STATUS_OFFLINE = 0,
    WRATH_GROUP_MEMBER_ONLINE_STATUS_ONLINE = 1,
    WRATH_GROUP_MEMBER_ONLINE_STATUS_PVP = 2,
    WRATH_GROUP_MEMBER_ONLINE_STATUS_DEAD = 4,
    WRATH_GROUP_MEMBER_ONLINE_STATUS_GHOST = 8,
    WRATH_GROUP_MEMBER_ONLINE_STATUS_PVP_FFA = 16,
    WRATH_GROUP_MEMBER_ONLINE_STATUS_ZONE_OUT = 32,
    WRATH_GROUP_MEMBER_ONLINE_STATUS_AFK = 64,
    WRATH_GROUP_MEMBER_ONLINE_STATUS_DND = 128
} wrath_GroupMemberOnlineStatus;

typedef enum {
    WRATH_GROUP_UPDATE_FLAGS_NONE = 0,
    WRATH_GROUP_UPDATE_FLAGS_STATUS = 1,
    WRATH_GROUP_UPDATE_FLAGS_CUR_HP = 2,
    WRATH_GROUP_UPDATE_FLAGS_MAX_HP = 4,
    WRATH_GROUP_UPDATE_FLAGS_POWER_TYPE = 8,
    WRATH_GROUP_UPDATE_FLAGS_CUR_POWER = 16,
    WRATH_GROUP_UPDATE_FLAGS_MAX_POWER = 32,
    WRATH_GROUP_UPDATE_FLAGS_LEVEL = 64,
    WRATH_GROUP_UPDATE_FLAGS_ZONE = 128,
    WRATH_GROUP_UPDATE_FLAGS_POSITION = 256,
    WRATH_GROUP_UPDATE_FLAGS_AURAS = 512,
    WRATH_GROUP_UPDATE_FLAGS_PET_GUID = 1024,
    WRATH_GROUP_UPDATE_FLAGS_PET_NAME = 2048,
    WRATH_GROUP_UPDATE_FLAGS_PET_MODEL_ID = 4096,
    WRATH_GROUP_UPDATE_FLAGS_PET_CUR_HP = 8192,
    WRATH_GROUP_UPDATE_FLAGS_PET_MAX_HP = 16384,
    WRATH_GROUP_UPDATE_FLAGS_PET_POWER_TYPE = 32768,
    WRATH_GROUP_UPDATE_FLAGS_PET_CUR_POWER = 65536,
    WRATH_GROUP_UPDATE_FLAGS_PET_MAX_POWER = 131072,
    WRATH_GROUP_UPDATE_FLAGS_PET_AURAS = 262144,
    WRATH_GROUP_UPDATE_FLAGS_VEHICLE_SEAT = 524288
} wrath_GroupUpdateFlags;

typedef enum {
    WRATH_HIT_INFO_NORMALSWING = 0,
    WRATH_HIT_INFO_UNK1 = 1,
    WRATH_HIT_INFO_AFFECTS_VICTIM = 2,
    WRATH_HIT_INFO_OFFHAND = 4,
    WRATH_HIT_INFO_UNK2 = 8,
    WRATH_HIT_INFO_MISS = 16,
    WRATH_HIT_INFO_FULL_ABSORB = 32,
    WRATH_HIT_INFO_PARTIAL_ABSORB = 64,
    WRATH_HIT_INFO_ALL_ABSORB = 96,
    WRATH_HIT_INFO_FULL_RESIST = 128,
    WRATH_HIT_INFO_PARTIAL_RESIST = 256,
    WRATH_HIT_INFO_ALL_RESIST = 384,
    WRATH_HIT_INFO_CRITICALHIT = 512,
    WRATH_HIT_INFO_UNK10 = 1024,
    WRATH_HIT_INFO_UNK11 = 2048,
    WRATH_HIT_INFO_UNK12 = 4096,
    WRATH_HIT_INFO_BLOCK = 8192,
    WRATH_HIT_INFO_UNK14 = 16384,
    WRATH_HIT_INFO_UNK15 = 32768,
    WRATH_HIT_INFO_GLANCING = 65536,
    WRATH_HIT_INFO_CRUSHING = 131072,
    WRATH_HIT_INFO_NO_ANIMATION = 262144,
    WRATH_HIT_INFO_UNK19 = 524288,
    WRATH_HIT_INFO_UNK20 = 1048576,
    WRATH_HIT_INFO_SWINGNOHITSOUND = 2097152,
    WRATH_HIT_INFO_UNK22 = 4194304,
    WRATH_HIT_INFO_RAGE_GAIN = 8388608,
    WRATH_HIT_INFO_FAKE_DAMAGE = 16777216
} wrath_HitInfo;

typedef enum {
    WRATH_ITEM_FLAG_NO_PICKUP = 1,
    WRATH_ITEM_FLAG_CONJURED = 2,
    WRATH_ITEM_FLAG_LOOTABLE = 4,
    WRATH_ITEM_FLAG_HEROIC_TOOLTIP = 8,
    WRATH_ITEM_FLAG_DEPRECATED = 16,
    WRATH_ITEM_FLAG_INDESTRUCTIBLE = 32,
    WRATH_ITEM_FLAG_PLAYER_CAST = 64,
    WRATH_ITEM_FLAG_NO_EQUIP_COOLDOWN = 128,
    WRATH_ITEM_FLAG_MULTI_LOOT_QUEST = 256,
    WRATH_ITEM_FLAG_WRAPPER = 512,
    WRATH_ITEM_FLAG_USES_RESOURCES = 1024,
    WRATH_ITEM_FLAG_MULTI_DROP = 2048,
    WRATH_ITEM_FLAG_ITEM_PURCHASE_RECORD = 4096,
    WRATH_ITEM_FLAG_CHARTER = 8192,
    WRATH_ITEM_FLAG_HAS_TEXT = 16384,
    WRATH_ITEM_FLAG_NO_DISENCHANT = 32768,
    WRATH_ITEM_FLAG_REAL_DURATION = 65536,
    WRATH_ITEM_FLAG_NO_CREATOR = 131072,
    WRATH_ITEM_FLAG_IS_PROSPECTABLE = 262144,
    WRATH_ITEM_FLAG_UNIQUE_EQUIPPED = 524288,
    WRATH_ITEM_FLAG_IGNORE_FOR_AURAS = 1048576,
    WRATH_ITEM_FLAG_IGNORE_DEFAULT_ARENA_RESTRICTIONS = 2097152,
    WRATH_ITEM_FLAG_NO_DURABILITY_LOSS = 4194304,
    WRATH_ITEM_FLAG_USE_WHEN_SHAPESHIFTED = 8388608,
    WRATH_ITEM_FLAG_HAS_QUEST_GLOW = 16777216,
    WRATH_ITEM_FLAG_HIDE_UNUSABLE_RECIPE = 33554432,
    WRATH_ITEM_FLAG_NOT_USEABLE_IN_ARENA = 67108864,
    WRATH_ITEM_FLAG_IS_BOUND_TO_ACCOUNT = 134217728,
    WRATH_ITEM_FLAG_NO_REAGENT_COST = 268435456,
    WRATH_ITEM_FLAG_IS_MILLABLE = 536870912,
    WRATH_ITEM_FLAG_REPORT_TO_GUILD_CHAT = 1073741824,
    WRATH_ITEM_FLAG_NO_PROGRESSIVE_LOOT = -2147483647 - 1
} wrath_ItemFlag;

typedef enum {
    WRATH_ITEM_FLAG2_FACTION_HORDE = 1,
    WRATH_ITEM_FLAG2_FACTION_ALLIANCE = 2,
    WRATH_ITEM_FLAG2_DONT_IGNORE_BUY_PRICE = 4,
    WRATH_ITEM_FLAG2_CLASSIFY_AS_CASTER = 8,
    WRATH_ITEM_FLAG2_CLASSIFY_AS_PHYSICAL = 16,
    WRATH_ITEM_FLAG2_EVERYONE_CAN_ROLL_NEED = 32,
    WRATH_ITEM_FLAG2_NO_TRADE_BIND_ON_ACQUIRE = 64,
    WRATH_ITEM_FLAG2_CAN_TRADE_BIND_ON_ACQUIRE = 128,
    WRATH_ITEM_FLAG2_CAN_ONLY_ROLL_GREED = 256,
    WRATH_ITEM_FLAG2_CASTER_WEAPON = 512,
    WRATH_ITEM_FLAG2_DELETE_ON_LOGIN = 1024,
    WRATH_ITEM_FLAG2_INTERNAL_ITEM = 2048,
    WRATH_ITEM_FLAG2_NO_VENDOR_VALUE = 4096,
    WRATH_ITEM_FLAG2_SHOW_BEFORE_DISCOVERED = 8192,
    WRATH_ITEM_FLAG2_OVERRIDE_GOLD_COST = 16384,
    WRATH_ITEM_FLAG2_IGNORE_DEFAULT_RATED_BG_RESTRICTIONS = 32768,
    WRATH_ITEM_FLAG2_NOT_USABLE_IN_RATED_BG = 65536,
    WRATH_ITEM_FLAG2_BNET_ACCOUNT_TRADE_OK = 131072,
    WRATH_ITEM_FLAG2_CONFIRM_BEFORE_USE = 262144,
    WRATH_ITEM_FLAG2_REEVALUATE_BONDING_ON_TRANSFORM = 524288,
    WRATH_ITEM_FLAG2_NO_TRANSFORM_ON_CHARGE_DEPLETION = 1048576,
    WRATH_ITEM_FLAG2_NO_ALTER_ITEM_VISUAL = 2097152,
    WRATH_ITEM_FLAG2_NO_SOURCE_FOR_ITEM_VISUAL = 4194304,
    WRATH_ITEM_FLAG2_IGNORE_QUALITY_FOR_ITEM_VISUAL_SOURCE = 8388608,
    WRATH_ITEM_FLAG2_NO_DURABILITY = 16777216,
    WRATH_ITEM_FLAG2_ROLE_TANK = 33554432,
    WRATH_ITEM_FLAG2_ROLE_HEALER = 67108864,
    WRATH_ITEM_FLAG2_ROLE_DAMAGE = 134217728,
    WRATH_ITEM_FLAG2_CAN_DROP_IN_CHALLENGE_MODE = 268435456,
    WRATH_ITEM_FLAG2_NEVER_STACK_IN_LOOT_UI = 536870912,
    WRATH_ITEM_FLAG2_DISENCHANT_TO_LOOT_TABLE = 1073741824,
    WRATH_ITEM_FLAG2_USED_IN_A_TRADESKILL = -2147483647 - 1
} wrath_ItemFlag2;

typedef enum {
    WRATH_LFG_UPDATE_FLAG_NONE = 0,
    WRATH_LFG_UPDATE_FLAG_CHARACTER_INFO = 1,
    WRATH_LFG_UPDATE_FLAG_COMMENT = 2,
    WRATH_LFG_UPDATE_FLAG_GROUP_LEADER = 4,
    WRATH_LFG_UPDATE_FLAG_GROUP_GUID = 8,
    WRATH_LFG_UPDATE_FLAG_ROLES = 16,
    WRATH_LFG_UPDATE_FLAG_AREA = 32,
    WRATH_LFG_UPDATE_FLAG_STATUS = 64,
    WRATH_LFG_UPDATE_FLAG_BOUND = 128
} wrath_LfgUpdateFlag;

/* standard C only allows enums to be ints. We need larger than that */
typedef uint64_t wrath_MovementFlags;
#define WRATH_MOVEMENT_FLAGS_NONE 0
#define WRATH_MOVEMENT_FLAGS_FORWARD 1
#define WRATH_MOVEMENT_FLAGS_BACKWARD 2
#define WRATH_MOVEMENT_FLAGS_STRAFE_LEFT 4
#define WRATH_MOVEMENT_FLAGS_STRAFE_RIGHT 8
#define WRATH_MOVEMENT_FLAGS_LEFT 16
#define WRATH_MOVEMENT_FLAGS_RIGHT 32
#define WRATH_MOVEMENT_FLAGS_PITCH_UP 64
#define WRATH_MOVEMENT_FLAGS_PITCH_DOWN 128
#define WRATH_MOVEMENT_FLAGS_WALKING 256
#define WRATH_MOVEMENT_FLAGS_ON_TRANSPORT 512
#define WRATH_MOVEMENT_FLAGS_DISABLE_GRAVITY 1024
#define WRATH_MOVEMENT_FLAGS_ROOT 2048
#define WRATH_MOVEMENT_FLAGS_FALLING 4096
#define WRATH_MOVEMENT_FLAGS_FALLING_FAR 8192
#define WRATH_MOVEMENT_FLAGS_PENDING_STOP 16384
#define WRATH_MOVEMENT_FLAGS_PENDING_STRAFE_STOP 32768
#define WRATH_MOVEMENT_FLAGS_PENDING_FORWARD 65536
#define WRATH_MOVEMENT_FLAGS_PENDING_BACKWARD 131072
#define WRATH_MOVEMENT_FLAGS_PENDING_STRAFE_LEFT 262144
#define WRATH_MOVEMENT_FLAGS_PENDING_STRAFE_RIGHT 524288
#define WRATH_MOVEMENT_FLAGS_PENDING_ROOT 1048576
#define WRATH_MOVEMENT_FLAGS_SWIMMING 2097152
#define WRATH_MOVEMENT_FLAGS_ASCENDING 4194304
#define WRATH_MOVEMENT_FLAGS_DESCENDING 8388608
#define WRATH_MOVEMENT_FLAGS_CAN_FLY 16777216
#define WRATH_MOVEMENT_FLAGS_FLYING 33554432
#define WRATH_MOVEMENT_FLAGS_SPLINE_ELEVATION 67108864
#define WRATH_MOVEMENT_FLAGS_SPLINE_ENABLED 134217728
#define WRATH_MOVEMENT_FLAGS_WATERWALKING 268435456
#define WRATH_MOVEMENT_FLAGS_FALLING_SLOW 536870912
#define WRATH_MOVEMENT_FLAGS_HOVER 1073741824
#define WRATH_MOVEMENT_FLAGS_NO_STRAFE 4294967296
#define WRATH_MOVEMENT_FLAGS_NO_JUMPING 8589934592
#define WRATH_MOVEMENT_FLAGS_UNK3 17179869184
#define WRATH_MOVEMENT_FLAGS_FULL_SPEED_TURNING 34359738368
#define WRATH_MOVEMENT_FLAGS_FULL_SPEED_PITCHING 68719476736
#define WRATH_MOVEMENT_FLAGS_ALWAYS_ALLOW_PITCHING 137438953472
#define WRATH_MOVEMENT_FLAGS_UNK7 274877906944
#define WRATH_MOVEMENT_FLAGS_UNK8 549755813888
#define WRATH_MOVEMENT_FLAGS_UNK9 1099511627776
#define WRATH_MOVEMENT_FLAGS_UNK10 2199023255552
#define WRATH_MOVEMENT_FLAGS_INTERPOLATED_MOVEMENT 4398046511104
#define WRATH_MOVEMENT_FLAGS_INTERPOLATED_TURNING 8796093022208
#define WRATH_MOVEMENT_FLAGS_INTERPOLATED_PITCHING 17592186044416
#define WRATH_MOVEMENT_FLAGS_UNK14 35184372088832
#define WRATH_MOVEMENT_FLAGS_UNK15 70368744177664
#define WRATH_MOVEMENT_FLAGS_UNK16 140737488355328
#define WRATH_MOVEMENT_FLAGS_ON_TRANSPORT_AND_INTERPOLATED_MOVEMENT 4398046511616

typedef enum {
    WRATH_RELATION_TYPE_NONE = 0,
    WRATH_RELATION_TYPE_FRIEND = 1,
    WRATH_RELATION_TYPE_IGNORED = 2,
    WRATH_RELATION_TYPE_MUTED = 4,
    WRATH_RELATION_TYPE_RECRUITAFRIEND = 8
} wrath_RelationType;

typedef enum {
    WRATH_ROLL_FLAGS_PASS = 1,
    WRATH_ROLL_FLAGS_NEED = 2,
    WRATH_ROLL_FLAGS_GREED = 4,
    WRATH_ROLL_FLAGS_DISENCHANT = 8
} wrath_RollFlags;

typedef enum {
    WRATH_SPELL_CAST_TARGET_FLAGS_SELF = 0,
    WRATH_SPELL_CAST_TARGET_FLAGS_UNUSED1 = 1,
    WRATH_SPELL_CAST_TARGET_FLAGS_UNIT = 2,
    WRATH_SPELL_CAST_TARGET_FLAGS_UNIT_RAID = 4,
    WRATH_SPELL_CAST_TARGET_FLAGS_UNIT_PARTY = 8,
    WRATH_SPELL_CAST_TARGET_FLAGS_ITEM = 16,
    WRATH_SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION = 32,
    WRATH_SPELL_CAST_TARGET_FLAGS_DEST_LOCATION = 64,
    WRATH_SPELL_CAST_TARGET_FLAGS_UNIT_ENEMY = 128,
    WRATH_SPELL_CAST_TARGET_FLAGS_UNIT_ALLY = 256,
    WRATH_SPELL_CAST_TARGET_FLAGS_CORPSE_ENEMY = 512,
    WRATH_SPELL_CAST_TARGET_FLAGS_UNIT_DEAD = 1024,
    WRATH_SPELL_CAST_TARGET_FLAGS_GAMEOBJECT = 2048,
    WRATH_SPELL_CAST_TARGET_FLAGS_TRADE_ITEM = 4096,
    WRATH_SPELL_CAST_TARGET_FLAGS_STRING = 8192,
    WRATH_SPELL_CAST_TARGET_FLAGS_LOCKED = 16384,
    WRATH_SPELL_CAST_TARGET_FLAGS_CORPSE_ALLY = 32768,
    WRATH_SPELL_CAST_TARGET_FLAGS_UNIT_MINIPET = 65536,
    WRATH_SPELL_CAST_TARGET_FLAGS_GLYPH_SLOT = 131072,
    WRATH_SPELL_CAST_TARGET_FLAGS_DEST_TARGET = 262144,
    WRATH_SPELL_CAST_TARGET_FLAGS_UNUSED20 = 524288,
    WRATH_SPELL_CAST_TARGET_FLAGS_UNIT_PASSENGER = 1048576
} wrath_SpellCastTargetFlags;

typedef enum {
    WRATH_SPLINE_FLAG_NONE = 0,
    WRATH_SPLINE_FLAG_DONE = 256,
    WRATH_SPLINE_FLAG_FALLING = 512,
    WRATH_SPLINE_FLAG_NO_SPLINE = 1024,
    WRATH_SPLINE_FLAG_PARABOLIC = 2048,
    WRATH_SPLINE_FLAG_WALK_MODE = 4096,
    WRATH_SPLINE_FLAG_FLYING = 8192,
    WRATH_SPLINE_FLAG_ORIENTATION_FIXED = 16384,
    WRATH_SPLINE_FLAG_FINAL_POINT = 32768,
    WRATH_SPLINE_FLAG_FINAL_TARGET = 65536,
    WRATH_SPLINE_FLAG_FINAL_ANGLE = 131072,
    WRATH_SPLINE_FLAG_CATMULLROM = 262144,
    WRATH_SPLINE_FLAG_CYCLIC = 524288,
    WRATH_SPLINE_FLAG_ENTER_CYCLE = 1048576,
    WRATH_SPLINE_FLAG_ANIMATION = 2097152,
    WRATH_SPLINE_FLAG_FROZEN = 4194304,
    WRATH_SPLINE_FLAG_TRANSPORT_ENTER = 8388608,
    WRATH_SPLINE_FLAG_TRANSPORT_EXIT = 16777216,
    WRATH_SPLINE_FLAG_UNKNOWN7 = 33554432,
    WRATH_SPLINE_FLAG_UNKNOWN8 = 67108864,
    WRATH_SPLINE_FLAG_ORIENTATION_INVERSED = 134217728,
    WRATH_SPLINE_FLAG_UNKNOWN10 = 268435456,
    WRATH_SPLINE_FLAG_UNKNOWN11 = 536870912,
    WRATH_SPLINE_FLAG_UNKNOWN12 = 1073741824,
    WRATH_SPLINE_FLAG_UNKNOWN13 = -2147483647 - 1
} wrath_SplineFlag;

typedef enum {
    WRATH_UPDATE_FLAG_NONE = 0,
    WRATH_UPDATE_FLAG_SELF = 1,
    WRATH_UPDATE_FLAG_TRANSPORT = 2,
    WRATH_UPDATE_FLAG_HAS_ATTACKING_TARGET = 4,
    WRATH_UPDATE_FLAG_LOW_GUID = 8,
    WRATH_UPDATE_FLAG_HIGH_GUID = 16,
    WRATH_UPDATE_FLAG_LIVING = 32,
    WRATH_UPDATE_FLAG_HAS_POSITION = 64,
    WRATH_UPDATE_FLAG_VEHICLE = 128,
    WRATH_UPDATE_FLAG_POSITION = 256,
    WRATH_UPDATE_FLAG_ROTATION = 512
} wrath_UpdateFlag;

typedef enum {
    WRATH_VICTIM_STATE_INTACT = 0,
    WRATH_VICTIM_STATE_HIT = 1,
    WRATH_VICTIM_STATE_DODGE = 2,
    WRATH_VICTIM_STATE_PARRY = 3,
    WRATH_VICTIM_STATE_INTERRUPT = 4,
    WRATH_VICTIM_STATE_BLOCKS = 5,
    WRATH_VICTIM_STATE_EVADES = 6,
    WRATH_VICTIM_STATE_IS_IMMUNE = 7,
    WRATH_VICTIM_STATE_DEFLECTS = 8
} wrath_VictimState;

#define WRATH_HEADERS_LENGTH 42
#define WRATH_VALUES_LENGTH 1325

typedef struct {
    uint32_t headers[WRATH_HEADERS_LENGTH];
    uint32_t values[WRATH_VALUES_LENGTH];
} wrath_UpdateMask;

WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_object_guid_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_object_guid_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_object_type_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_object_type_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_object_entry_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_object_entry_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_object_scale_x_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_object_scale_x_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_owner_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_item_owner_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_contained_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_item_contained_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_creator_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_item_creator_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_giftcreator_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_item_giftcreator_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_stack_count_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_stack_count_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_duration_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_duration_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_spell_charges_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_spell_charges_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_flags_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_flags_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_1_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_1_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_1_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_1_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_2_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_2_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_2_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_2_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_3_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_3_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_3_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_3_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_4_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_4_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_4_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_4_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_5_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_5_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_5_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_5_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_6_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_6_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_6_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_6_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_7_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_7_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_7_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_7_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_8_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_8_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_8_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_8_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_9_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_9_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_9_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_9_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_10_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_10_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_10_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_10_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_11_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_11_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_11_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_11_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_12_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_enchantment_12_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_enchantment_12_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_item_enchantment_12_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_property_seed_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_property_seed_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_random_properties_id_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_random_properties_id_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_durability_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_durability_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_maxdurability_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_maxdurability_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_item_create_played_time_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_item_create_played_time_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_container_num_slots_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_container_num_slots_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_container_slot_1_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_container_slot_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_charm_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_unit_charm_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_summon_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_unit_summon_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_critter_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_unit_critter_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_charmedby_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_unit_charmedby_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_summonedby_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_unit_summonedby_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_createdby_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_unit_createdby_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_target_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_unit_target_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_channel_object_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_unit_channel_object_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_channel_spell_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_channel_spell_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_bytes_0_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_unit_bytes_0_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_health_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_health_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_power1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_power2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power3_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_power3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power4_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_power4_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_power5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power6_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_power6_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power7_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_power7_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxhealth_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_maxhealth_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxpower1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_maxpower1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxpower2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_maxpower2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxpower3_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_maxpower3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxpower4_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_maxpower4_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxpower5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_maxpower5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxpower6_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_maxpower6_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxpower7_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_maxpower7_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power_regen_flat_modifier_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_power_regen_flat_modifier_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power_regen_interrupted_flat_modifier_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_power_regen_interrupted_flat_modifier_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_level_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_level_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_factiontemplate_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_factiontemplate_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_virtual_item_slot_id_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_virtual_item_slot_id_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_flags_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_flags_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_flags_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_flags_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_aurastate_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_aurastate_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_baseattacktime_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_baseattacktime_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_rangedattacktime_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_rangedattacktime_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_boundingradius_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_boundingradius_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_combatreach_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_combatreach_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_displayid_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_displayid_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_nativedisplayid_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_nativedisplayid_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_mountdisplayid_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_mountdisplayid_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_mindamage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_mindamage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxdamage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_maxdamage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_minoffhanddamage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_minoffhanddamage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxoffhanddamage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_maxoffhanddamage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_bytes_1_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_unit_bytes_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_petnumber_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_petnumber_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_pet_name_timestamp_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_pet_name_timestamp_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_petexperience_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_petexperience_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_petnextlevelexp_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_petnextlevelexp_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_dynamic_flags_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_dynamic_flags_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_mod_cast_speed_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_mod_cast_speed_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_created_by_spell_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_created_by_spell_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_npc_flags_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_npc_flags_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_npc_emotestate_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_npc_emotestate_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_strength_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_strength_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_agility_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_agility_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_stamina_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_stamina_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_intellect_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_intellect_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_spirit_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_spirit_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_posstat0_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_posstat0_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_posstat1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_posstat1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_posstat2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_posstat2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_posstat3_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_posstat3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_posstat4_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_posstat4_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_negstat0_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_negstat0_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_negstat1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_negstat1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_negstat2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_negstat2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_negstat3_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_negstat3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_negstat4_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_negstat4_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_resistances_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_resistances_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_resistancebuffmodspositive_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_resistancebuffmodspositive_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_resistancebuffmodsnegative_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_resistancebuffmodsnegative_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_base_mana_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_base_mana_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_base_health_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_base_health_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_bytes_2_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_unit_bytes_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_attack_power_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_attack_power_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_attack_power_mods_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_unit_attack_power_mods_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_attack_power_multiplier_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_attack_power_multiplier_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_ranged_attack_power_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_ranged_attack_power_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_ranged_attack_power_mods_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_unit_ranged_attack_power_mods_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_ranged_attack_power_multiplier_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_ranged_attack_power_multiplier_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_minrangeddamage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_minrangeddamage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxrangeddamage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_maxrangeddamage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power_cost_modifier_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_unit_power_cost_modifier_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_power_cost_multiplier_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_power_cost_multiplier_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_maxhealthmodifier_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_maxhealthmodifier_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_unit_hoverheight_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_unit_hoverheight_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_duel_arbiter_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_player_duel_arbiter_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_flags_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_flags_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_guildid_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_guildid_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_guildrank_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_guildrank_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_field_bytes_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_player_field_bytes_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_bytes_2_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_player_bytes_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_bytes_3_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_player_bytes_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_duel_team_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_duel_team_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_guild_timestamp_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_guild_timestamp_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_1_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_1_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_1_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_1_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_1_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_1_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_1_4_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_1_4_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_2_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_2_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_2_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_2_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_2_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_2_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_2_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_2_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_3_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_3_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_3_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_3_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_3_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_3_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_3_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_3_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_4_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_4_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_4_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_4_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_4_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_4_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_4_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_4_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_5_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_5_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_5_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_5_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_5_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_5_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_5_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_5_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_6_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_6_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_6_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_6_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_6_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_6_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_6_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_6_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_7_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_7_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_7_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_7_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_7_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_7_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_7_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_7_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_8_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_8_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_8_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_8_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_8_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_8_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_8_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_8_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_9_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_9_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_9_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_9_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_9_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_9_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_9_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_9_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_10_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_10_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_10_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_10_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_10_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_10_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_10_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_10_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_11_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_11_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_11_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_11_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_11_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_11_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_11_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_11_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_12_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_12_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_12_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_12_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_12_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_12_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_12_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_12_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_13_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_13_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_13_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_13_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_13_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_13_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_13_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_13_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_14_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_14_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_14_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_14_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_14_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_14_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_14_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_14_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_15_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_15_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_15_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_15_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_15_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_15_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_15_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_15_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_16_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_16_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_16_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_16_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_16_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_16_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_16_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_16_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_17_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_17_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_17_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_17_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_17_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_17_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_17_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_17_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_18_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_18_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_18_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_18_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_18_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_18_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_18_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_18_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_19_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_19_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_19_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_19_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_19_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_19_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_19_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_19_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_20_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_20_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_20_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_20_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_20_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_20_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_20_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_20_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_21_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_21_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_21_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_21_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_21_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_21_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_21_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_21_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_22_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_22_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_22_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_22_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_22_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_22_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_22_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_22_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_23_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_23_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_23_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_23_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_23_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_23_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_23_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_23_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_24_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_24_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_24_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_24_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_24_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_24_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_24_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_24_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_25_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_25_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_25_2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_25_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_25_3_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_quest_log_25_3_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_quest_log_25_5_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_quest_log_25_5_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_visible_item_item_set(wrath_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_visible_item_item_get(const wrath_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_visible_item_enchants_set(wrath_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_visible_item_enchants_get(const wrath_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_chosen_title_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_chosen_title_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_fake_inebriation_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_fake_inebriation_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_player_field_inv_get(const wrath_UpdateMask* mask, wrath_ItemSlot def);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_field_inv_set(wrath_UpdateMask* mask, wrath_ItemSlot def, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_farsight_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_player_farsight_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_known_titles_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_player_known_titles_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_known_titles1_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_player_known_titles1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_known_titles2_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_player_known_titles2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_known_currencies_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_player_known_currencies_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_xp_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_xp_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_next_level_xp_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_next_level_xp_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_skill_info_skill_set(wrath_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_skill_info_skill_get(const wrath_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_skill_info_skill_step_set(wrath_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_skill_info_skill_step_get(const wrath_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_skill_info_minimum_set(wrath_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_skill_info_minimum_get(const wrath_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_skill_info_maximum_set(wrath_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_skill_info_maximum_get(const wrath_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_skill_info_permanent_bonus_set(wrath_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_skill_info_permanent_bonus_get(const wrath_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_skill_info_temporary_bonus_set(wrath_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_skill_info_temporary_bonus_get(const wrath_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_character_points1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_character_points1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_character_points2_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_character_points2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_track_creatures_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_track_creatures_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_track_resources_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_track_resources_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_block_percentage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_block_percentage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_dodge_percentage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_dodge_percentage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_parry_percentage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_parry_percentage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_expertise_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_expertise_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_offhand_expertise_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_offhand_expertise_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_crit_percentage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_crit_percentage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_ranged_crit_percentage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_ranged_crit_percentage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_offhand_crit_percentage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_offhand_crit_percentage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_spell_crit_percentage1_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_spell_crit_percentage1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_shield_block_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_shield_block_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_shield_block_crit_percentage_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_shield_block_crit_percentage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_explored_zones_1_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_player_explored_zones_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_rest_state_experience_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_rest_state_experience_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_coinage_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_coinage_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_mod_damage_done_pos_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_mod_damage_done_pos_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_mod_damage_done_neg_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_mod_damage_done_neg_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_mod_damage_done_pct_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_mod_damage_done_pct_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_mod_healing_done_pos_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_mod_healing_done_pos_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_mod_healing_pct_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_mod_healing_pct_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_mod_healing_done_pct_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_mod_healing_done_pct_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_mod_target_resistance_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_mod_target_resistance_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_mod_target_physical_resistance_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_mod_target_physical_resistance_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_features_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_player_features_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_ammo_id_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_ammo_id_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_self_res_spell_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_self_res_spell_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_pvp_medals_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_pvp_medals_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_buyback_price_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_buyback_price_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_buyback_timestamp_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_buyback_timestamp_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_kills_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_player_kills_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_today_contribution_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_today_contribution_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_yesterday_contribution_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_yesterday_contribution_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_lifetime_honorbale_kills_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_lifetime_honorbale_kills_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_bytes2_glow_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_player_bytes2_glow_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_watched_faction_index_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_watched_faction_index_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_combat_rating_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_combat_rating_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_arena_team_info_1_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_arena_team_info_1_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_honor_currency_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_honor_currency_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_arena_currency_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_arena_currency_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_max_level_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_max_level_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_daily_quests_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_daily_quests_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_rune_regen_1_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_player_rune_regen_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_no_reagent_cost_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_no_reagent_cost_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_glyph_slots_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_glyph_slots_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_glyphs_1_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_glyphs_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_glyphs_enabled_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_glyphs_enabled_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_player_pet_spell_power_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_player_pet_spell_power_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_object_created_by_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_object_created_by_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_game_object_displayid_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_game_object_displayid_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_game_object_flags_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_game_object_flags_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_game_object_parentrotation_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_game_object_parentrotation_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_game_object_dynamic_set(wrath_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts wrath_update_mask_game_object_dynamic_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_game_object_faction_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_game_object_faction_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_game_object_level_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_game_object_level_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_game_object_bytes_1_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_game_object_bytes_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_dynamic_object_caster_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_dynamic_object_caster_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_dynamic_object_bytes_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_dynamic_object_bytes_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_dynamic_object_spellid_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_dynamic_object_spellid_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_dynamic_object_radius_set(wrath_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float wrath_update_mask_dynamic_object_radius_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_dynamic_object_casttime_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_dynamic_object_casttime_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_corpse_owner_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_corpse_owner_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_corpse_party_set(wrath_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t wrath_update_mask_corpse_party_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_corpse_display_id_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_corpse_display_id_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_corpse_item_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_corpse_item_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_corpse_bytes_1_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_corpse_bytes_1_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_corpse_bytes_2_set(wrath_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes wrath_update_mask_corpse_bytes_2_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_corpse_guild_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_corpse_guild_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_corpse_flags_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_corpse_flags_get(const wrath_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void wrath_update_mask_corpse_dynamic_flags_set(wrath_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t wrath_update_mask_corpse_dynamic_flags_get(const wrath_UpdateMask* mask);

#define WRATH_ENCHANT_MASK_LENGTH 32

typedef struct {
    uint16_t values[WRATH_ENCHANT_MASK_LENGTH];
} wrath_EnchantMask;

/* Used in the `AchievementDoneArray` built-in type. */
typedef struct {
    uint32_t achievement;
    uint32_t time;

} wrath_AchievementDone;

/* Used in the `AchievementInProgressArray` built-in type. */
typedef struct {
    uint32_t achievement;
    uint64_t counter;
    uint64_t player;
    bool timed_criteria_failed;
    uint32_t progress_date;
    uint32_t time_since_progress;
    uint32_t time_since_progress2;

} wrath_AchievementInProgress;

typedef struct {
    uint16_t action;
    uint8_t action_type;
    uint8_t misc;

} wrath_ActionButton;

typedef struct {
    /* Other emus hardcode this to 2. More research is required */
    uint8_t addon_type;
    /* Other emus hardcode this to 1. */
    uint8_t uses_crc;
    bool uses_diffent_public_key;
    /* Other emus hardcode this to 0 */
    uint32_t unknown1;
    /* Other emus hardcode this to 0 */
    uint8_t unknown2;

} wrath_Addon;

typedef struct {
    uint32_t amount_of_addons;
    wrath_Addon* addons;
} wrath_AddonArray;

typedef struct {
    uint64_t guid;
    bool online;
    char* name;
    uint8_t level;
    wrath_Class class_type;
    uint32_t games_played_this_week;
    uint32_t wins_this_week;
    uint32_t games_played_this_season;
    uint32_t wins_this_season;
    uint32_t personal_rating;

} wrath_ArenaTeamMember;

typedef struct {
    uint32_t enchant_id;
    uint32_t enchant_duration;
    uint32_t enchant_charges;

} wrath_AuctionEnchantment;

typedef struct {
    uint32_t id;
    uint32_t item;
    wrath_AuctionEnchantment enchantments[7];
    uint32_t item_random_property_id;
    uint32_t item_suffix_factor;
    uint32_t item_count;
    uint32_t item_charges;
    /* mangosone: item flags (dynamic?) (0x04 no lockId?) */
    uint32_t item_flags;
    uint64_t item_owner;
    uint32_t start_bid;
    uint32_t minimum_bid;
    uint32_t buyout_amount;
    uint32_t time_left;
    uint64_t highest_bidder;
    uint32_t highest_bid;

} wrath_AuctionListItem;

typedef struct {
    uint8_t column;
    uint8_t reversed;

} wrath_AuctionSort;

typedef struct {
    uint32_t aura;
    uint8_t unknown;

} wrath_Aura;

typedef struct {
    wrath_AuraType aura_type;
    uint32_t damage1;
    uint32_t overkill_damage;
    wrath_SpellSchool school;
    uint32_t absorb1;
    /* vmangos: Sent as int32 */
    uint32_t resisted;
    /* new 3.1.2 critical tick */
    bool critical1;
    uint32_t damage2;
    uint32_t over_damage;
    uint32_t absorb2;
    /* new 3.1.2 critical tick */
    bool critical2;
    /* vmangos: A miscvalue that is dependent on what the aura will do, this is usually decided by the AuraType, ie: with AuraType::SPELL_AURA_MOD_BASE_RESISTANCE_PCT this value could be SpellSchoolMask::SPELL_SCHOOL_MASK_NORMAL which would tell the aura that it should change armor.  If Modifier::m_auraname would have been AuraType::SPELL_AURA_MOUNTED then m_miscvalue would have decided which model the mount should have */
    uint32_t misc_value1;
    uint32_t damage3;
    /* vmangos: A miscvalue that is dependent on what the aura will do, this is usually decided by the AuraType, ie: with AuraType::SPELL_AURA_MOD_BASE_RESISTANCE_PCT this value could be SpellSchoolMask::SPELL_SCHOOL_MASK_NORMAL which would tell the aura that it should change armor.  If Modifier::m_auraname would have been AuraType::SPELL_AURA_MOUNTED then m_miscvalue would have decided which model the mount should have */
    uint32_t misc_value2;
    uint32_t damage4;
    float gain_multiplier;

} wrath_AuraLog;

typedef struct {
    uint8_t visual_slot;
    uint32_t spell;
    wrath_AuraFlag flags;
    uint8_t level;
    uint8_t aura_stack_count;
    uint64_t caster;
    uint32_t duration;
    uint32_t time_left;

} wrath_AuraUpdate;

typedef struct {
    uint32_t flags;
    uint32_t stacks_per_day;

} wrath_BankTab;

typedef struct {
    uint64_t player;
    float position_x;
    float position_y;

} wrath_BattlegroundPlayerPosition;

typedef struct {
    uint64_t guid;
    uint8_t status;
    uint8_t rank;

} wrath_CalendarInvitee;

typedef struct {
    uint64_t member;
    uint8_t level;

} wrath_CalendarMember;

typedef struct {
    uint64_t invitee;
    uint8_t level;
    uint8_t status;
    uint8_t rank;
    uint8_t guild_member;
    uint64_t invite_id;
    uint32_t status_time;
    char* text;

} wrath_CalendarSendInvitee;

typedef struct {
    uint64_t guid;
    wrath_ChannelMemberFlags member_flags;

} wrath_ChannelMember;

typedef struct {
    uint32_t equipment_display_id;
    wrath_InventoryType inventory_type;
    uint32_t enchantment;

} wrath_CharacterGear;

typedef struct {
    uint64_t guid;
    char* name;
    wrath_Race race;
    wrath_Class class_type;
    wrath_Gender gender;
    uint8_t skin;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;
    uint8_t level;
    wrath_Area area;
    wrath_Map map;
    all_Vector3d position;
    uint32_t guild_id;
    uint32_t flags;
    uint32_t recustomization_flags;
    bool first_login;
    uint32_t pet_display_id;
    uint32_t pet_level;
    wrath_CreatureFamily pet_family;
    wrath_CharacterGear equipment[23];

} wrath_Character;

typedef struct {
    uint16_t spell_id;
    /* cmangos/mangoszero: cast item id */
    uint16_t item_id;
    uint16_t spell_category;
    uint32_t cooldown;
    uint32_t category_cooldown;

} wrath_CooldownSpell;

typedef struct {
    uint32_t spell_school_mask;
    /* arcemu sends the same data in `damage_uint`. */
    float damage_float;
    /* arcemu sends the same data in `damage_float`. */
    uint32_t damage_uint;

} wrath_DamageInfo;

typedef struct {
    uint32_t spell;
    wrath_DispelMethod method;

} wrath_DispelledSpell;

typedef struct {
    uint64_t item;
    uint8_t source_bag;
    uint8_t source_slot;

} wrath_EquipmentSet;

typedef struct {
    uint64_t guid;
    char* name;
    char* icon_name;
    uint64_t equipment[19];

} wrath_EquipmentSetListItem;

typedef struct {
    wrath_FactionFlag flag;
    uint32_t standing;

} wrath_FactionInitializer;

typedef struct {
    wrath_Faction faction;
    uint32_t standing;

} wrath_FactionStanding;

typedef struct {
    wrath_Faction faction;
    uint32_t reputation_rank;

} wrath_ForcedReaction;

typedef struct {
    /* cmangos: questions found in GMSurveyQuestions.dbc
ref to i'th GMSurveySurveys.dbc field (all fields in that dbc point to fields in GMSurveyQuestions.dbc) */
    uint32_t question_id;
    /* Rating: hardcoded limit of 0-5 in pre-Wrath, ranges defined in GMSurveyAnswers.dbc Wrath+ */
    uint8_t answer;
    /* Usage: `GMSurveyAnswerSubmit(question, rank, comment)`
cmangos: Unused in stock UI, can be only set by calling Lua function */
    char* comment;

} wrath_GmSurveyQuestion;

typedef struct {
    /* vmangos: sets to loop index */
    uint32_t id;
    uint8_t item_icon;
    /* vmangos: makes pop up box password */
    bool coded;
    /* mangosone: 2.0.3 */
    uint32_t money_required;
    char* message;
    /* mangosone: related to money pop up box, 2.0.3, max 0x800 */
    char* accept_text;

} wrath_GossipItem;

typedef struct {
    char* name;
    uint64_t guid;
    bool is_online;
    uint8_t group_id;
    /* mangosone: 0x2 main assist, 0x4 main tank */
    uint8_t flags;
    uint8_t lfg_roles;

} wrath_GroupListMember;

typedef struct {
    uint32_t rights;
    uint32_t slots_per_day;

} wrath_GuildBankRights;

typedef struct {
    uint8_t socket_index;
    uint32_t gem;

} wrath_GuildBankSocket;

typedef struct {
    uint8_t slot;
    uint32_t item;
    /* 3.3.0 (0x8000, 0x8020) */
    uint32_t unknown1;
    VariableItemRandomProperty item_random_property_id;
    uint32_t amount_of_items;
    uint32_t unknown2;
    uint8_t unknown3;
    uint8_t amount_of_sockets;
    wrath_GuildBankSocket* sockets;

} wrath_GuildBankSlot;

typedef struct {
    char* tab_name;
    char* tab_icon;

} wrath_GuildBankTab;

typedef struct {
    wrath_GuildEvent event;
    uint64_t player1;
    uint64_t player2;
    uint8_t new_rank;
    uint32_t unix_time;

} wrath_GuildLogEvent;

typedef struct {
    uint64_t guid;
    /* arcemu: high guid */
    uint32_t unknown;
    wrath_GuildMemberStatus status;
    char* name;
    uint32_t rank;
    uint8_t level;
    wrath_Class class_type;
    wrath_Gender gender;
    wrath_Area area;
    float time_offline;
    char* public_note;
    char* officer_note;

} wrath_GuildMember;

typedef struct {
    uint32_t rights;
    uint32_t money_per_day;
    wrath_GuildBankRights bank_tab_rights[6];

} wrath_GuildRights;

typedef struct {
    /* cmangos/mangoszero: only send 'first' part of spell */
    uint32_t spell_id;
    /* cmangos/mangoszero: sets to 0
cmangos/mangoszero: it's not slot id */
    uint16_t unknown1;

} wrath_InitialSpell;

typedef struct {
    wrath_Talent talent;
    uint8_t max_rank;

} wrath_InspectTalent;

typedef struct {
    uint32_t item;
    wrath_EnchantMask enchant_mask;
    uint16_t unknown1;
    uint64_t creator;
    uint32_t unknown2;

} wrath_InspectTalentGear;

typedef struct {
    uint8_t amount_of_talents;
    wrath_InspectTalent* talents;

} wrath_InspectTalentSpec;

typedef struct {
    float damage_minimum;
    float damage_maximum;
    wrath_SpellSchool school;

} wrath_ItemDamageType;

typedef struct {
    uint32_t item;
    uint32_t amount;

} wrath_ItemRefundExtra;

typedef struct {
    uint32_t color;
    uint32_t content;

} wrath_ItemSocket;

typedef struct {
    uint32_t spell;
    wrath_SpellTriggerType spell_trigger;
    /* let the database control the sign here. negative means that the item should be consumed once the charges are consumed. */
    int32_t spell_charges;
    int32_t spell_cooldown;
    uint32_t spell_category;
    int32_t spell_category_cooldown;

} wrath_ItemSpells;

typedef struct {
    uint32_t stat_type;
    int32_t value;

} wrath_ItemStat;

typedef struct {
    uint32_t item;
    uint32_t display_id;
    uint32_t amount_of_rewards;

} wrath_LfgQuestReward;

typedef struct {
    uint32_t dungeon_entry;
    bool done;
    uint32_t quest_reward;
    uint32_t xp_reward;
    uint32_t unknown1;
    uint32_t unknown2;
    uint8_t amount_of_rewards;
    wrath_LfgQuestReward* rewards;

} wrath_LfgAvailableDungeon;

typedef struct {
    uint32_t dungeon_entry;
    uint32_t reason;

} wrath_LfgJoinLockedDungeon;

typedef struct {
    uint64_t player;
    uint32_t amount_of_locked_dungeons;
    wrath_LfgJoinLockedDungeon* locked_dungeons;

} wrath_LfgJoinPlayer;

typedef struct {
    uint64_t group;
    wrath_LfgUpdateFlag flags;
    char* comment;
    /* Emu just sets all to 0. */
    uint8_t roles[3];
    uint64_t instance;
    uint32_t encounter_mask;

} wrath_LfgListGroup;

typedef struct {
    uint64_t player;
    wrath_LfgUpdateFlag flags;
    uint8_t level;
    wrath_Class class_type;
    wrath_Race race;
    uint8_t talents0;
    uint8_t talents1;
    uint8_t talents2;
    uint32_t armor;
    uint32_t spell_damage;
    uint32_t spell_heal;
    uint32_t crit_rating_melee;
    uint32_t crit_rating_ranged;
    uint32_t crit_rating_spell;
    float mana_per_5_seconds;
    float mana_per_5_seconds_combat;
    uint32_t attack_power;
    uint32_t agility;
    uint32_t health;
    uint32_t mana;
    /* azerothcore: talentpoints, used as online/offline marker :D */
    bool online;
    uint32_t average_item_level;
    uint32_t defense_skill;
    uint32_t dodge_rating;
    uint32_t block_rating;
    uint32_t parry_rating;
    uint32_t haste_rating;
    uint32_t expertise_rating;
    char* comment;
    /* emu sets to true. */
    bool is_looking_for_more;
    uint64_t group;
    uint8_t roles;
    wrath_Area area;
    /* Emus set to 0. */
    uint8_t unknown1;
    uint64_t instance;
    uint32_t encounter_mask;

} wrath_LfgListPlayer;

typedef struct {
    uint64_t player;
    uint32_t amount_of_dungeons;
    wrath_LfgJoinLockedDungeon* dungeons;

} wrath_LfgPartyInfo;

typedef struct {
    uint32_t role_mask;
    uint8_t is_current_player;
    uint8_t in_dungeon;
    uint8_t in_same_group;
    uint8_t has_answered;
    uint8_t has_accepted;

} wrath_LfgProposal;

typedef struct {
    uint64_t guid;
    bool ready;
    uint32_t roles;
    uint8_t level;

} wrath_LfgRole;

typedef struct {
    uint32_t item_stack_count;
    uint32_t item;
    uint32_t item_display_id;
    /* cmangos: 0 for infinity item amount, although they send 0xFFFFFFFF in that case */
    uint32_t max_items;
    uint32_t price;
    uint32_t max_durability;
    uint32_t durability;
    uint32_t extended_cost;

} wrath_ListInventoryItem;

typedef struct {
    uint8_t index;
    uint32_t item;
    wrath_LootSlotType ty;

} wrath_LootItem;

typedef struct {
    uint32_t charges;
    uint32_t duration;
    uint32_t enchant_id;

} wrath_MailListItemEnchant;

typedef struct {
    uint8_t item_index;
    uint32_t low_guid;
    uint32_t item;
    wrath_MailListItemEnchant enchants[7];
    uint32_t item_random_property_id;
    uint32_t item_suffix_factor;
    uint8_t item_amount;
    uint32_t charges;
    uint32_t max_durability;
    uint32_t durability;
    uint8_t unknown;

} wrath_MailListItem;

typedef struct {
    uint32_t message_id;
    wrath_MailType message_type;
    uint64_t sender;
    uint32_t sender_id;
    uint32_t auction_id;
    uint32_t item;
    uint32_t cash_on_delivery;
    uint32_t unknown;
    uint32_t stationery;
    uint32_t money;
    uint32_t flags;
    float expiration_time;
    /* cmangos/vmangos/mangoszero: mail template (MailTemplate.dbc) */
    uint32_t mail_template_id;
    char* subject;
    char* message;
    uint8_t amount_of_items;
    wrath_MailListItem* items;

} wrath_Mail;

typedef struct {
    uint64_t item;
    uint8_t slot;

} wrath_MailItem;

typedef struct {
    wrath_MiniMoveOpcode opcode;
    uint64_t guid;
    uint32_t movement_counter;

} wrath_MiniMoveMessage;

typedef struct {
    uint8_t action;
    uint64_t player;
    uint32_t entry;
    uint32_t timestamp;

} wrath_MoneyLogItem;

typedef struct {
    uint64_t guid;
    all_Vector3d position;
    float orientation;
    uint32_t timestamp;
    uint8_t seat;

} wrath_TransportInfo;

typedef struct {
    wrath_UpdateFlag update_flag;
    wrath_MovementFlags flags;
    uint32_t timestamp;
    all_Vector3d position;
    float orientation;
    wrath_TransportInfo transport_info;
    uint32_t transport_time;
    wrath_TransportInfo transport;
    float pitch1;
    float pitch2;
    float pitch3;
    float fall_time;
    float z_speed;
    float cos_angle;
    float sin_angle;
    float xy_speed;
    float spline_elevation;
    float walking_speed;
    float running_speed;
    float backwards_running_speed;
    float swimming_speed;
    float backwards_swimming_speed;
    float flight_speed;
    float backwards_flight_speed;
    float turn_rate;
    float pitch_rate;
    wrath_SplineFlag spline_flags;
    float angle;
    uint64_t target;
    all_Vector3d spline_final_point;
    uint32_t time_passed;
    uint32_t duration;
    uint32_t id;
    float duration_mod;
    float duration_mod_next;
    float vertical_acceleration;
    float effect_start_time;
    uint32_t amount_of_nodes;
    all_Vector3d* nodes;
    uint8_t mode;
    all_Vector3d final_node;
    uint64_t transport_guid;
    all_Vector3d position1;
    all_Vector3d transport_offset;
    float orientation1;
    float corpse_orientation;
    all_Vector3d position2;
    float orientation2;
    /* vmangos statically sets to 0 */
    uint32_t unknown0;
    uint32_t unknown1;
    uint64_t guid;
    uint32_t transport_progress_in_ms;
    uint32_t vehicle_id;
    float vehicle_orientation;
    /* AzerothCore deliberately casts to i64 */
    uint64_t packed_local_rotation;

} wrath_MovementBlock;

typedef struct {
    wrath_MovementFlags flags;
    uint32_t timestamp;
    all_Vector3d position;
    float orientation;
    wrath_TransportInfo transport_info;
    uint32_t transport_time;
    wrath_TransportInfo transport;
    float pitch1;
    float pitch2;
    float pitch3;
    float fall_time;
    float z_speed;
    float cos_angle;
    float sin_angle;
    float xy_speed;
    float spline_elevation;

} wrath_MovementInfo;

typedef struct {
    uint32_t delay;
    uint32_t emote;

} wrath_NpcTextUpdateEmote;

typedef struct {
    float probability;
    char* texts[2];
    wrath_Language language;
    wrath_NpcTextUpdateEmote emotes[3];

} wrath_NpcTextUpdate;

typedef struct {
    wrath_UpdateType update_type;
    uint64_t guid1;
    wrath_UpdateMask mask1;
    uint64_t guid2;
    wrath_MovementBlock movement1;
    uint64_t guid3;
    wrath_ObjectType object_type;
    wrath_MovementBlock movement2;
    wrath_UpdateMask mask2;
    uint32_t count;
    uint64_t* guids;

} wrath_Object;

typedef struct {
    /* mangostwo: string '%d:%d:%d:%d:%d' -> itemId, ItemRandomPropertyId, 2, auctionId, unk1 (stack size?, unused) */
    char* string1;
    /* mangostwo: string '%16I64X:%d:%d:%d:%d' -> bidderGuid, bid, buyout, deposit, auctionCut */
    char* string2;
    /* mangostwo sets to 97250. */
    uint32_t unknown1;
    /* mangostwo sets to 68. */
    uint32_t unknown2;
    float time_left;

} wrath_PendingAuctionSale;

typedef struct {
    uint32_t spell;
    /* mangoszero: sets to 0 */
    uint16_t spell_category;
    uint32_t cooldown;
    uint32_t category_cooldown;

} wrath_PetSpellCooldown;

typedef struct {
    uint32_t index;
    /* cmangos/vmangos/mangoszero: statically sets to guild charter item id (5863). */
    uint32_t charter_entry;
    /* cmangos/vmangos/mangoszero: statically sets to guild charter display id (16161). */
    uint32_t charter_display_id;
    /* cmangos/vmangos/mangoszero: statically set to 1000 (10 silver). */
    uint32_t guild_charter_cost;
    /* cmangos/vmangos/mangoszero: statically set to 1
arcemu: charter type? seems to be 0x0 for guilds and 0x1 for arena charters */
    uint32_t unknown1;
    uint32_t signatures_required;

} wrath_PetitionShowlist;

typedef struct {
    uint64_t signer;
    uint32_t unknown1;

} wrath_PetitionSignature;

typedef struct {
    wrath_Talent talent;
    uint32_t rank;

} wrath_PreviewTalent;

typedef struct {
    uint32_t emote;
    uint32_t emote_delay;

} wrath_QuestDetailsEmote;

typedef struct {
    uint32_t item;
    uint32_t item_count;
    uint32_t display_id;

} wrath_QuestGiverReward;

typedef struct {
    uint64_t npc;
    wrath_QuestGiverStatus dialog_status;

} wrath_QuestGiverStatusReport;

typedef struct {
    uint32_t quest_id;
    uint32_t quest_icon;
    uint32_t level;
    uint32_t flags;
    bool repeatable;
    /* vmangos/cmangos/mangoszero: max 0x200 */
    char* title;

} wrath_QuestItem;

typedef struct {
    uint32_t item;
    uint32_t item_count;
    uint32_t item_display_id;

} wrath_QuestItemRequirement;

typedef struct {
    uint32_t item;
    uint32_t item_count;

} wrath_QuestItemReward;

typedef struct {
    /* cmangos: client expected gameobject template id in form (id|0x80000000) */
    uint32_t creature_id;
    uint32_t kill_count;
    uint32_t required_item_id;
    uint32_t required_item_count;

} wrath_QuestObjective;

typedef struct {
    uint32_t x;
    uint32_t y;

} wrath_Vector2dUnsigned;

typedef struct {
    uint32_t id;
    uint32_t objective_id;
    wrath_Map map;
    wrath_Area area;
    uint32_t floor_id;
    uint32_t unknown1;
    uint32_t unknown2;
    uint32_t amount_of_points;
    wrath_Vector2dUnsigned* points;

} wrath_QuestPoi;

typedef struct {
    uint32_t quest_id;
    uint32_t amount_of_pois;
    wrath_QuestPoi* pois;

} wrath_QuestPoiList;

typedef struct {
    wrath_Map map;
    wrath_DungeonDifficulty difficulty;
    uint64_t instance_id;
    bool expired;
    bool extended;
    /* Seems to be in seconds */
    uint32_t time_until_reset;

} wrath_RaidInfo;

typedef struct {
    wrath_RaidTargetIndex index;
    uint64_t guid;

} wrath_RaidTargetUpdate;

typedef struct {
    uint64_t sender;
    wrath_AuctionHouse auction_house;
    wrath_MailMessageType message_type;
    uint32_t stationery;
    /* mangosone sets to `0xC6000000`
mangosone: float unk, time or something */
    float time;

} wrath_ReceivedMail;

typedef struct {
    uint64_t guid;
    wrath_RelationType relation_mask;
    char* note;
    wrath_FriendStatus status;
    wrath_Area area;
    uint32_t level;
    wrath_Class class_type;

} wrath_Relation;

typedef struct {
    uint8_t current_rune;
    uint8_t rune_cooldown;

} wrath_ResyncRune;

typedef struct {
    uint64_t event_id;
    char* title;
    uint32_t event_type;
    uint32_t event_time;
    uint32_t flags;
    uint32_t dungeon_id;
    uint64_t creator;

} wrath_SendCalendarEvent;

typedef struct {
    uint32_t holiday_id;
    uint32_t region;
    uint32_t looping;
    uint32_t priority;
    uint32_t calendar_filter_type;
    uint32_t holiday_days[26];
    uint32_t durations[10];
    uint32_t flags[10];
    char* texture_file_name;

} wrath_SendCalendarHoliday;

typedef struct {
    wrath_Map map;
    uint32_t difficulty;
    uint32_t reset_time;
    uint64_t instance_id;

} wrath_SendCalendarInstance;

typedef struct {
    uint64_t event_id;
    uint64_t invite_id;
    uint8_t status;
    uint8_t rank;
    bool is_guild_event;
    uint64_t creator;

} wrath_SendCalendarInvite;

typedef struct {
    wrath_Map map;
    uint32_t period;
    uint32_t time_offset;

} wrath_SendCalendarResetTime;

typedef struct {
    wrath_SpellCastTargetFlags target_flags;
    uint64_t unit_target;
    uint64_t minipet_target;
    uint64_t gameobject_target;
    uint64_t enemy_corpse_target;
    uint64_t ally_corpse_target;
    uint64_t item_target;
    uint64_t trade_item_target;
    all_Vector3d source;
    all_Vector3d destination;
    char* target_string;

} wrath_SpellCastTargets;

typedef struct {
    uint32_t id;
    uint32_t cooldown_time;

} wrath_SpellCooldownStatus;

typedef struct {
    wrath_SpellEffect effect;
    uint64_t target1;
    uint32_t amount;
    wrath_Power power;
    float multiplier;
    uint64_t target4;
    uint32_t extra_attacks;
    uint64_t target5;
    uint32_t interrupted_spell;
    uint64_t target6;
    uint32_t item_to_damage;
    uint32_t unknown5;
    uint64_t lock_target;
    uint32_t item;
    uint64_t summon_target;
    uint64_t pet_feed_guid;
    uint64_t pet_dismiss_guid;
    uint64_t resurrect_guid;

} wrath_SpellLog;

typedef struct {
    uint64_t target;
    wrath_SpellMissInfo miss_info;

} wrath_SpellLogMiss;

typedef struct {
    uint64_t target;
    wrath_SpellMissInfo miss_info;
    uint8_t reflect_result;

} wrath_SpellMiss;

typedef struct {
    uint32_t spell;
    wrath_SpellStealAction action;

} wrath_SpellSteal;

typedef struct {
    uint32_t pet_number;
    uint32_t entry;
    uint32_t level;
    char* name;
    uint32_t loyalty;
    /* vmangos/mangoszero/cmangos: client slot 1 == current pet (0) */
    uint8_t slot;

} wrath_StabledPet;

typedef struct {
    uint8_t amount_of_talents;
    wrath_InspectTalent* talents;
    uint8_t amount_of_glyphs;
    uint16_t* glyphs;

} wrath_TalentInfoSpec;

typedef struct {
    uint64_t unit;
    uint32_t threat;

} wrath_ThreatUpdateUnit;

typedef struct {
    /* cmangos/vmangos/mangoszero: sets to index of array */
    uint8_t trade_slot_number;
    uint32_t item;
    uint32_t display_id;
    uint32_t stack_count;
    bool wrapped;
    uint64_t gift_wrapper;
    uint32_t enchantment;
    uint32_t enchantments_slots[3];
    uint64_t item_creator;
    uint32_t spell_charges;
    uint32_t item_suffix_factor;
    uint32_t item_random_properties_id;
    uint32_t lock_id;
    uint32_t max_durability;
    uint32_t durability;

} wrath_TradeSlot;

typedef struct {
    /* cmangos: learned spell (or cast-spell in profession case) */
    uint32_t spell;
    wrath_TrainerSpellState state;
    uint32_t spell_cost;
    /* cmangos: spells don't cost talent points
cmangos: set to 0 */
    uint32_t talent_point_cost;
    /* cmangos: must be equal prev. field to have learn button in enabled state
cmangos: 1 for true 0 for false */
    uint32_t first_rank;
    uint8_t required_level;
    wrath_Skill required_skill;
    uint32_t required_skill_value;
    uint32_t required_spells[3];

} wrath_TrainerSpell;

typedef struct {
    char* name;
    char* guild;
    uint32_t level;
    wrath_Class class_type;
    wrath_Race race;
    wrath_Gender gender;
    wrath_Area area;

} wrath_WhoPlayer;

typedef struct {
    uint32_t state;
    uint32_t value;

} wrath_WorldState;

typedef struct {
    uint32_t amount_of_achievements;
    wrath_AchievementInProgress* achievements;
} wrath_AchievementInProgressArray;

typedef struct {
    uint32_t amount_of_achievements;
    wrath_AchievementDone* achievements;
} wrath_AchievementDoneArray;

#define WRATH_INSPECT_TALENT_GEAR_MASK_LENGTH 32

typedef struct {
    wrath_InspectTalentGear values[WRATH_INSPECT_TALENT_GEAR_MASK_LENGTH];
} wrath_InspectTalentGearMask;

#define WRATH_AURA_MASK_SIZE 64
typedef struct {
    wrath_Aura auras[WRATH_AURA_MASK_SIZE];
} wrath_AuraMask;

#define WRATH_CACHE_MASK_LENGTH 32

typedef struct {
    uint32_t values[WRATH_CACHE_MASK_LENGTH];
} wrath_CacheMask;

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BOOTME_write(WowWorldWriter* writer);

/* Executes a query directly on the world server.
Not implemented on any major emulator. */
typedef struct {
    char* query;

} wrath_CMSG_DBLOOKUP;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_DBLOOKUP_free(wrath_CMSG_DBLOOKUP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_DBLOOKUP_write(WowWorldWriter* writer, const wrath_CMSG_DBLOOKUP* object);

/* Sent when using the `worldport` console command.
The 3.3.5 client includes some extra padding. */
typedef struct {
    uint32_t time;
    wrath_Map map;
    uint64_t unknown;
    all_Vector3d position;
    float orientation;

} wrath_CMSG_WORLD_TELEPORT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_WORLD_TELEPORT_write(WowWorldWriter* writer, const wrath_CMSG_WORLD_TELEPORT* object);

/* Sent when using the `port` console command. */
typedef struct {
    char* name;

} wrath_CMSG_TELEPORT_TO_UNIT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_TELEPORT_TO_UNIT_free(wrath_CMSG_TELEPORT_TO_UNIT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TELEPORT_TO_UNIT_write(WowWorldWriter* writer, const wrath_CMSG_TELEPORT_TO_UNIT* object);

/* Sent after the client presses 'Create Character'. The client will then wait for [SMSG_CHAR_CREATE]. */
typedef struct {
    char* name;
    wrath_Race race;
    wrath_Class class_type;
    wrath_Gender gender;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;

} wrath_CMSG_CHAR_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHAR_CREATE_free(wrath_CMSG_CHAR_CREATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHAR_CREATE_write(WowWorldWriter* writer, const wrath_CMSG_CHAR_CREATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHAR_ENUM_write(WowWorldWriter* writer);

/* Command to delete a character from the clients account. Can be sent after the client has received [SMSG_CHAR_ENUM].
Sent after the client has confirmed the character deletion. */
typedef struct {
    uint64_t guid;

} wrath_CMSG_CHAR_DELETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHAR_DELETE_write(WowWorldWriter* writer, const wrath_CMSG_CHAR_DELETE* object);

/* Response to [CMSG_CHAR_CREATE].
Every [WorldResult] except `CHAR_CREATE_SUCCESS` will lead to a popup showing. `CHAR_CREATE_SUCCESS` will cause the client to send a [CMSG_CHAR_ENUM]. */
typedef struct {
    wrath_WorldResult result;

} wrath_SMSG_CHAR_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHAR_CREATE_write(WowWorldWriter* writer, const wrath_SMSG_CHAR_CREATE* object);

typedef struct {
    uint8_t amount_of_characters;
    wrath_Character* characters;

} wrath_SMSG_CHAR_ENUM;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CHAR_ENUM_free(wrath_SMSG_CHAR_ENUM* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHAR_ENUM_write(WowWorldWriter* writer, const wrath_SMSG_CHAR_ENUM* object);

/* Response to [CMSG_CHAR_DELETE].
The result of this message will update the client character screen without them sending another [CMSG_CHAR_ENUM]. */
typedef struct {
    wrath_WorldResult result;

} wrath_SMSG_CHAR_DELETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHAR_DELETE_write(WowWorldWriter* writer, const wrath_SMSG_CHAR_DELETE* object);

/* Command to log into the specified character.
This is sent after the client has been authenticated and served the character list with [SMSG_CHAR_ENUM].
If the player receives a [SMSG_CHARACTER_LOGIN_FAILED] it will return to the character screen and send a [CMSG_CHAR_ENUM]. */
typedef struct {
    uint64_t guid;

} wrath_CMSG_PLAYER_LOGIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PLAYER_LOGIN_write(WowWorldWriter* writer, const wrath_CMSG_PLAYER_LOGIN* object);

typedef struct {
    wrath_Map map;
    all_Vector3d position;
    float orientation;

} wrath_SMSG_NEW_WORLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_NEW_WORLD_write(WowWorldWriter* writer, const wrath_SMSG_NEW_WORLD* object);

typedef struct {
    uint32_t transport;
    wrath_Map transport_map;
} wrath_SMSG_TRANSFER_PENDING_has_transport;

typedef struct {
    wrath_Map map;

    wrath_SMSG_TRANSFER_PENDING_has_transport* has_transport;
} wrath_SMSG_TRANSFER_PENDING;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_TRANSFER_PENDING_free(wrath_SMSG_TRANSFER_PENDING* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TRANSFER_PENDING_write(WowWorldWriter* writer, const wrath_SMSG_TRANSFER_PENDING* object);

typedef struct {
    wrath_Map map;
    wrath_TransferAbortReason reason;
    wrath_DungeonDifficulty difficulty;

} wrath_SMSG_TRANSFER_ABORTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TRANSFER_ABORTED_write(WowWorldWriter* writer, const wrath_SMSG_TRANSFER_ABORTED* object);

/* Response if [CMSG_PLAYER_LOGIN] fails. If successful it should instead be [SMSG_LOGIN_VERIFY_WORLD].
Client seems to always send a [CMSG_CANCEL_TRADE] after receiving this message, for unknown reasons. */
typedef struct {
    wrath_WorldResult result;

} wrath_SMSG_CHARACTER_LOGIN_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHARACTER_LOGIN_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_CHARACTER_LOGIN_FAILED* object);

typedef struct {
    /* Current server datetime.
Running the client with `-console` verifies that this message in this format sets the correct datetime. [SMSG_QUERY_TIME_RESPONSE] will not set this. */
    uint32_t datetime;
    /* How many minutes should pass by every second.
vmangos/cmangos/mangoszero set this to 0.01666667. This means that 1/60 minutes pass every second (one second passes every second). Setting this to 1.0 will make the client advance one minute every second. */
    float timescale;
    /* arcemu/azerothcore/mangostwo: Set to 0. */
    uint32_t unknown1;

} wrath_SMSG_LOGIN_SETTIMESPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOGIN_SETTIMESPEED_write(WowWorldWriter* writer, const wrath_SMSG_LOGIN_SETTIMESPEED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PLAYER_LOGOUT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LOGOUT_REQUEST_write(WowWorldWriter* writer);

/* Reply to [CMSG_LOGOUT_REQUEST].
The client expects to get an [SMSG_LOGOUT_COMPLETE] when logout is complete. */
typedef struct {
    wrath_LogoutResult result;
    wrath_LogoutSpeed speed;

} wrath_SMSG_LOGOUT_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOGOUT_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_LOGOUT_RESPONSE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOGOUT_COMPLETE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LOGOUT_CANCEL_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOGOUT_CANCEL_ACK_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} wrath_CMSG_NAME_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_NAME_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_NAME_QUERY* object);

/* Response to [CMSG_NAME_QUERY]. */
typedef struct {
    uint64_t guid;
    char* character_name;
    /* Used for showing cross realm realm names. If this is an empty string it is shown like a regular player on the same realm. */
    char* realm_name;
    wrath_Race race;
    wrath_Gender gender;
    wrath_Class class_type;
    wrath_DeclinedNames has_declined_names;
    char* declined_names[5];

} wrath_SMSG_NAME_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_NAME_QUERY_RESPONSE_free(wrath_SMSG_NAME_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_NAME_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_NAME_QUERY_RESPONSE* object);

typedef struct {
    uint32_t pet_number;
    uint64_t guid;

} wrath_CMSG_PET_NAME_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_NAME_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_PET_NAME_QUERY* object);

typedef struct {
    uint32_t pet_number;
    char* name;
    uint32_t pet_name_timestamp;
    wrath_PetQueryDisabledNames names;
    char* declined_names[5];

} wrath_SMSG_PET_NAME_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PET_NAME_QUERY_RESPONSE_free(wrath_SMSG_PET_NAME_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_NAME_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_PET_NAME_QUERY_RESPONSE* object);

typedef struct {
    uint32_t guild_id;

} wrath_CMSG_GUILD_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_QUERY* object);

typedef struct {
    uint32_t id;
    char* name;
    char* rank_names[10];
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;
    uint32_t background_color;

} wrath_SMSG_GUILD_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GUILD_QUERY_RESPONSE_free(wrath_SMSG_GUILD_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GUILD_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_GUILD_QUERY_RESPONSE* object);

typedef struct {
    uint32_t item;

} wrath_CMSG_ITEM_QUERY_SINGLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ITEM_QUERY_SINGLE_write(WowWorldWriter* writer, const wrath_CMSG_ITEM_QUERY_SINGLE* object);

typedef struct {
    wrath_ItemClassAndSubClass class_and_sub_class;
    /* mangosone: new 2.0.3, not exist in wdb cache?
mangosone sets to -1.
azerothcore: < 0: id from ItemSubClass.dbc, used to override weapon sound from actual sub class */
    uint32_t sound_override_sub_class;
    char* name1;
    char* name2;
    char* name3;
    char* name4;
    /* id from ItemDisplayInfo.dbc */
    uint32_t display_id;
    wrath_ItemQuality quality;
    wrath_ItemFlag flags;
    wrath_ItemFlag2 flags2;
    uint32_t buy_price;
    uint32_t sell_price;
    wrath_InventoryType inventory_type;
    wrath_AllowedClass allowed_class;
    wrath_AllowedRace allowed_race;
    uint32_t item_level;
    uint32_t required_level;
    wrath_Skill required_skill;
    uint32_t required_skill_rank;
    uint32_t required_spell;
    uint32_t required_honor_rank;
    uint32_t required_city_rank;
    wrath_Faction required_faction;
    /* cmangos/vmangos/mangoszero: send value only if reputation faction id setted ( needed for some items) */
    uint32_t required_faction_rank;
    uint32_t max_count;
    uint32_t stackable;
    uint32_t container_slots;
    uint32_t amount_of_stats;
    wrath_ItemStat* stats;
    uint32_t scaling_stats_entry;
    uint32_t scaling_stats_flag;
    wrath_ItemDamageType damages[2];
    int32_t armor;
    int32_t holy_resistance;
    int32_t fire_resistance;
    int32_t nature_resistance;
    int32_t frost_resistance;
    int32_t shadow_resistance;
    int32_t arcane_resistance;
    uint32_t delay;
    uint32_t ammo_type;
    float ranged_range_modification;
    wrath_ItemSpells spells[5];
    wrath_Bonding bonding;
    char* description;
    uint32_t page_text;
    wrath_Language language;
    wrath_PageTextMaterial page_text_material;
    /* cmangos/vmangos/mangoszero: id from QuestCache.wdb */
    uint32_t start_quest;
    uint32_t lock_id;
    /* cmangos/vmangos/mangoszero: id from Material.dbc */
    uint32_t material;
    wrath_SheatheType sheathe_type;
    /* cmangos/vmangos/mangoszero: id from ItemRandomProperties.dbc */
    uint32_t random_property;
    uint32_t random_suffix;
    uint32_t block;
    wrath_ItemSet item_set;
    uint32_t max_durability;
    wrath_Area area;
    wrath_Map map;
    wrath_BagFamily bag_family;
    /* mangosone: id from TotemCategory.dbc */
    uint32_t totem_category;
    wrath_ItemSocket sockets[3];
    uint32_t socket_bonus;
    uint32_t gem_properties;
    uint32_t required_disenchant_skill;
    float armor_damage_modifier;
    /* mangosone: added in 2.4.2.8209, duration (seconds) */
    uint32_t duration;
    uint32_t item_limit_category;
    /* mangosone: HolidayId - points to HolidayNames.dbc */
    uint32_t holiday_id;
} wrath_SMSG_ITEM_QUERY_SINGLE_RESPONSE_found;

typedef struct {
    uint32_t item;

    wrath_SMSG_ITEM_QUERY_SINGLE_RESPONSE_found* found;
} wrath_SMSG_ITEM_QUERY_SINGLE_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ITEM_QUERY_SINGLE_RESPONSE_free(wrath_SMSG_ITEM_QUERY_SINGLE_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ITEM_QUERY_SINGLE_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_ITEM_QUERY_SINGLE_RESPONSE* object);

typedef struct {
    uint32_t page_id;
    uint64_t guid;

} wrath_CMSG_PAGE_TEXT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PAGE_TEXT_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_PAGE_TEXT_QUERY* object);

typedef struct {
    uint32_t page_id;
    char* text;
    uint32_t next_page_id;

} wrath_SMSG_PAGE_TEXT_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PAGE_TEXT_QUERY_RESPONSE_free(wrath_SMSG_PAGE_TEXT_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PAGE_TEXT_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_PAGE_TEXT_QUERY_RESPONSE* object);

typedef struct {
    uint32_t quest_id;

} wrath_CMSG_QUEST_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUEST_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_QUEST_QUERY* object);

typedef struct {
    uint32_t quest_id;
    /* Accepted values: 0, 1 or 2. 0==IsAutoComplete() (skip objectives/details) */
    uint32_t quest_method;
    uint32_t quest_level;
    /* min required level to obtain (added for 3.3).
Assumed allowed (database) range is -1 to 255 (still using uint32, since negative value would not be of any known use for client) */
    uint32_t minimum_quest_level;
    uint32_t zone_or_sort;
    uint32_t quest_type;
    uint32_t suggest_player_amount;
    /* cmangos: shown in quest log as part of quest objective */
    wrath_Faction reputation_objective_faction;
    /* cmangos: shown in quest log as part of quest objective */
    uint32_t reputation_objective_value;
    /* cmangos: RequiredOpositeRepFaction, required faction value with another (oposite) faction (objective). cmangos sets to 0 */
    wrath_Faction required_opposite_faction;
    /* cmangos: RequiredOpositeRepValue, required faction value with another (oposite) faction (objective). cmangos sets to 0 */
    uint32_t required_opposite_reputation_value;
    uint32_t next_quest_in_chain;
    uint32_t money_reward;
    /* cmangos: used in XP calculation at client */
    uint32_t max_level_money_reward;
    /* cmangos: reward spell, this spell will display (icon) (casted if RewSpellCast==0) */
    uint32_t reward_spell;
    /* mangosone: casted spell */
    uint32_t casted_reward_spell;
    uint32_t honor_reward;
    /* new reward honor (multiplied by around 62 at client side) */
    float honor_reward_multiplier;
    uint32_t source_item_id;
    uint32_t quest_flags;
    /* CharTitleId, new 2.4.0, player gets this title (id from CharTitles) */
    uint32_t title_reward;
    uint32_t players_slain;
    uint32_t bonus_talents;
    uint32_t bonus_arena_points;
    uint32_t unknown1;
    wrath_QuestItemReward rewards[4];
    wrath_QuestItemReward choice_rewards[6];
    uint32_t reputation_rewards[5];
    uint32_t reputation_reward_amounts[5];
    uint32_t reputation_reward_overrides[5];
    uint32_t point_map_id;
    all_Vector2d position;
    uint32_t point_opt;
    char* title;
    char* objective_text;
    char* details;
    char* end_text;
    char* completed_text;
    wrath_QuestObjective objectives[4];
    wrath_QuestItemRequirement item_requirements[6];
    char* objective_texts[4];

} wrath_SMSG_QUEST_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_QUEST_QUERY_RESPONSE_free(wrath_SMSG_QUEST_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUEST_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_QUEST_QUERY_RESPONSE* object);

typedef struct {
    uint32_t entry_id;
    uint64_t guid;

} wrath_CMSG_GAMEOBJECT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GAMEOBJECT_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_GAMEOBJECT_QUERY* object);

typedef struct {
    uint32_t info_type;
    uint32_t display_id;
    char* name1;
    char* name2;
    char* name3;
    char* name4;
    char* icon_name;
    char* cast_bar_caption;
    char* unknown;
    uint32_t raw_data[6];
    float gameobject_size;
    uint32_t gameobject_quest_items[6];
} wrath_SMSG_GAMEOBJECT_QUERY_RESPONSE_found;

typedef struct {
    /* When the `found` optional is not present all emulators bitwise OR the entry with `0x80000000`.`` */
    uint32_t entry_id;

    wrath_SMSG_GAMEOBJECT_QUERY_RESPONSE_found* found;
} wrath_SMSG_GAMEOBJECT_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GAMEOBJECT_QUERY_RESPONSE_free(wrath_SMSG_GAMEOBJECT_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GAMEOBJECT_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_GAMEOBJECT_QUERY_RESPONSE* object);

typedef struct {
    uint32_t creature;
    uint64_t guid;

} wrath_CMSG_CREATURE_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CREATURE_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_CREATURE_QUERY* object);

typedef struct {
    char* name1;
    char* name2;
    char* name3;
    char* name4;
    char* sub_name;
    /* mangosone: 'Directions' for guard, string for Icons 2.3.0 */
    char* description;
    uint32_t type_flags;
    /* mangosone: CreatureType.dbc   wdbFeild8 */
    uint32_t creature_type;
    wrath_CreatureFamily creature_family;
    /* mangosone: Creature Rank (elite, boss, etc) */
    uint32_t creature_rank;
    /* mangosone: new in 3.1 */
    uint32_t kill_credit1;
    /* mangosone: new in 3.1 */
    uint32_t kill_credit2;
    uint32_t display_ids[4];
    float health_multiplier;
    float mana_multiplier;
    uint8_t racial_leader;
    uint32_t quest_items[6];
    /* mangosone: CreatureMovementInfo.dbc */
    uint32_t movement_id;
} wrath_SMSG_CREATURE_QUERY_RESPONSE_found;

typedef struct {
    /* When the `found` optional is not present all emulators bitwise OR the entry with `0x80000000`.`` */
    uint32_t creature_entry;

    wrath_SMSG_CREATURE_QUERY_RESPONSE_found* found;
} wrath_SMSG_CREATURE_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CREATURE_QUERY_RESPONSE_free(wrath_SMSG_CREATURE_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CREATURE_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_CREATURE_QUERY_RESPONSE* object);

typedef struct {
    uint32_t minimum_level;
    uint32_t maximum_level;
    char* player_name;
    char* guild_name;
    uint32_t race_mask;
    uint32_t class_mask;
    uint32_t amount_of_zones;
    uint32_t* zones;
    uint32_t amount_of_strings;
    char** search_strings;

} wrath_CMSG_WHO;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_WHO_free(wrath_CMSG_WHO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_WHO_write(WowWorldWriter* writer, const wrath_CMSG_WHO* object);

typedef struct {
    uint32_t listed_players;
    uint32_t online_players;
    wrath_WhoPlayer* players;

} wrath_SMSG_WHO;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_WHO_free(wrath_SMSG_WHO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_WHO_write(WowWorldWriter* writer, const wrath_SMSG_WHO* object);

typedef struct {
    char* character;

} wrath_CMSG_WHOIS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_WHOIS_free(wrath_CMSG_WHOIS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_WHOIS_write(WowWorldWriter* writer, const wrath_CMSG_WHOIS* object);

typedef struct {
    /* vmangos: max CString length allowed: 256 */
    char* message;

} wrath_SMSG_WHOIS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_WHOIS_free(wrath_SMSG_WHOIS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_WHOIS_write(WowWorldWriter* writer, const wrath_SMSG_WHOIS* object);

typedef struct {
    /* Sent back in [SMSG_CONTACT_LIST]. */
    uint32_t flags;

} wrath_CMSG_CONTACT_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CONTACT_LIST_write(WowWorldWriter* writer, const wrath_CMSG_CONTACT_LIST* object);

typedef struct {
    /* Indicates which kinds of relations are being sent in this list */
    wrath_RelationType list_mask;
    uint32_t amount_of_relations;
    wrath_Relation* relations;

} wrath_SMSG_CONTACT_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CONTACT_LIST_free(wrath_SMSG_CONTACT_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CONTACT_LIST_write(WowWorldWriter* writer, const wrath_SMSG_CONTACT_LIST* object);

typedef struct {
    wrath_FriendResult result;
    uint64_t guid;

} wrath_SMSG_FRIEND_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FRIEND_STATUS_write(WowWorldWriter* writer, const wrath_SMSG_FRIEND_STATUS* object);

typedef struct {
    char* name;
    char* note;

} wrath_CMSG_ADD_FRIEND;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_ADD_FRIEND_free(wrath_CMSG_ADD_FRIEND* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ADD_FRIEND_write(WowWorldWriter* writer, const wrath_CMSG_ADD_FRIEND* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_DEL_FRIEND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_DEL_FRIEND_write(WowWorldWriter* writer, const wrath_CMSG_DEL_FRIEND* object);

typedef struct {
    uint64_t player;
    char* note;

} wrath_CMSG_SET_CONTACT_NOTES;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_SET_CONTACT_NOTES_free(wrath_CMSG_SET_CONTACT_NOTES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_CONTACT_NOTES_write(WowWorldWriter* writer, const wrath_CMSG_SET_CONTACT_NOTES* object);

typedef struct {
    char* name;

} wrath_CMSG_ADD_IGNORE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_ADD_IGNORE_free(wrath_CMSG_ADD_IGNORE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ADD_IGNORE_write(WowWorldWriter* writer, const wrath_CMSG_ADD_IGNORE* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_DEL_IGNORE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_DEL_IGNORE_write(WowWorldWriter* writer, const wrath_CMSG_DEL_IGNORE* object);

typedef struct {
    char* name;
    uint32_t unknown1;

} wrath_CMSG_GROUP_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GROUP_INVITE_free(wrath_CMSG_GROUP_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_INVITE_write(WowWorldWriter* writer, const wrath_CMSG_GROUP_INVITE* object);

typedef struct {
    /* All emulators set entire optional to 0. */
    uint32_t unknown1;
    /* All emulators set entire optional to 0. */
    uint8_t count;
    /* All emulators set entire optional to 0. */
    uint32_t unknown2;
} wrath_SMSG_GROUP_INVITE_unknown;

typedef struct {
    wrath_PlayerInviteStatus status;
    char* name;

    wrath_SMSG_GROUP_INVITE_unknown* unknown;
} wrath_SMSG_GROUP_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GROUP_INVITE_free(wrath_SMSG_GROUP_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GROUP_INVITE_write(WowWorldWriter* writer, const wrath_SMSG_GROUP_INVITE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_CANCEL_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_ACCEPT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_DECLINE_write(WowWorldWriter* writer);

typedef struct {
    char* name;

} wrath_SMSG_GROUP_DECLINE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GROUP_DECLINE_free(wrath_SMSG_GROUP_DECLINE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GROUP_DECLINE_write(WowWorldWriter* writer, const wrath_SMSG_GROUP_DECLINE* object);

typedef struct {
    char* name;

} wrath_CMSG_GROUP_UNINVITE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GROUP_UNINVITE_free(wrath_CMSG_GROUP_UNINVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_UNINVITE_write(WowWorldWriter* writer, const wrath_CMSG_GROUP_UNINVITE* object);

typedef struct {
    uint64_t guid;
    char* reason;

} wrath_CMSG_GROUP_UNINVITE_GUID;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GROUP_UNINVITE_GUID_free(wrath_CMSG_GROUP_UNINVITE_GUID* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_UNINVITE_GUID_write(WowWorldWriter* writer, const wrath_CMSG_GROUP_UNINVITE_GUID* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GROUP_UNINVITE_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} wrath_CMSG_GROUP_SET_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_SET_LEADER_write(WowWorldWriter* writer, const wrath_CMSG_GROUP_SET_LEADER* object);

typedef struct {
    char* name;

} wrath_SMSG_GROUP_SET_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GROUP_SET_LEADER_free(wrath_SMSG_GROUP_SET_LEADER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GROUP_SET_LEADER_write(WowWorldWriter* writer, const wrath_SMSG_GROUP_SET_LEADER* object);

typedef struct {
    wrath_GroupLootSetting loot_setting;
    uint64_t loot_master;
    wrath_ItemQuality loot_threshold;

} wrath_CMSG_LOOT_METHOD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LOOT_METHOD_write(WowWorldWriter* writer, const wrath_CMSG_LOOT_METHOD* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_DISBAND_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GROUP_DESTROYED_write(WowWorldWriter* writer);

typedef struct {
    wrath_GroupLootSetting loot_setting;
    /* Zero if loot_setting is not MASTER_LOOT */
    uint64_t master_loot;
    wrath_ItemQuality loot_threshold;
    wrath_DungeonDifficulty difficulty;
    wrath_RaidDifficulty raid_difficulty;
    bool heroic;
} wrath_SMSG_GROUP_LIST_group_not_empty;

typedef struct {
    uint8_t group_type;
    uint8_t group_id;
    /* mangoszero/cmangos/vmangos: own flags (groupid | (assistant?0x80:0)) */
    uint8_t flags;
    uint8_t roles;
    uint64_t group;
    /* azerothcore: 3.3, value increases every time this packet gets sent */
    uint32_t counter;
    uint32_t amount_of_members;
    wrath_GroupListMember* members;
    uint64_t leader;

    wrath_SMSG_GROUP_LIST_group_not_empty* group_not_empty;
} wrath_SMSG_GROUP_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GROUP_LIST_free(wrath_SMSG_GROUP_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GROUP_LIST_write(WowWorldWriter* writer, const wrath_SMSG_GROUP_LIST* object);

typedef struct {
    uint64_t guid;
    wrath_GroupUpdateFlags mask;
    wrath_GroupMemberOnlineStatus status;
    uint32_t current_health;
    uint32_t max_health;
    wrath_Power power;
    uint16_t current_power;
    uint16_t max_power;
    uint16_t level;
    wrath_Area area;
    /* cmangos: float cast to u16 */
    uint16_t position_x;
    /* cmangos: float cast to u16 */
    uint16_t position_y;
    /* cmangos: In all checked pre-2.x data of packets included only positive auras */
    wrath_AuraMask auras;
    uint64_t pet;
    char* pet_name;
    uint16_t pet_display_id;
    uint32_t pet_current_health;
    uint32_t pet_max_health;
    wrath_Power pet_power_type;
    uint16_t pet_current_power;
    uint16_t pet_max_power;
    wrath_AuraMask pet_auras;
    uint32_t transport;

} wrath_SMSG_PARTY_MEMBER_STATS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PARTY_MEMBER_STATS_free(wrath_SMSG_PARTY_MEMBER_STATS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PARTY_MEMBER_STATS_write(WowWorldWriter* writer, const wrath_SMSG_PARTY_MEMBER_STATS* object);

typedef struct {
    wrath_PartyOperation operation;
    char* member;
    wrath_PartyResult result;

} wrath_SMSG_PARTY_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PARTY_COMMAND_RESULT_free(wrath_SMSG_PARTY_COMMAND_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PARTY_COMMAND_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_PARTY_COMMAND_RESULT* object);

typedef struct {
    char* guild_name;

} wrath_CMSG_GUILD_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_CREATE_free(wrath_CMSG_GUILD_CREATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_CREATE_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_CREATE* object);

typedef struct {
    char* invited_player;

} wrath_CMSG_GUILD_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_INVITE_free(wrath_CMSG_GUILD_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_INVITE_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_INVITE* object);

typedef struct {
    char* player_name;
    char* guild_name;

} wrath_SMSG_GUILD_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GUILD_INVITE_free(wrath_SMSG_GUILD_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GUILD_INVITE_write(WowWorldWriter* writer, const wrath_SMSG_GUILD_INVITE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_ACCEPT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_DECLINE_write(WowWorldWriter* writer);

typedef struct {
    char* player;

} wrath_SMSG_GUILD_DECLINE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GUILD_DECLINE_free(wrath_SMSG_GUILD_DECLINE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GUILD_DECLINE_write(WowWorldWriter* writer, const wrath_SMSG_GUILD_DECLINE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_INFO_write(WowWorldWriter* writer);

typedef struct {
    char* guild_name;
    uint32_t created;
    uint32_t amount_of_characters_in_guild;
    uint32_t amount_of_accounts_in_guild;

} wrath_SMSG_GUILD_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GUILD_INFO_free(wrath_SMSG_GUILD_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GUILD_INFO_write(WowWorldWriter* writer, const wrath_SMSG_GUILD_INFO* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_ROSTER_write(WowWorldWriter* writer);

typedef struct {
    uint32_t amount_of_members;
    char* motd;
    char* guild_info;
    uint32_t amount_of_rights;
    wrath_GuildRights* rights;
    wrath_GuildMember* members;

} wrath_SMSG_GUILD_ROSTER;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GUILD_ROSTER_free(wrath_SMSG_GUILD_ROSTER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GUILD_ROSTER_write(WowWorldWriter* writer, const wrath_SMSG_GUILD_ROSTER* object);

typedef struct {
    char* player_name;

} wrath_CMSG_GUILD_PROMOTE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_PROMOTE_free(wrath_CMSG_GUILD_PROMOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_PROMOTE_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_PROMOTE* object);

typedef struct {
    char* player_name;

} wrath_CMSG_GUILD_DEMOTE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_DEMOTE_free(wrath_CMSG_GUILD_DEMOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_DEMOTE_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_DEMOTE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_LEAVE_write(WowWorldWriter* writer);

typedef struct {
    char* player_name;

} wrath_CMSG_GUILD_REMOVE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_REMOVE_free(wrath_CMSG_GUILD_REMOVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_REMOVE_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_REMOVE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_DISBAND_write(WowWorldWriter* writer);

typedef struct {
    char* new_guild_leader_name;

} wrath_CMSG_GUILD_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_LEADER_free(wrath_CMSG_GUILD_LEADER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_LEADER_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_LEADER* object);

typedef struct {
    char* message_of_the_day;

} wrath_CMSG_GUILD_MOTD;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_MOTD_free(wrath_CMSG_GUILD_MOTD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_MOTD_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_MOTD* object);

typedef struct {
    wrath_GuildEvent event;
    uint8_t amount_of_events;
    char** event_descriptions;

} wrath_SMSG_GUILD_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GUILD_EVENT_free(wrath_SMSG_GUILD_EVENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GUILD_EVENT_write(WowWorldWriter* writer, const wrath_SMSG_GUILD_EVENT* object);

typedef struct {
    wrath_GuildCommand command;
    char* string;
    wrath_GuildCommandResult result;

} wrath_SMSG_GUILD_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GUILD_COMMAND_RESULT_free(wrath_SMSG_GUILD_COMMAND_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GUILD_COMMAND_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_GUILD_COMMAND_RESULT* object);

typedef struct {
    wrath_ChatType chat_type;
    wrath_Language language;
    char* target_player;
    char* channel;
    char* message;

} wrath_CMSG_MESSAGECHAT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_MESSAGECHAT_free(wrath_CMSG_MESSAGECHAT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MESSAGECHAT_write(WowWorldWriter* writer, const wrath_CMSG_MESSAGECHAT* object);

typedef struct {
    wrath_ChatType chat_type;
    wrath_Language language;
    uint64_t sender;
    /* azerothcore sets to 0. */
    uint32_t flags;
    char* sender1;
    NamedGuid target1;
    char* sender2;
    uint64_t target2;
    NamedGuid target3;
    uint64_t target4;
    char* channel_name;
    uint64_t target5;
    uint64_t target6;
    char* message;
    wrath_PlayerChatTag tag;
    uint32_t achievement_id;

} wrath_SMSG_MESSAGECHAT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_MESSAGECHAT_free(wrath_SMSG_MESSAGECHAT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MESSAGECHAT_write(WowWorldWriter* writer, const wrath_SMSG_MESSAGECHAT* object);

typedef struct {
    uint32_t channel_id;
    uint8_t unknown1;
    uint8_t unknown2;
    char* channel_name;
    char* channel_password;

} wrath_CMSG_JOIN_CHANNEL;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_JOIN_CHANNEL_free(wrath_CMSG_JOIN_CHANNEL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_JOIN_CHANNEL_write(WowWorldWriter* writer, const wrath_CMSG_JOIN_CHANNEL* object);

typedef struct {
    uint32_t channel_id;
    char* channel_name;

} wrath_CMSG_LEAVE_CHANNEL;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_LEAVE_CHANNEL_free(wrath_CMSG_LEAVE_CHANNEL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LEAVE_CHANNEL_write(WowWorldWriter* writer, const wrath_CMSG_LEAVE_CHANNEL* object);

typedef struct {
    uint32_t unknown2;
    uint32_t unkwown3;
} wrath_SMSG_CHANNEL_NOTIFY_unknown1;

typedef struct {
    wrath_ChatNotify notify_type;
    char* channel_name;

    wrath_SMSG_CHANNEL_NOTIFY_unknown1* unknown1;
} wrath_SMSG_CHANNEL_NOTIFY;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CHANNEL_NOTIFY_free(wrath_SMSG_CHANNEL_NOTIFY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHANNEL_NOTIFY_write(WowWorldWriter* writer, const wrath_SMSG_CHANNEL_NOTIFY* object);

typedef struct {
    char* channel_name;

} wrath_CMSG_CHANNEL_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_LIST_free(wrath_CMSG_CHANNEL_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_LIST_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_LIST* object);

typedef struct {
    char* channel_name;
    wrath_ChannelFlags channel_flags;
    uint32_t amount_of_members;
    wrath_ChannelMember* members;

} wrath_SMSG_CHANNEL_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CHANNEL_LIST_free(wrath_SMSG_CHANNEL_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHANNEL_LIST_write(WowWorldWriter* writer, const wrath_SMSG_CHANNEL_LIST* object);

typedef struct {
    char* channel_name;
    char* channel_password;

} wrath_CMSG_CHANNEL_PASSWORD;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_PASSWORD_free(wrath_CMSG_CHANNEL_PASSWORD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_PASSWORD_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_PASSWORD* object);

typedef struct {
    char* channel_name;
    char* new_owner;

} wrath_CMSG_CHANNEL_SET_OWNER;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_SET_OWNER_free(wrath_CMSG_CHANNEL_SET_OWNER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_SET_OWNER_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_SET_OWNER* object);

typedef struct {
    char* channel_name;

} wrath_CMSG_CHANNEL_OWNER;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_OWNER_free(wrath_CMSG_CHANNEL_OWNER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_OWNER_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_OWNER* object);

typedef struct {
    char* channel_name;
    char* player_name;

} wrath_CMSG_CHANNEL_MODERATOR;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_MODERATOR_free(wrath_CMSG_CHANNEL_MODERATOR* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_MODERATOR_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_MODERATOR* object);

typedef struct {
    char* channel_name;
    char* player_name;

} wrath_CMSG_CHANNEL_UNMODERATOR;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_UNMODERATOR_free(wrath_CMSG_CHANNEL_UNMODERATOR* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_UNMODERATOR_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_UNMODERATOR* object);

typedef struct {
    char* channel_name;
    char* player_name;

} wrath_CMSG_CHANNEL_MUTE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_MUTE_free(wrath_CMSG_CHANNEL_MUTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_MUTE_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_MUTE* object);

typedef struct {
    char* channel_name;
    char* player_name;

} wrath_CMSG_CHANNEL_UNMUTE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_UNMUTE_free(wrath_CMSG_CHANNEL_UNMUTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_UNMUTE_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_UNMUTE* object);

typedef struct {
    char* channel_name;
    char* player_name;

} wrath_CMSG_CHANNEL_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_INVITE_free(wrath_CMSG_CHANNEL_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_INVITE_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_INVITE* object);

typedef struct {
    char* channel_name;
    char* player_name;

} wrath_CMSG_CHANNEL_KICK;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_KICK_free(wrath_CMSG_CHANNEL_KICK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_KICK_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_KICK* object);

typedef struct {
    char* channel_name;
    char* player_name;

} wrath_CMSG_CHANNEL_BAN;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_BAN_free(wrath_CMSG_CHANNEL_BAN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_BAN_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_BAN* object);

typedef struct {
    char* channel_name;
    char* player_name;

} wrath_CMSG_CHANNEL_UNBAN;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_UNBAN_free(wrath_CMSG_CHANNEL_UNBAN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_UNBAN_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_UNBAN* object);

typedef struct {
    char* channel_name;

} wrath_CMSG_CHANNEL_ANNOUNCEMENTS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_ANNOUNCEMENTS_free(wrath_CMSG_CHANNEL_ANNOUNCEMENTS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_ANNOUNCEMENTS_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_ANNOUNCEMENTS* object);

typedef struct {
    char* channel_name;

} wrath_CMSG_CHANNEL_MODERATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_MODERATE_free(wrath_CMSG_CHANNEL_MODERATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_MODERATE_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_MODERATE* object);

typedef struct {
    uint32_t amount_of_objects;
    wrath_Object* objects;

} wrath_SMSG_UPDATE_OBJECT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_UPDATE_OBJECT_free(wrath_SMSG_UPDATE_OBJECT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_UPDATE_OBJECT_write(WowWorldWriter* writer, const wrath_SMSG_UPDATE_OBJECT* object);

/* Immediately removes an object from the presence of the player.
Used by vmangos for logout.
azerothcore: If the following bool is true, the client will call `void CGUnit_C::OnDeath()` for this object. `OnDeath()` does for eg trigger death animation and interrupts certain spells/missiles/auras/sounds... */
typedef struct {
    uint64_t guid;
    bool target_died;

} wrath_SMSG_DESTROY_OBJECT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DESTROY_OBJECT_write(WowWorldWriter* writer, const wrath_SMSG_DESTROY_OBJECT* object);

typedef struct {
    uint8_t bag_index;
    uint8_t bag_slot;
    uint8_t spell_index;
    /* mangosone: next cast if exists (single or not) */
    uint8_t cast_count;
    uint32_t spell;
    uint64_t item;
    uint32_t glyph_index;
    wrath_ClientCastFlags cast_flags;
    float elevation;
    float speed;
    wrath_ClientMovementData movement_data;
    uint32_t opcode;
    uint64_t guid;
    wrath_MovementInfo info;
    wrath_SpellCastTargets targets;

} wrath_CMSG_USE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_USE_ITEM_free(wrath_CMSG_USE_ITEM* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_USE_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_USE_ITEM* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot;

} wrath_CMSG_OPEN_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_OPEN_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_OPEN_ITEM* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot;

} wrath_CMSG_READ_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_READ_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_READ_ITEM* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_READ_ITEM_OK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_READ_ITEM_OK_write(WowWorldWriter* writer, const wrath_SMSG_READ_ITEM_OK* object);

/* vmangos has extra u8 with comment `0..2, read failure reason? if == 1, use next command`. */
typedef struct {
    uint64_t guid;

} wrath_SMSG_READ_ITEM_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_READ_ITEM_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_READ_ITEM_FAILED* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} wrath_SMSG_ITEM_COOLDOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ITEM_COOLDOWN_write(WowWorldWriter* writer, const wrath_SMSG_ITEM_COOLDOWN* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_GAMEOBJ_USE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GAMEOBJ_USE_write(WowWorldWriter* writer, const wrath_CMSG_GAMEOBJ_USE* object);

typedef struct {
    uint64_t guid;
    uint32_t animation_id;

} wrath_SMSG_GAMEOBJECT_CUSTOM_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GAMEOBJECT_CUSTOM_ANIM_write(WowWorldWriter* writer, const wrath_SMSG_GAMEOBJECT_CUSTOM_ANIM* object);

typedef struct {
    uint32_t trigger_id;

} wrath_CMSG_AREATRIGGER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AREATRIGGER_write(WowWorldWriter* writer, const wrath_CMSG_AREATRIGGER* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_FORWARD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_FORWARD_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_FORWARD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_FORWARD_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_FORWARD* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_BACKWARD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_BACKWARD_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_BACKWARD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_BACKWARD_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_BACKWARD* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_STOP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_STRAFE_LEFT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_STRAFE_LEFT_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_STRAFE_LEFT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_STRAFE_LEFT_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_STRAFE_LEFT* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_STRAFE_RIGHT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_STRAFE_RIGHT_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_STRAFE_RIGHT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_STRAFE_RIGHT_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_STRAFE_RIGHT* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_STOP_STRAFE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_STRAFE_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP_STRAFE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_STRAFE_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP_STRAFE* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_JUMP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_JUMP_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_JUMP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_JUMP_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_JUMP* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_TURN_LEFT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_TURN_LEFT_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_TURN_LEFT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_TURN_LEFT_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_TURN_LEFT* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_TURN_RIGHT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_TURN_RIGHT_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_TURN_RIGHT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_TURN_RIGHT_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_TURN_RIGHT* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_STOP_TURN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_TURN_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP_TURN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_TURN_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP_TURN* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_PITCH_UP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_PITCH_UP_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_PITCH_UP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_PITCH_UP_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_PITCH_UP* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_PITCH_DOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_PITCH_DOWN_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_PITCH_DOWN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_PITCH_DOWN_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_PITCH_DOWN* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_STOP_PITCH;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_PITCH_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP_PITCH* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_PITCH_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP_PITCH* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_SET_RUN_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_RUN_MODE_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_RUN_MODE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_RUN_MODE_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_RUN_MODE* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_SET_WALK_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_WALK_MODE_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_WALK_MODE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_WALK_MODE_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_WALK_MODE* object);

/* There does not appear to be a client version of this MSG. */
typedef struct {
    uint64_t player;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_TELEPORT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_TELEPORT_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_TELEPORT_Server* object);

/* There does not appear to be a CMSG version of this MSG. */
typedef struct {
    all_Vector3d position;
    float orientation;

} wrath_MSG_MOVE_TELEPORT_CHEAT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_TELEPORT_CHEAT_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_TELEPORT_CHEAT_Server* object);

/* Response to [MSG_MOVE_TELEPORT_ACK_Server], at which point [MSG_MOVE_TELEPORT_ACK_Server] should be sent to observing players. */
typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    uint32_t time;

} wrath_MSG_MOVE_TELEPORT_ACK_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_TELEPORT_ACK_Client_write(WowWorldWriter* writer, const wrath_MSG_MOVE_TELEPORT_ACK_Client* object);

/* Can be response to [CMSG_TELEPORT_TO_UNIT].
Can also be a response to [MSG_MOVE_TELEPORT_ACK_Client] after being sent. */
typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_TELEPORT_ACK_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_TELEPORT_ACK_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_TELEPORT_ACK_Server* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_FALL_LAND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_FALL_LAND_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_FALL_LAND* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_FALL_LAND_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_FALL_LAND* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_SWIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_SWIM_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_SWIM* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_SWIM_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_SWIM* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_STOP_SWIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_SWIM_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP_SWIM* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_SWIM_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP_SWIM* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_SET_FACING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_FACING_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_FACING* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_FACING_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_FACING* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_SET_PITCH;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_PITCH_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_PITCH* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_PITCH_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_PITCH* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_WORLDPORT_ACK_cmsg_write(WowWorldWriter* writer);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_WORLDPORT_ACK_smsg_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    /* cmangos-wotlk sets to 0 */
    uint8_t unknown;
    all_Vector3d spline_point;
    uint32_t spline_id;
    wrath_MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all_Vector3d position;
    wrath_SplineFlag spline_flags;
    uint32_t animation_id;
    uint32_t animation_start_time;
    uint32_t duration;
    float vertical_acceleration;
    uint32_t effect_start_time;
    MonsterMoveSpline splines;

} wrath_SMSG_MONSTER_MOVE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_MONSTER_MOVE_free(wrath_SMSG_MONSTER_MOVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MONSTER_MOVE_write(WowWorldWriter* writer, const wrath_SMSG_MONSTER_MOVE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} wrath_SMSG_MOVE_WATER_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_WATER_WALK_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_WATER_WALK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} wrath_SMSG_MOVE_LAND_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_LAND_WALK_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_LAND_WALK* object);

/* vmangos/mangoszero: write in client console: setrawpos x y z o. For now, it is implemented like worldport but on the same map. Consider using [MSG_MOVE_SET_RAW_POSITION_ACK]. */
typedef struct {
    all_Vector3d position;
    float orientation;

} wrath_CMSG_MOVE_SET_RAW_POSITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_SET_RAW_POSITION_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_SET_RAW_POSITION* object);

/* Tells the client that the running speed has changed.
Client replies with [CMSG_FORCE_RUN_SPEED_CHANGE_ACK].
vmangos sends this message to the client being changed and [SMSG_SPLINE_SET_RUN_SPEED] to others. */
typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    /* mangosone sets to 0
mangosone: new 2.1.0 */
    uint8_t unknown;
    float speed;

} wrath_SMSG_FORCE_RUN_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_RUN_SPEED_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_RUN_SPEED_CHANGE* object);

/* Sent to acknowledge the new speed. Reply to [SMSG_FORCE_RUN_SPEED_CHANGE]. */
typedef struct {
    uint64_t guid;
    uint32_t counter;
    wrath_MovementInfo info;
    float new_speed;

} wrath_CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FORCE_RUN_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const wrath_CMSG_FORCE_RUN_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} wrath_SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_RUN_BACK_SPEED_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_RUN_BACK_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    wrath_MovementInfo info;
    float new_speed;

} wrath_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const wrath_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} wrath_SMSG_FORCE_SWIM_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_SWIM_SPEED_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_SWIM_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    wrath_MovementInfo info;
    float new_speed;

} wrath_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const wrath_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} wrath_SMSG_FORCE_MOVE_ROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_MOVE_ROOT_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_MOVE_ROOT* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    wrath_MovementInfo info;

} wrath_CMSG_FORCE_MOVE_ROOT_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FORCE_MOVE_ROOT_ACK_write(WowWorldWriter* writer, const wrath_CMSG_FORCE_MOVE_ROOT_ACK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} wrath_SMSG_FORCE_MOVE_UNROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_MOVE_UNROOT_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_MOVE_UNROOT* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    wrath_MovementInfo info;

} wrath_CMSG_FORCE_MOVE_UNROOT_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FORCE_MOVE_UNROOT_ACK_write(WowWorldWriter* writer, const wrath_CMSG_FORCE_MOVE_UNROOT_ACK* object);

/* There does not appear to be a CMSG version of this MSG. */
typedef struct {
    wrath_MovementInfo info;

} wrath_MSG_MOVE_ROOT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_ROOT_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_ROOT_Server* object);

typedef struct {
    wrath_MovementInfo info;

} wrath_MSG_MOVE_UNROOT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_UNROOT_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_UNROOT_Server* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_HEARTBEAT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_HEARTBEAT_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_HEARTBEAT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_HEARTBEAT_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_HEARTBEAT* object);

typedef struct {
    uint64_t guid;
    /* mangoszero: Sequence
mangoszero sets to 0 */
    uint32_t movement_counter;
    /* cmangos/mangoszero/vmangos: x direction */
    float v_cos;
    /* cmangos/mangoszero/vmangos: y direction */
    float v_sin;
    /* cmangos/mangoszero/vmangos: Horizontal speed */
    float horizontal_speed;
    /* cmangos/mangoszero/vmangos: Z Movement speed (vertical) */
    float vertical_speed;

} wrath_SMSG_MOVE_KNOCK_BACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_KNOCK_BACK_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_KNOCK_BACK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    wrath_MovementInfo info;

} wrath_CMSG_MOVE_KNOCK_BACK_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_KNOCK_BACK_ACK_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_KNOCK_BACK_ACK* object);

typedef struct {
    uint64_t player;
    wrath_MovementInfo info;
    float sin_angle;
    float cos_angle;
    float x_y_speed;
    float velocity;

} wrath_MSG_MOVE_KNOCK_BACK_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_KNOCK_BACK_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_KNOCK_BACK_Server* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} wrath_SMSG_MOVE_FEATHER_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_FEATHER_FALL_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_FEATHER_FALL* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} wrath_SMSG_MOVE_NORMAL_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_NORMAL_FALL_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_NORMAL_FALL* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} wrath_SMSG_MOVE_SET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_SET_HOVER_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_SET_HOVER* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} wrath_SMSG_MOVE_UNSET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_UNSET_HOVER_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_UNSET_HOVER* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    wrath_MovementInfo info;
    uint32_t is_applied;

} wrath_CMSG_MOVE_HOVER_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_HOVER_ACK_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_HOVER_ACK* object);

typedef struct {
    uint64_t player;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_HOVER_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_HOVER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_HOVER_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_HOVER* object);

typedef struct {
    wrath_CinematicSequenceId cinematic_sequence_id;

} wrath_SMSG_TRIGGER_CINEMATIC;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TRIGGER_CINEMATIC_write(WowWorldWriter* writer, const wrath_SMSG_TRIGGER_CINEMATIC* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_NEXT_CINEMATIC_CAMERA_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_COMPLETE_CINEMATIC_write(WowWorldWriter* writer);

/* Data for which tutorials the client has passed.
All bits set means that all tutorials have been passed.
Must be sent after [SMSG_LOGIN_VERIFY_WORLD] otherwise the client will SEGFAULT. */
typedef struct {
    uint32_t tutorial_data[8];

} wrath_SMSG_TUTORIAL_FLAGS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TUTORIAL_FLAGS_write(WowWorldWriter* writer, const wrath_SMSG_TUTORIAL_FLAGS* object);

typedef struct {
    /* arcemu indexes into the tutorials by dividing by 32 and modulo 32. */
    uint32_t tutorial_flag;

} wrath_CMSG_TUTORIAL_FLAG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TUTORIAL_FLAG_write(WowWorldWriter* writer, const wrath_CMSG_TUTORIAL_FLAG* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TUTORIAL_CLEAR_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TUTORIAL_RESET_write(WowWorldWriter* writer);

/* Automatically sent by the client when it goes AFK. */
typedef struct {
    wrath_UnitStandState animation_state;

} wrath_CMSG_STANDSTATECHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_STANDSTATECHANGE_write(WowWorldWriter* writer, const wrath_CMSG_STANDSTATECHANGE* object);

typedef struct {
    wrath_Emote emote;

} wrath_CMSG_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_EMOTE_write(WowWorldWriter* writer, const wrath_CMSG_EMOTE* object);

typedef struct {
    wrath_Emote emote;
    uint64_t guid;

} wrath_SMSG_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_EMOTE_write(WowWorldWriter* writer, const wrath_SMSG_EMOTE* object);

/* Sent to notify the server that the client wants to perform an emote like /dance or /cry.
Server responds with [SMSG_TEXT_EMOTE] and [SMSG_EMOTE]. */
typedef struct {
    wrath_TextEmote text_emote;
    uint32_t emote;
    /* Guid targeted by the client. */
    uint64_t target;

} wrath_CMSG_TEXT_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TEXT_EMOTE_write(WowWorldWriter* writer, const wrath_CMSG_TEXT_EMOTE* object);

typedef struct {
    uint64_t guid;
    wrath_TextEmote text_emote;
    uint32_t emote;
    char* name;

} wrath_SMSG_TEXT_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_TEXT_EMOTE_free(wrath_SMSG_TEXT_EMOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TEXT_EMOTE_write(WowWorldWriter* writer, const wrath_SMSG_TEXT_EMOTE* object);

typedef struct {
    uint8_t item_slot;

} wrath_CMSG_AUTOSTORE_LOOT_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUTOSTORE_LOOT_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_AUTOSTORE_LOOT_ITEM* object);

typedef struct {
    uint8_t source_bag;
    uint8_t source_slot;

} wrath_CMSG_AUTOEQUIP_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUTOEQUIP_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_AUTOEQUIP_ITEM* object);

typedef struct {
    uint8_t source_bag;
    uint8_t source_slot;
    uint8_t destination_bag;

} wrath_CMSG_AUTOSTORE_BAG_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUTOSTORE_BAG_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_AUTOSTORE_BAG_ITEM* object);

typedef struct {
    uint8_t destination_bag;
    uint8_t destionation_slot;
    uint8_t source_bag;
    uint8_t source_slot;

} wrath_CMSG_SWAP_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SWAP_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_SWAP_ITEM* object);

typedef struct {
    wrath_ItemSlot source_slot;
    wrath_ItemSlot destination_slot;

} wrath_CMSG_SWAP_INV_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SWAP_INV_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_SWAP_INV_ITEM* object);

typedef struct {
    uint8_t source_bag;
    uint8_t source_slot;
    uint8_t destination_bag;
    uint8_t destination_slot;
    uint32_t amount;

} wrath_CMSG_SPLIT_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SPLIT_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_SPLIT_ITEM* object);

typedef struct {
    uint64_t guid;
    uint8_t destination_slot;

} wrath_CMSG_AUTOEQUIP_ITEM_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUTOEQUIP_ITEM_SLOT_write(WowWorldWriter* writer, const wrath_CMSG_AUTOEQUIP_ITEM_SLOT* object);

typedef struct {
    uint8_t bag;
    uint8_t slot;
    uint8_t amount;
    uint8_t unknown1;
    uint8_t unknown2;
    uint8_t unknown3;

} wrath_CMSG_DESTROYITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_DESTROYITEM_write(WowWorldWriter* writer, const wrath_CMSG_DESTROYITEM* object);

typedef struct {
    wrath_InventoryResult result;
    uint64_t item1;
    uint64_t item2;
    /* cmangos: bag type subclass, used with EQUIP_ERR_EVENT_AUTOEQUIP_BIND_CONFIRM and EQUIP_ERR_ITEM_DOESNT_GO_INTO_BAG2
vmangos sets to 0 */
    uint8_t bag_type_subclass;
    uint32_t required_level;

} wrath_SMSG_INVENTORY_CHANGE_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INVENTORY_CHANGE_FAILURE_write(WowWorldWriter* writer, const wrath_SMSG_INVENTORY_CHANGE_FAILURE* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_INSPECT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_INSPECT_write(WowWorldWriter* writer, const wrath_CMSG_INSPECT* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_INITIATE_TRADE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_INITIATE_TRADE_write(WowWorldWriter* writer, const wrath_CMSG_INITIATE_TRADE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BEGIN_TRADE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BUSY_TRADE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_IGNORE_TRADE_write(WowWorldWriter* writer);

typedef struct {
    /* Skipped in vmangos and set to 1 for bots */
    uint32_t unknown1;

} wrath_CMSG_ACCEPT_TRADE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ACCEPT_TRADE_write(WowWorldWriter* writer, const wrath_CMSG_ACCEPT_TRADE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_UNACCEPT_TRADE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CANCEL_TRADE_write(WowWorldWriter* writer);

typedef struct {
    uint8_t trade_slot;
    uint8_t bag;
    uint8_t slot;

} wrath_CMSG_SET_TRADE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_TRADE_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_SET_TRADE_ITEM* object);

typedef struct {
    uint8_t trade_slot;

} wrath_CMSG_CLEAR_TRADE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CLEAR_TRADE_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_CLEAR_TRADE_ITEM* object);

typedef struct {
    uint32_t gold;

} wrath_CMSG_SET_TRADE_GOLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_TRADE_GOLD_write(WowWorldWriter* writer, const wrath_CMSG_SET_TRADE_GOLD* object);

typedef struct {
    wrath_TradeStatus status;
    /* Set to 0 in vmangos. */
    uint64_t unknown1;
    wrath_InventoryResult inventory_result;
    /* used for: EQUIP_ERR_BAG_FULL, EQUIP_ERR_CANT_CARRY_MORE_OF_THIS, EQUIP_ERR_MISSING_REAGENT, EQUIP_ERR_ITEM_MAX_LIMIT_CATEGORY_COUNT_EXCEEDED */
    bool target_error;
    /* ItemLimitCategory.dbc entry */
    uint32_t item_limit_category_id;
    /* Trade slot -1 here clears CGTradeInfo::m_tradeMoney */
    uint8_t slot;

} wrath_SMSG_TRADE_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TRADE_STATUS_write(WowWorldWriter* writer, const wrath_SMSG_TRADE_STATUS* object);

typedef struct {
    /* cmangos/vmangos/mangoszero: send trader or own trade windows state (last need for proper show spell apply to non-trade slot) */
    bool self_player;
    /* added in 2.4.0, this value must be equal to value from TRADE_STATUS_OPEN_WINDOW status packet (different value for different players to block multiple trades?) */
    uint32_t trade_id;
    /* cmangos/vmangos/mangoszero: sets to 7
cmangos/vmangos/mangoszero: trade slots count/number?, = next field in most cases */
    uint32_t trade_slot_count1;
    /* cmangos/vmangos/mangoszero: sets to 7
cmangos/vmangos/mangoszero: trade slots count/number?, = prev field in most cases */
    uint32_t trade_slot_count2;
    uint32_t money_in_trade;
    uint32_t spell_on_lowest_slot;
    /* vmangos/cmangos/mangoszero: All set to same as trade_slot_count* (7), unsure which determines how big this is. Unused slots are 0. */
    wrath_TradeSlot trade_slots[7];

} wrath_SMSG_TRADE_STATUS_EXTENDED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TRADE_STATUS_EXTENDED_write(WowWorldWriter* writer, const wrath_SMSG_TRADE_STATUS_EXTENDED* object);

typedef struct {
    /* vmangos/cmangos/mangoszero: sets to 0x00000040 (64)
mangostwo (wrath) sets this to 0x00000080 (128) */
    uint32_t amount_of_factions;
    wrath_FactionInitializer* factions;

} wrath_SMSG_INITIALIZE_FACTIONS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_INITIALIZE_FACTIONS_free(wrath_SMSG_INITIALIZE_FACTIONS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INITIALIZE_FACTIONS_write(WowWorldWriter* writer, const wrath_SMSG_INITIALIZE_FACTIONS* object);

typedef struct {
    wrath_Faction faction;

} wrath_SMSG_SET_FACTION_VISIBLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SET_FACTION_VISIBLE_write(WowWorldWriter* writer, const wrath_SMSG_SET_FACTION_VISIBLE* object);

typedef struct {
    /* All emus set to 0. */
    float refer_a_friend_bonus;
    /* mangostwo: display visual effect */
    bool any_rank_increased;
    uint32_t amount_of_faction_standings;
    wrath_FactionStanding* faction_standings;

} wrath_SMSG_SET_FACTION_STANDING;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SET_FACTION_STANDING_free(wrath_SMSG_SET_FACTION_STANDING* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SET_FACTION_STANDING_write(WowWorldWriter* writer, const wrath_SMSG_SET_FACTION_STANDING* object);

typedef struct {
    wrath_Faction faction;
    wrath_FactionFlag flags;

} wrath_CMSG_SET_FACTION_ATWAR;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_FACTION_ATWAR_write(WowWorldWriter* writer, const wrath_CMSG_SET_FACTION_ATWAR* object);

typedef struct {
    wrath_ItemClass class_type;
    uint32_t item_sub_class_mask;

} wrath_SMSG_SET_PROFICIENCY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SET_PROFICIENCY_write(WowWorldWriter* writer, const wrath_SMSG_SET_PROFICIENCY* object);

typedef struct {
    uint8_t button;
    uint16_t action;
    uint8_t misc;
    uint8_t action_type;

} wrath_CMSG_SET_ACTION_BUTTON;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_ACTION_BUTTON_write(WowWorldWriter* writer, const wrath_CMSG_SET_ACTION_BUTTON* object);

typedef struct {
    wrath_ActionBarBehavior behavior;
    wrath_ActionButton data[144];

} wrath_SMSG_ACTION_BUTTONS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ACTION_BUTTONS_write(WowWorldWriter* writer, const wrath_SMSG_ACTION_BUTTONS* object);

typedef struct {
    /* cmangos/mangoszero: sets to 0 */
    uint8_t unknown1;
    uint16_t spell_count;
    wrath_InitialSpell* initial_spells;
    uint16_t cooldown_count;
    wrath_CooldownSpell* cooldowns;

} wrath_SMSG_INITIAL_SPELLS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_INITIAL_SPELLS_free(wrath_SMSG_INITIAL_SPELLS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INITIAL_SPELLS_write(WowWorldWriter* writer, const wrath_SMSG_INITIAL_SPELLS* object);

typedef struct {
    uint32_t id;
    /* mangostwo: 3.3.3 unk */
    uint16_t unknown;

} wrath_SMSG_LEARNED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LEARNED_SPELL_write(WowWorldWriter* writer, const wrath_SMSG_LEARNED_SPELL* object);

typedef struct {
    uint32_t new_spell;
    uint32_t old;

} wrath_SMSG_SUPERCEDED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SUPERCEDED_SPELL_write(WowWorldWriter* writer, const wrath_SMSG_SUPERCEDED_SPELL* object);

typedef struct {
    uint8_t cast_count;
    uint32_t spell;
    wrath_ClientCastFlags cast_flags;
    wrath_SpellCastTargets targets;
    float elevation;
    float speed;
    wrath_ClientMovementData movement_data;
    uint32_t opcode;
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_CMSG_CAST_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CAST_SPELL_free(wrath_CMSG_CAST_SPELL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CAST_SPELL_write(WowWorldWriter* writer, const wrath_CMSG_CAST_SPELL* object);

typedef struct {
    uint32_t id;

} wrath_CMSG_CANCEL_CAST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CANCEL_CAST_write(WowWorldWriter* writer, const wrath_CMSG_CANCEL_CAST* object);

typedef struct {
    uint8_t cast_count;
    uint32_t id;
    wrath_SpellCastResult result;
    bool multiple_casts;
    uint32_t spell_focus;
    wrath_Area area;
    uint32_t totems[2];
    uint32_t totem_categories[2];
    uint32_t item_class;
    uint32_t item_sub_class;
    uint32_t item_limit_category;
    uint32_t custom_error;
    uint32_t missing_item;
    uint32_t mechanic;
    uint32_t equipped_item_sub_class;
    uint32_t item;
    uint32_t count;
    wrath_Skill skill;
    uint32_t skill_required;
    uint32_t fishing_skill_required;

} wrath_SMSG_CAST_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CAST_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_CAST_FAILED* object);

typedef struct {
    /* cmangos/vmangos/mangoszero: if cast item is used, set this to guid of cast item, otherwise set it to same as caster. */
    uint64_t cast_item;
    uint64_t caster;
    uint8_t cast_count;
    uint32_t spell;
    wrath_CastFlags flags;
    uint32_t timer;
    wrath_SpellCastTargets targets;
    wrath_Power power;
    uint32_t ammo_display_id;
    uint32_t ammo_inventory_type;
    uint32_t unknown1;
    uint32_t unknown2;

} wrath_SMSG_SPELL_START;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SPELL_START_free(wrath_SMSG_SPELL_START* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELL_START_write(WowWorldWriter* writer, const wrath_SMSG_SPELL_START* object);

typedef struct {
    /* cmangos/vmangos/mangoszero: if cast item is used, set this to guid of cast item, otherwise set it to same as caster. */
    uint64_t cast_item;
    uint64_t caster;
    uint8_t extra_casts;
    uint32_t spell;
    wrath_GameobjectCastFlags flags;
    uint32_t timestamp;
    uint8_t amount_of_hits;
    uint64_t* hits;
    uint8_t amount_of_misses;
    wrath_SpellMiss* misses;
    wrath_SpellCastTargets targets;
    wrath_Power power;
    uint8_t rune_mask_initial;
    uint8_t rune_mask_after_cast;
    uint8_t rune_cooldowns[6];
    float elevation;
    uint32_t delay_trajectory;
    uint32_t ammo_display_id;
    uint32_t ammo_inventory_type;
    uint32_t unknown1;
    uint32_t unknown2;
    uint8_t unknown3;

} wrath_SMSG_SPELL_GO;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SPELL_GO_free(wrath_SMSG_SPELL_GO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELL_GO_write(WowWorldWriter* writer, const wrath_SMSG_SPELL_GO* object);

typedef struct {
    uint64_t guid;
    uint8_t extra_casts;
    uint32_t spell;
    wrath_SpellCastResult result;

} wrath_SMSG_SPELL_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELL_FAILURE_write(WowWorldWriter* writer, const wrath_SMSG_SPELL_FAILURE* object);

typedef struct {
    uint64_t guid;
    uint8_t flags;
    uint32_t amount_of_cooldowns;
    wrath_SpellCooldownStatus* cooldowns;

} wrath_SMSG_SPELL_COOLDOWN;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SPELL_COOLDOWN_free(wrath_SMSG_SPELL_COOLDOWN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELL_COOLDOWN_write(WowWorldWriter* writer, const wrath_SMSG_SPELL_COOLDOWN* object);

typedef struct {
    uint32_t id;
    uint64_t guid;

} wrath_SMSG_COOLDOWN_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_COOLDOWN_EVENT_write(WowWorldWriter* writer, const wrath_SMSG_COOLDOWN_EVENT* object);

typedef struct {
    uint32_t id;

} wrath_CMSG_CANCEL_AURA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CANCEL_AURA_write(WowWorldWriter* writer, const wrath_CMSG_CANCEL_AURA* object);

typedef struct {
    uint8_t cast_count;
    uint32_t id;
    wrath_SpellCastResult result;
    bool multiple_casts;
    uint32_t spell_focus;
    wrath_Area area;
    uint32_t totems[2];
    uint32_t totem_categories[2];
    uint32_t item_class;
    uint32_t item_sub_class;
    uint32_t item_limit_category;
    uint32_t custom_error;
    uint32_t missing_item;
    uint32_t mechanic;
    uint32_t equipped_item_sub_class;
    uint32_t item;
    uint32_t count;
    wrath_Skill skill;
    uint32_t skill_required;
    uint32_t fishing_skill_required;

} wrath_SMSG_PET_CAST_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_CAST_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_PET_CAST_FAILED* object);

typedef struct {
    uint64_t caster;
    uint32_t spell;
    uint32_t duration;

} wrath_MSG_CHANNEL_START_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_CHANNEL_START_Server_write(WowWorldWriter* writer, const wrath_MSG_CHANNEL_START_Server* object);

typedef struct {
    uint64_t caster;
    uint32_t time;

} wrath_MSG_CHANNEL_UPDATE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_CHANNEL_UPDATE_Server_write(WowWorldWriter* writer, const wrath_MSG_CHANNEL_UPDATE_Server* object);

typedef struct {
    uint32_t id;

} wrath_CMSG_CANCEL_CHANNELLING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CANCEL_CHANNELLING_write(WowWorldWriter* writer, const wrath_CMSG_CANCEL_CHANNELLING* object);

typedef struct {
    uint64_t guid;
    wrath_AiReaction reaction;

} wrath_SMSG_AI_REACTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AI_REACTION_write(WowWorldWriter* writer, const wrath_SMSG_AI_REACTION* object);

/* Sets the current target. */
typedef struct {
    uint64_t target;

} wrath_CMSG_SET_SELECTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_SELECTION_write(WowWorldWriter* writer, const wrath_CMSG_SET_SELECTION* object);

typedef struct {
    uint64_t set;

} wrath_CMSG_DELETEEQUIPMENT_SET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_DELETEEQUIPMENT_SET_write(WowWorldWriter* writer, const wrath_CMSG_DELETEEQUIPMENT_SET* object);

typedef struct {
    bool accept;

} wrath_CMSG_INSTANCE_LOCK_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_INSTANCE_LOCK_RESPONSE_write(WowWorldWriter* writer, const wrath_CMSG_INSTANCE_LOCK_RESPONSE* object);

/* Signals that client has right clicked an opponent and is in the attack stance.
Server should reply with [SMSG_ATTACKSTART]. */
typedef struct {
    uint64_t guid;

} wrath_CMSG_ATTACKSWING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ATTACKSWING_write(WowWorldWriter* writer, const wrath_CMSG_ATTACKSWING* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ATTACKSTOP_write(WowWorldWriter* writer);

typedef struct {
    uint64_t attacker;
    uint64_t victim;

} wrath_SMSG_ATTACKSTART;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ATTACKSTART_write(WowWorldWriter* writer, const wrath_SMSG_ATTACKSTART* object);

typedef struct {
    uint64_t player;
    uint64_t enemy;
    /* cmangos/vmangos/mangoszero/arcemu/azerothcore/mangostwo: set to 0 with comment: unk, can be 1 also */
    uint32_t unknown1;

} wrath_SMSG_ATTACKSTOP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ATTACKSTOP_write(WowWorldWriter* writer, const wrath_SMSG_ATTACKSTOP* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ATTACKSWING_NOTINRANGE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ATTACKSWING_BADFACING_write(WowWorldWriter* writer);

typedef struct {
    uint32_t time;
    uint32_t encounter_mask;
    uint8_t unknown;

} wrath_SMSG_INSTANCE_LOCK_WARNING_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INSTANCE_LOCK_WARNING_QUERY_write(WowWorldWriter* writer, const wrath_SMSG_INSTANCE_LOCK_WARNING_QUERY* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ATTACKSWING_DEADTARGET_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ATTACKSWING_CANT_ATTACK_write(WowWorldWriter* writer);

typedef struct {
    wrath_HitInfo hit_info;
    uint64_t attacker;
    uint64_t target;
    uint32_t total_damage;
    uint32_t overkill;
    uint8_t amount_of_damages;
    wrath_DamageInfo* damage_infos;
    uint32_t absorb;
    uint32_t resist;
    wrath_VictimState victim_state;
    /* arcemu: can be 0,1000 or -1 */
    uint32_t unknown1;
    uint32_t unknown2;
    uint32_t blocked_amount;
    uint32_t unknown3;
    uint32_t unknown4;
    float unknown5;
    float unknown6;
    float unknown7;
    float unknown8;
    float unknown9;
    float unknown10;
    float unknown11;
    float unknown12;
    float unknown13;
    float unknown14;
    uint32_t unknown15;

} wrath_SMSG_ATTACKERSTATEUPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ATTACKERSTATEUPDATE_free(wrath_SMSG_ATTACKERSTATEUPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ATTACKERSTATEUPDATE_write(WowWorldWriter* writer, const wrath_SMSG_ATTACKERSTATEUPDATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CANCEL_COMBAT_write(WowWorldWriter* writer);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t id;
    uint32_t damage;
    uint32_t overheal;
    uint32_t absorb;
    bool critical;
    /* mangostwo: unused in client? */
    uint8_t unknown;

} wrath_SMSG_SPELLHEALLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELLHEALLOG_write(WowWorldWriter* writer, const wrath_SMSG_SPELLHEALLOG* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    wrath_Power power;
    uint32_t damage;

} wrath_SMSG_SPELLENERGIZELOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELLENERGIZELOG_write(WowWorldWriter* writer, const wrath_SMSG_SPELLENERGIZELOG* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_BREAK_TARGET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BREAK_TARGET_write(WowWorldWriter* writer, const wrath_SMSG_BREAK_TARGET* object);

/* Inform the client of a their hearthstone location. */
typedef struct {
    all_Vector3d position;
    wrath_Map map;
    wrath_Area area;

} wrath_SMSG_BINDPOINTUPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BINDPOINTUPDATE_write(WowWorldWriter* writer, const wrath_SMSG_BINDPOINTUPDATE* object);

typedef struct {
    uint64_t guid;
    wrath_Area area;

} wrath_SMSG_PLAYERBOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PLAYERBOUND_write(WowWorldWriter* writer, const wrath_SMSG_PLAYERBOUND* object);

typedef struct {
    uint64_t guid;
    bool allow_movement;

} wrath_SMSG_CLIENT_CONTROL_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CLIENT_CONTROL_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_CLIENT_CONTROL_UPDATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REPOP_REQUEST_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    char* name;
    bool player;

} wrath_SMSG_RESURRECT_REQUEST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_RESURRECT_REQUEST_free(wrath_SMSG_RESURRECT_REQUEST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_RESURRECT_REQUEST_write(WowWorldWriter* writer, const wrath_SMSG_RESURRECT_REQUEST* object);

typedef struct {
    uint64_t guid;
    uint8_t status;

} wrath_CMSG_RESURRECT_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_RESURRECT_RESPONSE_write(WowWorldWriter* writer, const wrath_CMSG_RESURRECT_RESPONSE* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_LOOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LOOT_write(WowWorldWriter* writer, const wrath_CMSG_LOOT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LOOT_MONEY_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} wrath_CMSG_LOOT_RELEASE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LOOT_RELEASE_write(WowWorldWriter* writer, const wrath_CMSG_LOOT_RELEASE* object);

typedef struct {
    uint64_t guid;
    wrath_LootMethod loot_method;
    wrath_LootMethodError loot_error;
    uint32_t gold;
    uint8_t amount_of_items;
    wrath_LootItem* items;

} wrath_SMSG_LOOT_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LOOT_RESPONSE_free(wrath_SMSG_LOOT_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_LOOT_RESPONSE* object);

typedef struct {
    uint64_t guid;
    /* Set to 1 on mangoszero/vmangos/cmangos/azerothcraft/mangosone/mangostwo/arcemu */
    uint8_t unknown1;

} wrath_SMSG_LOOT_RELEASE_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_RELEASE_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_LOOT_RELEASE_RESPONSE* object);

/* Notify a looting player that an item has been taken. */
typedef struct {
    uint8_t slot;

} wrath_SMSG_LOOT_REMOVED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_REMOVED_write(WowWorldWriter* writer, const wrath_SMSG_LOOT_REMOVED* object);

typedef struct {
    uint32_t amount;
    /* Controls the text displayed in chat. False is 'Your share is...' and true is 'You loot...' */
    bool alone;

} wrath_SMSG_LOOT_MONEY_NOTIFY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_MONEY_NOTIFY_write(WowWorldWriter* writer, const wrath_SMSG_LOOT_MONEY_NOTIFY* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_CLEAR_MONEY_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    wrath_NewItemSource source;
    wrath_NewItemCreationType creation_type;
    wrath_NewItemChatAlert alert_chat;
    uint8_t bag_slot;
    /* mangoszero: item slot, but when added to stack: 0xFFFFFFFF */
    uint32_t item_slot;
    uint32_t item;
    /* mangoszero: SuffixFactor */
    uint32_t item_suffix_factor;
    /* mangoszero: random item property id */
    uint32_t item_random_property_id;
    uint32_t item_count;
    uint32_t item_count_in_inventory;

} wrath_SMSG_ITEM_PUSH_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ITEM_PUSH_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_ITEM_PUSH_RESULT* object);

typedef struct {
    uint64_t initiator;
    uint64_t target;

} wrath_SMSG_DUEL_REQUESTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DUEL_REQUESTED_write(WowWorldWriter* writer, const wrath_SMSG_DUEL_REQUESTED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DUEL_OUTOFBOUNDS_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DUEL_INBOUNDS_write(WowWorldWriter* writer);

typedef struct {
    bool ended_without_interruption;

} wrath_SMSG_DUEL_COMPLETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DUEL_COMPLETE_write(WowWorldWriter* writer, const wrath_SMSG_DUEL_COMPLETE* object);

typedef struct {
    wrath_DuelWinnerReason reason;
    char* opponent_name;
    char* initiator_name;

} wrath_SMSG_DUEL_WINNER;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_DUEL_WINNER_free(wrath_SMSG_DUEL_WINNER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DUEL_WINNER_write(WowWorldWriter* writer, const wrath_SMSG_DUEL_WINNER* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_DUEL_ACCEPTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_DUEL_ACCEPTED_write(WowWorldWriter* writer, const wrath_CMSG_DUEL_ACCEPTED* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_DUEL_CANCELLED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_DUEL_CANCELLED_write(WowWorldWriter* writer, const wrath_CMSG_DUEL_CANCELLED* object);

/* This is not used in any TBC emulator, but trinitycore has it implemented so it is assumed to be valid for TBC as well. */
typedef struct {
    wrath_MountResult result;

} wrath_SMSG_MOUNTRESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOUNTRESULT_write(WowWorldWriter* writer, const wrath_SMSG_MOUNTRESULT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOUNTSPECIAL_ANIM_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} wrath_SMSG_MOUNTSPECIAL_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOUNTSPECIAL_ANIM_write(WowWorldWriter* writer, const wrath_SMSG_MOUNTSPECIAL_ANIM* object);

typedef struct {
    wrath_PetTameFailureReason reason;

} wrath_SMSG_PET_TAME_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_TAME_FAILURE_write(WowWorldWriter* writer, const wrath_SMSG_PET_TAME_FAILURE* object);

typedef struct {
    uint32_t position2;
    uint32_t data2;
} wrath_CMSG_PET_SET_ACTION_extra;

typedef struct {
    uint64_t guid;
    uint32_t position1;
    uint32_t data1;

    wrath_CMSG_PET_SET_ACTION_extra* extra;
} wrath_CMSG_PET_SET_ACTION;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_PET_SET_ACTION_free(wrath_CMSG_PET_SET_ACTION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_SET_ACTION_write(WowWorldWriter* writer, const wrath_CMSG_PET_SET_ACTION* object);

typedef struct {
    uint64_t pet;
    uint32_t data;
    uint64_t target;

} wrath_CMSG_PET_ACTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_ACTION_write(WowWorldWriter* writer, const wrath_CMSG_PET_ACTION* object);

typedef struct {
    uint64_t pet;

} wrath_CMSG_PET_ABANDON;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_ABANDON_write(WowWorldWriter* writer, const wrath_CMSG_PET_ABANDON* object);

typedef struct {
    uint64_t pet;
    char* name;
    bool declined;

} wrath_CMSG_PET_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_PET_RENAME_free(wrath_CMSG_PET_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_RENAME_write(WowWorldWriter* writer, const wrath_CMSG_PET_RENAME* object);

/* Some emulators have this with fields, but it has been verified to be empty on 1.12 through reverse engineering. */
typedef struct {
    wrath_PetNameInvalidReason reason;
    char* name;
    wrath_DeclinedPetNameIncluded included;
    char* declined_names[5];

} wrath_SMSG_PET_NAME_INVALID;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PET_NAME_INVALID_free(wrath_SMSG_PET_NAME_INVALID* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_NAME_INVALID_write(WowWorldWriter* writer, const wrath_SMSG_PET_NAME_INVALID* object);

typedef struct {
    wrath_CreatureFamily family;
    uint32_t duration;
    wrath_PetReactState react;
    wrath_PetCommandState command;
    /* mangoszero: set to 0 */
    uint8_t unknown;
    wrath_PetEnabled pet_enabled;
    uint32_t action_bars[10];
    uint8_t amount_of_spells;
    uint32_t* spells;
    uint8_t amount_of_cooldowns;
    wrath_PetSpellCooldown* cooldowns;
} wrath_SMSG_PET_SPELLS_action_bars;

typedef struct {
    uint64_t pet;

    wrath_SMSG_PET_SPELLS_action_bars* action_bars;
} wrath_SMSG_PET_SPELLS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PET_SPELLS_free(wrath_SMSG_PET_SPELLS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_SPELLS_write(WowWorldWriter* writer, const wrath_SMSG_PET_SPELLS* object);

typedef struct {
    uint64_t guid;
    wrath_PetReactState react_state;
    wrath_PetCommandState command_state;
    /* vmangos sets to 0. */
    uint8_t unknown1;
    wrath_PetEnabled pet_enabled;

} wrath_SMSG_PET_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_MODE_write(WowWorldWriter* writer, const wrath_SMSG_PET_MODE* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_GOSSIP_HELLO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GOSSIP_HELLO_write(WowWorldWriter* writer, const wrath_CMSG_GOSSIP_HELLO* object);

typedef struct {
    /* vmangos: if (_player->PlayerTalkClass->GossipOptionCoded(gossipListId)) */
    char* code;
} wrath_CMSG_GOSSIP_SELECT_OPTION_unknown;

typedef struct {
    uint64_t guid;
    uint32_t menu_id;
    uint32_t gossip_list_id;

    wrath_CMSG_GOSSIP_SELECT_OPTION_unknown* unknown;
} wrath_CMSG_GOSSIP_SELECT_OPTION;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GOSSIP_SELECT_OPTION_free(wrath_CMSG_GOSSIP_SELECT_OPTION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GOSSIP_SELECT_OPTION_write(WowWorldWriter* writer, const wrath_CMSG_GOSSIP_SELECT_OPTION* object);

typedef struct {
    uint64_t guid;
    /* mangosone: new 2.4.0 */
    uint32_t menu_id;
    uint32_t title_text_id;
    uint32_t amount_of_gossip_items;
    wrath_GossipItem* gossips;
    uint32_t amount_of_quests;
    wrath_QuestItem* quests;

} wrath_SMSG_GOSSIP_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GOSSIP_MESSAGE_free(wrath_SMSG_GOSSIP_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GOSSIP_MESSAGE_write(WowWorldWriter* writer, const wrath_SMSG_GOSSIP_MESSAGE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GOSSIP_COMPLETE_write(WowWorldWriter* writer);

typedef struct {
    uint32_t text_id;
    uint64_t guid;

} wrath_CMSG_NPC_TEXT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_NPC_TEXT_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_NPC_TEXT_QUERY* object);

typedef struct {
    uint32_t text_id;
    wrath_NpcTextUpdate texts[8];

} wrath_SMSG_NPC_TEXT_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_NPC_TEXT_UPDATE_free(wrath_SMSG_NPC_TEXT_UPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_NPC_TEXT_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_NPC_TEXT_UPDATE* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_QUESTGIVER_STATUS_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTGIVER_STATUS_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_QUESTGIVER_STATUS_QUERY* object);

typedef struct {
    uint64_t guid;
    wrath_QuestGiverStatus status;

} wrath_SMSG_QUESTGIVER_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTGIVER_STATUS_write(WowWorldWriter* writer, const wrath_SMSG_QUESTGIVER_STATUS* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_QUESTGIVER_HELLO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTGIVER_HELLO_write(WowWorldWriter* writer, const wrath_CMSG_QUESTGIVER_HELLO* object);

typedef struct {
    uint64_t npc;
    char* title;
    /* mangoszero: player emote */
    uint32_t emote_delay;
    /* mangoszero: NPC emote */
    uint32_t emote;
    uint8_t amount_of_entries;
    wrath_QuestItem* quest_items;

} wrath_SMSG_QUESTGIVER_QUEST_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_QUESTGIVER_QUEST_LIST_free(wrath_SMSG_QUESTGIVER_QUEST_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTGIVER_QUEST_LIST_write(WowWorldWriter* writer, const wrath_SMSG_QUESTGIVER_QUEST_LIST* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;
    uint8_t unknown1;

} wrath_CMSG_QUESTGIVER_QUERY_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTGIVER_QUERY_QUEST_write(WowWorldWriter* writer, const wrath_CMSG_QUESTGIVER_QUERY_QUEST* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTGIVER_QUEST_AUTOLAUNCH_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    /* arcemu also sends guid2 if guid is a player. Otherwise sends 0. */
    uint64_t guid2;
    uint32_t quest_id;
    char* title;
    char* details;
    char* objectives;
    bool auto_finish;
    uint32_t quest_flags;
    uint32_t suggested_players;
    /* arcemu: MANGOS: IsFinished? value is sent back to server in quest accept packet */
    uint8_t is_finished;
    uint32_t amount_of_choice_item_rewards;
    wrath_QuestGiverReward* choice_item_rewards;
    uint32_t amount_of_item_rewards;
    wrath_QuestGiverReward* item_rewards;
    uint32_t money_reward;
    /* arcemu: New 3.3 - this is the XP you'll see on the quest reward panel too, but I think it is fine not to show it, because it can change if the player levels up before completing the quest. */
    uint32_t experience_reward;
    uint32_t honor_reward;
    /* arcemu: new 3.3 */
    float honor_reward_multiplier;
    /* mangosone: reward spell, this spell will display (icon) (casted if RewSpellCast==0) */
    uint32_t reward_spell;
    uint32_t casted_spell;
    /* mangosone: CharTitle, new 2.4.0, player gets this title (bit index from CharTitles) */
    uint32_t title_reward;
    uint32_t talent_reward;
    uint32_t arena_point_reward;
    /* arcemu: new 3.3.0 */
    uint32_t unknown2;
    uint32_t reward_factions[5];
    /* mangostwo: columnid in QuestFactionReward.dbc (if negative, from second row) */
    uint32_t reward_reputations[5];
    /* mangostwo: reward reputation override. No diplomacy bonus is expected given, reward also does not display in chat window */
    uint32_t reward_reputations_override[5];
    uint32_t amount_of_emotes;
    wrath_QuestDetailsEmote* emotes;

} wrath_SMSG_QUESTGIVER_QUEST_DETAILS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_QUESTGIVER_QUEST_DETAILS_free(wrath_SMSG_QUESTGIVER_QUEST_DETAILS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTGIVER_QUEST_DETAILS_write(WowWorldWriter* writer, const wrath_SMSG_QUESTGIVER_QUEST_DETAILS* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} wrath_CMSG_QUESTGIVER_ACCEPT_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTGIVER_ACCEPT_QUEST_write(WowWorldWriter* writer, const wrath_CMSG_QUESTGIVER_ACCEPT_QUEST* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} wrath_CMSG_QUESTGIVER_COMPLETE_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTGIVER_COMPLETE_QUEST_write(WowWorldWriter* writer, const wrath_CMSG_QUESTGIVER_COMPLETE_QUEST* object);

/* mangoszero/vmangos: Quests that don't require items use the `RequestItemsText` field to store the text that is shown when you talk to the quest giver while the quest is incomplete. Therefore the text should not be shown for them when the quest is complete. For quests that do require items, it is self explanatory. */
typedef struct {
    uint64_t npc;
    uint32_t quest_id;
    char* title;
    char* request_items_text;
    uint32_t emote_delay;
    uint32_t emote;
    bool auto_finish;
    /* mangostwo: 3.3.3 questFlags */
    uint32_t flags1;
    uint32_t suggested_players;
    uint32_t required_money;
    uint32_t amount_of_required_items;
    wrath_QuestItemRequirement* required_items;
    wrath_QuestCompletable completable;
    /* mangostwo: set to 0x04 */
    uint32_t flags2;
    /* mangostwo: set to 0x08 */
    uint32_t flags3;
    /* mangostwo: set to 0x10 */
    uint32_t flags4;

} wrath_SMSG_QUESTGIVER_REQUEST_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_QUESTGIVER_REQUEST_ITEMS_free(wrath_SMSG_QUESTGIVER_REQUEST_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTGIVER_REQUEST_ITEMS_write(WowWorldWriter* writer, const wrath_SMSG_QUESTGIVER_REQUEST_ITEMS* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} wrath_CMSG_QUESTGIVER_REQUEST_REWARD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTGIVER_REQUEST_REWARD_write(WowWorldWriter* writer, const wrath_CMSG_QUESTGIVER_REQUEST_REWARD* object);

typedef struct {
    uint64_t npc;
    uint32_t quest_id;
    char* title;
    char* offer_reward_text;
    bool auto_finish;
    uint32_t flags1;
    uint32_t suggested_players;
    uint32_t amount_of_emotes;
    wrath_NpcTextUpdateEmote* emotes;
    uint32_t amount_of_choice_item_rewards;
    wrath_QuestItemRequirement* choice_item_rewards;
    uint32_t amount_of_item_rewards;
    wrath_QuestItemRequirement* item_rewards;
    uint32_t money_reward;
    uint32_t experience_reward;
    uint32_t honor_reward;
    float honor_reward_multiplier;
    /* mangostwo: unused by client?
mangostwo sets to 0x08. */
    uint32_t unknown1;
    uint32_t reward_spell;
    /* mangoszero and cmangos disagree about which field is _cast, although they both agree that the _cast field should not be in zero (vanilla). They still both include both fields in the code though. */
    uint32_t reward_spell_cast;
    uint32_t title_reward;
    uint32_t reward_talents;
    uint32_t reward_arena_points;
    uint32_t reward_reputation_mask;
    uint32_t reward_factions[5];
    /* mangostwo: columnid in QuestFactionReward.dbc (if negative, from second row) */
    uint32_t reward_reputations[5];
    /* mangostwo: reward reputation override. No diplomacy bonus is expected given, reward also does not display in chat window */
    uint32_t reward_reputations_override[5];

} wrath_SMSG_QUESTGIVER_OFFER_REWARD;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_QUESTGIVER_OFFER_REWARD_free(wrath_SMSG_QUESTGIVER_OFFER_REWARD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTGIVER_OFFER_REWARD_write(WowWorldWriter* writer, const wrath_SMSG_QUESTGIVER_OFFER_REWARD* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;
    uint32_t reward;

} wrath_CMSG_QUESTGIVER_CHOOSE_REWARD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTGIVER_CHOOSE_REWARD_write(WowWorldWriter* writer, const wrath_CMSG_QUESTGIVER_CHOOSE_REWARD* object);

typedef struct {
    wrath_QuestFailedReason msg;

} wrath_SMSG_QUESTGIVER_QUEST_INVALID;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTGIVER_QUEST_INVALID_write(WowWorldWriter* writer, const wrath_SMSG_QUESTGIVER_QUEST_INVALID* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTGIVER_CANCEL_write(WowWorldWriter* writer);

typedef struct {
    uint32_t quest_id;
    /* cmangos/vmangos/mangoszero: set to 0x03 */
    uint32_t unknown;
    uint32_t experience_reward;
    uint32_t money_reward;
    uint32_t honor_reward;
    uint32_t talent_reward;
    uint32_t arena_point_reward;
    uint32_t amount_of_item_rewards;
    wrath_QuestItemReward* item_rewards;

} wrath_SMSG_QUESTGIVER_QUEST_COMPLETE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_QUESTGIVER_QUEST_COMPLETE_free(wrath_SMSG_QUESTGIVER_QUEST_COMPLETE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTGIVER_QUEST_COMPLETE_write(WowWorldWriter* writer, const wrath_SMSG_QUESTGIVER_QUEST_COMPLETE* object);

typedef struct {
    uint32_t quest_id;
    wrath_QuestFailedReason reason;

} wrath_SMSG_QUESTGIVER_QUEST_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTGIVER_QUEST_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_QUESTGIVER_QUEST_FAILED* object);

typedef struct {
    uint8_t slot1;
    uint8_t slot2;

} wrath_CMSG_QUESTLOG_SWAP_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTLOG_SWAP_QUEST_write(WowWorldWriter* writer, const wrath_CMSG_QUESTLOG_SWAP_QUEST* object);

typedef struct {
    uint8_t slot;

} wrath_CMSG_QUESTLOG_REMOVE_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTLOG_REMOVE_QUEST_write(WowWorldWriter* writer, const wrath_CMSG_QUESTLOG_REMOVE_QUEST* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTLOG_FULL_write(WowWorldWriter* writer);

typedef struct {
    uint32_t quest_id;

} wrath_SMSG_QUESTUPDATE_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTUPDATE_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_QUESTUPDATE_FAILED* object);

typedef struct {
    uint32_t quest_id;

} wrath_SMSG_QUESTUPDATE_FAILEDTIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTUPDATE_FAILEDTIMER_write(WowWorldWriter* writer, const wrath_SMSG_QUESTUPDATE_FAILEDTIMER* object);

typedef struct {
    uint32_t quest_id;

} wrath_SMSG_QUESTUPDATE_COMPLETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTUPDATE_COMPLETE_write(WowWorldWriter* writer, const wrath_SMSG_QUESTUPDATE_COMPLETE* object);

typedef struct {
    uint32_t quest_id;
    /* Unsure of name */
    uint32_t creature_id;
    uint32_t kill_count;
    uint32_t required_kill_count;
    uint64_t guid;

} wrath_SMSG_QUESTUPDATE_ADD_KILL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTUPDATE_ADD_KILL_write(WowWorldWriter* writer, const wrath_SMSG_QUESTUPDATE_ADD_KILL* object);

typedef struct {
    uint32_t required_item_id;
    uint32_t items_required;

} wrath_SMSG_QUESTUPDATE_ADD_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTUPDATE_ADD_ITEM_write(WowWorldWriter* writer, const wrath_SMSG_QUESTUPDATE_ADD_ITEM* object);

typedef struct {
    uint32_t quest_id;

} wrath_CMSG_QUEST_CONFIRM_ACCEPT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUEST_CONFIRM_ACCEPT_write(WowWorldWriter* writer, const wrath_CMSG_QUEST_CONFIRM_ACCEPT* object);

typedef struct {
    uint32_t quest_id;
    char* quest_title;
    uint64_t guid;

} wrath_SMSG_QUEST_CONFIRM_ACCEPT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_QUEST_CONFIRM_ACCEPT_free(wrath_SMSG_QUEST_CONFIRM_ACCEPT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUEST_CONFIRM_ACCEPT_write(WowWorldWriter* writer, const wrath_SMSG_QUEST_CONFIRM_ACCEPT* object);

typedef struct {
    uint32_t quest_id;

} wrath_CMSG_PUSHQUESTTOPARTY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PUSHQUESTTOPARTY_write(WowWorldWriter* writer, const wrath_CMSG_PUSHQUESTTOPARTY* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_LIST_INVENTORY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LIST_INVENTORY_write(WowWorldWriter* writer, const wrath_CMSG_LIST_INVENTORY* object);

/* if `amount_of_items` is 0 it is supposedly followed by a single u8 with 0 to say that vendor has no items. */
typedef struct {
    uint64_t vendor;
    /* cmangos: 0 displays Vendor has no inventory */
    uint8_t amount_of_items;
    wrath_ListInventoryItem* items;

} wrath_SMSG_LIST_INVENTORY;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LIST_INVENTORY_free(wrath_SMSG_LIST_INVENTORY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LIST_INVENTORY_write(WowWorldWriter* writer, const wrath_SMSG_LIST_INVENTORY* object);

typedef struct {
    uint64_t vendor;
    uint64_t item;
    uint8_t amount;

} wrath_CMSG_SELL_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SELL_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_SELL_ITEM* object);

typedef struct {
    uint64_t guid;
    uint64_t item;
    wrath_SellItemResult result;

} wrath_SMSG_SELL_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SELL_ITEM_write(WowWorldWriter* writer, const wrath_SMSG_SELL_ITEM* object);

typedef struct {
    uint64_t vendor;
    uint32_t item;
    uint32_t slot;
    uint8_t amount;

} wrath_CMSG_BUY_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BUY_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_BUY_ITEM* object);

typedef struct {
    uint64_t vendor;
    uint32_t item;
    /* arcemu: VLack: 3.1.2 This is the slot's number on the vendor's panel, starts from 1 */
    uint32_t vendor_slot;
    uint64_t bag;
    uint8_t bag_slot;
    uint8_t amount;

} wrath_CMSG_BUY_ITEM_IN_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BUY_ITEM_IN_SLOT_write(WowWorldWriter* writer, const wrath_CMSG_BUY_ITEM_IN_SLOT* object);

typedef struct {
    uint64_t guid;
    /* Starts at index 1.
arcemu has this field as milliseconds since something instead. */
    uint32_t vendor_slot;
    uint32_t amount_for_sale;
    uint32_t amount_bought;

} wrath_SMSG_BUY_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BUY_ITEM_write(WowWorldWriter* writer, const wrath_SMSG_BUY_ITEM* object);

/* Some TBC and Wrath emus have a u32 before `result` that is only included if the value is > 0, but the emus never call it with anything other than 0. */
typedef struct {
    uint64_t guid;
    uint32_t item;
    wrath_BuyResult result;

} wrath_SMSG_BUY_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BUY_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_BUY_FAILED* object);

typedef struct {
    /* Set to 1 in mangoszero */
    uint32_t unknown1;
    uint64_t guid;
    uint32_t nearest_node;
    uint32_t amount_of_nodes;
    uint32_t* nodes;

} wrath_SMSG_SHOWTAXINODES;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SHOWTAXINODES_free(wrath_SMSG_SHOWTAXINODES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SHOWTAXINODES_write(WowWorldWriter* writer, const wrath_SMSG_SHOWTAXINODES* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_TAXINODE_STATUS_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TAXINODE_STATUS_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_TAXINODE_STATUS_QUERY* object);

typedef struct {
    uint64_t guid;
    bool taxi_mask_node_known;

} wrath_SMSG_TAXINODE_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TAXINODE_STATUS_write(WowWorldWriter* writer, const wrath_SMSG_TAXINODE_STATUS* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_TAXIQUERYAVAILABLENODES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TAXIQUERYAVAILABLENODES_write(WowWorldWriter* writer, const wrath_CMSG_TAXIQUERYAVAILABLENODES* object);

typedef struct {
    uint64_t guid;
    uint32_t source_node;
    uint32_t destination_node;

} wrath_CMSG_ACTIVATETAXI;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ACTIVATETAXI_write(WowWorldWriter* writer, const wrath_CMSG_ACTIVATETAXI* object);

typedef struct {
    wrath_ActivateTaxiReply reply;

} wrath_SMSG_ACTIVATETAXIREPLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ACTIVATETAXIREPLY_write(WowWorldWriter* writer, const wrath_SMSG_ACTIVATETAXIREPLY* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_NEW_TAXI_PATH_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} wrath_CMSG_TRAINER_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TRAINER_LIST_write(WowWorldWriter* writer, const wrath_CMSG_TRAINER_LIST* object);

typedef struct {
    uint64_t guid;
    uint32_t trainer_type;
    uint32_t amount_of_spells;
    wrath_TrainerSpell* spells;
    char* greeting;

} wrath_SMSG_TRAINER_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_TRAINER_LIST_free(wrath_SMSG_TRAINER_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TRAINER_LIST_write(WowWorldWriter* writer, const wrath_SMSG_TRAINER_LIST* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} wrath_CMSG_TRAINER_BUY_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TRAINER_BUY_SPELL_write(WowWorldWriter* writer, const wrath_CMSG_TRAINER_BUY_SPELL* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} wrath_SMSG_TRAINER_BUY_SUCCEEDED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TRAINER_BUY_SUCCEEDED_write(WowWorldWriter* writer, const wrath_SMSG_TRAINER_BUY_SUCCEEDED* object);

/* No TBC emulators implement this. */
typedef struct {
    uint64_t guid;
    uint32_t id;
    wrath_TrainingFailureReason error;

} wrath_SMSG_TRAINER_BUY_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TRAINER_BUY_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_TRAINER_BUY_FAILED* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_BINDER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BINDER_ACTIVATE_write(WowWorldWriter* writer, const wrath_CMSG_BINDER_ACTIVATE* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_BANKER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BANKER_ACTIVATE_write(WowWorldWriter* writer, const wrath_CMSG_BANKER_ACTIVATE* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SHOW_BANK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SHOW_BANK_write(WowWorldWriter* writer, const wrath_SMSG_SHOW_BANK* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_BUY_BANK_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BUY_BANK_SLOT_write(WowWorldWriter* writer, const wrath_CMSG_BUY_BANK_SLOT* object);

typedef struct {
    wrath_BuyBankSlotResult result;

} wrath_SMSG_BUY_BANK_SLOT_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BUY_BANK_SLOT_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_BUY_BANK_SLOT_RESULT* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_PETITION_SHOWLIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PETITION_SHOWLIST_write(WowWorldWriter* writer, const wrath_CMSG_PETITION_SHOWLIST* object);

typedef struct {
    uint64_t npc;
    uint8_t amount_of_petitions;
    wrath_PetitionShowlist* petitions;

} wrath_SMSG_PETITION_SHOWLIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PETITION_SHOWLIST_free(wrath_SMSG_PETITION_SHOWLIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PETITION_SHOWLIST_write(WowWorldWriter* writer, const wrath_SMSG_PETITION_SHOWLIST* object);

/* cmangos/vmangos/mangoszero: All fields with 'skip' are completely unused */
typedef struct {
    uint64_t npc;
    uint32_t unknown1;
    uint64_t unknown2;
    char* name;
    char* unknown3;
    uint32_t unknown4;
    uint32_t unknown5;
    uint32_t unknown6;
    uint32_t unknown7;
    uint32_t unknown8;
    uint32_t unknown9;
    uint32_t unknown10;
    uint16_t unknown11;
    uint32_t unknown12;
    uint32_t unknown13;
    uint32_t unknown14;
    char* unknown15[10];
    uint32_t index;
    uint32_t unknown16;

} wrath_CMSG_PETITION_BUY;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_PETITION_BUY_free(wrath_CMSG_PETITION_BUY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PETITION_BUY_write(WowWorldWriter* writer, const wrath_CMSG_PETITION_BUY* object);

typedef struct {
    uint64_t item;

} wrath_CMSG_PETITION_SHOW_SIGNATURES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PETITION_SHOW_SIGNATURES_write(WowWorldWriter* writer, const wrath_CMSG_PETITION_SHOW_SIGNATURES* object);

typedef struct {
    uint64_t item;
    uint64_t owner;
    uint32_t petition;
    uint8_t amount_of_signatures;
    wrath_PetitionSignature* signatures;

} wrath_SMSG_PETITION_SHOW_SIGNATURES;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PETITION_SHOW_SIGNATURES_free(wrath_SMSG_PETITION_SHOW_SIGNATURES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PETITION_SHOW_SIGNATURES_write(WowWorldWriter* writer, const wrath_SMSG_PETITION_SHOW_SIGNATURES* object);

typedef struct {
    uint64_t petition;
    uint8_t unknown1;

} wrath_CMSG_PETITION_SIGN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PETITION_SIGN_write(WowWorldWriter* writer, const wrath_CMSG_PETITION_SIGN* object);

typedef struct {
    uint64_t petition;
    uint64_t owner;
    wrath_PetitionResult result;

} wrath_SMSG_PETITION_SIGN_RESULTS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PETITION_SIGN_RESULTS_write(WowWorldWriter* writer, const wrath_SMSG_PETITION_SIGN_RESULTS* object);

typedef struct {
    uint64_t petition;

} wrath_MSG_PETITION_DECLINE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_PETITION_DECLINE_cmsg_write(WowWorldWriter* writer, const wrath_MSG_PETITION_DECLINE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_PETITION_DECLINE_smsg_write(WowWorldWriter* writer, const wrath_MSG_PETITION_DECLINE* object);

typedef struct {
    uint32_t unknown0;
    uint64_t petition;
    uint64_t target;

} wrath_CMSG_OFFER_PETITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_OFFER_PETITION_write(WowWorldWriter* writer, const wrath_CMSG_OFFER_PETITION* object);

typedef struct {
    uint64_t petition;

} wrath_CMSG_TURN_IN_PETITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TURN_IN_PETITION_write(WowWorldWriter* writer, const wrath_CMSG_TURN_IN_PETITION* object);

typedef struct {
    wrath_PetitionResult result;

} wrath_SMSG_TURN_IN_PETITION_RESULTS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TURN_IN_PETITION_RESULTS_write(WowWorldWriter* writer, const wrath_SMSG_TURN_IN_PETITION_RESULTS* object);

typedef struct {
    uint32_t guild_id;
    uint64_t petition;

} wrath_CMSG_PETITION_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PETITION_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_PETITION_QUERY* object);

typedef struct {
    uint32_t petition_id;
    uint64_t charter_owner;
    char* guild_name;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    char* body_text;
    /* cmangos/vmangos/mangoszero: Set to 9, only info is comment from vmangos */
    uint32_t minimum_signatures;
    /* cmangos/vmangos/mangoszero: Set to 9, only info is comment from vmangos */
    uint32_t maximum_signatures;
    /* mangosone: bypass client - side limitation, a different value is needed here for each petition */
    uint32_t unknown1;
    uint32_t unknown2;
    uint32_t unknown3;
    uint32_t unknown4;
    uint32_t unknown5;
    uint16_t unknown6;
    uint32_t unknown7;
    uint32_t unknown8;
    uint32_t unknown9;
    uint8_t unknown10[10];
    uint32_t unknown11;
    wrath_CharterType charter_type;

} wrath_SMSG_PETITION_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PETITION_QUERY_RESPONSE_free(wrath_SMSG_PETITION_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PETITION_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_PETITION_QUERY_RESPONSE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FISH_NOT_HOOKED_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FISH_ESCAPED_write(WowWorldWriter* writer);

typedef struct {
    /* cmangos/vmangos/mangoszero: If 0 received bug report, else received suggestion */
    uint32_t suggestion;
    char* content;
    char* bug_type;

} wrath_CMSG_BUG;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_BUG_free(wrath_CMSG_BUG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BUG_write(WowWorldWriter* writer, const wrath_CMSG_BUG* object);

typedef struct {
    char* notification;

} wrath_SMSG_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_NOTIFICATION_free(wrath_SMSG_NOTIFICATION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_NOTIFICATION_write(WowWorldWriter* writer, const wrath_SMSG_NOTIFICATION* object);

typedef struct {
    /* Whether the clients wants it shown on the UI. Just ping it back in [SMSG_PLAYED_TIME] */
    bool show_on_ui;

} wrath_CMSG_PLAYED_TIME;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PLAYED_TIME_write(WowWorldWriter* writer, const wrath_CMSG_PLAYED_TIME* object);

typedef struct {
    /* Time played in total (seconds) */
    uint32_t total_played_time;
    /* Time played on this level (seconds) */
    uint32_t level_played_time;
    /* Whether this is a silent query or the client should show it on the UI (chat box).
Send back the value received in [CMSG_PLAYED_TIME] */
    bool show_on_ui;

} wrath_SMSG_PLAYED_TIME;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PLAYED_TIME_write(WowWorldWriter* writer, const wrath_SMSG_PLAYED_TIME* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUERY_TIME_write(WowWorldWriter* writer);

/* Reply to [CMSG_QUERY_TIME].
[CMSG_QUERY_TIME] and this reply does not actually appear to set the time. Instead [SMSG_LOGIN_SETTIMESPEED] seems to correctly set the time. Running the client with `-console` will print the date when [SMSG_LOGIN_SETTIMESPEED] is received, but not when this message is received. */
typedef struct {
    /* Seconds since 1970, 1st of January (Unix Time). */
    uint32_t time;
    /* Units need confirmation, but it's likely in seconds, since many other time related things are also seconds. */
    uint32_t time_until_daily_quest_reset;

} wrath_SMSG_QUERY_TIME_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUERY_TIME_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_QUERY_TIME_RESPONSE* object);

typedef struct {
    uint64_t target;
    uint32_t total_exp;
    wrath_ExperienceAwardType exp_type;
    uint32_t experience_without_rested;
    /* mangoszero sets to 1 and comments: 1 - none 0 - 100% group bonus output */
    float exp_group_bonus;
    bool exp_includes_recruit_a_friend_bonus;

} wrath_SMSG_LOG_XPGAIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOG_XPGAIN_write(WowWorldWriter* writer, const wrath_SMSG_LOG_XPGAIN* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_RECLAIM_CORPSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_RECLAIM_CORPSE_write(WowWorldWriter* writer, const wrath_CMSG_RECLAIM_CORPSE* object);

typedef struct {
    uint8_t gift_bag_index;
    uint8_t gift_slot;
    uint8_t item_bag_index;
    uint8_t item_slot;

} wrath_CMSG_WRAP_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_WRAP_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_WRAP_ITEM* object);

typedef struct {
    uint32_t new_level;
    uint32_t health;
    uint32_t mana;
    uint32_t rage;
    uint32_t focus;
    uint32_t energy;
    uint32_t happiness;
    uint32_t rune;
    uint32_t runic_power;
    uint32_t strength;
    uint32_t agility;
    uint32_t stamina;
    uint32_t intellect;
    uint32_t spirit;

} wrath_SMSG_LEVELUP_INFO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LEVELUP_INFO_write(WowWorldWriter* writer, const wrath_SMSG_LEVELUP_INFO* object);

typedef struct {
    float position_x;
    float position_y;

} wrath_MSG_MINIMAP_PING_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MINIMAP_PING_Client_write(WowWorldWriter* writer, const wrath_MSG_MINIMAP_PING_Client* object);

typedef struct {
    uint64_t guid;
    float position_x;
    float position_y;

} wrath_MSG_MINIMAP_PING_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MINIMAP_PING_Server_write(WowWorldWriter* writer, const wrath_MSG_MINIMAP_PING_Server* object);

/* Some emulators have the guids as not packed. */
typedef struct {
    uint64_t target;
    /* vmangos: message says enchant has faded if empty */
    uint64_t caster;
    uint32_t item;
    uint32_t spell;
    /* vmangos: Only used if `caster` is not 0. */
    bool show_affiliation;

} wrath_SMSG_ENCHANTMENTLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ENCHANTMENTLOG_write(WowWorldWriter* writer, const wrath_SMSG_ENCHANTMENTLOG* object);

typedef struct {
    wrath_TimerType timer;
    uint32_t time_remaining;
    uint32_t duration;
    uint32_t scale;
    bool is_frozen;
    uint32_t id;

} wrath_SMSG_START_MIRROR_TIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_START_MIRROR_TIMER_write(WowWorldWriter* writer, const wrath_SMSG_START_MIRROR_TIMER* object);

/* According to cmangos: 'Default UI handler for this is bugged, args dont match. Gotta do a full update with `SMSG_START_MIRROR_TIMER` to avoid lua errors. */
typedef struct {
    wrath_TimerType timer;
    bool is_frozen;

} wrath_SMSG_PAUSE_MIRROR_TIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PAUSE_MIRROR_TIMER_write(WowWorldWriter* writer, const wrath_SMSG_PAUSE_MIRROR_TIMER* object);

typedef struct {
    wrath_TimerType timer;

} wrath_SMSG_STOP_MIRROR_TIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_STOP_MIRROR_TIMER_write(WowWorldWriter* writer, const wrath_SMSG_STOP_MIRROR_TIMER* object);

typedef struct {
    uint32_t sequence_id;
    uint32_t round_time_in_ms;

} wrath_CMSG_PING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PING_write(WowWorldWriter* writer, const wrath_CMSG_PING* object);

typedef struct {
    uint32_t sequence_id;

} wrath_SMSG_PONG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PONG_write(WowWorldWriter* writer, const wrath_SMSG_PONG* object);

typedef struct {
    uint32_t id;
    uint64_t target;

} wrath_SMSG_CLEAR_COOLDOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CLEAR_COOLDOWN_write(WowWorldWriter* writer, const wrath_SMSG_CLEAR_COOLDOWN* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_GAMEOBJECT_PAGETEXT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GAMEOBJECT_PAGETEXT_write(WowWorldWriter* writer, const wrath_SMSG_GAMEOBJECT_PAGETEXT* object);

/* Says which weapon the client pulls out. */
typedef struct {
    wrath_SheathState sheathed;

} wrath_CMSG_SETSHEATHED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SETSHEATHED_write(WowWorldWriter* writer, const wrath_CMSG_SETSHEATHED* object);

typedef struct {
    uint64_t guid;
    uint32_t delay_time;

} wrath_SMSG_SPELL_DELAYED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELL_DELAYED_write(WowWorldWriter* writer, const wrath_SMSG_SPELL_DELAYED* object);

typedef struct {
    uint32_t amount_of_pois;
    uint32_t* points_of_interests;

} wrath_CMSG_QUEST_POI_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_QUEST_POI_QUERY_free(wrath_CMSG_QUEST_POI_QUERY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUEST_POI_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_QUEST_POI_QUERY* object);

typedef struct {
    uint32_t amount_of_quests;
    wrath_QuestPoiList* quests;

} wrath_SMSG_QUEST_POI_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_QUEST_POI_QUERY_RESPONSE_free(wrath_SMSG_QUEST_POI_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUEST_POI_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_QUEST_POI_QUERY_RESPONSE* object);

typedef struct {
    uint64_t guid;
    uint32_t duration;

} wrath_SMSG_ITEM_TIME_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ITEM_TIME_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_ITEM_TIME_UPDATE* object);

typedef struct {
    uint64_t item;
    /* Possibly used with EnchantmentSlot enum. */
    uint32_t slot;
    uint32_t duration;
    uint64_t player;

} wrath_SMSG_ITEM_ENCHANT_TIME_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ITEM_ENCHANT_TIME_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_ITEM_ENCHANT_TIME_UPDATE* object);

typedef struct {
    /* TrinityCore/ArcEmu/mangostwo always set to 1.
TrinityCore/mangostwo: 1...31 */
    uint32_t unknown1;
    uint32_t server_seed;
    /* Randomized values. Is not used at all by TrinityCore/mangostwo/ArcEmu. */
    uint8_t seed[32];

} wrath_SMSG_AUTH_CHALLENGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AUTH_CHALLENGE_write(WowWorldWriter* writer, const wrath_SMSG_AUTH_CHALLENGE* object);

/* Sent after receiving [SMSG_AUTH_CHALLENGE].
This message is never encrypted. */
typedef struct {
    uint32_t client_build;
    uint32_t login_server_id;
    char* username;
    uint32_t login_server_type;
    uint32_t client_seed;
    uint32_t region_id;
    uint32_t battleground_id;
    uint32_t realm_id;
    /* Purpose and exact meaning of name unknown.
TrinityCore has this name but never uses the variable afterwards. */
    uint64_t dos_response;
    uint8_t client_proof[20];
    uint32_t amount_of_addon_info;
    uint8_t* addon_info;

} wrath_CMSG_AUTH_SESSION;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_AUTH_SESSION_free(wrath_CMSG_AUTH_SESSION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUTH_SESSION_write(WowWorldWriter* writer, const wrath_CMSG_AUTH_SESSION* object);

/* Response to [CMSG_AUTH_SESSION].
Usually followed by [CMSG_CHAR_ENUM] if login was successful (`AUTH_OK`).
vmangos/cmangos/mangoszero all have a variant of this message that contains fields from `AUTH_OK` for `AUTH_WAIT_QUEUE` as well (`https://github.com/vmangos/core/blob/cd896d43712ceafecdbd8f005846d7f676e55b4f/src/game/World.cpp#L322`) but this does not seem to be actually be a real thing. */
typedef struct {
    wrath_WorldResult result;
    uint32_t billing_time;
    wrath_BillingPlanFlags billing_flags;
    uint32_t billing_rested;
    wrath_Expansion expansion;
    uint32_t queue_position;
    bool realm_has_free_character_migration;

} wrath_SMSG_AUTH_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AUTH_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_AUTH_RESPONSE* object);

typedef struct {
    uint64_t guid;
    uint8_t cast_count;
    uint32_t id;
    wrath_ClientCastFlags cast_flags;
    wrath_SpellCastTargets targets;
    float elevation;
    float speed;
    wrath_ClientMovementData movement_data;
    uint32_t opcode;
    uint64_t movement;
    wrath_MovementInfo info;

} wrath_CMSG_PET_CAST_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_PET_CAST_SPELL_free(wrath_CMSG_PET_CAST_SPELL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_CAST_SPELL_write(WowWorldWriter* writer, const wrath_CMSG_PET_CAST_SPELL* object);

typedef struct {
    uint64_t vendor;
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;
    uint32_t background_color;

} wrath_MSG_SAVE_GUILD_EMBLEM_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_SAVE_GUILD_EMBLEM_Client_write(WowWorldWriter* writer, const wrath_MSG_SAVE_GUILD_EMBLEM_Client* object);

typedef struct {
    wrath_GuildEmblemResult result;

} wrath_MSG_SAVE_GUILD_EMBLEM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_SAVE_GUILD_EMBLEM_Server_write(WowWorldWriter* writer, const wrath_MSG_SAVE_GUILD_EMBLEM_Server* object);

typedef struct {
    uint64_t guid;

} wrath_MSG_TABARDVENDOR_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_TABARDVENDOR_ACTIVATE_cmsg_write(WowWorldWriter* writer, const wrath_MSG_TABARDVENDOR_ACTIVATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_TABARDVENDOR_ACTIVATE_smsg_write(WowWorldWriter* writer, const wrath_MSG_TABARDVENDOR_ACTIVATE* object);

typedef struct {
    uint64_t guid;
    /* mangoszero/mangosone: index from SpellVisualKit.dbc. Set to 0xB3 when buying spells. */
    uint32_t spell_art_kit;

} wrath_SMSG_PLAY_SPELL_VISUAL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PLAY_SPELL_VISUAL_write(WowWorldWriter* writer, const wrath_SMSG_PLAY_SPELL_VISUAL* object);

/* Sent by the client whenever it reaches a new area.
The client does not send an accurate area. For example when going to Sen'jin Village, the client will send `DUROTAR` (0x0E) and not `SENJIN_VILLAGE` (0x16F). */
typedef struct {
    wrath_Area area;

} wrath_CMSG_ZONEUPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ZONEUPDATE_write(WowWorldWriter* writer, const wrath_CMSG_ZONEUPDATE* object);

typedef struct {
    uint64_t player_with_killing_blow;
    uint64_t victim;

} wrath_SMSG_PARTYKILLLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PARTYKILLLOG_write(WowWorldWriter* writer, const wrath_SMSG_PARTYKILLLOG* object);

/* Compressed version of [SMSG_UPDATE_OBJECT]. Has the same fields when uncompressed */
typedef struct {
    uint32_t amount_of_objects;
    wrath_Object* objects;

} wrath_SMSG_COMPRESSED_UPDATE_OBJECT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_COMPRESSED_UPDATE_OBJECT_free(wrath_SMSG_COMPRESSED_UPDATE_OBJECT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_COMPRESSED_UPDATE_OBJECT_write(WowWorldWriter* writer, const wrath_SMSG_COMPRESSED_UPDATE_OBJECT* object);

typedef struct {
    uint64_t guid;
    /* mangoszero/mangosone/azerothcore: index from SpellVisualKit.dbc. Used for visual effect on player with 0x016A */
    uint32_t spell_visual_kit;

} wrath_SMSG_PLAY_SPELL_IMPACT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PLAY_SPELL_IMPACT_write(WowWorldWriter* writer, const wrath_SMSG_PLAY_SPELL_IMPACT* object);

typedef struct {
    wrath_Area area;
    uint32_t experience;

} wrath_SMSG_EXPLORATION_EXPERIENCE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_EXPLORATION_EXPERIENCE_write(WowWorldWriter* writer, const wrath_SMSG_EXPLORATION_EXPERIENCE* object);

typedef struct {
    uint32_t minimum;
    uint32_t maximum;

} wrath_MSG_RANDOM_ROLL_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_RANDOM_ROLL_Client_write(WowWorldWriter* writer, const wrath_MSG_RANDOM_ROLL_Client* object);

typedef struct {
    uint32_t minimum;
    uint32_t maximum;
    uint32_t actual_roll;
    uint64_t guid;

} wrath_MSG_RANDOM_ROLL_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_RANDOM_ROLL_Server_write(WowWorldWriter* writer, const wrath_MSG_RANDOM_ROLL_Server* object);

typedef struct {
    uint64_t guid;
    wrath_EnvironmentalDamageType damage_type;
    uint32_t damage;
    uint32_t absorb;
    uint32_t resist;

} wrath_SMSG_ENVIRONMENTAL_DAMAGE_LOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ENVIRONMENTAL_DAMAGE_LOG_write(WowWorldWriter* writer, const wrath_SMSG_ENVIRONMENTAL_DAMAGE_LOG* object);

typedef struct {
    uint32_t random_dungeon_entry;
    uint32_t dungeon_finished_entry;
    bool done;
    /* emus set to 1. */
    uint32_t unknown1;
    uint32_t money_reward;
    uint32_t experience_reward;
    /* emus set to 0. */
    uint32_t unknown2;
    /* emus set to 0. */
    uint32_t unknown3;
    uint8_t amount_of_rewards;
    wrath_QuestGiverReward* rewards;

} wrath_SMSG_LFG_PLAYER_REWARD;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LFG_PLAYER_REWARD_free(wrath_SMSG_LFG_PLAYER_REWARD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_PLAYER_REWARD_write(WowWorldWriter* writer, const wrath_SMSG_LFG_PLAYER_REWARD* object);

typedef struct {
    wrath_LfgTeleportError error;

} wrath_SMSG_LFG_TELEPORT_DENIED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_TELEPORT_DENIED_write(WowWorldWriter* writer, const wrath_SMSG_LFG_TELEPORT_DENIED* object);

typedef struct {
    wrath_Skill skill;

} wrath_CMSG_UNLEARN_SKILL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_UNLEARN_SKILL_write(WowWorldWriter* writer, const wrath_CMSG_UNLEARN_SKILL* object);

typedef struct {
    uint32_t spell;

} wrath_SMSG_REMOVED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_REMOVED_SPELL_write(WowWorldWriter* writer, const wrath_SMSG_REMOVED_SPELL* object);

typedef struct {
    wrath_Map map;
    all_Vector3d position;
    char* message;
    bool needs_response;
    bool needs_more_help;
    uint32_t num_of_times;
    uint32_t* times;
    uint32_t amount_of_compressed_data;
    uint8_t* compressed_data;

} wrath_CMSG_GMTICKET_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GMTICKET_CREATE_free(wrath_CMSG_GMTICKET_CREATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GMTICKET_CREATE_write(WowWorldWriter* writer, const wrath_CMSG_GMTICKET_CREATE* object);

typedef struct {
    wrath_GmTicketResponse response;

} wrath_SMSG_GMTICKET_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GMTICKET_CREATE_write(WowWorldWriter* writer, const wrath_SMSG_GMTICKET_CREATE* object);

/* No TBC/Wrath emulator has a `GmTicketType` field before `message`, but vmangos does. */
typedef struct {
    char* message;

} wrath_CMSG_GMTICKET_UPDATETEXT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GMTICKET_UPDATETEXT_free(wrath_CMSG_GMTICKET_UPDATETEXT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GMTICKET_UPDATETEXT_write(WowWorldWriter* writer, const wrath_CMSG_GMTICKET_UPDATETEXT* object);

typedef struct {
    wrath_GmTicketResponse response;

} wrath_SMSG_GMTICKET_UPDATETEXT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GMTICKET_UPDATETEXT_write(WowWorldWriter* writer, const wrath_SMSG_GMTICKET_UPDATETEXT* object);

/* Indicate when each piece of account data was last updated by a [CMSG_UPDATE_ACCOUNT_DATA]. The client can check this against its own times to detect that more recent account data was written from a different client. */
typedef struct {
    /* Seconds since Unix Epoch */
    uint32_t unix_time;
    /* Both mangostwo and arcemu hardcode this to 1 */
    uint8_t unknown1;
    wrath_CacheMask mask;

} wrath_SMSG_ACCOUNT_DATA_TIMES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ACCOUNT_DATA_TIMES_write(WowWorldWriter* writer, const wrath_SMSG_ACCOUNT_DATA_TIMES* object);

/* Respond with [SMSG_UPDATE_ACCOUNT_DATA] */
typedef struct {
    /* The type of account data being requested. You can check this against the [CacheMask] to know if this is character-specific data or account-wide data. */
    uint32_t data_type;

} wrath_CMSG_REQUEST_ACCOUNT_DATA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REQUEST_ACCOUNT_DATA_write(WowWorldWriter* writer, const wrath_CMSG_REQUEST_ACCOUNT_DATA* object);

/* Respond with [SMSG_UPDATE_ACCOUNT_DATA_COMPLETE] */
typedef struct {
    /* You can check this against the [CacheMask] to find out if this is character-specific data or account-wide data */
    uint32_t data_type;
    /* Seconds since unix epoch. The client wants this number back when it requests the ACCOUNT_DATA_TIMES */
    uint32_t unix_time;
    uint32_t amount_of_compressed_data;
    /* Compressed account data (macros, keybinds, etc). The server does not actually care about the uncompressed contents. It only needs to send this back to the client. The server acts as a cross-device storage */
    uint8_t* compressed_data;

} wrath_CMSG_UPDATE_ACCOUNT_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_UPDATE_ACCOUNT_DATA_free(wrath_CMSG_UPDATE_ACCOUNT_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_UPDATE_ACCOUNT_DATA_write(WowWorldWriter* writer, const wrath_CMSG_UPDATE_ACCOUNT_DATA* object);

/* Sent as response to [CMSG_REQUEST_ACCOUNT_DATA] */
typedef struct {
    uint32_t data_type;
    uint32_t decompressed_size;
    uint32_t amount_of_compressed_data;
    uint8_t* compressed_data;

} wrath_SMSG_UPDATE_ACCOUNT_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_UPDATE_ACCOUNT_DATA_free(wrath_SMSG_UPDATE_ACCOUNT_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_UPDATE_ACCOUNT_DATA_write(WowWorldWriter* writer, const wrath_SMSG_UPDATE_ACCOUNT_DATA* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GMTICKET_GETTICKET_write(WowWorldWriter* writer);

typedef struct {
    wrath_GmTicketStatus status;
    uint32_t id;
    /* cmangos: Ticket text: data, should never exceed 1999 bytes */
    char* text;
    bool need_more_help;
    float days_since_ticket_creation;
    float days_since_oldest_ticket_creation;
    float days_since_last_updated;
    wrath_GmTicketEscalationStatus escalation_status;
    bool read_by_gm;

} wrath_SMSG_GMTICKET_GETTICKET;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GMTICKET_GETTICKET_free(wrath_SMSG_GMTICKET_GETTICKET* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GMTICKET_GETTICKET_write(WowWorldWriter* writer, const wrath_SMSG_GMTICKET_GETTICKET* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_UNLEARN_TALENTS_write(WowWorldWriter* writer);

typedef struct {
    wrath_EncounterFrame frame;
    uint64_t guid;
    uint8_t parameter1;
    uint8_t parameter2;
    uint8_t parameter3;
    uint8_t parameter4;

} wrath_SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT_write(WowWorldWriter* writer, const wrath_SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_GAMEOBJECT_DESPAWN_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GAMEOBJECT_DESPAWN_ANIM_write(WowWorldWriter* writer, const wrath_SMSG_GAMEOBJECT_DESPAWN_ANIM* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_CORPSE_QUERY_Client_write(WowWorldWriter* writer);

typedef struct {
    wrath_CorpseQueryResult result;
    wrath_Map map;
    all_Vector3d position;
    wrath_Map corpse_map;
    uint32_t unknown;

} wrath_MSG_CORPSE_QUERY_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_CORPSE_QUERY_Server_write(WowWorldWriter* writer, const wrath_MSG_CORPSE_QUERY_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GMTICKET_DELETETICKET_write(WowWorldWriter* writer);

typedef struct {
    wrath_GmTicketResponse response;

} wrath_SMSG_GMTICKET_DELETETICKET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GMTICKET_DELETETICKET_write(WowWorldWriter* writer, const wrath_SMSG_GMTICKET_DELETETICKET* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHAT_WRONG_FACTION_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GMTICKET_SYSTEMSTATUS_write(WowWorldWriter* writer);

typedef struct {
    /* vmangos: This only disables the ticket UI at client side and is not fully reliable are we sure this is a uint32? Should ask Zor */
    wrath_GmTicketQueueStatus will_accept_tickets;

} wrath_SMSG_GMTICKET_SYSTEMSTATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GMTICKET_SYSTEMSTATUS_write(WowWorldWriter* writer, const wrath_SMSG_GMTICKET_SYSTEMSTATUS* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_SPIRIT_HEALER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SPIRIT_HEALER_ACTIVATE_write(WowWorldWriter* writer, const wrath_CMSG_SPIRIT_HEALER_ACTIVATE* object);

typedef struct {
    uint32_t quest_id;

} wrath_SMSG_QUEST_FORCE_REMOVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUEST_FORCE_REMOVE_write(WowWorldWriter* writer, const wrath_SMSG_QUEST_FORCE_REMOVE* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPIRIT_HEALER_CONFIRM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPIRIT_HEALER_CONFIRM_write(WowWorldWriter* writer, const wrath_SMSG_SPIRIT_HEALER_CONFIRM* object);

typedef struct {
    uint32_t flags;
    all_Vector2d position;
    uint32_t icon;
    uint32_t data;
    char* location_name;

} wrath_SMSG_GOSSIP_POI;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GOSSIP_POI_free(wrath_SMSG_GOSSIP_POI* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GOSSIP_POI_write(WowWorldWriter* writer, const wrath_SMSG_GOSSIP_POI* object);

typedef struct {
    uint64_t guid;
    /* mangosone/arcemu/trinitycore/azerothcore: probably related to spam reporting */
    uint8_t unknown;

} wrath_CMSG_CHAT_IGNORED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHAT_IGNORED_write(WowWorldWriter* writer, const wrath_CMSG_CHAT_IGNORED* object);

typedef struct {
    uint32_t rank_id;
    uint32_t rights;
    char* rank_name;
    uint32_t money_per_day;
    wrath_GuildBankRights bank_tab_rights[6];

} wrath_CMSG_GUILD_RANK;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_RANK_free(wrath_CMSG_GUILD_RANK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_RANK_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_RANK* object);

typedef struct {
    char* rank_name;

} wrath_CMSG_GUILD_ADD_RANK;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_ADD_RANK_free(wrath_CMSG_GUILD_ADD_RANK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_ADD_RANK_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_ADD_RANK* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_DEL_RANK_write(WowWorldWriter* writer);

typedef struct {
    char* player_name;
    char* note;

} wrath_CMSG_GUILD_SET_PUBLIC_NOTE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_SET_PUBLIC_NOTE_free(wrath_CMSG_GUILD_SET_PUBLIC_NOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_SET_PUBLIC_NOTE_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_SET_PUBLIC_NOTE* object);

typedef struct {
    char* player_name;
    /* vmangos: Max length 31 */
    char* note;

} wrath_CMSG_GUILD_SET_OFFICER_NOTE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_SET_OFFICER_NOTE_free(wrath_CMSG_GUILD_SET_OFFICER_NOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_SET_OFFICER_NOTE_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_SET_OFFICER_NOTE* object);

/* Message to the client that is has successfully logged into the world and that it should load the map and coordinates.
The positions and orientations do not matter since they can be overwritten in the [SMSG_UPDATE_OBJECT], but the map determines which map the client loads and this is not changeable in [SMSG_UPDATE_OBJECT]. */
typedef struct {
    wrath_Map map;
    all_Vector3d position;
    float orientation;

} wrath_SMSG_LOGIN_VERIFY_WORLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOGIN_VERIFY_WORLD_write(WowWorldWriter* writer, const wrath_SMSG_LOGIN_VERIFY_WORLD* object);

typedef struct {
    uint64_t mailbox;
    char* receiver;
    char* subject;
    char* body;
    /* cmangos: stationery? */
    uint32_t unknown1;
    /* cmangos: 0x00000000 */
    uint32_t unknown2;
    uint8_t amount_of_items;
    wrath_MailItem* items;
    uint32_t money;
    uint32_t cash_on_delivery_amount;
    /* mangosone: const 0 */
    uint32_t unknown3;
    /* mangosone: const 0 */
    uint32_t unknown4;

} wrath_CMSG_SEND_MAIL;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_SEND_MAIL_free(wrath_CMSG_SEND_MAIL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SEND_MAIL_write(WowWorldWriter* writer, const wrath_CMSG_SEND_MAIL* object);

typedef struct {
    uint32_t mail_id;
    wrath_MailAction action;
    wrath_MailResult result;
    uint32_t equip_error;
    /* cmangos/vmangos: item guid low? */
    uint32_t item;
    uint32_t item_count;
    wrath_MailResultTwo result2;
    uint32_t equip_error2;

} wrath_SMSG_SEND_MAIL_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SEND_MAIL_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_SEND_MAIL_RESULT* object);

typedef struct {
    uint64_t mailbox;

} wrath_CMSG_GET_MAIL_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GET_MAIL_LIST_write(WowWorldWriter* writer, const wrath_CMSG_GET_MAIL_LIST* object);

typedef struct {
    /* azerothcore: this will display warning about undelivered mail to player if realCount > mailsCount */
    uint32_t real_mail_amount;
    uint8_t amount_of_mails;
    wrath_Mail* mails;

} wrath_SMSG_MAIL_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_MAIL_LIST_RESULT_free(wrath_SMSG_MAIL_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MAIL_LIST_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_MAIL_LIST_RESULT* object);

typedef struct {
    wrath_BattlegroundType battleground_type;
    wrath_BattlefieldListLocation location;
    /* azerothcore: players with locked xp have their own bg queue on retail */
    bool can_gain_exp;

} wrath_CMSG_BATTLEFIELD_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BATTLEFIELD_LIST_write(WowWorldWriter* writer, const wrath_CMSG_BATTLEFIELD_LIST* object);

typedef struct {
    uint64_t battlemaster;
    wrath_BattlegroundType battleground_type;
    uint8_t unknown1;
    uint8_t unknown2;
    uint8_t has_win;
    uint32_t win_honor;
    uint32_t win_arena;
    uint32_t loss_honor;
    wrath_RandomBg random;
    uint8_t win_random;
    uint32_t reward_honor;
    uint32_t reward_arena;
    uint32_t honor_lost;
    uint32_t number_of_battlegrounds;
    uint32_t* battlegrounds;

} wrath_SMSG_BATTLEFIELD_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_BATTLEFIELD_LIST_free(wrath_SMSG_BATTLEFIELD_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEFIELD_LIST_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEFIELD_LIST* object);

typedef struct {
    uint64_t item;

} wrath_CMSG_ITEM_TEXT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ITEM_TEXT_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_ITEM_TEXT_QUERY* object);

typedef struct {
    wrath_ItemTextQuery query;
    uint64_t item;
    char* text;

} wrath_SMSG_ITEM_TEXT_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ITEM_TEXT_QUERY_RESPONSE_free(wrath_SMSG_ITEM_TEXT_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ITEM_TEXT_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_ITEM_TEXT_QUERY_RESPONSE* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;

} wrath_CMSG_MAIL_TAKE_MONEY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MAIL_TAKE_MONEY_write(WowWorldWriter* writer, const wrath_CMSG_MAIL_TAKE_MONEY* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;
    uint32_t item;

} wrath_CMSG_MAIL_TAKE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MAIL_TAKE_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_MAIL_TAKE_ITEM* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;

} wrath_CMSG_MAIL_MARK_AS_READ;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MAIL_MARK_AS_READ_write(WowWorldWriter* writer, const wrath_CMSG_MAIL_MARK_AS_READ* object);

typedef struct {
    uint64_t mailbox_id;
    uint32_t mail_id;

} wrath_CMSG_MAIL_RETURN_TO_SENDER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MAIL_RETURN_TO_SENDER_write(WowWorldWriter* writer, const wrath_CMSG_MAIL_RETURN_TO_SENDER* object);

typedef struct {
    uint64_t mailbox_id;
    uint32_t mail_id;
    uint32_t mail_template_id;

} wrath_CMSG_MAIL_DELETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MAIL_DELETE_write(WowWorldWriter* writer, const wrath_CMSG_MAIL_DELETE* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;

} wrath_CMSG_MAIL_CREATE_TEXT_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MAIL_CREATE_TEXT_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_MAIL_CREATE_TEXT_ITEM* object);

typedef struct {
    uint32_t id;
    uint64_t caster;
    /* cmangos/mangoszero: can be 0 or 1 */
    uint8_t unknown1;
    uint32_t amount_of_targets;
    wrath_SpellLogMiss* targets;

} wrath_SMSG_SPELLLOGMISS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SPELLLOGMISS_free(wrath_SMSG_SPELLLOGMISS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELLLOGMISS_write(WowWorldWriter* writer, const wrath_SMSG_SPELLLOGMISS* object);

typedef struct {
    uint64_t caster;
    uint32_t spell;
    uint32_t amount_of_effects;
    wrath_SpellLog* logs;

} wrath_SMSG_SPELLLOGEXECUTE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SPELLLOGEXECUTE_free(wrath_SMSG_SPELLLOGEXECUTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELLLOGEXECUTE_write(WowWorldWriter* writer, const wrath_SMSG_SPELLLOGEXECUTE* object);

typedef struct {
    uint64_t target;
    uint64_t caster;
    uint32_t spell;
    uint32_t amount_of_auras;
    wrath_AuraLog* auras;

} wrath_SMSG_PERIODICAURALOG;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PERIODICAURALOG_free(wrath_SMSG_PERIODICAURALOG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PERIODICAURALOG_write(WowWorldWriter* writer, const wrath_SMSG_PERIODICAURALOG* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    uint32_t damage;
    uint32_t overkill;
    wrath_SpellSchool school;

} wrath_SMSG_SPELLDAMAGESHIELD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELLDAMAGESHIELD_write(WowWorldWriter* writer, const wrath_SMSG_SPELLDAMAGESHIELD* object);

typedef struct {
    uint64_t target;
    uint64_t attacker;
    uint32_t spell;
    uint32_t damage;
    uint32_t overkill;
    wrath_SpellSchool school;
    uint32_t absorbed_damage;
    /* cmangos/mangoszero/vmangos: sent as int32 */
    uint32_t resisted;
    /* cmangos/mangoszero/vmangos: if 1, then client show spell name (example: %s's ranged shot hit %s for %u school or %s suffers %u school damage from %s's spell_name */
    bool periodic_log;
    uint8_t unused;
    uint32_t blocked;
    wrath_HitInfo hit_info;
    /* cmangos has some that might be correct `https://github.com/cmangos/mangos-classic/blob/524a39412dae7946d06e4b8f319f45b615075815/src/game/Entities/Unit.cpp#L5497`. */
    uint8_t extend_flag;

} wrath_SMSG_SPELLNONMELEEDAMAGELOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELLNONMELEEDAMAGELOG_write(WowWorldWriter* writer, const wrath_SMSG_SPELLNONMELEEDAMAGELOG* object);

typedef struct {
    wrath_Talent talent;
    uint32_t requested_rank;

} wrath_CMSG_LEARN_TALENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LEARN_TALENT_write(WowWorldWriter* writer, const wrath_CMSG_LEARN_TALENT* object);

typedef struct {
    /* arcemu is the only emulator that has this.
arcemu sets to 1. */
    uint32_t unknown;

} wrath_SMSG_RESURRECT_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_RESURRECT_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_RESURRECT_FAILED* object);

typedef struct {
    bool enable_pvp;
} wrath_CMSG_TOGGLE_PVP_set;

/* vmangos: this opcode can be used in two ways: Either set explicit new status or toggle old status */
typedef struct {

    wrath_CMSG_TOGGLE_PVP_set* set;
} wrath_CMSG_TOGGLE_PVP;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_TOGGLE_PVP_free(wrath_CMSG_TOGGLE_PVP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TOGGLE_PVP_write(WowWorldWriter* writer, const wrath_CMSG_TOGGLE_PVP* object);

typedef struct {
    wrath_Area zone_id;

} wrath_SMSG_ZONE_UNDER_ATTACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ZONE_UNDER_ATTACK_write(WowWorldWriter* writer, const wrath_SMSG_ZONE_UNDER_ATTACK* object);

typedef struct {
    uint64_t auctioneer;

} wrath_MSG_AUCTION_HELLO_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_AUCTION_HELLO_Client_write(WowWorldWriter* writer, const wrath_MSG_AUCTION_HELLO_Client* object);

typedef struct {
    uint64_t auctioneer;
    wrath_AuctionHouse auction_house;
    bool auction_house_enabled;

} wrath_MSG_AUCTION_HELLO_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_AUCTION_HELLO_Server_write(WowWorldWriter* writer, const wrath_MSG_AUCTION_HELLO_Server* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t unknown1;
    uint64_t item;
    uint32_t unknown2;
    uint32_t starting_bid;
    uint32_t buyout;
    uint32_t auction_duration_in_minutes;

} wrath_CMSG_AUCTION_SELL_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUCTION_SELL_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_AUCTION_SELL_ITEM* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t auction_id;

} wrath_CMSG_AUCTION_REMOVE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUCTION_REMOVE_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_AUCTION_REMOVE_ITEM* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t list_start_item;
    char* searched_name;
    uint8_t minimum_level;
    uint8_t maximum_level;
    uint32_t auction_slot_id;
    uint32_t auction_main_category;
    uint32_t auction_sub_category;
    wrath_ItemQuality auction_quality;
    uint8_t usable;
    uint8_t is_full;
    uint8_t amount_of_sorted_auctions;
    wrath_AuctionSort* sorted_auctions;

} wrath_CMSG_AUCTION_LIST_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_AUCTION_LIST_ITEMS_free(wrath_CMSG_AUCTION_LIST_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUCTION_LIST_ITEMS_write(WowWorldWriter* writer, const wrath_CMSG_AUCTION_LIST_ITEMS* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t list_from;

} wrath_CMSG_AUCTION_LIST_OWNER_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUCTION_LIST_OWNER_ITEMS_write(WowWorldWriter* writer, const wrath_CMSG_AUCTION_LIST_OWNER_ITEMS* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t auction_id;
    uint32_t price;

} wrath_CMSG_AUCTION_PLACE_BID;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUCTION_PLACE_BID_write(WowWorldWriter* writer, const wrath_CMSG_AUCTION_PLACE_BID* object);

typedef struct {
    uint32_t auction_id;
    wrath_AuctionCommandAction action;
    wrath_AuctionCommandResult result;
    wrath_InventoryResult inventory_result;

} wrath_SMSG_AUCTION_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AUCTION_COMMAND_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_AUCTION_COMMAND_RESULT* object);

typedef struct {
    uint32_t count;
    wrath_AuctionListItem* auctions;
    uint32_t total_amount_of_auctions;
    uint32_t auction_search_delay;

} wrath_SMSG_AUCTION_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_AUCTION_LIST_RESULT_free(wrath_SMSG_AUCTION_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AUCTION_LIST_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_AUCTION_LIST_RESULT* object);

typedef struct {
    uint32_t count;
    wrath_AuctionListItem* auctions;
    uint32_t total_amount_of_auctions;
    uint32_t auction_search_delay;

} wrath_SMSG_AUCTION_OWNER_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_AUCTION_OWNER_LIST_RESULT_free(wrath_SMSG_AUCTION_OWNER_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AUCTION_OWNER_LIST_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_AUCTION_OWNER_LIST_RESULT* object);

typedef struct {
    wrath_AuctionHouse auction_house;
    uint32_t auction_id;
    uint64_t bidder;
    uint32_t bid_sum;
    uint32_t new_highest_bid;
    uint32_t out_bid_amount;
    uint32_t item_template;
    uint32_t item_random_property_id;

} wrath_SMSG_AUCTION_BIDDER_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AUCTION_BIDDER_NOTIFICATION_write(WowWorldWriter* writer, const wrath_SMSG_AUCTION_BIDDER_NOTIFICATION* object);

/* vmangos/cmangos/mangoszero: this message causes on client to display: 'Your auction sold' */
typedef struct {
    uint32_t auction_id;
    /* vmangos/cmangos/mangoszero: if 0, client shows ERR_AUCTION_EXPIRED_S, else ERR_AUCTION_SOLD_S (works only when guid==0) */
    uint32_t bid;
    uint32_t auction_out_bid;
    uint64_t bidder;
    uint32_t item;
    uint32_t item_random_property_id;
    float time_left;

} wrath_SMSG_AUCTION_OWNER_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AUCTION_OWNER_NOTIFICATION_write(WowWorldWriter* writer, const wrath_SMSG_AUCTION_OWNER_NOTIFICATION* object);

/* According to cmangos/azerothcore/trinitycore/mangostwo. Not present in vmangos. */
typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t id;
    wrath_LogFormat log_format;

} wrath_SMSG_PROCRESIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PROCRESIST_write(WowWorldWriter* writer, const wrath_SMSG_PROCRESIST* object);

typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t amount_of_spells;
    uint32_t* spells;

} wrath_SMSG_DISPEL_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_DISPEL_FAILED_free(wrath_SMSG_DISPEL_FAILED* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DISPEL_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_DISPEL_FAILED* object);

typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t id;
    bool debug_log_format;

} wrath_SMSG_SPELLORDAMAGE_IMMUNE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELLORDAMAGE_IMMUNE_write(WowWorldWriter* writer, const wrath_SMSG_SPELLORDAMAGE_IMMUNE* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t start_from_page;
    uint32_t amount_of_outbid_items;
    uint32_t* outbid_item_ids;

} wrath_CMSG_AUCTION_LIST_BIDDER_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_AUCTION_LIST_BIDDER_ITEMS_free(wrath_CMSG_AUCTION_LIST_BIDDER_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUCTION_LIST_BIDDER_ITEMS_write(WowWorldWriter* writer, const wrath_CMSG_AUCTION_LIST_BIDDER_ITEMS* object);

typedef struct {
    uint32_t count;
    wrath_AuctionListItem* auctions;
    uint32_t total_amount_of_auctions;
    uint32_t auction_search_delay;

} wrath_SMSG_AUCTION_BIDDER_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_AUCTION_BIDDER_LIST_RESULT_free(wrath_SMSG_AUCTION_BIDDER_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AUCTION_BIDDER_LIST_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_AUCTION_BIDDER_LIST_RESULT* object);

typedef struct {
    uint8_t eff;
    uint8_t op;
    uint32_t value;

} wrath_SMSG_SET_FLAT_SPELL_MODIFIER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SET_FLAT_SPELL_MODIFIER_write(WowWorldWriter* writer, const wrath_SMSG_SET_FLAT_SPELL_MODIFIER* object);

typedef struct {
    uint8_t eff;
    uint8_t op;
    uint32_t value;

} wrath_SMSG_SET_PCT_SPELL_MODIFIER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SET_PCT_SPELL_MODIFIER_write(WowWorldWriter* writer, const wrath_SMSG_SET_PCT_SPELL_MODIFIER* object);

typedef struct {
    uint32_t item;

} wrath_CMSG_SET_AMMO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_AMMO_write(WowWorldWriter* writer, const wrath_CMSG_SET_AMMO* object);

typedef struct {
    uint32_t delay;

} wrath_SMSG_CORPSE_RECLAIM_DELAY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CORPSE_RECLAIM_DELAY_write(WowWorldWriter* writer, const wrath_SMSG_CORPSE_RECLAIM_DELAY* object);

/* Sent when the client enters the world. */
typedef struct {
    uint64_t guid;

} wrath_CMSG_SET_ACTIVE_MOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_ACTIVE_MOVER_write(WowWorldWriter* writer, const wrath_CMSG_SET_ACTIVE_MOVER* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} wrath_CMSG_PET_CANCEL_AURA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_CANCEL_AURA_write(WowWorldWriter* writer, const wrath_CMSG_PET_CANCEL_AURA* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CANCEL_AUTO_REPEAT_SPELL_write(WowWorldWriter* writer);

typedef struct {
    uint64_t npc;

} wrath_MSG_LIST_STABLED_PETS_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_LIST_STABLED_PETS_Client_write(WowWorldWriter* writer, const wrath_MSG_LIST_STABLED_PETS_Client* object);

typedef struct {
    uint64_t npc;
    uint8_t amount_of_pets;
    uint8_t stable_slots;
    wrath_StabledPet* pets;

} wrath_MSG_LIST_STABLED_PETS_Server;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_MSG_LIST_STABLED_PETS_Server_free(wrath_MSG_LIST_STABLED_PETS_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_LIST_STABLED_PETS_Server_write(WowWorldWriter* writer, const wrath_MSG_LIST_STABLED_PETS_Server* object);

typedef struct {
    uint64_t stable_master;

} wrath_CMSG_STABLE_PET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_STABLE_PET_write(WowWorldWriter* writer, const wrath_CMSG_STABLE_PET* object);

typedef struct {
    uint64_t stable_master;
    uint32_t pet_number;

} wrath_CMSG_UNSTABLE_PET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_UNSTABLE_PET_write(WowWorldWriter* writer, const wrath_CMSG_UNSTABLE_PET* object);

typedef struct {
    uint64_t npc;

} wrath_CMSG_BUY_STABLE_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BUY_STABLE_SLOT_write(WowWorldWriter* writer, const wrath_CMSG_BUY_STABLE_SLOT* object);

typedef struct {
    wrath_StableResult result;

} wrath_SMSG_STABLE_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_STABLE_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_STABLE_RESULT* object);

typedef struct {
    uint64_t npc;
    uint32_t pet_slot;

} wrath_CMSG_STABLE_SWAP_PET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_STABLE_SWAP_PET_write(WowWorldWriter* writer, const wrath_CMSG_STABLE_SWAP_PET* object);

typedef struct {
    uint64_t guid;
    wrath_QuestPartyMessage message;

} wrath_MSG_QUEST_PUSH_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_QUEST_PUSH_RESULT_cmsg_write(WowWorldWriter* writer, const wrath_MSG_QUEST_PUSH_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_QUEST_PUSH_RESULT_smsg_write(WowWorldWriter* writer, const wrath_MSG_QUEST_PUSH_RESULT* object);

typedef struct {
    uint32_t sound_id;

} wrath_SMSG_PLAY_MUSIC;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PLAY_MUSIC_write(WowWorldWriter* writer, const wrath_SMSG_PLAY_MUSIC* object);

/* vmangos: Nostalrius: ignored by client if unit is not loaded */
typedef struct {
    uint32_t sound_id;
    uint64_t guid;

} wrath_SMSG_PLAY_OBJECT_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PLAY_OBJECT_SOUND_write(WowWorldWriter* writer, const wrath_SMSG_PLAY_OBJECT_SOUND* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REQUEST_PET_INFO_write(WowWorldWriter* writer);

typedef struct {
    wrath_FarSightOperation operation;

} wrath_CMSG_FAR_SIGHT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FAR_SIGHT_write(WowWorldWriter* writer, const wrath_CMSG_FAR_SIGHT* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t dispell_spell;
    /* mangosone: unused */
    uint8_t unknown;
    uint32_t amount_of_spells;
    wrath_DispelledSpell* spells;

} wrath_SMSG_SPELLDISPELLOG;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SPELLDISPELLOG_free(wrath_SMSG_SPELLDISPELLOG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELLDISPELLOG_write(WowWorldWriter* writer, const wrath_SMSG_SPELLDISPELLOG* object);

typedef struct {
    char* name;
    uint8_t group_number;

} wrath_CMSG_GROUP_CHANGE_SUB_GROUP;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GROUP_CHANGE_SUB_GROUP_free(wrath_CMSG_GROUP_CHANGE_SUB_GROUP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_CHANGE_SUB_GROUP_write(WowWorldWriter* writer, const wrath_CMSG_GROUP_CHANGE_SUB_GROUP* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_REQUEST_PARTY_MEMBER_STATS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REQUEST_PARTY_MEMBER_STATS_write(WowWorldWriter* writer, const wrath_CMSG_REQUEST_PARTY_MEMBER_STATS* object);

typedef struct {
    char* name;
    char* swap_with_name;

} wrath_CMSG_GROUP_SWAP_SUB_GROUP;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GROUP_SWAP_SUB_GROUP_free(wrath_CMSG_GROUP_SWAP_SUB_GROUP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_SWAP_SUB_GROUP_write(WowWorldWriter* writer, const wrath_CMSG_GROUP_SWAP_SUB_GROUP* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot_index;

} wrath_CMSG_AUTOSTORE_BANK_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUTOSTORE_BANK_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_AUTOSTORE_BANK_ITEM* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot_index;

} wrath_CMSG_AUTOBANK_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUTOBANK_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_AUTOBANK_ITEM* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_QUERY_NEXT_MAIL_TIME_Client_write(WowWorldWriter* writer);

typedef struct {
    uint32_t float_type;
    uint32_t amount_of_mails;
    wrath_ReceivedMail* mails;

} wrath_MSG_QUERY_NEXT_MAIL_TIME_Server;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_MSG_QUERY_NEXT_MAIL_TIME_Server_free(wrath_MSG_QUERY_NEXT_MAIL_TIME_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_QUERY_NEXT_MAIL_TIME_Server_write(WowWorldWriter* writer, const wrath_MSG_QUERY_NEXT_MAIL_TIME_Server* object);

/* cmangos/vmangos/mangoszero: deliver undelivered mail */
typedef struct {
    /* cmangos/vmangos sends 0 as u32, mangoszero sends 0 as f32 */
    uint32_t unknown1;

} wrath_SMSG_RECEIVED_MAIL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_RECEIVED_MAIL_write(WowWorldWriter* writer, const wrath_SMSG_RECEIVED_MAIL* object);

/* used when player leaves raid group inside instance */
typedef struct {
    uint32_t homebind_timer;
    wrath_RaidGroupError error;

} wrath_SMSG_RAID_GROUP_ONLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_RAID_GROUP_ONLY_write(WowWorldWriter* writer, const wrath_SMSG_RAID_GROUP_ONLY* object);

typedef struct {
    uint32_t honor_points;
    uint64_t victim;
    wrath_PvpRank rank;

} wrath_SMSG_PVP_CREDIT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PVP_CREDIT_write(WowWorldWriter* writer, const wrath_SMSG_PVP_CREDIT* object);

typedef struct {
    uint32_t item;
    uint32_t item_template;
    uint32_t random_property_id;

} wrath_SMSG_AUCTION_REMOVED_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AUCTION_REMOVED_NOTIFICATION_write(WowWorldWriter* writer, const wrath_SMSG_AUCTION_REMOVED_NOTIFICATION* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_RAID_CONVERT_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    bool set_assistant;

} wrath_CMSG_GROUP_ASSISTANT_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GROUP_ASSISTANT_LEADER_write(WowWorldWriter* writer, const wrath_CMSG_GROUP_ASSISTANT_LEADER* object);

typedef struct {
    uint64_t guid;
    wrath_BuybackSlot slot;

} wrath_CMSG_BUYBACK_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BUYBACK_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_BUYBACK_ITEM* object);

typedef struct {
    wrath_ServerMessageType message_type;
    char* message;

} wrath_SMSG_SERVER_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SERVER_MESSAGE_free(wrath_SMSG_SERVER_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SERVER_MESSAGE_write(WowWorldWriter* writer, const wrath_SMSG_SERVER_MESSAGE* object);

typedef struct {
    wrath_Map map;
    wrath_RaidDifficulty difficulty;
    bool toggle_extend;

} wrath_CMSG_SET_SAVED_INSTANCE_EXTEND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_SAVED_INSTANCE_EXTEND_write(WowWorldWriter* writer, const wrath_CMSG_SET_SAVED_INSTANCE_EXTEND* object);

typedef struct {
    uint32_t dungeon_entry;

} wrath_SMSG_LFG_OFFER_CONTINUE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_OFFER_CONTINUE_write(WowWorldWriter* writer, const wrath_SMSG_LFG_OFFER_CONTINUE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LFG_GET_STATUS_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SHOW_MAILBOX;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SHOW_MAILBOX_write(WowWorldWriter* writer, const wrath_SMSG_SHOW_MAILBOX* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GMTICKETSYSTEM_TOGGLE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CANCEL_GROWTH_AURA_write(WowWorldWriter* writer);

typedef struct {
    uint64_t target;

} wrath_SMSG_CANCEL_AUTO_REPEAT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CANCEL_AUTO_REPEAT_write(WowWorldWriter* writer, const wrath_SMSG_CANCEL_AUTO_REPEAT* object);

typedef struct {
    wrath_UnitStandState state;

} wrath_SMSG_STANDSTATE_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_STANDSTATE_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_STANDSTATE_UPDATE* object);

typedef struct {
    uint64_t looted_target;
    uint32_t loot_slot;
    uint32_t item;
    uint32_t item_random_property_id;
    /* vmangos/mangoszero: Always set to 0. */
    uint32_t item_random_suffix_id;

} wrath_SMSG_LOOT_ALL_PASSED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_ALL_PASSED_write(WowWorldWriter* writer, const wrath_SMSG_LOOT_ALL_PASSED* object);

typedef struct {
    uint64_t looted_target;
    uint32_t loot_slot;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint64_t winning_player;
    /* rollnumber related to SMSG_LOOT_ROLL */
    uint8_t winning_roll;
    /* Rolltype related to SMSG_LOOT_ROLL */
    wrath_RollVote vote;

} wrath_SMSG_LOOT_ROLL_WON;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_ROLL_WON_write(WowWorldWriter* writer, const wrath_SMSG_LOOT_ROLL_WON* object);

typedef struct {
    uint64_t item;
    uint32_t item_slot;
    wrath_RollVote vote;

} wrath_CMSG_LOOT_ROLL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LOOT_ROLL_write(WowWorldWriter* writer, const wrath_CMSG_LOOT_ROLL* object);

typedef struct {
    uint64_t creature;
    wrath_Map map;
    uint32_t loot_slot;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint32_t countdown_time;
    wrath_RollFlags flags;

} wrath_SMSG_LOOT_START_ROLL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_START_ROLL_write(WowWorldWriter* writer, const wrath_SMSG_LOOT_START_ROLL* object);

typedef struct {
    uint64_t creature;
    uint32_t loot_slot;
    uint64_t player;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    /* vmangos/cmangos/mangoszero: 0: Need for: `item_name` > 127: you passed on: `item_name`      Roll number */
    uint8_t roll_number;
    wrath_RollVote vote;
    /* mangosone/arcemu sets to 0.
mangosone: auto pass on loot
arcemu: possibly related to disenchanting of loot
azerothcore: 1: 'You automatically passed on: %s because you cannot loot that item.' - Possibly used in need before greed */
    uint8_t auto_pass;

} wrath_SMSG_LOOT_ROLL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_ROLL_write(WowWorldWriter* writer, const wrath_SMSG_LOOT_ROLL* object);

typedef struct {
    uint64_t loot;
    uint8_t slot_id;
    uint64_t player;

} wrath_CMSG_LOOT_MASTER_GIVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LOOT_MASTER_GIVE_write(WowWorldWriter* writer, const wrath_CMSG_LOOT_MASTER_GIVE* object);

typedef struct {
    uint8_t amount_of_players;
    uint64_t* guids;

} wrath_SMSG_LOOT_MASTER_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LOOT_MASTER_LIST_free(wrath_SMSG_LOOT_MASTER_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_MASTER_LIST_write(WowWorldWriter* writer, const wrath_SMSG_LOOT_MASTER_LIST* object);

typedef struct {
    uint32_t amount_of_reactions;
    wrath_ForcedReaction* reactions;

} wrath_SMSG_SET_FORCED_REACTIONS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SET_FORCED_REACTIONS_free(wrath_SMSG_SET_FORCED_REACTIONS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SET_FORCED_REACTIONS_write(WowWorldWriter* writer, const wrath_SMSG_SET_FORCED_REACTIONS* object);

typedef struct {
    uint64_t caster;
    uint32_t id;

} wrath_SMSG_SPELL_FAILED_OTHER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELL_FAILED_OTHER_write(WowWorldWriter* writer, const wrath_SMSG_SPELL_FAILED_OTHER* object);

typedef struct {
    uint64_t npc;
    uint64_t item;
    bool from_guild_bank;

} wrath_CMSG_REPAIR_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REPAIR_ITEM_write(WowWorldWriter* writer, const wrath_CMSG_REPAIR_ITEM* object);

typedef struct {
    char* name;

} wrath_SMSG_CHAT_PLAYER_NOT_FOUND;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CHAT_PLAYER_NOT_FOUND_free(wrath_SMSG_CHAT_PLAYER_NOT_FOUND* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHAT_PLAYER_NOT_FOUND_write(WowWorldWriter* writer, const wrath_SMSG_CHAT_PLAYER_NOT_FOUND* object);

typedef struct {
    uint64_t wiping_npc;

} wrath_MSG_TALENT_WIPE_CONFIRM_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_TALENT_WIPE_CONFIRM_Client_write(WowWorldWriter* writer, const wrath_MSG_TALENT_WIPE_CONFIRM_Client* object);

/* cmangos/vmangos/mangoszero returns guid 0 and unknown 0 when talents can not be reset
cmangos/vmangos/mangoszero casts spell 14876 when resetting */
typedef struct {
    uint64_t wiping_npc;
    uint32_t cost_in_copper;

} wrath_MSG_TALENT_WIPE_CONFIRM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_TALENT_WIPE_CONFIRM_Server_write(WowWorldWriter* writer, const wrath_MSG_TALENT_WIPE_CONFIRM_Server* object);

typedef struct {
    uint64_t summoner;
    wrath_Area area;
    uint32_t auto_decline_time;

} wrath_SMSG_SUMMON_REQUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SUMMON_REQUEST_write(WowWorldWriter* writer, const wrath_SMSG_SUMMON_REQUEST* object);

typedef struct {
    uint64_t summoner;
    bool agree;

} wrath_CMSG_SUMMON_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SUMMON_RESPONSE_write(WowWorldWriter* writer, const wrath_CMSG_SUMMON_RESPONSE* object);

typedef struct {
    uint64_t guid;
    uint64_t transport;
    /* cmangos-wotlk sets to 0 */
    uint8_t unknown;
    all_Vector3d spline_point;
    uint32_t spline_id;
    wrath_MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all_Vector3d position;
    wrath_SplineFlag spline_flags;
    uint32_t animation_id;
    uint32_t animation_start_time;
    uint32_t duration;
    float vertical_acceleration;
    uint32_t effect_start_time;
    MonsterMoveSpline splines;

} wrath_SMSG_MONSTER_MOVE_TRANSPORT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_MONSTER_MOVE_TRANSPORT_free(wrath_SMSG_MONSTER_MOVE_TRANSPORT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MONSTER_MOVE_TRANSPORT_write(WowWorldWriter* writer, const wrath_SMSG_MONSTER_MOVE_TRANSPORT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_BROKEN_write(WowWorldWriter* writer);

typedef struct {
    uint64_t player;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_FEATHER_FALL_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_FEATHER_FALL_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_FEATHER_FALL_Server* object);

typedef struct {
    uint64_t player;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_WATER_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_WATER_WALK_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_WATER_WALK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_WATER_WALK_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_WATER_WALK* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SELF_RES_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FEIGN_DEATH_RESISTED_write(WowWorldWriter* writer);

typedef struct {
    uint32_t time;

} wrath_SMSG_DUEL_COUNTDOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DUEL_COUNTDOWN_write(WowWorldWriter* writer, const wrath_SMSG_DUEL_COUNTDOWN* object);

typedef struct {
    char* message;

} wrath_SMSG_AREA_TRIGGER_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_AREA_TRIGGER_MESSAGE_free(wrath_SMSG_AREA_TRIGGER_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AREA_TRIGGER_MESSAGE_write(WowWorldWriter* writer, const wrath_SMSG_AREA_TRIGGER_MESSAGE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TOGGLE_HELM_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TOGGLE_CLOAK_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    bool ready;
    uint32_t roles;

} wrath_SMSG_LFG_ROLE_CHOSEN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_ROLE_CHOSEN_write(WowWorldWriter* writer, const wrath_SMSG_LFG_ROLE_CHOSEN* object);

typedef struct {
    bool spirit_released;

} wrath_SMSG_PLAYER_SKINNED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PLAYER_SKINNED_write(WowWorldWriter* writer, const wrath_SMSG_PLAYER_SKINNED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DURABILITY_DAMAGE_DEATH_write(WowWorldWriter* writer);

typedef struct {
    /* Emulators set PLAYER_FIELD_BYTES[2] to this unless it's 0. */
    uint8_t action_bar;

} wrath_CMSG_SET_ACTIONBAR_TOGGLES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_ACTIONBAR_TOGGLES_write(WowWorldWriter* writer, const wrath_CMSG_SET_ACTIONBAR_TOGGLES* object);

typedef struct {
    uint64_t petition;
    char* new_name;

} wrath_MSG_PETITION_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_MSG_PETITION_RENAME_free(wrath_MSG_PETITION_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_PETITION_RENAME_cmsg_write(WowWorldWriter* writer, const wrath_MSG_PETITION_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_PETITION_RENAME_smsg_write(WowWorldWriter* writer, const wrath_MSG_PETITION_RENAME* object);

typedef struct {
    wrath_Map map;
    wrath_Area area;
    wrath_Area sub_area;
    uint16_t amount_of_states;
    wrath_WorldState* states;

} wrath_SMSG_INIT_WORLD_STATES;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_INIT_WORLD_STATES_free(wrath_SMSG_INIT_WORLD_STATES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INIT_WORLD_STATES_write(WowWorldWriter* writer, const wrath_SMSG_INIT_WORLD_STATES* object);

typedef struct {
    wrath_WorldState state;

} wrath_SMSG_UPDATE_WORLD_STATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_UPDATE_WORLD_STATE_write(WowWorldWriter* writer, const wrath_SMSG_UPDATE_WORLD_STATE* object);

typedef struct {
    uint32_t item;
    uint64_t guid;

} wrath_CMSG_ITEM_NAME_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ITEM_NAME_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_ITEM_NAME_QUERY* object);

typedef struct {
    uint32_t item;
    char* item_name;
    wrath_InventoryType inventory_type;

} wrath_SMSG_ITEM_NAME_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ITEM_NAME_QUERY_RESPONSE_free(wrath_SMSG_ITEM_NAME_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ITEM_NAME_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_ITEM_NAME_QUERY_RESPONSE* object);

typedef struct {
    wrath_PetFeedback feedback;

} wrath_SMSG_PET_ACTION_FEEDBACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_ACTION_FEEDBACK_write(WowWorldWriter* writer, const wrath_SMSG_PET_ACTION_FEEDBACK* object);

/* Request of new name for character. This is only sent by the client if RENAME is set in the [CharacterFlags] of [SMSG_CHAR_ENUM] and the client tries to login. */
typedef struct {
    uint64_t character;
    char* new_name;

} wrath_CMSG_CHAR_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHAR_RENAME_free(wrath_CMSG_CHAR_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHAR_RENAME_write(WowWorldWriter* writer, const wrath_CMSG_CHAR_RENAME* object);

/* Response to [CMSG_CHAR_RENAME]. */
typedef struct {
    wrath_WorldResult result;
    uint64_t character;
    char* new_name;

} wrath_SMSG_CHAR_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CHAR_RENAME_free(wrath_SMSG_CHAR_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHAR_RENAME_write(WowWorldWriter* writer, const wrath_SMSG_CHAR_RENAME* object);

typedef struct {
    wrath_MovementInfo info;
    uint32_t movement_counter;

} wrath_CMSG_MOVE_SPLINE_DONE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_SPLINE_DONE_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_SPLINE_DONE* object);

typedef struct {
    wrath_MovementInfo info;

} wrath_CMSG_MOVE_FALL_RESET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_FALL_RESET_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_FALL_RESET* object);

typedef struct {
    /* All emulators across all versions set to 0 */
    uint32_t unknown;

} wrath_SMSG_INSTANCE_SAVE_CREATED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INSTANCE_SAVE_CREATED_write(WowWorldWriter* writer, const wrath_SMSG_INSTANCE_SAVE_CREATED* object);

typedef struct {
    uint32_t amount_of_raid_infos;
    wrath_RaidInfo* raid_infos;

} wrath_SMSG_RAID_INSTANCE_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_RAID_INSTANCE_INFO_free(wrath_SMSG_RAID_INSTANCE_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_RAID_INSTANCE_INFO_write(WowWorldWriter* writer, const wrath_SMSG_RAID_INSTANCE_INFO* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REQUEST_RAID_INFO_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    uint32_t lag;

} wrath_CMSG_MOVE_TIME_SKIPPED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_TIME_SKIPPED_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_TIME_SKIPPED* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    wrath_MovementInfo info;
    uint32_t apply;

} wrath_CMSG_MOVE_FEATHER_FALL_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_FEATHER_FALL_ACK_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_FEATHER_FALL_ACK* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    wrath_MovementInfo info;
    uint32_t apply;

} wrath_CMSG_MOVE_WATER_WALK_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_WATER_WALK_ACK_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_WATER_WALK_ACK* object);

typedef struct {
    uint64_t old_mover;
    wrath_MovementInfo info;

} wrath_CMSG_MOVE_NOT_ACTIVE_MOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_NOT_ACTIVE_MOVER_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_NOT_ACTIVE_MOVER* object);

typedef struct {
    uint32_t sound_id;

} wrath_SMSG_PLAY_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PLAY_SOUND_write(WowWorldWriter* writer, const wrath_SMSG_PLAY_SOUND* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BATTLEFIELD_STATUS_write(WowWorldWriter* writer);

/* mangosone treats `arena_type`, `unknown1`, `battleground_type_id`, and `unknown2` as one big u64 and does not send any fields after these if all fields are 0. */
typedef struct {
    /* vmangos: players can be in 3 queues at the same time (0..2) */
    uint32_t queue_slot;
    wrath_ArenaType arena_type;
    /* azerothcore sets to 0x0E if it is arena, 0 otherwise. */
    uint8_t is_arena;
    wrath_BattlegroundType battleground_type;
    /* azerothcore sets to 0x1F90 */
    uint16_t unknown1;
    uint8_t minimum_level;
    uint8_t maximum_level;
    uint32_t client_instance_id;
    bool rated;
    wrath_StatusId status_id;
    uint32_t average_wait_time_in_ms;
    uint32_t time_in_queue_in_ms;
    wrath_Map map1;
    /* azerothcore: 3.3.5 unknown */
    uint64_t unknown2;
    uint32_t time_to_remove_in_queue_in_ms;
    wrath_Map map2;
    /* azerothcore: 3.3.5 unknown */
    uint64_t unknown3;
    uint32_t time_to_bg_autoleave_in_ms;
    uint32_t time_to_bg_start_in_ms;
    wrath_ArenaFaction faction;

} wrath_SMSG_BATTLEFIELD_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEFIELD_STATUS_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEFIELD_STATUS* object);

typedef struct {
    /* mangosone/mangos-tbc/azerothcore: arenatype if arena */
    uint8_t arena_type;
    /* mangosone/mangos-tbc/azerothcore: unk, can be 0x0 (may be if was invited?) and 0x1 */
    uint8_t unknown1;
    /* mangosone/mangos-tbc/azerothcore: type id from dbc */
    uint32_t bg_type_id;
    /* mangosone/mangos-tbc/azerothcore: 0x1F90 constant? */
    uint16_t unknown2;
    wrath_BattlefieldPortAction action;

} wrath_CMSG_BATTLEFIELD_PORT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BATTLEFIELD_PORT_write(WowWorldWriter* writer, const wrath_CMSG_BATTLEFIELD_PORT* object);

typedef struct {
    uint64_t guid;

} wrath_MSG_INSPECT_HONOR_STATS_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_INSPECT_HONOR_STATS_Client_write(WowWorldWriter* writer, const wrath_MSG_INSPECT_HONOR_STATS_Client* object);

typedef struct {
    uint64_t guid;
    uint8_t amount_of_honor;
    uint32_t kills;
    uint32_t honor_today;
    uint32_t honor_yesterday;
    uint32_t lifetime_honorable_kills;

} wrath_MSG_INSPECT_HONOR_STATS_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_INSPECT_HONOR_STATS_Server_write(WowWorldWriter* writer, const wrath_MSG_INSPECT_HONOR_STATS_Server* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_BATTLEMASTER_HELLO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BATTLEMASTER_HELLO_write(WowWorldWriter* writer, const wrath_CMSG_BATTLEMASTER_HELLO* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} wrath_SMSG_FORCE_WALK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_WALK_SPEED_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_WALK_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    wrath_MovementInfo info;
    float new_speed;

} wrath_CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FORCE_WALK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const wrath_CMSG_FORCE_WALK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} wrath_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    wrath_MovementInfo info;
    float new_speed;

} wrath_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const wrath_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} wrath_SMSG_FORCE_TURN_RATE_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_TURN_RATE_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_TURN_RATE_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    wrath_MovementInfo info;
    float new_speed;

} wrath_CMSG_FORCE_TURN_RATE_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FORCE_TURN_RATE_CHANGE_ACK_write(WowWorldWriter* writer, const wrath_CMSG_FORCE_TURN_RATE_CHANGE_ACK* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_PVP_LOG_DATA_Client_write(WowWorldWriter* writer);

typedef struct {
    uint8_t unknown1;
    uint8_t unknown2;
    wrath_Map map;
    uint16_t unknown3;

} wrath_CMSG_LEAVE_BATTLEFIELD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LEAVE_BATTLEFIELD_write(WowWorldWriter* writer, const wrath_CMSG_LEAVE_BATTLEFIELD* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_AREA_SPIRIT_HEALER_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AREA_SPIRIT_HEALER_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_AREA_SPIRIT_HEALER_QUERY* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_AREA_SPIRIT_HEALER_QUEUE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AREA_SPIRIT_HEALER_QUEUE_write(WowWorldWriter* writer, const wrath_CMSG_AREA_SPIRIT_HEALER_QUEUE* object);

typedef struct {
    uint64_t guid;
    uint32_t next_resurrect_time;

} wrath_SMSG_AREA_SPIRIT_HEALER_TIME;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AREA_SPIRIT_HEALER_TIME_write(WowWorldWriter* writer, const wrath_SMSG_AREA_SPIRIT_HEALER_TIME* object);

typedef struct {
    uint32_t amount_of_encrypted_data;
    uint8_t* encrypted_data;

} wrath_SMSG_WARDEN_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_WARDEN_DATA_free(wrath_SMSG_WARDEN_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_WARDEN_DATA_write(WowWorldWriter* writer, const wrath_SMSG_WARDEN_DATA* object);

typedef struct {
    uint32_t amount_of_encrypted_data;
    uint8_t* encrypted_data;

} wrath_CMSG_WARDEN_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_WARDEN_DATA_free(wrath_CMSG_WARDEN_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_WARDEN_DATA_write(WowWorldWriter* writer, const wrath_CMSG_WARDEN_DATA* object);

typedef struct {
    wrath_BgTypeId id;

} wrath_SMSG_GROUP_JOINED_BATTLEGROUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GROUP_JOINED_BATTLEGROUND_write(WowWorldWriter* writer, const wrath_SMSG_GROUP_JOINED_BATTLEGROUND* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_BATTLEGROUND_PLAYER_POSITIONS_Client_write(WowWorldWriter* writer);

typedef struct {
    uint32_t amount_of_teammates;
    wrath_BattlegroundPlayerPosition* teammates;
    /* vmangos only sends the carrier of the player team. No emu ever sends more than 2. */
    uint8_t amount_of_carriers;
    wrath_BattlegroundPlayerPosition* carriers;

} wrath_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_free(wrath_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_write(WowWorldWriter* writer, const wrath_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server* object);

typedef struct {
    uint64_t pet;

} wrath_CMSG_PET_STOP_ATTACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_STOP_ATTACK_write(WowWorldWriter* writer, const wrath_CMSG_PET_STOP_ATTACK* object);

typedef struct {
    uint64_t guid;
    /* arcemu has this field while other emus do not. */
    wrath_Area area;

} wrath_SMSG_BINDER_CONFIRM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BINDER_CONFIRM_write(WowWorldWriter* writer, const wrath_SMSG_BINDER_CONFIRM* object);

typedef struct {
    uint64_t player;

} wrath_SMSG_BATTLEGROUND_PLAYER_JOINED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEGROUND_PLAYER_JOINED_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEGROUND_PLAYER_JOINED* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_BATTLEGROUND_PLAYER_LEFT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEGROUND_PLAYER_LEFT_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEGROUND_PLAYER_LEFT* object);

typedef struct {
    /* vmangos: battlemaster guid, or player guid if joining queue from BG portal */
    uint64_t guid;
    wrath_Map map;
    /* vmangos: 0 if First Available selected */
    uint32_t instance_id;
    bool join_as_group;

} wrath_CMSG_BATTLEMASTER_JOIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BATTLEMASTER_JOIN_write(WowWorldWriter* writer, const wrath_CMSG_BATTLEMASTER_JOIN* object);

/* Banned addons are not properly implemented in the wowm. Sending any number other than 0 means that the packet is incomplete and thus invalid */
typedef struct {
    wrath_AddonArray addons;

} wrath_SMSG_ADDON_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ADDON_INFO_free(wrath_SMSG_ADDON_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ADDON_INFO_write(WowWorldWriter* writer, const wrath_SMSG_ADDON_INFO* object);

typedef struct {
    uint64_t pet;

} wrath_CMSG_PET_UNLEARN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_UNLEARN_write(WowWorldWriter* writer, const wrath_CMSG_PET_UNLEARN* object);

typedef struct {
    uint64_t pet;
    uint32_t talent_reset_cost;

} wrath_SMSG_PET_UNLEARN_CONFIRM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_UNLEARN_CONFIRM_write(WowWorldWriter* writer, const wrath_SMSG_PET_UNLEARN_CONFIRM* object);

typedef struct {
    uint64_t guid;
    wrath_GroupUpdateFlags mask;
    wrath_GroupMemberOnlineStatus status;
    uint32_t current_health;
    uint32_t max_health;
    wrath_Power power;
    uint16_t current_power;
    uint16_t max_power;
    uint16_t level;
    wrath_Area area;
    /* cmangos: float cast to u16 */
    uint16_t position_x;
    /* cmangos: float cast to u16 */
    uint16_t position_y;
    /* cmangos: In all checked pre-2.x data of packets included only positive auras */
    wrath_AuraMask auras;
    uint64_t pet;
    char* pet_name;
    uint16_t pet_display_id;
    uint32_t pet_current_health;
    uint32_t pet_max_health;
    wrath_Power pet_power_type;
    uint16_t pet_current_power;
    uint16_t pet_max_power;
    wrath_AuraMask pet_auras;
    uint32_t transport;

} wrath_SMSG_PARTY_MEMBER_STATS_FULL;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PARTY_MEMBER_STATS_FULL_free(wrath_SMSG_PARTY_MEMBER_STATS_FULL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PARTY_MEMBER_STATS_FULL_write(WowWorldWriter* writer, const wrath_SMSG_PARTY_MEMBER_STATS_FULL* object);

typedef struct {
    uint64_t guid;
    uint32_t id;
    bool autocast_enabled;

} wrath_CMSG_PET_SPELL_AUTOCAST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_SPELL_AUTOCAST_write(WowWorldWriter* writer, const wrath_CMSG_PET_SPELL_AUTOCAST* object);

typedef struct {
    wrath_WeatherType weather_type;
    float grade;
    wrath_WeatherChangeType change;

} wrath_SMSG_WEATHER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_WEATHER_write(WowWorldWriter* writer, const wrath_SMSG_WEATHER* object);

typedef struct {
    wrath_RaidInstanceMessage message_type;
    wrath_Map map;
    wrath_RaidDifficulty difficulty;
    uint32_t time_left;

} wrath_SMSG_RAID_INSTANCE_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_RAID_INSTANCE_MESSAGE_write(WowWorldWriter* writer, const wrath_SMSG_RAID_INSTANCE_MESSAGE* object);

typedef struct {
    uint32_t amount_of_moves;
    wrath_MiniMoveMessage* moves;

} wrath_SMSG_COMPRESSED_MOVES;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_COMPRESSED_MOVES_free(wrath_SMSG_COMPRESSED_MOVES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_COMPRESSED_MOVES_write(WowWorldWriter* writer, const wrath_SMSG_COMPRESSED_MOVES* object);

typedef struct {
    char* guild_info;

} wrath_CMSG_GUILD_INFO_TEXT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_INFO_TEXT_free(wrath_CMSG_GUILD_INFO_TEXT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_INFO_TEXT_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_INFO_TEXT* object);

typedef struct {
    wrath_ChatRestrictionType restriction;

} wrath_SMSG_CHAT_RESTRICTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHAT_RESTRICTED_write(WowWorldWriter* writer, const wrath_SMSG_CHAT_RESTRICTED* object);

/* Informs the client that the run speed of a unit has changed.
Mangos sends this to third parties that aren't having their speed changed and [SMSG_FORCE_RUN_SPEED_CHANGE] to the client that has their run speed changed. */
typedef struct {
    uint64_t guid;
    float speed;

} wrath_SMSG_SPLINE_SET_RUN_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_SET_RUN_SPEED_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_SET_RUN_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} wrath_SMSG_SPLINE_SET_RUN_BACK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_SET_RUN_BACK_SPEED_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_SET_RUN_BACK_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} wrath_SMSG_SPLINE_SET_SWIM_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_SET_SWIM_SPEED_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_SET_SWIM_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} wrath_SMSG_SPLINE_SET_WALK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_SET_WALK_SPEED_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_SET_WALK_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} wrath_SMSG_SPLINE_SET_SWIM_BACK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_SET_SWIM_BACK_SPEED_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_SET_SWIM_BACK_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} wrath_SMSG_SPLINE_SET_TURN_RATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_SET_TURN_RATE_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_SET_TURN_RATE* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_UNROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_UNROOT_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_UNROOT* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_FEATHER_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_FEATHER_FALL_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_FEATHER_FALL* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_NORMAL_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_NORMAL_FALL_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_NORMAL_FALL* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_SET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_SET_HOVER_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_SET_HOVER* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_UNSET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_UNSET_HOVER_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_UNSET_HOVER* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_WATER_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_WATER_WALK_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_WATER_WALK* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_LAND_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_LAND_WALK_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_LAND_WALK* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_START_SWIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_START_SWIM_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_START_SWIM* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_STOP_SWIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_STOP_SWIM_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_STOP_SWIM* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_SET_RUN_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_SET_RUN_MODE_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_SET_RUN_MODE* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_SET_WALK_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_SET_WALK_MODE_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_SET_WALK_MODE* object);

typedef struct {
    uint64_t guid;
    uint32_t node_count;
    uint32_t* nodes;

} wrath_CMSG_ACTIVATETAXIEXPRESS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_ACTIVATETAXIEXPRESS_free(wrath_CMSG_ACTIVATETAXIEXPRESS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ACTIVATETAXIEXPRESS_write(WowWorldWriter* writer, const wrath_CMSG_ACTIVATETAXIEXPRESS* object);

typedef struct {
    wrath_Faction faction;
    bool inactive;

} wrath_CMSG_SET_FACTION_INACTIVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_FACTION_INACTIVE_write(WowWorldWriter* writer, const wrath_CMSG_SET_FACTION_INACTIVE* object);

typedef struct {
    wrath_Faction faction;

} wrath_CMSG_SET_WATCHED_FACTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_WATCHED_FACTION_write(WowWorldWriter* writer, const wrath_CMSG_SET_WATCHED_FACTION* object);

typedef struct {
    uint64_t player;
    uint32_t time_skipped;

} wrath_MSG_MOVE_TIME_SKIPPED_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_TIME_SKIPPED_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_TIME_SKIPPED_Server* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_ROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_ROOT_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_ROOT* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_INVALIDATE_PLAYER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INVALIDATE_PLAYER_write(WowWorldWriter* writer, const wrath_SMSG_INVALIDATE_PLAYER* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_RESET_INSTANCES_write(WowWorldWriter* writer);

typedef struct {
    wrath_Map map;

} wrath_SMSG_INSTANCE_RESET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INSTANCE_RESET_write(WowWorldWriter* writer, const wrath_SMSG_INSTANCE_RESET* object);

typedef struct {
    wrath_InstanceResetFailedReason reason;
    wrath_Map map;

} wrath_SMSG_INSTANCE_RESET_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INSTANCE_RESET_FAILED_write(WowWorldWriter* writer, const wrath_SMSG_INSTANCE_RESET_FAILED* object);

typedef struct {
    wrath_Map map;

} wrath_SMSG_UPDATE_LAST_INSTANCE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_UPDATE_LAST_INSTANCE_write(WowWorldWriter* writer, const wrath_SMSG_UPDATE_LAST_INSTANCE* object);

typedef struct {
    wrath_RaidTargetIndex target_index;
    uint64_t target;

} wrath_MSG_RAID_TARGET_UPDATE_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_RAID_TARGET_UPDATE_Client_write(WowWorldWriter* writer, const wrath_MSG_RAID_TARGET_UPDATE_Client* object);

typedef struct {
    wrath_RaidTargetUpdateType update_type;
    wrath_RaidTargetUpdate raid_targets[8];
    wrath_RaidTargetUpdate raid_target;

} wrath_MSG_RAID_TARGET_UPDATE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_RAID_TARGET_UPDATE_Server_write(WowWorldWriter* writer, const wrath_MSG_RAID_TARGET_UPDATE_Server* object);

typedef struct {
    uint8_t state;
} wrath_MSG_RAID_READY_CHECK_Client_answer;

typedef struct {

    wrath_MSG_RAID_READY_CHECK_Client_answer* answer;
} wrath_MSG_RAID_READY_CHECK_Client;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_MSG_RAID_READY_CHECK_Client_free(wrath_MSG_RAID_READY_CHECK_Client* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_RAID_READY_CHECK_Client_write(WowWorldWriter* writer, const wrath_MSG_RAID_READY_CHECK_Client* object);

typedef struct {
    uint64_t guid;
    uint8_t state;
} wrath_MSG_RAID_READY_CHECK_Server_state_check;

typedef struct {

    wrath_MSG_RAID_READY_CHECK_Server_state_check* state_check;
} wrath_MSG_RAID_READY_CHECK_Server;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_MSG_RAID_READY_CHECK_Server_free(wrath_MSG_RAID_READY_CHECK_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_RAID_READY_CHECK_Server_write(WowWorldWriter* writer, const wrath_MSG_RAID_READY_CHECK_Server* object);

typedef struct {
    uint64_t guid;
    wrath_PetTalkReason reason;

} wrath_SMSG_PET_ACTION_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_ACTION_SOUND_write(WowWorldWriter* writer, const wrath_SMSG_PET_ACTION_SOUND* object);

/* Not implemented in any Wrath emulators. */
typedef struct {
    uint32_t sound_id;
    all_Vector3d position;

} wrath_SMSG_PET_DISMISS_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_DISMISS_SOUND_write(WowWorldWriter* writer, const wrath_SMSG_PET_DISMISS_SOUND* object);

typedef struct {
    wrath_GmTicketStatusResponse response;

} wrath_SMSG_GM_TICKET_STATUS_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GM_TICKET_STATUS_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_GM_TICKET_STATUS_UPDATE* object);

typedef struct {
    wrath_DungeonDifficulty difficulty;

} wrath_MSG_SET_DUNGEON_DIFFICULTY_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_SET_DUNGEON_DIFFICULTY_Client_write(WowWorldWriter* writer, const wrath_MSG_SET_DUNGEON_DIFFICULTY_Client* object);

typedef struct {
    wrath_DungeonDifficulty difficulty;
    /* ArcEmu hardcodes this to 1 */
    uint32_t unknown1;
    bool is_in_group;

} wrath_MSG_SET_DUNGEON_DIFFICULTY_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_SET_DUNGEON_DIFFICULTY_Server_write(WowWorldWriter* writer, const wrath_MSG_SET_DUNGEON_DIFFICULTY_Server* object);

typedef struct {
    /* cmangos: Survey ID: found in GMSurveySurveys.dbc */
    uint32_t survey_id;
    wrath_GmSurveyQuestion questions[10];
    /* cmangos: Answer comment: Unused in stock UI, can be only set by calling Lua function
cmangos: Answer comment max sizes in bytes: Vanilla - 8106:8110, TBC - 11459:11463, Wrath - 582:586 */
    char* answer_comment;

} wrath_CMSG_GMSURVEY_SUBMIT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GMSURVEY_SUBMIT_free(wrath_CMSG_GMSURVEY_SUBMIT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GMSURVEY_SUBMIT_write(WowWorldWriter* writer, const wrath_CMSG_GMSURVEY_SUBMIT* object);

typedef struct {
    bool player_is_saved_to_a_raid;

} wrath_SMSG_UPDATE_INSTANCE_OWNERSHIP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_UPDATE_INSTANCE_OWNERSHIP_write(WowWorldWriter* writer, const wrath_SMSG_UPDATE_INSTANCE_OWNERSHIP* object);

/* Never actually sent in any emulator. */
typedef struct {
    char* player;

} wrath_SMSG_CHAT_PLAYER_AMBIGUOUS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CHAT_PLAYER_AMBIGUOUS_free(wrath_SMSG_CHAT_PLAYER_AMBIGUOUS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHAT_PLAYER_AMBIGUOUS_write(WowWorldWriter* writer, const wrath_SMSG_CHAT_PLAYER_AMBIGUOUS* object);

typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t spell;

} wrath_SMSG_SPELLINSTAKILLLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELLINSTAKILLLOG_write(WowWorldWriter* writer, const wrath_SMSG_SPELLINSTAKILLLOG* object);

typedef struct {
    uint64_t caster;
    uint32_t spell;
    uint32_t amount_of_targets;
    uint64_t* targets;

} wrath_SMSG_SPELL_UPDATE_CHAIN_TARGETS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SPELL_UPDATE_CHAIN_TARGETS_free(wrath_SMSG_SPELL_UPDATE_CHAIN_TARGETS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELL_UPDATE_CHAIN_TARGETS_write(WowWorldWriter* writer, const wrath_SMSG_SPELL_UPDATE_CHAIN_TARGETS* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    uint8_t unknown;
    uint32_t amount_of_spell_steals;
    wrath_SpellSteal* spell_steals;

} wrath_SMSG_SPELLSTEALLOG;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SPELLSTEALLOG_free(wrath_SMSG_SPELLSTEALLOG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPELLSTEALLOG_write(WowWorldWriter* writer, const wrath_SMSG_SPELLSTEALLOG* object);

typedef struct {
    wrath_Area area;
    char* message;

} wrath_SMSG_DEFENSE_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_DEFENSE_MESSAGE_free(wrath_SMSG_DEFENSE_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DEFENSE_MESSAGE_write(WowWorldWriter* writer, const wrath_SMSG_DEFENSE_MESSAGE* object);

typedef struct {
    uint32_t difficulty;
    bool dynamic_difficulty;

} wrath_SMSG_INSTANCE_DIFFICULTY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INSTANCE_DIFFICULTY_write(WowWorldWriter* writer, const wrath_SMSG_INSTANCE_DIFFICULTY* object);

typedef struct {
    uint32_t amount_of_motds;
    char** motds;

} wrath_SMSG_MOTD;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_MOTD_free(wrath_SMSG_MOTD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOTD_write(WowWorldWriter* writer, const wrath_SMSG_MOTD* object);

typedef struct {
    uint64_t guid;
    uint32_t unknown1;
    wrath_MovementInfo info;
    uint32_t unknown2;

} wrath_CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK* object);

typedef struct {
    uint64_t player;
    uint32_t counter;

} wrath_SMSG_MOVE_SET_CAN_FLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_SET_CAN_FLY_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_SET_CAN_FLY* object);

typedef struct {
    uint64_t player;
    uint32_t counter;

} wrath_SMSG_MOVE_UNSET_CAN_FLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_UNSET_CAN_FLY_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_UNSET_CAN_FLY* object);

typedef struct {
    uint64_t player;
    uint32_t counter;
    wrath_MovementInfo info;
    bool applied;

} wrath_CMSG_MOVE_SET_CAN_FLY_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_SET_CAN_FLY_ACK_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_SET_CAN_FLY_ACK* object);

typedef struct {
    wrath_MovementInfo info;

} wrath_CMSG_MOVE_SET_FLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_SET_FLY_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_SET_FLY* object);

typedef struct {
    uint64_t item;
    uint64_t gems[3];

} wrath_CMSG_SOCKET_GEMS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SOCKET_GEMS_write(WowWorldWriter* writer, const wrath_CMSG_SOCKET_GEMS* object);

typedef struct {
    wrath_ArenaTeamCommand command;
    char* team;
    char* player;
    wrath_ArenaTeamCommandError error;

} wrath_SMSG_ARENA_TEAM_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ARENA_TEAM_COMMAND_RESULT_free(wrath_SMSG_ARENA_TEAM_COMMAND_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ARENA_TEAM_COMMAND_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_ARENA_TEAM_COMMAND_RESULT* object);

typedef struct {
    uint32_t arena_team;
    char* team_name;
    wrath_ArenaType team_type;
    uint32_t background_color;
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;

} wrath_SMSG_ARENA_TEAM_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ARENA_TEAM_QUERY_RESPONSE_free(wrath_SMSG_ARENA_TEAM_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ARENA_TEAM_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_ARENA_TEAM_QUERY_RESPONSE* object);

typedef struct {
    uint32_t arena_team;

} wrath_CMSG_ARENA_TEAM_ROSTER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ARENA_TEAM_ROSTER_write(WowWorldWriter* writer, const wrath_CMSG_ARENA_TEAM_ROSTER* object);

typedef struct {
    uint32_t arena_team;
    /* arcemu: new 3.0.8.
arcemu sets to 0. */
    uint8_t unknown;
    uint32_t amount_of_members;
    wrath_ArenaType arena_type;
    wrath_ArenaTeamMember* members;

} wrath_SMSG_ARENA_TEAM_ROSTER;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ARENA_TEAM_ROSTER_free(wrath_SMSG_ARENA_TEAM_ROSTER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ARENA_TEAM_ROSTER_write(WowWorldWriter* writer, const wrath_SMSG_ARENA_TEAM_ROSTER* object);

typedef struct {
    uint32_t arena_team;
    char* player;

} wrath_CMSG_ARENA_TEAM_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_ARENA_TEAM_INVITE_free(wrath_CMSG_ARENA_TEAM_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ARENA_TEAM_INVITE_write(WowWorldWriter* writer, const wrath_CMSG_ARENA_TEAM_INVITE* object);

typedef struct {
    char* player_name;
    char* team_name;

} wrath_SMSG_ARENA_TEAM_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ARENA_TEAM_INVITE_free(wrath_SMSG_ARENA_TEAM_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ARENA_TEAM_INVITE_write(WowWorldWriter* writer, const wrath_SMSG_ARENA_TEAM_INVITE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ARENA_TEAM_ACCEPT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ARENA_TEAM_DECLINE_write(WowWorldWriter* writer);

typedef struct {
    uint32_t arena_team;

} wrath_CMSG_ARENA_TEAM_LEAVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ARENA_TEAM_LEAVE_write(WowWorldWriter* writer, const wrath_CMSG_ARENA_TEAM_LEAVE* object);

typedef struct {
    uint32_t arena_team;
    char* player;

} wrath_CMSG_ARENA_TEAM_REMOVE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_ARENA_TEAM_REMOVE_free(wrath_CMSG_ARENA_TEAM_REMOVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ARENA_TEAM_REMOVE_write(WowWorldWriter* writer, const wrath_CMSG_ARENA_TEAM_REMOVE* object);

typedef struct {
    uint32_t arena_team;

} wrath_CMSG_ARENA_TEAM_DISBAND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ARENA_TEAM_DISBAND_write(WowWorldWriter* writer, const wrath_CMSG_ARENA_TEAM_DISBAND* object);

typedef struct {
    uint32_t arena_team;
    char* player;

} wrath_CMSG_ARENA_TEAM_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_ARENA_TEAM_LEADER_free(wrath_CMSG_ARENA_TEAM_LEADER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ARENA_TEAM_LEADER_write(WowWorldWriter* writer, const wrath_CMSG_ARENA_TEAM_LEADER* object);

typedef struct {
    wrath_ArenaTeamEvent event;
    char* joiner_name;
    char* arena_team_name1;
    uint64_t joiner;
    char* leaver_name;
    uint64_t leaver;
    char* kicked_player_name;
    char* arena_team_name2;
    char* kicker_name;
    char* leader_name;
    char* arena_team_name3;
    char* old_leader;
    char* new_leader;
    uint8_t amount_of_strings;
    char** string;

} wrath_SMSG_ARENA_TEAM_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ARENA_TEAM_EVENT_free(wrath_SMSG_ARENA_TEAM_EVENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ARENA_TEAM_EVENT_write(WowWorldWriter* writer, const wrath_SMSG_ARENA_TEAM_EVENT* object);

typedef struct {
    uint64_t battlemaster;
    wrath_JoinArenaType arena_type;
    bool as_group;
    bool rated;

} wrath_CMSG_BATTLEMASTER_JOIN_ARENA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BATTLEMASTER_JOIN_ARENA_write(WowWorldWriter* writer, const wrath_CMSG_BATTLEMASTER_JOIN_ARENA* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_ASCEND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_ASCEND_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_ASCEND* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_ASCEND_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_ASCEND* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_STOP_ASCEND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_ASCEND_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP_ASCEND* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_STOP_ASCEND_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_STOP_ASCEND* object);

typedef struct {
    uint32_t arena_team;
    uint32_t rating;
    uint32_t games_played_this_week;
    uint32_t games_won_this_week;
    uint32_t games_played_this_season;
    uint32_t games_won_this_season;
    uint32_t ranking;

} wrath_SMSG_ARENA_TEAM_STATS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ARENA_TEAM_STATS_write(WowWorldWriter* writer, const wrath_SMSG_ARENA_TEAM_STATS* object);

typedef struct {
    uint32_t roles;
    bool no_partial_clear;
    bool achievements;
    uint8_t amount_of_slots;
    uint32_t* slots;
    uint8_t amount_of_needs;
    uint8_t* needs;
    char* comment;

} wrath_CMSG_LFG_JOIN;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_LFG_JOIN_free(wrath_CMSG_LFG_JOIN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LFG_JOIN_write(WowWorldWriter* writer, const wrath_CMSG_LFG_JOIN* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LFG_LEAVE_write(WowWorldWriter* writer);

typedef struct {
    uint32_t dungeon_id;

} wrath_CMSG_SEARCH_LFG_JOIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SEARCH_LFG_JOIN_write(WowWorldWriter* writer, const wrath_CMSG_SEARCH_LFG_JOIN* object);

typedef struct {
    uint32_t dungeon_id;

} wrath_CMSG_SEARCH_LFG_LEAVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SEARCH_LFG_LEAVE_write(WowWorldWriter* writer, const wrath_CMSG_SEARCH_LFG_LEAVE* object);

typedef struct {
    wrath_LfgType lfg_type;
    uint32_t dungeon_id;
    wrath_LfgListUpdateType update_type;
    uint32_t amount_of_deleted_guids;
    uint64_t* deleted_guids;
    uint32_t amount_of_groups;
    /* emus set to 0. */
    uint32_t unknown1;
    wrath_LfgListGroup* groups;
    uint32_t amount_of_players;
    /* emus set to 0. */
    uint32_t unknown2;
    wrath_LfgListPlayer* players;

} wrath_SMSG_UPDATE_LFG_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_UPDATE_LFG_LIST_free(wrath_SMSG_UPDATE_LFG_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_UPDATE_LFG_LIST_write(WowWorldWriter* writer, const wrath_SMSG_UPDATE_LFG_LIST* object);

typedef struct {
    uint32_t dungeon_id;
    uint8_t proposal_state;
    uint32_t proposal_id;
    uint32_t encounters_finished_mask;
    uint8_t silent;
    uint8_t amount_of_proposals;
    wrath_LfgProposal* proposals;

} wrath_SMSG_LFG_PROPOSAL_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LFG_PROPOSAL_UPDATE_free(wrath_SMSG_LFG_PROPOSAL_UPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_PROPOSAL_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_LFG_PROPOSAL_UPDATE* object);

typedef struct {
    uint32_t proposal_id;
    bool accept_join;

} wrath_CMSG_LFG_PROPOSAL_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LFG_PROPOSAL_RESULT_write(WowWorldWriter* writer, const wrath_CMSG_LFG_PROPOSAL_RESULT* object);

typedef struct {
    uint32_t rolecheck_state;
    uint8_t rolecheck_initializing;
    uint8_t amount_of_dungeon_entries;
    uint32_t* dungeon_entries;
    uint8_t amount_of_roles;
    /* azerothcore: Leader info MUST be sent first. */
    wrath_LfgRole* roles;

} wrath_SMSG_LFG_ROLE_CHECK_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LFG_ROLE_CHECK_UPDATE_free(wrath_SMSG_LFG_ROLE_CHECK_UPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_ROLE_CHECK_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_LFG_ROLE_CHECK_UPDATE* object);

typedef struct {
    uint32_t result;
    uint32_t state;
    uint32_t amount_of_players;
    wrath_LfgJoinPlayer* players;

} wrath_SMSG_LFG_JOIN_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LFG_JOIN_RESULT_free(wrath_SMSG_LFG_JOIN_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_JOIN_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_LFG_JOIN_RESULT* object);

typedef struct {
    uint32_t dungeon;
    int32_t average_wait_time;
    int32_t wait_time;
    int32_t wait_time_tank;
    int32_t wait_time_healer;
    int32_t wait_time_dps;
    uint8_t tanks_needed;
    uint8_t healers_needed;
    uint8_t dps_needed;
    uint32_t queue_time;

} wrath_SMSG_LFG_QUEUE_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_QUEUE_STATUS_write(WowWorldWriter* writer, const wrath_SMSG_LFG_QUEUE_STATUS* object);

typedef struct {
    char* comment;

} wrath_CMSG_SET_LFG_COMMENT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_SET_LFG_COMMENT_free(wrath_CMSG_SET_LFG_COMMENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_LFG_COMMENT_write(WowWorldWriter* writer, const wrath_CMSG_SET_LFG_COMMENT* object);

typedef struct {
    wrath_LfgUpdateType update_type;
    wrath_LfgJoinStatus join_status;
    uint8_t queued;
    uint8_t no_partial_clear;
    uint8_t achievements;
    uint8_t amount_of_dungeons;
    uint32_t* dungeons;
    char* comment;

} wrath_SMSG_LFG_UPDATE_PLAYER;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LFG_UPDATE_PLAYER_free(wrath_SMSG_LFG_UPDATE_PLAYER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_UPDATE_PLAYER_write(WowWorldWriter* writer, const wrath_SMSG_LFG_UPDATE_PLAYER* object);

typedef struct {
    wrath_LfgUpdateType update_type;
    wrath_LfgJoinStatus join_status;
    uint8_t joined;
    uint8_t queued;
    uint8_t no_partial_clear;
    uint8_t achievements;
    uint8_t amount_of_dungeons;
    uint32_t* dungeons;
    char* comment;

} wrath_SMSG_LFG_UPDATE_PARTY;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LFG_UPDATE_PARTY_free(wrath_SMSG_LFG_UPDATE_PARTY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_UPDATE_PARTY_write(WowWorldWriter* writer, const wrath_SMSG_LFG_UPDATE_PARTY* object);

typedef struct {
    bool in_lfg_queue;

} wrath_SMSG_LFG_UPDATE_SEARCH;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_UPDATE_SEARCH_write(WowWorldWriter* writer, const wrath_SMSG_LFG_UPDATE_SEARCH* object);

typedef struct {
    uint8_t roles;

} wrath_CMSG_LFG_SET_ROLES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LFG_SET_ROLES_write(WowWorldWriter* writer, const wrath_CMSG_LFG_SET_ROLES* object);

typedef struct {
    bool agree_to_kick_player;

} wrath_CMSG_LFG_SET_BOOT_VOTE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LFG_SET_BOOT_VOTE_write(WowWorldWriter* writer, const wrath_CMSG_LFG_SET_BOOT_VOTE* object);

typedef struct {
    bool vote_in_progress;
    bool did_vote;
    bool agreed_with_kick;
    uint64_t victim;
    uint32_t total_votes;
    uint32_t votes_agree;
    uint32_t time_left;
    uint32_t votes_needed;
    char* reason;

} wrath_SMSG_LFG_BOOT_PROPOSAL_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LFG_BOOT_PROPOSAL_UPDATE_free(wrath_SMSG_LFG_BOOT_PROPOSAL_UPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_BOOT_PROPOSAL_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_LFG_BOOT_PROPOSAL_UPDATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LFD_PLAYER_LOCK_INFO_REQUEST_write(WowWorldWriter* writer);

typedef struct {
    uint8_t amount_of_available_dungeons;
    wrath_LfgAvailableDungeon* available_dungeons;
    uint8_t amount_of_locked_dungeons;
    wrath_LfgJoinLockedDungeon* locked_dungeons;

} wrath_SMSG_LFG_PLAYER_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LFG_PLAYER_INFO_free(wrath_SMSG_LFG_PLAYER_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_PLAYER_INFO_write(WowWorldWriter* writer, const wrath_SMSG_LFG_PLAYER_INFO* object);

typedef struct {
    wrath_LfgTeleportLocation location;

} wrath_CMSG_LFG_TELEPORT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LFG_TELEPORT_write(WowWorldWriter* writer, const wrath_CMSG_LFG_TELEPORT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LFD_PARTY_LOCK_INFO_REQUEST_write(WowWorldWriter* writer);

typedef struct {
    uint8_t amount_of_infos;
    wrath_LfgPartyInfo* infos;

} wrath_SMSG_LFG_PARTY_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_LFG_PARTY_INFO_free(wrath_SMSG_LFG_PARTY_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_PARTY_INFO_write(WowWorldWriter* writer, const wrath_SMSG_LFG_PARTY_INFO* object);

typedef struct {
    uint32_t title;
    wrath_TitleEarnStatus status;

} wrath_SMSG_TITLE_EARNED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TITLE_EARNED_write(WowWorldWriter* writer, const wrath_SMSG_TITLE_EARNED* object);

typedef struct {
    uint32_t title;

} wrath_CMSG_SET_TITLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_TITLE_write(WowWorldWriter* writer, const wrath_CMSG_SET_TITLE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CANCEL_MOUNT_AURA_write(WowWorldWriter* writer);

typedef struct {
    uint32_t unknown;
    wrath_ArenaType arena_type;

} wrath_SMSG_ARENA_ERROR;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ARENA_ERROR_write(WowWorldWriter* writer, const wrath_SMSG_ARENA_ERROR* object);

typedef struct {
    uint64_t player;

} wrath_MSG_INSPECT_ARENA_TEAMS_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_INSPECT_ARENA_TEAMS_Client_write(WowWorldWriter* writer, const wrath_MSG_INSPECT_ARENA_TEAMS_Client* object);

typedef struct {
    uint64_t player;
    uint8_t slot;
    uint32_t arena_team;
    uint32_t rating;
    uint32_t games_played_this_season;
    uint32_t wins_this_season;
    uint32_t total_games_played;
    uint32_t personal_rating;

} wrath_MSG_INSPECT_ARENA_TEAMS_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_INSPECT_ARENA_TEAMS_Server_write(WowWorldWriter* writer, const wrath_MSG_INSPECT_ARENA_TEAMS_Server* object);

typedef struct {
    wrath_Map map;
    all_Vector3d position;

} wrath_SMSG_DEATH_RELEASE_LOC;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DEATH_RELEASE_LOC_write(WowWorldWriter* writer, const wrath_SMSG_DEATH_RELEASE_LOC* object);

typedef struct {
    uint32_t slot;

} wrath_CMSG_CANCEL_TEMP_ENCHANTMENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CANCEL_TEMP_ENCHANTMENT_write(WowWorldWriter* writer, const wrath_CMSG_CANCEL_TEMP_ENCHANTMENT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCED_DEATH_UPDATE_write(WowWorldWriter* writer);

typedef struct {
    uint64_t player;
    wrath_MovementInfo info;
    float new_speed;

} wrath_MSG_MOVE_SET_FLIGHT_SPEED_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_FLIGHT_SPEED_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_FLIGHT_SPEED_Server* object);

typedef struct {
    uint64_t player;
    wrath_MovementInfo info;
    float new_speed;

} wrath_MSG_MOVE_SET_FLIGHT_BACK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_FLIGHT_BACK_SPEED_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_FLIGHT_BACK_SPEED* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_FLIGHT_BACK_SPEED_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_FLIGHT_BACK_SPEED* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} wrath_SMSG_FORCE_FLIGHT_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_FLIGHT_SPEED_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_FLIGHT_SPEED_CHANGE* object);

typedef struct {
    uint64_t player;
    uint32_t counter;
    wrath_MovementInfo info;
    float new_speed;

} wrath_CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const wrath_CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} wrath_SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE* object);

typedef struct {
    uint64_t player;
    uint32_t counter;
    wrath_MovementInfo info;
    float new_speed;

} wrath_CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const wrath_CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    float speed;

} wrath_SMSG_SPLINE_SET_FLIGHT_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_SET_FLIGHT_SPEED_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_SET_FLIGHT_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} wrath_SMSG_SPLINE_SET_FLIGHT_BACK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_SET_FLIGHT_BACK_SPEED_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_SET_FLIGHT_BACK_SPEED* object);

typedef struct {
    float elapsed_value;
    uint64_t guid;

} wrath_SMSG_FLIGHT_SPLINE_SYNC;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FLIGHT_SPLINE_SYNC_write(WowWorldWriter* writer, const wrath_SMSG_FLIGHT_SPLINE_SYNC* object);

/* Sent when the client runs `/timetest 1`. */
typedef struct {
    uint8_t mode;

} wrath_CMSG_SET_TAXI_BENCHMARK_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_TAXI_BENCHMARK_MODE_write(WowWorldWriter* writer, const wrath_CMSG_SET_TAXI_BENCHMARK_MODE* object);

typedef struct {
    /* ArcEmu/TrinityCore/mangosthree send realm_id from [CMSG_REALM_SPLIT] back. */
    uint32_t realm_id;
    wrath_RealmSplitState state;
    /* Seems to be slash separated string, like '01/01/01'. */
    char* split_date;

} wrath_SMSG_REALM_SPLIT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_REALM_SPLIT_free(wrath_SMSG_REALM_SPLIT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_REALM_SPLIT_write(WowWorldWriter* writer, const wrath_SMSG_REALM_SPLIT* object);

typedef struct {
    /* Realm ID that was sent earlier by the Auth Server
ArcEmu/TriniyCore/mangosthree send back in [SMSG_REALM_SPLIT]. */
    uint32_t realm_id;

} wrath_CMSG_REALM_SPLIT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REALM_SPLIT_write(WowWorldWriter* writer, const wrath_CMSG_REALM_SPLIT* object);

typedef struct {
    wrath_MovementInfo info;

} wrath_CMSG_MOVE_CHNG_TRANSPORT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_CHNG_TRANSPORT_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_CHNG_TRANSPORT* object);

typedef struct {
    wrath_PartyRole role;
    bool apply;
    uint64_t player;

} wrath_MSG_PARTY_ASSIGNMENT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_PARTY_ASSIGNMENT_Client_write(WowWorldWriter* writer, const wrath_MSG_PARTY_ASSIGNMENT_Client* object);

typedef struct {
    uint32_t time_sync;

} wrath_SMSG_TIME_SYNC_REQ;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TIME_SYNC_REQ_write(WowWorldWriter* writer, const wrath_SMSG_TIME_SYNC_REQ* object);

typedef struct {
    /* Can be used to check if the client is still properly in sync
This should be the same as the counter sent in [SMSG_TIME_SYNC_REQ]. */
    uint32_t time_sync;
    /* You can check this against expected values to estimate client latency */
    uint32_t client_ticks;

} wrath_CMSG_TIME_SYNC_RESP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TIME_SYNC_RESP_write(WowWorldWriter* writer, const wrath_CMSG_TIME_SYNC_RESP* object);

typedef struct {
    wrath_Map map;

} wrath_SMSG_RESET_FAILED_NOTIFY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_RESET_FAILED_NOTIFY_write(WowWorldWriter* writer, const wrath_SMSG_RESET_FAILED_NOTIFY* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LFG_DISABLED_write(WowWorldWriter* writer);

typedef struct {
    uint64_t target;
    uint8_t combo_points;

} wrath_SMSG_UPDATE_COMBO_POINTS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_UPDATE_COMBO_POINTS_write(WowWorldWriter* writer, const wrath_SMSG_UPDATE_COMBO_POINTS* object);

typedef struct {
    uint64_t guid;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_START_DESCEND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_DESCEND_cmsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_DESCEND* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_START_DESCEND_smsg_write(WowWorldWriter* writer, const wrath_MSG_MOVE_START_DESCEND* object);

typedef struct {
    uint64_t player;

} wrath_SMSG_DISMOUNT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_DISMOUNT_write(WowWorldWriter* writer, const wrath_SMSG_DISMOUNT* object);

typedef struct {
    uint64_t player;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_UPDATE_CAN_FLY_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_UPDATE_CAN_FLY_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_UPDATE_CAN_FLY_Server* object);

typedef struct {
    uint8_t state;
} wrath_MSG_RAID_READY_CHECK_CONFIRM_Client_set;

typedef struct {

    wrath_MSG_RAID_READY_CHECK_CONFIRM_Client_set* set;
} wrath_MSG_RAID_READY_CHECK_CONFIRM_Client;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_MSG_RAID_READY_CHECK_CONFIRM_Client_free(wrath_MSG_RAID_READY_CHECK_CONFIRM_Client* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_RAID_READY_CHECK_CONFIRM_Client_write(WowWorldWriter* writer, const wrath_MSG_RAID_READY_CHECK_CONFIRM_Client* object);

typedef struct {
    uint64_t player;
    uint8_t state;

} wrath_MSG_RAID_READY_CHECK_CONFIRM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_RAID_READY_CHECK_CONFIRM_Server_write(WowWorldWriter* writer, const wrath_MSG_RAID_READY_CHECK_CONFIRM_Server* object);

typedef struct {
    bool voice_enabled;
    bool microphone_enabled;

} wrath_CMSG_VOICE_SESSION_ENABLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_VOICE_SESSION_ENABLE_write(WowWorldWriter* writer, const wrath_CMSG_VOICE_SESSION_ENABLE* object);

typedef struct {
    wrath_ChatType chat_type;
    wrath_Language language;
    uint64_t sender;
    /* azerothcore sets to 0. */
    uint32_t flags;
    char* sender1;
    NamedGuid target1;
    char* sender2;
    uint64_t target2;
    NamedGuid target3;
    uint64_t target4;
    char* channel_name;
    uint64_t target5;
    char* sender_name;
    uint64_t target6;
    char* message;
    wrath_PlayerChatTag chat_tag;
    uint32_t achievement_id;

} wrath_SMSG_GM_MESSAGECHAT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GM_MESSAGECHAT_free(wrath_SMSG_GM_MESSAGECHAT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GM_MESSAGECHAT_write(WowWorldWriter* writer, const wrath_SMSG_GM_MESSAGECHAT* object);

typedef struct {
    wrath_CommentatorEnableOption option;

} wrath_CMSG_COMMENTATOR_ENABLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_COMMENTATOR_ENABLE_write(WowWorldWriter* writer, const wrath_CMSG_COMMENTATOR_ENABLE* object);

typedef struct {
    uint64_t target;

} wrath_SMSG_CLEAR_TARGET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CLEAR_TARGET_write(WowWorldWriter* writer, const wrath_SMSG_CLEAR_TARGET* object);

typedef struct {
    uint64_t player;
    uint32_t state;
    uint32_t item;

} wrath_SMSG_CROSSED_INEBRIATION_THRESHOLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CROSSED_INEBRIATION_THRESHOLD_write(WowWorldWriter* writer, const wrath_SMSG_CROSSED_INEBRIATION_THRESHOLD* object);

/* All that exists of this is an implementation in cmangos-tbc. */
typedef struct {
    uint8_t reason;
    char* text;

} wrath_SMSG_KICK_REASON;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_KICK_REASON_free(wrath_SMSG_KICK_REASON* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_KICK_REASON_write(WowWorldWriter* writer, const wrath_SMSG_KICK_REASON* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_RAID_READY_CHECK_FINISHED_Client_write(WowWorldWriter* writer);

typedef struct {
    wrath_SpamType complaint_type;
    uint64_t offender;
    uint32_t unknown1;
    uint32_t mail_id;
    uint32_t unknown2;
    uint32_t language;
    uint32_t message_type;
    uint32_t channel_id;
    uint32_t time;
    char* description;

} wrath_CMSG_COMPLAIN;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_COMPLAIN_free(wrath_CMSG_COMPLAIN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_COMPLAIN_write(WowWorldWriter* writer, const wrath_CMSG_COMPLAIN* object);

typedef struct {
    /* All emulators set to 0. */
    uint8_t unknown;
    wrath_ComplainResultWindow window_result;

} wrath_SMSG_COMPLAIN_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_COMPLAIN_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_COMPLAIN_RESULT* object);

typedef struct {
    wrath_ComplaintStatus complaint_status;
    bool voice_chat_enabled;

} wrath_SMSG_FEATURE_SYSTEM_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FEATURE_SYSTEM_STATUS_write(WowWorldWriter* writer, const wrath_SMSG_FEATURE_SYSTEM_STATUS* object);

typedef struct {
    char* channel;

} wrath_CMSG_CHANNEL_DISPLAY_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHANNEL_DISPLAY_LIST_free(wrath_CMSG_CHANNEL_DISPLAY_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_DISPLAY_LIST_write(WowWorldWriter* writer, const wrath_CMSG_CHANNEL_DISPLAY_LIST* object);

typedef struct {
    uint32_t unknown1;
    char* unknown2;

} wrath_CMSG_SET_ACTIVE_VOICE_CHANNEL;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_SET_ACTIVE_VOICE_CHANNEL_free(wrath_CMSG_SET_ACTIVE_VOICE_CHANNEL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_ACTIVE_VOICE_CHANNEL_write(WowWorldWriter* writer, const wrath_CMSG_SET_ACTIVE_VOICE_CHANNEL* object);

typedef struct {
    char* channel;

} wrath_CMSG_GET_CHANNEL_MEMBER_COUNT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GET_CHANNEL_MEMBER_COUNT_free(wrath_CMSG_GET_CHANNEL_MEMBER_COUNT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GET_CHANNEL_MEMBER_COUNT_write(WowWorldWriter* writer, const wrath_CMSG_GET_CHANNEL_MEMBER_COUNT* object);

typedef struct {
    char* channel;
    uint8_t flags;
    uint32_t amount_of_members;

} wrath_SMSG_CHANNEL_MEMBER_COUNT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CHANNEL_MEMBER_COUNT_free(wrath_SMSG_CHANNEL_MEMBER_COUNT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHANNEL_MEMBER_COUNT_write(WowWorldWriter* writer, const wrath_SMSG_CHANNEL_MEMBER_COUNT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANNEL_VOICE_ON_write(WowWorldWriter* writer);

typedef struct {
    uint64_t player;

} wrath_CMSG_REPORT_PVP_AFK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REPORT_PVP_AFK_write(WowWorldWriter* writer, const wrath_CMSG_REPORT_PVP_AFK* object);

typedef struct {
    uint64_t bank;
    bool full_update;

} wrath_CMSG_GUILD_BANKER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_BANKER_ACTIVATE_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_BANKER_ACTIVATE* object);

typedef struct {
    uint64_t bank;
    uint8_t tab;
    bool full_update;

} wrath_CMSG_GUILD_BANK_QUERY_TAB;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_BANK_QUERY_TAB_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_BANK_QUERY_TAB* object);

typedef struct {
    uint64_t bank_balance;
    uint8_t tab_id;
    uint32_t amount_of_allowed_item_withdraws;
    wrath_GuildBankTabResult tab_result;
    uint8_t amount_of_bank_tabs;
    wrath_GuildBankTab* tabs;
    wrath_GuildBankContentResult content_result;
    uint8_t amount_of_slot_updates;
    wrath_GuildBankSlot* slot_updates;

} wrath_SMSG_GUILD_BANK_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GUILD_BANK_LIST_free(wrath_SMSG_GUILD_BANK_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GUILD_BANK_LIST_write(WowWorldWriter* writer, const wrath_SMSG_GUILD_BANK_LIST* object);

typedef struct {
    uint64_t bank;
    wrath_BankSwapSource source;
    uint8_t bank_destination_tab;
    uint8_t bank_destination_slot;
    uint32_t unknown1;
    uint8_t bank_source_tab;
    uint8_t bank_source_slot;
    uint32_t item1;
    uint8_t unknown2;
    uint32_t amount;
    uint8_t bank_tab;
    uint8_t bank_slot;
    uint32_t item2;
    wrath_BankSwapStoreMode mode;
    uint32_t auto_count;
    uint8_t unknown3;
    uint32_t unknown4;
    uint8_t player_bag;
    uint8_t player_bag_slot;
    bool bank_to_character_transfer;
    uint32_t split_amount;
    uint32_t amount_of_unknown5;
    /* cmangos-tbc/mangosone has extra */
    uint8_t* unknown5;

} wrath_CMSG_GUILD_BANK_SWAP_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_BANK_SWAP_ITEMS_free(wrath_CMSG_GUILD_BANK_SWAP_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_BANK_SWAP_ITEMS_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_BANK_SWAP_ITEMS* object);

typedef struct {
    uint64_t banker;
    uint8_t tab;

} wrath_CMSG_GUILD_BANK_BUY_TAB;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_BANK_BUY_TAB_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_BANK_BUY_TAB* object);

typedef struct {
    uint64_t bank;
    uint8_t tab;
    char* name;
    char* icon;

} wrath_CMSG_GUILD_BANK_UPDATE_TAB;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_GUILD_BANK_UPDATE_TAB_free(wrath_CMSG_GUILD_BANK_UPDATE_TAB* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_BANK_UPDATE_TAB_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_BANK_UPDATE_TAB* object);

typedef struct {
    uint64_t bank;
    uint32_t money;

} wrath_CMSG_GUILD_BANK_DEPOSIT_MONEY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_BANK_DEPOSIT_MONEY_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_BANK_DEPOSIT_MONEY* object);

typedef struct {
    uint64_t bank;
    uint32_t money;

} wrath_CMSG_GUILD_BANK_WITHDRAW_MONEY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GUILD_BANK_WITHDRAW_MONEY_write(WowWorldWriter* writer, const wrath_CMSG_GUILD_BANK_WITHDRAW_MONEY* object);

typedef struct {
    uint8_t slot;

} wrath_MSG_GUILD_BANK_LOG_QUERY_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_GUILD_BANK_LOG_QUERY_Client_write(WowWorldWriter* writer, const wrath_MSG_GUILD_BANK_LOG_QUERY_Client* object);

typedef struct {
    uint32_t unix_time;
    uint8_t slot;
    uint8_t amount_of_money_logs;
    wrath_MoneyLogItem* money_logs;

} wrath_MSG_GUILD_BANK_LOG_QUERY_Server;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_MSG_GUILD_BANK_LOG_QUERY_Server_free(wrath_MSG_GUILD_BANK_LOG_QUERY_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_GUILD_BANK_LOG_QUERY_Server_write(WowWorldWriter* writer, const wrath_MSG_GUILD_BANK_LOG_QUERY_Server* object);

typedef struct {
    char* channel;

} wrath_CMSG_SET_CHANNEL_WATCH;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_SET_CHANNEL_WATCH_free(wrath_CMSG_SET_CHANNEL_WATCH* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_CHANNEL_WATCH_write(WowWorldWriter* writer, const wrath_CMSG_SET_CHANNEL_WATCH* object);

typedef struct {
    uint64_t player;
    uint8_t player_flags;
    uint8_t flags;
    uint32_t amount_of_players;
    char* name;

} wrath_SMSG_USERLIST_ADD;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_USERLIST_ADD_free(wrath_SMSG_USERLIST_ADD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_USERLIST_ADD_write(WowWorldWriter* writer, const wrath_SMSG_USERLIST_ADD* object);

typedef struct {
    uint64_t player;
    uint8_t flags;
    uint32_t amount_of_players;
    char* name;

} wrath_SMSG_USERLIST_REMOVE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_USERLIST_REMOVE_free(wrath_SMSG_USERLIST_REMOVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_USERLIST_REMOVE_write(WowWorldWriter* writer, const wrath_SMSG_USERLIST_REMOVE* object);

typedef struct {
    uint64_t player;
    uint8_t player_flags;
    uint8_t flags;
    uint32_t amount_of_players;
    char* name;

} wrath_SMSG_USERLIST_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_USERLIST_UPDATE_free(wrath_SMSG_USERLIST_UPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_USERLIST_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_USERLIST_UPDATE* object);

typedef struct {
    char* channel;

} wrath_CMSG_CLEAR_CHANNEL_WATCH;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CLEAR_CHANNEL_WATCH_free(wrath_CMSG_CLEAR_CHANNEL_WATCH* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CLEAR_CHANNEL_WATCH_write(WowWorldWriter* writer, const wrath_CMSG_CLEAR_CHANNEL_WATCH* object);

typedef struct {
    uint64_t player;
    uint32_t unspent_talent_points;
    uint8_t amount_of_specs;
    uint8_t active_spec;
    wrath_InspectTalentSpec* specs;
    uint8_t amount_of_glyphs;
    uint16_t* glyphs;
    wrath_InspectTalentGearMask talent_gear_mask;

} wrath_SMSG_INSPECT_TALENT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_INSPECT_TALENT_free(wrath_SMSG_INSPECT_TALENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_INSPECT_TALENT_write(WowWorldWriter* writer, const wrath_SMSG_INSPECT_TALENT* object);

typedef struct {
    uint64_t target;

} wrath_CMSG_SPELLCLICK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SPELLCLICK_write(WowWorldWriter* writer, const wrath_CMSG_SPELLCLICK* object);

typedef struct {
    uint64_t creature;
    uint64_t master_looter;
    uint64_t group_looter;

} wrath_SMSG_LOOT_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_LOOT_LIST_write(WowWorldWriter* writer, const wrath_SMSG_LOOT_LIST* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_GUILD_PERMISSIONS_Client_write(WowWorldWriter* writer);

typedef struct {
    uint32_t id;
    uint32_t rights;
    uint32_t gold_limit_per_day;
    uint8_t purchased_bank_tabs;
    wrath_BankTab bank_tabs[6];

} wrath_MSG_GUILD_PERMISSIONS_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_GUILD_PERMISSIONS_Server_write(WowWorldWriter* writer, const wrath_MSG_GUILD_PERMISSIONS_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_GUILD_BANK_MONEY_WITHDRAWN_Client_write(WowWorldWriter* writer);

typedef struct {
    uint32_t remaining_withdraw_amount;

} wrath_MSG_GUILD_BANK_MONEY_WITHDRAWN_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_GUILD_BANK_MONEY_WITHDRAWN_Server_write(WowWorldWriter* writer, const wrath_MSG_GUILD_BANK_MONEY_WITHDRAWN_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_GUILD_EVENT_LOG_QUERY_Client_write(WowWorldWriter* writer);

typedef struct {
    uint8_t amount_of_events;
    wrath_GuildLogEvent* events;

} wrath_MSG_GUILD_EVENT_LOG_QUERY_Server;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_MSG_GUILD_EVENT_LOG_QUERY_Server_free(wrath_MSG_GUILD_EVENT_LOG_QUERY_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_GUILD_EVENT_LOG_QUERY_Server_write(WowWorldWriter* writer, const wrath_MSG_GUILD_EVENT_LOG_QUERY_Server* object);

typedef struct {
    uint64_t target;

} wrath_CMSG_GET_MIRRORIMAGE_DATA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GET_MIRRORIMAGE_DATA_write(WowWorldWriter* writer, const wrath_CMSG_GET_MIRRORIMAGE_DATA* object);

typedef struct {
    uint64_t guid;
    uint32_t display_id;
    wrath_Race race;
    wrath_Gender gender;
    wrath_Class class_type;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;
    uint32_t guild_id;
    /* This array contains the: HEAD, SHOULDERS, BODY, CHEST, WAIST, LEGS, FEET, WRISTS, HANDS, BACK, and TABARD. */
    uint32_t display_ids[11];

} wrath_SMSG_MIRRORIMAGE_DATA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MIRRORIMAGE_DATA_write(WowWorldWriter* writer, const wrath_SMSG_MIRRORIMAGE_DATA* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_KEEP_ALIVE_write(WowWorldWriter* writer);

typedef struct {
    bool pass_on_loot;

} wrath_CMSG_OPT_OUT_OF_LOOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_OPT_OUT_OF_LOOT_write(WowWorldWriter* writer, const wrath_CMSG_OPT_OUT_OF_LOOT* object);

typedef struct {
    uint8_t tab;

} wrath_MSG_QUERY_GUILD_BANK_TEXT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_QUERY_GUILD_BANK_TEXT_Client_write(WowWorldWriter* writer, const wrath_MSG_QUERY_GUILD_BANK_TEXT_Client* object);

typedef struct {
    uint8_t tab;
    char* text;

} wrath_MSG_QUERY_GUILD_BANK_TEXT_Server;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_MSG_QUERY_GUILD_BANK_TEXT_Server_free(wrath_MSG_QUERY_GUILD_BANK_TEXT_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_QUERY_GUILD_BANK_TEXT_Server_write(WowWorldWriter* writer, const wrath_MSG_QUERY_GUILD_BANK_TEXT_Server* object);

typedef struct {
    uint8_t tab;
    char* text;

} wrath_CMSG_SET_GUILD_BANK_TEXT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_SET_GUILD_BANK_TEXT_free(wrath_CMSG_SET_GUILD_BANK_TEXT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_GUILD_BANK_TEXT_write(WowWorldWriter* writer, const wrath_CMSG_SET_GUILD_BANK_TEXT* object);

typedef struct {
    uint64_t player;

} wrath_CMSG_GRANT_LEVEL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GRANT_LEVEL_write(WowWorldWriter* writer, const wrath_CMSG_GRANT_LEVEL* object);

typedef struct {
    uint32_t default_id;
    uint32_t id_override;
    uint32_t fade_in_time;

} wrath_SMSG_OVERRIDE_LIGHT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_OVERRIDE_LIGHT_write(WowWorldWriter* writer, const wrath_SMSG_OVERRIDE_LIGHT* object);

typedef struct {
    uint8_t slot;
    uint64_t totem;
    uint32_t duration;
    uint32_t spell;

} wrath_SMSG_TOTEM_CREATED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TOTEM_CREATED_write(WowWorldWriter* writer, const wrath_SMSG_TOTEM_CREATED* object);

typedef struct {
    uint8_t slot;

} wrath_CMSG_TOTEM_DESTROYED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_TOTEM_DESTROYED_write(WowWorldWriter* writer, const wrath_CMSG_TOTEM_DESTROYED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY_write(WowWorldWriter* writer);

typedef struct {
    uint32_t amount_of_statuses;
    wrath_QuestGiverStatusReport* statuses;

} wrath_SMSG_QUESTGIVER_STATUS_MULTIPLE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_QUESTGIVER_STATUS_MULTIPLE_free(wrath_SMSG_QUESTGIVER_STATUS_MULTIPLE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTGIVER_STATUS_MULTIPLE_write(WowWorldWriter* writer, const wrath_SMSG_QUESTGIVER_STATUS_MULTIPLE* object);

typedef struct {
    uint64_t player;
    char* name;
    char* declined_names[5];

} wrath_CMSG_SET_PLAYER_DECLINED_NAMES;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_SET_PLAYER_DECLINED_NAMES_free(wrath_CMSG_SET_PLAYER_DECLINED_NAMES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_SET_PLAYER_DECLINED_NAMES_write(WowWorldWriter* writer, const wrath_CMSG_SET_PLAYER_DECLINED_NAMES* object);

typedef struct {
    uint32_t result;
    uint64_t guid;

} wrath_SMSG_SET_PLAYER_DECLINED_NAMES_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SET_PLAYER_DECLINED_NAMES_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_SET_PLAYER_DECLINED_NAMES_RESULT* object);

typedef struct {
    uint32_t amount_of_spells;
    uint32_t* spells;

} wrath_SMSG_SEND_UNLEARN_SPELLS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SEND_UNLEARN_SPELLS_free(wrath_SMSG_SEND_UNLEARN_SPELLS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SEND_UNLEARN_SPELLS_write(WowWorldWriter* writer, const wrath_SMSG_SEND_UNLEARN_SPELLS* object);

typedef struct {
    uint64_t player;

} wrath_SMSG_PROPOSE_LEVEL_GRANT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PROPOSE_LEVEL_GRANT_write(WowWorldWriter* writer, const wrath_SMSG_PROPOSE_LEVEL_GRANT* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_ACCEPT_LEVEL_GRANT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ACCEPT_LEVEL_GRANT_write(WowWorldWriter* writer, const wrath_CMSG_ACCEPT_LEVEL_GRANT* object);

typedef struct {
    wrath_ReferAFriendError error;
    char* target_name;

} wrath_SMSG_REFER_A_FRIEND_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_REFER_A_FRIEND_FAILURE_free(wrath_SMSG_REFER_A_FRIEND_FAILURE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_REFER_A_FRIEND_FAILURE_write(WowWorldWriter* writer, const wrath_SMSG_REFER_A_FRIEND_FAILURE* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_SET_FLYING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_SET_FLYING_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_SET_FLYING* object);

typedef struct {
    uint64_t guid;

} wrath_SMSG_SPLINE_MOVE_UNSET_FLYING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_UNSET_FLYING_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_UNSET_FLYING* object);

typedef struct {
    uint32_t hair;
    uint32_t hair_color;
    uint32_t facial_hair;

} wrath_CMSG_ALTER_APPEARANCE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ALTER_APPEARANCE_write(WowWorldWriter* writer, const wrath_CMSG_ALTER_APPEARANCE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ENABLE_BARBER_SHOP_write(WowWorldWriter* writer);

typedef struct {
    wrath_BarberShopResult result;

} wrath_SMSG_BARBER_SHOP_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BARBER_SHOP_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_BARBER_SHOP_RESULT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_GET_CALENDAR_write(WowWorldWriter* writer);

typedef struct {
    uint64_t event;

} wrath_CMSG_CALENDAR_GET_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_GET_EVENT_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_GET_EVENT* object);

typedef struct {
    uint32_t minimum_level;
    uint32_t maximum_level;
    uint32_t minimum_rank;

} wrath_CMSG_CALENDAR_GUILD_FILTER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_GUILD_FILTER_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_GUILD_FILTER* object);

typedef struct {
    uint32_t arena_team;

} wrath_CMSG_CALENDAR_ARENA_TEAM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_ARENA_TEAM_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_ARENA_TEAM* object);

typedef struct {
    char* title;
    char* description;
    uint8_t event_type;
    bool repeatable;
    uint32_t maximum_invites;
    uint32_t dungeon_id;
    uint32_t event_time;
    uint32_t time_zone_time;
    uint32_t flags;
    uint32_t amount_of_invitees;
    wrath_CalendarInvitee* invitees;

} wrath_CMSG_CALENDAR_ADD_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CALENDAR_ADD_EVENT_free(wrath_CMSG_CALENDAR_ADD_EVENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_ADD_EVENT_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_ADD_EVENT* object);

typedef struct {
    uint64_t event;
    uint64_t invite_id;
    char* title;
    char* description;
    uint8_t event_type;
    bool repeatable;
    uint32_t maximum_invites;
    uint32_t dungeon_id;
    uint32_t event_time;
    uint32_t time_zone_time;
    uint32_t flags;

} wrath_CMSG_CALENDAR_UPDATE_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CALENDAR_UPDATE_EVENT_free(wrath_CMSG_CALENDAR_UPDATE_EVENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_UPDATE_EVENT_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_UPDATE_EVENT* object);

typedef struct {
    uint64_t event;
    uint64_t invite_id;
    uint32_t flags;

} wrath_CMSG_CALENDAR_REMOVE_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_REMOVE_EVENT_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_REMOVE_EVENT* object);

typedef struct {
    uint64_t event;
    uint64_t invite_id;
    uint32_t time;

} wrath_CMSG_CALENDAR_COPY_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_COPY_EVENT_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_COPY_EVENT* object);

typedef struct {
    uint64_t event;
    uint64_t invite_id;
    char* name;
    bool pre_event;
    bool guild_event;

} wrath_CMSG_CALENDAR_EVENT_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CALENDAR_EVENT_INVITE_free(wrath_CMSG_CALENDAR_EVENT_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_EVENT_INVITE_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_EVENT_INVITE* object);

typedef struct {
    uint64_t event;
    uint64_t invite_id;
    wrath_CalendarStatus status;

} wrath_CMSG_CALENDAR_EVENT_RSVP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_EVENT_RSVP_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_EVENT_RSVP* object);

typedef struct {
    uint64_t event;
    uint64_t sender_invite_id;
    uint64_t invite_id;

} wrath_CMSG_CALENDAR_EVENT_REMOVE_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_EVENT_REMOVE_INVITE_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_EVENT_REMOVE_INVITE* object);

typedef struct {
    uint64_t event;
    uint64_t invite_id;
    uint64_t sender_invite_id;
    wrath_CalendarStatus status;

} wrath_CMSG_CALENDAR_EVENT_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_EVENT_STATUS_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_EVENT_STATUS* object);

typedef struct {
    uint64_t event;
    uint64_t invite_id;
    uint64_t sender_invite_id;
    wrath_CalendarModeratorRank rank;

} wrath_CMSG_CALENDAR_EVENT_MODERATOR_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_EVENT_MODERATOR_STATUS_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_EVENT_MODERATOR_STATUS* object);

typedef struct {
    uint32_t amount_of_invites;
    wrath_SendCalendarInvite* invites;
    uint32_t amount_of_events;
    wrath_SendCalendarEvent* events;
    uint32_t current_time;
    uint32_t zone_time;
    uint32_t amount_of_instances;
    wrath_SendCalendarInstance* instances;
    uint32_t relative_time;
    uint32_t amount_of_reset_times;
    wrath_SendCalendarResetTime* reset_times;
    uint32_t amount_of_holidays;
    wrath_SendCalendarHoliday* holidays;

} wrath_SMSG_CALENDAR_SEND_CALENDAR;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CALENDAR_SEND_CALENDAR_free(wrath_SMSG_CALENDAR_SEND_CALENDAR* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_SEND_CALENDAR_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_SEND_CALENDAR* object);

typedef struct {
    uint8_t send_type;
    uint64_t creator;
    uint64_t event_id;
    char* title;
    char* description;
    uint8_t event_type;
    uint8_t repeatable;
    uint32_t max_invitees;
    uint32_t dungeon_id;
    uint32_t flags;
    uint32_t event_time;
    uint32_t time_zone_time;
    uint32_t guild_id;
    uint32_t amount_of_invitees;
    wrath_CalendarSendInvitee* invitees;

} wrath_SMSG_CALENDAR_SEND_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CALENDAR_SEND_EVENT_free(wrath_SMSG_CALENDAR_SEND_EVENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_SEND_EVENT_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_SEND_EVENT* object);

typedef struct {
    uint32_t amount_of_members;
    wrath_CalendarMember* members;

} wrath_SMSG_CALENDAR_FILTER_GUILD;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CALENDAR_FILTER_GUILD_free(wrath_SMSG_CALENDAR_FILTER_GUILD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_FILTER_GUILD_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_FILTER_GUILD* object);

typedef struct {
    uint32_t amount_of_members;
    wrath_CalendarMember* members;

} wrath_SMSG_CALENDAR_ARENA_TEAM;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CALENDAR_ARENA_TEAM_free(wrath_SMSG_CALENDAR_ARENA_TEAM* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_ARENA_TEAM_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_ARENA_TEAM* object);

typedef struct {
    uint64_t invitee;
    uint64_t event_id;
    uint64_t invite_id;
    uint8_t level;
    uint8_t invite_status;
    wrath_CalendarStatusTime time;
    uint32_t status_time;
    bool is_sign_up;

} wrath_SMSG_CALENDAR_EVENT_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_EVENT_INVITE_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_EVENT_INVITE* object);

typedef struct {
    uint64_t invitee;
    uint64_t event_id;
    uint32_t flags;
    bool show_alert;

} wrath_SMSG_CALENDAR_EVENT_INVITE_REMOVED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_EVENT_INVITE_REMOVED_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_EVENT_INVITE_REMOVED* object);

typedef struct {
    uint64_t invitee;
    uint64_t event_id;
    uint32_t event_time;
    uint32_t flags;
    uint8_t status;
    uint8_t rank;
    uint32_t status_time;

} wrath_SMSG_CALENDAR_EVENT_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_EVENT_STATUS_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_EVENT_STATUS* object);

typedef struct {
    /* All emus set to 0. */
    uint32_t unknown1;
    /* All emus set to 0. */
    uint8_t unknown2;
    char* name;
    uint32_t result;

} wrath_SMSG_CALENDAR_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CALENDAR_COMMAND_RESULT_free(wrath_SMSG_CALENDAR_COMMAND_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_COMMAND_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_COMMAND_RESULT* object);

typedef struct {
    uint32_t time;
    wrath_Map map;
    uint32_t difficulty;
    uint32_t remaining_time;
    uint64_t instance_id;

} wrath_SMSG_CALENDAR_RAID_LOCKOUT_ADDED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_RAID_LOCKOUT_ADDED_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_RAID_LOCKOUT_ADDED* object);

typedef struct {
    wrath_Map map;
    uint32_t difficulty;
    uint32_t remaining_time;
    uint64_t instance_id;

} wrath_SMSG_CALENDAR_RAID_LOCKOUT_REMOVED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_RAID_LOCKOUT_REMOVED_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_RAID_LOCKOUT_REMOVED* object);

typedef struct {
    uint64_t event_id;
    char* title;
    uint32_t event_time;
    uint32_t flags;
    uint32_t event_type;
    uint32_t dungeon_id;
    uint64_t invite_id;
    uint8_t status;
    uint8_t rank;
    uint64_t event_creator;
    uint64_t invite_sender;

} wrath_SMSG_CALENDAR_EVENT_INVITE_ALERT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CALENDAR_EVENT_INVITE_ALERT_free(wrath_SMSG_CALENDAR_EVENT_INVITE_ALERT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_EVENT_INVITE_ALERT_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_EVENT_INVITE_ALERT* object);

typedef struct {
    uint64_t event_id;
    uint32_t event_time;
    uint32_t flags;
    uint8_t status;

} wrath_SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT* object);

typedef struct {
    bool show_alert;
    uint64_t event_id;
    uint32_t event_time;

} wrath_SMSG_CALENDAR_EVENT_REMOVED_ALERT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_EVENT_REMOVED_ALERT_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_EVENT_REMOVED_ALERT* object);

typedef struct {
    bool show_alert;
    uint64_t event_id;
    uint32_t old_event_time;
    uint32_t flags;
    uint32_t new_event_time;
    uint8_t event_type;
    uint32_t dungeon_id;
    char* title;
    char* description;
    uint8_t repeatable;
    uint32_t max_invitees;
    uint32_t unknown_time;

} wrath_SMSG_CALENDAR_EVENT_UPDATED_ALERT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CALENDAR_EVENT_UPDATED_ALERT_free(wrath_SMSG_CALENDAR_EVENT_UPDATED_ALERT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_EVENT_UPDATED_ALERT_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_EVENT_UPDATED_ALERT* object);

typedef struct {
    uint64_t invitee;
    uint64_t event_id;
    uint8_t rank;
    bool show_alert;

} wrath_SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT* object);

typedef struct {
    uint64_t responsible_player;
    uint64_t event;
    uint64_t invite_id;

} wrath_CMSG_CALENDAR_COMPLAIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_COMPLAIN_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_COMPLAIN* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_GET_NUM_PENDING_cmsg_write(WowWorldWriter* writer);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_GET_NUM_PENDING_smsg_write(WowWorldWriter* writer);

/* Sent as response to [CMSG_CALENDAR_GET_NUM_PENDING] */
typedef struct {
    /* Number of calendar items that require attention, e.g. pending invites */
    uint32_t pending_events;

} wrath_SMSG_CALENDAR_SEND_NUM_PENDING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_SEND_NUM_PENDING_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_SEND_NUM_PENDING* object);

typedef struct {
    uint64_t player;
    wrath_MovementInfo info;
    float new_speed;

} wrath_MSG_MOVE_SET_PITCH_RATE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_SET_PITCH_RATE_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_SET_PITCH_RATE_Server* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} wrath_SMSG_FORCE_PITCH_RATE_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_FORCE_PITCH_RATE_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_FORCE_PITCH_RATE_CHANGE* object);

/* This message only exists as a coment in trinitycore. */
typedef struct {
    uint64_t invitee;
    uint64_t invite_id;
    char* text;
    bool unknown;

} wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES_free(wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES* object);

/* This message only exists as a comment in trinitycore. */
typedef struct {
    uint64_t invite_id;
    char* text;

} wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT_free(wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT* object);

typedef struct {
    uint64_t guid;
    uint32_t spell;
    float elevation;
    float speed;
    all_Vector3d position;
    all_Vector3d target;

} wrath_CMSG_UPDATE_MISSILE_TRAJECTORY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_UPDATE_MISSILE_TRAJECTORY_write(WowWorldWriter* writer, const wrath_CMSG_UPDATE_MISSILE_TRAJECTORY* object);

typedef struct {
    uint32_t data_type;
    /* mangostwo hardcodes this to 0 */
    uint32_t unknown1;

} wrath_SMSG_UPDATE_ACCOUNT_DATA_COMPLETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_UPDATE_ACCOUNT_DATA_COMPLETE_write(WowWorldWriter* writer, const wrath_SMSG_UPDATE_ACCOUNT_DATA_COMPLETE* object);

typedef struct {
    uint32_t movie_id;

} wrath_SMSG_TRIGGER_MOVIE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TRIGGER_MOVIE_write(WowWorldWriter* writer, const wrath_SMSG_TRIGGER_MOVIE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_COMPLETE_MOVIE_write(WowWorldWriter* writer);

typedef struct {
    uint64_t player;
    uint32_t achievement;
    uint32_t earn_time;
    /* All emus set to 0. */
    uint32_t unknown;

} wrath_SMSG_ACHIEVEMENT_EARNED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ACHIEVEMENT_EARNED_write(WowWorldWriter* writer, const wrath_SMSG_ACHIEVEMENT_EARNED* object);

typedef struct {
    uint32_t achievement;
    /* trinitycore/azerothcore: This is a u32 passed to the `appendPackGUID` function which promotes it to u64. */
    uint64_t progress_counter;
    uint64_t player;
    /* trinitycore: this are some flags, 1 is for keeping the counter at 0 in client */
    uint32_t flags;
    uint32_t time;
    uint32_t time_elapsed;
    uint32_t unknown;

} wrath_SMSG_CRITERIA_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CRITERIA_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_CRITERIA_UPDATE* object);

typedef struct {
    uint64_t player;

} wrath_CMSG_QUERY_INSPECT_ACHIEVEMENTS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUERY_INSPECT_ACHIEVEMENTS_write(WowWorldWriter* writer, const wrath_CMSG_QUERY_INSPECT_ACHIEVEMENTS* object);

typedef struct {
    uint64_t player;
    wrath_AchievementDoneArray done;
    wrath_AchievementInProgressArray in_progress;

} wrath_SMSG_RESPOND_INSPECT_ACHIEVEMENTS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_RESPOND_INSPECT_ACHIEVEMENTS_free(wrath_SMSG_RESPOND_INSPECT_ACHIEVEMENTS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_RESPOND_INSPECT_ACHIEVEMENTS_write(WowWorldWriter* writer, const wrath_SMSG_RESPOND_INSPECT_ACHIEVEMENTS* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_DISMISS_CONTROLLED_VEHICLE_write(WowWorldWriter* writer);

typedef struct {
    uint32_t quest_id;
    uint32_t count;
    uint32_t players_slain;

} wrath_SMSG_QUESTUPDATE_ADD_PVP_KILL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUESTUPDATE_ADD_PVP_KILL_write(WowWorldWriter* writer, const wrath_SMSG_QUESTUPDATE_ADD_PVP_KILL* object);

typedef struct {
    uint32_t current_time;
    wrath_Map map;
    uint32_t difficulty;
    uint32_t old_time_to_update;
    uint32_t new_time_to_update;

} wrath_SMSG_CALENDAR_RAID_LOCKOUT_UPDATED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_RAID_LOCKOUT_UPDATED_write(WowWorldWriter* writer, const wrath_SMSG_CALENDAR_RAID_LOCKOUT_UPDATED* object);

typedef struct {
    uint64_t player;
    char* new_name;
    wrath_Gender gender;
    uint8_t skin_color;
    uint8_t hair_color;
    uint8_t hair_style;
    uint8_t facial_hair;
    uint8_t face;

} wrath_CMSG_CHAR_CUSTOMIZE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHAR_CUSTOMIZE_free(wrath_CMSG_CHAR_CUSTOMIZE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHAR_CUSTOMIZE_write(WowWorldWriter* writer, const wrath_CMSG_CHAR_CUSTOMIZE* object);

typedef struct {
    wrath_WorldResult result;
    uint64_t guid;
    char* name;
    wrath_Gender gender;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;

} wrath_SMSG_CHAR_CUSTOMIZE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CHAR_CUSTOMIZE_free(wrath_SMSG_CHAR_CUSTOMIZE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHAR_CUSTOMIZE_write(WowWorldWriter* writer, const wrath_SMSG_CHAR_CUSTOMIZE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REQUEST_VEHICLE_EXIT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REQUEST_VEHICLE_PREV_SEAT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REQUEST_VEHICLE_NEXT_SEAT_write(WowWorldWriter* writer);

typedef struct {
    uint64_t vehicle;
    uint8_t seat;

} wrath_CMSG_REQUEST_VEHICLE_SWITCH_SEAT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REQUEST_VEHICLE_SWITCH_SEAT_write(WowWorldWriter* writer, const wrath_CMSG_REQUEST_VEHICLE_SWITCH_SEAT* object);

typedef struct {
    uint64_t pet;
    uint32_t talent;
    uint32_t rank;

} wrath_CMSG_PET_LEARN_TALENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PET_LEARN_TALENT_write(WowWorldWriter* writer, const wrath_CMSG_PET_LEARN_TALENT* object);

typedef struct {
    uint32_t new_phase;

} wrath_SMSG_SET_PHASE_SHIFT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SET_PHASE_SHIFT_write(WowWorldWriter* writer, const wrath_SMSG_SET_PHASE_SHIFT* object);

typedef struct {
    wrath_AchievementDoneArray done;
    wrath_AchievementInProgressArray in_progress;

} wrath_SMSG_ALL_ACHIEVEMENT_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_ALL_ACHIEVEMENT_DATA_free(wrath_SMSG_ALL_ACHIEVEMENT_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ALL_ACHIEVEMENT_DATA_write(WowWorldWriter* writer, const wrath_SMSG_ALL_ACHIEVEMENT_DATA* object);

typedef struct {
    uint64_t unit;
    wrath_Power power;
    uint32_t amount;

} wrath_SMSG_POWER_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_POWER_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_POWER_UPDATE* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_GAMEOBJ_REPORT_USE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GAMEOBJ_REPORT_USE_write(WowWorldWriter* writer, const wrath_CMSG_GAMEOBJ_REPORT_USE* object);

typedef struct {
    uint64_t unit;
    uint64_t new_victim;
    uint32_t amount_of_units;
    wrath_ThreatUpdateUnit* units;

} wrath_SMSG_HIGHEST_THREAT_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_HIGHEST_THREAT_UPDATE_free(wrath_SMSG_HIGHEST_THREAT_UPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_HIGHEST_THREAT_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_HIGHEST_THREAT_UPDATE* object);

typedef struct {
    uint64_t unit;
    uint32_t amount_of_units;
    wrath_ThreatUpdateUnit* units;

} wrath_SMSG_THREAT_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_THREAT_UPDATE_free(wrath_SMSG_THREAT_UPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_THREAT_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_THREAT_UPDATE* object);

typedef struct {
    uint64_t unit;
    uint64_t victim;

} wrath_SMSG_THREAT_REMOVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_THREAT_REMOVE_write(WowWorldWriter* writer, const wrath_SMSG_THREAT_REMOVE* object);

typedef struct {
    uint64_t unit;

} wrath_SMSG_THREAT_CLEAR;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_THREAT_CLEAR_write(WowWorldWriter* writer, const wrath_SMSG_THREAT_CLEAR* object);

typedef struct {
    uint8_t index;
    uint8_t new_type;

} wrath_SMSG_CONVERT_RUNE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CONVERT_RUNE_write(WowWorldWriter* writer, const wrath_SMSG_CONVERT_RUNE* object);

typedef struct {
    uint32_t amount_of_runes;
    wrath_ResyncRune* runes;

} wrath_SMSG_RESYNC_RUNES;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_RESYNC_RUNES_free(wrath_SMSG_RESYNC_RUNES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_RESYNC_RUNES_write(WowWorldWriter* writer, const wrath_SMSG_RESYNC_RUNES* object);

typedef struct {
    /* Emus bitshifts 1 by the rune index instead of directly sending the index.
mangostwo: mask (0x00-0x3F probably) */
    uint32_t rune;

} wrath_SMSG_ADD_RUNE_POWER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ADD_RUNE_POWER_write(WowWorldWriter* writer, const wrath_SMSG_ADD_RUNE_POWER* object);

typedef struct {
    uint32_t glyph;

} wrath_CMSG_REMOVE_GLYPH;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_REMOVE_GLYPH_write(WowWorldWriter* writer, const wrath_CMSG_REMOVE_GLYPH* object);

typedef struct {
    uint64_t critter;

} wrath_CMSG_DISMISS_CRITTER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_DISMISS_CRITTER_write(WowWorldWriter* writer, const wrath_CMSG_DISMISS_CRITTER* object);

typedef struct {
    uint64_t auctioneer;

} wrath_CMSG_AUCTION_LIST_PENDING_SALES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_AUCTION_LIST_PENDING_SALES_write(WowWorldWriter* writer, const wrath_CMSG_AUCTION_LIST_PENDING_SALES* object);

typedef struct {
    uint32_t amount_of_pending_sales;
    wrath_PendingAuctionSale* pending_sales;

} wrath_SMSG_AUCTION_LIST_PENDING_SALES;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_AUCTION_LIST_PENDING_SALES_free(wrath_SMSG_AUCTION_LIST_PENDING_SALES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AUCTION_LIST_PENDING_SALES_write(WowWorldWriter* writer, const wrath_SMSG_AUCTION_LIST_PENDING_SALES* object);

typedef struct {
    uint32_t spell;
    uint64_t player;
    uint32_t cooldown;

} wrath_SMSG_MODIFY_COOLDOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MODIFY_COOLDOWN_write(WowWorldWriter* writer, const wrath_SMSG_MODIFY_COOLDOWN* object);

typedef struct {
    uint64_t unit;
    uint64_t target;
    uint8_t combo_points;

} wrath_SMSG_PET_UPDATE_COMBO_POINTS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_UPDATE_COMBO_POINTS_write(WowWorldWriter* writer, const wrath_SMSG_PET_UPDATE_COMBO_POINTS* object);

typedef struct {
    uint64_t guid;

} wrath_CMSG_ENABLETAXI;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ENABLETAXI_write(WowWorldWriter* writer, const wrath_CMSG_ENABLETAXI* object);

typedef struct {
    uint64_t player;

} wrath_SMSG_PRE_RESURRECT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PRE_RESURRECT_write(WowWorldWriter* writer, const wrath_SMSG_PRE_RESURRECT* object);

typedef struct {
    uint64_t unit;
    uint32_t amount_of_aura_updates;
    wrath_AuraUpdate* aura_updates;

} wrath_SMSG_AURA_UPDATE_ALL;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_AURA_UPDATE_ALL_free(wrath_SMSG_AURA_UPDATE_ALL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AURA_UPDATE_ALL_write(WowWorldWriter* writer, const wrath_SMSG_AURA_UPDATE_ALL* object);

typedef struct {
    uint64_t unit;
    wrath_AuraUpdate aura_update;

} wrath_SMSG_AURA_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_AURA_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_AURA_UPDATE* object);

typedef struct {
    char* name;
    uint64_t player;
    uint32_t achievement;
    wrath_AchievementNameLinkType link_type;

} wrath_SMSG_SERVER_FIRST_ACHIEVEMENT;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_SERVER_FIRST_ACHIEVEMENT_free(wrath_SMSG_SERVER_FIRST_ACHIEVEMENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SERVER_FIRST_ACHIEVEMENT_write(WowWorldWriter* writer, const wrath_SMSG_SERVER_FIRST_ACHIEVEMENT* object);

typedef struct {
    uint32_t spell;

} wrath_SMSG_PET_LEARNED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_LEARNED_SPELL_write(WowWorldWriter* writer, const wrath_SMSG_PET_LEARNED_SPELL* object);

typedef struct {
    uint32_t spell;

} wrath_SMSG_PET_UNLEARNED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_UNLEARNED_SPELL_write(WowWorldWriter* writer, const wrath_SMSG_PET_UNLEARNED_SPELL* object);

typedef struct {
    uint64_t vehicle;
    wrath_MovementInfo info;
    uint64_t accessory;
    uint8_t seat;

} wrath_CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE_write(WowWorldWriter* writer, const wrath_CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_HEARTH_AND_RESURRECT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA_write(WowWorldWriter* writer);

typedef struct {
    uint32_t criteria_id;

} wrath_SMSG_CRITERIA_DELETED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CRITERIA_DELETED_write(WowWorldWriter* writer, const wrath_SMSG_CRITERIA_DELETED* object);

typedef struct {
    uint32_t achievement;

} wrath_SMSG_ACHIEVEMENT_DELETED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ACHIEVEMENT_DELETED_write(WowWorldWriter* writer, const wrath_SMSG_ACHIEVEMENT_DELETED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEGROUND_INFO_THROTTLED_write(WowWorldWriter* writer);

typedef struct {
    uint64_t target;
    uint32_t vehicle_id;

} wrath_SMSG_PLAYER_VEHICLE_DATA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PLAYER_VEHICLE_DATA_write(WowWorldWriter* writer, const wrath_SMSG_PLAYER_VEHICLE_DATA* object);

typedef struct {
    uint64_t vehicle;

} wrath_CMSG_PLAYER_VEHICLE_ENTER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_PLAYER_VEHICLE_ENTER_write(WowWorldWriter* writer, const wrath_CMSG_PLAYER_VEHICLE_ENTER* object);

typedef struct {
    uint64_t player;

} wrath_CMSG_CONTROLLER_EJECT_PASSENGER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CONTROLLER_EJECT_PASSENGER_write(WowWorldWriter* writer, const wrath_CMSG_CONTROLLER_EJECT_PASSENGER* object);

typedef struct {
    uint32_t amount_of_guids;
    uint64_t* guids;

} wrath_SMSG_PET_GUIDS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_PET_GUIDS_free(wrath_SMSG_PET_GUIDS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_PET_GUIDS_write(WowWorldWriter* writer, const wrath_SMSG_PET_GUIDS* object);

typedef struct {
    uint32_t version;

} wrath_SMSG_CLIENTCACHE_VERSION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CLIENTCACHE_VERSION_write(WowWorldWriter* writer, const wrath_SMSG_CLIENTCACHE_VERSION* object);

typedef struct {
    uint64_t item;
    uint32_t money_cost;
    uint32_t honor_point_cost;
    uint32_t arena_point_cost;
    wrath_ItemRefundExtra extra_items[5];
    /* Emus set to 0. */
    uint32_t unknown1;
    uint32_t time_since_loss;

} wrath_SMSG_ITEM_REFUND_INFO_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ITEM_REFUND_INFO_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_ITEM_REFUND_INFO_RESPONSE* object);

typedef struct {
    uint64_t item;

} wrath_CMSG_ITEM_REFUND_INFO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ITEM_REFUND_INFO_write(WowWorldWriter* writer, const wrath_CMSG_ITEM_REFUND_INFO* object);

typedef struct {
    uint64_t item;

} wrath_CMSG_ITEM_REFUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_ITEM_REFUND_write(WowWorldWriter* writer, const wrath_CMSG_ITEM_REFUND* object);

typedef struct {
    uint64_t item;
    wrath_ItemRefundResult result;
    uint32_t cost;
    uint32_t honor_point_cost;
    uint32_t arena_point_cost;
    wrath_ItemRefundExtra extra_items[5];

} wrath_SMSG_ITEM_REFUND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ITEM_REFUND_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_ITEM_REFUND_RESULT* object);

typedef struct {
    uint32_t unknown;

} wrath_CMSG_CORPSE_MAP_POSITION_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CORPSE_MAP_POSITION_QUERY_write(WowWorldWriter* writer, const wrath_CMSG_CORPSE_MAP_POSITION_QUERY* object);

/* Emus just set all values to 0. */
typedef struct {
    float unknown1;
    float unknown2;
    float unknown3;
    float unknown4;

} wrath_SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE* object);

typedef struct {
    uint64_t event_id;
    bool tentative;

} wrath_CMSG_CALENDAR_EVENT_SIGNUP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CALENDAR_EVENT_SIGNUP_write(WowWorldWriter* writer, const wrath_CMSG_CALENDAR_EVENT_SIGNUP* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CALENDAR_CLEAR_PENDING_ACTION_write(WowWorldWriter* writer);

typedef struct {
    uint32_t amount_of_equipment_sets;
    wrath_EquipmentSetListItem* equipment_sets;

} wrath_SMSG_EQUIPMENT_SET_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_EQUIPMENT_SET_LIST_free(wrath_SMSG_EQUIPMENT_SET_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_EQUIPMENT_SET_LIST_write(WowWorldWriter* writer, const wrath_SMSG_EQUIPMENT_SET_LIST* object);

typedef struct {
    uint64_t guid;
    uint32_t index;
    char* name;
    char* icon_name;
    uint64_t equipment[19];

} wrath_CMSG_EQUIPMENT_SET_SAVE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_EQUIPMENT_SET_SAVE_free(wrath_CMSG_EQUIPMENT_SET_SAVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_EQUIPMENT_SET_SAVE_write(WowWorldWriter* writer, const wrath_CMSG_EQUIPMENT_SET_SAVE* object);

typedef struct {
    uint64_t caster;
    uint32_t spell;
    uint8_t cast_count;
    all_Vector3d position;

} wrath_CMSG_UPDATE_PROJECTILE_POSITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_UPDATE_PROJECTILE_POSITION_write(WowWorldWriter* writer, const wrath_CMSG_UPDATE_PROJECTILE_POSITION* object);

typedef struct {
    uint64_t caster;
    uint8_t amount_of_casts;
    all_Vector3d position;

} wrath_SMSG_SET_PROJECTILE_POSITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SET_PROJECTILE_POSITION_write(WowWorldWriter* writer, const wrath_SMSG_SET_PROJECTILE_POSITION* object);

typedef struct {
    wrath_TalentInfoType talent_type;
    uint32_t points_left;
    uint8_t amount_of_talents;
    wrath_InspectTalent* talents;
    uint8_t amount_of_specs;
    uint8_t active_spec;
    wrath_TalentInfoSpec* specs;

} wrath_SMSG_TALENTS_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_TALENTS_INFO_free(wrath_SMSG_TALENTS_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TALENTS_INFO_write(WowWorldWriter* writer, const wrath_SMSG_TALENTS_INFO* object);

typedef struct {
    uint32_t amount_of_talents;
    wrath_PreviewTalent* talents;

} wrath_CMSG_LEARN_PREVIEW_TALENTS;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_LEARN_PREVIEW_TALENTS_free(wrath_CMSG_LEARN_PREVIEW_TALENTS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LEARN_PREVIEW_TALENTS_write(WowWorldWriter* writer, const wrath_CMSG_LEARN_PREVIEW_TALENTS* object);

typedef struct {
    uint64_t pet;
    uint32_t amount_of_talents;
    wrath_PreviewTalent* talents;

} wrath_CMSG_LEARN_PREVIEW_TALENTS_PET;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_LEARN_PREVIEW_TALENTS_PET_free(wrath_CMSG_LEARN_PREVIEW_TALENTS_PET* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_LEARN_PREVIEW_TALENTS_PET_write(WowWorldWriter* writer, const wrath_CMSG_LEARN_PREVIEW_TALENTS_PET* object);

typedef struct {
    uint64_t unit;

} wrath_SMSG_ARENA_UNIT_DESTROYED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ARENA_UNIT_DESTROYED_write(WowWorldWriter* writer, const wrath_SMSG_ARENA_UNIT_DESTROYED* object);

/* This message only exists as a comment in azerothcore/trinitycore. */
typedef struct {
    uint32_t unknown;

} wrath_SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED_write(WowWorldWriter* writer, const wrath_SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED* object);

typedef struct {
    uint64_t unit;
    uint32_t movement_counter;

} wrath_SMSG_MOVE_GRAVITY_DISABLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_GRAVITY_DISABLE_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_GRAVITY_DISABLE* object);

typedef struct {
    uint64_t guid;
    uint32_t unknown;
    wrath_MovementInfo info;

} wrath_CMSG_MOVE_GRAVITY_DISABLE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_GRAVITY_DISABLE_ACK_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_GRAVITY_DISABLE_ACK* object);

typedef struct {
    uint64_t unit;
    uint32_t movement_counter;

} wrath_SMSG_MOVE_GRAVITY_ENABLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_GRAVITY_ENABLE_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_GRAVITY_ENABLE* object);

typedef struct {
    uint64_t guid;
    uint32_t unknown;
    wrath_MovementInfo info;

} wrath_CMSG_MOVE_GRAVITY_ENABLE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_GRAVITY_ENABLE_ACK_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_GRAVITY_ENABLE_ACK* object);

typedef struct {
    uint64_t player;
    wrath_MovementInfo info;

} wrath_MSG_MOVE_GRAVITY_CHNG_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_MOVE_GRAVITY_CHNG_Server_write(WowWorldWriter* writer, const wrath_MSG_MOVE_GRAVITY_CHNG_Server* object);

typedef struct {
    uint64_t unit;

} wrath_SMSG_SPLINE_MOVE_GRAVITY_DISABLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_GRAVITY_DISABLE_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_GRAVITY_DISABLE* object);

typedef struct {
    uint64_t unit;

} wrath_SMSG_SPLINE_MOVE_GRAVITY_ENABLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SPLINE_MOVE_GRAVITY_ENABLE_write(WowWorldWriter* writer, const wrath_SMSG_SPLINE_MOVE_GRAVITY_ENABLE* object);

typedef struct {
    wrath_EquipmentSet sets[19];

} wrath_CMSG_EQUIPMENT_SET_USE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_EQUIPMENT_SET_USE_write(WowWorldWriter* writer, const wrath_CMSG_EQUIPMENT_SET_USE* object);

typedef struct {
    uint8_t result;

} wrath_SMSG_EQUIPMENT_SET_USE_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_EQUIPMENT_SET_USE_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_EQUIPMENT_SET_USE_RESULT* object);

typedef struct {
    uint64_t guid;
    char* name;
    wrath_Gender gender;
    uint8_t skin_color;
    uint8_t hair_color;
    uint8_t hair_style;
    uint8_t facial_hair;
    uint8_t face;
    wrath_Race race;

} wrath_CMSG_CHAR_FACTION_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHAR_FACTION_CHANGE_free(wrath_CMSG_CHAR_FACTION_CHANGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHAR_FACTION_CHANGE_write(WowWorldWriter* writer, const wrath_CMSG_CHAR_FACTION_CHANGE* object);

typedef struct {
    wrath_WorldResult result;
    uint64_t guid;
    char* name;
    wrath_Gender gender;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;
    wrath_Race race;

} wrath_SMSG_CHAR_FACTION_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_CHAR_FACTION_CHANGE_free(wrath_SMSG_CHAR_FACTION_CHANGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CHAR_FACTION_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_CHAR_FACTION_CHANGE* object);

typedef struct {
    uint32_t battle_id;
    wrath_Area area;
    uint32_t accept_time;

} wrath_SMSG_BATTLEFIELD_MGR_ENTRY_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEFIELD_MGR_ENTRY_INVITE_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEFIELD_MGR_ENTRY_INVITE* object);

typedef struct {
    uint32_t battle_id;
    bool accepted;

} wrath_CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE_write(WowWorldWriter* writer, const wrath_CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE* object);

typedef struct {
    uint32_t battle_id;
    uint8_t unknown1;
    uint8_t unknown2;
    bool clear_afk;

} wrath_SMSG_BATTLEFIELD_MGR_ENTERED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEFIELD_MGR_ENTERED_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEFIELD_MGR_ENTERED* object);

typedef struct {
    uint32_t battle_id;
    /* Possibly not used. */
    uint8_t warmup;

} wrath_SMSG_BATTLEFIELD_MGR_QUEUE_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEFIELD_MGR_QUEUE_INVITE_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEFIELD_MGR_QUEUE_INVITE* object);

typedef struct {
    uint32_t battle_id;
    bool accepted;

} wrath_CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE_write(WowWorldWriter* writer, const wrath_CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE* object);

typedef struct {
    uint32_t battle_id;
    wrath_Area area;
    bool queued;
    bool full;
    bool warmup;

} wrath_SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE* object);

/* Only exists as a comment in azerothcore/trinitycore. */
typedef struct {
    uint32_t unknown;

} wrath_SMSG_BATTLEFIELD_MGR_EJECT_PENDING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEFIELD_MGR_EJECT_PENDING_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEFIELD_MGR_EJECT_PENDING* object);

typedef struct {
    uint32_t battle_id;
    uint8_t reason;
    uint8_t battle_status;
    uint8_t relocated;

} wrath_SMSG_BATTLEFIELD_MGR_EJECTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEFIELD_MGR_EJECTED_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEFIELD_MGR_EJECTED* object);

typedef struct {
    uint32_t battle_id;

} wrath_CMSG_BATTLEFIELD_MGR_EXIT_REQUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_BATTLEFIELD_MGR_EXIT_REQUEST_write(WowWorldWriter* writer, const wrath_CMSG_BATTLEFIELD_MGR_EXIT_REQUEST* object);

/* Only exists as comment in azerothcore/trinitycore. */
typedef struct {
    uint32_t unknown1;
    uint32_t unknown2;

} wrath_SMSG_BATTLEFIELD_MGR_STATE_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_BATTLEFIELD_MGR_STATE_CHANGE_write(WowWorldWriter* writer, const wrath_SMSG_BATTLEFIELD_MGR_STATE_CHANGE* object);

typedef struct {
    wrath_RaidDifficulty difficulty;

} wrath_MSG_SET_RAID_DIFFICULTY_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_SET_RAID_DIFFICULTY_Client_write(WowWorldWriter* writer, const wrath_MSG_SET_RAID_DIFFICULTY_Client* object);

typedef struct {
    wrath_RaidDifficulty difficulty;
    /* Emus set to 1. */
    uint32_t unknown1;
    bool in_group;

} wrath_MSG_SET_RAID_DIFFICULTY_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_MSG_SET_RAID_DIFFICULTY_Server_write(WowWorldWriter* writer, const wrath_MSG_SET_RAID_DIFFICULTY_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TOGGLE_XP_GAIN_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GMRESPONSE_DB_ERROR_write(WowWorldWriter* writer);

typedef struct {
    uint32_t response_id;
    uint32_t ticket_id;
    char* message;
    char* response[4];

} wrath_SMSG_GMRESPONSE_RECEIVED;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_GMRESPONSE_RECEIVED_free(wrath_SMSG_GMRESPONSE_RECEIVED* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GMRESPONSE_RECEIVED_write(WowWorldWriter* writer, const wrath_SMSG_GMRESPONSE_RECEIVED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GMRESPONSE_RESOLVE_write(WowWorldWriter* writer);

typedef struct {
    bool show_survey;

} wrath_SMSG_GMRESPONSE_STATUS_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_GMRESPONSE_STATUS_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_GMRESPONSE_STATUS_UPDATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_WORLD_STATE_UI_TIMER_UPDATE_write(WowWorldWriter* writer);

typedef struct {
    /* Seconds since Unix Epoch */
    uint32_t time;

} wrath_SMSG_WORLD_STATE_UI_TIMER_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_WORLD_STATE_UI_TIMER_UPDATE_write(WowWorldWriter* writer, const wrath_SMSG_WORLD_STATE_UI_TIMER_UPDATE* object);

typedef struct {
    uint64_t player;
    char* name;
    wrath_Gender gender;
    uint8_t skin_color;
    uint8_t hair_color;
    uint8_t hair_style;
    uint8_t facial_hair;
    uint8_t face;
    wrath_Race race;

} wrath_CMSG_CHAR_RACE_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_CMSG_CHAR_RACE_CHANGE_free(wrath_CMSG_CHAR_RACE_CHANGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_CHAR_RACE_CHANGE_write(WowWorldWriter* writer, const wrath_CMSG_CHAR_RACE_CHANGE* object);

/* Only exists as comment in azerothcore/trinitycore. */
typedef struct {
    uint8_t unknown;

} wrath_SMSG_TALENTS_INVOLUNTARILY_RESET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_TALENTS_INVOLUNTARILY_RESET_write(WowWorldWriter* writer, const wrath_SMSG_TALENTS_INVOLUNTARILY_RESET* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_READY_FOR_ACCOUNT_DATA_TIMES_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_QUERY_QUESTS_COMPLETED_write(WowWorldWriter* writer);

typedef struct {
    uint32_t amount_of_reward_quests;
    uint32_t* reward_quests;

} wrath_SMSG_QUERY_QUESTS_COMPLETED_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_QUERY_QUESTS_COMPLETED_RESPONSE_free(wrath_SMSG_QUERY_QUESTS_COMPLETED_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_QUERY_QUESTS_COMPLETED_RESPONSE_write(WowWorldWriter* writer, const wrath_SMSG_QUERY_QUESTS_COMPLETED_RESPONSE* object);

typedef struct {
    uint32_t lag_type;
    wrath_Map map;
    all_Vector3d position;

} wrath_CMSG_GM_REPORT_LAG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_GM_REPORT_LAG_write(WowWorldWriter* writer, const wrath_CMSG_GM_REPORT_LAG* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CORPSE_NOT_IN_INSTANCE_write(WowWorldWriter* writer);

/* Only exists as a comment in trinitycore/azerothcore. */
typedef struct {
    /* SpellEffectCameraShakes.dbc */
    uint32_t camera_shake_id;
    uint32_t unknown;

} wrath_SMSG_CAMERA_SHAKE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_CAMERA_SHAKE_write(WowWorldWriter* writer, const wrath_SMSG_CAMERA_SHAKE* object);

typedef struct {
    uint64_t item;
    uint32_t sockets[3];

} wrath_SMSG_SOCKET_GEMS_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_SOCKET_GEMS_RESULT_write(WowWorldWriter* writer, const wrath_SMSG_SOCKET_GEMS_RESULT* object);

/* Only exists as a comment in azerothcore/trinitycore. */
typedef struct {
    uint32_t ip_address;
    uint16_t port;
    uint32_t unknown;
    /* azerothcore: ip + port, seed = sessionkey */
    uint8_t hash[20];

} wrath_SMSG_REDIRECT_CLIENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_REDIRECT_CLIENT_write(WowWorldWriter* writer, const wrath_SMSG_REDIRECT_CLIENT* object);

typedef struct {
    uint64_t unit;
    uint32_t packet_counter;
    float collision_height;

} wrath_SMSG_MOVE_SET_COLLISION_HGT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MOVE_SET_COLLISION_HGT_write(WowWorldWriter* writer, const wrath_SMSG_MOVE_SET_COLLISION_HGT* object);

typedef struct {
    uint64_t player;
    uint32_t movement_counter;
    wrath_MovementInfo info;
    float new_height;

} wrath_CMSG_MOVE_SET_COLLISION_HGT_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_CMSG_MOVE_SET_COLLISION_HGT_ACK_write(WowWorldWriter* writer, const wrath_CMSG_MOVE_SET_COLLISION_HGT_ACK* object);

typedef struct {
    uint32_t amount_of_moves;
    wrath_MiniMoveMessage* moves;

} wrath_SMSG_MULTIPLE_MOVES;
WOW_WORLD_MESSAGES_C_EXPORT void wrath_SMSG_MULTIPLE_MOVES_free(wrath_SMSG_MULTIPLE_MOVES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_SMSG_MULTIPLE_MOVES_write(WowWorldWriter* writer, const wrath_SMSG_MULTIPLE_MOVES* object);

typedef enum {
    W_CMSG_BOOTME = 1,
    W_CMSG_DBLOOKUP = 2,
    W_CMSG_WORLD_TELEPORT = 8,
    W_CMSG_TELEPORT_TO_UNIT = 9,
    W_CMSG_CHAR_CREATE = 54,
    W_CMSG_CHAR_ENUM = 55,
    W_CMSG_CHAR_DELETE = 56,
    W_SMSG_CHAR_CREATE = 58,
    W_SMSG_CHAR_ENUM = 59,
    W_SMSG_CHAR_DELETE = 60,
    W_CMSG_PLAYER_LOGIN = 61,
    W_SMSG_NEW_WORLD = 62,
    W_SMSG_TRANSFER_PENDING = 63,
    W_SMSG_TRANSFER_ABORTED = 64,
    W_SMSG_CHARACTER_LOGIN_FAILED = 65,
    W_SMSG_LOGIN_SETTIMESPEED = 66,
    W_CMSG_PLAYER_LOGOUT = 74,
    W_CMSG_LOGOUT_REQUEST = 75,
    W_SMSG_LOGOUT_RESPONSE = 76,
    W_SMSG_LOGOUT_COMPLETE = 77,
    W_CMSG_LOGOUT_CANCEL = 78,
    W_SMSG_LOGOUT_CANCEL_ACK = 79,
    W_CMSG_NAME_QUERY = 80,
    W_SMSG_NAME_QUERY_RESPONSE = 81,
    W_CMSG_PET_NAME_QUERY = 82,
    W_SMSG_PET_NAME_QUERY_RESPONSE = 83,
    W_CMSG_GUILD_QUERY = 84,
    W_SMSG_GUILD_QUERY_RESPONSE = 85,
    W_CMSG_ITEM_QUERY_SINGLE = 86,
    W_SMSG_ITEM_QUERY_SINGLE_RESPONSE = 88,
    W_CMSG_PAGE_TEXT_QUERY = 90,
    W_SMSG_PAGE_TEXT_QUERY_RESPONSE = 91,
    W_CMSG_QUEST_QUERY = 92,
    W_SMSG_QUEST_QUERY_RESPONSE = 93,
    W_CMSG_GAMEOBJECT_QUERY = 94,
    W_SMSG_GAMEOBJECT_QUERY_RESPONSE = 95,
    W_CMSG_CREATURE_QUERY = 96,
    W_SMSG_CREATURE_QUERY_RESPONSE = 97,
    W_CMSG_WHO = 98,
    W_SMSG_WHO = 99,
    W_CMSG_WHOIS = 100,
    W_SMSG_WHOIS = 101,
    W_CMSG_CONTACT_LIST = 102,
    W_SMSG_CONTACT_LIST = 103,
    W_SMSG_FRIEND_STATUS = 104,
    W_CMSG_ADD_FRIEND = 105,
    W_CMSG_DEL_FRIEND = 106,
    W_CMSG_SET_CONTACT_NOTES = 107,
    W_CMSG_ADD_IGNORE = 108,
    W_CMSG_DEL_IGNORE = 109,
    W_CMSG_GROUP_INVITE = 110,
    W_SMSG_GROUP_INVITE = 111,
    W_CMSG_GROUP_CANCEL = 112,
    W_CMSG_GROUP_ACCEPT = 114,
    W_CMSG_GROUP_DECLINE = 115,
    W_SMSG_GROUP_DECLINE = 116,
    W_CMSG_GROUP_UNINVITE = 117,
    W_CMSG_GROUP_UNINVITE_GUID = 118,
    W_SMSG_GROUP_UNINVITE = 119,
    W_CMSG_GROUP_SET_LEADER = 120,
    W_SMSG_GROUP_SET_LEADER = 121,
    W_CMSG_LOOT_METHOD = 122,
    W_CMSG_GROUP_DISBAND = 123,
    W_SMSG_GROUP_DESTROYED = 124,
    W_SMSG_GROUP_LIST = 125,
    W_SMSG_PARTY_MEMBER_STATS = 126,
    W_SMSG_PARTY_COMMAND_RESULT = 127,
    W_CMSG_GUILD_CREATE = 129,
    W_CMSG_GUILD_INVITE = 130,
    W_SMSG_GUILD_INVITE = 131,
    W_CMSG_GUILD_ACCEPT = 132,
    W_CMSG_GUILD_DECLINE = 133,
    W_SMSG_GUILD_DECLINE = 134,
    W_CMSG_GUILD_INFO = 135,
    W_SMSG_GUILD_INFO = 136,
    W_CMSG_GUILD_ROSTER = 137,
    W_SMSG_GUILD_ROSTER = 138,
    W_CMSG_GUILD_PROMOTE = 139,
    W_CMSG_GUILD_DEMOTE = 140,
    W_CMSG_GUILD_LEAVE = 141,
    W_CMSG_GUILD_REMOVE = 142,
    W_CMSG_GUILD_DISBAND = 143,
    W_CMSG_GUILD_LEADER = 144,
    W_CMSG_GUILD_MOTD = 145,
    W_SMSG_GUILD_EVENT = 146,
    W_SMSG_GUILD_COMMAND_RESULT = 147,
    W_CMSG_MESSAGECHAT = 149,
    W_SMSG_MESSAGECHAT = 150,
    W_CMSG_JOIN_CHANNEL = 151,
    W_CMSG_LEAVE_CHANNEL = 152,
    W_SMSG_CHANNEL_NOTIFY = 153,
    W_CMSG_CHANNEL_LIST = 154,
    W_SMSG_CHANNEL_LIST = 155,
    W_CMSG_CHANNEL_PASSWORD = 156,
    W_CMSG_CHANNEL_SET_OWNER = 157,
    W_CMSG_CHANNEL_OWNER = 158,
    W_CMSG_CHANNEL_MODERATOR = 159,
    W_CMSG_CHANNEL_UNMODERATOR = 160,
    W_CMSG_CHANNEL_MUTE = 161,
    W_CMSG_CHANNEL_UNMUTE = 162,
    W_CMSG_CHANNEL_INVITE = 163,
    W_CMSG_CHANNEL_KICK = 164,
    W_CMSG_CHANNEL_BAN = 165,
    W_CMSG_CHANNEL_UNBAN = 166,
    W_CMSG_CHANNEL_ANNOUNCEMENTS = 167,
    W_CMSG_CHANNEL_MODERATE = 168,
    W_SMSG_UPDATE_OBJECT = 169,
    W_SMSG_DESTROY_OBJECT = 170,
    W_CMSG_USE_ITEM = 171,
    W_CMSG_OPEN_ITEM = 172,
    W_CMSG_READ_ITEM = 173,
    W_SMSG_READ_ITEM_OK = 174,
    W_SMSG_READ_ITEM_FAILED = 175,
    W_SMSG_ITEM_COOLDOWN = 176,
    W_CMSG_GAMEOBJ_USE = 177,
    W_SMSG_GAMEOBJECT_CUSTOM_ANIM = 179,
    W_CMSG_AREATRIGGER = 180,
    W_MSG_MOVE_START_FORWARD = 181,
    W_MSG_MOVE_START_BACKWARD = 182,
    W_MSG_MOVE_STOP = 183,
    W_MSG_MOVE_START_STRAFE_LEFT = 184,
    W_MSG_MOVE_START_STRAFE_RIGHT = 185,
    W_MSG_MOVE_STOP_STRAFE = 186,
    W_MSG_MOVE_JUMP = 187,
    W_MSG_MOVE_START_TURN_LEFT = 188,
    W_MSG_MOVE_START_TURN_RIGHT = 189,
    W_MSG_MOVE_STOP_TURN = 190,
    W_MSG_MOVE_START_PITCH_UP = 191,
    W_MSG_MOVE_START_PITCH_DOWN = 192,
    W_MSG_MOVE_STOP_PITCH = 193,
    W_MSG_MOVE_SET_RUN_MODE = 194,
    W_MSG_MOVE_SET_WALK_MODE = 195,
    W_MSG_MOVE_TELEPORT = 197,
    W_MSG_MOVE_TELEPORT_CHEAT = 198,
    W_MSG_MOVE_TELEPORT_ACK = 199,
    W_MSG_MOVE_FALL_LAND = 201,
    W_MSG_MOVE_START_SWIM = 202,
    W_MSG_MOVE_STOP_SWIM = 203,
    W_MSG_MOVE_SET_FACING = 218,
    W_MSG_MOVE_SET_PITCH = 219,
    W_MSG_MOVE_WORLDPORT_ACK = 220,
    W_SMSG_MONSTER_MOVE = 221,
    W_SMSG_MOVE_WATER_WALK = 222,
    W_SMSG_MOVE_LAND_WALK = 223,
    W_CMSG_MOVE_SET_RAW_POSITION = 225,
    W_SMSG_FORCE_RUN_SPEED_CHANGE = 226,
    W_CMSG_FORCE_RUN_SPEED_CHANGE_ACK = 227,
    W_SMSG_FORCE_RUN_BACK_SPEED_CHANGE = 228,
    W_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK = 229,
    W_SMSG_FORCE_SWIM_SPEED_CHANGE = 230,
    W_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK = 231,
    W_SMSG_FORCE_MOVE_ROOT = 232,
    W_CMSG_FORCE_MOVE_ROOT_ACK = 233,
    W_SMSG_FORCE_MOVE_UNROOT = 234,
    W_CMSG_FORCE_MOVE_UNROOT_ACK = 235,
    W_MSG_MOVE_ROOT = 236,
    W_MSG_MOVE_UNROOT = 237,
    W_MSG_MOVE_HEARTBEAT = 238,
    W_SMSG_MOVE_KNOCK_BACK = 239,
    W_CMSG_MOVE_KNOCK_BACK_ACK = 240,
    W_MSG_MOVE_KNOCK_BACK = 241,
    W_SMSG_MOVE_FEATHER_FALL = 242,
    W_SMSG_MOVE_NORMAL_FALL = 243,
    W_SMSG_MOVE_SET_HOVER = 244,
    W_SMSG_MOVE_UNSET_HOVER = 245,
    W_CMSG_MOVE_HOVER_ACK = 246,
    W_MSG_MOVE_HOVER = 247,
    W_SMSG_TRIGGER_CINEMATIC = 250,
    W_CMSG_NEXT_CINEMATIC_CAMERA = 251,
    W_CMSG_COMPLETE_CINEMATIC = 252,
    W_SMSG_TUTORIAL_FLAGS = 253,
    W_CMSG_TUTORIAL_FLAG = 254,
    W_CMSG_TUTORIAL_CLEAR = 255,
    W_CMSG_TUTORIAL_RESET = 256,
    W_CMSG_STANDSTATECHANGE = 257,
    W_CMSG_EMOTE = 258,
    W_SMSG_EMOTE = 259,
    W_CMSG_TEXT_EMOTE = 260,
    W_SMSG_TEXT_EMOTE = 261,
    W_CMSG_AUTOSTORE_LOOT_ITEM = 264,
    W_CMSG_AUTOEQUIP_ITEM = 266,
    W_CMSG_AUTOSTORE_BAG_ITEM = 267,
    W_CMSG_SWAP_ITEM = 268,
    W_CMSG_SWAP_INV_ITEM = 269,
    W_CMSG_SPLIT_ITEM = 270,
    W_CMSG_AUTOEQUIP_ITEM_SLOT = 271,
    W_CMSG_DESTROYITEM = 273,
    W_SMSG_INVENTORY_CHANGE_FAILURE = 274,
    W_CMSG_INSPECT = 276,
    W_CMSG_INITIATE_TRADE = 278,
    W_CMSG_BEGIN_TRADE = 279,
    W_CMSG_BUSY_TRADE = 280,
    W_CMSG_IGNORE_TRADE = 281,
    W_CMSG_ACCEPT_TRADE = 282,
    W_CMSG_UNACCEPT_TRADE = 283,
    W_CMSG_CANCEL_TRADE = 284,
    W_CMSG_SET_TRADE_ITEM = 285,
    W_CMSG_CLEAR_TRADE_ITEM = 286,
    W_CMSG_SET_TRADE_GOLD = 287,
    W_SMSG_TRADE_STATUS = 288,
    W_SMSG_TRADE_STATUS_EXTENDED = 289,
    W_SMSG_INITIALIZE_FACTIONS = 290,
    W_SMSG_SET_FACTION_VISIBLE = 291,
    W_SMSG_SET_FACTION_STANDING = 292,
    W_CMSG_SET_FACTION_ATWAR = 293,
    W_SMSG_SET_PROFICIENCY = 295,
    W_CMSG_SET_ACTION_BUTTON = 296,
    W_SMSG_ACTION_BUTTONS = 297,
    W_SMSG_INITIAL_SPELLS = 298,
    W_SMSG_LEARNED_SPELL = 299,
    W_SMSG_SUPERCEDED_SPELL = 300,
    W_CMSG_CAST_SPELL = 302,
    W_CMSG_CANCEL_CAST = 303,
    W_SMSG_CAST_FAILED = 304,
    W_SMSG_SPELL_START = 305,
    W_SMSG_SPELL_GO = 306,
    W_SMSG_SPELL_FAILURE = 307,
    W_SMSG_SPELL_COOLDOWN = 308,
    W_SMSG_COOLDOWN_EVENT = 309,
    W_CMSG_CANCEL_AURA = 310,
    W_SMSG_PET_CAST_FAILED = 312,
    W_MSG_CHANNEL_START = 313,
    W_MSG_CHANNEL_UPDATE = 314,
    W_CMSG_CANCEL_CHANNELLING = 315,
    W_SMSG_AI_REACTION = 316,
    W_CMSG_SET_SELECTION = 317,
    W_CMSG_DELETEEQUIPMENT_SET = 318,
    W_CMSG_INSTANCE_LOCK_RESPONSE = 319,
    W_CMSG_ATTACKSWING = 321,
    W_CMSG_ATTACKSTOP = 322,
    W_SMSG_ATTACKSTART = 323,
    W_SMSG_ATTACKSTOP = 324,
    W_SMSG_ATTACKSWING_NOTINRANGE = 325,
    W_SMSG_ATTACKSWING_BADFACING = 326,
    W_SMSG_INSTANCE_LOCK_WARNING_QUERY = 327,
    W_SMSG_ATTACKSWING_DEADTARGET = 328,
    W_SMSG_ATTACKSWING_CANT_ATTACK = 329,
    W_SMSG_ATTACKERSTATEUPDATE = 330,
    W_SMSG_CANCEL_COMBAT = 334,
    W_SMSG_SPELLHEALLOG = 336,
    W_SMSG_SPELLENERGIZELOG = 337,
    W_SMSG_BREAK_TARGET = 338,
    W_SMSG_BINDPOINTUPDATE = 341,
    W_SMSG_PLAYERBOUND = 344,
    W_SMSG_CLIENT_CONTROL_UPDATE = 345,
    W_CMSG_REPOP_REQUEST = 346,
    W_SMSG_RESURRECT_REQUEST = 347,
    W_CMSG_RESURRECT_RESPONSE = 348,
    W_CMSG_LOOT = 349,
    W_CMSG_LOOT_MONEY = 350,
    W_CMSG_LOOT_RELEASE = 351,
    W_SMSG_LOOT_RESPONSE = 352,
    W_SMSG_LOOT_RELEASE_RESPONSE = 353,
    W_SMSG_LOOT_REMOVED = 354,
    W_SMSG_LOOT_MONEY_NOTIFY = 355,
    W_SMSG_LOOT_CLEAR_MONEY = 357,
    W_SMSG_ITEM_PUSH_RESULT = 358,
    W_SMSG_DUEL_REQUESTED = 359,
    W_SMSG_DUEL_OUTOFBOUNDS = 360,
    W_SMSG_DUEL_INBOUNDS = 361,
    W_SMSG_DUEL_COMPLETE = 362,
    W_SMSG_DUEL_WINNER = 363,
    W_CMSG_DUEL_ACCEPTED = 364,
    W_CMSG_DUEL_CANCELLED = 365,
    W_SMSG_MOUNTRESULT = 366,
    W_CMSG_MOUNTSPECIAL_ANIM = 369,
    W_SMSG_MOUNTSPECIAL_ANIM = 370,
    W_SMSG_PET_TAME_FAILURE = 371,
    W_CMSG_PET_SET_ACTION = 372,
    W_CMSG_PET_ACTION = 373,
    W_CMSG_PET_ABANDON = 374,
    W_CMSG_PET_RENAME = 375,
    W_SMSG_PET_NAME_INVALID = 376,
    W_SMSG_PET_SPELLS = 377,
    W_SMSG_PET_MODE = 378,
    W_CMSG_GOSSIP_HELLO = 379,
    W_CMSG_GOSSIP_SELECT_OPTION = 380,
    W_SMSG_GOSSIP_MESSAGE = 381,
    W_SMSG_GOSSIP_COMPLETE = 382,
    W_CMSG_NPC_TEXT_QUERY = 383,
    W_SMSG_NPC_TEXT_UPDATE = 384,
    W_CMSG_QUESTGIVER_STATUS_QUERY = 386,
    W_SMSG_QUESTGIVER_STATUS = 387,
    W_CMSG_QUESTGIVER_HELLO = 388,
    W_SMSG_QUESTGIVER_QUEST_LIST = 389,
    W_CMSG_QUESTGIVER_QUERY_QUEST = 390,
    W_CMSG_QUESTGIVER_QUEST_AUTOLAUNCH = 391,
    W_SMSG_QUESTGIVER_QUEST_DETAILS = 392,
    W_CMSG_QUESTGIVER_ACCEPT_QUEST = 393,
    W_CMSG_QUESTGIVER_COMPLETE_QUEST = 394,
    W_SMSG_QUESTGIVER_REQUEST_ITEMS = 395,
    W_CMSG_QUESTGIVER_REQUEST_REWARD = 396,
    W_SMSG_QUESTGIVER_OFFER_REWARD = 397,
    W_CMSG_QUESTGIVER_CHOOSE_REWARD = 398,
    W_SMSG_QUESTGIVER_QUEST_INVALID = 399,
    W_CMSG_QUESTGIVER_CANCEL = 400,
    W_SMSG_QUESTGIVER_QUEST_COMPLETE = 401,
    W_SMSG_QUESTGIVER_QUEST_FAILED = 402,
    W_CMSG_QUESTLOG_SWAP_QUEST = 403,
    W_CMSG_QUESTLOG_REMOVE_QUEST = 404,
    W_SMSG_QUESTLOG_FULL = 405,
    W_SMSG_QUESTUPDATE_FAILED = 406,
    W_SMSG_QUESTUPDATE_FAILEDTIMER = 407,
    W_SMSG_QUESTUPDATE_COMPLETE = 408,
    W_SMSG_QUESTUPDATE_ADD_KILL = 409,
    W_SMSG_QUESTUPDATE_ADD_ITEM = 410,
    W_CMSG_QUEST_CONFIRM_ACCEPT = 411,
    W_SMSG_QUEST_CONFIRM_ACCEPT = 412,
    W_CMSG_PUSHQUESTTOPARTY = 413,
    W_CMSG_LIST_INVENTORY = 414,
    W_SMSG_LIST_INVENTORY = 415,
    W_CMSG_SELL_ITEM = 416,
    W_SMSG_SELL_ITEM = 417,
    W_CMSG_BUY_ITEM = 418,
    W_CMSG_BUY_ITEM_IN_SLOT = 419,
    W_SMSG_BUY_ITEM = 420,
    W_SMSG_BUY_FAILED = 421,
    W_SMSG_SHOWTAXINODES = 425,
    W_CMSG_TAXINODE_STATUS_QUERY = 426,
    W_SMSG_TAXINODE_STATUS = 427,
    W_CMSG_TAXIQUERYAVAILABLENODES = 428,
    W_CMSG_ACTIVATETAXI = 429,
    W_SMSG_ACTIVATETAXIREPLY = 430,
    W_SMSG_NEW_TAXI_PATH = 431,
    W_CMSG_TRAINER_LIST = 432,
    W_SMSG_TRAINER_LIST = 433,
    W_CMSG_TRAINER_BUY_SPELL = 434,
    W_SMSG_TRAINER_BUY_SUCCEEDED = 435,
    W_SMSG_TRAINER_BUY_FAILED = 436,
    W_CMSG_BINDER_ACTIVATE = 437,
    W_CMSG_BANKER_ACTIVATE = 439,
    W_SMSG_SHOW_BANK = 440,
    W_CMSG_BUY_BANK_SLOT = 441,
    W_SMSG_BUY_BANK_SLOT_RESULT = 442,
    W_CMSG_PETITION_SHOWLIST = 443,
    W_SMSG_PETITION_SHOWLIST = 444,
    W_CMSG_PETITION_BUY = 445,
    W_CMSG_PETITION_SHOW_SIGNATURES = 446,
    W_SMSG_PETITION_SHOW_SIGNATURES = 447,
    W_CMSG_PETITION_SIGN = 448,
    W_SMSG_PETITION_SIGN_RESULTS = 449,
    W_MSG_PETITION_DECLINE = 450,
    W_CMSG_OFFER_PETITION = 451,
    W_CMSG_TURN_IN_PETITION = 452,
    W_SMSG_TURN_IN_PETITION_RESULTS = 453,
    W_CMSG_PETITION_QUERY = 454,
    W_SMSG_PETITION_QUERY_RESPONSE = 455,
    W_SMSG_FISH_NOT_HOOKED = 456,
    W_SMSG_FISH_ESCAPED = 457,
    W_CMSG_BUG = 458,
    W_SMSG_NOTIFICATION = 459,
    W_CMSG_PLAYED_TIME = 460,
    W_SMSG_PLAYED_TIME = 461,
    W_CMSG_QUERY_TIME = 462,
    W_SMSG_QUERY_TIME_RESPONSE = 463,
    W_SMSG_LOG_XPGAIN = 464,
    W_CMSG_RECLAIM_CORPSE = 466,
    W_CMSG_WRAP_ITEM = 467,
    W_SMSG_LEVELUP_INFO = 468,
    W_MSG_MINIMAP_PING = 469,
    W_SMSG_ENCHANTMENTLOG = 471,
    W_SMSG_START_MIRROR_TIMER = 473,
    W_SMSG_PAUSE_MIRROR_TIMER = 474,
    W_SMSG_STOP_MIRROR_TIMER = 475,
    W_CMSG_PING = 476,
    W_SMSG_PONG = 477,
    W_SMSG_CLEAR_COOLDOWN = 478,
    W_SMSG_GAMEOBJECT_PAGETEXT = 479,
    W_CMSG_SETSHEATHED = 480,
    W_SMSG_SPELL_DELAYED = 482,
    W_CMSG_QUEST_POI_QUERY = 483,
    W_SMSG_QUEST_POI_QUERY_RESPONSE = 484,
    W_SMSG_ITEM_TIME_UPDATE = 490,
    W_SMSG_ITEM_ENCHANT_TIME_UPDATE = 491,
    W_SMSG_AUTH_CHALLENGE = 492,
    W_CMSG_AUTH_SESSION = 493,
    W_SMSG_AUTH_RESPONSE = 494,
    W_CMSG_PET_CAST_SPELL = 496,
    W_MSG_SAVE_GUILD_EMBLEM = 497,
    W_MSG_TABARDVENDOR_ACTIVATE = 498,
    W_SMSG_PLAY_SPELL_VISUAL = 499,
    W_CMSG_ZONEUPDATE = 500,
    W_SMSG_PARTYKILLLOG = 501,
    W_SMSG_COMPRESSED_UPDATE_OBJECT = 502,
    W_SMSG_PLAY_SPELL_IMPACT = 503,
    W_SMSG_EXPLORATION_EXPERIENCE = 504,
    W_MSG_RANDOM_ROLL = 507,
    W_SMSG_ENVIRONMENTAL_DAMAGE_LOG = 508,
    W_SMSG_LFG_PLAYER_REWARD = 511,
    W_SMSG_LFG_TELEPORT_DENIED = 512,
    W_CMSG_UNLEARN_SKILL = 514,
    W_SMSG_REMOVED_SPELL = 515,
    W_CMSG_GMTICKET_CREATE = 517,
    W_SMSG_GMTICKET_CREATE = 518,
    W_CMSG_GMTICKET_UPDATETEXT = 519,
    W_SMSG_GMTICKET_UPDATETEXT = 520,
    W_SMSG_ACCOUNT_DATA_TIMES = 521,
    W_CMSG_REQUEST_ACCOUNT_DATA = 522,
    W_CMSG_UPDATE_ACCOUNT_DATA = 523,
    W_SMSG_UPDATE_ACCOUNT_DATA = 524,
    W_CMSG_GMTICKET_GETTICKET = 529,
    W_SMSG_GMTICKET_GETTICKET = 530,
    W_CMSG_UNLEARN_TALENTS = 531,
    W_SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT = 532,
    W_SMSG_GAMEOBJECT_DESPAWN_ANIM = 533,
    W_MSG_CORPSE_QUERY = 534,
    W_CMSG_GMTICKET_DELETETICKET = 535,
    W_SMSG_GMTICKET_DELETETICKET = 536,
    W_SMSG_CHAT_WRONG_FACTION = 537,
    W_CMSG_GMTICKET_SYSTEMSTATUS = 538,
    W_SMSG_GMTICKET_SYSTEMSTATUS = 539,
    W_CMSG_SPIRIT_HEALER_ACTIVATE = 540,
    W_SMSG_QUEST_FORCE_REMOVE = 542,
    W_SMSG_SPIRIT_HEALER_CONFIRM = 546,
    W_SMSG_GOSSIP_POI = 548,
    W_CMSG_CHAT_IGNORED = 549,
    W_CMSG_GUILD_RANK = 561,
    W_CMSG_GUILD_ADD_RANK = 562,
    W_CMSG_GUILD_DEL_RANK = 563,
    W_CMSG_GUILD_SET_PUBLIC_NOTE = 564,
    W_CMSG_GUILD_SET_OFFICER_NOTE = 565,
    W_SMSG_LOGIN_VERIFY_WORLD = 566,
    W_CMSG_SEND_MAIL = 568,
    W_SMSG_SEND_MAIL_RESULT = 569,
    W_CMSG_GET_MAIL_LIST = 570,
    W_SMSG_MAIL_LIST_RESULT = 571,
    W_CMSG_BATTLEFIELD_LIST = 572,
    W_SMSG_BATTLEFIELD_LIST = 573,
    W_CMSG_ITEM_TEXT_QUERY = 579,
    W_SMSG_ITEM_TEXT_QUERY_RESPONSE = 580,
    W_CMSG_MAIL_TAKE_MONEY = 581,
    W_CMSG_MAIL_TAKE_ITEM = 582,
    W_CMSG_MAIL_MARK_AS_READ = 583,
    W_CMSG_MAIL_RETURN_TO_SENDER = 584,
    W_CMSG_MAIL_DELETE = 585,
    W_CMSG_MAIL_CREATE_TEXT_ITEM = 586,
    W_SMSG_SPELLLOGMISS = 587,
    W_SMSG_SPELLLOGEXECUTE = 588,
    W_SMSG_PERIODICAURALOG = 590,
    W_SMSG_SPELLDAMAGESHIELD = 591,
    W_SMSG_SPELLNONMELEEDAMAGELOG = 592,
    W_CMSG_LEARN_TALENT = 593,
    W_SMSG_RESURRECT_FAILED = 594,
    W_CMSG_TOGGLE_PVP = 595,
    W_SMSG_ZONE_UNDER_ATTACK = 596,
    W_MSG_AUCTION_HELLO = 597,
    W_CMSG_AUCTION_SELL_ITEM = 598,
    W_CMSG_AUCTION_REMOVE_ITEM = 599,
    W_CMSG_AUCTION_LIST_ITEMS = 600,
    W_CMSG_AUCTION_LIST_OWNER_ITEMS = 601,
    W_CMSG_AUCTION_PLACE_BID = 602,
    W_SMSG_AUCTION_COMMAND_RESULT = 603,
    W_SMSG_AUCTION_LIST_RESULT = 604,
    W_SMSG_AUCTION_OWNER_LIST_RESULT = 605,
    W_SMSG_AUCTION_BIDDER_NOTIFICATION = 606,
    W_SMSG_AUCTION_OWNER_NOTIFICATION = 607,
    W_SMSG_PROCRESIST = 608,
    W_SMSG_DISPEL_FAILED = 610,
    W_SMSG_SPELLORDAMAGE_IMMUNE = 611,
    W_CMSG_AUCTION_LIST_BIDDER_ITEMS = 612,
    W_SMSG_AUCTION_BIDDER_LIST_RESULT = 613,
    W_SMSG_SET_FLAT_SPELL_MODIFIER = 614,
    W_SMSG_SET_PCT_SPELL_MODIFIER = 615,
    W_CMSG_SET_AMMO = 616,
    W_SMSG_CORPSE_RECLAIM_DELAY = 617,
    W_CMSG_SET_ACTIVE_MOVER = 618,
    W_CMSG_PET_CANCEL_AURA = 619,
    W_CMSG_CANCEL_AUTO_REPEAT_SPELL = 621,
    W_MSG_LIST_STABLED_PETS = 623,
    W_CMSG_STABLE_PET = 624,
    W_CMSG_UNSTABLE_PET = 625,
    W_CMSG_BUY_STABLE_SLOT = 626,
    W_SMSG_STABLE_RESULT = 627,
    W_CMSG_STABLE_SWAP_PET = 629,
    W_MSG_QUEST_PUSH_RESULT = 630,
    W_SMSG_PLAY_MUSIC = 631,
    W_SMSG_PLAY_OBJECT_SOUND = 632,
    W_CMSG_REQUEST_PET_INFO = 633,
    W_CMSG_FAR_SIGHT = 634,
    W_SMSG_SPELLDISPELLOG = 635,
    W_CMSG_GROUP_CHANGE_SUB_GROUP = 638,
    W_CMSG_REQUEST_PARTY_MEMBER_STATS = 639,
    W_CMSG_GROUP_SWAP_SUB_GROUP = 640,
    W_CMSG_AUTOSTORE_BANK_ITEM = 642,
    W_CMSG_AUTOBANK_ITEM = 643,
    W_MSG_QUERY_NEXT_MAIL_TIME = 644,
    W_SMSG_RECEIVED_MAIL = 645,
    W_SMSG_RAID_GROUP_ONLY = 646,
    W_SMSG_PVP_CREDIT = 652,
    W_SMSG_AUCTION_REMOVED_NOTIFICATION = 653,
    W_CMSG_GROUP_RAID_CONVERT = 654,
    W_CMSG_GROUP_ASSISTANT_LEADER = 655,
    W_CMSG_BUYBACK_ITEM = 656,
    W_SMSG_SERVER_MESSAGE = 657,
    W_CMSG_SET_SAVED_INSTANCE_EXTEND = 658,
    W_SMSG_LFG_OFFER_CONTINUE = 659,
    W_CMSG_LFG_GET_STATUS = 662,
    W_SMSG_SHOW_MAILBOX = 663,
    W_CMSG_GMTICKETSYSTEM_TOGGLE = 666,
    W_CMSG_CANCEL_GROWTH_AURA = 667,
    W_SMSG_CANCEL_AUTO_REPEAT = 668,
    W_SMSG_STANDSTATE_UPDATE = 669,
    W_SMSG_LOOT_ALL_PASSED = 670,
    W_SMSG_LOOT_ROLL_WON = 671,
    W_CMSG_LOOT_ROLL = 672,
    W_SMSG_LOOT_START_ROLL = 673,
    W_SMSG_LOOT_ROLL = 674,
    W_CMSG_LOOT_MASTER_GIVE = 675,
    W_SMSG_LOOT_MASTER_LIST = 676,
    W_SMSG_SET_FORCED_REACTIONS = 677,
    W_SMSG_SPELL_FAILED_OTHER = 678,
    W_CMSG_REPAIR_ITEM = 680,
    W_SMSG_CHAT_PLAYER_NOT_FOUND = 681,
    W_MSG_TALENT_WIPE_CONFIRM = 682,
    W_SMSG_SUMMON_REQUEST = 683,
    W_CMSG_SUMMON_RESPONSE = 684,
    W_SMSG_MONSTER_MOVE_TRANSPORT = 686,
    W_SMSG_PET_BROKEN = 687,
    W_MSG_MOVE_FEATHER_FALL = 688,
    W_MSG_MOVE_WATER_WALK = 689,
    W_CMSG_SELF_RES = 691,
    W_SMSG_FEIGN_DEATH_RESISTED = 692,
    W_SMSG_DUEL_COUNTDOWN = 695,
    W_SMSG_AREA_TRIGGER_MESSAGE = 696,
    W_CMSG_TOGGLE_HELM = 697,
    W_CMSG_TOGGLE_CLOAK = 698,
    W_SMSG_LFG_ROLE_CHOSEN = 699,
    W_SMSG_PLAYER_SKINNED = 700,
    W_SMSG_DURABILITY_DAMAGE_DEATH = 701,
    W_CMSG_SET_ACTIONBAR_TOGGLES = 703,
    W_MSG_PETITION_RENAME = 705,
    W_SMSG_INIT_WORLD_STATES = 706,
    W_SMSG_UPDATE_WORLD_STATE = 707,
    W_CMSG_ITEM_NAME_QUERY = 708,
    W_SMSG_ITEM_NAME_QUERY_RESPONSE = 709,
    W_SMSG_PET_ACTION_FEEDBACK = 710,
    W_CMSG_CHAR_RENAME = 711,
    W_SMSG_CHAR_RENAME = 712,
    W_CMSG_MOVE_SPLINE_DONE = 713,
    W_CMSG_MOVE_FALL_RESET = 714,
    W_SMSG_INSTANCE_SAVE_CREATED = 715,
    W_SMSG_RAID_INSTANCE_INFO = 716,
    W_CMSG_REQUEST_RAID_INFO = 717,
    W_CMSG_MOVE_TIME_SKIPPED = 718,
    W_CMSG_MOVE_FEATHER_FALL_ACK = 719,
    W_CMSG_MOVE_WATER_WALK_ACK = 720,
    W_CMSG_MOVE_NOT_ACTIVE_MOVER = 721,
    W_SMSG_PLAY_SOUND = 722,
    W_CMSG_BATTLEFIELD_STATUS = 723,
    W_SMSG_BATTLEFIELD_STATUS = 724,
    W_CMSG_BATTLEFIELD_PORT = 725,
    W_MSG_INSPECT_HONOR_STATS = 726,
    W_CMSG_BATTLEMASTER_HELLO = 727,
    W_SMSG_FORCE_WALK_SPEED_CHANGE = 730,
    W_CMSG_FORCE_WALK_SPEED_CHANGE_ACK = 731,
    W_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE = 732,
    W_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK = 733,
    W_SMSG_FORCE_TURN_RATE_CHANGE = 734,
    W_CMSG_FORCE_TURN_RATE_CHANGE_ACK = 735,
    W_MSG_PVP_LOG_DATA = 736,
    W_CMSG_LEAVE_BATTLEFIELD = 737,
    W_CMSG_AREA_SPIRIT_HEALER_QUERY = 738,
    W_CMSG_AREA_SPIRIT_HEALER_QUEUE = 739,
    W_SMSG_AREA_SPIRIT_HEALER_TIME = 740,
    W_SMSG_WARDEN_DATA = 742,
    W_CMSG_WARDEN_DATA = 743,
    W_SMSG_GROUP_JOINED_BATTLEGROUND = 744,
    W_MSG_BATTLEGROUND_PLAYER_POSITIONS = 745,
    W_CMSG_PET_STOP_ATTACK = 746,
    W_SMSG_BINDER_CONFIRM = 747,
    W_SMSG_BATTLEGROUND_PLAYER_JOINED = 748,
    W_SMSG_BATTLEGROUND_PLAYER_LEFT = 749,
    W_CMSG_BATTLEMASTER_JOIN = 750,
    W_SMSG_ADDON_INFO = 751,
    W_CMSG_PET_UNLEARN = 752,
    W_SMSG_PET_UNLEARN_CONFIRM = 753,
    W_SMSG_PARTY_MEMBER_STATS_FULL = 754,
    W_CMSG_PET_SPELL_AUTOCAST = 755,
    W_SMSG_WEATHER = 756,
    W_SMSG_RAID_INSTANCE_MESSAGE = 762,
    W_SMSG_COMPRESSED_MOVES = 763,
    W_CMSG_GUILD_INFO_TEXT = 764,
    W_SMSG_CHAT_RESTRICTED = 765,
    W_SMSG_SPLINE_SET_RUN_SPEED = 766,
    W_SMSG_SPLINE_SET_RUN_BACK_SPEED = 767,
    W_SMSG_SPLINE_SET_SWIM_SPEED = 768,
    W_SMSG_SPLINE_SET_WALK_SPEED = 769,
    W_SMSG_SPLINE_SET_SWIM_BACK_SPEED = 770,
    W_SMSG_SPLINE_SET_TURN_RATE = 771,
    W_SMSG_SPLINE_MOVE_UNROOT = 772,
    W_SMSG_SPLINE_MOVE_FEATHER_FALL = 773,
    W_SMSG_SPLINE_MOVE_NORMAL_FALL = 774,
    W_SMSG_SPLINE_MOVE_SET_HOVER = 775,
    W_SMSG_SPLINE_MOVE_UNSET_HOVER = 776,
    W_SMSG_SPLINE_MOVE_WATER_WALK = 777,
    W_SMSG_SPLINE_MOVE_LAND_WALK = 778,
    W_SMSG_SPLINE_MOVE_START_SWIM = 779,
    W_SMSG_SPLINE_MOVE_STOP_SWIM = 780,
    W_SMSG_SPLINE_MOVE_SET_RUN_MODE = 781,
    W_SMSG_SPLINE_MOVE_SET_WALK_MODE = 782,
    W_CMSG_ACTIVATETAXIEXPRESS = 786,
    W_CMSG_SET_FACTION_INACTIVE = 791,
    W_CMSG_SET_WATCHED_FACTION = 792,
    W_MSG_MOVE_TIME_SKIPPED = 793,
    W_SMSG_SPLINE_MOVE_ROOT = 794,
    W_SMSG_INVALIDATE_PLAYER = 796,
    W_CMSG_RESET_INSTANCES = 797,
    W_SMSG_INSTANCE_RESET = 798,
    W_SMSG_INSTANCE_RESET_FAILED = 799,
    W_SMSG_UPDATE_LAST_INSTANCE = 800,
    W_MSG_RAID_TARGET_UPDATE = 801,
    W_MSG_RAID_READY_CHECK = 802,
    W_SMSG_PET_ACTION_SOUND = 804,
    W_SMSG_PET_DISMISS_SOUND = 805,
    W_SMSG_GM_TICKET_STATUS_UPDATE = 808,
    W_MSG_SET_DUNGEON_DIFFICULTY = 809,
    W_CMSG_GMSURVEY_SUBMIT = 810,
    W_SMSG_UPDATE_INSTANCE_OWNERSHIP = 811,
    W_SMSG_CHAT_PLAYER_AMBIGUOUS = 813,
    W_SMSG_SPELLINSTAKILLLOG = 815,
    W_SMSG_SPELL_UPDATE_CHAIN_TARGETS = 816,
    W_SMSG_SPELLSTEALLOG = 819,
    W_SMSG_DEFENSE_MESSAGE = 826,
    W_SMSG_INSTANCE_DIFFICULTY = 827,
    W_SMSG_MOTD = 829,
    W_CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK = 832,
    W_SMSG_MOVE_SET_CAN_FLY = 835,
    W_SMSG_MOVE_UNSET_CAN_FLY = 836,
    W_CMSG_MOVE_SET_CAN_FLY_ACK = 837,
    W_CMSG_MOVE_SET_FLY = 838,
    W_CMSG_SOCKET_GEMS = 839,
    W_SMSG_ARENA_TEAM_COMMAND_RESULT = 841,
    W_SMSG_ARENA_TEAM_QUERY_RESPONSE = 844,
    W_CMSG_ARENA_TEAM_ROSTER = 845,
    W_SMSG_ARENA_TEAM_ROSTER = 846,
    W_CMSG_ARENA_TEAM_INVITE = 847,
    W_SMSG_ARENA_TEAM_INVITE = 848,
    W_CMSG_ARENA_TEAM_ACCEPT = 849,
    W_CMSG_ARENA_TEAM_DECLINE = 850,
    W_CMSG_ARENA_TEAM_LEAVE = 851,
    W_CMSG_ARENA_TEAM_REMOVE = 852,
    W_CMSG_ARENA_TEAM_DISBAND = 853,
    W_CMSG_ARENA_TEAM_LEADER = 854,
    W_SMSG_ARENA_TEAM_EVENT = 855,
    W_CMSG_BATTLEMASTER_JOIN_ARENA = 856,
    W_MSG_MOVE_START_ASCEND = 857,
    W_MSG_MOVE_STOP_ASCEND = 858,
    W_SMSG_ARENA_TEAM_STATS = 859,
    W_CMSG_LFG_JOIN = 860,
    W_CMSG_LFG_LEAVE = 861,
    W_CMSG_SEARCH_LFG_JOIN = 862,
    W_CMSG_SEARCH_LFG_LEAVE = 863,
    W_SMSG_UPDATE_LFG_LIST = 864,
    W_SMSG_LFG_PROPOSAL_UPDATE = 865,
    W_CMSG_LFG_PROPOSAL_RESULT = 866,
    W_SMSG_LFG_ROLE_CHECK_UPDATE = 867,
    W_SMSG_LFG_JOIN_RESULT = 868,
    W_SMSG_LFG_QUEUE_STATUS = 869,
    W_CMSG_SET_LFG_COMMENT = 870,
    W_SMSG_LFG_UPDATE_PLAYER = 871,
    W_SMSG_LFG_UPDATE_PARTY = 872,
    W_SMSG_LFG_UPDATE_SEARCH = 873,
    W_CMSG_LFG_SET_ROLES = 874,
    W_CMSG_LFG_SET_BOOT_VOTE = 876,
    W_SMSG_LFG_BOOT_PROPOSAL_UPDATE = 877,
    W_CMSG_LFD_PLAYER_LOCK_INFO_REQUEST = 878,
    W_SMSG_LFG_PLAYER_INFO = 879,
    W_CMSG_LFG_TELEPORT = 880,
    W_CMSG_LFD_PARTY_LOCK_INFO_REQUEST = 881,
    W_SMSG_LFG_PARTY_INFO = 882,
    W_SMSG_TITLE_EARNED = 883,
    W_CMSG_SET_TITLE = 884,
    W_CMSG_CANCEL_MOUNT_AURA = 885,
    W_SMSG_ARENA_ERROR = 886,
    W_MSG_INSPECT_ARENA_TEAMS = 887,
    W_SMSG_DEATH_RELEASE_LOC = 888,
    W_CMSG_CANCEL_TEMP_ENCHANTMENT = 889,
    W_SMSG_FORCED_DEATH_UPDATE = 890,
    W_MSG_MOVE_SET_FLIGHT_SPEED = 894,
    W_MSG_MOVE_SET_FLIGHT_BACK_SPEED = 896,
    W_SMSG_FORCE_FLIGHT_SPEED_CHANGE = 897,
    W_CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK = 898,
    W_SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE = 899,
    W_CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK = 900,
    W_SMSG_SPLINE_SET_FLIGHT_SPEED = 901,
    W_SMSG_SPLINE_SET_FLIGHT_BACK_SPEED = 902,
    W_SMSG_FLIGHT_SPLINE_SYNC = 904,
    W_CMSG_SET_TAXI_BENCHMARK_MODE = 905,
    W_SMSG_REALM_SPLIT = 907,
    W_CMSG_REALM_SPLIT = 908,
    W_CMSG_MOVE_CHNG_TRANSPORT = 909,
    W_MSG_PARTY_ASSIGNMENT = 910,
    W_SMSG_TIME_SYNC_REQ = 912,
    W_CMSG_TIME_SYNC_RESP = 913,
    W_SMSG_RESET_FAILED_NOTIFY = 918,
    W_SMSG_LFG_DISABLED = 920,
    W_SMSG_UPDATE_COMBO_POINTS = 925,
    W_MSG_MOVE_START_DESCEND = 935,
    W_SMSG_DISMOUNT = 940,
    W_MSG_MOVE_UPDATE_CAN_FLY = 941,
    W_MSG_RAID_READY_CHECK_CONFIRM = 942,
    W_CMSG_VOICE_SESSION_ENABLE = 943,
    W_SMSG_GM_MESSAGECHAT = 947,
    W_CMSG_COMMENTATOR_ENABLE = 949,
    W_SMSG_CLEAR_TARGET = 959,
    W_SMSG_CROSSED_INEBRIATION_THRESHOLD = 961,
    W_SMSG_KICK_REASON = 965,
    W_MSG_RAID_READY_CHECK_FINISHED = 966,
    W_CMSG_COMPLAIN = 967,
    W_SMSG_COMPLAIN_RESULT = 968,
    W_SMSG_FEATURE_SYSTEM_STATUS = 969,
    W_CMSG_CHANNEL_DISPLAY_LIST = 978,
    W_CMSG_SET_ACTIVE_VOICE_CHANNEL = 979,
    W_CMSG_GET_CHANNEL_MEMBER_COUNT = 980,
    W_SMSG_CHANNEL_MEMBER_COUNT = 981,
    W_CMSG_CHANNEL_VOICE_ON = 982,
    W_CMSG_REPORT_PVP_AFK = 996,
    W_CMSG_GUILD_BANKER_ACTIVATE = 998,
    W_CMSG_GUILD_BANK_QUERY_TAB = 999,
    W_SMSG_GUILD_BANK_LIST = 1000,
    W_CMSG_GUILD_BANK_SWAP_ITEMS = 1001,
    W_CMSG_GUILD_BANK_BUY_TAB = 1002,
    W_CMSG_GUILD_BANK_UPDATE_TAB = 1003,
    W_CMSG_GUILD_BANK_DEPOSIT_MONEY = 1004,
    W_CMSG_GUILD_BANK_WITHDRAW_MONEY = 1005,
    W_MSG_GUILD_BANK_LOG_QUERY = 1006,
    W_CMSG_SET_CHANNEL_WATCH = 1007,
    W_SMSG_USERLIST_ADD = 1008,
    W_SMSG_USERLIST_REMOVE = 1009,
    W_SMSG_USERLIST_UPDATE = 1010,
    W_CMSG_CLEAR_CHANNEL_WATCH = 1011,
    W_SMSG_INSPECT_TALENT = 1012,
    W_CMSG_SPELLCLICK = 1016,
    W_SMSG_LOOT_LIST = 1017,
    W_MSG_GUILD_PERMISSIONS = 1021,
    W_MSG_GUILD_BANK_MONEY_WITHDRAWN = 1022,
    W_MSG_GUILD_EVENT_LOG_QUERY = 1023,
    W_CMSG_GET_MIRRORIMAGE_DATA = 1025,
    W_SMSG_MIRRORIMAGE_DATA = 1026,
    W_CMSG_KEEP_ALIVE = 1031,
    W_CMSG_OPT_OUT_OF_LOOT = 1033,
    W_MSG_QUERY_GUILD_BANK_TEXT = 1034,
    W_CMSG_SET_GUILD_BANK_TEXT = 1035,
    W_CMSG_GRANT_LEVEL = 1037,
    W_SMSG_OVERRIDE_LIGHT = 1042,
    W_SMSG_TOTEM_CREATED = 1043,
    W_CMSG_TOTEM_DESTROYED = 1044,
    W_CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY = 1047,
    W_SMSG_QUESTGIVER_STATUS_MULTIPLE = 1048,
    W_CMSG_SET_PLAYER_DECLINED_NAMES = 1049,
    W_SMSG_SET_PLAYER_DECLINED_NAMES_RESULT = 1050,
    W_SMSG_SEND_UNLEARN_SPELLS = 1054,
    W_SMSG_PROPOSE_LEVEL_GRANT = 1055,
    W_CMSG_ACCEPT_LEVEL_GRANT = 1056,
    W_SMSG_REFER_A_FRIEND_FAILURE = 1057,
    W_SMSG_SPLINE_MOVE_SET_FLYING = 1058,
    W_SMSG_SPLINE_MOVE_UNSET_FLYING = 1059,
    W_CMSG_ALTER_APPEARANCE = 1062,
    W_SMSG_ENABLE_BARBER_SHOP = 1063,
    W_SMSG_BARBER_SHOP_RESULT = 1064,
    W_CMSG_CALENDAR_GET_CALENDAR = 1065,
    W_CMSG_CALENDAR_GET_EVENT = 1066,
    W_CMSG_CALENDAR_GUILD_FILTER = 1067,
    W_CMSG_CALENDAR_ARENA_TEAM = 1068,
    W_CMSG_CALENDAR_ADD_EVENT = 1069,
    W_CMSG_CALENDAR_UPDATE_EVENT = 1070,
    W_CMSG_CALENDAR_REMOVE_EVENT = 1071,
    W_CMSG_CALENDAR_COPY_EVENT = 1072,
    W_CMSG_CALENDAR_EVENT_INVITE = 1073,
    W_CMSG_CALENDAR_EVENT_RSVP = 1074,
    W_CMSG_CALENDAR_EVENT_REMOVE_INVITE = 1075,
    W_CMSG_CALENDAR_EVENT_STATUS = 1076,
    W_CMSG_CALENDAR_EVENT_MODERATOR_STATUS = 1077,
    W_SMSG_CALENDAR_SEND_CALENDAR = 1078,
    W_SMSG_CALENDAR_SEND_EVENT = 1079,
    W_SMSG_CALENDAR_FILTER_GUILD = 1080,
    W_SMSG_CALENDAR_ARENA_TEAM = 1081,
    W_SMSG_CALENDAR_EVENT_INVITE = 1082,
    W_SMSG_CALENDAR_EVENT_INVITE_REMOVED = 1083,
    W_SMSG_CALENDAR_EVENT_STATUS = 1084,
    W_SMSG_CALENDAR_COMMAND_RESULT = 1085,
    W_SMSG_CALENDAR_RAID_LOCKOUT_ADDED = 1086,
    W_SMSG_CALENDAR_RAID_LOCKOUT_REMOVED = 1087,
    W_SMSG_CALENDAR_EVENT_INVITE_ALERT = 1088,
    W_SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT = 1089,
    W_SMSG_CALENDAR_EVENT_REMOVED_ALERT = 1091,
    W_SMSG_CALENDAR_EVENT_UPDATED_ALERT = 1092,
    W_SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT = 1093,
    W_CMSG_CALENDAR_COMPLAIN = 1094,
    W_CMSG_CALENDAR_GET_NUM_PENDING = 1095,
    W_SMSG_CALENDAR_SEND_NUM_PENDING = 1096,
    W_MSG_MOVE_SET_PITCH_RATE = 1115,
    W_SMSG_FORCE_PITCH_RATE_CHANGE = 1116,
    W_SMSG_CALENDAR_EVENT_INVITE_NOTES = 1120,
    W_SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT = 1121,
    W_CMSG_UPDATE_MISSILE_TRAJECTORY = 1122,
    W_SMSG_UPDATE_ACCOUNT_DATA_COMPLETE = 1123,
    W_SMSG_TRIGGER_MOVIE = 1124,
    W_CMSG_COMPLETE_MOVIE = 1125,
    W_SMSG_ACHIEVEMENT_EARNED = 1128,
    W_SMSG_CRITERIA_UPDATE = 1130,
    W_CMSG_QUERY_INSPECT_ACHIEVEMENTS = 1131,
    W_SMSG_RESPOND_INSPECT_ACHIEVEMENTS = 1132,
    W_CMSG_DISMISS_CONTROLLED_VEHICLE = 1133,
    W_SMSG_QUESTUPDATE_ADD_PVP_KILL = 1135,
    W_SMSG_CALENDAR_RAID_LOCKOUT_UPDATED = 1137,
    W_CMSG_CHAR_CUSTOMIZE = 1139,
    W_SMSG_CHAR_CUSTOMIZE = 1140,
    W_CMSG_REQUEST_VEHICLE_EXIT = 1142,
    W_CMSG_REQUEST_VEHICLE_PREV_SEAT = 1143,
    W_CMSG_REQUEST_VEHICLE_NEXT_SEAT = 1144,
    W_CMSG_REQUEST_VEHICLE_SWITCH_SEAT = 1145,
    W_CMSG_PET_LEARN_TALENT = 1146,
    W_SMSG_SET_PHASE_SHIFT = 1148,
    W_SMSG_ALL_ACHIEVEMENT_DATA = 1149,
    W_SMSG_POWER_UPDATE = 1152,
    W_CMSG_GAMEOBJ_REPORT_USE = 1153,
    W_SMSG_HIGHEST_THREAT_UPDATE = 1154,
    W_SMSG_THREAT_UPDATE = 1155,
    W_SMSG_THREAT_REMOVE = 1156,
    W_SMSG_THREAT_CLEAR = 1157,
    W_SMSG_CONVERT_RUNE = 1158,
    W_SMSG_RESYNC_RUNES = 1159,
    W_SMSG_ADD_RUNE_POWER = 1160,
    W_CMSG_REMOVE_GLYPH = 1162,
    W_CMSG_DISMISS_CRITTER = 1165,
    W_CMSG_AUCTION_LIST_PENDING_SALES = 1167,
    W_SMSG_AUCTION_LIST_PENDING_SALES = 1168,
    W_SMSG_MODIFY_COOLDOWN = 1169,
    W_SMSG_PET_UPDATE_COMBO_POINTS = 1170,
    W_CMSG_ENABLETAXI = 1171,
    W_SMSG_PRE_RESURRECT = 1172,
    W_SMSG_AURA_UPDATE_ALL = 1173,
    W_SMSG_AURA_UPDATE = 1174,
    W_SMSG_SERVER_FIRST_ACHIEVEMENT = 1176,
    W_SMSG_PET_LEARNED_SPELL = 1177,
    W_SMSG_PET_UNLEARNED_SPELL = 1178,
    W_CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE = 1179,
    W_CMSG_HEARTH_AND_RESURRECT = 1180,
    W_SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA = 1181,
    W_SMSG_CRITERIA_DELETED = 1182,
    W_SMSG_ACHIEVEMENT_DELETED = 1183,
    W_SMSG_BATTLEGROUND_INFO_THROTTLED = 1190,
    W_SMSG_PLAYER_VEHICLE_DATA = 1191,
    W_CMSG_PLAYER_VEHICLE_ENTER = 1192,
    W_CMSG_CONTROLLER_EJECT_PASSENGER = 1193,
    W_SMSG_PET_GUIDS = 1194,
    W_SMSG_CLIENTCACHE_VERSION = 1195,
    W_SMSG_ITEM_REFUND_INFO_RESPONSE = 1202,
    W_CMSG_ITEM_REFUND_INFO = 1203,
    W_CMSG_ITEM_REFUND = 1204,
    W_SMSG_ITEM_REFUND_RESULT = 1205,
    W_CMSG_CORPSE_MAP_POSITION_QUERY = 1206,
    W_SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE = 1207,
    W_CMSG_CALENDAR_EVENT_SIGNUP = 1210,
    W_SMSG_CALENDAR_CLEAR_PENDING_ACTION = 1211,
    W_SMSG_EQUIPMENT_SET_LIST = 1212,
    W_CMSG_EQUIPMENT_SET_SAVE = 1213,
    W_CMSG_UPDATE_PROJECTILE_POSITION = 1214,
    W_SMSG_SET_PROJECTILE_POSITION = 1215,
    W_SMSG_TALENTS_INFO = 1216,
    W_CMSG_LEARN_PREVIEW_TALENTS = 1217,
    W_CMSG_LEARN_PREVIEW_TALENTS_PET = 1218,
    W_SMSG_ARENA_UNIT_DESTROYED = 1223,
    W_SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED = 1224,
    W_SMSG_MOVE_GRAVITY_DISABLE = 1230,
    W_CMSG_MOVE_GRAVITY_DISABLE_ACK = 1231,
    W_SMSG_MOVE_GRAVITY_ENABLE = 1232,
    W_CMSG_MOVE_GRAVITY_ENABLE_ACK = 1233,
    W_MSG_MOVE_GRAVITY_CHNG = 1234,
    W_SMSG_SPLINE_MOVE_GRAVITY_DISABLE = 1235,
    W_SMSG_SPLINE_MOVE_GRAVITY_ENABLE = 1236,
    W_CMSG_EQUIPMENT_SET_USE = 1237,
    W_SMSG_EQUIPMENT_SET_USE_RESULT = 1238,
    W_CMSG_CHAR_FACTION_CHANGE = 1241,
    W_SMSG_CHAR_FACTION_CHANGE = 1242,
    W_SMSG_BATTLEFIELD_MGR_ENTRY_INVITE = 1246,
    W_CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE = 1247,
    W_SMSG_BATTLEFIELD_MGR_ENTERED = 1248,
    W_SMSG_BATTLEFIELD_MGR_QUEUE_INVITE = 1249,
    W_CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE = 1250,
    W_SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE = 1252,
    W_SMSG_BATTLEFIELD_MGR_EJECT_PENDING = 1253,
    W_SMSG_BATTLEFIELD_MGR_EJECTED = 1254,
    W_CMSG_BATTLEFIELD_MGR_EXIT_REQUEST = 1255,
    W_SMSG_BATTLEFIELD_MGR_STATE_CHANGE = 1256,
    W_MSG_SET_RAID_DIFFICULTY = 1259,
    W_SMSG_TOGGLE_XP_GAIN = 1261,
    W_SMSG_GMRESPONSE_DB_ERROR = 1262,
    W_SMSG_GMRESPONSE_RECEIVED = 1263,
    W_CMSG_GMRESPONSE_RESOLVE = 1264,
    W_SMSG_GMRESPONSE_STATUS_UPDATE = 1265,
    W_CMSG_WORLD_STATE_UI_TIMER_UPDATE = 1270,
    W_SMSG_WORLD_STATE_UI_TIMER_UPDATE = 1271,
    W_CMSG_CHAR_RACE_CHANGE = 1272,
    W_SMSG_TALENTS_INVOLUNTARILY_RESET = 1274,
    W_CMSG_READY_FOR_ACCOUNT_DATA_TIMES = 1279,
    W_CMSG_QUERY_QUESTS_COMPLETED = 1280,
    W_SMSG_QUERY_QUESTS_COMPLETED_RESPONSE = 1281,
    W_CMSG_GM_REPORT_LAG = 1282,
    W_SMSG_CORPSE_NOT_IN_INSTANCE = 1286,
    W_SMSG_CAMERA_SHAKE = 1290,
    W_SMSG_SOCKET_GEMS_RESULT = 1291,
    W_SMSG_REDIRECT_CLIENT = 1293,
    W_SMSG_MOVE_SET_COLLISION_HGT = 1302,
    W_CMSG_MOVE_SET_COLLISION_HGT_ACK = 1303,
    W_SMSG_MULTIPLE_MOVES = 1310
} WowWrathWorldOpcode;

typedef struct {
    WowWrathWorldOpcode opcode;

    union {
        wrath_CMSG_DBLOOKUP CMSG_DBLOOKUP;
        wrath_CMSG_WORLD_TELEPORT CMSG_WORLD_TELEPORT;
        wrath_CMSG_TELEPORT_TO_UNIT CMSG_TELEPORT_TO_UNIT;
        wrath_CMSG_CHAR_CREATE CMSG_CHAR_CREATE;
        wrath_CMSG_CHAR_DELETE CMSG_CHAR_DELETE;
        wrath_CMSG_PLAYER_LOGIN CMSG_PLAYER_LOGIN;
        wrath_CMSG_NAME_QUERY CMSG_NAME_QUERY;
        wrath_CMSG_PET_NAME_QUERY CMSG_PET_NAME_QUERY;
        wrath_CMSG_GUILD_QUERY CMSG_GUILD_QUERY;
        wrath_CMSG_ITEM_QUERY_SINGLE CMSG_ITEM_QUERY_SINGLE;
        wrath_CMSG_PAGE_TEXT_QUERY CMSG_PAGE_TEXT_QUERY;
        wrath_CMSG_QUEST_QUERY CMSG_QUEST_QUERY;
        wrath_CMSG_GAMEOBJECT_QUERY CMSG_GAMEOBJECT_QUERY;
        wrath_CMSG_CREATURE_QUERY CMSG_CREATURE_QUERY;
        wrath_CMSG_WHO CMSG_WHO;
        wrath_CMSG_WHOIS CMSG_WHOIS;
        wrath_CMSG_CONTACT_LIST CMSG_CONTACT_LIST;
        wrath_CMSG_ADD_FRIEND CMSG_ADD_FRIEND;
        wrath_CMSG_DEL_FRIEND CMSG_DEL_FRIEND;
        wrath_CMSG_SET_CONTACT_NOTES CMSG_SET_CONTACT_NOTES;
        wrath_CMSG_ADD_IGNORE CMSG_ADD_IGNORE;
        wrath_CMSG_DEL_IGNORE CMSG_DEL_IGNORE;
        wrath_CMSG_GROUP_INVITE CMSG_GROUP_INVITE;
        wrath_CMSG_GROUP_UNINVITE CMSG_GROUP_UNINVITE;
        wrath_CMSG_GROUP_UNINVITE_GUID CMSG_GROUP_UNINVITE_GUID;
        wrath_CMSG_GROUP_SET_LEADER CMSG_GROUP_SET_LEADER;
        wrath_CMSG_LOOT_METHOD CMSG_LOOT_METHOD;
        wrath_CMSG_GUILD_CREATE CMSG_GUILD_CREATE;
        wrath_CMSG_GUILD_INVITE CMSG_GUILD_INVITE;
        wrath_CMSG_GUILD_PROMOTE CMSG_GUILD_PROMOTE;
        wrath_CMSG_GUILD_DEMOTE CMSG_GUILD_DEMOTE;
        wrath_CMSG_GUILD_REMOVE CMSG_GUILD_REMOVE;
        wrath_CMSG_GUILD_LEADER CMSG_GUILD_LEADER;
        wrath_CMSG_GUILD_MOTD CMSG_GUILD_MOTD;
        wrath_CMSG_MESSAGECHAT CMSG_MESSAGECHAT;
        wrath_CMSG_JOIN_CHANNEL CMSG_JOIN_CHANNEL;
        wrath_CMSG_LEAVE_CHANNEL CMSG_LEAVE_CHANNEL;
        wrath_CMSG_CHANNEL_LIST CMSG_CHANNEL_LIST;
        wrath_CMSG_CHANNEL_PASSWORD CMSG_CHANNEL_PASSWORD;
        wrath_CMSG_CHANNEL_SET_OWNER CMSG_CHANNEL_SET_OWNER;
        wrath_CMSG_CHANNEL_OWNER CMSG_CHANNEL_OWNER;
        wrath_CMSG_CHANNEL_MODERATOR CMSG_CHANNEL_MODERATOR;
        wrath_CMSG_CHANNEL_UNMODERATOR CMSG_CHANNEL_UNMODERATOR;
        wrath_CMSG_CHANNEL_MUTE CMSG_CHANNEL_MUTE;
        wrath_CMSG_CHANNEL_UNMUTE CMSG_CHANNEL_UNMUTE;
        wrath_CMSG_CHANNEL_INVITE CMSG_CHANNEL_INVITE;
        wrath_CMSG_CHANNEL_KICK CMSG_CHANNEL_KICK;
        wrath_CMSG_CHANNEL_BAN CMSG_CHANNEL_BAN;
        wrath_CMSG_CHANNEL_UNBAN CMSG_CHANNEL_UNBAN;
        wrath_CMSG_CHANNEL_ANNOUNCEMENTS CMSG_CHANNEL_ANNOUNCEMENTS;
        wrath_CMSG_CHANNEL_MODERATE CMSG_CHANNEL_MODERATE;
        wrath_CMSG_USE_ITEM CMSG_USE_ITEM;
        wrath_CMSG_OPEN_ITEM CMSG_OPEN_ITEM;
        wrath_CMSG_READ_ITEM CMSG_READ_ITEM;
        wrath_CMSG_GAMEOBJ_USE CMSG_GAMEOBJ_USE;
        wrath_CMSG_AREATRIGGER CMSG_AREATRIGGER;
        wrath_MSG_MOVE_START_FORWARD MSG_MOVE_START_FORWARD;
        wrath_MSG_MOVE_START_BACKWARD MSG_MOVE_START_BACKWARD;
        wrath_MSG_MOVE_STOP MSG_MOVE_STOP;
        wrath_MSG_MOVE_START_STRAFE_LEFT MSG_MOVE_START_STRAFE_LEFT;
        wrath_MSG_MOVE_START_STRAFE_RIGHT MSG_MOVE_START_STRAFE_RIGHT;
        wrath_MSG_MOVE_STOP_STRAFE MSG_MOVE_STOP_STRAFE;
        wrath_MSG_MOVE_JUMP MSG_MOVE_JUMP;
        wrath_MSG_MOVE_START_TURN_LEFT MSG_MOVE_START_TURN_LEFT;
        wrath_MSG_MOVE_START_TURN_RIGHT MSG_MOVE_START_TURN_RIGHT;
        wrath_MSG_MOVE_STOP_TURN MSG_MOVE_STOP_TURN;
        wrath_MSG_MOVE_START_PITCH_UP MSG_MOVE_START_PITCH_UP;
        wrath_MSG_MOVE_START_PITCH_DOWN MSG_MOVE_START_PITCH_DOWN;
        wrath_MSG_MOVE_STOP_PITCH MSG_MOVE_STOP_PITCH;
        wrath_MSG_MOVE_SET_RUN_MODE MSG_MOVE_SET_RUN_MODE;
        wrath_MSG_MOVE_SET_WALK_MODE MSG_MOVE_SET_WALK_MODE;
        wrath_MSG_MOVE_TELEPORT_Server MSG_MOVE_TELEPORT_Server;
        wrath_MSG_MOVE_TELEPORT_ACK_Client MSG_MOVE_TELEPORT_ACK_Client;
        wrath_MSG_MOVE_FALL_LAND MSG_MOVE_FALL_LAND;
        wrath_MSG_MOVE_START_SWIM MSG_MOVE_START_SWIM;
        wrath_MSG_MOVE_STOP_SWIM MSG_MOVE_STOP_SWIM;
        wrath_MSG_MOVE_SET_FACING MSG_MOVE_SET_FACING;
        wrath_MSG_MOVE_SET_PITCH MSG_MOVE_SET_PITCH;
        wrath_CMSG_MOVE_SET_RAW_POSITION CMSG_MOVE_SET_RAW_POSITION;
        wrath_CMSG_FORCE_RUN_SPEED_CHANGE_ACK CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
        wrath_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
        wrath_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
        wrath_CMSG_FORCE_MOVE_ROOT_ACK CMSG_FORCE_MOVE_ROOT_ACK;
        wrath_CMSG_FORCE_MOVE_UNROOT_ACK CMSG_FORCE_MOVE_UNROOT_ACK;
        wrath_MSG_MOVE_HEARTBEAT MSG_MOVE_HEARTBEAT;
        wrath_CMSG_MOVE_KNOCK_BACK_ACK CMSG_MOVE_KNOCK_BACK_ACK;
        wrath_CMSG_MOVE_HOVER_ACK CMSG_MOVE_HOVER_ACK;
        wrath_MSG_MOVE_HOVER MSG_MOVE_HOVER;
        wrath_CMSG_TUTORIAL_FLAG CMSG_TUTORIAL_FLAG;
        wrath_CMSG_STANDSTATECHANGE CMSG_STANDSTATECHANGE;
        wrath_CMSG_EMOTE CMSG_EMOTE;
        wrath_CMSG_TEXT_EMOTE CMSG_TEXT_EMOTE;
        wrath_CMSG_AUTOSTORE_LOOT_ITEM CMSG_AUTOSTORE_LOOT_ITEM;
        wrath_CMSG_AUTOEQUIP_ITEM CMSG_AUTOEQUIP_ITEM;
        wrath_CMSG_AUTOSTORE_BAG_ITEM CMSG_AUTOSTORE_BAG_ITEM;
        wrath_CMSG_SWAP_ITEM CMSG_SWAP_ITEM;
        wrath_CMSG_SWAP_INV_ITEM CMSG_SWAP_INV_ITEM;
        wrath_CMSG_SPLIT_ITEM CMSG_SPLIT_ITEM;
        wrath_CMSG_AUTOEQUIP_ITEM_SLOT CMSG_AUTOEQUIP_ITEM_SLOT;
        wrath_CMSG_DESTROYITEM CMSG_DESTROYITEM;
        wrath_CMSG_INSPECT CMSG_INSPECT;
        wrath_CMSG_INITIATE_TRADE CMSG_INITIATE_TRADE;
        wrath_CMSG_ACCEPT_TRADE CMSG_ACCEPT_TRADE;
        wrath_CMSG_SET_TRADE_ITEM CMSG_SET_TRADE_ITEM;
        wrath_CMSG_CLEAR_TRADE_ITEM CMSG_CLEAR_TRADE_ITEM;
        wrath_CMSG_SET_TRADE_GOLD CMSG_SET_TRADE_GOLD;
        wrath_CMSG_SET_FACTION_ATWAR CMSG_SET_FACTION_ATWAR;
        wrath_CMSG_SET_ACTION_BUTTON CMSG_SET_ACTION_BUTTON;
        wrath_CMSG_CAST_SPELL CMSG_CAST_SPELL;
        wrath_CMSG_CANCEL_CAST CMSG_CANCEL_CAST;
        wrath_CMSG_CANCEL_AURA CMSG_CANCEL_AURA;
        wrath_CMSG_CANCEL_CHANNELLING CMSG_CANCEL_CHANNELLING;
        wrath_CMSG_SET_SELECTION CMSG_SET_SELECTION;
        wrath_CMSG_DELETEEQUIPMENT_SET CMSG_DELETEEQUIPMENT_SET;
        wrath_CMSG_INSTANCE_LOCK_RESPONSE CMSG_INSTANCE_LOCK_RESPONSE;
        wrath_CMSG_ATTACKSWING CMSG_ATTACKSWING;
        wrath_CMSG_RESURRECT_RESPONSE CMSG_RESURRECT_RESPONSE;
        wrath_CMSG_LOOT CMSG_LOOT;
        wrath_CMSG_LOOT_RELEASE CMSG_LOOT_RELEASE;
        wrath_CMSG_DUEL_ACCEPTED CMSG_DUEL_ACCEPTED;
        wrath_CMSG_DUEL_CANCELLED CMSG_DUEL_CANCELLED;
        wrath_CMSG_PET_SET_ACTION CMSG_PET_SET_ACTION;
        wrath_CMSG_PET_ACTION CMSG_PET_ACTION;
        wrath_CMSG_PET_ABANDON CMSG_PET_ABANDON;
        wrath_CMSG_PET_RENAME CMSG_PET_RENAME;
        wrath_CMSG_GOSSIP_HELLO CMSG_GOSSIP_HELLO;
        wrath_CMSG_GOSSIP_SELECT_OPTION CMSG_GOSSIP_SELECT_OPTION;
        wrath_CMSG_NPC_TEXT_QUERY CMSG_NPC_TEXT_QUERY;
        wrath_CMSG_QUESTGIVER_STATUS_QUERY CMSG_QUESTGIVER_STATUS_QUERY;
        wrath_CMSG_QUESTGIVER_HELLO CMSG_QUESTGIVER_HELLO;
        wrath_CMSG_QUESTGIVER_QUERY_QUEST CMSG_QUESTGIVER_QUERY_QUEST;
        wrath_CMSG_QUESTGIVER_ACCEPT_QUEST CMSG_QUESTGIVER_ACCEPT_QUEST;
        wrath_CMSG_QUESTGIVER_COMPLETE_QUEST CMSG_QUESTGIVER_COMPLETE_QUEST;
        wrath_CMSG_QUESTGIVER_REQUEST_REWARD CMSG_QUESTGIVER_REQUEST_REWARD;
        wrath_CMSG_QUESTGIVER_CHOOSE_REWARD CMSG_QUESTGIVER_CHOOSE_REWARD;
        wrath_CMSG_QUESTLOG_SWAP_QUEST CMSG_QUESTLOG_SWAP_QUEST;
        wrath_CMSG_QUESTLOG_REMOVE_QUEST CMSG_QUESTLOG_REMOVE_QUEST;
        wrath_CMSG_QUEST_CONFIRM_ACCEPT CMSG_QUEST_CONFIRM_ACCEPT;
        wrath_CMSG_PUSHQUESTTOPARTY CMSG_PUSHQUESTTOPARTY;
        wrath_CMSG_LIST_INVENTORY CMSG_LIST_INVENTORY;
        wrath_CMSG_SELL_ITEM CMSG_SELL_ITEM;
        wrath_CMSG_BUY_ITEM CMSG_BUY_ITEM;
        wrath_CMSG_BUY_ITEM_IN_SLOT CMSG_BUY_ITEM_IN_SLOT;
        wrath_CMSG_TAXINODE_STATUS_QUERY CMSG_TAXINODE_STATUS_QUERY;
        wrath_CMSG_TAXIQUERYAVAILABLENODES CMSG_TAXIQUERYAVAILABLENODES;
        wrath_CMSG_ACTIVATETAXI CMSG_ACTIVATETAXI;
        wrath_CMSG_TRAINER_LIST CMSG_TRAINER_LIST;
        wrath_CMSG_TRAINER_BUY_SPELL CMSG_TRAINER_BUY_SPELL;
        wrath_CMSG_BINDER_ACTIVATE CMSG_BINDER_ACTIVATE;
        wrath_CMSG_BANKER_ACTIVATE CMSG_BANKER_ACTIVATE;
        wrath_CMSG_BUY_BANK_SLOT CMSG_BUY_BANK_SLOT;
        wrath_CMSG_PETITION_SHOWLIST CMSG_PETITION_SHOWLIST;
        wrath_CMSG_PETITION_BUY CMSG_PETITION_BUY;
        wrath_CMSG_PETITION_SHOW_SIGNATURES CMSG_PETITION_SHOW_SIGNATURES;
        wrath_CMSG_PETITION_SIGN CMSG_PETITION_SIGN;
        wrath_MSG_PETITION_DECLINE MSG_PETITION_DECLINE;
        wrath_CMSG_OFFER_PETITION CMSG_OFFER_PETITION;
        wrath_CMSG_TURN_IN_PETITION CMSG_TURN_IN_PETITION;
        wrath_CMSG_PETITION_QUERY CMSG_PETITION_QUERY;
        wrath_CMSG_BUG CMSG_BUG;
        wrath_CMSG_PLAYED_TIME CMSG_PLAYED_TIME;
        wrath_CMSG_RECLAIM_CORPSE CMSG_RECLAIM_CORPSE;
        wrath_CMSG_WRAP_ITEM CMSG_WRAP_ITEM;
        wrath_MSG_MINIMAP_PING_Client MSG_MINIMAP_PING_Client;
        wrath_CMSG_PING CMSG_PING;
        wrath_CMSG_SETSHEATHED CMSG_SETSHEATHED;
        wrath_CMSG_QUEST_POI_QUERY CMSG_QUEST_POI_QUERY;
        wrath_CMSG_AUTH_SESSION CMSG_AUTH_SESSION;
        wrath_CMSG_PET_CAST_SPELL CMSG_PET_CAST_SPELL;
        wrath_MSG_SAVE_GUILD_EMBLEM_Client MSG_SAVE_GUILD_EMBLEM_Client;
        wrath_MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE;
        wrath_CMSG_ZONEUPDATE CMSG_ZONEUPDATE;
        wrath_MSG_RANDOM_ROLL_Client MSG_RANDOM_ROLL_Client;
        wrath_CMSG_UNLEARN_SKILL CMSG_UNLEARN_SKILL;
        wrath_CMSG_GMTICKET_CREATE CMSG_GMTICKET_CREATE;
        wrath_CMSG_GMTICKET_UPDATETEXT CMSG_GMTICKET_UPDATETEXT;
        wrath_CMSG_REQUEST_ACCOUNT_DATA CMSG_REQUEST_ACCOUNT_DATA;
        wrath_CMSG_UPDATE_ACCOUNT_DATA CMSG_UPDATE_ACCOUNT_DATA;
        wrath_CMSG_SPIRIT_HEALER_ACTIVATE CMSG_SPIRIT_HEALER_ACTIVATE;
        wrath_CMSG_CHAT_IGNORED CMSG_CHAT_IGNORED;
        wrath_CMSG_GUILD_RANK CMSG_GUILD_RANK;
        wrath_CMSG_GUILD_ADD_RANK CMSG_GUILD_ADD_RANK;
        wrath_CMSG_GUILD_SET_PUBLIC_NOTE CMSG_GUILD_SET_PUBLIC_NOTE;
        wrath_CMSG_GUILD_SET_OFFICER_NOTE CMSG_GUILD_SET_OFFICER_NOTE;
        wrath_CMSG_SEND_MAIL CMSG_SEND_MAIL;
        wrath_CMSG_GET_MAIL_LIST CMSG_GET_MAIL_LIST;
        wrath_CMSG_BATTLEFIELD_LIST CMSG_BATTLEFIELD_LIST;
        wrath_CMSG_ITEM_TEXT_QUERY CMSG_ITEM_TEXT_QUERY;
        wrath_CMSG_MAIL_TAKE_MONEY CMSG_MAIL_TAKE_MONEY;
        wrath_CMSG_MAIL_TAKE_ITEM CMSG_MAIL_TAKE_ITEM;
        wrath_CMSG_MAIL_MARK_AS_READ CMSG_MAIL_MARK_AS_READ;
        wrath_CMSG_MAIL_RETURN_TO_SENDER CMSG_MAIL_RETURN_TO_SENDER;
        wrath_CMSG_MAIL_DELETE CMSG_MAIL_DELETE;
        wrath_CMSG_MAIL_CREATE_TEXT_ITEM CMSG_MAIL_CREATE_TEXT_ITEM;
        wrath_CMSG_LEARN_TALENT CMSG_LEARN_TALENT;
        wrath_CMSG_TOGGLE_PVP CMSG_TOGGLE_PVP;
        wrath_MSG_AUCTION_HELLO_Client MSG_AUCTION_HELLO_Client;
        wrath_CMSG_AUCTION_SELL_ITEM CMSG_AUCTION_SELL_ITEM;
        wrath_CMSG_AUCTION_REMOVE_ITEM CMSG_AUCTION_REMOVE_ITEM;
        wrath_CMSG_AUCTION_LIST_ITEMS CMSG_AUCTION_LIST_ITEMS;
        wrath_CMSG_AUCTION_LIST_OWNER_ITEMS CMSG_AUCTION_LIST_OWNER_ITEMS;
        wrath_CMSG_AUCTION_PLACE_BID CMSG_AUCTION_PLACE_BID;
        wrath_CMSG_AUCTION_LIST_BIDDER_ITEMS CMSG_AUCTION_LIST_BIDDER_ITEMS;
        wrath_CMSG_SET_AMMO CMSG_SET_AMMO;
        wrath_CMSG_SET_ACTIVE_MOVER CMSG_SET_ACTIVE_MOVER;
        wrath_CMSG_PET_CANCEL_AURA CMSG_PET_CANCEL_AURA;
        wrath_MSG_LIST_STABLED_PETS_Client MSG_LIST_STABLED_PETS_Client;
        wrath_CMSG_STABLE_PET CMSG_STABLE_PET;
        wrath_CMSG_UNSTABLE_PET CMSG_UNSTABLE_PET;
        wrath_CMSG_BUY_STABLE_SLOT CMSG_BUY_STABLE_SLOT;
        wrath_CMSG_STABLE_SWAP_PET CMSG_STABLE_SWAP_PET;
        wrath_MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT;
        wrath_CMSG_FAR_SIGHT CMSG_FAR_SIGHT;
        wrath_CMSG_GROUP_CHANGE_SUB_GROUP CMSG_GROUP_CHANGE_SUB_GROUP;
        wrath_CMSG_REQUEST_PARTY_MEMBER_STATS CMSG_REQUEST_PARTY_MEMBER_STATS;
        wrath_CMSG_GROUP_SWAP_SUB_GROUP CMSG_GROUP_SWAP_SUB_GROUP;
        wrath_CMSG_AUTOSTORE_BANK_ITEM CMSG_AUTOSTORE_BANK_ITEM;
        wrath_CMSG_AUTOBANK_ITEM CMSG_AUTOBANK_ITEM;
        wrath_CMSG_GROUP_ASSISTANT_LEADER CMSG_GROUP_ASSISTANT_LEADER;
        wrath_CMSG_BUYBACK_ITEM CMSG_BUYBACK_ITEM;
        wrath_CMSG_SET_SAVED_INSTANCE_EXTEND CMSG_SET_SAVED_INSTANCE_EXTEND;
        wrath_CMSG_LOOT_ROLL CMSG_LOOT_ROLL;
        wrath_CMSG_LOOT_MASTER_GIVE CMSG_LOOT_MASTER_GIVE;
        wrath_CMSG_REPAIR_ITEM CMSG_REPAIR_ITEM;
        wrath_MSG_TALENT_WIPE_CONFIRM_Client MSG_TALENT_WIPE_CONFIRM_Client;
        wrath_CMSG_SUMMON_RESPONSE CMSG_SUMMON_RESPONSE;
        wrath_MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK;
        wrath_CMSG_SET_ACTIONBAR_TOGGLES CMSG_SET_ACTIONBAR_TOGGLES;
        wrath_MSG_PETITION_RENAME MSG_PETITION_RENAME;
        wrath_CMSG_ITEM_NAME_QUERY CMSG_ITEM_NAME_QUERY;
        wrath_CMSG_CHAR_RENAME CMSG_CHAR_RENAME;
        wrath_CMSG_MOVE_SPLINE_DONE CMSG_MOVE_SPLINE_DONE;
        wrath_CMSG_MOVE_FALL_RESET CMSG_MOVE_FALL_RESET;
        wrath_CMSG_MOVE_TIME_SKIPPED CMSG_MOVE_TIME_SKIPPED;
        wrath_CMSG_MOVE_FEATHER_FALL_ACK CMSG_MOVE_FEATHER_FALL_ACK;
        wrath_CMSG_MOVE_WATER_WALK_ACK CMSG_MOVE_WATER_WALK_ACK;
        wrath_CMSG_MOVE_NOT_ACTIVE_MOVER CMSG_MOVE_NOT_ACTIVE_MOVER;
        wrath_CMSG_BATTLEFIELD_PORT CMSG_BATTLEFIELD_PORT;
        wrath_MSG_INSPECT_HONOR_STATS_Client MSG_INSPECT_HONOR_STATS_Client;
        wrath_CMSG_BATTLEMASTER_HELLO CMSG_BATTLEMASTER_HELLO;
        wrath_CMSG_FORCE_WALK_SPEED_CHANGE_ACK CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
        wrath_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
        wrath_CMSG_FORCE_TURN_RATE_CHANGE_ACK CMSG_FORCE_TURN_RATE_CHANGE_ACK;
        wrath_CMSG_LEAVE_BATTLEFIELD CMSG_LEAVE_BATTLEFIELD;
        wrath_CMSG_AREA_SPIRIT_HEALER_QUERY CMSG_AREA_SPIRIT_HEALER_QUERY;
        wrath_CMSG_AREA_SPIRIT_HEALER_QUEUE CMSG_AREA_SPIRIT_HEALER_QUEUE;
        wrath_CMSG_WARDEN_DATA CMSG_WARDEN_DATA;
        wrath_CMSG_PET_STOP_ATTACK CMSG_PET_STOP_ATTACK;
        wrath_CMSG_BATTLEMASTER_JOIN CMSG_BATTLEMASTER_JOIN;
        wrath_CMSG_PET_UNLEARN CMSG_PET_UNLEARN;
        wrath_CMSG_PET_SPELL_AUTOCAST CMSG_PET_SPELL_AUTOCAST;
        wrath_CMSG_GUILD_INFO_TEXT CMSG_GUILD_INFO_TEXT;
        wrath_CMSG_ACTIVATETAXIEXPRESS CMSG_ACTIVATETAXIEXPRESS;
        wrath_CMSG_SET_FACTION_INACTIVE CMSG_SET_FACTION_INACTIVE;
        wrath_CMSG_SET_WATCHED_FACTION CMSG_SET_WATCHED_FACTION;
        wrath_MSG_RAID_TARGET_UPDATE_Client MSG_RAID_TARGET_UPDATE_Client;
        wrath_MSG_RAID_READY_CHECK_Client MSG_RAID_READY_CHECK_Client;
        wrath_MSG_SET_DUNGEON_DIFFICULTY_Client MSG_SET_DUNGEON_DIFFICULTY_Client;
        wrath_CMSG_GMSURVEY_SUBMIT CMSG_GMSURVEY_SUBMIT;
        wrath_CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK;
        wrath_CMSG_MOVE_SET_CAN_FLY_ACK CMSG_MOVE_SET_CAN_FLY_ACK;
        wrath_CMSG_MOVE_SET_FLY CMSG_MOVE_SET_FLY;
        wrath_CMSG_SOCKET_GEMS CMSG_SOCKET_GEMS;
        wrath_CMSG_ARENA_TEAM_ROSTER CMSG_ARENA_TEAM_ROSTER;
        wrath_CMSG_ARENA_TEAM_INVITE CMSG_ARENA_TEAM_INVITE;
        wrath_CMSG_ARENA_TEAM_LEAVE CMSG_ARENA_TEAM_LEAVE;
        wrath_CMSG_ARENA_TEAM_REMOVE CMSG_ARENA_TEAM_REMOVE;
        wrath_CMSG_ARENA_TEAM_DISBAND CMSG_ARENA_TEAM_DISBAND;
        wrath_CMSG_ARENA_TEAM_LEADER CMSG_ARENA_TEAM_LEADER;
        wrath_CMSG_BATTLEMASTER_JOIN_ARENA CMSG_BATTLEMASTER_JOIN_ARENA;
        wrath_MSG_MOVE_START_ASCEND MSG_MOVE_START_ASCEND;
        wrath_MSG_MOVE_STOP_ASCEND MSG_MOVE_STOP_ASCEND;
        wrath_CMSG_LFG_JOIN CMSG_LFG_JOIN;
        wrath_CMSG_SEARCH_LFG_JOIN CMSG_SEARCH_LFG_JOIN;
        wrath_CMSG_SEARCH_LFG_LEAVE CMSG_SEARCH_LFG_LEAVE;
        wrath_CMSG_LFG_PROPOSAL_RESULT CMSG_LFG_PROPOSAL_RESULT;
        wrath_CMSG_SET_LFG_COMMENT CMSG_SET_LFG_COMMENT;
        wrath_CMSG_LFG_SET_ROLES CMSG_LFG_SET_ROLES;
        wrath_CMSG_LFG_SET_BOOT_VOTE CMSG_LFG_SET_BOOT_VOTE;
        wrath_CMSG_LFG_TELEPORT CMSG_LFG_TELEPORT;
        wrath_CMSG_SET_TITLE CMSG_SET_TITLE;
        wrath_MSG_INSPECT_ARENA_TEAMS_Client MSG_INSPECT_ARENA_TEAMS_Client;
        wrath_CMSG_CANCEL_TEMP_ENCHANTMENT CMSG_CANCEL_TEMP_ENCHANTMENT;
        wrath_MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEED;
        wrath_CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK;
        wrath_CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK;
        wrath_CMSG_SET_TAXI_BENCHMARK_MODE CMSG_SET_TAXI_BENCHMARK_MODE;
        wrath_CMSG_REALM_SPLIT CMSG_REALM_SPLIT;
        wrath_CMSG_MOVE_CHNG_TRANSPORT CMSG_MOVE_CHNG_TRANSPORT;
        wrath_MSG_PARTY_ASSIGNMENT_Client MSG_PARTY_ASSIGNMENT_Client;
        wrath_CMSG_TIME_SYNC_RESP CMSG_TIME_SYNC_RESP;
        wrath_MSG_MOVE_START_DESCEND MSG_MOVE_START_DESCEND;
        wrath_MSG_RAID_READY_CHECK_CONFIRM_Client MSG_RAID_READY_CHECK_CONFIRM_Client;
        wrath_CMSG_VOICE_SESSION_ENABLE CMSG_VOICE_SESSION_ENABLE;
        wrath_CMSG_COMMENTATOR_ENABLE CMSG_COMMENTATOR_ENABLE;
        wrath_CMSG_COMPLAIN CMSG_COMPLAIN;
        wrath_CMSG_CHANNEL_DISPLAY_LIST CMSG_CHANNEL_DISPLAY_LIST;
        wrath_CMSG_SET_ACTIVE_VOICE_CHANNEL CMSG_SET_ACTIVE_VOICE_CHANNEL;
        wrath_CMSG_GET_CHANNEL_MEMBER_COUNT CMSG_GET_CHANNEL_MEMBER_COUNT;
        wrath_CMSG_REPORT_PVP_AFK CMSG_REPORT_PVP_AFK;
        wrath_CMSG_GUILD_BANKER_ACTIVATE CMSG_GUILD_BANKER_ACTIVATE;
        wrath_CMSG_GUILD_BANK_QUERY_TAB CMSG_GUILD_BANK_QUERY_TAB;
        wrath_CMSG_GUILD_BANK_SWAP_ITEMS CMSG_GUILD_BANK_SWAP_ITEMS;
        wrath_CMSG_GUILD_BANK_BUY_TAB CMSG_GUILD_BANK_BUY_TAB;
        wrath_CMSG_GUILD_BANK_UPDATE_TAB CMSG_GUILD_BANK_UPDATE_TAB;
        wrath_CMSG_GUILD_BANK_DEPOSIT_MONEY CMSG_GUILD_BANK_DEPOSIT_MONEY;
        wrath_CMSG_GUILD_BANK_WITHDRAW_MONEY CMSG_GUILD_BANK_WITHDRAW_MONEY;
        wrath_MSG_GUILD_BANK_LOG_QUERY_Client MSG_GUILD_BANK_LOG_QUERY_Client;
        wrath_CMSG_SET_CHANNEL_WATCH CMSG_SET_CHANNEL_WATCH;
        wrath_CMSG_CLEAR_CHANNEL_WATCH CMSG_CLEAR_CHANNEL_WATCH;
        wrath_CMSG_SPELLCLICK CMSG_SPELLCLICK;
        wrath_CMSG_GET_MIRRORIMAGE_DATA CMSG_GET_MIRRORIMAGE_DATA;
        wrath_CMSG_OPT_OUT_OF_LOOT CMSG_OPT_OUT_OF_LOOT;
        wrath_MSG_QUERY_GUILD_BANK_TEXT_Client MSG_QUERY_GUILD_BANK_TEXT_Client;
        wrath_CMSG_SET_GUILD_BANK_TEXT CMSG_SET_GUILD_BANK_TEXT;
        wrath_CMSG_GRANT_LEVEL CMSG_GRANT_LEVEL;
        wrath_CMSG_TOTEM_DESTROYED CMSG_TOTEM_DESTROYED;
        wrath_CMSG_SET_PLAYER_DECLINED_NAMES CMSG_SET_PLAYER_DECLINED_NAMES;
        wrath_CMSG_ACCEPT_LEVEL_GRANT CMSG_ACCEPT_LEVEL_GRANT;
        wrath_CMSG_ALTER_APPEARANCE CMSG_ALTER_APPEARANCE;
        wrath_CMSG_CALENDAR_GET_EVENT CMSG_CALENDAR_GET_EVENT;
        wrath_CMSG_CALENDAR_GUILD_FILTER CMSG_CALENDAR_GUILD_FILTER;
        wrath_CMSG_CALENDAR_ARENA_TEAM CMSG_CALENDAR_ARENA_TEAM;
        wrath_CMSG_CALENDAR_ADD_EVENT CMSG_CALENDAR_ADD_EVENT;
        wrath_CMSG_CALENDAR_UPDATE_EVENT CMSG_CALENDAR_UPDATE_EVENT;
        wrath_CMSG_CALENDAR_REMOVE_EVENT CMSG_CALENDAR_REMOVE_EVENT;
        wrath_CMSG_CALENDAR_COPY_EVENT CMSG_CALENDAR_COPY_EVENT;
        wrath_CMSG_CALENDAR_EVENT_INVITE CMSG_CALENDAR_EVENT_INVITE;
        wrath_CMSG_CALENDAR_EVENT_RSVP CMSG_CALENDAR_EVENT_RSVP;
        wrath_CMSG_CALENDAR_EVENT_REMOVE_INVITE CMSG_CALENDAR_EVENT_REMOVE_INVITE;
        wrath_CMSG_CALENDAR_EVENT_STATUS CMSG_CALENDAR_EVENT_STATUS;
        wrath_CMSG_CALENDAR_EVENT_MODERATOR_STATUS CMSG_CALENDAR_EVENT_MODERATOR_STATUS;
        wrath_CMSG_CALENDAR_COMPLAIN CMSG_CALENDAR_COMPLAIN;
        wrath_CMSG_UPDATE_MISSILE_TRAJECTORY CMSG_UPDATE_MISSILE_TRAJECTORY;
        wrath_CMSG_QUERY_INSPECT_ACHIEVEMENTS CMSG_QUERY_INSPECT_ACHIEVEMENTS;
        wrath_CMSG_CHAR_CUSTOMIZE CMSG_CHAR_CUSTOMIZE;
        wrath_CMSG_REQUEST_VEHICLE_SWITCH_SEAT CMSG_REQUEST_VEHICLE_SWITCH_SEAT;
        wrath_CMSG_PET_LEARN_TALENT CMSG_PET_LEARN_TALENT;
        wrath_CMSG_GAMEOBJ_REPORT_USE CMSG_GAMEOBJ_REPORT_USE;
        wrath_CMSG_REMOVE_GLYPH CMSG_REMOVE_GLYPH;
        wrath_CMSG_DISMISS_CRITTER CMSG_DISMISS_CRITTER;
        wrath_CMSG_AUCTION_LIST_PENDING_SALES CMSG_AUCTION_LIST_PENDING_SALES;
        wrath_CMSG_ENABLETAXI CMSG_ENABLETAXI;
        wrath_CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE;
        wrath_CMSG_PLAYER_VEHICLE_ENTER CMSG_PLAYER_VEHICLE_ENTER;
        wrath_CMSG_CONTROLLER_EJECT_PASSENGER CMSG_CONTROLLER_EJECT_PASSENGER;
        wrath_CMSG_ITEM_REFUND_INFO CMSG_ITEM_REFUND_INFO;
        wrath_CMSG_ITEM_REFUND CMSG_ITEM_REFUND;
        wrath_CMSG_CORPSE_MAP_POSITION_QUERY CMSG_CORPSE_MAP_POSITION_QUERY;
        wrath_CMSG_CALENDAR_EVENT_SIGNUP CMSG_CALENDAR_EVENT_SIGNUP;
        wrath_CMSG_EQUIPMENT_SET_SAVE CMSG_EQUIPMENT_SET_SAVE;
        wrath_CMSG_UPDATE_PROJECTILE_POSITION CMSG_UPDATE_PROJECTILE_POSITION;
        wrath_CMSG_LEARN_PREVIEW_TALENTS CMSG_LEARN_PREVIEW_TALENTS;
        wrath_CMSG_LEARN_PREVIEW_TALENTS_PET CMSG_LEARN_PREVIEW_TALENTS_PET;
        wrath_CMSG_MOVE_GRAVITY_DISABLE_ACK CMSG_MOVE_GRAVITY_DISABLE_ACK;
        wrath_CMSG_MOVE_GRAVITY_ENABLE_ACK CMSG_MOVE_GRAVITY_ENABLE_ACK;
        wrath_CMSG_EQUIPMENT_SET_USE CMSG_EQUIPMENT_SET_USE;
        wrath_CMSG_CHAR_FACTION_CHANGE CMSG_CHAR_FACTION_CHANGE;
        wrath_CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE;
        wrath_CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE;
        wrath_CMSG_BATTLEFIELD_MGR_EXIT_REQUEST CMSG_BATTLEFIELD_MGR_EXIT_REQUEST;
        wrath_MSG_SET_RAID_DIFFICULTY_Client MSG_SET_RAID_DIFFICULTY_Client;
        wrath_CMSG_CHAR_RACE_CHANGE CMSG_CHAR_RACE_CHANGE;
        wrath_CMSG_GM_REPORT_LAG CMSG_GM_REPORT_LAG;
        wrath_CMSG_MOVE_SET_COLLISION_HGT_ACK CMSG_MOVE_SET_COLLISION_HGT_ACK;
    } body;
} WrathClientOpcodeContainer;

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_client_opcode_write(WowWorldWriter* writer, const WrathClientOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_client_opcode_read(WowWorldReader* reader, WrathClientOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT void wrath_client_opcode_free(WrathClientOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT char* wrath_client_opcode_to_str(WrathClientOpcodeContainer* opcodes);
typedef struct {
    WowWrathWorldOpcode opcode;

    union {
        wrath_SMSG_CHAR_CREATE SMSG_CHAR_CREATE;
        wrath_SMSG_CHAR_ENUM SMSG_CHAR_ENUM;
        wrath_SMSG_CHAR_DELETE SMSG_CHAR_DELETE;
        wrath_SMSG_NEW_WORLD SMSG_NEW_WORLD;
        wrath_SMSG_TRANSFER_PENDING SMSG_TRANSFER_PENDING;
        wrath_SMSG_TRANSFER_ABORTED SMSG_TRANSFER_ABORTED;
        wrath_SMSG_CHARACTER_LOGIN_FAILED SMSG_CHARACTER_LOGIN_FAILED;
        wrath_SMSG_LOGIN_SETTIMESPEED SMSG_LOGIN_SETTIMESPEED;
        wrath_SMSG_LOGOUT_RESPONSE SMSG_LOGOUT_RESPONSE;
        wrath_SMSG_NAME_QUERY_RESPONSE SMSG_NAME_QUERY_RESPONSE;
        wrath_SMSG_PET_NAME_QUERY_RESPONSE SMSG_PET_NAME_QUERY_RESPONSE;
        wrath_SMSG_GUILD_QUERY_RESPONSE SMSG_GUILD_QUERY_RESPONSE;
        wrath_SMSG_ITEM_QUERY_SINGLE_RESPONSE SMSG_ITEM_QUERY_SINGLE_RESPONSE;
        wrath_SMSG_PAGE_TEXT_QUERY_RESPONSE SMSG_PAGE_TEXT_QUERY_RESPONSE;
        wrath_SMSG_QUEST_QUERY_RESPONSE SMSG_QUEST_QUERY_RESPONSE;
        wrath_SMSG_GAMEOBJECT_QUERY_RESPONSE SMSG_GAMEOBJECT_QUERY_RESPONSE;
        wrath_SMSG_CREATURE_QUERY_RESPONSE SMSG_CREATURE_QUERY_RESPONSE;
        wrath_SMSG_WHO SMSG_WHO;
        wrath_SMSG_WHOIS SMSG_WHOIS;
        wrath_SMSG_CONTACT_LIST SMSG_CONTACT_LIST;
        wrath_SMSG_FRIEND_STATUS SMSG_FRIEND_STATUS;
        wrath_SMSG_GROUP_INVITE SMSG_GROUP_INVITE;
        wrath_SMSG_GROUP_DECLINE SMSG_GROUP_DECLINE;
        wrath_SMSG_GROUP_SET_LEADER SMSG_GROUP_SET_LEADER;
        wrath_SMSG_GROUP_LIST SMSG_GROUP_LIST;
        wrath_SMSG_PARTY_MEMBER_STATS SMSG_PARTY_MEMBER_STATS;
        wrath_SMSG_PARTY_COMMAND_RESULT SMSG_PARTY_COMMAND_RESULT;
        wrath_SMSG_GUILD_INVITE SMSG_GUILD_INVITE;
        wrath_SMSG_GUILD_DECLINE SMSG_GUILD_DECLINE;
        wrath_SMSG_GUILD_INFO SMSG_GUILD_INFO;
        wrath_SMSG_GUILD_ROSTER SMSG_GUILD_ROSTER;
        wrath_SMSG_GUILD_EVENT SMSG_GUILD_EVENT;
        wrath_SMSG_GUILD_COMMAND_RESULT SMSG_GUILD_COMMAND_RESULT;
        wrath_SMSG_MESSAGECHAT SMSG_MESSAGECHAT;
        wrath_SMSG_CHANNEL_NOTIFY SMSG_CHANNEL_NOTIFY;
        wrath_SMSG_CHANNEL_LIST SMSG_CHANNEL_LIST;
        wrath_SMSG_UPDATE_OBJECT SMSG_UPDATE_OBJECT;
        wrath_SMSG_DESTROY_OBJECT SMSG_DESTROY_OBJECT;
        wrath_SMSG_READ_ITEM_OK SMSG_READ_ITEM_OK;
        wrath_SMSG_READ_ITEM_FAILED SMSG_READ_ITEM_FAILED;
        wrath_SMSG_ITEM_COOLDOWN SMSG_ITEM_COOLDOWN;
        wrath_SMSG_GAMEOBJECT_CUSTOM_ANIM SMSG_GAMEOBJECT_CUSTOM_ANIM;
        wrath_MSG_MOVE_START_FORWARD MSG_MOVE_START_FORWARD;
        wrath_MSG_MOVE_START_BACKWARD MSG_MOVE_START_BACKWARD;
        wrath_MSG_MOVE_STOP MSG_MOVE_STOP;
        wrath_MSG_MOVE_START_STRAFE_LEFT MSG_MOVE_START_STRAFE_LEFT;
        wrath_MSG_MOVE_START_STRAFE_RIGHT MSG_MOVE_START_STRAFE_RIGHT;
        wrath_MSG_MOVE_STOP_STRAFE MSG_MOVE_STOP_STRAFE;
        wrath_MSG_MOVE_JUMP MSG_MOVE_JUMP;
        wrath_MSG_MOVE_START_TURN_LEFT MSG_MOVE_START_TURN_LEFT;
        wrath_MSG_MOVE_START_TURN_RIGHT MSG_MOVE_START_TURN_RIGHT;
        wrath_MSG_MOVE_STOP_TURN MSG_MOVE_STOP_TURN;
        wrath_MSG_MOVE_START_PITCH_UP MSG_MOVE_START_PITCH_UP;
        wrath_MSG_MOVE_START_PITCH_DOWN MSG_MOVE_START_PITCH_DOWN;
        wrath_MSG_MOVE_STOP_PITCH MSG_MOVE_STOP_PITCH;
        wrath_MSG_MOVE_SET_RUN_MODE MSG_MOVE_SET_RUN_MODE;
        wrath_MSG_MOVE_SET_WALK_MODE MSG_MOVE_SET_WALK_MODE;
        wrath_MSG_MOVE_TELEPORT_CHEAT_Server MSG_MOVE_TELEPORT_CHEAT_Server;
        wrath_MSG_MOVE_TELEPORT_ACK_Server MSG_MOVE_TELEPORT_ACK_Server;
        wrath_MSG_MOVE_FALL_LAND MSG_MOVE_FALL_LAND;
        wrath_MSG_MOVE_START_SWIM MSG_MOVE_START_SWIM;
        wrath_MSG_MOVE_STOP_SWIM MSG_MOVE_STOP_SWIM;
        wrath_MSG_MOVE_SET_FACING MSG_MOVE_SET_FACING;
        wrath_MSG_MOVE_SET_PITCH MSG_MOVE_SET_PITCH;
        wrath_SMSG_MONSTER_MOVE SMSG_MONSTER_MOVE;
        wrath_SMSG_MOVE_WATER_WALK SMSG_MOVE_WATER_WALK;
        wrath_SMSG_MOVE_LAND_WALK SMSG_MOVE_LAND_WALK;
        wrath_SMSG_FORCE_RUN_SPEED_CHANGE SMSG_FORCE_RUN_SPEED_CHANGE;
        wrath_SMSG_FORCE_RUN_BACK_SPEED_CHANGE SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
        wrath_SMSG_FORCE_SWIM_SPEED_CHANGE SMSG_FORCE_SWIM_SPEED_CHANGE;
        wrath_SMSG_FORCE_MOVE_ROOT SMSG_FORCE_MOVE_ROOT;
        wrath_SMSG_FORCE_MOVE_UNROOT SMSG_FORCE_MOVE_UNROOT;
        wrath_MSG_MOVE_ROOT_Server MSG_MOVE_ROOT_Server;
        wrath_MSG_MOVE_UNROOT_Server MSG_MOVE_UNROOT_Server;
        wrath_MSG_MOVE_HEARTBEAT MSG_MOVE_HEARTBEAT;
        wrath_SMSG_MOVE_KNOCK_BACK SMSG_MOVE_KNOCK_BACK;
        wrath_MSG_MOVE_KNOCK_BACK_Server MSG_MOVE_KNOCK_BACK_Server;
        wrath_SMSG_MOVE_FEATHER_FALL SMSG_MOVE_FEATHER_FALL;
        wrath_SMSG_MOVE_NORMAL_FALL SMSG_MOVE_NORMAL_FALL;
        wrath_SMSG_MOVE_SET_HOVER SMSG_MOVE_SET_HOVER;
        wrath_SMSG_MOVE_UNSET_HOVER SMSG_MOVE_UNSET_HOVER;
        wrath_MSG_MOVE_HOVER MSG_MOVE_HOVER;
        wrath_SMSG_TRIGGER_CINEMATIC SMSG_TRIGGER_CINEMATIC;
        wrath_SMSG_TUTORIAL_FLAGS SMSG_TUTORIAL_FLAGS;
        wrath_SMSG_EMOTE SMSG_EMOTE;
        wrath_SMSG_TEXT_EMOTE SMSG_TEXT_EMOTE;
        wrath_SMSG_INVENTORY_CHANGE_FAILURE SMSG_INVENTORY_CHANGE_FAILURE;
        wrath_SMSG_TRADE_STATUS SMSG_TRADE_STATUS;
        wrath_SMSG_TRADE_STATUS_EXTENDED SMSG_TRADE_STATUS_EXTENDED;
        wrath_SMSG_INITIALIZE_FACTIONS SMSG_INITIALIZE_FACTIONS;
        wrath_SMSG_SET_FACTION_VISIBLE SMSG_SET_FACTION_VISIBLE;
        wrath_SMSG_SET_FACTION_STANDING SMSG_SET_FACTION_STANDING;
        wrath_SMSG_SET_PROFICIENCY SMSG_SET_PROFICIENCY;
        wrath_SMSG_ACTION_BUTTONS SMSG_ACTION_BUTTONS;
        wrath_SMSG_INITIAL_SPELLS SMSG_INITIAL_SPELLS;
        wrath_SMSG_LEARNED_SPELL SMSG_LEARNED_SPELL;
        wrath_SMSG_SUPERCEDED_SPELL SMSG_SUPERCEDED_SPELL;
        wrath_SMSG_CAST_FAILED SMSG_CAST_FAILED;
        wrath_SMSG_SPELL_START SMSG_SPELL_START;
        wrath_SMSG_SPELL_GO SMSG_SPELL_GO;
        wrath_SMSG_SPELL_FAILURE SMSG_SPELL_FAILURE;
        wrath_SMSG_SPELL_COOLDOWN SMSG_SPELL_COOLDOWN;
        wrath_SMSG_COOLDOWN_EVENT SMSG_COOLDOWN_EVENT;
        wrath_SMSG_PET_CAST_FAILED SMSG_PET_CAST_FAILED;
        wrath_MSG_CHANNEL_START_Server MSG_CHANNEL_START_Server;
        wrath_MSG_CHANNEL_UPDATE_Server MSG_CHANNEL_UPDATE_Server;
        wrath_SMSG_AI_REACTION SMSG_AI_REACTION;
        wrath_SMSG_ATTACKSTART SMSG_ATTACKSTART;
        wrath_SMSG_ATTACKSTOP SMSG_ATTACKSTOP;
        wrath_SMSG_INSTANCE_LOCK_WARNING_QUERY SMSG_INSTANCE_LOCK_WARNING_QUERY;
        wrath_SMSG_ATTACKERSTATEUPDATE SMSG_ATTACKERSTATEUPDATE;
        wrath_SMSG_SPELLHEALLOG SMSG_SPELLHEALLOG;
        wrath_SMSG_SPELLENERGIZELOG SMSG_SPELLENERGIZELOG;
        wrath_SMSG_BREAK_TARGET SMSG_BREAK_TARGET;
        wrath_SMSG_BINDPOINTUPDATE SMSG_BINDPOINTUPDATE;
        wrath_SMSG_PLAYERBOUND SMSG_PLAYERBOUND;
        wrath_SMSG_CLIENT_CONTROL_UPDATE SMSG_CLIENT_CONTROL_UPDATE;
        wrath_SMSG_RESURRECT_REQUEST SMSG_RESURRECT_REQUEST;
        wrath_SMSG_LOOT_RESPONSE SMSG_LOOT_RESPONSE;
        wrath_SMSG_LOOT_RELEASE_RESPONSE SMSG_LOOT_RELEASE_RESPONSE;
        wrath_SMSG_LOOT_REMOVED SMSG_LOOT_REMOVED;
        wrath_SMSG_LOOT_MONEY_NOTIFY SMSG_LOOT_MONEY_NOTIFY;
        wrath_SMSG_ITEM_PUSH_RESULT SMSG_ITEM_PUSH_RESULT;
        wrath_SMSG_DUEL_REQUESTED SMSG_DUEL_REQUESTED;
        wrath_SMSG_DUEL_COMPLETE SMSG_DUEL_COMPLETE;
        wrath_SMSG_DUEL_WINNER SMSG_DUEL_WINNER;
        wrath_SMSG_MOUNTRESULT SMSG_MOUNTRESULT;
        wrath_SMSG_MOUNTSPECIAL_ANIM SMSG_MOUNTSPECIAL_ANIM;
        wrath_SMSG_PET_TAME_FAILURE SMSG_PET_TAME_FAILURE;
        wrath_SMSG_PET_NAME_INVALID SMSG_PET_NAME_INVALID;
        wrath_SMSG_PET_SPELLS SMSG_PET_SPELLS;
        wrath_SMSG_PET_MODE SMSG_PET_MODE;
        wrath_SMSG_GOSSIP_MESSAGE SMSG_GOSSIP_MESSAGE;
        wrath_SMSG_NPC_TEXT_UPDATE SMSG_NPC_TEXT_UPDATE;
        wrath_SMSG_QUESTGIVER_STATUS SMSG_QUESTGIVER_STATUS;
        wrath_SMSG_QUESTGIVER_QUEST_LIST SMSG_QUESTGIVER_QUEST_LIST;
        wrath_SMSG_QUESTGIVER_QUEST_DETAILS SMSG_QUESTGIVER_QUEST_DETAILS;
        wrath_SMSG_QUESTGIVER_REQUEST_ITEMS SMSG_QUESTGIVER_REQUEST_ITEMS;
        wrath_SMSG_QUESTGIVER_OFFER_REWARD SMSG_QUESTGIVER_OFFER_REWARD;
        wrath_SMSG_QUESTGIVER_QUEST_INVALID SMSG_QUESTGIVER_QUEST_INVALID;
        wrath_SMSG_QUESTGIVER_QUEST_COMPLETE SMSG_QUESTGIVER_QUEST_COMPLETE;
        wrath_SMSG_QUESTGIVER_QUEST_FAILED SMSG_QUESTGIVER_QUEST_FAILED;
        wrath_SMSG_QUESTUPDATE_FAILED SMSG_QUESTUPDATE_FAILED;
        wrath_SMSG_QUESTUPDATE_FAILEDTIMER SMSG_QUESTUPDATE_FAILEDTIMER;
        wrath_SMSG_QUESTUPDATE_COMPLETE SMSG_QUESTUPDATE_COMPLETE;
        wrath_SMSG_QUESTUPDATE_ADD_KILL SMSG_QUESTUPDATE_ADD_KILL;
        wrath_SMSG_QUESTUPDATE_ADD_ITEM SMSG_QUESTUPDATE_ADD_ITEM;
        wrath_SMSG_QUEST_CONFIRM_ACCEPT SMSG_QUEST_CONFIRM_ACCEPT;
        wrath_SMSG_LIST_INVENTORY SMSG_LIST_INVENTORY;
        wrath_SMSG_SELL_ITEM SMSG_SELL_ITEM;
        wrath_SMSG_BUY_ITEM SMSG_BUY_ITEM;
        wrath_SMSG_BUY_FAILED SMSG_BUY_FAILED;
        wrath_SMSG_SHOWTAXINODES SMSG_SHOWTAXINODES;
        wrath_SMSG_TAXINODE_STATUS SMSG_TAXINODE_STATUS;
        wrath_SMSG_ACTIVATETAXIREPLY SMSG_ACTIVATETAXIREPLY;
        wrath_SMSG_TRAINER_LIST SMSG_TRAINER_LIST;
        wrath_SMSG_TRAINER_BUY_SUCCEEDED SMSG_TRAINER_BUY_SUCCEEDED;
        wrath_SMSG_TRAINER_BUY_FAILED SMSG_TRAINER_BUY_FAILED;
        wrath_SMSG_SHOW_BANK SMSG_SHOW_BANK;
        wrath_SMSG_BUY_BANK_SLOT_RESULT SMSG_BUY_BANK_SLOT_RESULT;
        wrath_SMSG_PETITION_SHOWLIST SMSG_PETITION_SHOWLIST;
        wrath_SMSG_PETITION_SHOW_SIGNATURES SMSG_PETITION_SHOW_SIGNATURES;
        wrath_SMSG_PETITION_SIGN_RESULTS SMSG_PETITION_SIGN_RESULTS;
        wrath_MSG_PETITION_DECLINE MSG_PETITION_DECLINE;
        wrath_SMSG_TURN_IN_PETITION_RESULTS SMSG_TURN_IN_PETITION_RESULTS;
        wrath_SMSG_PETITION_QUERY_RESPONSE SMSG_PETITION_QUERY_RESPONSE;
        wrath_SMSG_NOTIFICATION SMSG_NOTIFICATION;
        wrath_SMSG_PLAYED_TIME SMSG_PLAYED_TIME;
        wrath_SMSG_QUERY_TIME_RESPONSE SMSG_QUERY_TIME_RESPONSE;
        wrath_SMSG_LOG_XPGAIN SMSG_LOG_XPGAIN;
        wrath_SMSG_LEVELUP_INFO SMSG_LEVELUP_INFO;
        wrath_MSG_MINIMAP_PING_Server MSG_MINIMAP_PING_Server;
        wrath_SMSG_ENCHANTMENTLOG SMSG_ENCHANTMENTLOG;
        wrath_SMSG_START_MIRROR_TIMER SMSG_START_MIRROR_TIMER;
        wrath_SMSG_PAUSE_MIRROR_TIMER SMSG_PAUSE_MIRROR_TIMER;
        wrath_SMSG_STOP_MIRROR_TIMER SMSG_STOP_MIRROR_TIMER;
        wrath_SMSG_PONG SMSG_PONG;
        wrath_SMSG_CLEAR_COOLDOWN SMSG_CLEAR_COOLDOWN;
        wrath_SMSG_GAMEOBJECT_PAGETEXT SMSG_GAMEOBJECT_PAGETEXT;
        wrath_SMSG_SPELL_DELAYED SMSG_SPELL_DELAYED;
        wrath_SMSG_QUEST_POI_QUERY_RESPONSE SMSG_QUEST_POI_QUERY_RESPONSE;
        wrath_SMSG_ITEM_TIME_UPDATE SMSG_ITEM_TIME_UPDATE;
        wrath_SMSG_ITEM_ENCHANT_TIME_UPDATE SMSG_ITEM_ENCHANT_TIME_UPDATE;
        wrath_SMSG_AUTH_CHALLENGE SMSG_AUTH_CHALLENGE;
        wrath_SMSG_AUTH_RESPONSE SMSG_AUTH_RESPONSE;
        wrath_MSG_SAVE_GUILD_EMBLEM_Server MSG_SAVE_GUILD_EMBLEM_Server;
        wrath_MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE;
        wrath_SMSG_PLAY_SPELL_VISUAL SMSG_PLAY_SPELL_VISUAL;
        wrath_SMSG_PARTYKILLLOG SMSG_PARTYKILLLOG;
        wrath_SMSG_COMPRESSED_UPDATE_OBJECT SMSG_COMPRESSED_UPDATE_OBJECT;
        wrath_SMSG_PLAY_SPELL_IMPACT SMSG_PLAY_SPELL_IMPACT;
        wrath_SMSG_EXPLORATION_EXPERIENCE SMSG_EXPLORATION_EXPERIENCE;
        wrath_MSG_RANDOM_ROLL_Server MSG_RANDOM_ROLL_Server;
        wrath_SMSG_ENVIRONMENTAL_DAMAGE_LOG SMSG_ENVIRONMENTAL_DAMAGE_LOG;
        wrath_SMSG_LFG_PLAYER_REWARD SMSG_LFG_PLAYER_REWARD;
        wrath_SMSG_LFG_TELEPORT_DENIED SMSG_LFG_TELEPORT_DENIED;
        wrath_SMSG_REMOVED_SPELL SMSG_REMOVED_SPELL;
        wrath_SMSG_GMTICKET_CREATE SMSG_GMTICKET_CREATE;
        wrath_SMSG_GMTICKET_UPDATETEXT SMSG_GMTICKET_UPDATETEXT;
        wrath_SMSG_ACCOUNT_DATA_TIMES SMSG_ACCOUNT_DATA_TIMES;
        wrath_SMSG_UPDATE_ACCOUNT_DATA SMSG_UPDATE_ACCOUNT_DATA;
        wrath_SMSG_GMTICKET_GETTICKET SMSG_GMTICKET_GETTICKET;
        wrath_SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT;
        wrath_SMSG_GAMEOBJECT_DESPAWN_ANIM SMSG_GAMEOBJECT_DESPAWN_ANIM;
        wrath_MSG_CORPSE_QUERY_Server MSG_CORPSE_QUERY_Server;
        wrath_SMSG_GMTICKET_DELETETICKET SMSG_GMTICKET_DELETETICKET;
        wrath_SMSG_GMTICKET_SYSTEMSTATUS SMSG_GMTICKET_SYSTEMSTATUS;
        wrath_SMSG_QUEST_FORCE_REMOVE SMSG_QUEST_FORCE_REMOVE;
        wrath_SMSG_SPIRIT_HEALER_CONFIRM SMSG_SPIRIT_HEALER_CONFIRM;
        wrath_SMSG_GOSSIP_POI SMSG_GOSSIP_POI;
        wrath_SMSG_LOGIN_VERIFY_WORLD SMSG_LOGIN_VERIFY_WORLD;
        wrath_SMSG_SEND_MAIL_RESULT SMSG_SEND_MAIL_RESULT;
        wrath_SMSG_MAIL_LIST_RESULT SMSG_MAIL_LIST_RESULT;
        wrath_SMSG_BATTLEFIELD_LIST SMSG_BATTLEFIELD_LIST;
        wrath_SMSG_ITEM_TEXT_QUERY_RESPONSE SMSG_ITEM_TEXT_QUERY_RESPONSE;
        wrath_SMSG_SPELLLOGMISS SMSG_SPELLLOGMISS;
        wrath_SMSG_SPELLLOGEXECUTE SMSG_SPELLLOGEXECUTE;
        wrath_SMSG_PERIODICAURALOG SMSG_PERIODICAURALOG;
        wrath_SMSG_SPELLDAMAGESHIELD SMSG_SPELLDAMAGESHIELD;
        wrath_SMSG_SPELLNONMELEEDAMAGELOG SMSG_SPELLNONMELEEDAMAGELOG;
        wrath_SMSG_RESURRECT_FAILED SMSG_RESURRECT_FAILED;
        wrath_SMSG_ZONE_UNDER_ATTACK SMSG_ZONE_UNDER_ATTACK;
        wrath_MSG_AUCTION_HELLO_Server MSG_AUCTION_HELLO_Server;
        wrath_SMSG_AUCTION_COMMAND_RESULT SMSG_AUCTION_COMMAND_RESULT;
        wrath_SMSG_AUCTION_LIST_RESULT SMSG_AUCTION_LIST_RESULT;
        wrath_SMSG_AUCTION_OWNER_LIST_RESULT SMSG_AUCTION_OWNER_LIST_RESULT;
        wrath_SMSG_AUCTION_BIDDER_NOTIFICATION SMSG_AUCTION_BIDDER_NOTIFICATION;
        wrath_SMSG_AUCTION_OWNER_NOTIFICATION SMSG_AUCTION_OWNER_NOTIFICATION;
        wrath_SMSG_PROCRESIST SMSG_PROCRESIST;
        wrath_SMSG_DISPEL_FAILED SMSG_DISPEL_FAILED;
        wrath_SMSG_SPELLORDAMAGE_IMMUNE SMSG_SPELLORDAMAGE_IMMUNE;
        wrath_SMSG_AUCTION_BIDDER_LIST_RESULT SMSG_AUCTION_BIDDER_LIST_RESULT;
        wrath_SMSG_SET_FLAT_SPELL_MODIFIER SMSG_SET_FLAT_SPELL_MODIFIER;
        wrath_SMSG_SET_PCT_SPELL_MODIFIER SMSG_SET_PCT_SPELL_MODIFIER;
        wrath_SMSG_CORPSE_RECLAIM_DELAY SMSG_CORPSE_RECLAIM_DELAY;
        wrath_MSG_LIST_STABLED_PETS_Server MSG_LIST_STABLED_PETS_Server;
        wrath_SMSG_STABLE_RESULT SMSG_STABLE_RESULT;
        wrath_MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT;
        wrath_SMSG_PLAY_MUSIC SMSG_PLAY_MUSIC;
        wrath_SMSG_PLAY_OBJECT_SOUND SMSG_PLAY_OBJECT_SOUND;
        wrath_SMSG_SPELLDISPELLOG SMSG_SPELLDISPELLOG;
        wrath_MSG_QUERY_NEXT_MAIL_TIME_Server MSG_QUERY_NEXT_MAIL_TIME_Server;
        wrath_SMSG_RECEIVED_MAIL SMSG_RECEIVED_MAIL;
        wrath_SMSG_RAID_GROUP_ONLY SMSG_RAID_GROUP_ONLY;
        wrath_SMSG_PVP_CREDIT SMSG_PVP_CREDIT;
        wrath_SMSG_AUCTION_REMOVED_NOTIFICATION SMSG_AUCTION_REMOVED_NOTIFICATION;
        wrath_SMSG_SERVER_MESSAGE SMSG_SERVER_MESSAGE;
        wrath_SMSG_LFG_OFFER_CONTINUE SMSG_LFG_OFFER_CONTINUE;
        wrath_SMSG_SHOW_MAILBOX SMSG_SHOW_MAILBOX;
        wrath_SMSG_CANCEL_AUTO_REPEAT SMSG_CANCEL_AUTO_REPEAT;
        wrath_SMSG_STANDSTATE_UPDATE SMSG_STANDSTATE_UPDATE;
        wrath_SMSG_LOOT_ALL_PASSED SMSG_LOOT_ALL_PASSED;
        wrath_SMSG_LOOT_ROLL_WON SMSG_LOOT_ROLL_WON;
        wrath_SMSG_LOOT_START_ROLL SMSG_LOOT_START_ROLL;
        wrath_SMSG_LOOT_ROLL SMSG_LOOT_ROLL;
        wrath_SMSG_LOOT_MASTER_LIST SMSG_LOOT_MASTER_LIST;
        wrath_SMSG_SET_FORCED_REACTIONS SMSG_SET_FORCED_REACTIONS;
        wrath_SMSG_SPELL_FAILED_OTHER SMSG_SPELL_FAILED_OTHER;
        wrath_SMSG_CHAT_PLAYER_NOT_FOUND SMSG_CHAT_PLAYER_NOT_FOUND;
        wrath_MSG_TALENT_WIPE_CONFIRM_Server MSG_TALENT_WIPE_CONFIRM_Server;
        wrath_SMSG_SUMMON_REQUEST SMSG_SUMMON_REQUEST;
        wrath_SMSG_MONSTER_MOVE_TRANSPORT SMSG_MONSTER_MOVE_TRANSPORT;
        wrath_MSG_MOVE_FEATHER_FALL_Server MSG_MOVE_FEATHER_FALL_Server;
        wrath_MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK;
        wrath_SMSG_DUEL_COUNTDOWN SMSG_DUEL_COUNTDOWN;
        wrath_SMSG_AREA_TRIGGER_MESSAGE SMSG_AREA_TRIGGER_MESSAGE;
        wrath_SMSG_LFG_ROLE_CHOSEN SMSG_LFG_ROLE_CHOSEN;
        wrath_SMSG_PLAYER_SKINNED SMSG_PLAYER_SKINNED;
        wrath_MSG_PETITION_RENAME MSG_PETITION_RENAME;
        wrath_SMSG_INIT_WORLD_STATES SMSG_INIT_WORLD_STATES;
        wrath_SMSG_UPDATE_WORLD_STATE SMSG_UPDATE_WORLD_STATE;
        wrath_SMSG_ITEM_NAME_QUERY_RESPONSE SMSG_ITEM_NAME_QUERY_RESPONSE;
        wrath_SMSG_PET_ACTION_FEEDBACK SMSG_PET_ACTION_FEEDBACK;
        wrath_SMSG_CHAR_RENAME SMSG_CHAR_RENAME;
        wrath_SMSG_INSTANCE_SAVE_CREATED SMSG_INSTANCE_SAVE_CREATED;
        wrath_SMSG_RAID_INSTANCE_INFO SMSG_RAID_INSTANCE_INFO;
        wrath_SMSG_PLAY_SOUND SMSG_PLAY_SOUND;
        wrath_SMSG_BATTLEFIELD_STATUS SMSG_BATTLEFIELD_STATUS;
        wrath_MSG_INSPECT_HONOR_STATS_Server MSG_INSPECT_HONOR_STATS_Server;
        wrath_SMSG_FORCE_WALK_SPEED_CHANGE SMSG_FORCE_WALK_SPEED_CHANGE;
        wrath_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
        wrath_SMSG_FORCE_TURN_RATE_CHANGE SMSG_FORCE_TURN_RATE_CHANGE;
        wrath_SMSG_AREA_SPIRIT_HEALER_TIME SMSG_AREA_SPIRIT_HEALER_TIME;
        wrath_SMSG_WARDEN_DATA SMSG_WARDEN_DATA;
        wrath_SMSG_GROUP_JOINED_BATTLEGROUND SMSG_GROUP_JOINED_BATTLEGROUND;
        wrath_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server MSG_BATTLEGROUND_PLAYER_POSITIONS_Server;
        wrath_SMSG_BINDER_CONFIRM SMSG_BINDER_CONFIRM;
        wrath_SMSG_BATTLEGROUND_PLAYER_JOINED SMSG_BATTLEGROUND_PLAYER_JOINED;
        wrath_SMSG_BATTLEGROUND_PLAYER_LEFT SMSG_BATTLEGROUND_PLAYER_LEFT;
        wrath_SMSG_ADDON_INFO SMSG_ADDON_INFO;
        wrath_SMSG_PET_UNLEARN_CONFIRM SMSG_PET_UNLEARN_CONFIRM;
        wrath_SMSG_PARTY_MEMBER_STATS_FULL SMSG_PARTY_MEMBER_STATS_FULL;
        wrath_SMSG_WEATHER SMSG_WEATHER;
        wrath_SMSG_RAID_INSTANCE_MESSAGE SMSG_RAID_INSTANCE_MESSAGE;
        wrath_SMSG_COMPRESSED_MOVES SMSG_COMPRESSED_MOVES;
        wrath_SMSG_CHAT_RESTRICTED SMSG_CHAT_RESTRICTED;
        wrath_SMSG_SPLINE_SET_RUN_SPEED SMSG_SPLINE_SET_RUN_SPEED;
        wrath_SMSG_SPLINE_SET_RUN_BACK_SPEED SMSG_SPLINE_SET_RUN_BACK_SPEED;
        wrath_SMSG_SPLINE_SET_SWIM_SPEED SMSG_SPLINE_SET_SWIM_SPEED;
        wrath_SMSG_SPLINE_SET_WALK_SPEED SMSG_SPLINE_SET_WALK_SPEED;
        wrath_SMSG_SPLINE_SET_SWIM_BACK_SPEED SMSG_SPLINE_SET_SWIM_BACK_SPEED;
        wrath_SMSG_SPLINE_SET_TURN_RATE SMSG_SPLINE_SET_TURN_RATE;
        wrath_SMSG_SPLINE_MOVE_UNROOT SMSG_SPLINE_MOVE_UNROOT;
        wrath_SMSG_SPLINE_MOVE_FEATHER_FALL SMSG_SPLINE_MOVE_FEATHER_FALL;
        wrath_SMSG_SPLINE_MOVE_NORMAL_FALL SMSG_SPLINE_MOVE_NORMAL_FALL;
        wrath_SMSG_SPLINE_MOVE_SET_HOVER SMSG_SPLINE_MOVE_SET_HOVER;
        wrath_SMSG_SPLINE_MOVE_UNSET_HOVER SMSG_SPLINE_MOVE_UNSET_HOVER;
        wrath_SMSG_SPLINE_MOVE_WATER_WALK SMSG_SPLINE_MOVE_WATER_WALK;
        wrath_SMSG_SPLINE_MOVE_LAND_WALK SMSG_SPLINE_MOVE_LAND_WALK;
        wrath_SMSG_SPLINE_MOVE_START_SWIM SMSG_SPLINE_MOVE_START_SWIM;
        wrath_SMSG_SPLINE_MOVE_STOP_SWIM SMSG_SPLINE_MOVE_STOP_SWIM;
        wrath_SMSG_SPLINE_MOVE_SET_RUN_MODE SMSG_SPLINE_MOVE_SET_RUN_MODE;
        wrath_SMSG_SPLINE_MOVE_SET_WALK_MODE SMSG_SPLINE_MOVE_SET_WALK_MODE;
        wrath_MSG_MOVE_TIME_SKIPPED_Server MSG_MOVE_TIME_SKIPPED_Server;
        wrath_SMSG_SPLINE_MOVE_ROOT SMSG_SPLINE_MOVE_ROOT;
        wrath_SMSG_INVALIDATE_PLAYER SMSG_INVALIDATE_PLAYER;
        wrath_SMSG_INSTANCE_RESET SMSG_INSTANCE_RESET;
        wrath_SMSG_INSTANCE_RESET_FAILED SMSG_INSTANCE_RESET_FAILED;
        wrath_SMSG_UPDATE_LAST_INSTANCE SMSG_UPDATE_LAST_INSTANCE;
        wrath_MSG_RAID_TARGET_UPDATE_Server MSG_RAID_TARGET_UPDATE_Server;
        wrath_MSG_RAID_READY_CHECK_Server MSG_RAID_READY_CHECK_Server;
        wrath_SMSG_PET_ACTION_SOUND SMSG_PET_ACTION_SOUND;
        wrath_SMSG_PET_DISMISS_SOUND SMSG_PET_DISMISS_SOUND;
        wrath_SMSG_GM_TICKET_STATUS_UPDATE SMSG_GM_TICKET_STATUS_UPDATE;
        wrath_MSG_SET_DUNGEON_DIFFICULTY_Server MSG_SET_DUNGEON_DIFFICULTY_Server;
        wrath_SMSG_UPDATE_INSTANCE_OWNERSHIP SMSG_UPDATE_INSTANCE_OWNERSHIP;
        wrath_SMSG_CHAT_PLAYER_AMBIGUOUS SMSG_CHAT_PLAYER_AMBIGUOUS;
        wrath_SMSG_SPELLINSTAKILLLOG SMSG_SPELLINSTAKILLLOG;
        wrath_SMSG_SPELL_UPDATE_CHAIN_TARGETS SMSG_SPELL_UPDATE_CHAIN_TARGETS;
        wrath_SMSG_SPELLSTEALLOG SMSG_SPELLSTEALLOG;
        wrath_SMSG_DEFENSE_MESSAGE SMSG_DEFENSE_MESSAGE;
        wrath_SMSG_INSTANCE_DIFFICULTY SMSG_INSTANCE_DIFFICULTY;
        wrath_SMSG_MOTD SMSG_MOTD;
        wrath_SMSG_MOVE_SET_CAN_FLY SMSG_MOVE_SET_CAN_FLY;
        wrath_SMSG_MOVE_UNSET_CAN_FLY SMSG_MOVE_UNSET_CAN_FLY;
        wrath_SMSG_ARENA_TEAM_COMMAND_RESULT SMSG_ARENA_TEAM_COMMAND_RESULT;
        wrath_SMSG_ARENA_TEAM_QUERY_RESPONSE SMSG_ARENA_TEAM_QUERY_RESPONSE;
        wrath_SMSG_ARENA_TEAM_ROSTER SMSG_ARENA_TEAM_ROSTER;
        wrath_SMSG_ARENA_TEAM_INVITE SMSG_ARENA_TEAM_INVITE;
        wrath_SMSG_ARENA_TEAM_EVENT SMSG_ARENA_TEAM_EVENT;
        wrath_MSG_MOVE_START_ASCEND MSG_MOVE_START_ASCEND;
        wrath_MSG_MOVE_STOP_ASCEND MSG_MOVE_STOP_ASCEND;
        wrath_SMSG_ARENA_TEAM_STATS SMSG_ARENA_TEAM_STATS;
        wrath_SMSG_UPDATE_LFG_LIST SMSG_UPDATE_LFG_LIST;
        wrath_SMSG_LFG_PROPOSAL_UPDATE SMSG_LFG_PROPOSAL_UPDATE;
        wrath_SMSG_LFG_ROLE_CHECK_UPDATE SMSG_LFG_ROLE_CHECK_UPDATE;
        wrath_SMSG_LFG_JOIN_RESULT SMSG_LFG_JOIN_RESULT;
        wrath_SMSG_LFG_QUEUE_STATUS SMSG_LFG_QUEUE_STATUS;
        wrath_SMSG_LFG_UPDATE_PLAYER SMSG_LFG_UPDATE_PLAYER;
        wrath_SMSG_LFG_UPDATE_PARTY SMSG_LFG_UPDATE_PARTY;
        wrath_SMSG_LFG_UPDATE_SEARCH SMSG_LFG_UPDATE_SEARCH;
        wrath_SMSG_LFG_BOOT_PROPOSAL_UPDATE SMSG_LFG_BOOT_PROPOSAL_UPDATE;
        wrath_SMSG_LFG_PLAYER_INFO SMSG_LFG_PLAYER_INFO;
        wrath_SMSG_LFG_PARTY_INFO SMSG_LFG_PARTY_INFO;
        wrath_SMSG_TITLE_EARNED SMSG_TITLE_EARNED;
        wrath_SMSG_ARENA_ERROR SMSG_ARENA_ERROR;
        wrath_MSG_INSPECT_ARENA_TEAMS_Server MSG_INSPECT_ARENA_TEAMS_Server;
        wrath_SMSG_DEATH_RELEASE_LOC SMSG_DEATH_RELEASE_LOC;
        wrath_MSG_MOVE_SET_FLIGHT_SPEED_Server MSG_MOVE_SET_FLIGHT_SPEED_Server;
        wrath_MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEED;
        wrath_SMSG_FORCE_FLIGHT_SPEED_CHANGE SMSG_FORCE_FLIGHT_SPEED_CHANGE;
        wrath_SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE;
        wrath_SMSG_SPLINE_SET_FLIGHT_SPEED SMSG_SPLINE_SET_FLIGHT_SPEED;
        wrath_SMSG_SPLINE_SET_FLIGHT_BACK_SPEED SMSG_SPLINE_SET_FLIGHT_BACK_SPEED;
        wrath_SMSG_FLIGHT_SPLINE_SYNC SMSG_FLIGHT_SPLINE_SYNC;
        wrath_SMSG_REALM_SPLIT SMSG_REALM_SPLIT;
        wrath_SMSG_TIME_SYNC_REQ SMSG_TIME_SYNC_REQ;
        wrath_SMSG_RESET_FAILED_NOTIFY SMSG_RESET_FAILED_NOTIFY;
        wrath_SMSG_UPDATE_COMBO_POINTS SMSG_UPDATE_COMBO_POINTS;
        wrath_MSG_MOVE_START_DESCEND MSG_MOVE_START_DESCEND;
        wrath_SMSG_DISMOUNT SMSG_DISMOUNT;
        wrath_MSG_MOVE_UPDATE_CAN_FLY_Server MSG_MOVE_UPDATE_CAN_FLY_Server;
        wrath_MSG_RAID_READY_CHECK_CONFIRM_Server MSG_RAID_READY_CHECK_CONFIRM_Server;
        wrath_SMSG_GM_MESSAGECHAT SMSG_GM_MESSAGECHAT;
        wrath_SMSG_CLEAR_TARGET SMSG_CLEAR_TARGET;
        wrath_SMSG_CROSSED_INEBRIATION_THRESHOLD SMSG_CROSSED_INEBRIATION_THRESHOLD;
        wrath_SMSG_KICK_REASON SMSG_KICK_REASON;
        wrath_SMSG_COMPLAIN_RESULT SMSG_COMPLAIN_RESULT;
        wrath_SMSG_FEATURE_SYSTEM_STATUS SMSG_FEATURE_SYSTEM_STATUS;
        wrath_SMSG_CHANNEL_MEMBER_COUNT SMSG_CHANNEL_MEMBER_COUNT;
        wrath_SMSG_GUILD_BANK_LIST SMSG_GUILD_BANK_LIST;
        wrath_MSG_GUILD_BANK_LOG_QUERY_Server MSG_GUILD_BANK_LOG_QUERY_Server;
        wrath_SMSG_USERLIST_ADD SMSG_USERLIST_ADD;
        wrath_SMSG_USERLIST_REMOVE SMSG_USERLIST_REMOVE;
        wrath_SMSG_USERLIST_UPDATE SMSG_USERLIST_UPDATE;
        wrath_SMSG_INSPECT_TALENT SMSG_INSPECT_TALENT;
        wrath_SMSG_LOOT_LIST SMSG_LOOT_LIST;
        wrath_MSG_GUILD_PERMISSIONS_Server MSG_GUILD_PERMISSIONS_Server;
        wrath_MSG_GUILD_BANK_MONEY_WITHDRAWN_Server MSG_GUILD_BANK_MONEY_WITHDRAWN_Server;
        wrath_MSG_GUILD_EVENT_LOG_QUERY_Server MSG_GUILD_EVENT_LOG_QUERY_Server;
        wrath_SMSG_MIRRORIMAGE_DATA SMSG_MIRRORIMAGE_DATA;
        wrath_MSG_QUERY_GUILD_BANK_TEXT_Server MSG_QUERY_GUILD_BANK_TEXT_Server;
        wrath_SMSG_OVERRIDE_LIGHT SMSG_OVERRIDE_LIGHT;
        wrath_SMSG_TOTEM_CREATED SMSG_TOTEM_CREATED;
        wrath_SMSG_QUESTGIVER_STATUS_MULTIPLE SMSG_QUESTGIVER_STATUS_MULTIPLE;
        wrath_SMSG_SET_PLAYER_DECLINED_NAMES_RESULT SMSG_SET_PLAYER_DECLINED_NAMES_RESULT;
        wrath_SMSG_SEND_UNLEARN_SPELLS SMSG_SEND_UNLEARN_SPELLS;
        wrath_SMSG_PROPOSE_LEVEL_GRANT SMSG_PROPOSE_LEVEL_GRANT;
        wrath_SMSG_REFER_A_FRIEND_FAILURE SMSG_REFER_A_FRIEND_FAILURE;
        wrath_SMSG_SPLINE_MOVE_SET_FLYING SMSG_SPLINE_MOVE_SET_FLYING;
        wrath_SMSG_SPLINE_MOVE_UNSET_FLYING SMSG_SPLINE_MOVE_UNSET_FLYING;
        wrath_SMSG_BARBER_SHOP_RESULT SMSG_BARBER_SHOP_RESULT;
        wrath_SMSG_CALENDAR_SEND_CALENDAR SMSG_CALENDAR_SEND_CALENDAR;
        wrath_SMSG_CALENDAR_SEND_EVENT SMSG_CALENDAR_SEND_EVENT;
        wrath_SMSG_CALENDAR_FILTER_GUILD SMSG_CALENDAR_FILTER_GUILD;
        wrath_SMSG_CALENDAR_ARENA_TEAM SMSG_CALENDAR_ARENA_TEAM;
        wrath_SMSG_CALENDAR_EVENT_INVITE SMSG_CALENDAR_EVENT_INVITE;
        wrath_SMSG_CALENDAR_EVENT_INVITE_REMOVED SMSG_CALENDAR_EVENT_INVITE_REMOVED;
        wrath_SMSG_CALENDAR_EVENT_STATUS SMSG_CALENDAR_EVENT_STATUS;
        wrath_SMSG_CALENDAR_COMMAND_RESULT SMSG_CALENDAR_COMMAND_RESULT;
        wrath_SMSG_CALENDAR_RAID_LOCKOUT_ADDED SMSG_CALENDAR_RAID_LOCKOUT_ADDED;
        wrath_SMSG_CALENDAR_RAID_LOCKOUT_REMOVED SMSG_CALENDAR_RAID_LOCKOUT_REMOVED;
        wrath_SMSG_CALENDAR_EVENT_INVITE_ALERT SMSG_CALENDAR_EVENT_INVITE_ALERT;
        wrath_SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT;
        wrath_SMSG_CALENDAR_EVENT_REMOVED_ALERT SMSG_CALENDAR_EVENT_REMOVED_ALERT;
        wrath_SMSG_CALENDAR_EVENT_UPDATED_ALERT SMSG_CALENDAR_EVENT_UPDATED_ALERT;
        wrath_SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT;
        wrath_SMSG_CALENDAR_SEND_NUM_PENDING SMSG_CALENDAR_SEND_NUM_PENDING;
        wrath_MSG_MOVE_SET_PITCH_RATE_Server MSG_MOVE_SET_PITCH_RATE_Server;
        wrath_SMSG_FORCE_PITCH_RATE_CHANGE SMSG_FORCE_PITCH_RATE_CHANGE;
        wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES SMSG_CALENDAR_EVENT_INVITE_NOTES;
        wrath_SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT;
        wrath_SMSG_UPDATE_ACCOUNT_DATA_COMPLETE SMSG_UPDATE_ACCOUNT_DATA_COMPLETE;
        wrath_SMSG_TRIGGER_MOVIE SMSG_TRIGGER_MOVIE;
        wrath_SMSG_ACHIEVEMENT_EARNED SMSG_ACHIEVEMENT_EARNED;
        wrath_SMSG_CRITERIA_UPDATE SMSG_CRITERIA_UPDATE;
        wrath_SMSG_RESPOND_INSPECT_ACHIEVEMENTS SMSG_RESPOND_INSPECT_ACHIEVEMENTS;
        wrath_SMSG_QUESTUPDATE_ADD_PVP_KILL SMSG_QUESTUPDATE_ADD_PVP_KILL;
        wrath_SMSG_CALENDAR_RAID_LOCKOUT_UPDATED SMSG_CALENDAR_RAID_LOCKOUT_UPDATED;
        wrath_SMSG_CHAR_CUSTOMIZE SMSG_CHAR_CUSTOMIZE;
        wrath_SMSG_SET_PHASE_SHIFT SMSG_SET_PHASE_SHIFT;
        wrath_SMSG_ALL_ACHIEVEMENT_DATA SMSG_ALL_ACHIEVEMENT_DATA;
        wrath_SMSG_POWER_UPDATE SMSG_POWER_UPDATE;
        wrath_SMSG_HIGHEST_THREAT_UPDATE SMSG_HIGHEST_THREAT_UPDATE;
        wrath_SMSG_THREAT_UPDATE SMSG_THREAT_UPDATE;
        wrath_SMSG_THREAT_REMOVE SMSG_THREAT_REMOVE;
        wrath_SMSG_THREAT_CLEAR SMSG_THREAT_CLEAR;
        wrath_SMSG_CONVERT_RUNE SMSG_CONVERT_RUNE;
        wrath_SMSG_RESYNC_RUNES SMSG_RESYNC_RUNES;
        wrath_SMSG_ADD_RUNE_POWER SMSG_ADD_RUNE_POWER;
        wrath_SMSG_AUCTION_LIST_PENDING_SALES SMSG_AUCTION_LIST_PENDING_SALES;
        wrath_SMSG_MODIFY_COOLDOWN SMSG_MODIFY_COOLDOWN;
        wrath_SMSG_PET_UPDATE_COMBO_POINTS SMSG_PET_UPDATE_COMBO_POINTS;
        wrath_SMSG_PRE_RESURRECT SMSG_PRE_RESURRECT;
        wrath_SMSG_AURA_UPDATE_ALL SMSG_AURA_UPDATE_ALL;
        wrath_SMSG_AURA_UPDATE SMSG_AURA_UPDATE;
        wrath_SMSG_SERVER_FIRST_ACHIEVEMENT SMSG_SERVER_FIRST_ACHIEVEMENT;
        wrath_SMSG_PET_LEARNED_SPELL SMSG_PET_LEARNED_SPELL;
        wrath_SMSG_PET_UNLEARNED_SPELL SMSG_PET_UNLEARNED_SPELL;
        wrath_SMSG_CRITERIA_DELETED SMSG_CRITERIA_DELETED;
        wrath_SMSG_ACHIEVEMENT_DELETED SMSG_ACHIEVEMENT_DELETED;
        wrath_SMSG_PLAYER_VEHICLE_DATA SMSG_PLAYER_VEHICLE_DATA;
        wrath_SMSG_PET_GUIDS SMSG_PET_GUIDS;
        wrath_SMSG_CLIENTCACHE_VERSION SMSG_CLIENTCACHE_VERSION;
        wrath_SMSG_ITEM_REFUND_INFO_RESPONSE SMSG_ITEM_REFUND_INFO_RESPONSE;
        wrath_SMSG_ITEM_REFUND_RESULT SMSG_ITEM_REFUND_RESULT;
        wrath_SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE;
        wrath_SMSG_EQUIPMENT_SET_LIST SMSG_EQUIPMENT_SET_LIST;
        wrath_SMSG_SET_PROJECTILE_POSITION SMSG_SET_PROJECTILE_POSITION;
        wrath_SMSG_TALENTS_INFO SMSG_TALENTS_INFO;
        wrath_SMSG_ARENA_UNIT_DESTROYED SMSG_ARENA_UNIT_DESTROYED;
        wrath_SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED;
        wrath_SMSG_MOVE_GRAVITY_DISABLE SMSG_MOVE_GRAVITY_DISABLE;
        wrath_SMSG_MOVE_GRAVITY_ENABLE SMSG_MOVE_GRAVITY_ENABLE;
        wrath_MSG_MOVE_GRAVITY_CHNG_Server MSG_MOVE_GRAVITY_CHNG_Server;
        wrath_SMSG_SPLINE_MOVE_GRAVITY_DISABLE SMSG_SPLINE_MOVE_GRAVITY_DISABLE;
        wrath_SMSG_SPLINE_MOVE_GRAVITY_ENABLE SMSG_SPLINE_MOVE_GRAVITY_ENABLE;
        wrath_SMSG_EQUIPMENT_SET_USE_RESULT SMSG_EQUIPMENT_SET_USE_RESULT;
        wrath_SMSG_CHAR_FACTION_CHANGE SMSG_CHAR_FACTION_CHANGE;
        wrath_SMSG_BATTLEFIELD_MGR_ENTRY_INVITE SMSG_BATTLEFIELD_MGR_ENTRY_INVITE;
        wrath_SMSG_BATTLEFIELD_MGR_ENTERED SMSG_BATTLEFIELD_MGR_ENTERED;
        wrath_SMSG_BATTLEFIELD_MGR_QUEUE_INVITE SMSG_BATTLEFIELD_MGR_QUEUE_INVITE;
        wrath_SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE;
        wrath_SMSG_BATTLEFIELD_MGR_EJECT_PENDING SMSG_BATTLEFIELD_MGR_EJECT_PENDING;
        wrath_SMSG_BATTLEFIELD_MGR_EJECTED SMSG_BATTLEFIELD_MGR_EJECTED;
        wrath_SMSG_BATTLEFIELD_MGR_STATE_CHANGE SMSG_BATTLEFIELD_MGR_STATE_CHANGE;
        wrath_MSG_SET_RAID_DIFFICULTY_Server MSG_SET_RAID_DIFFICULTY_Server;
        wrath_SMSG_GMRESPONSE_RECEIVED SMSG_GMRESPONSE_RECEIVED;
        wrath_SMSG_GMRESPONSE_STATUS_UPDATE SMSG_GMRESPONSE_STATUS_UPDATE;
        wrath_SMSG_WORLD_STATE_UI_TIMER_UPDATE SMSG_WORLD_STATE_UI_TIMER_UPDATE;
        wrath_SMSG_TALENTS_INVOLUNTARILY_RESET SMSG_TALENTS_INVOLUNTARILY_RESET;
        wrath_SMSG_QUERY_QUESTS_COMPLETED_RESPONSE SMSG_QUERY_QUESTS_COMPLETED_RESPONSE;
        wrath_SMSG_CAMERA_SHAKE SMSG_CAMERA_SHAKE;
        wrath_SMSG_SOCKET_GEMS_RESULT SMSG_SOCKET_GEMS_RESULT;
        wrath_SMSG_REDIRECT_CLIENT SMSG_REDIRECT_CLIENT;
        wrath_SMSG_MOVE_SET_COLLISION_HGT SMSG_MOVE_SET_COLLISION_HGT;
        wrath_SMSG_MULTIPLE_MOVES SMSG_MULTIPLE_MOVES;
    } body;
} WrathServerOpcodeContainer;

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_server_opcode_write(WowWorldWriter* writer, const WrathServerOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult wrath_server_opcode_read(WowWorldReader* reader, WrathServerOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT void wrath_server_opcode_free(WrathServerOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT char* wrath_server_opcode_to_str(WrathServerOpcodeContainer* opcodes);
#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* WOW_WORLD_MESSAGES_WRATH_H */
