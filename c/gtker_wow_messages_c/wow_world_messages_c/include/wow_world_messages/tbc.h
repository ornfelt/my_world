#ifndef WOW_WORLD_MESSAGES_TBC_H
#define WOW_WORLD_MESSAGES_TBC_H

/* clang-format off */

#include "wow_world_messages/wow_world_messages.h"
#include "wow_world_messages/all.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
typedef enum {
    TBC_ACCOUNT_DATA_TYPE_GLOBAL_CONFIG_CACHE = 0,
    TBC_ACCOUNT_DATA_TYPE_PER_CHARACTER_CONFIG_CACHE = 1,
    TBC_ACCOUNT_DATA_TYPE_GLOBAL_BINDINGS_CACHE = 2,
    TBC_ACCOUNT_DATA_TYPE_PER_CHARACTER_BINDINGS_CACHE = 3,
    TBC_ACCOUNT_DATA_TYPE_GLOBAL_MACROS_CACHE = 4,
    TBC_ACCOUNT_DATA_TYPE_PER_CHARACTER_MACROS_CACHE = 5,
    TBC_ACCOUNT_DATA_TYPE_PER_CHARACTER_LAYOUT_CACHE = 6,
    TBC_ACCOUNT_DATA_TYPE_PER_CHARACTER_CHAT_CACHE = 7,
    TBC_ACCOUNT_DATA_TYPE_NUM_ACCOUNT_DATA_TYPES = 8
} tbc_AccountDataType;

typedef enum {
    TBC_ACTIVATE_TAXI_REPLY_OK = 0,
    TBC_ACTIVATE_TAXI_REPLY_UNSPECIFIED_SERVER_ERROR = 1,
    TBC_ACTIVATE_TAXI_REPLY_NO_SUCH_PATH = 2,
    TBC_ACTIVATE_TAXI_REPLY_NOT_ENOUGH_MONEY = 3,
    TBC_ACTIVATE_TAXI_REPLY_TOO_FAR_AWAY = 4,
    TBC_ACTIVATE_TAXI_REPLY_NO_VENDOR_NEARBY = 5,
    TBC_ACTIVATE_TAXI_REPLY_NOT_VISITED = 6,
    TBC_ACTIVATE_TAXI_REPLY_PLAYER_BUSY = 7,
    TBC_ACTIVATE_TAXI_REPLY_PLAYER_ALREADY_MOUNTED = 8,
    TBC_ACTIVATE_TAXI_REPLY_PLAYER_SHAPE_SHIFTED = 9,
    TBC_ACTIVATE_TAXI_REPLY_PLAYER_MOVING = 10,
    TBC_ACTIVATE_TAXI_REPLY_SAME_NODE = 11,
    TBC_ACTIVATE_TAXI_REPLY_NOT_STANDING = 12
} tbc_ActivateTaxiReply;

typedef enum {
    TBC_AI_REACTION_ALERT = 0,
    TBC_AI_REACTION_FRIENDLY = 1,
    TBC_AI_REACTION_HOSTILE = 2,
    TBC_AI_REACTION_AFRAID = 3,
    TBC_AI_REACTION_DESTROY = 4
} tbc_AiReaction;

typedef enum {
    TBC_AREA_NONE = 0,
    TBC_AREA_DUN_MOROGH = 1,
    TBC_AREA_LONGSHORE = 2,
    TBC_AREA_BADLANDS = 3,
    TBC_AREA_BLASTED_LANDS = 4,
    TBC_AREA_BLACKWATER_COVE = 7,
    TBC_AREA_SWAMP_OF_SORROWS = 8,
    TBC_AREA_NORTHSHIRE_VALLEY = 9,
    TBC_AREA_DUSKWOOD = 10,
    TBC_AREA_WETLANDS = 11,
    TBC_AREA_ELWYNN_FOREST = 12,
    TBC_AREA_THE_WORLD_TREE = 13,
    TBC_AREA_DUROTAR = 14,
    TBC_AREA_DUSTWALLOW_MARSH = 15,
    TBC_AREA_AZSHARA = 16,
    TBC_AREA_THE_BARRENS = 17,
    TBC_AREA_CRYSTAL_LAKE = 18,
    TBC_AREA_ZUL_GURUB = 19,
    TBC_AREA_MOONBROOK = 20,
    TBC_AREA_KUL_TIRAS = 21,
    TBC_AREA_PROGRAMMER_ISLE = 22,
    TBC_AREA_NORTHSHIRE_RIVER = 23,
    TBC_AREA_NORTHSHIRE_ABBEY = 24,
    TBC_AREA_BLACKROCK_MOUNTAIN = 25,
    TBC_AREA_LIGHTHOUSE = 26,
    TBC_AREA_WESTERN_PLAGUELANDS = 28,
    TBC_AREA_NINE = 30,
    TBC_AREA_THE_CEMETARY = 32,
    TBC_AREA_STRANGLETHORN_VALE = 33,
    TBC_AREA_ECHO_RIDGE_MINE = 34,
    TBC_AREA_BOOTY_BAY = 35,
    TBC_AREA_ALTERAC_MOUNTAINS = 36,
    TBC_AREA_LAKE_NAZFERITI = 37,
    TBC_AREA_LOCH_MODAN = 38,
    TBC_AREA_WESTFALL = 40,
    TBC_AREA_DEADWIND_PASS = 41,
    TBC_AREA_DARKSHIRE = 42,
    TBC_AREA_WILD_SHORE = 43,
    TBC_AREA_REDRIDGE_MOUNTAINS = 44,
    TBC_AREA_ARATHI_HIGHLANDS = 45,
    TBC_AREA_BURNING_STEPPES = 46,
    TBC_AREA_THE_HINTERLANDS = 47,
    TBC_AREA_DEAD_MANS_HOLE = 49,
    TBC_AREA_SEARING_GORGE = 51,
    TBC_AREA_THIEVES_CAMP = 53,
    TBC_AREA_JASPERLODE_MINE = 54,
    TBC_AREA_VALLEY_OF_HEROES_UNUSED = 55,
    TBC_AREA_HEROES_VIGIL = 56,
    TBC_AREA_FARGODEEP_MINE = 57,
    TBC_AREA_NORTHSHIRE_VINEYARDS = 59,
    TBC_AREA_FORESTS_EDGE = 60,
    TBC_AREA_THUNDER_FALLS = 61,
    TBC_AREA_BRACKWELL_PUMPKIN_PATCH = 62,
    TBC_AREA_THE_STONEFIELD_FARM = 63,
    TBC_AREA_THE_MACLURE_VINEYARDS = 64,
    TBC_AREA_REUSE_ME_THREE = 65,
    TBC_AREA_REUSE_ME_SIX = 66,
    TBC_AREA_REUSE_ME_FIVE = 67,
    TBC_AREA_LAKE_EVERSTILL = 68,
    TBC_AREA_LAKESHIRE = 69,
    TBC_AREA_STONEWATCH = 70,
    TBC_AREA_STONEWATCH_FALLS = 71,
    TBC_AREA_THE_DARK_PORTAL = 72,
    TBC_AREA_THE_TAINTED_SCAR = 73,
    TBC_AREA_POOL_OF_TEARS = 74,
    TBC_AREA_STONARD = 75,
    TBC_AREA_FALLOW_SANCTUARY = 76,
    TBC_AREA_ANVILMAR = 77,
    TBC_AREA_STORMWIND_MOUNTAINS = 80,
    TBC_AREA_JEFF_NE_QUADRANT_CHANGED = 81,
    TBC_AREA_JEFF_NW_QUADRANT = 82,
    TBC_AREA_JEFF_SE_QUADRANT = 83,
    TBC_AREA_JEFF_SW_QUADRANT = 84,
    TBC_AREA_TIRISFAL_GLADES = 85,
    TBC_AREA_STONE_CAIRN_LAKE = 86,
    TBC_AREA_GOLDSHIRE = 87,
    TBC_AREA_EASTVALE_LOGGING_CAMP = 88,
    TBC_AREA_MIRROR_LAKE_ORCHARD = 89,
    TBC_AREA_TOWER_OF_AZORA = 91,
    TBC_AREA_MIRROR_LAKE = 92,
    TBC_AREA_VUL_GOL_OGRE_MOUND = 93,
    TBC_AREA_RAVEN_HILL = 94,
    TBC_AREA_REDRIDGE_CANYONS = 95,
    TBC_AREA_TOWER_OF_ILGALAR = 96,
    TBC_AREA_ALTHERS_MILL = 97,
    TBC_AREA_RETHBAN_CAVERNS = 98,
    TBC_AREA_REBEL_CAMP = 99,
    TBC_AREA_NESINGWARYS_EXPEDITION = 100,
    TBC_AREA_KURZENS_COMPOUND = 101,
    TBC_AREA_RUINS_OF_ZUL_KUNDA = 102,
    TBC_AREA_RUINS_OF_ZUL_MAMWE = 103,
    TBC_AREA_THE_VILE_REEF = 104,
    TBC_AREA_MOSH_OGG_OGRE_MOUND = 105,
    TBC_AREA_THE_STOCKPILE = 106,
    TBC_AREA_SALDEANS_FARM = 107,
    TBC_AREA_SENTINEL_HILL = 108,
    TBC_AREA_FURLBROWS_PUMPKIN_FARM = 109,
    TBC_AREA_JANGOLODE_MINE = 111,
    TBC_AREA_GOLD_COAST_QUARRY = 113,
    TBC_AREA_WESTFALL_LIGHTHOUSE = 115,
    TBC_AREA_MISTY_VALLEY = 116,
    TBC_AREA_GROM_GOL_BASE_CAMP = 117,
    TBC_AREA_WHELGARS_EXCAVATION_SITE = 118,
    TBC_AREA_WESTBROOK_GARRISON = 120,
    TBC_AREA_TRANQUIL_GARDENS_CEMETERY = 121,
    TBC_AREA_ZUULDAIA_RUINS = 122,
    TBC_AREA_BAL_LAL_RUINS = 123,
    TBC_AREA_KAL_AI_RUINS = 125,
    TBC_AREA_TKASHI_RUINS = 126,
    TBC_AREA_BALIA_MAH_RUINS = 127,
    TBC_AREA_ZIATA_JAI_RUINS = 128,
    TBC_AREA_MIZJAH_RUINS = 129,
    TBC_AREA_SILVERPINE_FOREST = 130,
    TBC_AREA_KHARANOS = 131,
    TBC_AREA_COLDRIDGE_VALLEY = 132,
    TBC_AREA_GNOMEREGAN = 133,
    TBC_AREA_GOL_BOLAR_QUARRY = 134,
    TBC_AREA_FROSTMANE_HOLD = 135,
    TBC_AREA_THE_GRIZZLED_DEN = 136,
    TBC_AREA_BREWNALL_VILLAGE = 137,
    TBC_AREA_MISTY_PINE_REFUGE = 138,
    TBC_AREA_EASTERN_PLAGUELANDS = 139,
    TBC_AREA_TELDRASSIL = 141,
    TBC_AREA_IRONBANDS_EXCAVATION_SITE = 142,
    TBC_AREA_MO_GROSH_STRONGHOLD = 143,
    TBC_AREA_THELSAMAR = 144,
    TBC_AREA_ALGAZ_GATE = 145,
    TBC_AREA_STONEWROUGHT_DAM = 146,
    TBC_AREA_THE_FARSTRIDER_LODGE = 147,
    TBC_AREA_DARKSHORE = 148,
    TBC_AREA_SILVER_STREAM_MINE = 149,
    TBC_AREA_MENETHIL_HARBOR = 150,
    TBC_AREA_DESIGNER_ISLAND = 151,
    TBC_AREA_THE_BULWARK = 152,
    TBC_AREA_RUINS_OF_LORDAERON = 153,
    TBC_AREA_DEATHKNELL = 154,
    TBC_AREA_NIGHT_WEBS_HOLLOW = 155,
    TBC_AREA_SOLLIDEN_FARMSTEAD = 156,
    TBC_AREA_AGAMAND_MILLS = 157,
    TBC_AREA_AGAMAND_FAMILY_CRYPT = 158,
    TBC_AREA_BRILL = 159,
    TBC_AREA_WHISPERING_GARDENS = 160,
    TBC_AREA_TERRACE_OF_REPOSE = 161,
    TBC_AREA_BRIGHTWATER_LAKE = 162,
    TBC_AREA_GUNTHERS_RETREAT = 163,
    TBC_AREA_GARRENS_HAUNT = 164,
    TBC_AREA_BALNIR_FARMSTEAD = 165,
    TBC_AREA_COLD_HEARTH_MANOR = 166,
    TBC_AREA_CRUSADER_OUTPOST = 167,
    TBC_AREA_THE_NORTH_COAST = 168,
    TBC_AREA_WHISPERING_SHORE = 169,
    TBC_AREA_LORDAMERE_LAKE = 170,
    TBC_AREA_FENRIS_ISLE = 172,
    TBC_AREA_FAOLS_REST = 173,
    TBC_AREA_DOLANAAR = 186,
    TBC_AREA_DARNASSUS_UNUSED = 187,
    TBC_AREA_SHADOWGLEN = 188,
    TBC_AREA_STEELGRILLS_DEPOT = 189,
    TBC_AREA_HEARTHGLEN = 190,
    TBC_AREA_NORTHRIDGE_LUMBER_CAMP = 192,
    TBC_AREA_RUINS_OF_ANDORHAL = 193,
    TBC_AREA_SCHOOL_OF_NECROMANCY = 195,
    TBC_AREA_UTHERS_TOMB = 196,
    TBC_AREA_SORROW_HILL = 197,
    TBC_AREA_THE_WEEPING_CAVE = 198,
    TBC_AREA_FELSTONE_FIELD = 199,
    TBC_AREA_DALSONS_TEARS = 200,
    TBC_AREA_GAHRRONS_WITHERING = 201,
    TBC_AREA_THE_WRITHING_HAUNT = 202,
    TBC_AREA_MARDENHOLDE_KEEP = 203,
    TBC_AREA_PYREWOOD_VILLAGE = 204,
    TBC_AREA_DUN_MODR = 205,
    TBC_AREA_UNUSED_WESTFALL = 206,
    TBC_AREA_THE_GREAT_SEA = 207,
    TBC_AREA_UNUSED_IRONCLADCOVE = 208,
    TBC_AREA_SHADOWFANG_KEEP = 209,
    TBC_AREA_REUSE_ME_2 = 210,
    TBC_AREA_ICEFLOW_LAKE = 211,
    TBC_AREA_HELMS_BED_LAKE = 212,
    TBC_AREA_DEEP_ELEM_MINE = 213,
    TBC_AREA_THE_GREAT_SEA1 = 214,
    TBC_AREA_MULGORE = 215,
    TBC_AREA_ALEXSTON_FARMSTEAD = 219,
    TBC_AREA_RED_CLOUD_MESA = 220,
    TBC_AREA_CAMP_NARACHE = 221,
    TBC_AREA_BLOODHOOF_VILLAGE = 222,
    TBC_AREA_STONEBULL_LAKE = 223,
    TBC_AREA_RAVAGED_CARAVAN = 224,
    TBC_AREA_RED_ROCKS = 225,
    TBC_AREA_THE_SKITTERING_DARK = 226,
    TBC_AREA_VALGANS_FIELD = 227,
    TBC_AREA_THE_SEPULCHER = 228,
    TBC_AREA_OLSENS_FARTHING = 229,
    TBC_AREA_THE_GREYMANE_WALL = 230,
    TBC_AREA_BERENS_PERIL = 231,
    TBC_AREA_THE_DAWNING_ISLES = 232,
    TBC_AREA_AMBERMILL = 233,
    TBC_AREA_FENRIS_KEEP = 235,
    TBC_AREA_SHADOWFANG_KEEP1 = 236,
    TBC_AREA_THE_DECREPIT_FERRY = 237,
    TBC_AREA_MALDENS_ORCHARD = 238,
    TBC_AREA_THE_IVAR_PATCH = 239,
    TBC_AREA_THE_DEAD_FIELD = 240,
    TBC_AREA_THE_ROTTING_ORCHARD = 241,
    TBC_AREA_BRIGHTWOOD_GROVE = 242,
    TBC_AREA_FORLORN_ROWE = 243,
    TBC_AREA_THE_WHIPPLE_ESTATE = 244,
    TBC_AREA_THE_YORGEN_FARMSTEAD = 245,
    TBC_AREA_THE_CAULDRON = 246,
    TBC_AREA_GRIMESILT_DIG_SITE = 247,
    TBC_AREA_DREADMAUL_ROCK = 249,
    TBC_AREA_RUINS_OF_THAURISSAN = 250,
    TBC_AREA_FLAME_CREST = 251,
    TBC_AREA_BLACKROCK_STRONGHOLD = 252,
    TBC_AREA_THE_PILLAR_OF_ASH = 253,
    TBC_AREA_BLACKROCK_MOUNTAIN1 = 254,
    TBC_AREA_ALTAR_OF_STORMS = 255,
    TBC_AREA_ALDRASSIL = 256,
    TBC_AREA_SHADOWTHREAD_CAVE = 257,
    TBC_AREA_FEL_ROCK = 258,
    TBC_AREA_LAKE_AL_AMETH = 259,
    TBC_AREA_STARBREEZE_VILLAGE = 260,
    TBC_AREA_GNARLPINE_HOLD = 261,
    TBC_AREA_BAN_ETHIL_BARROW_DEN = 262,
    TBC_AREA_THE_CLEFT = 263,
    TBC_AREA_THE_ORACLE_GLADE = 264,
    TBC_AREA_WELLSPRING_RIVER = 265,
    TBC_AREA_WELLSPRING_LAKE = 266,
    TBC_AREA_HILLSBRAD_FOOTHILLS = 267,
    TBC_AREA_AZSHARA_CRATER = 268,
    TBC_AREA_DUN_ALGAZ = 269,
    TBC_AREA_SOUTHSHORE = 271,
    TBC_AREA_TARREN_MILL = 272,
    TBC_AREA_DURNHOLDE_KEEP = 275,
    TBC_AREA_UNUSED_STONEWROUGHT_PASS = 276,
    TBC_AREA_THE_FOOTHILL_CAVERNS = 277,
    TBC_AREA_LORDAMERE_INTERNMENT_CAMP = 278,
    TBC_AREA_DALARAN = 279,
    TBC_AREA_STRAHNBRAD = 280,
    TBC_AREA_RUINS_OF_ALTERAC = 281,
    TBC_AREA_CRUSHRIDGE_HOLD = 282,
    TBC_AREA_SLAUGHTER_HOLLOW = 283,
    TBC_AREA_THE_UPLANDS = 284,
    TBC_AREA_SOUTHPOINT_TOWER = 285,
    TBC_AREA_HILLSBRAD_FIELDS = 286,
    TBC_AREA_HILLSBRAD = 287,
    TBC_AREA_AZURELODE_MINE = 288,
    TBC_AREA_NETHANDER_STEAD = 289,
    TBC_AREA_DUN_GAROK = 290,
    TBC_AREA_THORADINS_WALL = 293,
    TBC_AREA_EASTERN_STRAND = 294,
    TBC_AREA_WESTERN_STRAND = 295,
    TBC_AREA_SOUTH_SEAS_UNUSED = 296,
    TBC_AREA_JAGUERO_ISLE = 297,
    TBC_AREA_BARADIN_BAY = 298,
    TBC_AREA_MENETHIL_BAY = 299,
    TBC_AREA_MISTY_REED_STRAND = 300,
    TBC_AREA_THE_SAVAGE_COAST = 301,
    TBC_AREA_THE_CRYSTAL_SHORE = 302,
    TBC_AREA_SHELL_BEACH = 303,
    TBC_AREA_NORTH_TIDES_RUN = 305,
    TBC_AREA_SOUTH_TIDES_RUN = 306,
    TBC_AREA_THE_OVERLOOK_CLIFFS = 307,
    TBC_AREA_THE_FORBIDDING_SEA = 308,
    TBC_AREA_IRONBEARDS_TOMB = 309,
    TBC_AREA_CRYSTALVEIN_MINE = 310,
    TBC_AREA_RUINS_OF_ABORAZ = 311,
    TBC_AREA_JANEIROS_POINT = 312,
    TBC_AREA_NORTHFOLD_MANOR = 313,
    TBC_AREA_GO_SHEK_FARM = 314,
    TBC_AREA_DABYRIES_FARMSTEAD = 315,
    TBC_AREA_BOULDERFIST_HALL = 316,
    TBC_AREA_WITHERBARK_VILLAGE = 317,
    TBC_AREA_DRYWHISKER_GORGE = 318,
    TBC_AREA_REFUGE_POINTE = 320,
    TBC_AREA_HAMMERFALL = 321,
    TBC_AREA_BLACKWATER_SHIPWRECKS = 322,
    TBC_AREA_O_BREENS_CAMP = 323,
    TBC_AREA_STROMGARDE_KEEP = 324,
    TBC_AREA_THE_TOWER_OF_ARATHOR = 325,
    TBC_AREA_THE_SANCTUM = 326,
    TBC_AREA_FALDIRS_COVE = 327,
    TBC_AREA_THE_DROWNED_REEF = 328,
    TBC_AREA_THANDOL_SPAN = 330,
    TBC_AREA_ASHENVALE = 331,
    TBC_AREA_THE_GREAT_SEA2 = 332,
    TBC_AREA_CIRCLE_OF_EAST_BINDING = 333,
    TBC_AREA_CIRCLE_OF_WEST_BINDING = 334,
    TBC_AREA_CIRCLE_OF_INNER_BINDING = 335,
    TBC_AREA_CIRCLE_OF_OUTER_BINDING = 336,
    TBC_AREA_APOCRYPHANS_REST = 337,
    TBC_AREA_ANGOR_FORTRESS = 338,
    TBC_AREA_LETHLOR_RAVINE = 339,
    TBC_AREA_KARGATH = 340,
    TBC_AREA_CAMP_KOSH = 341,
    TBC_AREA_CAMP_BOFF = 342,
    TBC_AREA_CAMP_WURG = 343,
    TBC_AREA_CAMP_CAGG = 344,
    TBC_AREA_AGMONDS_END = 345,
    TBC_AREA_HAMMERTOES_DIGSITE = 346,
    TBC_AREA_DUSTBELCH_GROTTO = 347,
    TBC_AREA_AERIE_PEAK = 348,
    TBC_AREA_WILDHAMMER_KEEP = 349,
    TBC_AREA_QUEL_DANIL_LODGE = 350,
    TBC_AREA_SKULK_ROCK = 351,
    TBC_AREA_ZUN_WATHA = 352,
    TBC_AREA_SHADRA_ALOR = 353,
    TBC_AREA_JINTHA_ALOR = 354,
    TBC_AREA_THE_ALTAR_OF_ZUL = 355,
    TBC_AREA_SERADANE = 356,
    TBC_AREA_FERALAS = 357,
    TBC_AREA_BRAMBLEBLADE_RAVINE = 358,
    TBC_AREA_BAEL_MODAN = 359,
    TBC_AREA_THE_VENTURE_CO_MINE = 360,
    TBC_AREA_FELWOOD = 361,
    TBC_AREA_RAZOR_HILL = 362,
    TBC_AREA_VALLEY_OF_TRIALS = 363,
    TBC_AREA_THE_DEN = 364,
    TBC_AREA_BURNING_BLADE_COVEN = 365,
    TBC_AREA_KOLKAR_CRAG = 366,
    TBC_AREA_SEN_JIN_VILLAGE = 367,
    TBC_AREA_ECHO_ISLES = 368,
    TBC_AREA_THUNDER_RIDGE = 369,
    TBC_AREA_DRYGULCH_RAVINE = 370,
    TBC_AREA_DUSTWIND_CAVE = 371,
    TBC_AREA_TIRAGARDE_KEEP = 372,
    TBC_AREA_SCUTTLE_COAST = 373,
    TBC_AREA_BLADEFIST_BAY = 374,
    TBC_AREA_DEADEYE_SHORE = 375,
    TBC_AREA_SOUTHFURY_RIVER = 377,
    TBC_AREA_CAMP_TAURAJO = 378,
    TBC_AREA_FAR_WATCH_POST = 379,
    TBC_AREA_THE_CROSSROADS = 380,
    TBC_AREA_BOULDER_LODE_MINE = 381,
    TBC_AREA_THE_SLUDGE_FEN = 382,
    TBC_AREA_THE_DRY_HILLS = 383,
    TBC_AREA_DREADMIST_PEAK = 384,
    TBC_AREA_NORTHWATCH_HOLD = 385,
    TBC_AREA_THE_FORGOTTEN_POOLS = 386,
    TBC_AREA_LUSHWATER_OASIS = 387,
    TBC_AREA_THE_STAGNANT_OASIS = 388,
    TBC_AREA_FIELD_OF_GIANTS = 390,
    TBC_AREA_THE_MERCHANT_COAST = 391,
    TBC_AREA_RATCHET = 392,
    TBC_AREA_DARKSPEAR_STRAND = 393,
    TBC_AREA_DARROWMERE_LAKE_UNUSED = 394,
    TBC_AREA_CAER_DARROW_UNUSED = 395,
    TBC_AREA_WINTERHOOF_WATER_WELL = 396,
    TBC_AREA_THUNDERHORN_WATER_WELL = 397,
    TBC_AREA_WILDMANE_WATER_WELL = 398,
    TBC_AREA_SKYLINE_RIDGE = 399,
    TBC_AREA_THOUSAND_NEEDLES = 400,
    TBC_AREA_THE_TIDUS_STAIR = 401,
    TBC_AREA_SHADY_REST_INN = 403,
    TBC_AREA_BAEL_DUN_DIGSITE = 404,
    TBC_AREA_DESOLACE = 405,
    TBC_AREA_STONETALON_MOUNTAINS = 406,
    TBC_AREA_ORGRIMMAR_UNUSED = 407,
    TBC_AREA_GILLIJIMS_ISLE = 408,
    TBC_AREA_ISLAND_OF_DOCTOR_LAPIDIS = 409,
    TBC_AREA_RAZORWIND_CANYON = 410,
    TBC_AREA_BATHRANS_HAUNT = 411,
    TBC_AREA_THE_RUINS_OF_ORDIL_ARAN = 412,
    TBC_AREA_MAESTRAS_POST = 413,
    TBC_AREA_THE_ZORAM_STRAND = 414,
    TBC_AREA_ASTRANAAR = 415,
    TBC_AREA_THE_SHRINE_OF_AESSINA = 416,
    TBC_AREA_FIRE_SCAR_SHRINE = 417,
    TBC_AREA_THE_RUINS_OF_STARDUST = 418,
    TBC_AREA_THE_HOWLING_VALE = 419,
    TBC_AREA_SILVERWIND_REFUGE = 420,
    TBC_AREA_MYSTRAL_LAKE = 421,
    TBC_AREA_FALLEN_SKY_LAKE = 422,
    TBC_AREA_IRIS_LAKE = 424,
    TBC_AREA_MOONWELL = 425,
    TBC_AREA_RAYNEWOOD_RETREAT = 426,
    TBC_AREA_THE_SHADY_NOOK = 427,
    TBC_AREA_NIGHT_RUN = 428,
    TBC_AREA_XAVIAN = 429,
    TBC_AREA_SATYRNAAR = 430,
    TBC_AREA_SPLINTERTREE_POST = 431,
    TBC_AREA_THE_DOR_DANIL_BARROW_DEN = 432,
    TBC_AREA_FALFARREN_RIVER = 433,
    TBC_AREA_FELFIRE_HILL = 434,
    TBC_AREA_DEMON_FALL_CANYON = 435,
    TBC_AREA_DEMON_FALL_RIDGE = 436,
    TBC_AREA_WARSONG_LUMBER_CAMP = 437,
    TBC_AREA_BOUGH_SHADOW = 438,
    TBC_AREA_THE_SHIMMERING_FLATS = 439,
    TBC_AREA_TANARIS = 440,
    TBC_AREA_LAKE_FALATHIM = 441,
    TBC_AREA_AUBERDINE = 442,
    TBC_AREA_RUINS_OF_MATHYSTRA = 443,
    TBC_AREA_TOWER_OF_ALTHALAXX = 444,
    TBC_AREA_CLIFFSPRING_FALLS = 445,
    TBC_AREA_BASHAL_ARAN = 446,
    TBC_AREA_AMETH_ARAN = 447,
    TBC_AREA_GROVE_OF_THE_ANCIENTS = 448,
    TBC_AREA_THE_MASTERS_GLAIVE = 449,
    TBC_AREA_REMTRAVELS_EXCAVATION = 450,
    TBC_AREA_MISTS_EDGE = 452,
    TBC_AREA_THE_LONG_WASH = 453,
    TBC_AREA_WILDBEND_RIVER = 454,
    TBC_AREA_BLACKWOOD_DEN = 455,
    TBC_AREA_CLIFFSPRING_RIVER = 456,
    TBC_AREA_THE_VEILED_SEA = 457,
    TBC_AREA_GOLD_ROAD = 458,
    TBC_AREA_SCARLET_WATCH_POST = 459,
    TBC_AREA_SUN_ROCK_RETREAT = 460,
    TBC_AREA_WINDSHEAR_CRAG = 461,
    TBC_AREA_CRAGPOOL_LAKE = 463,
    TBC_AREA_MIRKFALLON_LAKE = 464,
    TBC_AREA_THE_CHARRED_VALE = 465,
    TBC_AREA_VALLEY_OF_THE_BLOODFURIES = 466,
    TBC_AREA_STONETALON_PEAK = 467,
    TBC_AREA_THE_TALON_DEN = 468,
    TBC_AREA_GREATWOOD_VALE = 469,
    TBC_AREA_THUNDER_BLUFF_UNUSED = 470,
    TBC_AREA_BRAVE_WIND_MESA = 471,
    TBC_AREA_FIRE_STONE_MESA = 472,
    TBC_AREA_MANTLE_ROCK = 473,
    TBC_AREA_HUNTER_RISE_UNUSED = 474,
    TBC_AREA_SPIRIT_RISEUNUSED = 475,
    TBC_AREA_ELDER_RISEUNUSED = 476,
    TBC_AREA_RUINS_OF_JUBUWAL = 477,
    TBC_AREA_POOLS_OF_ARLITHRIEN = 478,
    TBC_AREA_THE_RUSTMAUL_DIG_SITE = 479,
    TBC_AREA_CAMP_E_THOK = 480,
    TBC_AREA_SPLITHOOF_CRAG = 481,
    TBC_AREA_HIGHPERCH = 482,
    TBC_AREA_THE_SCREECHING_CANYON = 483,
    TBC_AREA_FREEWIND_POST = 484,
    TBC_AREA_THE_GREAT_LIFT = 485,
    TBC_AREA_GALAK_HOLD = 486,
    TBC_AREA_ROGUEFEATHER_DEN = 487,
    TBC_AREA_THE_WEATHERED_NOOK = 488,
    TBC_AREA_THALANAAR = 489,
    TBC_AREA_UN_GORO_CRATER = 490,
    TBC_AREA_RAZORFEN_KRAUL = 491,
    TBC_AREA_RAVEN_HILL_CEMETERY = 492,
    TBC_AREA_MOONGLADE = 493,
    TBC_AREA_DELETE_ME = 495,
    TBC_AREA_BRACKENWALL_VILLAGE = 496,
    TBC_AREA_SWAMPLIGHT_MANOR = 497,
    TBC_AREA_BLOODFEN_BURROW = 498,
    TBC_AREA_DARKMIST_CAVERN = 499,
    TBC_AREA_MOGGLE_POINT = 500,
    TBC_AREA_BEEZILS_WRECK = 501,
    TBC_AREA_WITCH_HILL = 502,
    TBC_AREA_SENTRY_POINT = 503,
    TBC_AREA_NORTH_POINT_TOWER = 504,
    TBC_AREA_WEST_POINT_TOWER = 505,
    TBC_AREA_LOST_POINT = 506,
    TBC_AREA_BLUEFEN = 507,
    TBC_AREA_STONEMAUL_RUINS = 508,
    TBC_AREA_THE_DEN_OF_FLAME = 509,
    TBC_AREA_THE_DRAGONMURK = 510,
    TBC_AREA_WYRMBOG = 511,
    TBC_AREA_BLACKHOOF_VILLAGE = 512,
    TBC_AREA_THERAMORE_ISLE = 513,
    TBC_AREA_FOOTHOLD_CITADEL = 514,
    TBC_AREA_IRONCLAD_PRISON = 515,
    TBC_AREA_DUSTWALLOW_BAY = 516,
    TBC_AREA_TIDEFURY_COVE = 517,
    TBC_AREA_DREADMURK_SHORE = 518,
    TBC_AREA_ADDLES_STEAD = 536,
    TBC_AREA_FIRE_PLUME_RIDGE = 537,
    TBC_AREA_LAKKARI_TAR_PITS = 538,
    TBC_AREA_TERROR_RUN = 539,
    TBC_AREA_THE_SLITHERING_SCAR = 540,
    TBC_AREA_MARSHALS_REFUGE = 541,
    TBC_AREA_FUNGAL_ROCK = 542,
    TBC_AREA_GOLAKKA_HOT_SPRINGS = 543,
    TBC_AREA_THE_LOCH = 556,
    TBC_AREA_BEGGARS_HAUNT = 576,
    TBC_AREA_KODO_GRAVEYARD = 596,
    TBC_AREA_GHOST_WALKER_POST = 597,
    TBC_AREA_SAR_THERIS_STRAND = 598,
    TBC_AREA_THUNDER_AXE_FORTRESS = 599,
    TBC_AREA_BOLGANS_HOLE = 600,
    TBC_AREA_MANNOROC_COVEN = 602,
    TBC_AREA_SARGERON = 603,
    TBC_AREA_MAGRAM_VILLAGE = 604,
    TBC_AREA_GELKIS_VILLAGE = 606,
    TBC_AREA_VALLEY_OF_SPEARS = 607,
    TBC_AREA_NIJELS_POINT = 608,
    TBC_AREA_KOLKAR_VILLAGE = 609,
    TBC_AREA_HYJAL = 616,
    TBC_AREA_WINTERSPRING = 618,
    TBC_AREA_BLACKWOLF_RIVER = 636,
    TBC_AREA_KODO_ROCK = 637,
    TBC_AREA_HIDDEN_PATH = 638,
    TBC_AREA_SPIRIT_ROCK = 639,
    TBC_AREA_SHRINE_OF_THE_DORMANT_FLAME = 640,
    TBC_AREA_LAKE_ELUNE_ARA = 656,
    TBC_AREA_THE_HARBORAGE = 657,
    TBC_AREA_OUTLAND = 676,
    TBC_AREA_CRAFTSMENS_TERRACE_UNUSED = 696,
    TBC_AREA_TRADESMENS_TERRACE_UNUSED = 697,
    TBC_AREA_THE_TEMPLE_GARDENS_UNUSED = 698,
    TBC_AREA_TEMPLE_OF_ELUNE_UNUSED = 699,
    TBC_AREA_CENARION_ENCLAVE_UNUSED = 700,
    TBC_AREA_WARRIORS_TERRACE_UNUSED = 701,
    TBC_AREA_RUT_THERAN_VILLAGE = 702,
    TBC_AREA_IRONBANDS_COMPOUND = 716,
    TBC_AREA_THE_STOCKADE = 717,
    TBC_AREA_WAILING_CAVERNS = 718,
    TBC_AREA_BLACKFATHOM_DEEPS = 719,
    TBC_AREA_FRAY_ISLAND = 720,
    TBC_AREA_GNOMEREGAN1 = 721,
    TBC_AREA_RAZORFEN_DOWNS = 722,
    TBC_AREA_BAN_ETHIL_HOLLOW = 736,
    TBC_AREA_SCARLET_MONASTERY = 796,
    TBC_AREA_JERODS_LANDING = 797,
    TBC_AREA_RIDGEPOINT_TOWER = 798,
    TBC_AREA_THE_DARKENED_BANK = 799,
    TBC_AREA_COLDRIDGE_PASS = 800,
    TBC_AREA_CHILL_BREEZE_VALLEY = 801,
    TBC_AREA_SHIMMER_RIDGE = 802,
    TBC_AREA_AMBERSTILL_RANCH = 803,
    TBC_AREA_THE_TUNDRID_HILLS = 804,
    TBC_AREA_SOUTH_GATE_PASS = 805,
    TBC_AREA_SOUTH_GATE_OUTPOST = 806,
    TBC_AREA_NORTH_GATE_PASS = 807,
    TBC_AREA_NORTH_GATE_OUTPOST = 808,
    TBC_AREA_GATES_OF_IRONFORGE = 809,
    TBC_AREA_STILLWATER_POND = 810,
    TBC_AREA_NIGHTMARE_VALE = 811,
    TBC_AREA_VENOMWEB_VALE = 812,
    TBC_AREA_THE_BULWARK1 = 813,
    TBC_AREA_SOUTHFURY_RIVER1 = 814,
    TBC_AREA_SOUTHFURY_RIVER2 = 815,
    TBC_AREA_RAZORMANE_GROUNDS = 816,
    TBC_AREA_SKULL_ROCK = 817,
    TBC_AREA_PALEMANE_ROCK = 818,
    TBC_AREA_WINDFURY_RIDGE = 819,
    TBC_AREA_THE_GOLDEN_PLAINS = 820,
    TBC_AREA_THE_ROLLING_PLAINS = 821,
    TBC_AREA_DUN_ALGAZ1 = 836,
    TBC_AREA_DUN_ALGAZ2 = 837,
    TBC_AREA_NORTH_GATE_PASS1 = 838,
    TBC_AREA_SOUTH_GATE_PASS1 = 839,
    TBC_AREA_TWILIGHT_GROVE = 856,
    TBC_AREA_GM_ISLAND = 876,
    TBC_AREA_DELETE_ME1 = 877,
    TBC_AREA_SOUTHFURY_RIVER3 = 878,
    TBC_AREA_SOUTHFURY_RIVER4 = 879,
    TBC_AREA_THANDOL_SPAN1 = 880,
    TBC_AREA_THANDOL_SPAN2 = 881,
    TBC_AREA_PURGATION_ISLE = 896,
    TBC_AREA_THE_JANSEN_STEAD = 916,
    TBC_AREA_THE_DEAD_ACRE = 917,
    TBC_AREA_THE_MOLSEN_FARM = 918,
    TBC_AREA_STENDELS_POND = 919,
    TBC_AREA_THE_DAGGER_HILLS = 920,
    TBC_AREA_DEMONTS_PLACE = 921,
    TBC_AREA_THE_DUST_PLAINS = 922,
    TBC_AREA_STONESPLINTER_VALLEY = 923,
    TBC_AREA_VALLEY_OF_KINGS = 924,
    TBC_AREA_ALGAZ_STATION = 925,
    TBC_AREA_BUCKLEBREE_FARM = 926,
    TBC_AREA_THE_SHINING_STRAND = 927,
    TBC_AREA_NORTH_TIDES_HOLLOW = 928,
    TBC_AREA_GRIZZLEPAW_RIDGE = 936,
    TBC_AREA_THE_VERDANT_FIELDS = 956,
    TBC_AREA_GADGETZAN = 976,
    TBC_AREA_STEAMWHEEDLE_PORT = 977,
    TBC_AREA_ZUL_FARRAK = 978,
    TBC_AREA_SANDSORROW_WATCH = 979,
    TBC_AREA_THISTLESHRUB_VALLEY = 980,
    TBC_AREA_THE_GAPING_CHASM = 981,
    TBC_AREA_THE_NOXIOUS_LAIR = 982,
    TBC_AREA_DUNEMAUL_COMPOUND = 983,
    TBC_AREA_EASTMOON_RUINS = 984,
    TBC_AREA_WATERSPRING_FIELD = 985,
    TBC_AREA_ZALASHJIS_DEN = 986,
    TBC_AREA_LANDS_END_BEACH = 987,
    TBC_AREA_WAVESTRIDER_BEACH = 988,
    TBC_AREA_ULDUM = 989,
    TBC_AREA_VALLEY_OF_THE_WATCHERS = 990,
    TBC_AREA_GUNSTANS_POST = 991,
    TBC_AREA_SOUTHMOON_RUINS = 992,
    TBC_AREA_RENDERS_CAMP = 996,
    TBC_AREA_RENDERS_VALLEY = 997,
    TBC_AREA_RENDERS_ROCK = 998,
    TBC_AREA_STONEWATCH_TOWER = 999,
    TBC_AREA_GALARDELL_VALLEY = 1000,
    TBC_AREA_LAKERIDGE_HIGHWAY = 1001,
    TBC_AREA_THREE_CORNERS = 1002,
    TBC_AREA_DIREFORGE_HILL = 1016,
    TBC_AREA_RAPTOR_RIDGE = 1017,
    TBC_AREA_BLACK_CHANNEL_MARSH = 1018,
    TBC_AREA_THE_GREEN_BELT = 1019,
    TBC_AREA_MOSSHIDE_FEN = 1020,
    TBC_AREA_THELGEN_ROCK = 1021,
    TBC_AREA_BLUEGILL_MARSH = 1022,
    TBC_AREA_SALTSPRAY_GLEN = 1023,
    TBC_AREA_SUNDOWN_MARSH = 1024,
    TBC_AREA_THE_GREEN_BELT1 = 1025,
    TBC_AREA_ANGERFANG_ENCAMPMENT = 1036,
    TBC_AREA_GRIM_BATOL = 1037,
    TBC_AREA_DRAGONMAW_GATES = 1038,
    TBC_AREA_THE_LOST_FLEET = 1039,
    TBC_AREA_DARROW_HILL = 1056,
    TBC_AREA_THORADINS_WALL1 = 1057,
    TBC_AREA_WEBWINDER_PATH = 1076,
    TBC_AREA_THE_HUSHED_BANK = 1097,
    TBC_AREA_MANOR_MISTMANTLE = 1098,
    TBC_AREA_CAMP_MOJACHE = 1099,
    TBC_AREA_GRIMTOTEM_COMPOUND = 1100,
    TBC_AREA_THE_WRITHING_DEEP = 1101,
    TBC_AREA_WILDWIND_LAKE = 1102,
    TBC_AREA_GORDUNNI_OUTPOST = 1103,
    TBC_AREA_MOK_GORDUN = 1104,
    TBC_AREA_FERAL_SCAR_VALE = 1105,
    TBC_AREA_FRAYFEATHER_HIGHLANDS = 1106,
    TBC_AREA_IDLEWIND_LAKE = 1107,
    TBC_AREA_THE_FORGOTTEN_COAST = 1108,
    TBC_AREA_EAST_PILLAR = 1109,
    TBC_AREA_WEST_PILLAR = 1110,
    TBC_AREA_DREAM_BOUGH = 1111,
    TBC_AREA_JADEMIR_LAKE = 1112,
    TBC_AREA_ONEIROS = 1113,
    TBC_AREA_RUINS_OF_RAVENWIND = 1114,
    TBC_AREA_RAGE_SCAR_HOLD = 1115,
    TBC_AREA_FEATHERMOON_STRONGHOLD = 1116,
    TBC_AREA_RUINS_OF_SOLARSAL = 1117,
    TBC_AREA_LOWER_WILDS_UNUSED = 1118,
    TBC_AREA_THE_TWIN_COLOSSALS = 1119,
    TBC_AREA_SARDOR_ISLE = 1120,
    TBC_AREA_ISLE_OF_DREAD = 1121,
    TBC_AREA_HIGH_WILDERNESS = 1136,
    TBC_AREA_LOWER_WILDS = 1137,
    TBC_AREA_SOUTHERN_BARRENS = 1156,
    TBC_AREA_SOUTHERN_GOLD_ROAD = 1157,
    TBC_AREA_ZUL_FARRAK1 = 1176,
    TBC_AREA_UNUSEDALCAZ_ISLAND = 1196,
    TBC_AREA_TIMBERMAW_HOLD = 1216,
    TBC_AREA_VANNDIR_ENCAMPMENT = 1217,
    TBC_AREA_TESTAZSHARA = 1218,
    TBC_AREA_LEGASH_ENCAMPMENT = 1219,
    TBC_AREA_THALASSIAN_BASE_CAMP = 1220,
    TBC_AREA_RUINS_OF_ELDARATH = 1221,
    TBC_AREA_HETAERAS_CLUTCH = 1222,
    TBC_AREA_TEMPLE_OF_ZIN_MALOR = 1223,
    TBC_AREA_BEARS_HEAD = 1224,
    TBC_AREA_URSOLAN = 1225,
    TBC_AREA_TEMPLE_OF_ARKKORAN = 1226,
    TBC_AREA_BAY_OF_STORMS = 1227,
    TBC_AREA_THE_SHATTERED_STRAND = 1228,
    TBC_AREA_TOWER_OF_ELDARA = 1229,
    TBC_AREA_JAGGED_REEF = 1230,
    TBC_AREA_SOUTHRIDGE_BEACH = 1231,
    TBC_AREA_RAVENCREST_MONUMENT = 1232,
    TBC_AREA_FORLORN_RIDGE = 1233,
    TBC_AREA_LAKE_MENNAR = 1234,
    TBC_AREA_SHADOWSONG_SHRINE = 1235,
    TBC_AREA_HALDARR_ENCAMPMENT = 1236,
    TBC_AREA_VALORMOK = 1237,
    TBC_AREA_THE_RUINED_REACHES = 1256,
    TBC_AREA_THE_TALONDEEP_PATH = 1276,
    TBC_AREA_THE_TALONDEEP_PATH1 = 1277,
    TBC_AREA_ROCKTUSK_FARM = 1296,
    TBC_AREA_JAGGEDSWINE_FARM = 1297,
    TBC_AREA_RAZORFEN_DOWNS1 = 1316,
    TBC_AREA_LOST_RIGGER_COVE = 1336,
    TBC_AREA_ULDAMAN = 1337,
    TBC_AREA_LORDAMERE_LAKE1 = 1338,
    TBC_AREA_LORDAMERE_LAKE2 = 1339,
    TBC_AREA_GALLOWS_CORNER = 1357,
    TBC_AREA_SILITHUS = 1377,
    TBC_AREA_EMERALD_FOREST = 1397,
    TBC_AREA_SUNKEN_TEMPLE = 1417,
    TBC_AREA_DREADMAUL_HOLD = 1437,
    TBC_AREA_NETHERGARDE_KEEP = 1438,
    TBC_AREA_DREADMAUL_POST = 1439,
    TBC_AREA_SERPENTS_COIL = 1440,
    TBC_AREA_ALTAR_OF_STORMS1 = 1441,
    TBC_AREA_FIREWATCH_RIDGE = 1442,
    TBC_AREA_THE_SLAG_PIT = 1443,
    TBC_AREA_THE_SEA_OF_CINDERS = 1444,
    TBC_AREA_BLACKROCK_MOUNTAIN2 = 1445,
    TBC_AREA_THORIUM_POINT = 1446,
    TBC_AREA_GARRISON_ARMORY = 1457,
    TBC_AREA_THE_TEMPLE_OF_ATAL_HAKKAR = 1477,
    TBC_AREA_UNDERCITY = 1497,
    TBC_AREA_ULDAMAN1 = 1517,
    TBC_AREA_NOT_USED_DEADMINES = 1518,
    TBC_AREA_STORMWIND_CITY = 1519,
    TBC_AREA_IRONFORGE = 1537,
    TBC_AREA_SPLITHOOF_HOLD = 1557,
    TBC_AREA_THE_CAPE_OF_STRANGLETHORN = 1577,
    TBC_AREA_SOUTHERN_SAVAGE_COAST = 1578,
    TBC_AREA_UNUSED_THE_DEADMINES_002 = 1579,
    TBC_AREA_UNUSED_IRONCLAD_COVE_00THREE = 1580,
    TBC_AREA_THE_DEADMINES = 1581,
    TBC_AREA_IRONCLAD_COVE = 1582,
    TBC_AREA_BLACKROCK_SPIRE = 1583,
    TBC_AREA_BLACKROCK_DEPTHS = 1584,
    TBC_AREA_RAPTOR_GROUNDS_UNUSED = 1597,
    TBC_AREA_GROL_DOM_FARM_UNUSED = 1598,
    TBC_AREA_MORSHAN_BASE_CAMP = 1599,
    TBC_AREA_HONORS_STAND_UNUSED = 1600,
    TBC_AREA_BLACKTHORN_RIDGE_UNUSED = 1601,
    TBC_AREA_BRAMBLESCAR_UNUSED = 1602,
    TBC_AREA_AGAMA_GOR_UNUSED = 1603,
    TBC_AREA_VALLEY_OF_HEROES = 1617,
    TBC_AREA_ORGRIMMAR = 1637,
    TBC_AREA_THUNDER_BLUFF = 1638,
    TBC_AREA_ELDER_RISE = 1639,
    TBC_AREA_SPIRIT_RISE = 1640,
    TBC_AREA_HUNTER_RISE = 1641,
    TBC_AREA_DARNASSUS = 1657,
    TBC_AREA_CENARION_ENCLAVE = 1658,
    TBC_AREA_CRAFTSMENS_TERRACE = 1659,
    TBC_AREA_WARRIORS_TERRACE = 1660,
    TBC_AREA_THE_TEMPLE_GARDENS = 1661,
    TBC_AREA_TRADESMENS_TERRACE = 1662,
    TBC_AREA_GAVINS_NAZE = 1677,
    TBC_AREA_SOFERAS_NAZE = 1678,
    TBC_AREA_CORRAHNS_DAGGER = 1679,
    TBC_AREA_THE_HEADLAND = 1680,
    TBC_AREA_MISTY_SHORE = 1681,
    TBC_AREA_DANDREDS_FOLD = 1682,
    TBC_AREA_GROWLESS_CAVE = 1683,
    TBC_AREA_CHILLWIND_POINT = 1684,
    TBC_AREA_RAPTOR_GROUNDS = 1697,
    TBC_AREA_BRAMBLESCAR = 1698,
    TBC_AREA_THORN_HILL = 1699,
    TBC_AREA_AGAMA_GOR = 1700,
    TBC_AREA_BLACKTHORN_RIDGE = 1701,
    TBC_AREA_HONORS_STAND = 1702,
    TBC_AREA_THE_MORSHAN_RAMPART = 1703,
    TBC_AREA_GROL_DOM_FARM = 1704,
    TBC_AREA_RAZORFEN_KRAUL1 = 1717,
    TBC_AREA_THE_GREAT_LIFT1 = 1718,
    TBC_AREA_MISTVALE_VALLEY = 1737,
    TBC_AREA_NEK_MANI_WELLSPRING = 1738,
    TBC_AREA_BLOODSAIL_COMPOUND = 1739,
    TBC_AREA_VENTURE_CO_BASE_CAMP = 1740,
    TBC_AREA_GURUBASHI_ARENA = 1741,
    TBC_AREA_SPIRIT_DEN = 1742,
    TBC_AREA_THE_CRIMSON_VEIL = 1757,
    TBC_AREA_THE_RIPTIDE = 1758,
    TBC_AREA_THE_DAMSELS_LUCK = 1759,
    TBC_AREA_VENTURE_CO_OPERATIONS_CENTER = 1760,
    TBC_AREA_DEADWOOD_VILLAGE = 1761,
    TBC_AREA_FELPAW_VILLAGE = 1762,
    TBC_AREA_JAEDENAR = 1763,
    TBC_AREA_BLOODVENOM_RIVER = 1764,
    TBC_AREA_BLOODVENOM_FALLS = 1765,
    TBC_AREA_SHATTER_SCAR_VALE = 1766,
    TBC_AREA_IRONTREE_WOODS = 1767,
    TBC_AREA_IRONTREE_CAVERN = 1768,
    TBC_AREA_TIMBERMAW_HOLD1 = 1769,
    TBC_AREA_SHADOW_HOLD = 1770,
    TBC_AREA_SHRINE_OF_THE_DECEIVER = 1771,
    TBC_AREA_ITHARIUSS_CAVE = 1777,
    TBC_AREA_SORROWMURK = 1778,
    TBC_AREA_DRAENIL_DUR_VILLAGE = 1779,
    TBC_AREA_SPLINTERSPEAR_JUNCTION = 1780,
    TBC_AREA_STAGALBOG = 1797,
    TBC_AREA_THE_SHIFTING_MIRE = 1798,
    TBC_AREA_STAGALBOG_CAVE = 1817,
    TBC_AREA_WITHERBARK_CAVERNS = 1837,
    TBC_AREA_THORADINS_WALL2 = 1857,
    TBC_AREA_BOULDER_GOR = 1858,
    TBC_AREA_VALLEY_OF_FANGS = 1877,
    TBC_AREA_THE_DUSTBOWL = 1878,
    TBC_AREA_MIRAGE_FLATS = 1879,
    TBC_AREA_FEATHERBEARDS_HOVEL = 1880,
    TBC_AREA_SHINDIGGERS_CAMP = 1881,
    TBC_AREA_PLAGUEMIST_RAVINE = 1882,
    TBC_AREA_VALORWIND_LAKE = 1883,
    TBC_AREA_AGOL_WATHA = 1884,
    TBC_AREA_HIRI_WATHA = 1885,
    TBC_AREA_THE_CREEPING_RUIN = 1886,
    TBC_AREA_BOGENS_LEDGE = 1887,
    TBC_AREA_THE_MAKERS_TERRACE = 1897,
    TBC_AREA_DUSTWIND_GULCH = 1898,
    TBC_AREA_SHAOL_WATHA = 1917,
    TBC_AREA_NOONSHADE_RUINS = 1937,
    TBC_AREA_BROKEN_PILLAR = 1938,
    TBC_AREA_ABYSSAL_SANDS = 1939,
    TBC_AREA_SOUTHBREAK_SHORE = 1940,
    TBC_AREA_CAVERNS_OF_TIME = 1941,
    TBC_AREA_THE_MARSHLANDS = 1942,
    TBC_AREA_IRONSTONE_PLATEAU = 1943,
    TBC_AREA_BLACKCHAR_CAVE = 1957,
    TBC_AREA_TANNER_CAMP = 1958,
    TBC_AREA_DUSTFIRE_VALLEY = 1959,
    TBC_AREA_ZUL_GURUB1 = 1977,
    TBC_AREA_MISTY_REED_POST = 1978,
    TBC_AREA_BLOODVENOM_POST = 1997,
    TBC_AREA_TALONBRANCH_GLADE = 1998,
    TBC_AREA_STRATHOLME = 2017,
    TBC_AREA_QUEL_THALAS = 2037,
    TBC_AREA_SCHOLOMANCE = 2057,
    TBC_AREA_TWILIGHT_VALE = 2077,
    TBC_AREA_TWILIGHT_SHORE = 2078,
    TBC_AREA_ALCAZ_ISLAND = 2079,
    TBC_AREA_DARKCLOUD_PINNACLE = 2097,
    TBC_AREA_DAWNING_WOOD_CATACOMBS = 2098,
    TBC_AREA_STONEWATCH_KEEP = 2099,
    TBC_AREA_MARAUDON = 2100,
    TBC_AREA_STOUTLAGER_INN = 2101,
    TBC_AREA_THUNDERBREW_DISTILLERY = 2102,
    TBC_AREA_MENETHIL_KEEP = 2103,
    TBC_AREA_DEEPWATER_TAVERN = 2104,
    TBC_AREA_SHADOW_GRAVE = 2117,
    TBC_AREA_BRILL_TOWN_HALL = 2118,
    TBC_AREA_GALLOWS_END_TAVERN = 2119,
    TBC_AREA_THE_POOLS_OF_VISIONUNUSED = 2137,
    TBC_AREA_DREADMIST_DEN = 2138,
    TBC_AREA_BAEL_DUN_KEEP = 2157,
    TBC_AREA_EMBERSTRIFES_DEN = 2158,
    TBC_AREA_ONYXIAS_LAIR = 2159,
    TBC_AREA_WINDSHEAR_MINE = 2160,
    TBC_AREA_ROLANDS_DOOM = 2161,
    TBC_AREA_BATTLE_RING = 2177,
    TBC_AREA_THE_POOLS_OF_VISION = 2197,
    TBC_AREA_SHADOWBREAK_RAVINE = 2198,
    TBC_AREA_BROKEN_SPEAR_VILLAGE = 2217,
    TBC_AREA_WHITEREACH_POST = 2237,
    TBC_AREA_GORNIA = 2238,
    TBC_AREA_ZANES_EYE_CRATER = 2239,
    TBC_AREA_MIRAGE_RACEWAY = 2240,
    TBC_AREA_FROSTSABER_ROCK = 2241,
    TBC_AREA_THE_HIDDEN_GROVE = 2242,
    TBC_AREA_TIMBERMAW_POST = 2243,
    TBC_AREA_WINTERFALL_VILLAGE = 2244,
    TBC_AREA_MAZTHORIL = 2245,
    TBC_AREA_FROSTFIRE_HOT_SPRINGS = 2246,
    TBC_AREA_ICE_THISTLE_HILLS = 2247,
    TBC_AREA_DUN_MANDARR = 2248,
    TBC_AREA_FROSTWHISPER_GORGE = 2249,
    TBC_AREA_OWL_WING_THICKET = 2250,
    TBC_AREA_LAKE_KEL_THERIL = 2251,
    TBC_AREA_THE_RUINS_OF_KEL_THERIL = 2252,
    TBC_AREA_STARFALL_VILLAGE = 2253,
    TBC_AREA_BAN_THALLOW_BARROW_DEN = 2254,
    TBC_AREA_EVERLOOK = 2255,
    TBC_AREA_DARKWHISPER_GORGE = 2256,
    TBC_AREA_DEEPRUN_TRAM = 2257,
    TBC_AREA_THE_FUNGAL_VALE = 2258,
    TBC_AREA_UNUSEDTHE_MARRIS_STEAD = 2259,
    TBC_AREA_THE_MARRIS_STEAD = 2260,
    TBC_AREA_THE_UNDERCROFT = 2261,
    TBC_AREA_DARROWSHIRE = 2262,
    TBC_AREA_CROWN_GUARD_TOWER = 2263,
    TBC_AREA_CORINS_CROSSING = 2264,
    TBC_AREA_SCARLET_BASE_CAMP = 2265,
    TBC_AREA_TYRS_HAND = 2266,
    TBC_AREA_THE_SCARLET_BASILICA = 2267,
    TBC_AREA_LIGHTS_HOPE_CHAPEL = 2268,
    TBC_AREA_BROWMAN_MILL = 2269,
    TBC_AREA_THE_NOXIOUS_GLADE = 2270,
    TBC_AREA_EASTWALL_TOWER = 2271,
    TBC_AREA_NORTHDALE = 2272,
    TBC_AREA_ZUL_MASHAR = 2273,
    TBC_AREA_MAZRA_ALOR = 2274,
    TBC_AREA_NORTHPASS_TOWER = 2275,
    TBC_AREA_QUEL_LITHIEN_LODGE = 2276,
    TBC_AREA_PLAGUEWOOD = 2277,
    TBC_AREA_SCOURGEHOLD = 2278,
    TBC_AREA_STRATHOLME1 = 2279,
    TBC_AREA_UNUSED_STRATHOLME = 2280,
    TBC_AREA_DARROWMERE_LAKE = 2297,
    TBC_AREA_CAER_DARROW = 2298,
    TBC_AREA_DARROWMERE_LAKE1 = 2299,
    TBC_AREA_CAVERNS_OF_TIME1 = 2300,
    TBC_AREA_THISTLEFUR_VILLAGE = 2301,
    TBC_AREA_THE_QUAGMIRE = 2302,
    TBC_AREA_WINDBREAK_CANYON = 2303,
    TBC_AREA_SOUTH_SEAS = 2317,
    TBC_AREA_THE_GREAT_SEA3 = 2318,
    TBC_AREA_THE_GREAT_SEA4 = 2319,
    TBC_AREA_THE_GREAT_SEA5 = 2320,
    TBC_AREA_THE_GREAT_SEA6 = 2321,
    TBC_AREA_THE_VEILED_SEA1 = 2322,
    TBC_AREA_THE_VEILED_SEA2 = 2323,
    TBC_AREA_THE_VEILED_SEA3 = 2324,
    TBC_AREA_THE_VEILED_SEA4 = 2325,
    TBC_AREA_THE_VEILED_SEA5 = 2326,
    TBC_AREA_RAZOR_HILL_BARRACKS = 2337,
    TBC_AREA_SOUTH_SEAS1 = 2338,
    TBC_AREA_THE_GREAT_SEA7 = 2339,
    TBC_AREA_BLOODTOOTH_CAMP = 2357,
    TBC_AREA_FOREST_SONG = 2358,
    TBC_AREA_GREENPAW_VILLAGE = 2359,
    TBC_AREA_SILVERWING_OUTPOST = 2360,
    TBC_AREA_NIGHTHAVEN = 2361,
    TBC_AREA_SHRINE_OF_REMULOS = 2362,
    TBC_AREA_STORMRAGE_BARROW_DENS = 2363,
    TBC_AREA_THE_GREAT_SEA8 = 2364,
    TBC_AREA_THE_GREAT_SEA9 = 2365,
    TBC_AREA_THE_BLACK_MORASS = 2366,
    TBC_AREA_OLD_HILLSBRAD_FOOTHILLS = 2367,
    TBC_AREA_TARREN_MILL1 = 2368,
    TBC_AREA_SOUTHSHORE1 = 2369,
    TBC_AREA_DURNHOLDE_KEEP1 = 2370,
    TBC_AREA_DUN_GAROK1 = 2371,
    TBC_AREA_HILLSBRAD_FIELDS1 = 2372,
    TBC_AREA_EASTERN_STRAND1 = 2373,
    TBC_AREA_NETHANDER_STEAD1 = 2374,
    TBC_AREA_DARROW_HILL1 = 2375,
    TBC_AREA_SOUTHPOINT_TOWER1 = 2376,
    TBC_AREA_THORADINS_WALL3 = 2377,
    TBC_AREA_WESTERN_STRAND1 = 2378,
    TBC_AREA_AZURELODE_MINE1 = 2379,
    TBC_AREA_THE_GREAT_SEA10 = 2397,
    TBC_AREA_THE_GREAT_SEA11 = 2398,
    TBC_AREA_THE_GREAT_SEA12 = 2399,
    TBC_AREA_THE_FORBIDDING_SEA1 = 2400,
    TBC_AREA_THE_FORBIDDING_SEA2 = 2401,
    TBC_AREA_THE_FORBIDDING_SEA3 = 2402,
    TBC_AREA_THE_FORBIDDING_SEA4 = 2403,
    TBC_AREA_TETHRIS_ARAN = 2404,
    TBC_AREA_ETHEL_RETHOR = 2405,
    TBC_AREA_RANAZJAR_ISLE = 2406,
    TBC_AREA_KORMEKS_HUT = 2407,
    TBC_AREA_SHADOWPREY_VILLAGE = 2408,
    TBC_AREA_BLACKROCK_PASS = 2417,
    TBC_AREA_MORGANS_VIGIL = 2418,
    TBC_AREA_SLITHER_ROCK = 2419,
    TBC_AREA_TERROR_WING_PATH = 2420,
    TBC_AREA_DRACO_DAR = 2421,
    TBC_AREA_RAGEFIRE_CHASM = 2437,
    TBC_AREA_NIGHTSONG_WOODS = 2457,
    TBC_AREA_THE_VEILED_SEA6 = 2477,
    TBC_AREA_MORLOS_ARAN = 2478,
    TBC_AREA_EMERALD_SANCTUARY = 2479,
    TBC_AREA_JADEFIRE_GLEN = 2480,
    TBC_AREA_RUINS_OF_CONSTELLAS = 2481,
    TBC_AREA_BITTER_REACHES = 2497,
    TBC_AREA_RISE_OF_THE_DEFILER = 2517,
    TBC_AREA_LARISS_PAVILION = 2518,
    TBC_AREA_WOODPAW_HILLS = 2519,
    TBC_AREA_WOODPAW_DEN = 2520,
    TBC_AREA_VERDANTIS_RIVER = 2521,
    TBC_AREA_RUINS_OF_ISILDIEN = 2522,
    TBC_AREA_GRIMTOTEM_POST = 2537,
    TBC_AREA_CAMP_APARAJE = 2538,
    TBC_AREA_MALAKA_JIN = 2539,
    TBC_AREA_BOULDERSLIDE_RAVINE = 2540,
    TBC_AREA_SISHIR_CANYON = 2541,
    TBC_AREA_DIRE_MAUL = 2557,
    TBC_AREA_DEADWIND_RAVINE = 2558,
    TBC_AREA_DIAMONDHEAD_RIVER = 2559,
    TBC_AREA_ARIDENS_CAMP = 2560,
    TBC_AREA_THE_VICE = 2561,
    TBC_AREA_KARAZHAN = 2562,
    TBC_AREA_MORGANS_PLOT = 2563,
    TBC_AREA_DIRE_MAUL1 = 2577,
    TBC_AREA_ALTERAC_VALLEY = 2597,
    TBC_AREA_SCRABBLESCREWS_CAMP = 2617,
    TBC_AREA_JADEFIRE_RUN = 2618,
    TBC_AREA_THONDRORIL_RIVER = 2619,
    TBC_AREA_THONDRORIL_RIVER1 = 2620,
    TBC_AREA_LAKE_MERELDAR = 2621,
    TBC_AREA_PESTILENT_SCAR = 2622,
    TBC_AREA_THE_INFECTIS_SCAR = 2623,
    TBC_AREA_BLACKWOOD_LAKE = 2624,
    TBC_AREA_EASTWALL_GATE = 2625,
    TBC_AREA_TERRORWEB_TUNNEL = 2626,
    TBC_AREA_TERRORDALE = 2627,
    TBC_AREA_KARGATHIA_KEEP = 2637,
    TBC_AREA_VALLEY_OF_BONES = 2657,
    TBC_AREA_BLACKWING_LAIR = 2677,
    TBC_AREA_DEADMANS_CROSSING = 2697,
    TBC_AREA_MOLTEN_CORE = 2717,
    TBC_AREA_THE_SCARAB_WALL = 2737,
    TBC_AREA_SOUTHWIND_VILLAGE = 2738,
    TBC_AREA_TWILIGHT_BASE_CAMP = 2739,
    TBC_AREA_THE_CRYSTAL_VALE = 2740,
    TBC_AREA_THE_SCARAB_DAIS = 2741,
    TBC_AREA_HIVE_ASHI = 2742,
    TBC_AREA_HIVE_ZORA = 2743,
    TBC_AREA_HIVE_REGAL = 2744,
    TBC_AREA_SHRINE_OF_THE_FALLEN_WARRIOR = 2757,
    TBC_AREA_UNUSED_ALTERAC_VALLEY = 2777,
    TBC_AREA_BLACKFATHOM_DEEPS1 = 2797,
    TBC_AREA_REUSE_ME_4 = 2817,
    TBC_AREA_THE_MASTERS_CELLAR = 2837,
    TBC_AREA_STONEWROUGHT_PASS = 2838,
    TBC_AREA_ALTERAC_VALLEY1 = 2839,
    TBC_AREA_THE_RUMBLE_CAGE = 2857,
    TBC_AREA_CHUNK_TEST = 2877,
    TBC_AREA_ZORAM_GAR_OUTPOST = 2897,
    TBC_AREA_HALL_OF_LEGENDS = 2917,
    TBC_AREA_CHAMPIONS_HALL = 2918,
    TBC_AREA_GROSH_GOK_COMPOUND = 2937,
    TBC_AREA_SLEEPING_GORGE = 2938,
    TBC_AREA_IRONDEEP_MINE = 2957,
    TBC_AREA_STONEHEARTH_OUTPOST = 2958,
    TBC_AREA_DUN_BALDAR = 2959,
    TBC_AREA_ICEWING_PASS = 2960,
    TBC_AREA_FROSTWOLF_VILLAGE = 2961,
    TBC_AREA_TOWER_POINT = 2962,
    TBC_AREA_COLDTOOTH_MINE = 2963,
    TBC_AREA_WINTERAX_HOLD = 2964,
    TBC_AREA_ICEBLOOD_GARRISON = 2977,
    TBC_AREA_FROSTWOLF_KEEP = 2978,
    TBC_AREA_TOR_KREN_FARM = 2979,
    TBC_AREA_FROST_DAGGER_PASS = 3017,
    TBC_AREA_IRONSTONE_CAMP = 3037,
    TBC_AREA_WEAZELS_CRATER = 3038,
    TBC_AREA_TAHONDA_RUINS = 3039,
    TBC_AREA_FIELD_OF_STRIFE = 3057,
    TBC_AREA_ICEWING_CAVERN = 3058,
    TBC_AREA_VALORS_REST = 3077,
    TBC_AREA_THE_SWARMING_PILLAR = 3097,
    TBC_AREA_TWILIGHT_POST = 3098,
    TBC_AREA_TWILIGHT_OUTPOST = 3099,
    TBC_AREA_RAVAGED_TWILIGHT_CAMP = 3100,
    TBC_AREA_SHALZARUS_LAIR = 3117,
    TBC_AREA_TALRENDIS_POINT = 3137,
    TBC_AREA_RETHRESS_SANCTUM = 3138,
    TBC_AREA_MOON_HORROR_DEN = 3139,
    TBC_AREA_SCALEBEARDS_CAVE = 3140,
    TBC_AREA_BOULDERSLIDE_CAVERN = 3157,
    TBC_AREA_WARSONG_LABOR_CAMP = 3177,
    TBC_AREA_CHILLWIND_CAMP = 3197,
    TBC_AREA_THE_MAUL = 3217,
    TBC_AREA_THE_MAUL_UNUSED = 3237,
    TBC_AREA_BONES_OF_GRAKKAROND = 3257,
    TBC_AREA_WARSONG_GULCH = 3277,
    TBC_AREA_FROSTWOLF_GRAVEYARD = 3297,
    TBC_AREA_FROSTWOLF_PASS = 3298,
    TBC_AREA_DUN_BALDAR_PASS = 3299,
    TBC_AREA_ICEBLOOD_GRAVEYARD = 3300,
    TBC_AREA_SNOWFALL_GRAVEYARD = 3301,
    TBC_AREA_STONEHEARTH_GRAVEYARD = 3302,
    TBC_AREA_STORMPIKE_GRAVEYARD = 3303,
    TBC_AREA_ICEWING_BUNKER = 3304,
    TBC_AREA_STONEHEARTH_BUNKER = 3305,
    TBC_AREA_WILDPAW_RIDGE = 3306,
    TBC_AREA_REVANTUSK_VILLAGE = 3317,
    TBC_AREA_ROCK_OF_DUROTAN = 3318,
    TBC_AREA_SILVERWING_GROVE = 3319,
    TBC_AREA_WARSONG_LUMBER_MILL = 3320,
    TBC_AREA_SILVERWING_HOLD = 3321,
    TBC_AREA_WILDPAW_CAVERN = 3337,
    TBC_AREA_THE_VEILED_CLEFT = 3338,
    TBC_AREA_YOJAMBA_ISLE = 3357,
    TBC_AREA_ARATHI_BASIN = 3358,
    TBC_AREA_THE_COIL = 3377,
    TBC_AREA_ALTAR_OF_HIR_EEK = 3378,
    TBC_AREA_SHADRA_ZAAR = 3379,
    TBC_AREA_HAKKARI_GROUNDS = 3380,
    TBC_AREA_NAZE_OF_SHIRVALLAH = 3381,
    TBC_AREA_TEMPLE_OF_BETHEKK = 3382,
    TBC_AREA_THE_BLOODFIRE_PIT = 3383,
    TBC_AREA_ALTAR_OF_THE_BLOOD_GOD = 3384,
    TBC_AREA_ZANZAS_RISE = 3397,
    TBC_AREA_EDGE_OF_MADNESS = 3398,
    TBC_AREA_TROLLBANE_HALL = 3417,
    TBC_AREA_DEFILERS_DEN = 3418,
    TBC_AREA_PAGLES_POINTE = 3419,
    TBC_AREA_FARM = 3420,
    TBC_AREA_BLACKSMITH = 3421,
    TBC_AREA_LUMBER_MILL = 3422,
    TBC_AREA_GOLD_MINE = 3423,
    TBC_AREA_STABLES = 3424,
    TBC_AREA_CENARION_HOLD = 3425,
    TBC_AREA_STAGHELM_POINT = 3426,
    TBC_AREA_BRONZEBEARD_ENCAMPMENT = 3427,
    TBC_AREA_AHN_QIRAJ = 3428,
    TBC_AREA_RUINS_OF_AHN_QIRAJ = 3429,
    TBC_AREA_EVERSONG_WOODS = 3430,
    TBC_AREA_SUNSTRIDER_ISLE = 3431,
    TBC_AREA_SHRINE_OF_DATH_REMAR = 3432,
    TBC_AREA_GHOSTLANDS = 3433,
    TBC_AREA_SCARAB_TERRACE = 3434,
    TBC_AREA_GENERALS_TERRACE = 3435,
    TBC_AREA_THE_RESERVOIR = 3436,
    TBC_AREA_THE_HATCHERY = 3437,
    TBC_AREA_THE_COMB = 3438,
    TBC_AREA_WATCHERS_TERRACE = 3439,
    TBC_AREA_SCARAB_TERRACE1 = 3440,
    TBC_AREA_GENERALS_TERRACE1 = 3441,
    TBC_AREA_THE_RESERVOIR1 = 3442,
    TBC_AREA_THE_HATCHERY1 = 3443,
    TBC_AREA_THE_COMB1 = 3444,
    TBC_AREA_WATCHERS_TERRACE1 = 3445,
    TBC_AREA_TWILIGHTS_RUN = 3446,
    TBC_AREA_ORTELLS_HIDEOUT = 3447,
    TBC_AREA_SCARAB_TERRACE2 = 3448,
    TBC_AREA_GENERALS_TERRACE2 = 3449,
    TBC_AREA_THE_RESERVOIR2 = 3450,
    TBC_AREA_THE_HATCHERY2 = 3451,
    TBC_AREA_THE_COMB2 = 3452,
    TBC_AREA_WATCHERS_TERRACE2 = 3453,
    TBC_AREA_RUINS_OF_AHN_QIRAJ1 = 3454,
    TBC_AREA_THE_NORTH_SEA = 3455,
    TBC_AREA_NAXXRAMAS = 3456,
    TBC_AREA_KARAZHAN1 = 3457,
    TBC_AREA_CITY = 3459,
    TBC_AREA_GOLDEN_STRAND = 3460,
    TBC_AREA_SUNSAIL_ANCHORAGE = 3461,
    TBC_AREA_FAIRBREEZE_VILLAGE = 3462,
    TBC_AREA_MAGISTERS_GATE = 3463,
    TBC_AREA_FARSTRIDER_RETREAT = 3464,
    TBC_AREA_NORTH_SANCTUM = 3465,
    TBC_AREA_WEST_SANCTUM = 3466,
    TBC_AREA_EAST_SANCTUM = 3467,
    TBC_AREA_SALTHERILS_HAVEN = 3468,
    TBC_AREA_THURONS_LIVERY = 3469,
    TBC_AREA_STILLWHISPER_POND = 3470,
    TBC_AREA_THE_LIVING_WOOD = 3471,
    TBC_AREA_AZUREBREEZE_COAST = 3472,
    TBC_AREA_LAKE_ELRENDAR = 3473,
    TBC_AREA_THE_SCORCHED_GROVE = 3474,
    TBC_AREA_ZEB_WATHA = 3475,
    TBC_AREA_TOR_WATHA = 3476,
    TBC_AREA_KARAZHAN_UNUSED = 3477,
    TBC_AREA_GATES_OF_AHN_QIRAJ = 3478,
    TBC_AREA_THE_VEILED_SEA7 = 3479,
    TBC_AREA_DUSKWITHER_GROUNDS = 3480,
    TBC_AREA_DUSKWITHER_SPIRE = 3481,
    TBC_AREA_THE_DEAD_SCAR = 3482,
    TBC_AREA_HELLFIRE_PENINSULA = 3483,
    TBC_AREA_THE_SUNSPIRE = 3484,
    TBC_AREA_FALTHRIEN_ACADEMY = 3485,
    TBC_AREA_RAVENHOLDT_MANOR = 3486,
    TBC_AREA_SILVERMOON_CITY = 3487,
    TBC_AREA_TRANQUILLIEN = 3488,
    TBC_AREA_SUNCROWN_VILLAGE = 3489,
    TBC_AREA_GOLDENMIST_VILLAGE = 3490,
    TBC_AREA_WINDRUNNER_VILLAGE = 3491,
    TBC_AREA_WINDRUNNER_SPIRE = 3492,
    TBC_AREA_SANCTUM_OF_THE_SUN = 3493,
    TBC_AREA_SANCTUM_OF_THE_MOON = 3494,
    TBC_AREA_DAWNSTAR_SPIRE = 3495,
    TBC_AREA_FARSTRIDER_ENCLAVE = 3496,
    TBC_AREA_AN_DAROTH = 3497,
    TBC_AREA_AN_TELAS = 3498,
    TBC_AREA_AN_OWYN = 3499,
    TBC_AREA_DEATHOLME = 3500,
    TBC_AREA_BLEEDING_ZIGGURAT = 3501,
    TBC_AREA_HOWLING_ZIGGURAT = 3502,
    TBC_AREA_SHALANDIS_ISLE = 3503,
    TBC_AREA_TORYL_ESTATE = 3504,
    TBC_AREA_UNDERLIGHT_MINES = 3505,
    TBC_AREA_ANDILIEN_ESTATE = 3506,
    TBC_AREA_HATCHET_HILLS = 3507,
    TBC_AREA_AMANI_PASS = 3508,
    TBC_AREA_SUNGRAZE_PEAK = 3509,
    TBC_AREA_AMANI_CATACOMBS = 3510,
    TBC_AREA_TOWER_OF_THE_DAMNED = 3511,
    TBC_AREA_ZEB_SORA = 3512,
    TBC_AREA_LAKE_ELRENDAR1 = 3513,
    TBC_AREA_THE_DEAD_SCAR1 = 3514,
    TBC_AREA_ELRENDAR_RIVER = 3515,
    TBC_AREA_ZEB_TELA = 3516,
    TBC_AREA_ZEB_NOWA = 3517,
    TBC_AREA_NAGRAND = 3518,
    TBC_AREA_TEROKKAR_FOREST = 3519,
    TBC_AREA_SHADOWMOON_VALLEY = 3520,
    TBC_AREA_ZANGARMARSH = 3521,
    TBC_AREA_BLADES_EDGE_MOUNTAINS = 3522,
    TBC_AREA_NETHERSTORM = 3523,
    TBC_AREA_AZUREMYST_ISLE = 3524,
    TBC_AREA_BLOODMYST_ISLE = 3525,
    TBC_AREA_AMMEN_VALE = 3526,
    TBC_AREA_CRASH_SITE = 3527,
    TBC_AREA_SILVERLINE_LAKE = 3528,
    TBC_AREA_NESTLEWOOD_THICKET = 3529,
    TBC_AREA_SHADOW_RIDGE = 3530,
    TBC_AREA_SKULKING_ROW = 3531,
    TBC_AREA_DAWNING_LANE = 3532,
    TBC_AREA_RUINS_OF_SILVERMOON = 3533,
    TBC_AREA_FETHS_WAY = 3534,
    TBC_AREA_HELLFIRE_CITADEL = 3535,
    TBC_AREA_THRALLMAR = 3536,
    TBC_AREA_REUSE = 3537,
    TBC_AREA_HONOR_HOLD = 3538,
    TBC_AREA_THE_STAIR_OF_DESTINY = 3539,
    TBC_AREA_TWISTING_NETHER = 3540,
    TBC_AREA_FORGE_CAMP_MAGEDDON = 3541,
    TBC_AREA_THE_PATH_OF_GLORY = 3542,
    TBC_AREA_THE_GREAT_FISSURE = 3543,
    TBC_AREA_PLAIN_OF_SHARDS = 3544,
    TBC_AREA_HELLFIRE_CITADEL1 = 3545,
    TBC_AREA_EXPEDITION_ARMORY = 3546,
    TBC_AREA_THRONE_OF_KIL_JAEDEN = 3547,
    TBC_AREA_FORGE_CAMP_RAGE = 3548,
    TBC_AREA_INVASION_POINT_ANNIHILATOR = 3549,
    TBC_AREA_BORUNE_RUINS = 3550,
    TBC_AREA_RUINS_OF_SHA_NAAR = 3551,
    TBC_AREA_TEMPLE_OF_TELHAMAT = 3552,
    TBC_AREA_POOLS_OF_AGGONAR = 3553,
    TBC_AREA_FALCON_WATCH = 3554,
    TBC_AREA_MAG_HAR_POST = 3555,
    TBC_AREA_DEN_OF_HAAL_ESH = 3556,
    TBC_AREA_THE_EXODAR = 3557,
    TBC_AREA_ELRENDAR_FALLS = 3558,
    TBC_AREA_NESTLEWOOD_HILLS = 3559,
    TBC_AREA_AMMEN_FIELDS = 3560,
    TBC_AREA_THE_SACRED_GROVE = 3561,
    TBC_AREA_HELLFIRE_RAMPARTS = 3562,
    TBC_AREA_HELLFIRE_CITADEL2 = 3563,
    TBC_AREA_EMBERGLADE = 3564,
    TBC_AREA_CENARION_REFUGE = 3565,
    TBC_AREA_MOONWING_DEN = 3566,
    TBC_AREA_POD_CLUSTER = 3567,
    TBC_AREA_POD_WRECKAGE = 3568,
    TBC_AREA_TIDES_HOLLOW = 3569,
    TBC_AREA_WRATHSCALE_POINT = 3570,
    TBC_AREA_BRISTLELIMB_VILLAGE = 3571,
    TBC_AREA_STILLPINE_HOLD = 3572,
    TBC_AREA_ODESYUS_LANDING = 3573,
    TBC_AREA_VALAARS_BERTH = 3574,
    TBC_AREA_SILTING_SHORE = 3575,
    TBC_AREA_AZURE_WATCH = 3576,
    TBC_AREA_GEEZLES_CAMP = 3577,
    TBC_AREA_MENAGERIE_WRECKAGE = 3578,
    TBC_AREA_TRAITORS_COVE = 3579,
    TBC_AREA_WILDWIND_PEAK = 3580,
    TBC_AREA_WILDWIND_PATH = 3581,
    TBC_AREA_ZETH_GOR = 3582,
    TBC_AREA_BERYL_COAST = 3583,
    TBC_AREA_BLOOD_WATCH = 3584,
    TBC_AREA_BLADEWOOD = 3585,
    TBC_AREA_THE_VECTOR_COIL = 3586,
    TBC_AREA_THE_WARP_PISTON = 3587,
    TBC_AREA_THE_CRYO_CORE = 3588,
    TBC_AREA_THE_CRIMSON_REACH = 3589,
    TBC_AREA_WRATHSCALE_LAIR = 3590,
    TBC_AREA_RUINS_OF_LORETH_ARAN = 3591,
    TBC_AREA_NAZZIVIAN = 3592,
    TBC_AREA_AXXARIEN = 3593,
    TBC_AREA_BLACKSILT_SHORE = 3594,
    TBC_AREA_THE_FOUL_POOL = 3595,
    TBC_AREA_THE_HIDDEN_REEF = 3596,
    TBC_AREA_AMBERWEB_PASS = 3597,
    TBC_AREA_WYRMSCAR_ISLAND = 3598,
    TBC_AREA_TALON_STAND = 3599,
    TBC_AREA_BRISTLELIMB_ENCLAVE = 3600,
    TBC_AREA_RAGEFEATHER_RIDGE = 3601,
    TBC_AREA_KESSELS_CROSSING = 3602,
    TBC_AREA_TEL_ATHIONS_CAMP = 3603,
    TBC_AREA_THE_BLOODCURSED_REEF = 3604,
    TBC_AREA_HYJAL_PAST = 3605,
    TBC_AREA_HYJAL_SUMMIT = 3606,
    TBC_AREA_SERPENTSHRINE_CAVERN = 3607,
    TBC_AREA_VINDICATORS_REST = 3608,
    TBC_AREA_UNUSEDTHREE = 3609,
    TBC_AREA_BURNING_BLADE_RUINS = 3610,
    TBC_AREA_CLAN_WATCH = 3611,
    TBC_AREA_BLOODCURSE_ISLE = 3612,
    TBC_AREA_GARADAR = 3613,
    TBC_AREA_SKYSONG_LAKE = 3614,
    TBC_AREA_THRONE_OF_THE_ELEMENTS = 3615,
    TBC_AREA_LAUGHING_SKULL_RUINS = 3616,
    TBC_AREA_WARMAUL_HILL = 3617,
    TBC_AREA_GRUULS_LAIR = 3618,
    TBC_AREA_AUREN_RIDGE = 3619,
    TBC_AREA_AUREN_FALLS = 3620,
    TBC_AREA_LAKE_SUNSPRING = 3621,
    TBC_AREA_SUNSPRING_POST = 3622,
    TBC_AREA_AERIS_LANDING = 3623,
    TBC_AREA_FORGE_CAMP_FEAR = 3624,
    TBC_AREA_FORGE_CAMP_HATE = 3625,
    TBC_AREA_TELAAR = 3626,
    TBC_AREA_NORTHWIND_CLEFT = 3627,
    TBC_AREA_HALAA = 3628,
    TBC_AREA_SOUTHWIND_CLEFT = 3629,
    TBC_AREA_OSHU_GUN = 3630,
    TBC_AREA_SPIRIT_FIELDS = 3631,
    TBC_AREA_SHAMANAR = 3632,
    TBC_AREA_ANCESTRAL_GROUNDS = 3633,
    TBC_AREA_WINDYREED_VILLAGE = 3634,
    TBC_AREA_UNUSED2 = 3635,
    TBC_AREA_ELEMENTAL_PLATEAU = 3636,
    TBC_AREA_KILSORROW_FORTRESS = 3637,
    TBC_AREA_THE_RING_OF_TRIALS = 3638,
    TBC_AREA_SILVERMYST_ISLE = 3639,
    TBC_AREA_DAGGERFEN_VILLAGE = 3640,
    TBC_AREA_UMBRAFEN_VILLAGE = 3641,
    TBC_AREA_FERALFEN_VILLAGE = 3642,
    TBC_AREA_BLOODSCALE_ENCLAVE = 3643,
    TBC_AREA_TELREDOR = 3644,
    TBC_AREA_ZABRA_JIN = 3645,
    TBC_AREA_QUAGG_RIDGE = 3646,
    TBC_AREA_THE_SPAWNING_GLEN = 3647,
    TBC_AREA_THE_DEAD_MIRE = 3648,
    TBC_AREA_SPOREGGAR = 3649,
    TBC_AREA_ANGO_ROSH_GROUNDS = 3650,
    TBC_AREA_ANGO_ROSH_STRONGHOLD = 3651,
    TBC_AREA_FUNGGOR_CAVERN = 3652,
    TBC_AREA_SERPENT_LAKE = 3653,
    TBC_AREA_THE_DRAIN = 3654,
    TBC_AREA_UMBRAFEN_LAKE = 3655,
    TBC_AREA_MARSHLIGHT_LAKE = 3656,
    TBC_AREA_PORTAL_CLEARING = 3657,
    TBC_AREA_SPOREWIND_LAKE = 3658,
    TBC_AREA_THE_LAGOON = 3659,
    TBC_AREA_BLADES_RUN = 3660,
    TBC_AREA_BLADE_TOOTH_CANYON = 3661,
    TBC_AREA_COMMONS_HALL = 3662,
    TBC_AREA_DERELICT_MANOR = 3663,
    TBC_AREA_HUNTRESS_OF_THE_SUN = 3664,
    TBC_AREA_FALCONWING_SQUARE = 3665,
    TBC_AREA_HALAANI_BASIN = 3666,
    TBC_AREA_HEWN_BOG = 3667,
    TBC_AREA_BOHA_MU_RUINS = 3668,
    TBC_AREA_THE_STADIUM = 3669,
    TBC_AREA_THE_OVERLOOK = 3670,
    TBC_AREA_BROKEN_HILL = 3671,
    TBC_AREA_MAG_HARI_PROCESSION = 3672,
    TBC_AREA_NESINGWARY_SAFARI = 3673,
    TBC_AREA_CENARION_THICKET = 3674,
    TBC_AREA_TUUREM = 3675,
    TBC_AREA_VEIL_SHIENOR = 3676,
    TBC_AREA_VEIL_SKITH = 3677,
    TBC_AREA_VEIL_SHALAS = 3678,
    TBC_AREA_SKETTIS = 3679,
    TBC_AREA_BLACKWIND_VALLEY = 3680,
    TBC_AREA_FIREWING_POINT = 3681,
    TBC_AREA_GRANGOL_VAR_VILLAGE = 3682,
    TBC_AREA_STONEBREAKER_HOLD = 3683,
    TBC_AREA_ALLERIAN_STRONGHOLD = 3684,
    TBC_AREA_BONECHEWER_RUINS = 3685,
    TBC_AREA_VEIL_LITHIC = 3686,
    TBC_AREA_OLEMBAS = 3687,
    TBC_AREA_AUCHINDOUN = 3688,
    TBC_AREA_VEIL_RESKK = 3689,
    TBC_AREA_BLACKWIND_LAKE = 3690,
    TBC_AREA_LAKE_ERE_NORU = 3691,
    TBC_AREA_LAKE_JORUNE = 3692,
    TBC_AREA_SKETHYL_MOUNTAINS = 3693,
    TBC_AREA_MISTY_RIDGE = 3694,
    TBC_AREA_THE_BROKEN_HILLS = 3695,
    TBC_AREA_THE_BARRIER_HILLS = 3696,
    TBC_AREA_THE_BONE_WASTES = 3697,
    TBC_AREA_NAGRAND_ARENA = 3698,
    TBC_AREA_LAUGHING_SKULL_COURTYARD = 3699,
    TBC_AREA_THE_RING_OF_BLOOD = 3700,
    TBC_AREA_ARENA_FLOOR = 3701,
    TBC_AREA_BLADES_EDGE_ARENA = 3702,
    TBC_AREA_SHATTRATH_CITY = 3703,
    TBC_AREA_THE_SHEPHERDS_GATE = 3704,
    TBC_AREA_TELAARI_BASIN = 3705,
    TBC_AREA_THE_DARK_PORTAL1 = 3706,
    TBC_AREA_ALLIANCE_BASE = 3707,
    TBC_AREA_HORDE_ENCAMPMENT = 3708,
    TBC_AREA_NIGHT_ELF_VILLAGE = 3709,
    TBC_AREA_NORDRASSIL = 3710,
    TBC_AREA_REUSE_ME = 3711,
    TBC_AREA_AREA_52 = 3712,
    TBC_AREA_THE_BLOOD_FURNACE = 3713,
    TBC_AREA_THE_SHATTERED_HALLS = 3714,
    TBC_AREA_THE_STEAMVAULT = 3715,
    TBC_AREA_THE_UNDERBOG = 3716,
    TBC_AREA_THE_SLAVE_PENS = 3717,
    TBC_AREA_SWAMPRAT_POST = 3718,
    TBC_AREA_BLEEDING_HOLLOW_RUINS = 3719,
    TBC_AREA_TWIN_SPIRE_RUINS = 3720,
    TBC_AREA_THE_CRUMBLING_WASTE = 3721,
    TBC_AREA_MANAFORGE_ARA = 3722,
    TBC_AREA_ARKLON_RUINS = 3723,
    TBC_AREA_COSMOWRENCH = 3724,
    TBC_AREA_RUINS_OF_ENKAAT = 3725,
    TBC_AREA_MANAFORGE_B_NAAR = 3726,
    TBC_AREA_THE_SCRAP_FIELD = 3727,
    TBC_AREA_THE_VORTEX_FIELDS = 3728,
    TBC_AREA_THE_HEAP = 3729,
    TBC_AREA_MANAFORGE_CORUU = 3730,
    TBC_AREA_THE_TEMPEST_RIFT = 3731,
    TBC_AREA_KIRIN_VAR_VILLAGE = 3732,
    TBC_AREA_THE_VIOLET_TOWER = 3733,
    TBC_AREA_MANAFORGE_DURO = 3734,
    TBC_AREA_VOIDWIND_PLATEAU = 3735,
    TBC_AREA_MANAFORGE_ULTRIS = 3736,
    TBC_AREA_CELESTIAL_RIDGE = 3737,
    TBC_AREA_THE_STORMSPIRE = 3738,
    TBC_AREA_FORGE_BASE_OBLIVION = 3739,
    TBC_AREA_FORGE_BASE_GEHENNA = 3740,
    TBC_AREA_RUINS_OF_FARAHLON = 3741,
    TBC_AREA_SOCRETHARS_SEAT = 3742,
    TBC_AREA_LEGION_HOLD = 3743,
    TBC_AREA_SHADOWMOON_VILLAGE = 3744,
    TBC_AREA_WILDHAMMER_STRONGHOLD = 3745,
    TBC_AREA_THE_HAND_OF_GUL_DAN = 3746,
    TBC_AREA_THE_FEL_PITS = 3747,
    TBC_AREA_THE_DEATHFORGE = 3748,
    TBC_AREA_COILSKAR_CISTERN = 3749,
    TBC_AREA_COILSKAR_POINT = 3750,
    TBC_AREA_SUNFIRE_POINT = 3751,
    TBC_AREA_ILLIDARI_POINT = 3752,
    TBC_AREA_RUINS_OF_BAA_RI = 3753,
    TBC_AREA_ALTAR_OF_SHA_TAR = 3754,
    TBC_AREA_THE_STAIR_OF_DOOM = 3755,
    TBC_AREA_RUINS_OF_KARABOR = 3756,
    TBC_AREA_ATA_MAL_TERRACE = 3757,
    TBC_AREA_NETHERWING_FIELDS = 3758,
    TBC_AREA_NETHERWING_LEDGE = 3759,
    TBC_AREA_THE_BARRIER_HILLS1 = 3760,
    TBC_AREA_THE_HIGH_PATH = 3761,
    TBC_AREA_WINDYREED_PASS = 3762,
    TBC_AREA_ZANGAR_RIDGE = 3763,
    TBC_AREA_THE_TWILIGHT_RIDGE = 3764,
    TBC_AREA_RAZORTHORN_TRAIL = 3765,
    TBC_AREA_OREBOR_HARBORAGE = 3766,
    TBC_AREA_BLADES_RUN1 = 3767,
    TBC_AREA_JAGGED_RIDGE = 3768,
    TBC_AREA_THUNDERLORD_STRONGHOLD = 3769,
    TBC_AREA_BLADE_TOOTH_CANYON1 = 3770,
    TBC_AREA_THE_LIVING_GROVE = 3771,
    TBC_AREA_SYLVANAAR = 3772,
    TBC_AREA_BLADESPIRE_HOLD = 3773,
    TBC_AREA_GRUULS_LAIR1 = 3774,
    TBC_AREA_CIRCLE_OF_BLOOD = 3775,
    TBC_AREA_BLOODMAUL_OUTPOST = 3776,
    TBC_AREA_BLOODMAUL_CAMP = 3777,
    TBC_AREA_DRAENETHYST_MINE = 3778,
    TBC_AREA_TROGMAS_CLAIM = 3779,
    TBC_AREA_BLACKWING_COVEN = 3780,
    TBC_AREA_GRISHNATH = 3781,
    TBC_AREA_VEIL_LASHH = 3782,
    TBC_AREA_VEIL_VEKH = 3783,
    TBC_AREA_FORGE_CAMP_TERROR = 3784,
    TBC_AREA_FORGE_CAMP_WRATH = 3785,
    TBC_AREA_OGRI_LA = 3786,
    TBC_AREA_FORGE_CAMP_ANGER = 3787,
    TBC_AREA_THE_LOW_PATH = 3788,
    TBC_AREA_SHADOW_LABYRINTH = 3789,
    TBC_AREA_AUCHENAI_CRYPTS = 3790,
    TBC_AREA_SETHEKK_HALLS = 3791,
    TBC_AREA_MANA_TOMBS = 3792,
    TBC_AREA_FELSPARK_RAVINE = 3793,
    TBC_AREA_VALLEY_OF_BONES1 = 3794,
    TBC_AREA_SHA_NAARI_WASTES = 3795,
    TBC_AREA_THE_WARP_FIELDS = 3796,
    TBC_AREA_FALLEN_SKY_RIDGE = 3797,
    TBC_AREA_HAAL_ESHI_GORGE = 3798,
    TBC_AREA_STONEWALL_CANYON = 3799,
    TBC_AREA_THORNFANG_HILL = 3800,
    TBC_AREA_MAG_HAR_GROUNDS = 3801,
    TBC_AREA_VOID_RIDGE = 3802,
    TBC_AREA_THE_ABYSSAL_SHELF = 3803,
    TBC_AREA_THE_LEGION_FRONT = 3804,
    TBC_AREA_ZUL_AMAN = 3805,
    TBC_AREA_SUPPLY_CARAVAN = 3806,
    TBC_AREA_REAVERS_FALL = 3807,
    TBC_AREA_CENARION_POST = 3808,
    TBC_AREA_SOUTHERN_RAMPART = 3809,
    TBC_AREA_NORTHERN_RAMPART = 3810,
    TBC_AREA_GOR_GAZ_OUTPOST = 3811,
    TBC_AREA_SPINEBREAKER_POST = 3812,
    TBC_AREA_THE_PATH_OF_ANGUISH = 3813,
    TBC_AREA_EAST_SUPPLY_CARAVAN = 3814,
    TBC_AREA_EXPEDITION_POINT = 3815,
    TBC_AREA_ZEPPELIN_CRASH = 3816,
    TBC_AREA_TESTING = 3817,
    TBC_AREA_BLOODSCALE_GROUNDS = 3818,
    TBC_AREA_DARKCREST_ENCLAVE = 3819,
    TBC_AREA_EYE_OF_THE_STORM = 3820,
    TBC_AREA_WARDENS_CAGE = 3821,
    TBC_AREA_ECLIPSE_POINT = 3822,
    TBC_AREA_ISLE_OF_TRIBULATIONS = 3823,
    TBC_AREA_BLOODMAUL_RAVINE = 3824,
    TBC_AREA_DRAGONS_END = 3825,
    TBC_AREA_DAGGERMAW_CANYON = 3826,
    TBC_AREA_VEKHAAR_STAND = 3827,
    TBC_AREA_RUUAN_WEALD = 3828,
    TBC_AREA_VEIL_RUUAN = 3829,
    TBC_AREA_RAVENS_WOOD = 3830,
    TBC_AREA_DEATHS_DOOR = 3831,
    TBC_AREA_VORTEX_PINNACLE = 3832,
    TBC_AREA_RAZOR_RIDGE = 3833,
    TBC_AREA_RIDGE_OF_MADNESS = 3834,
    TBC_AREA_DUSTQUILL_RAVINE = 3835,
    TBC_AREA_MAGTHERIDONS_LAIR = 3836,
    TBC_AREA_SUNFURY_HOLD = 3837,
    TBC_AREA_SPINEBREAKER_MOUNTAINS = 3838,
    TBC_AREA_ABANDONED_ARMORY = 3839,
    TBC_AREA_THE_BLACK_TEMPLE = 3840,
    TBC_AREA_DARKCREST_SHORE = 3841,
    TBC_AREA_TEMPEST_KEEP = 3842,
    TBC_AREA_MOK_NATHAL_VILLAGE = 3844,
    TBC_AREA_TEMPEST_KEEP1 = 3845,
    TBC_AREA_THE_ARCATRAZ = 3846,
    TBC_AREA_THE_BOTANICA = 3847,
    TBC_AREA_THE_ARCATRAZ1 = 3848,
    TBC_AREA_THE_MECHANAR = 3849,
    TBC_AREA_NETHERSTONE = 3850,
    TBC_AREA_MIDREALM_POST = 3851,
    TBC_AREA_TULUMANS_LANDING = 3852,
    TBC_AREA_PROTECTORATE_WATCH_POST = 3854,
    TBC_AREA_CIRCLE_OF_BLOOD_ARENA = 3855,
    TBC_AREA_ELRENDAR_CROSSING = 3856,
    TBC_AREA_AMMEN_FORD = 3857,
    TBC_AREA_RAZORTHORN_SHELF = 3858,
    TBC_AREA_SILMYR_LAKE = 3859,
    TBC_AREA_RAASTOK_GLADE = 3860,
    TBC_AREA_THALASSIAN_PASS = 3861,
    TBC_AREA_CHURNING_GULCH = 3862,
    TBC_AREA_BROKEN_WILDS = 3863,
    TBC_AREA_BASH_IR_LANDING = 3864,
    TBC_AREA_CRYSTAL_SPINE = 3865,
    TBC_AREA_SKALD = 3866,
    TBC_AREA_BLADED_GULCH = 3867,
    TBC_AREA_GYRO_PLANK_BRIDGE = 3868,
    TBC_AREA_MAGE_TOWER = 3869,
    TBC_AREA_BLOOD_ELF_TOWER = 3870,
    TBC_AREA_DRAENEI_RUINS = 3871,
    TBC_AREA_FEL_REAVER_RUINS = 3872,
    TBC_AREA_THE_PROVING_GROUNDS = 3873,
    TBC_AREA_ECO_DOME_FARFIELD = 3874,
    TBC_AREA_ECO_DOME_SKYPERCH = 3875,
    TBC_AREA_ECO_DOME_SUTHERON = 3876,
    TBC_AREA_ECO_DOME_MIDREALM = 3877,
    TBC_AREA_ETHEREUM_STAGING_GROUNDS = 3878,
    TBC_AREA_CHAPEL_YARD = 3879,
    TBC_AREA_ACCESS_SHAFT_ZEON = 3880,
    TBC_AREA_TRELLEUM_MINE = 3881,
    TBC_AREA_INVASION_POINT_DESTROYER = 3882,
    TBC_AREA_CAMP_OF_BOOM = 3883,
    TBC_AREA_SPINEBREAKER_PASS = 3884,
    TBC_AREA_NETHERWEB_RIDGE = 3885,
    TBC_AREA_DERELICT_CARAVAN = 3886,
    TBC_AREA_REFUGEE_CARAVAN = 3887,
    TBC_AREA_SHADOW_TOMB = 3888,
    TBC_AREA_VEIL_RHAZE = 3889,
    TBC_AREA_TOMB_OF_LIGHTS = 3890,
    TBC_AREA_CARRION_HILL = 3891,
    TBC_AREA_WRITHING_MOUND = 3892,
    TBC_AREA_RING_OF_OBSERVANCE = 3893,
    TBC_AREA_AUCHENAI_GROUNDS = 3894,
    TBC_AREA_CENARION_WATCHPOST = 3895,
    TBC_AREA_ALDOR_RISE = 3896,
    TBC_AREA_TERRACE_OF_LIGHT = 3897,
    TBC_AREA_SCRYERS_TIER = 3898,
    TBC_AREA_LOWER_CITY = 3899,
    TBC_AREA_INVASION_POINT_OVERLORD = 3900,
    TBC_AREA_ALLERIAN_POST = 3901,
    TBC_AREA_STONEBREAKER_CAMP = 3902,
    TBC_AREA_BOULDER_MOK = 3903,
    TBC_AREA_CURSED_HOLLOW = 3904,
    TBC_AREA_COILFANG_RESERVOIR = 3905,
    TBC_AREA_THE_BLOODWASH = 3906,
    TBC_AREA_VERIDIAN_POINT = 3907,
    TBC_AREA_MIDDENVALE = 3908,
    TBC_AREA_THE_LOST_FOLD = 3909,
    TBC_AREA_MYSTWOOD = 3910,
    TBC_AREA_TRANQUIL_SHORE = 3911,
    TBC_AREA_GOLDENBOUGH_PASS = 3912,
    TBC_AREA_RUNESTONE_FALITHAS = 3913,
    TBC_AREA_RUNESTONE_SHAN_DOR = 3914,
    TBC_AREA_FAIRBRIDGE_STRAND = 3915,
    TBC_AREA_MOONGRAZE_WOODS = 3916,
    TBC_AREA_AUCHINDOUN1 = 3917,
    TBC_AREA_TOSHLEYS_STATION = 3918,
    TBC_AREA_SINGING_RIDGE = 3919,
    TBC_AREA_SHATTER_POINT = 3920,
    TBC_AREA_ARKLONIS_RIDGE = 3921,
    TBC_AREA_BLADESPIRE_OUTPOST = 3922,
    TBC_AREA_GRUULS_LAIR2 = 3923,
    TBC_AREA_NORTHMAUL_TOWER = 3924,
    TBC_AREA_SOUTHMAUL_TOWER = 3925,
    TBC_AREA_SHATTERED_PLAINS = 3926,
    TBC_AREA_ORONOKS_FARM = 3927,
    TBC_AREA_THE_ALTAR_OF_DAMNATION = 3928,
    TBC_AREA_THE_PATH_OF_CONQUEST = 3929,
    TBC_AREA_ECLIPSION_FIELDS = 3930,
    TBC_AREA_BLADESPIRE_GROUNDS = 3931,
    TBC_AREA_SKETH_LON_BASE_CAMP = 3932,
    TBC_AREA_SKETH_LON_WRECKAGE = 3933,
    TBC_AREA_TOWN_SQUARE = 3934,
    TBC_AREA_WIZARD_ROW = 3935,
    TBC_AREA_DEATHFORGE_TOWER = 3936,
    TBC_AREA_SLAG_WATCH = 3937,
    TBC_AREA_SANCTUM_OF_THE_STARS = 3938,
    TBC_AREA_DRAGONMAW_FORTRESS = 3939,
    TBC_AREA_THE_FETID_POOL = 3940,
    TBC_AREA_TEST = 3941,
    TBC_AREA_RAZAANS_LANDING = 3942,
    TBC_AREA_INVASION_POINT_CATACLYSM = 3943,
    TBC_AREA_THE_ALTAR_OF_SHADOWS = 3944,
    TBC_AREA_NETHERWING_PASS = 3945,
    TBC_AREA_WAYNES_REFUGE = 3946,
    TBC_AREA_THE_SCALDING_POOLS = 3947,
    TBC_AREA_BRIAN_AND_PAT_TEST = 3948,
    TBC_AREA_MAGMA_FIELDS = 3949,
    TBC_AREA_CRIMSON_WATCH = 3950,
    TBC_AREA_EVERGROVE = 3951,
    TBC_AREA_WYRMSKULL_BRIDGE = 3952,
    TBC_AREA_SCALEWING_SHELF = 3953,
    TBC_AREA_WYRMSKULL_TUNNEL = 3954,
    TBC_AREA_HELLFIRE_BASIN = 3955,
    TBC_AREA_THE_SHADOW_STAIR = 3956,
    TBC_AREA_SHA_TARI_OUTPOST = 3957,
    TBC_AREA_SHA_TARI_BASE_CAMP = 3958,
    TBC_AREA_BLACK_TEMPLE = 3959,
    TBC_AREA_SOULGRINDERS_BARROW = 3960,
    TBC_AREA_SORROW_WING_POINT = 3961,
    TBC_AREA_VIM_GOLS_CIRCLE = 3962,
    TBC_AREA_DRAGONSPINE_RIDGE = 3963,
    TBC_AREA_SKYGUARD_OUTPOST = 3964,
    TBC_AREA_NETHERWING_MINES = 3965,
    TBC_AREA_DRAGONMAW_BASE_CAMP = 3966,
    TBC_AREA_DRAGONMAW_SKYWAY = 3967,
    TBC_AREA_RUINS_OF_LORDAERON1 = 3968,
    TBC_AREA_RIVENDARKS_PERCH = 3969,
    TBC_AREA_OBSIDIAS_PERCH = 3970,
    TBC_AREA_INSIDIONS_PERCH = 3971,
    TBC_AREA_FURYWINGS_PERCH = 3972,
    TBC_AREA_BLACKWIND_LANDING = 3973,
    TBC_AREA_VEIL_HARR_IK = 3974,
    TBC_AREA_TEROKKS_REST = 3975,
    TBC_AREA_VEIL_ALA_RAK = 3976,
    TBC_AREA_UPPER_VEIL_SHIL_AK = 3977,
    TBC_AREA_LOWER_VEIL_SHIL_AK = 3978,
    TBC_AREA_SHARTUULS_TRANSPORTER = 4008,
    TBC_AREA_ILLIDARI_TRAINING_GROUNDS = 4009,
    TBC_AREA_MUDSPROCKET = 4010,
    TBC_AREA_DIREHORN_POST = 4046,
    TBC_AREA_NATS_LANDING = 4047,
    TBC_AREA_TABETHAS_FARM = 4049,
    TBC_AREA_PLAGUEWOOD_TOWER = 4067,
    TBC_AREA_SUNWELL_PLATEAU = 4075,
    TBC_AREA_REUSE_ME_SEVEN = 4076,
    TBC_AREA_RAZORTHORN_RISE = 4078,
    TBC_AREA_ISLE_OF_QUEL_DANAS = 4080,
    TBC_AREA_THE_DAWNCHASER = 4081,
    TBC_AREA_THE_SIN_LOREN = 4082,
    TBC_AREA_SILVERMOONS_PRIDE = 4083,
    TBC_AREA_THE_BLOODOATH = 4084,
    TBC_AREA_SHATTERED_SUN_STAGING_AREA = 4085,
    TBC_AREA_SUNS_REACH_SANCTUM = 4086,
    TBC_AREA_SUNS_REACH_HARBOR = 4087,
    TBC_AREA_SUNS_REACH_ARMORY = 4088,
    TBC_AREA_DAWNSTAR_VILLAGE = 4089,
    TBC_AREA_THE_DAWNING_SQUARE = 4090,
    TBC_AREA_GREENGILL_COAST = 4091,
    TBC_AREA_THE_DEAD_SCAR2 = 4092,
    TBC_AREA_THE_SUN_FORGE = 4093,
    TBC_AREA_SUNWELL_PLATEAU1 = 4094,
    TBC_AREA_MAGISTERS_TERRACE = 4095,
    TBC_AREA_MAGISTERS_TERRACE1 = 4131,
    TBC_AREA_PARHELION_PLAZA = 4139,
    TBC_AREA_THE_DEAD_SCAR3 = 4140
} tbc_Area;

typedef enum {
    TBC_ARENA_FACTION_HORDE = 0,
    TBC_ARENA_FACTION_ALLIANCE = 1
} tbc_ArenaFaction;

typedef enum {
    TBC_ARENA_TEAM_COMMAND_TEAM_CREATE_S = 0,
    TBC_ARENA_TEAM_COMMAND_TEAM_INVITE_SS = 1,
    TBC_ARENA_TEAM_COMMAND_TEAM_QUIT_S = 3,
    TBC_ARENA_TEAM_COMMAND_TEAM_FOUNDER_S = 14
} tbc_ArenaTeamCommand;

typedef enum {
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_INTERNAL = 1,
    TBC_ARENA_TEAM_COMMAND_ERROR_ALREADY_IN_ARENA_TEAM = 2,
    TBC_ARENA_TEAM_COMMAND_ERROR_ALREADY_IN_ARENA_TEAM_S = 3,
    TBC_ARENA_TEAM_COMMAND_ERROR_INVITED_TO_ARENA_TEAM = 4,
    TBC_ARENA_TEAM_COMMAND_ERROR_ALREADY_INVITED_TO_ARENA_TEAM_S = 5,
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_NAME_INVALID = 6,
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_NAME_EXISTS_S = 7,
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_LEADER_LEAVE_S = 8,
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_PLAYER_NOT_IN_TEAM = 9,
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_PLAYER_NOT_IN_TEAM_SS = 10,
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_PLAYER_NOT_FOUND_S = 11,
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_NOT_ALLIED = 12,
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_IGNORING_YOU_S = 19,
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_TARGET_TOO_LOW_S = 21,
    TBC_ARENA_TEAM_COMMAND_ERROR_ARENA_TEAM_TOO_MANY_MEMBERS_S = 22
} tbc_ArenaTeamCommandError;

typedef enum {
    TBC_ARENA_TEAM_EVENT_JOIN = 3,
    TBC_ARENA_TEAM_EVENT_LEAVE = 4,
    TBC_ARENA_TEAM_EVENT_REMOVE = 5,
    TBC_ARENA_TEAM_EVENT_LEADER_IS = 6,
    TBC_ARENA_TEAM_EVENT_LEADER_CHANGED = 7,
    TBC_ARENA_TEAM_EVENT_DISBANDED = 8
} tbc_ArenaTeamEvent;

typedef enum {
    TBC_ARENA_TEAM_ROLE_CAPTAIN = 0,
    TBC_ARENA_TEAM_ROLE_MEMBER = 1
} tbc_ArenaTeamRole;

typedef enum {
    TBC_ARENA_TYPE_NOT_ARENA = 0,
    TBC_ARENA_TYPE_TWO_VS_TWO = 2,
    TBC_ARENA_TYPE_THREE_VS_THREE = 3,
    TBC_ARENA_TYPE_FIVE_VS_FIVE = 5
} tbc_ArenaType;

typedef enum {
    TBC_AUCTION_COMMAND_ACTION_STARTED = 0,
    TBC_AUCTION_COMMAND_ACTION_REMOVED = 1,
    TBC_AUCTION_COMMAND_ACTION_BID_PLACED = 2
} tbc_AuctionCommandAction;

typedef enum {
    TBC_AUCTION_COMMAND_RESULT_OK = 0,
    TBC_AUCTION_COMMAND_RESULT_ERR_INVENTORY = 1,
    TBC_AUCTION_COMMAND_RESULT_ERR_DATABASE = 2,
    TBC_AUCTION_COMMAND_RESULT_ERR_NOT_ENOUGH_MONEY = 3,
    TBC_AUCTION_COMMAND_RESULT_ERR_ITEM_NOT_FOUND = 4,
    TBC_AUCTION_COMMAND_RESULT_ERR_HIGHER_BID = 5,
    TBC_AUCTION_COMMAND_RESULT_ERR_BID_INCREMENT = 7,
    TBC_AUCTION_COMMAND_RESULT_ERR_BID_OWN = 10,
    TBC_AUCTION_COMMAND_RESULT_ERR_RESTRICTED_ACCOUNT = 13
} tbc_AuctionCommandResult;

typedef enum {
    TBC_AUCTION_COMMAND_RESULT_TWO_OK = 0,
    TBC_AUCTION_COMMAND_RESULT_TWO_ERR_INVENTORY = 1,
    TBC_AUCTION_COMMAND_RESULT_TWO_ERR_DATABASE = 2,
    TBC_AUCTION_COMMAND_RESULT_TWO_ERR_NOT_ENOUGH_MONEY = 3,
    TBC_AUCTION_COMMAND_RESULT_TWO_ERR_ITEM_NOT_FOUND = 4,
    TBC_AUCTION_COMMAND_RESULT_TWO_ERR_HIGHER_BID = 5,
    TBC_AUCTION_COMMAND_RESULT_TWO_ERR_BID_INCREMENT = 7,
    TBC_AUCTION_COMMAND_RESULT_TWO_ERR_BID_OWN = 10,
    TBC_AUCTION_COMMAND_RESULT_TWO_ERR_RESTRICTED_ACCOUNT = 13
} tbc_AuctionCommandResultTwo;

typedef enum {
    TBC_AUCTION_HOUSE_STORMWIND = 1,
    TBC_AUCTION_HOUSE_ALLIANCE = 2,
    TBC_AUCTION_HOUSE_DARNASSUS = 3,
    TBC_AUCTION_HOUSE_UNDERCITY = 4,
    TBC_AUCTION_HOUSE_THUNDER_BLUFF = 5,
    TBC_AUCTION_HOUSE_HORDE = 6,
    TBC_AUCTION_HOUSE_GOBLIN = 7
} tbc_AuctionHouse;

typedef enum {
    TBC_AURA_MOD_NONE = 0,
    TBC_AURA_MOD_BIND_SIGHT = 1,
    TBC_AURA_MOD_MOD_POSSESS = 2,
    TBC_AURA_MOD_PERIODIC_DAMAGE = 3,
    TBC_AURA_MOD_DUMMY = 4,
    TBC_AURA_MOD_MOD_CONFUSE = 5,
    TBC_AURA_MOD_MOD_CHARM = 6,
    TBC_AURA_MOD_MOD_FEAR = 7,
    TBC_AURA_MOD_PERIODIC_HEAL = 8,
    TBC_AURA_MOD_MOD_ATTACKSPEED = 9,
    TBC_AURA_MOD_MOD_THREAT = 10,
    TBC_AURA_MOD_MOD_TAUNT = 11,
    TBC_AURA_MOD_MOD_STUN = 12,
    TBC_AURA_MOD_MOD_DAMAGE_DONE = 13,
    TBC_AURA_MOD_MOD_DAMAGE_TAKEN = 14,
    TBC_AURA_MOD_DAMAGE_SHIELD = 15,
    TBC_AURA_MOD_MOD_STEALTH = 16,
    TBC_AURA_MOD_MOD_STEALTH_DETECT = 17,
    TBC_AURA_MOD_MOD_INVISIBILITY = 18,
    TBC_AURA_MOD_MOD_INVISIBILITY_DETECTION = 19,
    TBC_AURA_MOD_OBS_MOD_HEALTH = 20,
    TBC_AURA_MOD_OBS_MOD_MANA = 21,
    TBC_AURA_MOD_MOD_RESISTANCE = 22,
    TBC_AURA_MOD_PERIODIC_TRIGGER_SPELL = 23,
    TBC_AURA_MOD_PERIODIC_ENERGIZE = 24,
    TBC_AURA_MOD_MOD_PACIFY = 25,
    TBC_AURA_MOD_MOD_ROOT = 26,
    TBC_AURA_MOD_MOD_SILENCE = 27,
    TBC_AURA_MOD_REFLECT_SPELLS = 28,
    TBC_AURA_MOD_MOD_STAT = 29,
    TBC_AURA_MOD_MOD_SKILL = 30,
    TBC_AURA_MOD_MOD_INCREASE_SPEED = 31,
    TBC_AURA_MOD_MOD_INCREASE_MOUNTED_SPEED = 32,
    TBC_AURA_MOD_MOD_DECREASE_SPEED = 33,
    TBC_AURA_MOD_MOD_INCREASE_HEALTH = 34,
    TBC_AURA_MOD_MOD_INCREASE_ENERGY = 35,
    TBC_AURA_MOD_MOD_SHAPESHIFT = 36,
    TBC_AURA_MOD_EFFECT_IMMUNITY = 37,
    TBC_AURA_MOD_STATE_IMMUNITY = 38,
    TBC_AURA_MOD_SCHOOL_IMMUNITY = 39,
    TBC_AURA_MOD_DAMAGE_IMMUNITY = 40,
    TBC_AURA_MOD_DISPEL_IMMUNITY = 41,
    TBC_AURA_MOD_PROC_TRIGGER_SPELL = 42,
    TBC_AURA_MOD_PROC_TRIGGER_DAMAGE = 43,
    TBC_AURA_MOD_TRACK_CREATURES = 44,
    TBC_AURA_MOD_TRACK_RESOURCES = 45,
    TBC_AURA_MOD_UNKNOWN46 = 46,
    TBC_AURA_MOD_MOD_PARRY_PERCENT = 47,
    TBC_AURA_MOD_UNKNOWN48 = 48,
    TBC_AURA_MOD_MOD_DODGE_PERCENT = 49,
    TBC_AURA_MOD_MOD_BLOCK_SKILL = 50,
    TBC_AURA_MOD_MOD_BLOCK_PERCENT = 51,
    TBC_AURA_MOD_MOD_CRIT_PERCENT = 52,
    TBC_AURA_MOD_PERIODIC_LEECH = 53,
    TBC_AURA_MOD_MOD_HIT_CHANCE = 54,
    TBC_AURA_MOD_MOD_SPELL_HIT_CHANCE = 55,
    TBC_AURA_MOD_TRANSFORM = 56,
    TBC_AURA_MOD_MOD_SPELL_CRIT_CHANCE = 57,
    TBC_AURA_MOD_MOD_INCREASE_SWIM_SPEED = 58,
    TBC_AURA_MOD_MOD_DAMAGE_DONE_CREATURE = 59,
    TBC_AURA_MOD_MOD_PACIFY_SILENCE = 60,
    TBC_AURA_MOD_MOD_SCALE = 61,
    TBC_AURA_MOD_PERIODIC_HEALTH_FUNNEL = 62,
    TBC_AURA_MOD_PERIODIC_MANA_FUNNEL = 63,
    TBC_AURA_MOD_PERIODIC_MANA_LEECH = 64,
    TBC_AURA_MOD_MOD_CASTING_SPEED_NOT_STACK = 65,
    TBC_AURA_MOD_FEIGN_DEATH = 66,
    TBC_AURA_MOD_MOD_DISARM = 67,
    TBC_AURA_MOD_MOD_STALKED = 68,
    TBC_AURA_MOD_SCHOOL_ABSORB = 69,
    TBC_AURA_MOD_EXTRA_ATTACKS = 70,
    TBC_AURA_MOD_MOD_SPELL_CRIT_CHANCE_SCHOOL = 71,
    TBC_AURA_MOD_MOD_POWER_COST_SCHOOL_PCT = 72,
    TBC_AURA_MOD_MOD_POWER_COST_SCHOOL = 73,
    TBC_AURA_MOD_REFLECT_SPELLS_SCHOOL = 74,
    TBC_AURA_MOD_MOD_LANGUAGE = 75,
    TBC_AURA_MOD_FAR_SIGHT = 76,
    TBC_AURA_MOD_MECHANIC_IMMUNITY = 77,
    TBC_AURA_MOD_MOUNTED = 78,
    TBC_AURA_MOD_MOD_DAMAGE_PERCENT_DONE = 79,
    TBC_AURA_MOD_MOD_PERCENT_STAT = 80,
    TBC_AURA_MOD_SPLIT_DAMAGE_PCT = 81,
    TBC_AURA_MOD_WATER_BREATHING = 82,
    TBC_AURA_MOD_MOD_BASE_RESISTANCE = 83,
    TBC_AURA_MOD_MOD_REGEN = 84,
    TBC_AURA_MOD_MOD_POWER_REGEN = 85,
    TBC_AURA_MOD_CHANNEL_DEATH_ITEM = 86,
    TBC_AURA_MOD_MOD_DAMAGE_PERCENT_TAKEN = 87,
    TBC_AURA_MOD_MOD_HEALTH_REGEN_PERCENT = 88,
    TBC_AURA_MOD_PERIODIC_DAMAGE_PERCENT = 89,
    TBC_AURA_MOD_MOD_RESIST_CHANCE = 90,
    TBC_AURA_MOD_MOD_DETECT_RANGE = 91,
    TBC_AURA_MOD_PREVENTS_FLEEING = 92,
    TBC_AURA_MOD_MOD_UNATTACKABLE = 93,
    TBC_AURA_MOD_INTERRUPT_REGEN = 94,
    TBC_AURA_MOD_GHOST = 95,
    TBC_AURA_MOD_SPELL_MAGNET = 96,
    TBC_AURA_MOD_MANA_SHIELD = 97,
    TBC_AURA_MOD_MOD_SKILL_TALENT = 98,
    TBC_AURA_MOD_MOD_ATTACK_POWER = 99,
    TBC_AURA_MOD_AURAS_VISIBLE = 100,
    TBC_AURA_MOD_MOD_RESISTANCE_PCT = 101,
    TBC_AURA_MOD_MOD_MELEE_ATTACK_POWER_VERSUS = 102,
    TBC_AURA_MOD_MOD_TOTAL_THREAT = 103,
    TBC_AURA_MOD_WATER_WALK = 104,
    TBC_AURA_MOD_FEATHER_FALL = 105,
    TBC_AURA_MOD_HOVER = 106,
    TBC_AURA_MOD_ADD_FLAT_MODIFIER = 107,
    TBC_AURA_MOD_ADD_PCT_MODIFIER = 108,
    TBC_AURA_MOD_ADD_TARGET_TRIGGER = 109,
    TBC_AURA_MOD_MOD_POWER_REGEN_PERCENT = 110,
    TBC_AURA_MOD_ADD_CASTER_HIT_TRIGGER = 111,
    TBC_AURA_MOD_OVERRIDE_CLASS_SCRIPTS = 112,
    TBC_AURA_MOD_MOD_RANGED_DAMAGE_TAKEN = 113,
    TBC_AURA_MOD_MOD_RANGED_DAMAGE_TAKEN_PCT = 114,
    TBC_AURA_MOD_MOD_HEALING = 115,
    TBC_AURA_MOD_MOD_REGEN_DURING_COMBAT = 116,
    TBC_AURA_MOD_MOD_MECHANIC_RESISTANCE = 117,
    TBC_AURA_MOD_MOD_HEALING_PCT = 118,
    TBC_AURA_MOD_SHARE_PET_TRACKING = 119,
    TBC_AURA_MOD_UNTRACKABLE = 120,
    TBC_AURA_MOD_EMPATHY = 121,
    TBC_AURA_MOD_MOD_OFFHAND_DAMAGE_PCT = 122,
    TBC_AURA_MOD_MOD_TARGET_RESISTANCE = 123,
    TBC_AURA_MOD_MOD_RANGED_ATTACK_POWER = 124,
    TBC_AURA_MOD_MOD_MELEE_DAMAGE_TAKEN = 125,
    TBC_AURA_MOD_MOD_MELEE_DAMAGE_TAKEN_PCT = 126,
    TBC_AURA_MOD_RANGED_ATTACK_POWER_ATTACKER_BONUS = 127,
    TBC_AURA_MOD_MOD_POSSESS_PET = 128,
    TBC_AURA_MOD_MOD_SPEED_ALWAYS = 129,
    TBC_AURA_MOD_MOD_MOUNTED_SPEED_ALWAYS = 130,
    TBC_AURA_MOD_MOD_RANGED_ATTACK_POWER_VERSUS = 131,
    TBC_AURA_MOD_MOD_INCREASE_ENERGY_PERCENT = 132,
    TBC_AURA_MOD_MOD_INCREASE_HEALTH_PERCENT = 133,
    TBC_AURA_MOD_MOD_MANA_REGEN_INTERRUPT = 134,
    TBC_AURA_MOD_MOD_HEALING_DONE = 135,
    TBC_AURA_MOD_MOD_HEALING_DONE_PERCENT = 136,
    TBC_AURA_MOD_MOD_TOTAL_STAT_PERCENTAGE = 137,
    TBC_AURA_MOD_MOD_MELEE_HASTE = 138,
    TBC_AURA_MOD_FORCE_REACTION = 139,
    TBC_AURA_MOD_MOD_RANGED_HASTE = 140,
    TBC_AURA_MOD_MOD_RANGED_AMMO_HASTE = 141,
    TBC_AURA_MOD_MOD_BASE_RESISTANCE_PCT = 142,
    TBC_AURA_MOD_MOD_RESISTANCE_EXCLUSIVE = 143,
    TBC_AURA_MOD_SAFE_FALL = 144,
    TBC_AURA_MOD_CHARISMA = 145,
    TBC_AURA_MOD_PERSUADED = 146,
    TBC_AURA_MOD_MECHANIC_IMMUNITY_MASK = 147,
    TBC_AURA_MOD_RETAIN_COMBO_POINTS = 148,
    TBC_AURA_MOD_RESIST_PUSHBACK = 149,
    TBC_AURA_MOD_MOD_SHIELD_BLOCKVALUE_PCT = 150,
    TBC_AURA_MOD_TRACK_STEALTHED = 151,
    TBC_AURA_MOD_MOD_DETECTED_RANGE = 152,
    TBC_AURA_MOD_SPLIT_DAMAGE_FLAT = 153,
    TBC_AURA_MOD_MOD_STEALTH_LEVEL = 154,
    TBC_AURA_MOD_MOD_WATER_BREATHING = 155,
    TBC_AURA_MOD_MOD_REPUTATION_GAIN = 156,
    TBC_AURA_MOD_PET_DAMAGE_MULTI = 157,
    TBC_AURA_MOD_MOD_SHIELD_BLOCKVALUE = 158,
    TBC_AURA_MOD_NO_PVP_CREDIT = 159,
    TBC_AURA_MOD_MOD_AOE_AVOIDANCE = 160,
    TBC_AURA_MOD_MOD_HEALTH_REGEN_IN_COMBAT = 161,
    TBC_AURA_MOD_POWER_BURN_MANA = 162,
    TBC_AURA_MOD_MOD_CRIT_DAMAGE_BONUS = 163,
    TBC_AURA_MOD_UNKNOWN164 = 164,
    TBC_AURA_MOD_MELEE_ATTACK_POWER_ATTACKER_BONUS = 165,
    TBC_AURA_MOD_MOD_ATTACK_POWER_PCT = 166,
    TBC_AURA_MOD_MOD_RANGED_ATTACK_POWER_PCT = 167,
    TBC_AURA_MOD_MOD_DAMAGE_DONE_VERSUS = 168,
    TBC_AURA_MOD_MOD_CRIT_PERCENT_VERSUS = 169,
    TBC_AURA_MOD_DETECT_AMORE = 170,
    TBC_AURA_MOD_MOD_SPEED_NOT_STACK = 171,
    TBC_AURA_MOD_MOD_MOUNTED_SPEED_NOT_STACK = 172,
    TBC_AURA_MOD_ALLOW_CHAMPION_SPELLS = 173,
    TBC_AURA_MOD_MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174,
    TBC_AURA_MOD_MOD_SPELL_HEALING_OF_STAT_PERCENT = 175,
    TBC_AURA_MOD_SPIRIT_OF_REDEMPTION = 176,
    TBC_AURA_MOD_AOE_CHARM = 177,
    TBC_AURA_MOD_MOD_DEBUFF_RESISTANCE = 178,
    TBC_AURA_MOD_MOD_ATTACKER_SPELL_CRIT_CHANCE = 179,
    TBC_AURA_MOD_MOD_FLAT_SPELL_DAMAGE_VERSUS = 180,
    TBC_AURA_MOD_MOD_FLAT_SPELL_CRIT_DAMAGE_VERSUS = 181,
    TBC_AURA_MOD_MOD_RESISTANCE_OF_STAT_PERCENT = 182,
    TBC_AURA_MOD_MOD_CRITICAL_THREAT = 183,
    TBC_AURA_MOD_MOD_ATTACKER_MELEE_HIT_CHANCE = 184,
    TBC_AURA_MOD_MOD_ATTACKER_RANGED_HIT_CHANCE = 185,
    TBC_AURA_MOD_MOD_ATTACKER_SPELL_HIT_CHANCE = 186,
    TBC_AURA_MOD_MOD_ATTACKER_MELEE_CRIT_CHANCE = 187,
    TBC_AURA_MOD_MOD_ATTACKER_RANGED_CRIT_CHANCE = 188,
    TBC_AURA_MOD_MOD_RATING = 189,
    TBC_AURA_MOD_MOD_FACTION_REPUTATION_GAIN = 190,
    TBC_AURA_MOD_USE_NORMAL_MOVEMENT_SPEED = 191,
    TBC_AURA_MOD_MOD_MELEE_RANGED_HASTE = 192,
    TBC_AURA_MOD_HASTE_ALL = 193,
    TBC_AURA_MOD_MOD_DEPRICATED_1 = 194,
    TBC_AURA_MOD_MOD_DEPRICATED_2 = 195,
    TBC_AURA_MOD_MOD_COOLDOWN = 196,
    TBC_AURA_MOD_MOD_ATTACKER_SPELL_AND_WEAPON_CRIT_CHANCE = 197,
    TBC_AURA_MOD_MOD_ALL_WEAPON_SKILLS = 198,
    TBC_AURA_MOD_MOD_INCREASES_SPELL_PCT_TO_HIT = 199,
    TBC_AURA_MOD_MOD_XP_PCT = 200,
    TBC_AURA_MOD_FLY = 201,
    TBC_AURA_MOD_IGNORE_COMBAT_RESULT = 202,
    TBC_AURA_MOD_MOD_ATTACKER_MELEE_CRIT_DAMAGE = 203,
    TBC_AURA_MOD_MOD_ATTACKER_RANGED_CRIT_DAMAGE = 204,
    TBC_AURA_MOD_MOD_ATTACKER_SPELL_CRIT_DAMAGE = 205,
    TBC_AURA_MOD_MOD_FLIGHT_SPEED = 206,
    TBC_AURA_MOD_MOD_FLIGHT_SPEED_MOUNTED = 207,
    TBC_AURA_MOD_MOD_FLIGHT_SPEED_STACKING = 208,
    TBC_AURA_MOD_MOD_FLIGHT_SPEED_MOUNTED_STACKING = 209,
    TBC_AURA_MOD_MOD_FLIGHT_SPEED_NOT_STACKING = 210,
    TBC_AURA_MOD_MOD_FLIGHT_SPEED_MOUNTED_NOT_STACKING = 211,
    TBC_AURA_MOD_MOD_RANGED_ATTACK_POWER_OF_STAT_PERCENT = 212,
    TBC_AURA_MOD_MOD_RAGE_FROM_DAMAGE_DEALT = 213,
    TBC_AURA_MOD_UNKNOWN214 = 214,
    TBC_AURA_MOD_ARENA_PREPARATION = 215,
    TBC_AURA_MOD_HASTE_SPELLS = 216,
    TBC_AURA_MOD_UNKNOWN217 = 217,
    TBC_AURA_MOD_HASTE_RANGED = 218,
    TBC_AURA_MOD_MOD_MANA_REGEN_FROM_STAT = 219,
    TBC_AURA_MOD_MOD_RATING_FROM_STAT = 220,
    TBC_AURA_MOD_UNKNOWN221 = 221,
    TBC_AURA_MOD_UNKNOWN222 = 222,
    TBC_AURA_MOD_UNKNOWN223 = 223,
    TBC_AURA_MOD_UNKNOWN224 = 224,
    TBC_AURA_MOD_PRAYER_OF_MENDING = 225,
    TBC_AURA_MOD_PERIODIC_DUMMY = 226,
    TBC_AURA_MOD_PERIODIC_TRIGGER_SPELL_WITH_VALUE = 227,
    TBC_AURA_MOD_DETECT_STEALTH = 228,
    TBC_AURA_MOD_MOD_AOE_DAMAGE_AVOIDANCE = 229,
    TBC_AURA_MOD_UNKNOWN230 = 230,
    TBC_AURA_MOD_PROC_TRIGGER_SPELL_WITH_VALUE = 231,
    TBC_AURA_MOD_MECHANIC_DURATION_MOD = 232,
    TBC_AURA_MOD_UNKNOWN233 = 233,
    TBC_AURA_MOD_MECHANIC_DURATION_MOD_NOT_STACK = 234,
    TBC_AURA_MOD_MOD_DISPEL_RESIST = 235,
    TBC_AURA_MOD_UNKNOWN236 = 236,
    TBC_AURA_MOD_MOD_SPELL_DAMAGE_OF_ATTACK_POWER = 237,
    TBC_AURA_MOD_MOD_SPELL_HEALING_OF_ATTACK_POWER = 238,
    TBC_AURA_MOD_MOD_SCALE_2 = 239,
    TBC_AURA_MOD_MOD_EXPERTISE = 240,
    TBC_AURA_MOD_FORCE_MOVE_FORWARD = 241,
    TBC_AURA_MOD_UNKNOWN242 = 242,
    TBC_AURA_MOD_UNKNOWN243 = 243,
    TBC_AURA_MOD_COMPREHEND_LANGUAGE = 244,
    TBC_AURA_MOD_UNKNOWN245 = 245,
    TBC_AURA_MOD_UNKNOWN246 = 246,
    TBC_AURA_MOD_MIRROR_IMAGE = 247,
    TBC_AURA_MOD_MOD_COMBAT_RESULT_CHANCE = 248,
    TBC_AURA_MOD_UNKNOWN249 = 249,
    TBC_AURA_MOD_MOD_INCREASE_HEALTH_2 = 250,
    TBC_AURA_MOD_MOD_ENEMY_DODGE = 251,
    TBC_AURA_MOD_UNKNOWN252 = 252,
    TBC_AURA_MOD_UNKNOWN253 = 253,
    TBC_AURA_MOD_UNKNOWN254 = 254,
    TBC_AURA_MOD_UNKNOWN255 = 255,
    TBC_AURA_MOD_UNKNOWN256 = 256,
    TBC_AURA_MOD_UNKNOWN257 = 257,
    TBC_AURA_MOD_UNKNOWN258 = 258,
    TBC_AURA_MOD_UNKNOWN259 = 259,
    TBC_AURA_MOD_UNKNOWN260 = 260,
    TBC_AURA_MOD_UNKNOWN261 = 261
} tbc_AuraMod;

typedef enum {
    TBC_AURA_TYPE_NONE = 0,
    TBC_AURA_TYPE_BIND_SIGHT = 1,
    TBC_AURA_TYPE_MOD_POSSESS = 2,
    TBC_AURA_TYPE_PERIODIC_DAMAGE = 3,
    TBC_AURA_TYPE_DUMMY = 4,
    TBC_AURA_TYPE_MOD_CONFUSE = 5,
    TBC_AURA_TYPE_MOD_CHARM = 6,
    TBC_AURA_TYPE_MOD_FEAR = 7,
    TBC_AURA_TYPE_PERIODIC_HEAL = 8,
    TBC_AURA_TYPE_MOD_ATTACKSPEED = 9,
    TBC_AURA_TYPE_MOD_THREAT = 10,
    TBC_AURA_TYPE_MOD_TAUNT = 11,
    TBC_AURA_TYPE_MOD_STUN = 12,
    TBC_AURA_TYPE_MOD_DAMAGE_DONE = 13,
    TBC_AURA_TYPE_MOD_DAMAGE_TAKEN = 14,
    TBC_AURA_TYPE_DAMAGE_SHIELD = 15,
    TBC_AURA_TYPE_MOD_STEALTH = 16,
    TBC_AURA_TYPE_MOD_STEALTH_DETECT = 17,
    TBC_AURA_TYPE_MOD_INVISIBILITY = 18,
    TBC_AURA_TYPE_MOD_INVISIBILITY_DETECTION = 19,
    TBC_AURA_TYPE_OBS_MOD_HEALTH = 20,
    TBC_AURA_TYPE_OBS_MOD_MANA = 21,
    TBC_AURA_TYPE_MOD_RESISTANCE = 22,
    TBC_AURA_TYPE_PERIODIC_TRIGGER_SPELL = 23,
    TBC_AURA_TYPE_PERIODIC_ENERGIZE = 24,
    TBC_AURA_TYPE_MOD_PACIFY = 25,
    TBC_AURA_TYPE_MOD_ROOT = 26,
    TBC_AURA_TYPE_MOD_SILENCE = 27,
    TBC_AURA_TYPE_REFLECT_SPELLS = 28,
    TBC_AURA_TYPE_MOD_STAT = 29,
    TBC_AURA_TYPE_MOD_SKILL = 30,
    TBC_AURA_TYPE_MOD_INCREASE_SPEED = 31,
    TBC_AURA_TYPE_MOD_INCREASE_MOUNTED_SPEED = 32,
    TBC_AURA_TYPE_MOD_DECREASE_SPEED = 33,
    TBC_AURA_TYPE_MOD_INCREASE_HEALTH = 34,
    TBC_AURA_TYPE_MOD_INCREASE_ENERGY = 35,
    TBC_AURA_TYPE_MOD_SHAPESHIFT = 36,
    TBC_AURA_TYPE_EFFECT_IMMUNITY = 37,
    TBC_AURA_TYPE_STATE_IMMUNITY = 38,
    TBC_AURA_TYPE_SCHOOL_IMMUNITY = 39,
    TBC_AURA_TYPE_DAMAGE_IMMUNITY = 40,
    TBC_AURA_TYPE_DISPEL_IMMUNITY = 41,
    TBC_AURA_TYPE_PROC_TRIGGER_SPELL = 42,
    TBC_AURA_TYPE_PROC_TRIGGER_DAMAGE = 43,
    TBC_AURA_TYPE_TRACK_CREATURES = 44,
    TBC_AURA_TYPE_TRACK_RESOURCES = 45,
    TBC_AURA_TYPE_UNKNOWN46 = 46,
    TBC_AURA_TYPE_MOD_PARRY_PERCENT = 47,
    TBC_AURA_TYPE_UNKNOWN48 = 48,
    TBC_AURA_TYPE_MOD_DODGE_PERCENT = 49,
    TBC_AURA_TYPE_MOD_BLOCK_SKILL = 50,
    TBC_AURA_TYPE_MOD_BLOCK_PERCENT = 51,
    TBC_AURA_TYPE_MOD_CRIT_PERCENT = 52,
    TBC_AURA_TYPE_PERIODIC_LEECH = 53,
    TBC_AURA_TYPE_MOD_HIT_CHANCE = 54,
    TBC_AURA_TYPE_MOD_SPELL_HIT_CHANCE = 55,
    TBC_AURA_TYPE_TRANSFORM = 56,
    TBC_AURA_TYPE_MOD_SPELL_CRIT_CHANCE = 57,
    TBC_AURA_TYPE_MOD_INCREASE_SWIM_SPEED = 58,
    TBC_AURA_TYPE_MOD_DAMAGE_DONE_CREATURE = 59,
    TBC_AURA_TYPE_MOD_PACIFY_SILENCE = 60,
    TBC_AURA_TYPE_MOD_SCALE = 61,
    TBC_AURA_TYPE_PERIODIC_HEALTH_FUNNEL = 62,
    TBC_AURA_TYPE_PERIODIC_MANA_FUNNEL = 63,
    TBC_AURA_TYPE_PERIODIC_MANA_LEECH = 64,
    TBC_AURA_TYPE_MOD_CASTING_SPEED_NOT_STACK = 65,
    TBC_AURA_TYPE_FEIGN_DEATH = 66,
    TBC_AURA_TYPE_MOD_DISARM = 67,
    TBC_AURA_TYPE_MOD_STALKED = 68,
    TBC_AURA_TYPE_SCHOOL_ABSORB = 69,
    TBC_AURA_TYPE_EXTRA_ATTACKS = 70,
    TBC_AURA_TYPE_MOD_SPELL_CRIT_CHANCE_SCHOOL = 71,
    TBC_AURA_TYPE_MOD_POWER_COST_SCHOOL_PCT = 72,
    TBC_AURA_TYPE_MOD_POWER_COST_SCHOOL = 73,
    TBC_AURA_TYPE_REFLECT_SPELLS_SCHOOL = 74,
    TBC_AURA_TYPE_MOD_LANGUAGE = 75,
    TBC_AURA_TYPE_FAR_SIGHT = 76,
    TBC_AURA_TYPE_MECHANIC_IMMUNITY = 77,
    TBC_AURA_TYPE_MOUNTED = 78,
    TBC_AURA_TYPE_MOD_DAMAGE_PERCENT_DONE = 79,
    TBC_AURA_TYPE_MOD_PERCENT_STAT = 80,
    TBC_AURA_TYPE_SPLIT_DAMAGE_PCT = 81,
    TBC_AURA_TYPE_WATER_BREATHING = 82,
    TBC_AURA_TYPE_MOD_BASE_RESISTANCE = 83,
    TBC_AURA_TYPE_MOD_REGEN = 84,
    TBC_AURA_TYPE_MOD_POWER_REGEN = 85,
    TBC_AURA_TYPE_CHANNEL_DEATH_ITEM = 86,
    TBC_AURA_TYPE_MOD_DAMAGE_PERCENT_TAKEN = 87,
    TBC_AURA_TYPE_MOD_HEALTH_REGEN_PERCENT = 88,
    TBC_AURA_TYPE_PERIODIC_DAMAGE_PERCENT = 89,
    TBC_AURA_TYPE_MOD_RESIST_CHANCE = 90,
    TBC_AURA_TYPE_MOD_DETECT_RANGE = 91,
    TBC_AURA_TYPE_PREVENTS_FLEEING = 92,
    TBC_AURA_TYPE_MOD_UNATTACKABLE = 93,
    TBC_AURA_TYPE_INTERRUPT_REGEN = 94,
    TBC_AURA_TYPE_GHOST = 95,
    TBC_AURA_TYPE_SPELL_MAGNET = 96,
    TBC_AURA_TYPE_MANA_SHIELD = 97,
    TBC_AURA_TYPE_MOD_SKILL_TALENT = 98,
    TBC_AURA_TYPE_MOD_ATTACK_POWER = 99,
    TBC_AURA_TYPE_AURAS_VISIBLE = 100,
    TBC_AURA_TYPE_MOD_RESISTANCE_PCT = 101,
    TBC_AURA_TYPE_MOD_MELEE_ATTACK_POWER_VERSUS = 102,
    TBC_AURA_TYPE_MOD_TOTAL_THREAT = 103,
    TBC_AURA_TYPE_WATER_WALK = 104,
    TBC_AURA_TYPE_FEATHER_FALL = 105,
    TBC_AURA_TYPE_HOVER = 106,
    TBC_AURA_TYPE_ADD_FLAT_MODIFIER = 107,
    TBC_AURA_TYPE_ADD_PCT_MODIFIER = 108,
    TBC_AURA_TYPE_ADD_TARGET_TRIGGER = 109,
    TBC_AURA_TYPE_MOD_POWER_REGEN_PERCENT = 110,
    TBC_AURA_TYPE_ADD_CASTER_HIT_TRIGGER = 111,
    TBC_AURA_TYPE_OVERRIDE_CLASS_SCRIPTS = 112,
    TBC_AURA_TYPE_MOD_RANGED_DAMAGE_TAKEN = 113,
    TBC_AURA_TYPE_MOD_RANGED_DAMAGE_TAKEN_PCT = 114,
    TBC_AURA_TYPE_MOD_HEALING = 115,
    TBC_AURA_TYPE_MOD_REGEN_DURING_COMBAT = 116,
    TBC_AURA_TYPE_MOD_MECHANIC_RESISTANCE = 117,
    TBC_AURA_TYPE_MOD_HEALING_PCT = 118,
    TBC_AURA_TYPE_SHARE_PET_TRACKING = 119,
    TBC_AURA_TYPE_UNTRACKABLE = 120,
    TBC_AURA_TYPE_EMPATHY = 121,
    TBC_AURA_TYPE_MOD_OFFHAND_DAMAGE_PCT = 122,
    TBC_AURA_TYPE_MOD_TARGET_RESISTANCE = 123,
    TBC_AURA_TYPE_MOD_RANGED_ATTACK_POWER = 124,
    TBC_AURA_TYPE_MOD_MELEE_DAMAGE_TAKEN = 125,
    TBC_AURA_TYPE_MOD_MELEE_DAMAGE_TAKEN_PCT = 126,
    TBC_AURA_TYPE_RANGED_ATTACK_POWER_ATTACKER_BONUS = 127,
    TBC_AURA_TYPE_MOD_POSSESS_PET = 128,
    TBC_AURA_TYPE_MOD_SPEED_ALWAYS = 129,
    TBC_AURA_TYPE_MOD_MOUNTED_SPEED_ALWAYS = 130,
    TBC_AURA_TYPE_MOD_RANGED_ATTACK_POWER_VERSUS = 131,
    TBC_AURA_TYPE_MOD_INCREASE_ENERGY_PERCENT = 132,
    TBC_AURA_TYPE_MOD_INCREASE_HEALTH_PERCENT = 133,
    TBC_AURA_TYPE_MOD_MANA_REGEN_INTERRUPT = 134,
    TBC_AURA_TYPE_MOD_HEALING_DONE = 135,
    TBC_AURA_TYPE_MOD_HEALING_DONE_PERCENT = 136,
    TBC_AURA_TYPE_MOD_TOTAL_STAT_PERCENTAGE = 137,
    TBC_AURA_TYPE_MOD_MELEE_HASTE = 138,
    TBC_AURA_TYPE_FORCE_REACTION = 139,
    TBC_AURA_TYPE_MOD_RANGED_HASTE = 140,
    TBC_AURA_TYPE_MOD_RANGED_AMMO_HASTE = 141,
    TBC_AURA_TYPE_MOD_BASE_RESISTANCE_PCT = 142,
    TBC_AURA_TYPE_MOD_RESISTANCE_EXCLUSIVE = 143,
    TBC_AURA_TYPE_SAFE_FALL = 144,
    TBC_AURA_TYPE_CHARISMA = 145,
    TBC_AURA_TYPE_PERSUADED = 146,
    TBC_AURA_TYPE_MECHANIC_IMMUNITY_MASK = 147,
    TBC_AURA_TYPE_RETAIN_COMBO_POINTS = 148,
    TBC_AURA_TYPE_RESIST_PUSHBACK = 149,
    TBC_AURA_TYPE_MOD_SHIELD_BLOCKVALUE_PCT = 150,
    TBC_AURA_TYPE_TRACK_STEALTHED = 151,
    TBC_AURA_TYPE_MOD_DETECTED_RANGE = 152,
    TBC_AURA_TYPE_SPLIT_DAMAGE_FLAT = 153,
    TBC_AURA_TYPE_MOD_STEALTH_LEVEL = 154,
    TBC_AURA_TYPE_MOD_WATER_BREATHING = 155,
    TBC_AURA_TYPE_MOD_REPUTATION_GAIN = 156,
    TBC_AURA_TYPE_PET_DAMAGE_MULTI = 157,
    TBC_AURA_TYPE_MOD_SHIELD_BLOCKVALUE = 158,
    TBC_AURA_TYPE_NO_PVP_CREDIT = 159,
    TBC_AURA_TYPE_MOD_AOE_AVOIDANCE = 160,
    TBC_AURA_TYPE_MOD_HEALTH_REGEN_IN_COMBAT = 161,
    TBC_AURA_TYPE_POWER_BURN_MANA = 162,
    TBC_AURA_TYPE_MOD_CRIT_DAMAGE_BONUS = 163,
    TBC_AURA_TYPE_UNKNOWN164 = 164,
    TBC_AURA_TYPE_MELEE_ATTACK_POWER_ATTACKER_BONUS = 165,
    TBC_AURA_TYPE_MOD_ATTACK_POWER_PCT = 166,
    TBC_AURA_TYPE_MOD_RANGED_ATTACK_POWER_PCT = 167,
    TBC_AURA_TYPE_MOD_DAMAGE_DONE_VERSUS = 168,
    TBC_AURA_TYPE_MOD_CRIT_PERCENT_VERSUS = 169,
    TBC_AURA_TYPE_DETECT_AMORE = 170,
    TBC_AURA_TYPE_MOD_SPEED_NOT_STACK = 171,
    TBC_AURA_TYPE_MOD_MOUNTED_SPEED_NOT_STACK = 172,
    TBC_AURA_TYPE_ALLOW_CHAMPION_SPELLS = 173,
    TBC_AURA_TYPE_MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174,
    TBC_AURA_TYPE_MOD_SPELL_HEALING_OF_STAT_PERCENT = 175,
    TBC_AURA_TYPE_SPIRIT_OF_REDEMPTION = 176,
    TBC_AURA_TYPE_AOE_CHARM = 177,
    TBC_AURA_TYPE_MOD_DEBUFF_RESISTANCE = 178,
    TBC_AURA_TYPE_MOD_ATTACKER_SPELL_CRIT_CHANCE = 179,
    TBC_AURA_TYPE_MOD_FLAT_SPELL_DAMAGE_VERSUS = 180,
    TBC_AURA_TYPE_MOD_FLAT_SPELL_CRIT_DAMAGE_VERSUS = 181,
    TBC_AURA_TYPE_MOD_RESISTANCE_OF_STAT_PERCENT = 182,
    TBC_AURA_TYPE_MOD_CRITICAL_THREAT = 183,
    TBC_AURA_TYPE_MOD_ATTACKER_MELEE_HIT_CHANCE = 184,
    TBC_AURA_TYPE_MOD_ATTACKER_RANGED_HIT_CHANCE = 185,
    TBC_AURA_TYPE_MOD_ATTACKER_SPELL_HIT_CHANCE = 186,
    TBC_AURA_TYPE_MOD_ATTACKER_MELEE_CRIT_CHANCE = 187,
    TBC_AURA_TYPE_MOD_ATTACKER_RANGED_CRIT_CHANCE = 188,
    TBC_AURA_TYPE_MOD_RATING = 189,
    TBC_AURA_TYPE_MOD_FACTION_REPUTATION_GAIN = 190,
    TBC_AURA_TYPE_USE_NORMAL_MOVEMENT_SPEED = 191,
    TBC_AURA_TYPE_MOD_MELEE_RANGED_HASTE = 192,
    TBC_AURA_TYPE_HASTE_ALL = 193,
    TBC_AURA_TYPE_MOD_DEPRICATED_1 = 194,
    TBC_AURA_TYPE_MOD_DEPRICATED_2 = 195,
    TBC_AURA_TYPE_MOD_COOLDOWN = 196,
    TBC_AURA_TYPE_MOD_ATTACKER_SPELL_AND_WEAPON_CRIT_CHANCE = 197,
    TBC_AURA_TYPE_MOD_ALL_WEAPON_SKILLS = 198,
    TBC_AURA_TYPE_MOD_INCREASES_SPELL_PCT_TO_HIT = 199,
    TBC_AURA_TYPE_MOD_XP_PCT = 200,
    TBC_AURA_TYPE_FLY = 201,
    TBC_AURA_TYPE_IGNORE_COMBAT_RESULT = 202,
    TBC_AURA_TYPE_MOD_ATTACKER_MELEE_CRIT_DAMAGE = 203,
    TBC_AURA_TYPE_MOD_ATTACKER_RANGED_CRIT_DAMAGE = 204,
    TBC_AURA_TYPE_MOD_ATTACKER_SPELL_CRIT_DAMAGE = 205,
    TBC_AURA_TYPE_MOD_FLIGHT_SPEED = 206,
    TBC_AURA_TYPE_MOD_FLIGHT_SPEED_MOUNTED = 207,
    TBC_AURA_TYPE_MOD_FLIGHT_SPEED_STACKING = 208,
    TBC_AURA_TYPE_MOD_FLIGHT_SPEED_MOUNTED_STACKING = 209,
    TBC_AURA_TYPE_MOD_FLIGHT_SPEED_NOT_STACKING = 210,
    TBC_AURA_TYPE_MOD_FLIGHT_SPEED_MOUNTED_NOT_STACKING = 211,
    TBC_AURA_TYPE_MOD_RANGED_ATTACK_POWER_OF_STAT_PERCENT = 212,
    TBC_AURA_TYPE_MOD_RAGE_FROM_DAMAGE_DEALT = 213,
    TBC_AURA_TYPE_UNKNOWN214 = 214,
    TBC_AURA_TYPE_ARENA_PREPARATION = 215,
    TBC_AURA_TYPE_HASTE_SPELLS = 216,
    TBC_AURA_TYPE_UNKNOWN217 = 217,
    TBC_AURA_TYPE_HASTE_RANGED = 218,
    TBC_AURA_TYPE_MOD_MANA_REGEN_FROM_STAT = 219,
    TBC_AURA_TYPE_MOD_RATING_FROM_STAT = 220,
    TBC_AURA_TYPE_UNKNOWN221 = 221,
    TBC_AURA_TYPE_UNKNOWN222 = 222,
    TBC_AURA_TYPE_UNKNOWN223 = 223,
    TBC_AURA_TYPE_UNKNOWN224 = 224,
    TBC_AURA_TYPE_PRAYER_OF_MENDING = 225,
    TBC_AURA_TYPE_PERIODIC_DUMMY = 226,
    TBC_AURA_TYPE_PERIODIC_TRIGGER_SPELL_WITH_VALUE = 227,
    TBC_AURA_TYPE_DETECT_STEALTH = 228,
    TBC_AURA_TYPE_MOD_AOE_DAMAGE_AVOIDANCE = 229,
    TBC_AURA_TYPE_UNKNOWN230 = 230,
    TBC_AURA_TYPE_PROC_TRIGGER_SPELL_WITH_VALUE = 231,
    TBC_AURA_TYPE_MECHANIC_DURATION_MOD = 232,
    TBC_AURA_TYPE_UNKNOWN233 = 233,
    TBC_AURA_TYPE_MECHANIC_DURATION_MOD_NOT_STACK = 234,
    TBC_AURA_TYPE_MOD_DISPEL_RESIST = 235,
    TBC_AURA_TYPE_UNKNOWN236 = 236,
    TBC_AURA_TYPE_MOD_SPELL_DAMAGE_OF_ATTACK_POWER = 237,
    TBC_AURA_TYPE_MOD_SPELL_HEALING_OF_ATTACK_POWER = 238,
    TBC_AURA_TYPE_MOD_SCALE_2 = 239,
    TBC_AURA_TYPE_MOD_EXPERTISE = 240,
    TBC_AURA_TYPE_FORCE_MOVE_FORWARD = 241,
    TBC_AURA_TYPE_UNKNOWN242 = 242,
    TBC_AURA_TYPE_UNKNOWN243 = 243,
    TBC_AURA_TYPE_COMPREHEND_LANGUAGE = 244,
    TBC_AURA_TYPE_UNKNOWN245 = 245,
    TBC_AURA_TYPE_UNKNOWN246 = 246,
    TBC_AURA_TYPE_MIRROR_IMAGE = 247,
    TBC_AURA_TYPE_MOD_COMBAT_RESULT_CHANCE = 248,
    TBC_AURA_TYPE_UNKNOWN249 = 249,
    TBC_AURA_TYPE_MOD_INCREASE_HEALTH_2 = 250,
    TBC_AURA_TYPE_MOD_ENEMY_DODGE = 251,
    TBC_AURA_TYPE_UNKNOWN252 = 252,
    TBC_AURA_TYPE_UNKNOWN253 = 253,
    TBC_AURA_TYPE_UNKNOWN254 = 254,
    TBC_AURA_TYPE_UNKNOWN255 = 255,
    TBC_AURA_TYPE_UNKNOWN256 = 256,
    TBC_AURA_TYPE_UNKNOWN257 = 257,
    TBC_AURA_TYPE_UNKNOWN258 = 258,
    TBC_AURA_TYPE_UNKNOWN259 = 259,
    TBC_AURA_TYPE_UNKNOWN260 = 260,
    TBC_AURA_TYPE_UNKNOWN261 = 261
} tbc_AuraType;

typedef enum {
    TBC_BANK_SWAP_SOURCE_INVENTORY = 0,
    TBC_BANK_SWAP_SOURCE_BANK = 1
} tbc_BankSwapSource;

typedef enum {
    TBC_BANK_SWAP_STORE_MODE_MANUAL = 0,
    TBC_BANK_SWAP_STORE_MODE_AUTOMATIC = 1
} tbc_BankSwapStoreMode;

typedef enum {
    TBC_BATTLEFIELD_PORT_ACTION_LEAVE_QUEUE = 0,
    TBC_BATTLEFIELD_PORT_ACTION_ENTER_BATTLE = 1
} tbc_BattlefieldPortAction;

typedef enum {
    TBC_BATTLEGROUND_TYPE_NONE = 0,
    TBC_BATTLEGROUND_TYPE_ALTERAC_VALLEY = 1,
    TBC_BATTLEGROUND_TYPE_WARSONG_GULCH = 2,
    TBC_BATTLEGROUND_TYPE_ARATHI_BASIN = 3,
    TBC_BATTLEGROUND_TYPE_NETHERSTORM = 4,
    TBC_BATTLEGROUND_TYPE_BLADES_EDGE_ARENA = 5,
    TBC_BATTLEGROUND_TYPE_ARENA = 6,
    TBC_BATTLEGROUND_TYPE_EYE_OF_THE_STORM = 7,
    TBC_BATTLEGROUND_TYPE_RUINS_OF_LORDAERON = 8
} tbc_BattlegroundType;

typedef enum {
    TBC_BG_TYPE_ID_NOT_ELIGIBLE = 0,
    TBC_BG_TYPE_ID_QUEUED_FOR_AV = 1,
    TBC_BG_TYPE_ID_QUEUED_FOR_WSG = 2,
    TBC_BG_TYPE_ID_QUEUED_FOR_AB = 3,
    TBC_BG_TYPE_ID_QUEUED_FOR_NETHERSTORM = 4,
    TBC_BG_TYPE_ID_QUEUED_FOR_BLADES_EDGE_ARENA = 5,
    TBC_BG_TYPE_ID_QUEUED_FOR_ARENA = 6,
    TBC_BG_TYPE_ID_QUEUED_FOR_EYE_OF_THE_STORM = 7,
    TBC_BG_TYPE_ID_QUEUED_FOR_RUINS_OF_LORDAERON = 8,
    TBC_BG_TYPE_ID_REMOVE_FROM_QUEUE = -2
} tbc_BgTypeId;

typedef enum {
    TBC_BONDING_NO_BIND = 0,
    TBC_BONDING_PICK_UP = 1,
    TBC_BONDING_EQUIP = 2,
    TBC_BONDING_USE = 3,
    TBC_BONDING_QUEST_ITEM = 4,
    TBC_BONDING_QUEST_ITEM1 = 5
} tbc_Bonding;

typedef enum {
    TBC_BUY_BANK_SLOT_RESULT_FAILED_TOO_MANY = 0,
    TBC_BUY_BANK_SLOT_RESULT_INSUFFICIENT_FUNDS = 1,
    TBC_BUY_BANK_SLOT_RESULT_NOT_BANKER = 2,
    TBC_BUY_BANK_SLOT_RESULT_OK = 3
} tbc_BuyBankSlotResult;

typedef enum {
    TBC_BUY_RESULT_CANT_FIND_ITEM = 0,
    TBC_BUY_RESULT_ITEM_ALREADY_SOLD = 1,
    TBC_BUY_RESULT_NOT_ENOUGH_MONEY = 2,
    TBC_BUY_RESULT_SELLER_DONT_LIKE_YOU = 4,
    TBC_BUY_RESULT_DISTANCE_TOO_FAR = 5,
    TBC_BUY_RESULT_ITEM_SOLD_OUT = 7,
    TBC_BUY_RESULT_CANT_CARRY_MORE = 8,
    TBC_BUY_RESULT_RANK_REQUIRE = 11,
    TBC_BUY_RESULT_REPUTATION_REQUIRE = 12
} tbc_BuyResult;

typedef enum {
    TBC_BUYBACK_SLOT_SLOT1 = 69,
    TBC_BUYBACK_SLOT_SLOT2 = 70,
    TBC_BUYBACK_SLOT_SLOT3 = 71,
    TBC_BUYBACK_SLOT_SLOT4 = 72,
    TBC_BUYBACK_SLOT_SLOT5 = 73,
    TBC_BUYBACK_SLOT_SLOT6 = 74,
    TBC_BUYBACK_SLOT_SLOT7 = 75,
    TBC_BUYBACK_SLOT_SLOT8 = 76,
    TBC_BUYBACK_SLOT_SLOT9 = 77,
    TBC_BUYBACK_SLOT_SLOT10 = 78,
    TBC_BUYBACK_SLOT_SLOT11 = 79,
    TBC_BUYBACK_SLOT_SLOT12 = 80,
    TBC_BUYBACK_SLOT_SLOT13 = 81
} tbc_BuybackSlot;

typedef enum {
    TBC_CHARTER_TYPE_GUILD = 0,
    TBC_CHARTER_TYPE_ARENA = 1
} tbc_CharterType;

typedef enum {
    TBC_CHAT_NOTIFY_JOINED_NOTICE = 0,
    TBC_CHAT_NOTIFY_LEFT_NOTICE = 1,
    TBC_CHAT_NOTIFY_YOU_JOINED_NOTICE = 2,
    TBC_CHAT_NOTIFY_YOU_LEFT_NOTICE = 3,
    TBC_CHAT_NOTIFY_WRONG_PASSWORD_NOTICE = 4,
    TBC_CHAT_NOTIFY_NOT_MEMBER_NOTICE = 5,
    TBC_CHAT_NOTIFY_NOT_MODERATOR_NOTICE = 6,
    TBC_CHAT_NOTIFY_PASSWORD_CHANGED_NOTICE = 7,
    TBC_CHAT_NOTIFY_OWNER_CHANGED_NOTICE = 8,
    TBC_CHAT_NOTIFY_PLAYER_NOT_FOUND_NOTICE = 9,
    TBC_CHAT_NOTIFY_NOT_OWNER_NOTICE = 10,
    TBC_CHAT_NOTIFY_CHANNEL_OWNER_NOTICE = 11,
    TBC_CHAT_NOTIFY_MODE_CHANGE_NOTICE = 12,
    TBC_CHAT_NOTIFY_ANNOUNCEMENTS_ON_NOTICE = 13,
    TBC_CHAT_NOTIFY_ANNOUNCEMENTS_OFF_NOTICE = 14,
    TBC_CHAT_NOTIFY_MODERATION_ON_NOTICE = 15,
    TBC_CHAT_NOTIFY_MODERATION_OFF_NOTICE = 16,
    TBC_CHAT_NOTIFY_MUTED_NOTICE = 17,
    TBC_CHAT_NOTIFY_PLAYER_KICKED_NOTICE = 18,
    TBC_CHAT_NOTIFY_BANNED_NOTICE = 19,
    TBC_CHAT_NOTIFY_PLAYER_BANNED_NOTICE = 20,
    TBC_CHAT_NOTIFY_PLAYER_UNBANNED_NOTICE = 21,
    TBC_CHAT_NOTIFY_PLAYER_NOT_BANNED_NOTICE = 22,
    TBC_CHAT_NOTIFY_PLAYER_ALREADY_MEMBER_NOTICE = 23,
    TBC_CHAT_NOTIFY_INVITE_NOTICE = 24,
    TBC_CHAT_NOTIFY_INVITE_WRONG_FACTION_NOTICE = 25,
    TBC_CHAT_NOTIFY_WRONG_FACTION_NOTICE = 26,
    TBC_CHAT_NOTIFY_INVALID_NAME_NOTICE = 27,
    TBC_CHAT_NOTIFY_NOT_MODERATED_NOTICE = 28,
    TBC_CHAT_NOTIFY_PLAYER_INVITED_NOTICE = 29,
    TBC_CHAT_NOTIFY_PLAYER_INVITE_BANNED_NOTICE = 30,
    TBC_CHAT_NOTIFY_THROTTLED_NOTICE = 31,
    TBC_CHAT_NOTIFY_NOT_IN_AREA_NOTICE = 32,
    TBC_CHAT_NOTIFY_NOT_IN_LFG_NOTICE = 33,
    TBC_CHAT_NOTIFY_VOICE_ON_NOTICE = 34,
    TBC_CHAT_NOTIFY_VOICE_OFF_NOTICE = 35
} tbc_ChatNotify;

typedef enum {
    TBC_CHAT_RESTRICTION_TYPE_CHAT_RESTRICTED = 0,
    TBC_CHAT_RESTRICTION_TYPE_CHAT_THROTTLED = 1,
    TBC_CHAT_RESTRICTION_TYPE_USER_SQUELCHED = 2
} tbc_ChatRestrictionType;

typedef enum {
    TBC_CHAT_TYPE_SYSTEM = 0,
    TBC_CHAT_TYPE_SAY = 1,
    TBC_CHAT_TYPE_PARTY = 2,
    TBC_CHAT_TYPE_RAID = 3,
    TBC_CHAT_TYPE_GUILD = 4,
    TBC_CHAT_TYPE_OFFICER = 5,
    TBC_CHAT_TYPE_YELL = 6,
    TBC_CHAT_TYPE_WHISPER = 7,
    TBC_CHAT_TYPE_WHISPER_INFORM = 8,
    TBC_CHAT_TYPE_REPLY = 9,
    TBC_CHAT_TYPE_EMOTE = 10,
    TBC_CHAT_TYPE_TEXT_EMOTE = 11,
    TBC_CHAT_TYPE_MONSTER_SAY = 12,
    TBC_CHAT_TYPE_MONSTER_PARTY = 13,
    TBC_CHAT_TYPE_MONSTER_YELL = 14,
    TBC_CHAT_TYPE_MONSTER_WHISPER = 15,
    TBC_CHAT_TYPE_MONSTER_EMOTE = 16,
    TBC_CHAT_TYPE_CHANNEL = 17,
    TBC_CHAT_TYPE_CHANNEL_JOIN = 18,
    TBC_CHAT_TYPE_CHANNEL_LEAVE = 19,
    TBC_CHAT_TYPE_CHANNEL_LIST = 20,
    TBC_CHAT_TYPE_CHANNEL_NOTICE = 21,
    TBC_CHAT_TYPE_CHANNEL_NOTICE_USER = 22,
    TBC_CHAT_TYPE_AFK = 23,
    TBC_CHAT_TYPE_DND = 24,
    TBC_CHAT_TYPE_IGNORED = 25,
    TBC_CHAT_TYPE_SKILL = 26,
    TBC_CHAT_TYPE_LOOT = 27,
    TBC_CHAT_TYPE_MONEY = 28,
    TBC_CHAT_TYPE_OPENING = 29,
    TBC_CHAT_TYPE_TRADESKILLS = 30,
    TBC_CHAT_TYPE_PET_INFO = 31,
    TBC_CHAT_TYPE_COMBAT_MISC_INFO = 32,
    TBC_CHAT_TYPE_COMBAT_XP_GAIN = 33,
    TBC_CHAT_TYPE_COMBAT_HONOR_GAIN = 34,
    TBC_CHAT_TYPE_COMBAT_FACTION_CHANGE = 35,
    TBC_CHAT_TYPE_BG_SYSTEM_NEUTRAL = 36,
    TBC_CHAT_TYPE_BG_SYSTEM_ALLIANCE = 37,
    TBC_CHAT_TYPE_BG_SYSTEM_HORDE = 38,
    TBC_CHAT_TYPE_RAID_LEADER = 39,
    TBC_CHAT_TYPE_RAID_WARNING = 40,
    TBC_CHAT_TYPE_RAID_BOSS_WHISPER = 41,
    TBC_CHAT_TYPE_RAID_BOSS_EMOTE = 42,
    TBC_CHAT_TYPE_FILTERED = 43,
    TBC_CHAT_TYPE_BATTLEGROUND = 44,
    TBC_CHAT_TYPE_BATTLEGROUND_LEADER = 45,
    TBC_CHAT_TYPE_RESTRICTED = 46
} tbc_ChatType;

typedef enum {
    TBC_CINEMATIC_SEQUENCE_ID_GOBLIN = 0,
    TBC_CINEMATIC_SEQUENCE_ID_PALANTIR_OF_AZORA = 1,
    TBC_CINEMATIC_SEQUENCE_ID_UNDEAD = 2,
    TBC_CINEMATIC_SEQUENCE_ID_ORC = 21,
    TBC_CINEMATIC_SEQUENCE_ID_DWARF = 41,
    TBC_CINEMATIC_SEQUENCE_ID_NIGHT_ELF = 61,
    TBC_CINEMATIC_SEQUENCE_ID_HUMAN = 81,
    TBC_CINEMATIC_SEQUENCE_ID_GNOME = 101,
    TBC_CINEMATIC_SEQUENCE_ID_TROLL = 121,
    TBC_CINEMATIC_SEQUENCE_ID_TAUREN = 141,
    TBC_CINEMATIC_SEQUENCE_ID_SCRY_CAM = 161,
    TBC_CINEMATIC_SEQUENCE_ID_BLOOD_ELF = 162,
    TBC_CINEMATIC_SEQUENCE_ID_DRAENEI = 163,
    TBC_CINEMATIC_SEQUENCE_ID_SUNWELL_FIVE_MAN = 164
} tbc_CinematicSequenceId;

typedef enum {
    TBC_CLASS_WARRIOR = 1,
    TBC_CLASS_PALADIN = 2,
    TBC_CLASS_HUNTER = 3,
    TBC_CLASS_ROGUE = 4,
    TBC_CLASS_PRIEST = 5,
    TBC_CLASS_SHAMAN = 7,
    TBC_CLASS_MAGE = 8,
    TBC_CLASS_WARLOCK = 9,
    TBC_CLASS_DRUID = 11
} tbc_Class;

typedef enum {
    TBC_COMMENTATOR_ENABLE_OPTION_DISABLE = 0,
    TBC_COMMENTATOR_ENABLE_OPTION_ENABLE = 1,
    TBC_COMMENTATOR_ENABLE_OPTION_TOGGLE = 2
} tbc_CommentatorEnableOption;

typedef enum {
    TBC_COMPLAIN_RESULT_WINDOW_DO_NOT_SHOW = 0,
    TBC_COMPLAIN_RESULT_WINDOW_SHOW = 1
} tbc_ComplainResultWindow;

typedef enum {
    TBC_COMPLAINT_STATUS_DISABLED = 0,
    TBC_COMPLAINT_STATUS_ENABLED_WITHOUT_AUTO_IGNORE = 1,
    TBC_COMPLAINT_STATUS_ENABLED_WITH_AUTO_IGNORE = 2
} tbc_ComplaintStatus;

typedef enum {
    TBC_CORPSE_QUERY_RESULT_NOT_FOUND = 0,
    TBC_CORPSE_QUERY_RESULT_FOUND = 1
} tbc_CorpseQueryResult;

typedef enum {
    TBC_CREATURE_FAMILY_NONE = 0,
    TBC_CREATURE_FAMILY_WOLF = 1,
    TBC_CREATURE_FAMILY_CAT = 2,
    TBC_CREATURE_FAMILY_SPIDER = 3,
    TBC_CREATURE_FAMILY_BEAR = 4,
    TBC_CREATURE_FAMILY_BOAR = 5,
    TBC_CREATURE_FAMILY_CROCOLISK = 6,
    TBC_CREATURE_FAMILY_CARRION_BIRD = 7,
    TBC_CREATURE_FAMILY_CRAB = 8,
    TBC_CREATURE_FAMILY_GORILLA = 9,
    TBC_CREATURE_FAMILY_RAPTOR = 11,
    TBC_CREATURE_FAMILY_TALLSTRIDER = 12,
    TBC_CREATURE_FAMILY_FELHUNTER = 15,
    TBC_CREATURE_FAMILY_VOIDWALKER = 16,
    TBC_CREATURE_FAMILY_SUCCUBUS = 17,
    TBC_CREATURE_FAMILY_DOOMGUARD = 19,
    TBC_CREATURE_FAMILY_SCORPID = 20,
    TBC_CREATURE_FAMILY_TURTLE = 21,
    TBC_CREATURE_FAMILY_IMP = 23,
    TBC_CREATURE_FAMILY_BAT = 24,
    TBC_CREATURE_FAMILY_HYENA = 25,
    TBC_CREATURE_FAMILY_OWL = 26,
    TBC_CREATURE_FAMILY_WIND_SERPENT = 27,
    TBC_CREATURE_FAMILY_REMOTE_CONTROL = 28,
    TBC_CREATURE_FAMILY_FELGUARD = 29,
    TBC_CREATURE_FAMILY_DRAGONHAWK = 30,
    TBC_CREATURE_FAMILY_RAVAGER = 31,
    TBC_CREATURE_FAMILY_WARP_STALKER = 32,
    TBC_CREATURE_FAMILY_SPOREBAT = 33,
    TBC_CREATURE_FAMILY_NETHER_RAY = 34,
    TBC_CREATURE_FAMILY_SERPENT = 35,
    TBC_CREATURE_FAMILY_SEA_LION = 36
} tbc_CreatureFamily;

typedef enum {
    TBC_DECLINED_NAMES_NO = 0,
    TBC_DECLINED_NAMES_YES = 1
} tbc_DeclinedNames;

typedef enum {
    TBC_DECLINED_PET_NAME_INCLUDED_NOT_INCLUDED = 0,
    TBC_DECLINED_PET_NAME_INCLUDED_INCLUDED = 1
} tbc_DeclinedPetNameIncluded;

typedef enum {
    TBC_DISPEL_METHOD_DISPELLED = 0,
    TBC_DISPEL_METHOD_CLEANSED = 1
} tbc_DispelMethod;

typedef enum {
    TBC_DUEL_WINNER_REASON_WON = 0,
    TBC_DUEL_WINNER_REASON_FLED = 1
} tbc_DuelWinnerReason;

typedef enum {
    TBC_DUNGEON_DIFFICULTY_NORMAL = 0,
    TBC_DUNGEON_DIFFICULTY_HEROIC = 1
} tbc_DungeonDifficulty;

typedef enum {
    TBC_EMOTE_ONESHOT_NONE = 0,
    TBC_EMOTE_ONESHOT_TALK = 1,
    TBC_EMOTE_ONESHOT_BOW = 2,
    TBC_EMOTE_ONESHOT_WAVE = 3,
    TBC_EMOTE_ONESHOT_CHEER = 4,
    TBC_EMOTE_ONESHOT_EXCLAMATION = 5,
    TBC_EMOTE_ONESHOT_QUESTION = 6,
    TBC_EMOTE_ONESHOT_EAT = 7,
    TBC_EMOTE_STATE_DANCE = 10,
    TBC_EMOTE_ONESHOT_LAUGH = 11,
    TBC_EMOTE_STATE_SLEEP = 12,
    TBC_EMOTE_STATE_SIT = 13,
    TBC_EMOTE_ONESHOT_RUDE = 14,
    TBC_EMOTE_ONESHOT_ROAR = 15,
    TBC_EMOTE_ONESHOT_KNEEL = 16,
    TBC_EMOTE_ONESHOT_KISS = 17,
    TBC_EMOTE_ONESHOT_CRY = 18,
    TBC_EMOTE_ONESHOT_CHICKEN = 19,
    TBC_EMOTE_ONESHOT_BEG = 20,
    TBC_EMOTE_ONESHOT_APPLAUD = 21,
    TBC_EMOTE_ONESHOT_SHOUT = 22,
    TBC_EMOTE_ONESHOT_FLEX = 23,
    TBC_EMOTE_ONESHOT_SHY = 24,
    TBC_EMOTE_ONESHOT_POINT = 25,
    TBC_EMOTE_STATE_STAND = 26,
    TBC_EMOTE_STATE_READYUNARMED = 27,
    TBC_EMOTE_STATE_WORK_SHEATHED = 28,
    TBC_EMOTE_STATE_POINT = 29,
    TBC_EMOTE_STATE_NONE = 30,
    TBC_EMOTE_ONESHOT_WOUND = 33,
    TBC_EMOTE_ONESHOT_WOUNDCRITICAL = 34,
    TBC_EMOTE_ONESHOT_ATTACKUNARMED = 35,
    TBC_EMOTE_ONESHOT_ATTACK1H = 36,
    TBC_EMOTE_ONESHOT_ATTACK2HTIGHT = 37,
    TBC_EMOTE_ONESHOT_ATTACK2HLOOSE = 38,
    TBC_EMOTE_ONESHOT_PARRYUNARMED = 39,
    TBC_EMOTE_ONESHOT_PARRYSHIELD = 43,
    TBC_EMOTE_ONESHOT_READYUNARMED = 44,
    TBC_EMOTE_ONESHOT_READY1H = 45,
    TBC_EMOTE_ONESHOT_READYBOW = 48,
    TBC_EMOTE_ONESHOT_SPELLPRECAST = 50,
    TBC_EMOTE_ONESHOT_SPELLCAST = 51,
    TBC_EMOTE_ONESHOT_BATTLEROAR = 53,
    TBC_EMOTE_ONESHOT_SPECIALATTACK1H = 54,
    TBC_EMOTE_ONESHOT_KICK = 60,
    TBC_EMOTE_ONESHOT_ATTACKTHROWN = 61,
    TBC_EMOTE_STATE_STUN = 64,
    TBC_EMOTE_STATE_DEAD = 65,
    TBC_EMOTE_ONESHOT_SALUTE = 66,
    TBC_EMOTE_STATE_KNEEL = 68,
    TBC_EMOTE_STATE_USESTANDING = 69,
    TBC_EMOTE_ONESHOT_WAVE_NOSHEATHE = 70,
    TBC_EMOTE_ONESHOT_CHEER_NOSHEATHE = 71,
    TBC_EMOTE_ONESHOT_EAT_NOSHEATHE = 92,
    TBC_EMOTE_STATE_STUN_NOSHEATHE = 93,
    TBC_EMOTE_ONESHOT_DANCE = 94,
    TBC_EMOTE_ONESHOT_SALUTE_NOSHEATH = 113,
    TBC_EMOTE_STATE_USESTANDING_NOSHEATHE = 133,
    TBC_EMOTE_ONESHOT_LAUGH_NOSHEATHE = 153,
    TBC_EMOTE_STATE_WORK = 173,
    TBC_EMOTE_STATE_SPELLPRECAST = 193,
    TBC_EMOTE_ONESHOT_READYRIFLE = 213,
    TBC_EMOTE_STATE_READYRIFLE = 214,
    TBC_EMOTE_STATE_WORK_MINING = 233,
    TBC_EMOTE_STATE_WORK_CHOPWOOD = 234,
    TBC_EMOTE_STATE_APPLAUD = 253,
    TBC_EMOTE_ONESHOT_LIFTOFF = 254,
    TBC_EMOTE_ONESHOT_YES = 273,
    TBC_EMOTE_ONESHOT_NO = 274,
    TBC_EMOTE_ONESHOT_TRAIN = 275,
    TBC_EMOTE_ONESHOT_LAND = 293,
    TBC_EMOTE_STATE_AT_EASE = 313,
    TBC_EMOTE_STATE_READY1H = 333,
    TBC_EMOTE_STATE_SPELLKNEELSTART = 353,
    TBC_EMOTE_STATE_SUBMERGED = 373,
    TBC_EMOTE_ONESHOT_SUBMERGE = 374,
    TBC_EMOTE_STATE_READY2H = 375,
    TBC_EMOTE_STATE_READYBOW = 376,
    TBC_EMOTE_ONESHOT_MOUNTSPECIAL = 377,
    TBC_EMOTE_STATE_TALK = 378,
    TBC_EMOTE_STATE_FISHING = 379,
    TBC_EMOTE_ONESHOT_FISHING = 380,
    TBC_EMOTE_ONESHOT_LOOT = 381,
    TBC_EMOTE_STATE_WHIRLWIND = 382,
    TBC_EMOTE_STATE_DROWNED = 383,
    TBC_EMOTE_STATE_HOLD_BOW = 384,
    TBC_EMOTE_STATE_HOLD_RIFLE = 385,
    TBC_EMOTE_STATE_HOLD_THROWN = 386,
    TBC_EMOTE_ONESHOT_DROWN = 387,
    TBC_EMOTE_ONESHOT_STOMP = 388,
    TBC_EMOTE_ONESHOT_ATTACKOFF = 389,
    TBC_EMOTE_ONESHOT_ATTACKOFFPIERCE = 390,
    TBC_EMOTE_STATE_ROAR = 391,
    TBC_EMOTE_STATE_LAUGH = 392,
    TBC_EMOTE_ONESHOT_CREATURE_SPECIAL = 393,
    TBC_EMOTE_ONESHOT_JUMPLANDRUN = 394,
    TBC_EMOTE_ONESHOT_JUMPEND = 395,
    TBC_EMOTE_ONESHOT_TALK_NOSHEATHE = 396,
    TBC_EMOTE_ONESHOT_POINT_NOSHEATHE = 397,
    TBC_EMOTE_STATE_CANNIBALIZE = 398,
    TBC_EMOTE_ONESHOT_JUMPSTART = 399,
    TBC_EMOTE_STATE_DANCESPECIAL = 400,
    TBC_EMOTE_ONESHOT_DANCESPECIAL = 401,
    TBC_EMOTE_ONESHOT_CUSTOMSPELL01 = 402,
    TBC_EMOTE_ONESHOT_CUSTOMSPELL02 = 403,
    TBC_EMOTE_ONESHOT_CUSTOMSPELL03 = 404,
    TBC_EMOTE_ONESHOT_CUSTOMSPELL04 = 405,
    TBC_EMOTE_ONESHOT_CUSTOMSPELL05 = 406,
    TBC_EMOTE_ONESHOT_CUSTOMSPELL06 = 407,
    TBC_EMOTE_ONESHOT_CUSTOMSPELL07 = 408,
    TBC_EMOTE_ONESHOT_CUSTOMSPELL08 = 409,
    TBC_EMOTE_ONESHOT_CUSTOMSPELL09 = 410,
    TBC_EMOTE_ONESHOT_CUSTOMSPELL10 = 411,
    TBC_EMOTE_STATE_EXCLAIM = 412,
    TBC_EMOTE_STATE_SIT_CHAIR_MED = 415,
    TBC_EMOTE_STATE_SPELLEFFECT_HOLD = 422,
    TBC_EMOTE_STATE_EAT_NO_SHEATHE = 423
} tbc_Emote;

typedef enum {
    TBC_ENVIRONMENTAL_DAMAGE_TYPE_EXHAUSTED = 0,
    TBC_ENVIRONMENTAL_DAMAGE_TYPE_DROWNING = 1,
    TBC_ENVIRONMENTAL_DAMAGE_TYPE_FALL = 2,
    TBC_ENVIRONMENTAL_DAMAGE_TYPE_LAVA = 3,
    TBC_ENVIRONMENTAL_DAMAGE_TYPE_SLIME = 4,
    TBC_ENVIRONMENTAL_DAMAGE_TYPE_FIRE = 5
} tbc_EnvironmentalDamageType;

typedef enum {
    TBC_EXPANSION_VANILLA = 0,
    TBC_EXPANSION_THE_BURNING_CRUSADE = 1
} tbc_Expansion;

typedef enum {
    TBC_EXPERIENCE_AWARD_TYPE_KILL = 0,
    TBC_EXPERIENCE_AWARD_TYPE_NON_KILL = 1
} tbc_ExperienceAwardType;

typedef enum {
    TBC_FACTION_NONE = 0,
    TBC_FACTION_PLAYER_HUMAN = 1,
    TBC_FACTION_PLAYER_ORC = 2,
    TBC_FACTION_PLAYER_DWARF = 3,
    TBC_FACTION_PLAYER_NIGHT_ELF = 4,
    TBC_FACTION_PLAYER_UNDEAD = 5,
    TBC_FACTION_PLAYER_TAUREN = 6,
    TBC_FACTION_CREATURE = 7,
    TBC_FACTION_PLAYER_GNOME = 8,
    TBC_FACTION_PLAYER_TROLL = 9,
    TBC_FACTION_MONSTER = 14,
    TBC_FACTION_DEFIAS_BROTHERHOOD = 15,
    TBC_FACTION_GNOLL_RIVERPAW = 16,
    TBC_FACTION_GNOLL_REDRIDGE = 17,
    TBC_FACTION_GNOLL_SHADOWHIDE = 18,
    TBC_FACTION_MURLOC = 19,
    TBC_FACTION_UNDEAD_SCOURGE = 20,
    TBC_FACTION_BOOTY_BAY = 21,
    TBC_FACTION_BEAST_SPIDER = 22,
    TBC_FACTION_BEAST_BOAR = 23,
    TBC_FACTION_WORGEN = 24,
    TBC_FACTION_KOBOLD = 25,
    TBC_FACTION_TROLL_BLOODSCALP = 26,
    TBC_FACTION_TROLL_SKULLSPLITTER = 27,
    TBC_FACTION_PREY = 28,
    TBC_FACTION_BEAST_WOLF = 29,
    TBC_FACTION_DEFIAS_BROTHERHOOD_TRAITOR = 30,
    TBC_FACTION_FRIENDLY = 31,
    TBC_FACTION_TROGG = 32,
    TBC_FACTION_TROLL_FROSTMANE = 33,
    TBC_FACTION_ORC_BLACKROCK = 34,
    TBC_FACTION_VILLIAN = 35,
    TBC_FACTION_VICTIM = 36,
    TBC_FACTION_BEAST_BEAR = 37,
    TBC_FACTION_OGRE = 38,
    TBC_FACTION_KURZENS_MERCENARIES = 39,
    TBC_FACTION_ESCORTEE = 40,
    TBC_FACTION_VENTURE_COMPANY = 41,
    TBC_FACTION_BEAST_RAPTOR = 42,
    TBC_FACTION_BASILISK = 43,
    TBC_FACTION_DRAGONFLIGHT_GREEN = 44,
    TBC_FACTION_LOST_ONES = 45,
    TBC_FACTION_BLACKSMITHING_ARMORSMITHING = 46,
    TBC_FACTION_IRONFORGE = 47,
    TBC_FACTION_DARK_IRON_DWARVES = 48,
    TBC_FACTION_HUMAN_NIGHT_WATCH = 49,
    TBC_FACTION_DRAGONFLIGHT_RED = 50,
    TBC_FACTION_GNOLL_MOSSHIDE = 51,
    TBC_FACTION_ORC_DRAGONMAW = 52,
    TBC_FACTION_GNOME_LEPER = 53,
    TBC_FACTION_GNOMEREGAN_EXILES = 54,
    TBC_FACTION_LEOPARD = 55,
    TBC_FACTION_SCARLET_CRUSADE = 56,
    TBC_FACTION_GNOLL_ROTHIDE = 57,
    TBC_FACTION_BEAST_GORILLA = 58,
    TBC_FACTION_THORIUM_BROTHERHOOD = 59,
    TBC_FACTION_NAGA = 60,
    TBC_FACTION_DALARAN = 61,
    TBC_FACTION_FORLORN_SPIRIT = 62,
    TBC_FACTION_DARKHOWL = 63,
    TBC_FACTION_GRELL = 64,
    TBC_FACTION_FURBOLG = 65,
    TBC_FACTION_HORDE_GENERIC = 66,
    TBC_FACTION_HORDE = 67,
    TBC_FACTION_UNDERCITY = 68,
    TBC_FACTION_DARNASSUS = 69,
    TBC_FACTION_SYNDICATE = 70,
    TBC_FACTION_HILLSBRAD_MILITIA = 71,
    TBC_FACTION_STORMWIND = 72,
    TBC_FACTION_DEMON = 73,
    TBC_FACTION_ELEMENTAL = 74,
    TBC_FACTION_SPIRIT = 75,
    TBC_FACTION_ORGRIMMAR = 76,
    TBC_FACTION_TREASURE = 77,
    TBC_FACTION_GNOLL_MUDSNOUT = 78,
    TBC_FACTION_HILLSBRAD_SOUTHSHORE_MAYOR = 79,
    TBC_FACTION_DRAGONFLIGHT_BLACK = 80,
    TBC_FACTION_THUNDER_BLUFF = 81,
    TBC_FACTION_TROLL_WITHERBARK = 82,
    TBC_FACTION_LEATHERWORKING_ELEMENTAL = 83,
    TBC_FACTION_QUILBOAR_RAZORMANE = 84,
    TBC_FACTION_QUILBOAR_BRISTLEBACK = 85,
    TBC_FACTION_LEATHERWORKING_DRAGONSCALE = 86,
    TBC_FACTION_BLOODSAIL_BUCCANEERS = 87,
    TBC_FACTION_BLACKFATHOM = 88,
    TBC_FACTION_MAKRURA = 89,
    TBC_FACTION_CENTAUR_KOLKAR = 90,
    TBC_FACTION_CENTAUR_GALAK = 91,
    TBC_FACTION_GELKIS_CLAN_CENTAUR = 92,
    TBC_FACTION_MAGRAM_CLAN_CENTAUR = 93,
    TBC_FACTION_MARAUDINE = 94,
    TBC_FACTION_THERAMORE = 108,
    TBC_FACTION_QUILBOAR_RAZORFEN = 109,
    TBC_FACTION_QUILBOAR_RAZORMANE_2 = 110,
    TBC_FACTION_QUILBOAR_DEATHSHEAD = 111,
    TBC_FACTION_ENEMY = 128,
    TBC_FACTION_AMBIENT = 148,
    TBC_FACTION_NETHERGARDE_CARAVAN = 168,
    TBC_FACTION_STEAMWHEEDLE_CARTEL = 169,
    TBC_FACTION_ALLIANCE_GENERIC = 189,
    TBC_FACTION_NETHERGARDE = 209,
    TBC_FACTION_WAILING_CAVERNS = 229,
    TBC_FACTION_SILITHID = 249,
    TBC_FACTION_SILVERMOON_REMNANT = 269,
    TBC_FACTION_ZANDALAR_TRIBE = 270,
    TBC_FACTION_BLACKSMITHING_WEAPONSMITHING = 289,
    TBC_FACTION_SCORPID = 309,
    TBC_FACTION_BEAST_BAT = 310,
    TBC_FACTION_TITAN = 311,
    TBC_FACTION_TASKMASTER_FIZZULE = 329,
    TBC_FACTION_RAVENHOLDT = 349,
    TBC_FACTION_GADGETZAN = 369,
    TBC_FACTION_GNOMEREGAN_BUG = 389,
    TBC_FACTION_HARPY = 409,
    TBC_FACTION_BURNING_BLADE = 429,
    TBC_FACTION_SHADOWSILK_POACHER = 449,
    TBC_FACTION_SEARING_SPIDER = 450,
    TBC_FACTION_ALLIANCE = 469,
    TBC_FACTION_RATCHET = 470,
    TBC_FACTION_WILDHAMMER_CLAN = 471,
    TBC_FACTION_GOBLIN_DARK_IRON_BAR_PATRON = 489,
    TBC_FACTION_THE_LEAGUE_OF_ARATHOR = 509,
    TBC_FACTION_THE_DEFILERS = 510,
    TBC_FACTION_GIANT = 511,
    TBC_FACTION_ARGENT_DAWN = 529,
    TBC_FACTION_DARKSPEAR_TROLLS = 530,
    TBC_FACTION_DRAGONFLIGHT_BRONZE = 531,
    TBC_FACTION_DRAGONFLIGHT_BLUE = 532,
    TBC_FACTION_LEATHERWORKING_TRIBAL = 549,
    TBC_FACTION_ENGINEERING_GOBLIN = 550,
    TBC_FACTION_ENGINEERING_GNOME = 551,
    TBC_FACTION_BLACKSMITHING_HAMMERSMITHING = 569,
    TBC_FACTION_BLACKSMITHING_AXESMITHING = 570,
    TBC_FACTION_BLACKSMITHING_SWORDSMITHING = 571,
    TBC_FACTION_TROLL_VILEBRANCH = 572,
    TBC_FACTION_SOUTHSEA_FREEBOOTERS = 573,
    TBC_FACTION_CAER_DARROW = 574,
    TBC_FACTION_FURBOLG_UNCORRUPTED = 575,
    TBC_FACTION_TIMBERMAW_HOLD = 576,
    TBC_FACTION_EVERLOOK = 577,
    TBC_FACTION_WINTERSABER_TRAINERS = 589,
    TBC_FACTION_CENARION_CIRCLE = 609,
    TBC_FACTION_SHATTERSPEAR_TROLLS = 629,
    TBC_FACTION_RAVASAUR_TRAINERS = 630,
    TBC_FACTION_MAJORDOMO_EXECUTUS = 649,
    TBC_FACTION_BEAST_CARRION_BIRD = 669,
    TBC_FACTION_BEAST_CAT = 670,
    TBC_FACTION_BEAST_CRAB = 671,
    TBC_FACTION_BEAST_CROCILISK = 672,
    TBC_FACTION_BEAST_HYENA = 673,
    TBC_FACTION_BEAST_OWL = 674,
    TBC_FACTION_BEAST_SCORPID = 675,
    TBC_FACTION_BEAST_TALLSTRIDER = 676,
    TBC_FACTION_BEAST_TURTLE = 677,
    TBC_FACTION_BEAST_WIND_SERPENT = 678,
    TBC_FACTION_TRAINING_DUMMY = 679,
    TBC_FACTION_DRAGONFLIGHT_BLACK_BAIT = 689,
    TBC_FACTION_BATTLEGROUND_NEUTRAL = 709,
    TBC_FACTION_FROSTWOLF_CLAN = 729,
    TBC_FACTION_STORMPIKE_GUARD = 730,
    TBC_FACTION_HYDRAXIAN_WATERLORDS = 749,
    TBC_FACTION_SULFURON_FIRELORDS = 750,
    TBC_FACTION_GIZLOCKS_DUMMY = 769,
    TBC_FACTION_GIZLOCKS_CHARM = 770,
    TBC_FACTION_GIZLOCK = 771,
    TBC_FACTION_MORO_GAI = 789,
    TBC_FACTION_SPIRIT_GUIDE_ALLIANCE = 790,
    TBC_FACTION_SHEN_DRALAR = 809,
    TBC_FACTION_OGRE_CAPTAIN_KROMCRUSH = 829,
    TBC_FACTION_SPIRIT_GUIDE_HORDE = 849,
    TBC_FACTION_JAEDENAR = 869,
    TBC_FACTION_WARSONG_OUTRIDERS = 889,
    TBC_FACTION_SILVERWING_SENTINELS = 890,
    TBC_FACTION_ALLIANCE_FORCES = 891,
    TBC_FACTION_HORDE_FORCES = 892,
    TBC_FACTION_REVANTUSK_TROLLS = 893,
    TBC_FACTION_DARKMOON_FAIRE = 909,
    TBC_FACTION_BROOD_OF_NOZDORMU = 910,
    TBC_FACTION_SILVERMOON_CITY = 911,
    TBC_FACTION_MIGHT_OF_KALIMDOR = 912,
    TBC_FACTION_PLAYER_BLOOD_ELF = 914,
    TBC_FACTION_ARMIES_OF_C_THUN = 915,
    TBC_FACTION_SILITHID_ATTACKERS = 916,
    TBC_FACTION_THE_IRONFORGE_BRIGADE = 917,
    TBC_FACTION_RC_ENEMIES = 918,
    TBC_FACTION_RC_OBJECTS = 919,
    TBC_FACTION_RED = 920,
    TBC_FACTION_BLUE = 921,
    TBC_FACTION_TRANQUILLIEN = 922,
    TBC_FACTION_FARSTRIDERS = 923,
    TBC_FACTION_DEPRECATED = 924,
    TBC_FACTION_SUNSTRIDERS = 925,
    TBC_FACTION_MAGISTERS_GUILD = 926,
    TBC_FACTION_PLAYER_DRAENEI = 927,
    TBC_FACTION_SCOURGE_INVADERS = 928,
    TBC_FACTION_BLOODMAUL_CLAN = 929,
    TBC_FACTION_EXODAR = 930,
    TBC_FACTION_TEST_FACTION_NOT_A_REAL_FACTION = 931,
    TBC_FACTION_THE_ALDOR = 932,
    TBC_FACTION_THE_CONSORTIUM = 933,
    TBC_FACTION_THE_SCRYERS = 934,
    TBC_FACTION_THE_SHA_TAR = 935,
    TBC_FACTION_SHATTRATH_CITY = 936,
    TBC_FACTION_TROLL_FOREST = 937,
    TBC_FACTION_THE_OMENAI = 938,
    TBC_FACTION_DEPRECATED1 = 939,
    TBC_FACTION_THE_SONS_OF_LOTHAR = 940,
    TBC_FACTION_THE_MAG_HAR = 941,
    TBC_FACTION_CENARION_EXPEDITION = 942,
    TBC_FACTION_FEL_ORC = 943,
    TBC_FACTION_FEL_ORC_GHOST = 944,
    TBC_FACTION_SONS_OF_LOTHAR_GHOSTS = 945,
    TBC_FACTION_HONOR_HOLD = 946,
    TBC_FACTION_THRALLMAR = 947,
    TBC_FACTION_TEST_FACTION_2 = 948,
    TBC_FACTION_TEST_FACTION_1 = 949,
    TBC_FACTION_TOWOW_FLAG = 950,
    TBC_FACTION_TOWOW_FLAG_TRIGGER_ALLIANCE_DND = 951,
    TBC_FACTION_TEST_FACTION_3 = 952,
    TBC_FACTION_TEST_FACTION_4 = 953,
    TBC_FACTION_TOWOW_FLAG_TRIGGER_HORDE_DND = 954,
    TBC_FACTION_BROKEN = 955,
    TBC_FACTION_ETHEREUM = 956,
    TBC_FACTION_EARTH_ELEMENTAL = 957,
    TBC_FACTION_FIGHTING_ROBOTS = 958,
    TBC_FACTION_ACTOR_GOOD = 959,
    TBC_FACTION_ACTOR_EVIL = 960,
    TBC_FACTION_STILLPINE_FURBOLG = 961,
    TBC_FACTION_CRAZED_OWLKIN = 962,
    TBC_FACTION_CHESS_ALLIANCE = 963,
    TBC_FACTION_CHESS_HORDE = 964,
    TBC_FACTION_MONSTER_SPAR = 965,
    TBC_FACTION_MONSTER_SPAR_BUDDY = 966,
    TBC_FACTION_THE_VIOLET_EYE = 967,
    TBC_FACTION_SUNHAWKS = 968,
    TBC_FACTION_HAND_OF_ARGUS = 969,
    TBC_FACTION_SPOREGGAR = 970,
    TBC_FACTION_FUNGAL_GIANT = 971,
    TBC_FACTION_SPORE_BAT = 972,
    TBC_FACTION_MONSTER_PREDATOR = 973,
    TBC_FACTION_MONSTER_PREY = 974,
    TBC_FACTION_VOID_ANOMALY = 975,
    TBC_FACTION_HYJAL_DEFENDERS = 976,
    TBC_FACTION_HYJAL_INVADERS = 977,
    TBC_FACTION_KURENAI = 978,
    TBC_FACTION_EARTHEN_RING = 979,
    TBC_FACTION_OUTLAND = 980,
    TBC_FACTION_ARAKKOA = 981,
    TBC_FACTION_ZANGARMARSH_BANNER_ALLIANCE = 982,
    TBC_FACTION_ZANGARMARSH_BANNER_HORDE = 983,
    TBC_FACTION_ZANGARMARSH_BANNER_NEUTRAL = 984,
    TBC_FACTION_CAVERNS_OF_TIME_THRALL = 985,
    TBC_FACTION_CAVERNS_OF_TIME_DURNHOLDE = 986,
    TBC_FACTION_CAVERNS_OF_TIME_SOUTHSHORE_GUARDS = 987,
    TBC_FACTION_SHADOW_COUNCIL_COVERT = 988,
    TBC_FACTION_KEEPERS_OF_TIME = 989,
    TBC_FACTION_THE_SCALE_OF_THE_SANDS = 990,
    TBC_FACTION_DARK_PORTAL_DEFENDER_ALLIANCE = 991,
    TBC_FACTION_DARK_PORTAL_DEFENDER_HORDE = 992,
    TBC_FACTION_DARK_PORTAL_ATTACKER_LEGION = 993,
    TBC_FACTION_INCITER_TRIGGER = 994,
    TBC_FACTION_INCITER_TRIGGER_2 = 995,
    TBC_FACTION_INCITER_TRIGGER_3 = 996,
    TBC_FACTION_INCITER_TRIGGER_4 = 997,
    TBC_FACTION_INCITER_TRIGGER_5 = 998,
    TBC_FACTION_MANA_CREATURE = 999,
    TBC_FACTION_KHADGARS_SERVANT = 1000,
    TBC_FACTION_BLADESPIRE_CLAN = 1001,
    TBC_FACTION_ETHEREUM_SPARBUDDY = 1002,
    TBC_FACTION_PROTECTORATE = 1003,
    TBC_FACTION_ARCANE_ANNIHILATOR_DNR = 1004,
    TBC_FACTION_FRIENDLY_HIDDEN = 1005,
    TBC_FACTION_KIRIN_VAR_DATHRIC = 1006,
    TBC_FACTION_KIRIN_VAR_BELMARA = 1007,
    TBC_FACTION_KIRIN_VAR_LUMINRATH = 1008,
    TBC_FACTION_KIRIN_VAR_COHLIEN = 1009,
    TBC_FACTION_SERVANT_OF_ILLIDAN = 1010,
    TBC_FACTION_LOWER_CITY = 1011,
    TBC_FACTION_ASHTONGUE_DEATHSWORN = 1012,
    TBC_FACTION_SPIRITS_OF_SHADOWMOON_1 = 1013,
    TBC_FACTION_SPIRITS_OF_SHADOWMOON_2 = 1014,
    TBC_FACTION_NETHERWING = 1015,
    TBC_FACTION_WYRMCULT = 1016,
    TBC_FACTION_TREANT = 1017,
    TBC_FACTION_LEOTHERAS_DEMON_I = 1018,
    TBC_FACTION_LEOTHERAS_DEMON_II = 1019,
    TBC_FACTION_LEOTHERAS_DEMON_III = 1020,
    TBC_FACTION_LEOTHERAS_DEMON_IV = 1021,
    TBC_FACTION_LEOTHERAS_DEMON_V = 1022,
    TBC_FACTION_AZALOTH = 1023,
    TBC_FACTION_ROCK_FLAYER = 1024,
    TBC_FACTION_FLAYER_HUNTER = 1025,
    TBC_FACTION_SHADOWMOON_SHADE = 1026,
    TBC_FACTION_LEGION_COMMUNICATOR = 1027,
    TBC_FACTION_RAVENSWOOD_ANCIENTS = 1028,
    TBC_FACTION_CHESS_FRIENDLY_TO_ALL_CHESS = 1029,
    TBC_FACTION_BLACK_TEMPLE_GATES_ILLIDARI = 1030,
    TBC_FACTION_SHA_TARI_SKYGUARD = 1031,
    TBC_FACTION_AREA_52 = 1032,
    TBC_FACTION_MAIEV = 1033,
    TBC_FACTION_SKETTIS_SHADOWY_ARAKKOA = 1034,
    TBC_FACTION_SKETTIS_ARAKKOA = 1035,
    TBC_FACTION_DRAGONMAW_ENEMY = 1036,
    TBC_FACTION_REUSE = 1037,
    TBC_FACTION_OGRI_LA = 1038,
    TBC_FACTION_RAVAGER = 1039,
    TBC_FACTION_REUSE1 = 1040,
    TBC_FACTION_FRENZY = 1041,
    TBC_FACTION_SKYGUARD_ENEMY = 1042,
    TBC_FACTION_SKUNK_PETUNIA = 1043,
    TBC_FACTION_THERAMORE_DESERTER = 1044,
    TBC_FACTION_TROLL_AMANI = 1049,
    TBC_FACTION_CTF_FLAGS = 1059,
    TBC_FACTION_RAM_RACING_POWERUP_DND = 1069,
    TBC_FACTION_RAM_RACING_TRAP_DND = 1070,
    TBC_FACTION_CRAIGS_SQUIRRELS = 1071,
    TBC_FACTION_HOLIDAY_WATER_BARREL = 1074,
    TBC_FACTION_HOLIDAY_GENERIC = 1075,
    TBC_FACTION_SHATTERED_SUN_OFFENSIVE = 1077,
    TBC_FACTION_FIGHTING_VANITY_PET = 1078,
    TBC_FACTION_MONSTER_FORCE_REACTION = 1080,
    TBC_FACTION_OBJECT_FORCE_REACTION = 1081,
    TBC_FACTION_HOLIDAY_MONSTER = 1087
} tbc_Faction;

typedef enum {
    TBC_FAR_SIGHT_OPERATION_REMOVE = 0,
    TBC_FAR_SIGHT_OPERATION_ADD = 1
} tbc_FarSightOperation;

typedef enum {
    TBC_FRIEND_RESULT_DB_ERROR = 0,
    TBC_FRIEND_RESULT_LIST_FULL = 1,
    TBC_FRIEND_RESULT_ONLINE = 2,
    TBC_FRIEND_RESULT_OFFLINE = 3,
    TBC_FRIEND_RESULT_NOT_FOUND = 4,
    TBC_FRIEND_RESULT_REMOVED = 5,
    TBC_FRIEND_RESULT_ADDED_ONLINE = 6,
    TBC_FRIEND_RESULT_ADDED_OFFLINE = 7,
    TBC_FRIEND_RESULT_ALREADY = 8,
    TBC_FRIEND_RESULT_SELF = 9,
    TBC_FRIEND_RESULT_ENEMY = 10,
    TBC_FRIEND_RESULT_IGNORE_FULL = 11,
    TBC_FRIEND_RESULT_IGNORE_SELF = 12,
    TBC_FRIEND_RESULT_IGNORE_NOT_FOUND = 13,
    TBC_FRIEND_RESULT_IGNORE_ALREADY = 14,
    TBC_FRIEND_RESULT_IGNORE_ADDED = 15,
    TBC_FRIEND_RESULT_IGNORE_REMOVED = 16,
    TBC_FRIEND_RESULT_IGNORE_AMBIGUOUS = 17,
    TBC_FRIEND_RESULT_MUTE_FULL = 18,
    TBC_FRIEND_RESULT_MUTE_SELF = 19,
    TBC_FRIEND_RESULT_MUTE_NOT_FOUND = 20,
    TBC_FRIEND_RESULT_MUTE_ALREADY = 21,
    TBC_FRIEND_RESULT_MUTE_ADDED = 22,
    TBC_FRIEND_RESULT_MUTE_REMOVED = 23,
    TBC_FRIEND_RESULT_MUTE_AMBIGUOUS = 24,
    TBC_FRIEND_RESULT_UNKNOWN19 = 25,
    TBC_FRIEND_RESULT_UNKNOWN20 = 26
} tbc_FriendResult;

typedef enum {
    TBC_FRIEND_STATUS_OFFLINE = 0,
    TBC_FRIEND_STATUS_ONLINE = 1,
    TBC_FRIEND_STATUS_AFK = 2,
    TBC_FRIEND_STATUS_UNKNOWN3 = 3,
    TBC_FRIEND_STATUS_DND = 4
} tbc_FriendStatus;

typedef enum {
    TBC_GENDER_MALE = 0,
    TBC_GENDER_FEMALE = 1,
    TBC_GENDER_NONE = 2
} tbc_Gender;

typedef enum {
    TBC_GM_TICKET_ESCALATION_STATUS_GMTICKET_ASSIGNEDTOGM_STATUS_NOT_ASSIGNED = 0,
    TBC_GM_TICKET_ESCALATION_STATUS_GMTICKET_ASSIGNEDTOGM_STATUS_ASSIGNED = 1,
    TBC_GM_TICKET_ESCALATION_STATUS_GMTICKET_ASSIGNEDTOGM_STATUS_ESCALATED = 2
} tbc_GmTicketEscalationStatus;

typedef enum {
    TBC_GM_TICKET_QUEUE_STATUS_ENABLED = 1,
    TBC_GM_TICKET_QUEUE_STATUS_DISABLED = 0
} tbc_GmTicketQueueStatus;

typedef enum {
    TBC_GM_TICKET_RESPONSE_NOT_EXIST = 0,
    TBC_GM_TICKET_RESPONSE_ALREADY_EXIST = 1,
    TBC_GM_TICKET_RESPONSE_CREATE_SUCCESS = 2,
    TBC_GM_TICKET_RESPONSE_CREATE_ERROR = 3,
    TBC_GM_TICKET_RESPONSE_UPDATE_SUCCESS = 4,
    TBC_GM_TICKET_RESPONSE_UPDATE_ERROR = 5,
    TBC_GM_TICKET_RESPONSE_TICKET_DELETED = 9
} tbc_GmTicketResponse;

typedef enum {
    TBC_GM_TICKET_STATUS_DB_ERROR = 0,
    TBC_GM_TICKET_STATUS_HAS_TEXT = 6,
    TBC_GM_TICKET_STATUS_DEFAULT = 10
} tbc_GmTicketStatus;

typedef enum {
    TBC_GM_TICKET_STATUS_RESPONSE_UPDATED = 1,
    TBC_GM_TICKET_STATUS_RESPONSE_CLOSED = 2,
    TBC_GM_TICKET_STATUS_RESPONSE_SURVEY = 3
} tbc_GmTicketStatusResponse;

typedef enum {
    TBC_GM_TICKET_TYPE_NOT_SET = 0,
    TBC_GM_TICKET_TYPE_STUCK = 1,
    TBC_GM_TICKET_TYPE_BEHAVIOR_HARASSMENT = 2,
    TBC_GM_TICKET_TYPE_GUILD = 3,
    TBC_GM_TICKET_TYPE_ITEM = 4,
    TBC_GM_TICKET_TYPE_ENVIRONMENTAL = 5,
    TBC_GM_TICKET_TYPE_NON_QUEST_CREEP = 6,
    TBC_GM_TICKET_TYPE_QUEST_QUEST_NPC = 7,
    TBC_GM_TICKET_TYPE_TECHNICAL = 8,
    TBC_GM_TICKET_TYPE_ACCOUNT_BILLING = 9,
    TBC_GM_TICKET_TYPE_CHARACTER = 10,
    TBC_GM_TICKET_TYPE_ARENA_HONOR_ITEM_ISSUES = 11,
    TBC_GM_TICKET_TYPE_ARENA_HONOR_POINTS_ISSUES = 12,
    TBC_GM_TICKET_TYPE_BOTTING_CHEATING_HACKING = 13,
    TBC_GM_TICKET_TYPE_BUG_REPORT = 14,
    TBC_GM_TICKET_TYPE_COMPROMISED_ACCOUNT_ISSUE = 15,
    TBC_GM_TICKET_TYPE_GAME_SUGGESTIONS = 16,
    TBC_GM_TICKET_TYPE_GAMEPLAY_QUESTION = 17,
    TBC_GM_TICKET_TYPE_GUILD_BANK_ISSUE = 18,
    TBC_GM_TICKET_TYPE_GUILD_MASTER_ISSUE = 19,
    TBC_GM_TICKET_TYPE_HARASSMENT_SCAM_REPORT = 20,
    TBC_GM_TICKET_TYPE_INAPPROPRIATE_NAME_GUILD_ARENA_CHARACTER_PET = 21,
    TBC_GM_TICKET_TYPE_KNOWN_ISSUE_FIX = 22,
    TBC_GM_TICKET_TYPE_LATENCY_LAG_REPORT = 23,
    TBC_GM_TICKET_TYPE_LOOTING_ISSUE_MISTAKE = 24,
    TBC_GM_TICKET_TYPE_MAIL_ISSUE = 25,
    TBC_GM_TICKET_TYPE_NON_IN_GAME_RELATED_INQUIRY = 26,
    TBC_GM_TICKET_TYPE_PARENTAL_CONTROLS_CAIS = 27,
    TBC_GM_TICKET_TYPE_PCNC = 28,
    TBC_GM_TICKET_TYPE_PCT = 29,
    TBC_GM_TICKET_TYPE_RESTORATION_STATUS_FOLLOW_UP = 30,
    TBC_GM_TICKET_TYPE_SERVER_INSTANCE_ISSUES = 31,
    TBC_GM_TICKET_TYPE_SPAM = 32,
    TBC_GM_TICKET_TYPE_SUICIDE_CASE = 33,
    TBC_GM_TICKET_TYPE_SUSPENSION_QUESTIONS = 34,
    TBC_GM_TICKET_TYPE_TECHNICAL_SOUND_GRAPHICS_ISSUE = 35,
    TBC_GM_TICKET_TYPE_UI_ISSUE = 36
} tbc_GmTicketType;

typedef enum {
    TBC_GROUP_LOOT_SETTING_FREE_FOR_ALL = 0,
    TBC_GROUP_LOOT_SETTING_ROUND_ROBIN = 1,
    TBC_GROUP_LOOT_SETTING_MASTER_LOOT = 2,
    TBC_GROUP_LOOT_SETTING_GROUP_LOOT = 3,
    TBC_GROUP_LOOT_SETTING_NEED_BEFORE_GREED = 4
} tbc_GroupLootSetting;

typedef enum {
    TBC_GROUP_TYPE_NORMAL = 0,
    TBC_GROUP_TYPE_RAID = 1
} tbc_GroupType;

typedef enum {
    TBC_GUILD_BANK_TAB_RESULT_NOT_PRESENT = 0,
    TBC_GUILD_BANK_TAB_RESULT_PRESENT = 1
} tbc_GuildBankTabResult;

typedef enum {
    TBC_GUILD_COMMAND_CREATE = 0,
    TBC_GUILD_COMMAND_INVITE = 1,
    TBC_GUILD_COMMAND_QUIT = 3,
    TBC_GUILD_COMMAND_FOUNDER = 14,
    TBC_GUILD_COMMAND_UNKNOWN19 = 19,
    TBC_GUILD_COMMAND_UNKNOWN20 = 20
} tbc_GuildCommand;

typedef enum {
    TBC_GUILD_COMMAND_RESULT_PLAYER_NO_MORE_IN_GUILD = 0,
    TBC_GUILD_COMMAND_RESULT_GUILD_INTERNAL = 1,
    TBC_GUILD_COMMAND_RESULT_ALREADY_IN_GUILD = 2,
    TBC_GUILD_COMMAND_RESULT_ALREADY_IN_GUILD_S = 3,
    TBC_GUILD_COMMAND_RESULT_INVITED_TO_GUILD = 4,
    TBC_GUILD_COMMAND_RESULT_ALREADY_INVITED_TO_GUILD_S = 5,
    TBC_GUILD_COMMAND_RESULT_GUILD_NAME_INVALID = 6,
    TBC_GUILD_COMMAND_RESULT_GUILD_NAME_EXISTS_S = 7,
    TBC_GUILD_COMMAND_RESULT_GUILD_LEADER_LEAVE_OR_PERMISSIONS = 8,
    TBC_GUILD_COMMAND_RESULT_GUILD_PLAYER_NOT_IN_GUILD = 9,
    TBC_GUILD_COMMAND_RESULT_GUILD_PLAYER_NOT_IN_GUILD_S = 10,
    TBC_GUILD_COMMAND_RESULT_GUILD_PLAYER_NOT_FOUND_S = 11,
    TBC_GUILD_COMMAND_RESULT_GUILD_NOT_ALLIED = 12,
    TBC_GUILD_COMMAND_RESULT_GUILD_RANK_TOO_HIGH_S = 13,
    TBC_GUILD_COMMAND_RESULT_GUILD_RANK_TOO_LOW_S = 14,
    TBC_GUILD_COMMAND_RESULT_GUILD_RANKS_LOCKED = 17,
    TBC_GUILD_COMMAND_RESULT_GUILD_RANK_IN_USE = 18,
    TBC_GUILD_COMMAND_RESULT_GUILD_IGNORING_YOU_S = 19,
    TBC_GUILD_COMMAND_RESULT_GUILD_UNK20 = 20
} tbc_GuildCommandResult;

typedef enum {
    TBC_GUILD_EMBLEM_RESULT_SUCCESS = 0,
    TBC_GUILD_EMBLEM_RESULT_INVALID_TABARD_COLORS = 1,
    TBC_GUILD_EMBLEM_RESULT_NO_GUILD = 2,
    TBC_GUILD_EMBLEM_RESULT_NOT_GUILD_MASTER = 3,
    TBC_GUILD_EMBLEM_RESULT_NOT_ENOUGH_MONEY = 4,
    TBC_GUILD_EMBLEM_RESULT_INVALID_VENDOR = 5
} tbc_GuildEmblemResult;

typedef enum {
    TBC_GUILD_EVENT_PROMOTION = 0,
    TBC_GUILD_EVENT_DEMOTION = 1,
    TBC_GUILD_EVENT_MOTD = 2,
    TBC_GUILD_EVENT_JOINED = 3,
    TBC_GUILD_EVENT_LEFT = 4,
    TBC_GUILD_EVENT_REMOVED = 5,
    TBC_GUILD_EVENT_LEADER_IS = 6,
    TBC_GUILD_EVENT_LEADER_CHANGED = 7,
    TBC_GUILD_EVENT_DISBANDED = 8,
    TBC_GUILD_EVENT_TABARD_CHANGED = 9,
    TBC_GUILD_EVENT_UNK1 = 10,
    TBC_GUILD_EVENT_UNK2 = 11,
    TBC_GUILD_EVENT_SIGNED_ON = 12,
    TBC_GUILD_EVENT_SIGNED_OFF = 13,
    TBC_GUILD_EVENT_GUILD_BANK_BAG_SLOTS_CHANGED = 14,
    TBC_GUILD_EVENT_BANKTAB_PURCHASED = 15,
    TBC_GUILD_EVENT_UNK5 = 16,
    TBC_GUILD_EVENT_GUILD_BANK_UPDATE_MONEY = 17,
    TBC_GUILD_EVENT_GUILD_BANK_MONEY_WITHDRAWN = 18,
    TBC_GUILD_EVENT_GUILD_BANK_TEXT_CHANGED = 19
} tbc_GuildEvent;

typedef enum {
    TBC_GUILD_MEMBER_STATUS_OFFLINE = 0,
    TBC_GUILD_MEMBER_STATUS_ONLINE = 1
} tbc_GuildMemberStatus;

typedef enum {
    TBC_HIT_INFO_NORMAL_SWING = 0,
    TBC_HIT_INFO_UNK1 = 1,
    TBC_HIT_INFO_AFFECTS_VICTIM = 2,
    TBC_HIT_INFO_LEFT_SWING = 4,
    TBC_HIT_INFO_EARLY_CRITICAL_HIT = 8,
    TBC_HIT_INFO_MISS = 16,
    TBC_HIT_INFO_ABSORB = 32,
    TBC_HIT_INFO_RESIST = 64,
    TBC_HIT_INFO_CRITICAL_HIT = 128,
    TBC_HIT_INFO_UNK9 = 256,
    TBC_HIT_INFO_UNK10 = 8192,
    TBC_HIT_INFO_GLANCING = 16384,
    TBC_HIT_INFO_CRUSHING = 32768,
    TBC_HIT_INFO_NO_ACTION = 65536,
    TBC_HIT_INFO_SWING_NO_HIT_SOUND = 524288
} tbc_HitInfo;

typedef enum {
    TBC_INSTANCE_RESET_FAILED_REASON_GENERAL = 0,
    TBC_INSTANCE_RESET_FAILED_REASON_OFFLINE = 1,
    TBC_INSTANCE_RESET_FAILED_REASON_ZONING = 2,
    TBC_INSTANCE_RESET_FAILED_REASON_SILENTLY = 3
} tbc_InstanceResetFailedReason;

typedef enum {
    TBC_INVENTORY_RESULT_OK = 0,
    TBC_INVENTORY_RESULT_CANT_EQUIP_LEVEL_I = 1,
    TBC_INVENTORY_RESULT_CANT_EQUIP_SKILL = 2,
    TBC_INVENTORY_RESULT_ITEM_DOESNT_GO_TO_SLOT = 3,
    TBC_INVENTORY_RESULT_BAG_FULL = 4,
    TBC_INVENTORY_RESULT_NONEMPTY_BAG_OVER_OTHER_BAG = 5,
    TBC_INVENTORY_RESULT_CANT_TRADE_EQUIP_BAGS = 6,
    TBC_INVENTORY_RESULT_ONLY_AMMO_CAN_GO_HERE = 7,
    TBC_INVENTORY_RESULT_NO_REQUIRED_PROFICIENCY = 8,
    TBC_INVENTORY_RESULT_NO_EQUIPMENT_SLOT_AVAILABLE = 9,
    TBC_INVENTORY_RESULT_YOU_CAN_NEVER_USE_THAT_ITEM = 10,
    TBC_INVENTORY_RESULT_YOU_CAN_NEVER_USE_THAT_ITEM2 = 11,
    TBC_INVENTORY_RESULT_NO_EQUIPMENT_SLOT_AVAILABLE2 = 12,
    TBC_INVENTORY_RESULT_CANT_EQUIP_WITH_TWOHANDED = 13,
    TBC_INVENTORY_RESULT_CANT_DUAL_WIELD = 14,
    TBC_INVENTORY_RESULT_ITEM_DOESNT_GO_INTO_BAG = 15,
    TBC_INVENTORY_RESULT_ITEM_DOESNT_GO_INTO_BAG2 = 16,
    TBC_INVENTORY_RESULT_CANT_CARRY_MORE_OF_THIS = 17,
    TBC_INVENTORY_RESULT_NO_EQUIPMENT_SLOT_AVAILABLE3 = 18,
    TBC_INVENTORY_RESULT_ITEM_CANT_STACK = 19,
    TBC_INVENTORY_RESULT_ITEM_CANT_BE_EQUIPPED = 20,
    TBC_INVENTORY_RESULT_ITEMS_CANT_BE_SWAPPED = 21,
    TBC_INVENTORY_RESULT_SLOT_IS_EMPTY = 22,
    TBC_INVENTORY_RESULT_ITEM_NOT_FOUND = 23,
    TBC_INVENTORY_RESULT_CANT_DROP_SOULBOUND = 24,
    TBC_INVENTORY_RESULT_OUT_OF_RANGE = 25,
    TBC_INVENTORY_RESULT_TRIED_TO_SPLIT_MORE_THAN_COUNT = 26,
    TBC_INVENTORY_RESULT_COULDNT_SPLIT_ITEMS = 27,
    TBC_INVENTORY_RESULT_MISSING_REAGENT = 28,
    TBC_INVENTORY_RESULT_NOT_ENOUGH_MONEY = 29,
    TBC_INVENTORY_RESULT_NOT_A_BAG = 30,
    TBC_INVENTORY_RESULT_CAN_ONLY_DO_WITH_EMPTY_BAGS = 31,
    TBC_INVENTORY_RESULT_DONT_OWN_THAT_ITEM = 32,
    TBC_INVENTORY_RESULT_CAN_EQUIP_ONLY1_QUIVER = 33,
    TBC_INVENTORY_RESULT_MUST_PURCHASE_THAT_BAG_SLOT = 34,
    TBC_INVENTORY_RESULT_TOO_FAR_AWAY_FROM_BANK = 35,
    TBC_INVENTORY_RESULT_ITEM_LOCKED = 36,
    TBC_INVENTORY_RESULT_YOU_ARE_STUNNED = 37,
    TBC_INVENTORY_RESULT_YOU_ARE_DEAD = 38,
    TBC_INVENTORY_RESULT_CANT_DO_RIGHT_NOW = 39,
    TBC_INVENTORY_RESULT_INT_BAG_ERROR = 40,
    TBC_INVENTORY_RESULT_CAN_EQUIP_ONLY1_BOLT = 41,
    TBC_INVENTORY_RESULT_CAN_EQUIP_ONLY1_AMMOPOUCH = 42,
    TBC_INVENTORY_RESULT_STACKABLE_CANT_BE_WRAPPED = 43,
    TBC_INVENTORY_RESULT_EQUIPPED_CANT_BE_WRAPPED = 44,
    TBC_INVENTORY_RESULT_WRAPPED_CANT_BE_WRAPPED = 45,
    TBC_INVENTORY_RESULT_BOUND_CANT_BE_WRAPPED = 46,
    TBC_INVENTORY_RESULT_UNIQUE_CANT_BE_WRAPPED = 47,
    TBC_INVENTORY_RESULT_BAGS_CANT_BE_WRAPPED = 48,
    TBC_INVENTORY_RESULT_ALREADY_LOOTED = 49,
    TBC_INVENTORY_RESULT_INVENTORY_FULL = 50,
    TBC_INVENTORY_RESULT_BANK_FULL = 51,
    TBC_INVENTORY_RESULT_ITEM_IS_CURRENTLY_SOLD_OUT = 52,
    TBC_INVENTORY_RESULT_BAG_FULL3 = 53,
    TBC_INVENTORY_RESULT_ITEM_NOT_FOUND2 = 54,
    TBC_INVENTORY_RESULT_ITEM_CANT_STACK2 = 55,
    TBC_INVENTORY_RESULT_BAG_FULL4 = 56,
    TBC_INVENTORY_RESULT_ITEM_SOLD_OUT = 57,
    TBC_INVENTORY_RESULT_OBJECT_IS_BUSY = 58,
    TBC_INVENTORY_RESULT_NONE = 59,
    TBC_INVENTORY_RESULT_NOT_IN_COMBAT = 60,
    TBC_INVENTORY_RESULT_NOT_WHILE_DISARMED = 61,
    TBC_INVENTORY_RESULT_BAG_FULL6 = 62,
    TBC_INVENTORY_RESULT_CANT_EQUIP_RANK = 63,
    TBC_INVENTORY_RESULT_CANT_EQUIP_REPUTATION = 64,
    TBC_INVENTORY_RESULT_TOO_MANY_SPECIAL_BAGS = 65,
    TBC_INVENTORY_RESULT_LOOT_CANT_LOOT_THAT_NOW = 66,
    TBC_INVENTORY_RESULT_ITEM_UNIQUE_EQUIPABLE = 67,
    TBC_INVENTORY_RESULT_VENDOR_MISSING_TURNINS = 68,
    TBC_INVENTORY_RESULT_NOT_ENOUGH_HONOR_POINTS = 69,
    TBC_INVENTORY_RESULT_NOT_ENOUGH_ARENA_POINTS = 70,
    TBC_INVENTORY_RESULT_ITEM_MAX_COUNT_SOCKETED = 71,
    TBC_INVENTORY_RESULT_MAIL_BOUND_ITEM = 72,
    TBC_INVENTORY_RESULT_NO_SPLIT_WHILE_PROSPECTING = 73,
    TBC_INVENTORY_RESULT_BAG_FULL7 = 74,
    TBC_INVENTORY_RESULT_ITEM_MAX_COUNT_EQUIPPED_SOCKETED = 75,
    TBC_INVENTORY_RESULT_ITEM_UNIQUE_EQUIPPABLE_SOCKETED = 76,
    TBC_INVENTORY_RESULT_TOO_MUCH_GOLD = 77,
    TBC_INVENTORY_RESULT_NOT_DURING_ARENA_MATCH = 78,
    TBC_INVENTORY_RESULT_CANNOT_TRADE_THAT = 79,
    TBC_INVENTORY_RESULT_PERSONAL_ARENA_RATING_TOO_LOW = 80
} tbc_InventoryResult;

typedef enum {
    TBC_INVENTORY_TYPE_NON_EQUIP = 0,
    TBC_INVENTORY_TYPE_HEAD = 1,
    TBC_INVENTORY_TYPE_NECK = 2,
    TBC_INVENTORY_TYPE_SHOULDERS = 3,
    TBC_INVENTORY_TYPE_BODY = 4,
    TBC_INVENTORY_TYPE_CHEST = 5,
    TBC_INVENTORY_TYPE_WAIST = 6,
    TBC_INVENTORY_TYPE_LEGS = 7,
    TBC_INVENTORY_TYPE_FEET = 8,
    TBC_INVENTORY_TYPE_WRISTS = 9,
    TBC_INVENTORY_TYPE_HANDS = 10,
    TBC_INVENTORY_TYPE_FINGER = 11,
    TBC_INVENTORY_TYPE_TRINKET = 12,
    TBC_INVENTORY_TYPE_WEAPON = 13,
    TBC_INVENTORY_TYPE_SHIELD = 14,
    TBC_INVENTORY_TYPE_RANGED = 15,
    TBC_INVENTORY_TYPE_CLOAK = 16,
    TBC_INVENTORY_TYPE_TWO_HANDED_WEAPON = 17,
    TBC_INVENTORY_TYPE_BAG = 18,
    TBC_INVENTORY_TYPE_TABARD = 19,
    TBC_INVENTORY_TYPE_ROBE = 20,
    TBC_INVENTORY_TYPE_WEAPON_MAIN_HAND = 21,
    TBC_INVENTORY_TYPE_WEAPON_OFF_HAND = 22,
    TBC_INVENTORY_TYPE_HOLDABLE = 23,
    TBC_INVENTORY_TYPE_AMMO = 24,
    TBC_INVENTORY_TYPE_THROWN = 25,
    TBC_INVENTORY_TYPE_RANGED_RIGHT = 26,
    TBC_INVENTORY_TYPE_QUIVER = 27,
    TBC_INVENTORY_TYPE_RELIC = 28
} tbc_InventoryType;

typedef enum {
    TBC_ITEM_CLASS_CONSUMABLE = 0,
    TBC_ITEM_CLASS_CONTAINER = 1,
    TBC_ITEM_CLASS_WEAPON = 2,
    TBC_ITEM_CLASS_GEM = 3,
    TBC_ITEM_CLASS_ARMOR = 4,
    TBC_ITEM_CLASS_REAGENT = 5,
    TBC_ITEM_CLASS_PROJECTILE = 6,
    TBC_ITEM_CLASS_TRADE_GOODS = 7,
    TBC_ITEM_CLASS_GENERIC = 8,
    TBC_ITEM_CLASS_RECIPE = 9,
    TBC_ITEM_CLASS_MONEY = 10,
    TBC_ITEM_CLASS_QUIVER = 11,
    TBC_ITEM_CLASS_QUEST = 12,
    TBC_ITEM_CLASS_KEY = 13,
    TBC_ITEM_CLASS_PERMANENT = 14,
    TBC_ITEM_CLASS_MISC = 15
} tbc_ItemClass;

/* standard C only allows enums to be ints. We need larger than that */
typedef uint64_t tbc_ItemClassAndSubClass;
#define TBC_ITEM_CLASS_AND_SUB_CLASS_CONSUMABLE 0
#define TBC_ITEM_CLASS_AND_SUB_CLASS_FOOD_AND_DRINK 21474836480
#define TBC_ITEM_CLASS_AND_SUB_CLASS_POTION 4294967296
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ELIXIR 8589934592
#define TBC_ITEM_CLASS_AND_SUB_CLASS_FLASK 12884901888
#define TBC_ITEM_CLASS_AND_SUB_CLASS_BANDAGE 30064771072
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ITEM_ENHANCEMENT 25769803776
#define TBC_ITEM_CLASS_AND_SUB_CLASS_SCROLL 17179869184
#define TBC_ITEM_CLASS_AND_SUB_CLASS_OTHER_CONSUMABLE 34359738368
#define TBC_ITEM_CLASS_AND_SUB_CLASS_BAG 1
#define TBC_ITEM_CLASS_AND_SUB_CLASS_SOUL_BAG 4294967297
#define TBC_ITEM_CLASS_AND_SUB_CLASS_HERB_BAG 8589934593
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ENCHANTING_BAG 12884901889
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ENGINEERING_BAG 17179869185
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GEM_BAG 21474836481
#define TBC_ITEM_CLASS_AND_SUB_CLASS_MINING_BAG 25769803777
#define TBC_ITEM_CLASS_AND_SUB_CLASS_LEATHERWORKING_BAG 30064771073
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_AXE 2
#define TBC_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_AXE 4294967298
#define TBC_ITEM_CLASS_AND_SUB_CLASS_BOW 8589934594
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GUN 12884901890
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_MACE 17179869186
#define TBC_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_MACE 21474836482
#define TBC_ITEM_CLASS_AND_SUB_CLASS_POLEARM 25769803778
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_SWORD 30064771074
#define TBC_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_SWORD 34359738370
#define TBC_ITEM_CLASS_AND_SUB_CLASS_OBSOLETE_WEAPON 38654705666
#define TBC_ITEM_CLASS_AND_SUB_CLASS_STAFF 42949672962
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ONE_HANDED_EXOTIC 47244640258
#define TBC_ITEM_CLASS_AND_SUB_CLASS_TWO_HANDED_EXOTIC 51539607554
#define TBC_ITEM_CLASS_AND_SUB_CLASS_FIST_WEAPON 55834574850
#define TBC_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_WEAPON 60129542146
#define TBC_ITEM_CLASS_AND_SUB_CLASS_DAGGER 64424509442
#define TBC_ITEM_CLASS_AND_SUB_CLASS_THROWN 68719476738
#define TBC_ITEM_CLASS_AND_SUB_CLASS_SPEAR 73014444034
#define TBC_ITEM_CLASS_AND_SUB_CLASS_CROSSBOW 77309411330
#define TBC_ITEM_CLASS_AND_SUB_CLASS_WAND 81604378626
#define TBC_ITEM_CLASS_AND_SUB_CLASS_FISHING_POLE 85899345922
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GEM_RED 3
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GEM_BLUE 4294967299
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GEM_YELLOW 8589934595
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GEM_PURPLE 12884901891
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GEM_GREEN 17179869187
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GEM_ORANGE 21474836483
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GEM_META 25769803779
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GEM_SIMPLE 30064771075
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GEM_PRISMATIC 34359738371
#define TBC_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_ARMOR 4
#define TBC_ITEM_CLASS_AND_SUB_CLASS_CLOTH_ARMOR 4294967300
#define TBC_ITEM_CLASS_AND_SUB_CLASS_LEATHER_ARMOR 8589934596
#define TBC_ITEM_CLASS_AND_SUB_CLASS_MAIL_ARMOR 12884901892
#define TBC_ITEM_CLASS_AND_SUB_CLASS_PLATE_ARMOR 17179869188
#define TBC_ITEM_CLASS_AND_SUB_CLASS_BUCKLER_OBSOLETE 21474836484
#define TBC_ITEM_CLASS_AND_SUB_CLASS_SHIELD 25769803780
#define TBC_ITEM_CLASS_AND_SUB_CLASS_LIBRAM 30064771076
#define TBC_ITEM_CLASS_AND_SUB_CLASS_IDOL 34359738372
#define TBC_ITEM_CLASS_AND_SUB_CLASS_TOTEM 38654705668
#define TBC_ITEM_CLASS_AND_SUB_CLASS_REAGENT 5
#define TBC_ITEM_CLASS_AND_SUB_CLASS_WAND_OBSOLETE 6
#define TBC_ITEM_CLASS_AND_SUB_CLASS_BOLT_OBSOLETE 4294967302
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ARROW 8589934598
#define TBC_ITEM_CLASS_AND_SUB_CLASS_BULLET 12884901894
#define TBC_ITEM_CLASS_AND_SUB_CLASS_THROWN_OBSOLETE 17179869190
#define TBC_ITEM_CLASS_AND_SUB_CLASS_TRADE_GOOD 7
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ELEMENTAL_TRADE_GOOD 42949672967
#define TBC_ITEM_CLASS_AND_SUB_CLASS_CLOTH_TRADE_GOOD 21474836487
#define TBC_ITEM_CLASS_AND_SUB_CLASS_LEATHER_TRADE_GOOD 25769803783
#define TBC_ITEM_CLASS_AND_SUB_CLASS_METAL_AND_STONE_TRADE_GOOD 30064771079
#define TBC_ITEM_CLASS_AND_SUB_CLASS_MEAT_TRADE_GOOD 34359738375
#define TBC_ITEM_CLASS_AND_SUB_CLASS_HERB_TRADE_GOOD 38654705671
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ENCHANTING_TRADE_GOOD 51539607559
#define TBC_ITEM_CLASS_AND_SUB_CLASS_JEWELCRAFTING_TRADE_GOOD 17179869191
#define TBC_ITEM_CLASS_AND_SUB_CLASS_PART_TRADE_GOOD 4294967303
#define TBC_ITEM_CLASS_AND_SUB_CLASS_DEVICE_TRADE_GOOD 12884901895
#define TBC_ITEM_CLASS_AND_SUB_CLASS_EXPLOSIVE_TRADE_GOOD 8589934599
#define TBC_ITEM_CLASS_AND_SUB_CLASS_MATERIAL_TRADE_GOOD 55834574855
#define TBC_ITEM_CLASS_AND_SUB_CLASS_OTHER_TRADE_GOOD 47244640263
#define TBC_ITEM_CLASS_AND_SUB_CLASS_GENERIC_OBSOLETE 8
#define TBC_ITEM_CLASS_AND_SUB_CLASS_BOOK 9
#define TBC_ITEM_CLASS_AND_SUB_CLASS_LEATHERWORKING_RECIPE 4294967305
#define TBC_ITEM_CLASS_AND_SUB_CLASS_TAILORING_RECIPE 8589934601
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ENGINEERING_RECIPE 12884901897
#define TBC_ITEM_CLASS_AND_SUB_CLASS_BLACKSMITHING_RECIPE 17179869193
#define TBC_ITEM_CLASS_AND_SUB_CLASS_COOKING_RECIPE 21474836489
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ALCHEMY_RECIPE 25769803785
#define TBC_ITEM_CLASS_AND_SUB_CLASS_FIRST_AID_RECIPE 30064771081
#define TBC_ITEM_CLASS_AND_SUB_CLASS_ENCHANTING_RECIPE 34359738377
#define TBC_ITEM_CLASS_AND_SUB_CLASS_FISHING_RECIPE 38654705673
#define TBC_ITEM_CLASS_AND_SUB_CLASS_JEWELCRAFTING_RECIPE 42949672969
#define TBC_ITEM_CLASS_AND_SUB_CLASS_MONEY_OBSOLETE 10
#define TBC_ITEM_CLASS_AND_SUB_CLASS_QUIVER_OBSOLETE 11
#define TBC_ITEM_CLASS_AND_SUB_CLASS_QUIVER_OBSOLETE1 4294967307
#define TBC_ITEM_CLASS_AND_SUB_CLASS_QUIVER 8589934603
#define TBC_ITEM_CLASS_AND_SUB_CLASS_AMMO_POUCH 12884901899
#define TBC_ITEM_CLASS_AND_SUB_CLASS_QUEST 12
#define TBC_ITEM_CLASS_AND_SUB_CLASS_KEY 13
#define TBC_ITEM_CLASS_AND_SUB_CLASS_LOCKPICK 4294967309
#define TBC_ITEM_CLASS_AND_SUB_CLASS_PERMANENT 14
#define TBC_ITEM_CLASS_AND_SUB_CLASS_JUNK 15
#define TBC_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_REAGENT 4294967311
#define TBC_ITEM_CLASS_AND_SUB_CLASS_PET 8589934607
#define TBC_ITEM_CLASS_AND_SUB_CLASS_HOLIDAY 12884901903
#define TBC_ITEM_CLASS_AND_SUB_CLASS_MISCELLANEOUS_OTHER 17179869199
#define TBC_ITEM_CLASS_AND_SUB_CLASS_MOUNT 21474836495

typedef enum {
    TBC_ITEM_QUALITY_POOR = 0,
    TBC_ITEM_QUALITY_NORMAL = 1,
    TBC_ITEM_QUALITY_UNCOMMON = 2,
    TBC_ITEM_QUALITY_RARE = 3,
    TBC_ITEM_QUALITY_EPIC = 4,
    TBC_ITEM_QUALITY_LEGENDARY = 5,
    TBC_ITEM_QUALITY_ARTIFACT = 6
} tbc_ItemQuality;

typedef enum {
    TBC_ITEM_SET_NONE = 0,
    TBC_ITEM_SET_THE_GLADIATOR = 1,
    TBC_ITEM_SET_DAL_RENDS_ARMS = 41,
    TBC_ITEM_SET_SPIDERS_KISS = 65,
    TBC_ITEM_SET_THE_POSTMASTER = 81,
    TBC_ITEM_SET_CADAVEROUS_GARB = 121,
    TBC_ITEM_SET_NECROPILE_RAIMENT = 122,
    TBC_ITEM_SET_BLOODMAIL_REGALIA = 123,
    TBC_ITEM_SET_DEATHBONE_GUARDIAN = 124,
    TBC_ITEM_SET_VOLCANIC_ARMOR = 141,
    TBC_ITEM_SET_STORMSHROUD_ARMOR = 142,
    TBC_ITEM_SET_DEVILSAUR_ARMOR = 143,
    TBC_ITEM_SET_IRONFEATHER_ARMOR = 144,
    TBC_ITEM_SET_DEFIAS_LEATHER = 161,
    TBC_ITEM_SET_EMBRACE_OF_THE_VIPER = 162,
    TBC_ITEM_SET_CHAIN_OF_THE_SCARLET_CRUSADE = 163,
    TBC_ITEM_SET_MAGISTERS_REGALIA = 181,
    TBC_ITEM_SET_VESTMENTS_OF_THE_DEVOUT = 182,
    TBC_ITEM_SET_DREADMIST_RAIMENT = 183,
    TBC_ITEM_SET_SHADOWCRAFT_ARMOR = 184,
    TBC_ITEM_SET_WILDHEART_RAIMENT = 185,
    TBC_ITEM_SET_BEASTSTALKER_ARMOR = 186,
    TBC_ITEM_SET_THE_ELEMENTS = 187,
    TBC_ITEM_SET_LIGHTFORGE_ARMOR = 188,
    TBC_ITEM_SET_BATTLEGEAR_OF_VALOR = 189,
    TBC_ITEM_SET_ARCANIST_REGALIA = 201,
    TBC_ITEM_SET_VESTMENTS_OF_PROPHECY = 202,
    TBC_ITEM_SET_FELHEART_RAIMENT = 203,
    TBC_ITEM_SET_NIGHTSLAYER_ARMOR = 204,
    TBC_ITEM_SET_CENARION_RAIMENT = 205,
    TBC_ITEM_SET_GIANTSTALKER_ARMOR = 206,
    TBC_ITEM_SET_THE_EARTHFURY = 207,
    TBC_ITEM_SET_LAWBRINGER_ARMOR = 208,
    TBC_ITEM_SET_BATTLEGEAR_OF_MIGHT = 209,
    TBC_ITEM_SET_NETHERWIND_REGALIA = 210,
    TBC_ITEM_SET_VESTMENTS_OF_TRANSCENDENCE = 211,
    TBC_ITEM_SET_NEMESIS_RAIMENT = 212,
    TBC_ITEM_SET_BLOODFANG_ARMOR = 213,
    TBC_ITEM_SET_STORMRAGE_RAIMENT = 214,
    TBC_ITEM_SET_DRAGONSTALKER_ARMOR = 215,
    TBC_ITEM_SET_THE_TEN_STORMS = 216,
    TBC_ITEM_SET_JUDGEMENT_ARMOR = 217,
    TBC_ITEM_SET_BATTLEGEAR_OF_WRATH = 218,
    TBC_ITEM_SET_GARB_OF_THERO_SHAN = 221,
    TBC_ITEM_SET_SHARD_OF_THE_GODS = 241,
    TBC_ITEM_SET_SPIRIT_OF_ESKHANDAR = 261,
    TBC_ITEM_SET_CHAMPIONS_BATTLEGEAR = 281,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_BATTLEGEAR = 282,
    TBC_ITEM_SET_CHAMPIONS_EARTHSHAKER = 301,
    TBC_ITEM_SET_IMPERIAL_PLATE = 321,
    TBC_ITEM_SET_CHAMPIONS_REGALIA = 341,
    TBC_ITEM_SET_CHAMPIONS_RAIMENT = 342,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_REGALIA = 343,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_RAIMENT = 344,
    TBC_ITEM_SET_CHAMPIONS_THREADS = 345,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_THREADS = 346,
    TBC_ITEM_SET_CHAMPIONS_VESTMENTS = 347,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_VESTMENTS = 348,
    TBC_ITEM_SET_CHAMPIONS_PURSUIT = 361,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_PURSUIT = 362,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_SANCTUARY = 381,
    TBC_ITEM_SET_CHAMPIONS_SANCTUARY = 382,
    TBC_ITEM_SET_WARLORDS_BATTLEGEAR = 383,
    TBC_ITEM_SET_FIELD_MARSHALS_BATTLEGEAR = 384,
    TBC_ITEM_SET_WARLORDS_EARTHSHAKER = 386,
    TBC_ITEM_SET_WARLORDS_REGALIA = 387,
    TBC_ITEM_SET_FIELD_MARSHALS_REGALIA = 388,
    TBC_ITEM_SET_FIELD_MARSHALS_RAIMENT = 389,
    TBC_ITEM_SET_WARLORDS_RAIMENT = 390,
    TBC_ITEM_SET_WARLORDS_THREADS = 391,
    TBC_ITEM_SET_FIELD_MARSHALS_THREADS = 392,
    TBC_ITEM_SET_WARLORDS_VESTMENTS = 393,
    TBC_ITEM_SET_FIELD_MARSHALS_VESTMENTS = 394,
    TBC_ITEM_SET_FIELD_MARSHALS_PURSUIT = 395,
    TBC_ITEM_SET_WARLORDS_PURSUIT = 396,
    TBC_ITEM_SET_FIELD_MARSHALS_SANCTUARY = 397,
    TBC_ITEM_SET_WARLORDS_SANCTUARY = 398,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_AEGIS = 401,
    TBC_ITEM_SET_FIELD_MARSHALS_AEGIS = 402,
    TBC_ITEM_SET_BLOODVINE_GARB = 421,
    TBC_ITEM_SET_PRIMAL_BATSKIN = 441,
    TBC_ITEM_SET_BLOOD_TIGER_HARNESS = 442,
    TBC_ITEM_SET_BLOODSOUL_EMBRACE = 443,
    TBC_ITEM_SET_THE_DARKSOUL = 444,
    TBC_ITEM_SET_THE_TWIN_BLADES_OF_HAKKARI = 461,
    TBC_ITEM_SET_ZANZILS_CONCENTRATION = 462,
    TBC_ITEM_SET_PRIMAL_BLESSING = 463,
    TBC_ITEM_SET_OVERLORDS_RESOLUTION = 464,
    TBC_ITEM_SET_PRAYER_OF_THE_PRIMAL = 465,
    TBC_ITEM_SET_MAJOR_MOJO_INFUSION = 466,
    TBC_ITEM_SET_THE_HIGHLANDERS_RESOLUTION = 467,
    TBC_ITEM_SET_THE_HIGHLANDERS_RESOLVE = 468,
    TBC_ITEM_SET_THE_HIGHLANDERS_DETERMINATION = 469,
    TBC_ITEM_SET_THE_HIGHLANDERS_FORTITUDE = 470,
    TBC_ITEM_SET_THE_HIGHLANDERS_PURPOSE = 471,
    TBC_ITEM_SET_THE_HIGHLANDERS_WILL = 472,
    TBC_ITEM_SET_THE_HIGHLANDERS_INTENT = 473,
    TBC_ITEM_SET_VINDICATORS_BATTLEGEAR = 474,
    TBC_ITEM_SET_FREETHINKERS_ARMOR = 475,
    TBC_ITEM_SET_AUGURS_REGALIA = 476,
    TBC_ITEM_SET_PREDATORS_ARMOR = 477,
    TBC_ITEM_SET_MADCAPS_OUTFIT = 478,
    TBC_ITEM_SET_HARUSPEXS_GARB = 479,
    TBC_ITEM_SET_CONFESSORS_RAIMENT = 480,
    TBC_ITEM_SET_DEMONIACS_THREADS = 481,
    TBC_ITEM_SET_ILLUSIONISTS_ATTIRE = 482,
    TBC_ITEM_SET_THE_DEFILERS_DETERMINATION = 483,
    TBC_ITEM_SET_THE_DEFILERS_FORTITUDE = 484,
    TBC_ITEM_SET_THE_DEFILERS_INTENT = 485,
    TBC_ITEM_SET_THE_DEFILERS_PURPOSE = 486,
    TBC_ITEM_SET_THE_DEFILERS_RESOLUTION = 487,
    TBC_ITEM_SET_THE_DEFILERS_WILL = 488,
    TBC_ITEM_SET_BLACK_DRAGON_MAIL = 489,
    TBC_ITEM_SET_GREEN_DRAGON_MAIL = 490,
    TBC_ITEM_SET_BLUE_DRAGON_MAIL = 491,
    TBC_ITEM_SET_TWILIGHT_TRAPPINGS = 492,
    TBC_ITEM_SET_GENESIS_RAIMENT = 493,
    TBC_ITEM_SET_SYMBOLS_OF_UNENDING_LIFE = 494,
    TBC_ITEM_SET_BATTLEGEAR_OF_UNYIELDING_STRENGTH = 495,
    TBC_ITEM_SET_CONQUERORS_BATTLEGEAR = 496,
    TBC_ITEM_SET_DEATHDEALERS_EMBRACE = 497,
    TBC_ITEM_SET_EMBLEMS_OF_VEILED_SHADOWS = 498,
    TBC_ITEM_SET_DOOMCALLERS_ATTIRE = 499,
    TBC_ITEM_SET_IMPLEMENTS_OF_UNSPOKEN_NAMES = 500,
    TBC_ITEM_SET_STORMCALLERS_GARB = 501,
    TBC_ITEM_SET_GIFT_OF_THE_GATHERING_STORM = 502,
    TBC_ITEM_SET_ENIGMA_VESTMENTS = 503,
    TBC_ITEM_SET_TRAPPINGS_OF_VAULTED_SECRETS = 504,
    TBC_ITEM_SET_AVENGERS_BATTLEGEAR = 505,
    TBC_ITEM_SET_BATTLEGEAR_OF_ETERNAL_JUSTICE = 506,
    TBC_ITEM_SET_GARMENTS_OF_THE_ORACLE = 507,
    TBC_ITEM_SET_FINERY_OF_INFINITE_WISDOM = 508,
    TBC_ITEM_SET_STRIKERS_GARB = 509,
    TBC_ITEM_SET_TRAPPINGS_OF_THE_UNSEEN_PATH = 510,
    TBC_ITEM_SET_BATTLEGEAR_OF_HEROISM = 511,
    TBC_ITEM_SET_DARKMANTLE_ARMOR = 512,
    TBC_ITEM_SET_FERALHEART_RAIMENT = 513,
    TBC_ITEM_SET_VESTMENTS_OF_THE_VIRTUOUS = 514,
    TBC_ITEM_SET_BEASTMASTER_ARMOR = 515,
    TBC_ITEM_SET_SOULFORGE_ARMOR = 516,
    TBC_ITEM_SET_SORCERERS_REGALIA = 517,
    TBC_ITEM_SET_DEATHMIST_RAIMENT = 518,
    TBC_ITEM_SET_THE_FIVE_THUNDERS = 519,
    TBC_ITEM_SET_IRONWEAVE_BATTLESUIT = 520,
    TBC_ITEM_SET_DREAMWALKER_RAIMENT = 521,
    TBC_ITEM_SET_CHAMPIONS_GUARD = 522,
    TBC_ITEM_SET_DREADNAUGHTS_BATTLEGEAR = 523,
    TBC_ITEM_SET_BONESCYTHE_ARMOR = 524,
    TBC_ITEM_SET_VESTMENTS_OF_FAITH = 525,
    TBC_ITEM_SET_FROSTFIRE_REGALIA = 526,
    TBC_ITEM_SET_THE_EARTHSHATTERER = 527,
    TBC_ITEM_SET_REDEMPTION_ARMOR = 528,
    TBC_ITEM_SET_PLAGUEHEART_RAIMENT = 529,
    TBC_ITEM_SET_CRYPTSTALKER_ARMOR = 530,
    TBC_ITEM_SET_BATTLEGEAR_OF_UNDEAD_SLAYING = 533,
    TBC_ITEM_SET_UNDEAD_SLAYERS_ARMOR = 534,
    TBC_ITEM_SET_GARB_OF_THE_UNDEAD_SLAYER = 535,
    TBC_ITEM_SET_REGALIA_OF_UNDEAD_CLEANSING = 536,
    TBC_ITEM_SET_CHAMPIONS_BATTLEARMOR = 537,
    TBC_ITEM_SET_CHAMPIONS_STORMCALLER = 538,
    TBC_ITEM_SET_CHAMPIONS_REFUGE = 539,
    TBC_ITEM_SET_CHAMPIONS_INVESTITURE = 540,
    TBC_ITEM_SET_CHAMPIONS_DREADGEAR = 541,
    TBC_ITEM_SET_CHAMPIONS_ARCANUM = 542,
    TBC_ITEM_SET_CHAMPIONS_PURSUANCE = 543,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_REDOUBT = 544,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_BATTLEARMOR = 545,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_ARCANUM = 546,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_DREADGEAR = 547,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_GUARD = 548,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_INVESTITURE = 549,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_PURSUANCE = 550,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_REFUGE = 551,
    TBC_ITEM_SET_WRATH_OF_SPELLFIRE = 552,
    TBC_ITEM_SET_SHADOWS_EMBRACE = 553,
    TBC_ITEM_SET_PRIMAL_MOONCLOTH = 554,
    TBC_ITEM_SET_NETHERWEAVE_VESTMENTS = 555,
    TBC_ITEM_SET_IMBUED_NETHERWEAVE = 556,
    TBC_ITEM_SET_SOULCLOTH_EMBRACE = 557,
    TBC_ITEM_SET_ARCANOWEAVE_VESTMENTS = 558,
    TBC_ITEM_SET_SPELLSTRIKE_INFUSION = 559,
    TBC_ITEM_SET_FEL_IRON_PLATE = 560,
    TBC_ITEM_SET_FEL_IRON_CHAIN = 561,
    TBC_ITEM_SET_ADAMANTITE_BATTLEGEAR = 562,
    TBC_ITEM_SET_ENCHANTED_ADAMANTITE_ARMOR = 563,
    TBC_ITEM_SET_FLAME_GUARD = 564,
    TBC_ITEM_SET_KHORIUM_WARD = 565,
    TBC_ITEM_SET_BURNING_RAGE = 566,
    TBC_ITEM_SET_GLADIATORS_BATTLEGEAR = 567,
    TBC_ITEM_SET_GLADIATORS_DREADGEAR = 568,
    TBC_ITEM_SET_FAITH_IN_FELSTEEL = 569,
    TBC_ITEM_SET_THE_UNYIELDING = 570,
    TBC_ITEM_SET_WHITEMEND_WISDOM = 571,
    TBC_ITEM_SET_BATTLECAST_GARB = 572,
    TBC_ITEM_SET_FEL_SKIN = 573,
    TBC_ITEM_SET_STRENGTH_OF_THE_CLEFTHOOF = 574,
    TBC_ITEM_SET_FELSTALKER_ARMOR = 575,
    TBC_ITEM_SET_FURY_OF_THE_NETHER = 576,
    TBC_ITEM_SET_GLADIATORS_VESTMENTS = 577,
    TBC_ITEM_SET_GLADIATORS_EARTHSHAKER = 578,
    TBC_ITEM_SET_GLADIATORS_REGALIA = 579,
    TBC_ITEM_SET_GLADIATORS_THUNDERFIST = 580,
    TBC_ITEM_SET_GLADIATORS_RAIMENT = 581,
    TBC_ITEM_SET_GLADIATORS_AEGIS = 582,
    TBC_ITEM_SET_GLADIATORS_VINDICATION = 583,
    TBC_ITEM_SET_GLADIATORS_SANCTUARY = 584,
    TBC_ITEM_SET_GLADIATORS_WILDHIDE = 585,
    TBC_ITEM_SET_GLADIATORS_PURSUIT = 586,
    TBC_ITEM_SET_HIGH_WARLORDS_AEGIS = 587,
    TBC_ITEM_SET_HIGH_WARLORDS_BATTLEGEAR = 588,
    TBC_ITEM_SET_GRAND_MARSHALS_AEGIS = 589,
    TBC_ITEM_SET_GRAND_MARSHALS_BATTLEGEAR = 590,
    TBC_ITEM_SET_GRAND_MARSHALS_DREADGEAR = 591,
    TBC_ITEM_SET_HIGH_WARLORDS_DREADGEAR = 592,
    TBC_ITEM_SET_GRAND_MARSHALS_EARTHSHAKER = 593,
    TBC_ITEM_SET_HIGH_WARLORDS_EARTHSHAKER = 594,
    TBC_ITEM_SET_GRAND_MARSHALS_PURSUIT = 595,
    TBC_ITEM_SET_HIGH_WARLORDS_PURSUIT = 596,
    TBC_ITEM_SET_GRAND_MARSHALS_RAIMENT = 597,
    TBC_ITEM_SET_HIGH_WARLORDS_RAIMENT = 598,
    TBC_ITEM_SET_GRAND_MARSHALS_REGALIA = 599,
    TBC_ITEM_SET_HIGH_WARLORDS_REGALIA = 600,
    TBC_ITEM_SET_GRAND_MARSHALS_SANCTUARY = 601,
    TBC_ITEM_SET_HIGH_WARLORDS_SANCTUARY = 602,
    TBC_ITEM_SET_GRAND_MARSHALS_THUNDERFIST = 603,
    TBC_ITEM_SET_HIGH_WARLORDS_THUNDERFIST = 604,
    TBC_ITEM_SET_GRAND_MARSHALS_VESTMENTS = 605,
    TBC_ITEM_SET_HIGH_WARLORDS_VESTMENTS = 606,
    TBC_ITEM_SET_GRAND_MARSHALS_VINDICATION = 607,
    TBC_ITEM_SET_HIGH_WARLORDS_VINDICATION = 608,
    TBC_ITEM_SET_GRAND_MARSHALS_WILDHIDE = 609,
    TBC_ITEM_SET_HIGH_WARLORDS_WILDHIDE = 610,
    TBC_ITEM_SET_FELSCALE_ARMOR = 611,
    TBC_ITEM_SET_SCALED_DRAENIC_ARMOR = 612,
    TBC_ITEM_SET_THICK_DRAENIC_ARMOR = 613,
    TBC_ITEM_SET_WILD_DRAENISH_ARMOR = 614,
    TBC_ITEM_SET_GLADIATORS_FELSHROUD = 615,
    TBC_ITEM_SET_NETHERSCALE_ARMOR = 616,
    TBC_ITEM_SET_NETHERSTRIKE_ARMOR = 617,
    TBC_ITEM_SET_WINDHAWK_ARMOR = 618,
    TBC_ITEM_SET_PRIMAL_INTENT = 619,
    TBC_ITEM_SET_ASSASSINATION_ARMOR = 620,
    TBC_ITEM_SET_NETHERBLADE = 621,
    TBC_ITEM_SET_DEATHMANTLE = 622,
    TBC_ITEM_SET_RIGHTEOUS_ARMOR = 623,
    TBC_ITEM_SET_JUSTICAR_RAIMENT = 624,
    TBC_ITEM_SET_JUSTICAR_ARMOR = 625,
    TBC_ITEM_SET_JUSTICAR_BATTLEGEAR = 626,
    TBC_ITEM_SET_CRYSTALFORGE_RAIMENT = 627,
    TBC_ITEM_SET_CRYSTALFORGE_ARMOR = 628,
    TBC_ITEM_SET_CRYSTALFORGE_BATTLEGEAR = 629,
    TBC_ITEM_SET_TIDEFURY_RAIMENT = 630,
    TBC_ITEM_SET_CYCLONE_RAIMENT = 631,
    TBC_ITEM_SET_CYCLONE_REGALIA = 632,
    TBC_ITEM_SET_CYCLONE_HARNESS = 633,
    TBC_ITEM_SET_CATACLYSM_RAIMENT = 634,
    TBC_ITEM_SET_CATACLYSM_REGALIA = 635,
    TBC_ITEM_SET_CATACLYSM_HARNESS = 636,
    TBC_ITEM_SET_MOONGLADE_RAIMENT = 637,
    TBC_ITEM_SET_MALORNE_RAIMENT = 638,
    TBC_ITEM_SET_MALORNE_REGALIA = 639,
    TBC_ITEM_SET_MALORNE_HARNESS = 640,
    TBC_ITEM_SET_NORDRASSIL_HARNESS = 641,
    TBC_ITEM_SET_NORDRASSIL_RAIMENT = 642,
    TBC_ITEM_SET_NORDRASSIL_REGALIA = 643,
    TBC_ITEM_SET_OBLIVION_RAIMENT = 644,
    TBC_ITEM_SET_VOIDHEART_RAIMENT = 645,
    TBC_ITEM_SET_CORRUPTOR_RAIMENT = 646,
    TBC_ITEM_SET_INCANTERS_REGALIA = 647,
    TBC_ITEM_SET_ALDOR_REGALIA = 648,
    TBC_ITEM_SET_TIRISFAL_REGALIA = 649,
    TBC_ITEM_SET_BEAST_LORD_ARMOR = 650,
    TBC_ITEM_SET_DEMON_STALKER_ARMOR = 651,
    TBC_ITEM_SET_RIFT_STALKER_ARMOR = 652,
    TBC_ITEM_SET_BOLD_ARMOR = 653,
    TBC_ITEM_SET_WARBRINGER_ARMOR = 654,
    TBC_ITEM_SET_WARBRINGER_BATTLEGEAR = 655,
    TBC_ITEM_SET_DESTROYER_ARMOR = 656,
    TBC_ITEM_SET_DESTROYER_BATTLEGEAR = 657,
    TBC_ITEM_SET_MANA_ETCHED_REGALIA = 658,
    TBC_ITEM_SET_WASTEWALKER_ARMOR = 659,
    TBC_ITEM_SET_DESOLATION_BATTLEGEAR = 660,
    TBC_ITEM_SET_DOOMPLATE_BATTLEGEAR = 661,
    TBC_ITEM_SET_HALLOWED_RAIMENT = 662,
    TBC_ITEM_SET_INCARNATE_RAIMENT = 663,
    TBC_ITEM_SET_INCARNATE_REGALIA = 664,
    TBC_ITEM_SET_AVATAR_RAIMENT = 665,
    TBC_ITEM_SET_AVATAR_REGALIA = 666,
    TBC_ITEM_SET_THE_TWIN_STARS = 667,
    TBC_ITEM_SET_SLAYERS_ARMOR = 668,
    TBC_ITEM_SET_GRONNSTALKERS_ARMOR = 669,
    TBC_ITEM_SET_MALEFIC_RAIMENT = 670,
    TBC_ITEM_SET_TEMPEST_REGALIA = 671,
    TBC_ITEM_SET_ONSLAUGHT_BATTLEGEAR = 672,
    TBC_ITEM_SET_ONSLAUGHT_ARMOR = 673,
    TBC_ITEM_SET_ABSOLUTION_REGALIA = 674,
    TBC_ITEM_SET_VESTMENTS_OF_ABSOLUTION = 675,
    TBC_ITEM_SET_THUNDERHEART_HARNESS = 676,
    TBC_ITEM_SET_THUNDERHEART_REGALIA = 677,
    TBC_ITEM_SET_THUNDERHEART_RAIMENT = 678,
    TBC_ITEM_SET_LIGHTBRINGER_ARMOR = 679,
    TBC_ITEM_SET_LIGHTBRINGER_BATTLEGEAR = 680,
    TBC_ITEM_SET_LIGHTBRINGER_RAIMENT = 681,
    TBC_ITEM_SET_SKYSHATTER_HARNESS = 682,
    TBC_ITEM_SET_SKYSHATTER_RAIMENT = 683,
    TBC_ITEM_SET_SKYSHATTER_REGALIA = 684,
    TBC_ITEM_SET_GLADIATORS_REFUGE = 685,
    TBC_ITEM_SET_GLADIATORS_WARTIDE = 686,
    TBC_ITEM_SET_GLADIATORS_INVESTITURE = 687,
    TBC_ITEM_SET_GRAND_MARSHALS_REFUGE = 688,
    TBC_ITEM_SET_HIGH_WARLORDS_REFUGE = 689,
    TBC_ITEM_SET_GLADIATORS_REDEMPTION = 690,
    TBC_ITEM_SET_GRAND_MARSHALS_INVESTITURE = 691,
    TBC_ITEM_SET_HIGH_WARLORDS_INVESTITURE = 692,
    TBC_ITEM_SET_GRAND_MARSHALS_REDEMPTION = 693,
    TBC_ITEM_SET_HIGH_WARLORDS_REDEMPTION = 694,
    TBC_ITEM_SET_GRAND_MARSHALS_WARTIDE = 695,
    TBC_ITEM_SET_HIGH_WARLORDS_WARTIDE = 696,
    TBC_ITEM_SET_CHAMPIONS_REDOUBT = 697,
    TBC_ITEM_SET_WARLORDS_AEGIS = 698,
    TBC_ITEM_SET_THE_TWIN_BLADES_OF_AZZINOTH = 699,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_AEGIS = 700,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_BATTLEGEAR = 701,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_DREADGEAR = 702,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_EARTHSHAKER = 703,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_FELSHROUD = 704,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_INVESTITURE = 705,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_PURSUIT = 706,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_RAIMENT = 707,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_REDEMPTION = 708,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_REFUGE = 709,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_REGALIA = 710,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_SANCTUARY = 711,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_THUNDERFIST = 712,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_VESTMENTS = 713,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_VINDICATION = 714,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_WARTIDE = 715,
    TBC_ITEM_SET_MERCILESS_GLADIATORS_WILDHIDE = 716,
    TBC_ITEM_SET_FIELD_MARSHALS_EARTHSHAKER = 717,
    TBC_ITEM_SET_LIEUTENANT_COMMANDERS_EARTHSHAKER = 718,
    TBC_ITEM_SET_THE_FISTS_OF_FURY = 719,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_REFUGE = 720,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_SANCTUARY = 721,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_WILDHIDE = 722,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_PURSUIT = 723,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_REGALIA = 724,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_REDEMPTION = 725,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_VINDICATION = 726,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_AEGIS = 727,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_INVESTITURE = 728,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_RAIMENT = 729,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_VESTMENTS = 730,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_WARTIDE = 731,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_EARTHSHAKER = 732,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_THUNDERFIST = 733,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_DREADGEAR = 734,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_FELSHROUD = 735,
    TBC_ITEM_SET_VENGEFUL_GLADIATORS_BATTLEGEAR = 736,
    TBC_ITEM_SET_LATROS_FLURRY = 737,
    TBC_ITEM_SET_DREADWEAVE_BATTLEGEAR = 738,
    TBC_ITEM_SET_MOONCLOTH_BATTLEGEAR = 739,
    TBC_ITEM_SET_SATIN_BATTLEGEAR = 740,
    TBC_ITEM_SET_EVOKERS_SILK_BATTLEGEAR = 741,
    TBC_ITEM_SET_DRAGONHIDE_BATTLEGEAR = 742,
    TBC_ITEM_SET_WYRMHIDE_BATTLEGEAR = 743,
    TBC_ITEM_SET_KODOHIDE_BATTLEGEAR = 744,
    TBC_ITEM_SET_OPPORTUNISTS_BATTLEGEAR = 745,
    TBC_ITEM_SET_SEERS_MAIL_BATTLEGEAR = 746,
    TBC_ITEM_SET_SEERS_RINGMAIL_BATTLEGEAR = 747,
    TBC_ITEM_SET_SEERS_LINKED_BATTLEGEAR = 748,
    TBC_ITEM_SET_STALKERS_CHAIN_BATTLEGEAR = 749,
    TBC_ITEM_SET_SAVAGE_PLATE_BATTLEGEAR = 750,
    TBC_ITEM_SET_CRUSADERS_ORNAMENTED_BATTLEGEAR = 751,
    TBC_ITEM_SET_CRUSADERS_SCALED_BATTLEGEAR = 752
} tbc_ItemSet;

typedef enum {
    TBC_ITEM_SLOT_HEAD = 0,
    TBC_ITEM_SLOT_NECK = 1,
    TBC_ITEM_SLOT_SHOULDERS = 2,
    TBC_ITEM_SLOT_SHIRT = 3,
    TBC_ITEM_SLOT_CHEST = 4,
    TBC_ITEM_SLOT_WAIST = 5,
    TBC_ITEM_SLOT_LEGS = 6,
    TBC_ITEM_SLOT_BOOTS = 7,
    TBC_ITEM_SLOT_WRIST = 8,
    TBC_ITEM_SLOT_HANDS = 9,
    TBC_ITEM_SLOT_RING1 = 10,
    TBC_ITEM_SLOT_RING2 = 11,
    TBC_ITEM_SLOT_TRINKET1 = 12,
    TBC_ITEM_SLOT_TRINKET2 = 13,
    TBC_ITEM_SLOT_BACK = 14,
    TBC_ITEM_SLOT_MAIN_HAND = 15,
    TBC_ITEM_SLOT_OFF_HAND = 16,
    TBC_ITEM_SLOT_RANGED_OR_RELIC = 17,
    TBC_ITEM_SLOT_TABARD = 18,
    TBC_ITEM_SLOT_BAG1 = 19,
    TBC_ITEM_SLOT_BAG2 = 20,
    TBC_ITEM_SLOT_BAG3 = 21,
    TBC_ITEM_SLOT_BAG4 = 22,
    TBC_ITEM_SLOT_INVENTORY_0 = 23,
    TBC_ITEM_SLOT_INVENTORY_1 = 24,
    TBC_ITEM_SLOT_INVENTORY_2 = 25,
    TBC_ITEM_SLOT_INVENTORY_3 = 26,
    TBC_ITEM_SLOT_INVENTORY_4 = 27,
    TBC_ITEM_SLOT_INVENTORY_5 = 28,
    TBC_ITEM_SLOT_INVENTORY_6 = 29,
    TBC_ITEM_SLOT_INVENTORY_7 = 30,
    TBC_ITEM_SLOT_INVENTORY_8 = 31,
    TBC_ITEM_SLOT_INVENTORY_9 = 32,
    TBC_ITEM_SLOT_INVENTORY_10 = 33,
    TBC_ITEM_SLOT_INVENTORY_11 = 34,
    TBC_ITEM_SLOT_INVENTORY_12 = 35,
    TBC_ITEM_SLOT_INVENTORY_13 = 36,
    TBC_ITEM_SLOT_INVENTORY_14 = 37,
    TBC_ITEM_SLOT_INVENTORY_15 = 38,
    TBC_ITEM_SLOT_BANK_1 = 39,
    TBC_ITEM_SLOT_BANK_2 = 40,
    TBC_ITEM_SLOT_BANK_3 = 41,
    TBC_ITEM_SLOT_BANK_4 = 42,
    TBC_ITEM_SLOT_BANK_5 = 43,
    TBC_ITEM_SLOT_BANK_6 = 44,
    TBC_ITEM_SLOT_BANK_7 = 45,
    TBC_ITEM_SLOT_BANK_8 = 46,
    TBC_ITEM_SLOT_BANK_9 = 47,
    TBC_ITEM_SLOT_BANK_10 = 48,
    TBC_ITEM_SLOT_BANK_11 = 49,
    TBC_ITEM_SLOT_BANK_12 = 50,
    TBC_ITEM_SLOT_BANK_13 = 51,
    TBC_ITEM_SLOT_BANK_14 = 52,
    TBC_ITEM_SLOT_BANK_15 = 53,
    TBC_ITEM_SLOT_BANK_16 = 54,
    TBC_ITEM_SLOT_BANK_17 = 55,
    TBC_ITEM_SLOT_BANK_18 = 56,
    TBC_ITEM_SLOT_BANK_19 = 57,
    TBC_ITEM_SLOT_BANK_20 = 58,
    TBC_ITEM_SLOT_BANK_21 = 59,
    TBC_ITEM_SLOT_BANK_22 = 60,
    TBC_ITEM_SLOT_BANK_23 = 61,
    TBC_ITEM_SLOT_BANK_24 = 62,
    TBC_ITEM_SLOT_BANK_25 = 63,
    TBC_ITEM_SLOT_BANK_26 = 64,
    TBC_ITEM_SLOT_BANK_27 = 65,
    TBC_ITEM_SLOT_BANK_28 = 66,
    TBC_ITEM_SLOT_BANK_BAG_SLOT_1 = 67,
    TBC_ITEM_SLOT_BANK_BAG_SLOT_2 = 68,
    TBC_ITEM_SLOT_BANK_BAG_SLOT_3 = 69,
    TBC_ITEM_SLOT_BANK_BAG_SLOT_4 = 70,
    TBC_ITEM_SLOT_BANK_BAG_SLOT_5 = 71,
    TBC_ITEM_SLOT_BANK_BAG_SLOT_6 = 72,
    TBC_ITEM_SLOT_BANK_BAG_SLOT_7 = 73,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_1 = 74,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_2 = 75,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_3 = 76,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_4 = 77,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_5 = 78,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_6 = 79,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_7 = 80,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_8 = 81,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_9 = 82,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_10 = 83,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_11 = 84,
    TBC_ITEM_SLOT_VENDOR_BUYBACK_12 = 85,
    TBC_ITEM_SLOT_KEYRING_1 = 86,
    TBC_ITEM_SLOT_KEYRING_2 = 87,
    TBC_ITEM_SLOT_KEYRING_3 = 88,
    TBC_ITEM_SLOT_KEYRING_4 = 89,
    TBC_ITEM_SLOT_KEYRING_5 = 90,
    TBC_ITEM_SLOT_KEYRING_6 = 91,
    TBC_ITEM_SLOT_KEYRING_7 = 92,
    TBC_ITEM_SLOT_KEYRING_8 = 93,
    TBC_ITEM_SLOT_KEYRING_9 = 94,
    TBC_ITEM_SLOT_KEYRING_10 = 95,
    TBC_ITEM_SLOT_KEYRING_11 = 96,
    TBC_ITEM_SLOT_KEYRING_12 = 97,
    TBC_ITEM_SLOT_KEYRING_13 = 98,
    TBC_ITEM_SLOT_KEYRING_14 = 99,
    TBC_ITEM_SLOT_KEYRING_15 = 100,
    TBC_ITEM_SLOT_KEYRING_16 = 101,
    TBC_ITEM_SLOT_KEYRING_17 = 102,
    TBC_ITEM_SLOT_KEYRING_18 = 103,
    TBC_ITEM_SLOT_KEYRING_19 = 104,
    TBC_ITEM_SLOT_KEYRING_20 = 105,
    TBC_ITEM_SLOT_KEYRING_21 = 106,
    TBC_ITEM_SLOT_KEYRING_22 = 107,
    TBC_ITEM_SLOT_KEYRING_23 = 108,
    TBC_ITEM_SLOT_KEYRING_24 = 109,
    TBC_ITEM_SLOT_KEYRING_25 = 110,
    TBC_ITEM_SLOT_KEYRING_26 = 111,
    TBC_ITEM_SLOT_KEYRING_27 = 112,
    TBC_ITEM_SLOT_KEYRING_28 = 113,
    TBC_ITEM_SLOT_KEYRING_29 = 114,
    TBC_ITEM_SLOT_KEYRING_30 = 115,
    TBC_ITEM_SLOT_KEYRING_31 = 116,
    TBC_ITEM_SLOT_KEYRING_32 = 117,
    TBC_ITEM_SLOT_VANITY_PET_1 = 118,
    TBC_ITEM_SLOT_VANITY_PET_2 = 119,
    TBC_ITEM_SLOT_VANITY_PET_3 = 120,
    TBC_ITEM_SLOT_VANITY_PET_4 = 121,
    TBC_ITEM_SLOT_VANITY_PET_5 = 122,
    TBC_ITEM_SLOT_VANITY_PET_6 = 123,
    TBC_ITEM_SLOT_VANITY_PET_7 = 124,
    TBC_ITEM_SLOT_VANITY_PET_8 = 125,
    TBC_ITEM_SLOT_VANITY_PET_9 = 126,
    TBC_ITEM_SLOT_VANITY_PET_10 = 127,
    TBC_ITEM_SLOT_VANITY_PET_11 = 128,
    TBC_ITEM_SLOT_VANITY_PET_12 = 129,
    TBC_ITEM_SLOT_VANITY_PET_13 = 130,
    TBC_ITEM_SLOT_VANITY_PET_14 = 131,
    TBC_ITEM_SLOT_VANITY_PET_15 = 132,
    TBC_ITEM_SLOT_VANITY_PET_16 = 133,
    TBC_ITEM_SLOT_VANITY_PET_17 = 134,
    TBC_ITEM_SLOT_VANITY_PET_18 = 135
} tbc_ItemSlot;

typedef enum {
    TBC_JOIN_ARENA_TYPE_TWO_VS_TWO = 0,
    TBC_JOIN_ARENA_TYPE_THREE_VS_THREE = 1,
    TBC_JOIN_ARENA_TYPE_FIVE_VS_FIVE = 2
} tbc_JoinArenaType;

typedef enum {
    TBC_LANGUAGE_UNIVERSAL = 0,
    TBC_LANGUAGE_ORCISH = 1,
    TBC_LANGUAGE_DARNASSIAN = 2,
    TBC_LANGUAGE_TAURAHE = 3,
    TBC_LANGUAGE_DWARVISH = 6,
    TBC_LANGUAGE_COMMON = 7,
    TBC_LANGUAGE_DEMONIC = 8,
    TBC_LANGUAGE_TITAN = 9,
    TBC_LANGUAGE_THALASSIAN = 10,
    TBC_LANGUAGE_DRACONIC = 11,
    TBC_LANGUAGE_KALIMAG = 12,
    TBC_LANGUAGE_GNOMISH = 13,
    TBC_LANGUAGE_TROLL = 14,
    TBC_LANGUAGE_GUTTERSPEAK = 33,
    TBC_LANGUAGE_DRAENEI = 35,
    TBC_LANGUAGE_ZOMBIE = 36,
    TBC_LANGUAGE_GNOMISH_BINARY = 37,
    TBC_LANGUAGE_GOBLIN_BINARY = 38
} tbc_Language;

typedef enum {
    TBC_LFG_MODE_LOOKING_FOR_GROUP = 0,
    TBC_LFG_MODE_LOOKING_FOR_MORE = 1
} tbc_LfgMode;

typedef enum {
    TBC_LFG_TYPE_NONE = 0,
    TBC_LFG_TYPE_DUNGEON = 1,
    TBC_LFG_TYPE_RAID = 2,
    TBC_LFG_TYPE_QUEST = 3,
    TBC_LFG_TYPE_ZONE = 4,
    TBC_LFG_TYPE_HEROIC_DUNGEON = 5
} tbc_LfgType;

typedef enum {
    TBC_LFG_UPDATE_LOOKING_FOR_MORE_NOT_LOOKING_FOR_MORE = 0,
    TBC_LFG_UPDATE_LOOKING_FOR_MORE_LOOKING_FOR_MORE = 1
} tbc_LfgUpdateLookingForMore;

typedef enum {
    TBC_LOG_FORMAT_DEFAULT = 0,
    TBC_LOG_FORMAT_DEBUG = 1
} tbc_LogFormat;

typedef enum {
    TBC_LOGOUT_RESULT_SUCCESS = 0,
    TBC_LOGOUT_RESULT_FAILURE_IN_COMBAT = 1,
    TBC_LOGOUT_RESULT_FAILURE_FROZEN_BY_GM = 2,
    TBC_LOGOUT_RESULT_FAILURE_JUMPING_OR_FALLING = 3
} tbc_LogoutResult;

typedef enum {
    TBC_LOGOUT_SPEED_DELAYED = 0,
    TBC_LOGOUT_SPEED_INSTANT = 1
} tbc_LogoutSpeed;

typedef enum {
    TBC_LOOT_METHOD_ERROR = 0,
    TBC_LOOT_METHOD_CORPSE = 1,
    TBC_LOOT_METHOD_PICKPOCKETING = 2,
    TBC_LOOT_METHOD_FISHING = 3,
    TBC_LOOT_METHOD_DISENCHANTING = 4,
    TBC_LOOT_METHOD_SKINNING = 6,
    TBC_LOOT_METHOD_FISHINGHOLE = 20,
    TBC_LOOT_METHOD_FISHING_FAIL = 21,
    TBC_LOOT_METHOD_INSIGNIA = 22
} tbc_LootMethod;

typedef enum {
    TBC_LOOT_METHOD_ERROR_DIDNT_KILL = 0,
    TBC_LOOT_METHOD_ERROR_TOO_FAR = 4,
    TBC_LOOT_METHOD_ERROR_BAD_FACING = 5,
    TBC_LOOT_METHOD_ERROR_LOCKED = 6,
    TBC_LOOT_METHOD_ERROR_NOTSTANDING = 8,
    TBC_LOOT_METHOD_ERROR_STUNNED = 9,
    TBC_LOOT_METHOD_ERROR_PLAYER_NOT_FOUND = 10,
    TBC_LOOT_METHOD_ERROR_PLAY_TIME_EXCEEDED = 11,
    TBC_LOOT_METHOD_ERROR_MASTER_INV_FULL = 12,
    TBC_LOOT_METHOD_ERROR_MASTER_UNIQUE_ITEM = 13,
    TBC_LOOT_METHOD_ERROR_MASTER_OTHER = 14,
    TBC_LOOT_METHOD_ERROR_ALREADY_PICKPOCKETED = 15,
    TBC_LOOT_METHOD_ERROR_NOT_WHILE_SHAPESHIFTED = 16
} tbc_LootMethodError;

typedef enum {
    TBC_LOOT_SLOT_TYPE_TYPE_ALLOW_LOOT = 0,
    TBC_LOOT_SLOT_TYPE_TYPE_ROLL_ONGOING = 1,
    TBC_LOOT_SLOT_TYPE_TYPE_MASTER = 2,
    TBC_LOOT_SLOT_TYPE_TYPE_LOCKED = 3,
    TBC_LOOT_SLOT_TYPE_TYPE_OWNER = 4
} tbc_LootSlotType;

typedef enum {
    TBC_MAIL_ACTION_SEND = 0,
    TBC_MAIL_ACTION_MONEY_TAKEN = 1,
    TBC_MAIL_ACTION_ITEM_TAKEN = 2,
    TBC_MAIL_ACTION_RETURNED_TO_SENDER = 3,
    TBC_MAIL_ACTION_DELETED = 4,
    TBC_MAIL_ACTION_MADE_PERMANENT = 5
} tbc_MailAction;

typedef enum {
    TBC_MAIL_MESSAGE_TYPE_NORMAL = 0,
    TBC_MAIL_MESSAGE_TYPE_AUCTION = 2,
    TBC_MAIL_MESSAGE_TYPE_CREATURE = 3,
    TBC_MAIL_MESSAGE_TYPE_GAMEOBJECT = 4,
    TBC_MAIL_MESSAGE_TYPE_ITEM = 5
} tbc_MailMessageType;

typedef enum {
    TBC_MAIL_RESULT_OK = 0,
    TBC_MAIL_RESULT_ERR_EQUIP_ERROR = 1,
    TBC_MAIL_RESULT_ERR_CANNOT_SEND_TO_SELF = 2,
    TBC_MAIL_RESULT_ERR_NOT_ENOUGH_MONEY = 3,
    TBC_MAIL_RESULT_ERR_RECIPIENT_NOT_FOUND = 4,
    TBC_MAIL_RESULT_ERR_NOT_YOUR_TEAM = 5,
    TBC_MAIL_RESULT_ERR_INTERNAL_ERROR = 6,
    TBC_MAIL_RESULT_ERR_DISABLED_FOR_TRIAL_ACC = 14,
    TBC_MAIL_RESULT_ERR_RECIPIENT_CAP_REACHED = 15,
    TBC_MAIL_RESULT_ERR_CANT_SEND_WRAPPED_COD = 16,
    TBC_MAIL_RESULT_ERR_MAIL_AND_CHAT_SUSPENDED = 17,
    TBC_MAIL_RESULT_ERR_TOO_MANY_ATTACHMENTS = 18,
    TBC_MAIL_RESULT_ERR_MAIL_ATTACHMENT_INVALID = 19
} tbc_MailResult;

typedef enum {
    TBC_MAIL_RESULT_TWO_OK = 0,
    TBC_MAIL_RESULT_TWO_ERR_EQUIP_ERROR = 1,
    TBC_MAIL_RESULT_TWO_ERR_CANNOT_SEND_TO_SELF = 2,
    TBC_MAIL_RESULT_TWO_ERR_NOT_ENOUGH_MONEY = 3,
    TBC_MAIL_RESULT_TWO_ERR_RECIPIENT_NOT_FOUND = 4,
    TBC_MAIL_RESULT_TWO_ERR_NOT_YOUR_TEAM = 5,
    TBC_MAIL_RESULT_TWO_ERR_INTERNAL_ERROR = 6,
    TBC_MAIL_RESULT_TWO_ERR_DISABLED_FOR_TRIAL_ACC = 14,
    TBC_MAIL_RESULT_TWO_ERR_RECIPIENT_CAP_REACHED = 15,
    TBC_MAIL_RESULT_TWO_ERR_CANT_SEND_WRAPPED_COD = 16,
    TBC_MAIL_RESULT_TWO_ERR_MAIL_AND_CHAT_SUSPENDED = 17,
    TBC_MAIL_RESULT_TWO_ERR_TOO_MANY_ATTACHMENTS = 18,
    TBC_MAIL_RESULT_TWO_ERR_MAIL_ATTACHMENT_INVALID = 19
} tbc_MailResultTwo;

typedef enum {
    TBC_MAIL_TYPE_NORMAL = 0,
    TBC_MAIL_TYPE_AUCTION = 2,
    TBC_MAIL_TYPE_CREATURE = 3,
    TBC_MAIL_TYPE_GAMEOBJECT = 4,
    TBC_MAIL_TYPE_ITEM = 5
} tbc_MailType;

typedef enum {
    TBC_MAP_EASTERN_KINGDOMS = 0,
    TBC_MAP_KALIMDOR = 1,
    TBC_MAP_TESTING = 13,
    TBC_MAP_SCOTT_TEST = 25,
    TBC_MAP_CASH_TEST = 29,
    TBC_MAP_ALTERAC_VALLEY = 30,
    TBC_MAP_SHADOWFANG_KEEP = 33,
    TBC_MAP_STORMWIND_STOCKADE = 34,
    TBC_MAP_STORMWIND_PRISON = 35,
    TBC_MAP_DEADMINES = 36,
    TBC_MAP_AZSHARA_CRATER = 37,
    TBC_MAP_COLLINS_TEST = 42,
    TBC_MAP_WAILING_CAVERNS = 43,
    TBC_MAP_MONASTERY_UNUSED = 44,
    TBC_MAP_RAZORFEN_KRAUL = 47,
    TBC_MAP_BLACKFATHOM_DEEPS = 48,
    TBC_MAP_ULDAMAN = 70,
    TBC_MAP_GNOMEREGAN = 90,
    TBC_MAP_SUNKEN_TEMPLE = 109,
    TBC_MAP_RAZORFEN_DOWNS = 129,
    TBC_MAP_EMERALD_DREAM = 169,
    TBC_MAP_SCARLET_MONASTERY = 189,
    TBC_MAP_ZUL_FARRAK = 209,
    TBC_MAP_BLACKROCK_SPIRE = 229,
    TBC_MAP_BLACKROCK_DEPTHS = 230,
    TBC_MAP_ONYXIAS_LAIR = 249,
    TBC_MAP_OPENING_OF_THE_DARK_PORTAL = 269,
    TBC_MAP_SCHOLOMANCE = 289,
    TBC_MAP_ZUL_GURUB = 309,
    TBC_MAP_STRATHOLME = 329,
    TBC_MAP_MARAUDON = 349,
    TBC_MAP_DEEPRUN_TRAM = 369,
    TBC_MAP_RAGEFIRE_CHASM = 389,
    TBC_MAP_MOLTEN_CORE = 409,
    TBC_MAP_DIRE_MAUL = 429,
    TBC_MAP_ALLIANCE_PVP_BARRACKS = 449,
    TBC_MAP_HORDE_PVP_BARRACKS = 450,
    TBC_MAP_DEVELOPMENT_LAND = 451,
    TBC_MAP_BLACKWING_LAIR = 469,
    TBC_MAP_WARSONG_GULCH = 489,
    TBC_MAP_RUINS_OF_AHN_QIRAJ = 509,
    TBC_MAP_ARATHI_BASIN = 529,
    TBC_MAP_OUTLAND = 530,
    TBC_MAP_AHN_QIRAJ_TEMPLE = 531,
    TBC_MAP_KARAZHAN = 532,
    TBC_MAP_NAXXRAMAS = 533,
    TBC_MAP_THE_BATTLE_FOR_MOUNT_HYJAL = 534,
    TBC_MAP_HELLFIRE_CITADEL_THE_SHATTERED_HALLS = 540,
    TBC_MAP_HELLFIRE_CITADEL_THE_BLOOD_FURNACE = 542,
    TBC_MAP_HELLFIRE_CITADEL_RAMPARTS = 543,
    TBC_MAP_MAGTHERIDONS_LAIR = 544,
    TBC_MAP_COILFANG_THE_STEAMVAULT = 545,
    TBC_MAP_COILFANG_THE_UNDERBOG = 546,
    TBC_MAP_COILFANG_THE_SLAVE_PENS = 547,
    TBC_MAP_COILFANG_SERPENTSHRINE_CAVERN = 548,
    TBC_MAP_TEMPEST_KEEP = 550,
    TBC_MAP_TEMPEST_KEEP_THE_ARCATRAZ = 552,
    TBC_MAP_TEMPEST_KEEP_THE_BOTANICA = 553,
    TBC_MAP_TEMPEST_KEEP_THE_MECHANAR = 554,
    TBC_MAP_AUCHINDOUN_SHADOW_LABYRINTH = 555,
    TBC_MAP_AUCHINDOUN_SETHEKK_HALLS = 556,
    TBC_MAP_AUCHINDOUN_MANA_TOMBS = 557,
    TBC_MAP_AUCHINDOUN_AUCHENAI_CRYPTS = 558,
    TBC_MAP_NAGRAND_ARENA = 559,
    TBC_MAP_THE_ESCAPE_FROM_DURNHOLDE = 560,
    TBC_MAP_BLADES_EDGE_ARENA = 562,
    TBC_MAP_BLACK_TEMPLE = 564,
    TBC_MAP_GRUULS_LAIR = 565,
    TBC_MAP_EYE_OF_THE_STORM = 566,
    TBC_MAP_ZUL_AMAN = 568,
    TBC_MAP_RUINS_OF_LORDAERON = 572,
    TBC_MAP_THE_SUNWELL = 580,
    TBC_MAP_TRANSPORT_RUT_THERAN_TO_AUBERDINE = 582,
    TBC_MAP_TRANSPORT_MENETHIL_TO_THERAMORE = 584,
    TBC_MAP_MAGISTERS_TERRACE = 585,
    TBC_MAP_TRANSPORT_EXODAR_TO_AUBERDINE = 586,
    TBC_MAP_TRANSPORT_FEATHERMOON_FERRY = 587,
    TBC_MAP_TRANSPORT_MENETHIL_TO_AUBERDINE = 588,
    TBC_MAP_TRANSPORT_ORGRIMMAR_TO_GROM_GOL = 589,
    TBC_MAP_TRANSPORT_GROM_GOL_TO_UNDERCITY = 590,
    TBC_MAP_TRANSPORT_UNDERCITY_TO_ORGRIMMAR = 591,
    TBC_MAP_TRANSPORT_BOOTY_BAY_TO_RATCHET = 593,
    TBC_MAP_SUNWELL_FIX_UNUSED = 598
} tbc_Map;

typedef enum {
    TBC_MEETING_STONE_STATUS_LEAVE_QUEUE = 0,
    TBC_MEETING_STONE_STATUS_JOINED_QUEUE = 1,
    TBC_MEETING_STONE_STATUS_PARTY_MEMBER_LEFT_LFG = 2,
    TBC_MEETING_STONE_STATUS_PARTY_MEMBER_REMOVED_PARTY_REMOVED = 3,
    TBC_MEETING_STONE_STATUS_LOOKING_FOR_NEW_PARTY_IN_QUEUE = 4,
    TBC_MEETING_STONE_STATUS_NONE = 5
} tbc_MeetingStoneStatus;

typedef enum {
    TBC_MONSTER_MOVE_TYPE_NORMAL = 0,
    TBC_MONSTER_MOVE_TYPE_STOP = 1,
    TBC_MONSTER_MOVE_TYPE_FACING_SPOT = 2,
    TBC_MONSTER_MOVE_TYPE_FACING_TARGET = 3,
    TBC_MONSTER_MOVE_TYPE_FACING_ANGLE = 4
} tbc_MonsterMoveType;

typedef enum {
    TBC_MOUNT_RESULT_INVALID_MOUNTEE = 0,
    TBC_MOUNT_RESULT_TOO_FAR_AWAY = 1,
    TBC_MOUNT_RESULT_ALREADY_MOUNTED = 2,
    TBC_MOUNT_RESULT_NOT_MOUNTABLE = 3,
    TBC_MOUNT_RESULT_NOT_YOUR_PET = 4,
    TBC_MOUNT_RESULT_OTHER = 5,
    TBC_MOUNT_RESULT_LOOTING = 6,
    TBC_MOUNT_RESULT_RACE_CANT_MOUNT = 7,
    TBC_MOUNT_RESULT_SHAPESHIFTED = 8,
    TBC_MOUNT_RESULT_FORCED_DISMOUNT = 9,
    TBC_MOUNT_RESULT_OK = 10
} tbc_MountResult;

typedef enum {
    TBC_NEW_ITEM_CHAT_ALERT_DO_NOT_SHOW = 0,
    TBC_NEW_ITEM_CHAT_ALERT_SHOW = 1
} tbc_NewItemChatAlert;

typedef enum {
    TBC_NEW_ITEM_CREATION_TYPE_RECEIVED = 0,
    TBC_NEW_ITEM_CREATION_TYPE_CREATED = 1
} tbc_NewItemCreationType;

typedef enum {
    TBC_NEW_ITEM_SOURCE_LOOTED = 0,
    TBC_NEW_ITEM_SOURCE_FROM_NPC = 1
} tbc_NewItemSource;

typedef enum {
    TBC_OBJECT_TYPE_OBJECT = 0,
    TBC_OBJECT_TYPE_ITEM = 1,
    TBC_OBJECT_TYPE_CONTAINER = 2,
    TBC_OBJECT_TYPE_UNIT = 3,
    TBC_OBJECT_TYPE_PLAYER = 4,
    TBC_OBJECT_TYPE_GAME_OBJECT = 5,
    TBC_OBJECT_TYPE_DYNAMIC_OBJECT = 6,
    TBC_OBJECT_TYPE_CORPSE = 7
} tbc_ObjectType;

typedef enum {
    TBC_PAGE_TEXT_MATERIAL_NONE = 0,
    TBC_PAGE_TEXT_MATERIAL_PARCHMENT = 1,
    TBC_PAGE_TEXT_MATERIAL_STONE = 2,
    TBC_PAGE_TEXT_MATERIAL_MARBLE = 3,
    TBC_PAGE_TEXT_MATERIAL_SILVER = 4,
    TBC_PAGE_TEXT_MATERIAL_BRONZE = 5,
    TBC_PAGE_TEXT_MATERIAL_VALENTINE = 6,
    TBC_PAGE_TEXT_MATERIAL_ILLIDAN = 7
} tbc_PageTextMaterial;

typedef enum {
    TBC_PARTY_OPERATION_INVITE = 0,
    TBC_PARTY_OPERATION_LEAVE = 2
} tbc_PartyOperation;

typedef enum {
    TBC_PARTY_RESULT_SUCCESS = 0,
    TBC_PARTY_RESULT_BAD_PLAYER_NAME = 1,
    TBC_PARTY_RESULT_TARGET_NOT_IN_GROUP = 2,
    TBC_PARTY_RESULT_TARGET_NOT_IN_INSTANCE = 3,
    TBC_PARTY_RESULT_GROUP_FULL = 4,
    TBC_PARTY_RESULT_ALREADY_IN_GROUP = 5,
    TBC_PARTY_RESULT_NOT_IN_GROUP = 6,
    TBC_PARTY_RESULT_NOT_LEADER = 7,
    TBC_PARTY_RESULT_PLAYER_WRONG_FACTION = 8,
    TBC_PARTY_RESULT_IGNORING_YOU = 9,
    TBC_PARTY_RESULT_LFG_PENDING = 12,
    TBC_PARTY_RESULT_INVITE_RESTRICTED = 13
} tbc_PartyResult;

typedef enum {
    TBC_PARTY_ROLE_MAIN_TANK = 0,
    TBC_PARTY_ROLE_ASSISTANT = 1
} tbc_PartyRole;

typedef enum {
    TBC_PET_COMMAND_STATE_STAY = 0,
    TBC_PET_COMMAND_STATE_FOLLOW = 1,
    TBC_PET_COMMAND_STATE_ATTACK = 2,
    TBC_PET_COMMAND_STATE_DISMISS = 3
} tbc_PetCommandState;

typedef enum {
    TBC_PET_ENABLED_ENABLED = 8,
    TBC_PET_ENABLED_DISABLED = 0
} tbc_PetEnabled;

typedef enum {
    TBC_PET_FEEDBACK_PET_DEAD = 1,
    TBC_PET_FEEDBACK_NOTHING_TO_ATTACK = 2,
    TBC_PET_FEEDBACK_CANT_ATTACK_TARGET = 3,
    TBC_PET_FEEDBACK_NO_PATH_TO = 4
} tbc_PetFeedback;

typedef enum {
    TBC_PET_NAME_INVALID_REASON_INVALID = 1,
    TBC_PET_NAME_INVALID_REASON_NO_NAME = 2,
    TBC_PET_NAME_INVALID_REASON_TOO_SHORT = 3,
    TBC_PET_NAME_INVALID_REASON_TOO_LONG = 4,
    TBC_PET_NAME_INVALID_REASON_MIXED_LANGUAGES = 6,
    TBC_PET_NAME_INVALID_REASON_PROFANE = 7,
    TBC_PET_NAME_INVALID_REASON_RESERVED = 8,
    TBC_PET_NAME_INVALID_REASON_THREE_CONSECUTIVE = 11,
    TBC_PET_NAME_INVALID_REASON_INVALID_SPACE = 12,
    TBC_PET_NAME_INVALID_REASON_CONSECUTIVE_SPACES = 13,
    TBC_PET_NAME_INVALID_REASON_RUSSIAN_CONSECUTIVE_SILENT_CHARACTERS = 14,
    TBC_PET_NAME_INVALID_REASON_RUSSIAN_SILENT_CHARACTER_AT_BEGINNING_OR_END = 15,
    TBC_PET_NAME_INVALID_REASON_DECLENSION_DOESNT_MATCH_BASE_NAME = 16
} tbc_PetNameInvalidReason;

typedef enum {
    TBC_PET_QUERY_DISABLED_NAMES_PRESENT = 1,
    TBC_PET_QUERY_DISABLED_NAMES_NOT_PRESENT = 0
} tbc_PetQueryDisabledNames;

typedef enum {
    TBC_PET_REACT_STATE_PASSIVE = 0,
    TBC_PET_REACT_STATE_DEFENSIVE = 1,
    TBC_PET_REACT_STATE_AGGRESSIVE = 2
} tbc_PetReactState;

typedef enum {
    TBC_PET_TALK_REASON_SPECIAL_SPELL = 0,
    TBC_PET_TALK_REASON_ATTACK = 1
} tbc_PetTalkReason;

typedef enum {
    TBC_PET_TAME_FAILURE_REASON_INVALID_CREATURE = 1,
    TBC_PET_TAME_FAILURE_REASON_TOO_MANY = 2,
    TBC_PET_TAME_FAILURE_REASON_CREATURE_ALREADY_OWNED = 3,
    TBC_PET_TAME_FAILURE_REASON_NOT_TAMEABLE = 4,
    TBC_PET_TAME_FAILURE_REASON_ANOTHER_SUMMON_ACTIVE = 5,
    TBC_PET_TAME_FAILURE_REASON_UNITS_CANT_TAME = 6,
    TBC_PET_TAME_FAILURE_REASON_NO_PET_AVAILABLE = 7,
    TBC_PET_TAME_FAILURE_REASON_INTERNAL_ERROR = 8,
    TBC_PET_TAME_FAILURE_REASON_TOO_HIGH_LEVEL = 9,
    TBC_PET_TAME_FAILURE_REASON_DEAD = 10,
    TBC_PET_TAME_FAILURE_REASON_NOT_DEAD = 11,
    TBC_PET_TAME_FAILURE_REASON_UNKNOWN_ERROR = 12
} tbc_PetTameFailureReason;

typedef enum {
    TBC_PETITION_RESULT_OK = 0,
    TBC_PETITION_RESULT_ALREADY_SIGNED = 1,
    TBC_PETITION_RESULT_ALREADY_IN_GUILD = 2,
    TBC_PETITION_RESULT_CANT_SIGN_OWN = 3,
    TBC_PETITION_RESULT_NOT_SERVER = 4
} tbc_PetitionResult;

typedef enum {
    TBC_PLAYER_CHAT_TAG_NONE = 0,
    TBC_PLAYER_CHAT_TAG_AFK = 1,
    TBC_PLAYER_CHAT_TAG_DND = 2,
    TBC_PLAYER_CHAT_TAG_GM = 3
} tbc_PlayerChatTag;

typedef enum {
    TBC_POWER_MANA = 0,
    TBC_POWER_RAGE = 1,
    TBC_POWER_FOCUS = 2,
    TBC_POWER_ENERGY = 3,
    TBC_POWER_HAPPINESS = 4,
    TBC_POWER_HEALTH = 254
} tbc_Power;

typedef enum {
    TBC_PVP_RANK_NO_RANK = 0,
    TBC_PVP_RANK_PARIAH = 1,
    TBC_PVP_RANK_OUTLAW = 2,
    TBC_PVP_RANK_EXILED = 3,
    TBC_PVP_RANK_DISHONORED = 4,
    TBC_PVP_RANK_RANK1 = 5,
    TBC_PVP_RANK_RANK2 = 6,
    TBC_PVP_RANK_RANK3 = 7,
    TBC_PVP_RANK_RANK4 = 8,
    TBC_PVP_RANK_RANK5 = 9,
    TBC_PVP_RANK_RANK6 = 10,
    TBC_PVP_RANK_RANK7 = 11,
    TBC_PVP_RANK_RANK8 = 12,
    TBC_PVP_RANK_RANK9 = 13,
    TBC_PVP_RANK_RANK10 = 14,
    TBC_PVP_RANK_RANK11 = 15,
    TBC_PVP_RANK_RANK12 = 16,
    TBC_PVP_RANK_RANK13 = 17,
    TBC_PVP_RANK_RANK14 = 18,
    TBC_PVP_RANK_FACTION_LEADER = 19
} tbc_PvpRank;

typedef enum {
    TBC_QUEST_COMPLETABLE_NOT_COMPLETABLE = 0,
    TBC_QUEST_COMPLETABLE_COMPLETEABLE = 3
} tbc_QuestCompletable;

typedef enum {
    TBC_QUEST_FAILED_REASON_DONT_HAVE_REQ = 0,
    TBC_QUEST_FAILED_REASON_QUEST_FAILED_LOW_LEVEL = 1,
    TBC_QUEST_FAILED_REASON_QUEST_FAILED_WRONG_RACE = 6,
    TBC_QUEST_FAILED_REASON_QUEST_ALREADY_DONE = 7,
    TBC_QUEST_FAILED_REASON_QUEST_ONLY_ONE_TIMED = 12,
    TBC_QUEST_FAILED_REASON_QUEST_ALREADY_ON = 13,
    TBC_QUEST_FAILED_REASON_QUEST_FAILED_EXPANSION = 16,
    TBC_QUEST_FAILED_REASON_QUEST_ALREADY_ON2 = 18,
    TBC_QUEST_FAILED_REASON_QUEST_FAILED_MISSING_ITEMS = 21,
    TBC_QUEST_FAILED_REASON_QUEST_FAILED_NOT_ENOUGH_MONEY = 23,
    TBC_QUEST_FAILED_REASON_DAILY_QUESTS_REMAINING = 26,
    TBC_QUEST_FAILED_REASON_QUEST_FAILED_CAIS = 27
} tbc_QuestFailedReason;

typedef enum {
    TBC_QUEST_GIVER_STATUS_NONE = 0,
    TBC_QUEST_GIVER_STATUS_UNAVAILABLE = 1,
    TBC_QUEST_GIVER_STATUS_CHAT = 2,
    TBC_QUEST_GIVER_STATUS_INCOMPLETE = 3,
    TBC_QUEST_GIVER_STATUS_REWARD_REP = 4,
    TBC_QUEST_GIVER_STATUS_AVAILABLE_REP = 5,
    TBC_QUEST_GIVER_STATUS_AVAILABLE = 6,
    TBC_QUEST_GIVER_STATUS_REWARD_OLD = 7,
    TBC_QUEST_GIVER_STATUS_REWARD2 = 8
} tbc_QuestGiverStatus;

typedef enum {
    TBC_QUEST_PARTY_MESSAGE_SHARING_QUEST = 0,
    TBC_QUEST_PARTY_MESSAGE_CANT_TAKE_QUEST = 1,
    TBC_QUEST_PARTY_MESSAGE_ACCEPT_QUEST = 2,
    TBC_QUEST_PARTY_MESSAGE_DECLINE_QUEST = 3,
    TBC_QUEST_PARTY_MESSAGE_TOO_FAR = 4,
    TBC_QUEST_PARTY_MESSAGE_BUSY = 5,
    TBC_QUEST_PARTY_MESSAGE_LOG_FULL = 6,
    TBC_QUEST_PARTY_MESSAGE_HAVE_QUEST = 7,
    TBC_QUEST_PARTY_MESSAGE_FINISH_QUEST = 8
} tbc_QuestPartyMessage;

typedef enum {
    TBC_RACE_HUMAN = 1,
    TBC_RACE_ORC = 2,
    TBC_RACE_DWARF = 3,
    TBC_RACE_NIGHT_ELF = 4,
    TBC_RACE_UNDEAD = 5,
    TBC_RACE_TAUREN = 6,
    TBC_RACE_GNOME = 7,
    TBC_RACE_TROLL = 8,
    TBC_RACE_GOBLIN = 9,
    TBC_RACE_BLOOD_ELF = 10,
    TBC_RACE_DRAENEI = 11,
    TBC_RACE_FEL_ORC = 12,
    TBC_RACE_NAGA = 13,
    TBC_RACE_BROKEN = 14,
    TBC_RACE_SKELETON = 15,
    TBC_RACE_VRYKUL = 16,
    TBC_RACE_TUSKARR = 17,
    TBC_RACE_FOREST_TROLL = 18
} tbc_Race;

typedef enum {
    TBC_RAID_GROUP_ERROR_REQUIRED = 1,
    TBC_RAID_GROUP_ERROR_FULL = 2
} tbc_RaidGroupError;

typedef enum {
    TBC_RAID_INSTANCE_MESSAGE_WARNING_HOURS = 1,
    TBC_RAID_INSTANCE_MESSAGE_WARNING_MIN = 2,
    TBC_RAID_INSTANCE_MESSAGE_WARNING_MIN_SOON = 3,
    TBC_RAID_INSTANCE_MESSAGE_WELCOME = 4
} tbc_RaidInstanceMessage;

typedef enum {
    TBC_RAID_TARGET_INDEX_UNKNOWN0 = 0,
    TBC_RAID_TARGET_INDEX_UNKNOWN1 = 1,
    TBC_RAID_TARGET_INDEX_UNKNOWN2 = 2,
    TBC_RAID_TARGET_INDEX_UNKNOWN3 = 3,
    TBC_RAID_TARGET_INDEX_UNKNOWN4 = 4,
    TBC_RAID_TARGET_INDEX_UNKNOWN5 = 5,
    TBC_RAID_TARGET_INDEX_UNKNOWN6 = 6,
    TBC_RAID_TARGET_INDEX_UNKNOWN7 = 7,
    TBC_RAID_TARGET_INDEX_UNKNOWN8 = 8,
    TBC_RAID_TARGET_INDEX_REQUEST_ICONS = 255
} tbc_RaidTargetIndex;

typedef enum {
    TBC_RAID_TARGET_UPDATE_TYPE_PARTIAL = 0,
    TBC_RAID_TARGET_UPDATE_TYPE_FULL = 1
} tbc_RaidTargetUpdateType;

typedef enum {
    TBC_REALM_SPLIT_STATE_NORMAL = 0,
    TBC_REALM_SPLIT_STATE_SPLIT = 1,
    TBC_REALM_SPLIT_STATE_SPLIT_PENDING = 2
} tbc_RealmSplitState;

typedef enum {
    TBC_REFER_A_FRIEND_ERROR_NONE = 0,
    TBC_REFER_A_FRIEND_ERROR_NOT_REFERRED_BY = 1,
    TBC_REFER_A_FRIEND_ERROR_TARGET_TOO_HIGH = 2,
    TBC_REFER_A_FRIEND_ERROR_INSUFFICIENT_GRANTABLE_LEVELS = 3,
    TBC_REFER_A_FRIEND_ERROR_TOO_FAR = 4,
    TBC_REFER_A_FRIEND_ERROR_DIFFERENT_FACTION = 5,
    TBC_REFER_A_FRIEND_ERROR_NOT_NOW = 6,
    TBC_REFER_A_FRIEND_ERROR_GRANT_LEVEL_MAX = 7,
    TBC_REFER_A_FRIEND_ERROR_NO_TARGET = 8,
    TBC_REFER_A_FRIEND_ERROR_NOT_IN_GROUP = 9,
    TBC_REFER_A_FRIEND_ERROR_SUMMON_LEVEL_MAX = 10,
    TBC_REFER_A_FRIEND_ERROR_SUMMON_COOLDOWN = 11,
    TBC_REFER_A_FRIEND_ERROR_INSUFFICIENT_EXPANSION_LEVEL = 12,
    TBC_REFER_A_FRIEND_ERROR_SUMMON_OFFLINE = 13
} tbc_ReferAFriendError;

typedef enum {
    TBC_ROLL_VOTE_PASS = 0,
    TBC_ROLL_VOTE_NEED = 1,
    TBC_ROLL_VOTE_GREED = 2,
    TBC_ROLL_VOTE_DISENCHANT = 3
} tbc_RollVote;

typedef enum {
    TBC_SELL_ITEM_RESULT_CANT_FIND_ITEM = 1,
    TBC_SELL_ITEM_RESULT_CANT_SELL_ITEM = 2,
    TBC_SELL_ITEM_RESULT_CANT_FIND_VENDOR = 3,
    TBC_SELL_ITEM_RESULT_YOU_DONT_OWN_THAT_ITEM = 4,
    TBC_SELL_ITEM_RESULT_UNK = 5,
    TBC_SELL_ITEM_RESULT_ONLY_EMPTY_BAG = 6
} tbc_SellItemResult;

typedef enum {
    TBC_SERVER_MESSAGE_TYPE_SHUTDOWN_TIME = 1,
    TBC_SERVER_MESSAGE_TYPE_RESTART_TIME = 2,
    TBC_SERVER_MESSAGE_TYPE_CUSTOM = 3,
    TBC_SERVER_MESSAGE_TYPE_SHUTDOWN_CANCELLED = 4,
    TBC_SERVER_MESSAGE_TYPE_RESTART_CANCELLED = 5
} tbc_ServerMessageType;

typedef enum {
    TBC_SHEATH_STATE_UNARMED = 0,
    TBC_SHEATH_STATE_MELEE = 1,
    TBC_SHEATH_STATE_RANGED = 2
} tbc_SheathState;

typedef enum {
    TBC_SHEATHE_TYPE_NONE = 0,
    TBC_SHEATHE_TYPE_MAIN_HAND = 1,
    TBC_SHEATHE_TYPE_OFF_HAND = 2,
    TBC_SHEATHE_TYPE_LARGE_WEAPON_LEFT = 3,
    TBC_SHEATHE_TYPE_LARGE_WEAPON_RIGHT = 4,
    TBC_SHEATHE_TYPE_HIP_WEAPON_LEFT = 5,
    TBC_SHEATHE_TYPE_HIP_WEAPON_RIGHT = 6,
    TBC_SHEATHE_TYPE_SHIELD = 7
} tbc_SheatheType;

typedef enum {
    TBC_SIZE_CLASS_NONE = -1,
    TBC_SIZE_CLASS_SMALL = 0,
    TBC_SIZE_CLASS_MEDIUM = 1,
    TBC_SIZE_CLASS_LARGE = 2,
    TBC_SIZE_CLASS_GIANT = 3,
    TBC_SIZE_CLASS_COLOSSAL = 4
} tbc_SizeClass;

typedef enum {
    TBC_SKILL_NONE = 0,
    TBC_SKILL_FROST = 6,
    TBC_SKILL_FIRE = 8,
    TBC_SKILL_ARMS = 26,
    TBC_SKILL_COMBAT = 38,
    TBC_SKILL_SUBTLETY = 39,
    TBC_SKILL_POISONS = 40,
    TBC_SKILL_SWORDS = 43,
    TBC_SKILL_AXES = 44,
    TBC_SKILL_BOWS = 45,
    TBC_SKILL_GUNS = 46,
    TBC_SKILL_BEAST_MASTERY = 50,
    TBC_SKILL_SURVIVAL = 51,
    TBC_SKILL_MACES = 54,
    TBC_SKILL_TWO_HANDED_SWORDS = 55,
    TBC_SKILL_HOLY = 56,
    TBC_SKILL_SHADOW = 78,
    TBC_SKILL_DEFENSE = 95,
    TBC_SKILL_LANGUAGE_COMMON = 98,
    TBC_SKILL_RACIAL_DWARVEN = 101,
    TBC_SKILL_LANGUAGE_ORCISH = 109,
    TBC_SKILL_LANGUAGE_DWARVEN = 111,
    TBC_SKILL_LANGUAGE_DARNASSIAN = 113,
    TBC_SKILL_LANGUAGE_TAURAHE = 115,
    TBC_SKILL_DUAL_WIELD = 118,
    TBC_SKILL_RACIAL_TAUREN = 124,
    TBC_SKILL_ORC_RACIAL = 125,
    TBC_SKILL_RACIAL_NIGHT_ELF = 126,
    TBC_SKILL_FIRST_AID = 129,
    TBC_SKILL_FERAL_COMBAT = 134,
    TBC_SKILL_STAVES = 136,
    TBC_SKILL_LANGUAGE_THALASSIAN = 137,
    TBC_SKILL_LANGUAGE_DRACONIC = 138,
    TBC_SKILL_LANGUAGE_DEMON_TONGUE = 139,
    TBC_SKILL_LANGUAGE_TITAN = 140,
    TBC_SKILL_LANGUAGE_OLD_TONGUE = 141,
    TBC_SKILL_SURVIVAL2 = 142,
    TBC_SKILL_RIDING_HORSE = 148,
    TBC_SKILL_RIDING_WOLF = 149,
    TBC_SKILL_RIDING_TIGER = 150,
    TBC_SKILL_RIDING_RAM = 152,
    TBC_SKILL_SWIMMING = 155,
    TBC_SKILL_TWO_HANDED_MACES = 160,
    TBC_SKILL_UNARMED = 162,
    TBC_SKILL_MARKSMANSHIP = 163,
    TBC_SKILL_BLACKSMITHING = 164,
    TBC_SKILL_LEATHERWORKING = 165,
    TBC_SKILL_ALCHEMY = 171,
    TBC_SKILL_TWO_HANDED_AXES = 172,
    TBC_SKILL_DAGGERS = 173,
    TBC_SKILL_THROWN = 176,
    TBC_SKILL_HERBALISM = 182,
    TBC_SKILL_GENERIC_DND = 183,
    TBC_SKILL_RETRIBUTION = 184,
    TBC_SKILL_COOKING = 185,
    TBC_SKILL_MINING = 186,
    TBC_SKILL_PET_IMP = 188,
    TBC_SKILL_PET_FELHUNTER = 189,
    TBC_SKILL_TAILORING = 197,
    TBC_SKILL_ENGINEERING = 202,
    TBC_SKILL_PET_SPIDER = 203,
    TBC_SKILL_PET_VOIDWALKER = 204,
    TBC_SKILL_PET_SUCCUBUS = 205,
    TBC_SKILL_PET_INFERNAL = 206,
    TBC_SKILL_PET_DOOMGUARD = 207,
    TBC_SKILL_PET_WOLF = 208,
    TBC_SKILL_PET_CAT = 209,
    TBC_SKILL_PET_BEAR = 210,
    TBC_SKILL_PET_BOAR = 211,
    TBC_SKILL_PET_CROCILISK = 212,
    TBC_SKILL_PET_CARRION_BIRD = 213,
    TBC_SKILL_PET_CRAB = 214,
    TBC_SKILL_PET_GORILLA = 215,
    TBC_SKILL_PET_RAPTOR = 217,
    TBC_SKILL_PET_TALLSTRIDER = 218,
    TBC_SKILL_RACIAL_UNDED = 220,
    TBC_SKILL_CROSSBOWS = 226,
    TBC_SKILL_WANDS = 228,
    TBC_SKILL_POLEARMS = 229,
    TBC_SKILL_PET_SCORPID = 236,
    TBC_SKILL_ARCANE = 237,
    TBC_SKILL_PET_TURTLE = 251,
    TBC_SKILL_ASSASSINATION = 253,
    TBC_SKILL_FURY = 256,
    TBC_SKILL_PROTECTION = 257,
    TBC_SKILL_BEAST_TRAINING = 261,
    TBC_SKILL_PROTECTION2 = 267,
    TBC_SKILL_PET_TALENTS = 270,
    TBC_SKILL_PLATE_MAIL = 293,
    TBC_SKILL_LANGUAGE_GNOMISH = 313,
    TBC_SKILL_LANGUAGE_TROLL = 315,
    TBC_SKILL_ENCHANTING = 333,
    TBC_SKILL_DEMONOLOGY = 354,
    TBC_SKILL_AFFLICTION = 355,
    TBC_SKILL_FISHING = 356,
    TBC_SKILL_ENHANCEMENT = 373,
    TBC_SKILL_RESTORATION = 374,
    TBC_SKILL_ELEMENTAL_COMBAT = 375,
    TBC_SKILL_SKINNING = 393,
    TBC_SKILL_MAIL = 413,
    TBC_SKILL_LEATHER = 414,
    TBC_SKILL_CLOTH = 415,
    TBC_SKILL_SHIELD = 433,
    TBC_SKILL_FIST_WEAPONS = 473,
    TBC_SKILL_RIDING_RAPTOR = 533,
    TBC_SKILL_RIDING_MECHANOSTRIDER = 553,
    TBC_SKILL_RIDING_UNDEAD_HORSE = 554,
    TBC_SKILL_RESTORATION2 = 573,
    TBC_SKILL_BALANCE = 574,
    TBC_SKILL_DESTRUCTION = 593,
    TBC_SKILL_HOLY2 = 594,
    TBC_SKILL_DISCIPLINE = 613,
    TBC_SKILL_LOCKPICKING = 633,
    TBC_SKILL_PET_BAT = 653,
    TBC_SKILL_PET_HYENA = 654,
    TBC_SKILL_PET_OWL = 655,
    TBC_SKILL_PET_WIND_SERPENT = 656,
    TBC_SKILL_LANGUAGE_GUTTERSPEAK = 673,
    TBC_SKILL_RIDING_KODO = 713,
    TBC_SKILL_RACIAL_TROLL = 733,
    TBC_SKILL_RACIAL_GNOME = 753,
    TBC_SKILL_RACIAL_HUMAN = 754,
    TBC_SKILL_JEWELCRAFTING = 755,
    TBC_SKILL_RACIAL_BLOODELF = 756,
    TBC_SKILL_PET_EVENT_RC = 758,
    TBC_SKILL_LANGUAGE_DRAENEI = 759,
    TBC_SKILL_RACIAL_DRAENEI = 760,
    TBC_SKILL_PET_FELGUARD = 761,
    TBC_SKILL_RIDING = 762,
    TBC_SKILL_PET_DRAGONHAWK = 763,
    TBC_SKILL_PET_NETHER_RAY = 764,
    TBC_SKILL_PET_SPOREBAT = 765,
    TBC_SKILL_PET_WARP_STALKER = 766,
    TBC_SKILL_PET_RAVAGER = 767,
    TBC_SKILL_PET_SERPENT = 768,
    TBC_SKILL_INTERNAL = 769
} tbc_Skill;

typedef enum {
    TBC_SKILL_CATEGORY_ATTRIBUTE = 5,
    TBC_SKILL_CATEGORY_WEAPON = 6,
    TBC_SKILL_CATEGORY_CLASS = 7,
    TBC_SKILL_CATEGORY_ARMOR = 8,
    TBC_SKILL_CATEGORY_SECONDARY_PROFESSION = 9,
    TBC_SKILL_CATEGORY_LANGUAGE = 10,
    TBC_SKILL_CATEGORY_PRIMARY_PROFESSION = 11,
    TBC_SKILL_CATEGORY_GENERIC = 12
} tbc_SkillCategory;

typedef enum {
    TBC_SPAM_TYPE_MAIL = 0,
    TBC_SPAM_TYPE_CHAT = 1
} tbc_SpamType;

typedef enum {
    TBC_SPELL_CAST_RESULT_AFFECTING_COMBAT = 0,
    TBC_SPELL_CAST_RESULT_ALREADY_AT_FULL_HEALTH = 1,
    TBC_SPELL_CAST_RESULT_ALREADY_AT_FULL_MANA = 2,
    TBC_SPELL_CAST_RESULT_ALREADY_AT_FULL_POWER = 3,
    TBC_SPELL_CAST_RESULT_ALREADY_BEING_TAMED = 4,
    TBC_SPELL_CAST_RESULT_ALREADY_HAVE_CHARM = 5,
    TBC_SPELL_CAST_RESULT_ALREADY_HAVE_SUMMON = 6,
    TBC_SPELL_CAST_RESULT_ALREADY_OPEN = 7,
    TBC_SPELL_CAST_RESULT_AURA_BOUNCED = 8,
    TBC_SPELL_CAST_RESULT_AUTOTRACK_INTERRUPTED = 9,
    TBC_SPELL_CAST_RESULT_BAD_IMPLICIT_TARGETS = 10,
    TBC_SPELL_CAST_RESULT_BAD_TARGETS = 11,
    TBC_SPELL_CAST_RESULT_CANT_BE_CHARMED = 12,
    TBC_SPELL_CAST_RESULT_CANT_BE_DISENCHANTED = 13,
    TBC_SPELL_CAST_RESULT_CANT_BE_DISENCHANTED_SKILL = 14,
    TBC_SPELL_CAST_RESULT_CANT_BE_PROSPECTED = 15,
    TBC_SPELL_CAST_RESULT_CANT_CAST_ON_TAPPED = 16,
    TBC_SPELL_CAST_RESULT_CANT_DUEL_WHILE_INVISIBLE = 17,
    TBC_SPELL_CAST_RESULT_CANT_DUEL_WHILE_STEALTHED = 18,
    TBC_SPELL_CAST_RESULT_CANT_STEALTH = 19,
    TBC_SPELL_CAST_RESULT_CASTER_AURASTATE = 20,
    TBC_SPELL_CAST_RESULT_CASTER_DEAD = 21,
    TBC_SPELL_CAST_RESULT_CHARMED = 22,
    TBC_SPELL_CAST_RESULT_CHEST_IN_USE = 23,
    TBC_SPELL_CAST_RESULT_CONFUSED = 24,
    TBC_SPELL_CAST_RESULT_DONT_REPORT = 25,
    TBC_SPELL_CAST_RESULT_EQUIPPED_ITEM = 26,
    TBC_SPELL_CAST_RESULT_EQUIPPED_ITEM_CLASS = 27,
    TBC_SPELL_CAST_RESULT_EQUIPPED_ITEM_CLASS_MAINHAND = 28,
    TBC_SPELL_CAST_RESULT_EQUIPPED_ITEM_CLASS_OFFHAND = 29,
    TBC_SPELL_CAST_RESULT_ERROR = 30,
    TBC_SPELL_CAST_RESULT_FIZZLE = 31,
    TBC_SPELL_CAST_RESULT_FLEEING = 32,
    TBC_SPELL_CAST_RESULT_FOOD_LOWLEVEL = 33,
    TBC_SPELL_CAST_RESULT_HIGHLEVEL = 34,
    TBC_SPELL_CAST_RESULT_HUNGER_SATIATED = 35,
    TBC_SPELL_CAST_RESULT_IMMUNE = 36,
    TBC_SPELL_CAST_RESULT_INTERRUPTED = 37,
    TBC_SPELL_CAST_RESULT_INTERRUPTED_COMBAT = 38,
    TBC_SPELL_CAST_RESULT_ITEM_ALREADY_ENCHANTED = 39,
    TBC_SPELL_CAST_RESULT_ITEM_GONE = 40,
    TBC_SPELL_CAST_RESULT_ITEM_NOT_FOUND = 41,
    TBC_SPELL_CAST_RESULT_ITEM_NOT_READY = 42,
    TBC_SPELL_CAST_RESULT_LEVEL_REQUIREMENT = 43,
    TBC_SPELL_CAST_RESULT_LINE_OF_SIGHT = 44,
    TBC_SPELL_CAST_RESULT_LOWLEVEL = 45,
    TBC_SPELL_CAST_RESULT_LOW_CASTLEVEL = 46,
    TBC_SPELL_CAST_RESULT_MAINHAND_EMPTY = 47,
    TBC_SPELL_CAST_RESULT_MOVING = 48,
    TBC_SPELL_CAST_RESULT_NEED_AMMO = 49,
    TBC_SPELL_CAST_RESULT_NEED_AMMO_POUCH = 50,
    TBC_SPELL_CAST_RESULT_NEED_EXOTIC_AMMO = 51,
    TBC_SPELL_CAST_RESULT_NOPATH = 52,
    TBC_SPELL_CAST_RESULT_NOT_BEHIND = 53,
    TBC_SPELL_CAST_RESULT_NOT_FISHABLE = 54,
    TBC_SPELL_CAST_RESULT_NOT_FLYING = 55,
    TBC_SPELL_CAST_RESULT_NOT_HERE = 56,
    TBC_SPELL_CAST_RESULT_NOT_INFRONT = 57,
    TBC_SPELL_CAST_RESULT_NOT_IN_CONTROL = 58,
    TBC_SPELL_CAST_RESULT_NOT_KNOWN = 59,
    TBC_SPELL_CAST_RESULT_NOT_MOUNTED = 60,
    TBC_SPELL_CAST_RESULT_NOT_ON_TAXI = 61,
    TBC_SPELL_CAST_RESULT_NOT_ON_TRANSPORT = 62,
    TBC_SPELL_CAST_RESULT_NOT_READY = 63,
    TBC_SPELL_CAST_RESULT_NOT_SHAPESHIFT = 64,
    TBC_SPELL_CAST_RESULT_NOT_STANDING = 65,
    TBC_SPELL_CAST_RESULT_NOT_TRADEABLE = 66,
    TBC_SPELL_CAST_RESULT_NOT_TRADING = 67,
    TBC_SPELL_CAST_RESULT_NOT_UNSHEATHED = 68,
    TBC_SPELL_CAST_RESULT_NOT_WHILE_GHOST = 69,
    TBC_SPELL_CAST_RESULT_NO_AMMO = 70,
    TBC_SPELL_CAST_RESULT_NO_CHARGES_REMAIN = 71,
    TBC_SPELL_CAST_RESULT_NO_CHAMPION = 72,
    TBC_SPELL_CAST_RESULT_NO_COMBO_POINTS = 73,
    TBC_SPELL_CAST_RESULT_NO_DUELING = 74,
    TBC_SPELL_CAST_RESULT_NO_ENDURANCE = 75,
    TBC_SPELL_CAST_RESULT_NO_FISH = 76,
    TBC_SPELL_CAST_RESULT_NO_ITEMS_WHILE_SHAPESHIFTED = 77,
    TBC_SPELL_CAST_RESULT_NO_MOUNTS_ALLOWED = 78,
    TBC_SPELL_CAST_RESULT_NO_PET = 79,
    TBC_SPELL_CAST_RESULT_NO_POWER = 80,
    TBC_SPELL_CAST_RESULT_NOTHING_TO_DISPEL = 81,
    TBC_SPELL_CAST_RESULT_NOTHING_TO_STEAL = 82,
    TBC_SPELL_CAST_RESULT_ONLY_ABOVEWATER = 83,
    TBC_SPELL_CAST_RESULT_ONLY_DAYTIME = 84,
    TBC_SPELL_CAST_RESULT_ONLY_INDOORS = 85,
    TBC_SPELL_CAST_RESULT_ONLY_MOUNTED = 86,
    TBC_SPELL_CAST_RESULT_ONLY_NIGHTTIME = 87,
    TBC_SPELL_CAST_RESULT_ONLY_OUTDOORS = 88,
    TBC_SPELL_CAST_RESULT_ONLY_SHAPESHIFT = 89,
    TBC_SPELL_CAST_RESULT_ONLY_STEALTHED = 90,
    TBC_SPELL_CAST_RESULT_ONLY_UNDERWATER = 91,
    TBC_SPELL_CAST_RESULT_OUT_OF_RANGE = 92,
    TBC_SPELL_CAST_RESULT_PACIFIED = 93,
    TBC_SPELL_CAST_RESULT_POSSESSED = 94,
    TBC_SPELL_CAST_RESULT_REAGENTS = 95,
    TBC_SPELL_CAST_RESULT_REQUIRES_AREA = 96,
    TBC_SPELL_CAST_RESULT_REQUIRES_SPELL_FOCUS = 97,
    TBC_SPELL_CAST_RESULT_ROOTED = 98,
    TBC_SPELL_CAST_RESULT_SILENCED = 99,
    TBC_SPELL_CAST_RESULT_SPELL_IN_PROGRESS = 100,
    TBC_SPELL_CAST_RESULT_SPELL_LEARNED = 101,
    TBC_SPELL_CAST_RESULT_SPELL_UNAVAILABLE = 102,
    TBC_SPELL_CAST_RESULT_STUNNED = 103,
    TBC_SPELL_CAST_RESULT_TARGETS_DEAD = 104,
    TBC_SPELL_CAST_RESULT_TARGET_AFFECTING_COMBAT = 105,
    TBC_SPELL_CAST_RESULT_TARGET_AURASTATE = 106,
    TBC_SPELL_CAST_RESULT_TARGET_DUELING = 107,
    TBC_SPELL_CAST_RESULT_TARGET_ENEMY = 108,
    TBC_SPELL_CAST_RESULT_TARGET_ENRAGED = 109,
    TBC_SPELL_CAST_RESULT_TARGET_FRIENDLY = 110,
    TBC_SPELL_CAST_RESULT_TARGET_IN_COMBAT = 111,
    TBC_SPELL_CAST_RESULT_TARGET_IS_PLAYER = 112,
    TBC_SPELL_CAST_RESULT_TARGET_IS_PLAYER_CONTROLLED = 113,
    TBC_SPELL_CAST_RESULT_TARGET_NOT_DEAD = 114,
    TBC_SPELL_CAST_RESULT_TARGET_NOT_IN_PARTY = 115,
    TBC_SPELL_CAST_RESULT_TARGET_NOT_LOOTED = 116,
    TBC_SPELL_CAST_RESULT_TARGET_NOT_PLAYER = 117,
    TBC_SPELL_CAST_RESULT_TARGET_NO_POCKETS = 118,
    TBC_SPELL_CAST_RESULT_TARGET_NO_WEAPONS = 119,
    TBC_SPELL_CAST_RESULT_TARGET_UNSKINNABLE = 120,
    TBC_SPELL_CAST_RESULT_THIRST_SATIATED = 121,
    TBC_SPELL_CAST_RESULT_TOO_CLOSE = 122,
    TBC_SPELL_CAST_RESULT_TOO_MANY_OF_ITEM = 123,
    TBC_SPELL_CAST_RESULT_TOTEM_CATEGORY = 124,
    TBC_SPELL_CAST_RESULT_TOTEMS = 125,
    TBC_SPELL_CAST_RESULT_TRAINING_POINTS = 126,
    TBC_SPELL_CAST_RESULT_TRY_CAST_AGAIN = 127,
    TBC_SPELL_CAST_RESULT_UNIT_NOT_BEHIND = 128,
    TBC_SPELL_CAST_RESULT_UNIT_NOT_INFRONT = 129,
    TBC_SPELL_CAST_RESULT_WRONG_PET_FOOD = 130,
    TBC_SPELL_CAST_RESULT_NOT_WHILE_FATIGUED = 131,
    TBC_SPELL_CAST_RESULT_TARGET_NOT_IN_INSTANCE = 132,
    TBC_SPELL_CAST_RESULT_NOT_WHILE_TRADING = 133,
    TBC_SPELL_CAST_RESULT_TARGET_NOT_IN_RAID = 134,
    TBC_SPELL_CAST_RESULT_DISENCHANT_WHILE_LOOTING = 135,
    TBC_SPELL_CAST_RESULT_PROSPECT_WHILE_LOOTING = 136,
    TBC_SPELL_CAST_RESULT_PROSPECT_NEED_MORE = 137,
    TBC_SPELL_CAST_RESULT_TARGET_FREEFORALL = 138,
    TBC_SPELL_CAST_RESULT_NO_EDIBLE_CORPSES = 139,
    TBC_SPELL_CAST_RESULT_ONLY_BATTLEGROUNDS = 140,
    TBC_SPELL_CAST_RESULT_TARGET_NOT_GHOST = 141,
    TBC_SPELL_CAST_RESULT_TOO_MANY_SKILLS = 142,
    TBC_SPELL_CAST_RESULT_TRANSFORM_UNUSABLE = 143,
    TBC_SPELL_CAST_RESULT_WRONG_WEATHER = 144,
    TBC_SPELL_CAST_RESULT_DAMAGE_IMMUNE = 145,
    TBC_SPELL_CAST_RESULT_PREVENTED_BY_MECHANIC = 146,
    TBC_SPELL_CAST_RESULT_PLAY_TIME = 147,
    TBC_SPELL_CAST_RESULT_REPUTATION = 148,
    TBC_SPELL_CAST_RESULT_MIN_SKILL = 149,
    TBC_SPELL_CAST_RESULT_NOT_IN_ARENA = 150,
    TBC_SPELL_CAST_RESULT_NOT_ON_SHAPESHIFT = 151,
    TBC_SPELL_CAST_RESULT_NOT_ON_STEALTHED = 152,
    TBC_SPELL_CAST_RESULT_NOT_ON_DAMAGE_IMMUNE = 153,
    TBC_SPELL_CAST_RESULT_NOT_ON_MOUNTED = 154,
    TBC_SPELL_CAST_RESULT_TOO_SHALLOW = 155,
    TBC_SPELL_CAST_RESULT_TARGET_NOT_IN_SANCTUARY = 156,
    TBC_SPELL_CAST_RESULT_TARGET_IS_TRIVIAL = 157,
    TBC_SPELL_CAST_RESULT_BM_OR_INVISGOD = 158,
    TBC_SPELL_CAST_RESULT_EXPERT_RIDING_REQUIREMENT = 159,
    TBC_SPELL_CAST_RESULT_ARTISAN_RIDING_REQUIREMENT = 160,
    TBC_SPELL_CAST_RESULT_NOT_IDLE = 161,
    TBC_SPELL_CAST_RESULT_NOT_INACTIVE = 162,
    TBC_SPELL_CAST_RESULT_PARTIAL_PLAYTIME = 163,
    TBC_SPELL_CAST_RESULT_NO_PLAYTIME = 164,
    TBC_SPELL_CAST_RESULT_NOT_IN_BATTLEGROUND = 165,
    TBC_SPELL_CAST_RESULT_ONLY_IN_ARENA = 166,
    TBC_SPELL_CAST_RESULT_TARGET_LOCKED_TO_RAID_INSTANCE = 167,
    TBC_SPELL_CAST_RESULT_UNKNOWN = 168
} tbc_SpellCastResult;

typedef enum {
    TBC_SPELL_EFFECT_NONE = 0,
    TBC_SPELL_EFFECT_INSTAKILL = 1,
    TBC_SPELL_EFFECT_SCHOOL_DAMAGE = 2,
    TBC_SPELL_EFFECT_DUMMY = 3,
    TBC_SPELL_EFFECT_PORTAL_TELEPORT = 4,
    TBC_SPELL_EFFECT_TELEPORT_UNITS = 5,
    TBC_SPELL_EFFECT_APPLY_AURA = 6,
    TBC_SPELL_EFFECT_ENVIRONMENTAL_DAMAGE = 7,
    TBC_SPELL_EFFECT_POWER_DRAIN = 8,
    TBC_SPELL_EFFECT_HEALTH_LEECH = 9,
    TBC_SPELL_EFFECT_HEAL = 10,
    TBC_SPELL_EFFECT_BIND = 11,
    TBC_SPELL_EFFECT_PORTAL = 12,
    TBC_SPELL_EFFECT_RITUAL_BASE = 13,
    TBC_SPELL_EFFECT_RITUAL_SPECIALIZE = 14,
    TBC_SPELL_EFFECT_RITUAL_ACTIVATE_PORTAL = 15,
    TBC_SPELL_EFFECT_QUEST_COMPLETE = 16,
    TBC_SPELL_EFFECT_WEAPON_DAMAGE_NOSCHOOL = 17,
    TBC_SPELL_EFFECT_RESURRECT = 18,
    TBC_SPELL_EFFECT_ADD_EXTRA_ATTACKS = 19,
    TBC_SPELL_EFFECT_DODGE = 20,
    TBC_SPELL_EFFECT_EVADE = 21,
    TBC_SPELL_EFFECT_PARRY = 22,
    TBC_SPELL_EFFECT_BLOCK = 23,
    TBC_SPELL_EFFECT_CREATE_ITEM = 24,
    TBC_SPELL_EFFECT_WEAPON = 25,
    TBC_SPELL_EFFECT_DEFENSE = 26,
    TBC_SPELL_EFFECT_PERSISTENT_AREA_AURA = 27,
    TBC_SPELL_EFFECT_SUMMON = 28,
    TBC_SPELL_EFFECT_LEAP = 29,
    TBC_SPELL_EFFECT_ENERGIZE = 30,
    TBC_SPELL_EFFECT_WEAPON_PERCENT_DAMAGE = 31,
    TBC_SPELL_EFFECT_TRIGGER_MISSILE = 32,
    TBC_SPELL_EFFECT_OPEN_LOCK = 33,
    TBC_SPELL_EFFECT_SUMMON_CHANGE_ITEM = 34,
    TBC_SPELL_EFFECT_APPLY_AREA_AURA_PARTY = 35,
    TBC_SPELL_EFFECT_LEARN_SPELL = 36,
    TBC_SPELL_EFFECT_SPELL_DEFENSE = 37,
    TBC_SPELL_EFFECT_DISPEL = 38,
    TBC_SPELL_EFFECT_LANGUAGE = 39,
    TBC_SPELL_EFFECT_DUAL_WIELD = 40,
    TBC_SPELL_EFFECT_UNKNOWN41 = 41,
    TBC_SPELL_EFFECT_UNKNOWN42 = 42,
    TBC_SPELL_EFFECT_TELEPORT_UNITS_FACE_CASTER = 43,
    TBC_SPELL_EFFECT_SKILL_STEP = 44,
    TBC_SPELL_EFFECT_UNDEFINED_45 = 45,
    TBC_SPELL_EFFECT_SPAWN = 46,
    TBC_SPELL_EFFECT_TRADE_SKILL = 47,
    TBC_SPELL_EFFECT_STEALTH = 48,
    TBC_SPELL_EFFECT_DETECT = 49,
    TBC_SPELL_EFFECT_TRANS_DOOR = 50,
    TBC_SPELL_EFFECT_FORCE_CRITICAL_HIT = 51,
    TBC_SPELL_EFFECT_GUARANTEE_HIT = 52,
    TBC_SPELL_EFFECT_ENCHANT_ITEM = 53,
    TBC_SPELL_EFFECT_ENCHANT_ITEM_TEMPORARY = 54,
    TBC_SPELL_EFFECT_TAMECREATURE = 55,
    TBC_SPELL_EFFECT_SUMMON_PET = 56,
    TBC_SPELL_EFFECT_LEARN_PET_SPELL = 57,
    TBC_SPELL_EFFECT_WEAPON_DAMAGE = 58,
    TBC_SPELL_EFFECT_OPEN_LOCK_ITEM = 59,
    TBC_SPELL_EFFECT_PROFICIENCY = 60,
    TBC_SPELL_EFFECT_SEND_EVENT = 61,
    TBC_SPELL_EFFECT_POWER_BURN = 62,
    TBC_SPELL_EFFECT_THREAT = 63,
    TBC_SPELL_EFFECT_TRIGGER_SPELL = 64,
    TBC_SPELL_EFFECT_HEALTH_FUNNEL = 65,
    TBC_SPELL_EFFECT_POWER_FUNNEL = 66,
    TBC_SPELL_EFFECT_HEAL_MAX_HEALTH = 67,
    TBC_SPELL_EFFECT_INTERRUPT_CAST = 68,
    TBC_SPELL_EFFECT_DISTRACT = 69,
    TBC_SPELL_EFFECT_PULL = 70,
    TBC_SPELL_EFFECT_PICKPOCKET = 71,
    TBC_SPELL_EFFECT_ADD_FARSIGHT = 72,
    TBC_SPELL_EFFECT_UNKNOWN73 = 73,
    TBC_SPELL_EFFECT_UNKNOWN74 = 74,
    TBC_SPELL_EFFECT_HEAL_MECHANICAL = 75,
    TBC_SPELL_EFFECT_SUMMON_OBJECT_WILD = 76,
    TBC_SPELL_EFFECT_SCRIPT_EFFECT = 77,
    TBC_SPELL_EFFECT_ATTACK = 78,
    TBC_SPELL_EFFECT_SANCTUARY = 79,
    TBC_SPELL_EFFECT_ADD_COMBO_POINTS = 80,
    TBC_SPELL_EFFECT_CREATE_HOUSE = 81,
    TBC_SPELL_EFFECT_BIND_SIGHT = 82,
    TBC_SPELL_EFFECT_DUEL = 83,
    TBC_SPELL_EFFECT_STUCK = 84,
    TBC_SPELL_EFFECT_SUMMON_PLAYER = 85,
    TBC_SPELL_EFFECT_ACTIVATE_OBJECT = 86,
    TBC_SPELL_EFFECT_UNKNOWN87 = 87,
    TBC_SPELL_EFFECT_UNKNOWN88 = 88,
    TBC_SPELL_EFFECT_UNKNOWN89 = 89,
    TBC_SPELL_EFFECT_UNKNOWN90 = 90,
    TBC_SPELL_EFFECT_THREAT_ALL = 91,
    TBC_SPELL_EFFECT_ENCHANT_HELD_ITEM = 92,
    TBC_SPELL_EFFECT_UNKNOWN93 = 93,
    TBC_SPELL_EFFECT_SELF_RESURRECT = 94,
    TBC_SPELL_EFFECT_SKINNING = 95,
    TBC_SPELL_EFFECT_CHARGE = 96,
    TBC_SPELL_EFFECT_UNKNOWN97 = 97,
    TBC_SPELL_EFFECT_KNOCK_BACK = 98,
    TBC_SPELL_EFFECT_DISENCHANT = 99,
    TBC_SPELL_EFFECT_INEBRIATE = 100,
    TBC_SPELL_EFFECT_FEED_PET = 101,
    TBC_SPELL_EFFECT_DISMISS_PET = 102,
    TBC_SPELL_EFFECT_REPUTATION = 103,
    TBC_SPELL_EFFECT_SUMMON_OBJECT_SLOT1 = 104,
    TBC_SPELL_EFFECT_SUMMON_OBJECT_SLOT2 = 105,
    TBC_SPELL_EFFECT_SUMMON_OBJECT_SLOT3 = 106,
    TBC_SPELL_EFFECT_SUMMON_OBJECT_SLOT4 = 107,
    TBC_SPELL_EFFECT_DISPEL_MECHANIC = 108,
    TBC_SPELL_EFFECT_SUMMON_DEAD_PET = 109,
    TBC_SPELL_EFFECT_DESTROY_ALL_TOTEMS = 110,
    TBC_SPELL_EFFECT_DURABILITY_DAMAGE = 111,
    TBC_SPELL_EFFECT_UNKNOWN112 = 112,
    TBC_SPELL_EFFECT_RESURRECT_NEW = 113,
    TBC_SPELL_EFFECT_ATTACK_ME = 114,
    TBC_SPELL_EFFECT_DURABILITY_DAMAGE_PCT = 115,
    TBC_SPELL_EFFECT_SKIN_PLAYER_CORPSE = 116,
    TBC_SPELL_EFFECT_SPIRIT_HEAL = 117,
    TBC_SPELL_EFFECT_SKILL = 118,
    TBC_SPELL_EFFECT_APPLY_AREA_AURA_PET = 119,
    TBC_SPELL_EFFECT_TELEPORT_GRAVEYARD = 120,
    TBC_SPELL_EFFECT_NORMALIZED_WEAPON_DMG = 121,
    TBC_SPELL_EFFECT_UNKNOWN122 = 122,
    TBC_SPELL_EFFECT_SEND_TAXI = 123,
    TBC_SPELL_EFFECT_PLAYER_PULL = 124,
    TBC_SPELL_EFFECT_MODIFY_THREAT_PERCENT = 125,
    TBC_SPELL_EFFECT_STEAL_BENEFICIAL_BUFF = 126,
    TBC_SPELL_EFFECT_PROSPECTING = 127,
    TBC_SPELL_EFFECT_APPLY_AREA_AURA_FRIEND = 128,
    TBC_SPELL_EFFECT_APPLY_AREA_AURA_ENEMY = 129,
    TBC_SPELL_EFFECT_REDIRECT_THREAT = 130,
    TBC_SPELL_EFFECT_PLAY_SOUND = 131,
    TBC_SPELL_EFFECT_PLAY_MUSIC = 132,
    TBC_SPELL_EFFECT_UNLEARN_SPECIALIZATION = 133,
    TBC_SPELL_EFFECT_KILL_CREDIT_GROUP = 134,
    TBC_SPELL_EFFECT_CALL_PET = 135,
    TBC_SPELL_EFFECT_HEAL_PCT = 136,
    TBC_SPELL_EFFECT_ENERGIZE_PCT = 137,
    TBC_SPELL_EFFECT_LEAP_BACK = 138,
    TBC_SPELL_EFFECT_CLEAR_QUEST = 139,
    TBC_SPELL_EFFECT_FORCE_CAST = 140,
    TBC_SPELL_EFFECT_UNKNOWN141 = 141,
    TBC_SPELL_EFFECT_TRIGGER_SPELL_WITH_VALUE = 142,
    TBC_SPELL_EFFECT_APPLY_AREA_AURA_OWNER = 143,
    TBC_SPELL_EFFECT_KNOCKBACK_FROM_POSITION = 144,
    TBC_SPELL_EFFECT_UNKNOWN145 = 145,
    TBC_SPELL_EFFECT_UNKNOWN146 = 146,
    TBC_SPELL_EFFECT_QUEST_FAIL = 147,
    TBC_SPELL_EFFECT_UNKNOWN148 = 148,
    TBC_SPELL_EFFECT_CHARGE2 = 149,
    TBC_SPELL_EFFECT_UNKNOWN150 = 150,
    TBC_SPELL_EFFECT_TRIGGER_SPELL_2 = 151,
    TBC_SPELL_EFFECT_UNKNOWN152 = 152,
    TBC_SPELL_EFFECT_UNKNOWN153 = 153
} tbc_SpellEffect;

typedef enum {
    TBC_SPELL_MISS_INFO_NONE = 0,
    TBC_SPELL_MISS_INFO_MISS = 1,
    TBC_SPELL_MISS_INFO_RESIST = 2,
    TBC_SPELL_MISS_INFO_DODGE = 3,
    TBC_SPELL_MISS_INFO_PARRY = 4,
    TBC_SPELL_MISS_INFO_BLOCK = 5,
    TBC_SPELL_MISS_INFO_EVADE = 6,
    TBC_SPELL_MISS_INFO_IMMUNE = 7,
    TBC_SPELL_MISS_INFO_IMMUNE2 = 8,
    TBC_SPELL_MISS_INFO_DEFLECT = 9,
    TBC_SPELL_MISS_INFO_ABSORB = 10,
    TBC_SPELL_MISS_INFO_REFLECT = 11
} tbc_SpellMissInfo;

typedef enum {
    TBC_SPELL_SCHOOL_NORMAL = 0,
    TBC_SPELL_SCHOOL_HOLY = 1,
    TBC_SPELL_SCHOOL_FIRE = 2,
    TBC_SPELL_SCHOOL_NATURE = 3,
    TBC_SPELL_SCHOOL_FROST = 4,
    TBC_SPELL_SCHOOL_SHADOW = 5,
    TBC_SPELL_SCHOOL_ARCANE = 6
} tbc_SpellSchool;

typedef enum {
    TBC_SPELL_STEAL_ACTION_STEAL = 0,
    TBC_SPELL_STEAL_ACTION_CLEANSE = 1
} tbc_SpellStealAction;

typedef enum {
    TBC_SPELL_TRIGGER_TYPE_ON_USE = 0,
    TBC_SPELL_TRIGGER_TYPE_ON_EQUIP = 1,
    TBC_SPELL_TRIGGER_TYPE_CHANCE_ON_HIT = 2,
    TBC_SPELL_TRIGGER_TYPE_SERVER_SIDE_SCRIPT = 3,
    TBC_SPELL_TRIGGER_TYPE_SOULSTONE = 4,
    TBC_SPELL_TRIGGER_TYPE_NO_EQUIP_COOLDOWN = 5,
    TBC_SPELL_TRIGGER_TYPE_LEARN_SPELL_ID = 6
} tbc_SpellTriggerType;

typedef enum {
    TBC_STABLE_RESULT_ERR_MONEY = 1,
    TBC_STABLE_RESULT_ERR_STABLE = 6,
    TBC_STABLE_RESULT_SUCCESS_STABLE = 8,
    TBC_STABLE_RESULT_SUCCESS_UNSTABLE = 9,
    TBC_STABLE_RESULT_SUCCESS_BUY_SLOT = 10
} tbc_StableResult;

typedef enum {
    TBC_STATUS_ID_NONE = 0,
    TBC_STATUS_ID_WAIT_QUEUE = 1,
    TBC_STATUS_ID_WAIT_JOIN = 2,
    TBC_STATUS_ID_IN_PROGRESS = 3,
    TBC_STATUS_ID_WAIT_LEAVE = 4
} tbc_StatusId;

typedef enum {
    TBC_TALENT_BURNING_SOUL = 23,
    TBC_TALENT_MOLTEN_SHIELDS = 24,
    TBC_TALENT_IMPROVED_SCORCH = 25,
    TBC_TALENT_IMPROVED_FIREBALL = 26,
    TBC_TALENT_IMPROVED_FIRE_BLAST = 27,
    TBC_TALENT_FLAME_THROWING = 28,
    TBC_TALENT_PYROBLAST = 29,
    TBC_TALENT_IMPACT = 30,
    TBC_TALENT_IMPROVED_FLAMESTRIKE = 31,
    TBC_TALENT_BLAST_WAVE = 32,
    TBC_TALENT_CRITICAL_MASS = 33,
    TBC_TALENT_IGNITE = 34,
    TBC_TALENT_FIRE_POWER = 35,
    TBC_TALENT_COMBUSTION = 36,
    TBC_TALENT_IMPROVED_FROSTBOLT = 37,
    TBC_TALENT_FROSTBITE = 38,
    TBC_TALENT_PIERCING_ICE = 61,
    TBC_TALENT_IMPROVED_FROST_NOVA = 62,
    TBC_TALENT_IMPROVED_BLIZZARD = 63,
    TBC_TALENT_IMPROVED_CONE_OF_COLD = 64,
    TBC_TALENT_PERMAFROST = 65,
    TBC_TALENT_FROST_CHANNELING = 66,
    TBC_TALENT_SHATTER = 67,
    TBC_TALENT_WINTERS_CHILL = 68,
    TBC_TALENT_ICY_VEINS = 69,
    TBC_TALENT_FROST_WARDING = 70,
    TBC_TALENT_ICE_BARRIER = 71,
    TBC_TALENT_COLD_SNAP = 72,
    TBC_TALENT_ICE_SHARDS = 73,
    TBC_TALENT_ARCANE_SUBTLETY = 74,
    TBC_TALENT_ARCANE_CONCENTRATION = 75,
    TBC_TALENT_ARCANE_FOCUS = 76,
    TBC_TALENT_ARCANE_MIND = 77,
    TBC_TALENT_MAGE_WAND_SPECIALIZATION = 78,
    TBC_TALENT_IMPROVED_ARCANE_MISSILES = 80,
    TBC_TALENT_ARCANE_IMPACT = 81,
    TBC_TALENT_MAGIC_ATTUNEMENT = 82,
    TBC_TALENT_IMPROVED_MANA_SHIELD = 83,
    TBC_TALENT_ARCANE_FORTITUDE = 85,
    TBC_TALENT_PRESENCE_OF_MIND = 86,
    TBC_TALENT_ARCANE_POWER = 87,
    TBC_TALENT_IMPROVED_COUNTERSPELL = 88,
    TBC_TALENT_DEEP_WOUNDS = 121,
    TBC_TALENT_WARRIOR_SWORD_SPECIALIZATION = 123,
    TBC_TALENT_IMPROVED_HEROIC_STRIKE = 124,
    TBC_TALENT_WARRIOR_MACE_SPECIALIZATION = 125,
    TBC_TALENT_IMPROVED_CHARGE = 126,
    TBC_TALENT_IMPROVED_REND = 127,
    TBC_TALENT_IMPROVED_THUNDER_CLAP = 128,
    TBC_TALENT_IMPROVED_HAMSTRING = 129,
    TBC_TALENT_WARRIOR_DEFLECTION = 130,
    TBC_TALENT_IMPROVED_OVERPOWER = 131,
    TBC_TALENT_POLEAXE_SPECIALIZATION = 132,
    TBC_TALENT_DEATH_WISH = 133,
    TBC_TALENT_IMPROVED_INTERCEPT = 134,
    TBC_TALENT_MORTAL_STRIKE = 135,
    TBC_TALENT_WARRIOR_TWO_HANDED_WEAPON_SPECIALIZATION = 136,
    TBC_TALENT_ANGER_MANAGEMENT = 137,
    TBC_TALENT_WARRIOR_ANTICIPATION = 138,
    TBC_TALENT_WARRIOR_TOUGHNESS = 140,
    TBC_TALENT_TACTICAL_MASTERY = 141,
    TBC_TALENT_IMPROVED_BLOODRAGE = 142,
    TBC_TALENT_IMPROVED_TAUNT = 143,
    TBC_TALENT_DEFIANCE = 144,
    TBC_TALENT_IMPROVED_SHIELD_BLOCK = 145,
    TBC_TALENT_IMPROVED_SUNDER_ARMOR = 146,
    TBC_TALENT_IMPROVED_REVENGE = 147,
    TBC_TALENT_SHIELD_SLAM = 148,
    TBC_TALENT_IMPROVED_SHIELD_BASH = 149,
    TBC_TALENT_IMPROVED_SHIELD_WALL = 150,
    TBC_TALENT_IMPROVED_DISARM = 151,
    TBC_TALENT_CONCUSSION_BLOW = 152,
    TBC_TALENT_LAST_STAND = 153,
    TBC_TALENT_COMMANDING_PRESENCE = 154,
    TBC_TALENT_ENRAGE = 155,
    TBC_TALENT_WARRIOR_FLURRY = 156,
    TBC_TALENT_CRUELTY = 157,
    TBC_TALENT_BOOMING_VOICE = 158,
    TBC_TALENT_UNBRIDLED_WRATH = 159,
    TBC_TALENT_PIERCING_HOWL = 160,
    TBC_TALENT_IMPROVED_DEMORALIZING_SHOUT = 161,
    TBC_TALENT_SWEEPING_STRIKES = 165,
    TBC_TALENT_IMPROVED_CLEAVE = 166,
    TBC_TALENT_BLOODTHIRST = 167,
    TBC_TALENT_IMPROVED_SLAM = 168,
    TBC_TALENT_ROGUE_PRECISION = 181,
    TBC_TALENT_DAGGER_SPECIALIZATION = 182,
    TBC_TALENT_FIST_WEAPON_SPECIALIZATION = 183,
    TBC_TALENT_ROGUE_MACE_SPECIALIZATION = 184,
    TBC_TALENT_ROGUE_LIGHTNING_REFLEXES = 186,
    TBC_TALENT_ROGUE_DEFLECTION = 187,
    TBC_TALENT_IMPROVED_SINISTER_STRIKE = 201,
    TBC_TALENT_IMPROVED_GOUGE = 203,
    TBC_TALENT_ENDURANCE = 204,
    TBC_TALENT_ADRENALINE_RUSH = 205,
    TBC_TALENT_IMPROVED_KICK = 206,
    TBC_TALENT_ROGUE_DUAL_WIELD_SPECIALIZATION = 221,
    TBC_TALENT_IMPROVED_SPRINT = 222,
    TBC_TALENT_BLADE_FLURRY = 223,
    TBC_TALENT_MASTER_OF_DECEPTION = 241,
    TBC_TALENT_ROGUE_SWORD_SPECIALIZATION = 242,
    TBC_TALENT_CAMOUFLAGE = 244,
    TBC_TALENT_INITIATIVE = 245,
    TBC_TALENT_SETUP = 246,
    TBC_TALENT_ELUSIVENESS = 247,
    TBC_TALENT_OPPORTUNITY = 261,
    TBC_TALENT_DIRTY_TRICKS = 262,
    TBC_TALENT_IMPROVED_AMBUSH = 263,
    TBC_TALENT_DIRTY_DEEDS = 265,
    TBC_TALENT_IMPROVED_POISONS = 268,
    TBC_TALENT_LETHALITY = 269,
    TBC_TALENT_MALICE = 270,
    TBC_TALENT_REMORSELESS_ATTACKS = 272,
    TBC_TALENT_RUTHLESSNESS = 273,
    TBC_TALENT_MURDER = 274,
    TBC_TALENT_IMPROVED_EVISCERATE = 276,
    TBC_TALENT_PUNCTURING_WOUNDS = 277,
    TBC_TALENT_IMPROVED_EXPOSE_ARMOR = 278,
    TBC_TALENT_IMPROVED_KIDNEY_SHOT = 279,
    TBC_TALENT_COLD_BLOOD = 280,
    TBC_TALENT_RELENTLESS_STRIKES = 281,
    TBC_TALENT_SEAL_FATE = 283,
    TBC_TALENT_PREPARATION = 284,
    TBC_TALENT_RIPOSTE = 301,
    TBC_TALENT_GHOSTLY_STRIKE = 303,
    TBC_TALENT_MARTYRDOM = 321,
    TBC_TALENT_POWER_INFUSION = 322,
    TBC_TALENT_MENTAL_AGILITY = 341,
    TBC_TALENT_UNBREAKABLE_WILL = 342,
    TBC_TALENT_IMPROVED_POWER_WORD_SHIELD = 343,
    TBC_TALENT_IMPROVED_POWER_WORD_FORTITUDE = 344,
    TBC_TALENT_PRIEST_WAND_SPECIALIZATION = 345,
    TBC_TALENT_IMPROVED_INNER_FIRE = 346,
    TBC_TALENT_MEDITATION = 347,
    TBC_TALENT_INNER_FOCUS = 348,
    TBC_TALENT_IMPROVED_MANA_BURN = 350,
    TBC_TALENT_DIVINE_SPIRIT = 351,
    TBC_TALENT_SILENT_RESOLVE = 352,
    TBC_TALENT_INSPIRATION = 361,
    TBC_TALENT_PREMEDITATION = 381,
    TBC_TALENT_VIGOR = 382,
    TBC_TALENT_HOLY_SPECIALIZATION = 401,
    TBC_TALENT_SPIRITUAL_GUIDANCE = 402,
    TBC_TALENT_SEARING_LIGHT = 403,
    TBC_TALENT_SPIRITUAL_HEALING = 404,
    TBC_TALENT_IMPROVED_RENEW = 406,
    TBC_TALENT_IMPROVED_HEALING = 408,
    TBC_TALENT_PRIEST_HEALING_FOCUS = 410,
    TBC_TALENT_PRIEST_SPELL_WARDING = 411,
    TBC_TALENT_HEALING_PRAYERS = 413,
    TBC_TALENT_ARCANE_INSTABILITY = 421,
    TBC_TALENT_HOLY_NOVA = 442,
    TBC_TALENT_SHADOW_WEAVING = 461,
    TBC_TALENT_DARKNESS = 462,
    TBC_TALENT_SHADOW_FOCUS = 463,
    TBC_TALENT_BLACKOUT = 464,
    TBC_TALENT_SPIRIT_TAP = 465,
    TBC_TALENT_SHADOW_AFFINITY = 466,
    TBC_TALENT_IMPROVED_MIND_BLAST = 481,
    TBC_TALENT_IMPROVED_SHADOW_WORD_PAIN = 482,
    TBC_TALENT_IMPROVED_FADE = 483,
    TBC_TALENT_VAMPIRIC_EMBRACE = 484,
    TBC_TALENT_MIND_FLAY = 501,
    TBC_TALENT_SHADOWFORM = 521,
    TBC_TALENT_SILENCE = 541,
    TBC_TALENT_IMPROVED_PSYCHIC_SCREAM = 542,
    TBC_TALENT_CALL_OF_FLAME = 561,
    TBC_TALENT_CALL_OF_THUNDER = 562,
    TBC_TALENT_CONCUSSION = 563,
    TBC_TALENT_CONVECTION = 564,
    TBC_TALENT_ELEMENTAL_FURY = 565,
    TBC_TALENT_IMPROVED_FIRE_TOTEMS = 567,
    TBC_TALENT_EARTHS_GRASP = 572,
    TBC_TALENT_ELEMENTAL_MASTERY = 573,
    TBC_TALENT_ELEMENTAL_FOCUS = 574,
    TBC_TALENT_REVERBERATION = 575,
    TBC_TALENT_ANCESTRAL_HEALING = 581,
    TBC_TALENT_TOTEMIC_MASTERY = 582,
    TBC_TALENT_NATURES_GUIDANCE = 583,
    TBC_TALENT_IMPROVED_HEALING_WAVE = 586,
    TBC_TALENT_SHAMAN_HEALING_FOCUS = 587,
    TBC_TALENT_RESTORATIVE_TOTEMS = 588,
    TBC_TALENT_IMPROVED_REINCARNATION = 589,
    TBC_TALENT_MANA_TIDE_TOTEM = 590,
    TBC_TALENT_SHAMAN_NATURES_SWIFTNESS = 591,
    TBC_TALENT_PURIFICATION = 592,
    TBC_TALENT_TIDAL_FOCUS = 593,
    TBC_TALENT_TIDAL_MASTERY = 594,
    TBC_TALENT_TOTEMIC_FOCUS = 595,
    TBC_TALENT_SHAMAN_ANTICIPATION = 601,
    TBC_TALENT_SHAMAN_FLURRY = 602,
    TBC_TALENT_IMPROVED_GHOST_WOLF = 605,
    TBC_TALENT_IMPROVED_LIGHTNING_SHIELD = 607,
    TBC_TALENT_GUARDIAN_TOTEMS = 609,
    TBC_TALENT_ENHANCING_TOTEMS = 610,
    TBC_TALENT_ELEMENTAL_WEAPONS = 611,
    TBC_TALENT_SHAMAN_SHIELD_SPECIALIZATION = 612,
    TBC_TALENT_THUNDERING_STRIKES = 613,
    TBC_TALENT_ANCESTRAL_KNOWLEDGE = 614,
    TBC_TALENT_SHAMAN_TOUGHNESS = 615,
    TBC_TALENT_SPIRIT_WEAPONS = 616,
    TBC_TALENT_SHAMANISTIC_FOCUS = 617,
    TBC_TALENT_IRON_WILL = 641,
    TBC_TALENT_BLOOD_CRAZE = 661,
    TBC_TALENT_IMPALE = 662,
    TBC_TALENT_HEMORRHAGE = 681,
    TBC_TALENT_VILE_POISONS = 682,
    TBC_TALENT_WARRIOR_ONE_HANDED_WEAPON_SPECIALIZATION = 702,
    TBC_TALENT_LIGHTNING_MASTERY = 721,
    TBC_TALENT_ARCTIC_REACH = 741,
    TBC_TALENT_NATURES_GRASP = 761,
    TBC_TALENT_STARLIGHT_WRATH = 762,
    TBC_TALENT_IMPROVED_MOONFIRE = 763,
    TBC_TALENT_NATURES_REACH = 764,
    TBC_TALENT_BRAMBLES = 782,
    TBC_TALENT_MOONGLOW = 783,
    TBC_TALENT_CELESTIAL_FOCUS = 784,
    TBC_TALENT_CONTROL_OF_NATURE = 787,
    TBC_TALENT_INSECT_SWARM = 788,
    TBC_TALENT_NATURES_GRACE = 789,
    TBC_TALENT_MOONFURY = 790,
    TBC_TALENT_DRUID_VENGEANCE = 792,
    TBC_TALENT_MOONKIN_FORM = 793,
    TBC_TALENT_DRUID_THICK_HIDE = 794,
    TBC_TALENT_FERAL_AGGRESSION = 795,
    TBC_TALENT_DRUID_FEROCITY = 796,
    TBC_TALENT_BRUTAL_IMPACT = 797,
    TBC_TALENT_SHARPENED_CLAWS = 798,
    TBC_TALENT_FERAL_INSTINCT = 799,
    TBC_TALENT_PRIMAL_FURY = 801,
    TBC_TALENT_SHREDDING_ATTACKS = 802,
    TBC_TALENT_PREDATORY_STRIKES = 803,
    TBC_TALENT_FERAL_CHARGE = 804,
    TBC_TALENT_SAVAGE_FURY = 805,
    TBC_TALENT_FERAL_SWIFTNESS = 807,
    TBC_TALENT_HEART_OF_THE_WILD = 808,
    TBC_TALENT_LEADER_OF_THE_PACK = 809,
    TBC_TALENT_IMPROVED_MARK_OF_THE_WILD = 821,
    TBC_TALENT_FUROR = 822,
    TBC_TALENT_NATURES_FOCUS = 823,
    TBC_TALENT_NATURALIST = 824,
    TBC_TALENT_IMPROVED_REGROWTH = 825,
    TBC_TALENT_NATURAL_SHAPESHIFTER = 826,
    TBC_TALENT_OMEN_OF_CLARITY = 827,
    TBC_TALENT_GIFT_OF_NATURE = 828,
    TBC_TALENT_DRUID_INTENSITY = 829,
    TBC_TALENT_IMPROVED_REJUVENATION = 830,
    TBC_TALENT_DRUID_NATURES_SWIFTNESS = 831,
    TBC_TALENT_SUBTLETY = 841,
    TBC_TALENT_IMPROVED_TRANQUILITY = 842,
    TBC_TALENT_TRANQUIL_SPIRIT = 843,
    TBC_TALENT_SWIFTMEND = 844,
    TBC_TALENT_SHADOW_REACH = 881,
    TBC_TALENT_STORMSTRIKE = 901,
    TBC_TALENT_IMPROVED_NATURES_GRASP = 921,
    TBC_TALENT_CATACLYSM = 941,
    TBC_TALENT_BANE = 943,
    TBC_TALENT_IMPROVED_SHADOW_BOLT = 944,
    TBC_TALENT_IMPROVED_IMMOLATE = 961,
    TBC_TALENT_SHADOWBURN = 963,
    TBC_TALENT_DESTRUCTIVE_REACH = 964,
    TBC_TALENT_IMPROVED_SEARING_PAIN = 965,
    TBC_TALENT_EMBERSTORM = 966,
    TBC_TALENT_RUIN = 967,
    TBC_TALENT_CONFLAGRATE = 968,
    TBC_TALENT_DEVASTATION = 981,
    TBC_TALENT_AFTERMATH = 982,
    TBC_TALENT_IMPROVED_FIREBOLT = 983,
    TBC_TALENT_IMPROVED_LASH_OF_PAIN = 984,
    TBC_TALENT_WARLOCK_INTENSITY = 985,
    TBC_TALENT_PYROCLASM = 986,
    TBC_TALENT_FEL_CONCENTRATION = 1001,
    TBC_TALENT_NIGHTFALL = 1002,
    TBC_TALENT_IMPROVED_CORRUPTION = 1003,
    TBC_TALENT_SOUL_SIPHON = 1004,
    TBC_TALENT_SUPPRESSION = 1005,
    TBC_TALENT_IMPROVED_CURSE_OF_WEAKNESS = 1006,
    TBC_TALENT_IMPROVED_LIFE_TAP = 1007,
    TBC_TALENT_GRIM_REACH = 1021,
    TBC_TALENT_DARK_PACT = 1022,
    TBC_TALENT_SIPHON_LIFE = 1041,
    TBC_TALENT_SHADOW_MASTERY = 1042,
    TBC_TALENT_AMPLIFY_CURSE = 1061,
    TBC_TALENT_CURSE_OF_EXHAUSTION = 1081,
    TBC_TALENT_IMPROVED_DRAIN_SOUL = 1101,
    TBC_TALENT_AGGRESSION = 1122,
    TBC_TALENT_SERRATED_BLADES = 1123,
    TBC_TALENT_INCINERATION = 1141,
    TBC_TALENT_ARCANE_MEDITATION = 1142,
    TBC_TALENT_FAERIE_FIRE_FERAL = 1162,
    TBC_TALENT_DIVINE_FURY = 1181,
    TBC_TALENT_MENTAL_STRENGTH = 1201,
    TBC_TALENT_FORCE_OF_WILL = 1202,
    TBC_TALENT_IMPROVED_HEALTHSTONE = 1221,
    TBC_TALENT_IMPROVED_IMP = 1222,
    TBC_TALENT_DEMONIC_EMBRACE = 1223,
    TBC_TALENT_IMPROVED_HEALTH_FUNNEL = 1224,
    TBC_TALENT_IMPROVED_VOIDWALKER = 1225,
    TBC_TALENT_FEL_DOMINATION = 1226,
    TBC_TALENT_MASTER_SUMMONER = 1227,
    TBC_TALENT_FEL_STAMINA = 1241,
    TBC_TALENT_FEL_INTELLECT = 1242,
    TBC_TALENT_IMPROVED_SUCCUBUS = 1243,
    TBC_TALENT_MASTER_DEMONOLOGIST = 1244,
    TBC_TALENT_MASTER_CONJUROR = 1261,
    TBC_TALENT_UNHOLY_POWER = 1262,
    TBC_TALENT_DEMONIC_KNOWLEDGE = 1263,
    TBC_TALENT_DEMONIC_SACRIFICE = 1281,
    TBC_TALENT_SOUL_LINK = 1282,
    TBC_TALENT_IMPROVED_ENSLAVE_DEMON = 1283,
    TBC_TALENT_IMPROVED_CURSE_OF_AGONY = 1284,
    TBC_TALENT_HUMANOID_SLAYING = 1301,
    TBC_TALENT_HUNTER_LIGHTNING_REFLEXES = 1303,
    TBC_TALENT_ENTRAPMENT = 1304,
    TBC_TALENT_IMPROVED_WING_CLIP = 1305,
    TBC_TALENT_CLEVER_TRAPS = 1306,
    TBC_TALENT_DETERRENCE = 1308,
    TBC_TALENT_IMPROVED_FEIGN_DEATH = 1309,
    TBC_TALENT_SUREFOOTED = 1310,
    TBC_TALENT_HUNTER_DEFLECTION = 1311,
    TBC_TALENT_COUNTERATTACK = 1312,
    TBC_TALENT_KILLER_INSTINCT = 1321,
    TBC_TALENT_TRAP_MASTERY = 1322,
    TBC_TALENT_WYVERN_STING = 1325,
    TBC_TALENT_IMPROVED_CONCUSSIVE_SHOT = 1341,
    TBC_TALENT_EFFICIENCY = 1342,
    TBC_TALENT_IMPROVED_HUNTERS_MARK = 1343,
    TBC_TALENT_LETHAL_SHOTS = 1344,
    TBC_TALENT_AIMED_SHOT = 1345,
    TBC_TALENT_IMPROVED_ARCANE_SHOT = 1346,
    TBC_TALENT_BARRAGE = 1347,
    TBC_TALENT_IMPROVED_STINGS = 1348,
    TBC_TALENT_MORTAL_SHOTS = 1349,
    TBC_TALENT_CONCUSSIVE_BARRAGE = 1351,
    TBC_TALENT_SCATTER_SHOT = 1353,
    TBC_TALENT_TRUESHOT_AURA = 1361,
    TBC_TALENT_RANGED_WEAPON_SPECIALIZATION = 1362,
    TBC_TALENT_IMPROVED_ASPECT_OF_THE_MONKEY = 1381,
    TBC_TALENT_IMPROVED_ASPECT_OF_THE_HAWK = 1382,
    TBC_TALENT_PATHFINDING = 1384,
    TBC_TALENT_IMPROVED_MEND_PET = 1385,
    TBC_TALENT_BESTIAL_WRATH = 1386,
    TBC_TALENT_INTIMIDATION = 1387,
    TBC_TALENT_SPIRIT_BOND = 1388,
    TBC_TALENT_ENDURANCE_TRAINING = 1389,
    TBC_TALENT_BESTIAL_DISCIPLINE = 1390,
    TBC_TALENT_BESTIAL_SWIFTNESS = 1391,
    TBC_TALENT_HUNTER_FEROCITY = 1393,
    TBC_TALENT_HUNTER_THICK_HIDE = 1395,
    TBC_TALENT_UNLEASHED_FURY = 1396,
    TBC_TALENT_FRENZY = 1397,
    TBC_TALENT_IMPROVED_BLESSING_OF_MIGHT = 1401,
    TBC_TALENT_PALADIN_VENGEANCE = 1402,
    TBC_TALENT_PALADIN_DEFLECTION = 1403,
    TBC_TALENT_IMPROVED_RETRIBUTION_AURA = 1405,
    TBC_TALENT_BENEDICTION = 1407,
    TBC_TALENT_SANCTITY_AURA = 1409,
    TBC_TALENT_PALADIN_TWO_HANDED_WEAPON_SPECIALIZATION = 1410,
    TBC_TALENT_CONVICTION = 1411,
    TBC_TALENT_REDOUBT = 1421,
    TBC_TALENT_IMPROVED_DEVOTION_AURA = 1422,
    TBC_TALENT_PALADIN_TOUGHNESS = 1423,
    TBC_TALENT_PALADIN_SHIELD_SPECIALIZATION = 1424,
    TBC_TALENT_GUARDIANS_FAVOR = 1425,
    TBC_TALENT_RECKONING = 1426,
    TBC_TALENT_PALADIN_ONE_HANDED_WEAPON_SPECIALIZATION = 1429,
    TBC_TALENT_HOLY_SHIELD = 1430,
    TBC_TALENT_BLESSING_OF_SANCTUARY = 1431,
    TBC_TALENT_SPIRITUAL_FOCUS = 1432,
    TBC_TALENT_DIVINE_FAVOR = 1433,
    TBC_TALENT_AURA_MASTERY = 1435,
    TBC_TALENT_REPENTANCE = 1441,
    TBC_TALENT_BLESSING_OF_KINGS = 1442,
    TBC_TALENT_IMPROVED_LAY_ON_HANDS = 1443,
    TBC_TALENT_HEALING_LIGHT = 1444,
    TBC_TALENT_IMPROVED_BLESSING_OF_WISDOM = 1446,
    TBC_TALENT_DIVINE_INTELLECT = 1449,
    TBC_TALENT_DIVINE_STRENGTH = 1450,
    TBC_TALENT_ILLUMINATION = 1461,
    TBC_TALENT_IMPROVED_SEAL_OF_RIGHTEOUSNESS = 1463,
    TBC_TALENT_IMPROVED_SEAL_OF_THE_CRUSADER = 1464,
    TBC_TALENT_SANCTIFIED_LIGHT = 1465,
    TBC_TALENT_SEAL_OF_COMMAND = 1481,
    TBC_TALENT_IMPROVED_RIGHTEOUS_FURY = 1501,
    TBC_TALENT_HOLY_SHOCK = 1502,
    TBC_TALENT_IMPROVED_HAMMER_OF_JUSTICE = 1521,
    TBC_TALENT_IMPROVED_BERSERKER_RAGE = 1541,
    TBC_TALENT_IMPROVED_EXECUTE = 1542,
    TBC_TALENT_WARRIOR_WEAPON_MASTERY = 1543,
    TBC_TALENT_SPIRIT_OF_REDEMPTION = 1561,
    TBC_TALENT_WARRIOR_DUAL_WIELD_SPECIALIZATION = 1581,
    TBC_TALENT_WARRIOR_SHIELD_SPECIALIZATION = 1601,
    TBC_TALENT_SAVAGE_STRIKES = 1621,
    TBC_TALENT_SURVIVALIST = 1622,
    TBC_TALENT_MONSTER_SLAYING = 1623,
    TBC_TALENT_FOCUSED_FIRE = 1624,
    TBC_TALENT_IMPROVED_REVIVE_PET = 1625,
    TBC_TALENT_IMPROVED_CONCENTRATION_AURA = 1626,
    TBC_TALENT_HOLY_POWER = 1627,
    TBC_TALENT_UNYIELDING_FAITH = 1628,
    TBC_TALENT_PALADIN_ANTICIPATION = 1629,
    TBC_TALENT_PALADIN_PRECISION = 1630,
    TBC_TALENT_IMPROVED_JUDGEMENT = 1631,
    TBC_TALENT_EYE_FOR_AN_EYE = 1632,
    TBC_TALENT_VINDICATION = 1633,
    TBC_TALENT_PURSUIT_OF_JUSTICE = 1634,
    TBC_TALENT_HOLY_REACH = 1635,
    TBC_TALENT_BLESSED_RECOVERY = 1636,
    TBC_TALENT_LIGHTWELL = 1637,
    TBC_TALENT_IMPROVED_VAMPIRIC_EMBRACE = 1638,
    TBC_TALENT_MASTER_OF_ELEMENTS = 1639,
    TBC_TALENT_ELEMENTAL_WARDING = 1640,
    TBC_TALENT_STORM_REACH = 1641,
    TBC_TALENT_EYE_OF_THE_STORM = 1642,
    TBC_TALENT_SHAMAN_WEAPON_MASTERY = 1643,
    TBC_TALENT_ELEMENTAL_DEVASTATION = 1645,
    TBC_TALENT_HEALING_GRACE = 1646,
    TBC_TALENT_IMPROVED_WEAPON_TOTEMS = 1647,
    TBC_TALENT_HEALING_WAY = 1648,
    TBC_TALENT_MAGE_ELEMENTAL_PRECISION = 1649,
    TBC_TALENT_MAGIC_ABSORPTION = 1650,
    TBC_TALENT_IMPROVED_DEFENSIVE_STANCE = 1652,
    TBC_TALENT_WARRIOR_VITALITY = 1653,
    TBC_TALENT_SHIELD_MASTERY = 1654,
    TBC_TALENT_IMPROVED_WHIRLWIND = 1655,
    TBC_TALENT_WARRIOR_PRECISION = 1657,
    TBC_TALENT_IMPROVED_BERSERKER_STANCE = 1658,
    TBC_TALENT_RAMPAGE = 1659,
    TBC_TALENT_FOCUSED_RAGE = 1660,
    TBC_TALENT_ENDLESS_RAGE = 1661,
    TBC_TALENT_IMPROVED_DISCIPLINES = 1662,
    TBC_TALENT_SECOND_WIND = 1663,
    TBC_TALENT_BLOOD_FRENZY = 1664,
    TBC_TALENT_DEVASTATE = 1666,
    TBC_TALENT_MALEDICTION = 1667,
    TBC_TALENT_IMPROVED_HOWL_OF_TERROR = 1668,
    TBC_TALENT_CONTAGION = 1669,
    TBC_TALENT_UNSTABLE_AFFLICTION = 1670,
    TBC_TALENT_DEMONIC_AEGIS = 1671,
    TBC_TALENT_SUMMON_FELGUARD = 1672,
    TBC_TALENT_DEMONIC_TACTICS = 1673,
    TBC_TALENT_SHADOWFURY = 1676,
    TBC_TALENT_SHADOW_AND_FLAME = 1677,
    TBC_TALENT_SOUL_LEECH = 1678,
    TBC_TALENT_NETHER_PROTECTION = 1679,
    TBC_TALENT_DEMONIC_RESILIENCE = 1680,
    TBC_TALENT_MANA_FEED = 1681,
    TBC_TALENT_UNRELENTING_STORM = 1682,
    TBC_TALENT_ELEMENTAL_SHIELDS = 1683,
    TBC_TALENT_SHAMAN_ELEMENTAL_PRECISION = 1685,
    TBC_TALENT_LIGHTNING_OVERLOAD = 1686,
    TBC_TALENT_TOTEM_OF_WRATH = 1687,
    TBC_TALENT_UNLEASHED_RAGE = 1689,
    TBC_TALENT_DUAL_WIELD = 1690,
    TBC_TALENT_MENTAL_QUICKNESS = 1691,
    TBC_TALENT_SHAMAN_DUAL_WIELD_SPECIALIZATION = 1692,
    TBC_TALENT_SHAMANISTIC_RAGE = 1693,
    TBC_TALENT_SHAMAN_FOCUSED_MIND = 1695,
    TBC_TALENT_NATURES_BLESSING = 1696,
    TBC_TALENT_IMPROVED_CHAIN_HEAL = 1697,
    TBC_TALENT_EARTH_SHIELD = 1698,
    TBC_TALENT_NATURES_GUARDIAN = 1699,
    TBC_TALENT_SLEIGHT_OF_HAND = 1700,
    TBC_TALENT_HEIGHTENED_SENSES = 1701,
    TBC_TALENT_DEADLINESS = 1702,
    TBC_TALENT_WEAPON_EXPERTISE = 1703,
    TBC_TALENT_ROGUE_VITALITY = 1705,
    TBC_TALENT_BLADE_TWISTING = 1706,
    TBC_TALENT_NERVES_OF_STEEL = 1707,
    TBC_TALENT_SURPRISE_ATTACKS = 1709,
    TBC_TALENT_ENVELOPING_SHADOWS = 1711,
    TBC_TALENT_SINISTER_CALLING = 1712,
    TBC_TALENT_MASTER_OF_SUBTLETY = 1713,
    TBC_TALENT_SHADOWSTEP = 1714,
    TBC_TALENT_MASTER_POISONER = 1715,
    TBC_TALENT_FIND_WEAKNESS = 1718,
    TBC_TALENT_MUTILATE = 1719,
    TBC_TALENT_FLEET_FOOTED = 1721,
    TBC_TALENT_CHEAT_DEATH = 1722,
    TBC_TALENT_DEADENED_NERVES = 1723,
    TBC_TALENT_IMPROVED_BLINK = 1724,
    TBC_TALENT_ARCANE_POTENCY = 1725,
    TBC_TALENT_PRISMATIC_CLOAK = 1726,
    TBC_TALENT_EMPOWERED_ARCANE_MISSILES = 1727,
    TBC_TALENT_MIND_MASTERY = 1728,
    TBC_TALENT_SLOW = 1729,
    TBC_TALENT_PLAYING_WITH_FIRE = 1730,
    TBC_TALENT_BLAZING_SPEED = 1731,
    TBC_TALENT_MOLTEN_FURY = 1732,
    TBC_TALENT_PYROMANIAC = 1733,
    TBC_TALENT_EMPOWERED_FIREBALL = 1734,
    TBC_TALENT_DRAGONS_BREATH = 1735,
    TBC_TALENT_FROZEN_CORE = 1736,
    TBC_TALENT_ICE_FLOES = 1737,
    TBC_TALENT_ARCTIC_WINDS = 1738,
    TBC_TALENT_EMPOWERED_FROSTBOLT = 1740,
    TBC_TALENT_SUMMON_WATER_ELEMENTAL = 1741,
    TBC_TALENT_PURE_OF_HEART = 1742,
    TBC_TALENT_PURIFYING_POWER = 1743,
    TBC_TALENT_BLESSED_LIFE = 1744,
    TBC_TALENT_LIGHTS_GRACE = 1745,
    TBC_TALENT_HOLY_GUIDANCE = 1746,
    TBC_TALENT_DIVINE_ILLUMINATION = 1747,
    TBC_TALENT_STOICISM = 1748,
    TBC_TALENT_PALADIN_SPELL_WARDING = 1749,
    TBC_TALENT_SACRED_DUTY = 1750,
    TBC_TALENT_ARDENT_DEFENDER = 1751,
    TBC_TALENT_COMBAT_EXPERTISE = 1753,
    TBC_TALENT_AVENGERS_SHIELD = 1754,
    TBC_TALENT_CRUSADE = 1755,
    TBC_TALENT_IMPROVED_SANCTITY_AURA = 1756,
    TBC_TALENT_DIVINE_PURPOSE = 1757,
    TBC_TALENT_SANCTIFIED_JUDGEMENT = 1758,
    TBC_TALENT_FANATICISM = 1759,
    TBC_TALENT_SANCTIFIED_SEALS = 1761,
    TBC_TALENT_QUICK_RECOVERY = 1762,
    TBC_TALENT_SHADOW_EMBRACE = 1763,
    TBC_TALENT_EMPOWERED_CORRUPTION = 1764,
    TBC_TALENT_BLESSED_RESILIENCE = 1765,
    TBC_TALENT_SURGE_OF_LIGHT = 1766,
    TBC_TALENT_EMPOWERED_HEALING = 1767,
    TBC_TALENT_HOLY_CONCENTRATION = 1768,
    TBC_TALENT_ABSOLUTION = 1769,
    TBC_TALENT_IMPROVED_DIVINE_SPIRIT = 1770,
    TBC_TALENT_FOCUSED_POWER = 1771,
    TBC_TALENT_ENLIGHTENMENT = 1772,
    TBC_TALENT_REFLECTIVE_SHIELD = 1773,
    TBC_TALENT_PAIN_SUPPRESSION = 1774,
    TBC_TALENT_PRIEST_FOCUSED_MIND = 1777,
    TBC_TALENT_SHADOW_POWER = 1778,
    TBC_TALENT_VAMPIRIC_TOUCH = 1779,
    TBC_TALENT_SHADOW_RESILIENCE = 1781,
    TBC_TALENT_LUNAR_GUIDANCE = 1782,
    TBC_TALENT_BALANCE_OF_POWER = 1783,
    TBC_TALENT_DREAMSTATE = 1784,
    TBC_TALENT_IMPROVED_FAERIE_FIRE = 1785,
    TBC_TALENT_WRATH_OF_CENARIUS = 1786,
    TBC_TALENT_FORCE_OF_NATURE = 1787,
    TBC_TALENT_EMPOWERED_TOUCH = 1788,
    TBC_TALENT_EMPOWERED_REJUVENATION = 1789,
    TBC_TALENT_NATURAL_PERFECTION = 1790,
    TBC_TALENT_TREE_OF_LIFE = 1791,
    TBC_TALENT_NURTURING_INSTINCT = 1792,
    TBC_TALENT_PRIMAL_TENACITY = 1793,
    TBC_TALENT_SURVIVAL_OF_THE_FITTEST = 1794,
    TBC_TALENT_PREDATORY_INSTINCTS = 1795,
    TBC_TALENT_MANGLE = 1796,
    TBC_TALENT_LIVING_SPIRIT = 1797,
    TBC_TALENT_IMPROVED_LEADER_OF_THE_PACK = 1798,
    TBC_TALENT_ANIMAL_HANDLER = 1799,
    TBC_TALENT_FEROCIOUS_INSPIRATION = 1800,
    TBC_TALENT_CATLIKE_REFLEXES = 1801,
    TBC_TALENT_SERPENTS_SWIFTNESS = 1802,
    TBC_TALENT_THE_BEAST_WITHIN = 1803,
    TBC_TALENT_COMBAT_EXPERIENCE = 1804,
    TBC_TALENT_CAREFUL_AIM = 1806,
    TBC_TALENT_MASTER_MARKSMAN = 1807,
    TBC_TALENT_SILENCING_SHOT = 1808,
    TBC_TALENT_RESOURCEFULNESS = 1809,
    TBC_TALENT_SURVIVAL_INSTINCTS = 1810,
    TBC_TALENT_THRILL_OF_THE_HUNT = 1811,
    TBC_TALENT_EXPOSE_WEAKNESS = 1812,
    TBC_TALENT_MASTER_TACTICIAN = 1813,
    TBC_TALENT_READINESS = 1814,
    TBC_TALENT_CIRCLE_OF_HEALING = 1815,
    TBC_TALENT_MISERY = 1816,
    TBC_TALENT_BACKLASH = 1817,
    TBC_TALENT_GO_FOR_THE_THROAT = 1818,
    TBC_TALENT_RAPID_KILLING = 1819,
    TBC_TALENT_HAWK_EYE = 1820,
    TBC_TALENT_IMPROVED_BARRAGE = 1821,
    TBC_TALENT_FOCUSED_STARLIGHT = 1822,
    TBC_TALENT_CRUSADER_STRIKE = 1823,
    TBC_TALENT_IMPROVED_MORTAL_STRIKE = 1824,
    TBC_TALENT_COMBAT_POTENCY = 1825,
    TBC_TALENT_SPELL_POWER = 1826,
    TBC_TALENT_IMPROVED_SLICE_AND_DICE = 1827,
    TBC_TALENT_IMPROVED_HOLY_SHIELD = 1829,
    TBC_TALENT_FOCUSED_WILL = 1858
} tbc_Talent;

typedef enum {
    TBC_TEXT_EMOTE_AGREE = 1,
    TBC_TEXT_EMOTE_AMAZE = 2,
    TBC_TEXT_EMOTE_ANGRY = 3,
    TBC_TEXT_EMOTE_APOLOGIZE = 4,
    TBC_TEXT_EMOTE_APPLAUD = 5,
    TBC_TEXT_EMOTE_BASHFUL = 6,
    TBC_TEXT_EMOTE_BECKON = 7,
    TBC_TEXT_EMOTE_BEG = 8,
    TBC_TEXT_EMOTE_BITE = 9,
    TBC_TEXT_EMOTE_BLEED = 10,
    TBC_TEXT_EMOTE_BLINK = 11,
    TBC_TEXT_EMOTE_BLUSH = 12,
    TBC_TEXT_EMOTE_BONK = 13,
    TBC_TEXT_EMOTE_BORED = 14,
    TBC_TEXT_EMOTE_BOUNCE = 15,
    TBC_TEXT_EMOTE_BRB = 16,
    TBC_TEXT_EMOTE_BOW = 17,
    TBC_TEXT_EMOTE_BURP = 18,
    TBC_TEXT_EMOTE_BYE = 19,
    TBC_TEXT_EMOTE_CACKLE = 20,
    TBC_TEXT_EMOTE_CHEER = 21,
    TBC_TEXT_EMOTE_CHICKEN = 22,
    TBC_TEXT_EMOTE_CHUCKLE = 23,
    TBC_TEXT_EMOTE_CLAP = 24,
    TBC_TEXT_EMOTE_CONFUSED = 25,
    TBC_TEXT_EMOTE_CONGRATULATE = 26,
    TBC_TEXT_EMOTE_COUGH = 27,
    TBC_TEXT_EMOTE_COWER = 28,
    TBC_TEXT_EMOTE_CRACK = 29,
    TBC_TEXT_EMOTE_CRINGE = 30,
    TBC_TEXT_EMOTE_CRY = 31,
    TBC_TEXT_EMOTE_CURIOUS = 32,
    TBC_TEXT_EMOTE_CURTSEY = 33,
    TBC_TEXT_EMOTE_DANCE = 34,
    TBC_TEXT_EMOTE_DRINK = 35,
    TBC_TEXT_EMOTE_DROOL = 36,
    TBC_TEXT_EMOTE_EAT = 37,
    TBC_TEXT_EMOTE_EYE = 38,
    TBC_TEXT_EMOTE_FART = 39,
    TBC_TEXT_EMOTE_FIDGET = 40,
    TBC_TEXT_EMOTE_FLEX = 41,
    TBC_TEXT_EMOTE_FROWN = 42,
    TBC_TEXT_EMOTE_GASP = 43,
    TBC_TEXT_EMOTE_GAZE = 44,
    TBC_TEXT_EMOTE_GIGGLE = 45,
    TBC_TEXT_EMOTE_GLARE = 46,
    TBC_TEXT_EMOTE_GLOAT = 47,
    TBC_TEXT_EMOTE_GREET = 48,
    TBC_TEXT_EMOTE_GRIN = 49,
    TBC_TEXT_EMOTE_GROAN = 50,
    TBC_TEXT_EMOTE_GROVEL = 51,
    TBC_TEXT_EMOTE_GUFFAW = 52,
    TBC_TEXT_EMOTE_HAIL = 53,
    TBC_TEXT_EMOTE_HAPPY = 54,
    TBC_TEXT_EMOTE_HELLO = 55,
    TBC_TEXT_EMOTE_HUG = 56,
    TBC_TEXT_EMOTE_HUNGRY = 57,
    TBC_TEXT_EMOTE_KISS = 58,
    TBC_TEXT_EMOTE_KNEEL = 59,
    TBC_TEXT_EMOTE_LAUGH = 60,
    TBC_TEXT_EMOTE_LAYDOWN = 61,
    TBC_TEXT_EMOTE_MASSAGE = 62,
    TBC_TEXT_EMOTE_MOAN = 63,
    TBC_TEXT_EMOTE_MOON = 64,
    TBC_TEXT_EMOTE_MOURN = 65,
    TBC_TEXT_EMOTE_NO = 66,
    TBC_TEXT_EMOTE_NOD = 67,
    TBC_TEXT_EMOTE_NOSE_PICK = 68,
    TBC_TEXT_EMOTE_PANIC = 69,
    TBC_TEXT_EMOTE_PEER = 70,
    TBC_TEXT_EMOTE_PLEAD = 71,
    TBC_TEXT_EMOTE_POINT = 72,
    TBC_TEXT_EMOTE_POKE = 73,
    TBC_TEXT_EMOTE_PRAY = 74,
    TBC_TEXT_EMOTE_ROAR = 75,
    TBC_TEXT_EMOTE_ROFL = 76,
    TBC_TEXT_EMOTE_RUDE = 77,
    TBC_TEXT_EMOTE_SALUTE = 78,
    TBC_TEXT_EMOTE_SCRATCH = 79,
    TBC_TEXT_EMOTE_SEXY = 80,
    TBC_TEXT_EMOTE_SHAKE = 81,
    TBC_TEXT_EMOTE_SHOUT = 82,
    TBC_TEXT_EMOTE_SHRUG = 83,
    TBC_TEXT_EMOTE_SHY = 84,
    TBC_TEXT_EMOTE_SIGH = 85,
    TBC_TEXT_EMOTE_SIT = 86,
    TBC_TEXT_EMOTE_SLEEP = 87,
    TBC_TEXT_EMOTE_SNARL = 88,
    TBC_TEXT_EMOTE_SPIT = 89,
    TBC_TEXT_EMOTE_STARE = 90,
    TBC_TEXT_EMOTE_SURPRISED = 91,
    TBC_TEXT_EMOTE_SURRENDER = 92,
    TBC_TEXT_EMOTE_TALK = 93,
    TBC_TEXT_EMOTE_TALK_EX = 94,
    TBC_TEXT_EMOTE_TALK_Q = 95,
    TBC_TEXT_EMOTE_TAP = 96,
    TBC_TEXT_EMOTE_THANK = 97,
    TBC_TEXT_EMOTE_THREATEN = 98,
    TBC_TEXT_EMOTE_TIRED = 99,
    TBC_TEXT_EMOTE_VICTORY = 100,
    TBC_TEXT_EMOTE_WAVE = 101,
    TBC_TEXT_EMOTE_WELCOME = 102,
    TBC_TEXT_EMOTE_WHINE = 103,
    TBC_TEXT_EMOTE_WHISTLE = 104,
    TBC_TEXT_EMOTE_WORK = 105,
    TBC_TEXT_EMOTE_YAWN = 106,
    TBC_TEXT_EMOTE_BOGGLE = 107,
    TBC_TEXT_EMOTE_CALM = 108,
    TBC_TEXT_EMOTE_COLD = 109,
    TBC_TEXT_EMOTE_COMFORT = 110,
    TBC_TEXT_EMOTE_CUDDLE = 111,
    TBC_TEXT_EMOTE_DUCK = 112,
    TBC_TEXT_EMOTE_INSULT = 113,
    TBC_TEXT_EMOTE_INTRODUCE = 114,
    TBC_TEXT_EMOTE_JK = 115,
    TBC_TEXT_EMOTE_LICK = 116,
    TBC_TEXT_EMOTE_LISTEN = 117,
    TBC_TEXT_EMOTE_LOST = 118,
    TBC_TEXT_EMOTE_MOCK = 119,
    TBC_TEXT_EMOTE_PONDER = 120,
    TBC_TEXT_EMOTE_POUNCE = 121,
    TBC_TEXT_EMOTE_PRAISE = 122,
    TBC_TEXT_EMOTE_PURR = 123,
    TBC_TEXT_EMOTE_PUZZLE = 124,
    TBC_TEXT_EMOTE_RAISE = 125,
    TBC_TEXT_EMOTE_READY = 126,
    TBC_TEXT_EMOTE_SHIMMY = 127,
    TBC_TEXT_EMOTE_SHIVER = 128,
    TBC_TEXT_EMOTE_SHOO = 129,
    TBC_TEXT_EMOTE_SLAP = 130,
    TBC_TEXT_EMOTE_SMIRK = 131,
    TBC_TEXT_EMOTE_SNIFF = 132,
    TBC_TEXT_EMOTE_SNUB = 133,
    TBC_TEXT_EMOTE_SOOTHE = 134,
    TBC_TEXT_EMOTE_STINK = 135,
    TBC_TEXT_EMOTE_TAUNT = 136,
    TBC_TEXT_EMOTE_TEASE = 137,
    TBC_TEXT_EMOTE_THIRSTY = 138,
    TBC_TEXT_EMOTE_VETO = 139,
    TBC_TEXT_EMOTE_SNICKER = 140,
    TBC_TEXT_EMOTE_STAND = 141,
    TBC_TEXT_EMOTE_TICKLE = 142,
    TBC_TEXT_EMOTE_VIOLIN = 143,
    TBC_TEXT_EMOTE_SMILE = 163,
    TBC_TEXT_EMOTE_RASP = 183,
    TBC_TEXT_EMOTE_PITY = 203,
    TBC_TEXT_EMOTE_GROWL = 204,
    TBC_TEXT_EMOTE_BARK = 205,
    TBC_TEXT_EMOTE_SCARED = 223,
    TBC_TEXT_EMOTE_FLOP = 224,
    TBC_TEXT_EMOTE_LOVE = 225,
    TBC_TEXT_EMOTE_MOO = 226,
    TBC_TEXT_EMOTE_COMMEND = 243,
    TBC_TEXT_EMOTE_TRAIN = 264,
    TBC_TEXT_EMOTE_HELPME = 303,
    TBC_TEXT_EMOTE_INCOMING = 304,
    TBC_TEXT_EMOTE_CHARGE = 305,
    TBC_TEXT_EMOTE_FLEE = 306,
    TBC_TEXT_EMOTE_ATTACK_MY_TARGET = 307,
    TBC_TEXT_EMOTE_OOM = 323,
    TBC_TEXT_EMOTE_FOLLOW = 324,
    TBC_TEXT_EMOTE_WAIT = 325,
    TBC_TEXT_EMOTE_HEAL_ME = 326,
    TBC_TEXT_EMOTE_OPEN_FIRE = 327,
    TBC_TEXT_EMOTE_FLIRT = 328,
    TBC_TEXT_EMOTE_JOKE = 329,
    TBC_TEXT_EMOTE_GOLF_CLAP = 343,
    TBC_TEXT_EMOTE_WINK = 363,
    TBC_TEXT_EMOTE_PAT = 364,
    TBC_TEXT_EMOTE_SERIOUS = 365,
    TBC_TEXT_EMOTE_MOUNT_SPECIAL = 366,
    TBC_TEXT_EMOTE_GOOD_LUCK = 367,
    TBC_TEXT_EMOTE_BLAME = 368,
    TBC_TEXT_EMOTE_BLANK = 369,
    TBC_TEXT_EMOTE_BRANDISH = 370,
    TBC_TEXT_EMOTE_BREATH = 371,
    TBC_TEXT_EMOTE_DISAGREE = 372,
    TBC_TEXT_EMOTE_DOUBT = 373,
    TBC_TEXT_EMOTE_EMBARRASS = 374,
    TBC_TEXT_EMOTE_ENCOURAGE = 375,
    TBC_TEXT_EMOTE_ENEMY = 376,
    TBC_TEXT_EMOTE_EYE_BROW = 377,
    TBC_TEXT_EMOTE_TOAST = 378
} tbc_TextEmote;

typedef enum {
    TBC_TIMER_TYPE_FATIGUE = 0,
    TBC_TIMER_TYPE_BREATH = 1,
    TBC_TIMER_TYPE_FEIGN_DEATH = 2,
    TBC_TIMER_TYPE_ENVIRONMENTAL = 3
} tbc_TimerType;

typedef enum {
    TBC_TITLE_EARN_STATUS_LOST = 0,
    TBC_TITLE_EARN_STATUS_EARNED = 1
} tbc_TitleEarnStatus;

typedef enum {
    TBC_TRADE_STATUS_BUSY = 0,
    TBC_TRADE_STATUS_BEGIN_TRADE = 1,
    TBC_TRADE_STATUS_OPEN_WINDOW = 2,
    TBC_TRADE_STATUS_TRADE_CANCELED = 3,
    TBC_TRADE_STATUS_TRADE_ACCEPT = 4,
    TBC_TRADE_STATUS_BUSY_2 = 5,
    TBC_TRADE_STATUS_NO_TARGET = 6,
    TBC_TRADE_STATUS_BACK_TO_TRADE = 7,
    TBC_TRADE_STATUS_TRADE_COMPLETE = 8,
    TBC_TRADE_STATUS_TRADE_REJECTED = 9,
    TBC_TRADE_STATUS_TARGET_TO_FAR = 10,
    TBC_TRADE_STATUS_WRONG_FACTION = 11,
    TBC_TRADE_STATUS_CLOSE_WINDOW = 12,
    TBC_TRADE_STATUS_UNKNOWN_13 = 13,
    TBC_TRADE_STATUS_IGNORE_YOU = 14,
    TBC_TRADE_STATUS_YOU_STUNNED = 15,
    TBC_TRADE_STATUS_TARGET_STUNNED = 16,
    TBC_TRADE_STATUS_YOU_DEAD = 17,
    TBC_TRADE_STATUS_TARGET_DEAD = 18,
    TBC_TRADE_STATUS_YOU_LOGOUT = 19,
    TBC_TRADE_STATUS_TARGET_LOGOUT = 20,
    TBC_TRADE_STATUS_TRIAL_ACCOUNT = 21,
    TBC_TRADE_STATUS_ONLY_CONJURED = 22,
    TBC_TRADE_STATUS_NOT_ON_TAPLIST = 23
} tbc_TradeStatus;

typedef enum {
    TBC_TRAINER_SPELL_STATE_GREEN = 0,
    TBC_TRAINER_SPELL_STATE_RED = 1,
    TBC_TRAINER_SPELL_STATE_GRAY = 2
} tbc_TrainerSpellState;

typedef enum {
    TBC_TRAINING_FAILURE_REASON_UNAVAILABLE = 0,
    TBC_TRAINING_FAILURE_REASON_NOT_ENOUGH_MONEY = 1,
    TBC_TRAINING_FAILURE_REASON_NOT_ENOUGH_SKILL = 2
} tbc_TrainingFailureReason;

typedef enum {
    TBC_TRANSFER_ABORT_REASON_NONE = 0,
    TBC_TRANSFER_ABORT_REASON_IS_FULL = 1,
    TBC_TRANSFER_ABORT_REASON_NOT_FOUND = 2,
    TBC_TRANSFER_ABORT_REASON_TOO_MANY_INSTANCES = 3,
    TBC_TRANSFER_ABORT_REASON_ZONE_IS_IN_COMBAT = 5,
    TBC_TRANSFER_ABORT_REASON_INSUFFICIENT_EXPANSION_LEVEL = 6,
    TBC_TRANSFER_ABORT_REASON_DIFFICULTY_NOT_AVAILABLE = 7,
    TBC_TRANSFER_ABORT_REASON_MISSING_DIFFICULTY = 8,
    TBC_TRANSFER_ABORT_REASON_ZONE_IN_COMBAT = 9,
    TBC_TRANSFER_ABORT_REASON_INSTANCE_IS_FULL = 10,
    TBC_TRANSFER_ABORT_REASON_NOT_ALLOWED = 11,
    TBC_TRANSFER_ABORT_REASON_HAS_BIND = 12
} tbc_TransferAbortReason;

typedef enum {
    TBC_UNIT_STAND_STATE_STAND = 0,
    TBC_UNIT_STAND_STATE_SIT = 1,
    TBC_UNIT_STAND_STATE_SIT_CHAIR = 2,
    TBC_UNIT_STAND_STATE_SLEEP = 3,
    TBC_UNIT_STAND_STATE_SIT_LOW_CHAIR = 4,
    TBC_UNIT_STAND_STATE_SIT_MEDIUM_CHAIR = 5,
    TBC_UNIT_STAND_STATE_SIT_HIGH_CHAIR = 6,
    TBC_UNIT_STAND_STATE_DEAD = 7,
    TBC_UNIT_STAND_STATE_KNEEL = 8,
    TBC_UNIT_STAND_STATE_CUSTOM = 9
} tbc_UnitStandState;

typedef enum {
    TBC_UPDATE_TYPE_VALUES = 0,
    TBC_UPDATE_TYPE_MOVEMENT = 1,
    TBC_UPDATE_TYPE_CREATE_OBJECT = 2,
    TBC_UPDATE_TYPE_CREATE_OBJECT2 = 3,
    TBC_UPDATE_TYPE_OUT_OF_RANGE_OBJECTS = 4,
    TBC_UPDATE_TYPE_NEAR_OBJECTS = 5
} tbc_UpdateType;

typedef enum {
    TBC_WEATHER_CHANGE_TYPE_SMOOTH = 0,
    TBC_WEATHER_CHANGE_TYPE_INSTANT = 1
} tbc_WeatherChangeType;

typedef enum {
    TBC_WEATHER_TYPE_FINE = 0,
    TBC_WEATHER_TYPE_LIGHT_RAIN = 3,
    TBC_WEATHER_TYPE_MEDIUM_RAIN = 4,
    TBC_WEATHER_TYPE_HEAVY_RAIN = 5,
    TBC_WEATHER_TYPE_LIGHT_SNOW = 6,
    TBC_WEATHER_TYPE_MEDIUM_SNOW = 7,
    TBC_WEATHER_TYPE_HEAVY_SNOW = 8,
    TBC_WEATHER_TYPE_LIGHT_SANDSTORM = 22,
    TBC_WEATHER_TYPE_MEDIUM_SANDSTORM = 41,
    TBC_WEATHER_TYPE_HEAVY_SANDSTORM = 42,
    TBC_WEATHER_TYPE_THUNDERS = 86,
    TBC_WEATHER_TYPE_BLACKRAIN = 90
} tbc_WeatherType;

typedef enum {
    TBC_WORLD_RESULT_RESPONSE_SUCCESS = 0,
    TBC_WORLD_RESULT_RESPONSE_FAILURE = 1,
    TBC_WORLD_RESULT_RESPONSE_CANCELLED = 2,
    TBC_WORLD_RESULT_RESPONSE_DISCONNECTED = 3,
    TBC_WORLD_RESULT_RESPONSE_FAILED_TO_CONNECT = 4,
    TBC_WORLD_RESULT_RESPONSE_CONNECTED = 5,
    TBC_WORLD_RESULT_RESPONSE_VERSION_MISMATCH = 6,
    TBC_WORLD_RESULT_CSTATUS_CONNECTING = 7,
    TBC_WORLD_RESULT_CSTATUS_NEGOTIATING_SECURITY = 8,
    TBC_WORLD_RESULT_CSTATUS_NEGOTIATION_COMPLETE = 9,
    TBC_WORLD_RESULT_CSTATUS_NEGOTIATION_FAILED = 10,
    TBC_WORLD_RESULT_CSTATUS_AUTHENTICATING = 11,
    TBC_WORLD_RESULT_AUTH_OK = 12,
    TBC_WORLD_RESULT_AUTH_FAILED = 13,
    TBC_WORLD_RESULT_AUTH_REJECT = 14,
    TBC_WORLD_RESULT_AUTH_BAD_SERVER_PROOF = 15,
    TBC_WORLD_RESULT_AUTH_UNAVAILABLE = 16,
    TBC_WORLD_RESULT_AUTH_SYSTEM_ERROR = 17,
    TBC_WORLD_RESULT_AUTH_BILLING_ERROR = 18,
    TBC_WORLD_RESULT_AUTH_BILLING_EXPIRED = 19,
    TBC_WORLD_RESULT_AUTH_VERSION_MISMATCH = 20,
    TBC_WORLD_RESULT_AUTH_UNKNOWN_ACCOUNT = 21,
    TBC_WORLD_RESULT_AUTH_INCORRECT_PASSWORD = 22,
    TBC_WORLD_RESULT_AUTH_SESSION_EXPIRED = 23,
    TBC_WORLD_RESULT_AUTH_SERVER_SHUTTING_DOWN = 24,
    TBC_WORLD_RESULT_AUTH_ALREADY_LOGGING_IN = 25,
    TBC_WORLD_RESULT_AUTH_LOGIN_SERVER_NOT_FOUND = 26,
    TBC_WORLD_RESULT_AUTH_WAIT_QUEUE = 27,
    TBC_WORLD_RESULT_AUTH_BANNED = 28,
    TBC_WORLD_RESULT_AUTH_ALREADY_ONLINE = 29,
    TBC_WORLD_RESULT_AUTH_NO_TIME = 30,
    TBC_WORLD_RESULT_AUTH_DB_BUSY = 31,
    TBC_WORLD_RESULT_AUTH_SUSPENDED = 32,
    TBC_WORLD_RESULT_AUTH_PARENTAL_CONTROL = 33,
    TBC_WORLD_RESULT_AUTH_LOCKED_ENFORCED = 34,
    TBC_WORLD_RESULT_REALM_LIST_IN_PROGRESS = 35,
    TBC_WORLD_RESULT_REALM_LIST_SUCCESS = 36,
    TBC_WORLD_RESULT_REALM_LIST_FAILED = 37,
    TBC_WORLD_RESULT_REALM_LIST_INVALID = 38,
    TBC_WORLD_RESULT_REALM_LIST_REALM_NOT_FOUND = 39,
    TBC_WORLD_RESULT_ACCOUNT_CREATE_IN_PROGRESS = 40,
    TBC_WORLD_RESULT_ACCOUNT_CREATE_SUCCESS = 41,
    TBC_WORLD_RESULT_ACCOUNT_CREATE_FAILED = 42,
    TBC_WORLD_RESULT_CHAR_LIST_RETRIEVING = 43,
    TBC_WORLD_RESULT_CHAR_LIST_RETRIEVED = 44,
    TBC_WORLD_RESULT_CHAR_LIST_FAILED = 45,
    TBC_WORLD_RESULT_CHAR_CREATE_IN_PROGRESS = 46,
    TBC_WORLD_RESULT_CHAR_CREATE_SUCCESS = 47,
    TBC_WORLD_RESULT_CHAR_CREATE_ERROR = 48,
    TBC_WORLD_RESULT_CHAR_CREATE_FAILED = 49,
    TBC_WORLD_RESULT_CHAR_CREATE_NAME_IN_USE = 50,
    TBC_WORLD_RESULT_CHAR_CREATE_DISABLED = 51,
    TBC_WORLD_RESULT_CHAR_CREATE_PVP_TEAMS_VIOLATION = 52,
    TBC_WORLD_RESULT_CHAR_CREATE_SERVER_LIMIT = 53,
    TBC_WORLD_RESULT_CHAR_CREATE_ACCOUNT_LIMIT = 54,
    TBC_WORLD_RESULT_CHAR_CREATE_SERVER_QUEUE = 55,
    TBC_WORLD_RESULT_CHAR_CREATE_ONLY_EXISTING = 56,
    TBC_WORLD_RESULT_CHAR_CREATE_EXPANSION = 57,
    TBC_WORLD_RESULT_CHAR_DELETE_IN_PROGRESS = 58,
    TBC_WORLD_RESULT_CHAR_DELETE_SUCCESS = 59,
    TBC_WORLD_RESULT_CHAR_DELETE_FAILED = 60,
    TBC_WORLD_RESULT_CHAR_DELETE_FAILED_LOCKED_FOR_TRANSFER = 61,
    TBC_WORLD_RESULT_CHAR_DELETE_FAILED_GUILD_LEADER = 62,
    TBC_WORLD_RESULT_CHAR_DELETE_FAILED_ARENA_CAPTAIN = 63,
    TBC_WORLD_RESULT_CHAR_LOGIN_IN_PROGRESS = 64,
    TBC_WORLD_RESULT_CHAR_LOGIN_SUCCESS = 65,
    TBC_WORLD_RESULT_CHAR_LOGIN_NO_WORLD = 66,
    TBC_WORLD_RESULT_CHAR_LOGIN_DUPLICATE_CHARACTER = 67,
    TBC_WORLD_RESULT_CHAR_LOGIN_NO_INSTANCES = 68,
    TBC_WORLD_RESULT_CHAR_LOGIN_FAILED = 69,
    TBC_WORLD_RESULT_CHAR_LOGIN_DISABLED = 70,
    TBC_WORLD_RESULT_CHAR_LOGIN_NO_CHARACTER = 71,
    TBC_WORLD_RESULT_CHAR_LOGIN_LOCKED_FOR_TRANSFER = 72,
    TBC_WORLD_RESULT_CHAR_LOGIN_LOCKED_BY_BILLING = 73,
    TBC_WORLD_RESULT_CHAR_NAME_SUCCESS = 74,
    TBC_WORLD_RESULT_CHAR_NAME_FAILURE = 75,
    TBC_WORLD_RESULT_CHAR_NAME_NO_NAME = 76,
    TBC_WORLD_RESULT_CHAR_NAME_TOO_SHORT = 77,
    TBC_WORLD_RESULT_CHAR_NAME_TOO_LONG = 78,
    TBC_WORLD_RESULT_CHAR_NAME_INVALID_CHARACTER = 79,
    TBC_WORLD_RESULT_CHAR_NAME_MIXED_LANGUAGES = 80,
    TBC_WORLD_RESULT_CHAR_NAME_PROFANE = 81,
    TBC_WORLD_RESULT_CHAR_NAME_RESERVED = 82,
    TBC_WORLD_RESULT_CHAR_NAME_INVALID_APOSTROPHE = 83,
    TBC_WORLD_RESULT_CHAR_NAME_MULTIPLE_APOSTROPHES = 84,
    TBC_WORLD_RESULT_CHAR_NAME_THREE_CONSECUTIVE = 85,
    TBC_WORLD_RESULT_CHAR_NAME_INVALID_SPACE = 86,
    TBC_WORLD_RESULT_CHAR_NAME_CONSECUTIVE_SPACES = 87,
    TBC_WORLD_RESULT_CHAR_NAME_RUSSIAN_CONSECUTIVE_SILENT_CHARACTERS = 88,
    TBC_WORLD_RESULT_CHAR_NAME_RUSSIAN_SILENT_CHARACTER_AT_BEGINNING_OR_END = 89,
    TBC_WORLD_RESULT_CHAR_NAME_DECLENSION_DOESNT_MATCH_BASE_NAME = 90
} tbc_WorldResult;

typedef enum {
    TBC_ALLOWED_CLASS_ALL = 0,
    TBC_ALLOWED_CLASS_WARRIOR = 1,
    TBC_ALLOWED_CLASS_PALADIN = 2,
    TBC_ALLOWED_CLASS_HUNTER = 4,
    TBC_ALLOWED_CLASS_ROGUE = 8,
    TBC_ALLOWED_CLASS_PRIEST = 16,
    TBC_ALLOWED_CLASS_SHAMAN = 64,
    TBC_ALLOWED_CLASS_MAGE = 128,
    TBC_ALLOWED_CLASS_WARLOCK = 256,
    TBC_ALLOWED_CLASS_DRUID = 1024
} tbc_AllowedClass;

typedef enum {
    TBC_ALLOWED_RACE_ALL = 0,
    TBC_ALLOWED_RACE_HUMAN = 1,
    TBC_ALLOWED_RACE_ORC = 2,
    TBC_ALLOWED_RACE_DWARF = 4,
    TBC_ALLOWED_RACE_NIGHT_ELF = 8,
    TBC_ALLOWED_RACE_UNDEAD = 16,
    TBC_ALLOWED_RACE_TAUREN = 32,
    TBC_ALLOWED_RACE_GNOME = 64,
    TBC_ALLOWED_RACE_TROLL = 128,
    TBC_ALLOWED_RACE_GOBLIN = 256,
    TBC_ALLOWED_RACE_BLOODELF = 512,
    TBC_ALLOWED_RACE_DRAENEI = 1024,
    TBC_ALLOWED_RACE_FEL_ORC = 2048,
    TBC_ALLOWED_RACE_NAGA = 4096,
    TBC_ALLOWED_RACE_BROKEN = 8192,
    TBC_ALLOWED_RACE_SKELETON = 16384,
    TBC_ALLOWED_RACE_VRYKUL = 32768,
    TBC_ALLOWED_RACE_TUSKARR = 65536,
    TBC_ALLOWED_RACE_FOREST_TROLL = 131072
} tbc_AllowedRace;

typedef enum {
    TBC_BAG_FAMILY_NONE = 0,
    TBC_BAG_FAMILY_ARROWS = 1,
    TBC_BAG_FAMILY_BULLETS = 2,
    TBC_BAG_FAMILY_SOUL_SHARDS = 4,
    TBC_BAG_FAMILY_LEATHERWORKING_SUPPLIES = 8,
    TBC_BAG_FAMILY_INSCRIPTION_SUPPLIES = 16,
    TBC_BAG_FAMILY_HERBS = 32,
    TBC_BAG_FAMILY_ENCHANTING_SUPPLIES = 64,
    TBC_BAG_FAMILY_ENGINEERING_SUPPLIES = 128,
    TBC_BAG_FAMILY_KEYS = 256,
    TBC_BAG_FAMILY_GEMS = 512,
    TBC_BAG_FAMILY_MINING_SUPPLIES = 1024,
    TBC_BAG_FAMILY_SOULBOUND_EQUIPMENT = 2048,
    TBC_BAG_FAMILY_VANITY_PETS = 4096,
    TBC_BAG_FAMILY_CURRENCY_TOKENS = 8192,
    TBC_BAG_FAMILY_QUEST_ITEMS = 16384
} tbc_BagFamily;

typedef enum {
    TBC_BILLING_PLAN_FLAGS_NONE = 0,
    TBC_BILLING_PLAN_FLAGS_UNUSED = 1,
    TBC_BILLING_PLAN_FLAGS_RECURRING_BILL = 2,
    TBC_BILLING_PLAN_FLAGS_FREE_TRIAL = 4,
    TBC_BILLING_PLAN_FLAGS_IGR = 8,
    TBC_BILLING_PLAN_FLAGS_USAGE = 16,
    TBC_BILLING_PLAN_FLAGS_TIME_MIXTURE = 32,
    TBC_BILLING_PLAN_FLAGS_RESTRICTED = 64,
    TBC_BILLING_PLAN_FLAGS_ENABLE_CAIS = 128
} tbc_BillingPlanFlags;

typedef enum {
    TBC_CAST_FLAGS_NONE = 0,
    TBC_CAST_FLAGS_HIDDEN_COMBATLOG = 1,
    TBC_CAST_FLAGS_UNKNOWN2 = 2,
    TBC_CAST_FLAGS_UNKNOWN3 = 4,
    TBC_CAST_FLAGS_UNKNOWN4 = 8,
    TBC_CAST_FLAGS_UNKNOWN5 = 16,
    TBC_CAST_FLAGS_AMMO = 32,
    TBC_CAST_FLAGS_UNKNOWN7 = 64,
    TBC_CAST_FLAGS_UNKNOWN8 = 128,
    TBC_CAST_FLAGS_UNKNOWN9 = 256
} tbc_CastFlags;

typedef enum {
    TBC_CHANNEL_FLAGS_NONE = 0,
    TBC_CHANNEL_FLAGS_CUSTOM = 1,
    TBC_CHANNEL_FLAGS_TRADE = 4,
    TBC_CHANNEL_FLAGS_NOT_LFG = 8,
    TBC_CHANNEL_FLAGS_GENERAL = 16,
    TBC_CHANNEL_FLAGS_CITY = 32,
    TBC_CHANNEL_FLAGS_LFG = 64,
    TBC_CHANNEL_FLAGS_VOICE = 128
} tbc_ChannelFlags;

typedef enum {
    TBC_CHANNEL_MEMBER_FLAGS_NONE = 0,
    TBC_CHANNEL_MEMBER_FLAGS_OWNER = 1,
    TBC_CHANNEL_MEMBER_FLAGS_MODERATOR = 4,
    TBC_CHANNEL_MEMBER_FLAGS_VOICED = 8,
    TBC_CHANNEL_MEMBER_FLAGS_MUTED = 16,
    TBC_CHANNEL_MEMBER_FLAGS_CUSTOM = 32,
    TBC_CHANNEL_MEMBER_FLAGS_MICROPHONE_MUTE = 64
} tbc_ChannelMemberFlags;

typedef enum {
    TBC_FACTION_FLAG_VISIBLE = 1,
    TBC_FACTION_FLAG_AT_WAR = 2,
    TBC_FACTION_FLAG_HIDDEN = 4,
    TBC_FACTION_FLAG_INVISIBLE_FORCED = 8,
    TBC_FACTION_FLAG_PEACE_FORCED = 16,
    TBC_FACTION_FLAG_INACTIVE = 32,
    TBC_FACTION_FLAG_RIVAL = 64
} tbc_FactionFlag;

typedef enum {
    TBC_GROUP_MEMBER_ONLINE_STATUS_OFFLINE = 0,
    TBC_GROUP_MEMBER_ONLINE_STATUS_ONLINE = 1,
    TBC_GROUP_MEMBER_ONLINE_STATUS_PVP = 2,
    TBC_GROUP_MEMBER_ONLINE_STATUS_DEAD = 4,
    TBC_GROUP_MEMBER_ONLINE_STATUS_GHOST = 8,
    TBC_GROUP_MEMBER_ONLINE_STATUS_PVP_FFA = 16,
    TBC_GROUP_MEMBER_ONLINE_STATUS_ZONE_OUT = 32,
    TBC_GROUP_MEMBER_ONLINE_STATUS_AFK = 64,
    TBC_GROUP_MEMBER_ONLINE_STATUS_DND = 128
} tbc_GroupMemberOnlineStatus;

typedef enum {
    TBC_GROUP_UPDATE_FLAGS_NONE = 0,
    TBC_GROUP_UPDATE_FLAGS_STATUS = 1,
    TBC_GROUP_UPDATE_FLAGS_CUR_HP = 2,
    TBC_GROUP_UPDATE_FLAGS_MAX_HP = 4,
    TBC_GROUP_UPDATE_FLAGS_POWER_TYPE = 8,
    TBC_GROUP_UPDATE_FLAGS_CUR_POWER = 16,
    TBC_GROUP_UPDATE_FLAGS_MAX_POWER = 32,
    TBC_GROUP_UPDATE_FLAGS_LEVEL = 64,
    TBC_GROUP_UPDATE_FLAGS_ZONE = 128,
    TBC_GROUP_UPDATE_FLAGS_POSITION = 256,
    TBC_GROUP_UPDATE_FLAGS_AURAS = 512,
    TBC_GROUP_UPDATE_FLAGS_PET_GUID = 1024,
    TBC_GROUP_UPDATE_FLAGS_PET_NAME = 2048,
    TBC_GROUP_UPDATE_FLAGS_PET_MODEL_ID = 4096,
    TBC_GROUP_UPDATE_FLAGS_PET_CUR_HP = 8192,
    TBC_GROUP_UPDATE_FLAGS_PET_MAX_HP = 16384,
    TBC_GROUP_UPDATE_FLAGS_PET_POWER_TYPE = 32768,
    TBC_GROUP_UPDATE_FLAGS_PET_CUR_POWER = 65536,
    TBC_GROUP_UPDATE_FLAGS_PET_MAX_POWER = 131072,
    TBC_GROUP_UPDATE_FLAGS_PET_AURAS = 262144
} tbc_GroupUpdateFlags;

typedef enum {
    TBC_ITEM_FLAG_NO_PICKUP = 1,
    TBC_ITEM_FLAG_CONJURED = 2,
    TBC_ITEM_FLAG_LOOTABLE = 4,
    TBC_ITEM_FLAG_DEPRECATED = 16,
    TBC_ITEM_FLAG_INDESTRUCTIBLE = 32,
    TBC_ITEM_FLAG_PLAYER_CAST = 64,
    TBC_ITEM_FLAG_NO_EQUIP_COOLDOWN = 128,
    TBC_ITEM_FLAG_INT_BONUS_INSTEAD = 256,
    TBC_ITEM_FLAG_WRAPPER = 512,
    TBC_ITEM_FLAG_IGNORE_BAG_SPACE = 1024,
    TBC_ITEM_FLAG_PARTY_LOOT = 2048,
    TBC_ITEM_FLAG_CHARTER = 8192,
    TBC_ITEM_FLAG_LETTER = 16384,
    TBC_ITEM_FLAG_NO_DISENCHANT = 32768,
    TBC_ITEM_FLAG_REAL_DURATION = 65536,
    TBC_ITEM_FLAG_NO_CREATOR = 131072,
    TBC_ITEM_FLAG_PROSPECTABLE = 262144,
    TBC_ITEM_FLAG_UNIQUE_EQUIPPED = 524288,
    TBC_ITEM_FLAG_IGNORE_FOR_AURAS = 1048576,
    TBC_ITEM_FLAG_IGNORE_DEFAULT_ARENA_RESTRICTIONS = 2097152,
    TBC_ITEM_FLAG_NO_DURABILITY_LOSS = 4194304,
    TBC_ITEM_FLAG_SPECIAL_USE = 8388608
} tbc_ItemFlag;

typedef enum {
    TBC_MOVEMENT_FLAGS_NONE = 0,
    TBC_MOVEMENT_FLAGS_FORWARD = 1,
    TBC_MOVEMENT_FLAGS_BACKWARD = 2,
    TBC_MOVEMENT_FLAGS_STRAFE_LEFT = 4,
    TBC_MOVEMENT_FLAGS_STRAFE_RIGHT = 8,
    TBC_MOVEMENT_FLAGS_TURN_LEFT = 16,
    TBC_MOVEMENT_FLAGS_TURN_RIGHT = 32,
    TBC_MOVEMENT_FLAGS_PITCH_UP = 64,
    TBC_MOVEMENT_FLAGS_PITCH_DOWN = 128,
    TBC_MOVEMENT_FLAGS_WALK_MODE = 256,
    TBC_MOVEMENT_FLAGS_ON_TRANSPORT = 512,
    TBC_MOVEMENT_FLAGS_LEVITATING = 1024,
    TBC_MOVEMENT_FLAGS_FIXED_Z = 2048,
    TBC_MOVEMENT_FLAGS_ROOT = 4096,
    TBC_MOVEMENT_FLAGS_JUMPING = 8192,
    TBC_MOVEMENT_FLAGS_FALLINGFAR = 16384,
    TBC_MOVEMENT_FLAGS_SWIMMING = 2097152,
    TBC_MOVEMENT_FLAGS_ASCENDING = 4194304,
    TBC_MOVEMENT_FLAGS_CAN_FLY = 8388608,
    TBC_MOVEMENT_FLAGS_FLYING = 16777216,
    TBC_MOVEMENT_FLAGS_ONTRANSPORT = 33554432,
    TBC_MOVEMENT_FLAGS_SPLINE_ELEVATION = 67108864,
    TBC_MOVEMENT_FLAGS_SPLINE_ENABLED = 134217728,
    TBC_MOVEMENT_FLAGS_WATERWALKING = 268435456,
    TBC_MOVEMENT_FLAGS_SAFE_FALL = 536870912,
    TBC_MOVEMENT_FLAGS_HOVER = 1073741824
} tbc_MovementFlags;

typedef enum {
    TBC_RELATION_TYPE_NONE = 0,
    TBC_RELATION_TYPE_FRIEND = 1,
    TBC_RELATION_TYPE_IGNORED = 2,
    TBC_RELATION_TYPE_MUTED = 4,
    TBC_RELATION_TYPE_RECRUITAFRIEND = 8
} tbc_RelationType;

typedef enum {
    TBC_SPELL_CAST_TARGET_FLAGS_SELF = 0,
    TBC_SPELL_CAST_TARGET_FLAGS_UNUSED1 = 1,
    TBC_SPELL_CAST_TARGET_FLAGS_UNIT = 2,
    TBC_SPELL_CAST_TARGET_FLAGS_UNIT_RAID = 4,
    TBC_SPELL_CAST_TARGET_FLAGS_UNIT_PARTY = 8,
    TBC_SPELL_CAST_TARGET_FLAGS_ITEM = 16,
    TBC_SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION = 32,
    TBC_SPELL_CAST_TARGET_FLAGS_DEST_LOCATION = 64,
    TBC_SPELL_CAST_TARGET_FLAGS_UNIT_ENEMY = 128,
    TBC_SPELL_CAST_TARGET_FLAGS_UNIT_ALLY = 256,
    TBC_SPELL_CAST_TARGET_FLAGS_CORPSE_ENEMY = 512,
    TBC_SPELL_CAST_TARGET_FLAGS_UNIT_DEAD = 1024,
    TBC_SPELL_CAST_TARGET_FLAGS_GAMEOBJECT = 2048,
    TBC_SPELL_CAST_TARGET_FLAGS_TRADE_ITEM = 4096,
    TBC_SPELL_CAST_TARGET_FLAGS_STRING = 8192,
    TBC_SPELL_CAST_TARGET_FLAGS_LOCKED = 16384,
    TBC_SPELL_CAST_TARGET_FLAGS_CORPSE_ALLY = 32768,
    TBC_SPELL_CAST_TARGET_FLAGS_UNIT_MINIPET = 65536
} tbc_SpellCastTargetFlags;

typedef enum {
    TBC_SPLINE_FLAG_NONE = 0,
    TBC_SPLINE_FLAG_DONE = 1,
    TBC_SPLINE_FLAG_FALLING = 2,
    TBC_SPLINE_FLAG_UNKNOWN3 = 4,
    TBC_SPLINE_FLAG_UNKNOWN4 = 8,
    TBC_SPLINE_FLAG_UNKNOWN5 = 16,
    TBC_SPLINE_FLAG_UNKNOWN6 = 32,
    TBC_SPLINE_FLAG_UNKNOWN7 = 64,
    TBC_SPLINE_FLAG_UNKNOWN8 = 128,
    TBC_SPLINE_FLAG_RUN_MODE = 256,
    TBC_SPLINE_FLAG_FLYING = 512,
    TBC_SPLINE_FLAG_NO_SPLINE = 1024,
    TBC_SPLINE_FLAG_UNKNOWN12 = 2048,
    TBC_SPLINE_FLAG_UNKNOWN13 = 4096,
    TBC_SPLINE_FLAG_UNKNOWN14 = 8192,
    TBC_SPLINE_FLAG_UNKNOWN15 = 16384,
    TBC_SPLINE_FLAG_UNKNOWN16 = 32768,
    TBC_SPLINE_FLAG_FINAL_POINT = 65536,
    TBC_SPLINE_FLAG_FINAL_TARGET = 131072,
    TBC_SPLINE_FLAG_FINAL_ANGLE = 262144,
    TBC_SPLINE_FLAG_UNKNOWN19 = 524288,
    TBC_SPLINE_FLAG_CYCLIC = 1048576,
    TBC_SPLINE_FLAG_ENTER_CYCLE = 2097152,
    TBC_SPLINE_FLAG_FROZEN = 4194304,
    TBC_SPLINE_FLAG_UNKNOWN23 = 8388608,
    TBC_SPLINE_FLAG_UNKNOWN24 = 16777216,
    TBC_SPLINE_FLAG_UNKNOWN25 = 33554432,
    TBC_SPLINE_FLAG_UNKNOWN26 = 67108864,
    TBC_SPLINE_FLAG_UNKNOWN27 = 134217728,
    TBC_SPLINE_FLAG_UNKNOWN28 = 268435456,
    TBC_SPLINE_FLAG_UNKNOWN29 = 536870912,
    TBC_SPLINE_FLAG_UNKNOWN30 = 1073741824,
    TBC_SPLINE_FLAG_UNKNOWN31 = -2147483647 - 1
} tbc_SplineFlag;

typedef enum {
    TBC_UPDATE_FLAG_NONE = 0,
    TBC_UPDATE_FLAG_SELF = 1,
    TBC_UPDATE_FLAG_TRANSPORT = 2,
    TBC_UPDATE_FLAG_MELEE_ATTACKING = 4,
    TBC_UPDATE_FLAG_HIGH_GUID = 8,
    TBC_UPDATE_FLAG_ALL = 16,
    TBC_UPDATE_FLAG_LIVING = 32,
    TBC_UPDATE_FLAG_HAS_POSITION = 64
} tbc_UpdateFlag;

#define TBC_HEADERS_LENGTH 49
#define TBC_VALUES_LENGTH 1567

typedef struct {
    uint32_t headers[TBC_HEADERS_LENGTH];
    uint32_t values[TBC_VALUES_LENGTH];
} tbc_UpdateMask;

WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_object_guid_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_object_guid_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_object_type_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_object_type_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_object_entry_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_object_entry_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_object_scale_x_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_object_scale_x_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_owner_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_item_owner_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_contained_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_item_contained_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_creator_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_item_creator_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_giftcreator_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_item_giftcreator_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_stack_count_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_item_stack_count_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_duration_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_item_duration_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_spell_charges_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_item_spell_charges_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_flags_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_item_flags_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_enchantment_1_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_item_enchantment_1_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_property_seed_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_item_property_seed_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_random_properties_id_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_item_random_properties_id_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_item_text_id_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_item_item_text_id_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_durability_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_item_durability_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_item_maxdurability_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_item_maxdurability_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_container_num_slots_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_container_num_slots_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_container_slot_1_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_container_slot_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_charm_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_unit_charm_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_summon_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_unit_summon_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_charmedby_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_unit_charmedby_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_summonedby_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_unit_summonedby_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_createdby_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_unit_createdby_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_target_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_unit_target_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_persuaded_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_unit_persuaded_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_channel_object_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_unit_channel_object_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_health_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_health_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_power1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_power1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_power2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_power2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_power3_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_power3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_power4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_power4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_power5_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_power5_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_maxhealth_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_maxhealth_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_maxpower1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_maxpower1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_maxpower2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_maxpower2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_maxpower3_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_maxpower3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_maxpower4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_maxpower4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_maxpower5_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_maxpower5_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_level_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_level_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_factiontemplate_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_factiontemplate_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_bytes_0_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_unit_bytes_0_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_virtual_item_slot_display_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_virtual_item_slot_display_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_virtual_item_info_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_unit_virtual_item_info_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_flags_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_flags_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_flags_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_flags_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_aura_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_aura_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_auraflags_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_unit_auraflags_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_auralevels_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_unit_auralevels_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_auraapplications_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_unit_auraapplications_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_aurastate_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_aurastate_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_baseattacktime_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_baseattacktime_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_rangedattacktime_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_rangedattacktime_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_boundingradius_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_boundingradius_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_combatreach_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_combatreach_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_displayid_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_displayid_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_nativedisplayid_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_nativedisplayid_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_mountdisplayid_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_mountdisplayid_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_mindamage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_mindamage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_maxdamage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_maxdamage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_minoffhanddamage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_minoffhanddamage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_maxoffhanddamage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_maxoffhanddamage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_bytes_1_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_unit_bytes_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_petnumber_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_petnumber_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_pet_name_timestamp_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_pet_name_timestamp_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_petexperience_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_petexperience_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_petnextlevelexp_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_petnextlevelexp_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_dynamic_flags_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_dynamic_flags_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_channel_spell_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_channel_spell_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_mod_cast_speed_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_mod_cast_speed_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_created_by_spell_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_created_by_spell_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_npc_flags_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_npc_flags_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_npc_emotestate_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_npc_emotestate_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_training_points_set(tbc_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts tbc_update_mask_unit_training_points_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_strength_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_strength_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_agility_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_agility_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_stamina_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_stamina_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_intellect_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_intellect_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_spirit_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_spirit_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_posstat0_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_posstat0_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_posstat1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_posstat1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_posstat2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_posstat2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_posstat3_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_posstat3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_posstat4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_posstat4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_negstat0_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_negstat0_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_negstat1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_negstat1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_negstat2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_negstat2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_negstat3_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_negstat3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_negstat4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_negstat4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_resistances_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_resistances_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_resistancebuffmodspositive_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_resistancebuffmodspositive_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_resistancebuffmodsnegative_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_resistancebuffmodsnegative_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_base_mana_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_base_mana_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_base_health_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_base_health_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_bytes_2_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_unit_bytes_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_attack_power_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_attack_power_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_attack_power_mods_set(tbc_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts tbc_update_mask_unit_attack_power_mods_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_attack_power_multiplier_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_attack_power_multiplier_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_ranged_attack_power_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_ranged_attack_power_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_ranged_attack_power_mods_set(tbc_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts tbc_update_mask_unit_ranged_attack_power_mods_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_ranged_attack_power_multiplier_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_ranged_attack_power_multiplier_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_minrangeddamage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_minrangeddamage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_maxrangeddamage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_maxrangeddamage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_power_cost_modifier_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_unit_power_cost_modifier_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_power_cost_multiplier_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_power_cost_multiplier_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_unit_maxhealthmodifier_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_unit_maxhealthmodifier_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_duel_arbiter_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_player_duel_arbiter_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_flags_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_flags_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_guildid_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_guildid_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_guildrank_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_guildrank_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_field_bytes_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_field_bytes_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_bytes_2_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_bytes_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_bytes_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_bytes_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_duel_team_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_duel_team_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_guild_timestamp_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_guild_timestamp_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_1_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_1_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_1_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_1_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_1_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_1_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_1_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_1_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_2_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_2_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_2_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_2_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_2_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_2_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_2_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_2_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_3_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_3_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_3_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_3_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_3_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_3_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_3_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_3_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_4_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_4_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_4_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_4_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_4_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_4_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_4_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_4_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_5_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_5_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_5_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_5_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_5_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_5_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_5_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_5_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_6_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_6_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_6_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_6_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_6_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_6_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_6_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_6_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_7_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_7_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_7_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_7_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_7_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_7_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_7_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_7_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_8_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_8_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_8_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_8_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_8_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_8_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_8_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_8_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_9_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_9_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_9_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_9_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_9_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_9_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_9_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_9_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_10_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_10_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_10_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_10_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_10_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_10_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_10_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_10_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_11_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_11_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_11_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_11_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_11_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_11_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_11_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_11_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_12_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_12_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_12_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_12_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_12_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_12_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_12_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_12_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_13_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_13_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_13_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_13_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_13_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_13_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_13_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_13_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_14_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_14_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_14_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_14_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_14_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_14_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_14_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_14_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_15_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_15_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_15_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_15_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_15_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_15_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_15_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_15_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_16_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_16_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_16_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_16_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_16_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_16_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_16_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_16_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_17_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_17_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_17_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_17_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_17_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_17_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_17_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_17_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_18_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_18_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_18_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_18_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_18_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_18_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_18_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_18_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_19_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_19_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_19_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_19_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_19_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_19_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_19_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_19_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_20_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_20_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_20_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_20_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_20_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_20_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_20_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_20_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_21_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_21_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_21_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_21_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_21_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_21_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_21_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_21_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_22_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_22_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_22_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_22_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_22_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_22_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_22_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_22_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_23_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_23_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_23_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_23_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_23_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_23_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_23_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_23_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_24_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_24_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_24_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_24_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_24_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_24_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_24_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_24_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_25_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_25_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_25_2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_25_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_25_3_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_quest_log_25_3_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_quest_log_25_4_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_quest_log_25_4_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_visible_item_creator_set(tbc_UpdateMask* mask, uint32_t index, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_player_visible_item_creator_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_visible_item_item_set(tbc_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_visible_item_item_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_visible_item_enchants_set(tbc_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_visible_item_enchants_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_visible_item_random_property_id_set(tbc_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_visible_item_random_property_id_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_visible_item_item_suffix_factor_set(tbc_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_visible_item_item_suffix_factor_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_chosen_title_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_chosen_title_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_player_field_inv_get(const tbc_UpdateMask* mask, tbc_ItemSlot def);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_field_inv_set(tbc_UpdateMask* mask, tbc_ItemSlot def, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_farsight_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_player_farsight_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_known_titles_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_player_known_titles_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_xp_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_xp_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_next_level_xp_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_next_level_xp_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_skill_info_skill_set(tbc_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_skill_info_skill_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_skill_info_skill_step_set(tbc_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_skill_info_skill_step_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_skill_info_minimum_set(tbc_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_skill_info_minimum_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_skill_info_maximum_set(tbc_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_skill_info_maximum_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_skill_info_permanent_bonus_set(tbc_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_skill_info_permanent_bonus_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_skill_info_temporary_bonus_set(tbc_UpdateMask* mask, uint32_t index, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_skill_info_temporary_bonus_get(const tbc_UpdateMask* mask, uint32_t index);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_character_points1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_character_points1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_character_points2_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_character_points2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_track_creatures_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_track_creatures_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_track_resources_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_track_resources_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_block_percentage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_player_block_percentage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_dodge_percentage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_player_dodge_percentage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_parry_percentage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_player_parry_percentage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_expertise_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_expertise_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_offhand_expertise_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_offhand_expertise_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_crit_percentage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_player_crit_percentage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_ranged_crit_percentage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_player_ranged_crit_percentage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_offhand_crit_percentage_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_player_offhand_crit_percentage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_spell_crit_percentage1_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_player_spell_crit_percentage1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_shield_block_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_shield_block_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_explored_zones_1_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_explored_zones_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_rest_state_experience_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_rest_state_experience_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_coinage_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_coinage_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_mod_damage_done_pos_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_mod_damage_done_pos_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_mod_damage_done_neg_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_mod_damage_done_neg_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_mod_damage_done_pct_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_mod_damage_done_pct_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_mod_healing_done_pos_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_mod_healing_done_pos_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_mod_target_resistance_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_mod_target_resistance_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_mod_target_physical_resistance_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_mod_target_physical_resistance_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_features_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_features_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_ammo_id_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_ammo_id_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_self_res_spell_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_self_res_spell_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_pvp_medals_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_pvp_medals_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_buyback_price_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_buyback_price_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_buyback_timestamp_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_buyback_timestamp_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_kills_set(tbc_UpdateMask* mask, WowTwoShorts value);
WOW_WORLD_MESSAGES_C_EXPORT WowTwoShorts tbc_update_mask_player_kills_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_today_contribution_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_today_contribution_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_yesterday_contribution_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_yesterday_contribution_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_lifetime_honorable_kills_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_lifetime_honorable_kills_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_bytes2_glow_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_player_bytes2_glow_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_watched_faction_index_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_watched_faction_index_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_combat_rating_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_combat_rating_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_arena_team_info_1_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_arena_team_info_1_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_honor_currency_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_honor_currency_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_arena_currency_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_arena_currency_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_mod_mana_regen_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_player_mod_mana_regen_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_mod_mana_regen_interrupt_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_player_mod_mana_regen_interrupt_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_max_level_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_max_level_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_player_daily_quests_1_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_player_daily_quests_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_object_created_by_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_object_created_by_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_displayid_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_game_object_displayid_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_flags_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_game_object_flags_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_rotation_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_game_object_rotation_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_state_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_game_object_state_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_pos_x_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_game_object_pos_x_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_pos_y_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_game_object_pos_y_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_pos_z_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_game_object_pos_z_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_facing_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_game_object_facing_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_dyn_flags_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_game_object_dyn_flags_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_faction_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_game_object_faction_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_type_id_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_game_object_type_id_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_level_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_game_object_level_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_artkit_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_game_object_artkit_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_game_object_animprogress_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_game_object_animprogress_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_dynamic_object_caster_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_dynamic_object_caster_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_dynamic_object_bytes_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_dynamic_object_bytes_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_dynamic_object_spellid_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_dynamic_object_spellid_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_dynamic_object_radius_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_dynamic_object_radius_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_dynamic_object_pos_x_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_dynamic_object_pos_x_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_dynamic_object_pos_y_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_dynamic_object_pos_y_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_dynamic_object_pos_z_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_dynamic_object_pos_z_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_dynamic_object_facing_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_dynamic_object_facing_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_dynamic_object_casttime_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_dynamic_object_casttime_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_owner_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_corpse_owner_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_party_set(tbc_UpdateMask* mask, uint64_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint64_t tbc_update_mask_corpse_party_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_facing_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_corpse_facing_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_pos_x_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_corpse_pos_x_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_pos_y_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_corpse_pos_y_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_pos_z_set(tbc_UpdateMask* mask, float value);
WOW_WORLD_MESSAGES_C_EXPORT float tbc_update_mask_corpse_pos_z_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_display_id_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_corpse_display_id_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_item_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_corpse_item_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_bytes_1_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_corpse_bytes_1_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_bytes_2_set(tbc_UpdateMask* mask, WowBytes value);
WOW_WORLD_MESSAGES_C_EXPORT WowBytes tbc_update_mask_corpse_bytes_2_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_guild_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_corpse_guild_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_flags_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_corpse_flags_get(const tbc_UpdateMask* mask);
WOW_WORLD_MESSAGES_C_EXPORT void tbc_update_mask_corpse_dynamic_flags_set(tbc_UpdateMask* mask, uint32_t value);
WOW_WORLD_MESSAGES_C_EXPORT uint32_t tbc_update_mask_corpse_dynamic_flags_get(const tbc_UpdateMask* mask);

typedef struct {
    /* Other emus hardcode this to 2. More research is required */
    uint8_t addon_type;
    /* Other emus hardcode this to 1. */
    uint8_t uses_crc;
    bool uses_diffent_public_key;
    /* Other emus hardcode this to 0 */
    uint32_t unknown1;
    /* Other emus hardcode this to 0 */
    uint8_t unknown2;

} tbc_Addon;

typedef struct {
    uint32_t amount_of_addons;
    tbc_Addon* addons;
} tbc_AddonArray;

typedef struct {
    char* addon_name;
    uint8_t addon_has_signature;
    uint32_t addon_crc;
    uint32_t addon_extra_crc;

} tbc_AddonInfo;

typedef struct {
    uint64_t guid;
    bool online;
    char* name;
    uint8_t level;
    tbc_Class class_type;
    uint32_t games_played_this_week;
    uint32_t wins_this_week;
    uint32_t games_played_this_season;
    uint32_t wins_this_season;
    uint32_t personal_rating;

} tbc_ArenaTeamMember;

typedef struct {
    uint32_t enchant_id;
    uint32_t enchant_duration;
    uint32_t enchant_charges;

} tbc_AuctionEnchantment;

typedef struct {
    uint32_t id;
    uint32_t item;
    tbc_AuctionEnchantment enchantments[6];
    uint32_t item_random_property_id;
    uint32_t item_suffix_factor;
    uint32_t item_count;
    uint32_t item_charges;
    /* mangosone: item flags (dynamic?) (0x04 no lockId?) */
    uint32_t item_flags;
    uint64_t item_owner;
    uint32_t start_bid;
    uint32_t minimum_bid;
    uint32_t buyout_amount;
    uint32_t time_left;
    uint64_t highest_bidder;
    uint32_t highest_bid;

} tbc_AuctionListItem;

typedef struct {
    uint8_t column;
    uint8_t reversed;

} tbc_AuctionSort;

typedef struct {
    uint16_t aura;
    uint8_t unknown;

} tbc_Aura;

typedef struct {
    tbc_AuraType aura_type;
    uint32_t damage1;
    tbc_SpellSchool school;
    uint32_t absorbed;
    /* vmangos: Sent as int32 */
    uint32_t resisted;
    uint32_t damage2;
    /* vmangos: A miscvalue that is dependent on what the aura will do, this is usually decided by the AuraType, ie: with AuraType::SPELL_AURA_MOD_BASE_RESISTANCE_PCT this value could be SpellSchoolMask::SPELL_SCHOOL_MASK_NORMAL which would tell the aura that it should change armor.  If Modifier::m_auraname would have been AuraType::SPELL_AURA_MOUNTED then m_miscvalue would have decided which model the mount should have */
    uint32_t misc_value1;
    uint32_t damage3;
    /* vmangos: A miscvalue that is dependent on what the aura will do, this is usually decided by the AuraType, ie: with AuraType::SPELL_AURA_MOD_BASE_RESISTANCE_PCT this value could be SpellSchoolMask::SPELL_SCHOOL_MASK_NORMAL which would tell the aura that it should change armor.  If Modifier::m_auraname would have been AuraType::SPELL_AURA_MOUNTED then m_miscvalue would have decided which model the mount should have */
    uint32_t misc_value2;
    uint32_t damage;
    float gain_multiplier;

} tbc_AuraLog;

typedef struct {
    uint32_t flags;
    uint32_t stacks_per_day;

} tbc_BankTab;

typedef struct {
    uint64_t player;
    float position_x;
    float position_y;

} tbc_BattlegroundPlayerPosition;

typedef struct {
    uint64_t guid;
    tbc_ChannelMemberFlags member_flags;

} tbc_ChannelMember;

typedef struct {
    uint32_t equipment_display_id;
    tbc_InventoryType inventory_type;
    uint32_t enchantment;

} tbc_CharacterGear;

typedef struct {
    uint64_t guid;
    char* name;
    tbc_Race race;
    tbc_Class class_type;
    tbc_Gender gender;
    uint8_t skin;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;
    uint8_t level;
    tbc_Area area;
    tbc_Map map;
    all_Vector3d position;
    uint32_t guild_id;
    uint32_t flags;
    bool first_login;
    uint32_t pet_display_id;
    uint32_t pet_level;
    tbc_CreatureFamily pet_family;
    tbc_CharacterGear equipment[20];

} tbc_Character;

typedef struct {
    uint16_t spell_id;
    /* cmangos/mangoszero: cast item id */
    uint16_t item_id;
    uint16_t spell_category;
    uint32_t cooldown;
    uint32_t category_cooldown;

} tbc_CooldownSpell;

typedef struct {
    uint32_t spell_school_mask;
    /* vmangos sends the same data in `damage_uint`. */
    float damage_float;
    /* vmangos sends the same data in `damage_float`. */
    uint32_t damage_uint;
    uint32_t absorb;
    uint32_t resist;

} tbc_DamageInfo;

typedef struct {
    uint32_t spell;
    tbc_DispelMethod method;

} tbc_DispelledSpell;

typedef struct {
    tbc_FactionFlag flag;
    uint32_t standing;

} tbc_FactionInitializer;

typedef struct {
    tbc_Faction faction;
    uint32_t standing;

} tbc_FactionStanding;

typedef struct {
    tbc_Faction faction;
    uint32_t reputation_rank;

} tbc_ForcedReaction;

typedef struct {
    /* cmangos: questions found in GMSurveyQuestions.dbc
ref to i'th GMSurveySurveys.dbc field (all fields in that dbc point to fields in GMSurveyQuestions.dbc) */
    uint32_t question_id;
    /* Rating: hardcoded limit of 0-5 in pre-Wrath, ranges defined in GMSurveyAnswers.dbc Wrath+ */
    uint8_t answer;
    /* Usage: `GMSurveyAnswerSubmit(question, rank, comment)`
cmangos: Unused in stock UI, can be only set by calling Lua function */
    char* comment;

} tbc_GmSurveyQuestion;

typedef struct {
    /* vmangos: sets to loop index */
    uint32_t id;
    uint8_t item_icon;
    /* vmangos: makes pop up box password */
    bool coded;
    /* mangosone: 2.0.3 */
    uint32_t money_required;
    char* message;
    /* mangosone: related to money pop up box, 2.0.3, max 0x800 */
    char* accept_text;

} tbc_GossipItem;

typedef struct {
    char* name;
    uint64_t guid;
    bool is_online;
    uint8_t group_id;
    /* mangosone: 0x2 main assist, 0x4 main tank */
    uint8_t flags;

} tbc_GroupListMember;

typedef struct {
    uint32_t rights;
    uint32_t slots_per_day;

} tbc_GuildBankRights;

typedef struct {
    uint8_t socket_index;
    uint32_t gem;

} tbc_GuildBankSocket;

typedef struct {
    uint8_t slot;
    uint32_t item;
    VariableItemRandomProperty item_random_property_id;
    uint8_t amount_of_items;
    uint32_t enchant;
    uint8_t charges;
    uint8_t amount_of_sockets;
    tbc_GuildBankSocket* sockets;

} tbc_GuildBankSlot;

typedef struct {
    char* tab_name;
    char* tab_icon;

} tbc_GuildBankTab;

typedef struct {
    tbc_GuildEvent event;
    uint64_t player1;
    uint64_t player2;
    uint8_t new_rank;
    uint32_t unix_time;

} tbc_GuildLogEvent;

typedef struct {
    uint64_t guid;
    tbc_GuildMemberStatus status;
    char* name;
    uint32_t rank;
    uint8_t level;
    tbc_Class class_type;
    /* mangosone: new 2.4.0
Possibly gender */
    uint8_t unknown1;
    tbc_Area area;
    float time_offline;
    char* public_note;
    char* officer_note;

} tbc_GuildMember;

typedef struct {
    uint32_t rights;
    uint32_t money_per_day;
    tbc_GuildBankRights bank_tab_rights[6];

} tbc_GuildRights;

typedef struct {
    /* cmangos/mangoszero: only send 'first' part of spell */
    uint16_t spell_id;
    /* cmangos/mangoszero: sets to 0
cmangos/mangoszero: it's not slot id */
    uint16_t unknown1;

} tbc_InitialSpell;

typedef struct {
    float damage_minimum;
    float damage_maximum;
    tbc_SpellSchool school;

} tbc_ItemDamageType;

typedef struct {
    uint32_t color;
    uint32_t content;

} tbc_ItemSocket;

typedef struct {
    uint32_t spell;
    tbc_SpellTriggerType spell_trigger;
    /* let the database control the sign here. negative means that the item should be consumed once the charges are consumed. */
    int32_t spell_charges;
    int32_t spell_cooldown;
    uint32_t spell_category;
    int32_t spell_category_cooldown;

} tbc_ItemSpells;

typedef struct {
    uint32_t stat_type;
    int32_t value;

} tbc_ItemStat;

typedef struct {
    uint16_t entry;
    tbc_LfgType lfg_type;

} tbc_LfgData;

typedef struct {
    uint64_t guid;
    uint32_t level;

} tbc_LfgPlayerMember;

typedef struct {
    uint64_t guid;
    uint32_t level;
    tbc_Area area;
    tbc_LfgMode lfg_mode;
    uint32_t lfg_slots[3];
    char* comment;
    uint32_t amount_of_members;
    tbc_LfgPlayerMember* members;

} tbc_LfgPlayer;

typedef struct {
    uint32_t item_stack_count;
    uint32_t item;
    uint32_t item_display_id;
    /* cmangos: 0 for infinity item amount, although they send 0xFFFFFFFF in that case */
    uint32_t max_items;
    uint32_t price;
    uint32_t max_durability;
    uint32_t durability;
    uint32_t extended_cost;

} tbc_ListInventoryItem;

typedef struct {
    uint8_t index;
    uint32_t item;
    tbc_LootSlotType ty;

} tbc_LootItem;

typedef struct {
    uint32_t charges;
    uint32_t duration;
    uint32_t enchant_id;

} tbc_MailListItemEnchant;

typedef struct {
    uint8_t item_index;
    uint32_t low_guid;
    uint32_t item;
    tbc_MailListItemEnchant enchants[6];
    uint32_t item_random_property_id;
    uint32_t item_suffix_factor;
    uint8_t item_amount;
    uint32_t charges;
    uint32_t max_durability;
    uint32_t durability;

} tbc_MailListItem;

typedef struct {
    uint32_t message_id;
    tbc_MailType message_type;
    uint64_t sender;
    uint32_t sender_id;
    uint32_t auction_id;
    uint32_t item;
    uint32_t cash_on_delivery;
    uint32_t item_text_id;
    uint32_t unknown;
    uint32_t stationery;
    uint32_t money;
    uint32_t flags;
    float expiration_time;
    /* cmangos/vmangos/mangoszero: mail template (MailTemplate.dbc) */
    uint32_t mail_template_id;
    char* subject;
    uint8_t amount_of_items;
    tbc_MailListItem* items;

} tbc_Mail;

typedef struct {
    uint64_t item;
    uint8_t slot;

} tbc_MailItem;

typedef struct {
    uint8_t action;
    uint64_t player;
    uint32_t entry;
    uint32_t timestamp;

} tbc_MoneyLogItem;

typedef struct {
    uint64_t guid;
    all_Vector3d position;
    float orientation;
    uint32_t timestamp;

} tbc_TransportInfo;

typedef struct {
    tbc_UpdateFlag update_flag;
    tbc_MovementFlags flags;
    uint8_t extra_flags;
    uint32_t timestamp;
    all_Vector3d living_position;
    float living_orientation;
    tbc_TransportInfo transport;
    float pitch1;
    float pitch2;
    float fall_time;
    float z_speed;
    float cos_angle;
    float sin_angle;
    float xy_speed;
    float spline_elevation;
    float walking_speed;
    float running_speed;
    float backwards_running_speed;
    float swimming_speed;
    float flying_speed;
    float backwards_flying_speed;
    float backwards_swimming_speed;
    float turn_rate;
    tbc_SplineFlag spline_flags;
    float angle;
    uint64_t target;
    all_Vector3d spline_final_point;
    uint32_t time_passed;
    uint32_t duration;
    uint32_t id;
    uint32_t amount_of_nodes;
    all_Vector3d* nodes;
    all_Vector3d final_node;
    all_Vector3d position;
    float orientation;
    /* vmangos statically sets to 0 */
    uint32_t unknown0;
    uint32_t unknown1;
    /* vmangos sets statically to 1 */
    uint32_t unknown2;
    uint64_t guid;
    uint32_t transport_progress_in_ms;

} tbc_MovementBlock;

typedef struct {
    tbc_MovementFlags flags;
    uint8_t extra_flags;
    uint32_t timestamp;
    all_Vector3d position;
    float orientation;
    tbc_TransportInfo transport;
    float pitch1;
    float pitch2;
    float fall_time;
    float z_speed;
    float cos_angle;
    float sin_angle;
    float xy_speed;
    float spline_elevation;

} tbc_MovementInfo;

typedef struct {
    uint32_t delay;
    uint32_t emote;

} tbc_NpcTextUpdateEmote;

typedef struct {
    float probability;
    char* texts[2];
    tbc_Language language;
    tbc_NpcTextUpdateEmote emotes[3];

} tbc_NpcTextUpdate;

typedef struct {
    tbc_UpdateType update_type;
    uint64_t guid1;
    tbc_UpdateMask mask1;
    uint64_t guid2;
    tbc_MovementBlock movement1;
    uint64_t guid3;
    tbc_ObjectType object_type;
    tbc_MovementBlock movement2;
    tbc_UpdateMask mask2;
    uint32_t count;
    uint64_t* guids;

} tbc_Object;

typedef struct {
    uint16_t spell;
    /* mangoszero: sets to 0 */
    uint16_t spell_category;
    uint32_t cooldown;
    uint32_t category_cooldown;

} tbc_PetSpellCooldown;

typedef struct {
    uint32_t index;
    /* cmangos/vmangos/mangoszero: statically sets to guild charter item id (5863). */
    uint32_t charter_entry;
    /* cmangos/vmangos/mangoszero: statically sets to guild charter display id (16161). */
    uint32_t charter_display_id;
    /* cmangos/vmangos/mangoszero: statically set to 1000 (10 silver). */
    uint32_t guild_charter_cost;
    /* cmangos/vmangos/mangoszero: statically set to 1
arcemu: charter type? seems to be 0x0 for guilds and 0x1 for arena charters */
    uint32_t unknown1;
    uint32_t signatures_required;

} tbc_PetitionShowlist;

typedef struct {
    uint64_t signer;
    uint32_t unknown1;

} tbc_PetitionSignature;

typedef struct {
    uint32_t emote;
    uint32_t emote_delay;

} tbc_QuestDetailsEmote;

typedef struct {
    uint64_t npc;
    tbc_QuestGiverStatus dialog_status;

} tbc_QuestGiverStatusReport;

typedef struct {
    uint32_t quest_id;
    uint32_t quest_icon;
    uint32_t level;
    /* vmangos/cmangos/mangoszero: max 0x200 */
    char* title;

} tbc_QuestItem;

typedef struct {
    uint32_t item;
    uint32_t item_count;
    uint32_t item_display_id;

} tbc_QuestItemRequirement;

typedef struct {
    uint32_t item;
    uint32_t item_count;

} tbc_QuestItemReward;

typedef struct {
    /* cmangos: client expected gameobject template id in form (id|0x80000000) */
    uint32_t creature_id;
    uint32_t kill_count;
    uint32_t required_item_id;
    uint32_t required_item_count;

} tbc_QuestObjective;

typedef struct {
    tbc_Map map;
    uint32_t reset_time;
    uint32_t instance_id;
    /* Neither 1.12 nor 3.3.5 have an index field so this might not be accurate. */
    uint32_t index;

} tbc_RaidInfo;

typedef struct {
    tbc_RaidTargetIndex index;
    uint64_t guid;

} tbc_RaidTargetUpdate;

typedef struct {
    uint64_t sender;
    tbc_AuctionHouse auction_house;
    tbc_MailMessageType message_type;
    uint32_t stationery;
    /* mangosone sets to `0xC6000000`
mangosone: float unk, time or something */
    float time;

} tbc_ReceivedMail;

typedef struct {
    uint64_t guid;
    tbc_RelationType relation_mask;
    char* note;
    tbc_FriendStatus status;
    tbc_Area area;
    uint32_t level;
    tbc_Class class_type;

} tbc_Relation;

typedef struct {
    tbc_SpellCastTargetFlags target_flags;
    uint64_t unit_target;
    uint64_t unit_minipet;
    uint64_t unit_enemy;
    uint64_t gameobject;
    uint64_t locked;
    uint64_t item;
    uint64_t trade_item;
    all_Vector3d source;
    all_Vector3d destination;
    char* target_string;
    uint64_t corpse_ally;
    uint64_t corpse_enemy;

} tbc_SpellCastTargets;

typedef struct {
    uint32_t id;
    uint32_t cooldown_time;

} tbc_SpellCooldownStatus;

typedef struct {
    tbc_SpellEffect effect;
    uint64_t target1;
    uint32_t amount;
    tbc_Power power;
    float multiplier;
    uint64_t target4;
    uint32_t extra_attacks;
    uint64_t target5;
    uint32_t interrupted_spell;
    uint64_t target6;
    uint32_t item_to_damage;
    uint32_t unknown5;
    uint64_t lock_target;
    uint32_t item;
    uint64_t summon_target;
    uint64_t pet_feed_guid;
    uint64_t pet_dismiss_guid;

} tbc_SpellLog;

typedef struct {
    uint64_t target;
    tbc_SpellMissInfo miss_info;

} tbc_SpellLogMiss;

typedef struct {
    uint64_t target;
    tbc_SpellMissInfo miss_info;
    uint8_t reflect_result;

} tbc_SpellMiss;

typedef struct {
    uint32_t spell;
    tbc_SpellStealAction action;

} tbc_SpellSteal;

typedef struct {
    uint32_t pet_number;
    uint32_t entry;
    uint32_t level;
    char* name;
    uint32_t loyalty;
    /* vmangos/mangoszero/cmangos: client slot 1 == current pet (0) */
    uint8_t slot;

} tbc_StabledPet;

typedef struct {
    /* cmangos/vmangos/mangoszero: sets to index of array */
    uint8_t trade_slot_number;
    uint32_t item;
    uint32_t display_id;
    uint32_t stack_count;
    bool wrapped;
    uint64_t gift_wrapper;
    uint32_t enchantment;
    uint32_t enchantments_slots[3];
    uint64_t item_creator;
    uint32_t spell_charges;
    uint32_t item_suffix_factor;
    uint32_t item_random_properties_id;
    uint32_t lock_id;
    uint32_t max_durability;
    uint32_t durability;

} tbc_TradeSlot;

typedef struct {
    /* cmangos: learned spell (or cast-spell in profession case) */
    uint32_t spell;
    tbc_TrainerSpellState state;
    uint32_t spell_cost;
    /* cmangos: spells don't cost talent points
cmangos: set to 0 */
    uint32_t talent_point_cost;
    /* cmangos: must be equal prev. field to have learn button in enabled state
cmangos: 1 for true 0 for false */
    uint32_t first_rank;
    uint8_t required_level;
    tbc_Skill required_skill;
    uint32_t required_skill_value;
    uint32_t required_spells[3];

} tbc_TrainerSpell;

typedef struct {
    char* name;
    char* guild;
    uint32_t level;
    tbc_Class class_type;
    tbc_Race race;
    tbc_Gender gender;
    tbc_Area area;

} tbc_WhoPlayer;

typedef struct {
    uint32_t state;
    uint32_t value;

} tbc_WorldState;

#define TBC_AURA_MASK_SIZE 64
typedef struct {
    tbc_Aura auras[TBC_AURA_MASK_SIZE];
} tbc_AuraMask;

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BOOTME_write(WowWorldWriter* writer);

/* Executes a query directly on the world server.
Not implemented on any major emulator. */
typedef struct {
    char* query;

} tbc_CMSG_DBLOOKUP;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_DBLOOKUP_free(tbc_CMSG_DBLOOKUP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_DBLOOKUP_write(WowWorldWriter* writer, const tbc_CMSG_DBLOOKUP* object);

/* Sent when using the `worldport` console command. */
typedef struct {
    uint32_t time;
    tbc_Map map;
    all_Vector3d position;
    float orientation;

} tbc_CMSG_WORLD_TELEPORT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_WORLD_TELEPORT_write(WowWorldWriter* writer, const tbc_CMSG_WORLD_TELEPORT* object);

/* Sent when using the `port` console command. */
typedef struct {
    char* name;

} tbc_CMSG_TELEPORT_TO_UNIT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_TELEPORT_TO_UNIT_free(tbc_CMSG_TELEPORT_TO_UNIT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TELEPORT_TO_UNIT_write(WowWorldWriter* writer, const tbc_CMSG_TELEPORT_TO_UNIT* object);

/* Sent after the client presses 'Create Character'. The client will then wait for [SMSG_CHAR_CREATE]. */
typedef struct {
    char* name;
    tbc_Race race;
    tbc_Class class_type;
    tbc_Gender gender;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;

} tbc_CMSG_CHAR_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHAR_CREATE_free(tbc_CMSG_CHAR_CREATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHAR_CREATE_write(WowWorldWriter* writer, const tbc_CMSG_CHAR_CREATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHAR_ENUM_write(WowWorldWriter* writer);

/* Command to delete a character from the clients account. Can be sent after the client has received [SMSG_CHAR_ENUM].
Sent after the client has confirmed the character deletion. */
typedef struct {
    uint64_t guid;

} tbc_CMSG_CHAR_DELETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHAR_DELETE_write(WowWorldWriter* writer, const tbc_CMSG_CHAR_DELETE* object);

/* Response to [CMSG_CHAR_CREATE].
Every [WorldResult] except `CHAR_CREATE_SUCCESS` will lead to a popup showing. `CHAR_CREATE_SUCCESS` will cause the client to send a [CMSG_CHAR_ENUM]. */
typedef struct {
    tbc_WorldResult result;

} tbc_SMSG_CHAR_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHAR_CREATE_write(WowWorldWriter* writer, const tbc_SMSG_CHAR_CREATE* object);

typedef struct {
    uint8_t amount_of_characters;
    tbc_Character* characters;

} tbc_SMSG_CHAR_ENUM;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_CHAR_ENUM_free(tbc_SMSG_CHAR_ENUM* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHAR_ENUM_write(WowWorldWriter* writer, const tbc_SMSG_CHAR_ENUM* object);

/* Response to [CMSG_CHAR_DELETE].
The result of this message will update the client character screen without them sending another [CMSG_CHAR_ENUM]. */
typedef struct {
    tbc_WorldResult result;

} tbc_SMSG_CHAR_DELETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHAR_DELETE_write(WowWorldWriter* writer, const tbc_SMSG_CHAR_DELETE* object);

/* Command to log into the specified character.
This is sent after the client has been authenticated and served the character list with [SMSG_CHAR_ENUM].
If the player receives a [SMSG_CHARACTER_LOGIN_FAILED] it will return to the character screen and send a [CMSG_CHAR_ENUM]. */
typedef struct {
    uint64_t guid;

} tbc_CMSG_PLAYER_LOGIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PLAYER_LOGIN_write(WowWorldWriter* writer, const tbc_CMSG_PLAYER_LOGIN* object);

typedef struct {
    tbc_Map map;
    all_Vector3d position;
    float orientation;

} tbc_SMSG_NEW_WORLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_NEW_WORLD_write(WowWorldWriter* writer, const tbc_SMSG_NEW_WORLD* object);

typedef struct {
    uint32_t transport;
    tbc_Map transport_map;
} tbc_SMSG_TRANSFER_PENDING_has_transport;

typedef struct {
    tbc_Map map;

    tbc_SMSG_TRANSFER_PENDING_has_transport* has_transport;
} tbc_SMSG_TRANSFER_PENDING;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_TRANSFER_PENDING_free(tbc_SMSG_TRANSFER_PENDING* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TRANSFER_PENDING_write(WowWorldWriter* writer, const tbc_SMSG_TRANSFER_PENDING* object);

typedef struct {
    tbc_Map map;
    tbc_TransferAbortReason reason;
    tbc_DungeonDifficulty difficulty;

} tbc_SMSG_TRANSFER_ABORTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TRANSFER_ABORTED_write(WowWorldWriter* writer, const tbc_SMSG_TRANSFER_ABORTED* object);

/* Response if [CMSG_PLAYER_LOGIN] fails. If successful it should instead be [SMSG_LOGIN_VERIFY_WORLD].
Client seems to always send a [CMSG_CANCEL_TRADE] after receiving this message, for unknown reasons. */
typedef struct {
    tbc_WorldResult result;

} tbc_SMSG_CHARACTER_LOGIN_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHARACTER_LOGIN_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_CHARACTER_LOGIN_FAILED* object);

/* Tells the client what the datetime is and how fast time passes.
The client also asks for the datetime with [CMSG_QUERY_TIME] and gets a reply from [SMSG_QUERY_TIME_RESPONSE], but this does not appear to change anything in the client.
Despite sending this as the very first message after the client logs in it will still send a [CMSG_QUERY_TIME]. */
typedef struct {
    /* Current server datetime.
Running the client with `-console` verifies that this message in this format sets the correct datetime. [SMSG_QUERY_TIME_RESPONSE] will not set this. */
    uint32_t datetime;
    /* How many minutes should pass by every second.
vmangos/cmangos/mangoszero set this to 0.01666667. This means that 1/60 minutes pass every second (one second passes every second). Setting this to 1.0 will make the client advance one minute every second. */
    float timescale;

} tbc_SMSG_LOGIN_SETTIMESPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOGIN_SETTIMESPEED_write(WowWorldWriter* writer, const tbc_SMSG_LOGIN_SETTIMESPEED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PLAYER_LOGOUT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LOGOUT_REQUEST_write(WowWorldWriter* writer);

/* Reply to [CMSG_LOGOUT_REQUEST].
The client expects to get an [SMSG_LOGOUT_COMPLETE] when logout is complete. */
typedef struct {
    tbc_LogoutResult result;
    tbc_LogoutSpeed speed;

} tbc_SMSG_LOGOUT_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOGOUT_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_LOGOUT_RESPONSE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOGOUT_COMPLETE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LOGOUT_CANCEL_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOGOUT_CANCEL_ACK_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} tbc_CMSG_NAME_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_NAME_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_NAME_QUERY* object);

/* Response to [CMSG_NAME_QUERY]. */
typedef struct {
    uint64_t guid;
    char* character_name;
    /* Used for showing cross realm realm names. If this is an empty string it is shown like a regular player on the same realm. */
    char* realm_name;
    tbc_Race race;
    tbc_Gender gender;
    tbc_Class class_type;
    tbc_DeclinedNames has_declined_names;
    char* declined_names[5];

} tbc_SMSG_NAME_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_NAME_QUERY_RESPONSE_free(tbc_SMSG_NAME_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_NAME_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_NAME_QUERY_RESPONSE* object);

typedef struct {
    uint32_t pet_number;
    uint64_t guid;

} tbc_CMSG_PET_NAME_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PET_NAME_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_PET_NAME_QUERY* object);

typedef struct {
    uint32_t pet_number;
    char* name;
    uint32_t pet_name_timestamp;
    tbc_PetQueryDisabledNames names;
    char* declined_names[5];

} tbc_SMSG_PET_NAME_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PET_NAME_QUERY_RESPONSE_free(tbc_SMSG_PET_NAME_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_NAME_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_PET_NAME_QUERY_RESPONSE* object);

typedef struct {
    uint32_t guild_id;

} tbc_CMSG_GUILD_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_QUERY* object);

typedef struct {
    uint32_t id;
    char* name;
    char* rank_names[10];
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;
    uint32_t background_color;

} tbc_SMSG_GUILD_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GUILD_QUERY_RESPONSE_free(tbc_SMSG_GUILD_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GUILD_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_GUILD_QUERY_RESPONSE* object);

typedef struct {
    uint32_t item;

} tbc_CMSG_ITEM_QUERY_SINGLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ITEM_QUERY_SINGLE_write(WowWorldWriter* writer, const tbc_CMSG_ITEM_QUERY_SINGLE* object);

typedef struct {
    tbc_ItemClassAndSubClass class_and_sub_class;
    /* mangosone: new 2.0.3, not exist in wdb cache?
mangosone sets to -1.
azerothcore: < 0: id from ItemSubClass.dbc, used to override weapon sound from actual sub class */
    uint32_t sound_override_sub_class;
    char* name1;
    char* name2;
    char* name3;
    char* name4;
    /* id from ItemDisplayInfo.dbc */
    uint32_t display_id;
    tbc_ItemQuality quality;
    tbc_ItemFlag flags;
    uint32_t buy_price;
    uint32_t sell_price;
    tbc_InventoryType inventory_type;
    tbc_AllowedClass allowed_class;
    tbc_AllowedRace allowed_race;
    uint32_t item_level;
    uint32_t required_level;
    tbc_Skill required_skill;
    uint32_t required_skill_rank;
    uint32_t required_spell;
    uint32_t required_honor_rank;
    uint32_t required_city_rank;
    tbc_Faction required_faction;
    /* cmangos/vmangos/mangoszero: send value only if reputation faction id setted ( needed for some items) */
    uint32_t required_faction_rank;
    uint32_t max_count;
    uint32_t stackable;
    uint32_t container_slots;
    tbc_ItemStat stats[10];
    tbc_ItemDamageType damages[5];
    int32_t armor;
    int32_t holy_resistance;
    int32_t fire_resistance;
    int32_t nature_resistance;
    int32_t frost_resistance;
    int32_t shadow_resistance;
    int32_t arcane_resistance;
    uint32_t delay;
    uint32_t ammo_type;
    float ranged_range_modification;
    tbc_ItemSpells spells[5];
    tbc_Bonding bonding;
    char* description;
    uint32_t page_text;
    tbc_Language language;
    tbc_PageTextMaterial page_text_material;
    /* cmangos/vmangos/mangoszero: id from QuestCache.wdb */
    uint32_t start_quest;
    uint32_t lock_id;
    /* cmangos/vmangos/mangoszero: id from Material.dbc */
    uint32_t material;
    tbc_SheatheType sheathe_type;
    /* cmangos/vmangos/mangoszero: id from ItemRandomProperties.dbc */
    uint32_t random_property;
    uint32_t block;
    tbc_ItemSet item_set;
    uint32_t max_durability;
    tbc_Area area;
    tbc_Map map;
    tbc_BagFamily bag_family;
    /* mangosone: id from TotemCategory.dbc */
    uint32_t totem_category;
    tbc_ItemSocket sockets[3];
    uint32_t socket_bonus;
    uint32_t gem_properties;
    uint32_t required_disenchant_skill;
    float armor_damage_modifier;
    /* mangosone: added in 2.4.2.8209, duration (seconds) */
    uint32_t duration;
} tbc_SMSG_ITEM_QUERY_SINGLE_RESPONSE_found;

typedef struct {
    uint32_t item;

    tbc_SMSG_ITEM_QUERY_SINGLE_RESPONSE_found* found;
} tbc_SMSG_ITEM_QUERY_SINGLE_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_ITEM_QUERY_SINGLE_RESPONSE_free(tbc_SMSG_ITEM_QUERY_SINGLE_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ITEM_QUERY_SINGLE_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_ITEM_QUERY_SINGLE_RESPONSE* object);

typedef struct {
    uint32_t page_id;
    uint64_t guid;

} tbc_CMSG_PAGE_TEXT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PAGE_TEXT_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_PAGE_TEXT_QUERY* object);

typedef struct {
    uint32_t page_id;
    char* text;
    uint32_t next_page_id;

} tbc_SMSG_PAGE_TEXT_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PAGE_TEXT_QUERY_RESPONSE_free(tbc_SMSG_PAGE_TEXT_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PAGE_TEXT_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_PAGE_TEXT_QUERY_RESPONSE* object);

typedef struct {
    uint32_t quest_id;

} tbc_CMSG_QUEST_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUEST_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_QUEST_QUERY* object);

typedef struct {
    uint32_t quest_id;
    /* Accepted values: 0, 1 or 2. 0==IsAutoComplete() (skip objectives/details) */
    uint32_t quest_method;
    uint32_t quest_level;
    uint32_t zone_or_sort;
    uint32_t quest_type;
    uint32_t suggest_player_amount;
    /* cmangos: shown in quest log as part of quest objective */
    tbc_Faction reputation_objective_faction;
    /* cmangos: shown in quest log as part of quest objective */
    uint32_t reputation_objective_value;
    /* cmangos: RequiredOpositeRepFaction, required faction value with another (oposite) faction (objective). cmangos sets to 0 */
    tbc_Faction required_opposite_faction;
    /* cmangos: RequiredOpositeRepValue, required faction value with another (oposite) faction (objective). cmangos sets to 0 */
    uint32_t required_opposite_reputation_value;
    uint32_t next_quest_in_chain;
    uint32_t money_reward;
    /* cmangos: used in XP calculation at client */
    uint32_t max_level_money_reward;
    /* cmangos: reward spell, this spell will display (icon) (casted if RewSpellCast==0) */
    uint32_t reward_spell;
    /* mangosone: casted spell */
    uint32_t casted_reward_spell;
    uint32_t honor_reward;
    uint32_t source_item_id;
    uint32_t quest_flags;
    /* CharTitleId, new 2.4.0, player gets this title (id from CharTitles) */
    uint32_t title_reward;
    tbc_QuestItemReward rewards[4];
    tbc_QuestItemReward choice_rewards[6];
    uint32_t point_map_id;
    all_Vector2d position;
    uint32_t point_opt;
    char* title;
    char* objective_text;
    char* details;
    char* end_text;
    tbc_QuestObjective objectives[4];
    char* objective_texts[4];

} tbc_SMSG_QUEST_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_QUEST_QUERY_RESPONSE_free(tbc_SMSG_QUEST_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUEST_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_QUEST_QUERY_RESPONSE* object);

typedef struct {
    uint32_t entry_id;
    uint64_t guid;

} tbc_CMSG_GAMEOBJECT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GAMEOBJECT_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_GAMEOBJECT_QUERY* object);

typedef struct {
    uint32_t info_type;
    uint32_t display_id;
    char* name1;
    char* name2;
    char* name3;
    char* name4;
    char* icon_name;
    char* cast_bar_caption;
    char* unknown;
    uint32_t raw_data[6];
    float gameobject_size;
} tbc_SMSG_GAMEOBJECT_QUERY_RESPONSE_found;

typedef struct {
    /* When the `found` optional is not present all emulators bitwise OR the entry with `0x80000000`.`` */
    uint32_t entry_id;

    tbc_SMSG_GAMEOBJECT_QUERY_RESPONSE_found* found;
} tbc_SMSG_GAMEOBJECT_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GAMEOBJECT_QUERY_RESPONSE_free(tbc_SMSG_GAMEOBJECT_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GAMEOBJECT_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_GAMEOBJECT_QUERY_RESPONSE* object);

typedef struct {
    uint32_t creature;
    uint64_t guid;

} tbc_CMSG_CREATURE_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CREATURE_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_CREATURE_QUERY* object);

typedef struct {
    char* name1;
    char* name2;
    char* name3;
    char* name4;
    char* sub_name;
    /* mangosone: 'Directions' for guard, string for Icons 2.3.0 */
    char* description;
    uint32_t type_flags;
    /* mangosone: CreatureType.dbc   wdbFeild8 */
    uint32_t creature_type;
    tbc_CreatureFamily creature_family;
    /* mangosone: Creature Rank (elite, boss, etc) */
    uint32_t creature_rank;
    /* mangosone: wdbFeild11 */
    uint32_t unknown0;
    /* mangosone: Id from CreatureSpellData.dbc wdbField12 */
    uint32_t spell_data_id;
    uint32_t display_ids[4];
    float health_multiplier;
    float mana_multiplier;
    uint8_t racial_leader;
} tbc_SMSG_CREATURE_QUERY_RESPONSE_found;

typedef struct {
    /* When the `found` optional is not present all emulators bitwise OR the entry with `0x80000000`.`` */
    uint32_t creature_entry;

    tbc_SMSG_CREATURE_QUERY_RESPONSE_found* found;
} tbc_SMSG_CREATURE_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_CREATURE_QUERY_RESPONSE_free(tbc_SMSG_CREATURE_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CREATURE_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_CREATURE_QUERY_RESPONSE* object);

typedef struct {
    uint32_t minimum_level;
    uint32_t maximum_level;
    char* player_name;
    char* guild_name;
    uint32_t race_mask;
    uint32_t class_mask;
    uint32_t amount_of_zones;
    uint32_t* zones;
    uint32_t amount_of_strings;
    char** search_strings;

} tbc_CMSG_WHO;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_WHO_free(tbc_CMSG_WHO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_WHO_write(WowWorldWriter* writer, const tbc_CMSG_WHO* object);

typedef struct {
    uint32_t listed_players;
    uint32_t online_players;
    tbc_WhoPlayer* players;

} tbc_SMSG_WHO;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_WHO_free(tbc_SMSG_WHO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_WHO_write(WowWorldWriter* writer, const tbc_SMSG_WHO* object);

typedef struct {
    char* character;

} tbc_CMSG_WHOIS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_WHOIS_free(tbc_CMSG_WHOIS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_WHOIS_write(WowWorldWriter* writer, const tbc_CMSG_WHOIS* object);

typedef struct {
    /* vmangos: max CString length allowed: 256 */
    char* message;

} tbc_SMSG_WHOIS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_WHOIS_free(tbc_SMSG_WHOIS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_WHOIS_write(WowWorldWriter* writer, const tbc_SMSG_WHOIS* object);

typedef struct {
    /* Sent back in [SMSG_CONTACT_LIST]. */
    uint32_t flags;

} tbc_CMSG_CONTACT_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CONTACT_LIST_write(WowWorldWriter* writer, const tbc_CMSG_CONTACT_LIST* object);

typedef struct {
    /* Indicates which kinds of relations are being sent in this list */
    tbc_RelationType list_mask;
    uint32_t amount_of_relations;
    tbc_Relation* relations;

} tbc_SMSG_CONTACT_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_CONTACT_LIST_free(tbc_SMSG_CONTACT_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CONTACT_LIST_write(WowWorldWriter* writer, const tbc_SMSG_CONTACT_LIST* object);

typedef struct {
    tbc_FriendResult result;
    uint64_t guid;

} tbc_SMSG_FRIEND_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FRIEND_STATUS_write(WowWorldWriter* writer, const tbc_SMSG_FRIEND_STATUS* object);

typedef struct {
    char* name;
    char* note;

} tbc_CMSG_ADD_FRIEND;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_ADD_FRIEND_free(tbc_CMSG_ADD_FRIEND* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ADD_FRIEND_write(WowWorldWriter* writer, const tbc_CMSG_ADD_FRIEND* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_DEL_FRIEND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_DEL_FRIEND_write(WowWorldWriter* writer, const tbc_CMSG_DEL_FRIEND* object);

typedef struct {
    uint64_t player;
    char* note;

} tbc_CMSG_SET_CONTACT_NOTES;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_SET_CONTACT_NOTES_free(tbc_CMSG_SET_CONTACT_NOTES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_CONTACT_NOTES_write(WowWorldWriter* writer, const tbc_CMSG_SET_CONTACT_NOTES* object);

typedef struct {
    char* name;

} tbc_CMSG_ADD_IGNORE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_ADD_IGNORE_free(tbc_CMSG_ADD_IGNORE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ADD_IGNORE_write(WowWorldWriter* writer, const tbc_CMSG_ADD_IGNORE* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_DEL_IGNORE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_DEL_IGNORE_write(WowWorldWriter* writer, const tbc_CMSG_DEL_IGNORE* object);

typedef struct {
    char* name;

} tbc_CMSG_GROUP_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GROUP_INVITE_free(tbc_CMSG_GROUP_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_INVITE_write(WowWorldWriter* writer, const tbc_CMSG_GROUP_INVITE* object);

typedef struct {
    char* name;

} tbc_SMSG_GROUP_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GROUP_INVITE_free(tbc_SMSG_GROUP_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GROUP_INVITE_write(WowWorldWriter* writer, const tbc_SMSG_GROUP_INVITE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_CANCEL_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_ACCEPT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_DECLINE_write(WowWorldWriter* writer);

typedef struct {
    char* name;

} tbc_SMSG_GROUP_DECLINE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GROUP_DECLINE_free(tbc_SMSG_GROUP_DECLINE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GROUP_DECLINE_write(WowWorldWriter* writer, const tbc_SMSG_GROUP_DECLINE* object);

typedef struct {
    char* name;

} tbc_CMSG_GROUP_UNINVITE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GROUP_UNINVITE_free(tbc_CMSG_GROUP_UNINVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_UNINVITE_write(WowWorldWriter* writer, const tbc_CMSG_GROUP_UNINVITE* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_GROUP_UNINVITE_GUID;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_UNINVITE_GUID_write(WowWorldWriter* writer, const tbc_CMSG_GROUP_UNINVITE_GUID* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GROUP_UNINVITE_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} tbc_CMSG_GROUP_SET_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_SET_LEADER_write(WowWorldWriter* writer, const tbc_CMSG_GROUP_SET_LEADER* object);

typedef struct {
    char* name;

} tbc_SMSG_GROUP_SET_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GROUP_SET_LEADER_free(tbc_SMSG_GROUP_SET_LEADER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GROUP_SET_LEADER_write(WowWorldWriter* writer, const tbc_SMSG_GROUP_SET_LEADER* object);

typedef struct {
    tbc_GroupLootSetting loot_setting;
    uint64_t loot_master;
    tbc_ItemQuality loot_threshold;

} tbc_CMSG_LOOT_METHOD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LOOT_METHOD_write(WowWorldWriter* writer, const tbc_CMSG_LOOT_METHOD* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_DISBAND_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GROUP_DESTROYED_write(WowWorldWriter* writer);

typedef struct {
    tbc_GroupLootSetting loot_setting;
    /* Zero if loot_setting is not MASTER_LOOT */
    uint64_t master_loot;
    tbc_ItemQuality loot_threshold;
    tbc_DungeonDifficulty difficulty;
} tbc_SMSG_GROUP_LIST_group_not_empty;

typedef struct {
    tbc_GroupType group_type;
    bool battleground_group;
    uint8_t group_id;
    /* mangoszero/cmangos/vmangos: own flags (groupid | (assistant?0x80:0)) */
    uint8_t flags;
    uint64_t group;
    uint32_t amount_of_members;
    tbc_GroupListMember* members;
    uint64_t leader;

    tbc_SMSG_GROUP_LIST_group_not_empty* group_not_empty;
} tbc_SMSG_GROUP_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GROUP_LIST_free(tbc_SMSG_GROUP_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GROUP_LIST_write(WowWorldWriter* writer, const tbc_SMSG_GROUP_LIST* object);

typedef struct {
    uint64_t guid;
    tbc_GroupUpdateFlags mask;
    tbc_GroupMemberOnlineStatus status;
    uint16_t current_health;
    uint16_t max_health;
    tbc_Power power;
    uint16_t current_power;
    uint16_t max_power;
    uint16_t level;
    tbc_Area area;
    /* cmangos: float cast to u16 */
    uint16_t position_x;
    /* cmangos: float cast to u16 */
    uint16_t position_y;
    /* cmangos: In all checked pre-2.x data of packets included only positive auras */
    tbc_AuraMask auras;
    uint64_t pet;
    char* pet_name;
    uint16_t pet_display_id;
    uint16_t pet_current_health;
    uint16_t pet_max_health;
    tbc_Power pet_power_type;
    uint16_t pet_current_power;
    uint16_t pet_max_power;
    tbc_AuraMask pet_auras;

} tbc_SMSG_PARTY_MEMBER_STATS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PARTY_MEMBER_STATS_free(tbc_SMSG_PARTY_MEMBER_STATS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PARTY_MEMBER_STATS_write(WowWorldWriter* writer, const tbc_SMSG_PARTY_MEMBER_STATS* object);

typedef struct {
    tbc_PartyOperation operation;
    char* member;
    tbc_PartyResult result;

} tbc_SMSG_PARTY_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PARTY_COMMAND_RESULT_free(tbc_SMSG_PARTY_COMMAND_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PARTY_COMMAND_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_PARTY_COMMAND_RESULT* object);

typedef struct {
    char* guild_name;

} tbc_CMSG_GUILD_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_CREATE_free(tbc_CMSG_GUILD_CREATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_CREATE_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_CREATE* object);

typedef struct {
    char* invited_player;

} tbc_CMSG_GUILD_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_INVITE_free(tbc_CMSG_GUILD_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_INVITE_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_INVITE* object);

typedef struct {
    char* player_name;
    char* guild_name;

} tbc_SMSG_GUILD_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GUILD_INVITE_free(tbc_SMSG_GUILD_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GUILD_INVITE_write(WowWorldWriter* writer, const tbc_SMSG_GUILD_INVITE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_ACCEPT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_DECLINE_write(WowWorldWriter* writer);

typedef struct {
    char* player;

} tbc_SMSG_GUILD_DECLINE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GUILD_DECLINE_free(tbc_SMSG_GUILD_DECLINE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GUILD_DECLINE_write(WowWorldWriter* writer, const tbc_SMSG_GUILD_DECLINE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_INFO_write(WowWorldWriter* writer);

typedef struct {
    char* guild_name;
    uint32_t created_day;
    uint32_t created_month;
    uint32_t created_year;
    uint32_t amount_of_characters_in_guild;
    uint32_t amount_of_accounts_in_guild;

} tbc_SMSG_GUILD_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GUILD_INFO_free(tbc_SMSG_GUILD_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GUILD_INFO_write(WowWorldWriter* writer, const tbc_SMSG_GUILD_INFO* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_ROSTER_write(WowWorldWriter* writer);

typedef struct {
    uint32_t amount_of_members;
    char* motd;
    char* guild_info;
    uint32_t amount_of_rights;
    tbc_GuildRights* rights;
    tbc_GuildMember* members;

} tbc_SMSG_GUILD_ROSTER;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GUILD_ROSTER_free(tbc_SMSG_GUILD_ROSTER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GUILD_ROSTER_write(WowWorldWriter* writer, const tbc_SMSG_GUILD_ROSTER* object);

typedef struct {
    char* player_name;

} tbc_CMSG_GUILD_PROMOTE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_PROMOTE_free(tbc_CMSG_GUILD_PROMOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_PROMOTE_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_PROMOTE* object);

typedef struct {
    char* player_name;

} tbc_CMSG_GUILD_DEMOTE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_DEMOTE_free(tbc_CMSG_GUILD_DEMOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_DEMOTE_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_DEMOTE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_LEAVE_write(WowWorldWriter* writer);

typedef struct {
    char* player_name;

} tbc_CMSG_GUILD_REMOVE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_REMOVE_free(tbc_CMSG_GUILD_REMOVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_REMOVE_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_REMOVE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_DISBAND_write(WowWorldWriter* writer);

typedef struct {
    char* new_guild_leader_name;

} tbc_CMSG_GUILD_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_LEADER_free(tbc_CMSG_GUILD_LEADER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_LEADER_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_LEADER* object);

typedef struct {
    char* message_of_the_day;

} tbc_CMSG_GUILD_MOTD;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_MOTD_free(tbc_CMSG_GUILD_MOTD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_MOTD_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_MOTD* object);

typedef struct {
    tbc_GuildEvent event;
    uint8_t amount_of_events;
    char** event_descriptions;

} tbc_SMSG_GUILD_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GUILD_EVENT_free(tbc_SMSG_GUILD_EVENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GUILD_EVENT_write(WowWorldWriter* writer, const tbc_SMSG_GUILD_EVENT* object);

typedef struct {
    tbc_GuildCommand command;
    char* string;
    tbc_GuildCommandResult result;

} tbc_SMSG_GUILD_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GUILD_COMMAND_RESULT_free(tbc_SMSG_GUILD_COMMAND_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GUILD_COMMAND_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_GUILD_COMMAND_RESULT* object);

typedef struct {
    tbc_ChatType chat_type;
    tbc_Language language;
    char* target_player;
    char* channel;
    char* message;

} tbc_CMSG_MESSAGECHAT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_MESSAGECHAT_free(tbc_CMSG_MESSAGECHAT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MESSAGECHAT_write(WowWorldWriter* writer, const tbc_CMSG_MESSAGECHAT* object);

typedef struct {
    tbc_ChatType chat_type;
    tbc_Language language;
    char* sender;
    NamedGuid target1;
    NamedGuid target2;
    char* channel_name;
    uint64_t target4;
    uint64_t target5;
    char* message;
    tbc_PlayerChatTag tag;

} tbc_SMSG_MESSAGECHAT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_MESSAGECHAT_free(tbc_SMSG_MESSAGECHAT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MESSAGECHAT_write(WowWorldWriter* writer, const tbc_SMSG_MESSAGECHAT* object);

typedef struct {
    uint32_t channel_id;
    uint8_t unknown1;
    uint8_t unknown2;
    char* channel_name;
    char* channel_password;

} tbc_CMSG_JOIN_CHANNEL;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_JOIN_CHANNEL_free(tbc_CMSG_JOIN_CHANNEL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_JOIN_CHANNEL_write(WowWorldWriter* writer, const tbc_CMSG_JOIN_CHANNEL* object);

typedef struct {
    uint32_t channel_id;
    char* channel_name;

} tbc_CMSG_LEAVE_CHANNEL;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_LEAVE_CHANNEL_free(tbc_CMSG_LEAVE_CHANNEL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LEAVE_CHANNEL_write(WowWorldWriter* writer, const tbc_CMSG_LEAVE_CHANNEL* object);

typedef struct {
    uint32_t unknown2;
    uint32_t unkwown3;
} tbc_SMSG_CHANNEL_NOTIFY_unknown1;

typedef struct {
    tbc_ChatNotify notify_type;
    char* channel_name;

    tbc_SMSG_CHANNEL_NOTIFY_unknown1* unknown1;
} tbc_SMSG_CHANNEL_NOTIFY;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_CHANNEL_NOTIFY_free(tbc_SMSG_CHANNEL_NOTIFY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHANNEL_NOTIFY_write(WowWorldWriter* writer, const tbc_SMSG_CHANNEL_NOTIFY* object);

typedef struct {
    char* channel_name;

} tbc_CMSG_CHANNEL_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_LIST_free(tbc_CMSG_CHANNEL_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_LIST_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_LIST* object);

typedef struct {
    char* channel_name;
    tbc_ChannelFlags channel_flags;
    uint32_t amount_of_members;
    tbc_ChannelMember* members;

} tbc_SMSG_CHANNEL_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_CHANNEL_LIST_free(tbc_SMSG_CHANNEL_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHANNEL_LIST_write(WowWorldWriter* writer, const tbc_SMSG_CHANNEL_LIST* object);

typedef struct {
    char* channel_name;
    char* channel_password;

} tbc_CMSG_CHANNEL_PASSWORD;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_PASSWORD_free(tbc_CMSG_CHANNEL_PASSWORD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_PASSWORD_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_PASSWORD* object);

typedef struct {
    char* channel_name;
    char* new_owner;

} tbc_CMSG_CHANNEL_SET_OWNER;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_SET_OWNER_free(tbc_CMSG_CHANNEL_SET_OWNER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_SET_OWNER_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_SET_OWNER* object);

typedef struct {
    char* channel_name;

} tbc_CMSG_CHANNEL_OWNER;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_OWNER_free(tbc_CMSG_CHANNEL_OWNER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_OWNER_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_OWNER* object);

typedef struct {
    char* channel_name;
    char* player_name;

} tbc_CMSG_CHANNEL_MODERATOR;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_MODERATOR_free(tbc_CMSG_CHANNEL_MODERATOR* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_MODERATOR_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_MODERATOR* object);

typedef struct {
    char* channel_name;
    char* player_name;

} tbc_CMSG_CHANNEL_UNMODERATOR;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_UNMODERATOR_free(tbc_CMSG_CHANNEL_UNMODERATOR* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_UNMODERATOR_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_UNMODERATOR* object);

typedef struct {
    char* channel_name;
    char* player_name;

} tbc_CMSG_CHANNEL_MUTE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_MUTE_free(tbc_CMSG_CHANNEL_MUTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_MUTE_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_MUTE* object);

typedef struct {
    char* channel_name;
    char* player_name;

} tbc_CMSG_CHANNEL_UNMUTE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_UNMUTE_free(tbc_CMSG_CHANNEL_UNMUTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_UNMUTE_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_UNMUTE* object);

typedef struct {
    char* channel_name;
    char* player_name;

} tbc_CMSG_CHANNEL_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_INVITE_free(tbc_CMSG_CHANNEL_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_INVITE_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_INVITE* object);

typedef struct {
    char* channel_name;
    char* player_name;

} tbc_CMSG_CHANNEL_KICK;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_KICK_free(tbc_CMSG_CHANNEL_KICK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_KICK_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_KICK* object);

typedef struct {
    char* channel_name;
    char* player_name;

} tbc_CMSG_CHANNEL_BAN;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_BAN_free(tbc_CMSG_CHANNEL_BAN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_BAN_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_BAN* object);

typedef struct {
    char* channel_name;
    char* player_name;

} tbc_CMSG_CHANNEL_UNBAN;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_UNBAN_free(tbc_CMSG_CHANNEL_UNBAN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_UNBAN_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_UNBAN* object);

typedef struct {
    char* channel_name;

} tbc_CMSG_CHANNEL_ANNOUNCEMENTS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_ANNOUNCEMENTS_free(tbc_CMSG_CHANNEL_ANNOUNCEMENTS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_ANNOUNCEMENTS_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_ANNOUNCEMENTS* object);

typedef struct {
    char* channel_name;

} tbc_CMSG_CHANNEL_MODERATE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_MODERATE_free(tbc_CMSG_CHANNEL_MODERATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_MODERATE_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_MODERATE* object);

typedef struct {
    uint32_t amount_of_objects;
    uint8_t has_transport;
    tbc_Object* objects;

} tbc_SMSG_UPDATE_OBJECT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_UPDATE_OBJECT_free(tbc_SMSG_UPDATE_OBJECT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_UPDATE_OBJECT_write(WowWorldWriter* writer, const tbc_SMSG_UPDATE_OBJECT* object);

/* Immediately removes an object from the presence of the player.
Used by vmangos for logout. */
typedef struct {
    uint64_t guid;

} tbc_SMSG_DESTROY_OBJECT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DESTROY_OBJECT_write(WowWorldWriter* writer, const tbc_SMSG_DESTROY_OBJECT* object);

typedef struct {
    uint8_t bag_index;
    uint8_t bag_slot;
    uint8_t spell_index;
    /* mangosone: next cast if exists (single or not) */
    uint8_t cast_count;
    uint64_t item;
    tbc_SpellCastTargets targets;

} tbc_CMSG_USE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_USE_ITEM_free(tbc_CMSG_USE_ITEM* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_USE_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_USE_ITEM* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot;

} tbc_CMSG_OPEN_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_OPEN_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_OPEN_ITEM* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot;

} tbc_CMSG_READ_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_READ_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_READ_ITEM* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_READ_ITEM_OK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_READ_ITEM_OK_write(WowWorldWriter* writer, const tbc_SMSG_READ_ITEM_OK* object);

/* vmangos has extra u8 with comment `0..2, read failure reason? if == 1, use next command`. */
typedef struct {
    uint64_t guid;

} tbc_SMSG_READ_ITEM_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_READ_ITEM_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_READ_ITEM_FAILED* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} tbc_SMSG_ITEM_COOLDOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ITEM_COOLDOWN_write(WowWorldWriter* writer, const tbc_SMSG_ITEM_COOLDOWN* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_GAMEOBJ_USE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GAMEOBJ_USE_write(WowWorldWriter* writer, const tbc_CMSG_GAMEOBJ_USE* object);

typedef struct {
    uint64_t guid;
    uint32_t animation_id;

} tbc_SMSG_GAMEOBJECT_CUSTOM_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GAMEOBJECT_CUSTOM_ANIM_write(WowWorldWriter* writer, const tbc_SMSG_GAMEOBJECT_CUSTOM_ANIM* object);

typedef struct {
    uint32_t trigger_id;

} tbc_CMSG_AREATRIGGER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AREATRIGGER_write(WowWorldWriter* writer, const tbc_CMSG_AREATRIGGER* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_FORWARD_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_FORWARD_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_FORWARD_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_FORWARD_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_FORWARD_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_FORWARD_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_BACKWARD_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_BACKWARD_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_BACKWARD_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_BACKWARD_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_BACKWARD_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_BACKWARD_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_STRAFE_LEFT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_STRAFE_LEFT_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_STRAFE_LEFT_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_STRAFE_LEFT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_STRAFE_LEFT_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_STRAFE_LEFT_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_STRAFE_RIGHT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_STRAFE_RIGHT_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_STRAFE_RIGHT_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_STRAFE_RIGHT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_STRAFE_RIGHT_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_STRAFE_RIGHT_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_STRAFE_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_STRAFE_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_STRAFE_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_STRAFE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_STRAFE_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_STRAFE_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_JUMP_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_JUMP_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_JUMP_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_JUMP_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_JUMP_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_JUMP_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_TURN_LEFT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_TURN_LEFT_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_TURN_LEFT_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_TURN_LEFT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_TURN_LEFT_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_TURN_LEFT_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_TURN_RIGHT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_TURN_RIGHT_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_TURN_RIGHT_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_TURN_RIGHT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_TURN_RIGHT_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_TURN_RIGHT_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_TURN_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_TURN_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_TURN_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_TURN_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_TURN_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_TURN_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_PITCH_UP_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_PITCH_UP_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_PITCH_UP_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_PITCH_UP_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_PITCH_UP_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_PITCH_UP_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_PITCH_DOWN_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_PITCH_DOWN_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_PITCH_DOWN_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_PITCH_DOWN_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_PITCH_DOWN_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_PITCH_DOWN_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_PITCH_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_PITCH_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_PITCH_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_PITCH_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_PITCH_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_PITCH_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_SET_RUN_MODE_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_RUN_MODE_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_RUN_MODE_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_SET_RUN_MODE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_RUN_MODE_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_RUN_MODE_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_SET_WALK_MODE_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_WALK_MODE_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_WALK_MODE_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_SET_WALK_MODE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_WALK_MODE_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_WALK_MODE_Server* object);

/* There does not appear to be a client version of this MSG. */
typedef struct {
    uint64_t player;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_TELEPORT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_TELEPORT_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_TELEPORT_Server* object);

/* There does not appear to be a CMSG version of this MSG. */
typedef struct {
    all_Vector3d position;
    float orientation;

} tbc_MSG_MOVE_TELEPORT_CHEAT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_TELEPORT_CHEAT_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_TELEPORT_CHEAT_Server* object);

/* Response to [MSG_MOVE_TELEPORT_ACK_Server], at which point [MSG_MOVE_TELEPORT_ACK_Server] should be sent to observing players. */
typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    uint32_t time;

} tbc_MSG_MOVE_TELEPORT_ACK_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_TELEPORT_ACK_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_TELEPORT_ACK_Client* object);

/* Can be response to [CMSG_TELEPORT_TO_UNIT].
Can also be a response to [MSG_MOVE_TELEPORT_ACK_Client] after being sent. */
typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_TELEPORT_ACK_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_TELEPORT_ACK_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_TELEPORT_ACK_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_FALL_LAND_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_FALL_LAND_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_FALL_LAND_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_FALL_LAND_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_FALL_LAND_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_FALL_LAND_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_SWIM_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_SWIM_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_SWIM_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_SWIM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_SWIM_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_SWIM_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_SWIM_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_SWIM_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_SWIM_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_SWIM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_SWIM_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_SWIM_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_SET_FACING_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_FACING_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_FACING_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_SET_FACING_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_FACING_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_FACING_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_SET_PITCH_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_PITCH_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_PITCH_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_SET_PITCH_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_PITCH_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_PITCH_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_WORLDPORT_ACK_cmsg_write(WowWorldWriter* writer);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_WORLDPORT_ACK_smsg_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    all_Vector3d spline_point;
    uint32_t spline_id;
    tbc_MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all_Vector3d position;
    tbc_SplineFlag spline_flags;
    uint32_t duration;
    MonsterMoveSpline splines;

} tbc_SMSG_MONSTER_MOVE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_MONSTER_MOVE_free(tbc_SMSG_MONSTER_MOVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MONSTER_MOVE_write(WowWorldWriter* writer, const tbc_SMSG_MONSTER_MOVE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} tbc_SMSG_MOVE_WATER_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_WATER_WALK_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_WATER_WALK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} tbc_SMSG_MOVE_LAND_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_LAND_WALK_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_LAND_WALK* object);

/* vmangos/mangoszero: write in client console: setrawpos x y z o. For now, it is implemented like worldport but on the same map. Consider using [MSG_MOVE_SET_RAW_POSITION_ACK]. */
typedef struct {
    all_Vector3d position;
    float orientation;

} tbc_CMSG_MOVE_SET_RAW_POSITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_SET_RAW_POSITION_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_SET_RAW_POSITION* object);

/* Tells the client that the running speed has changed.
Client replies with [CMSG_FORCE_RUN_SPEED_CHANGE_ACK].
vmangos sends this message to the client being changed and [SMSG_SPLINE_SET_RUN_SPEED] to others. */
typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    /* mangosone sets to 0
mangosone: new 2.1.0 */
    uint8_t unknown;
    float speed;

} tbc_SMSG_FORCE_RUN_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCE_RUN_SPEED_CHANGE_write(WowWorldWriter* writer, const tbc_SMSG_FORCE_RUN_SPEED_CHANGE* object);

/* Sent to acknowledge the new speed. Reply to [SMSG_FORCE_RUN_SPEED_CHANGE]. */
typedef struct {
    uint64_t guid;
    uint32_t counter;
    tbc_MovementInfo info;
    float new_speed;

} tbc_CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FORCE_RUN_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const tbc_CMSG_FORCE_RUN_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} tbc_SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCE_RUN_BACK_SPEED_CHANGE_write(WowWorldWriter* writer, const tbc_SMSG_FORCE_RUN_BACK_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    tbc_MovementInfo info;
    float new_speed;

} tbc_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const tbc_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} tbc_SMSG_FORCE_SWIM_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCE_SWIM_SPEED_CHANGE_write(WowWorldWriter* writer, const tbc_SMSG_FORCE_SWIM_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    tbc_MovementInfo info;
    float new_speed;

} tbc_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const tbc_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} tbc_SMSG_FORCE_MOVE_ROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCE_MOVE_ROOT_write(WowWorldWriter* writer, const tbc_SMSG_FORCE_MOVE_ROOT* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    tbc_MovementInfo info;

} tbc_CMSG_FORCE_MOVE_ROOT_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FORCE_MOVE_ROOT_ACK_write(WowWorldWriter* writer, const tbc_CMSG_FORCE_MOVE_ROOT_ACK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} tbc_SMSG_FORCE_MOVE_UNROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCE_MOVE_UNROOT_write(WowWorldWriter* writer, const tbc_SMSG_FORCE_MOVE_UNROOT* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    tbc_MovementInfo info;

} tbc_CMSG_FORCE_MOVE_UNROOT_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FORCE_MOVE_UNROOT_ACK_write(WowWorldWriter* writer, const tbc_CMSG_FORCE_MOVE_UNROOT_ACK* object);

/* There does not appear to be a CMSG version of this MSG. */
typedef struct {
    uint64_t player;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_ROOT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_ROOT_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_ROOT_Server* object);

typedef struct {
    uint64_t player;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_UNROOT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_UNROOT_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_UNROOT_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_HEARTBEAT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_HEARTBEAT_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_HEARTBEAT_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_HEARTBEAT_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_HEARTBEAT_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_HEARTBEAT_Server* object);

typedef struct {
    uint64_t guid;
    /* mangoszero: Sequence
mangoszero sets to 0 */
    uint32_t movement_counter;
    /* cmangos/mangoszero/vmangos: x direction */
    float v_cos;
    /* cmangos/mangoszero/vmangos: y direction */
    float v_sin;
    /* cmangos/mangoszero/vmangos: Horizontal speed */
    float horizontal_speed;
    /* cmangos/mangoszero/vmangos: Z Movement speed (vertical) */
    float vertical_speed;

} tbc_SMSG_MOVE_KNOCK_BACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_KNOCK_BACK_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_KNOCK_BACK* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    tbc_MovementInfo info;

} tbc_CMSG_MOVE_KNOCK_BACK_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_KNOCK_BACK_ACK_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_KNOCK_BACK_ACK* object);

typedef struct {
    uint64_t player;
    tbc_MovementInfo info;
    float sin_angle;
    float cos_angle;
    float x_y_speed;
    float velocity;

} tbc_MSG_MOVE_KNOCK_BACK_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_KNOCK_BACK_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_KNOCK_BACK_Server* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} tbc_SMSG_MOVE_FEATHER_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_FEATHER_FALL_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_FEATHER_FALL* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} tbc_SMSG_MOVE_NORMAL_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_NORMAL_FALL_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_NORMAL_FALL* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} tbc_SMSG_MOVE_SET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_SET_HOVER_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_SET_HOVER* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} tbc_SMSG_MOVE_UNSET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_UNSET_HOVER_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_UNSET_HOVER* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    tbc_MovementInfo info;
    uint32_t is_applied;

} tbc_CMSG_MOVE_HOVER_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_HOVER_ACK_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_HOVER_ACK* object);

typedef struct {
    uint64_t player;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_HOVER_cmsg_write(WowWorldWriter* writer, const tbc_MSG_MOVE_HOVER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_HOVER_smsg_write(WowWorldWriter* writer, const tbc_MSG_MOVE_HOVER* object);

typedef struct {
    tbc_CinematicSequenceId cinematic_sequence_id;

} tbc_SMSG_TRIGGER_CINEMATIC;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TRIGGER_CINEMATIC_write(WowWorldWriter* writer, const tbc_SMSG_TRIGGER_CINEMATIC* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_NEXT_CINEMATIC_CAMERA_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_COMPLETE_CINEMATIC_write(WowWorldWriter* writer);

/* Data for which tutorials the client has passed.
All bits set means that all tutorials have been passed.
Must be sent after [SMSG_LOGIN_VERIFY_WORLD] otherwise the client will SEGFAULT. */
typedef struct {
    uint32_t tutorial_data[8];

} tbc_SMSG_TUTORIAL_FLAGS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TUTORIAL_FLAGS_write(WowWorldWriter* writer, const tbc_SMSG_TUTORIAL_FLAGS* object);

typedef struct {
    /* arcemu indexes into the tutorials by dividing by 32 and modulo 32. */
    uint32_t tutorial_flag;

} tbc_CMSG_TUTORIAL_FLAG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TUTORIAL_FLAG_write(WowWorldWriter* writer, const tbc_CMSG_TUTORIAL_FLAG* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TUTORIAL_CLEAR_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TUTORIAL_RESET_write(WowWorldWriter* writer);

/* Automatically sent by the client when it goes AFK. */
typedef struct {
    tbc_UnitStandState animation_state;

} tbc_CMSG_STANDSTATECHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_STANDSTATECHANGE_write(WowWorldWriter* writer, const tbc_CMSG_STANDSTATECHANGE* object);

typedef struct {
    tbc_Emote emote;

} tbc_CMSG_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_EMOTE_write(WowWorldWriter* writer, const tbc_CMSG_EMOTE* object);

typedef struct {
    tbc_Emote emote;
    uint64_t guid;

} tbc_SMSG_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_EMOTE_write(WowWorldWriter* writer, const tbc_SMSG_EMOTE* object);

/* Sent to notify the server that the client wants to perform an emote like /dance or /cry.
Server responds with [SMSG_TEXT_EMOTE] and [SMSG_EMOTE]. */
typedef struct {
    tbc_TextEmote text_emote;
    uint32_t emote;
    /* Guid targeted by the client. */
    uint64_t target;

} tbc_CMSG_TEXT_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TEXT_EMOTE_write(WowWorldWriter* writer, const tbc_CMSG_TEXT_EMOTE* object);

typedef struct {
    uint64_t guid;
    tbc_TextEmote text_emote;
    uint32_t emote;
    char* name;

} tbc_SMSG_TEXT_EMOTE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_TEXT_EMOTE_free(tbc_SMSG_TEXT_EMOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TEXT_EMOTE_write(WowWorldWriter* writer, const tbc_SMSG_TEXT_EMOTE* object);

typedef struct {
    uint8_t item_slot;

} tbc_CMSG_AUTOSTORE_LOOT_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUTOSTORE_LOOT_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_AUTOSTORE_LOOT_ITEM* object);

typedef struct {
    uint8_t source_bag;
    uint8_t source_slot;

} tbc_CMSG_AUTOEQUIP_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUTOEQUIP_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_AUTOEQUIP_ITEM* object);

typedef struct {
    uint8_t source_bag;
    uint8_t source_slot;
    uint8_t destination_bag;

} tbc_CMSG_AUTOSTORE_BAG_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUTOSTORE_BAG_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_AUTOSTORE_BAG_ITEM* object);

typedef struct {
    uint8_t destination_bag;
    uint8_t destionation_slot;
    uint8_t source_bag;
    uint8_t source_slot;

} tbc_CMSG_SWAP_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SWAP_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_SWAP_ITEM* object);

typedef struct {
    tbc_ItemSlot source_slot;
    tbc_ItemSlot destination_slot;

} tbc_CMSG_SWAP_INV_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SWAP_INV_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_SWAP_INV_ITEM* object);

typedef struct {
    uint8_t source_bag;
    uint8_t source_slot;
    uint8_t destination_bag;
    uint8_t destination_slot;
    uint8_t amount;

} tbc_CMSG_SPLIT_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SPLIT_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_SPLIT_ITEM* object);

typedef struct {
    uint64_t guid;
    uint8_t destination_slot;

} tbc_CMSG_AUTOEQUIP_ITEM_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUTOEQUIP_ITEM_SLOT_write(WowWorldWriter* writer, const tbc_CMSG_AUTOEQUIP_ITEM_SLOT* object);

typedef struct {
    uint8_t bag;
    uint8_t slot;
    uint8_t amount;
    uint8_t unknown1;
    uint8_t unknown2;
    uint8_t unknown3;

} tbc_CMSG_DESTROYITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_DESTROYITEM_write(WowWorldWriter* writer, const tbc_CMSG_DESTROYITEM* object);

typedef struct {
    tbc_InventoryResult result;
    uint64_t item1;
    uint64_t item2;
    /* cmangos: bag type subclass, used with EQUIP_ERR_EVENT_AUTOEQUIP_BIND_CONFIRM and EQUIP_ERR_ITEM_DOESNT_GO_INTO_BAG2
vmangos sets to 0 */
    uint8_t bag_type_subclass;
    uint32_t required_level;

} tbc_SMSG_INVENTORY_CHANGE_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_INVENTORY_CHANGE_FAILURE_write(WowWorldWriter* writer, const tbc_SMSG_INVENTORY_CHANGE_FAILURE* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_INSPECT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_INSPECT_write(WowWorldWriter* writer, const tbc_CMSG_INSPECT* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_INITIATE_TRADE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_INITIATE_TRADE_write(WowWorldWriter* writer, const tbc_CMSG_INITIATE_TRADE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BEGIN_TRADE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BUSY_TRADE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_IGNORE_TRADE_write(WowWorldWriter* writer);

typedef struct {
    /* Skipped in vmangos and set to 1 for bots */
    uint32_t unknown1;

} tbc_CMSG_ACCEPT_TRADE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ACCEPT_TRADE_write(WowWorldWriter* writer, const tbc_CMSG_ACCEPT_TRADE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_UNACCEPT_TRADE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CANCEL_TRADE_write(WowWorldWriter* writer);

typedef struct {
    uint8_t trade_slot;
    uint8_t bag;
    uint8_t slot;

} tbc_CMSG_SET_TRADE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_TRADE_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_SET_TRADE_ITEM* object);

typedef struct {
    uint8_t trade_slot;

} tbc_CMSG_CLEAR_TRADE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CLEAR_TRADE_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_CLEAR_TRADE_ITEM* object);

typedef struct {
    uint32_t gold;

} tbc_CMSG_SET_TRADE_GOLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_TRADE_GOLD_write(WowWorldWriter* writer, const tbc_CMSG_SET_TRADE_GOLD* object);

typedef struct {
    tbc_TradeStatus status;
    /* Set to 0 in vmangos. */
    uint64_t unknown1;
    tbc_InventoryResult inventory_result;
    /* used for: EQUIP_ERR_BAG_FULL, EQUIP_ERR_CANT_CARRY_MORE_OF_THIS, EQUIP_ERR_MISSING_REAGENT, EQUIP_ERR_ITEM_MAX_LIMIT_CATEGORY_COUNT_EXCEEDED */
    bool target_error;
    /* ItemLimitCategory.dbc entry */
    uint32_t item_limit_category_id;
    /* Trade slot -1 here clears CGTradeInfo::m_tradeMoney */
    uint8_t slot;

} tbc_SMSG_TRADE_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TRADE_STATUS_write(WowWorldWriter* writer, const tbc_SMSG_TRADE_STATUS* object);

typedef struct {
    /* cmangos/vmangos/mangoszero: send trader or own trade windows state (last need for proper show spell apply to non-trade slot) */
    bool self_player;
    /* added in 2.4.0, this value must be equal to value from TRADE_STATUS_OPEN_WINDOW status packet (different value for different players to block multiple trades?) */
    uint32_t trade_id;
    /* cmangos/vmangos/mangoszero: sets to 7
cmangos/vmangos/mangoszero: trade slots count/number?, = next field in most cases */
    uint32_t trade_slot_count1;
    /* cmangos/vmangos/mangoszero: sets to 7
cmangos/vmangos/mangoszero: trade slots count/number?, = prev field in most cases */
    uint32_t trade_slot_count2;
    uint32_t money_in_trade;
    uint32_t spell_on_lowest_slot;
    /* vmangos/cmangos/mangoszero: All set to same as trade_slot_count* (7), unsure which determines how big this is. Unused slots are 0. */
    tbc_TradeSlot trade_slots[7];

} tbc_SMSG_TRADE_STATUS_EXTENDED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TRADE_STATUS_EXTENDED_write(WowWorldWriter* writer, const tbc_SMSG_TRADE_STATUS_EXTENDED* object);

typedef struct {
    /* vmangos/cmangos/mangoszero: sets to 0x00000040 (64)
mangostwo (wrath) sets this to 0x00000080 (128) */
    uint32_t amount_of_factions;
    tbc_FactionInitializer* factions;

} tbc_SMSG_INITIALIZE_FACTIONS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_INITIALIZE_FACTIONS_free(tbc_SMSG_INITIALIZE_FACTIONS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_INITIALIZE_FACTIONS_write(WowWorldWriter* writer, const tbc_SMSG_INITIALIZE_FACTIONS* object);

typedef struct {
    tbc_Faction faction;

} tbc_SMSG_SET_FACTION_VISIBLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SET_FACTION_VISIBLE_write(WowWorldWriter* writer, const tbc_SMSG_SET_FACTION_VISIBLE* object);

typedef struct {
    /* All emus set to 0. */
    float refer_a_friend_bonus;
    uint32_t amount_of_faction_standings;
    tbc_FactionStanding* faction_standings;

} tbc_SMSG_SET_FACTION_STANDING;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SET_FACTION_STANDING_free(tbc_SMSG_SET_FACTION_STANDING* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SET_FACTION_STANDING_write(WowWorldWriter* writer, const tbc_SMSG_SET_FACTION_STANDING* object);

typedef struct {
    tbc_Faction faction;
    tbc_FactionFlag flags;

} tbc_CMSG_SET_FACTION_ATWAR;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_FACTION_ATWAR_write(WowWorldWriter* writer, const tbc_CMSG_SET_FACTION_ATWAR* object);

typedef struct {
    tbc_ItemClass class_type;
    uint32_t item_sub_class_mask;

} tbc_SMSG_SET_PROFICIENCY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SET_PROFICIENCY_write(WowWorldWriter* writer, const tbc_SMSG_SET_PROFICIENCY* object);

typedef struct {
    uint8_t button;
    uint16_t action;
    uint8_t misc;
    uint8_t action_type;

} tbc_CMSG_SET_ACTION_BUTTON;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_ACTION_BUTTON_write(WowWorldWriter* writer, const tbc_CMSG_SET_ACTION_BUTTON* object);

typedef struct {
    uint32_t data[132];

} tbc_SMSG_ACTION_BUTTONS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ACTION_BUTTONS_write(WowWorldWriter* writer, const tbc_SMSG_ACTION_BUTTONS* object);

typedef struct {
    /* cmangos/mangoszero: sets to 0 */
    uint8_t unknown1;
    uint16_t spell_count;
    tbc_InitialSpell* initial_spells;
    uint16_t cooldown_count;
    tbc_CooldownSpell* cooldowns;

} tbc_SMSG_INITIAL_SPELLS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_INITIAL_SPELLS_free(tbc_SMSG_INITIAL_SPELLS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_INITIAL_SPELLS_write(WowWorldWriter* writer, const tbc_SMSG_INITIAL_SPELLS* object);

typedef struct {
    uint32_t id;

} tbc_SMSG_LEARNED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LEARNED_SPELL_write(WowWorldWriter* writer, const tbc_SMSG_LEARNED_SPELL* object);

typedef struct {
    uint16_t new_spell_id;
    uint16_t old_spell_id;

} tbc_SMSG_SUPERCEDED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SUPERCEDED_SPELL_write(WowWorldWriter* writer, const tbc_SMSG_SUPERCEDED_SPELL* object);

typedef struct {
    uint32_t spell;
    tbc_SpellCastTargets targets;

} tbc_CMSG_CAST_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CAST_SPELL_free(tbc_CMSG_CAST_SPELL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CAST_SPELL_write(WowWorldWriter* writer, const tbc_CMSG_CAST_SPELL* object);

typedef struct {
    uint32_t id;

} tbc_CMSG_CANCEL_CAST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CANCEL_CAST_write(WowWorldWriter* writer, const tbc_CMSG_CANCEL_CAST* object);

typedef struct {
    uint32_t id;
    tbc_SpellCastResult result;
    bool multiple_casts;
    uint32_t spell_focus;
    tbc_Area area;
    uint32_t totems[2];
    uint32_t totem_categories[2];
    uint32_t item_class;
    uint32_t item_sub_class;
    uint32_t item_inventory_type;

} tbc_SMSG_CAST_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CAST_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_CAST_FAILED* object);

typedef struct {
    /* cmangos/vmangos/mangoszero: if cast item is used, set this to guid of cast item, otherwise set it to same as caster. */
    uint64_t cast_item;
    uint64_t caster;
    uint32_t spell;
    uint8_t cast_count;
    tbc_CastFlags flags;
    uint32_t timer;
    tbc_SpellCastTargets targets;
    uint32_t ammo_display_id;
    uint32_t ammo_inventory_type;

} tbc_SMSG_SPELL_START;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SPELL_START_free(tbc_SMSG_SPELL_START* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELL_START_write(WowWorldWriter* writer, const tbc_SMSG_SPELL_START* object);

typedef struct {
    /* cmangos/vmangos/mangoszero: if cast item is used, set this to guid of cast item, otherwise set it to same as caster. */
    uint64_t cast_item;
    uint64_t caster;
    uint32_t spell;
    tbc_CastFlags flags;
    uint32_t timestamp;
    uint8_t amount_of_hits;
    uint64_t* hits;
    uint8_t amount_of_misses;
    tbc_SpellMiss* misses;
    tbc_SpellCastTargets targets;
    uint32_t ammo_display_id;
    uint32_t ammo_inventory_type;

} tbc_SMSG_SPELL_GO;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SPELL_GO_free(tbc_SMSG_SPELL_GO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELL_GO_write(WowWorldWriter* writer, const tbc_SMSG_SPELL_GO* object);

typedef struct {
    uint64_t guid;
    uint32_t spell;
    tbc_SpellCastResult result;

} tbc_SMSG_SPELL_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELL_FAILURE_write(WowWorldWriter* writer, const tbc_SMSG_SPELL_FAILURE* object);

typedef struct {
    uint64_t guid;
    uint8_t flags;
    uint32_t amount_of_cooldowns;
    tbc_SpellCooldownStatus* cooldowns;

} tbc_SMSG_SPELL_COOLDOWN;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SPELL_COOLDOWN_free(tbc_SMSG_SPELL_COOLDOWN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELL_COOLDOWN_write(WowWorldWriter* writer, const tbc_SMSG_SPELL_COOLDOWN* object);

typedef struct {
    uint32_t id;
    uint64_t guid;

} tbc_SMSG_COOLDOWN_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_COOLDOWN_EVENT_write(WowWorldWriter* writer, const tbc_SMSG_COOLDOWN_EVENT* object);

typedef struct {
    uint32_t id;

} tbc_CMSG_CANCEL_AURA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CANCEL_AURA_write(WowWorldWriter* writer, const tbc_CMSG_CANCEL_AURA* object);

typedef struct {
    uint8_t aura_slot;
    uint32_t aura_duration;

} tbc_SMSG_UPDATE_AURA_DURATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_UPDATE_AURA_DURATION_write(WowWorldWriter* writer, const tbc_SMSG_UPDATE_AURA_DURATION* object);

typedef struct {
    uint32_t id;
    tbc_SpellCastResult result;
    bool multiple_casts;
    uint32_t spell_focus;
    tbc_Area area;
    uint32_t totems[2];
    uint32_t totem_categories[2];
    uint32_t item_class;
    uint32_t item_sub_class;
    uint32_t item_inventory_type;

} tbc_SMSG_PET_CAST_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_CAST_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_PET_CAST_FAILED* object);

typedef struct {
    uint64_t caster;
    uint32_t spell;
    uint32_t duration;

} tbc_MSG_CHANNEL_START_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_CHANNEL_START_Server_write(WowWorldWriter* writer, const tbc_MSG_CHANNEL_START_Server* object);

typedef struct {
    uint64_t caster;
    uint32_t time;

} tbc_MSG_CHANNEL_UPDATE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_CHANNEL_UPDATE_Server_write(WowWorldWriter* writer, const tbc_MSG_CHANNEL_UPDATE_Server* object);

typedef struct {
    uint32_t id;

} tbc_CMSG_CANCEL_CHANNELLING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CANCEL_CHANNELLING_write(WowWorldWriter* writer, const tbc_CMSG_CANCEL_CHANNELLING* object);

typedef struct {
    uint64_t guid;
    tbc_AiReaction reaction;

} tbc_SMSG_AI_REACTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AI_REACTION_write(WowWorldWriter* writer, const tbc_SMSG_AI_REACTION* object);

/* Sets the current target. */
typedef struct {
    uint64_t target;

} tbc_CMSG_SET_SELECTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_SELECTION_write(WowWorldWriter* writer, const tbc_CMSG_SET_SELECTION* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_SET_TARGET_OBSOLETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_TARGET_OBSOLETE_write(WowWorldWriter* writer, const tbc_CMSG_SET_TARGET_OBSOLETE* object);

/* Signals that client has right clicked an opponent and is in the attack stance.
Server should reply with [SMSG_ATTACKSTART]. */
typedef struct {
    uint64_t guid;

} tbc_CMSG_ATTACKSWING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ATTACKSWING_write(WowWorldWriter* writer, const tbc_CMSG_ATTACKSWING* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ATTACKSTOP_write(WowWorldWriter* writer);

typedef struct {
    uint64_t attacker;
    uint64_t victim;

} tbc_SMSG_ATTACKSTART;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ATTACKSTART_write(WowWorldWriter* writer, const tbc_SMSG_ATTACKSTART* object);

typedef struct {
    uint64_t player;
    uint64_t enemy;
    /* cmangos/vmangos/mangoszero/arcemu/azerothcore/mangostwo: set to 0 with comment: unk, can be 1 also */
    uint32_t unknown1;

} tbc_SMSG_ATTACKSTOP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ATTACKSTOP_write(WowWorldWriter* writer, const tbc_SMSG_ATTACKSTOP* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ATTACKSWING_NOTINRANGE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ATTACKSWING_BADFACING_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ATTACKSWING_NOTSTANDING_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ATTACKSWING_DEADTARGET_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ATTACKSWING_CANT_ATTACK_write(WowWorldWriter* writer);

typedef struct {
    tbc_HitInfo hit_info;
    uint64_t attacker;
    uint64_t target;
    uint32_t total_damage;
    uint8_t amount_of_damages;
    tbc_DamageInfo* damages;
    uint32_t damage_state;
    uint32_t unknown1;
    /* vmangos: spell id, seen with heroic strike and disarm as examples */
    uint32_t spell_id;
    uint32_t blocked_amount;

} tbc_SMSG_ATTACKERSTATEUPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_ATTACKERSTATEUPDATE_free(tbc_SMSG_ATTACKERSTATEUPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ATTACKERSTATEUPDATE_write(WowWorldWriter* writer, const tbc_SMSG_ATTACKERSTATEUPDATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CANCEL_COMBAT_write(WowWorldWriter* writer);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t id;
    uint32_t damage;
    bool critical;
    /* mangosone: unused in client? */
    uint8_t unknown;

} tbc_SMSG_SPELLHEALLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELLHEALLOG_write(WowWorldWriter* writer, const tbc_SMSG_SPELLHEALLOG* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    tbc_Power power;
    uint32_t damage;

} tbc_SMSG_SPELLENERGIZELOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELLENERGIZELOG_write(WowWorldWriter* writer, const tbc_SMSG_SPELLENERGIZELOG* object);

/* Inform the client of a their hearthstone location. */
typedef struct {
    all_Vector3d position;
    tbc_Map map;
    tbc_Area area;

} tbc_SMSG_BINDPOINTUPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_BINDPOINTUPDATE_write(WowWorldWriter* writer, const tbc_SMSG_BINDPOINTUPDATE* object);

typedef struct {
    uint64_t guid;
    tbc_Area area;

} tbc_SMSG_PLAYERBOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PLAYERBOUND_write(WowWorldWriter* writer, const tbc_SMSG_PLAYERBOUND* object);

typedef struct {
    uint64_t guid;
    bool allow_movement;

} tbc_SMSG_CLIENT_CONTROL_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CLIENT_CONTROL_UPDATE_write(WowWorldWriter* writer, const tbc_SMSG_CLIENT_CONTROL_UPDATE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_REPOP_REQUEST_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    char* name;
    bool player;

} tbc_SMSG_RESURRECT_REQUEST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_RESURRECT_REQUEST_free(tbc_SMSG_RESURRECT_REQUEST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_RESURRECT_REQUEST_write(WowWorldWriter* writer, const tbc_SMSG_RESURRECT_REQUEST* object);

typedef struct {
    uint64_t guid;
    uint8_t status;

} tbc_CMSG_RESURRECT_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_RESURRECT_RESPONSE_write(WowWorldWriter* writer, const tbc_CMSG_RESURRECT_RESPONSE* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_LOOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LOOT_write(WowWorldWriter* writer, const tbc_CMSG_LOOT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LOOT_MONEY_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} tbc_CMSG_LOOT_RELEASE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LOOT_RELEASE_write(WowWorldWriter* writer, const tbc_CMSG_LOOT_RELEASE* object);

typedef struct {
    uint64_t guid;
    tbc_LootMethod loot_method;
    tbc_LootMethodError loot_error;
    uint32_t gold;
    uint8_t amount_of_items;
    tbc_LootItem* items;

} tbc_SMSG_LOOT_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_LOOT_RESPONSE_free(tbc_SMSG_LOOT_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_LOOT_RESPONSE* object);

typedef struct {
    uint64_t guid;
    /* Set to 1 on mangoszero/vmangos/cmangos/azerothcraft/mangosone/mangostwo/arcemu */
    uint8_t unknown1;

} tbc_SMSG_LOOT_RELEASE_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_RELEASE_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_LOOT_RELEASE_RESPONSE* object);

/* Notify a looting player that an item has been taken. */
typedef struct {
    uint8_t slot;

} tbc_SMSG_LOOT_REMOVED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_REMOVED_write(WowWorldWriter* writer, const tbc_SMSG_LOOT_REMOVED* object);

typedef struct {
    uint32_t amount;

} tbc_SMSG_LOOT_MONEY_NOTIFY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_MONEY_NOTIFY_write(WowWorldWriter* writer, const tbc_SMSG_LOOT_MONEY_NOTIFY* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_CLEAR_MONEY_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    tbc_NewItemSource source;
    tbc_NewItemCreationType creation_type;
    tbc_NewItemChatAlert alert_chat;
    uint8_t bag_slot;
    /* mangoszero: item slot, but when added to stack: 0xFFFFFFFF */
    uint32_t item_slot;
    uint32_t item;
    /* mangoszero: SuffixFactor */
    uint32_t item_suffix_factor;
    /* mangoszero: random item property id */
    uint32_t item_random_property_id;
    uint32_t item_count;
    uint32_t item_count_in_inventory;

} tbc_SMSG_ITEM_PUSH_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ITEM_PUSH_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_ITEM_PUSH_RESULT* object);

typedef struct {
    uint64_t initiator;
    uint64_t target;

} tbc_SMSG_DUEL_REQUESTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DUEL_REQUESTED_write(WowWorldWriter* writer, const tbc_SMSG_DUEL_REQUESTED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DUEL_OUTOFBOUNDS_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DUEL_INBOUNDS_write(WowWorldWriter* writer);

typedef struct {
    bool ended_without_interruption;

} tbc_SMSG_DUEL_COMPLETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DUEL_COMPLETE_write(WowWorldWriter* writer, const tbc_SMSG_DUEL_COMPLETE* object);

typedef struct {
    tbc_DuelWinnerReason reason;
    char* opponent_name;
    char* initiator_name;

} tbc_SMSG_DUEL_WINNER;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_DUEL_WINNER_free(tbc_SMSG_DUEL_WINNER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DUEL_WINNER_write(WowWorldWriter* writer, const tbc_SMSG_DUEL_WINNER* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_DUEL_ACCEPTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_DUEL_ACCEPTED_write(WowWorldWriter* writer, const tbc_CMSG_DUEL_ACCEPTED* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_DUEL_CANCELLED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_DUEL_CANCELLED_write(WowWorldWriter* writer, const tbc_CMSG_DUEL_CANCELLED* object);

/* This is not used in any TBC emulator, but trinitycore has it implemented so it is assumed to be valid for TBC as well. */
typedef struct {
    tbc_MountResult result;

} tbc_SMSG_MOUNTRESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOUNTRESULT_write(WowWorldWriter* writer, const tbc_SMSG_MOUNTRESULT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOUNTSPECIAL_ANIM_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} tbc_SMSG_MOUNTSPECIAL_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOUNTSPECIAL_ANIM_write(WowWorldWriter* writer, const tbc_SMSG_MOUNTSPECIAL_ANIM* object);

typedef struct {
    tbc_PetTameFailureReason reason;

} tbc_SMSG_PET_TAME_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_TAME_FAILURE_write(WowWorldWriter* writer, const tbc_SMSG_PET_TAME_FAILURE* object);

typedef struct {
    uint32_t position2;
    uint32_t data2;
} tbc_CMSG_PET_SET_ACTION_extra;

typedef struct {
    uint64_t guid;
    uint32_t position1;
    uint32_t data1;

    tbc_CMSG_PET_SET_ACTION_extra* extra;
} tbc_CMSG_PET_SET_ACTION;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_PET_SET_ACTION_free(tbc_CMSG_PET_SET_ACTION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PET_SET_ACTION_write(WowWorldWriter* writer, const tbc_CMSG_PET_SET_ACTION* object);

typedef struct {
    uint64_t pet;
    uint32_t data;
    uint64_t target;

} tbc_CMSG_PET_ACTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PET_ACTION_write(WowWorldWriter* writer, const tbc_CMSG_PET_ACTION* object);

typedef struct {
    uint64_t pet;

} tbc_CMSG_PET_ABANDON;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PET_ABANDON_write(WowWorldWriter* writer, const tbc_CMSG_PET_ABANDON* object);

typedef struct {
    uint64_t pet;
    char* name;
    bool declined;

} tbc_CMSG_PET_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_PET_RENAME_free(tbc_CMSG_PET_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PET_RENAME_write(WowWorldWriter* writer, const tbc_CMSG_PET_RENAME* object);

/* Some emulators have this with fields, but it has been verified to be empty on 1.12 through reverse engineering. */
typedef struct {
    tbc_PetNameInvalidReason reason;
    char* name;
    tbc_DeclinedPetNameIncluded included;
    char* declined_names[5];

} tbc_SMSG_PET_NAME_INVALID;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PET_NAME_INVALID_free(tbc_SMSG_PET_NAME_INVALID* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_NAME_INVALID_write(WowWorldWriter* writer, const tbc_SMSG_PET_NAME_INVALID* object);

typedef struct {
    uint32_t duration;
    tbc_PetReactState react;
    tbc_PetCommandState command;
    /* mangoszero: set to 0 */
    uint8_t unknown;
    tbc_PetEnabled pet_enabled;
    uint32_t action_bars[10];
    uint8_t amount_of_spells;
    uint32_t* spells;
    uint8_t amount_of_cooldowns;
    tbc_PetSpellCooldown* cooldowns;
} tbc_SMSG_PET_SPELLS_action_bars;

typedef struct {
    uint64_t pet;

    tbc_SMSG_PET_SPELLS_action_bars* action_bars;
} tbc_SMSG_PET_SPELLS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PET_SPELLS_free(tbc_SMSG_PET_SPELLS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_SPELLS_write(WowWorldWriter* writer, const tbc_SMSG_PET_SPELLS* object);

typedef struct {
    uint64_t guid;
    tbc_PetReactState react_state;
    tbc_PetCommandState command_state;
    /* vmangos sets to 0. */
    uint8_t unknown1;
    tbc_PetEnabled pet_enabled;

} tbc_SMSG_PET_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_MODE_write(WowWorldWriter* writer, const tbc_SMSG_PET_MODE* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_GOSSIP_HELLO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GOSSIP_HELLO_write(WowWorldWriter* writer, const tbc_CMSG_GOSSIP_HELLO* object);

typedef struct {
    /* vmangos: if (_player->PlayerTalkClass->GossipOptionCoded(gossipListId)) */
    char* code;
} tbc_CMSG_GOSSIP_SELECT_OPTION_unknown;

typedef struct {
    uint64_t guid;
    uint32_t menu_id;
    uint32_t gossip_list_id;

    tbc_CMSG_GOSSIP_SELECT_OPTION_unknown* unknown;
} tbc_CMSG_GOSSIP_SELECT_OPTION;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GOSSIP_SELECT_OPTION_free(tbc_CMSG_GOSSIP_SELECT_OPTION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GOSSIP_SELECT_OPTION_write(WowWorldWriter* writer, const tbc_CMSG_GOSSIP_SELECT_OPTION* object);

typedef struct {
    uint64_t guid;
    /* mangosone: new 2.4.0 */
    uint32_t menu_id;
    uint32_t title_text_id;
    uint32_t amount_of_gossip_items;
    tbc_GossipItem* gossips;
    uint32_t amount_of_quests;
    tbc_QuestItem* quests;

} tbc_SMSG_GOSSIP_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GOSSIP_MESSAGE_free(tbc_SMSG_GOSSIP_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GOSSIP_MESSAGE_write(WowWorldWriter* writer, const tbc_SMSG_GOSSIP_MESSAGE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GOSSIP_COMPLETE_write(WowWorldWriter* writer);

typedef struct {
    uint32_t text_id;
    uint64_t guid;

} tbc_CMSG_NPC_TEXT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_NPC_TEXT_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_NPC_TEXT_QUERY* object);

typedef struct {
    uint32_t text_id;
    tbc_NpcTextUpdate texts[8];

} tbc_SMSG_NPC_TEXT_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_NPC_TEXT_UPDATE_free(tbc_SMSG_NPC_TEXT_UPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_NPC_TEXT_UPDATE_write(WowWorldWriter* writer, const tbc_SMSG_NPC_TEXT_UPDATE* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_QUESTGIVER_STATUS_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTGIVER_STATUS_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_QUESTGIVER_STATUS_QUERY* object);

typedef struct {
    uint64_t guid;
    tbc_QuestGiverStatus status;

} tbc_SMSG_QUESTGIVER_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTGIVER_STATUS_write(WowWorldWriter* writer, const tbc_SMSG_QUESTGIVER_STATUS* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_QUESTGIVER_HELLO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTGIVER_HELLO_write(WowWorldWriter* writer, const tbc_CMSG_QUESTGIVER_HELLO* object);

typedef struct {
    uint64_t npc;
    char* title;
    /* mangoszero: player emote */
    uint32_t emote_delay;
    /* mangoszero: NPC emote */
    uint32_t emote;
    uint8_t amount_of_entries;
    tbc_QuestItem* quest_items;

} tbc_SMSG_QUESTGIVER_QUEST_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_QUESTGIVER_QUEST_LIST_free(tbc_SMSG_QUESTGIVER_QUEST_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTGIVER_QUEST_LIST_write(WowWorldWriter* writer, const tbc_SMSG_QUESTGIVER_QUEST_LIST* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} tbc_CMSG_QUESTGIVER_QUERY_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTGIVER_QUERY_QUEST_write(WowWorldWriter* writer, const tbc_CMSG_QUESTGIVER_QUERY_QUEST* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTGIVER_QUEST_AUTOLAUNCH_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;
    char* title;
    char* details;
    char* objectives;
    bool auto_finish;
    uint32_t suggested_players;
    uint32_t amount_of_choice_item_rewards;
    tbc_QuestItemReward* choice_item_rewards;
    uint32_t amount_of_item_rewards;
    tbc_QuestItemReward* item_rewards;
    uint32_t money_reward;
    uint32_t honor_reward;
    /* mangosone: reward spell, this spell will display (icon) (casted if RewSpellCast==0) */
    uint32_t reward_spell;
    uint32_t casted_spell;
    /* mangosone: CharTitle, new 2.4.0, player gets this title (bit index from CharTitles) */
    uint32_t title_reward;
    uint32_t amount_of_emotes;
    tbc_QuestDetailsEmote* emotes;

} tbc_SMSG_QUESTGIVER_QUEST_DETAILS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_QUESTGIVER_QUEST_DETAILS_free(tbc_SMSG_QUESTGIVER_QUEST_DETAILS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTGIVER_QUEST_DETAILS_write(WowWorldWriter* writer, const tbc_SMSG_QUESTGIVER_QUEST_DETAILS* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} tbc_CMSG_QUESTGIVER_ACCEPT_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTGIVER_ACCEPT_QUEST_write(WowWorldWriter* writer, const tbc_CMSG_QUESTGIVER_ACCEPT_QUEST* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} tbc_CMSG_QUESTGIVER_COMPLETE_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTGIVER_COMPLETE_QUEST_write(WowWorldWriter* writer, const tbc_CMSG_QUESTGIVER_COMPLETE_QUEST* object);

/* mangoszero/vmangos: Quests that don't require items use the `RequestItemsText` field to store the text that is shown when you talk to the quest giver while the quest is incomplete. Therefore the text should not be shown for them when the quest is complete. For quests that do require items, it is self explanatory. */
typedef struct {
    uint64_t npc;
    uint32_t quest_id;
    char* title;
    char* request_items_text;
    uint32_t emote_delay;
    uint32_t emote;
    bool auto_finish;
    uint32_t suggested_players;
    uint32_t required_money;
    uint32_t amount_of_required_items;
    tbc_QuestItemRequirement* required_items;
    tbc_QuestCompletable completable;
    /* cmangos/vmangos/mangoszero: set to 0x04 */
    uint32_t flags1;
    /* cmangos/vmangos/mangoszero: set to 0x08 */
    uint32_t flags2;
    /* cmangos/vmangos/mangoszero: set to 0x10 */
    uint32_t flags3;

} tbc_SMSG_QUESTGIVER_REQUEST_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_QUESTGIVER_REQUEST_ITEMS_free(tbc_SMSG_QUESTGIVER_REQUEST_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTGIVER_REQUEST_ITEMS_write(WowWorldWriter* writer, const tbc_SMSG_QUESTGIVER_REQUEST_ITEMS* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;

} tbc_CMSG_QUESTGIVER_REQUEST_REWARD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTGIVER_REQUEST_REWARD_write(WowWorldWriter* writer, const tbc_CMSG_QUESTGIVER_REQUEST_REWARD* object);

typedef struct {
    uint64_t npc;
    uint32_t quest_id;
    char* title;
    char* offer_reward_text;
    bool auto_finish;
    uint32_t suggested_players;
    uint32_t amount_of_emotes;
    tbc_NpcTextUpdateEmote* emotes;
    uint32_t amount_of_choice_item_rewards;
    tbc_QuestItemRequirement* choice_item_rewards;
    uint32_t amount_of_item_rewards;
    tbc_QuestItemRequirement* item_rewards;
    uint32_t money_reward;
    uint32_t honor_reward;
    /* mangostwo: unused by client?
mangostwo sets to 0x08. */
    uint32_t unknown1;
    uint32_t reward_spell;
    /* mangoszero and cmangos disagree about which field is _cast, although they both agree that the _cast field should not be in zero (vanilla). They still both include both fields in the code though. */
    uint32_t reward_spell_cast;
    uint32_t title_reward;

} tbc_SMSG_QUESTGIVER_OFFER_REWARD;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_QUESTGIVER_OFFER_REWARD_free(tbc_SMSG_QUESTGIVER_OFFER_REWARD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTGIVER_OFFER_REWARD_write(WowWorldWriter* writer, const tbc_SMSG_QUESTGIVER_OFFER_REWARD* object);

typedef struct {
    uint64_t guid;
    uint32_t quest_id;
    uint32_t reward;

} tbc_CMSG_QUESTGIVER_CHOOSE_REWARD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTGIVER_CHOOSE_REWARD_write(WowWorldWriter* writer, const tbc_CMSG_QUESTGIVER_CHOOSE_REWARD* object);

typedef struct {
    tbc_QuestFailedReason msg;

} tbc_SMSG_QUESTGIVER_QUEST_INVALID;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTGIVER_QUEST_INVALID_write(WowWorldWriter* writer, const tbc_SMSG_QUESTGIVER_QUEST_INVALID* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTGIVER_CANCEL_write(WowWorldWriter* writer);

typedef struct {
    uint32_t quest_id;
    /* cmangos/vmangos/mangoszero: set to 0x03 */
    uint32_t unknown;
    uint32_t experience_reward;
    uint32_t money_reward;
    uint32_t honor_reward;
    uint32_t amount_of_item_rewards;
    tbc_QuestItemReward* item_rewards;

} tbc_SMSG_QUESTGIVER_QUEST_COMPLETE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_QUESTGIVER_QUEST_COMPLETE_free(tbc_SMSG_QUESTGIVER_QUEST_COMPLETE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTGIVER_QUEST_COMPLETE_write(WowWorldWriter* writer, const tbc_SMSG_QUESTGIVER_QUEST_COMPLETE* object);

typedef struct {
    uint32_t quest_id;
    tbc_QuestFailedReason reason;

} tbc_SMSG_QUESTGIVER_QUEST_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTGIVER_QUEST_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_QUESTGIVER_QUEST_FAILED* object);

typedef struct {
    uint8_t slot1;
    uint8_t slot2;

} tbc_CMSG_QUESTLOG_SWAP_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTLOG_SWAP_QUEST_write(WowWorldWriter* writer, const tbc_CMSG_QUESTLOG_SWAP_QUEST* object);

typedef struct {
    uint8_t slot;

} tbc_CMSG_QUESTLOG_REMOVE_QUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTLOG_REMOVE_QUEST_write(WowWorldWriter* writer, const tbc_CMSG_QUESTLOG_REMOVE_QUEST* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTLOG_FULL_write(WowWorldWriter* writer);

typedef struct {
    uint32_t quest_id;

} tbc_SMSG_QUESTUPDATE_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTUPDATE_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_QUESTUPDATE_FAILED* object);

typedef struct {
    uint32_t quest_id;

} tbc_SMSG_QUESTUPDATE_FAILEDTIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTUPDATE_FAILEDTIMER_write(WowWorldWriter* writer, const tbc_SMSG_QUESTUPDATE_FAILEDTIMER* object);

typedef struct {
    uint32_t quest_id;

} tbc_SMSG_QUESTUPDATE_COMPLETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTUPDATE_COMPLETE_write(WowWorldWriter* writer, const tbc_SMSG_QUESTUPDATE_COMPLETE* object);

typedef struct {
    uint32_t quest_id;
    /* Unsure of name */
    uint32_t creature_id;
    uint32_t kill_count;
    uint32_t required_kill_count;
    uint64_t guid;

} tbc_SMSG_QUESTUPDATE_ADD_KILL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTUPDATE_ADD_KILL_write(WowWorldWriter* writer, const tbc_SMSG_QUESTUPDATE_ADD_KILL* object);

typedef struct {
    uint32_t required_item_id;
    uint32_t items_required;

} tbc_SMSG_QUESTUPDATE_ADD_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTUPDATE_ADD_ITEM_write(WowWorldWriter* writer, const tbc_SMSG_QUESTUPDATE_ADD_ITEM* object);

typedef struct {
    uint32_t quest_id;

} tbc_CMSG_QUEST_CONFIRM_ACCEPT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUEST_CONFIRM_ACCEPT_write(WowWorldWriter* writer, const tbc_CMSG_QUEST_CONFIRM_ACCEPT* object);

typedef struct {
    uint32_t quest_id;
    char* quest_title;
    uint64_t guid;

} tbc_SMSG_QUEST_CONFIRM_ACCEPT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_QUEST_CONFIRM_ACCEPT_free(tbc_SMSG_QUEST_CONFIRM_ACCEPT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUEST_CONFIRM_ACCEPT_write(WowWorldWriter* writer, const tbc_SMSG_QUEST_CONFIRM_ACCEPT* object);

typedef struct {
    uint32_t quest_id;

} tbc_CMSG_PUSHQUESTTOPARTY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PUSHQUESTTOPARTY_write(WowWorldWriter* writer, const tbc_CMSG_PUSHQUESTTOPARTY* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_LIST_INVENTORY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LIST_INVENTORY_write(WowWorldWriter* writer, const tbc_CMSG_LIST_INVENTORY* object);

/* if `amount_of_items` is 0 it is supposedly followed by a single u8 with 0 to say that vendor has no items. */
typedef struct {
    uint64_t vendor;
    /* cmangos: 0 displays Vendor has no inventory */
    uint8_t amount_of_items;
    tbc_ListInventoryItem* items;

} tbc_SMSG_LIST_INVENTORY;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_LIST_INVENTORY_free(tbc_SMSG_LIST_INVENTORY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LIST_INVENTORY_write(WowWorldWriter* writer, const tbc_SMSG_LIST_INVENTORY* object);

typedef struct {
    uint64_t vendor;
    uint64_t item;
    uint8_t amount;

} tbc_CMSG_SELL_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SELL_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_SELL_ITEM* object);

typedef struct {
    uint64_t guid;
    uint64_t item;
    tbc_SellItemResult result;

} tbc_SMSG_SELL_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SELL_ITEM_write(WowWorldWriter* writer, const tbc_SMSG_SELL_ITEM* object);

typedef struct {
    uint64_t vendor;
    uint32_t item;
    uint8_t amount;
    /* cmangos says this is hardcoded to 1 in the TBC client. */
    uint8_t unknown1;

} tbc_CMSG_BUY_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BUY_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_BUY_ITEM* object);

typedef struct {
    uint64_t vendor;
    uint32_t item;
    uint64_t bag;
    uint8_t bag_slot;
    uint8_t amount;

} tbc_CMSG_BUY_ITEM_IN_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BUY_ITEM_IN_SLOT_write(WowWorldWriter* writer, const tbc_CMSG_BUY_ITEM_IN_SLOT* object);

typedef struct {
    uint64_t guid;
    /* Starts at index 1.
arcemu has this field as milliseconds since something instead. */
    uint32_t vendor_slot;
    uint32_t amount_for_sale;
    uint32_t amount_bought;

} tbc_SMSG_BUY_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_BUY_ITEM_write(WowWorldWriter* writer, const tbc_SMSG_BUY_ITEM* object);

/* Some TBC and Wrath emus have a u32 before `result` that is only included if the value is > 0, but the emus never call it with anything other than 0. */
typedef struct {
    uint64_t guid;
    uint32_t item;
    tbc_BuyResult result;

} tbc_SMSG_BUY_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_BUY_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_BUY_FAILED* object);

typedef struct {
    /* Set to 1 in mangoszero */
    uint32_t unknown1;
    uint64_t guid;
    uint32_t nearest_node;
    uint32_t amount_of_nodes;
    uint32_t* nodes;

} tbc_SMSG_SHOWTAXINODES;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SHOWTAXINODES_free(tbc_SMSG_SHOWTAXINODES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SHOWTAXINODES_write(WowWorldWriter* writer, const tbc_SMSG_SHOWTAXINODES* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_TAXINODE_STATUS_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TAXINODE_STATUS_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_TAXINODE_STATUS_QUERY* object);

typedef struct {
    uint64_t guid;
    bool taxi_mask_node_known;

} tbc_SMSG_TAXINODE_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TAXINODE_STATUS_write(WowWorldWriter* writer, const tbc_SMSG_TAXINODE_STATUS* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_TAXIQUERYAVAILABLENODES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TAXIQUERYAVAILABLENODES_write(WowWorldWriter* writer, const tbc_CMSG_TAXIQUERYAVAILABLENODES* object);

typedef struct {
    uint64_t guid;
    uint32_t source_node;
    uint32_t destination_node;

} tbc_CMSG_ACTIVATETAXI;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ACTIVATETAXI_write(WowWorldWriter* writer, const tbc_CMSG_ACTIVATETAXI* object);

typedef struct {
    tbc_ActivateTaxiReply reply;

} tbc_SMSG_ACTIVATETAXIREPLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ACTIVATETAXIREPLY_write(WowWorldWriter* writer, const tbc_SMSG_ACTIVATETAXIREPLY* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_NEW_TAXI_PATH_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} tbc_CMSG_TRAINER_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TRAINER_LIST_write(WowWorldWriter* writer, const tbc_CMSG_TRAINER_LIST* object);

typedef struct {
    uint64_t guid;
    uint32_t trainer_type;
    uint32_t amount_of_spells;
    tbc_TrainerSpell* spells;
    char* greeting;

} tbc_SMSG_TRAINER_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_TRAINER_LIST_free(tbc_SMSG_TRAINER_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TRAINER_LIST_write(WowWorldWriter* writer, const tbc_SMSG_TRAINER_LIST* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} tbc_CMSG_TRAINER_BUY_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TRAINER_BUY_SPELL_write(WowWorldWriter* writer, const tbc_CMSG_TRAINER_BUY_SPELL* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} tbc_SMSG_TRAINER_BUY_SUCCEEDED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TRAINER_BUY_SUCCEEDED_write(WowWorldWriter* writer, const tbc_SMSG_TRAINER_BUY_SUCCEEDED* object);

/* No TBC emulators implement this. */
typedef struct {
    uint64_t guid;
    uint32_t id;
    tbc_TrainingFailureReason error;

} tbc_SMSG_TRAINER_BUY_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TRAINER_BUY_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_TRAINER_BUY_FAILED* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_BINDER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BINDER_ACTIVATE_write(WowWorldWriter* writer, const tbc_CMSG_BINDER_ACTIVATE* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_BANKER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BANKER_ACTIVATE_write(WowWorldWriter* writer, const tbc_CMSG_BANKER_ACTIVATE* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SHOW_BANK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SHOW_BANK_write(WowWorldWriter* writer, const tbc_SMSG_SHOW_BANK* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_BUY_BANK_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BUY_BANK_SLOT_write(WowWorldWriter* writer, const tbc_CMSG_BUY_BANK_SLOT* object);

typedef struct {
    tbc_BuyBankSlotResult result;

} tbc_SMSG_BUY_BANK_SLOT_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_BUY_BANK_SLOT_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_BUY_BANK_SLOT_RESULT* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_PETITION_SHOWLIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PETITION_SHOWLIST_write(WowWorldWriter* writer, const tbc_CMSG_PETITION_SHOWLIST* object);

typedef struct {
    uint64_t npc;
    uint8_t amount_of_petitions;
    tbc_PetitionShowlist* petitions;

} tbc_SMSG_PETITION_SHOWLIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PETITION_SHOWLIST_free(tbc_SMSG_PETITION_SHOWLIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PETITION_SHOWLIST_write(WowWorldWriter* writer, const tbc_SMSG_PETITION_SHOWLIST* object);

/* cmangos/vmangos/mangoszero: All fields with 'skip' are completely unused */
typedef struct {
    uint64_t npc;
    uint32_t unknown1;
    uint64_t unknown2;
    char* name;
    uint32_t unknown3;
    uint32_t unknown4;
    uint32_t unknown5;
    uint32_t unknown6;
    uint32_t unknown7;
    uint32_t unknown8;
    uint32_t unknown9;
    uint32_t unknown10;
    uint32_t unknown11;
    uint32_t unknown12;
    uint16_t unknown13;
    uint8_t unknown14;
    /* cmangos/vmangos/mangoszero: Named but never used */
    uint32_t index;
    uint32_t unknown15;

} tbc_CMSG_PETITION_BUY;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_PETITION_BUY_free(tbc_CMSG_PETITION_BUY* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PETITION_BUY_write(WowWorldWriter* writer, const tbc_CMSG_PETITION_BUY* object);

typedef struct {
    uint64_t item;

} tbc_CMSG_PETITION_SHOW_SIGNATURES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PETITION_SHOW_SIGNATURES_write(WowWorldWriter* writer, const tbc_CMSG_PETITION_SHOW_SIGNATURES* object);

typedef struct {
    uint64_t item;
    uint64_t owner;
    uint32_t petition;
    uint8_t amount_of_signatures;
    tbc_PetitionSignature* signatures;

} tbc_SMSG_PETITION_SHOW_SIGNATURES;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PETITION_SHOW_SIGNATURES_free(tbc_SMSG_PETITION_SHOW_SIGNATURES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PETITION_SHOW_SIGNATURES_write(WowWorldWriter* writer, const tbc_SMSG_PETITION_SHOW_SIGNATURES* object);

typedef struct {
    uint64_t petition;
    uint8_t unknown1;

} tbc_CMSG_PETITION_SIGN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PETITION_SIGN_write(WowWorldWriter* writer, const tbc_CMSG_PETITION_SIGN* object);

typedef struct {
    uint64_t petition;
    uint64_t owner;
    tbc_PetitionResult result;

} tbc_SMSG_PETITION_SIGN_RESULTS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PETITION_SIGN_RESULTS_write(WowWorldWriter* writer, const tbc_SMSG_PETITION_SIGN_RESULTS* object);

typedef struct {
    uint64_t petition;

} tbc_MSG_PETITION_DECLINE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_PETITION_DECLINE_cmsg_write(WowWorldWriter* writer, const tbc_MSG_PETITION_DECLINE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_PETITION_DECLINE_smsg_write(WowWorldWriter* writer, const tbc_MSG_PETITION_DECLINE* object);

typedef struct {
    uint32_t unknown0;
    uint64_t petition;
    uint64_t target;

} tbc_CMSG_OFFER_PETITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_OFFER_PETITION_write(WowWorldWriter* writer, const tbc_CMSG_OFFER_PETITION* object);

typedef struct {
    uint64_t petition;

} tbc_CMSG_TURN_IN_PETITION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TURN_IN_PETITION_write(WowWorldWriter* writer, const tbc_CMSG_TURN_IN_PETITION* object);

typedef struct {
    tbc_PetitionResult result;

} tbc_SMSG_TURN_IN_PETITION_RESULTS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TURN_IN_PETITION_RESULTS_write(WowWorldWriter* writer, const tbc_SMSG_TURN_IN_PETITION_RESULTS* object);

typedef struct {
    uint32_t guild_id;
    uint64_t petition;

} tbc_CMSG_PETITION_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PETITION_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_PETITION_QUERY* object);

typedef struct {
    uint32_t petition_id;
    uint64_t charter_owner;
    char* guild_name;
    /* cmangos/vmangos/mangoszero: Set to 0, only info is comment from vmangos */
    char* body_text;
    /* cmangos/vmangos/mangoszero: Set to 9, only info is comment from vmangos */
    uint32_t minimum_signatures;
    /* cmangos/vmangos/mangoszero: Set to 9, only info is comment from vmangos */
    uint32_t maximum_signatures;
    /* mangosone: bypass client - side limitation, a different value is needed here for each petition */
    uint32_t unknown1;
    uint32_t unknown2;
    uint32_t unknown3;
    uint32_t unknown4;
    uint32_t unknown5;
    uint16_t unknown6;
    uint32_t unknown7;
    uint32_t unknown8;
    uint32_t unknown9;
    uint32_t unknown10;
    tbc_CharterType charter_type;

} tbc_SMSG_PETITION_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PETITION_QUERY_RESPONSE_free(tbc_SMSG_PETITION_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PETITION_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_PETITION_QUERY_RESPONSE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FISH_NOT_HOOKED_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FISH_ESCAPED_write(WowWorldWriter* writer);

typedef struct {
    /* cmangos/vmangos/mangoszero: If 0 received bug report, else received suggestion */
    uint32_t suggestion;
    char* content;
    char* bug_type;

} tbc_CMSG_BUG;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_BUG_free(tbc_CMSG_BUG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BUG_write(WowWorldWriter* writer, const tbc_CMSG_BUG* object);

typedef struct {
    char* notification;

} tbc_SMSG_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_NOTIFICATION_free(tbc_SMSG_NOTIFICATION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_NOTIFICATION_write(WowWorldWriter* writer, const tbc_SMSG_NOTIFICATION* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PLAYED_TIME_write(WowWorldWriter* writer);

typedef struct {
    uint32_t total_played_time;
    uint32_t level_played_time;

} tbc_SMSG_PLAYED_TIME;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PLAYED_TIME_write(WowWorldWriter* writer, const tbc_SMSG_PLAYED_TIME* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUERY_TIME_write(WowWorldWriter* writer);

/* Reply to [CMSG_QUERY_TIME].
[CMSG_QUERY_TIME] and this reply does not actually appear to set the time. Instead [SMSG_LOGIN_SETTIMESPEED] seems to correctly set the time. Running the client with `-console` will print the date when [SMSG_LOGIN_SETTIMESPEED] is received, but not when this message is received. */
typedef struct {
    /* Seconds since 1970, 1st of January (Unix Time). */
    uint32_t time;
    /* Units need confirmation, but it's likely in seconds, since many other time related things are also seconds. */
    uint32_t time_until_daily_quest_reset;

} tbc_SMSG_QUERY_TIME_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUERY_TIME_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_QUERY_TIME_RESPONSE* object);

typedef struct {
    uint64_t target;
    uint32_t total_exp;
    tbc_ExperienceAwardType exp_type;
    uint32_t experience_without_rested;
    /* mangoszero sets to 1 and comments: 1 - none 0 - 100% group bonus output */
    float exp_group_bonus;

} tbc_SMSG_LOG_XPGAIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOG_XPGAIN_write(WowWorldWriter* writer, const tbc_SMSG_LOG_XPGAIN* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_RECLAIM_CORPSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_RECLAIM_CORPSE_write(WowWorldWriter* writer, const tbc_CMSG_RECLAIM_CORPSE* object);

typedef struct {
    uint8_t gift_bag_index;
    uint8_t gift_slot;
    uint8_t item_bag_index;
    uint8_t item_slot;

} tbc_CMSG_WRAP_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_WRAP_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_WRAP_ITEM* object);

typedef struct {
    uint32_t new_level;
    uint32_t health;
    uint32_t mana;
    uint32_t rage;
    uint32_t focus;
    uint32_t energy;
    uint32_t happiness;
    uint32_t strength;
    uint32_t agility;
    uint32_t stamina;
    uint32_t intellect;
    uint32_t spirit;

} tbc_SMSG_LEVELUP_INFO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LEVELUP_INFO_write(WowWorldWriter* writer, const tbc_SMSG_LEVELUP_INFO* object);

typedef struct {
    float position_x;
    float position_y;

} tbc_MSG_MINIMAP_PING_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MINIMAP_PING_Client_write(WowWorldWriter* writer, const tbc_MSG_MINIMAP_PING_Client* object);

typedef struct {
    uint64_t guid;
    float position_x;
    float position_y;

} tbc_MSG_MINIMAP_PING_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MINIMAP_PING_Server_write(WowWorldWriter* writer, const tbc_MSG_MINIMAP_PING_Server* object);

/* cmangos and vmangos/mangoszero disagree about packed and extra u8 */
typedef struct {
    uint64_t target;
    /* vmangos: message says enchant has faded if empty */
    uint64_t caster;
    uint32_t item;
    uint32_t spell;
    /* vmangos: Only used if `caster` is not 0. */
    bool show_affiliation;

} tbc_SMSG_ENCHANTMENTLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ENCHANTMENTLOG_write(WowWorldWriter* writer, const tbc_SMSG_ENCHANTMENTLOG* object);

typedef struct {
    tbc_TimerType timer;
    uint32_t time_remaining;
    uint32_t duration;
    uint32_t scale;
    bool is_frozen;
    uint32_t id;

} tbc_SMSG_START_MIRROR_TIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_START_MIRROR_TIMER_write(WowWorldWriter* writer, const tbc_SMSG_START_MIRROR_TIMER* object);

/* According to cmangos: 'Default UI handler for this is bugged, args dont match. Gotta do a full update with `SMSG_START_MIRROR_TIMER` to avoid lua errors. */
typedef struct {
    tbc_TimerType timer;
    bool is_frozen;

} tbc_SMSG_PAUSE_MIRROR_TIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PAUSE_MIRROR_TIMER_write(WowWorldWriter* writer, const tbc_SMSG_PAUSE_MIRROR_TIMER* object);

typedef struct {
    tbc_TimerType timer;

} tbc_SMSG_STOP_MIRROR_TIMER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_STOP_MIRROR_TIMER_write(WowWorldWriter* writer, const tbc_SMSG_STOP_MIRROR_TIMER* object);

typedef struct {
    uint32_t sequence_id;
    uint32_t round_time_in_ms;

} tbc_CMSG_PING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PING_write(WowWorldWriter* writer, const tbc_CMSG_PING* object);

typedef struct {
    uint32_t sequence_id;

} tbc_SMSG_PONG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PONG_write(WowWorldWriter* writer, const tbc_SMSG_PONG* object);

typedef struct {
    uint32_t id;
    uint64_t target;

} tbc_SMSG_CLEAR_COOLDOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CLEAR_COOLDOWN_write(WowWorldWriter* writer, const tbc_SMSG_CLEAR_COOLDOWN* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_GAMEOBJECT_PAGETEXT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GAMEOBJECT_PAGETEXT_write(WowWorldWriter* writer, const tbc_SMSG_GAMEOBJECT_PAGETEXT* object);

/* Says which weapon the client pulls out. */
typedef struct {
    tbc_SheathState sheathed;

} tbc_CMSG_SETSHEATHED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SETSHEATHED_write(WowWorldWriter* writer, const tbc_CMSG_SETSHEATHED* object);

typedef struct {
    uint64_t guid;
    uint32_t delay_time;

} tbc_SMSG_SPELL_DELAYED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELL_DELAYED_write(WowWorldWriter* writer, const tbc_SMSG_SPELL_DELAYED* object);

typedef struct {
    uint64_t guid;
    uint32_t duration;

} tbc_SMSG_ITEM_TIME_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ITEM_TIME_UPDATE_write(WowWorldWriter* writer, const tbc_SMSG_ITEM_TIME_UPDATE* object);

typedef struct {
    uint64_t item;
    /* Possibly used with EnchantmentSlot enum. */
    uint32_t slot;
    uint32_t duration;
    uint64_t player;

} tbc_SMSG_ITEM_ENCHANT_TIME_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ITEM_ENCHANT_TIME_UPDATE_write(WowWorldWriter* writer, const tbc_SMSG_ITEM_ENCHANT_TIME_UPDATE* object);

/* Seed used by the client to prove in [CMSG_AUTH_SESSION] that it has authenticated with the auth server.
First thing sent when a client connects to the world server.
This message is always unencrypted. */
typedef struct {
    uint32_t server_seed;

} tbc_SMSG_AUTH_CHALLENGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AUTH_CHALLENGE_write(WowWorldWriter* writer, const tbc_SMSG_AUTH_CHALLENGE* object);

/* Sent after receiving [SMSG_AUTH_CHALLENGE].
Followed by [SMSG_AUTH_RESPONSE].
This message is never encrypted. */
typedef struct {
    uint32_t build;
    /* This is sent to the client in [CMD_REALM_LIST_Server]. */
    uint32_t server_id;
    char* username;
    uint32_t client_seed;
    uint8_t client_proof[20];
    uint32_t amount_of_addon_info;
    tbc_AddonInfo* addon_info;

} tbc_CMSG_AUTH_SESSION;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_AUTH_SESSION_free(tbc_CMSG_AUTH_SESSION* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUTH_SESSION_write(WowWorldWriter* writer, const tbc_CMSG_AUTH_SESSION* object);

/* Response to [CMSG_AUTH_SESSION].
Usually followed by [CMSG_CHAR_ENUM] if login was successful (`AUTH_OK`).
vmangos/cmangos/mangoszero all have a variant of this message that contains fields from `AUTH_OK` for `AUTH_WAIT_QUEUE` as well (`https://github.com/vmangos/core/blob/cd896d43712ceafecdbd8f005846d7f676e55b4f/src/game/World.cpp#L322`) but this does not seem to be actually be a real thing. */
typedef struct {
    tbc_WorldResult result;
    uint32_t billing_time;
    tbc_BillingPlanFlags billing_flags;
    uint32_t billing_rested;
    tbc_Expansion expansion;
    uint32_t queue_position;

} tbc_SMSG_AUTH_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AUTH_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_AUTH_RESPONSE* object);

typedef struct {
    uint64_t guid;
    uint32_t id;
    tbc_SpellCastTargets targets;

} tbc_CMSG_PET_CAST_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_PET_CAST_SPELL_free(tbc_CMSG_PET_CAST_SPELL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PET_CAST_SPELL_write(WowWorldWriter* writer, const tbc_CMSG_PET_CAST_SPELL* object);

typedef struct {
    uint64_t vendor;
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;
    uint32_t background_color;

} tbc_MSG_SAVE_GUILD_EMBLEM_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_SAVE_GUILD_EMBLEM_Client_write(WowWorldWriter* writer, const tbc_MSG_SAVE_GUILD_EMBLEM_Client* object);

typedef struct {
    tbc_GuildEmblemResult result;

} tbc_MSG_SAVE_GUILD_EMBLEM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_SAVE_GUILD_EMBLEM_Server_write(WowWorldWriter* writer, const tbc_MSG_SAVE_GUILD_EMBLEM_Server* object);

typedef struct {
    uint64_t guid;

} tbc_MSG_TABARDVENDOR_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_TABARDVENDOR_ACTIVATE_cmsg_write(WowWorldWriter* writer, const tbc_MSG_TABARDVENDOR_ACTIVATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_TABARDVENDOR_ACTIVATE_smsg_write(WowWorldWriter* writer, const tbc_MSG_TABARDVENDOR_ACTIVATE* object);

typedef struct {
    uint64_t guid;
    /* mangoszero/mangosone: index from SpellVisualKit.dbc. Set to 0xB3 when buying spells. */
    uint32_t spell_art_kit;

} tbc_SMSG_PLAY_SPELL_VISUAL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PLAY_SPELL_VISUAL_write(WowWorldWriter* writer, const tbc_SMSG_PLAY_SPELL_VISUAL* object);

/* Sent by the client whenever it reaches a new area.
The client does not send an accurate area. For example when going to Sen'jin Village, the client will send `DUROTAR` (0x0E) and not `SENJIN_VILLAGE` (0x16F). */
typedef struct {
    tbc_Area area;

} tbc_CMSG_ZONEUPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ZONEUPDATE_write(WowWorldWriter* writer, const tbc_CMSG_ZONEUPDATE* object);

typedef struct {
    uint64_t player_with_killing_blow;
    uint64_t victim;

} tbc_SMSG_PARTYKILLLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PARTYKILLLOG_write(WowWorldWriter* writer, const tbc_SMSG_PARTYKILLLOG* object);

/* Compressed version of [SMSG_UPDATE_OBJECT]. Has the same fields when uncompressed */
typedef struct {
    uint32_t amount_of_objects;
    uint8_t has_transport;
    tbc_Object* objects;

} tbc_SMSG_COMPRESSED_UPDATE_OBJECT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_COMPRESSED_UPDATE_OBJECT_free(tbc_SMSG_COMPRESSED_UPDATE_OBJECT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_COMPRESSED_UPDATE_OBJECT_write(WowWorldWriter* writer, const tbc_SMSG_COMPRESSED_UPDATE_OBJECT* object);

typedef struct {
    uint64_t guid;
    /* mangoszero/mangosone/azerothcore: index from SpellVisualKit.dbc. Used for visual effect on player with 0x016A */
    uint32_t spell_visual_kit;

} tbc_SMSG_PLAY_SPELL_IMPACT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PLAY_SPELL_IMPACT_write(WowWorldWriter* writer, const tbc_SMSG_PLAY_SPELL_IMPACT* object);

typedef struct {
    tbc_Area area;
    uint32_t experience;

} tbc_SMSG_EXPLORATION_EXPERIENCE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_EXPLORATION_EXPERIENCE_write(WowWorldWriter* writer, const tbc_SMSG_EXPLORATION_EXPERIENCE* object);

typedef struct {
    uint32_t minimum;
    uint32_t maximum;

} tbc_MSG_RANDOM_ROLL_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_RANDOM_ROLL_Client_write(WowWorldWriter* writer, const tbc_MSG_RANDOM_ROLL_Client* object);

typedef struct {
    uint32_t minimum;
    uint32_t maximum;
    uint32_t actual_roll;
    uint64_t guid;

} tbc_MSG_RANDOM_ROLL_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_RANDOM_ROLL_Server_write(WowWorldWriter* writer, const tbc_MSG_RANDOM_ROLL_Server* object);

typedef struct {
    uint64_t guid;
    tbc_EnvironmentalDamageType damage_type;
    uint32_t damage;
    uint32_t absorb;
    uint32_t resist;

} tbc_SMSG_ENVIRONMENTAL_DAMAGE_LOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ENVIRONMENTAL_DAMAGE_LOG_write(WowWorldWriter* writer, const tbc_SMSG_ENVIRONMENTAL_DAMAGE_LOG* object);

typedef struct {
    tbc_LfgType lfg_type;
    /* entry from LfgDunggeons.dbc */
    uint32_t entry;
    uint32_t unknown;

} tbc_MSG_LOOKING_FOR_GROUP_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_LOOKING_FOR_GROUP_Client_write(WowWorldWriter* writer, const tbc_MSG_LOOKING_FOR_GROUP_Client* object);

typedef struct {
    tbc_LfgType lfg_type;
    /* entry from LfgDunggeons.dbc */
    uint32_t entry;
    uint32_t amount_of_players_displayed;
    uint32_t amount_of_players_found;
    tbc_LfgPlayer* players_displayed;

} tbc_MSG_LOOKING_FOR_GROUP_Server;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_LOOKING_FOR_GROUP_Server_free(tbc_MSG_LOOKING_FOR_GROUP_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_LOOKING_FOR_GROUP_Server_write(WowWorldWriter* writer, const tbc_MSG_LOOKING_FOR_GROUP_Server* object);

typedef struct {
    uint32_t slot;
    tbc_LfgData data;

} tbc_CMSG_SET_LOOKING_FOR_GROUP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_LOOKING_FOR_GROUP_write(WowWorldWriter* writer, const tbc_CMSG_SET_LOOKING_FOR_GROUP* object);

typedef struct {
    tbc_Skill skill;

} tbc_CMSG_UNLEARN_SKILL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_UNLEARN_SKILL_write(WowWorldWriter* writer, const tbc_CMSG_UNLEARN_SKILL* object);

typedef struct {
    uint16_t spell;

} tbc_SMSG_REMOVED_SPELL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_REMOVED_SPELL_write(WowWorldWriter* writer, const tbc_SMSG_REMOVED_SPELL* object);

typedef struct {
    tbc_GmTicketType category;
    tbc_Map map;
    all_Vector3d position;
    char* message;
    /* cmangos/vmangos/mangoszero: Pre-TBC: 'Reserved for future use'
cmangos/vmangos/mangoszero: Unused */
    char* reserved_for_future_use;
    uint32_t chat_data_line_count;
    uint32_t amount_of_compressed_chat_data;
    uint8_t* compressed_chat_data;

} tbc_CMSG_GMTICKET_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GMTICKET_CREATE_free(tbc_CMSG_GMTICKET_CREATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GMTICKET_CREATE_write(WowWorldWriter* writer, const tbc_CMSG_GMTICKET_CREATE* object);

typedef struct {
    tbc_GmTicketResponse response;

} tbc_SMSG_GMTICKET_CREATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GMTICKET_CREATE_write(WowWorldWriter* writer, const tbc_SMSG_GMTICKET_CREATE* object);

/* No TBC/Wrath emulator has a `GmTicketType` field before `message`, but vmangos does. */
typedef struct {
    char* message;

} tbc_CMSG_GMTICKET_UPDATETEXT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GMTICKET_UPDATETEXT_free(tbc_CMSG_GMTICKET_UPDATETEXT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GMTICKET_UPDATETEXT_write(WowWorldWriter* writer, const tbc_CMSG_GMTICKET_UPDATETEXT* object);

typedef struct {
    tbc_GmTicketResponse response;

} tbc_SMSG_GMTICKET_UPDATETEXT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GMTICKET_UPDATETEXT_write(WowWorldWriter* writer, const tbc_SMSG_GMTICKET_UPDATETEXT* object);

/* The purpose of this message is unknown, but it is required in order to prevent the chat box from being a white rectangle that is unable to show text.
Sending this causes the client to send [CMSG_UPDATE_ACCOUNT_DATA] messages.
[CMSG_UPDATE_ACCOUNT_DATA] and [CMSG_REQUEST_ACCOUNT_DATA] act on blocks numbered 0 to 7. The 32 u32s in this message could possibly actually be 8 sets of u8[16] but it could also be a variable sized message. */
typedef struct {
    /* cmangos/vmangos/mangoszero sets to all zeros */
    uint32_t data[32];

} tbc_SMSG_ACCOUNT_DATA_TIMES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ACCOUNT_DATA_TIMES_write(WowWorldWriter* writer, const tbc_SMSG_ACCOUNT_DATA_TIMES* object);

/* Respond with [SMSG_UPDATE_ACCOUNT_DATA] */
typedef struct {
    /* The type of account data being requested. You can check this against the [CacheMask] to know if this is character-specific data or account-wide data. */
    uint32_t data_type;

} tbc_CMSG_REQUEST_ACCOUNT_DATA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_REQUEST_ACCOUNT_DATA_write(WowWorldWriter* writer, const tbc_CMSG_REQUEST_ACCOUNT_DATA* object);

/* This is sent by the client after receiving [SMSG_ACCOUNT_DATA_TIMES]. Client can also request a block through [CMSG_REQUEST_ACCOUNT_DATA]. */
typedef struct {
    /* Exact meaning unknown. Seems to be between 0 and 7. Block 6 is changed when changing `layout-cache.txt` inside the WTF folder. */
    tbc_AccountDataType data_type;
    uint32_t amount_of_compressed_data;
    uint8_t* compressed_data;

} tbc_CMSG_UPDATE_ACCOUNT_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_UPDATE_ACCOUNT_DATA_free(tbc_CMSG_UPDATE_ACCOUNT_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_UPDATE_ACCOUNT_DATA_write(WowWorldWriter* writer, const tbc_CMSG_UPDATE_ACCOUNT_DATA* object);

/* Sent as response to [CMSG_REQUEST_ACCOUNT_DATA] */
typedef struct {
    uint32_t data_type;
    uint32_t decompressed_size;
    uint32_t amount_of_compressed_data;
    uint8_t* compressed_data;

} tbc_SMSG_UPDATE_ACCOUNT_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_UPDATE_ACCOUNT_DATA_free(tbc_SMSG_UPDATE_ACCOUNT_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_UPDATE_ACCOUNT_DATA_write(WowWorldWriter* writer, const tbc_SMSG_UPDATE_ACCOUNT_DATA* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GMTICKET_GETTICKET_write(WowWorldWriter* writer);

typedef struct {
    tbc_GmTicketStatus status;
    /* cmangos: Ticket text: data, should never exceed 1999 bytes */
    char* text;
    tbc_GmTicketType ticket_type;
    float days_since_ticket_creation;
    float days_since_oldest_ticket_creation;
    float days_since_last_updated;
    tbc_GmTicketEscalationStatus escalation_status;
    bool read_by_gm;

} tbc_SMSG_GMTICKET_GETTICKET;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GMTICKET_GETTICKET_free(tbc_SMSG_GMTICKET_GETTICKET* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GMTICKET_GETTICKET_write(WowWorldWriter* writer, const tbc_SMSG_GMTICKET_GETTICKET* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_UNLEARN_TALENTS_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;

} tbc_SMSG_GAMEOBJECT_SPAWN_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GAMEOBJECT_SPAWN_ANIM_write(WowWorldWriter* writer, const tbc_SMSG_GAMEOBJECT_SPAWN_ANIM* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_GAMEOBJECT_DESPAWN_ANIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GAMEOBJECT_DESPAWN_ANIM_write(WowWorldWriter* writer, const tbc_SMSG_GAMEOBJECT_DESPAWN_ANIM* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_CORPSE_QUERY_Client_write(WowWorldWriter* writer);

typedef struct {
    tbc_CorpseQueryResult result;
    tbc_Map map;
    all_Vector3d position;
    tbc_Map corpse_map;

} tbc_MSG_CORPSE_QUERY_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_CORPSE_QUERY_Server_write(WowWorldWriter* writer, const tbc_MSG_CORPSE_QUERY_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GMTICKET_DELETETICKET_write(WowWorldWriter* writer);

typedef struct {
    tbc_GmTicketResponse response;

} tbc_SMSG_GMTICKET_DELETETICKET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GMTICKET_DELETETICKET_write(WowWorldWriter* writer, const tbc_SMSG_GMTICKET_DELETETICKET* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHAT_WRONG_FACTION_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GMTICKET_SYSTEMSTATUS_write(WowWorldWriter* writer);

typedef struct {
    /* vmangos: This only disables the ticket UI at client side and is not fully reliable are we sure this is a uint32? Should ask Zor */
    tbc_GmTicketQueueStatus will_accept_tickets;

} tbc_SMSG_GMTICKET_SYSTEMSTATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GMTICKET_SYSTEMSTATUS_write(WowWorldWriter* writer, const tbc_SMSG_GMTICKET_SYSTEMSTATUS* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_SPIRIT_HEALER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SPIRIT_HEALER_ACTIVATE_write(WowWorldWriter* writer, const tbc_CMSG_SPIRIT_HEALER_ACTIVATE* object);

typedef struct {
    /* cmangos/mangoszero: unknown, may be rest state time or experience */
    uint32_t unknown1;

} tbc_SMSG_SET_REST_START;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SET_REST_START_write(WowWorldWriter* writer, const tbc_SMSG_SET_REST_START* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPIRIT_HEALER_CONFIRM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPIRIT_HEALER_CONFIRM_write(WowWorldWriter* writer, const tbc_SMSG_SPIRIT_HEALER_CONFIRM* object);

typedef struct {
    uint32_t flags;
    all_Vector2d position;
    uint32_t icon;
    uint32_t data;
    char* location_name;

} tbc_SMSG_GOSSIP_POI;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GOSSIP_POI_free(tbc_SMSG_GOSSIP_POI* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GOSSIP_POI_write(WowWorldWriter* writer, const tbc_SMSG_GOSSIP_POI* object);

typedef struct {
    uint64_t guid;
    /* mangosone/arcemu/trinitycore/azerothcore: probably related to spam reporting */
    uint8_t unknown;

} tbc_CMSG_CHAT_IGNORED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHAT_IGNORED_write(WowWorldWriter* writer, const tbc_CMSG_CHAT_IGNORED* object);

typedef struct {
    uint32_t rank_id;
    uint32_t rights;
    char* rank_name;
    uint32_t money_per_day;
    tbc_GuildBankRights bank_tab_rights[6];

} tbc_CMSG_GUILD_RANK;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_RANK_free(tbc_CMSG_GUILD_RANK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_RANK_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_RANK* object);

typedef struct {
    char* rank_name;

} tbc_CMSG_GUILD_ADD_RANK;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_ADD_RANK_free(tbc_CMSG_GUILD_ADD_RANK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_ADD_RANK_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_ADD_RANK* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_DEL_RANK_write(WowWorldWriter* writer);

typedef struct {
    char* player_name;
    char* note;

} tbc_CMSG_GUILD_SET_PUBLIC_NOTE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_SET_PUBLIC_NOTE_free(tbc_CMSG_GUILD_SET_PUBLIC_NOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_SET_PUBLIC_NOTE_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_SET_PUBLIC_NOTE* object);

typedef struct {
    char* player_name;
    /* vmangos: Max length 31 */
    char* note;

} tbc_CMSG_GUILD_SET_OFFICER_NOTE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_SET_OFFICER_NOTE_free(tbc_CMSG_GUILD_SET_OFFICER_NOTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_SET_OFFICER_NOTE_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_SET_OFFICER_NOTE* object);

/* Message to the client that is has successfully logged into the world and that it should load the map and coordinates.
The positions and orientations do not matter since they can be overwritten in the [SMSG_UPDATE_OBJECT], but the map determines which map the client loads and this is not changeable in [SMSG_UPDATE_OBJECT]. */
typedef struct {
    tbc_Map map;
    all_Vector3d position;
    float orientation;

} tbc_SMSG_LOGIN_VERIFY_WORLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOGIN_VERIFY_WORLD_write(WowWorldWriter* writer, const tbc_SMSG_LOGIN_VERIFY_WORLD* object);

typedef struct {
    uint64_t mailbox;
    char* receiver;
    char* subject;
    char* body;
    /* cmangos: stationery? */
    uint32_t unknown1;
    /* cmangos: 0x00000000 */
    uint32_t unknown2;
    uint8_t amount_of_items;
    tbc_MailItem* items;
    uint32_t money;
    uint32_t cash_on_delivery_amount;
    /* mangosone: const 0 */
    uint32_t unknown3;
    /* mangosone: const 0 */
    uint32_t unknown4;

} tbc_CMSG_SEND_MAIL;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_SEND_MAIL_free(tbc_CMSG_SEND_MAIL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SEND_MAIL_write(WowWorldWriter* writer, const tbc_CMSG_SEND_MAIL* object);

typedef struct {
    uint32_t mail_id;
    tbc_MailAction action;
    tbc_MailResult result;
    uint32_t equip_error;
    /* cmangos/vmangos: item guid low? */
    uint32_t item;
    uint32_t item_count;
    tbc_MailResultTwo result2;
    uint32_t equip_error2;

} tbc_SMSG_SEND_MAIL_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SEND_MAIL_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_SEND_MAIL_RESULT* object);

typedef struct {
    uint64_t mailbox;

} tbc_CMSG_GET_MAIL_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GET_MAIL_LIST_write(WowWorldWriter* writer, const tbc_CMSG_GET_MAIL_LIST* object);

typedef struct {
    uint8_t amount_of_mails;
    tbc_Mail* mails;

} tbc_SMSG_MAIL_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_MAIL_LIST_RESULT_free(tbc_SMSG_MAIL_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MAIL_LIST_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_MAIL_LIST_RESULT* object);

typedef struct {
    tbc_Map map;

} tbc_CMSG_BATTLEFIELD_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BATTLEFIELD_LIST_write(WowWorldWriter* writer, const tbc_CMSG_BATTLEFIELD_LIST* object);

typedef struct {
    uint64_t battlemaster;
    tbc_BattlegroundType battleground_type;
    uint32_t number_of_battlegrounds;
    uint32_t* battlegrounds;

} tbc_SMSG_BATTLEFIELD_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_BATTLEFIELD_LIST_free(tbc_SMSG_BATTLEFIELD_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_BATTLEFIELD_LIST_write(WowWorldWriter* writer, const tbc_SMSG_BATTLEFIELD_LIST* object);

typedef struct {
    uint32_t item_text_id;
    /* vmangos/cmangos/mangoszero: this value can be item id in bag, but it is also mail id */
    uint32_t mail_id;
    /* vmangos/cmangos/mangoszero: maybe something like state - 0x70000000 */
    uint32_t unknown1;

} tbc_CMSG_ITEM_TEXT_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ITEM_TEXT_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_ITEM_TEXT_QUERY* object);

typedef struct {
    uint32_t item_text_id;
    /* mangoszero: CString TODO max length 8000 */
    char* text;

} tbc_SMSG_ITEM_TEXT_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_ITEM_TEXT_QUERY_RESPONSE_free(tbc_SMSG_ITEM_TEXT_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ITEM_TEXT_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_ITEM_TEXT_QUERY_RESPONSE* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;

} tbc_CMSG_MAIL_TAKE_MONEY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MAIL_TAKE_MONEY_write(WowWorldWriter* writer, const tbc_CMSG_MAIL_TAKE_MONEY* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;
    uint32_t item;

} tbc_CMSG_MAIL_TAKE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MAIL_TAKE_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_MAIL_TAKE_ITEM* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;

} tbc_CMSG_MAIL_MARK_AS_READ;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MAIL_MARK_AS_READ_write(WowWorldWriter* writer, const tbc_CMSG_MAIL_MARK_AS_READ* object);

typedef struct {
    uint64_t mailbox_id;
    uint32_t mail_id;

} tbc_CMSG_MAIL_RETURN_TO_SENDER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MAIL_RETURN_TO_SENDER_write(WowWorldWriter* writer, const tbc_CMSG_MAIL_RETURN_TO_SENDER* object);

typedef struct {
    uint64_t mailbox_id;
    uint32_t mail_id;
    uint32_t mail_template_id;

} tbc_CMSG_MAIL_DELETE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MAIL_DELETE_write(WowWorldWriter* writer, const tbc_CMSG_MAIL_DELETE* object);

typedef struct {
    uint64_t mailbox;
    uint32_t mail_id;
    /* mangoszero/cmangos/vmangos: mailTemplateId, non need, Mail store own 100% correct value anyway */
    uint32_t mail_template_id;

} tbc_CMSG_MAIL_CREATE_TEXT_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MAIL_CREATE_TEXT_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_MAIL_CREATE_TEXT_ITEM* object);

typedef struct {
    uint32_t id;
    uint64_t caster;
    /* cmangos/mangoszero: can be 0 or 1 */
    uint8_t unknown1;
    uint32_t amount_of_targets;
    tbc_SpellLogMiss* targets;

} tbc_SMSG_SPELLLOGMISS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SPELLLOGMISS_free(tbc_SMSG_SPELLLOGMISS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELLLOGMISS_write(WowWorldWriter* writer, const tbc_SMSG_SPELLLOGMISS* object);

typedef struct {
    uint64_t caster;
    uint32_t spell;
    uint32_t amount_of_effects;
    tbc_SpellLog* logs;

} tbc_SMSG_SPELLLOGEXECUTE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SPELLLOGEXECUTE_free(tbc_SMSG_SPELLLOGEXECUTE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELLLOGEXECUTE_write(WowWorldWriter* writer, const tbc_SMSG_SPELLLOGEXECUTE* object);

typedef struct {
    uint64_t target;
    uint64_t caster;
    uint32_t spell;
    uint32_t amount_of_auras;
    tbc_AuraLog* auras;

} tbc_SMSG_PERIODICAURALOG;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PERIODICAURALOG_free(tbc_SMSG_PERIODICAURALOG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PERIODICAURALOG_write(WowWorldWriter* writer, const tbc_SMSG_PERIODICAURALOG* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    uint32_t damage;
    tbc_SpellSchool school;

} tbc_SMSG_SPELLDAMAGESHIELD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELLDAMAGESHIELD_write(WowWorldWriter* writer, const tbc_SMSG_SPELLDAMAGESHIELD* object);

typedef struct {
    uint64_t target;
    uint64_t attacker;
    uint32_t spell;
    uint32_t damage;
    tbc_SpellSchool school;
    uint32_t absorbed_damage;
    /* cmangos/mangoszero/vmangos: sent as int32 */
    uint32_t resisted;
    /* cmangos/mangoszero/vmangos: if 1, then client show spell name (example: %s's ranged shot hit %s for %u school or %s suffers %u school damage from %s's spell_name */
    bool periodic_log;
    uint8_t unused;
    uint32_t blocked;
    tbc_HitInfo hit_info;
    /* cmangos has some that might be correct `https://github.com/cmangos/mangos-classic/blob/524a39412dae7946d06e4b8f319f45b615075815/src/game/Entities/Unit.cpp#L5497`. */
    uint8_t extend_flag;

} tbc_SMSG_SPELLNONMELEEDAMAGELOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELLNONMELEEDAMAGELOG_write(WowWorldWriter* writer, const tbc_SMSG_SPELLNONMELEEDAMAGELOG* object);

typedef struct {
    tbc_Talent talent;
    uint32_t requested_rank;

} tbc_CMSG_LEARN_TALENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LEARN_TALENT_write(WowWorldWriter* writer, const tbc_CMSG_LEARN_TALENT* object);

typedef struct {
    /* arcemu is the only emulator that has this.
arcemu sets to 1. */
    uint32_t unknown;

} tbc_SMSG_RESURRECT_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_RESURRECT_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_RESURRECT_FAILED* object);

typedef struct {
    bool enable_pvp;
} tbc_CMSG_TOGGLE_PVP_set;

/* vmangos: this opcode can be used in two ways: Either set explicit new status or toggle old status */
typedef struct {

    tbc_CMSG_TOGGLE_PVP_set* set;
} tbc_CMSG_TOGGLE_PVP;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_TOGGLE_PVP_free(tbc_CMSG_TOGGLE_PVP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TOGGLE_PVP_write(WowWorldWriter* writer, const tbc_CMSG_TOGGLE_PVP* object);

typedef struct {
    tbc_Area zone_id;

} tbc_SMSG_ZONE_UNDER_ATTACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ZONE_UNDER_ATTACK_write(WowWorldWriter* writer, const tbc_SMSG_ZONE_UNDER_ATTACK* object);

typedef struct {
    uint64_t auctioneer;

} tbc_MSG_AUCTION_HELLO_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_AUCTION_HELLO_Client_write(WowWorldWriter* writer, const tbc_MSG_AUCTION_HELLO_Client* object);

typedef struct {
    uint64_t auctioneer;
    tbc_AuctionHouse auction_house;

} tbc_MSG_AUCTION_HELLO_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_AUCTION_HELLO_Server_write(WowWorldWriter* writer, const tbc_MSG_AUCTION_HELLO_Server* object);

typedef struct {
    uint64_t auctioneer;
    uint64_t item;
    uint32_t starting_bid;
    uint32_t buyout;
    uint32_t auction_duration_in_minutes;

} tbc_CMSG_AUCTION_SELL_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUCTION_SELL_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_AUCTION_SELL_ITEM* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t auction_id;

} tbc_CMSG_AUCTION_REMOVE_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUCTION_REMOVE_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_AUCTION_REMOVE_ITEM* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t list_start_item;
    char* searched_name;
    uint8_t minimum_level;
    uint8_t maximum_level;
    uint32_t auction_slot_id;
    uint32_t auction_main_category;
    uint32_t auction_sub_category;
    tbc_ItemQuality auction_quality;
    uint8_t usable;
    uint8_t is_full;
    uint8_t amount_of_sorted_auctions;
    tbc_AuctionSort* sorted_auctions;

} tbc_CMSG_AUCTION_LIST_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_AUCTION_LIST_ITEMS_free(tbc_CMSG_AUCTION_LIST_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUCTION_LIST_ITEMS_write(WowWorldWriter* writer, const tbc_CMSG_AUCTION_LIST_ITEMS* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t list_from;

} tbc_CMSG_AUCTION_LIST_OWNER_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUCTION_LIST_OWNER_ITEMS_write(WowWorldWriter* writer, const tbc_CMSG_AUCTION_LIST_OWNER_ITEMS* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t auction_id;
    uint32_t price;

} tbc_CMSG_AUCTION_PLACE_BID;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUCTION_PLACE_BID_write(WowWorldWriter* writer, const tbc_CMSG_AUCTION_PLACE_BID* object);

typedef struct {
    uint32_t auction_id;
    tbc_AuctionCommandAction action;
    tbc_AuctionCommandResult result;
    uint32_t auction_outbid1;
    tbc_InventoryResult inventory_result;
    uint64_t higher_bidder;
    uint32_t new_bid;
    uint32_t auction_outbid2;
    tbc_AuctionCommandResultTwo result2;
    tbc_InventoryResult inventory_result2;
    uint64_t higher_bidder2;
    uint32_t new_bid2;
    uint32_t auction_outbid3;

} tbc_SMSG_AUCTION_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AUCTION_COMMAND_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_AUCTION_COMMAND_RESULT* object);

typedef struct {
    uint32_t count;
    tbc_AuctionListItem* auctions;
    uint32_t total_amount_of_auctions;
    uint32_t auction_search_delay;

} tbc_SMSG_AUCTION_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_AUCTION_LIST_RESULT_free(tbc_SMSG_AUCTION_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AUCTION_LIST_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_AUCTION_LIST_RESULT* object);

typedef struct {
    uint32_t count;
    tbc_AuctionListItem* auctions;
    uint32_t total_amount_of_auctions;
    uint32_t auction_search_delay;

} tbc_SMSG_AUCTION_OWNER_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_AUCTION_OWNER_LIST_RESULT_free(tbc_SMSG_AUCTION_OWNER_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AUCTION_OWNER_LIST_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_AUCTION_OWNER_LIST_RESULT* object);

typedef struct {
    tbc_AuctionHouse auction_house;
    uint32_t auction_id;
    uint64_t bidder;
    /* vmangos/cmangos: if 0, client shows ERR_AUCTION_WON_S, else ERR_AUCTION_OUTBID_S */
    uint32_t won;
    uint32_t out_bid;
    uint32_t item_template;
    uint32_t item_random_property_id;

} tbc_SMSG_AUCTION_BIDDER_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AUCTION_BIDDER_NOTIFICATION_write(WowWorldWriter* writer, const tbc_SMSG_AUCTION_BIDDER_NOTIFICATION* object);

/* vmangos/cmangos/mangoszero: this message causes on client to display: 'Your auction sold' */
typedef struct {
    uint32_t auction_id;
    /* vmangos/cmangos/mangoszero: if 0, client shows ERR_AUCTION_EXPIRED_S, else ERR_AUCTION_SOLD_S (works only when guid==0) */
    uint32_t bid;
    uint32_t auction_out_bid;
    uint64_t bidder;
    uint32_t item;
    uint32_t item_random_property_id;

} tbc_SMSG_AUCTION_OWNER_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AUCTION_OWNER_NOTIFICATION_write(WowWorldWriter* writer, const tbc_SMSG_AUCTION_OWNER_NOTIFICATION* object);

/* According to cmangos/azerothcore/trinitycore/mangostwo. Not present in vmangos. */
typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t id;
    tbc_LogFormat log_format;

} tbc_SMSG_PROCRESIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PROCRESIST_write(WowWorldWriter* writer, const tbc_SMSG_PROCRESIST* object);

typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t amount_of_spells;
    uint32_t* spells;

} tbc_SMSG_DISPEL_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_DISPEL_FAILED_free(tbc_SMSG_DISPEL_FAILED* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DISPEL_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_DISPEL_FAILED* object);

typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t id;
    bool debug_log_format;

} tbc_SMSG_SPELLORDAMAGE_IMMUNE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELLORDAMAGE_IMMUNE_write(WowWorldWriter* writer, const tbc_SMSG_SPELLORDAMAGE_IMMUNE* object);

typedef struct {
    uint64_t auctioneer;
    uint32_t start_from_page;
    uint32_t amount_of_outbid_items;
    uint32_t* outbid_item_ids;

} tbc_CMSG_AUCTION_LIST_BIDDER_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_AUCTION_LIST_BIDDER_ITEMS_free(tbc_CMSG_AUCTION_LIST_BIDDER_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUCTION_LIST_BIDDER_ITEMS_write(WowWorldWriter* writer, const tbc_CMSG_AUCTION_LIST_BIDDER_ITEMS* object);

typedef struct {
    uint32_t count;
    tbc_AuctionListItem* auctions;
    uint32_t total_amount_of_auctions;
    uint32_t auction_search_delay;

} tbc_SMSG_AUCTION_BIDDER_LIST_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_AUCTION_BIDDER_LIST_RESULT_free(tbc_SMSG_AUCTION_BIDDER_LIST_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AUCTION_BIDDER_LIST_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_AUCTION_BIDDER_LIST_RESULT* object);

typedef struct {
    uint8_t eff;
    uint8_t op;
    uint32_t value;

} tbc_SMSG_SET_FLAT_SPELL_MODIFIER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SET_FLAT_SPELL_MODIFIER_write(WowWorldWriter* writer, const tbc_SMSG_SET_FLAT_SPELL_MODIFIER* object);

typedef struct {
    uint8_t eff;
    uint8_t op;
    uint32_t value;

} tbc_SMSG_SET_PCT_SPELL_MODIFIER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SET_PCT_SPELL_MODIFIER_write(WowWorldWriter* writer, const tbc_SMSG_SET_PCT_SPELL_MODIFIER* object);

typedef struct {
    uint32_t item;

} tbc_CMSG_SET_AMMO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_AMMO_write(WowWorldWriter* writer, const tbc_CMSG_SET_AMMO* object);

typedef struct {
    uint32_t delay;

} tbc_SMSG_CORPSE_RECLAIM_DELAY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CORPSE_RECLAIM_DELAY_write(WowWorldWriter* writer, const tbc_SMSG_CORPSE_RECLAIM_DELAY* object);

/* Sent when the client enters the world. */
typedef struct {
    uint64_t guid;

} tbc_CMSG_SET_ACTIVE_MOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_ACTIVE_MOVER_write(WowWorldWriter* writer, const tbc_CMSG_SET_ACTIVE_MOVER* object);

typedef struct {
    uint64_t guid;
    uint32_t id;

} tbc_CMSG_PET_CANCEL_AURA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PET_CANCEL_AURA_write(WowWorldWriter* writer, const tbc_CMSG_PET_CANCEL_AURA* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CANCEL_AUTO_REPEAT_SPELL_write(WowWorldWriter* writer);

typedef struct {
    uint64_t npc;

} tbc_MSG_LIST_STABLED_PETS_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_LIST_STABLED_PETS_Client_write(WowWorldWriter* writer, const tbc_MSG_LIST_STABLED_PETS_Client* object);

typedef struct {
    uint64_t npc;
    uint8_t amount_of_pets;
    uint8_t stable_slots;
    tbc_StabledPet* pets;

} tbc_MSG_LIST_STABLED_PETS_Server;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_LIST_STABLED_PETS_Server_free(tbc_MSG_LIST_STABLED_PETS_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_LIST_STABLED_PETS_Server_write(WowWorldWriter* writer, const tbc_MSG_LIST_STABLED_PETS_Server* object);

typedef struct {
    uint64_t stable_master;

} tbc_CMSG_STABLE_PET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_STABLE_PET_write(WowWorldWriter* writer, const tbc_CMSG_STABLE_PET* object);

typedef struct {
    uint64_t stable_master;
    uint32_t pet_number;

} tbc_CMSG_UNSTABLE_PET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_UNSTABLE_PET_write(WowWorldWriter* writer, const tbc_CMSG_UNSTABLE_PET* object);

typedef struct {
    uint64_t npc;

} tbc_CMSG_BUY_STABLE_SLOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BUY_STABLE_SLOT_write(WowWorldWriter* writer, const tbc_CMSG_BUY_STABLE_SLOT* object);

typedef struct {
    tbc_StableResult result;

} tbc_SMSG_STABLE_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_STABLE_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_STABLE_RESULT* object);

typedef struct {
    uint64_t npc;
    uint32_t pet_slot;

} tbc_CMSG_STABLE_SWAP_PET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_STABLE_SWAP_PET_write(WowWorldWriter* writer, const tbc_CMSG_STABLE_SWAP_PET* object);

typedef struct {
    uint64_t guid;
    tbc_QuestPartyMessage message;

} tbc_MSG_QUEST_PUSH_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_QUEST_PUSH_RESULT_cmsg_write(WowWorldWriter* writer, const tbc_MSG_QUEST_PUSH_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_QUEST_PUSH_RESULT_smsg_write(WowWorldWriter* writer, const tbc_MSG_QUEST_PUSH_RESULT* object);

typedef struct {
    uint32_t sound_id;

} tbc_SMSG_PLAY_MUSIC;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PLAY_MUSIC_write(WowWorldWriter* writer, const tbc_SMSG_PLAY_MUSIC* object);

/* vmangos: Nostalrius: ignored by client if unit is not loaded */
typedef struct {
    uint32_t sound_id;
    uint64_t guid;

} tbc_SMSG_PLAY_OBJECT_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PLAY_OBJECT_SOUND_write(WowWorldWriter* writer, const tbc_SMSG_PLAY_OBJECT_SOUND* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_REQUEST_PET_INFO_write(WowWorldWriter* writer);

typedef struct {
    tbc_FarSightOperation operation;

} tbc_CMSG_FAR_SIGHT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FAR_SIGHT_write(WowWorldWriter* writer, const tbc_CMSG_FAR_SIGHT* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t dispell_spell;
    /* mangosone: unused */
    uint8_t unknown;
    uint32_t amount_of_spells;
    tbc_DispelledSpell* spells;

} tbc_SMSG_SPELLDISPELLOG;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SPELLDISPELLOG_free(tbc_SMSG_SPELLDISPELLOG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELLDISPELLOG_write(WowWorldWriter* writer, const tbc_SMSG_SPELLDISPELLOG* object);

typedef struct {
    char* name;
    uint8_t group_number;

} tbc_CMSG_GROUP_CHANGE_SUB_GROUP;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GROUP_CHANGE_SUB_GROUP_free(tbc_CMSG_GROUP_CHANGE_SUB_GROUP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_CHANGE_SUB_GROUP_write(WowWorldWriter* writer, const tbc_CMSG_GROUP_CHANGE_SUB_GROUP* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_REQUEST_PARTY_MEMBER_STATS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_REQUEST_PARTY_MEMBER_STATS_write(WowWorldWriter* writer, const tbc_CMSG_REQUEST_PARTY_MEMBER_STATS* object);

typedef struct {
    char* name;
    char* swap_with_name;

} tbc_CMSG_GROUP_SWAP_SUB_GROUP;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GROUP_SWAP_SUB_GROUP_free(tbc_CMSG_GROUP_SWAP_SUB_GROUP* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_SWAP_SUB_GROUP_write(WowWorldWriter* writer, const tbc_CMSG_GROUP_SWAP_SUB_GROUP* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot_index;

} tbc_CMSG_AUTOSTORE_BANK_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUTOSTORE_BANK_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_AUTOSTORE_BANK_ITEM* object);

typedef struct {
    uint8_t bag_index;
    uint8_t slot_index;

} tbc_CMSG_AUTOBANK_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AUTOBANK_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_AUTOBANK_ITEM* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_QUERY_NEXT_MAIL_TIME_Client_write(WowWorldWriter* writer);

typedef struct {
    uint32_t float_type;
    uint32_t amount_of_mails;
    tbc_ReceivedMail* mails;

} tbc_MSG_QUERY_NEXT_MAIL_TIME_Server;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_QUERY_NEXT_MAIL_TIME_Server_free(tbc_MSG_QUERY_NEXT_MAIL_TIME_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_QUERY_NEXT_MAIL_TIME_Server_write(WowWorldWriter* writer, const tbc_MSG_QUERY_NEXT_MAIL_TIME_Server* object);

/* cmangos/vmangos/mangoszero: deliver undelivered mail */
typedef struct {
    /* cmangos/vmangos sends 0 as u32, mangoszero sends 0 as f32 */
    uint32_t unknown1;

} tbc_SMSG_RECEIVED_MAIL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_RECEIVED_MAIL_write(WowWorldWriter* writer, const tbc_SMSG_RECEIVED_MAIL* object);

/* used when player leaves raid group inside instance */
typedef struct {
    uint32_t homebind_timer;
    tbc_RaidGroupError error;

} tbc_SMSG_RAID_GROUP_ONLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_RAID_GROUP_ONLY_write(WowWorldWriter* writer, const tbc_SMSG_RAID_GROUP_ONLY* object);

typedef struct {
    uint32_t honor_points;
    uint64_t victim;
    tbc_PvpRank rank;

} tbc_SMSG_PVP_CREDIT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PVP_CREDIT_write(WowWorldWriter* writer, const tbc_SMSG_PVP_CREDIT* object);

typedef struct {
    uint32_t item;
    uint32_t item_template;
    uint32_t random_property_id;

} tbc_SMSG_AUCTION_REMOVED_NOTIFICATION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AUCTION_REMOVED_NOTIFICATION_write(WowWorldWriter* writer, const tbc_SMSG_AUCTION_REMOVED_NOTIFICATION* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_RAID_CONVERT_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    bool set_assistant;

} tbc_CMSG_GROUP_ASSISTANT_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GROUP_ASSISTANT_LEADER_write(WowWorldWriter* writer, const tbc_CMSG_GROUP_ASSISTANT_LEADER* object);

typedef struct {
    uint64_t guid;
    tbc_BuybackSlot slot;

} tbc_CMSG_BUYBACK_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BUYBACK_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_BUYBACK_ITEM* object);

typedef struct {
    tbc_ServerMessageType message_type;
    char* message;

} tbc_SMSG_SERVER_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SERVER_MESSAGE_free(tbc_SMSG_SERVER_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SERVER_MESSAGE_write(WowWorldWriter* writer, const tbc_SMSG_SERVER_MESSAGE* object);

typedef struct {
    tbc_Area area;
    tbc_MeetingStoneStatus status;

} tbc_SMSG_MEETINGSTONE_SETQUEUE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MEETINGSTONE_SETQUEUE_write(WowWorldWriter* writer, const tbc_SMSG_MEETINGSTONE_SETQUEUE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MEETINGSTONE_INFO_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GMTICKETSYSTEM_TOGGLE_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CANCEL_GROWTH_AURA_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CANCEL_AUTO_REPEAT_write(WowWorldWriter* writer);

typedef struct {
    tbc_UnitStandState state;

} tbc_SMSG_STANDSTATE_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_STANDSTATE_UPDATE_write(WowWorldWriter* writer, const tbc_SMSG_STANDSTATE_UPDATE* object);

typedef struct {
    uint64_t looted_target;
    uint32_t loot_slot;
    uint32_t item;
    uint32_t item_random_property_id;
    /* vmangos/mangoszero: Always set to 0. */
    uint32_t item_random_suffix_id;

} tbc_SMSG_LOOT_ALL_PASSED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_ALL_PASSED_write(WowWorldWriter* writer, const tbc_SMSG_LOOT_ALL_PASSED* object);

typedef struct {
    uint64_t looted_target;
    uint32_t loot_slot;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint64_t winning_player;
    /* rollnumber related to SMSG_LOOT_ROLL */
    uint8_t winning_roll;
    /* Rolltype related to SMSG_LOOT_ROLL */
    tbc_RollVote vote;

} tbc_SMSG_LOOT_ROLL_WON;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_ROLL_WON_write(WowWorldWriter* writer, const tbc_SMSG_LOOT_ROLL_WON* object);

typedef struct {
    uint64_t item;
    uint32_t item_slot;
    tbc_RollVote vote;

} tbc_CMSG_LOOT_ROLL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LOOT_ROLL_write(WowWorldWriter* writer, const tbc_CMSG_LOOT_ROLL* object);

typedef struct {
    uint64_t creature;
    uint32_t loot_slot;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    uint32_t countdown_time;

} tbc_SMSG_LOOT_START_ROLL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_START_ROLL_write(WowWorldWriter* writer, const tbc_SMSG_LOOT_START_ROLL* object);

typedef struct {
    uint64_t creature;
    uint32_t loot_slot;
    uint64_t player;
    uint32_t item;
    /* vmangos/mangoszero: not used ? */
    uint32_t item_random_suffix;
    uint32_t item_random_property_id;
    /* vmangos/cmangos/mangoszero: 0: Need for: `item_name` > 127: you passed on: `item_name`      Roll number */
    uint8_t roll_number;
    tbc_RollVote vote;
    /* mangosone/arcemu sets to 0.
mangosone: auto pass on loot
arcemu: possibly related to disenchanting of loot
azerothcore: 1: 'You automatically passed on: %s because you cannot loot that item.' - Possibly used in need before greed */
    uint8_t auto_pass;

} tbc_SMSG_LOOT_ROLL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_ROLL_write(WowWorldWriter* writer, const tbc_SMSG_LOOT_ROLL* object);

typedef struct {
    uint64_t loot;
    uint8_t slot_id;
    uint64_t player;

} tbc_CMSG_LOOT_MASTER_GIVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LOOT_MASTER_GIVE_write(WowWorldWriter* writer, const tbc_CMSG_LOOT_MASTER_GIVE* object);

typedef struct {
    uint8_t amount_of_players;
    uint64_t* guids;

} tbc_SMSG_LOOT_MASTER_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_LOOT_MASTER_LIST_free(tbc_SMSG_LOOT_MASTER_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_MASTER_LIST_write(WowWorldWriter* writer, const tbc_SMSG_LOOT_MASTER_LIST* object);

typedef struct {
    uint32_t amount_of_reactions;
    tbc_ForcedReaction* reactions;

} tbc_SMSG_SET_FORCED_REACTIONS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SET_FORCED_REACTIONS_free(tbc_SMSG_SET_FORCED_REACTIONS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SET_FORCED_REACTIONS_write(WowWorldWriter* writer, const tbc_SMSG_SET_FORCED_REACTIONS* object);

typedef struct {
    uint64_t caster;
    uint32_t id;

} tbc_SMSG_SPELL_FAILED_OTHER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELL_FAILED_OTHER_write(WowWorldWriter* writer, const tbc_SMSG_SPELL_FAILED_OTHER* object);

typedef struct {
    uint64_t npc;
    uint64_t item;
    bool from_guild_bank;

} tbc_CMSG_REPAIR_ITEM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_REPAIR_ITEM_write(WowWorldWriter* writer, const tbc_CMSG_REPAIR_ITEM* object);

typedef struct {
    char* name;

} tbc_SMSG_CHAT_PLAYER_NOT_FOUND;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_CHAT_PLAYER_NOT_FOUND_free(tbc_SMSG_CHAT_PLAYER_NOT_FOUND* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHAT_PLAYER_NOT_FOUND_write(WowWorldWriter* writer, const tbc_SMSG_CHAT_PLAYER_NOT_FOUND* object);

typedef struct {
    uint64_t wiping_npc;

} tbc_MSG_TALENT_WIPE_CONFIRM_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_TALENT_WIPE_CONFIRM_Client_write(WowWorldWriter* writer, const tbc_MSG_TALENT_WIPE_CONFIRM_Client* object);

/* cmangos/vmangos/mangoszero returns guid 0 and unknown 0 when talents can not be reset
cmangos/vmangos/mangoszero casts spell 14876 when resetting */
typedef struct {
    uint64_t wiping_npc;
    uint32_t cost_in_copper;

} tbc_MSG_TALENT_WIPE_CONFIRM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_TALENT_WIPE_CONFIRM_Server_write(WowWorldWriter* writer, const tbc_MSG_TALENT_WIPE_CONFIRM_Server* object);

typedef struct {
    uint64_t summoner;
    tbc_Area area;
    uint32_t auto_decline_time;

} tbc_SMSG_SUMMON_REQUEST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SUMMON_REQUEST_write(WowWorldWriter* writer, const tbc_SMSG_SUMMON_REQUEST* object);

typedef struct {
    uint64_t summoner;
    bool agree;

} tbc_CMSG_SUMMON_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SUMMON_RESPONSE_write(WowWorldWriter* writer, const tbc_CMSG_SUMMON_RESPONSE* object);

typedef struct {
    uint64_t guid;
    uint64_t transport;
    all_Vector3d spline_point;
    uint32_t spline_id;
    tbc_MonsterMoveType move_type;
    uint64_t target;
    float angle;
    all_Vector3d position;
    tbc_SplineFlag spline_flags;
    uint32_t duration;
    MonsterMoveSpline splines;

} tbc_SMSG_MONSTER_MOVE_TRANSPORT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_MONSTER_MOVE_TRANSPORT_free(tbc_SMSG_MONSTER_MOVE_TRANSPORT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MONSTER_MOVE_TRANSPORT_write(WowWorldWriter* writer, const tbc_SMSG_MONSTER_MOVE_TRANSPORT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_BROKEN_write(WowWorldWriter* writer);

typedef struct {
    uint64_t player;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_FEATHER_FALL_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_FEATHER_FALL_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_FEATHER_FALL_Server* object);

typedef struct {
    uint64_t player;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_WATER_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_WATER_WALK_cmsg_write(WowWorldWriter* writer, const tbc_MSG_MOVE_WATER_WALK* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_WATER_WALK_smsg_write(WowWorldWriter* writer, const tbc_MSG_MOVE_WATER_WALK* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SELF_RES_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FEIGN_DEATH_RESISTED_write(WowWorldWriter* writer);

typedef struct {
    uint32_t time;

} tbc_SMSG_DUEL_COUNTDOWN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DUEL_COUNTDOWN_write(WowWorldWriter* writer, const tbc_SMSG_DUEL_COUNTDOWN* object);

typedef struct {
    char* message;

} tbc_SMSG_AREA_TRIGGER_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_AREA_TRIGGER_MESSAGE_free(tbc_SMSG_AREA_TRIGGER_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AREA_TRIGGER_MESSAGE_write(WowWorldWriter* writer, const tbc_SMSG_AREA_TRIGGER_MESSAGE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TOGGLE_HELM_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TOGGLE_CLOAK_write(WowWorldWriter* writer);

typedef struct {
    bool spirit_released;

} tbc_SMSG_PLAYER_SKINNED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PLAYER_SKINNED_write(WowWorldWriter* writer, const tbc_SMSG_PLAYER_SKINNED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DURABILITY_DAMAGE_DEATH_write(WowWorldWriter* writer);

typedef struct {
    /* Emulators set PLAYER_FIELD_BYTES[2] to this unless it's 0. */
    uint8_t action_bar;

} tbc_CMSG_SET_ACTIONBAR_TOGGLES;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_ACTIONBAR_TOGGLES_write(WowWorldWriter* writer, const tbc_CMSG_SET_ACTIONBAR_TOGGLES* object);

typedef struct {
    uint64_t petition;
    char* new_name;

} tbc_MSG_PETITION_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_PETITION_RENAME_free(tbc_MSG_PETITION_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_PETITION_RENAME_cmsg_write(WowWorldWriter* writer, const tbc_MSG_PETITION_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_PETITION_RENAME_smsg_write(WowWorldWriter* writer, const tbc_MSG_PETITION_RENAME* object);

typedef struct {
    tbc_Map map;
    tbc_Area area;
    uint16_t amount_of_states;
    tbc_WorldState* states;

} tbc_SMSG_INIT_WORLD_STATES;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_INIT_WORLD_STATES_free(tbc_SMSG_INIT_WORLD_STATES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_INIT_WORLD_STATES_write(WowWorldWriter* writer, const tbc_SMSG_INIT_WORLD_STATES* object);

typedef struct {
    tbc_WorldState state;

} tbc_SMSG_UPDATE_WORLD_STATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_UPDATE_WORLD_STATE_write(WowWorldWriter* writer, const tbc_SMSG_UPDATE_WORLD_STATE* object);

typedef struct {
    uint32_t item;
    uint64_t guid;

} tbc_CMSG_ITEM_NAME_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ITEM_NAME_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_ITEM_NAME_QUERY* object);

typedef struct {
    uint32_t item;
    char* item_name;
    tbc_InventoryType inventory_type;

} tbc_SMSG_ITEM_NAME_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_ITEM_NAME_QUERY_RESPONSE_free(tbc_SMSG_ITEM_NAME_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ITEM_NAME_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_ITEM_NAME_QUERY_RESPONSE* object);

typedef struct {
    tbc_PetFeedback feedback;

} tbc_SMSG_PET_ACTION_FEEDBACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_ACTION_FEEDBACK_write(WowWorldWriter* writer, const tbc_SMSG_PET_ACTION_FEEDBACK* object);

/* Request of new name for character. This is only sent by the client if RENAME is set in the [CharacterFlags] of [SMSG_CHAR_ENUM] and the client tries to login. */
typedef struct {
    uint64_t character;
    char* new_name;

} tbc_CMSG_CHAR_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHAR_RENAME_free(tbc_CMSG_CHAR_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHAR_RENAME_write(WowWorldWriter* writer, const tbc_CMSG_CHAR_RENAME* object);

/* Response to [CMSG_CHAR_RENAME]. */
typedef struct {
    tbc_WorldResult result;
    uint64_t character;
    char* new_name;

} tbc_SMSG_CHAR_RENAME;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_CHAR_RENAME_free(tbc_SMSG_CHAR_RENAME* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHAR_RENAME_write(WowWorldWriter* writer, const tbc_SMSG_CHAR_RENAME* object);

typedef struct {
    tbc_MovementInfo info;
    uint32_t movement_counter;

} tbc_CMSG_MOVE_SPLINE_DONE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_SPLINE_DONE_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_SPLINE_DONE* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_CMSG_MOVE_FALL_RESET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_FALL_RESET_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_FALL_RESET* object);

typedef struct {
    /* All emulators across all versions set to 0 */
    uint32_t unknown;

} tbc_SMSG_INSTANCE_SAVE_CREATED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_INSTANCE_SAVE_CREATED_write(WowWorldWriter* writer, const tbc_SMSG_INSTANCE_SAVE_CREATED* object);

typedef struct {
    uint32_t amount_of_raid_infos;
    tbc_RaidInfo* raid_infos;

} tbc_SMSG_RAID_INSTANCE_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_RAID_INSTANCE_INFO_free(tbc_SMSG_RAID_INSTANCE_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_RAID_INSTANCE_INFO_write(WowWorldWriter* writer, const tbc_SMSG_RAID_INSTANCE_INFO* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_REQUEST_RAID_INFO_write(WowWorldWriter* writer);

typedef struct {
    uint64_t guid;
    uint32_t lag;

} tbc_CMSG_MOVE_TIME_SKIPPED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_TIME_SKIPPED_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_TIME_SKIPPED* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    tbc_MovementInfo info;
    uint32_t apply;

} tbc_CMSG_MOVE_FEATHER_FALL_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_FEATHER_FALL_ACK_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_FEATHER_FALL_ACK* object);

typedef struct {
    uint64_t guid;
    uint32_t movement_counter;
    tbc_MovementInfo info;
    uint32_t apply;

} tbc_CMSG_MOVE_WATER_WALK_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_WATER_WALK_ACK_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_WATER_WALK_ACK* object);

typedef struct {
    uint64_t old_mover;
    tbc_MovementInfo info;

} tbc_CMSG_MOVE_NOT_ACTIVE_MOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_NOT_ACTIVE_MOVER_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_NOT_ACTIVE_MOVER* object);

typedef struct {
    uint32_t sound_id;

} tbc_SMSG_PLAY_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PLAY_SOUND_write(WowWorldWriter* writer, const tbc_SMSG_PLAY_SOUND* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BATTLEFIELD_STATUS_write(WowWorldWriter* writer);

/* mangosone treats `arena_type`, `unknown1`, `battleground_type_id`, and `unknown2` as one big u64 and does not send any fields after these if all fields are 0. */
typedef struct {
    /* vmangos: players can be in 3 queues at the same time (0..2) */
    uint32_t queue_slot;
    tbc_ArenaType arena_type;
    /* mangosone sets to 0x0D. */
    uint8_t unknown1;
    tbc_BattlegroundType battleground_type;
    /* mangosone sets to 0x1F90 */
    uint16_t unknown2;
    uint32_t client_instance_id;
    bool rated;
    tbc_StatusId status_id;
    uint32_t average_wait_time_in_ms;
    uint32_t time_in_queue_in_ms;
    uint32_t time_to_remove_in_queue_in_ms;
    uint32_t time_to_bg_autoleave_in_ms;
    uint32_t time_to_bg_start_in_ms;

} tbc_SMSG_BATTLEFIELD_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_BATTLEFIELD_STATUS_write(WowWorldWriter* writer, const tbc_SMSG_BATTLEFIELD_STATUS* object);

typedef struct {
    /* mangosone/mangos-tbc/azerothcore: arenatype if arena */
    uint8_t arena_type;
    /* mangosone/mangos-tbc/azerothcore: unk, can be 0x0 (may be if was invited?) and 0x1 */
    uint8_t unknown1;
    /* mangosone/mangos-tbc/azerothcore: type id from dbc */
    uint32_t bg_type_id;
    /* mangosone/mangos-tbc/azerothcore: 0x1F90 constant? */
    uint16_t unknown2;
    tbc_BattlefieldPortAction action;

} tbc_CMSG_BATTLEFIELD_PORT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BATTLEFIELD_PORT_write(WowWorldWriter* writer, const tbc_CMSG_BATTLEFIELD_PORT* object);

typedef struct {
    uint64_t guid;

} tbc_MSG_INSPECT_HONOR_STATS_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_INSPECT_HONOR_STATS_Client_write(WowWorldWriter* writer, const tbc_MSG_INSPECT_HONOR_STATS_Client* object);

typedef struct {
    uint64_t guid;
    uint8_t amount_of_honor;
    uint32_t kills;
    uint32_t honor_today;
    uint32_t honor_yesterday;
    uint32_t lifetime_honorable_kills;

} tbc_MSG_INSPECT_HONOR_STATS_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_INSPECT_HONOR_STATS_Server_write(WowWorldWriter* writer, const tbc_MSG_INSPECT_HONOR_STATS_Server* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_BATTLEMASTER_HELLO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BATTLEMASTER_HELLO_write(WowWorldWriter* writer, const tbc_CMSG_BATTLEMASTER_HELLO* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} tbc_SMSG_FORCE_WALK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCE_WALK_SPEED_CHANGE_write(WowWorldWriter* writer, const tbc_SMSG_FORCE_WALK_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    tbc_MovementInfo info;
    float new_speed;

} tbc_CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FORCE_WALK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const tbc_CMSG_FORCE_WALK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} tbc_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE_write(WowWorldWriter* writer, const tbc_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    tbc_MovementInfo info;
    float new_speed;

} tbc_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const tbc_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} tbc_SMSG_FORCE_TURN_RATE_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCE_TURN_RATE_CHANGE_write(WowWorldWriter* writer, const tbc_SMSG_FORCE_TURN_RATE_CHANGE* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;
    tbc_MovementInfo info;
    float new_speed;

} tbc_CMSG_FORCE_TURN_RATE_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FORCE_TURN_RATE_CHANGE_ACK_write(WowWorldWriter* writer, const tbc_CMSG_FORCE_TURN_RATE_CHANGE_ACK* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_PVP_LOG_DATA_Client_write(WowWorldWriter* writer);

typedef struct {
    uint8_t unknown1;
    uint8_t unknown2;
    tbc_Map map;
    uint16_t unknown3;

} tbc_CMSG_LEAVE_BATTLEFIELD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LEAVE_BATTLEFIELD_write(WowWorldWriter* writer, const tbc_CMSG_LEAVE_BATTLEFIELD* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_AREA_SPIRIT_HEALER_QUERY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AREA_SPIRIT_HEALER_QUERY_write(WowWorldWriter* writer, const tbc_CMSG_AREA_SPIRIT_HEALER_QUERY* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_AREA_SPIRIT_HEALER_QUEUE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_AREA_SPIRIT_HEALER_QUEUE_write(WowWorldWriter* writer, const tbc_CMSG_AREA_SPIRIT_HEALER_QUEUE* object);

typedef struct {
    uint64_t guid;
    uint32_t next_resurrect_time;

} tbc_SMSG_AREA_SPIRIT_HEALER_TIME;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_AREA_SPIRIT_HEALER_TIME_write(WowWorldWriter* writer, const tbc_SMSG_AREA_SPIRIT_HEALER_TIME* object);

typedef struct {
    uint32_t amount_of_encrypted_data;
    uint8_t* encrypted_data;

} tbc_SMSG_WARDEN_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_WARDEN_DATA_free(tbc_SMSG_WARDEN_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_WARDEN_DATA_write(WowWorldWriter* writer, const tbc_SMSG_WARDEN_DATA* object);

typedef struct {
    uint32_t amount_of_encrypted_data;
    uint8_t* encrypted_data;

} tbc_CMSG_WARDEN_DATA;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_WARDEN_DATA_free(tbc_CMSG_WARDEN_DATA* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_WARDEN_DATA_write(WowWorldWriter* writer, const tbc_CMSG_WARDEN_DATA* object);

typedef struct {
    tbc_BgTypeId id;

} tbc_SMSG_GROUP_JOINED_BATTLEGROUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GROUP_JOINED_BATTLEGROUND_write(WowWorldWriter* writer, const tbc_SMSG_GROUP_JOINED_BATTLEGROUND* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_BATTLEGROUND_PLAYER_POSITIONS_Client_write(WowWorldWriter* writer);

typedef struct {
    uint32_t amount_of_teammates;
    tbc_BattlegroundPlayerPosition* teammates;
    /* vmangos only sends the carrier of the player team. No emu ever sends more than 2. */
    uint8_t amount_of_carriers;
    tbc_BattlegroundPlayerPosition* carriers;

} tbc_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_free(tbc_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server_write(WowWorldWriter* writer, const tbc_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server* object);

typedef struct {
    uint64_t pet;

} tbc_CMSG_PET_STOP_ATTACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PET_STOP_ATTACK_write(WowWorldWriter* writer, const tbc_CMSG_PET_STOP_ATTACK* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_BINDER_CONFIRM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_BINDER_CONFIRM_write(WowWorldWriter* writer, const tbc_SMSG_BINDER_CONFIRM* object);

typedef struct {
    uint64_t player;

} tbc_SMSG_BATTLEGROUND_PLAYER_JOINED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_BATTLEGROUND_PLAYER_JOINED_write(WowWorldWriter* writer, const tbc_SMSG_BATTLEGROUND_PLAYER_JOINED* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_BATTLEGROUND_PLAYER_LEFT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_BATTLEGROUND_PLAYER_LEFT_write(WowWorldWriter* writer, const tbc_SMSG_BATTLEGROUND_PLAYER_LEFT* object);

typedef struct {
    /* vmangos: battlemaster guid, or player guid if joining queue from BG portal */
    uint64_t guid;
    tbc_Map map;
    /* vmangos: 0 if First Available selected */
    uint32_t instance_id;
    bool join_as_group;

} tbc_CMSG_BATTLEMASTER_JOIN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BATTLEMASTER_JOIN_write(WowWorldWriter* writer, const tbc_CMSG_BATTLEMASTER_JOIN* object);

/* Banned addons are not properly implemented in the wowm. Sending any number other than 0 means that the packet is incomplete and thus invalid */
typedef struct {
    tbc_AddonArray addons;

} tbc_SMSG_ADDON_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_ADDON_INFO_free(tbc_SMSG_ADDON_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ADDON_INFO_write(WowWorldWriter* writer, const tbc_SMSG_ADDON_INFO* object);

typedef struct {
    uint64_t pet;

} tbc_CMSG_PET_UNLEARN;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PET_UNLEARN_write(WowWorldWriter* writer, const tbc_CMSG_PET_UNLEARN* object);

typedef struct {
    uint64_t pet;
    uint32_t talent_reset_cost;

} tbc_SMSG_PET_UNLEARN_CONFIRM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_UNLEARN_CONFIRM_write(WowWorldWriter* writer, const tbc_SMSG_PET_UNLEARN_CONFIRM* object);

typedef struct {
    uint64_t guid;
    tbc_GroupUpdateFlags mask;
    tbc_GroupMemberOnlineStatus status;
    uint16_t current_health;
    uint16_t max_health;
    tbc_Power power;
    uint16_t current_power;
    uint16_t max_power;
    uint16_t level;
    tbc_Area area;
    /* cmangos: float cast to u16 */
    uint16_t position_x;
    /* cmangos: float cast to u16 */
    uint16_t position_y;
    /* cmangos: In all checked pre-2.x data of packets included only positive auras */
    tbc_AuraMask auras;
    uint64_t pet;
    char* pet_name;
    uint16_t pet_display_id;
    uint16_t pet_current_health;
    uint16_t pet_max_health;
    tbc_Power pet_power_type;
    uint16_t pet_current_power;
    uint16_t pet_max_power;
    tbc_AuraMask pet_auras;

} tbc_SMSG_PARTY_MEMBER_STATS_FULL;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_PARTY_MEMBER_STATS_FULL_free(tbc_SMSG_PARTY_MEMBER_STATS_FULL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PARTY_MEMBER_STATS_FULL_write(WowWorldWriter* writer, const tbc_SMSG_PARTY_MEMBER_STATS_FULL* object);

typedef struct {
    uint64_t guid;
    uint32_t id;
    bool autocast_enabled;

} tbc_CMSG_PET_SPELL_AUTOCAST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_PET_SPELL_AUTOCAST_write(WowWorldWriter* writer, const tbc_CMSG_PET_SPELL_AUTOCAST* object);

typedef struct {
    tbc_WeatherType weather_type;
    float grade;
    tbc_WeatherChangeType change;

} tbc_SMSG_WEATHER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_WEATHER_write(WowWorldWriter* writer, const tbc_SMSG_WEATHER* object);

typedef struct {
    tbc_RaidInstanceMessage message_type;
    tbc_Map map;
    uint32_t time_left;

} tbc_SMSG_RAID_INSTANCE_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_RAID_INSTANCE_MESSAGE_write(WowWorldWriter* writer, const tbc_SMSG_RAID_INSTANCE_MESSAGE* object);

typedef struct {
    char* guild_info;

} tbc_CMSG_GUILD_INFO_TEXT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_INFO_TEXT_free(tbc_CMSG_GUILD_INFO_TEXT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_INFO_TEXT_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_INFO_TEXT* object);

typedef struct {
    tbc_ChatRestrictionType restriction;

} tbc_SMSG_CHAT_RESTRICTED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHAT_RESTRICTED_write(WowWorldWriter* writer, const tbc_SMSG_CHAT_RESTRICTED* object);

/* Informs the client that the run speed of a unit has changed.
Mangos sends this to third parties that aren't having their speed changed and [SMSG_FORCE_RUN_SPEED_CHANGE] to the client that has their run speed changed. */
typedef struct {
    uint64_t guid;
    float speed;

} tbc_SMSG_SPLINE_SET_RUN_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_SET_RUN_SPEED_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_SET_RUN_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} tbc_SMSG_SPLINE_SET_RUN_BACK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_SET_RUN_BACK_SPEED_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_SET_RUN_BACK_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} tbc_SMSG_SPLINE_SET_SWIM_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_SET_SWIM_SPEED_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_SET_SWIM_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} tbc_SMSG_SPLINE_SET_WALK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_SET_WALK_SPEED_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_SET_WALK_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} tbc_SMSG_SPLINE_SET_SWIM_BACK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_SET_SWIM_BACK_SPEED_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_SET_SWIM_BACK_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} tbc_SMSG_SPLINE_SET_TURN_RATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_SET_TURN_RATE_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_SET_TURN_RATE* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_UNROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_UNROOT_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_UNROOT* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_FEATHER_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_FEATHER_FALL_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_FEATHER_FALL* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_NORMAL_FALL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_NORMAL_FALL_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_NORMAL_FALL* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_SET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_SET_HOVER_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_SET_HOVER* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_UNSET_HOVER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_UNSET_HOVER_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_UNSET_HOVER* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_WATER_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_WATER_WALK_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_WATER_WALK* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_LAND_WALK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_LAND_WALK_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_LAND_WALK* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_START_SWIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_START_SWIM_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_START_SWIM* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_STOP_SWIM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_STOP_SWIM_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_STOP_SWIM* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_SET_RUN_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_SET_RUN_MODE_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_SET_RUN_MODE* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_SET_WALK_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_SET_WALK_MODE_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_SET_WALK_MODE* object);

typedef struct {
    uint64_t guid;
    /* vmangos/mangosone: Never used. */
    uint32_t total_cost;
    uint32_t node_count;
    uint32_t* nodes;

} tbc_CMSG_ACTIVATETAXIEXPRESS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_ACTIVATETAXIEXPRESS_free(tbc_CMSG_ACTIVATETAXIEXPRESS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ACTIVATETAXIEXPRESS_write(WowWorldWriter* writer, const tbc_CMSG_ACTIVATETAXIEXPRESS* object);

typedef struct {
    tbc_Faction faction;
    bool inactive;

} tbc_CMSG_SET_FACTION_INACTIVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_FACTION_INACTIVE_write(WowWorldWriter* writer, const tbc_CMSG_SET_FACTION_INACTIVE* object);

typedef struct {
    tbc_Faction faction;

} tbc_CMSG_SET_WATCHED_FACTION;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_WATCHED_FACTION_write(WowWorldWriter* writer, const tbc_CMSG_SET_WATCHED_FACTION* object);

typedef struct {
    uint64_t player;
    uint32_t time_skipped;

} tbc_MSG_MOVE_TIME_SKIPPED_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_TIME_SKIPPED_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_TIME_SKIPPED_Server* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_ROOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_ROOT_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_ROOT* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_INVALIDATE_PLAYER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_INVALIDATE_PLAYER_write(WowWorldWriter* writer, const tbc_SMSG_INVALIDATE_PLAYER* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_RESET_INSTANCES_write(WowWorldWriter* writer);

typedef struct {
    tbc_Map map;

} tbc_SMSG_INSTANCE_RESET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_INSTANCE_RESET_write(WowWorldWriter* writer, const tbc_SMSG_INSTANCE_RESET* object);

typedef struct {
    tbc_InstanceResetFailedReason reason;
    tbc_Map map;

} tbc_SMSG_INSTANCE_RESET_FAILED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_INSTANCE_RESET_FAILED_write(WowWorldWriter* writer, const tbc_SMSG_INSTANCE_RESET_FAILED* object);

typedef struct {
    tbc_Map map;

} tbc_SMSG_UPDATE_LAST_INSTANCE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_UPDATE_LAST_INSTANCE_write(WowWorldWriter* writer, const tbc_SMSG_UPDATE_LAST_INSTANCE* object);

typedef struct {
    tbc_RaidTargetIndex target_index;
    uint64_t target;

} tbc_MSG_RAID_TARGET_UPDATE_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_RAID_TARGET_UPDATE_Client_write(WowWorldWriter* writer, const tbc_MSG_RAID_TARGET_UPDATE_Client* object);

typedef struct {
    tbc_RaidTargetUpdateType update_type;
    tbc_RaidTargetUpdate raid_targets[8];
    tbc_RaidTargetUpdate raid_target;

} tbc_MSG_RAID_TARGET_UPDATE_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_RAID_TARGET_UPDATE_Server_write(WowWorldWriter* writer, const tbc_MSG_RAID_TARGET_UPDATE_Server* object);

typedef struct {
    uint8_t state;
} tbc_MSG_RAID_READY_CHECK_Client_answer;

typedef struct {

    tbc_MSG_RAID_READY_CHECK_Client_answer* answer;
} tbc_MSG_RAID_READY_CHECK_Client;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_RAID_READY_CHECK_Client_free(tbc_MSG_RAID_READY_CHECK_Client* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_RAID_READY_CHECK_Client_write(WowWorldWriter* writer, const tbc_MSG_RAID_READY_CHECK_Client* object);

typedef struct {
    uint64_t guid;
    uint8_t state;
} tbc_MSG_RAID_READY_CHECK_Server_state_check;

typedef struct {

    tbc_MSG_RAID_READY_CHECK_Server_state_check* state_check;
} tbc_MSG_RAID_READY_CHECK_Server;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_RAID_READY_CHECK_Server_free(tbc_MSG_RAID_READY_CHECK_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_RAID_READY_CHECK_Server_write(WowWorldWriter* writer, const tbc_MSG_RAID_READY_CHECK_Server* object);

typedef struct {
    uint64_t guid;
    tbc_PetTalkReason reason;

} tbc_SMSG_PET_ACTION_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_ACTION_SOUND_write(WowWorldWriter* writer, const tbc_SMSG_PET_ACTION_SOUND* object);

/* Not implemented in any Wrath emulators. */
typedef struct {
    uint32_t sound_id;
    all_Vector3d position;

} tbc_SMSG_PET_DISMISS_SOUND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PET_DISMISS_SOUND_write(WowWorldWriter* writer, const tbc_SMSG_PET_DISMISS_SOUND* object);

typedef struct {
    tbc_GmTicketStatusResponse response;

} tbc_SMSG_GM_TICKET_STATUS_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GM_TICKET_STATUS_UPDATE_write(WowWorldWriter* writer, const tbc_SMSG_GM_TICKET_STATUS_UPDATE* object);

typedef struct {
    tbc_DungeonDifficulty difficulty;

} tbc_MSG_SET_DUNGEON_DIFFICULTY_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_SET_DUNGEON_DIFFICULTY_Client_write(WowWorldWriter* writer, const tbc_MSG_SET_DUNGEON_DIFFICULTY_Client* object);

typedef struct {
    tbc_DungeonDifficulty difficulty;
    /* ArcEmu hardcodes this to 1 */
    uint32_t unknown1;
    bool is_in_group;

} tbc_MSG_SET_DUNGEON_DIFFICULTY_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_SET_DUNGEON_DIFFICULTY_Server_write(WowWorldWriter* writer, const tbc_MSG_SET_DUNGEON_DIFFICULTY_Server* object);

typedef struct {
    /* cmangos: Survey ID: found in GMSurveySurveys.dbc */
    uint32_t survey_id;
    tbc_GmSurveyQuestion questions[10];
    /* cmangos: Answer comment: Unused in stock UI, can be only set by calling Lua function
cmangos: Answer comment max sizes in bytes: Vanilla - 8106:8110, TBC - 11459:11463, Wrath - 582:586 */
    char* answer_comment;

} tbc_CMSG_GMSURVEY_SUBMIT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GMSURVEY_SUBMIT_free(tbc_CMSG_GMSURVEY_SUBMIT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GMSURVEY_SUBMIT_write(WowWorldWriter* writer, const tbc_CMSG_GMSURVEY_SUBMIT* object);

typedef struct {
    bool player_is_saved_to_a_raid;

} tbc_SMSG_UPDATE_INSTANCE_OWNERSHIP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_UPDATE_INSTANCE_OWNERSHIP_write(WowWorldWriter* writer, const tbc_SMSG_UPDATE_INSTANCE_OWNERSHIP* object);

/* Never actually sent in any emulator. */
typedef struct {
    char* player;

} tbc_SMSG_CHAT_PLAYER_AMBIGUOUS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_CHAT_PLAYER_AMBIGUOUS_free(tbc_SMSG_CHAT_PLAYER_AMBIGUOUS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHAT_PLAYER_AMBIGUOUS_write(WowWorldWriter* writer, const tbc_SMSG_CHAT_PLAYER_AMBIGUOUS* object);

typedef struct {
    uint64_t caster;
    uint64_t target;
    uint32_t spell;

} tbc_SMSG_SPELLINSTAKILLLOG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELLINSTAKILLLOG_write(WowWorldWriter* writer, const tbc_SMSG_SPELLINSTAKILLLOG* object);

typedef struct {
    uint64_t caster;
    uint32_t spell;
    uint32_t amount_of_targets;
    uint64_t* targets;

} tbc_SMSG_SPELL_UPDATE_CHAIN_TARGETS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SPELL_UPDATE_CHAIN_TARGETS_free(tbc_SMSG_SPELL_UPDATE_CHAIN_TARGETS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELL_UPDATE_CHAIN_TARGETS_write(WowWorldWriter* writer, const tbc_SMSG_SPELL_UPDATE_CHAIN_TARGETS* object);

typedef struct {
    uint64_t victim;
    uint64_t caster;
    uint32_t spell;
    uint8_t unknown;
    uint32_t amount_of_spell_steals;
    tbc_SpellSteal* spell_steals;

} tbc_SMSG_SPELLSTEALLOG;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SPELLSTEALLOG_free(tbc_SMSG_SPELLSTEALLOG* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPELLSTEALLOG_write(WowWorldWriter* writer, const tbc_SMSG_SPELLSTEALLOG* object);

typedef struct {
    tbc_Area area;
    char* message;

} tbc_SMSG_DEFENSE_MESSAGE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_DEFENSE_MESSAGE_free(tbc_SMSG_DEFENSE_MESSAGE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DEFENSE_MESSAGE_write(WowWorldWriter* writer, const tbc_SMSG_DEFENSE_MESSAGE* object);

typedef struct {
    uint32_t difficulty;
    bool dynamic_difficulty;

} tbc_SMSG_INSTANCE_DIFFICULTY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_INSTANCE_DIFFICULTY_write(WowWorldWriter* writer, const tbc_SMSG_INSTANCE_DIFFICULTY* object);

typedef struct {
    uint32_t amount_of_motds;
    char** motds;

} tbc_SMSG_MOTD;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_MOTD_free(tbc_SMSG_MOTD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOTD_write(WowWorldWriter* writer, const tbc_SMSG_MOTD* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} tbc_SMSG_MOVE_SET_FLIGHT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_SET_FLIGHT_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_SET_FLIGHT* object);

typedef struct {
    uint64_t guid;
    uint32_t counter;

} tbc_SMSG_MOVE_UNSET_FLIGHT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_UNSET_FLIGHT_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_UNSET_FLIGHT* object);

typedef struct {
    uint64_t player;
    uint32_t counter;

} tbc_SMSG_MOVE_SET_CAN_FLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_SET_CAN_FLY_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_SET_CAN_FLY* object);

typedef struct {
    uint64_t player;
    uint32_t counter;

} tbc_SMSG_MOVE_UNSET_CAN_FLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MOVE_UNSET_CAN_FLY_write(WowWorldWriter* writer, const tbc_SMSG_MOVE_UNSET_CAN_FLY* object);

typedef struct {
    uint64_t player;
    uint32_t counter;
    tbc_MovementInfo info;
    bool applied;

} tbc_CMSG_MOVE_SET_CAN_FLY_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_SET_CAN_FLY_ACK_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_SET_CAN_FLY_ACK* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_CMSG_MOVE_SET_FLY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_SET_FLY_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_SET_FLY* object);

typedef struct {
    uint64_t item;
    uint64_t gems[3];

} tbc_CMSG_SOCKET_GEMS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SOCKET_GEMS_write(WowWorldWriter* writer, const tbc_CMSG_SOCKET_GEMS* object);

typedef struct {
    tbc_ArenaTeamCommand command;
    char* team;
    char* player;
    tbc_ArenaTeamCommandError error;

} tbc_SMSG_ARENA_TEAM_COMMAND_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_ARENA_TEAM_COMMAND_RESULT_free(tbc_SMSG_ARENA_TEAM_COMMAND_RESULT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ARENA_TEAM_COMMAND_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_ARENA_TEAM_COMMAND_RESULT* object);

typedef struct {
    uint32_t arena_team;
    char* team_name;
    tbc_ArenaType team_type;
    uint32_t background_color;
    uint32_t emblem_style;
    uint32_t emblem_color;
    uint32_t border_style;
    uint32_t border_color;

} tbc_SMSG_ARENA_TEAM_QUERY_RESPONSE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_ARENA_TEAM_QUERY_RESPONSE_free(tbc_SMSG_ARENA_TEAM_QUERY_RESPONSE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ARENA_TEAM_QUERY_RESPONSE_write(WowWorldWriter* writer, const tbc_SMSG_ARENA_TEAM_QUERY_RESPONSE* object);

typedef struct {
    uint32_t arena_team;

} tbc_CMSG_ARENA_TEAM_ROSTER;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ARENA_TEAM_ROSTER_write(WowWorldWriter* writer, const tbc_CMSG_ARENA_TEAM_ROSTER* object);

typedef struct {
    uint32_t arena_team;
    uint32_t amount_of_members;
    tbc_ArenaType arena_type;
    tbc_ArenaTeamMember* members;

} tbc_SMSG_ARENA_TEAM_ROSTER;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_ARENA_TEAM_ROSTER_free(tbc_SMSG_ARENA_TEAM_ROSTER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ARENA_TEAM_ROSTER_write(WowWorldWriter* writer, const tbc_SMSG_ARENA_TEAM_ROSTER* object);

typedef struct {
    uint32_t arena_team;
    char* player;

} tbc_CMSG_ARENA_TEAM_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_ARENA_TEAM_INVITE_free(tbc_CMSG_ARENA_TEAM_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ARENA_TEAM_INVITE_write(WowWorldWriter* writer, const tbc_CMSG_ARENA_TEAM_INVITE* object);

typedef struct {
    char* player_name;
    char* team_name;

} tbc_SMSG_ARENA_TEAM_INVITE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_ARENA_TEAM_INVITE_free(tbc_SMSG_ARENA_TEAM_INVITE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ARENA_TEAM_INVITE_write(WowWorldWriter* writer, const tbc_SMSG_ARENA_TEAM_INVITE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ARENA_TEAM_ACCEPT_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ARENA_TEAM_DECLINE_write(WowWorldWriter* writer);

typedef struct {
    uint32_t arena_team;

} tbc_CMSG_ARENA_TEAM_LEAVE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ARENA_TEAM_LEAVE_write(WowWorldWriter* writer, const tbc_CMSG_ARENA_TEAM_LEAVE* object);

typedef struct {
    uint32_t arena_team;
    char* player;

} tbc_CMSG_ARENA_TEAM_REMOVE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_ARENA_TEAM_REMOVE_free(tbc_CMSG_ARENA_TEAM_REMOVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ARENA_TEAM_REMOVE_write(WowWorldWriter* writer, const tbc_CMSG_ARENA_TEAM_REMOVE* object);

typedef struct {
    uint32_t arena_team;

} tbc_CMSG_ARENA_TEAM_DISBAND;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ARENA_TEAM_DISBAND_write(WowWorldWriter* writer, const tbc_CMSG_ARENA_TEAM_DISBAND* object);

typedef struct {
    uint32_t arena_team;
    char* player;

} tbc_CMSG_ARENA_TEAM_LEADER;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_ARENA_TEAM_LEADER_free(tbc_CMSG_ARENA_TEAM_LEADER* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ARENA_TEAM_LEADER_write(WowWorldWriter* writer, const tbc_CMSG_ARENA_TEAM_LEADER* object);

typedef struct {
    tbc_ArenaTeamEvent event;
    char* joiner_name;
    char* arena_team_name1;
    uint64_t joiner;
    char* leaver_name;
    uint64_t leaver;
    char* kicked_player_name;
    char* arena_team_name2;
    char* kicker_name;
    char* leader_name;
    char* arena_team_name3;
    char* old_leader;
    char* new_leader;
    uint8_t amount_of_strings;
    char** string;

} tbc_SMSG_ARENA_TEAM_EVENT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_ARENA_TEAM_EVENT_free(tbc_SMSG_ARENA_TEAM_EVENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ARENA_TEAM_EVENT_write(WowWorldWriter* writer, const tbc_SMSG_ARENA_TEAM_EVENT* object);

typedef struct {
    uint64_t battlemaster;
    tbc_JoinArenaType arena_type;
    bool as_group;
    bool rated;

} tbc_CMSG_BATTLEMASTER_JOIN_ARENA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_BATTLEMASTER_JOIN_ARENA_write(WowWorldWriter* writer, const tbc_CMSG_BATTLEMASTER_JOIN_ARENA* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_ASCEND_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_ASCEND_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_ASCEND_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_ASCEND_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_ASCEND_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_ASCEND_Server* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_ASCEND_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_ASCEND_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_ASCEND_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_STOP_ASCEND_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_STOP_ASCEND_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_STOP_ASCEND_Server* object);

typedef struct {
    uint32_t arena_team;
    uint32_t rating;
    uint32_t games_played_this_week;
    uint32_t games_won_this_week;
    uint32_t games_played_this_season;
    uint32_t games_won_this_season;
    uint32_t ranking;

} tbc_SMSG_ARENA_TEAM_STATS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ARENA_TEAM_STATS_write(WowWorldWriter* writer, const tbc_SMSG_ARENA_TEAM_STATS* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LFG_SET_AUTOJOIN_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LFG_CLEAR_AUTOJOIN_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LFM_SET_AUTOFILL_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_LFM_CLEAR_AUTOFILL_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CLEAR_LOOKING_FOR_GROUP_write(WowWorldWriter* writer);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CLEAR_LOOKING_FOR_MORE_write(WowWorldWriter* writer);

typedef struct {
    tbc_LfgData data;

} tbc_CMSG_SET_LOOKING_FOR_MORE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_LOOKING_FOR_MORE_write(WowWorldWriter* writer, const tbc_CMSG_SET_LOOKING_FOR_MORE* object);

typedef struct {
    char* comment;

} tbc_CMSG_SET_LFG_COMMENT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_SET_LFG_COMMENT_free(tbc_CMSG_SET_LFG_COMMENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_LFG_COMMENT_write(WowWorldWriter* writer, const tbc_CMSG_SET_LFG_COMMENT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LFG_LEADER_IS_LFM_write(WowWorldWriter* writer);

typedef struct {
    bool queued;
    bool is_looking_for_group;
    tbc_LfgUpdateLookingForMore looking_for_more;
    tbc_LfgData data;

} tbc_SMSG_LFG_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LFG_UPDATE_write(WowWorldWriter* writer, const tbc_SMSG_LFG_UPDATE* object);

typedef struct {
    tbc_LfgUpdateLookingForMore looking_for_more;
    tbc_LfgData data;

} tbc_SMSG_LFG_UPDATE_LFM;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LFG_UPDATE_LFM_write(WowWorldWriter* writer, const tbc_SMSG_LFG_UPDATE_LFM* object);

typedef struct {
    tbc_LfgData data[3];

} tbc_SMSG_LFG_UPDATE_LFG;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LFG_UPDATE_LFG_write(WowWorldWriter* writer, const tbc_SMSG_LFG_UPDATE_LFG* object);

typedef struct {
    bool queued;

} tbc_SMSG_LFG_UPDATE_QUEUED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LFG_UPDATE_QUEUED_write(WowWorldWriter* writer, const tbc_SMSG_LFG_UPDATE_QUEUED* object);

typedef struct {
    uint32_t title;
    tbc_TitleEarnStatus status;

} tbc_SMSG_TITLE_EARNED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TITLE_EARNED_write(WowWorldWriter* writer, const tbc_SMSG_TITLE_EARNED* object);

typedef struct {
    uint32_t title;

} tbc_CMSG_SET_TITLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_TITLE_write(WowWorldWriter* writer, const tbc_CMSG_SET_TITLE* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CANCEL_MOUNT_AURA_write(WowWorldWriter* writer);

typedef struct {
    uint32_t unknown;
    tbc_ArenaType arena_type;

} tbc_SMSG_ARENA_ERROR;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_ARENA_ERROR_write(WowWorldWriter* writer, const tbc_SMSG_ARENA_ERROR* object);

typedef struct {
    uint64_t player;

} tbc_MSG_INSPECT_ARENA_TEAMS_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_INSPECT_ARENA_TEAMS_Client_write(WowWorldWriter* writer, const tbc_MSG_INSPECT_ARENA_TEAMS_Client* object);

typedef struct {
    uint64_t player;
    uint8_t slot;
    uint32_t arena_team;
    uint32_t rating;
    uint32_t games_played_this_season;
    uint32_t wins_this_season;
    uint32_t total_games_played;
    uint32_t personal_rating;

} tbc_MSG_INSPECT_ARENA_TEAMS_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_INSPECT_ARENA_TEAMS_Server_write(WowWorldWriter* writer, const tbc_MSG_INSPECT_ARENA_TEAMS_Server* object);

typedef struct {
    tbc_Map map;
    all_Vector3d position;

} tbc_SMSG_DEATH_RELEASE_LOC;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DEATH_RELEASE_LOC_write(WowWorldWriter* writer, const tbc_SMSG_DEATH_RELEASE_LOC* object);

typedef struct {
    uint32_t slot;

} tbc_CMSG_CANCEL_TEMP_ENCHANTMENT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CANCEL_TEMP_ENCHANTMENT_write(WowWorldWriter* writer, const tbc_CMSG_CANCEL_TEMP_ENCHANTMENT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCED_DEATH_UPDATE_write(WowWorldWriter* writer);

typedef struct {
    uint64_t player;
    tbc_MovementInfo info;
    float new_speed;

} tbc_MSG_MOVE_SET_FLIGHT_SPEED_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_FLIGHT_SPEED_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_FLIGHT_SPEED_Server* object);

typedef struct {
    uint64_t player;
    tbc_MovementInfo info;
    float new_speed;

} tbc_MSG_MOVE_SET_FLIGHT_BACK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_FLIGHT_BACK_SPEED_cmsg_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_FLIGHT_BACK_SPEED* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_SET_FLIGHT_BACK_SPEED_smsg_write(WowWorldWriter* writer, const tbc_MSG_MOVE_SET_FLIGHT_BACK_SPEED* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} tbc_SMSG_FORCE_FLIGHT_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCE_FLIGHT_SPEED_CHANGE_write(WowWorldWriter* writer, const tbc_SMSG_FORCE_FLIGHT_SPEED_CHANGE* object);

typedef struct {
    uint64_t player;
    uint32_t counter;
    tbc_MovementInfo info;
    float new_speed;

} tbc_CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const tbc_CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    /* cmangos/mangoszero/vmangos: set to 0
cmangos/mangoszero/vmangos: moveEvent, NUM_PMOVE_EVTS = 0x39 */
    uint32_t move_event;
    float speed;

} tbc_SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_write(WowWorldWriter* writer, const tbc_SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE* object);

typedef struct {
    uint64_t player;
    uint32_t counter;
    tbc_MovementInfo info;
    float new_speed;

} tbc_CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK_write(WowWorldWriter* writer, const tbc_CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK* object);

typedef struct {
    uint64_t guid;
    float speed;

} tbc_SMSG_SPLINE_SET_FLIGHT_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_SET_FLIGHT_SPEED_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_SET_FLIGHT_SPEED* object);

typedef struct {
    uint64_t guid;
    float speed;

} tbc_SMSG_SPLINE_SET_FLIGHT_BACK_SPEED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_SET_FLIGHT_BACK_SPEED_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_SET_FLIGHT_BACK_SPEED* object);

typedef struct {
    float elapsed_value;
    uint64_t guid;

} tbc_SMSG_FLIGHT_SPLINE_SYNC;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FLIGHT_SPLINE_SYNC_write(WowWorldWriter* writer, const tbc_SMSG_FLIGHT_SPLINE_SYNC* object);

/* Sent when the client runs `/timetest 1`. */
typedef struct {
    uint8_t mode;

} tbc_CMSG_SET_TAXI_BENCHMARK_MODE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_TAXI_BENCHMARK_MODE_write(WowWorldWriter* writer, const tbc_CMSG_SET_TAXI_BENCHMARK_MODE* object);

typedef struct {
    /* ArcEmu/TrinityCore/mangosthree send realm_id from [CMSG_REALM_SPLIT] back. */
    uint32_t realm_id;
    tbc_RealmSplitState state;
    /* Seems to be slash separated string, like '01/01/01'. */
    char* split_date;

} tbc_SMSG_REALM_SPLIT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_REALM_SPLIT_free(tbc_SMSG_REALM_SPLIT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_REALM_SPLIT_write(WowWorldWriter* writer, const tbc_SMSG_REALM_SPLIT* object);

typedef struct {
    /* Realm ID that was sent earlier by the Auth Server
ArcEmu/TriniyCore/mangosthree send back in [SMSG_REALM_SPLIT]. */
    uint32_t realm_id;

} tbc_CMSG_REALM_SPLIT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_REALM_SPLIT_write(WowWorldWriter* writer, const tbc_CMSG_REALM_SPLIT* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_CMSG_MOVE_CHNG_TRANSPORT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_MOVE_CHNG_TRANSPORT_write(WowWorldWriter* writer, const tbc_CMSG_MOVE_CHNG_TRANSPORT* object);

typedef struct {
    tbc_PartyRole role;
    bool apply;
    uint64_t player;

} tbc_MSG_PARTY_ASSIGNMENT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_PARTY_ASSIGNMENT_Client_write(WowWorldWriter* writer, const tbc_MSG_PARTY_ASSIGNMENT_Client* object);

typedef struct {
    uint32_t time_sync;

} tbc_SMSG_TIME_SYNC_REQ;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TIME_SYNC_REQ_write(WowWorldWriter* writer, const tbc_SMSG_TIME_SYNC_REQ* object);

typedef struct {
    /* Can be used to check if the client is still properly in sync
This should be the same as the counter sent in [SMSG_TIME_SYNC_REQ]. */
    uint32_t time_sync;
    /* You can check this against expected values to estimate client latency */
    uint32_t client_ticks;

} tbc_CMSG_TIME_SYNC_RESP;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TIME_SYNC_RESP_write(WowWorldWriter* writer, const tbc_CMSG_TIME_SYNC_RESP* object);

typedef struct {
    tbc_Map map;

} tbc_SMSG_RESET_FAILED_NOTIFY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_RESET_FAILED_NOTIFY_write(WowWorldWriter* writer, const tbc_SMSG_RESET_FAILED_NOTIFY* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LFG_DISABLED_write(WowWorldWriter* writer);

typedef struct {
    uint64_t target;
    uint8_t combo_points;

} tbc_SMSG_UPDATE_COMBO_POINTS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_UPDATE_COMBO_POINTS_write(WowWorldWriter* writer, const tbc_SMSG_UPDATE_COMBO_POINTS* object);

typedef struct {
    uint8_t slot;
    uint32_t spell;
    uint32_t max_duration;
    uint32_t remaining_duration;
} tbc_SMSG_SET_EXTRA_AURA_INFO_aura;

typedef struct {
    uint64_t unit;

    tbc_SMSG_SET_EXTRA_AURA_INFO_aura* aura;
} tbc_SMSG_SET_EXTRA_AURA_INFO;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SET_EXTRA_AURA_INFO_free(tbc_SMSG_SET_EXTRA_AURA_INFO* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SET_EXTRA_AURA_INFO_write(WowWorldWriter* writer, const tbc_SMSG_SET_EXTRA_AURA_INFO* object);

typedef struct {
    uint64_t unit;
    uint8_t slot;
    uint32_t spell;
    uint32_t max_duration;
    uint32_t remaining_duration;

} tbc_SMSG_SET_EXTRA_AURA_INFO_NEED_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SET_EXTRA_AURA_INFO_NEED_UPDATE_write(WowWorldWriter* writer, const tbc_SMSG_SET_EXTRA_AURA_INFO_NEED_UPDATE* object);

typedef struct {
    uint64_t unit;
    uint32_t spell;

} tbc_SMSG_CLEAR_EXTRA_AURA_INFO;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CLEAR_EXTRA_AURA_INFO_write(WowWorldWriter* writer, const tbc_SMSG_CLEAR_EXTRA_AURA_INFO* object);

typedef struct {
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_DESCEND_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_DESCEND_Client_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_DESCEND_Client* object);

typedef struct {
    uint64_t guid;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_START_DESCEND_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_START_DESCEND_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_START_DESCEND_Server* object);

typedef struct {
    uint64_t player;

} tbc_SMSG_DISMOUNT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_DISMOUNT_write(WowWorldWriter* writer, const tbc_SMSG_DISMOUNT* object);

typedef struct {
    uint64_t player;
    tbc_MovementInfo info;

} tbc_MSG_MOVE_UPDATE_CAN_FLY_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_MOVE_UPDATE_CAN_FLY_Server_write(WowWorldWriter* writer, const tbc_MSG_MOVE_UPDATE_CAN_FLY_Server* object);

typedef struct {
    uint8_t state;
} tbc_MSG_RAID_READY_CHECK_CONFIRM_Client_set;

typedef struct {

    tbc_MSG_RAID_READY_CHECK_CONFIRM_Client_set* set;
} tbc_MSG_RAID_READY_CHECK_CONFIRM_Client;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_RAID_READY_CHECK_CONFIRM_Client_free(tbc_MSG_RAID_READY_CHECK_CONFIRM_Client* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_RAID_READY_CHECK_CONFIRM_Client_write(WowWorldWriter* writer, const tbc_MSG_RAID_READY_CHECK_CONFIRM_Client* object);

typedef struct {
    uint64_t player;
    uint8_t state;

} tbc_MSG_RAID_READY_CHECK_CONFIRM_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_RAID_READY_CHECK_CONFIRM_Server_write(WowWorldWriter* writer, const tbc_MSG_RAID_READY_CHECK_CONFIRM_Server* object);

typedef struct {
    bool voice_enabled;
    bool microphone_enabled;

} tbc_CMSG_VOICE_SESSION_ENABLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_VOICE_SESSION_ENABLE_write(WowWorldWriter* writer, const tbc_CMSG_VOICE_SESSION_ENABLE* object);

typedef struct {
    tbc_ChatType chat_type;
    tbc_Language language;
    char* sender;
    NamedGuid target1;
    char* message1;
    tbc_PlayerChatTag chat_tag1;
    NamedGuid target2;
    char* message2;
    tbc_PlayerChatTag chat_tag2;
    char* channel_name;
    uint64_t target4;
    char* message3;
    tbc_PlayerChatTag chat_tag3;
    uint64_t target5;
    char* message4;
    tbc_PlayerChatTag chat_tag4;
    char* sender_name;

} tbc_SMSG_GM_MESSAGECHAT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GM_MESSAGECHAT_free(tbc_SMSG_GM_MESSAGECHAT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GM_MESSAGECHAT_write(WowWorldWriter* writer, const tbc_SMSG_GM_MESSAGECHAT* object);

typedef struct {
    tbc_CommentatorEnableOption option;

} tbc_CMSG_COMMENTATOR_ENABLE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_COMMENTATOR_ENABLE_write(WowWorldWriter* writer, const tbc_CMSG_COMMENTATOR_ENABLE* object);

typedef struct {
    uint64_t target;

} tbc_SMSG_CLEAR_TARGET;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CLEAR_TARGET_write(WowWorldWriter* writer, const tbc_SMSG_CLEAR_TARGET* object);

typedef struct {
    uint64_t player;
    uint32_t state;
    uint32_t item;

} tbc_SMSG_CROSSED_INEBRIATION_THRESHOLD;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CROSSED_INEBRIATION_THRESHOLD_write(WowWorldWriter* writer, const tbc_SMSG_CROSSED_INEBRIATION_THRESHOLD* object);

/* All that exists of this is an implementation in cmangos-tbc. */
typedef struct {
    uint8_t reason;
    char* text;

} tbc_SMSG_KICK_REASON;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_KICK_REASON_free(tbc_SMSG_KICK_REASON* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_KICK_REASON_write(WowWorldWriter* writer, const tbc_SMSG_KICK_REASON* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_RAID_READY_CHECK_FINISHED_Client_write(WowWorldWriter* writer);

typedef struct {
    tbc_SpamType complaint_type;
    uint64_t offender;
    uint32_t unknown1;
    uint32_t mail_id;
    uint32_t unknown2;
    uint32_t language;
    uint32_t message_type;
    uint32_t channel_id;
    uint32_t time;
    char* description;

} tbc_CMSG_COMPLAIN;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_COMPLAIN_free(tbc_CMSG_COMPLAIN* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_COMPLAIN_write(WowWorldWriter* writer, const tbc_CMSG_COMPLAIN* object);

typedef struct {
    /* All emulators set to 0. */
    uint8_t unknown;
    tbc_ComplainResultWindow window_result;

} tbc_SMSG_COMPLAIN_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_COMPLAIN_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_COMPLAIN_RESULT* object);

typedef struct {
    tbc_ComplaintStatus complaint_status;
    bool voice_chat_enabled;

} tbc_SMSG_FEATURE_SYSTEM_STATUS;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_FEATURE_SYSTEM_STATUS_write(WowWorldWriter* writer, const tbc_SMSG_FEATURE_SYSTEM_STATUS* object);

typedef struct {
    char* channel;

} tbc_CMSG_CHANNEL_DISPLAY_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CHANNEL_DISPLAY_LIST_free(tbc_CMSG_CHANNEL_DISPLAY_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_DISPLAY_LIST_write(WowWorldWriter* writer, const tbc_CMSG_CHANNEL_DISPLAY_LIST* object);

typedef struct {
    uint32_t unknown1;
    char* unknown2;

} tbc_CMSG_SET_ACTIVE_VOICE_CHANNEL;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_SET_ACTIVE_VOICE_CHANNEL_free(tbc_CMSG_SET_ACTIVE_VOICE_CHANNEL* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_ACTIVE_VOICE_CHANNEL_write(WowWorldWriter* writer, const tbc_CMSG_SET_ACTIVE_VOICE_CHANNEL* object);

typedef struct {
    char* channel;

} tbc_CMSG_GET_CHANNEL_MEMBER_COUNT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GET_CHANNEL_MEMBER_COUNT_free(tbc_CMSG_GET_CHANNEL_MEMBER_COUNT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GET_CHANNEL_MEMBER_COUNT_write(WowWorldWriter* writer, const tbc_CMSG_GET_CHANNEL_MEMBER_COUNT* object);

typedef struct {
    char* channel;
    uint8_t flags;
    uint32_t amount_of_members;

} tbc_SMSG_CHANNEL_MEMBER_COUNT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_CHANNEL_MEMBER_COUNT_free(tbc_SMSG_CHANNEL_MEMBER_COUNT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_CHANNEL_MEMBER_COUNT_write(WowWorldWriter* writer, const tbc_SMSG_CHANNEL_MEMBER_COUNT* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CHANNEL_VOICE_ON_write(WowWorldWriter* writer);

typedef struct {
    uint64_t player;

} tbc_CMSG_REPORT_PVP_AFK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_REPORT_PVP_AFK_write(WowWorldWriter* writer, const tbc_CMSG_REPORT_PVP_AFK* object);

typedef struct {
    uint64_t bank;
    bool full_update;

} tbc_CMSG_GUILD_BANKER_ACTIVATE;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_BANKER_ACTIVATE_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_BANKER_ACTIVATE* object);

typedef struct {
    uint64_t bank;
    uint8_t tab;
    bool full_update;

} tbc_CMSG_GUILD_BANK_QUERY_TAB;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_BANK_QUERY_TAB_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_BANK_QUERY_TAB* object);

typedef struct {
    uint64_t bank_balance;
    uint8_t tab_id;
    uint32_t amount_of_allowed_item_withdraws;
    tbc_GuildBankTabResult tab_result;
    uint8_t amount_of_bank_tabs;
    tbc_GuildBankTab* tabs;
    uint8_t amount_of_slot_updates;
    tbc_GuildBankSlot* slot_updates;

} tbc_SMSG_GUILD_BANK_LIST;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_GUILD_BANK_LIST_free(tbc_SMSG_GUILD_BANK_LIST* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_GUILD_BANK_LIST_write(WowWorldWriter* writer, const tbc_SMSG_GUILD_BANK_LIST* object);

typedef struct {
    uint64_t bank;
    tbc_BankSwapSource source;
    uint8_t bank_destination_tab;
    uint8_t bank_destination_slot;
    uint32_t unknown1;
    uint8_t bank_source_tab;
    uint8_t bank_source_slot;
    uint32_t item1;
    uint8_t unknown2;
    uint8_t amount;
    uint8_t bank_tab;
    uint8_t bank_slot;
    uint32_t item2;
    tbc_BankSwapStoreMode mode;
    uint32_t auto_count;
    uint8_t unknown3;
    uint8_t unknown4;
    uint8_t player_bag;
    uint8_t player_bag_slot;
    bool bank_to_character_transfer;
    uint8_t split_amount;
    uint32_t amount_of_unknown5;
    /* cmangos-tbc/mangosone has extra */
    uint8_t* unknown5;

} tbc_CMSG_GUILD_BANK_SWAP_ITEMS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_BANK_SWAP_ITEMS_free(tbc_CMSG_GUILD_BANK_SWAP_ITEMS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_BANK_SWAP_ITEMS_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_BANK_SWAP_ITEMS* object);

typedef struct {
    uint64_t banker;
    uint8_t tab;

} tbc_CMSG_GUILD_BANK_BUY_TAB;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_BANK_BUY_TAB_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_BANK_BUY_TAB* object);

typedef struct {
    uint64_t bank;
    uint8_t tab;
    char* name;
    char* icon;

} tbc_CMSG_GUILD_BANK_UPDATE_TAB;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_GUILD_BANK_UPDATE_TAB_free(tbc_CMSG_GUILD_BANK_UPDATE_TAB* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_BANK_UPDATE_TAB_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_BANK_UPDATE_TAB* object);

typedef struct {
    uint64_t bank;
    uint32_t money;

} tbc_CMSG_GUILD_BANK_DEPOSIT_MONEY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_BANK_DEPOSIT_MONEY_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_BANK_DEPOSIT_MONEY* object);

typedef struct {
    uint64_t bank;
    uint32_t money;

} tbc_CMSG_GUILD_BANK_WITHDRAW_MONEY;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GUILD_BANK_WITHDRAW_MONEY_write(WowWorldWriter* writer, const tbc_CMSG_GUILD_BANK_WITHDRAW_MONEY* object);

typedef struct {
    uint8_t slot;

} tbc_MSG_GUILD_BANK_LOG_QUERY_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_GUILD_BANK_LOG_QUERY_Client_write(WowWorldWriter* writer, const tbc_MSG_GUILD_BANK_LOG_QUERY_Client* object);

typedef struct {
    uint32_t unix_time;
    uint8_t slot;
    uint8_t amount_of_money_logs;
    tbc_MoneyLogItem* money_logs;

} tbc_MSG_GUILD_BANK_LOG_QUERY_Server;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_GUILD_BANK_LOG_QUERY_Server_free(tbc_MSG_GUILD_BANK_LOG_QUERY_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_GUILD_BANK_LOG_QUERY_Server_write(WowWorldWriter* writer, const tbc_MSG_GUILD_BANK_LOG_QUERY_Server* object);

typedef struct {
    char* channel;

} tbc_CMSG_SET_CHANNEL_WATCH;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_SET_CHANNEL_WATCH_free(tbc_CMSG_SET_CHANNEL_WATCH* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_CHANNEL_WATCH_write(WowWorldWriter* writer, const tbc_CMSG_SET_CHANNEL_WATCH* object);

typedef struct {
    uint64_t player;
    uint8_t player_flags;
    uint8_t flags;
    uint32_t amount_of_players;
    char* name;

} tbc_SMSG_USERLIST_ADD;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_USERLIST_ADD_free(tbc_SMSG_USERLIST_ADD* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_USERLIST_ADD_write(WowWorldWriter* writer, const tbc_SMSG_USERLIST_ADD* object);

typedef struct {
    uint64_t player;
    uint8_t flags;
    uint32_t amount_of_players;
    char* name;

} tbc_SMSG_USERLIST_REMOVE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_USERLIST_REMOVE_free(tbc_SMSG_USERLIST_REMOVE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_USERLIST_REMOVE_write(WowWorldWriter* writer, const tbc_SMSG_USERLIST_REMOVE* object);

typedef struct {
    uint64_t player;
    uint8_t player_flags;
    uint8_t flags;
    uint32_t amount_of_players;
    char* name;

} tbc_SMSG_USERLIST_UPDATE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_USERLIST_UPDATE_free(tbc_SMSG_USERLIST_UPDATE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_USERLIST_UPDATE_write(WowWorldWriter* writer, const tbc_SMSG_USERLIST_UPDATE* object);

typedef struct {
    char* channel;

} tbc_CMSG_CLEAR_CHANNEL_WATCH;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_CLEAR_CHANNEL_WATCH_free(tbc_CMSG_CLEAR_CHANNEL_WATCH* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_CLEAR_CHANNEL_WATCH_write(WowWorldWriter* writer, const tbc_CMSG_CLEAR_CHANNEL_WATCH* object);

typedef struct {
    uint64_t player;
    uint32_t amount_of_talent_data;
    uint8_t* talent_data;

} tbc_SMSG_INSPECT_TALENT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_INSPECT_TALENT_free(tbc_SMSG_INSPECT_TALENT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_INSPECT_TALENT_write(WowWorldWriter* writer, const tbc_SMSG_INSPECT_TALENT* object);

typedef struct {
    uint64_t target;

} tbc_CMSG_SPELLCLICK;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SPELLCLICK_write(WowWorldWriter* writer, const tbc_CMSG_SPELLCLICK* object);

typedef struct {
    uint64_t creature;
    uint64_t master_looter;
    uint64_t group_looter;

} tbc_SMSG_LOOT_LIST;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_LOOT_LIST_write(WowWorldWriter* writer, const tbc_SMSG_LOOT_LIST* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_GUILD_PERMISSIONS_Client_write(WowWorldWriter* writer);

typedef struct {
    uint32_t id;
    uint32_t rights;
    uint32_t gold_limit_per_day;
    uint8_t purchased_bank_tabs;
    tbc_BankTab bank_tabs[6];

} tbc_MSG_GUILD_PERMISSIONS_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_GUILD_PERMISSIONS_Server_write(WowWorldWriter* writer, const tbc_MSG_GUILD_PERMISSIONS_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_GUILD_BANK_MONEY_WITHDRAWN_Client_write(WowWorldWriter* writer);

typedef struct {
    uint32_t remaining_withdraw_amount;

} tbc_MSG_GUILD_BANK_MONEY_WITHDRAWN_Server;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_GUILD_BANK_MONEY_WITHDRAWN_Server_write(WowWorldWriter* writer, const tbc_MSG_GUILD_BANK_MONEY_WITHDRAWN_Server* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_GUILD_EVENT_LOG_QUERY_Client_write(WowWorldWriter* writer);

typedef struct {
    uint8_t amount_of_events;
    tbc_GuildLogEvent* events;

} tbc_MSG_GUILD_EVENT_LOG_QUERY_Server;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_GUILD_EVENT_LOG_QUERY_Server_free(tbc_MSG_GUILD_EVENT_LOG_QUERY_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_GUILD_EVENT_LOG_QUERY_Server_write(WowWorldWriter* writer, const tbc_MSG_GUILD_EVENT_LOG_QUERY_Server* object);

typedef struct {
    uint64_t target;

} tbc_CMSG_GET_MIRRORIMAGE_DATA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GET_MIRRORIMAGE_DATA_write(WowWorldWriter* writer, const tbc_CMSG_GET_MIRRORIMAGE_DATA* object);

typedef struct {
    uint64_t guid;
    uint32_t display_id;
    tbc_Race race;
    tbc_Gender gender;
    uint8_t skin_color;
    uint8_t face;
    uint8_t hair_style;
    uint8_t hair_color;
    uint8_t facial_hair;
    uint32_t guild_id;
    /* This array contains the: HEAD, SHOULDERS, BODY, CHEST, WAIST, LEGS, FEET, WRISTS, HANDS, BACK, and TABARD. */
    uint32_t display_ids[11];

} tbc_SMSG_MIRRORIMAGE_DATA;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_MIRRORIMAGE_DATA_write(WowWorldWriter* writer, const tbc_SMSG_MIRRORIMAGE_DATA* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_KEEP_ALIVE_write(WowWorldWriter* writer);

typedef struct {
    bool pass_on_loot;

} tbc_CMSG_OPT_OUT_OF_LOOT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_OPT_OUT_OF_LOOT_write(WowWorldWriter* writer, const tbc_CMSG_OPT_OUT_OF_LOOT* object);

typedef struct {
    uint8_t tab;

} tbc_MSG_QUERY_GUILD_BANK_TEXT_Client;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_QUERY_GUILD_BANK_TEXT_Client_write(WowWorldWriter* writer, const tbc_MSG_QUERY_GUILD_BANK_TEXT_Client* object);

typedef struct {
    uint8_t tab;
    char* text;

} tbc_MSG_QUERY_GUILD_BANK_TEXT_Server;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_MSG_QUERY_GUILD_BANK_TEXT_Server_free(tbc_MSG_QUERY_GUILD_BANK_TEXT_Server* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_MSG_QUERY_GUILD_BANK_TEXT_Server_write(WowWorldWriter* writer, const tbc_MSG_QUERY_GUILD_BANK_TEXT_Server* object);

typedef struct {
    uint8_t tab;
    char* text;

} tbc_CMSG_SET_GUILD_BANK_TEXT;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_SET_GUILD_BANK_TEXT_free(tbc_CMSG_SET_GUILD_BANK_TEXT* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_GUILD_BANK_TEXT_write(WowWorldWriter* writer, const tbc_CMSG_SET_GUILD_BANK_TEXT* object);

typedef struct {
    uint64_t player;

} tbc_CMSG_GRANT_LEVEL;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_GRANT_LEVEL_write(WowWorldWriter* writer, const tbc_CMSG_GRANT_LEVEL* object);

typedef struct {
    uint32_t default_id;
    uint32_t id_override;
    uint32_t fade_in_time;

} tbc_SMSG_OVERRIDE_LIGHT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_OVERRIDE_LIGHT_write(WowWorldWriter* writer, const tbc_SMSG_OVERRIDE_LIGHT* object);

typedef struct {
    uint8_t slot;
    uint64_t totem;
    uint32_t duration;
    uint32_t spell;

} tbc_SMSG_TOTEM_CREATED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_TOTEM_CREATED_write(WowWorldWriter* writer, const tbc_SMSG_TOTEM_CREATED* object);

typedef struct {
    uint8_t slot;

} tbc_CMSG_TOTEM_DESTROYED;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_TOTEM_DESTROYED_write(WowWorldWriter* writer, const tbc_CMSG_TOTEM_DESTROYED* object);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY_write(WowWorldWriter* writer);

typedef struct {
    uint32_t amount_of_statuses;
    tbc_QuestGiverStatusReport* statuses;

} tbc_SMSG_QUESTGIVER_STATUS_MULTIPLE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_QUESTGIVER_STATUS_MULTIPLE_free(tbc_SMSG_QUESTGIVER_STATUS_MULTIPLE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_QUESTGIVER_STATUS_MULTIPLE_write(WowWorldWriter* writer, const tbc_SMSG_QUESTGIVER_STATUS_MULTIPLE* object);

typedef struct {
    uint64_t player;
    char* name;
    char* declined_names[5];

} tbc_CMSG_SET_PLAYER_DECLINED_NAMES;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_CMSG_SET_PLAYER_DECLINED_NAMES_free(tbc_CMSG_SET_PLAYER_DECLINED_NAMES* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_SET_PLAYER_DECLINED_NAMES_write(WowWorldWriter* writer, const tbc_CMSG_SET_PLAYER_DECLINED_NAMES* object);

typedef struct {
    uint32_t result;
    uint64_t guid;

} tbc_SMSG_SET_PLAYER_DECLINED_NAMES_RESULT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SET_PLAYER_DECLINED_NAMES_RESULT_write(WowWorldWriter* writer, const tbc_SMSG_SET_PLAYER_DECLINED_NAMES_RESULT* object);

typedef struct {
    uint32_t amount_of_spells;
    uint32_t* spells;

} tbc_SMSG_SEND_UNLEARN_SPELLS;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_SEND_UNLEARN_SPELLS_free(tbc_SMSG_SEND_UNLEARN_SPELLS* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SEND_UNLEARN_SPELLS_write(WowWorldWriter* writer, const tbc_SMSG_SEND_UNLEARN_SPELLS* object);

typedef struct {
    uint64_t player;

} tbc_SMSG_PROPOSE_LEVEL_GRANT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_PROPOSE_LEVEL_GRANT_write(WowWorldWriter* writer, const tbc_SMSG_PROPOSE_LEVEL_GRANT* object);

typedef struct {
    uint64_t guid;

} tbc_CMSG_ACCEPT_LEVEL_GRANT;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_CMSG_ACCEPT_LEVEL_GRANT_write(WowWorldWriter* writer, const tbc_CMSG_ACCEPT_LEVEL_GRANT* object);

typedef struct {
    tbc_ReferAFriendError error;
    char* target_name;

} tbc_SMSG_REFER_A_FRIEND_FAILURE;
WOW_WORLD_MESSAGES_C_EXPORT void tbc_SMSG_REFER_A_FRIEND_FAILURE_free(tbc_SMSG_REFER_A_FRIEND_FAILURE* object);
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_REFER_A_FRIEND_FAILURE_write(WowWorldWriter* writer, const tbc_SMSG_REFER_A_FRIEND_FAILURE* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_SET_FLYING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_SET_FLYING_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_SET_FLYING* object);

typedef struct {
    uint64_t guid;

} tbc_SMSG_SPLINE_MOVE_UNSET_FLYING;
WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_SMSG_SPLINE_MOVE_UNSET_FLYING_write(WowWorldWriter* writer, const tbc_SMSG_SPLINE_MOVE_UNSET_FLYING* object);

typedef enum {
    T_CMSG_BOOTME = 1,
    T_CMSG_DBLOOKUP = 2,
    T_CMSG_WORLD_TELEPORT = 8,
    T_CMSG_TELEPORT_TO_UNIT = 9,
    T_CMSG_CHAR_CREATE = 54,
    T_CMSG_CHAR_ENUM = 55,
    T_CMSG_CHAR_DELETE = 56,
    T_SMSG_CHAR_CREATE = 58,
    T_SMSG_CHAR_ENUM = 59,
    T_SMSG_CHAR_DELETE = 60,
    T_CMSG_PLAYER_LOGIN = 61,
    T_SMSG_NEW_WORLD = 62,
    T_SMSG_TRANSFER_PENDING = 63,
    T_SMSG_TRANSFER_ABORTED = 64,
    T_SMSG_CHARACTER_LOGIN_FAILED = 65,
    T_SMSG_LOGIN_SETTIMESPEED = 66,
    T_CMSG_PLAYER_LOGOUT = 74,
    T_CMSG_LOGOUT_REQUEST = 75,
    T_SMSG_LOGOUT_RESPONSE = 76,
    T_SMSG_LOGOUT_COMPLETE = 77,
    T_CMSG_LOGOUT_CANCEL = 78,
    T_SMSG_LOGOUT_CANCEL_ACK = 79,
    T_CMSG_NAME_QUERY = 80,
    T_SMSG_NAME_QUERY_RESPONSE = 81,
    T_CMSG_PET_NAME_QUERY = 82,
    T_SMSG_PET_NAME_QUERY_RESPONSE = 83,
    T_CMSG_GUILD_QUERY = 84,
    T_SMSG_GUILD_QUERY_RESPONSE = 85,
    T_CMSG_ITEM_QUERY_SINGLE = 86,
    T_SMSG_ITEM_QUERY_SINGLE_RESPONSE = 88,
    T_CMSG_PAGE_TEXT_QUERY = 90,
    T_SMSG_PAGE_TEXT_QUERY_RESPONSE = 91,
    T_CMSG_QUEST_QUERY = 92,
    T_SMSG_QUEST_QUERY_RESPONSE = 93,
    T_CMSG_GAMEOBJECT_QUERY = 94,
    T_SMSG_GAMEOBJECT_QUERY_RESPONSE = 95,
    T_CMSG_CREATURE_QUERY = 96,
    T_SMSG_CREATURE_QUERY_RESPONSE = 97,
    T_CMSG_WHO = 98,
    T_SMSG_WHO = 99,
    T_CMSG_WHOIS = 100,
    T_SMSG_WHOIS = 101,
    T_CMSG_CONTACT_LIST = 102,
    T_SMSG_CONTACT_LIST = 103,
    T_SMSG_FRIEND_STATUS = 104,
    T_CMSG_ADD_FRIEND = 105,
    T_CMSG_DEL_FRIEND = 106,
    T_CMSG_SET_CONTACT_NOTES = 107,
    T_CMSG_ADD_IGNORE = 108,
    T_CMSG_DEL_IGNORE = 109,
    T_CMSG_GROUP_INVITE = 110,
    T_SMSG_GROUP_INVITE = 111,
    T_CMSG_GROUP_CANCEL = 112,
    T_CMSG_GROUP_ACCEPT = 114,
    T_CMSG_GROUP_DECLINE = 115,
    T_SMSG_GROUP_DECLINE = 116,
    T_CMSG_GROUP_UNINVITE = 117,
    T_CMSG_GROUP_UNINVITE_GUID = 118,
    T_SMSG_GROUP_UNINVITE = 119,
    T_CMSG_GROUP_SET_LEADER = 120,
    T_SMSG_GROUP_SET_LEADER = 121,
    T_CMSG_LOOT_METHOD = 122,
    T_CMSG_GROUP_DISBAND = 123,
    T_SMSG_GROUP_DESTROYED = 124,
    T_SMSG_GROUP_LIST = 125,
    T_SMSG_PARTY_MEMBER_STATS = 126,
    T_SMSG_PARTY_COMMAND_RESULT = 127,
    T_CMSG_GUILD_CREATE = 129,
    T_CMSG_GUILD_INVITE = 130,
    T_SMSG_GUILD_INVITE = 131,
    T_CMSG_GUILD_ACCEPT = 132,
    T_CMSG_GUILD_DECLINE = 133,
    T_SMSG_GUILD_DECLINE = 134,
    T_CMSG_GUILD_INFO = 135,
    T_SMSG_GUILD_INFO = 136,
    T_CMSG_GUILD_ROSTER = 137,
    T_SMSG_GUILD_ROSTER = 138,
    T_CMSG_GUILD_PROMOTE = 139,
    T_CMSG_GUILD_DEMOTE = 140,
    T_CMSG_GUILD_LEAVE = 141,
    T_CMSG_GUILD_REMOVE = 142,
    T_CMSG_GUILD_DISBAND = 143,
    T_CMSG_GUILD_LEADER = 144,
    T_CMSG_GUILD_MOTD = 145,
    T_SMSG_GUILD_EVENT = 146,
    T_SMSG_GUILD_COMMAND_RESULT = 147,
    T_CMSG_MESSAGECHAT = 149,
    T_SMSG_MESSAGECHAT = 150,
    T_CMSG_JOIN_CHANNEL = 151,
    T_CMSG_LEAVE_CHANNEL = 152,
    T_SMSG_CHANNEL_NOTIFY = 153,
    T_CMSG_CHANNEL_LIST = 154,
    T_SMSG_CHANNEL_LIST = 155,
    T_CMSG_CHANNEL_PASSWORD = 156,
    T_CMSG_CHANNEL_SET_OWNER = 157,
    T_CMSG_CHANNEL_OWNER = 158,
    T_CMSG_CHANNEL_MODERATOR = 159,
    T_CMSG_CHANNEL_UNMODERATOR = 160,
    T_CMSG_CHANNEL_MUTE = 161,
    T_CMSG_CHANNEL_UNMUTE = 162,
    T_CMSG_CHANNEL_INVITE = 163,
    T_CMSG_CHANNEL_KICK = 164,
    T_CMSG_CHANNEL_BAN = 165,
    T_CMSG_CHANNEL_UNBAN = 166,
    T_CMSG_CHANNEL_ANNOUNCEMENTS = 167,
    T_CMSG_CHANNEL_MODERATE = 168,
    T_SMSG_UPDATE_OBJECT = 169,
    T_SMSG_DESTROY_OBJECT = 170,
    T_CMSG_USE_ITEM = 171,
    T_CMSG_OPEN_ITEM = 172,
    T_CMSG_READ_ITEM = 173,
    T_SMSG_READ_ITEM_OK = 174,
    T_SMSG_READ_ITEM_FAILED = 175,
    T_SMSG_ITEM_COOLDOWN = 176,
    T_CMSG_GAMEOBJ_USE = 177,
    T_SMSG_GAMEOBJECT_CUSTOM_ANIM = 179,
    T_CMSG_AREATRIGGER = 180,
    T_MSG_MOVE_START_FORWARD = 181,
    T_MSG_MOVE_START_BACKWARD = 182,
    T_MSG_MOVE_STOP = 183,
    T_MSG_MOVE_START_STRAFE_LEFT = 184,
    T_MSG_MOVE_START_STRAFE_RIGHT = 185,
    T_MSG_MOVE_STOP_STRAFE = 186,
    T_MSG_MOVE_JUMP = 187,
    T_MSG_MOVE_START_TURN_LEFT = 188,
    T_MSG_MOVE_START_TURN_RIGHT = 189,
    T_MSG_MOVE_STOP_TURN = 190,
    T_MSG_MOVE_START_PITCH_UP = 191,
    T_MSG_MOVE_START_PITCH_DOWN = 192,
    T_MSG_MOVE_STOP_PITCH = 193,
    T_MSG_MOVE_SET_RUN_MODE = 194,
    T_MSG_MOVE_SET_WALK_MODE = 195,
    T_MSG_MOVE_TELEPORT = 197,
    T_MSG_MOVE_TELEPORT_CHEAT = 198,
    T_MSG_MOVE_TELEPORT_ACK = 199,
    T_MSG_MOVE_FALL_LAND = 201,
    T_MSG_MOVE_START_SWIM = 202,
    T_MSG_MOVE_STOP_SWIM = 203,
    T_MSG_MOVE_SET_FACING = 218,
    T_MSG_MOVE_SET_PITCH = 219,
    T_MSG_MOVE_WORLDPORT_ACK = 220,
    T_SMSG_MONSTER_MOVE = 221,
    T_SMSG_MOVE_WATER_WALK = 222,
    T_SMSG_MOVE_LAND_WALK = 223,
    T_CMSG_MOVE_SET_RAW_POSITION = 225,
    T_SMSG_FORCE_RUN_SPEED_CHANGE = 226,
    T_CMSG_FORCE_RUN_SPEED_CHANGE_ACK = 227,
    T_SMSG_FORCE_RUN_BACK_SPEED_CHANGE = 228,
    T_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK = 229,
    T_SMSG_FORCE_SWIM_SPEED_CHANGE = 230,
    T_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK = 231,
    T_SMSG_FORCE_MOVE_ROOT = 232,
    T_CMSG_FORCE_MOVE_ROOT_ACK = 233,
    T_SMSG_FORCE_MOVE_UNROOT = 234,
    T_CMSG_FORCE_MOVE_UNROOT_ACK = 235,
    T_MSG_MOVE_ROOT = 236,
    T_MSG_MOVE_UNROOT = 237,
    T_MSG_MOVE_HEARTBEAT = 238,
    T_SMSG_MOVE_KNOCK_BACK = 239,
    T_CMSG_MOVE_KNOCK_BACK_ACK = 240,
    T_MSG_MOVE_KNOCK_BACK = 241,
    T_SMSG_MOVE_FEATHER_FALL = 242,
    T_SMSG_MOVE_NORMAL_FALL = 243,
    T_SMSG_MOVE_SET_HOVER = 244,
    T_SMSG_MOVE_UNSET_HOVER = 245,
    T_CMSG_MOVE_HOVER_ACK = 246,
    T_MSG_MOVE_HOVER = 247,
    T_SMSG_TRIGGER_CINEMATIC = 250,
    T_CMSG_NEXT_CINEMATIC_CAMERA = 251,
    T_CMSG_COMPLETE_CINEMATIC = 252,
    T_SMSG_TUTORIAL_FLAGS = 253,
    T_CMSG_TUTORIAL_FLAG = 254,
    T_CMSG_TUTORIAL_CLEAR = 255,
    T_CMSG_TUTORIAL_RESET = 256,
    T_CMSG_STANDSTATECHANGE = 257,
    T_CMSG_EMOTE = 258,
    T_SMSG_EMOTE = 259,
    T_CMSG_TEXT_EMOTE = 260,
    T_SMSG_TEXT_EMOTE = 261,
    T_CMSG_AUTOSTORE_LOOT_ITEM = 264,
    T_CMSG_AUTOEQUIP_ITEM = 266,
    T_CMSG_AUTOSTORE_BAG_ITEM = 267,
    T_CMSG_SWAP_ITEM = 268,
    T_CMSG_SWAP_INV_ITEM = 269,
    T_CMSG_SPLIT_ITEM = 270,
    T_CMSG_AUTOEQUIP_ITEM_SLOT = 271,
    T_CMSG_DESTROYITEM = 273,
    T_SMSG_INVENTORY_CHANGE_FAILURE = 274,
    T_CMSG_INSPECT = 276,
    T_CMSG_INITIATE_TRADE = 278,
    T_CMSG_BEGIN_TRADE = 279,
    T_CMSG_BUSY_TRADE = 280,
    T_CMSG_IGNORE_TRADE = 281,
    T_CMSG_ACCEPT_TRADE = 282,
    T_CMSG_UNACCEPT_TRADE = 283,
    T_CMSG_CANCEL_TRADE = 284,
    T_CMSG_SET_TRADE_ITEM = 285,
    T_CMSG_CLEAR_TRADE_ITEM = 286,
    T_CMSG_SET_TRADE_GOLD = 287,
    T_SMSG_TRADE_STATUS = 288,
    T_SMSG_TRADE_STATUS_EXTENDED = 289,
    T_SMSG_INITIALIZE_FACTIONS = 290,
    T_SMSG_SET_FACTION_VISIBLE = 291,
    T_SMSG_SET_FACTION_STANDING = 292,
    T_CMSG_SET_FACTION_ATWAR = 293,
    T_SMSG_SET_PROFICIENCY = 295,
    T_CMSG_SET_ACTION_BUTTON = 296,
    T_SMSG_ACTION_BUTTONS = 297,
    T_SMSG_INITIAL_SPELLS = 298,
    T_SMSG_LEARNED_SPELL = 299,
    T_SMSG_SUPERCEDED_SPELL = 300,
    T_CMSG_CAST_SPELL = 302,
    T_CMSG_CANCEL_CAST = 303,
    T_SMSG_CAST_FAILED = 304,
    T_SMSG_SPELL_START = 305,
    T_SMSG_SPELL_GO = 306,
    T_SMSG_SPELL_FAILURE = 307,
    T_SMSG_SPELL_COOLDOWN = 308,
    T_SMSG_COOLDOWN_EVENT = 309,
    T_CMSG_CANCEL_AURA = 310,
    T_SMSG_UPDATE_AURA_DURATION = 311,
    T_SMSG_PET_CAST_FAILED = 312,
    T_MSG_CHANNEL_START = 313,
    T_MSG_CHANNEL_UPDATE = 314,
    T_CMSG_CANCEL_CHANNELLING = 315,
    T_SMSG_AI_REACTION = 316,
    T_CMSG_SET_SELECTION = 317,
    T_CMSG_SET_TARGET_OBSOLETE = 318,
    T_CMSG_ATTACKSWING = 321,
    T_CMSG_ATTACKSTOP = 322,
    T_SMSG_ATTACKSTART = 323,
    T_SMSG_ATTACKSTOP = 324,
    T_SMSG_ATTACKSWING_NOTINRANGE = 325,
    T_SMSG_ATTACKSWING_BADFACING = 326,
    T_SMSG_ATTACKSWING_NOTSTANDING = 327,
    T_SMSG_ATTACKSWING_DEADTARGET = 328,
    T_SMSG_ATTACKSWING_CANT_ATTACK = 329,
    T_SMSG_ATTACKERSTATEUPDATE = 330,
    T_SMSG_CANCEL_COMBAT = 334,
    T_SMSG_SPELLHEALLOG = 336,
    T_SMSG_SPELLENERGIZELOG = 337,
    T_SMSG_BINDPOINTUPDATE = 341,
    T_SMSG_PLAYERBOUND = 344,
    T_SMSG_CLIENT_CONTROL_UPDATE = 345,
    T_CMSG_REPOP_REQUEST = 346,
    T_SMSG_RESURRECT_REQUEST = 347,
    T_CMSG_RESURRECT_RESPONSE = 348,
    T_CMSG_LOOT = 349,
    T_CMSG_LOOT_MONEY = 350,
    T_CMSG_LOOT_RELEASE = 351,
    T_SMSG_LOOT_RESPONSE = 352,
    T_SMSG_LOOT_RELEASE_RESPONSE = 353,
    T_SMSG_LOOT_REMOVED = 354,
    T_SMSG_LOOT_MONEY_NOTIFY = 355,
    T_SMSG_LOOT_CLEAR_MONEY = 357,
    T_SMSG_ITEM_PUSH_RESULT = 358,
    T_SMSG_DUEL_REQUESTED = 359,
    T_SMSG_DUEL_OUTOFBOUNDS = 360,
    T_SMSG_DUEL_INBOUNDS = 361,
    T_SMSG_DUEL_COMPLETE = 362,
    T_SMSG_DUEL_WINNER = 363,
    T_CMSG_DUEL_ACCEPTED = 364,
    T_CMSG_DUEL_CANCELLED = 365,
    T_SMSG_MOUNTRESULT = 366,
    T_CMSG_MOUNTSPECIAL_ANIM = 369,
    T_SMSG_MOUNTSPECIAL_ANIM = 370,
    T_SMSG_PET_TAME_FAILURE = 371,
    T_CMSG_PET_SET_ACTION = 372,
    T_CMSG_PET_ACTION = 373,
    T_CMSG_PET_ABANDON = 374,
    T_CMSG_PET_RENAME = 375,
    T_SMSG_PET_NAME_INVALID = 376,
    T_SMSG_PET_SPELLS = 377,
    T_SMSG_PET_MODE = 378,
    T_CMSG_GOSSIP_HELLO = 379,
    T_CMSG_GOSSIP_SELECT_OPTION = 380,
    T_SMSG_GOSSIP_MESSAGE = 381,
    T_SMSG_GOSSIP_COMPLETE = 382,
    T_CMSG_NPC_TEXT_QUERY = 383,
    T_SMSG_NPC_TEXT_UPDATE = 384,
    T_CMSG_QUESTGIVER_STATUS_QUERY = 386,
    T_SMSG_QUESTGIVER_STATUS = 387,
    T_CMSG_QUESTGIVER_HELLO = 388,
    T_SMSG_QUESTGIVER_QUEST_LIST = 389,
    T_CMSG_QUESTGIVER_QUERY_QUEST = 390,
    T_CMSG_QUESTGIVER_QUEST_AUTOLAUNCH = 391,
    T_SMSG_QUESTGIVER_QUEST_DETAILS = 392,
    T_CMSG_QUESTGIVER_ACCEPT_QUEST = 393,
    T_CMSG_QUESTGIVER_COMPLETE_QUEST = 394,
    T_SMSG_QUESTGIVER_REQUEST_ITEMS = 395,
    T_CMSG_QUESTGIVER_REQUEST_REWARD = 396,
    T_SMSG_QUESTGIVER_OFFER_REWARD = 397,
    T_CMSG_QUESTGIVER_CHOOSE_REWARD = 398,
    T_SMSG_QUESTGIVER_QUEST_INVALID = 399,
    T_CMSG_QUESTGIVER_CANCEL = 400,
    T_SMSG_QUESTGIVER_QUEST_COMPLETE = 401,
    T_SMSG_QUESTGIVER_QUEST_FAILED = 402,
    T_CMSG_QUESTLOG_SWAP_QUEST = 403,
    T_CMSG_QUESTLOG_REMOVE_QUEST = 404,
    T_SMSG_QUESTLOG_FULL = 405,
    T_SMSG_QUESTUPDATE_FAILED = 406,
    T_SMSG_QUESTUPDATE_FAILEDTIMER = 407,
    T_SMSG_QUESTUPDATE_COMPLETE = 408,
    T_SMSG_QUESTUPDATE_ADD_KILL = 409,
    T_SMSG_QUESTUPDATE_ADD_ITEM = 410,
    T_CMSG_QUEST_CONFIRM_ACCEPT = 411,
    T_SMSG_QUEST_CONFIRM_ACCEPT = 412,
    T_CMSG_PUSHQUESTTOPARTY = 413,
    T_CMSG_LIST_INVENTORY = 414,
    T_SMSG_LIST_INVENTORY = 415,
    T_CMSG_SELL_ITEM = 416,
    T_SMSG_SELL_ITEM = 417,
    T_CMSG_BUY_ITEM = 418,
    T_CMSG_BUY_ITEM_IN_SLOT = 419,
    T_SMSG_BUY_ITEM = 420,
    T_SMSG_BUY_FAILED = 421,
    T_SMSG_SHOWTAXINODES = 425,
    T_CMSG_TAXINODE_STATUS_QUERY = 426,
    T_SMSG_TAXINODE_STATUS = 427,
    T_CMSG_TAXIQUERYAVAILABLENODES = 428,
    T_CMSG_ACTIVATETAXI = 429,
    T_SMSG_ACTIVATETAXIREPLY = 430,
    T_SMSG_NEW_TAXI_PATH = 431,
    T_CMSG_TRAINER_LIST = 432,
    T_SMSG_TRAINER_LIST = 433,
    T_CMSG_TRAINER_BUY_SPELL = 434,
    T_SMSG_TRAINER_BUY_SUCCEEDED = 435,
    T_SMSG_TRAINER_BUY_FAILED = 436,
    T_CMSG_BINDER_ACTIVATE = 437,
    T_CMSG_BANKER_ACTIVATE = 439,
    T_SMSG_SHOW_BANK = 440,
    T_CMSG_BUY_BANK_SLOT = 441,
    T_SMSG_BUY_BANK_SLOT_RESULT = 442,
    T_CMSG_PETITION_SHOWLIST = 443,
    T_SMSG_PETITION_SHOWLIST = 444,
    T_CMSG_PETITION_BUY = 445,
    T_CMSG_PETITION_SHOW_SIGNATURES = 446,
    T_SMSG_PETITION_SHOW_SIGNATURES = 447,
    T_CMSG_PETITION_SIGN = 448,
    T_SMSG_PETITION_SIGN_RESULTS = 449,
    T_MSG_PETITION_DECLINE = 450,
    T_CMSG_OFFER_PETITION = 451,
    T_CMSG_TURN_IN_PETITION = 452,
    T_SMSG_TURN_IN_PETITION_RESULTS = 453,
    T_CMSG_PETITION_QUERY = 454,
    T_SMSG_PETITION_QUERY_RESPONSE = 455,
    T_SMSG_FISH_NOT_HOOKED = 456,
    T_SMSG_FISH_ESCAPED = 457,
    T_CMSG_BUG = 458,
    T_SMSG_NOTIFICATION = 459,
    T_CMSG_PLAYED_TIME = 460,
    T_SMSG_PLAYED_TIME = 461,
    T_CMSG_QUERY_TIME = 462,
    T_SMSG_QUERY_TIME_RESPONSE = 463,
    T_SMSG_LOG_XPGAIN = 464,
    T_CMSG_RECLAIM_CORPSE = 466,
    T_CMSG_WRAP_ITEM = 467,
    T_SMSG_LEVELUP_INFO = 468,
    T_MSG_MINIMAP_PING = 469,
    T_SMSG_ENCHANTMENTLOG = 471,
    T_SMSG_START_MIRROR_TIMER = 473,
    T_SMSG_PAUSE_MIRROR_TIMER = 474,
    T_SMSG_STOP_MIRROR_TIMER = 475,
    T_CMSG_PING = 476,
    T_SMSG_PONG = 477,
    T_SMSG_CLEAR_COOLDOWN = 478,
    T_SMSG_GAMEOBJECT_PAGETEXT = 479,
    T_CMSG_SETSHEATHED = 480,
    T_SMSG_SPELL_DELAYED = 482,
    T_SMSG_ITEM_TIME_UPDATE = 490,
    T_SMSG_ITEM_ENCHANT_TIME_UPDATE = 491,
    T_SMSG_AUTH_CHALLENGE = 492,
    T_CMSG_AUTH_SESSION = 493,
    T_SMSG_AUTH_RESPONSE = 494,
    T_CMSG_PET_CAST_SPELL = 496,
    T_MSG_SAVE_GUILD_EMBLEM = 497,
    T_MSG_TABARDVENDOR_ACTIVATE = 498,
    T_SMSG_PLAY_SPELL_VISUAL = 499,
    T_CMSG_ZONEUPDATE = 500,
    T_SMSG_PARTYKILLLOG = 501,
    T_SMSG_COMPRESSED_UPDATE_OBJECT = 502,
    T_SMSG_PLAY_SPELL_IMPACT = 503,
    T_SMSG_EXPLORATION_EXPERIENCE = 504,
    T_MSG_RANDOM_ROLL = 507,
    T_SMSG_ENVIRONMENTAL_DAMAGE_LOG = 508,
    T_MSG_LOOKING_FOR_GROUP = 511,
    T_CMSG_SET_LOOKING_FOR_GROUP = 512,
    T_CMSG_UNLEARN_SKILL = 514,
    T_SMSG_REMOVED_SPELL = 515,
    T_CMSG_GMTICKET_CREATE = 517,
    T_SMSG_GMTICKET_CREATE = 518,
    T_CMSG_GMTICKET_UPDATETEXT = 519,
    T_SMSG_GMTICKET_UPDATETEXT = 520,
    T_SMSG_ACCOUNT_DATA_TIMES = 521,
    T_CMSG_REQUEST_ACCOUNT_DATA = 522,
    T_CMSG_UPDATE_ACCOUNT_DATA = 523,
    T_SMSG_UPDATE_ACCOUNT_DATA = 524,
    T_CMSG_GMTICKET_GETTICKET = 529,
    T_SMSG_GMTICKET_GETTICKET = 530,
    T_CMSG_UNLEARN_TALENTS = 531,
    T_SMSG_GAMEOBJECT_SPAWN_ANIM = 532,
    T_SMSG_GAMEOBJECT_DESPAWN_ANIM = 533,
    T_MSG_CORPSE_QUERY = 534,
    T_CMSG_GMTICKET_DELETETICKET = 535,
    T_SMSG_GMTICKET_DELETETICKET = 536,
    T_SMSG_CHAT_WRONG_FACTION = 537,
    T_CMSG_GMTICKET_SYSTEMSTATUS = 538,
    T_SMSG_GMTICKET_SYSTEMSTATUS = 539,
    T_CMSG_SPIRIT_HEALER_ACTIVATE = 540,
    T_SMSG_SET_REST_START = 542,
    T_SMSG_SPIRIT_HEALER_CONFIRM = 546,
    T_SMSG_GOSSIP_POI = 548,
    T_CMSG_CHAT_IGNORED = 549,
    T_CMSG_GUILD_RANK = 561,
    T_CMSG_GUILD_ADD_RANK = 562,
    T_CMSG_GUILD_DEL_RANK = 563,
    T_CMSG_GUILD_SET_PUBLIC_NOTE = 564,
    T_CMSG_GUILD_SET_OFFICER_NOTE = 565,
    T_SMSG_LOGIN_VERIFY_WORLD = 566,
    T_CMSG_SEND_MAIL = 568,
    T_SMSG_SEND_MAIL_RESULT = 569,
    T_CMSG_GET_MAIL_LIST = 570,
    T_SMSG_MAIL_LIST_RESULT = 571,
    T_CMSG_BATTLEFIELD_LIST = 572,
    T_SMSG_BATTLEFIELD_LIST = 573,
    T_CMSG_ITEM_TEXT_QUERY = 579,
    T_SMSG_ITEM_TEXT_QUERY_RESPONSE = 580,
    T_CMSG_MAIL_TAKE_MONEY = 581,
    T_CMSG_MAIL_TAKE_ITEM = 582,
    T_CMSG_MAIL_MARK_AS_READ = 583,
    T_CMSG_MAIL_RETURN_TO_SENDER = 584,
    T_CMSG_MAIL_DELETE = 585,
    T_CMSG_MAIL_CREATE_TEXT_ITEM = 586,
    T_SMSG_SPELLLOGMISS = 587,
    T_SMSG_SPELLLOGEXECUTE = 588,
    T_SMSG_PERIODICAURALOG = 590,
    T_SMSG_SPELLDAMAGESHIELD = 591,
    T_SMSG_SPELLNONMELEEDAMAGELOG = 592,
    T_CMSG_LEARN_TALENT = 593,
    T_SMSG_RESURRECT_FAILED = 594,
    T_CMSG_TOGGLE_PVP = 595,
    T_SMSG_ZONE_UNDER_ATTACK = 596,
    T_MSG_AUCTION_HELLO = 597,
    T_CMSG_AUCTION_SELL_ITEM = 598,
    T_CMSG_AUCTION_REMOVE_ITEM = 599,
    T_CMSG_AUCTION_LIST_ITEMS = 600,
    T_CMSG_AUCTION_LIST_OWNER_ITEMS = 601,
    T_CMSG_AUCTION_PLACE_BID = 602,
    T_SMSG_AUCTION_COMMAND_RESULT = 603,
    T_SMSG_AUCTION_LIST_RESULT = 604,
    T_SMSG_AUCTION_OWNER_LIST_RESULT = 605,
    T_SMSG_AUCTION_BIDDER_NOTIFICATION = 606,
    T_SMSG_AUCTION_OWNER_NOTIFICATION = 607,
    T_SMSG_PROCRESIST = 608,
    T_SMSG_DISPEL_FAILED = 610,
    T_SMSG_SPELLORDAMAGE_IMMUNE = 611,
    T_CMSG_AUCTION_LIST_BIDDER_ITEMS = 612,
    T_SMSG_AUCTION_BIDDER_LIST_RESULT = 613,
    T_SMSG_SET_FLAT_SPELL_MODIFIER = 614,
    T_SMSG_SET_PCT_SPELL_MODIFIER = 615,
    T_CMSG_SET_AMMO = 616,
    T_SMSG_CORPSE_RECLAIM_DELAY = 617,
    T_CMSG_SET_ACTIVE_MOVER = 618,
    T_CMSG_PET_CANCEL_AURA = 619,
    T_CMSG_CANCEL_AUTO_REPEAT_SPELL = 621,
    T_MSG_LIST_STABLED_PETS = 623,
    T_CMSG_STABLE_PET = 624,
    T_CMSG_UNSTABLE_PET = 625,
    T_CMSG_BUY_STABLE_SLOT = 626,
    T_SMSG_STABLE_RESULT = 627,
    T_CMSG_STABLE_SWAP_PET = 629,
    T_MSG_QUEST_PUSH_RESULT = 630,
    T_SMSG_PLAY_MUSIC = 631,
    T_SMSG_PLAY_OBJECT_SOUND = 632,
    T_CMSG_REQUEST_PET_INFO = 633,
    T_CMSG_FAR_SIGHT = 634,
    T_SMSG_SPELLDISPELLOG = 635,
    T_CMSG_GROUP_CHANGE_SUB_GROUP = 638,
    T_CMSG_REQUEST_PARTY_MEMBER_STATS = 639,
    T_CMSG_GROUP_SWAP_SUB_GROUP = 640,
    T_CMSG_AUTOSTORE_BANK_ITEM = 642,
    T_CMSG_AUTOBANK_ITEM = 643,
    T_MSG_QUERY_NEXT_MAIL_TIME = 644,
    T_SMSG_RECEIVED_MAIL = 645,
    T_SMSG_RAID_GROUP_ONLY = 646,
    T_SMSG_PVP_CREDIT = 652,
    T_SMSG_AUCTION_REMOVED_NOTIFICATION = 653,
    T_CMSG_GROUP_RAID_CONVERT = 654,
    T_CMSG_GROUP_ASSISTANT_LEADER = 655,
    T_CMSG_BUYBACK_ITEM = 656,
    T_SMSG_SERVER_MESSAGE = 657,
    T_SMSG_MEETINGSTONE_SETQUEUE = 661,
    T_CMSG_MEETINGSTONE_INFO = 662,
    T_CMSG_GMTICKETSYSTEM_TOGGLE = 666,
    T_CMSG_CANCEL_GROWTH_AURA = 667,
    T_SMSG_CANCEL_AUTO_REPEAT = 668,
    T_SMSG_STANDSTATE_UPDATE = 669,
    T_SMSG_LOOT_ALL_PASSED = 670,
    T_SMSG_LOOT_ROLL_WON = 671,
    T_CMSG_LOOT_ROLL = 672,
    T_SMSG_LOOT_START_ROLL = 673,
    T_SMSG_LOOT_ROLL = 674,
    T_CMSG_LOOT_MASTER_GIVE = 675,
    T_SMSG_LOOT_MASTER_LIST = 676,
    T_SMSG_SET_FORCED_REACTIONS = 677,
    T_SMSG_SPELL_FAILED_OTHER = 678,
    T_CMSG_REPAIR_ITEM = 680,
    T_SMSG_CHAT_PLAYER_NOT_FOUND = 681,
    T_MSG_TALENT_WIPE_CONFIRM = 682,
    T_SMSG_SUMMON_REQUEST = 683,
    T_CMSG_SUMMON_RESPONSE = 684,
    T_SMSG_MONSTER_MOVE_TRANSPORT = 686,
    T_SMSG_PET_BROKEN = 687,
    T_MSG_MOVE_FEATHER_FALL = 688,
    T_MSG_MOVE_WATER_WALK = 689,
    T_CMSG_SELF_RES = 691,
    T_SMSG_FEIGN_DEATH_RESISTED = 692,
    T_SMSG_DUEL_COUNTDOWN = 695,
    T_SMSG_AREA_TRIGGER_MESSAGE = 696,
    T_CMSG_TOGGLE_HELM = 697,
    T_CMSG_TOGGLE_CLOAK = 698,
    T_SMSG_PLAYER_SKINNED = 700,
    T_SMSG_DURABILITY_DAMAGE_DEATH = 701,
    T_CMSG_SET_ACTIONBAR_TOGGLES = 703,
    T_MSG_PETITION_RENAME = 705,
    T_SMSG_INIT_WORLD_STATES = 706,
    T_SMSG_UPDATE_WORLD_STATE = 707,
    T_CMSG_ITEM_NAME_QUERY = 708,
    T_SMSG_ITEM_NAME_QUERY_RESPONSE = 709,
    T_SMSG_PET_ACTION_FEEDBACK = 710,
    T_CMSG_CHAR_RENAME = 711,
    T_SMSG_CHAR_RENAME = 712,
    T_CMSG_MOVE_SPLINE_DONE = 713,
    T_CMSG_MOVE_FALL_RESET = 714,
    T_SMSG_INSTANCE_SAVE_CREATED = 715,
    T_SMSG_RAID_INSTANCE_INFO = 716,
    T_CMSG_REQUEST_RAID_INFO = 717,
    T_CMSG_MOVE_TIME_SKIPPED = 718,
    T_CMSG_MOVE_FEATHER_FALL_ACK = 719,
    T_CMSG_MOVE_WATER_WALK_ACK = 720,
    T_CMSG_MOVE_NOT_ACTIVE_MOVER = 721,
    T_SMSG_PLAY_SOUND = 722,
    T_CMSG_BATTLEFIELD_STATUS = 723,
    T_SMSG_BATTLEFIELD_STATUS = 724,
    T_CMSG_BATTLEFIELD_PORT = 725,
    T_MSG_INSPECT_HONOR_STATS = 726,
    T_CMSG_BATTLEMASTER_HELLO = 727,
    T_SMSG_FORCE_WALK_SPEED_CHANGE = 730,
    T_CMSG_FORCE_WALK_SPEED_CHANGE_ACK = 731,
    T_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE = 732,
    T_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK = 733,
    T_SMSG_FORCE_TURN_RATE_CHANGE = 734,
    T_CMSG_FORCE_TURN_RATE_CHANGE_ACK = 735,
    T_MSG_PVP_LOG_DATA = 736,
    T_CMSG_LEAVE_BATTLEFIELD = 737,
    T_CMSG_AREA_SPIRIT_HEALER_QUERY = 738,
    T_CMSG_AREA_SPIRIT_HEALER_QUEUE = 739,
    T_SMSG_AREA_SPIRIT_HEALER_TIME = 740,
    T_SMSG_WARDEN_DATA = 742,
    T_CMSG_WARDEN_DATA = 743,
    T_SMSG_GROUP_JOINED_BATTLEGROUND = 744,
    T_MSG_BATTLEGROUND_PLAYER_POSITIONS = 745,
    T_CMSG_PET_STOP_ATTACK = 746,
    T_SMSG_BINDER_CONFIRM = 747,
    T_SMSG_BATTLEGROUND_PLAYER_JOINED = 748,
    T_SMSG_BATTLEGROUND_PLAYER_LEFT = 749,
    T_CMSG_BATTLEMASTER_JOIN = 750,
    T_SMSG_ADDON_INFO = 751,
    T_CMSG_PET_UNLEARN = 752,
    T_SMSG_PET_UNLEARN_CONFIRM = 753,
    T_SMSG_PARTY_MEMBER_STATS_FULL = 754,
    T_CMSG_PET_SPELL_AUTOCAST = 755,
    T_SMSG_WEATHER = 756,
    T_SMSG_RAID_INSTANCE_MESSAGE = 762,
    T_CMSG_GUILD_INFO_TEXT = 764,
    T_SMSG_CHAT_RESTRICTED = 765,
    T_SMSG_SPLINE_SET_RUN_SPEED = 766,
    T_SMSG_SPLINE_SET_RUN_BACK_SPEED = 767,
    T_SMSG_SPLINE_SET_SWIM_SPEED = 768,
    T_SMSG_SPLINE_SET_WALK_SPEED = 769,
    T_SMSG_SPLINE_SET_SWIM_BACK_SPEED = 770,
    T_SMSG_SPLINE_SET_TURN_RATE = 771,
    T_SMSG_SPLINE_MOVE_UNROOT = 772,
    T_SMSG_SPLINE_MOVE_FEATHER_FALL = 773,
    T_SMSG_SPLINE_MOVE_NORMAL_FALL = 774,
    T_SMSG_SPLINE_MOVE_SET_HOVER = 775,
    T_SMSG_SPLINE_MOVE_UNSET_HOVER = 776,
    T_SMSG_SPLINE_MOVE_WATER_WALK = 777,
    T_SMSG_SPLINE_MOVE_LAND_WALK = 778,
    T_SMSG_SPLINE_MOVE_START_SWIM = 779,
    T_SMSG_SPLINE_MOVE_STOP_SWIM = 780,
    T_SMSG_SPLINE_MOVE_SET_RUN_MODE = 781,
    T_SMSG_SPLINE_MOVE_SET_WALK_MODE = 782,
    T_CMSG_ACTIVATETAXIEXPRESS = 786,
    T_CMSG_SET_FACTION_INACTIVE = 791,
    T_CMSG_SET_WATCHED_FACTION = 792,
    T_MSG_MOVE_TIME_SKIPPED = 793,
    T_SMSG_SPLINE_MOVE_ROOT = 794,
    T_SMSG_INVALIDATE_PLAYER = 796,
    T_CMSG_RESET_INSTANCES = 797,
    T_SMSG_INSTANCE_RESET = 798,
    T_SMSG_INSTANCE_RESET_FAILED = 799,
    T_SMSG_UPDATE_LAST_INSTANCE = 800,
    T_MSG_RAID_TARGET_UPDATE = 801,
    T_MSG_RAID_READY_CHECK = 802,
    T_SMSG_PET_ACTION_SOUND = 804,
    T_SMSG_PET_DISMISS_SOUND = 805,
    T_SMSG_GM_TICKET_STATUS_UPDATE = 808,
    T_MSG_SET_DUNGEON_DIFFICULTY = 809,
    T_CMSG_GMSURVEY_SUBMIT = 810,
    T_SMSG_UPDATE_INSTANCE_OWNERSHIP = 811,
    T_SMSG_CHAT_PLAYER_AMBIGUOUS = 813,
    T_SMSG_SPELLINSTAKILLLOG = 815,
    T_SMSG_SPELL_UPDATE_CHAIN_TARGETS = 816,
    T_SMSG_SPELLSTEALLOG = 819,
    T_SMSG_DEFENSE_MESSAGE = 826,
    T_SMSG_INSTANCE_DIFFICULTY = 827,
    T_SMSG_MOTD = 829,
    T_SMSG_MOVE_SET_FLIGHT = 830,
    T_SMSG_MOVE_UNSET_FLIGHT = 831,
    T_SMSG_MOVE_SET_CAN_FLY = 835,
    T_SMSG_MOVE_UNSET_CAN_FLY = 836,
    T_CMSG_MOVE_SET_CAN_FLY_ACK = 837,
    T_CMSG_MOVE_SET_FLY = 838,
    T_CMSG_SOCKET_GEMS = 839,
    T_SMSG_ARENA_TEAM_COMMAND_RESULT = 841,
    T_SMSG_ARENA_TEAM_QUERY_RESPONSE = 844,
    T_CMSG_ARENA_TEAM_ROSTER = 845,
    T_SMSG_ARENA_TEAM_ROSTER = 846,
    T_CMSG_ARENA_TEAM_INVITE = 847,
    T_SMSG_ARENA_TEAM_INVITE = 848,
    T_CMSG_ARENA_TEAM_ACCEPT = 849,
    T_CMSG_ARENA_TEAM_DECLINE = 850,
    T_CMSG_ARENA_TEAM_LEAVE = 851,
    T_CMSG_ARENA_TEAM_REMOVE = 852,
    T_CMSG_ARENA_TEAM_DISBAND = 853,
    T_CMSG_ARENA_TEAM_LEADER = 854,
    T_SMSG_ARENA_TEAM_EVENT = 855,
    T_CMSG_BATTLEMASTER_JOIN_ARENA = 856,
    T_MSG_MOVE_START_ASCEND = 857,
    T_MSG_MOVE_STOP_ASCEND = 858,
    T_SMSG_ARENA_TEAM_STATS = 859,
    T_CMSG_LFG_SET_AUTOJOIN = 860,
    T_CMSG_LFG_CLEAR_AUTOJOIN = 861,
    T_CMSG_LFM_SET_AUTOFILL = 862,
    T_CMSG_LFM_CLEAR_AUTOFILL = 863,
    T_CMSG_CLEAR_LOOKING_FOR_GROUP = 867,
    T_CMSG_CLEAR_LOOKING_FOR_MORE = 868,
    T_CMSG_SET_LOOKING_FOR_MORE = 869,
    T_CMSG_SET_LFG_COMMENT = 870,
    T_SMSG_LFG_LEADER_IS_LFM = 875,
    T_SMSG_LFG_UPDATE = 876,
    T_SMSG_LFG_UPDATE_LFM = 877,
    T_SMSG_LFG_UPDATE_LFG = 878,
    T_SMSG_LFG_UPDATE_QUEUED = 879,
    T_SMSG_TITLE_EARNED = 883,
    T_CMSG_SET_TITLE = 884,
    T_CMSG_CANCEL_MOUNT_AURA = 885,
    T_SMSG_ARENA_ERROR = 886,
    T_MSG_INSPECT_ARENA_TEAMS = 887,
    T_SMSG_DEATH_RELEASE_LOC = 888,
    T_CMSG_CANCEL_TEMP_ENCHANTMENT = 889,
    T_SMSG_FORCED_DEATH_UPDATE = 890,
    T_MSG_MOVE_SET_FLIGHT_SPEED = 894,
    T_MSG_MOVE_SET_FLIGHT_BACK_SPEED = 896,
    T_SMSG_FORCE_FLIGHT_SPEED_CHANGE = 897,
    T_CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK = 898,
    T_SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE = 899,
    T_CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK = 900,
    T_SMSG_SPLINE_SET_FLIGHT_SPEED = 901,
    T_SMSG_SPLINE_SET_FLIGHT_BACK_SPEED = 902,
    T_SMSG_FLIGHT_SPLINE_SYNC = 904,
    T_CMSG_SET_TAXI_BENCHMARK_MODE = 905,
    T_SMSG_REALM_SPLIT = 907,
    T_CMSG_REALM_SPLIT = 908,
    T_CMSG_MOVE_CHNG_TRANSPORT = 909,
    T_MSG_PARTY_ASSIGNMENT = 910,
    T_SMSG_TIME_SYNC_REQ = 912,
    T_CMSG_TIME_SYNC_RESP = 913,
    T_SMSG_RESET_FAILED_NOTIFY = 918,
    T_SMSG_LFG_DISABLED = 920,
    T_SMSG_UPDATE_COMBO_POINTS = 925,
    T_SMSG_SET_EXTRA_AURA_INFO = 932,
    T_SMSG_SET_EXTRA_AURA_INFO_NEED_UPDATE = 933,
    T_SMSG_CLEAR_EXTRA_AURA_INFO = 934,
    T_MSG_MOVE_START_DESCEND = 935,
    T_SMSG_DISMOUNT = 940,
    T_MSG_MOVE_UPDATE_CAN_FLY = 941,
    T_MSG_RAID_READY_CHECK_CONFIRM = 942,
    T_CMSG_VOICE_SESSION_ENABLE = 943,
    T_SMSG_GM_MESSAGECHAT = 946,
    T_CMSG_COMMENTATOR_ENABLE = 948,
    T_SMSG_CLEAR_TARGET = 958,
    T_SMSG_CROSSED_INEBRIATION_THRESHOLD = 960,
    T_SMSG_KICK_REASON = 964,
    T_MSG_RAID_READY_CHECK_FINISHED = 965,
    T_CMSG_COMPLAIN = 966,
    T_SMSG_COMPLAIN_RESULT = 967,
    T_SMSG_FEATURE_SYSTEM_STATUS = 968,
    T_CMSG_CHANNEL_DISPLAY_LIST = 977,
    T_CMSG_SET_ACTIVE_VOICE_CHANNEL = 978,
    T_CMSG_GET_CHANNEL_MEMBER_COUNT = 979,
    T_SMSG_CHANNEL_MEMBER_COUNT = 980,
    T_CMSG_CHANNEL_VOICE_ON = 981,
    T_CMSG_REPORT_PVP_AFK = 995,
    T_CMSG_GUILD_BANKER_ACTIVATE = 997,
    T_CMSG_GUILD_BANK_QUERY_TAB = 998,
    T_SMSG_GUILD_BANK_LIST = 999,
    T_CMSG_GUILD_BANK_SWAP_ITEMS = 1000,
    T_CMSG_GUILD_BANK_BUY_TAB = 1001,
    T_CMSG_GUILD_BANK_UPDATE_TAB = 1002,
    T_CMSG_GUILD_BANK_DEPOSIT_MONEY = 1003,
    T_CMSG_GUILD_BANK_WITHDRAW_MONEY = 1004,
    T_MSG_GUILD_BANK_LOG_QUERY = 1005,
    T_CMSG_SET_CHANNEL_WATCH = 1006,
    T_SMSG_USERLIST_ADD = 1007,
    T_SMSG_USERLIST_REMOVE = 1008,
    T_SMSG_USERLIST_UPDATE = 1009,
    T_CMSG_CLEAR_CHANNEL_WATCH = 1010,
    T_SMSG_INSPECT_TALENT = 1011,
    T_CMSG_SPELLCLICK = 1015,
    T_SMSG_LOOT_LIST = 1016,
    T_MSG_GUILD_PERMISSIONS = 1020,
    T_MSG_GUILD_BANK_MONEY_WITHDRAWN = 1021,
    T_MSG_GUILD_EVENT_LOG_QUERY = 1022,
    T_CMSG_GET_MIRRORIMAGE_DATA = 1024,
    T_SMSG_MIRRORIMAGE_DATA = 1025,
    T_CMSG_KEEP_ALIVE = 1030,
    T_CMSG_OPT_OUT_OF_LOOT = 1032,
    T_MSG_QUERY_GUILD_BANK_TEXT = 1033,
    T_CMSG_SET_GUILD_BANK_TEXT = 1034,
    T_CMSG_GRANT_LEVEL = 1036,
    T_SMSG_OVERRIDE_LIGHT = 1041,
    T_SMSG_TOTEM_CREATED = 1042,
    T_CMSG_TOTEM_DESTROYED = 1043,
    T_CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY = 1046,
    T_SMSG_QUESTGIVER_STATUS_MULTIPLE = 1047,
    T_CMSG_SET_PLAYER_DECLINED_NAMES = 1048,
    T_SMSG_SET_PLAYER_DECLINED_NAMES_RESULT = 1049,
    T_SMSG_SEND_UNLEARN_SPELLS = 1053,
    T_SMSG_PROPOSE_LEVEL_GRANT = 1054,
    T_CMSG_ACCEPT_LEVEL_GRANT = 1055,
    T_SMSG_REFER_A_FRIEND_FAILURE = 1056,
    T_SMSG_SPLINE_MOVE_SET_FLYING = 1057,
    T_SMSG_SPLINE_MOVE_UNSET_FLYING = 1058
} WowTbcWorldOpcode;

typedef struct {
    WowTbcWorldOpcode opcode;

    union {
        tbc_CMSG_DBLOOKUP CMSG_DBLOOKUP;
        tbc_CMSG_WORLD_TELEPORT CMSG_WORLD_TELEPORT;
        tbc_CMSG_TELEPORT_TO_UNIT CMSG_TELEPORT_TO_UNIT;
        tbc_CMSG_CHAR_CREATE CMSG_CHAR_CREATE;
        tbc_CMSG_CHAR_DELETE CMSG_CHAR_DELETE;
        tbc_CMSG_PLAYER_LOGIN CMSG_PLAYER_LOGIN;
        tbc_CMSG_NAME_QUERY CMSG_NAME_QUERY;
        tbc_CMSG_PET_NAME_QUERY CMSG_PET_NAME_QUERY;
        tbc_CMSG_GUILD_QUERY CMSG_GUILD_QUERY;
        tbc_CMSG_ITEM_QUERY_SINGLE CMSG_ITEM_QUERY_SINGLE;
        tbc_CMSG_PAGE_TEXT_QUERY CMSG_PAGE_TEXT_QUERY;
        tbc_CMSG_QUEST_QUERY CMSG_QUEST_QUERY;
        tbc_CMSG_GAMEOBJECT_QUERY CMSG_GAMEOBJECT_QUERY;
        tbc_CMSG_CREATURE_QUERY CMSG_CREATURE_QUERY;
        tbc_CMSG_WHO CMSG_WHO;
        tbc_CMSG_WHOIS CMSG_WHOIS;
        tbc_CMSG_CONTACT_LIST CMSG_CONTACT_LIST;
        tbc_CMSG_ADD_FRIEND CMSG_ADD_FRIEND;
        tbc_CMSG_DEL_FRIEND CMSG_DEL_FRIEND;
        tbc_CMSG_SET_CONTACT_NOTES CMSG_SET_CONTACT_NOTES;
        tbc_CMSG_ADD_IGNORE CMSG_ADD_IGNORE;
        tbc_CMSG_DEL_IGNORE CMSG_DEL_IGNORE;
        tbc_CMSG_GROUP_INVITE CMSG_GROUP_INVITE;
        tbc_CMSG_GROUP_UNINVITE CMSG_GROUP_UNINVITE;
        tbc_CMSG_GROUP_UNINVITE_GUID CMSG_GROUP_UNINVITE_GUID;
        tbc_CMSG_GROUP_SET_LEADER CMSG_GROUP_SET_LEADER;
        tbc_CMSG_LOOT_METHOD CMSG_LOOT_METHOD;
        tbc_CMSG_GUILD_CREATE CMSG_GUILD_CREATE;
        tbc_CMSG_GUILD_INVITE CMSG_GUILD_INVITE;
        tbc_CMSG_GUILD_PROMOTE CMSG_GUILD_PROMOTE;
        tbc_CMSG_GUILD_DEMOTE CMSG_GUILD_DEMOTE;
        tbc_CMSG_GUILD_REMOVE CMSG_GUILD_REMOVE;
        tbc_CMSG_GUILD_LEADER CMSG_GUILD_LEADER;
        tbc_CMSG_GUILD_MOTD CMSG_GUILD_MOTD;
        tbc_CMSG_MESSAGECHAT CMSG_MESSAGECHAT;
        tbc_CMSG_JOIN_CHANNEL CMSG_JOIN_CHANNEL;
        tbc_CMSG_LEAVE_CHANNEL CMSG_LEAVE_CHANNEL;
        tbc_CMSG_CHANNEL_LIST CMSG_CHANNEL_LIST;
        tbc_CMSG_CHANNEL_PASSWORD CMSG_CHANNEL_PASSWORD;
        tbc_CMSG_CHANNEL_SET_OWNER CMSG_CHANNEL_SET_OWNER;
        tbc_CMSG_CHANNEL_OWNER CMSG_CHANNEL_OWNER;
        tbc_CMSG_CHANNEL_MODERATOR CMSG_CHANNEL_MODERATOR;
        tbc_CMSG_CHANNEL_UNMODERATOR CMSG_CHANNEL_UNMODERATOR;
        tbc_CMSG_CHANNEL_MUTE CMSG_CHANNEL_MUTE;
        tbc_CMSG_CHANNEL_UNMUTE CMSG_CHANNEL_UNMUTE;
        tbc_CMSG_CHANNEL_INVITE CMSG_CHANNEL_INVITE;
        tbc_CMSG_CHANNEL_KICK CMSG_CHANNEL_KICK;
        tbc_CMSG_CHANNEL_BAN CMSG_CHANNEL_BAN;
        tbc_CMSG_CHANNEL_UNBAN CMSG_CHANNEL_UNBAN;
        tbc_CMSG_CHANNEL_ANNOUNCEMENTS CMSG_CHANNEL_ANNOUNCEMENTS;
        tbc_CMSG_CHANNEL_MODERATE CMSG_CHANNEL_MODERATE;
        tbc_CMSG_USE_ITEM CMSG_USE_ITEM;
        tbc_CMSG_OPEN_ITEM CMSG_OPEN_ITEM;
        tbc_CMSG_READ_ITEM CMSG_READ_ITEM;
        tbc_CMSG_GAMEOBJ_USE CMSG_GAMEOBJ_USE;
        tbc_CMSG_AREATRIGGER CMSG_AREATRIGGER;
        tbc_MSG_MOVE_START_FORWARD_Client MSG_MOVE_START_FORWARD_Client;
        tbc_MSG_MOVE_START_BACKWARD_Client MSG_MOVE_START_BACKWARD_Client;
        tbc_MSG_MOVE_STOP_Client MSG_MOVE_STOP_Client;
        tbc_MSG_MOVE_START_STRAFE_LEFT_Client MSG_MOVE_START_STRAFE_LEFT_Client;
        tbc_MSG_MOVE_START_STRAFE_RIGHT_Client MSG_MOVE_START_STRAFE_RIGHT_Client;
        tbc_MSG_MOVE_STOP_STRAFE_Client MSG_MOVE_STOP_STRAFE_Client;
        tbc_MSG_MOVE_JUMP_Client MSG_MOVE_JUMP_Client;
        tbc_MSG_MOVE_START_TURN_LEFT_Client MSG_MOVE_START_TURN_LEFT_Client;
        tbc_MSG_MOVE_START_TURN_RIGHT_Client MSG_MOVE_START_TURN_RIGHT_Client;
        tbc_MSG_MOVE_STOP_TURN_Client MSG_MOVE_STOP_TURN_Client;
        tbc_MSG_MOVE_START_PITCH_UP_Client MSG_MOVE_START_PITCH_UP_Client;
        tbc_MSG_MOVE_START_PITCH_DOWN_Client MSG_MOVE_START_PITCH_DOWN_Client;
        tbc_MSG_MOVE_STOP_PITCH_Client MSG_MOVE_STOP_PITCH_Client;
        tbc_MSG_MOVE_SET_RUN_MODE_Client MSG_MOVE_SET_RUN_MODE_Client;
        tbc_MSG_MOVE_SET_WALK_MODE_Client MSG_MOVE_SET_WALK_MODE_Client;
        tbc_MSG_MOVE_TELEPORT_Server MSG_MOVE_TELEPORT_Server;
        tbc_MSG_MOVE_TELEPORT_ACK_Client MSG_MOVE_TELEPORT_ACK_Client;
        tbc_MSG_MOVE_FALL_LAND_Client MSG_MOVE_FALL_LAND_Client;
        tbc_MSG_MOVE_START_SWIM_Client MSG_MOVE_START_SWIM_Client;
        tbc_MSG_MOVE_STOP_SWIM_Client MSG_MOVE_STOP_SWIM_Client;
        tbc_MSG_MOVE_SET_FACING_Client MSG_MOVE_SET_FACING_Client;
        tbc_MSG_MOVE_SET_PITCH_Client MSG_MOVE_SET_PITCH_Client;
        tbc_CMSG_MOVE_SET_RAW_POSITION CMSG_MOVE_SET_RAW_POSITION;
        tbc_CMSG_FORCE_RUN_SPEED_CHANGE_ACK CMSG_FORCE_RUN_SPEED_CHANGE_ACK;
        tbc_CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK;
        tbc_CMSG_FORCE_SWIM_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_SPEED_CHANGE_ACK;
        tbc_CMSG_FORCE_MOVE_ROOT_ACK CMSG_FORCE_MOVE_ROOT_ACK;
        tbc_CMSG_FORCE_MOVE_UNROOT_ACK CMSG_FORCE_MOVE_UNROOT_ACK;
        tbc_MSG_MOVE_HEARTBEAT_Client MSG_MOVE_HEARTBEAT_Client;
        tbc_CMSG_MOVE_KNOCK_BACK_ACK CMSG_MOVE_KNOCK_BACK_ACK;
        tbc_CMSG_MOVE_HOVER_ACK CMSG_MOVE_HOVER_ACK;
        tbc_MSG_MOVE_HOVER MSG_MOVE_HOVER;
        tbc_CMSG_TUTORIAL_FLAG CMSG_TUTORIAL_FLAG;
        tbc_CMSG_STANDSTATECHANGE CMSG_STANDSTATECHANGE;
        tbc_CMSG_EMOTE CMSG_EMOTE;
        tbc_CMSG_TEXT_EMOTE CMSG_TEXT_EMOTE;
        tbc_CMSG_AUTOSTORE_LOOT_ITEM CMSG_AUTOSTORE_LOOT_ITEM;
        tbc_CMSG_AUTOEQUIP_ITEM CMSG_AUTOEQUIP_ITEM;
        tbc_CMSG_AUTOSTORE_BAG_ITEM CMSG_AUTOSTORE_BAG_ITEM;
        tbc_CMSG_SWAP_ITEM CMSG_SWAP_ITEM;
        tbc_CMSG_SWAP_INV_ITEM CMSG_SWAP_INV_ITEM;
        tbc_CMSG_SPLIT_ITEM CMSG_SPLIT_ITEM;
        tbc_CMSG_AUTOEQUIP_ITEM_SLOT CMSG_AUTOEQUIP_ITEM_SLOT;
        tbc_CMSG_DESTROYITEM CMSG_DESTROYITEM;
        tbc_CMSG_INSPECT CMSG_INSPECT;
        tbc_CMSG_INITIATE_TRADE CMSG_INITIATE_TRADE;
        tbc_CMSG_ACCEPT_TRADE CMSG_ACCEPT_TRADE;
        tbc_CMSG_SET_TRADE_ITEM CMSG_SET_TRADE_ITEM;
        tbc_CMSG_CLEAR_TRADE_ITEM CMSG_CLEAR_TRADE_ITEM;
        tbc_CMSG_SET_TRADE_GOLD CMSG_SET_TRADE_GOLD;
        tbc_CMSG_SET_FACTION_ATWAR CMSG_SET_FACTION_ATWAR;
        tbc_CMSG_SET_ACTION_BUTTON CMSG_SET_ACTION_BUTTON;
        tbc_CMSG_CAST_SPELL CMSG_CAST_SPELL;
        tbc_CMSG_CANCEL_CAST CMSG_CANCEL_CAST;
        tbc_CMSG_CANCEL_AURA CMSG_CANCEL_AURA;
        tbc_CMSG_CANCEL_CHANNELLING CMSG_CANCEL_CHANNELLING;
        tbc_CMSG_SET_SELECTION CMSG_SET_SELECTION;
        tbc_CMSG_SET_TARGET_OBSOLETE CMSG_SET_TARGET_OBSOLETE;
        tbc_CMSG_ATTACKSWING CMSG_ATTACKSWING;
        tbc_CMSG_RESURRECT_RESPONSE CMSG_RESURRECT_RESPONSE;
        tbc_CMSG_LOOT CMSG_LOOT;
        tbc_CMSG_LOOT_RELEASE CMSG_LOOT_RELEASE;
        tbc_CMSG_DUEL_ACCEPTED CMSG_DUEL_ACCEPTED;
        tbc_CMSG_DUEL_CANCELLED CMSG_DUEL_CANCELLED;
        tbc_CMSG_PET_SET_ACTION CMSG_PET_SET_ACTION;
        tbc_CMSG_PET_ACTION CMSG_PET_ACTION;
        tbc_CMSG_PET_ABANDON CMSG_PET_ABANDON;
        tbc_CMSG_PET_RENAME CMSG_PET_RENAME;
        tbc_CMSG_GOSSIP_HELLO CMSG_GOSSIP_HELLO;
        tbc_CMSG_GOSSIP_SELECT_OPTION CMSG_GOSSIP_SELECT_OPTION;
        tbc_CMSG_NPC_TEXT_QUERY CMSG_NPC_TEXT_QUERY;
        tbc_CMSG_QUESTGIVER_STATUS_QUERY CMSG_QUESTGIVER_STATUS_QUERY;
        tbc_CMSG_QUESTGIVER_HELLO CMSG_QUESTGIVER_HELLO;
        tbc_CMSG_QUESTGIVER_QUERY_QUEST CMSG_QUESTGIVER_QUERY_QUEST;
        tbc_CMSG_QUESTGIVER_ACCEPT_QUEST CMSG_QUESTGIVER_ACCEPT_QUEST;
        tbc_CMSG_QUESTGIVER_COMPLETE_QUEST CMSG_QUESTGIVER_COMPLETE_QUEST;
        tbc_CMSG_QUESTGIVER_REQUEST_REWARD CMSG_QUESTGIVER_REQUEST_REWARD;
        tbc_CMSG_QUESTGIVER_CHOOSE_REWARD CMSG_QUESTGIVER_CHOOSE_REWARD;
        tbc_CMSG_QUESTLOG_SWAP_QUEST CMSG_QUESTLOG_SWAP_QUEST;
        tbc_CMSG_QUESTLOG_REMOVE_QUEST CMSG_QUESTLOG_REMOVE_QUEST;
        tbc_CMSG_QUEST_CONFIRM_ACCEPT CMSG_QUEST_CONFIRM_ACCEPT;
        tbc_CMSG_PUSHQUESTTOPARTY CMSG_PUSHQUESTTOPARTY;
        tbc_CMSG_LIST_INVENTORY CMSG_LIST_INVENTORY;
        tbc_CMSG_SELL_ITEM CMSG_SELL_ITEM;
        tbc_CMSG_BUY_ITEM CMSG_BUY_ITEM;
        tbc_CMSG_BUY_ITEM_IN_SLOT CMSG_BUY_ITEM_IN_SLOT;
        tbc_CMSG_TAXINODE_STATUS_QUERY CMSG_TAXINODE_STATUS_QUERY;
        tbc_CMSG_TAXIQUERYAVAILABLENODES CMSG_TAXIQUERYAVAILABLENODES;
        tbc_CMSG_ACTIVATETAXI CMSG_ACTIVATETAXI;
        tbc_CMSG_TRAINER_LIST CMSG_TRAINER_LIST;
        tbc_CMSG_TRAINER_BUY_SPELL CMSG_TRAINER_BUY_SPELL;
        tbc_CMSG_BINDER_ACTIVATE CMSG_BINDER_ACTIVATE;
        tbc_CMSG_BANKER_ACTIVATE CMSG_BANKER_ACTIVATE;
        tbc_CMSG_BUY_BANK_SLOT CMSG_BUY_BANK_SLOT;
        tbc_CMSG_PETITION_SHOWLIST CMSG_PETITION_SHOWLIST;
        tbc_CMSG_PETITION_BUY CMSG_PETITION_BUY;
        tbc_CMSG_PETITION_SHOW_SIGNATURES CMSG_PETITION_SHOW_SIGNATURES;
        tbc_CMSG_PETITION_SIGN CMSG_PETITION_SIGN;
        tbc_MSG_PETITION_DECLINE MSG_PETITION_DECLINE;
        tbc_CMSG_OFFER_PETITION CMSG_OFFER_PETITION;
        tbc_CMSG_TURN_IN_PETITION CMSG_TURN_IN_PETITION;
        tbc_CMSG_PETITION_QUERY CMSG_PETITION_QUERY;
        tbc_CMSG_BUG CMSG_BUG;
        tbc_CMSG_RECLAIM_CORPSE CMSG_RECLAIM_CORPSE;
        tbc_CMSG_WRAP_ITEM CMSG_WRAP_ITEM;
        tbc_MSG_MINIMAP_PING_Client MSG_MINIMAP_PING_Client;
        tbc_CMSG_PING CMSG_PING;
        tbc_CMSG_SETSHEATHED CMSG_SETSHEATHED;
        tbc_CMSG_AUTH_SESSION CMSG_AUTH_SESSION;
        tbc_CMSG_PET_CAST_SPELL CMSG_PET_CAST_SPELL;
        tbc_MSG_SAVE_GUILD_EMBLEM_Client MSG_SAVE_GUILD_EMBLEM_Client;
        tbc_MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE;
        tbc_CMSG_ZONEUPDATE CMSG_ZONEUPDATE;
        tbc_MSG_RANDOM_ROLL_Client MSG_RANDOM_ROLL_Client;
        tbc_MSG_LOOKING_FOR_GROUP_Client MSG_LOOKING_FOR_GROUP_Client;
        tbc_CMSG_SET_LOOKING_FOR_GROUP CMSG_SET_LOOKING_FOR_GROUP;
        tbc_CMSG_UNLEARN_SKILL CMSG_UNLEARN_SKILL;
        tbc_CMSG_GMTICKET_CREATE CMSG_GMTICKET_CREATE;
        tbc_CMSG_GMTICKET_UPDATETEXT CMSG_GMTICKET_UPDATETEXT;
        tbc_CMSG_REQUEST_ACCOUNT_DATA CMSG_REQUEST_ACCOUNT_DATA;
        tbc_CMSG_UPDATE_ACCOUNT_DATA CMSG_UPDATE_ACCOUNT_DATA;
        tbc_CMSG_SPIRIT_HEALER_ACTIVATE CMSG_SPIRIT_HEALER_ACTIVATE;
        tbc_CMSG_CHAT_IGNORED CMSG_CHAT_IGNORED;
        tbc_CMSG_GUILD_RANK CMSG_GUILD_RANK;
        tbc_CMSG_GUILD_ADD_RANK CMSG_GUILD_ADD_RANK;
        tbc_CMSG_GUILD_SET_PUBLIC_NOTE CMSG_GUILD_SET_PUBLIC_NOTE;
        tbc_CMSG_GUILD_SET_OFFICER_NOTE CMSG_GUILD_SET_OFFICER_NOTE;
        tbc_CMSG_SEND_MAIL CMSG_SEND_MAIL;
        tbc_CMSG_GET_MAIL_LIST CMSG_GET_MAIL_LIST;
        tbc_CMSG_BATTLEFIELD_LIST CMSG_BATTLEFIELD_LIST;
        tbc_CMSG_ITEM_TEXT_QUERY CMSG_ITEM_TEXT_QUERY;
        tbc_CMSG_MAIL_TAKE_MONEY CMSG_MAIL_TAKE_MONEY;
        tbc_CMSG_MAIL_TAKE_ITEM CMSG_MAIL_TAKE_ITEM;
        tbc_CMSG_MAIL_MARK_AS_READ CMSG_MAIL_MARK_AS_READ;
        tbc_CMSG_MAIL_RETURN_TO_SENDER CMSG_MAIL_RETURN_TO_SENDER;
        tbc_CMSG_MAIL_DELETE CMSG_MAIL_DELETE;
        tbc_CMSG_MAIL_CREATE_TEXT_ITEM CMSG_MAIL_CREATE_TEXT_ITEM;
        tbc_CMSG_LEARN_TALENT CMSG_LEARN_TALENT;
        tbc_CMSG_TOGGLE_PVP CMSG_TOGGLE_PVP;
        tbc_MSG_AUCTION_HELLO_Client MSG_AUCTION_HELLO_Client;
        tbc_CMSG_AUCTION_SELL_ITEM CMSG_AUCTION_SELL_ITEM;
        tbc_CMSG_AUCTION_REMOVE_ITEM CMSG_AUCTION_REMOVE_ITEM;
        tbc_CMSG_AUCTION_LIST_ITEMS CMSG_AUCTION_LIST_ITEMS;
        tbc_CMSG_AUCTION_LIST_OWNER_ITEMS CMSG_AUCTION_LIST_OWNER_ITEMS;
        tbc_CMSG_AUCTION_PLACE_BID CMSG_AUCTION_PLACE_BID;
        tbc_CMSG_AUCTION_LIST_BIDDER_ITEMS CMSG_AUCTION_LIST_BIDDER_ITEMS;
        tbc_CMSG_SET_AMMO CMSG_SET_AMMO;
        tbc_CMSG_SET_ACTIVE_MOVER CMSG_SET_ACTIVE_MOVER;
        tbc_CMSG_PET_CANCEL_AURA CMSG_PET_CANCEL_AURA;
        tbc_MSG_LIST_STABLED_PETS_Client MSG_LIST_STABLED_PETS_Client;
        tbc_CMSG_STABLE_PET CMSG_STABLE_PET;
        tbc_CMSG_UNSTABLE_PET CMSG_UNSTABLE_PET;
        tbc_CMSG_BUY_STABLE_SLOT CMSG_BUY_STABLE_SLOT;
        tbc_CMSG_STABLE_SWAP_PET CMSG_STABLE_SWAP_PET;
        tbc_MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT;
        tbc_CMSG_FAR_SIGHT CMSG_FAR_SIGHT;
        tbc_CMSG_GROUP_CHANGE_SUB_GROUP CMSG_GROUP_CHANGE_SUB_GROUP;
        tbc_CMSG_REQUEST_PARTY_MEMBER_STATS CMSG_REQUEST_PARTY_MEMBER_STATS;
        tbc_CMSG_GROUP_SWAP_SUB_GROUP CMSG_GROUP_SWAP_SUB_GROUP;
        tbc_CMSG_AUTOSTORE_BANK_ITEM CMSG_AUTOSTORE_BANK_ITEM;
        tbc_CMSG_AUTOBANK_ITEM CMSG_AUTOBANK_ITEM;
        tbc_CMSG_GROUP_ASSISTANT_LEADER CMSG_GROUP_ASSISTANT_LEADER;
        tbc_CMSG_BUYBACK_ITEM CMSG_BUYBACK_ITEM;
        tbc_CMSG_LOOT_ROLL CMSG_LOOT_ROLL;
        tbc_CMSG_LOOT_MASTER_GIVE CMSG_LOOT_MASTER_GIVE;
        tbc_CMSG_REPAIR_ITEM CMSG_REPAIR_ITEM;
        tbc_MSG_TALENT_WIPE_CONFIRM_Client MSG_TALENT_WIPE_CONFIRM_Client;
        tbc_CMSG_SUMMON_RESPONSE CMSG_SUMMON_RESPONSE;
        tbc_MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK;
        tbc_CMSG_SET_ACTIONBAR_TOGGLES CMSG_SET_ACTIONBAR_TOGGLES;
        tbc_MSG_PETITION_RENAME MSG_PETITION_RENAME;
        tbc_CMSG_ITEM_NAME_QUERY CMSG_ITEM_NAME_QUERY;
        tbc_CMSG_CHAR_RENAME CMSG_CHAR_RENAME;
        tbc_CMSG_MOVE_SPLINE_DONE CMSG_MOVE_SPLINE_DONE;
        tbc_CMSG_MOVE_FALL_RESET CMSG_MOVE_FALL_RESET;
        tbc_CMSG_MOVE_TIME_SKIPPED CMSG_MOVE_TIME_SKIPPED;
        tbc_CMSG_MOVE_FEATHER_FALL_ACK CMSG_MOVE_FEATHER_FALL_ACK;
        tbc_CMSG_MOVE_WATER_WALK_ACK CMSG_MOVE_WATER_WALK_ACK;
        tbc_CMSG_MOVE_NOT_ACTIVE_MOVER CMSG_MOVE_NOT_ACTIVE_MOVER;
        tbc_CMSG_BATTLEFIELD_PORT CMSG_BATTLEFIELD_PORT;
        tbc_MSG_INSPECT_HONOR_STATS_Client MSG_INSPECT_HONOR_STATS_Client;
        tbc_CMSG_BATTLEMASTER_HELLO CMSG_BATTLEMASTER_HELLO;
        tbc_CMSG_FORCE_WALK_SPEED_CHANGE_ACK CMSG_FORCE_WALK_SPEED_CHANGE_ACK;
        tbc_CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK;
        tbc_CMSG_FORCE_TURN_RATE_CHANGE_ACK CMSG_FORCE_TURN_RATE_CHANGE_ACK;
        tbc_CMSG_LEAVE_BATTLEFIELD CMSG_LEAVE_BATTLEFIELD;
        tbc_CMSG_AREA_SPIRIT_HEALER_QUERY CMSG_AREA_SPIRIT_HEALER_QUERY;
        tbc_CMSG_AREA_SPIRIT_HEALER_QUEUE CMSG_AREA_SPIRIT_HEALER_QUEUE;
        tbc_CMSG_WARDEN_DATA CMSG_WARDEN_DATA;
        tbc_CMSG_PET_STOP_ATTACK CMSG_PET_STOP_ATTACK;
        tbc_CMSG_BATTLEMASTER_JOIN CMSG_BATTLEMASTER_JOIN;
        tbc_CMSG_PET_UNLEARN CMSG_PET_UNLEARN;
        tbc_CMSG_PET_SPELL_AUTOCAST CMSG_PET_SPELL_AUTOCAST;
        tbc_CMSG_GUILD_INFO_TEXT CMSG_GUILD_INFO_TEXT;
        tbc_CMSG_ACTIVATETAXIEXPRESS CMSG_ACTIVATETAXIEXPRESS;
        tbc_CMSG_SET_FACTION_INACTIVE CMSG_SET_FACTION_INACTIVE;
        tbc_CMSG_SET_WATCHED_FACTION CMSG_SET_WATCHED_FACTION;
        tbc_MSG_RAID_TARGET_UPDATE_Client MSG_RAID_TARGET_UPDATE_Client;
        tbc_MSG_RAID_READY_CHECK_Client MSG_RAID_READY_CHECK_Client;
        tbc_MSG_SET_DUNGEON_DIFFICULTY_Client MSG_SET_DUNGEON_DIFFICULTY_Client;
        tbc_CMSG_GMSURVEY_SUBMIT CMSG_GMSURVEY_SUBMIT;
        tbc_CMSG_MOVE_SET_CAN_FLY_ACK CMSG_MOVE_SET_CAN_FLY_ACK;
        tbc_CMSG_MOVE_SET_FLY CMSG_MOVE_SET_FLY;
        tbc_CMSG_SOCKET_GEMS CMSG_SOCKET_GEMS;
        tbc_CMSG_ARENA_TEAM_ROSTER CMSG_ARENA_TEAM_ROSTER;
        tbc_CMSG_ARENA_TEAM_INVITE CMSG_ARENA_TEAM_INVITE;
        tbc_CMSG_ARENA_TEAM_LEAVE CMSG_ARENA_TEAM_LEAVE;
        tbc_CMSG_ARENA_TEAM_REMOVE CMSG_ARENA_TEAM_REMOVE;
        tbc_CMSG_ARENA_TEAM_DISBAND CMSG_ARENA_TEAM_DISBAND;
        tbc_CMSG_ARENA_TEAM_LEADER CMSG_ARENA_TEAM_LEADER;
        tbc_CMSG_BATTLEMASTER_JOIN_ARENA CMSG_BATTLEMASTER_JOIN_ARENA;
        tbc_MSG_MOVE_START_ASCEND_Client MSG_MOVE_START_ASCEND_Client;
        tbc_MSG_MOVE_STOP_ASCEND_Client MSG_MOVE_STOP_ASCEND_Client;
        tbc_CMSG_SET_LOOKING_FOR_MORE CMSG_SET_LOOKING_FOR_MORE;
        tbc_CMSG_SET_LFG_COMMENT CMSG_SET_LFG_COMMENT;
        tbc_CMSG_SET_TITLE CMSG_SET_TITLE;
        tbc_MSG_INSPECT_ARENA_TEAMS_Client MSG_INSPECT_ARENA_TEAMS_Client;
        tbc_CMSG_CANCEL_TEMP_ENCHANTMENT CMSG_CANCEL_TEMP_ENCHANTMENT;
        tbc_MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEED;
        tbc_CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK;
        tbc_CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK;
        tbc_CMSG_SET_TAXI_BENCHMARK_MODE CMSG_SET_TAXI_BENCHMARK_MODE;
        tbc_CMSG_REALM_SPLIT CMSG_REALM_SPLIT;
        tbc_CMSG_MOVE_CHNG_TRANSPORT CMSG_MOVE_CHNG_TRANSPORT;
        tbc_MSG_PARTY_ASSIGNMENT_Client MSG_PARTY_ASSIGNMENT_Client;
        tbc_CMSG_TIME_SYNC_RESP CMSG_TIME_SYNC_RESP;
        tbc_MSG_MOVE_START_DESCEND_Client MSG_MOVE_START_DESCEND_Client;
        tbc_MSG_RAID_READY_CHECK_CONFIRM_Client MSG_RAID_READY_CHECK_CONFIRM_Client;
        tbc_CMSG_VOICE_SESSION_ENABLE CMSG_VOICE_SESSION_ENABLE;
        tbc_CMSG_COMMENTATOR_ENABLE CMSG_COMMENTATOR_ENABLE;
        tbc_CMSG_COMPLAIN CMSG_COMPLAIN;
        tbc_CMSG_CHANNEL_DISPLAY_LIST CMSG_CHANNEL_DISPLAY_LIST;
        tbc_CMSG_SET_ACTIVE_VOICE_CHANNEL CMSG_SET_ACTIVE_VOICE_CHANNEL;
        tbc_CMSG_GET_CHANNEL_MEMBER_COUNT CMSG_GET_CHANNEL_MEMBER_COUNT;
        tbc_CMSG_REPORT_PVP_AFK CMSG_REPORT_PVP_AFK;
        tbc_CMSG_GUILD_BANKER_ACTIVATE CMSG_GUILD_BANKER_ACTIVATE;
        tbc_CMSG_GUILD_BANK_QUERY_TAB CMSG_GUILD_BANK_QUERY_TAB;
        tbc_CMSG_GUILD_BANK_SWAP_ITEMS CMSG_GUILD_BANK_SWAP_ITEMS;
        tbc_CMSG_GUILD_BANK_BUY_TAB CMSG_GUILD_BANK_BUY_TAB;
        tbc_CMSG_GUILD_BANK_UPDATE_TAB CMSG_GUILD_BANK_UPDATE_TAB;
        tbc_CMSG_GUILD_BANK_DEPOSIT_MONEY CMSG_GUILD_BANK_DEPOSIT_MONEY;
        tbc_CMSG_GUILD_BANK_WITHDRAW_MONEY CMSG_GUILD_BANK_WITHDRAW_MONEY;
        tbc_MSG_GUILD_BANK_LOG_QUERY_Client MSG_GUILD_BANK_LOG_QUERY_Client;
        tbc_CMSG_SET_CHANNEL_WATCH CMSG_SET_CHANNEL_WATCH;
        tbc_CMSG_CLEAR_CHANNEL_WATCH CMSG_CLEAR_CHANNEL_WATCH;
        tbc_CMSG_SPELLCLICK CMSG_SPELLCLICK;
        tbc_CMSG_GET_MIRRORIMAGE_DATA CMSG_GET_MIRRORIMAGE_DATA;
        tbc_CMSG_OPT_OUT_OF_LOOT CMSG_OPT_OUT_OF_LOOT;
        tbc_MSG_QUERY_GUILD_BANK_TEXT_Client MSG_QUERY_GUILD_BANK_TEXT_Client;
        tbc_CMSG_SET_GUILD_BANK_TEXT CMSG_SET_GUILD_BANK_TEXT;
        tbc_CMSG_GRANT_LEVEL CMSG_GRANT_LEVEL;
        tbc_CMSG_TOTEM_DESTROYED CMSG_TOTEM_DESTROYED;
        tbc_CMSG_SET_PLAYER_DECLINED_NAMES CMSG_SET_PLAYER_DECLINED_NAMES;
        tbc_CMSG_ACCEPT_LEVEL_GRANT CMSG_ACCEPT_LEVEL_GRANT;
    } body;
} TbcClientOpcodeContainer;

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_client_opcode_write(WowWorldWriter* writer, const TbcClientOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_client_opcode_read(WowWorldReader* reader, TbcClientOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT void tbc_client_opcode_free(TbcClientOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT char* tbc_client_opcode_to_str(TbcClientOpcodeContainer* opcodes);
typedef struct {
    WowTbcWorldOpcode opcode;

    union {
        tbc_SMSG_CHAR_CREATE SMSG_CHAR_CREATE;
        tbc_SMSG_CHAR_ENUM SMSG_CHAR_ENUM;
        tbc_SMSG_CHAR_DELETE SMSG_CHAR_DELETE;
        tbc_SMSG_NEW_WORLD SMSG_NEW_WORLD;
        tbc_SMSG_TRANSFER_PENDING SMSG_TRANSFER_PENDING;
        tbc_SMSG_TRANSFER_ABORTED SMSG_TRANSFER_ABORTED;
        tbc_SMSG_CHARACTER_LOGIN_FAILED SMSG_CHARACTER_LOGIN_FAILED;
        tbc_SMSG_LOGIN_SETTIMESPEED SMSG_LOGIN_SETTIMESPEED;
        tbc_SMSG_LOGOUT_RESPONSE SMSG_LOGOUT_RESPONSE;
        tbc_SMSG_NAME_QUERY_RESPONSE SMSG_NAME_QUERY_RESPONSE;
        tbc_SMSG_PET_NAME_QUERY_RESPONSE SMSG_PET_NAME_QUERY_RESPONSE;
        tbc_SMSG_GUILD_QUERY_RESPONSE SMSG_GUILD_QUERY_RESPONSE;
        tbc_SMSG_ITEM_QUERY_SINGLE_RESPONSE SMSG_ITEM_QUERY_SINGLE_RESPONSE;
        tbc_SMSG_PAGE_TEXT_QUERY_RESPONSE SMSG_PAGE_TEXT_QUERY_RESPONSE;
        tbc_SMSG_QUEST_QUERY_RESPONSE SMSG_QUEST_QUERY_RESPONSE;
        tbc_SMSG_GAMEOBJECT_QUERY_RESPONSE SMSG_GAMEOBJECT_QUERY_RESPONSE;
        tbc_SMSG_CREATURE_QUERY_RESPONSE SMSG_CREATURE_QUERY_RESPONSE;
        tbc_SMSG_WHO SMSG_WHO;
        tbc_SMSG_WHOIS SMSG_WHOIS;
        tbc_SMSG_CONTACT_LIST SMSG_CONTACT_LIST;
        tbc_SMSG_FRIEND_STATUS SMSG_FRIEND_STATUS;
        tbc_SMSG_GROUP_INVITE SMSG_GROUP_INVITE;
        tbc_SMSG_GROUP_DECLINE SMSG_GROUP_DECLINE;
        tbc_SMSG_GROUP_SET_LEADER SMSG_GROUP_SET_LEADER;
        tbc_SMSG_GROUP_LIST SMSG_GROUP_LIST;
        tbc_SMSG_PARTY_MEMBER_STATS SMSG_PARTY_MEMBER_STATS;
        tbc_SMSG_PARTY_COMMAND_RESULT SMSG_PARTY_COMMAND_RESULT;
        tbc_SMSG_GUILD_INVITE SMSG_GUILD_INVITE;
        tbc_SMSG_GUILD_DECLINE SMSG_GUILD_DECLINE;
        tbc_SMSG_GUILD_INFO SMSG_GUILD_INFO;
        tbc_SMSG_GUILD_ROSTER SMSG_GUILD_ROSTER;
        tbc_SMSG_GUILD_EVENT SMSG_GUILD_EVENT;
        tbc_SMSG_GUILD_COMMAND_RESULT SMSG_GUILD_COMMAND_RESULT;
        tbc_SMSG_MESSAGECHAT SMSG_MESSAGECHAT;
        tbc_SMSG_CHANNEL_NOTIFY SMSG_CHANNEL_NOTIFY;
        tbc_SMSG_CHANNEL_LIST SMSG_CHANNEL_LIST;
        tbc_SMSG_UPDATE_OBJECT SMSG_UPDATE_OBJECT;
        tbc_SMSG_DESTROY_OBJECT SMSG_DESTROY_OBJECT;
        tbc_SMSG_READ_ITEM_OK SMSG_READ_ITEM_OK;
        tbc_SMSG_READ_ITEM_FAILED SMSG_READ_ITEM_FAILED;
        tbc_SMSG_ITEM_COOLDOWN SMSG_ITEM_COOLDOWN;
        tbc_SMSG_GAMEOBJECT_CUSTOM_ANIM SMSG_GAMEOBJECT_CUSTOM_ANIM;
        tbc_MSG_MOVE_START_FORWARD_Server MSG_MOVE_START_FORWARD_Server;
        tbc_MSG_MOVE_START_BACKWARD_Server MSG_MOVE_START_BACKWARD_Server;
        tbc_MSG_MOVE_STOP_Server MSG_MOVE_STOP_Server;
        tbc_MSG_MOVE_START_STRAFE_LEFT_Server MSG_MOVE_START_STRAFE_LEFT_Server;
        tbc_MSG_MOVE_START_STRAFE_RIGHT_Server MSG_MOVE_START_STRAFE_RIGHT_Server;
        tbc_MSG_MOVE_STOP_STRAFE_Server MSG_MOVE_STOP_STRAFE_Server;
        tbc_MSG_MOVE_JUMP_Server MSG_MOVE_JUMP_Server;
        tbc_MSG_MOVE_START_TURN_LEFT_Server MSG_MOVE_START_TURN_LEFT_Server;
        tbc_MSG_MOVE_START_TURN_RIGHT_Server MSG_MOVE_START_TURN_RIGHT_Server;
        tbc_MSG_MOVE_STOP_TURN_Server MSG_MOVE_STOP_TURN_Server;
        tbc_MSG_MOVE_START_PITCH_UP_Server MSG_MOVE_START_PITCH_UP_Server;
        tbc_MSG_MOVE_START_PITCH_DOWN_Server MSG_MOVE_START_PITCH_DOWN_Server;
        tbc_MSG_MOVE_STOP_PITCH_Server MSG_MOVE_STOP_PITCH_Server;
        tbc_MSG_MOVE_SET_RUN_MODE_Server MSG_MOVE_SET_RUN_MODE_Server;
        tbc_MSG_MOVE_SET_WALK_MODE_Server MSG_MOVE_SET_WALK_MODE_Server;
        tbc_MSG_MOVE_TELEPORT_CHEAT_Server MSG_MOVE_TELEPORT_CHEAT_Server;
        tbc_MSG_MOVE_TELEPORT_ACK_Server MSG_MOVE_TELEPORT_ACK_Server;
        tbc_MSG_MOVE_FALL_LAND_Server MSG_MOVE_FALL_LAND_Server;
        tbc_MSG_MOVE_START_SWIM_Server MSG_MOVE_START_SWIM_Server;
        tbc_MSG_MOVE_STOP_SWIM_Server MSG_MOVE_STOP_SWIM_Server;
        tbc_MSG_MOVE_SET_FACING_Server MSG_MOVE_SET_FACING_Server;
        tbc_MSG_MOVE_SET_PITCH_Server MSG_MOVE_SET_PITCH_Server;
        tbc_SMSG_MONSTER_MOVE SMSG_MONSTER_MOVE;
        tbc_SMSG_MOVE_WATER_WALK SMSG_MOVE_WATER_WALK;
        tbc_SMSG_MOVE_LAND_WALK SMSG_MOVE_LAND_WALK;
        tbc_SMSG_FORCE_RUN_SPEED_CHANGE SMSG_FORCE_RUN_SPEED_CHANGE;
        tbc_SMSG_FORCE_RUN_BACK_SPEED_CHANGE SMSG_FORCE_RUN_BACK_SPEED_CHANGE;
        tbc_SMSG_FORCE_SWIM_SPEED_CHANGE SMSG_FORCE_SWIM_SPEED_CHANGE;
        tbc_SMSG_FORCE_MOVE_ROOT SMSG_FORCE_MOVE_ROOT;
        tbc_SMSG_FORCE_MOVE_UNROOT SMSG_FORCE_MOVE_UNROOT;
        tbc_MSG_MOVE_ROOT_Server MSG_MOVE_ROOT_Server;
        tbc_MSG_MOVE_UNROOT_Server MSG_MOVE_UNROOT_Server;
        tbc_MSG_MOVE_HEARTBEAT_Server MSG_MOVE_HEARTBEAT_Server;
        tbc_SMSG_MOVE_KNOCK_BACK SMSG_MOVE_KNOCK_BACK;
        tbc_MSG_MOVE_KNOCK_BACK_Server MSG_MOVE_KNOCK_BACK_Server;
        tbc_SMSG_MOVE_FEATHER_FALL SMSG_MOVE_FEATHER_FALL;
        tbc_SMSG_MOVE_NORMAL_FALL SMSG_MOVE_NORMAL_FALL;
        tbc_SMSG_MOVE_SET_HOVER SMSG_MOVE_SET_HOVER;
        tbc_SMSG_MOVE_UNSET_HOVER SMSG_MOVE_UNSET_HOVER;
        tbc_MSG_MOVE_HOVER MSG_MOVE_HOVER;
        tbc_SMSG_TRIGGER_CINEMATIC SMSG_TRIGGER_CINEMATIC;
        tbc_SMSG_TUTORIAL_FLAGS SMSG_TUTORIAL_FLAGS;
        tbc_SMSG_EMOTE SMSG_EMOTE;
        tbc_SMSG_TEXT_EMOTE SMSG_TEXT_EMOTE;
        tbc_SMSG_INVENTORY_CHANGE_FAILURE SMSG_INVENTORY_CHANGE_FAILURE;
        tbc_SMSG_TRADE_STATUS SMSG_TRADE_STATUS;
        tbc_SMSG_TRADE_STATUS_EXTENDED SMSG_TRADE_STATUS_EXTENDED;
        tbc_SMSG_INITIALIZE_FACTIONS SMSG_INITIALIZE_FACTIONS;
        tbc_SMSG_SET_FACTION_VISIBLE SMSG_SET_FACTION_VISIBLE;
        tbc_SMSG_SET_FACTION_STANDING SMSG_SET_FACTION_STANDING;
        tbc_SMSG_SET_PROFICIENCY SMSG_SET_PROFICIENCY;
        tbc_SMSG_ACTION_BUTTONS SMSG_ACTION_BUTTONS;
        tbc_SMSG_INITIAL_SPELLS SMSG_INITIAL_SPELLS;
        tbc_SMSG_LEARNED_SPELL SMSG_LEARNED_SPELL;
        tbc_SMSG_SUPERCEDED_SPELL SMSG_SUPERCEDED_SPELL;
        tbc_SMSG_CAST_FAILED SMSG_CAST_FAILED;
        tbc_SMSG_SPELL_START SMSG_SPELL_START;
        tbc_SMSG_SPELL_GO SMSG_SPELL_GO;
        tbc_SMSG_SPELL_FAILURE SMSG_SPELL_FAILURE;
        tbc_SMSG_SPELL_COOLDOWN SMSG_SPELL_COOLDOWN;
        tbc_SMSG_COOLDOWN_EVENT SMSG_COOLDOWN_EVENT;
        tbc_SMSG_UPDATE_AURA_DURATION SMSG_UPDATE_AURA_DURATION;
        tbc_SMSG_PET_CAST_FAILED SMSG_PET_CAST_FAILED;
        tbc_MSG_CHANNEL_START_Server MSG_CHANNEL_START_Server;
        tbc_MSG_CHANNEL_UPDATE_Server MSG_CHANNEL_UPDATE_Server;
        tbc_SMSG_AI_REACTION SMSG_AI_REACTION;
        tbc_SMSG_ATTACKSTART SMSG_ATTACKSTART;
        tbc_SMSG_ATTACKSTOP SMSG_ATTACKSTOP;
        tbc_SMSG_ATTACKERSTATEUPDATE SMSG_ATTACKERSTATEUPDATE;
        tbc_SMSG_SPELLHEALLOG SMSG_SPELLHEALLOG;
        tbc_SMSG_SPELLENERGIZELOG SMSG_SPELLENERGIZELOG;
        tbc_SMSG_BINDPOINTUPDATE SMSG_BINDPOINTUPDATE;
        tbc_SMSG_PLAYERBOUND SMSG_PLAYERBOUND;
        tbc_SMSG_CLIENT_CONTROL_UPDATE SMSG_CLIENT_CONTROL_UPDATE;
        tbc_SMSG_RESURRECT_REQUEST SMSG_RESURRECT_REQUEST;
        tbc_SMSG_LOOT_RESPONSE SMSG_LOOT_RESPONSE;
        tbc_SMSG_LOOT_RELEASE_RESPONSE SMSG_LOOT_RELEASE_RESPONSE;
        tbc_SMSG_LOOT_REMOVED SMSG_LOOT_REMOVED;
        tbc_SMSG_LOOT_MONEY_NOTIFY SMSG_LOOT_MONEY_NOTIFY;
        tbc_SMSG_ITEM_PUSH_RESULT SMSG_ITEM_PUSH_RESULT;
        tbc_SMSG_DUEL_REQUESTED SMSG_DUEL_REQUESTED;
        tbc_SMSG_DUEL_COMPLETE SMSG_DUEL_COMPLETE;
        tbc_SMSG_DUEL_WINNER SMSG_DUEL_WINNER;
        tbc_SMSG_MOUNTRESULT SMSG_MOUNTRESULT;
        tbc_SMSG_MOUNTSPECIAL_ANIM SMSG_MOUNTSPECIAL_ANIM;
        tbc_SMSG_PET_TAME_FAILURE SMSG_PET_TAME_FAILURE;
        tbc_SMSG_PET_NAME_INVALID SMSG_PET_NAME_INVALID;
        tbc_SMSG_PET_SPELLS SMSG_PET_SPELLS;
        tbc_SMSG_PET_MODE SMSG_PET_MODE;
        tbc_SMSG_GOSSIP_MESSAGE SMSG_GOSSIP_MESSAGE;
        tbc_SMSG_NPC_TEXT_UPDATE SMSG_NPC_TEXT_UPDATE;
        tbc_SMSG_QUESTGIVER_STATUS SMSG_QUESTGIVER_STATUS;
        tbc_SMSG_QUESTGIVER_QUEST_LIST SMSG_QUESTGIVER_QUEST_LIST;
        tbc_SMSG_QUESTGIVER_QUEST_DETAILS SMSG_QUESTGIVER_QUEST_DETAILS;
        tbc_SMSG_QUESTGIVER_REQUEST_ITEMS SMSG_QUESTGIVER_REQUEST_ITEMS;
        tbc_SMSG_QUESTGIVER_OFFER_REWARD SMSG_QUESTGIVER_OFFER_REWARD;
        tbc_SMSG_QUESTGIVER_QUEST_INVALID SMSG_QUESTGIVER_QUEST_INVALID;
        tbc_SMSG_QUESTGIVER_QUEST_COMPLETE SMSG_QUESTGIVER_QUEST_COMPLETE;
        tbc_SMSG_QUESTGIVER_QUEST_FAILED SMSG_QUESTGIVER_QUEST_FAILED;
        tbc_SMSG_QUESTUPDATE_FAILED SMSG_QUESTUPDATE_FAILED;
        tbc_SMSG_QUESTUPDATE_FAILEDTIMER SMSG_QUESTUPDATE_FAILEDTIMER;
        tbc_SMSG_QUESTUPDATE_COMPLETE SMSG_QUESTUPDATE_COMPLETE;
        tbc_SMSG_QUESTUPDATE_ADD_KILL SMSG_QUESTUPDATE_ADD_KILL;
        tbc_SMSG_QUESTUPDATE_ADD_ITEM SMSG_QUESTUPDATE_ADD_ITEM;
        tbc_SMSG_QUEST_CONFIRM_ACCEPT SMSG_QUEST_CONFIRM_ACCEPT;
        tbc_SMSG_LIST_INVENTORY SMSG_LIST_INVENTORY;
        tbc_SMSG_SELL_ITEM SMSG_SELL_ITEM;
        tbc_SMSG_BUY_ITEM SMSG_BUY_ITEM;
        tbc_SMSG_BUY_FAILED SMSG_BUY_FAILED;
        tbc_SMSG_SHOWTAXINODES SMSG_SHOWTAXINODES;
        tbc_SMSG_TAXINODE_STATUS SMSG_TAXINODE_STATUS;
        tbc_SMSG_ACTIVATETAXIREPLY SMSG_ACTIVATETAXIREPLY;
        tbc_SMSG_TRAINER_LIST SMSG_TRAINER_LIST;
        tbc_SMSG_TRAINER_BUY_SUCCEEDED SMSG_TRAINER_BUY_SUCCEEDED;
        tbc_SMSG_TRAINER_BUY_FAILED SMSG_TRAINER_BUY_FAILED;
        tbc_SMSG_SHOW_BANK SMSG_SHOW_BANK;
        tbc_SMSG_BUY_BANK_SLOT_RESULT SMSG_BUY_BANK_SLOT_RESULT;
        tbc_SMSG_PETITION_SHOWLIST SMSG_PETITION_SHOWLIST;
        tbc_SMSG_PETITION_SHOW_SIGNATURES SMSG_PETITION_SHOW_SIGNATURES;
        tbc_SMSG_PETITION_SIGN_RESULTS SMSG_PETITION_SIGN_RESULTS;
        tbc_MSG_PETITION_DECLINE MSG_PETITION_DECLINE;
        tbc_SMSG_TURN_IN_PETITION_RESULTS SMSG_TURN_IN_PETITION_RESULTS;
        tbc_SMSG_PETITION_QUERY_RESPONSE SMSG_PETITION_QUERY_RESPONSE;
        tbc_SMSG_NOTIFICATION SMSG_NOTIFICATION;
        tbc_SMSG_PLAYED_TIME SMSG_PLAYED_TIME;
        tbc_SMSG_QUERY_TIME_RESPONSE SMSG_QUERY_TIME_RESPONSE;
        tbc_SMSG_LOG_XPGAIN SMSG_LOG_XPGAIN;
        tbc_SMSG_LEVELUP_INFO SMSG_LEVELUP_INFO;
        tbc_MSG_MINIMAP_PING_Server MSG_MINIMAP_PING_Server;
        tbc_SMSG_ENCHANTMENTLOG SMSG_ENCHANTMENTLOG;
        tbc_SMSG_START_MIRROR_TIMER SMSG_START_MIRROR_TIMER;
        tbc_SMSG_PAUSE_MIRROR_TIMER SMSG_PAUSE_MIRROR_TIMER;
        tbc_SMSG_STOP_MIRROR_TIMER SMSG_STOP_MIRROR_TIMER;
        tbc_SMSG_PONG SMSG_PONG;
        tbc_SMSG_CLEAR_COOLDOWN SMSG_CLEAR_COOLDOWN;
        tbc_SMSG_GAMEOBJECT_PAGETEXT SMSG_GAMEOBJECT_PAGETEXT;
        tbc_SMSG_SPELL_DELAYED SMSG_SPELL_DELAYED;
        tbc_SMSG_ITEM_TIME_UPDATE SMSG_ITEM_TIME_UPDATE;
        tbc_SMSG_ITEM_ENCHANT_TIME_UPDATE SMSG_ITEM_ENCHANT_TIME_UPDATE;
        tbc_SMSG_AUTH_CHALLENGE SMSG_AUTH_CHALLENGE;
        tbc_SMSG_AUTH_RESPONSE SMSG_AUTH_RESPONSE;
        tbc_MSG_SAVE_GUILD_EMBLEM_Server MSG_SAVE_GUILD_EMBLEM_Server;
        tbc_MSG_TABARDVENDOR_ACTIVATE MSG_TABARDVENDOR_ACTIVATE;
        tbc_SMSG_PLAY_SPELL_VISUAL SMSG_PLAY_SPELL_VISUAL;
        tbc_SMSG_PARTYKILLLOG SMSG_PARTYKILLLOG;
        tbc_SMSG_COMPRESSED_UPDATE_OBJECT SMSG_COMPRESSED_UPDATE_OBJECT;
        tbc_SMSG_PLAY_SPELL_IMPACT SMSG_PLAY_SPELL_IMPACT;
        tbc_SMSG_EXPLORATION_EXPERIENCE SMSG_EXPLORATION_EXPERIENCE;
        tbc_MSG_RANDOM_ROLL_Server MSG_RANDOM_ROLL_Server;
        tbc_SMSG_ENVIRONMENTAL_DAMAGE_LOG SMSG_ENVIRONMENTAL_DAMAGE_LOG;
        tbc_MSG_LOOKING_FOR_GROUP_Server MSG_LOOKING_FOR_GROUP_Server;
        tbc_SMSG_REMOVED_SPELL SMSG_REMOVED_SPELL;
        tbc_SMSG_GMTICKET_CREATE SMSG_GMTICKET_CREATE;
        tbc_SMSG_GMTICKET_UPDATETEXT SMSG_GMTICKET_UPDATETEXT;
        tbc_SMSG_ACCOUNT_DATA_TIMES SMSG_ACCOUNT_DATA_TIMES;
        tbc_SMSG_UPDATE_ACCOUNT_DATA SMSG_UPDATE_ACCOUNT_DATA;
        tbc_SMSG_GMTICKET_GETTICKET SMSG_GMTICKET_GETTICKET;
        tbc_SMSG_GAMEOBJECT_SPAWN_ANIM SMSG_GAMEOBJECT_SPAWN_ANIM;
        tbc_SMSG_GAMEOBJECT_DESPAWN_ANIM SMSG_GAMEOBJECT_DESPAWN_ANIM;
        tbc_MSG_CORPSE_QUERY_Server MSG_CORPSE_QUERY_Server;
        tbc_SMSG_GMTICKET_DELETETICKET SMSG_GMTICKET_DELETETICKET;
        tbc_SMSG_GMTICKET_SYSTEMSTATUS SMSG_GMTICKET_SYSTEMSTATUS;
        tbc_SMSG_SET_REST_START SMSG_SET_REST_START;
        tbc_SMSG_SPIRIT_HEALER_CONFIRM SMSG_SPIRIT_HEALER_CONFIRM;
        tbc_SMSG_GOSSIP_POI SMSG_GOSSIP_POI;
        tbc_SMSG_LOGIN_VERIFY_WORLD SMSG_LOGIN_VERIFY_WORLD;
        tbc_SMSG_SEND_MAIL_RESULT SMSG_SEND_MAIL_RESULT;
        tbc_SMSG_MAIL_LIST_RESULT SMSG_MAIL_LIST_RESULT;
        tbc_SMSG_BATTLEFIELD_LIST SMSG_BATTLEFIELD_LIST;
        tbc_SMSG_ITEM_TEXT_QUERY_RESPONSE SMSG_ITEM_TEXT_QUERY_RESPONSE;
        tbc_SMSG_SPELLLOGMISS SMSG_SPELLLOGMISS;
        tbc_SMSG_SPELLLOGEXECUTE SMSG_SPELLLOGEXECUTE;
        tbc_SMSG_PERIODICAURALOG SMSG_PERIODICAURALOG;
        tbc_SMSG_SPELLDAMAGESHIELD SMSG_SPELLDAMAGESHIELD;
        tbc_SMSG_SPELLNONMELEEDAMAGELOG SMSG_SPELLNONMELEEDAMAGELOG;
        tbc_SMSG_RESURRECT_FAILED SMSG_RESURRECT_FAILED;
        tbc_SMSG_ZONE_UNDER_ATTACK SMSG_ZONE_UNDER_ATTACK;
        tbc_MSG_AUCTION_HELLO_Server MSG_AUCTION_HELLO_Server;
        tbc_SMSG_AUCTION_COMMAND_RESULT SMSG_AUCTION_COMMAND_RESULT;
        tbc_SMSG_AUCTION_LIST_RESULT SMSG_AUCTION_LIST_RESULT;
        tbc_SMSG_AUCTION_OWNER_LIST_RESULT SMSG_AUCTION_OWNER_LIST_RESULT;
        tbc_SMSG_AUCTION_BIDDER_NOTIFICATION SMSG_AUCTION_BIDDER_NOTIFICATION;
        tbc_SMSG_AUCTION_OWNER_NOTIFICATION SMSG_AUCTION_OWNER_NOTIFICATION;
        tbc_SMSG_PROCRESIST SMSG_PROCRESIST;
        tbc_SMSG_DISPEL_FAILED SMSG_DISPEL_FAILED;
        tbc_SMSG_SPELLORDAMAGE_IMMUNE SMSG_SPELLORDAMAGE_IMMUNE;
        tbc_SMSG_AUCTION_BIDDER_LIST_RESULT SMSG_AUCTION_BIDDER_LIST_RESULT;
        tbc_SMSG_SET_FLAT_SPELL_MODIFIER SMSG_SET_FLAT_SPELL_MODIFIER;
        tbc_SMSG_SET_PCT_SPELL_MODIFIER SMSG_SET_PCT_SPELL_MODIFIER;
        tbc_SMSG_CORPSE_RECLAIM_DELAY SMSG_CORPSE_RECLAIM_DELAY;
        tbc_MSG_LIST_STABLED_PETS_Server MSG_LIST_STABLED_PETS_Server;
        tbc_SMSG_STABLE_RESULT SMSG_STABLE_RESULT;
        tbc_MSG_QUEST_PUSH_RESULT MSG_QUEST_PUSH_RESULT;
        tbc_SMSG_PLAY_MUSIC SMSG_PLAY_MUSIC;
        tbc_SMSG_PLAY_OBJECT_SOUND SMSG_PLAY_OBJECT_SOUND;
        tbc_SMSG_SPELLDISPELLOG SMSG_SPELLDISPELLOG;
        tbc_MSG_QUERY_NEXT_MAIL_TIME_Server MSG_QUERY_NEXT_MAIL_TIME_Server;
        tbc_SMSG_RECEIVED_MAIL SMSG_RECEIVED_MAIL;
        tbc_SMSG_RAID_GROUP_ONLY SMSG_RAID_GROUP_ONLY;
        tbc_SMSG_PVP_CREDIT SMSG_PVP_CREDIT;
        tbc_SMSG_AUCTION_REMOVED_NOTIFICATION SMSG_AUCTION_REMOVED_NOTIFICATION;
        tbc_SMSG_SERVER_MESSAGE SMSG_SERVER_MESSAGE;
        tbc_SMSG_MEETINGSTONE_SETQUEUE SMSG_MEETINGSTONE_SETQUEUE;
        tbc_SMSG_STANDSTATE_UPDATE SMSG_STANDSTATE_UPDATE;
        tbc_SMSG_LOOT_ALL_PASSED SMSG_LOOT_ALL_PASSED;
        tbc_SMSG_LOOT_ROLL_WON SMSG_LOOT_ROLL_WON;
        tbc_SMSG_LOOT_START_ROLL SMSG_LOOT_START_ROLL;
        tbc_SMSG_LOOT_ROLL SMSG_LOOT_ROLL;
        tbc_SMSG_LOOT_MASTER_LIST SMSG_LOOT_MASTER_LIST;
        tbc_SMSG_SET_FORCED_REACTIONS SMSG_SET_FORCED_REACTIONS;
        tbc_SMSG_SPELL_FAILED_OTHER SMSG_SPELL_FAILED_OTHER;
        tbc_SMSG_CHAT_PLAYER_NOT_FOUND SMSG_CHAT_PLAYER_NOT_FOUND;
        tbc_MSG_TALENT_WIPE_CONFIRM_Server MSG_TALENT_WIPE_CONFIRM_Server;
        tbc_SMSG_SUMMON_REQUEST SMSG_SUMMON_REQUEST;
        tbc_SMSG_MONSTER_MOVE_TRANSPORT SMSG_MONSTER_MOVE_TRANSPORT;
        tbc_MSG_MOVE_FEATHER_FALL_Server MSG_MOVE_FEATHER_FALL_Server;
        tbc_MSG_MOVE_WATER_WALK MSG_MOVE_WATER_WALK;
        tbc_SMSG_DUEL_COUNTDOWN SMSG_DUEL_COUNTDOWN;
        tbc_SMSG_AREA_TRIGGER_MESSAGE SMSG_AREA_TRIGGER_MESSAGE;
        tbc_SMSG_PLAYER_SKINNED SMSG_PLAYER_SKINNED;
        tbc_MSG_PETITION_RENAME MSG_PETITION_RENAME;
        tbc_SMSG_INIT_WORLD_STATES SMSG_INIT_WORLD_STATES;
        tbc_SMSG_UPDATE_WORLD_STATE SMSG_UPDATE_WORLD_STATE;
        tbc_SMSG_ITEM_NAME_QUERY_RESPONSE SMSG_ITEM_NAME_QUERY_RESPONSE;
        tbc_SMSG_PET_ACTION_FEEDBACK SMSG_PET_ACTION_FEEDBACK;
        tbc_SMSG_CHAR_RENAME SMSG_CHAR_RENAME;
        tbc_SMSG_INSTANCE_SAVE_CREATED SMSG_INSTANCE_SAVE_CREATED;
        tbc_SMSG_RAID_INSTANCE_INFO SMSG_RAID_INSTANCE_INFO;
        tbc_SMSG_PLAY_SOUND SMSG_PLAY_SOUND;
        tbc_SMSG_BATTLEFIELD_STATUS SMSG_BATTLEFIELD_STATUS;
        tbc_MSG_INSPECT_HONOR_STATS_Server MSG_INSPECT_HONOR_STATS_Server;
        tbc_SMSG_FORCE_WALK_SPEED_CHANGE SMSG_FORCE_WALK_SPEED_CHANGE;
        tbc_SMSG_FORCE_SWIM_BACK_SPEED_CHANGE SMSG_FORCE_SWIM_BACK_SPEED_CHANGE;
        tbc_SMSG_FORCE_TURN_RATE_CHANGE SMSG_FORCE_TURN_RATE_CHANGE;
        tbc_SMSG_AREA_SPIRIT_HEALER_TIME SMSG_AREA_SPIRIT_HEALER_TIME;
        tbc_SMSG_WARDEN_DATA SMSG_WARDEN_DATA;
        tbc_SMSG_GROUP_JOINED_BATTLEGROUND SMSG_GROUP_JOINED_BATTLEGROUND;
        tbc_MSG_BATTLEGROUND_PLAYER_POSITIONS_Server MSG_BATTLEGROUND_PLAYER_POSITIONS_Server;
        tbc_SMSG_BINDER_CONFIRM SMSG_BINDER_CONFIRM;
        tbc_SMSG_BATTLEGROUND_PLAYER_JOINED SMSG_BATTLEGROUND_PLAYER_JOINED;
        tbc_SMSG_BATTLEGROUND_PLAYER_LEFT SMSG_BATTLEGROUND_PLAYER_LEFT;
        tbc_SMSG_ADDON_INFO SMSG_ADDON_INFO;
        tbc_SMSG_PET_UNLEARN_CONFIRM SMSG_PET_UNLEARN_CONFIRM;
        tbc_SMSG_PARTY_MEMBER_STATS_FULL SMSG_PARTY_MEMBER_STATS_FULL;
        tbc_SMSG_WEATHER SMSG_WEATHER;
        tbc_SMSG_RAID_INSTANCE_MESSAGE SMSG_RAID_INSTANCE_MESSAGE;
        tbc_SMSG_CHAT_RESTRICTED SMSG_CHAT_RESTRICTED;
        tbc_SMSG_SPLINE_SET_RUN_SPEED SMSG_SPLINE_SET_RUN_SPEED;
        tbc_SMSG_SPLINE_SET_RUN_BACK_SPEED SMSG_SPLINE_SET_RUN_BACK_SPEED;
        tbc_SMSG_SPLINE_SET_SWIM_SPEED SMSG_SPLINE_SET_SWIM_SPEED;
        tbc_SMSG_SPLINE_SET_WALK_SPEED SMSG_SPLINE_SET_WALK_SPEED;
        tbc_SMSG_SPLINE_SET_SWIM_BACK_SPEED SMSG_SPLINE_SET_SWIM_BACK_SPEED;
        tbc_SMSG_SPLINE_SET_TURN_RATE SMSG_SPLINE_SET_TURN_RATE;
        tbc_SMSG_SPLINE_MOVE_UNROOT SMSG_SPLINE_MOVE_UNROOT;
        tbc_SMSG_SPLINE_MOVE_FEATHER_FALL SMSG_SPLINE_MOVE_FEATHER_FALL;
        tbc_SMSG_SPLINE_MOVE_NORMAL_FALL SMSG_SPLINE_MOVE_NORMAL_FALL;
        tbc_SMSG_SPLINE_MOVE_SET_HOVER SMSG_SPLINE_MOVE_SET_HOVER;
        tbc_SMSG_SPLINE_MOVE_UNSET_HOVER SMSG_SPLINE_MOVE_UNSET_HOVER;
        tbc_SMSG_SPLINE_MOVE_WATER_WALK SMSG_SPLINE_MOVE_WATER_WALK;
        tbc_SMSG_SPLINE_MOVE_LAND_WALK SMSG_SPLINE_MOVE_LAND_WALK;
        tbc_SMSG_SPLINE_MOVE_START_SWIM SMSG_SPLINE_MOVE_START_SWIM;
        tbc_SMSG_SPLINE_MOVE_STOP_SWIM SMSG_SPLINE_MOVE_STOP_SWIM;
        tbc_SMSG_SPLINE_MOVE_SET_RUN_MODE SMSG_SPLINE_MOVE_SET_RUN_MODE;
        tbc_SMSG_SPLINE_MOVE_SET_WALK_MODE SMSG_SPLINE_MOVE_SET_WALK_MODE;
        tbc_MSG_MOVE_TIME_SKIPPED_Server MSG_MOVE_TIME_SKIPPED_Server;
        tbc_SMSG_SPLINE_MOVE_ROOT SMSG_SPLINE_MOVE_ROOT;
        tbc_SMSG_INVALIDATE_PLAYER SMSG_INVALIDATE_PLAYER;
        tbc_SMSG_INSTANCE_RESET SMSG_INSTANCE_RESET;
        tbc_SMSG_INSTANCE_RESET_FAILED SMSG_INSTANCE_RESET_FAILED;
        tbc_SMSG_UPDATE_LAST_INSTANCE SMSG_UPDATE_LAST_INSTANCE;
        tbc_MSG_RAID_TARGET_UPDATE_Server MSG_RAID_TARGET_UPDATE_Server;
        tbc_MSG_RAID_READY_CHECK_Server MSG_RAID_READY_CHECK_Server;
        tbc_SMSG_PET_ACTION_SOUND SMSG_PET_ACTION_SOUND;
        tbc_SMSG_PET_DISMISS_SOUND SMSG_PET_DISMISS_SOUND;
        tbc_SMSG_GM_TICKET_STATUS_UPDATE SMSG_GM_TICKET_STATUS_UPDATE;
        tbc_MSG_SET_DUNGEON_DIFFICULTY_Server MSG_SET_DUNGEON_DIFFICULTY_Server;
        tbc_SMSG_UPDATE_INSTANCE_OWNERSHIP SMSG_UPDATE_INSTANCE_OWNERSHIP;
        tbc_SMSG_CHAT_PLAYER_AMBIGUOUS SMSG_CHAT_PLAYER_AMBIGUOUS;
        tbc_SMSG_SPELLINSTAKILLLOG SMSG_SPELLINSTAKILLLOG;
        tbc_SMSG_SPELL_UPDATE_CHAIN_TARGETS SMSG_SPELL_UPDATE_CHAIN_TARGETS;
        tbc_SMSG_SPELLSTEALLOG SMSG_SPELLSTEALLOG;
        tbc_SMSG_DEFENSE_MESSAGE SMSG_DEFENSE_MESSAGE;
        tbc_SMSG_INSTANCE_DIFFICULTY SMSG_INSTANCE_DIFFICULTY;
        tbc_SMSG_MOTD SMSG_MOTD;
        tbc_SMSG_MOVE_SET_FLIGHT SMSG_MOVE_SET_FLIGHT;
        tbc_SMSG_MOVE_UNSET_FLIGHT SMSG_MOVE_UNSET_FLIGHT;
        tbc_SMSG_MOVE_SET_CAN_FLY SMSG_MOVE_SET_CAN_FLY;
        tbc_SMSG_MOVE_UNSET_CAN_FLY SMSG_MOVE_UNSET_CAN_FLY;
        tbc_SMSG_ARENA_TEAM_COMMAND_RESULT SMSG_ARENA_TEAM_COMMAND_RESULT;
        tbc_SMSG_ARENA_TEAM_QUERY_RESPONSE SMSG_ARENA_TEAM_QUERY_RESPONSE;
        tbc_SMSG_ARENA_TEAM_ROSTER SMSG_ARENA_TEAM_ROSTER;
        tbc_SMSG_ARENA_TEAM_INVITE SMSG_ARENA_TEAM_INVITE;
        tbc_SMSG_ARENA_TEAM_EVENT SMSG_ARENA_TEAM_EVENT;
        tbc_MSG_MOVE_START_ASCEND_Server MSG_MOVE_START_ASCEND_Server;
        tbc_MSG_MOVE_STOP_ASCEND_Server MSG_MOVE_STOP_ASCEND_Server;
        tbc_SMSG_ARENA_TEAM_STATS SMSG_ARENA_TEAM_STATS;
        tbc_SMSG_LFG_UPDATE SMSG_LFG_UPDATE;
        tbc_SMSG_LFG_UPDATE_LFM SMSG_LFG_UPDATE_LFM;
        tbc_SMSG_LFG_UPDATE_LFG SMSG_LFG_UPDATE_LFG;
        tbc_SMSG_LFG_UPDATE_QUEUED SMSG_LFG_UPDATE_QUEUED;
        tbc_SMSG_TITLE_EARNED SMSG_TITLE_EARNED;
        tbc_SMSG_ARENA_ERROR SMSG_ARENA_ERROR;
        tbc_MSG_INSPECT_ARENA_TEAMS_Server MSG_INSPECT_ARENA_TEAMS_Server;
        tbc_SMSG_DEATH_RELEASE_LOC SMSG_DEATH_RELEASE_LOC;
        tbc_MSG_MOVE_SET_FLIGHT_SPEED_Server MSG_MOVE_SET_FLIGHT_SPEED_Server;
        tbc_MSG_MOVE_SET_FLIGHT_BACK_SPEED MSG_MOVE_SET_FLIGHT_BACK_SPEED;
        tbc_SMSG_FORCE_FLIGHT_SPEED_CHANGE SMSG_FORCE_FLIGHT_SPEED_CHANGE;
        tbc_SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE;
        tbc_SMSG_SPLINE_SET_FLIGHT_SPEED SMSG_SPLINE_SET_FLIGHT_SPEED;
        tbc_SMSG_SPLINE_SET_FLIGHT_BACK_SPEED SMSG_SPLINE_SET_FLIGHT_BACK_SPEED;
        tbc_SMSG_FLIGHT_SPLINE_SYNC SMSG_FLIGHT_SPLINE_SYNC;
        tbc_SMSG_REALM_SPLIT SMSG_REALM_SPLIT;
        tbc_SMSG_TIME_SYNC_REQ SMSG_TIME_SYNC_REQ;
        tbc_SMSG_RESET_FAILED_NOTIFY SMSG_RESET_FAILED_NOTIFY;
        tbc_SMSG_UPDATE_COMBO_POINTS SMSG_UPDATE_COMBO_POINTS;
        tbc_SMSG_SET_EXTRA_AURA_INFO SMSG_SET_EXTRA_AURA_INFO;
        tbc_SMSG_SET_EXTRA_AURA_INFO_NEED_UPDATE SMSG_SET_EXTRA_AURA_INFO_NEED_UPDATE;
        tbc_SMSG_CLEAR_EXTRA_AURA_INFO SMSG_CLEAR_EXTRA_AURA_INFO;
        tbc_MSG_MOVE_START_DESCEND_Server MSG_MOVE_START_DESCEND_Server;
        tbc_SMSG_DISMOUNT SMSG_DISMOUNT;
        tbc_MSG_MOVE_UPDATE_CAN_FLY_Server MSG_MOVE_UPDATE_CAN_FLY_Server;
        tbc_MSG_RAID_READY_CHECK_CONFIRM_Server MSG_RAID_READY_CHECK_CONFIRM_Server;
        tbc_SMSG_GM_MESSAGECHAT SMSG_GM_MESSAGECHAT;
        tbc_SMSG_CLEAR_TARGET SMSG_CLEAR_TARGET;
        tbc_SMSG_CROSSED_INEBRIATION_THRESHOLD SMSG_CROSSED_INEBRIATION_THRESHOLD;
        tbc_SMSG_KICK_REASON SMSG_KICK_REASON;
        tbc_SMSG_COMPLAIN_RESULT SMSG_COMPLAIN_RESULT;
        tbc_SMSG_FEATURE_SYSTEM_STATUS SMSG_FEATURE_SYSTEM_STATUS;
        tbc_SMSG_CHANNEL_MEMBER_COUNT SMSG_CHANNEL_MEMBER_COUNT;
        tbc_SMSG_GUILD_BANK_LIST SMSG_GUILD_BANK_LIST;
        tbc_MSG_GUILD_BANK_LOG_QUERY_Server MSG_GUILD_BANK_LOG_QUERY_Server;
        tbc_SMSG_USERLIST_ADD SMSG_USERLIST_ADD;
        tbc_SMSG_USERLIST_REMOVE SMSG_USERLIST_REMOVE;
        tbc_SMSG_USERLIST_UPDATE SMSG_USERLIST_UPDATE;
        tbc_SMSG_INSPECT_TALENT SMSG_INSPECT_TALENT;
        tbc_SMSG_LOOT_LIST SMSG_LOOT_LIST;
        tbc_MSG_GUILD_PERMISSIONS_Server MSG_GUILD_PERMISSIONS_Server;
        tbc_MSG_GUILD_BANK_MONEY_WITHDRAWN_Server MSG_GUILD_BANK_MONEY_WITHDRAWN_Server;
        tbc_MSG_GUILD_EVENT_LOG_QUERY_Server MSG_GUILD_EVENT_LOG_QUERY_Server;
        tbc_SMSG_MIRRORIMAGE_DATA SMSG_MIRRORIMAGE_DATA;
        tbc_MSG_QUERY_GUILD_BANK_TEXT_Server MSG_QUERY_GUILD_BANK_TEXT_Server;
        tbc_SMSG_OVERRIDE_LIGHT SMSG_OVERRIDE_LIGHT;
        tbc_SMSG_TOTEM_CREATED SMSG_TOTEM_CREATED;
        tbc_SMSG_QUESTGIVER_STATUS_MULTIPLE SMSG_QUESTGIVER_STATUS_MULTIPLE;
        tbc_SMSG_SET_PLAYER_DECLINED_NAMES_RESULT SMSG_SET_PLAYER_DECLINED_NAMES_RESULT;
        tbc_SMSG_SEND_UNLEARN_SPELLS SMSG_SEND_UNLEARN_SPELLS;
        tbc_SMSG_PROPOSE_LEVEL_GRANT SMSG_PROPOSE_LEVEL_GRANT;
        tbc_SMSG_REFER_A_FRIEND_FAILURE SMSG_REFER_A_FRIEND_FAILURE;
        tbc_SMSG_SPLINE_MOVE_SET_FLYING SMSG_SPLINE_MOVE_SET_FLYING;
        tbc_SMSG_SPLINE_MOVE_UNSET_FLYING SMSG_SPLINE_MOVE_UNSET_FLYING;
    } body;
} TbcServerOpcodeContainer;

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_server_opcode_write(WowWorldWriter* writer, const TbcServerOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT WowWorldResult tbc_server_opcode_read(WowWorldReader* reader, TbcServerOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT void tbc_server_opcode_free(TbcServerOpcodeContainer* opcodes);

WOW_WORLD_MESSAGES_C_EXPORT char* tbc_server_opcode_to_str(TbcServerOpcodeContainer* opcodes);
#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* WOW_WORLD_MESSAGES_TBC_H */
