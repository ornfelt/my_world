#tag_all versions "2.4.3";

enum ObjectType : u8 {
    OBJECT = 0;
    ITEM = 1;
    CONTAINER = 2;
    UNIT = 3;
    PLAYER = 4;
    GAME_OBJECT = 5;
    DYNAMIC_OBJECT = 6;
    CORPSE = 7;
}

struct MovementBlock {
    UpdateFlag update_flag;
    if (update_flag & LIVING) {
        /* All variables until newline are actually just a MovementInfo,
           but the if statement later requires access to flags. */
        MovementFlags flags;
        u8 extra_flags;
        u32 timestamp;
        Vector3d living_position;
        f32 living_orientation;
        if (flags & ON_TRANSPORT) {
            TransportInfo transport;
        }
        if (flags & SWIMMING) {
            f32 pitch1;
        } else if (flags & ONTRANSPORT) {
            f32 pitch2;
        }
        f32 fall_time;
        if (flags & JUMPING) {
            f32 z_speed;
            f32 cos_angle;
            f32 sin_angle;
            f32 xy_speed;
        }
        if (flags & SPLINE_ELEVATION) {
            f32 spline_elevation;
        }
        /* MovementInfo end */

        f32 walking_speed;
        f32 running_speed;
        f32 backwards_running_speed;
        f32 swimming_speed;
        f32 flying_speed;
        f32 backwards_flying_speed;
        f32 backwards_swimming_speed;
        f32 turn_rate;
        if (flags & SPLINE_ENABLED) {
            SplineFlag spline_flags;
            if (spline_flags & FINAL_ANGLE) {
                f32 angle;
            }
            else if (spline_flags & FINAL_TARGET) {
                Guid target;
            }
            else if (spline_flags & FINAL_POINT) {
                Vector3d spline_final_point;
            }
            u32 time_passed;
            u32 duration;
            u32 id;
            u32 amount_of_nodes;
            Vector3d[amount_of_nodes] nodes;
            Vector3d final_node;
        }
    }
    else if (update_flag & HAS_POSITION) {
        Vector3d position;
        f32 orientation;
    }
    if (update_flag & HIGH_GUID) {
        /// vmangos statically sets to 0
        u32 unknown0;
        u32 unknown1;
    }
    if (update_flag & ALL) {
        /// vmangos sets statically to 1
        u32 unknown2;
    }
    if (update_flag & MELEE_ATTACKING) {
        PackedGuid guid;
    }
    if (update_flag & TRANSPORT) {
        u32 transport_progress_in_ms;
    }
}

struct Object {
    UpdateType update_type;
    if (update_type == VALUES) {
        PackedGuid guid1;   
        UpdateMask mask1;
    }
    else if (update_type == MOVEMENT) {
        PackedGuid guid2;
        MovementBlock movement1;
    }
    else if (update_type == CREATE_OBJECT || update_type == CREATE_OBJECT2) {
        PackedGuid guid3;
        ObjectType object_type;
        MovementBlock movement2;
        UpdateMask mask2;
    }
    else if (update_type == OUT_OF_RANGE_OBJECTS
          || update_type == NEAR_OBJECTS) {      /* Complete */
        u32 count;
        PackedGuid[count] guids;
    }
}

smsg SMSG_UPDATE_OBJECT = 0x0A9 {
    u32 amount_of_objects;
    u8 has_transport;
    Object[amount_of_objects] objects;
}

