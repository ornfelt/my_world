#tag_all versions "1.12";

enum UpdateType : u8 {
    VALUES = 0;
    MOVEMENT = 1;
    CREATE_OBJECT = 2;
    CREATE_OBJECT2 = 3;
    OUT_OF_RANGE_OBJECTS = 4;
    NEAR_OBJECTS = 5;
} {
    versions = "2.4.3";
}

flag UpdateFlag : u8 {
    NONE = 0x00;
    SELF = 0x01;
    TRANSPORT = 0x02;
    MELEE_ATTACKING = 0x04;
    HIGH_GUID = 0x08;
    ALL = 0x10;
    LIVING = 0x20;
    HAS_POSITION = 0x40;
} {
    versions = "2.4.3";
}

flag SplineFlag : u32 {
    NONE = 0x00000000;
    DONE = 0x00000001;
    /// vmangos: Affects elevation computation
    FALLING = 0x00000002;
    UNKNOWN3 = 0x00000004;
    UNKNOWN4 = 0x00000008;
    UNKNOWN5 = 0x00000010;
    UNKNOWN6 = 0x00000020;
    UNKNOWN7 = 0x00000040;
    UNKNOWN8 = 0x00000080;
    RUN_MODE = 0x00000100;
    /// vmangos: Smooth movement(Catmullrom interpolation mode), flying animation
    FLYING = 0x00000200;
    NO_SPLINE = 0x00000400;
    UNKNOWN12 = 0x00000800;
    UNKNOWN13 = 0x00001000;
    UNKNOWN14 = 0x00002000;
    UNKNOWN15 = 0x00004000;
    UNKNOWN16 = 0x00008000;
    FINAL_POINT = 0x00010000;
    FINAL_TARGET = 0x00020000;
    FINAL_ANGLE = 0x00040000;
    /// vmangos: exists, but unknown what it does
    UNKNOWN19 = 0x00080000;
    /// vmangos: Movement by cycled spline
    CYCLIC = 0x00100000;
    /// vmangos: Everytimes appears with cyclic flag in monster move packet, erases first spline vertex after first cycle done
    ENTER_CYCLE = 0x00200000;
    /// vmangos: Will never arrive
    FROZEN = 0x00400000;
    UNKNOWN23 = 0x00800000;
    UNKNOWN24 = 0x01000000;
    /// vmangos: exists, but unknown what it does
    UNKNOWN25 = 0x02000000;
    UNKNOWN26 = 0x04000000;
    UNKNOWN27 = 0x08000000;
    UNKNOWN28 = 0x10000000;
    UNKNOWN29 = 0x20000000;
    UNKNOWN30 = 0x40000000;
    UNKNOWN31 = 0x80000000;
} {
    versions = "2";
}

enum ObjectType : u8 {
    OBJECT = 0;
    ITEM = 1;
    CONTAINER = 2;
    UNIT = 3;
    PLAYER = 4;
    GAME_OBJECT = 5;
    DYNAMIC_OBJECT = 6;
    CORPSE = 7;
}

struct MovementBlock {
    UpdateFlag update_flag;
    if (update_flag & LIVING) {
        /* All variables until newline are actually just a MovementInfo,
           but the if statement later requires access to flags. */
        MovementFlags flags;
        u32 timestamp;
        Vector3d living_position;
        f32 living_orientation;
        if (flags & ON_TRANSPORT) {
            PackedGuid transport_guid;
            Vector3d transport_position;
            f32 transport_orientation;
        }
        if (flags & SWIMMING) {
            f32 pitch;
        }
        f32 fall_time;
        if (flags & JUMPING) {
            f32 z_speed;
            f32 cos_angle;
            f32 sin_angle;
            f32 xy_speed;
        }
        if (flags & SPLINE_ELEVATION) {
            f32 spline_elevation;
        }
        /* MovementInfo end */

        f32 walking_speed;
        f32 running_speed;
        f32 backwards_running_speed;
        f32 swimming_speed;
        f32 backwards_swimming_speed;
        f32 turn_rate;
        if (flags & SPLINE_ENABLED) {
            SplineFlag spline_flags;
            if (spline_flags & FINAL_ANGLE) {
                f32 angle;
            }
            else if (spline_flags & FINAL_TARGET) {
                u64 target;
            }
            else if (spline_flags & FINAL_POINT) {
                Vector3d spline_final_point;
            }
            u32 time_passed;
            u32 duration;
            u32 id;
            u32 amount_of_nodes;
            Vector3d[amount_of_nodes] nodes;
            Vector3d final_node;
        }
    }
    else if (update_flag & HAS_POSITION) {
        Vector3d position;
        f32 orientation;
    }
    if (update_flag & HIGH_GUID) {
        /// vmangos statically sets to 0
        u32 unknown0;
    }
    if (update_flag & ALL) {
        /// vmangos sets statically to 1
        u32 unknown1;
    }
    if (update_flag & MELEE_ATTACKING) {
        PackedGuid guid;
    }
    if (update_flag & TRANSPORT) {
        u32 transport_progress_in_ms;
    }
}

struct Object {
    UpdateType update_type;
    if (update_type == VALUES) {
        PackedGuid guid1;   
        UpdateMask mask1;
    }
    else if (update_type == MOVEMENT) {
        PackedGuid guid2;
        MovementBlock movement1;
    }
    else if (update_type == CREATE_OBJECT || update_type == CREATE_OBJECT2) {
        PackedGuid guid3;
        ObjectType object_type;
        MovementBlock movement2;
        UpdateMask mask2;
    }
    else if (update_type == OUT_OF_RANGE_OBJECTS
          || update_type == NEAR_OBJECTS) {      /* Complete */
        u32 count;
        PackedGuid[count] guids;
    }
}

smsg SMSG_UPDATE_OBJECT = 0x0A9 {
    u32 amount_of_objects;
    u8 has_transport;
    Object[amount_of_objects] objects;
}

/// Most minimal package required to load into the world. Also requires a valid [SMSG_TUTORIAL_FLAGS] and [SMSG_LOGIN_VERIFY_WORLD].
test SMSG_UPDATE_OBJECT {
    has_transport = 0;
    objects = [
        {
            update_type = CREATE_OBJECT2;
            guid3 = 4;
            object_type = PLAYER;
            movement2 = {
                update_flag = LIVING | ALL | SELF;
                flags = NONE;
                timestamp = 0;
                living_position = {
                    x = -8949.95;
                    y = -132.493;
                    z = 83.5312;
                };
                living_orientation = 0.0;
                fall_time = 0;
                walking_speed = 1.0;
                running_speed = 7.0;
                backwards_running_speed = 4.5;
                swimming_speed = 0.0;
                backwards_swimming_speed = 0.0;
                turn_rate = 3.1415927;
                unknown1 = 1;
            };
            mask2 = {
                OBJECT_GUID = 4;
                OBJECT_TYPE = 0x19;
                UNIT_HEALTH = 100;
                UNIT_BYTES_0 = 0x01010101;
            };
        }
    ];
} [
    0x00, 0x61, /* size */
    0xa9, 0x00, /* opcode */
    0x01, 0x00, 0x00, 0x00, /* amount_of_objects */
    0x00, /* has_transport */
    0x03, /* update_type */
    0x01, 0x04, /* guid3 */
    0x04, /* object_type */
    0x31, /* update_flag */
    0x00, 0x00, 0x00, 0x00, /* flags */
    0x00, 0x00, 0x00, 0x00, /* timestamp */
    0xcd, 0xd7, 0x0b, 0xc6, /* living_position.x */
    0x35, 0x7e, 0x04, 0xc3, /* living_position.y */
    0xf9, 0x0f, 0xa7, 0x42, /* living_position.z */
    0x00, 0x00, 0x00, 0x00, /* living_orientation */
    0x00, 0x00, 0x00, 0x00, /* fall_time */
    0x00, 0x00, 0x80, 0x3f, /* walking_speed */
    0x00, 0x00, 0xe0, 0x40, /* running_speed */
    0x00, 0x00, 0x90, 0x40, /* backwards_running_speed */
    0x00, 0x00, 0x00, 0x00, /* swimming_speed */
    0x00, 0x00, 0x00, 0x00, /* backwards_swimming_speed */
    0xdb, 0x0f, 0x49, 0x40, /* turn_rate */
    0x01, 0x00, 0x00, 0x00, /* unknown1 */
    0x02, /* amount_of_blocks */
    0x07, 0x00, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, /* mask_blocks */
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* guid */
    0x19, 0x00, 0x00, 0x00, /* object_type */
    0x64, 0x00, 0x00, 0x00, /* unit_field_health */
    0x01, 0x01, 0x01, 0x01 /* unit_field_bytes */
]

test SMSG_UPDATE_OBJECT {
    has_transport = 0;
    objects = [
        {
            update_type = CREATE_OBJECT2;
            guid3 = 4;
            object_type = PLAYER;
            movement2 = {
                update_flag = LIVING | ALL | SELF;
                flags = NONE;
                timestamp = 0;
                living_position = {
                    x = -8949.95;
                    y = -132.493;
                    z = 83.5312;
                };
                living_orientation = 0.0;
                fall_time = 0;
                walking_speed = 1.0;
                running_speed = 7.0;
                backwards_running_speed = 4.5;
                swimming_speed = 0.0;
                backwards_swimming_speed = 0.0;
                turn_rate = 3.1415927;
                unknown1 = 1;
            };
            mask2 = {
                OBJECT_GUID = 4;
                OBJECT_SCALE_X = 1.0;
                OBJECT_TYPE = 0x19;
                UNIT_HEALTH = 100;
                UNIT_MAXHEALTH = 100;
                UNIT_LEVEL = 1;
                UNIT_FACTIONTEMPLATE = 1;
                UNIT_BYTES_0 = 0x01010101;
                UNIT_DISPLAYID = 50;
                UNIT_NATIVEDISPLAYID = 50;
            };
        }
    ];
} [
    0x00, 0x85, /* size */
    0xa9, 0x00, /* opcode */
    0x01, 0x00, 0x00, 0x00, /* amount_of_objects */
    0x00, /* has_transport */
    0x03, /* update_type */
    0x01, 0x04, /* guid3 */
    0x04, /* object_type */
    0x31, /* update_flag */
    0x00, 0x00, 0x00, 0x00, /* flags */
    0x00, 0x00, 0x00, 0x00, /* timestamp */
    0xcd, 0xd7, 0x0b, 0xc6, /* living_position.x */
    0x35, 0x7e, 0x04, 0xc3, /* living_position.y */
    0xf9, 0x0f, 0xa7, 0x42, /* living_position.z */
    0x00, 0x00, 0x00, 0x00, /* living_orientation */
    0x00, 0x00, 0x00, 0x00, /* fall_time */
    0x00, 0x00, 0x80, 0x3f, /* walking_speed */
    0x00, 0x00, 0xe0, 0x40, /* running_speed */
    0x00, 0x00, 0x90, 0x40, /* backwards_running_speed */
    0x00, 0x00, 0x00, 0x00, /* swimming_speed */
    0x00, 0x00, 0x00, 0x00, /* backwards_swimming_speed */
    0xdb, 0x0f, 0x49, 0x40, /* turn_rate */
    0x01, 0x00, 0x00, 0x00, /* unknown1 */
    5, /* Amount of u32 mask blocks */
    /* Mask blocks */
    23, 0, 64, 16, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0,
    /* End of mask blocks */
    4, 0, 0, 0, 0, 0, 0, 0, /* OBJECT_FIELD_GUID (4) (notice unpacked u64) */
    25, 0, 0, 0, /* OBJECT_FIELD_TYPE (16 | 8 | 1) (TYPE_PLAYER | TYPE_UNIT | TYPE_OBJECT) */
    0, 0, 128, 63, /* Scale (1.0) */
    100, 0, 0, 0, /* UNIT_FIELD_HEALTH (100) */
    100, 0, 0, 0, /* UNIT_FIELD_MAXHEALTH (100) */
    1, 0, 0, 0, /* UNIT_FIELD_LEVEL (1) */
    1, 0, 0, 0, /* UNIT_FIELD_FACTIONTEMPLATE (1) */
    1, /* UNIT_FIELD_BYTES[0] Race (Human) */
    1, /* UNIT_FIELD_BYTES[1] Class (Warrior) */
    1, /* UNIT_FIELD_BYTES[2] Gender (Female) */
    1, /* UNIT_FIELD_BYTES[3] Power (Rage) */
    50, 0, 0, 0, /* UNIT_FIELD_DISPLAYD (50, Human Female) */
    50, 0, 0, 0, /* UNIT_FIELD_NATIVEDISPLAYID (50, Human Female) */

]
