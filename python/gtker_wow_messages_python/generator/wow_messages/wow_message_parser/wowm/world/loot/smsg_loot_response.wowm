enum LootMethod : u8 {
    ERROR = 0;
    CORPSE                 = 1;
    PICKPOCKETING          = 2;
    FISHING                = 3;
    DISENCHANTING          = 4;
    /// unsupported by client, send LOOT_PICKPOCKETING instead
    SKINNING               = 6;
    /// unsupported by client, send LOOT_FISHING instead
    FISHINGHOLE            = 20;
    /// unsupported by client, send LOOT_FISHING instead
    FISHING_FAIL           = 21;
    /// unsupported by client, send LOOT_CORPSE instead
    INSIGNIA               = 22;
} {
    versions = "1 2 3";
}

enum LootMethodError : u8 {
    /// You don't have permission to loot that corpse.
    DIDNT_KILL               = 0;
    /// You are too far away to loot that corpse.
    TOO_FAR                  = 4;
    /// You must be facing the corpse to loot it.
    BAD_FACING               = 5;
    /// Someone is already looting that corpse.
    LOCKED                   = 6;
    /// You need to be standing up to loot something!
    NOTSTANDING              = 8;
    /// You can't loot anything while stunned!
    STUNNED                  = 9;
    /// Player not found
    PLAYER_NOT_FOUND         = 10;
    /// Maximum play time exceeded
    PLAY_TIME_EXCEEDED       = 11;
    /// That player's inventory is full
    MASTER_INV_FULL          = 12;
    /// Player has too many of that item already
    MASTER_UNIQUE_ITEM       = 13;
    /// Can't assign item to that player
    MASTER_OTHER             = 14;
    /// Your target has already had its pockets picked
    ALREADY_PICKPOCKETED     = 15;
    /// You can't do that while shapeshifted.
    NOT_WHILE_SHAPESHIFTED   = 16;
} {
    versions = "1 2 3";
}

enum LootSlotType : u8 {
    ///  player can loot the item.
    TYPE_ALLOW_LOOT = 0;
    ///  roll is ongoing. player cannot loot.
    TYPE_ROLL_ONGOING = 1;
    ///  item can only be distributed by group loot master.
    TYPE_MASTER = 2;
    ///  item is shown in red. player cannot loot.
    TYPE_LOCKED = 3;
    ///  ignore binding confirmation and etc, for single player looting
    TYPE_OWNER = 4;
} {
    versions = "1 2 3";
}

struct LootItem {
    u8 index;
    Item item;
    LootSlotType ty;
} {
    versions = "1 2 3";
}

smsg SMSG_LOOT_RESPONSE = 0x0160 {
    Guid guid;
    LootMethod loot_method;
    if (loot_method == ERROR) {
        LootMethodError loot_error;       
    }
    Gold gold;
    u8 amount_of_items;
    LootItem[amount_of_items] items;
} {
    versions = "1 2 3";
}
