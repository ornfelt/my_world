enum MailType : u8 {
    NORMAL = 0;
    AUCTION = 2;
    /// client send CMSG_CREATURE_QUERY on this mailmessagetype
    CREATURE = 3;
    /// client send CMSG_GAMEOBJECT_QUERY on this mailmessagetype
    GAMEOBJECT = 4;
    /// client send CMSG_ITEM_QUERY on this mailmessagetype
    ITEM = 5;
} {
    versions = "1.12 2.4.3 3.3.5";
}

struct Mail {
    u32 message_id;
    MailType message_type;
    if (message_type == NORMAL) {
        Guid sender;
    } else if (message_type == CREATURE
            || message_type == GAMEOBJECT)
    {
        u32 sender_id;
    }
    else if (message_type == AUCTION)
    {
        u32 auction_id;
    }
    CString subject;
    u32 item_text_id;
    /// cmangos/vmangos/mangoszero: set to 0
    u32 unknown1;
    /// cmangos/vmangos/mangoszero: stationery (Stationery.dbc)
    u32 stationery;
    Item item;
    u32 item_enchant_id;
    u32 item_random_property_id;
    u32 item_suffix_factor;
    u8 item_stack_size;
    u32 item_spell_charges;
    u32 max_durability;
    u32 durability;
    Gold money;
    u32 cash_on_delivery_amount;
    /// cmangos/vmangos/mangoszero: All have a comment with 'flags' but send the timestamp from the item.
    u32 checked_timestamp;
    f32 expiration_time;
    /// cmangos/vmangos/mangoszero: mail template (MailTemplate.dbc)
    u32 mail_template_id;
} {
    versions = "1.12";
}

struct Mail {
    u16 size = self.size;
    u32 message_id;
    MailType message_type;
    if (message_type == NORMAL) {
        Guid sender;
    } else if (message_type == CREATURE
            || message_type == GAMEOBJECT)
    {
        u32 sender_id;
    }
    else if (message_type == AUCTION)
    {
        u32 auction_id;
    }
    else if (message_type == ITEM) {
        Item item;
    }
    Gold cash_on_delivery;
    u32 item_text_id;
    u32 unknown;
    u32 stationery;
    Gold money;
    u32 flags;
    f32 expiration_time;
    /// cmangos/vmangos/mangoszero: mail template (MailTemplate.dbc)
    u32 mail_template_id;
    CString subject;
    u8 amount_of_items;
    MailListItem[amount_of_items] items;
} {
    versions = "2.4.3";
}

struct MailListItem {
    u8 item_index;
    u32 low_guid;
    Item item;
    MailListItemEnchant[6] enchants;
    u32 item_random_property_id;
    u32 item_suffix_factor;
    u8 item_amount;
    u32 charges;
    u32 max_durability;
    u32 durability;
} {
    versions = "2.4.3";
}

struct MailListItemEnchant {
    u32 charges;
    u32 duration;
    u32 enchant_id;
} {
    versions = "2.4.3 3";
}

smsg SMSG_MAIL_LIST_RESULT = 0x023B {
    u8 amount_of_mails;
    Mail[amount_of_mails] mails;
} {
    paste_versions = "1.12 2.4.3";
}

struct Mail {
    u16 size = self.size;
    u32 message_id;
    MailType message_type;
    if (message_type == NORMAL) {
        Guid sender;
    } else if (message_type == CREATURE
            || message_type == GAMEOBJECT)
    {
        u32 sender_id;
    }
    else if (message_type == AUCTION)
    {
        u32 auction_id;
    }
    else if (message_type == ITEM) {
        Item item;
    }
    Gold cash_on_delivery;
    u32 unknown;
    u32 stationery;
    Gold money;
    u32 flags;
    f32 expiration_time;
    /// cmangos/vmangos/mangoszero: mail template (MailTemplate.dbc)
    u32 mail_template_id;
    CString subject;
    CString message;
    u8 amount_of_items;
    MailListItem[amount_of_items] items;
} {
    versions = "3.3.5";
}

struct MailListItem {
    u8 item_index;
    u32 low_guid;
    Item item;
    MailListItemEnchant[7] enchants;
    u32 item_random_property_id;
    u32 item_suffix_factor;
    u8 item_amount;
    u32 charges;
    u32 max_durability;
    u32 durability;
    u8 unknown;
} {
    versions = "3.3.5";
}

smsg SMSG_MAIL_LIST_RESULT = 0x023B {
    /// azerothcore: this will display warning about undelivered mail to player if realCount > mailsCount
    u32 real_mail_amount;
    u8 amount_of_mails;
    Mail[amount_of_mails] mails;
} {
    versions = "3.3.5";
}
