enum AuctionCommandAction : u32 {
    /// ERR_AUCTION_STARTED
    STARTED = 0;
    /// ERR_AUCTION_REMOVED
    REMOVED = 1;
    /// ERR_AUCTION_BID_PLACED
    BID_PLACED = 2;
} {
    versions = "1.12 2 3";
}

enum AuctionCommandResult : u32 {
    /// depends on enum AuctionAction
    OK = 0;
    /// depends on enum `InventoryChangeResult`
    ERR_INVENTORY = 1;
    /// ERR_AUCTION_DATABASE_ERROR (default)
    ERR_DATABASE = 2;
    /// ERR_NOT_ENOUGH_MONEY
    ERR_NOT_ENOUGH_MONEY = 3;
    /// ERR_ITEM_NOT_FOUND
    ERR_ITEM_NOT_FOUND = 4;
    /// ERR_AUCTION_HIGHER_BID
    ERR_HIGHER_BID = 5;
    /// ERR_AUCTION_BID_INCREMENT
    ERR_BID_INCREMENT = 7;
    /// ERR_AUCTION_BID_OWN
    ERR_BID_OWN = 10;
    /// ERR_RESTRICTED_ACCOUNT
    ERR_RESTRICTED_ACCOUNT = 13;
} {
     versions = "1.12 2 3";
}

smsg SMSG_AUCTION_COMMAND_RESULT = 0x025B {
    u32 auction_id;
    AuctionCommandAction action;
    if (action == BID_PLACED) {
        AuctionCommandResult result;
        if (result == OK) {
            u32 auction_outbid1;
        } else if (result == ERR_INVENTORY) {
            InventoryResult inventory_result;
        } else if (result == ERR_HIGHER_BID) {
            Guid higher_bidder;
            u32 new_bid;
            u32 auction_outbid2;
        }
    } else {
        AuctionCommandResultTwo result2;
        if (result2 == ERR_INVENTORY) {
            InventoryResult inventory_result2;
        } else if (result2 == ERR_HIGHER_BID) {
            Guid higher_bidder2;
            u32 new_bid2;
            u32 auction_outbid3;
        }
    }
} {
    paste_versions = "1.12 2.4.3";
}

/* TODO RUST_SAME_ENUM_USED_MULTIPLE_TIMES Manually duplicated to work with Rust codegen */
enum AuctionCommandResultTwo : u32 {
    /// depends on enum AuctionAction
    OK = 0;
    /// depends on enum `InventoryChangeResult`
    ERR_INVENTORY = 1;
    /// ERR_AUCTION_DATABASE_ERROR (default)
    ERR_DATABASE = 2;
    /// ERR_NOT_ENOUGH_MONEY
    ERR_NOT_ENOUGH_MONEY = 3;
    /// ERR_ITEM_NOT_FOUND
    ERR_ITEM_NOT_FOUND = 4;
    /// ERR_AUCTION_HIGHER_BID
    ERR_HIGHER_BID = 5;
    /// ERR_AUCTION_BID_INCREMENT
    ERR_BID_INCREMENT = 7;
    /// ERR_AUCTION_BID_OWN
    ERR_BID_OWN = 10;
    /// ERR_RESTRICTED_ACCOUNT
    ERR_RESTRICTED_ACCOUNT = 13;
} {
     versions = "1.12 2 3";
}


smsg SMSG_AUCTION_COMMAND_RESULT = 0x025B {
    u32 auction_id;
    AuctionCommandAction action;
    AuctionCommandResult result;
    if (result == ERR_INVENTORY) {
        InventoryResult inventory_result;
    }
} {
    paste_versions = "3.3.5";
}

